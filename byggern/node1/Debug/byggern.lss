
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  00001f50  00001fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017d  00800288  00800288  0000216c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000364d  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001800  00000000  00000000  00005b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018b6  00000000  00000000  00007371  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00008c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a25  00000000  00000000  000092f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001359  00000000  00000000  00009d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000b072  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <this_init+0x7c>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e0 e5       	ldi	r30, 0x50	; 80
     3aa:	ff e1       	ldi	r31, 0x1F	; 31
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a8 38       	cpi	r26, 0x88	; 136
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	24 e0       	ldi	r18, 0x04	; 4
     3ba:	a8 e8       	ldi	r26, 0x88	; 136
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a5 30       	cpi	r26, 0x05	; 5
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xffb>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xffb>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "pwm.h"
#include "music.h"
#include "CAN.h"
volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	//cli();
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
	
	
	//sei();
	
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:


int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     41a:	0e 94 6a 07 	call	0xed4	; 0xed4 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     41e:	87 e5       	ldi	r24, 0x57	; 87
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	9a 87       	std	Y+10, r25	; 0x0a
     424:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     42a:	8d e0       	ldi	r24, 0x0D	; 13
     42c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     42e:	86 e1       	ldi	r24, 0x16	; 22
     430:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     432:	81 e2       	ldi	r24, 0x21	; 33
     434:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	printf("---------------------------------------\n\r");
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	97 e0       	ldi	r25, 0x07	; 7
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x4e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x58>
     45e:	00 00       	nop
	_delay_ms(500);
	//CAN_transmit_message(&message);
	
	CAN_controller_setMode(MODE_NORMAL);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 1e 04 	call	0x83c	; 0x83c <CAN_controller_setMode>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
		
		if (flag) {
			printf("Message received");
     46e:	03 e4       	ldi	r16, 0x43	; 67
     470:	11 e0       	ldi	r17, 0x01	; 1
	//music_playLisaGikk();                 
	while (1) {
		//
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     472:	0e 94 ad 04 	call	0x95a	; 0x95a <sleep_now>
		
		if (flag) {
     476:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end>
     47a:	88 23       	and	r24, r24
     47c:	a1 f0       	breq	.+40     	; 0x4a6 <main+0xa0>
			printf("Message received");
     47e:	1f 93       	push	r17
     480:	0f 93       	push	r16
     482:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
			flag=0;
     486:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>
			CAN_receiveMessage(&received_message);
     48a:	87 e9       	ldi	r24, 0x97	; 151
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	0e 94 20 03 	call	0x640	; 0x640 <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	6c e2       	ldi	r22, 0x2C	; 44
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
			
		}
		CAN_sendInputData();
     4a6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <CAN_sendInputData>
		
	}
     4aa:	e3 cf       	rjmp	.-58     	; 0x472 <main+0x6c>

000004ac <CAN_transmit_message>:
	
	
	
	
}
void CAN_transmit_message(CAN_message_t *message) {
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     4b4:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <buffer_number.2150>
     4b8:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <buffer_number.2150+0x1>
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	63 e0       	ldi	r22, 0x03	; 3
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divmodhi4>
     4c6:	28 2f       	mov	r18, r24
     4c8:	39 2f       	mov	r19, r25
     4ca:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <buffer_number.2150>
     4ce:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <buffer_number.2150+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     4d2:	21 30       	cpi	r18, 0x01	; 1
     4d4:	31 05       	cpc	r19, r1
     4d6:	01 f1       	breq	.+64     	; 0x518 <__stack+0x19>
     4d8:	22 30       	cpi	r18, 0x02	; 2
     4da:	31 05       	cpc	r19, r1
     4dc:	b9 f1       	breq	.+110    	; 0x54c <__stack+0x4d>
     4de:	23 2b       	or	r18, r19
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <CAN_transmit_message+0x38>
     4e2:	4d c0       	rjmp	.+154    	; 0x57e <__stack+0x7f>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     4e4:	f8 01       	movw	r30, r16
     4e6:	40 85       	ldd	r20, Z+8	; 0x08
     4e8:	51 85       	ldd	r21, Z+9	; 0x09
     4ea:	42 95       	swap	r20
     4ec:	44 0f       	add	r20, r20
     4ee:	40 7e       	andi	r20, 0xE0	; 224
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	62 e3       	ldi	r22, 0x32	; 50
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 ee       	ldi	r24, 0xE0	; 224
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     4fe:	f8 01       	movw	r30, r16
     500:	60 85       	ldd	r22, Z+8	; 0x08
     502:	71 85       	ldd	r23, Z+9	; 0x09
     504:	76 95       	lsr	r23
     506:	67 95       	ror	r22
     508:	76 95       	lsr	r23
     50a:	67 95       	ror	r22
     50c:	76 95       	lsr	r23
     50e:	67 95       	ror	r22
     510:	81 e3       	ldi	r24, 0x31	; 49
     512:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     516:	33 c0       	rjmp	.+102    	; 0x57e <__stack+0x7f>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     518:	f8 01       	movw	r30, r16
     51a:	40 85       	ldd	r20, Z+8	; 0x08
     51c:	51 85       	ldd	r21, Z+9	; 0x09
     51e:	42 95       	swap	r20
     520:	44 0f       	add	r20, r20
     522:	40 7e       	andi	r20, 0xE0	; 224
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	62 e4       	ldi	r22, 0x42	; 66
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 ee       	ldi	r24, 0xE0	; 224
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     532:	f8 01       	movw	r30, r16
     534:	60 85       	ldd	r22, Z+8	; 0x08
     536:	71 85       	ldd	r23, Z+9	; 0x09
     538:	76 95       	lsr	r23
     53a:	67 95       	ror	r22
     53c:	76 95       	lsr	r23
     53e:	67 95       	ror	r22
     540:	76 95       	lsr	r23
     542:	67 95       	ror	r22
     544:	81 e4       	ldi	r24, 0x41	; 65
     546:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_controller_write>
				
				break;
     54a:	19 c0       	rjmp	.+50     	; 0x57e <__stack+0x7f>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     54c:	f8 01       	movw	r30, r16
     54e:	40 85       	ldd	r20, Z+8	; 0x08
     550:	51 85       	ldd	r21, Z+9	; 0x09
     552:	42 95       	swap	r20
     554:	44 0f       	add	r20, r20
     556:	40 7e       	andi	r20, 0xE0	; 224
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	62 e5       	ldi	r22, 0x52	; 82
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 ee       	ldi	r24, 0xE0	; 224
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     566:	f8 01       	movw	r30, r16
     568:	60 85       	ldd	r22, Z+8	; 0x08
     56a:	71 85       	ldd	r23, Z+9	; 0x09
     56c:	76 95       	lsr	r23
     56e:	67 95       	ror	r22
     570:	76 95       	lsr	r23
     572:	67 95       	ror	r22
     574:	76 95       	lsr	r23
     576:	67 95       	ror	r22
     578:	81 e5       	ldi	r24, 0x51	; 81
     57a:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     57e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <buffer_number.2150>
     582:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <buffer_number.2150+0x1>
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	91 05       	cpc	r25, r1
     58a:	79 f0       	breq	.+30     	; 0x5aa <__stack+0xab>
     58c:	82 30       	cpi	r24, 0x02	; 2
     58e:	91 05       	cpc	r25, r1
     590:	b1 f0       	breq	.+44     	; 0x5be <__stack+0xbf>
     592:	89 2b       	or	r24, r25
     594:	e9 f4       	brne	.+58     	; 0x5d0 <__stack+0xd1>
			case 0:
				//printf("\n\rtransmitting data length: %i\n\r", message->data_length);
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     596:	f8 01       	movw	r30, r16
     598:	42 85       	ldd	r20, Z+10	; 0x0a
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	65 e3       	ldi	r22, 0x35	; 53
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	8f e0       	ldi	r24, 0x0F	; 15
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
				break;
     5a8:	13 c0       	rjmp	.+38     	; 0x5d0 <__stack+0xd1>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     5aa:	f8 01       	movw	r30, r16
     5ac:	42 85       	ldd	r20, Z+10	; 0x0a
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	65 e4       	ldi	r22, 0x45	; 69
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	8f e0       	ldi	r24, 0x0F	; 15
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
				break;
     5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__stack+0xd1>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     5be:	f8 01       	movw	r30, r16
     5c0:	42 85       	ldd	r20, Z+10	; 0x0a
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	65 e5       	ldi	r22, 0x55	; 85
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	8f e0       	ldi	r24, 0x0F	; 15
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     5d0:	f8 01       	movw	r30, r16
     5d2:	82 85       	ldd	r24, Z+10	; 0x0a
     5d4:	88 23       	and	r24, r24
     5d6:	61 f1       	breq	.+88     	; 0x630 <__stack+0x131>
     5d8:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     5da:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <buffer_number.2150>
     5de:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <buffer_number.2150+0x1>
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	91 05       	cpc	r25, r1
     5e6:	71 f0       	breq	.+28     	; 0x604 <__stack+0x105>
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	91 05       	cpc	r25, r1
     5ec:	a1 f0       	breq	.+40     	; 0x616 <__stack+0x117>
     5ee:	89 2b       	or	r24, r25
     5f0:	d1 f4       	brne	.+52     	; 0x626 <__stack+0x127>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     5f2:	f8 01       	movw	r30, r16
     5f4:	ec 0f       	add	r30, r28
     5f6:	f1 1d       	adc	r31, r1
     5f8:	60 81       	ld	r22, Z
     5fa:	86 e3       	ldi	r24, 0x36	; 54
     5fc:	8c 0f       	add	r24, r28
     5fe:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_controller_write>
				break;
     602:	11 c0       	rjmp	.+34     	; 0x626 <__stack+0x127>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     604:	f8 01       	movw	r30, r16
     606:	ec 0f       	add	r30, r28
     608:	f1 1d       	adc	r31, r1
     60a:	60 81       	ld	r22, Z
     60c:	86 e4       	ldi	r24, 0x46	; 70
     60e:	8c 0f       	add	r24, r28
     610:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_controller_write>
				break;
     614:	08 c0       	rjmp	.+16     	; 0x626 <__stack+0x127>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     616:	f8 01       	movw	r30, r16
     618:	ec 0f       	add	r30, r28
     61a:	f1 1d       	adc	r31, r1
     61c:	60 81       	ld	r22, Z
     61e:	86 e5       	ldi	r24, 0x56	; 86
     620:	8c 0f       	add	r24, r28
     622:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     626:	cf 5f       	subi	r28, 0xFF	; 255
     628:	f8 01       	movw	r30, r16
     62a:	82 85       	ldd	r24, Z+10	; 0x0a
     62c:	8c 13       	cpse	r24, r28
     62e:	d5 cf       	rjmp	.-86     	; 0x5da <__stack+0xdb>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     630:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <buffer_number.2150>
     634:	0e 94 01 04 	call	0x802	; 0x802 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     64c:	82 e6       	ldi	r24, 0x62	; 98
     64e:	0e 94 a1 03 	call	0x742	; 0x742 <CAN_controller_read>
     652:	c8 2f       	mov	r28, r24
     654:	81 e6       	ldi	r24, 0x61	; 97
     656:	0e 94 a1 03 	call	0x742	; 0x742 <CAN_controller_read>
     65a:	c2 95       	swap	r28
     65c:	c6 95       	lsr	r28
     65e:	c7 70       	andi	r28, 0x07	; 7
     660:	28 e0       	ldi	r18, 0x08	; 8
     662:	82 9f       	mul	r24, r18
     664:	c0 01       	movw	r24, r0
     666:	11 24       	eor	r1, r1
     668:	8c 0f       	add	r24, r28
     66a:	91 1d       	adc	r25, r1
     66c:	f7 01       	movw	r30, r14
     66e:	91 87       	std	Z+9, r25	; 0x09
     670:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     672:	85 e6       	ldi	r24, 0x65	; 101
     674:	0e 94 a1 03 	call	0x742	; 0x742 <CAN_controller_read>
     678:	8f 70       	andi	r24, 0x0F	; 15
     67a:	f7 01       	movw	r30, r14
     67c:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     67e:	82 85       	ldd	r24, Z+10	; 0x0a
     680:	88 23       	and	r24, r24
     682:	81 f0       	breq	.+32     	; 0x6a4 <CAN_receiveMessage+0x64>
     684:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     686:	0c 2f       	mov	r16, r28
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	86 e6       	ldi	r24, 0x66	; 102
     68c:	8c 0f       	add	r24, r28
     68e:	0e 94 a1 03 	call	0x742	; 0x742 <CAN_controller_read>
     692:	f7 01       	movw	r30, r14
     694:	e0 0f       	add	r30, r16
     696:	f1 1f       	adc	r31, r17
     698:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     69a:	cf 5f       	subi	r28, 0xFF	; 255
     69c:	f7 01       	movw	r30, r14
     69e:	82 85       	ldd	r24, Z+10	; 0x0a
     6a0:	8c 13       	cpse	r24, r28
     6a2:	f1 cf       	rjmp	.-30     	; 0x686 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	08 95       	ret

000006b0 <CAN_sendInputData>:

void CAN_sendInputData() {
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	2b 97       	sbiw	r28, 0x0b	; 11
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
	printf("sending input data");
     6c8:	84 e5       	ldi	r24, 0x54	; 84
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	CAN_message_t message;
	
	message.ID = 0x01;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9a 87       	std	Y+10, r25	; 0x0a
     6da:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     6dc:	86 e0       	ldi	r24, 0x06	; 6
     6de:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     6e0:	e5 e9       	ldi	r30, 0x95	; 149
     6e2:	f2 e0       	ldi	r31, 0x02	; 2
     6e4:	80 81       	ld	r24, Z
     6e6:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     6e8:	81 81       	ldd	r24, Z+1	; 0x01
     6ea:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     6ec:	03 e9       	ldi	r16, 0x93	; 147
     6ee:	12 e0       	ldi	r17, 0x02	; 2
     6f0:	f8 01       	movw	r30, r16
     6f2:	80 81       	ld	r24, Z
     6f4:	8b 83       	std	Y+3, r24	; 0x03
	printf("button left: %i\n\r", buttons.left_button);
     6f6:	1f 92       	push	r1
     6f8:	8f 93       	push	r24
     6fa:	87 e6       	ldi	r24, 0x67	; 103
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	9f 93       	push	r25
     700:	8f 93       	push	r24
     702:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	message.data[3] = buttons.right_button;
     706:	f8 01       	movw	r30, r16
     708:	81 81       	ldd	r24, Z+1	; 0x01
     70a:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     70c:	eb e8       	ldi	r30, 0x8B	; 139
     70e:	f2 e0       	ldi	r31, 0x02	; 2
     710:	80 81       	ld	r24, Z
     712:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     714:	81 81       	ldd	r24, Z+1	; 0x01
     716:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	0e 94 56 02 	call	0x4ac	; 0x4ac <CAN_transmit_message>
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	2b 96       	adiw	r28, 0x0b	; 11
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     742:	cf 93       	push	r28
     744:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	84 e0       	ldi	r24, 0x04	; 4
     74a:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	SPI_masterWrite(addr);
     754:	8c 2f       	mov	r24, r28
     756:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     75a:	0e 94 af 07 	call	0xf5e	; 0xf5e <SPI_masterRead>
     75e:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	84 e0       	ldi	r24, 0x04	; 4
     764:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	
	return data;
}
     768:	8c 2f       	mov	r24, r28
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	d8 2f       	mov	r29, r24
     774:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	SPI_masterWrite(addr);
     784:	8d 2f       	mov	r24, r29
     786:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	SPI_masterWrite(data);
     78a:	8c 2f       	mov	r24, r28
     78c:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	d8 2f       	mov	r29, r24
     7a6:	16 2f       	mov	r17, r22
     7a8:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	84 e0       	ldi	r24, 0x04	; 4
     7ae:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     7b2:	85 e0       	ldi	r24, 0x05	; 5
     7b4:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
		SPI_masterWrite(addr);
     7b8:	81 2f       	mov	r24, r17
     7ba:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
		SPI_masterWrite(mask);
     7be:	8d 2f       	mov	r24, r29
     7c0:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
		SPI_masterWrite(data);
     7c4:	8c 2f       	mov	r24, r28
     7c6:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>

}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	08 95       	ret

000007da <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	84 e0       	ldi	r24, 0x04	; 4
     7de:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	printf("Before spi write");
     7e2:	89 e7       	ldi	r24, 0x79	; 121
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	SPI_masterWrite(MCP_RESET);
     7ee:	80 ec       	ldi	r24, 0xC0	; 192
     7f0:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	84 e0       	ldi	r24, 0x04	; 4
     7f8:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
}
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	08 95       	ret

00000802 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     802:	cf 93       	push	r28
     804:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	switch (buffer) {
     80e:	c1 30       	cpi	r28, 0x01	; 1
     810:	41 f0       	breq	.+16     	; 0x822 <CAN_controller_RTS+0x20>
     812:	18 f0       	brcs	.+6      	; 0x81a <CAN_controller_RTS+0x18>
     814:	c2 30       	cpi	r28, 0x02	; 2
     816:	49 f0       	breq	.+18     	; 0x82a <CAN_controller_RTS+0x28>
     818:	0b c0       	rjmp	.+22     	; 0x830 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     81a:	81 e8       	ldi	r24, 0x81	; 129
     81c:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
			break;
     820:	07 c0       	rjmp	.+14     	; 0x830 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     822:	82 e8       	ldi	r24, 0x82	; 130
     824:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
			break;
     828:	03 c0       	rjmp	.+6      	; 0x830 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     82a:	84 e8       	ldi	r24, 0x84	; 132
     82c:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
}
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     842:	0e 94 ed 03 	call	0x7da	; 0x7da <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     846:	8e e0       	ldi	r24, 0x0E	; 14
     848:	0e 94 a1 03 	call	0x742	; 0x742 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     84c:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     84e:	80 38       	cpi	r24, 0x80	; 128
     850:	69 f0       	breq	.+26     	; 0x86c <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     852:	1f 92       	push	r1
     854:	8f 93       	push	r24
     856:	8a e8       	ldi	r24, 0x8A	; 138
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	9f 93       	push	r25
     85c:	8f 93       	push	r24
     85e:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
		return;
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	38 c0       	rjmp	.+112    	; 0x8dc <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     86c:	4c 2f       	mov	r20, r28
     86e:	4c 60       	ori	r20, 0x0C	; 12
     870:	6f e0       	ldi	r22, 0x0F	; 15
     872:	8e ee       	ldi	r24, 0xEE	; 238
     874:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     878:	41 e0       	ldi	r20, 0x01	; 1
     87a:	6b e2       	ldi	r22, 0x2B	; 43
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     882:	40 e6       	ldi	r20, 0x60	; 96
     884:	60 e6       	ldi	r22, 0x60	; 96
     886:	80 e6       	ldi	r24, 0x60	; 96
     888:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_controller_bitModify>
     88c:	2f ef       	ldi	r18, 0xFF	; 255
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	21 50       	subi	r18, 0x01	; 1
     894:	80 40       	sbci	r24, 0x00	; 0
     896:	90 40       	sbci	r25, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <CAN_controller_setMode+0x56>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <CAN_controller_setMode+0x60>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     89e:	8e e0       	ldi	r24, 0x0E	; 14
     8a0:	0e 94 a1 03 	call	0x742	; 0x742 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     8a4:	d8 2f       	mov	r29, r24
     8a6:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     8a8:	cd 17       	cp	r28, r29
     8aa:	61 f0       	breq	.+24     	; 0x8c4 <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     8ac:	1f 92       	push	r1
     8ae:	df 93       	push	r29
     8b0:	85 ea       	ldi	r24, 0xA5	; 165
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	9f 93       	push	r25
     8b6:	8f 93       	push	r24
     8b8:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     8c4:	1f 92       	push	r1
     8c6:	df 93       	push	r29
     8c8:	85 ec       	ldi	r24, 0xC5	; 197
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	9f 93       	push	r25
     8ce:	8f 93       	push	r24
     8d0:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     8e2:	0e 94 a2 07 	call	0xf44	; 0xf44 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     8e6:	80 e4       	ldi	r24, 0x40	; 64
     8e8:	0e 94 1e 04 	call	0x83c	; 0x83c <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     8ec:	8b b7       	in	r24, 0x3b	; 59
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     8f2:	85 b7       	in	r24, 0x35	; 53
     8f4:	82 60       	ori	r24, 0x02	; 2
     8f6:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     8f8:	85 b7       	in	r24, 0x35	; 53
     8fa:	8e 7f       	andi	r24, 0xFE	; 254
     8fc:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     8fe:	81 b3       	in	r24, 0x11	; 17
     900:	84 70       	andi	r24, 0x04	; 4
     902:	81 bb       	out	0x11, r24	; 17
     904:	2f ef       	ldi	r18, 0xFF	; 255
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	21 50       	subi	r18, 0x01	; 1
     90c:	80 40       	sbci	r24, 0x00	; 0
     90e:	90 40       	sbci	r25, 0x00	; 0
     910:	e1 f7       	brne	.-8      	; 0x90a <CAN_controller_init+0x28>
     912:	00 c0       	rjmp	.+0      	; 0x914 <CAN_controller_init+0x32>
     914:	00 c0       	rjmp	.+0      	; 0x916 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     916:	84 ed       	ldi	r24, 0xD4	; 212
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     922:	8e e0       	ldi	r24, 0x0E	; 14
     924:	0e 94 a1 03 	call	0x742	; 0x742 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     928:	1f 92       	push	r1
     92a:	8f 93       	push	r24
     92c:	8d ee       	ldi	r24, 0xED	; 237
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>

}
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	08 95       	ret

00000946 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     946:	85 b7       	in	r24, 0x35	; 53
     948:	8f 7e       	andi	r24, 0xEF	; 239
     94a:	85 bf       	out	0x35, r24	; 53
     94c:	84 b7       	in	r24, 0x34	; 52
     94e:	8f 7d       	andi	r24, 0xDF	; 223
     950:	84 bf       	out	0x34, r24	; 52
     952:	86 b7       	in	r24, 0x36	; 54
     954:	8f 77       	andi	r24, 0x7F	; 127
     956:	86 bf       	out	0x36, r24	; 54
     958:	08 95       	ret

0000095a <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     95a:	88 b1       	in	r24, 0x08	; 8
     95c:	88 68       	ori	r24, 0x88	; 136
     95e:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
     960:	85 b7       	in	r24, 0x35	; 53
     962:	80 62       	ori	r24, 0x20	; 32
     964:	85 bf       	out	0x35, r24	; 53
     966:	88 95       	sleep
     968:	85 b7       	in	r24, 0x35	; 53
     96a:	8f 7d       	andi	r24, 0xDF	; 223
     96c:	85 bf       	out	0x35, r24	; 53
     96e:	08 95       	ret

00000970 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     976:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     980:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <joystickOffsetY>
     984:	08 95       	ret

00000986 <joystick_readPosition>:
}
void joystick_readPosition() {
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     998:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     9a0:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     9a2:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <joystickOffsetX>
     9a6:	c6 17       	cp	r28, r22
     9a8:	80 f4       	brcc	.+32     	; 0x9ca <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	2c 2f       	mov	r18, r28
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	26 1b       	sub	r18, r22
     9b2:	37 0b       	sbc	r19, r23
     9b4:	44 e6       	ldi	r20, 0x64	; 100
     9b6:	42 9f       	mul	r20, r18
     9b8:	c0 01       	movw	r24, r0
     9ba:	43 9f       	mul	r20, r19
     9bc:	90 0d       	add	r25, r0
     9be:	11 24       	eor	r1, r1
     9c0:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divmodhi4>
     9c4:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <joystick_pos>
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     9ca:	46 2f       	mov	r20, r22
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	2c 2f       	mov	r18, r28
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	24 1b       	sub	r18, r20
     9d4:	35 0b       	sbc	r19, r21
     9d6:	64 e6       	ldi	r22, 0x64	; 100
     9d8:	62 9f       	mul	r22, r18
     9da:	c0 01       	movw	r24, r0
     9dc:	63 9f       	mul	r22, r19
     9de:	90 0d       	add	r25, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	6f ef       	ldi	r22, 0xFF	; 255
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	64 1b       	sub	r22, r20
     9e8:	75 0b       	sbc	r23, r21
     9ea:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divmodhi4>
     9ee:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
     9f2:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <joystickOffsetY>
     9f6:	e2 17       	cp	r30, r18
     9f8:	88 f4       	brcc	.+34     	; 0xa1c <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     9fa:	62 2f       	mov	r22, r18
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	4e 2f       	mov	r20, r30
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	46 1b       	sub	r20, r22
     a04:	57 0b       	sbc	r21, r23
     a06:	24 e6       	ldi	r18, 0x64	; 100
     a08:	24 9f       	mul	r18, r20
     a0a:	c0 01       	movw	r24, r0
     a0c:	25 9f       	mul	r18, r21
     a0e:	90 0d       	add	r25, r0
     a10:	11 24       	eor	r1, r1
     a12:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divmodhi4>
     a16:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <joystick_pos+0x1>
     a1a:	13 c0       	rjmp	.+38     	; 0xa42 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	4e 2f       	mov	r20, r30
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	42 1b       	sub	r20, r18
     a24:	53 0b       	sbc	r21, r19
     a26:	64 e6       	ldi	r22, 0x64	; 100
     a28:	64 9f       	mul	r22, r20
     a2a:	c0 01       	movw	r24, r0
     a2c:	65 9f       	mul	r22, r21
     a2e:	90 0d       	add	r25, r0
     a30:	11 24       	eor	r1, r1
     a32:	6f ef       	ldi	r22, 0xFF	; 255
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	62 1b       	sub	r22, r18
     a38:	73 0b       	sbc	r23, r19
     a3a:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divmodhi4>
     a3e:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     a42:	cb e8       	ldi	r28, 0x8B	; 139
     a44:	d2 e0       	ldi	r29, 0x02	; 2
     a46:	68 81       	ld	r22, Y
     a48:	06 2e       	mov	r0, r22
     a4a:	00 0c       	add	r0, r0
     a4c:	77 0b       	sbc	r23, r23
     a4e:	88 0b       	sbc	r24, r24
     a50:	99 0b       	sbc	r25, r25
     a52:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__floatsisf>
     a56:	6b 01       	movw	r12, r22
     a58:	7c 01       	movw	r14, r24
     a5a:	69 81       	ldd	r22, Y+1	; 0x01
     a5c:	06 2e       	mov	r0, r22
     a5e:	00 0c       	add	r0, r0
     a60:	77 0b       	sbc	r23, r23
     a62:	88 0b       	sbc	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__floatsisf>
     a6a:	a7 01       	movw	r20, r14
     a6c:	96 01       	movw	r18, r12
     a6e:	0e 94 6f 08 	call	0x10de	; 0x10de <atan2>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	44 eb       	ldi	r20, 0xB4	; 180
     a78:	53 e4       	ldi	r21, 0x43	; 67
     a7a:	0e 94 33 0a 	call	0x1466	; 0x1466 <__mulsf3>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	5f e3       	ldi	r21, 0x3F	; 63
     a86:	0e 94 33 0a 	call	0x1466	; 0x1466 <__mulsf3>
     a8a:	23 ec       	ldi	r18, 0xC3	; 195
     a8c:	35 ef       	ldi	r19, 0xF5	; 245
     a8e:	48 e4       	ldi	r20, 0x48	; 72
     a90:	50 e4       	ldi	r21, 0x40	; 64
     a92:	0e 94 ce 08 	call	0x119c	; 0x119c <__divsf3>
     a96:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     a9a:	7b 83       	std	Y+3, r23	; 0x03
     a9c:	6a 83       	std	Y+2, r22	; 0x02
}
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     aac:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     aae:	80 81       	ld	r24, Z
     ab0:	94 e0       	ldi	r25, 0x04	; 4
     ab2:	98 0f       	add	r25, r24
     ab4:	99 30       	cpi	r25, 0x09	; 9
     ab6:	20 f4       	brcc	.+8      	; 0xac0 <joystick_getDirection+0x14>
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	9c 5f       	subi	r25, 0xFC	; 252
     abc:	99 30       	cpi	r25, 0x09	; 9
     abe:	90 f0       	brcs	.+36     	; 0xae4 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     ac0:	85 30       	cpi	r24, 0x05	; 5
     ac2:	2c f0       	brlt	.+10     	; 0xace <joystick_getDirection+0x22>
     ac4:	81 81       	ldd	r24, Z+1	; 0x01
     ac6:	8f 5c       	subi	r24, 0xCF	; 207
     ac8:	83 36       	cpi	r24, 0x63	; 99
     aca:	38 f4       	brcc	.+14     	; 0xada <joystick_getDirection+0x2e>
     acc:	0d c0       	rjmp	.+26     	; 0xae8 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     ace:	8c 3f       	cpi	r24, 0xFC	; 252
     ad0:	24 f4       	brge	.+8      	; 0xada <joystick_getDirection+0x2e>
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
     ad4:	8f 5c       	subi	r24, 0xCF	; 207
     ad6:	83 36       	cpi	r24, 0x63	; 99
     ad8:	48 f0       	brcs	.+18     	; 0xaec <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     ada:	81 81       	ldd	r24, Z+1	; 0x01
     adc:	8c 3f       	cpi	r24, 0xFC	; 252
     ade:	44 f0       	brlt	.+16     	; 0xaf0 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     af0:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     af2:	08 95       	ret

00000af4 <this_init>:



MenuNode nodes[11];

void this_init() {
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
	
	printf("this_init initiating");
     afc:	88 ef       	ldi	r24, 0xF8	; 248
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	
	strcpy(nodes[0].name, "Main menu");
     b08:	c4 ea       	ldi	r28, 0xA4	; 164
     b0a:	d2 e0       	ldi	r29, 0x02	; 2
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	ed e0       	ldi	r30, 0x0D	; 13
     b10:	f2 e0       	ldi	r31, 0x02	; 2
     b12:	de 01       	movw	r26, r28
     b14:	01 90       	ld	r0, Z+
     b16:	0d 92       	st	X+, r0
     b18:	8a 95       	dec	r24
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <this_init+0x20>
	strcpy(nodes[1].name, "Play game");
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	e7 e1       	ldi	r30, 0x17	; 23
     b20:	f2 e0       	ldi	r31, 0x02	; 2
     b22:	a3 ec       	ldi	r26, 0xC3	; 195
     b24:	b2 e0       	ldi	r27, 0x02	; 2
     b26:	01 90       	ld	r0, Z+
     b28:	0d 92       	st	X+, r0
     b2a:	8a 95       	dec	r24
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <this_init+0x32>
	strcpy(nodes[2].name, "High scores");
     b2e:	8c e0       	ldi	r24, 0x0C	; 12
     b30:	e1 e2       	ldi	r30, 0x21	; 33
     b32:	f2 e0       	ldi	r31, 0x02	; 2
     b34:	a2 ee       	ldi	r26, 0xE2	; 226
     b36:	b2 e0       	ldi	r27, 0x02	; 2
     b38:	01 90       	ld	r0, Z+
     b3a:	0d 92       	st	X+, r0
     b3c:	8a 95       	dec	r24
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <this_init+0x44>
	strcpy(nodes[3].name, "Music");
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	ed e2       	ldi	r30, 0x2D	; 45
     b44:	f2 e0       	ldi	r31, 0x02	; 2
     b46:	a1 e0       	ldi	r26, 0x01	; 1
     b48:	b3 e0       	ldi	r27, 0x03	; 3
     b4a:	01 90       	ld	r0, Z+
     b4c:	0d 92       	st	X+, r0
     b4e:	8a 95       	dec	r24
     b50:	e1 f7       	brne	.-8      	; 0xb4a <this_init+0x56>
	strcpy(nodes[4].name, "Game 1");
     b52:	87 e0       	ldi	r24, 0x07	; 7
     b54:	e3 e3       	ldi	r30, 0x33	; 51
     b56:	f2 e0       	ldi	r31, 0x02	; 2
     b58:	a0 e2       	ldi	r26, 0x20	; 32
     b5a:	b3 e0       	ldi	r27, 0x03	; 3
     b5c:	01 90       	ld	r0, Z+
     b5e:	0d 92       	st	X+, r0
     b60:	8a 95       	dec	r24
     b62:	e1 f7       	brne	.-8      	; 0xb5c <this_init+0x68>
	strcpy(nodes[5].name, "Game 2");
     b64:	87 e0       	ldi	r24, 0x07	; 7
     b66:	ea e3       	ldi	r30, 0x3A	; 58
     b68:	f2 e0       	ldi	r31, 0x02	; 2
     b6a:	af e3       	ldi	r26, 0x3F	; 63
     b6c:	b3 e0       	ldi	r27, 0x03	; 3
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	8a 95       	dec	r24
     b74:	e1 f7       	brne	.-8      	; 0xb6e <this_init+0x7a>
	strcpy(nodes[6].name, "Score 1");
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	e1 e4       	ldi	r30, 0x41	; 65
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
     b7c:	ae e5       	ldi	r26, 0x5E	; 94
     b7e:	b3 e0       	ldi	r27, 0x03	; 3
     b80:	01 90       	ld	r0, Z+
     b82:	0d 92       	st	X+, r0
     b84:	8a 95       	dec	r24
     b86:	e1 f7       	brne	.-8      	; 0xb80 <this_init+0x8c>
	strcpy(nodes[7].name, "Score 2");
     b88:	88 e0       	ldi	r24, 0x08	; 8
     b8a:	e9 e4       	ldi	r30, 0x49	; 73
     b8c:	f2 e0       	ldi	r31, 0x02	; 2
     b8e:	ad e7       	ldi	r26, 0x7D	; 125
     b90:	b3 e0       	ldi	r27, 0x03	; 3
     b92:	01 90       	ld	r0, Z+
     b94:	0d 92       	st	X+, r0
     b96:	8a 95       	dec	r24
     b98:	e1 f7       	brne	.-8      	; 0xb92 <this_init+0x9e>
	strcpy(nodes[8].name, "Score 3");
     b9a:	88 e0       	ldi	r24, 0x08	; 8
     b9c:	e1 e5       	ldi	r30, 0x51	; 81
     b9e:	f2 e0       	ldi	r31, 0x02	; 2
     ba0:	ac e9       	ldi	r26, 0x9C	; 156
     ba2:	b3 e0       	ldi	r27, 0x03	; 3
     ba4:	01 90       	ld	r0, Z+
     ba6:	0d 92       	st	X+, r0
     ba8:	8a 95       	dec	r24
     baa:	e1 f7       	brne	.-8      	; 0xba4 <this_init+0xb0>
	strcpy(nodes[9].name, "Score 4");
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	e9 e5       	ldi	r30, 0x59	; 89
     bb0:	f2 e0       	ldi	r31, 0x02	; 2
     bb2:	ab eb       	ldi	r26, 0xBB	; 187
     bb4:	b3 e0       	ldi	r27, 0x03	; 3
     bb6:	01 90       	ld	r0, Z+
     bb8:	0d 92       	st	X+, r0
     bba:	8a 95       	dec	r24
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <this_init+0xc2>
	strcpy(nodes[10].name, "Score 5");
     bbe:	88 e0       	ldi	r24, 0x08	; 8
     bc0:	e1 e6       	ldi	r30, 0x61	; 97
     bc2:	f2 e0       	ldi	r31, 0x02	; 2
     bc4:	aa ed       	ldi	r26, 0xDA	; 218
     bc6:	b3 e0       	ldi	r27, 0x03	; 3
     bc8:	01 90       	ld	r0, Z+
     bca:	0d 92       	st	X+, r0
     bcc:	8a 95       	dec	r24
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <this_init+0xd4>

	
	
	nodes[0].numChildren = 3;
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	8e 8f       	std	Y+30, r24	; 0x1e
	nodes[1].numChildren = 2;
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	8d af       	std	Y+61, r24	; 0x3d
	nodes[2].numChildren = 5;
     bd8:	85 e0       	ldi	r24, 0x05	; 5
     bda:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <nodes+0x5c>
	nodes[3].numChildren = 0;
     bde:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <nodes+0x7b>
	nodes[4].numChildren = 0;
     be2:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <nodes+0x9a>
	nodes[5].numChildren = 0;
     be6:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <nodes+0xb9>
	nodes[6].numChildren = 0;
     bea:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <nodes+0xd8>
	nodes[7].numChildren = 0;
     bee:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <nodes+0xf7>
	nodes[8].numChildren = 0;
     bf2:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <nodes+0x116>
	nodes[9].numChildren = 0;
     bf6:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <nodes+0x135>
	nodes[10].numChildren = 0;
     bfa:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <nodes+0x154>
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
     bfe:	19 8a       	std	Y+17, r1	; 0x11
     c00:	18 8a       	std	Y+16, r1	; 0x10
     c02:	be 01       	movw	r22, r28
     c04:	09 ef       	ldi	r16, 0xF9	; 249
     c06:	13 e0       	ldi	r17, 0x03	; 3
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
	nodes[7].numChildren = 0;
	nodes[8].numChildren = 0;
	nodes[9].numChildren = 0;
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
     c0c:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
     c0e:	5f e1       	ldi	r21, 0x1F	; 31
     c10:	18 c0       	rjmp	.+48     	; 0xc42 <this_init+0x14e>
     c12:	54 9f       	mul	r21, r20
     c14:	f0 01       	movw	r30, r0
     c16:	11 24       	eor	r1, r1
     c18:	ec 55       	subi	r30, 0x5C	; 92
     c1a:	fd 4f       	sbci	r31, 0xFD	; 253
     c1c:	e9 93       	st	Y+, r30
     c1e:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
     c20:	b1 8b       	std	Z+17, r27	; 0x11
     c22:	a0 8b       	std	Z+16, r26	; 0x10
			currentChildIdx++;
     c24:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     c26:	2f 5f       	subi	r18, 0xFF	; 255
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	5e 96       	adiw	r26, 0x1e	; 30
     c2c:	8c 91       	ld	r24, X
     c2e:	5e 97       	sbiw	r26, 0x1e	; 30
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	28 17       	cp	r18, r24
     c34:	39 07       	cpc	r19, r25
     c36:	6c f3       	brlt	.-38     	; 0xc12 <this_init+0x11e>
     c38:	61 5e       	subi	r22, 0xE1	; 225
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
     c3c:	60 17       	cp	r22, r16
     c3e:	71 07       	cpc	r23, r17
     c40:	59 f0       	breq	.+22     	; 0xc58 <this_init+0x164>
     c42:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     c44:	5e 96       	adiw	r26, 0x1e	; 30
     c46:	8c 91       	ld	r24, X
     c48:	5e 97       	sbiw	r26, 0x1e	; 30
     c4a:	88 23       	and	r24, r24
     c4c:	a9 f3       	breq	.-22     	; 0xc38 <this_init+0x144>
     c4e:	eb 01       	movw	r28, r22
     c50:	62 96       	adiw	r28, 0x12	; 18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	dd cf       	rjmp	.-70     	; 0xc12 <this_init+0x11e>

		}
		
	}
	*/
	currentMenu.currentMenuItem = nodes; //set main menu as current
     c58:	ef e8       	ldi	r30, 0x8F	; 143
     c5a:	f2 e0       	ldi	r31, 0x02	; 2
     c5c:	84 ea       	ldi	r24, 0xA4	; 164
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	91 83       	std	Z+1, r25	; 0x01
     c62:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
     c64:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <navigateMenu>:
	
	return mainMenu;
}
*/
void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     c74:	0e 94 56 05 	call	0xaac	; 0xaac <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     c78:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <currentMenu+0x3>
     c7c:	94 30       	cpi	r25, 0x04	; 4
     c7e:	09 f0       	breq	.+2      	; 0xc82 <navigateMenu+0xe>
     c80:	58 c0       	rjmp	.+176    	; 0xd32 <navigateMenu+0xbe>
			switch (dir) {
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	e1 f1       	breq	.+120    	; 0xcfe <navigateMenu+0x8a>
     c86:	60 f1       	brcs	.+88     	; 0xce0 <navigateMenu+0x6c>
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	c9 f0       	breq	.+50     	; 0xcbe <navigateMenu+0x4a>
     c8c:	83 30       	cpi	r24, 0x03	; 3
     c8e:	09 f0       	breq	.+2      	; 0xc92 <navigateMenu+0x1e>
     c90:	50 c0       	rjmp	.+160    	; 0xd32 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     c92:	ef e8       	ldi	r30, 0x8F	; 143
     c94:	f2 e0       	ldi	r31, 0x02	; 2
     c96:	92 81       	ldd	r25, Z+2	; 0x02
     c98:	49 2f       	mov	r20, r25
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	01 90       	ld	r0, Z+
     c9e:	f0 81       	ld	r31, Z
     ca0:	e0 2d       	mov	r30, r0
     ca2:	26 8d       	ldd	r18, Z+30	; 0x1e
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	21 50       	subi	r18, 0x01	; 1
     ca8:	31 09       	sbc	r19, r1
     caa:	42 17       	cp	r20, r18
     cac:	53 07       	cpc	r21, r19
     cae:	24 f4       	brge	.+8      	; 0xcb8 <navigateMenu+0x44>
					currentMenu.childIndex++;
     cb0:	9f 5f       	subi	r25, 0xFF	; 255
     cb2:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <currentMenu+0x2>
     cb6:	3d c0       	rjmp	.+122    	; 0xd32 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     cb8:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <currentMenu+0x2>
     cbc:	3a c0       	rjmp	.+116    	; 0xd32 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     cbe:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <currentMenu+0x2>
     cc2:	99 23       	and	r25, r25
     cc4:	21 f0       	breq	.+8      	; 0xcce <navigateMenu+0x5a>
					currentMenu.childIndex--;
     cc6:	91 50       	subi	r25, 0x01	; 1
     cc8:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <currentMenu+0x2>
     ccc:	32 c0       	rjmp	.+100    	; 0xd32 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     cce:	ef e8       	ldi	r30, 0x8F	; 143
     cd0:	f2 e0       	ldi	r31, 0x02	; 2
     cd2:	a0 81       	ld	r26, Z
     cd4:	b1 81       	ldd	r27, Z+1	; 0x01
     cd6:	5e 96       	adiw	r26, 0x1e	; 30
     cd8:	9c 91       	ld	r25, X
     cda:	91 50       	subi	r25, 0x01	; 1
     cdc:	92 83       	std	Z+2, r25	; 0x02
     cde:	29 c0       	rjmp	.+82     	; 0xd32 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     ce0:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <currentMenu>
     ce4:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <currentMenu+0x1>
     ce8:	20 89       	ldd	r18, Z+16	; 0x10
     cea:	31 89       	ldd	r19, Z+17	; 0x11
     cec:	21 15       	cp	r18, r1
     cee:	31 05       	cpc	r19, r1
     cf0:	01 f1       	breq	.+64     	; 0xd32 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     cf2:	ef e8       	ldi	r30, 0x8F	; 143
     cf4:	f2 e0       	ldi	r31, 0x02	; 2
     cf6:	31 83       	std	Z+1, r19	; 0x01
     cf8:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     cfa:	12 82       	std	Z+2, r1	; 0x02
     cfc:	1a c0       	rjmp	.+52     	; 0xd32 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     cfe:	af e8       	ldi	r26, 0x8F	; 143
     d00:	b2 e0       	ldi	r27, 0x02	; 2
     d02:	2d 91       	ld	r18, X+
     d04:	3c 91       	ld	r19, X
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	12 96       	adiw	r26, 0x02	; 2
     d0a:	9c 91       	ld	r25, X
     d0c:	12 97       	sbiw	r26, 0x02	; 2
     d0e:	e9 2f       	mov	r30, r25
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	39 96       	adiw	r30, 0x09	; 9
     d14:	ee 0f       	add	r30, r30
     d16:	ff 1f       	adc	r31, r31
     d18:	e2 0f       	add	r30, r18
     d1a:	f3 1f       	adc	r31, r19
     d1c:	01 90       	ld	r0, Z+
     d1e:	f0 81       	ld	r31, Z
     d20:	e0 2d       	mov	r30, r0
     d22:	96 8d       	ldd	r25, Z+30	; 0x1e
     d24:	99 23       	and	r25, r25
     d26:	29 f0       	breq	.+10     	; 0xd32 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	fc 93       	st	X, r31
     d2c:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     d2e:	12 96       	adiw	r26, 0x02	; 2
     d30:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     d32:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <currentMenu+0x3>
     d36:	08 95       	ret

00000d38 <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
	oled_reset();
     d40:	0e 94 e6 06 	call	0xdcc	; 0xdcc <oled_reset>
	oled_home();
     d44:	0e 94 07 07 	call	0xe0e	; 0xe0e <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d48:	cf e8       	ldi	r28, 0x8F	; 143
     d4a:	d2 e0       	ldi	r29, 0x02	; 2
     d4c:	88 81       	ld	r24, Y
     d4e:	99 81       	ldd	r25, Y+1	; 0x01
     d50:	0e 94 42 07 	call	0xe84	; 0xe84 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d54:	e8 81       	ld	r30, Y
     d56:	f9 81       	ldd	r31, Y+1	; 0x01
     d58:	86 8d       	ldd	r24, Z+30	; 0x1e
     d5a:	88 23       	and	r24, r24
     d5c:	31 f1       	breq	.+76     	; 0xdaa <menu_printCurrentMenu+0x72>
     d5e:	c0 e0       	ldi	r28, 0x00	; 0
     d60:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d62:	0f e8       	ldi	r16, 0x8F	; 143
     d64:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     d66:	ce 01       	movw	r24, r28
     d68:	02 96       	adiw	r24, 0x02	; 2
     d6a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d6e:	d8 01       	movw	r26, r16
     d70:	8d 91       	ld	r24, X+
     d72:	9c 91       	ld	r25, X
     d74:	fe 01       	movw	r30, r28
     d76:	39 96       	adiw	r30, 0x09	; 9
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	e8 0f       	add	r30, r24
     d7e:	f9 1f       	adc	r31, r25
     d80:	80 81       	ld	r24, Z
     d82:	91 81       	ldd	r25, Z+1	; 0x01
     d84:	0e 94 42 07 	call	0xe84	; 0xe84 <oled_print>
		if (currentMenu.childIndex == i) {
     d88:	f8 01       	movw	r30, r16
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	8c 17       	cp	r24, r28
     d90:	9d 07       	cpc	r25, r29
     d92:	11 f4       	brne	.+4      	; 0xd98 <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     d94:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d98:	21 96       	adiw	r28, 0x01	; 1
     d9a:	d8 01       	movw	r26, r16
     d9c:	ed 91       	ld	r30, X+
     d9e:	fc 91       	ld	r31, X
     da0:	86 8d       	ldd	r24, Z+30	; 0x1e
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	c8 17       	cp	r28, r24
     da6:	d9 07       	cpc	r29, r25
     da8:	f4 f2       	brlt	.-68     	; 0xd66 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     db4:	80 55       	subi	r24, 0x50	; 80
     db6:	e0 e0       	ldi	r30, 0x00	; 0
     db8:	f0 e1       	ldi	r31, 0x10	; 16
     dba:	80 83       	st	Z, r24
     dbc:	86 2f       	mov	r24, r22
     dbe:	8f 70       	andi	r24, 0x0F	; 15
     dc0:	80 83       	st	Z, r24
     dc2:	62 95       	swap	r22
     dc4:	6f 70       	andi	r22, 0x0F	; 15
     dc6:	60 61       	ori	r22, 0x10	; 16
     dc8:	60 83       	st	Z, r22
     dca:	08 95       	ret

00000dcc <oled_reset>:
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	c0 e0       	ldi	r28, 0x00	; 0
     dd6:	d2 e1       	ldi	r29, 0x12	; 18
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	81 2f       	mov	r24, r17
     ddc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <oled_pos>
     de0:	80 e8       	ldi	r24, 0x80	; 128
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	18 82       	st	Y, r1
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	e9 f7       	brne	.-6      	; 0xde4 <oled_reset+0x18>
     dea:	1f 5f       	subi	r17, 0xFF	; 255
     dec:	18 30       	cpi	r17, 0x08	; 8
     dee:	a1 f7       	brne	.-24     	; 0xdd8 <oled_reset+0xc>
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <oled_print_arrow>:
     df8:	e0 e0       	ldi	r30, 0x00	; 0
     dfa:	f2 e1       	ldi	r31, 0x12	; 18
     dfc:	88 e1       	ldi	r24, 0x18	; 24
     dfe:	80 83       	st	Z, r24
     e00:	9c e3       	ldi	r25, 0x3C	; 60
     e02:	90 83       	st	Z, r25
     e04:	9e e7       	ldi	r25, 0x7E	; 126
     e06:	90 83       	st	Z, r25
     e08:	80 83       	st	Z, r24
     e0a:	80 83       	st	Z, r24
     e0c:	08 95       	ret

00000e0e <oled_home>:
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 da 06 	call	0xdb4	; 0xdb4 <oled_pos>
     e16:	08 95       	ret

00000e18 <oled_init>:
     e18:	e0 e0       	ldi	r30, 0x00	; 0
     e1a:	f0 e1       	ldi	r31, 0x10	; 16
     e1c:	8e ea       	ldi	r24, 0xAE	; 174
     e1e:	80 83       	st	Z, r24
     e20:	81 ea       	ldi	r24, 0xA1	; 161
     e22:	80 83       	st	Z, r24
     e24:	8a ed       	ldi	r24, 0xDA	; 218
     e26:	80 83       	st	Z, r24
     e28:	82 e1       	ldi	r24, 0x12	; 18
     e2a:	80 83       	st	Z, r24
     e2c:	88 ec       	ldi	r24, 0xC8	; 200
     e2e:	80 83       	st	Z, r24
     e30:	88 ea       	ldi	r24, 0xA8	; 168
     e32:	80 83       	st	Z, r24
     e34:	8f e3       	ldi	r24, 0x3F	; 63
     e36:	80 83       	st	Z, r24
     e38:	85 ed       	ldi	r24, 0xD5	; 213
     e3a:	80 83       	st	Z, r24
     e3c:	80 e8       	ldi	r24, 0x80	; 128
     e3e:	80 83       	st	Z, r24
     e40:	81 e8       	ldi	r24, 0x81	; 129
     e42:	80 83       	st	Z, r24
     e44:	80 e5       	ldi	r24, 0x50	; 80
     e46:	80 83       	st	Z, r24
     e48:	89 ed       	ldi	r24, 0xD9	; 217
     e4a:	80 83       	st	Z, r24
     e4c:	81 e2       	ldi	r24, 0x21	; 33
     e4e:	80 83       	st	Z, r24
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	80 83       	st	Z, r24
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	80 83       	st	Z, r24
     e58:	8b ed       	ldi	r24, 0xDB	; 219
     e5a:	80 83       	st	Z, r24
     e5c:	80 e3       	ldi	r24, 0x30	; 48
     e5e:	80 83       	st	Z, r24
     e60:	8d ea       	ldi	r24, 0xAD	; 173
     e62:	80 83       	st	Z, r24
     e64:	10 82       	st	Z, r1
     e66:	84 ea       	ldi	r24, 0xA4	; 164
     e68:	80 83       	st	Z, r24
     e6a:	86 ea       	ldi	r24, 0xA6	; 166
     e6c:	80 83       	st	Z, r24
     e6e:	8f ea       	ldi	r24, 0xAF	; 175
     e70:	80 83       	st	Z, r24
     e72:	0e 94 e6 06 	call	0xdcc	; 0xdcc <oled_reset>
     e76:	0e 94 07 07 	call	0xe0e	; 0xe0e <oled_home>
     e7a:	08 95       	ret

00000e7c <oled_gotoLine>:
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <oled_pos>
     e82:	08 95       	ret

00000e84 <oled_print>:

void oled_print(char* character){
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	dc 01       	movw	r26, r24
	while (*character != '\0')
     e8a:	8c 91       	ld	r24, X
     e8c:	81 11       	cpse	r24, r1
     e8e:	1a c0       	rjmp	.+52     	; 0xec4 <oled_print+0x40>
     e90:	1e c0       	rjmp	.+60     	; 0xece <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     e92:	ec 91       	ld	r30, X
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	b0 97       	sbiw	r30, 0x20	; 32
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	e2 0f       	add	r30, r18
     ea6:	f3 1f       	adc	r31, r19
     ea8:	e2 56       	subi	r30, 0x62	; 98
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     eae:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     eb0:	2f 5f       	subi	r18, 0xFF	; 255
     eb2:	3f 4f       	sbci	r19, 0xFF	; 255
     eb4:	28 30       	cpi	r18, 0x08	; 8
     eb6:	31 05       	cpc	r19, r1
     eb8:	61 f7       	brne	.-40     	; 0xe92 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     eba:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     ebc:	8c 91       	ld	r24, X
     ebe:	81 11       	cpse	r24, r1
     ec0:	03 c0       	rjmp	.+6      	; 0xec8 <oled_print+0x44>
     ec2:	05 c0       	rjmp	.+10     	; 0xece <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     ec4:	c0 e0       	ldi	r28, 0x00	; 0
     ec6:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	e2 cf       	rjmp	.-60     	; 0xe92 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	08 95       	ret

00000ed4 <setupInit>:
#include "oled.h"
#include "timer.h"
#include "sleep.h"

	void setupInit(void){
	cli();
     ed4:	f8 94       	cli
	xmem_init();
     ed6:	0e 94 55 08 	call	0x10aa	; 0x10aa <xmem_init>
	USART_init(MYUBRR);
     eda:	8f e1       	ldi	r24, 0x1F	; 31
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 44 08 	call	0x1088	; 0x1088 <USART_init>
	adcInit();
     ee2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     ee6:	0e 94 b8 04 	call	0x970	; 0x970 <joystickInit>
	touchButton_init();
     eea:	0e 94 17 08 	call	0x102e	; 0x102e <touchButton_init>
	oled_init();
     eee:	0e 94 0c 07 	call	0xe18	; 0xe18 <oled_init>
	printf("After oledinit\n\r");
     ef2:	89 e6       	ldi	r24, 0x69	; 105
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	timer_init();
     efe:	0e 94 09 08 	call	0x1012	; 0x1012 <timer_init>
	sleep_init();
     f02:	0e 94 a3 04 	call	0x946	; 0x946 <sleep_init>
	//menuInit();
	this_init();
     f06:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <this_init>
	printf("Finished this");
     f0a:	8a e7       	ldi	r24, 0x7A	; 122
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	9f 93       	push	r25
     f10:	8f 93       	push	r24
     f12:	0e 94 84 0b 	call	0x1708	; 0x1708 <printf>
	CAN_controller_init();
     f16:	0e 94 71 04 	call	0x8e2	; 0x8e2 <CAN_controller_init>
	//pwm_init(); uncommenting this breaks can on node 2.
	sei();
     f1a:	78 94       	sei
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	08 95       	ret

00000f26 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f30:	c5 e9       	ldi	r28, 0x95	; 149
     f32:	d2 e0       	ldi	r29, 0x02	; 2
     f34:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f3c:	89 83       	std	Y+1, r24	; 0x01
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     f44:	87 b3       	in	r24, 0x17	; 23
     f46:	80 6a       	ori	r24, 0xA0	; 160
     f48:	87 bb       	out	0x17, r24	; 23
     f4a:	bc 9a       	sbi	0x17, 4	; 23
     f4c:	8d b1       	in	r24, 0x0d	; 13
     f4e:	81 65       	ori	r24, 0x51	; 81
     f50:	8d b9       	out	0x0d, r24	; 13
     f52:	c4 9a       	sbi	0x18, 4	; 24
     f54:	08 95       	ret

00000f56 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     f56:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     f58:	77 9b       	sbis	0x0e, 7	; 14
     f5a:	fe cf       	rjmp	.-4      	; 0xf58 <SPI_masterWrite+0x2>

}
     f5c:	08 95       	ret

00000f5e <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     f5e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     f60:	77 9b       	sbis	0x0e, 7	; 14
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <SPI_masterRead+0x2>
	return SPDR;
     f64:	8f b1       	in	r24, 0x0f	; 15
}
     f66:	08 95       	ret

00000f68 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     f68:	66 23       	and	r22, r22
     f6a:	69 f0       	breq	.+26     	; 0xf86 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     f6c:	48 b3       	in	r20, 0x18	; 24
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	b9 01       	movw	r22, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <SPI_setChipSelect+0x12>
     f76:	66 0f       	add	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	8a 95       	dec	r24
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <SPI_setChipSelect+0xe>
     f7e:	cb 01       	movw	r24, r22
     f80:	84 2b       	or	r24, r20
     f82:	88 bb       	out	0x18, r24	; 24
     f84:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     f86:	48 b3       	in	r20, 0x18	; 24
     f88:	21 e0       	ldi	r18, 0x01	; 1
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	b9 01       	movw	r22, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <SPI_setChipSelect+0x2c>
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	8a 95       	dec	r24
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <SPI_setChipSelect+0x28>
     f98:	cb 01       	movw	r24, r22
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	88 bb       	out	0x18, r24	; 24
     fa0:	08 95       	ret

00000fa2 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     fa2:	1f 92       	push	r1
     fa4:	0f 92       	push	r0
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	0f 92       	push	r0
     faa:	11 24       	eor	r1, r1
     fac:	2f 93       	push	r18
     fae:	3f 93       	push	r19
     fb0:	4f 93       	push	r20
     fb2:	5f 93       	push	r21
     fb4:	6f 93       	push	r22
     fb6:	7f 93       	push	r23
     fb8:	8f 93       	push	r24
     fba:	9f 93       	push	r25
     fbc:	af 93       	push	r26
     fbe:	bf 93       	push	r27
     fc0:	ef 93       	push	r30
     fc2:	ff 93       	push	r31
	cli();
     fc4:	f8 94       	cli
	TCNT1 = 0x00;
     fc6:	1d bc       	out	0x2d, r1	; 45
     fc8:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     fca:	8b e8       	ldi	r24, 0x8B	; 139
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	0e 94 c3 04 	call	0x986	; 0x986 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     fd2:	85 e9       	ldi	r24, 0x95	; 149
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	0e 94 93 07 	call	0xf26	; 0xf26 <slider_readPosition>
	touchButton_readButtons(&buttons);
     fda:	83 e9       	ldi	r24, 0x93	; 147
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	0e 94 30 08 	call	0x1060	; 0x1060 <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     fe2:	8b e8       	ldi	r24, 0x8B	; 139
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	0e 94 3a 06 	call	0xc74	; 0xc74 <navigateMenu>
	menu_printCurrentMenu();
     fea:	0e 94 9c 06 	call	0xd38	; 0xd38 <menu_printCurrentMenu>
	sei();
     fee:	78 94       	sei
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1012:	89 b7       	in	r24, 0x39	; 57
    1014:	80 62       	ori	r24, 0x20	; 32
    1016:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1018:	1d bc       	out	0x2d, r1	; 45
    101a:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    101c:	80 e3       	ldi	r24, 0x30	; 48
    101e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1020:	85 e0       	ldi	r24, 0x05	; 5
    1022:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1024:	80 ee       	ldi	r24, 0xE0	; 224
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	99 bd       	out	0x29, r25	; 41
    102a:	88 bd       	out	0x28, r24	; 40
    102c:	08 95       	ret

0000102e <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    102e:	36 b3       	in	r19, 0x16	; 22
    1030:	26 b3       	in	r18, 0x16	; 22
    1032:	47 b3       	in	r20, 0x17	; 23
    1034:	32 70       	andi	r19, 0x02	; 2
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	bc 01       	movw	r22, r24
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <touchButton_init+0x14>
    103e:	66 0f       	add	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	3a 95       	dec	r19
    1044:	e2 f7       	brpl	.-8      	; 0x103e <touchButton_init+0x10>
    1046:	24 70       	andi	r18, 0x04	; 4
    1048:	02 c0       	rjmp	.+4      	; 0x104e <touchButton_init+0x20>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	2a 95       	dec	r18
    1050:	e2 f7       	brpl	.-8      	; 0x104a <touchButton_init+0x1c>
    1052:	86 2b       	or	r24, r22
    1054:	97 2b       	or	r25, r23
    1056:	80 95       	com	r24
    1058:	90 95       	com	r25
    105a:	84 23       	and	r24, r20
    105c:	87 bb       	out	0x17, r24	; 23
    105e:	08 95       	ret

00001060 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1060:	86 b3       	in	r24, 0x16	; 22
    1062:	e3 e9       	ldi	r30, 0x93	; 147
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	86 95       	lsr	r24
    1068:	81 70       	andi	r24, 0x01	; 1
    106a:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    106c:	86 b3       	in	r24, 0x16	; 22
    106e:	82 fb       	bst	r24, 2
    1070:	88 27       	eor	r24, r24
    1072:	80 f9       	bld	r24, 0
    1074:	81 83       	std	Z+1, r24	; 0x01
    1076:	08 95       	ret

00001078 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    1078:	5d 9b       	sbis	0x0b, 5	; 11
    107a:	fe cf       	rjmp	.-4      	; 0x1078 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    107c:	8c b9       	out	0x0c, r24	; 12
    107e:	08 95       	ret

00001080 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    1080:	5f 9b       	sbis	0x0b, 7	; 11
    1082:	fe cf       	rjmp	.-4      	; 0x1080 <USART_receiveChar>
		;
	
	return UDR0;
    1084:	8c b1       	in	r24, 0x0c	; 12
    1086:	08 95       	ret

00001088 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1088:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    108a:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    108c:	88 e1       	ldi	r24, 0x18	; 24
    108e:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1090:	8e e8       	ldi	r24, 0x8E	; 142
    1092:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1094:	60 e4       	ldi	r22, 0x40	; 64
    1096:	78 e0       	ldi	r23, 0x08	; 8
    1098:	8c e3       	ldi	r24, 0x3C	; 60
    109a:	98 e0       	ldi	r25, 0x08	; 8
    109c:	0e 94 39 0b 	call	0x1672	; 0x1672 <fdevopen>
    10a0:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <uart+0x1>
    10a4:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <uart>
    10a8:	08 95       	ret

000010aa <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    10aa:	85 b7       	in	r24, 0x35	; 53
    10ac:	80 68       	ori	r24, 0x80	; 128
    10ae:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    10b0:	80 b7       	in	r24, 0x30	; 48
    10b2:	88 60       	ori	r24, 0x08	; 8
    10b4:	80 bf       	out	0x30, r24	; 48
    10b6:	08 95       	ret
    10b8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__fp_pscA>
    10bc:	60 f0       	brcs	.+24     	; 0x10d6 <xmem_init+0x2c>
    10be:	80 e8       	ldi	r24, 0x80	; 128
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <xmem_init+0x1c>
    10c4:	9e ef       	ldi	r25, 0xFE	; 254
    10c6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__fp_pscB>
    10ca:	28 f0       	brcs	.+10     	; 0x10d6 <xmem_init+0x2c>
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	51 e0       	ldi	r21, 0x01	; 1
    10d0:	71 f4       	brne	.+28     	; 0x10ee <atan2+0x10>
    10d2:	5e ef       	ldi	r21, 0xFE	; 254
    10d4:	0c c0       	rjmp	.+24     	; 0x10ee <atan2+0x10>
    10d6:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_nan>
    10da:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_zero>

000010de <atan2>:
    10de:	e9 2f       	mov	r30, r25
    10e0:	e0 78       	andi	r30, 0x80	; 128
    10e2:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_split3>
    10e6:	40 f3       	brcs	.-48     	; 0x10b8 <xmem_init+0xe>
    10e8:	09 2e       	mov	r0, r25
    10ea:	05 2a       	or	r0, r21
    10ec:	b1 f3       	breq	.-20     	; 0x10da <xmem_init+0x30>
    10ee:	26 17       	cp	r18, r22
    10f0:	37 07       	cpc	r19, r23
    10f2:	48 07       	cpc	r20, r24
    10f4:	59 07       	cpc	r21, r25
    10f6:	38 f0       	brcs	.+14     	; 0x1106 <atan2+0x28>
    10f8:	0e 2e       	mov	r0, r30
    10fa:	07 f8       	bld	r0, 7
    10fc:	e0 25       	eor	r30, r0
    10fe:	69 f0       	breq	.+26     	; 0x111a <atan2+0x3c>
    1100:	e0 25       	eor	r30, r0
    1102:	e0 64       	ori	r30, 0x40	; 64
    1104:	0a c0       	rjmp	.+20     	; 0x111a <atan2+0x3c>
    1106:	ef 63       	ori	r30, 0x3F	; 63
    1108:	07 f8       	bld	r0, 7
    110a:	00 94       	com	r0
    110c:	07 fa       	bst	r0, 7
    110e:	db 01       	movw	r26, r22
    1110:	b9 01       	movw	r22, r18
    1112:	9d 01       	movw	r18, r26
    1114:	dc 01       	movw	r26, r24
    1116:	ca 01       	movw	r24, r20
    1118:	ad 01       	movw	r20, r26
    111a:	ef 93       	push	r30
    111c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divsf3_pse>
    1120:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_round>
    1124:	0e 94 9f 08 	call	0x113e	; 0x113e <atan>
    1128:	5f 91       	pop	r21
    112a:	55 23       	and	r21, r21
    112c:	39 f0       	breq	.+14     	; 0x113c <atan2+0x5e>
    112e:	2b ed       	ldi	r18, 0xDB	; 219
    1130:	3f e0       	ldi	r19, 0x0F	; 15
    1132:	49 e4       	ldi	r20, 0x49	; 73
    1134:	50 fd       	sbrc	r21, 0
    1136:	49 ec       	ldi	r20, 0xC9	; 201
    1138:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__addsf3>
    113c:	08 95       	ret

0000113e <atan>:
    113e:	df 93       	push	r29
    1140:	dd 27       	eor	r29, r29
    1142:	b9 2f       	mov	r27, r25
    1144:	bf 77       	andi	r27, 0x7F	; 127
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	16 16       	cp	r1, r22
    114c:	17 06       	cpc	r1, r23
    114e:	48 07       	cpc	r20, r24
    1150:	5b 07       	cpc	r21, r27
    1152:	18 f4       	brcc	.+6      	; 0x115a <atan+0x1c>
    1154:	d9 2f       	mov	r29, r25
    1156:	0e 94 2b 0a 	call	0x1456	; 0x1456 <inverse>
    115a:	9f 93       	push	r25
    115c:	8f 93       	push	r24
    115e:	7f 93       	push	r23
    1160:	6f 93       	push	r22
    1162:	0e 94 a0 0a 	call	0x1540	; 0x1540 <square>
    1166:	e0 e7       	ldi	r30, 0x70	; 112
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fp_powser>
    116e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_round>
    1172:	2f 91       	pop	r18
    1174:	3f 91       	pop	r19
    1176:	4f 91       	pop	r20
    1178:	5f 91       	pop	r21
    117a:	0e 94 46 0a 	call	0x148c	; 0x148c <__mulsf3x>
    117e:	dd 23       	and	r29, r29
    1180:	51 f0       	breq	.+20     	; 0x1196 <atan+0x58>
    1182:	90 58       	subi	r25, 0x80	; 128
    1184:	a2 ea       	ldi	r26, 0xA2	; 162
    1186:	2a ed       	ldi	r18, 0xDA	; 218
    1188:	3f e0       	ldi	r19, 0x0F	; 15
    118a:	49 ec       	ldi	r20, 0xC9	; 201
    118c:	5f e3       	ldi	r21, 0x3F	; 63
    118e:	d0 78       	andi	r29, 0x80	; 128
    1190:	5d 27       	eor	r21, r29
    1192:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__addsf3x>
    1196:	df 91       	pop	r29
    1198:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__fp_round>

0000119c <__divsf3>:
    119c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divsf3x>
    11a0:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__fp_round>
    11a4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__fp_pscB>
    11a8:	58 f0       	brcs	.+22     	; 0x11c0 <__divsf3+0x24>
    11aa:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__fp_pscA>
    11ae:	40 f0       	brcs	.+16     	; 0x11c0 <__divsf3+0x24>
    11b0:	29 f4       	brne	.+10     	; 0x11bc <__divsf3+0x20>
    11b2:	5f 3f       	cpi	r21, 0xFF	; 255
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <__divsf3+0x24>
    11b6:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_inf>
    11ba:	51 11       	cpse	r21, r1
    11bc:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__fp_szero>
    11c0:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_nan>

000011c4 <__divsf3x>:
    11c4:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_split3>
    11c8:	68 f3       	brcs	.-38     	; 0x11a4 <__divsf3+0x8>

000011ca <__divsf3_pse>:
    11ca:	99 23       	and	r25, r25
    11cc:	b1 f3       	breq	.-20     	; 0x11ba <__divsf3+0x1e>
    11ce:	55 23       	and	r21, r21
    11d0:	91 f3       	breq	.-28     	; 0x11b6 <__divsf3+0x1a>
    11d2:	95 1b       	sub	r25, r21
    11d4:	55 0b       	sbc	r21, r21
    11d6:	bb 27       	eor	r27, r27
    11d8:	aa 27       	eor	r26, r26
    11da:	62 17       	cp	r22, r18
    11dc:	73 07       	cpc	r23, r19
    11de:	84 07       	cpc	r24, r20
    11e0:	38 f0       	brcs	.+14     	; 0x11f0 <__divsf3_pse+0x26>
    11e2:	9f 5f       	subi	r25, 0xFF	; 255
    11e4:	5f 4f       	sbci	r21, 0xFF	; 255
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	44 1f       	adc	r20, r20
    11ec:	aa 1f       	adc	r26, r26
    11ee:	a9 f3       	breq	.-22     	; 0x11da <__divsf3_pse+0x10>
    11f0:	35 d0       	rcall	.+106    	; 0x125c <__divsf3_pse+0x92>
    11f2:	0e 2e       	mov	r0, r30
    11f4:	3a f0       	brmi	.+14     	; 0x1204 <__divsf3_pse+0x3a>
    11f6:	e0 e8       	ldi	r30, 0x80	; 128
    11f8:	32 d0       	rcall	.+100    	; 0x125e <__divsf3_pse+0x94>
    11fa:	91 50       	subi	r25, 0x01	; 1
    11fc:	50 40       	sbci	r21, 0x00	; 0
    11fe:	e6 95       	lsr	r30
    1200:	00 1c       	adc	r0, r0
    1202:	ca f7       	brpl	.-14     	; 0x11f6 <__divsf3_pse+0x2c>
    1204:	2b d0       	rcall	.+86     	; 0x125c <__divsf3_pse+0x92>
    1206:	fe 2f       	mov	r31, r30
    1208:	29 d0       	rcall	.+82     	; 0x125c <__divsf3_pse+0x92>
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	bb 1f       	adc	r27, r27
    1212:	26 17       	cp	r18, r22
    1214:	37 07       	cpc	r19, r23
    1216:	48 07       	cpc	r20, r24
    1218:	ab 07       	cpc	r26, r27
    121a:	b0 e8       	ldi	r27, 0x80	; 128
    121c:	09 f0       	breq	.+2      	; 0x1220 <__divsf3_pse+0x56>
    121e:	bb 0b       	sbc	r27, r27
    1220:	80 2d       	mov	r24, r0
    1222:	bf 01       	movw	r22, r30
    1224:	ff 27       	eor	r31, r31
    1226:	93 58       	subi	r25, 0x83	; 131
    1228:	5f 4f       	sbci	r21, 0xFF	; 255
    122a:	3a f0       	brmi	.+14     	; 0x123a <__divsf3_pse+0x70>
    122c:	9e 3f       	cpi	r25, 0xFE	; 254
    122e:	51 05       	cpc	r21, r1
    1230:	78 f0       	brcs	.+30     	; 0x1250 <__divsf3_pse+0x86>
    1232:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_inf>
    1236:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__fp_szero>
    123a:	5f 3f       	cpi	r21, 0xFF	; 255
    123c:	e4 f3       	brlt	.-8      	; 0x1236 <__divsf3_pse+0x6c>
    123e:	98 3e       	cpi	r25, 0xE8	; 232
    1240:	d4 f3       	brlt	.-12     	; 0x1236 <__divsf3_pse+0x6c>
    1242:	86 95       	lsr	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	b7 95       	ror	r27
    124a:	f7 95       	ror	r31
    124c:	9f 5f       	subi	r25, 0xFF	; 255
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__divsf3_pse+0x78>
    1250:	88 0f       	add	r24, r24
    1252:	91 1d       	adc	r25, r1
    1254:	96 95       	lsr	r25
    1256:	87 95       	ror	r24
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret
    125c:	e1 e0       	ldi	r30, 0x01	; 1
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	bb 1f       	adc	r27, r27
    1266:	62 17       	cp	r22, r18
    1268:	73 07       	cpc	r23, r19
    126a:	84 07       	cpc	r24, r20
    126c:	ba 07       	cpc	r27, r26
    126e:	20 f0       	brcs	.+8      	; 0x1278 <__divsf3_pse+0xae>
    1270:	62 1b       	sub	r22, r18
    1272:	73 0b       	sbc	r23, r19
    1274:	84 0b       	sbc	r24, r20
    1276:	ba 0b       	sbc	r27, r26
    1278:	ee 1f       	adc	r30, r30
    127a:	88 f7       	brcc	.-30     	; 0x125e <__divsf3_pse+0x94>
    127c:	e0 95       	com	r30
    127e:	08 95       	ret

00001280 <__fixsfsi>:
    1280:	0e 94 47 09 	call	0x128e	; 0x128e <__fixunssfsi>
    1284:	68 94       	set
    1286:	b1 11       	cpse	r27, r1
    1288:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__fp_szero>
    128c:	08 95       	ret

0000128e <__fixunssfsi>:
    128e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fp_splitA>
    1292:	88 f0       	brcs	.+34     	; 0x12b6 <__fixunssfsi+0x28>
    1294:	9f 57       	subi	r25, 0x7F	; 127
    1296:	98 f0       	brcs	.+38     	; 0x12be <__fixunssfsi+0x30>
    1298:	b9 2f       	mov	r27, r25
    129a:	99 27       	eor	r25, r25
    129c:	b7 51       	subi	r27, 0x17	; 23
    129e:	b0 f0       	brcs	.+44     	; 0x12cc <__fixunssfsi+0x3e>
    12a0:	e1 f0       	breq	.+56     	; 0x12da <__fixunssfsi+0x4c>
    12a2:	66 0f       	add	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	88 1f       	adc	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	1a f0       	brmi	.+6      	; 0x12b2 <__fixunssfsi+0x24>
    12ac:	ba 95       	dec	r27
    12ae:	c9 f7       	brne	.-14     	; 0x12a2 <__fixunssfsi+0x14>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <__fixunssfsi+0x4c>
    12b2:	b1 30       	cpi	r27, 0x01	; 1
    12b4:	91 f0       	breq	.+36     	; 0x12da <__fixunssfsi+0x4c>
    12b6:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_zero>
    12ba:	b1 e0       	ldi	r27, 0x01	; 1
    12bc:	08 95       	ret
    12be:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_zero>
    12c2:	67 2f       	mov	r22, r23
    12c4:	78 2f       	mov	r23, r24
    12c6:	88 27       	eor	r24, r24
    12c8:	b8 5f       	subi	r27, 0xF8	; 248
    12ca:	39 f0       	breq	.+14     	; 0x12da <__fixunssfsi+0x4c>
    12cc:	b9 3f       	cpi	r27, 0xF9	; 249
    12ce:	cc f3       	brlt	.-14     	; 0x12c2 <__fixunssfsi+0x34>
    12d0:	86 95       	lsr	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b3 95       	inc	r27
    12d8:	d9 f7       	brne	.-10     	; 0x12d0 <__fixunssfsi+0x42>
    12da:	3e f4       	brtc	.+14     	; 0x12ea <__fixunssfsi+0x5c>
    12dc:	90 95       	com	r25
    12de:	80 95       	com	r24
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	8f 4f       	sbci	r24, 0xFF	; 255
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	08 95       	ret

000012ec <__floatunsisf>:
    12ec:	e8 94       	clt
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <__floatsisf+0x12>

000012f0 <__floatsisf>:
    12f0:	97 fb       	bst	r25, 7
    12f2:	3e f4       	brtc	.+14     	; 0x1302 <__floatsisf+0x12>
    12f4:	90 95       	com	r25
    12f6:	80 95       	com	r24
    12f8:	70 95       	com	r23
    12fa:	61 95       	neg	r22
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	99 23       	and	r25, r25
    1304:	a9 f0       	breq	.+42     	; 0x1330 <__floatsisf+0x40>
    1306:	f9 2f       	mov	r31, r25
    1308:	96 e9       	ldi	r25, 0x96	; 150
    130a:	bb 27       	eor	r27, r27
    130c:	93 95       	inc	r25
    130e:	f6 95       	lsr	r31
    1310:	87 95       	ror	r24
    1312:	77 95       	ror	r23
    1314:	67 95       	ror	r22
    1316:	b7 95       	ror	r27
    1318:	f1 11       	cpse	r31, r1
    131a:	f8 cf       	rjmp	.-16     	; 0x130c <__floatsisf+0x1c>
    131c:	fa f4       	brpl	.+62     	; 0x135c <__floatsisf+0x6c>
    131e:	bb 0f       	add	r27, r27
    1320:	11 f4       	brne	.+4      	; 0x1326 <__floatsisf+0x36>
    1322:	60 ff       	sbrs	r22, 0
    1324:	1b c0       	rjmp	.+54     	; 0x135c <__floatsisf+0x6c>
    1326:	6f 5f       	subi	r22, 0xFF	; 255
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	16 c0       	rjmp	.+44     	; 0x135c <__floatsisf+0x6c>
    1330:	88 23       	and	r24, r24
    1332:	11 f0       	breq	.+4      	; 0x1338 <__floatsisf+0x48>
    1334:	96 e9       	ldi	r25, 0x96	; 150
    1336:	11 c0       	rjmp	.+34     	; 0x135a <__floatsisf+0x6a>
    1338:	77 23       	and	r23, r23
    133a:	21 f0       	breq	.+8      	; 0x1344 <__floatsisf+0x54>
    133c:	9e e8       	ldi	r25, 0x8E	; 142
    133e:	87 2f       	mov	r24, r23
    1340:	76 2f       	mov	r23, r22
    1342:	05 c0       	rjmp	.+10     	; 0x134e <__floatsisf+0x5e>
    1344:	66 23       	and	r22, r22
    1346:	71 f0       	breq	.+28     	; 0x1364 <__floatsisf+0x74>
    1348:	96 e8       	ldi	r25, 0x86	; 134
    134a:	86 2f       	mov	r24, r22
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	2a f0       	brmi	.+10     	; 0x135c <__floatsisf+0x6c>
    1352:	9a 95       	dec	r25
    1354:	66 0f       	add	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	88 1f       	adc	r24, r24
    135a:	da f7       	brpl	.-10     	; 0x1352 <__floatsisf+0x62>
    135c:	88 0f       	add	r24, r24
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	97 f9       	bld	r25, 7
    1364:	08 95       	ret

00001366 <__fp_inf>:
    1366:	97 f9       	bld	r25, 7
    1368:	9f 67       	ori	r25, 0x7F	; 127
    136a:	80 e8       	ldi	r24, 0x80	; 128
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	08 95       	ret

00001372 <__fp_nan>:
    1372:	9f ef       	ldi	r25, 0xFF	; 255
    1374:	80 ec       	ldi	r24, 0xC0	; 192
    1376:	08 95       	ret

00001378 <__fp_powser>:
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	1f 93       	push	r17
    137e:	0f 93       	push	r16
    1380:	ff 92       	push	r15
    1382:	ef 92       	push	r14
    1384:	df 92       	push	r13
    1386:	7b 01       	movw	r14, r22
    1388:	8c 01       	movw	r16, r24
    138a:	68 94       	set
    138c:	06 c0       	rjmp	.+12     	; 0x139a <__fp_powser+0x22>
    138e:	da 2e       	mov	r13, r26
    1390:	ef 01       	movw	r28, r30
    1392:	0e 94 46 0a 	call	0x148c	; 0x148c <__mulsf3x>
    1396:	fe 01       	movw	r30, r28
    1398:	e8 94       	clt
    139a:	a5 91       	lpm	r26, Z+
    139c:	25 91       	lpm	r18, Z+
    139e:	35 91       	lpm	r19, Z+
    13a0:	45 91       	lpm	r20, Z+
    13a2:	55 91       	lpm	r21, Z+
    13a4:	a6 f3       	brts	.-24     	; 0x138e <__fp_powser+0x16>
    13a6:	ef 01       	movw	r28, r30
    13a8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__addsf3x>
    13ac:	fe 01       	movw	r30, r28
    13ae:	97 01       	movw	r18, r14
    13b0:	a8 01       	movw	r20, r16
    13b2:	da 94       	dec	r13
    13b4:	69 f7       	brne	.-38     	; 0x1390 <__fp_powser+0x18>
    13b6:	df 90       	pop	r13
    13b8:	ef 90       	pop	r14
    13ba:	ff 90       	pop	r15
    13bc:	0f 91       	pop	r16
    13be:	1f 91       	pop	r17
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <__fp_pscA>:
    13c6:	00 24       	eor	r0, r0
    13c8:	0a 94       	dec	r0
    13ca:	16 16       	cp	r1, r22
    13cc:	17 06       	cpc	r1, r23
    13ce:	18 06       	cpc	r1, r24
    13d0:	09 06       	cpc	r0, r25
    13d2:	08 95       	ret

000013d4 <__fp_pscB>:
    13d4:	00 24       	eor	r0, r0
    13d6:	0a 94       	dec	r0
    13d8:	12 16       	cp	r1, r18
    13da:	13 06       	cpc	r1, r19
    13dc:	14 06       	cpc	r1, r20
    13de:	05 06       	cpc	r0, r21
    13e0:	08 95       	ret

000013e2 <__fp_round>:
    13e2:	09 2e       	mov	r0, r25
    13e4:	03 94       	inc	r0
    13e6:	00 0c       	add	r0, r0
    13e8:	11 f4       	brne	.+4      	; 0x13ee <__fp_round+0xc>
    13ea:	88 23       	and	r24, r24
    13ec:	52 f0       	brmi	.+20     	; 0x1402 <__fp_round+0x20>
    13ee:	bb 0f       	add	r27, r27
    13f0:	40 f4       	brcc	.+16     	; 0x1402 <__fp_round+0x20>
    13f2:	bf 2b       	or	r27, r31
    13f4:	11 f4       	brne	.+4      	; 0x13fa <__fp_round+0x18>
    13f6:	60 ff       	sbrs	r22, 0
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <__fp_round+0x20>
    13fa:	6f 5f       	subi	r22, 0xFF	; 255
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	08 95       	ret

00001404 <__fp_split3>:
    1404:	57 fd       	sbrc	r21, 7
    1406:	90 58       	subi	r25, 0x80	; 128
    1408:	44 0f       	add	r20, r20
    140a:	55 1f       	adc	r21, r21
    140c:	59 f0       	breq	.+22     	; 0x1424 <__fp_splitA+0x10>
    140e:	5f 3f       	cpi	r21, 0xFF	; 255
    1410:	71 f0       	breq	.+28     	; 0x142e <__fp_splitA+0x1a>
    1412:	47 95       	ror	r20

00001414 <__fp_splitA>:
    1414:	88 0f       	add	r24, r24
    1416:	97 fb       	bst	r25, 7
    1418:	99 1f       	adc	r25, r25
    141a:	61 f0       	breq	.+24     	; 0x1434 <__fp_splitA+0x20>
    141c:	9f 3f       	cpi	r25, 0xFF	; 255
    141e:	79 f0       	breq	.+30     	; 0x143e <__fp_splitA+0x2a>
    1420:	87 95       	ror	r24
    1422:	08 95       	ret
    1424:	12 16       	cp	r1, r18
    1426:	13 06       	cpc	r1, r19
    1428:	14 06       	cpc	r1, r20
    142a:	55 1f       	adc	r21, r21
    142c:	f2 cf       	rjmp	.-28     	; 0x1412 <__fp_split3+0xe>
    142e:	46 95       	lsr	r20
    1430:	f1 df       	rcall	.-30     	; 0x1414 <__fp_splitA>
    1432:	08 c0       	rjmp	.+16     	; 0x1444 <__fp_splitA+0x30>
    1434:	16 16       	cp	r1, r22
    1436:	17 06       	cpc	r1, r23
    1438:	18 06       	cpc	r1, r24
    143a:	99 1f       	adc	r25, r25
    143c:	f1 cf       	rjmp	.-30     	; 0x1420 <__fp_splitA+0xc>
    143e:	86 95       	lsr	r24
    1440:	71 05       	cpc	r23, r1
    1442:	61 05       	cpc	r22, r1
    1444:	08 94       	sec
    1446:	08 95       	ret

00001448 <__fp_zero>:
    1448:	e8 94       	clt

0000144a <__fp_szero>:
    144a:	bb 27       	eor	r27, r27
    144c:	66 27       	eor	r22, r22
    144e:	77 27       	eor	r23, r23
    1450:	cb 01       	movw	r24, r22
    1452:	97 f9       	bld	r25, 7
    1454:	08 95       	ret

00001456 <inverse>:
    1456:	9b 01       	movw	r18, r22
    1458:	ac 01       	movw	r20, r24
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	80 e8       	ldi	r24, 0x80	; 128
    1460:	9f e3       	ldi	r25, 0x3F	; 63
    1462:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__divsf3>

00001466 <__mulsf3>:
    1466:	0e 94 46 0a 	call	0x148c	; 0x148c <__mulsf3x>
    146a:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__fp_round>
    146e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__fp_pscA>
    1472:	38 f0       	brcs	.+14     	; 0x1482 <__mulsf3+0x1c>
    1474:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__fp_pscB>
    1478:	20 f0       	brcs	.+8      	; 0x1482 <__mulsf3+0x1c>
    147a:	95 23       	and	r25, r21
    147c:	11 f0       	breq	.+4      	; 0x1482 <__mulsf3+0x1c>
    147e:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_inf>
    1482:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_nan>
    1486:	11 24       	eor	r1, r1
    1488:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__fp_szero>

0000148c <__mulsf3x>:
    148c:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_split3>
    1490:	70 f3       	brcs	.-36     	; 0x146e <__mulsf3+0x8>

00001492 <__mulsf3_pse>:
    1492:	95 9f       	mul	r25, r21
    1494:	c1 f3       	breq	.-16     	; 0x1486 <__mulsf3+0x20>
    1496:	95 0f       	add	r25, r21
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	55 1f       	adc	r21, r21
    149c:	62 9f       	mul	r22, r18
    149e:	f0 01       	movw	r30, r0
    14a0:	72 9f       	mul	r23, r18
    14a2:	bb 27       	eor	r27, r27
    14a4:	f0 0d       	add	r31, r0
    14a6:	b1 1d       	adc	r27, r1
    14a8:	63 9f       	mul	r22, r19
    14aa:	aa 27       	eor	r26, r26
    14ac:	f0 0d       	add	r31, r0
    14ae:	b1 1d       	adc	r27, r1
    14b0:	aa 1f       	adc	r26, r26
    14b2:	64 9f       	mul	r22, r20
    14b4:	66 27       	eor	r22, r22
    14b6:	b0 0d       	add	r27, r0
    14b8:	a1 1d       	adc	r26, r1
    14ba:	66 1f       	adc	r22, r22
    14bc:	82 9f       	mul	r24, r18
    14be:	22 27       	eor	r18, r18
    14c0:	b0 0d       	add	r27, r0
    14c2:	a1 1d       	adc	r26, r1
    14c4:	62 1f       	adc	r22, r18
    14c6:	73 9f       	mul	r23, r19
    14c8:	b0 0d       	add	r27, r0
    14ca:	a1 1d       	adc	r26, r1
    14cc:	62 1f       	adc	r22, r18
    14ce:	83 9f       	mul	r24, r19
    14d0:	a0 0d       	add	r26, r0
    14d2:	61 1d       	adc	r22, r1
    14d4:	22 1f       	adc	r18, r18
    14d6:	74 9f       	mul	r23, r20
    14d8:	33 27       	eor	r19, r19
    14da:	a0 0d       	add	r26, r0
    14dc:	61 1d       	adc	r22, r1
    14de:	23 1f       	adc	r18, r19
    14e0:	84 9f       	mul	r24, r20
    14e2:	60 0d       	add	r22, r0
    14e4:	21 1d       	adc	r18, r1
    14e6:	82 2f       	mov	r24, r18
    14e8:	76 2f       	mov	r23, r22
    14ea:	6a 2f       	mov	r22, r26
    14ec:	11 24       	eor	r1, r1
    14ee:	9f 57       	subi	r25, 0x7F	; 127
    14f0:	50 40       	sbci	r21, 0x00	; 0
    14f2:	9a f0       	brmi	.+38     	; 0x151a <__mulsf3_pse+0x88>
    14f4:	f1 f0       	breq	.+60     	; 0x1532 <__mulsf3_pse+0xa0>
    14f6:	88 23       	and	r24, r24
    14f8:	4a f0       	brmi	.+18     	; 0x150c <__mulsf3_pse+0x7a>
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	bb 1f       	adc	r27, r27
    1500:	66 1f       	adc	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	88 1f       	adc	r24, r24
    1506:	91 50       	subi	r25, 0x01	; 1
    1508:	50 40       	sbci	r21, 0x00	; 0
    150a:	a9 f7       	brne	.-22     	; 0x14f6 <__mulsf3_pse+0x64>
    150c:	9e 3f       	cpi	r25, 0xFE	; 254
    150e:	51 05       	cpc	r21, r1
    1510:	80 f0       	brcs	.+32     	; 0x1532 <__mulsf3_pse+0xa0>
    1512:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_inf>
    1516:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__fp_szero>
    151a:	5f 3f       	cpi	r21, 0xFF	; 255
    151c:	e4 f3       	brlt	.-8      	; 0x1516 <__mulsf3_pse+0x84>
    151e:	98 3e       	cpi	r25, 0xE8	; 232
    1520:	d4 f3       	brlt	.-12     	; 0x1516 <__mulsf3_pse+0x84>
    1522:	86 95       	lsr	r24
    1524:	77 95       	ror	r23
    1526:	67 95       	ror	r22
    1528:	b7 95       	ror	r27
    152a:	f7 95       	ror	r31
    152c:	e7 95       	ror	r30
    152e:	9f 5f       	subi	r25, 0xFF	; 255
    1530:	c1 f7       	brne	.-16     	; 0x1522 <__mulsf3_pse+0x90>
    1532:	fe 2b       	or	r31, r30
    1534:	88 0f       	add	r24, r24
    1536:	91 1d       	adc	r25, r1
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	97 f9       	bld	r25, 7
    153e:	08 95       	ret

00001540 <square>:
    1540:	9b 01       	movw	r18, r22
    1542:	ac 01       	movw	r20, r24
    1544:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__mulsf3>

00001548 <__subsf3>:
    1548:	50 58       	subi	r21, 0x80	; 128

0000154a <__addsf3>:
    154a:	bb 27       	eor	r27, r27
    154c:	aa 27       	eor	r26, r26
    154e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__addsf3x>
    1552:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__fp_round>
    1556:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__fp_pscA>
    155a:	38 f0       	brcs	.+14     	; 0x156a <__addsf3+0x20>
    155c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__fp_pscB>
    1560:	20 f0       	brcs	.+8      	; 0x156a <__addsf3+0x20>
    1562:	39 f4       	brne	.+14     	; 0x1572 <__addsf3+0x28>
    1564:	9f 3f       	cpi	r25, 0xFF	; 255
    1566:	19 f4       	brne	.+6      	; 0x156e <__addsf3+0x24>
    1568:	26 f4       	brtc	.+8      	; 0x1572 <__addsf3+0x28>
    156a:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_nan>
    156e:	0e f4       	brtc	.+2      	; 0x1572 <__addsf3+0x28>
    1570:	e0 95       	com	r30
    1572:	e7 fb       	bst	r30, 7
    1574:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_inf>

00001578 <__addsf3x>:
    1578:	e9 2f       	mov	r30, r25
    157a:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_split3>
    157e:	58 f3       	brcs	.-42     	; 0x1556 <__addsf3+0xc>
    1580:	ba 17       	cp	r27, r26
    1582:	62 07       	cpc	r22, r18
    1584:	73 07       	cpc	r23, r19
    1586:	84 07       	cpc	r24, r20
    1588:	95 07       	cpc	r25, r21
    158a:	20 f0       	brcs	.+8      	; 0x1594 <__addsf3x+0x1c>
    158c:	79 f4       	brne	.+30     	; 0x15ac <__addsf3x+0x34>
    158e:	a6 f5       	brtc	.+104    	; 0x15f8 <__addsf3x+0x80>
    1590:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_zero>
    1594:	0e f4       	brtc	.+2      	; 0x1598 <__addsf3x+0x20>
    1596:	e0 95       	com	r30
    1598:	0b 2e       	mov	r0, r27
    159a:	ba 2f       	mov	r27, r26
    159c:	a0 2d       	mov	r26, r0
    159e:	0b 01       	movw	r0, r22
    15a0:	b9 01       	movw	r22, r18
    15a2:	90 01       	movw	r18, r0
    15a4:	0c 01       	movw	r0, r24
    15a6:	ca 01       	movw	r24, r20
    15a8:	a0 01       	movw	r20, r0
    15aa:	11 24       	eor	r1, r1
    15ac:	ff 27       	eor	r31, r31
    15ae:	59 1b       	sub	r21, r25
    15b0:	99 f0       	breq	.+38     	; 0x15d8 <__addsf3x+0x60>
    15b2:	59 3f       	cpi	r21, 0xF9	; 249
    15b4:	50 f4       	brcc	.+20     	; 0x15ca <__addsf3x+0x52>
    15b6:	50 3e       	cpi	r21, 0xE0	; 224
    15b8:	68 f1       	brcs	.+90     	; 0x1614 <__addsf3x+0x9c>
    15ba:	1a 16       	cp	r1, r26
    15bc:	f0 40       	sbci	r31, 0x00	; 0
    15be:	a2 2f       	mov	r26, r18
    15c0:	23 2f       	mov	r18, r19
    15c2:	34 2f       	mov	r19, r20
    15c4:	44 27       	eor	r20, r20
    15c6:	58 5f       	subi	r21, 0xF8	; 248
    15c8:	f3 cf       	rjmp	.-26     	; 0x15b0 <__addsf3x+0x38>
    15ca:	46 95       	lsr	r20
    15cc:	37 95       	ror	r19
    15ce:	27 95       	ror	r18
    15d0:	a7 95       	ror	r26
    15d2:	f0 40       	sbci	r31, 0x00	; 0
    15d4:	53 95       	inc	r21
    15d6:	c9 f7       	brne	.-14     	; 0x15ca <__addsf3x+0x52>
    15d8:	7e f4       	brtc	.+30     	; 0x15f8 <__addsf3x+0x80>
    15da:	1f 16       	cp	r1, r31
    15dc:	ba 0b       	sbc	r27, r26
    15de:	62 0b       	sbc	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	84 0b       	sbc	r24, r20
    15e4:	ba f0       	brmi	.+46     	; 0x1614 <__addsf3x+0x9c>
    15e6:	91 50       	subi	r25, 0x01	; 1
    15e8:	a1 f0       	breq	.+40     	; 0x1612 <__addsf3x+0x9a>
    15ea:	ff 0f       	add	r31, r31
    15ec:	bb 1f       	adc	r27, r27
    15ee:	66 1f       	adc	r22, r22
    15f0:	77 1f       	adc	r23, r23
    15f2:	88 1f       	adc	r24, r24
    15f4:	c2 f7       	brpl	.-16     	; 0x15e6 <__addsf3x+0x6e>
    15f6:	0e c0       	rjmp	.+28     	; 0x1614 <__addsf3x+0x9c>
    15f8:	ba 0f       	add	r27, r26
    15fa:	62 1f       	adc	r22, r18
    15fc:	73 1f       	adc	r23, r19
    15fe:	84 1f       	adc	r24, r20
    1600:	48 f4       	brcc	.+18     	; 0x1614 <__addsf3x+0x9c>
    1602:	87 95       	ror	r24
    1604:	77 95       	ror	r23
    1606:	67 95       	ror	r22
    1608:	b7 95       	ror	r27
    160a:	f7 95       	ror	r31
    160c:	9e 3f       	cpi	r25, 0xFE	; 254
    160e:	08 f0       	brcs	.+2      	; 0x1612 <__addsf3x+0x9a>
    1610:	b0 cf       	rjmp	.-160    	; 0x1572 <__addsf3+0x28>
    1612:	93 95       	inc	r25
    1614:	88 0f       	add	r24, r24
    1616:	08 f0       	brcs	.+2      	; 0x161a <__addsf3x+0xa2>
    1618:	99 27       	eor	r25, r25
    161a:	ee 0f       	add	r30, r30
    161c:	97 95       	ror	r25
    161e:	87 95       	ror	r24
    1620:	08 95       	ret

00001622 <__divmodhi4>:
    1622:	97 fb       	bst	r25, 7
    1624:	07 2e       	mov	r0, r23
    1626:	16 f4       	brtc	.+4      	; 0x162c <__divmodhi4+0xa>
    1628:	00 94       	com	r0
    162a:	07 d0       	rcall	.+14     	; 0x163a <__divmodhi4_neg1>
    162c:	77 fd       	sbrc	r23, 7
    162e:	09 d0       	rcall	.+18     	; 0x1642 <__divmodhi4_neg2>
    1630:	0e 94 25 0b 	call	0x164a	; 0x164a <__udivmodhi4>
    1634:	07 fc       	sbrc	r0, 7
    1636:	05 d0       	rcall	.+10     	; 0x1642 <__divmodhi4_neg2>
    1638:	3e f4       	brtc	.+14     	; 0x1648 <__divmodhi4_exit>

0000163a <__divmodhi4_neg1>:
    163a:	90 95       	com	r25
    163c:	81 95       	neg	r24
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	08 95       	ret

00001642 <__divmodhi4_neg2>:
    1642:	70 95       	com	r23
    1644:	61 95       	neg	r22
    1646:	7f 4f       	sbci	r23, 0xFF	; 255

00001648 <__divmodhi4_exit>:
    1648:	08 95       	ret

0000164a <__udivmodhi4>:
    164a:	aa 1b       	sub	r26, r26
    164c:	bb 1b       	sub	r27, r27
    164e:	51 e1       	ldi	r21, 0x11	; 17
    1650:	07 c0       	rjmp	.+14     	; 0x1660 <__udivmodhi4_ep>

00001652 <__udivmodhi4_loop>:
    1652:	aa 1f       	adc	r26, r26
    1654:	bb 1f       	adc	r27, r27
    1656:	a6 17       	cp	r26, r22
    1658:	b7 07       	cpc	r27, r23
    165a:	10 f0       	brcs	.+4      	; 0x1660 <__udivmodhi4_ep>
    165c:	a6 1b       	sub	r26, r22
    165e:	b7 0b       	sbc	r27, r23

00001660 <__udivmodhi4_ep>:
    1660:	88 1f       	adc	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	5a 95       	dec	r21
    1666:	a9 f7       	brne	.-22     	; 0x1652 <__udivmodhi4_loop>
    1668:	80 95       	com	r24
    166a:	90 95       	com	r25
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	08 95       	ret

00001672 <fdevopen>:
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	31 f4       	brne	.+12     	; 0x168a <fdevopen+0x18>
    167e:	61 15       	cp	r22, r1
    1680:	71 05       	cpc	r23, r1
    1682:	19 f4       	brne	.+6      	; 0x168a <fdevopen+0x18>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	3a c0       	rjmp	.+116    	; 0x16fe <fdevopen+0x8c>
    168a:	8b 01       	movw	r16, r22
    168c:	ec 01       	movw	r28, r24
    168e:	6e e0       	ldi	r22, 0x0E	; 14
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <calloc>
    169a:	fc 01       	movw	r30, r24
    169c:	89 2b       	or	r24, r25
    169e:	91 f3       	breq	.-28     	; 0x1684 <fdevopen+0x12>
    16a0:	80 e8       	ldi	r24, 0x80	; 128
    16a2:	83 83       	std	Z+3, r24	; 0x03
    16a4:	01 15       	cp	r16, r1
    16a6:	11 05       	cpc	r17, r1
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <fdevopen+0x54>
    16aa:	13 87       	std	Z+11, r17	; 0x0b
    16ac:	02 87       	std	Z+10, r16	; 0x0a
    16ae:	81 e8       	ldi	r24, 0x81	; 129
    16b0:	83 83       	std	Z+3, r24	; 0x03
    16b2:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <__iob>
    16b6:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <__iob+0x1>
    16ba:	89 2b       	or	r24, r25
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <fdevopen+0x54>
    16be:	f0 93 fc 03 	sts	0x03FC, r31	; 0x8003fc <__iob+0x1>
    16c2:	e0 93 fb 03 	sts	0x03FB, r30	; 0x8003fb <__iob>
    16c6:	20 97       	sbiw	r28, 0x00	; 0
    16c8:	c9 f0       	breq	.+50     	; 0x16fc <fdevopen+0x8a>
    16ca:	d1 87       	std	Z+9, r29	; 0x09
    16cc:	c0 87       	std	Z+8, r28	; 0x08
    16ce:	83 81       	ldd	r24, Z+3	; 0x03
    16d0:	82 60       	ori	r24, 0x02	; 2
    16d2:	83 83       	std	Z+3, r24	; 0x03
    16d4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <__iob+0x2>
    16d8:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <__iob+0x3>
    16dc:	89 2b       	or	r24, r25
    16de:	71 f4       	brne	.+28     	; 0x16fc <fdevopen+0x8a>
    16e0:	f0 93 fe 03 	sts	0x03FE, r31	; 0x8003fe <__iob+0x3>
    16e4:	e0 93 fd 03 	sts	0x03FD, r30	; 0x8003fd <__iob+0x2>
    16e8:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <__iob+0x4>
    16ec:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <__iob+0x5>
    16f0:	89 2b       	or	r24, r25
    16f2:	21 f4       	brne	.+8      	; 0x16fc <fdevopen+0x8a>
    16f4:	f0 93 00 04 	sts	0x0400, r31	; 0x800400 <__iob+0x5>
    16f8:	e0 93 ff 03 	sts	0x03FF, r30	; 0x8003ff <__iob+0x4>
    16fc:	cf 01       	movw	r24, r30
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <printf>:
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ea e8       	ldi	r30, 0x8A	; 138
    170e:	fb e0       	ldi	r31, 0x0B	; 11
    1710:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x20>
    1714:	ae 01       	movw	r20, r28
    1716:	4b 5f       	subi	r20, 0xFB	; 251
    1718:	5f 4f       	sbci	r21, 0xFF	; 255
    171a:	fa 01       	movw	r30, r20
    171c:	61 91       	ld	r22, Z+
    171e:	71 91       	ld	r23, Z+
    1720:	af 01       	movw	r20, r30
    1722:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <__iob+0x2>
    1726:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <__iob+0x3>
    172a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <vfprintf>
    172e:	e2 e0       	ldi	r30, 0x02	; 2
    1730:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x20>

00001734 <vfprintf>:
    1734:	ab e0       	ldi	r26, 0x0B	; 11
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e0 ea       	ldi	r30, 0xA0	; 160
    173a:	fb e0       	ldi	r31, 0x0B	; 11
    173c:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__prologue_saves__>
    1740:	6c 01       	movw	r12, r24
    1742:	7b 01       	movw	r14, r22
    1744:	8a 01       	movw	r16, r20
    1746:	fc 01       	movw	r30, r24
    1748:	17 82       	std	Z+7, r1	; 0x07
    174a:	16 82       	std	Z+6, r1	; 0x06
    174c:	83 81       	ldd	r24, Z+3	; 0x03
    174e:	81 ff       	sbrs	r24, 1
    1750:	cc c1       	rjmp	.+920    	; 0x1aea <vfprintf+0x3b6>
    1752:	ce 01       	movw	r24, r28
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	3c 01       	movw	r6, r24
    1758:	f6 01       	movw	r30, r12
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	f7 01       	movw	r30, r14
    175e:	93 fd       	sbrc	r25, 3
    1760:	85 91       	lpm	r24, Z+
    1762:	93 ff       	sbrs	r25, 3
    1764:	81 91       	ld	r24, Z+
    1766:	7f 01       	movw	r14, r30
    1768:	88 23       	and	r24, r24
    176a:	09 f4       	brne	.+2      	; 0x176e <vfprintf+0x3a>
    176c:	ba c1       	rjmp	.+884    	; 0x1ae2 <vfprintf+0x3ae>
    176e:	85 32       	cpi	r24, 0x25	; 37
    1770:	39 f4       	brne	.+14     	; 0x1780 <vfprintf+0x4c>
    1772:	93 fd       	sbrc	r25, 3
    1774:	85 91       	lpm	r24, Z+
    1776:	93 ff       	sbrs	r25, 3
    1778:	81 91       	ld	r24, Z+
    177a:	7f 01       	movw	r14, r30
    177c:	85 32       	cpi	r24, 0x25	; 37
    177e:	29 f4       	brne	.+10     	; 0x178a <vfprintf+0x56>
    1780:	b6 01       	movw	r22, r12
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1788:	e7 cf       	rjmp	.-50     	; 0x1758 <vfprintf+0x24>
    178a:	91 2c       	mov	r9, r1
    178c:	21 2c       	mov	r2, r1
    178e:	31 2c       	mov	r3, r1
    1790:	ff e1       	ldi	r31, 0x1F	; 31
    1792:	f3 15       	cp	r31, r3
    1794:	d8 f0       	brcs	.+54     	; 0x17cc <vfprintf+0x98>
    1796:	8b 32       	cpi	r24, 0x2B	; 43
    1798:	79 f0       	breq	.+30     	; 0x17b8 <vfprintf+0x84>
    179a:	38 f4       	brcc	.+14     	; 0x17aa <vfprintf+0x76>
    179c:	80 32       	cpi	r24, 0x20	; 32
    179e:	79 f0       	breq	.+30     	; 0x17be <vfprintf+0x8a>
    17a0:	83 32       	cpi	r24, 0x23	; 35
    17a2:	a1 f4       	brne	.+40     	; 0x17cc <vfprintf+0x98>
    17a4:	23 2d       	mov	r18, r3
    17a6:	20 61       	ori	r18, 0x10	; 16
    17a8:	1d c0       	rjmp	.+58     	; 0x17e4 <vfprintf+0xb0>
    17aa:	8d 32       	cpi	r24, 0x2D	; 45
    17ac:	61 f0       	breq	.+24     	; 0x17c6 <vfprintf+0x92>
    17ae:	80 33       	cpi	r24, 0x30	; 48
    17b0:	69 f4       	brne	.+26     	; 0x17cc <vfprintf+0x98>
    17b2:	23 2d       	mov	r18, r3
    17b4:	21 60       	ori	r18, 0x01	; 1
    17b6:	16 c0       	rjmp	.+44     	; 0x17e4 <vfprintf+0xb0>
    17b8:	83 2d       	mov	r24, r3
    17ba:	82 60       	ori	r24, 0x02	; 2
    17bc:	38 2e       	mov	r3, r24
    17be:	e3 2d       	mov	r30, r3
    17c0:	e4 60       	ori	r30, 0x04	; 4
    17c2:	3e 2e       	mov	r3, r30
    17c4:	2a c0       	rjmp	.+84     	; 0x181a <vfprintf+0xe6>
    17c6:	f3 2d       	mov	r31, r3
    17c8:	f8 60       	ori	r31, 0x08	; 8
    17ca:	1d c0       	rjmp	.+58     	; 0x1806 <vfprintf+0xd2>
    17cc:	37 fc       	sbrc	r3, 7
    17ce:	2d c0       	rjmp	.+90     	; 0x182a <vfprintf+0xf6>
    17d0:	20 ed       	ldi	r18, 0xD0	; 208
    17d2:	28 0f       	add	r18, r24
    17d4:	2a 30       	cpi	r18, 0x0A	; 10
    17d6:	40 f0       	brcs	.+16     	; 0x17e8 <vfprintf+0xb4>
    17d8:	8e 32       	cpi	r24, 0x2E	; 46
    17da:	b9 f4       	brne	.+46     	; 0x180a <vfprintf+0xd6>
    17dc:	36 fc       	sbrc	r3, 6
    17de:	81 c1       	rjmp	.+770    	; 0x1ae2 <vfprintf+0x3ae>
    17e0:	23 2d       	mov	r18, r3
    17e2:	20 64       	ori	r18, 0x40	; 64
    17e4:	32 2e       	mov	r3, r18
    17e6:	19 c0       	rjmp	.+50     	; 0x181a <vfprintf+0xe6>
    17e8:	36 fe       	sbrs	r3, 6
    17ea:	06 c0       	rjmp	.+12     	; 0x17f8 <vfprintf+0xc4>
    17ec:	8a e0       	ldi	r24, 0x0A	; 10
    17ee:	98 9e       	mul	r9, r24
    17f0:	20 0d       	add	r18, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	92 2e       	mov	r9, r18
    17f6:	11 c0       	rjmp	.+34     	; 0x181a <vfprintf+0xe6>
    17f8:	ea e0       	ldi	r30, 0x0A	; 10
    17fa:	2e 9e       	mul	r2, r30
    17fc:	20 0d       	add	r18, r0
    17fe:	11 24       	eor	r1, r1
    1800:	22 2e       	mov	r2, r18
    1802:	f3 2d       	mov	r31, r3
    1804:	f0 62       	ori	r31, 0x20	; 32
    1806:	3f 2e       	mov	r3, r31
    1808:	08 c0       	rjmp	.+16     	; 0x181a <vfprintf+0xe6>
    180a:	8c 36       	cpi	r24, 0x6C	; 108
    180c:	21 f4       	brne	.+8      	; 0x1816 <vfprintf+0xe2>
    180e:	83 2d       	mov	r24, r3
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	38 2e       	mov	r3, r24
    1814:	02 c0       	rjmp	.+4      	; 0x181a <vfprintf+0xe6>
    1816:	88 36       	cpi	r24, 0x68	; 104
    1818:	41 f4       	brne	.+16     	; 0x182a <vfprintf+0xf6>
    181a:	f7 01       	movw	r30, r14
    181c:	93 fd       	sbrc	r25, 3
    181e:	85 91       	lpm	r24, Z+
    1820:	93 ff       	sbrs	r25, 3
    1822:	81 91       	ld	r24, Z+
    1824:	7f 01       	movw	r14, r30
    1826:	81 11       	cpse	r24, r1
    1828:	b3 cf       	rjmp	.-154    	; 0x1790 <vfprintf+0x5c>
    182a:	98 2f       	mov	r25, r24
    182c:	9f 7d       	andi	r25, 0xDF	; 223
    182e:	95 54       	subi	r25, 0x45	; 69
    1830:	93 30       	cpi	r25, 0x03	; 3
    1832:	28 f4       	brcc	.+10     	; 0x183e <vfprintf+0x10a>
    1834:	0c 5f       	subi	r16, 0xFC	; 252
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	9f e3       	ldi	r25, 0x3F	; 63
    183a:	99 83       	std	Y+1, r25	; 0x01
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <vfprintf+0x124>
    183e:	83 36       	cpi	r24, 0x63	; 99
    1840:	31 f0       	breq	.+12     	; 0x184e <vfprintf+0x11a>
    1842:	83 37       	cpi	r24, 0x73	; 115
    1844:	71 f0       	breq	.+28     	; 0x1862 <vfprintf+0x12e>
    1846:	83 35       	cpi	r24, 0x53	; 83
    1848:	09 f0       	breq	.+2      	; 0x184c <vfprintf+0x118>
    184a:	59 c0       	rjmp	.+178    	; 0x18fe <vfprintf+0x1ca>
    184c:	21 c0       	rjmp	.+66     	; 0x1890 <vfprintf+0x15c>
    184e:	f8 01       	movw	r30, r16
    1850:	80 81       	ld	r24, Z
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	0e 5f       	subi	r16, 0xFE	; 254
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	88 24       	eor	r8, r8
    185a:	83 94       	inc	r8
    185c:	91 2c       	mov	r9, r1
    185e:	53 01       	movw	r10, r6
    1860:	13 c0       	rjmp	.+38     	; 0x1888 <vfprintf+0x154>
    1862:	28 01       	movw	r4, r16
    1864:	f2 e0       	ldi	r31, 0x02	; 2
    1866:	4f 0e       	add	r4, r31
    1868:	51 1c       	adc	r5, r1
    186a:	f8 01       	movw	r30, r16
    186c:	a0 80       	ld	r10, Z
    186e:	b1 80       	ldd	r11, Z+1	; 0x01
    1870:	36 fe       	sbrs	r3, 6
    1872:	03 c0       	rjmp	.+6      	; 0x187a <vfprintf+0x146>
    1874:	69 2d       	mov	r22, r9
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	02 c0       	rjmp	.+4      	; 0x187e <vfprintf+0x14a>
    187a:	6f ef       	ldi	r22, 0xFF	; 255
    187c:	7f ef       	ldi	r23, 0xFF	; 255
    187e:	c5 01       	movw	r24, r10
    1880:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <strnlen>
    1884:	4c 01       	movw	r8, r24
    1886:	82 01       	movw	r16, r4
    1888:	f3 2d       	mov	r31, r3
    188a:	ff 77       	andi	r31, 0x7F	; 127
    188c:	3f 2e       	mov	r3, r31
    188e:	16 c0       	rjmp	.+44     	; 0x18bc <vfprintf+0x188>
    1890:	28 01       	movw	r4, r16
    1892:	22 e0       	ldi	r18, 0x02	; 2
    1894:	42 0e       	add	r4, r18
    1896:	51 1c       	adc	r5, r1
    1898:	f8 01       	movw	r30, r16
    189a:	a0 80       	ld	r10, Z
    189c:	b1 80       	ldd	r11, Z+1	; 0x01
    189e:	36 fe       	sbrs	r3, 6
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <vfprintf+0x174>
    18a2:	69 2d       	mov	r22, r9
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <vfprintf+0x178>
    18a8:	6f ef       	ldi	r22, 0xFF	; 255
    18aa:	7f ef       	ldi	r23, 0xFF	; 255
    18ac:	c5 01       	movw	r24, r10
    18ae:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <strnlen_P>
    18b2:	4c 01       	movw	r8, r24
    18b4:	f3 2d       	mov	r31, r3
    18b6:	f0 68       	ori	r31, 0x80	; 128
    18b8:	3f 2e       	mov	r3, r31
    18ba:	82 01       	movw	r16, r4
    18bc:	33 fc       	sbrc	r3, 3
    18be:	1b c0       	rjmp	.+54     	; 0x18f6 <vfprintf+0x1c2>
    18c0:	82 2d       	mov	r24, r2
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	88 16       	cp	r8, r24
    18c6:	99 06       	cpc	r9, r25
    18c8:	b0 f4       	brcc	.+44     	; 0x18f6 <vfprintf+0x1c2>
    18ca:	b6 01       	movw	r22, r12
    18cc:	80 e2       	ldi	r24, 0x20	; 32
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    18d4:	2a 94       	dec	r2
    18d6:	f4 cf       	rjmp	.-24     	; 0x18c0 <vfprintf+0x18c>
    18d8:	f5 01       	movw	r30, r10
    18da:	37 fc       	sbrc	r3, 7
    18dc:	85 91       	lpm	r24, Z+
    18de:	37 fe       	sbrs	r3, 7
    18e0:	81 91       	ld	r24, Z+
    18e2:	5f 01       	movw	r10, r30
    18e4:	b6 01       	movw	r22, r12
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    18ec:	21 10       	cpse	r2, r1
    18ee:	2a 94       	dec	r2
    18f0:	21 e0       	ldi	r18, 0x01	; 1
    18f2:	82 1a       	sub	r8, r18
    18f4:	91 08       	sbc	r9, r1
    18f6:	81 14       	cp	r8, r1
    18f8:	91 04       	cpc	r9, r1
    18fa:	71 f7       	brne	.-36     	; 0x18d8 <vfprintf+0x1a4>
    18fc:	e8 c0       	rjmp	.+464    	; 0x1ace <vfprintf+0x39a>
    18fe:	84 36       	cpi	r24, 0x64	; 100
    1900:	11 f0       	breq	.+4      	; 0x1906 <vfprintf+0x1d2>
    1902:	89 36       	cpi	r24, 0x69	; 105
    1904:	41 f5       	brne	.+80     	; 0x1956 <vfprintf+0x222>
    1906:	f8 01       	movw	r30, r16
    1908:	37 fe       	sbrs	r3, 7
    190a:	07 c0       	rjmp	.+14     	; 0x191a <vfprintf+0x1e6>
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	0c 5f       	subi	r16, 0xFC	; 252
    1916:	1f 4f       	sbci	r17, 0xFF	; 255
    1918:	08 c0       	rjmp	.+16     	; 0x192a <vfprintf+0x1f6>
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	07 2e       	mov	r0, r23
    1920:	00 0c       	add	r0, r0
    1922:	88 0b       	sbc	r24, r24
    1924:	99 0b       	sbc	r25, r25
    1926:	0e 5f       	subi	r16, 0xFE	; 254
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	f3 2d       	mov	r31, r3
    192c:	ff 76       	andi	r31, 0x6F	; 111
    192e:	3f 2e       	mov	r3, r31
    1930:	97 ff       	sbrs	r25, 7
    1932:	09 c0       	rjmp	.+18     	; 0x1946 <vfprintf+0x212>
    1934:	90 95       	com	r25
    1936:	80 95       	com	r24
    1938:	70 95       	com	r23
    193a:	61 95       	neg	r22
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	8f 4f       	sbci	r24, 0xFF	; 255
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	f0 68       	ori	r31, 0x80	; 128
    1944:	3f 2e       	mov	r3, r31
    1946:	2a e0       	ldi	r18, 0x0A	; 10
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	a3 01       	movw	r20, r6
    194c:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ultoa_invert>
    1950:	88 2e       	mov	r8, r24
    1952:	86 18       	sub	r8, r6
    1954:	45 c0       	rjmp	.+138    	; 0x19e0 <vfprintf+0x2ac>
    1956:	85 37       	cpi	r24, 0x75	; 117
    1958:	31 f4       	brne	.+12     	; 0x1966 <vfprintf+0x232>
    195a:	23 2d       	mov	r18, r3
    195c:	2f 7e       	andi	r18, 0xEF	; 239
    195e:	b2 2e       	mov	r11, r18
    1960:	2a e0       	ldi	r18, 0x0A	; 10
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	25 c0       	rjmp	.+74     	; 0x19b0 <vfprintf+0x27c>
    1966:	93 2d       	mov	r25, r3
    1968:	99 7f       	andi	r25, 0xF9	; 249
    196a:	b9 2e       	mov	r11, r25
    196c:	8f 36       	cpi	r24, 0x6F	; 111
    196e:	c1 f0       	breq	.+48     	; 0x19a0 <vfprintf+0x26c>
    1970:	18 f4       	brcc	.+6      	; 0x1978 <vfprintf+0x244>
    1972:	88 35       	cpi	r24, 0x58	; 88
    1974:	79 f0       	breq	.+30     	; 0x1994 <vfprintf+0x260>
    1976:	b5 c0       	rjmp	.+362    	; 0x1ae2 <vfprintf+0x3ae>
    1978:	80 37       	cpi	r24, 0x70	; 112
    197a:	19 f0       	breq	.+6      	; 0x1982 <vfprintf+0x24e>
    197c:	88 37       	cpi	r24, 0x78	; 120
    197e:	21 f0       	breq	.+8      	; 0x1988 <vfprintf+0x254>
    1980:	b0 c0       	rjmp	.+352    	; 0x1ae2 <vfprintf+0x3ae>
    1982:	e9 2f       	mov	r30, r25
    1984:	e0 61       	ori	r30, 0x10	; 16
    1986:	be 2e       	mov	r11, r30
    1988:	b4 fe       	sbrs	r11, 4
    198a:	0d c0       	rjmp	.+26     	; 0x19a6 <vfprintf+0x272>
    198c:	fb 2d       	mov	r31, r11
    198e:	f4 60       	ori	r31, 0x04	; 4
    1990:	bf 2e       	mov	r11, r31
    1992:	09 c0       	rjmp	.+18     	; 0x19a6 <vfprintf+0x272>
    1994:	34 fe       	sbrs	r3, 4
    1996:	0a c0       	rjmp	.+20     	; 0x19ac <vfprintf+0x278>
    1998:	29 2f       	mov	r18, r25
    199a:	26 60       	ori	r18, 0x06	; 6
    199c:	b2 2e       	mov	r11, r18
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <vfprintf+0x278>
    19a0:	28 e0       	ldi	r18, 0x08	; 8
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <vfprintf+0x27c>
    19a6:	20 e1       	ldi	r18, 0x10	; 16
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <vfprintf+0x27c>
    19ac:	20 e1       	ldi	r18, 0x10	; 16
    19ae:	32 e0       	ldi	r19, 0x02	; 2
    19b0:	f8 01       	movw	r30, r16
    19b2:	b7 fe       	sbrs	r11, 7
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <vfprintf+0x290>
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	0c 5f       	subi	r16, 0xFC	; 252
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <vfprintf+0x29c>
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 5f       	subi	r16, 0xFE	; 254
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	a3 01       	movw	r20, r6
    19d2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ultoa_invert>
    19d6:	88 2e       	mov	r8, r24
    19d8:	86 18       	sub	r8, r6
    19da:	fb 2d       	mov	r31, r11
    19dc:	ff 77       	andi	r31, 0x7F	; 127
    19de:	3f 2e       	mov	r3, r31
    19e0:	36 fe       	sbrs	r3, 6
    19e2:	0d c0       	rjmp	.+26     	; 0x19fe <vfprintf+0x2ca>
    19e4:	23 2d       	mov	r18, r3
    19e6:	2e 7f       	andi	r18, 0xFE	; 254
    19e8:	a2 2e       	mov	r10, r18
    19ea:	89 14       	cp	r8, r9
    19ec:	58 f4       	brcc	.+22     	; 0x1a04 <vfprintf+0x2d0>
    19ee:	34 fe       	sbrs	r3, 4
    19f0:	0b c0       	rjmp	.+22     	; 0x1a08 <vfprintf+0x2d4>
    19f2:	32 fc       	sbrc	r3, 2
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <vfprintf+0x2d4>
    19f6:	83 2d       	mov	r24, r3
    19f8:	8e 7e       	andi	r24, 0xEE	; 238
    19fa:	a8 2e       	mov	r10, r24
    19fc:	05 c0       	rjmp	.+10     	; 0x1a08 <vfprintf+0x2d4>
    19fe:	b8 2c       	mov	r11, r8
    1a00:	a3 2c       	mov	r10, r3
    1a02:	03 c0       	rjmp	.+6      	; 0x1a0a <vfprintf+0x2d6>
    1a04:	b8 2c       	mov	r11, r8
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <vfprintf+0x2d6>
    1a08:	b9 2c       	mov	r11, r9
    1a0a:	a4 fe       	sbrs	r10, 4
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <vfprintf+0x2f8>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e8 0d       	add	r30, r8
    1a12:	f1 1d       	adc	r31, r1
    1a14:	80 81       	ld	r24, Z
    1a16:	80 33       	cpi	r24, 0x30	; 48
    1a18:	21 f4       	brne	.+8      	; 0x1a22 <vfprintf+0x2ee>
    1a1a:	9a 2d       	mov	r25, r10
    1a1c:	99 7e       	andi	r25, 0xE9	; 233
    1a1e:	a9 2e       	mov	r10, r25
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <vfprintf+0x300>
    1a22:	a2 fe       	sbrs	r10, 2
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <vfprintf+0x2fe>
    1a26:	b3 94       	inc	r11
    1a28:	b3 94       	inc	r11
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <vfprintf+0x300>
    1a2c:	8a 2d       	mov	r24, r10
    1a2e:	86 78       	andi	r24, 0x86	; 134
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <vfprintf+0x300>
    1a32:	b3 94       	inc	r11
    1a34:	a3 fc       	sbrc	r10, 3
    1a36:	11 c0       	rjmp	.+34     	; 0x1a5a <vfprintf+0x326>
    1a38:	a0 fe       	sbrs	r10, 0
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <vfprintf+0x314>
    1a3c:	b2 14       	cp	r11, r2
    1a3e:	88 f4       	brcc	.+34     	; 0x1a62 <vfprintf+0x32e>
    1a40:	28 0c       	add	r2, r8
    1a42:	92 2c       	mov	r9, r2
    1a44:	9b 18       	sub	r9, r11
    1a46:	0e c0       	rjmp	.+28     	; 0x1a64 <vfprintf+0x330>
    1a48:	b2 14       	cp	r11, r2
    1a4a:	60 f4       	brcc	.+24     	; 0x1a64 <vfprintf+0x330>
    1a4c:	b6 01       	movw	r22, r12
    1a4e:	80 e2       	ldi	r24, 0x20	; 32
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1a56:	b3 94       	inc	r11
    1a58:	f7 cf       	rjmp	.-18     	; 0x1a48 <vfprintf+0x314>
    1a5a:	b2 14       	cp	r11, r2
    1a5c:	18 f4       	brcc	.+6      	; 0x1a64 <vfprintf+0x330>
    1a5e:	2b 18       	sub	r2, r11
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <vfprintf+0x332>
    1a62:	98 2c       	mov	r9, r8
    1a64:	21 2c       	mov	r2, r1
    1a66:	a4 fe       	sbrs	r10, 4
    1a68:	10 c0       	rjmp	.+32     	; 0x1a8a <vfprintf+0x356>
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	80 e3       	ldi	r24, 0x30	; 48
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1a74:	a2 fe       	sbrs	r10, 2
    1a76:	17 c0       	rjmp	.+46     	; 0x1aa6 <vfprintf+0x372>
    1a78:	a1 fc       	sbrc	r10, 1
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <vfprintf+0x34e>
    1a7c:	88 e7       	ldi	r24, 0x78	; 120
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <vfprintf+0x352>
    1a82:	88 e5       	ldi	r24, 0x58	; 88
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	b6 01       	movw	r22, r12
    1a88:	0c c0       	rjmp	.+24     	; 0x1aa2 <vfprintf+0x36e>
    1a8a:	8a 2d       	mov	r24, r10
    1a8c:	86 78       	andi	r24, 0x86	; 134
    1a8e:	59 f0       	breq	.+22     	; 0x1aa6 <vfprintf+0x372>
    1a90:	a1 fe       	sbrs	r10, 1
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <vfprintf+0x364>
    1a94:	8b e2       	ldi	r24, 0x2B	; 43
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <vfprintf+0x366>
    1a98:	80 e2       	ldi	r24, 0x20	; 32
    1a9a:	a7 fc       	sbrc	r10, 7
    1a9c:	8d e2       	ldi	r24, 0x2D	; 45
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1aa6:	89 14       	cp	r8, r9
    1aa8:	38 f4       	brcc	.+14     	; 0x1ab8 <vfprintf+0x384>
    1aaa:	b6 01       	movw	r22, r12
    1aac:	80 e3       	ldi	r24, 0x30	; 48
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1ab4:	9a 94       	dec	r9
    1ab6:	f7 cf       	rjmp	.-18     	; 0x1aa6 <vfprintf+0x372>
    1ab8:	8a 94       	dec	r8
    1aba:	f3 01       	movw	r30, r6
    1abc:	e8 0d       	add	r30, r8
    1abe:	f1 1d       	adc	r31, r1
    1ac0:	80 81       	ld	r24, Z
    1ac2:	b6 01       	movw	r22, r12
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1aca:	81 10       	cpse	r8, r1
    1acc:	f5 cf       	rjmp	.-22     	; 0x1ab8 <vfprintf+0x384>
    1ace:	22 20       	and	r2, r2
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <vfprintf+0x3a0>
    1ad2:	42 ce       	rjmp	.-892    	; 0x1758 <vfprintf+0x24>
    1ad4:	b6 01       	movw	r22, r12
    1ad6:	80 e2       	ldi	r24, 0x20	; 32
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1ade:	2a 94       	dec	r2
    1ae0:	f6 cf       	rjmp	.-20     	; 0x1ace <vfprintf+0x39a>
    1ae2:	f6 01       	movw	r30, r12
    1ae4:	86 81       	ldd	r24, Z+6	; 0x06
    1ae6:	97 81       	ldd	r25, Z+7	; 0x07
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <vfprintf+0x3ba>
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	9f ef       	ldi	r25, 0xFF	; 255
    1aee:	2b 96       	adiw	r28, 0x0b	; 11
    1af0:	e2 e1       	ldi	r30, 0x12	; 18
    1af2:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__epilogue_restores__>

00001af6 <calloc>:
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	86 9f       	mul	r24, r22
    1b00:	80 01       	movw	r16, r0
    1b02:	87 9f       	mul	r24, r23
    1b04:	10 0d       	add	r17, r0
    1b06:	96 9f       	mul	r25, r22
    1b08:	10 0d       	add	r17, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <malloc>
    1b12:	ec 01       	movw	r28, r24
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <calloc+0x2c>
    1b18:	a8 01       	movw	r20, r16
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <memset>
    1b22:	ce 01       	movw	r24, r28
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <malloc>:
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	91 05       	cpc	r25, r1
    1b3a:	10 f4       	brcc	.+4      	; 0x1b40 <malloc+0x12>
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <__flp>
    1b44:	f0 91 04 04 	lds	r31, 0x0404	; 0x800404 <__flp+0x1>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	a0 e0       	ldi	r26, 0x00	; 0
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	30 97       	sbiw	r30, 0x00	; 0
    1b52:	19 f1       	breq	.+70     	; 0x1b9a <malloc+0x6c>
    1b54:	40 81       	ld	r20, Z
    1b56:	51 81       	ldd	r21, Z+1	; 0x01
    1b58:	02 81       	ldd	r16, Z+2	; 0x02
    1b5a:	13 81       	ldd	r17, Z+3	; 0x03
    1b5c:	48 17       	cp	r20, r24
    1b5e:	59 07       	cpc	r21, r25
    1b60:	c8 f0       	brcs	.+50     	; 0x1b94 <malloc+0x66>
    1b62:	84 17       	cp	r24, r20
    1b64:	95 07       	cpc	r25, r21
    1b66:	69 f4       	brne	.+26     	; 0x1b82 <malloc+0x54>
    1b68:	10 97       	sbiw	r26, 0x00	; 0
    1b6a:	31 f0       	breq	.+12     	; 0x1b78 <malloc+0x4a>
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	0c 93       	st	X, r16
    1b70:	12 97       	sbiw	r26, 0x02	; 2
    1b72:	13 96       	adiw	r26, 0x03	; 3
    1b74:	1c 93       	st	X, r17
    1b76:	27 c0       	rjmp	.+78     	; 0x1bc6 <malloc+0x98>
    1b78:	00 93 03 04 	sts	0x0403, r16	; 0x800403 <__flp>
    1b7c:	10 93 04 04 	sts	0x0404, r17	; 0x800404 <__flp+0x1>
    1b80:	22 c0       	rjmp	.+68     	; 0x1bc6 <malloc+0x98>
    1b82:	21 15       	cp	r18, r1
    1b84:	31 05       	cpc	r19, r1
    1b86:	19 f0       	breq	.+6      	; 0x1b8e <malloc+0x60>
    1b88:	42 17       	cp	r20, r18
    1b8a:	53 07       	cpc	r21, r19
    1b8c:	18 f4       	brcc	.+6      	; 0x1b94 <malloc+0x66>
    1b8e:	9a 01       	movw	r18, r20
    1b90:	bd 01       	movw	r22, r26
    1b92:	ef 01       	movw	r28, r30
    1b94:	df 01       	movw	r26, r30
    1b96:	f8 01       	movw	r30, r16
    1b98:	db cf       	rjmp	.-74     	; 0x1b50 <malloc+0x22>
    1b9a:	21 15       	cp	r18, r1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	f9 f0       	breq	.+62     	; 0x1bde <malloc+0xb0>
    1ba0:	28 1b       	sub	r18, r24
    1ba2:	39 0b       	sbc	r19, r25
    1ba4:	24 30       	cpi	r18, 0x04	; 4
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	80 f4       	brcc	.+32     	; 0x1bca <malloc+0x9c>
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	9b 81       	ldd	r25, Y+3	; 0x03
    1bae:	61 15       	cp	r22, r1
    1bb0:	71 05       	cpc	r23, r1
    1bb2:	21 f0       	breq	.+8      	; 0x1bbc <malloc+0x8e>
    1bb4:	fb 01       	movw	r30, r22
    1bb6:	93 83       	std	Z+3, r25	; 0x03
    1bb8:	82 83       	std	Z+2, r24	; 0x02
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <malloc+0x96>
    1bbc:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__flp+0x1>
    1bc0:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <__flp>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	32 96       	adiw	r30, 0x02	; 2
    1bc8:	44 c0       	rjmp	.+136    	; 0x1c52 <malloc+0x124>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f3 1f       	adc	r31, r19
    1bd0:	81 93       	st	Z+, r24
    1bd2:	91 93       	st	Z+, r25
    1bd4:	22 50       	subi	r18, 0x02	; 2
    1bd6:	31 09       	sbc	r19, r1
    1bd8:	39 83       	std	Y+1, r19	; 0x01
    1bda:	28 83       	st	Y, r18
    1bdc:	3a c0       	rjmp	.+116    	; 0x1c52 <malloc+0x124>
    1bde:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <__brkval>
    1be2:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <__brkval+0x1>
    1be6:	23 2b       	or	r18, r19
    1be8:	41 f4       	brne	.+16     	; 0x1bfa <malloc+0xcc>
    1bea:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1bee:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1bf2:	30 93 02 04 	sts	0x0402, r19	; 0x800402 <__brkval+0x1>
    1bf6:	20 93 01 04 	sts	0x0401, r18	; 0x800401 <__brkval>
    1bfa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1bfe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1c02:	21 15       	cp	r18, r1
    1c04:	31 05       	cpc	r19, r1
    1c06:	41 f4       	brne	.+16     	; 0x1c18 <malloc+0xea>
    1c08:	2d b7       	in	r18, 0x3d	; 61
    1c0a:	3e b7       	in	r19, 0x3e	; 62
    1c0c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1c10:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1c14:	24 1b       	sub	r18, r20
    1c16:	35 0b       	sbc	r19, r21
    1c18:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <__brkval>
    1c1c:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <__brkval+0x1>
    1c20:	e2 17       	cp	r30, r18
    1c22:	f3 07       	cpc	r31, r19
    1c24:	a0 f4       	brcc	.+40     	; 0x1c4e <malloc+0x120>
    1c26:	2e 1b       	sub	r18, r30
    1c28:	3f 0b       	sbc	r19, r31
    1c2a:	28 17       	cp	r18, r24
    1c2c:	39 07       	cpc	r19, r25
    1c2e:	78 f0       	brcs	.+30     	; 0x1c4e <malloc+0x120>
    1c30:	ac 01       	movw	r20, r24
    1c32:	4e 5f       	subi	r20, 0xFE	; 254
    1c34:	5f 4f       	sbci	r21, 0xFF	; 255
    1c36:	24 17       	cp	r18, r20
    1c38:	35 07       	cpc	r19, r21
    1c3a:	48 f0       	brcs	.+18     	; 0x1c4e <malloc+0x120>
    1c3c:	4e 0f       	add	r20, r30
    1c3e:	5f 1f       	adc	r21, r31
    1c40:	50 93 02 04 	sts	0x0402, r21	; 0x800402 <__brkval+0x1>
    1c44:	40 93 01 04 	sts	0x0401, r20	; 0x800401 <__brkval>
    1c48:	81 93       	st	Z+, r24
    1c4a:	91 93       	st	Z+, r25
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <malloc+0x124>
    1c4e:	e0 e0       	ldi	r30, 0x00	; 0
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	cf 01       	movw	r24, r30
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	08 95       	ret

00001c5e <free>:
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <free+0xa>
    1c66:	81 c0       	rjmp	.+258    	; 0x1d6a <free+0x10c>
    1c68:	fc 01       	movw	r30, r24
    1c6a:	32 97       	sbiw	r30, 0x02	; 2
    1c6c:	13 82       	std	Z+3, r1	; 0x03
    1c6e:	12 82       	std	Z+2, r1	; 0x02
    1c70:	a0 91 03 04 	lds	r26, 0x0403	; 0x800403 <__flp>
    1c74:	b0 91 04 04 	lds	r27, 0x0404	; 0x800404 <__flp+0x1>
    1c78:	10 97       	sbiw	r26, 0x00	; 0
    1c7a:	81 f4       	brne	.+32     	; 0x1c9c <free+0x3e>
    1c7c:	20 81       	ld	r18, Z
    1c7e:	31 81       	ldd	r19, Z+1	; 0x01
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <__brkval>
    1c88:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <__brkval+0x1>
    1c8c:	28 17       	cp	r18, r24
    1c8e:	39 07       	cpc	r19, r25
    1c90:	51 f5       	brne	.+84     	; 0x1ce6 <free+0x88>
    1c92:	f0 93 02 04 	sts	0x0402, r31	; 0x800402 <__brkval+0x1>
    1c96:	e0 93 01 04 	sts	0x0401, r30	; 0x800401 <__brkval>
    1c9a:	67 c0       	rjmp	.+206    	; 0x1d6a <free+0x10c>
    1c9c:	ed 01       	movw	r28, r26
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	ce 17       	cp	r28, r30
    1ca4:	df 07       	cpc	r29, r31
    1ca6:	40 f4       	brcc	.+16     	; 0x1cb8 <free+0x5a>
    1ca8:	4a 81       	ldd	r20, Y+2	; 0x02
    1caa:	5b 81       	ldd	r21, Y+3	; 0x03
    1cac:	9e 01       	movw	r18, r28
    1cae:	41 15       	cp	r20, r1
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	f1 f0       	breq	.+60     	; 0x1cf0 <free+0x92>
    1cb4:	ea 01       	movw	r28, r20
    1cb6:	f5 cf       	rjmp	.-22     	; 0x1ca2 <free+0x44>
    1cb8:	d3 83       	std	Z+3, r29	; 0x03
    1cba:	c2 83       	std	Z+2, r28	; 0x02
    1cbc:	40 81       	ld	r20, Z
    1cbe:	51 81       	ldd	r21, Z+1	; 0x01
    1cc0:	84 0f       	add	r24, r20
    1cc2:	95 1f       	adc	r25, r21
    1cc4:	c8 17       	cp	r28, r24
    1cc6:	d9 07       	cpc	r29, r25
    1cc8:	59 f4       	brne	.+22     	; 0x1ce0 <free+0x82>
    1cca:	88 81       	ld	r24, Y
    1ccc:	99 81       	ldd	r25, Y+1	; 0x01
    1cce:	84 0f       	add	r24, r20
    1cd0:	95 1f       	adc	r25, r21
    1cd2:	02 96       	adiw	r24, 0x02	; 2
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	9b 81       	ldd	r25, Y+3	; 0x03
    1cdc:	93 83       	std	Z+3, r25	; 0x03
    1cde:	82 83       	std	Z+2, r24	; 0x02
    1ce0:	21 15       	cp	r18, r1
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	29 f4       	brne	.+10     	; 0x1cf0 <free+0x92>
    1ce6:	f0 93 04 04 	sts	0x0404, r31	; 0x800404 <__flp+0x1>
    1cea:	e0 93 03 04 	sts	0x0403, r30	; 0x800403 <__flp>
    1cee:	3d c0       	rjmp	.+122    	; 0x1d6a <free+0x10c>
    1cf0:	e9 01       	movw	r28, r18
    1cf2:	fb 83       	std	Y+3, r31	; 0x03
    1cf4:	ea 83       	std	Y+2, r30	; 0x02
    1cf6:	49 91       	ld	r20, Y+
    1cf8:	59 91       	ld	r21, Y+
    1cfa:	c4 0f       	add	r28, r20
    1cfc:	d5 1f       	adc	r29, r21
    1cfe:	ec 17       	cp	r30, r28
    1d00:	fd 07       	cpc	r31, r29
    1d02:	61 f4       	brne	.+24     	; 0x1d1c <free+0xbe>
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	84 0f       	add	r24, r20
    1d0a:	95 1f       	adc	r25, r21
    1d0c:	02 96       	adiw	r24, 0x02	; 2
    1d0e:	e9 01       	movw	r28, r18
    1d10:	99 83       	std	Y+1, r25	; 0x01
    1d12:	88 83       	st	Y, r24
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
    1d1c:	e0 e0       	ldi	r30, 0x00	; 0
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	12 96       	adiw	r26, 0x02	; 2
    1d22:	8d 91       	ld	r24, X+
    1d24:	9c 91       	ld	r25, X
    1d26:	13 97       	sbiw	r26, 0x03	; 3
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <free+0xd4>
    1d2c:	fd 01       	movw	r30, r26
    1d2e:	dc 01       	movw	r26, r24
    1d30:	f7 cf       	rjmp	.-18     	; 0x1d20 <free+0xc2>
    1d32:	8d 91       	ld	r24, X+
    1d34:	9c 91       	ld	r25, X
    1d36:	11 97       	sbiw	r26, 0x01	; 1
    1d38:	9d 01       	movw	r18, r26
    1d3a:	2e 5f       	subi	r18, 0xFE	; 254
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	82 0f       	add	r24, r18
    1d40:	93 1f       	adc	r25, r19
    1d42:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <__brkval>
    1d46:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <__brkval+0x1>
    1d4a:	28 17       	cp	r18, r24
    1d4c:	39 07       	cpc	r19, r25
    1d4e:	69 f4       	brne	.+26     	; 0x1d6a <free+0x10c>
    1d50:	30 97       	sbiw	r30, 0x00	; 0
    1d52:	29 f4       	brne	.+10     	; 0x1d5e <free+0x100>
    1d54:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <__flp+0x1>
    1d58:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <__flp>
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <free+0x104>
    1d5e:	13 82       	std	Z+3, r1	; 0x03
    1d60:	12 82       	std	Z+2, r1	; 0x02
    1d62:	b0 93 02 04 	sts	0x0402, r27	; 0x800402 <__brkval+0x1>
    1d66:	a0 93 01 04 	sts	0x0401, r26	; 0x800401 <__brkval>
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <strnlen_P>:
    1d70:	fc 01       	movw	r30, r24
    1d72:	05 90       	lpm	r0, Z+
    1d74:	61 50       	subi	r22, 0x01	; 1
    1d76:	70 40       	sbci	r23, 0x00	; 0
    1d78:	01 10       	cpse	r0, r1
    1d7a:	d8 f7       	brcc	.-10     	; 0x1d72 <strnlen_P+0x2>
    1d7c:	80 95       	com	r24
    1d7e:	90 95       	com	r25
    1d80:	8e 0f       	add	r24, r30
    1d82:	9f 1f       	adc	r25, r31
    1d84:	08 95       	ret

00001d86 <memset>:
    1d86:	dc 01       	movw	r26, r24
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <memset+0x6>
    1d8a:	6d 93       	st	X+, r22
    1d8c:	41 50       	subi	r20, 0x01	; 1
    1d8e:	50 40       	sbci	r21, 0x00	; 0
    1d90:	e0 f7       	brcc	.-8      	; 0x1d8a <memset+0x4>
    1d92:	08 95       	ret

00001d94 <strnlen>:
    1d94:	fc 01       	movw	r30, r24
    1d96:	61 50       	subi	r22, 0x01	; 1
    1d98:	70 40       	sbci	r23, 0x00	; 0
    1d9a:	01 90       	ld	r0, Z+
    1d9c:	01 10       	cpse	r0, r1
    1d9e:	d8 f7       	brcc	.-10     	; 0x1d96 <strnlen+0x2>
    1da0:	80 95       	com	r24
    1da2:	90 95       	com	r25
    1da4:	8e 0f       	add	r24, r30
    1da6:	9f 1f       	adc	r25, r31
    1da8:	08 95       	ret

00001daa <fputc>:
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	fb 01       	movw	r30, r22
    1db4:	23 81       	ldd	r18, Z+3	; 0x03
    1db6:	21 fd       	sbrc	r18, 1
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <fputc+0x16>
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	9f ef       	ldi	r25, 0xFF	; 255
    1dbe:	2c c0       	rjmp	.+88     	; 0x1e18 <fputc+0x6e>
    1dc0:	22 ff       	sbrs	r18, 2
    1dc2:	16 c0       	rjmp	.+44     	; 0x1df0 <fputc+0x46>
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	24 81       	ldd	r18, Z+4	; 0x04
    1dca:	35 81       	ldd	r19, Z+5	; 0x05
    1dcc:	42 17       	cp	r20, r18
    1dce:	53 07       	cpc	r21, r19
    1dd0:	44 f4       	brge	.+16     	; 0x1de2 <fputc+0x38>
    1dd2:	a0 81       	ld	r26, Z
    1dd4:	b1 81       	ldd	r27, Z+1	; 0x01
    1dd6:	9d 01       	movw	r18, r26
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	31 83       	std	Z+1, r19	; 0x01
    1dde:	20 83       	st	Z, r18
    1de0:	8c 93       	st	X, r24
    1de2:	26 81       	ldd	r18, Z+6	; 0x06
    1de4:	37 81       	ldd	r19, Z+7	; 0x07
    1de6:	2f 5f       	subi	r18, 0xFF	; 255
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dea:	37 83       	std	Z+7, r19	; 0x07
    1dec:	26 83       	std	Z+6, r18	; 0x06
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <fputc+0x6e>
    1df0:	8b 01       	movw	r16, r22
    1df2:	ec 01       	movw	r28, r24
    1df4:	fb 01       	movw	r30, r22
    1df6:	00 84       	ldd	r0, Z+8	; 0x08
    1df8:	f1 85       	ldd	r31, Z+9	; 0x09
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	09 95       	icall
    1dfe:	89 2b       	or	r24, r25
    1e00:	e1 f6       	brne	.-72     	; 0x1dba <fputc+0x10>
    1e02:	d8 01       	movw	r26, r16
    1e04:	16 96       	adiw	r26, 0x06	; 6
    1e06:	8d 91       	ld	r24, X+
    1e08:	9c 91       	ld	r25, X
    1e0a:	17 97       	sbiw	r26, 0x07	; 7
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	17 96       	adiw	r26, 0x07	; 7
    1e10:	9c 93       	st	X, r25
    1e12:	8e 93       	st	-X, r24
    1e14:	16 97       	sbiw	r26, 0x06	; 6
    1e16:	ce 01       	movw	r24, r28
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	08 95       	ret

00001e22 <__ultoa_invert>:
    1e22:	fa 01       	movw	r30, r20
    1e24:	aa 27       	eor	r26, r26
    1e26:	28 30       	cpi	r18, 0x08	; 8
    1e28:	51 f1       	breq	.+84     	; 0x1e7e <__ultoa_invert+0x5c>
    1e2a:	20 31       	cpi	r18, 0x10	; 16
    1e2c:	81 f1       	breq	.+96     	; 0x1e8e <__ultoa_invert+0x6c>
    1e2e:	e8 94       	clt
    1e30:	6f 93       	push	r22
    1e32:	6e 7f       	andi	r22, 0xFE	; 254
    1e34:	6e 5f       	subi	r22, 0xFE	; 254
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255
    1e38:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	af 4f       	sbci	r26, 0xFF	; 255
    1e3e:	b1 e0       	ldi	r27, 0x01	; 1
    1e40:	3e d0       	rcall	.+124    	; 0x1ebe <__ultoa_invert+0x9c>
    1e42:	b4 e0       	ldi	r27, 0x04	; 4
    1e44:	3c d0       	rcall	.+120    	; 0x1ebe <__ultoa_invert+0x9c>
    1e46:	67 0f       	add	r22, r23
    1e48:	78 1f       	adc	r23, r24
    1e4a:	89 1f       	adc	r24, r25
    1e4c:	9a 1f       	adc	r25, r26
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	68 0f       	add	r22, r24
    1e52:	79 1f       	adc	r23, r25
    1e54:	8a 1f       	adc	r24, r26
    1e56:	91 1d       	adc	r25, r1
    1e58:	a1 1d       	adc	r26, r1
    1e5a:	6a 0f       	add	r22, r26
    1e5c:	71 1d       	adc	r23, r1
    1e5e:	81 1d       	adc	r24, r1
    1e60:	91 1d       	adc	r25, r1
    1e62:	a1 1d       	adc	r26, r1
    1e64:	20 d0       	rcall	.+64     	; 0x1ea6 <__ultoa_invert+0x84>
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <__ultoa_invert+0x48>
    1e68:	68 94       	set
    1e6a:	3f 91       	pop	r19
    1e6c:	2a e0       	ldi	r18, 0x0A	; 10
    1e6e:	26 9f       	mul	r18, r22
    1e70:	11 24       	eor	r1, r1
    1e72:	30 19       	sub	r19, r0
    1e74:	30 5d       	subi	r19, 0xD0	; 208
    1e76:	31 93       	st	Z+, r19
    1e78:	de f6       	brtc	.-74     	; 0x1e30 <__ultoa_invert+0xe>
    1e7a:	cf 01       	movw	r24, r30
    1e7c:	08 95       	ret
    1e7e:	46 2f       	mov	r20, r22
    1e80:	47 70       	andi	r20, 0x07	; 7
    1e82:	40 5d       	subi	r20, 0xD0	; 208
    1e84:	41 93       	st	Z+, r20
    1e86:	b3 e0       	ldi	r27, 0x03	; 3
    1e88:	0f d0       	rcall	.+30     	; 0x1ea8 <__ultoa_invert+0x86>
    1e8a:	c9 f7       	brne	.-14     	; 0x1e7e <__ultoa_invert+0x5c>
    1e8c:	f6 cf       	rjmp	.-20     	; 0x1e7a <__ultoa_invert+0x58>
    1e8e:	46 2f       	mov	r20, r22
    1e90:	4f 70       	andi	r20, 0x0F	; 15
    1e92:	40 5d       	subi	r20, 0xD0	; 208
    1e94:	4a 33       	cpi	r20, 0x3A	; 58
    1e96:	18 f0       	brcs	.+6      	; 0x1e9e <__ultoa_invert+0x7c>
    1e98:	49 5d       	subi	r20, 0xD9	; 217
    1e9a:	31 fd       	sbrc	r19, 1
    1e9c:	40 52       	subi	r20, 0x20	; 32
    1e9e:	41 93       	st	Z+, r20
    1ea0:	02 d0       	rcall	.+4      	; 0x1ea6 <__ultoa_invert+0x84>
    1ea2:	a9 f7       	brne	.-22     	; 0x1e8e <__ultoa_invert+0x6c>
    1ea4:	ea cf       	rjmp	.-44     	; 0x1e7a <__ultoa_invert+0x58>
    1ea6:	b4 e0       	ldi	r27, 0x04	; 4
    1ea8:	a6 95       	lsr	r26
    1eaa:	97 95       	ror	r25
    1eac:	87 95       	ror	r24
    1eae:	77 95       	ror	r23
    1eb0:	67 95       	ror	r22
    1eb2:	ba 95       	dec	r27
    1eb4:	c9 f7       	brne	.-14     	; 0x1ea8 <__ultoa_invert+0x86>
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	61 05       	cpc	r22, r1
    1eba:	71 05       	cpc	r23, r1
    1ebc:	08 95       	ret
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	0a 2e       	mov	r0, r26
    1ec4:	06 94       	lsr	r0
    1ec6:	57 95       	ror	r21
    1ec8:	47 95       	ror	r20
    1eca:	37 95       	ror	r19
    1ecc:	27 95       	ror	r18
    1ece:	ba 95       	dec	r27
    1ed0:	c9 f7       	brne	.-14     	; 0x1ec4 <__ultoa_invert+0xa2>
    1ed2:	62 0f       	add	r22, r18
    1ed4:	73 1f       	adc	r23, r19
    1ed6:	84 1f       	adc	r24, r20
    1ed8:	95 1f       	adc	r25, r21
    1eda:	a0 1d       	adc	r26, r0
    1edc:	08 95       	ret

00001ede <__prologue_saves__>:
    1ede:	2f 92       	push	r2
    1ee0:	3f 92       	push	r3
    1ee2:	4f 92       	push	r4
    1ee4:	5f 92       	push	r5
    1ee6:	6f 92       	push	r6
    1ee8:	7f 92       	push	r7
    1eea:	8f 92       	push	r8
    1eec:	9f 92       	push	r9
    1eee:	af 92       	push	r10
    1ef0:	bf 92       	push	r11
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	ca 1b       	sub	r28, r26
    1f08:	db 0b       	sbc	r29, r27
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	09 94       	ijmp

00001f16 <__epilogue_restores__>:
    1f16:	2a 88       	ldd	r2, Y+18	; 0x12
    1f18:	39 88       	ldd	r3, Y+17	; 0x11
    1f1a:	48 88       	ldd	r4, Y+16	; 0x10
    1f1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f20:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f22:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f24:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f26:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f28:	b9 84       	ldd	r11, Y+9	; 0x09
    1f2a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f2c:	df 80       	ldd	r13, Y+7	; 0x07
    1f2e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f30:	fd 80       	ldd	r15, Y+5	; 0x05
    1f32:	0c 81       	ldd	r16, Y+4	; 0x04
    1f34:	1b 81       	ldd	r17, Y+3	; 0x03
    1f36:	aa 81       	ldd	r26, Y+2	; 0x02
    1f38:	b9 81       	ldd	r27, Y+1	; 0x01
    1f3a:	ce 0f       	add	r28, r30
    1f3c:	d1 1d       	adc	r29, r1
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	ed 01       	movw	r28, r26
    1f4a:	08 95       	ret

00001f4c <_exit>:
    1f4c:	f8 94       	cli

00001f4e <__stop_program>:
    1f4e:	ff cf       	rjmp	.-2      	; 0x1f4e <__stop_program>
