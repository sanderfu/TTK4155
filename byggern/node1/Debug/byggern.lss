
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  00001f96  0000202a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017d  00800264  00800264  0000218e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003532  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017c5  00000000  00000000  00005a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001833  00000000  00000000  00007237  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a0  00000000  00000000  00008a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a13  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012f8  00000000  00000000  00009b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000ae17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <this_init+0xc0>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e6 e9       	ldi	r30, 0x96	; 150
     3aa:	ff e1       	ldi	r31, 0x1F	; 31
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a4 36       	cpi	r26, 0x64	; 100
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	a4 e6       	ldi	r26, 0x64	; 100
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a1 3e       	cpi	r26, 0xE1	; 225
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x101f>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x101f>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "pwm.h"
#include "music.h"
#include "CAN.h"
volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	//cli();
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__data_end>
	
	
	//sei();
	
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:


int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     41a:	0e 94 48 07 	call	0xe90	; 0xe90 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     41e:	87 e5       	ldi	r24, 0x57	; 87
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	9a 87       	std	Y+10, r25	; 0x0a
     424:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     42a:	8d e0       	ldi	r24, 0x0D	; 13
     42c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     42e:	86 e1       	ldi	r24, 0x16	; 22
     430:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     432:	81 e2       	ldi	r24, 0x21	; 33
     434:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
	printf("---------------------------------------\n\r");
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	97 e0       	ldi	r25, 0x07	; 7
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x4e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x58>
     45e:	00 00       	nop
	_delay_ms(500);
	//CAN_transmit_message(&message);
	
	CAN_controller_setMode(MODE_NORMAL);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <CAN_controller_setMode>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
		
		if (flag) {
			printf("Message received");
     46e:	03 e4       	ldi	r16, 0x43	; 67
     470:	11 e0       	ldi	r17, 0x01	; 1
	//music_playLisaGikk();                 
	while (1) {
		//
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     472:	0e 94 68 04 	call	0x8d0	; 0x8d0 <sleep_now>
		
		if (flag) {
     476:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     47a:	88 23       	and	r24, r24
     47c:	a1 f0       	breq	.+40     	; 0x4a6 <main+0xa0>
			printf("Message received");
     47e:	1f 93       	push	r17
     480:	0f 93       	push	r16
     482:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
			flag=0;
     486:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <__data_end>
			CAN_receiveMessage(&received_message);
     48a:	83 e7       	ldi	r24, 0x73	; 115
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	0e 94 24 03 	call	0x648	; 0x648 <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	6c e2       	ldi	r22, 0x2C	; 44
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
			
		}
		touchButton_sendButtonsOverCAN();
     4a6:	0e 94 3c 08 	call	0x1078	; 0x1078 <touchButton_sendButtonsOverCAN>
		joystick_sendPositionOverCAN();
     4aa:	0e 94 35 05 	call	0xa6a	; 0xa6a <joystick_sendPositionOverCAN>
		slider_sendPositionOverCAN();
     4ae:	0e 94 80 07 	call	0xf00	; 0xf00 <slider_sendPositionOverCAN>
		
	}
     4b2:	df cf       	rjmp	.-66     	; 0x472 <main+0x6c>

000004b4 <CAN_transmit_message>:
	
	
	
	
}
void CAN_transmit_message(CAN_message_t *message) {
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     4bc:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <buffer_number.2114>
     4c0:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <buffer_number.2114+0x1>
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	63 e0       	ldi	r22, 0x03	; 3
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 34 0b 	call	0x1668	; 0x1668 <__divmodhi4>
     4ce:	28 2f       	mov	r18, r24
     4d0:	39 2f       	mov	r19, r25
     4d2:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <buffer_number.2114>
     4d6:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <buffer_number.2114+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     4da:	21 30       	cpi	r18, 0x01	; 1
     4dc:	31 05       	cpc	r19, r1
     4de:	01 f1       	breq	.+64     	; 0x520 <__stack+0x21>
     4e0:	22 30       	cpi	r18, 0x02	; 2
     4e2:	31 05       	cpc	r19, r1
     4e4:	b9 f1       	breq	.+110    	; 0x554 <__stack+0x55>
     4e6:	23 2b       	or	r18, r19
     4e8:	09 f0       	breq	.+2      	; 0x4ec <CAN_transmit_message+0x38>
     4ea:	4d c0       	rjmp	.+154    	; 0x586 <__stack+0x87>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     4ec:	f8 01       	movw	r30, r16
     4ee:	40 85       	ldd	r20, Z+8	; 0x08
     4f0:	51 85       	ldd	r21, Z+9	; 0x09
     4f2:	42 95       	swap	r20
     4f4:	44 0f       	add	r20, r20
     4f6:	40 7e       	andi	r20, 0xE0	; 224
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	62 e3       	ldi	r22, 0x32	; 50
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 ee       	ldi	r24, 0xE0	; 224
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     506:	f8 01       	movw	r30, r16
     508:	60 85       	ldd	r22, Z+8	; 0x08
     50a:	71 85       	ldd	r23, Z+9	; 0x09
     50c:	76 95       	lsr	r23
     50e:	67 95       	ror	r22
     510:	76 95       	lsr	r23
     512:	67 95       	ror	r22
     514:	76 95       	lsr	r23
     516:	67 95       	ror	r22
     518:	81 e3       	ldi	r24, 0x31	; 49
     51a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     51e:	33 c0       	rjmp	.+102    	; 0x586 <__stack+0x87>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     520:	f8 01       	movw	r30, r16
     522:	40 85       	ldd	r20, Z+8	; 0x08
     524:	51 85       	ldd	r21, Z+9	; 0x09
     526:	42 95       	swap	r20
     528:	44 0f       	add	r20, r20
     52a:	40 7e       	andi	r20, 0xE0	; 224
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	62 e4       	ldi	r22, 0x42	; 66
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 ee       	ldi	r24, 0xE0	; 224
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     53a:	f8 01       	movw	r30, r16
     53c:	60 85       	ldd	r22, Z+8	; 0x08
     53e:	71 85       	ldd	r23, Z+9	; 0x09
     540:	76 95       	lsr	r23
     542:	67 95       	ror	r22
     544:	76 95       	lsr	r23
     546:	67 95       	ror	r22
     548:	76 95       	lsr	r23
     54a:	67 95       	ror	r22
     54c:	81 e4       	ldi	r24, 0x41	; 65
     54e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <CAN_controller_write>
				
				break;
     552:	19 c0       	rjmp	.+50     	; 0x586 <__stack+0x87>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     554:	f8 01       	movw	r30, r16
     556:	40 85       	ldd	r20, Z+8	; 0x08
     558:	51 85       	ldd	r21, Z+9	; 0x09
     55a:	42 95       	swap	r20
     55c:	44 0f       	add	r20, r20
     55e:	40 7e       	andi	r20, 0xE0	; 224
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	62 e5       	ldi	r22, 0x52	; 82
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 ee       	ldi	r24, 0xE0	; 224
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     56e:	f8 01       	movw	r30, r16
     570:	60 85       	ldd	r22, Z+8	; 0x08
     572:	71 85       	ldd	r23, Z+9	; 0x09
     574:	76 95       	lsr	r23
     576:	67 95       	ror	r22
     578:	76 95       	lsr	r23
     57a:	67 95       	ror	r22
     57c:	76 95       	lsr	r23
     57e:	67 95       	ror	r22
     580:	81 e5       	ldi	r24, 0x51	; 81
     582:	0e 94 72 03 	call	0x6e4	; 0x6e4 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     586:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <buffer_number.2114>
     58a:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <buffer_number.2114+0x1>
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	91 05       	cpc	r25, r1
     592:	79 f0       	breq	.+30     	; 0x5b2 <__stack+0xb3>
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	91 05       	cpc	r25, r1
     598:	b1 f0       	breq	.+44     	; 0x5c6 <__stack+0xc7>
     59a:	89 2b       	or	r24, r25
     59c:	e9 f4       	brne	.+58     	; 0x5d8 <__stack+0xd9>
			case 0:
				//printf("\n\rtransmitting data length: %i\n\r", message->data_length);
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     59e:	f8 01       	movw	r30, r16
     5a0:	42 85       	ldd	r20, Z+10	; 0x0a
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	65 e3       	ldi	r22, 0x35	; 53
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	8f e0       	ldi	r24, 0x0F	; 15
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
				break;
     5b0:	13 c0       	rjmp	.+38     	; 0x5d8 <__stack+0xd9>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     5b2:	f8 01       	movw	r30, r16
     5b4:	42 85       	ldd	r20, Z+10	; 0x0a
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	65 e4       	ldi	r22, 0x45	; 69
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	8f e0       	ldi	r24, 0x0F	; 15
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
				break;
     5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <__stack+0xd9>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     5c6:	f8 01       	movw	r30, r16
     5c8:	42 85       	ldd	r20, Z+10	; 0x0a
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	65 e5       	ldi	r22, 0x55	; 85
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	8f e0       	ldi	r24, 0x0F	; 15
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     5d8:	f8 01       	movw	r30, r16
     5da:	82 85       	ldd	r24, Z+10	; 0x0a
     5dc:	88 23       	and	r24, r24
     5de:	61 f1       	breq	.+88     	; 0x638 <__stack+0x139>
     5e0:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     5e2:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <buffer_number.2114>
     5e6:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <buffer_number.2114+0x1>
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	91 05       	cpc	r25, r1
     5ee:	71 f0       	breq	.+28     	; 0x60c <__stack+0x10d>
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	91 05       	cpc	r25, r1
     5f4:	a1 f0       	breq	.+40     	; 0x61e <__stack+0x11f>
     5f6:	89 2b       	or	r24, r25
     5f8:	d1 f4       	brne	.+52     	; 0x62e <__stack+0x12f>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     5fa:	f8 01       	movw	r30, r16
     5fc:	ec 0f       	add	r30, r28
     5fe:	f1 1d       	adc	r31, r1
     600:	60 81       	ld	r22, Z
     602:	86 e3       	ldi	r24, 0x36	; 54
     604:	8c 0f       	add	r24, r28
     606:	0e 94 72 03 	call	0x6e4	; 0x6e4 <CAN_controller_write>
				break;
     60a:	11 c0       	rjmp	.+34     	; 0x62e <__stack+0x12f>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     60c:	f8 01       	movw	r30, r16
     60e:	ec 0f       	add	r30, r28
     610:	f1 1d       	adc	r31, r1
     612:	60 81       	ld	r22, Z
     614:	86 e4       	ldi	r24, 0x46	; 70
     616:	8c 0f       	add	r24, r28
     618:	0e 94 72 03 	call	0x6e4	; 0x6e4 <CAN_controller_write>
				break;
     61c:	08 c0       	rjmp	.+16     	; 0x62e <__stack+0x12f>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     61e:	f8 01       	movw	r30, r16
     620:	ec 0f       	add	r30, r28
     622:	f1 1d       	adc	r31, r1
     624:	60 81       	ld	r22, Z
     626:	86 e5       	ldi	r24, 0x56	; 86
     628:	8c 0f       	add	r24, r28
     62a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     62e:	cf 5f       	subi	r28, 0xFF	; 255
     630:	f8 01       	movw	r30, r16
     632:	82 85       	ldd	r24, Z+10	; 0x0a
     634:	8c 13       	cpse	r24, r28
     636:	d5 cf       	rjmp	.-86     	; 0x5e2 <__stack+0xe3>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     638:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <buffer_number.2114>
     63c:	0e 94 bc 03 	call	0x778	; 0x778 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret

00000648 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     654:	82 e6       	ldi	r24, 0x62	; 98
     656:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <CAN_controller_read>
     65a:	c8 2f       	mov	r28, r24
     65c:	81 e6       	ldi	r24, 0x61	; 97
     65e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <CAN_controller_read>
     662:	c2 95       	swap	r28
     664:	c6 95       	lsr	r28
     666:	c7 70       	andi	r28, 0x07	; 7
     668:	28 e0       	ldi	r18, 0x08	; 8
     66a:	82 9f       	mul	r24, r18
     66c:	c0 01       	movw	r24, r0
     66e:	11 24       	eor	r1, r1
     670:	8c 0f       	add	r24, r28
     672:	91 1d       	adc	r25, r1
     674:	f7 01       	movw	r30, r14
     676:	91 87       	std	Z+9, r25	; 0x09
     678:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     67a:	85 e6       	ldi	r24, 0x65	; 101
     67c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <CAN_controller_read>
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	f7 01       	movw	r30, r14
     684:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     686:	82 85       	ldd	r24, Z+10	; 0x0a
     688:	88 23       	and	r24, r24
     68a:	81 f0       	breq	.+32     	; 0x6ac <CAN_receiveMessage+0x64>
     68c:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     68e:	0c 2f       	mov	r16, r28
     690:	10 e0       	ldi	r17, 0x00	; 0
     692:	86 e6       	ldi	r24, 0x66	; 102
     694:	8c 0f       	add	r24, r28
     696:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <CAN_controller_read>
     69a:	f7 01       	movw	r30, r14
     69c:	e0 0f       	add	r30, r16
     69e:	f1 1f       	adc	r31, r17
     6a0:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     6a2:	cf 5f       	subi	r28, 0xFF	; 255
     6a4:	f7 01       	movw	r30, r14
     6a6:	82 85       	ldd	r24, Z+10	; 0x0a
     6a8:	8c 13       	cpse	r24, r28
     6aa:	f1 cf       	rjmp	.-30     	; 0x68e <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	08 95       	ret

000006b8 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     6b8:	cf 93       	push	r28
     6ba:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	SPI_masterWrite(addr);
     6ca:	8c 2f       	mov	r24, r28
     6cc:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     6d0:	0e 94 af 07 	call	0xf5e	; 0xf5e <SPI_masterRead>
     6d4:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	
	return data;
}
     6de:	8c 2f       	mov	r24, r28
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	d8 2f       	mov	r29, r24
     6ea:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	SPI_masterWrite(addr);
     6fa:	8d 2f       	mov	r24, r29
     6fc:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	SPI_masterWrite(data);
     700:	8c 2f       	mov	r24, r28
     702:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	d8 2f       	mov	r29, r24
     71c:	16 2f       	mov	r17, r22
     71e:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	84 e0       	ldi	r24, 0x04	; 4
     724:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     728:	85 e0       	ldi	r24, 0x05	; 5
     72a:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
		SPI_masterWrite(addr);
     72e:	81 2f       	mov	r24, r17
     730:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
		SPI_masterWrite(mask);
     734:	8d 2f       	mov	r24, r29
     736:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
		SPI_masterWrite(data);
     73a:	8c 2f       	mov	r24, r28
     73c:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	84 e0       	ldi	r24, 0x04	; 4
     744:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>

}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	08 95       	ret

00000750 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	printf("Before spi write");
     758:	84 e5       	ldi	r24, 0x54	; 84
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
	SPI_masterWrite(MCP_RESET);
     764:	80 ec       	ldi	r24, 0xC0	; 192
     766:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	08 95       	ret

00000778 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     778:	cf 93       	push	r28
     77a:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	84 e0       	ldi	r24, 0x04	; 4
     780:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
	switch (buffer) {
     784:	c1 30       	cpi	r28, 0x01	; 1
     786:	41 f0       	breq	.+16     	; 0x798 <CAN_controller_RTS+0x20>
     788:	18 f0       	brcs	.+6      	; 0x790 <CAN_controller_RTS+0x18>
     78a:	c2 30       	cpi	r28, 0x02	; 2
     78c:	49 f0       	breq	.+18     	; 0x7a0 <CAN_controller_RTS+0x28>
     78e:	0b c0       	rjmp	.+22     	; 0x7a6 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     790:	81 e8       	ldi	r24, 0x81	; 129
     792:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
			break;
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     798:	82 e8       	ldi	r24, 0x82	; 130
     79a:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
			break;
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     7a0:	84 e8       	ldi	r24, 0x84	; 132
     7a2:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	84 e0       	ldi	r24, 0x04	; 4
     7aa:	0e 94 b4 07 	call	0xf68	; 0xf68 <SPI_setChipSelect>
}
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     7b8:	0e 94 a8 03 	call	0x750	; 0x750 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     7bc:	8e e0       	ldi	r24, 0x0E	; 14
     7be:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     7c2:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     7c4:	80 38       	cpi	r24, 0x80	; 128
     7c6:	69 f0       	breq	.+26     	; 0x7e2 <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     7c8:	1f 92       	push	r1
     7ca:	8f 93       	push	r24
     7cc:	85 e6       	ldi	r24, 0x65	; 101
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	9f 93       	push	r25
     7d2:	8f 93       	push	r24
     7d4:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
		return;
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	38 c0       	rjmp	.+112    	; 0x852 <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     7e2:	4c 2f       	mov	r20, r28
     7e4:	4c 60       	ori	r20, 0x0C	; 12
     7e6:	6f e0       	ldi	r22, 0x0F	; 15
     7e8:	8e ee       	ldi	r24, 0xEE	; 238
     7ea:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	6b e2       	ldi	r22, 0x2B	; 43
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     7f8:	40 e6       	ldi	r20, 0x60	; 96
     7fa:	60 e6       	ldi	r22, 0x60	; 96
     7fc:	80 e6       	ldi	r24, 0x60	; 96
     7fe:	0e 94 8a 03 	call	0x714	; 0x714 <CAN_controller_bitModify>
     802:	2f ef       	ldi	r18, 0xFF	; 255
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	21 50       	subi	r18, 0x01	; 1
     80a:	80 40       	sbci	r24, 0x00	; 0
     80c:	90 40       	sbci	r25, 0x00	; 0
     80e:	e1 f7       	brne	.-8      	; 0x808 <CAN_controller_setMode+0x56>
     810:	00 c0       	rjmp	.+0      	; 0x812 <CAN_controller_setMode+0x60>
     812:	00 c0       	rjmp	.+0      	; 0x814 <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     814:	8e e0       	ldi	r24, 0x0E	; 14
     816:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     81a:	d8 2f       	mov	r29, r24
     81c:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     81e:	cd 17       	cp	r28, r29
     820:	61 f0       	breq	.+24     	; 0x83a <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     822:	1f 92       	push	r1
     824:	df 93       	push	r29
     826:	80 e8       	ldi	r24, 0x80	; 128
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     83a:	1f 92       	push	r1
     83c:	df 93       	push	r29
     83e:	80 ea       	ldi	r24, 0xA0	; 160
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	9f 93       	push	r25
     844:	8f 93       	push	r24
     846:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     858:	0e 94 a2 07 	call	0xf44	; 0xf44 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     85c:	80 e4       	ldi	r24, 0x40	; 64
     85e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     862:	8b b7       	in	r24, 0x3b	; 59
     864:	80 64       	ori	r24, 0x40	; 64
     866:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     868:	85 b7       	in	r24, 0x35	; 53
     86a:	82 60       	ori	r24, 0x02	; 2
     86c:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     86e:	85 b7       	in	r24, 0x35	; 53
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     874:	81 b3       	in	r24, 0x11	; 17
     876:	84 70       	andi	r24, 0x04	; 4
     878:	81 bb       	out	0x11, r24	; 17
     87a:	2f ef       	ldi	r18, 0xFF	; 255
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	21 50       	subi	r18, 0x01	; 1
     882:	80 40       	sbci	r24, 0x00	; 0
     884:	90 40       	sbci	r25, 0x00	; 0
     886:	e1 f7       	brne	.-8      	; 0x880 <CAN_controller_init+0x28>
     888:	00 c0       	rjmp	.+0      	; 0x88a <CAN_controller_init+0x32>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     88c:	8f ea       	ldi	r24, 0xAF	; 175
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     898:	8e e0       	ldi	r24, 0x0E	; 14
     89a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     89e:	1f 92       	push	r1
     8a0:	8f 93       	push	r24
     8a2:	88 ec       	ldi	r24, 0xC8	; 200
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>

}
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	08 95       	ret

000008bc <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     8bc:	85 b7       	in	r24, 0x35	; 53
     8be:	8f 7e       	andi	r24, 0xEF	; 239
     8c0:	85 bf       	out	0x35, r24	; 53
     8c2:	84 b7       	in	r24, 0x34	; 52
     8c4:	8f 7d       	andi	r24, 0xDF	; 223
     8c6:	84 bf       	out	0x34, r24	; 52
     8c8:	86 b7       	in	r24, 0x36	; 54
     8ca:	8f 77       	andi	r24, 0x7F	; 127
     8cc:	86 bf       	out	0x36, r24	; 54
     8ce:	08 95       	ret

000008d0 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     8d0:	88 b1       	in	r24, 0x08	; 8
     8d2:	88 68       	ori	r24, 0x88	; 136
     8d4:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
     8d6:	85 b7       	in	r24, 0x35	; 53
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	85 bf       	out	0x35, r24	; 53
     8dc:	88 95       	sleep
     8de:	85 b7       	in	r24, 0x35	; 53
     8e0:	8f 7d       	andi	r24, 0xDF	; 223
     8e2:	85 bf       	out	0x35, r24	; 53
     8e4:	08 95       	ret

000008e6 <joystickInit>:
		case DOWN:
			printf("Down\n\r");
			return;
		
	}
}
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     8ec:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <joystickOffsetX>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     8f6:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <joystickOffsetY>
     8fa:	08 95       	ret

000008fc <joystick_readPosition>:
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     90e:	c8 2f       	mov	r28, r24
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     916:	e8 2f       	mov	r30, r24
     918:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <joystickOffsetX>
     91c:	c6 17       	cp	r28, r22
     91e:	80 f4       	brcc	.+32     	; 0x940 <joystick_readPosition+0x44>
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	2c 2f       	mov	r18, r28
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	26 1b       	sub	r18, r22
     928:	37 0b       	sbc	r19, r23
     92a:	44 e6       	ldi	r20, 0x64	; 100
     92c:	42 9f       	mul	r20, r18
     92e:	c0 01       	movw	r24, r0
     930:	43 9f       	mul	r20, r19
     932:	90 0d       	add	r25, r0
     934:	11 24       	eor	r1, r1
     936:	0e 94 34 0b 	call	0x1668	; 0x1668 <__divmodhi4>
     93a:	60 93 67 02 	sts	0x0267, r22	; 0x800267 <joystick_pos>
     93e:	14 c0       	rjmp	.+40     	; 0x968 <joystick_readPosition+0x6c>
     940:	46 2f       	mov	r20, r22
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	2c 2f       	mov	r18, r28
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	24 1b       	sub	r18, r20
     94a:	35 0b       	sbc	r19, r21
     94c:	64 e6       	ldi	r22, 0x64	; 100
     94e:	62 9f       	mul	r22, r18
     950:	c0 01       	movw	r24, r0
     952:	63 9f       	mul	r22, r19
     954:	90 0d       	add	r25, r0
     956:	11 24       	eor	r1, r1
     958:	6f ef       	ldi	r22, 0xFF	; 255
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	64 1b       	sub	r22, r20
     95e:	75 0b       	sbc	r23, r21
     960:	0e 94 34 0b 	call	0x1668	; 0x1668 <__divmodhi4>
     964:	60 93 67 02 	sts	0x0267, r22	; 0x800267 <joystick_pos>
     968:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <joystickOffsetY>
     96c:	e2 17       	cp	r30, r18
     96e:	88 f4       	brcc	.+34     	; 0x992 <joystick_readPosition+0x96>
     970:	62 2f       	mov	r22, r18
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	4e 2f       	mov	r20, r30
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	46 1b       	sub	r20, r22
     97a:	57 0b       	sbc	r21, r23
     97c:	24 e6       	ldi	r18, 0x64	; 100
     97e:	24 9f       	mul	r18, r20
     980:	c0 01       	movw	r24, r0
     982:	25 9f       	mul	r18, r21
     984:	90 0d       	add	r25, r0
     986:	11 24       	eor	r1, r1
     988:	0e 94 34 0b 	call	0x1668	; 0x1668 <__divmodhi4>
     98c:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <joystick_pos+0x1>
     990:	13 c0       	rjmp	.+38     	; 0x9b8 <joystick_readPosition+0xbc>
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	4e 2f       	mov	r20, r30
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	42 1b       	sub	r20, r18
     99a:	53 0b       	sbc	r21, r19
     99c:	64 e6       	ldi	r22, 0x64	; 100
     99e:	64 9f       	mul	r22, r20
     9a0:	c0 01       	movw	r24, r0
     9a2:	65 9f       	mul	r22, r21
     9a4:	90 0d       	add	r25, r0
     9a6:	11 24       	eor	r1, r1
     9a8:	6f ef       	ldi	r22, 0xFF	; 255
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	62 1b       	sub	r22, r18
     9ae:	73 0b       	sbc	r23, r19
     9b0:	0e 94 34 0b 	call	0x1668	; 0x1668 <__divmodhi4>
     9b4:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <joystick_pos+0x1>
     9b8:	c7 e6       	ldi	r28, 0x67	; 103
     9ba:	d2 e0       	ldi	r29, 0x02	; 2
     9bc:	68 81       	ld	r22, Y
     9be:	06 2e       	mov	r0, r22
     9c0:	00 0c       	add	r0, r0
     9c2:	77 0b       	sbc	r23, r23
     9c4:	88 0b       	sbc	r24, r24
     9c6:	99 0b       	sbc	r25, r25
     9c8:	0e 94 9b 09 	call	0x1336	; 0x1336 <__floatsisf>
     9cc:	6b 01       	movw	r12, r22
     9ce:	7c 01       	movw	r14, r24
     9d0:	69 81       	ldd	r22, Y+1	; 0x01
     9d2:	06 2e       	mov	r0, r22
     9d4:	00 0c       	add	r0, r0
     9d6:	77 0b       	sbc	r23, r23
     9d8:	88 0b       	sbc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	0e 94 9b 09 	call	0x1336	; 0x1336 <__floatsisf>
     9e0:	a7 01       	movw	r20, r14
     9e2:	96 01       	movw	r18, r12
     9e4:	0e 94 92 08 	call	0x1124	; 0x1124 <atan2>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	44 eb       	ldi	r20, 0xB4	; 180
     9ee:	53 e4       	ldi	r21, 0x43	; 67
     9f0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	5f e3       	ldi	r21, 0x3F	; 63
     9fc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     a00:	23 ec       	ldi	r18, 0xC3	; 195
     a02:	35 ef       	ldi	r19, 0xF5	; 245
     a04:	48 e4       	ldi	r20, 0x48	; 72
     a06:	50 e4       	ldi	r21, 0x40	; 64
     a08:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__divsf3>
     a0c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fixsfsi>
     a10:	7b 83       	std	Y+3, r23	; 0x03
     a12:	6a 83       	std	Y+2, r22	; 0x02
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret

00000a22 <joystick_getDirection>:
     a22:	fc 01       	movw	r30, r24
     a24:	80 81       	ld	r24, Z
     a26:	94 e0       	ldi	r25, 0x04	; 4
     a28:	98 0f       	add	r25, r24
     a2a:	99 30       	cpi	r25, 0x09	; 9
     a2c:	20 f4       	brcc	.+8      	; 0xa36 <joystick_getDirection+0x14>
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	9c 5f       	subi	r25, 0xFC	; 252
     a32:	99 30       	cpi	r25, 0x09	; 9
     a34:	90 f0       	brcs	.+36     	; 0xa5a <joystick_getDirection+0x38>
     a36:	85 30       	cpi	r24, 0x05	; 5
     a38:	2c f0       	brlt	.+10     	; 0xa44 <joystick_getDirection+0x22>
     a3a:	81 81       	ldd	r24, Z+1	; 0x01
     a3c:	8f 5c       	subi	r24, 0xCF	; 207
     a3e:	83 36       	cpi	r24, 0x63	; 99
     a40:	38 f4       	brcc	.+14     	; 0xa50 <joystick_getDirection+0x2e>
     a42:	0d c0       	rjmp	.+26     	; 0xa5e <joystick_getDirection+0x3c>
     a44:	8c 3f       	cpi	r24, 0xFC	; 252
     a46:	24 f4       	brge	.+8      	; 0xa50 <joystick_getDirection+0x2e>
     a48:	81 81       	ldd	r24, Z+1	; 0x01
     a4a:	8f 5c       	subi	r24, 0xCF	; 207
     a4c:	83 36       	cpi	r24, 0x63	; 99
     a4e:	48 f0       	brcs	.+18     	; 0xa62 <joystick_getDirection+0x40>
     a50:	81 81       	ldd	r24, Z+1	; 0x01
     a52:	8c 3f       	cpi	r24, 0xFC	; 252
     a54:	44 f0       	brlt	.+16     	; 0xa66 <joystick_getDirection+0x44>
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	08 95       	ret
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	08 95       	ret
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	08 95       	ret
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	08 95       	ret
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	08 95       	ret

00000a6a <joystick_sendPositionOverCAN>:

void joystick_sendPositionOverCAN() {
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	2b 97       	sbiw	r28, 0x0b	; 11
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
		//printf("sending");

	CAN_message_t message;
	
	message.ID = 0x01;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	9a 87       	std	Y+10, r25	; 0x0a
     a84:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 2;
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = joystick_pos.x_pos;
     a8a:	e7 e6       	ldi	r30, 0x67	; 103
     a8c:	f2 e0       	ldi	r31, 0x02	; 2
     a8e:	80 81       	ld	r24, Z
     a90:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = joystick_pos.y_pos;
     a92:	81 81       	ldd	r24, Z+1	; 0x01
     a94:	8a 83       	std	Y+2, r24	; 0x02

	
	CAN_transmit_message(&message);
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CAN_transmit_message>
     a9e:	2b 96       	adiw	r28, 0x0b	; 11
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <this_init>:



MenuNode nodes[11];

void this_init() {
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
	
	printf("this_init initiating");
     ab8:	83 ed       	ldi	r24, 0xD3	; 211
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	9f 93       	push	r25
     abe:	8f 93       	push	r24
     ac0:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
	
	strcpy(nodes[0].name, "Main menu");
     ac4:	c0 e8       	ldi	r28, 0x80	; 128
     ac6:	d2 e0       	ldi	r29, 0x02	; 2
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	e8 ee       	ldi	r30, 0xE8	; 232
     acc:	f1 e0       	ldi	r31, 0x01	; 1
     ace:	de 01       	movw	r26, r28
     ad0:	01 90       	ld	r0, Z+
     ad2:	0d 92       	st	X+, r0
     ad4:	8a 95       	dec	r24
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <this_init+0x20>
	strcpy(nodes[1].name, "Play game");
     ad8:	8a e0       	ldi	r24, 0x0A	; 10
     ada:	e2 ef       	ldi	r30, 0xF2	; 242
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	af e9       	ldi	r26, 0x9F	; 159
     ae0:	b2 e0       	ldi	r27, 0x02	; 2
     ae2:	01 90       	ld	r0, Z+
     ae4:	0d 92       	st	X+, r0
     ae6:	8a 95       	dec	r24
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <this_init+0x32>
	strcpy(nodes[2].name, "High scores");
     aea:	8c e0       	ldi	r24, 0x0C	; 12
     aec:	ec ef       	ldi	r30, 0xFC	; 252
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	ae eb       	ldi	r26, 0xBE	; 190
     af2:	b2 e0       	ldi	r27, 0x02	; 2
     af4:	01 90       	ld	r0, Z+
     af6:	0d 92       	st	X+, r0
     af8:	8a 95       	dec	r24
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <this_init+0x44>
	strcpy(nodes[3].name, "Music");
     afc:	86 e0       	ldi	r24, 0x06	; 6
     afe:	e8 e0       	ldi	r30, 0x08	; 8
     b00:	f2 e0       	ldi	r31, 0x02	; 2
     b02:	ad ed       	ldi	r26, 0xDD	; 221
     b04:	b2 e0       	ldi	r27, 0x02	; 2
     b06:	01 90       	ld	r0, Z+
     b08:	0d 92       	st	X+, r0
     b0a:	8a 95       	dec	r24
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <this_init+0x56>
	strcpy(nodes[4].name, "Game 1");
     b0e:	87 e0       	ldi	r24, 0x07	; 7
     b10:	ee e0       	ldi	r30, 0x0E	; 14
     b12:	f2 e0       	ldi	r31, 0x02	; 2
     b14:	ac ef       	ldi	r26, 0xFC	; 252
     b16:	b2 e0       	ldi	r27, 0x02	; 2
     b18:	01 90       	ld	r0, Z+
     b1a:	0d 92       	st	X+, r0
     b1c:	8a 95       	dec	r24
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <this_init+0x68>
	strcpy(nodes[5].name, "Game 2");
     b20:	87 e0       	ldi	r24, 0x07	; 7
     b22:	e5 e1       	ldi	r30, 0x15	; 21
     b24:	f2 e0       	ldi	r31, 0x02	; 2
     b26:	ab e1       	ldi	r26, 0x1B	; 27
     b28:	b3 e0       	ldi	r27, 0x03	; 3
     b2a:	01 90       	ld	r0, Z+
     b2c:	0d 92       	st	X+, r0
     b2e:	8a 95       	dec	r24
     b30:	e1 f7       	brne	.-8      	; 0xb2a <this_init+0x7a>
	strcpy(nodes[6].name, "Score 1");
     b32:	88 e0       	ldi	r24, 0x08	; 8
     b34:	ec e1       	ldi	r30, 0x1C	; 28
     b36:	f2 e0       	ldi	r31, 0x02	; 2
     b38:	aa e3       	ldi	r26, 0x3A	; 58
     b3a:	b3 e0       	ldi	r27, 0x03	; 3
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <this_init+0x8c>
	strcpy(nodes[7].name, "Score 2");
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	e4 e2       	ldi	r30, 0x24	; 36
     b48:	f2 e0       	ldi	r31, 0x02	; 2
     b4a:	a9 e5       	ldi	r26, 0x59	; 89
     b4c:	b3 e0       	ldi	r27, 0x03	; 3
     b4e:	01 90       	ld	r0, Z+
     b50:	0d 92       	st	X+, r0
     b52:	8a 95       	dec	r24
     b54:	e1 f7       	brne	.-8      	; 0xb4e <this_init+0x9e>
	strcpy(nodes[8].name, "Score 3");
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	ec e2       	ldi	r30, 0x2C	; 44
     b5a:	f2 e0       	ldi	r31, 0x02	; 2
     b5c:	a8 e7       	ldi	r26, 0x78	; 120
     b5e:	b3 e0       	ldi	r27, 0x03	; 3
     b60:	01 90       	ld	r0, Z+
     b62:	0d 92       	st	X+, r0
     b64:	8a 95       	dec	r24
     b66:	e1 f7       	brne	.-8      	; 0xb60 <this_init+0xb0>
	strcpy(nodes[9].name, "Score 4");
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	e4 e3       	ldi	r30, 0x34	; 52
     b6c:	f2 e0       	ldi	r31, 0x02	; 2
     b6e:	a7 e9       	ldi	r26, 0x97	; 151
     b70:	b3 e0       	ldi	r27, 0x03	; 3
     b72:	01 90       	ld	r0, Z+
     b74:	0d 92       	st	X+, r0
     b76:	8a 95       	dec	r24
     b78:	e1 f7       	brne	.-8      	; 0xb72 <this_init+0xc2>
	strcpy(nodes[10].name, "Score 5");
     b7a:	88 e0       	ldi	r24, 0x08	; 8
     b7c:	ec e3       	ldi	r30, 0x3C	; 60
     b7e:	f2 e0       	ldi	r31, 0x02	; 2
     b80:	a6 eb       	ldi	r26, 0xB6	; 182
     b82:	b3 e0       	ldi	r27, 0x03	; 3
     b84:	01 90       	ld	r0, Z+
     b86:	0d 92       	st	X+, r0
     b88:	8a 95       	dec	r24
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <this_init+0xd4>

	
	
	nodes[0].numChildren = 3;
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	8e 8f       	std	Y+30, r24	; 0x1e
	nodes[1].numChildren = 2;
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	8d af       	std	Y+61, r24	; 0x3d
	nodes[2].numChildren = 5;
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <nodes+0x5c>
	nodes[3].numChildren = 0;
     b9a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <nodes+0x7b>
	nodes[4].numChildren = 0;
     b9e:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <nodes+0x9a>
	nodes[5].numChildren = 0;
     ba2:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <nodes+0xb9>
	nodes[6].numChildren = 0;
     ba6:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <nodes+0xd8>
	nodes[7].numChildren = 0;
     baa:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <nodes+0xf7>
	nodes[8].numChildren = 0;
     bae:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <nodes+0x116>
	nodes[9].numChildren = 0;
     bb2:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <nodes+0x135>
	nodes[10].numChildren = 0;
     bb6:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <nodes+0x154>
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
     bba:	19 8a       	std	Y+17, r1	; 0x11
     bbc:	18 8a       	std	Y+16, r1	; 0x10
     bbe:	be 01       	movw	r22, r28
     bc0:	05 ed       	ldi	r16, 0xD5	; 213
     bc2:	13 e0       	ldi	r17, 0x03	; 3
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
	nodes[7].numChildren = 0;
	nodes[8].numChildren = 0;
	nodes[9].numChildren = 0;
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
     bc8:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
     bca:	5f e1       	ldi	r21, 0x1F	; 31
     bcc:	18 c0       	rjmp	.+48     	; 0xbfe <this_init+0x14e>
     bce:	54 9f       	mul	r21, r20
     bd0:	f0 01       	movw	r30, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	e0 58       	subi	r30, 0x80	; 128
     bd6:	fd 4f       	sbci	r31, 0xFD	; 253
     bd8:	e9 93       	st	Y+, r30
     bda:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
     bdc:	b1 8b       	std	Z+17, r27	; 0x11
     bde:	a0 8b       	std	Z+16, r26	; 0x10
			currentChildIdx++;
     be0:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     be2:	2f 5f       	subi	r18, 0xFF	; 255
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	5e 96       	adiw	r26, 0x1e	; 30
     be8:	8c 91       	ld	r24, X
     bea:	5e 97       	sbiw	r26, 0x1e	; 30
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	28 17       	cp	r18, r24
     bf0:	39 07       	cpc	r19, r25
     bf2:	6c f3       	brlt	.-38     	; 0xbce <this_init+0x11e>
     bf4:	61 5e       	subi	r22, 0xE1	; 225
     bf6:	7f 4f       	sbci	r23, 0xFF	; 255
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
     bf8:	60 17       	cp	r22, r16
     bfa:	71 07       	cpc	r23, r17
     bfc:	59 f0       	breq	.+22     	; 0xc14 <this_init+0x164>
     bfe:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     c00:	5e 96       	adiw	r26, 0x1e	; 30
     c02:	8c 91       	ld	r24, X
     c04:	5e 97       	sbiw	r26, 0x1e	; 30
     c06:	88 23       	and	r24, r24
     c08:	a9 f3       	breq	.-22     	; 0xbf4 <this_init+0x144>
     c0a:	eb 01       	movw	r28, r22
     c0c:	62 96       	adiw	r28, 0x12	; 18
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	dd cf       	rjmp	.-70     	; 0xbce <this_init+0x11e>

		}
		
	}
	*/
	currentMenu.currentMenuItem = nodes; //set main menu as current
     c14:	eb e6       	ldi	r30, 0x6B	; 107
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	80 e8       	ldi	r24, 0x80	; 128
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	91 83       	std	Z+1, r25	; 0x01
     c1e:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
     c20:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	08 95       	ret

00000c30 <navigateMenu>:
	
	return mainMenu;
}
*/
void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     c30:	0e 94 11 05 	call	0xa22	; 0xa22 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     c34:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <currentMenu+0x3>
     c38:	94 30       	cpi	r25, 0x04	; 4
     c3a:	09 f0       	breq	.+2      	; 0xc3e <navigateMenu+0xe>
     c3c:	58 c0       	rjmp	.+176    	; 0xcee <navigateMenu+0xbe>
			switch (dir) {
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	e1 f1       	breq	.+120    	; 0xcba <navigateMenu+0x8a>
     c42:	60 f1       	brcs	.+88     	; 0xc9c <navigateMenu+0x6c>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	c9 f0       	breq	.+50     	; 0xc7a <navigateMenu+0x4a>
     c48:	83 30       	cpi	r24, 0x03	; 3
     c4a:	09 f0       	breq	.+2      	; 0xc4e <navigateMenu+0x1e>
     c4c:	50 c0       	rjmp	.+160    	; 0xcee <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     c4e:	eb e6       	ldi	r30, 0x6B	; 107
     c50:	f2 e0       	ldi	r31, 0x02	; 2
     c52:	92 81       	ldd	r25, Z+2	; 0x02
     c54:	49 2f       	mov	r20, r25
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	01 90       	ld	r0, Z+
     c5a:	f0 81       	ld	r31, Z
     c5c:	e0 2d       	mov	r30, r0
     c5e:	26 8d       	ldd	r18, Z+30	; 0x1e
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	31 09       	sbc	r19, r1
     c66:	42 17       	cp	r20, r18
     c68:	53 07       	cpc	r21, r19
     c6a:	24 f4       	brge	.+8      	; 0xc74 <navigateMenu+0x44>
					currentMenu.childIndex++;
     c6c:	9f 5f       	subi	r25, 0xFF	; 255
     c6e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <currentMenu+0x2>
     c72:	3d c0       	rjmp	.+122    	; 0xcee <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     c74:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <currentMenu+0x2>
     c78:	3a c0       	rjmp	.+116    	; 0xcee <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     c7a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <currentMenu+0x2>
     c7e:	99 23       	and	r25, r25
     c80:	21 f0       	breq	.+8      	; 0xc8a <navigateMenu+0x5a>
					currentMenu.childIndex--;
     c82:	91 50       	subi	r25, 0x01	; 1
     c84:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <currentMenu+0x2>
     c88:	32 c0       	rjmp	.+100    	; 0xcee <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     c8a:	eb e6       	ldi	r30, 0x6B	; 107
     c8c:	f2 e0       	ldi	r31, 0x02	; 2
     c8e:	a0 81       	ld	r26, Z
     c90:	b1 81       	ldd	r27, Z+1	; 0x01
     c92:	5e 96       	adiw	r26, 0x1e	; 30
     c94:	9c 91       	ld	r25, X
     c96:	91 50       	subi	r25, 0x01	; 1
     c98:	92 83       	std	Z+2, r25	; 0x02
     c9a:	29 c0       	rjmp	.+82     	; 0xcee <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     c9c:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <currentMenu>
     ca0:	f0 91 6c 02 	lds	r31, 0x026C	; 0x80026c <currentMenu+0x1>
     ca4:	20 89       	ldd	r18, Z+16	; 0x10
     ca6:	31 89       	ldd	r19, Z+17	; 0x11
     ca8:	21 15       	cp	r18, r1
     caa:	31 05       	cpc	r19, r1
     cac:	01 f1       	breq	.+64     	; 0xcee <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     cae:	eb e6       	ldi	r30, 0x6B	; 107
     cb0:	f2 e0       	ldi	r31, 0x02	; 2
     cb2:	31 83       	std	Z+1, r19	; 0x01
     cb4:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     cb6:	12 82       	std	Z+2, r1	; 0x02
     cb8:	1a c0       	rjmp	.+52     	; 0xcee <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     cba:	ab e6       	ldi	r26, 0x6B	; 107
     cbc:	b2 e0       	ldi	r27, 0x02	; 2
     cbe:	2d 91       	ld	r18, X+
     cc0:	3c 91       	ld	r19, X
     cc2:	11 97       	sbiw	r26, 0x01	; 1
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	9c 91       	ld	r25, X
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	e9 2f       	mov	r30, r25
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	39 96       	adiw	r30, 0x09	; 9
     cd0:	ee 0f       	add	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	e2 0f       	add	r30, r18
     cd6:	f3 1f       	adc	r31, r19
     cd8:	01 90       	ld	r0, Z+
     cda:	f0 81       	ld	r31, Z
     cdc:	e0 2d       	mov	r30, r0
     cde:	96 8d       	ldd	r25, Z+30	; 0x1e
     ce0:	99 23       	and	r25, r25
     ce2:	29 f0       	breq	.+10     	; 0xcee <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     ce4:	11 96       	adiw	r26, 0x01	; 1
     ce6:	fc 93       	st	X, r31
     ce8:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     cee:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <currentMenu+0x3>
     cf2:	08 95       	ret

00000cf4 <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
	oled_reset();
     cfc:	0e 94 c4 06 	call	0xd88	; 0xd88 <oled_reset>
	oled_home();
     d00:	0e 94 e5 06 	call	0xdca	; 0xdca <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d04:	cb e6       	ldi	r28, 0x6B	; 107
     d06:	d2 e0       	ldi	r29, 0x02	; 2
     d08:	88 81       	ld	r24, Y
     d0a:	99 81       	ldd	r25, Y+1	; 0x01
     d0c:	0e 94 20 07 	call	0xe40	; 0xe40 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d10:	e8 81       	ld	r30, Y
     d12:	f9 81       	ldd	r31, Y+1	; 0x01
     d14:	86 8d       	ldd	r24, Z+30	; 0x1e
     d16:	88 23       	and	r24, r24
     d18:	31 f1       	breq	.+76     	; 0xd66 <menu_printCurrentMenu+0x72>
     d1a:	c0 e0       	ldi	r28, 0x00	; 0
     d1c:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d1e:	0b e6       	ldi	r16, 0x6B	; 107
     d20:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     d22:	ce 01       	movw	r24, r28
     d24:	02 96       	adiw	r24, 0x02	; 2
     d26:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d2a:	d8 01       	movw	r26, r16
     d2c:	8d 91       	ld	r24, X+
     d2e:	9c 91       	ld	r25, X
     d30:	fe 01       	movw	r30, r28
     d32:	39 96       	adiw	r30, 0x09	; 9
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	e8 0f       	add	r30, r24
     d3a:	f9 1f       	adc	r31, r25
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	0e 94 20 07 	call	0xe40	; 0xe40 <oled_print>
		if (currentMenu.childIndex == i) {
     d44:	f8 01       	movw	r30, r16
     d46:	82 81       	ldd	r24, Z+2	; 0x02
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	8c 17       	cp	r24, r28
     d4c:	9d 07       	cpc	r25, r29
     d4e:	11 f4       	brne	.+4      	; 0xd54 <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     d50:	0e 94 da 06 	call	0xdb4	; 0xdb4 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d54:	21 96       	adiw	r28, 0x01	; 1
     d56:	d8 01       	movw	r26, r16
     d58:	ed 91       	ld	r30, X+
     d5a:	fc 91       	ld	r31, X
     d5c:	86 8d       	ldd	r24, Z+30	; 0x1e
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	c8 17       	cp	r28, r24
     d62:	d9 07       	cpc	r29, r25
     d64:	f4 f2       	brlt	.-68     	; 0xd22 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     d70:	80 55       	subi	r24, 0x50	; 80
     d72:	e0 e0       	ldi	r30, 0x00	; 0
     d74:	f0 e1       	ldi	r31, 0x10	; 16
     d76:	80 83       	st	Z, r24
     d78:	86 2f       	mov	r24, r22
     d7a:	8f 70       	andi	r24, 0x0F	; 15
     d7c:	80 83       	st	Z, r24
     d7e:	62 95       	swap	r22
     d80:	6f 70       	andi	r22, 0x0F	; 15
     d82:	60 61       	ori	r22, 0x10	; 16
     d84:	60 83       	st	Z, r22
     d86:	08 95       	ret

00000d88 <oled_reset>:
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	10 e0       	ldi	r17, 0x00	; 0
     d90:	c0 e0       	ldi	r28, 0x00	; 0
     d92:	d2 e1       	ldi	r29, 0x12	; 18
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	81 2f       	mov	r24, r17
     d98:	0e 94 b8 06 	call	0xd70	; 0xd70 <oled_pos>
     d9c:	80 e8       	ldi	r24, 0x80	; 128
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	18 82       	st	Y, r1
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	e9 f7       	brne	.-6      	; 0xda0 <oled_reset+0x18>
     da6:	1f 5f       	subi	r17, 0xFF	; 255
     da8:	18 30       	cpi	r17, 0x08	; 8
     daa:	a1 f7       	brne	.-24     	; 0xd94 <oled_reset+0xc>
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	08 95       	ret

00000db4 <oled_print_arrow>:
     db4:	e0 e0       	ldi	r30, 0x00	; 0
     db6:	f2 e1       	ldi	r31, 0x12	; 18
     db8:	88 e1       	ldi	r24, 0x18	; 24
     dba:	80 83       	st	Z, r24
     dbc:	9c e3       	ldi	r25, 0x3C	; 60
     dbe:	90 83       	st	Z, r25
     dc0:	9e e7       	ldi	r25, 0x7E	; 126
     dc2:	90 83       	st	Z, r25
     dc4:	80 83       	st	Z, r24
     dc6:	80 83       	st	Z, r24
     dc8:	08 95       	ret

00000dca <oled_home>:
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 b8 06 	call	0xd70	; 0xd70 <oled_pos>
     dd2:	08 95       	ret

00000dd4 <oled_init>:
     dd4:	e0 e0       	ldi	r30, 0x00	; 0
     dd6:	f0 e1       	ldi	r31, 0x10	; 16
     dd8:	8e ea       	ldi	r24, 0xAE	; 174
     dda:	80 83       	st	Z, r24
     ddc:	81 ea       	ldi	r24, 0xA1	; 161
     dde:	80 83       	st	Z, r24
     de0:	8a ed       	ldi	r24, 0xDA	; 218
     de2:	80 83       	st	Z, r24
     de4:	82 e1       	ldi	r24, 0x12	; 18
     de6:	80 83       	st	Z, r24
     de8:	88 ec       	ldi	r24, 0xC8	; 200
     dea:	80 83       	st	Z, r24
     dec:	88 ea       	ldi	r24, 0xA8	; 168
     dee:	80 83       	st	Z, r24
     df0:	8f e3       	ldi	r24, 0x3F	; 63
     df2:	80 83       	st	Z, r24
     df4:	85 ed       	ldi	r24, 0xD5	; 213
     df6:	80 83       	st	Z, r24
     df8:	80 e8       	ldi	r24, 0x80	; 128
     dfa:	80 83       	st	Z, r24
     dfc:	81 e8       	ldi	r24, 0x81	; 129
     dfe:	80 83       	st	Z, r24
     e00:	80 e5       	ldi	r24, 0x50	; 80
     e02:	80 83       	st	Z, r24
     e04:	89 ed       	ldi	r24, 0xD9	; 217
     e06:	80 83       	st	Z, r24
     e08:	81 e2       	ldi	r24, 0x21	; 33
     e0a:	80 83       	st	Z, r24
     e0c:	80 e2       	ldi	r24, 0x20	; 32
     e0e:	80 83       	st	Z, r24
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	80 83       	st	Z, r24
     e14:	8b ed       	ldi	r24, 0xDB	; 219
     e16:	80 83       	st	Z, r24
     e18:	80 e3       	ldi	r24, 0x30	; 48
     e1a:	80 83       	st	Z, r24
     e1c:	8d ea       	ldi	r24, 0xAD	; 173
     e1e:	80 83       	st	Z, r24
     e20:	10 82       	st	Z, r1
     e22:	84 ea       	ldi	r24, 0xA4	; 164
     e24:	80 83       	st	Z, r24
     e26:	86 ea       	ldi	r24, 0xA6	; 166
     e28:	80 83       	st	Z, r24
     e2a:	8f ea       	ldi	r24, 0xAF	; 175
     e2c:	80 83       	st	Z, r24
     e2e:	0e 94 c4 06 	call	0xd88	; 0xd88 <oled_reset>
     e32:	0e 94 e5 06 	call	0xdca	; 0xdca <oled_home>
     e36:	08 95       	ret

00000e38 <oled_gotoLine>:
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	0e 94 b8 06 	call	0xd70	; 0xd70 <oled_pos>
     e3e:	08 95       	ret

00000e40 <oled_print>:

void oled_print(char* character){
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	dc 01       	movw	r26, r24
	while (*character != '\0')
     e46:	8c 91       	ld	r24, X
     e48:	81 11       	cpse	r24, r1
     e4a:	1a c0       	rjmp	.+52     	; 0xe80 <oled_print+0x40>
     e4c:	1e c0       	rjmp	.+60     	; 0xe8a <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     e4e:	ec 91       	ld	r30, X
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	b0 97       	sbiw	r30, 0x20	; 32
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	e2 0f       	add	r30, r18
     e62:	f3 1f       	adc	r31, r19
     e64:	e2 56       	subi	r30, 0x62	; 98
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     e6a:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	28 30       	cpi	r18, 0x08	; 8
     e72:	31 05       	cpc	r19, r1
     e74:	61 f7       	brne	.-40     	; 0xe4e <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     e76:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     e78:	8c 91       	ld	r24, X
     e7a:	81 11       	cpse	r24, r1
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <oled_print+0x44>
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     e80:	c0 e0       	ldi	r28, 0x00	; 0
     e82:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	e2 cf       	rjmp	.-60     	; 0xe4e <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <setupInit>:
#include "oled.h"
#include "timer.h"
#include "sleep.h"

	void setupInit(void){
	cli();
     e90:	f8 94       	cli
	xmem_init();
     e92:	0e 94 78 08 	call	0x10f0	; 0x10f0 <xmem_init>
	USART_init(MYUBRR);
     e96:	8f e1       	ldi	r24, 0x1F	; 31
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 67 08 	call	0x10ce	; 0x10ce <USART_init>
	adcInit();
     e9e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     ea2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <joystickInit>
	touchButton_init();
     ea6:	0e 94 17 08 	call	0x102e	; 0x102e <touchButton_init>
	oled_init();
     eaa:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <oled_init>
	printf("After oledinit\n\r");
     eae:	84 e4       	ldi	r24, 0x44	; 68
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	9f 93       	push	r25
     eb4:	8f 93       	push	r24
     eb6:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
	timer_init();
     eba:	0e 94 09 08 	call	0x1012	; 0x1012 <timer_init>
	sleep_init();
     ebe:	0e 94 5e 04 	call	0x8bc	; 0x8bc <sleep_init>
	//menuInit();
	this_init();
     ec2:	0e 94 58 05 	call	0xab0	; 0xab0 <this_init>
	printf("Finished this");
     ec6:	85 e5       	ldi	r24, 0x55	; 85
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	0e 94 a7 0b 	call	0x174e	; 0x174e <printf>
	CAN_controller_init();
     ed2:	0e 94 2c 04 	call	0x858	; 0x858 <CAN_controller_init>
	//pwm_init(); uncommenting this breaks can on node 2.
	sei();
     ed6:	78 94       	sei
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	08 95       	ret

00000ee2 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     eec:	c1 e7       	ldi	r28, 0x71	; 113
     eee:	d2 e0       	ldi	r29, 0x02	; 2
     ef0:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     ef8:	89 83       	std	Y+1, r24	; 0x01
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <slider_sendPositionOverCAN>:

void slider_sendPositionOverCAN() {
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	2b 97       	sbiw	r28, 0x0b	; 11
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
	//printf("sending");

	CAN_message_t message;
	
	message.ID = 0x02;
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9a 87       	std	Y+10, r25	; 0x0a
     f1a:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 2;
     f1c:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     f1e:	e1 e7       	ldi	r30, 0x71	; 113
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	80 81       	ld	r24, Z
     f24:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     f26:	81 81       	ldd	r24, Z+1	; 0x01
     f28:	8a 83       	std	Y+2, r24	; 0x02
	
	
	CAN_transmit_message(&message);
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CAN_transmit_message>
     f32:	2b 96       	adiw	r28, 0x0b	; 11
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     f44:	87 b3       	in	r24, 0x17	; 23
     f46:	80 6a       	ori	r24, 0xA0	; 160
     f48:	87 bb       	out	0x17, r24	; 23
     f4a:	bc 9a       	sbi	0x17, 4	; 23
     f4c:	8d b1       	in	r24, 0x0d	; 13
     f4e:	81 65       	ori	r24, 0x51	; 81
     f50:	8d b9       	out	0x0d, r24	; 13
     f52:	c4 9a       	sbi	0x18, 4	; 24
     f54:	08 95       	ret

00000f56 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     f56:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     f58:	77 9b       	sbis	0x0e, 7	; 14
     f5a:	fe cf       	rjmp	.-4      	; 0xf58 <SPI_masterWrite+0x2>

}
     f5c:	08 95       	ret

00000f5e <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     f5e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     f60:	77 9b       	sbis	0x0e, 7	; 14
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <SPI_masterRead+0x2>
	return SPDR;
     f64:	8f b1       	in	r24, 0x0f	; 15
}
     f66:	08 95       	ret

00000f68 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     f68:	66 23       	and	r22, r22
     f6a:	69 f0       	breq	.+26     	; 0xf86 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     f6c:	48 b3       	in	r20, 0x18	; 24
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	b9 01       	movw	r22, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <SPI_setChipSelect+0x12>
     f76:	66 0f       	add	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	8a 95       	dec	r24
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <SPI_setChipSelect+0xe>
     f7e:	cb 01       	movw	r24, r22
     f80:	84 2b       	or	r24, r20
     f82:	88 bb       	out	0x18, r24	; 24
     f84:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     f86:	48 b3       	in	r20, 0x18	; 24
     f88:	21 e0       	ldi	r18, 0x01	; 1
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	b9 01       	movw	r22, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <SPI_setChipSelect+0x2c>
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	8a 95       	dec	r24
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <SPI_setChipSelect+0x28>
     f98:	cb 01       	movw	r24, r22
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	88 bb       	out	0x18, r24	; 24
     fa0:	08 95       	ret

00000fa2 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     fa2:	1f 92       	push	r1
     fa4:	0f 92       	push	r0
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	0f 92       	push	r0
     faa:	11 24       	eor	r1, r1
     fac:	2f 93       	push	r18
     fae:	3f 93       	push	r19
     fb0:	4f 93       	push	r20
     fb2:	5f 93       	push	r21
     fb4:	6f 93       	push	r22
     fb6:	7f 93       	push	r23
     fb8:	8f 93       	push	r24
     fba:	9f 93       	push	r25
     fbc:	af 93       	push	r26
     fbe:	bf 93       	push	r27
     fc0:	ef 93       	push	r30
     fc2:	ff 93       	push	r31
	cli();
     fc4:	f8 94       	cli
	TCNT1 = 0x00;
     fc6:	1d bc       	out	0x2d, r1	; 45
     fc8:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     fca:	87 e6       	ldi	r24, 0x67	; 103
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	0e 94 7e 04 	call	0x8fc	; 0x8fc <joystick_readPosition>
	slider_readPosition(&slider_pos);
     fd2:	81 e7       	ldi	r24, 0x71	; 113
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	0e 94 71 07 	call	0xee2	; 0xee2 <slider_readPosition>
	touchButton_readButtons(&buttons);
     fda:	8f e6       	ldi	r24, 0x6F	; 111
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	0e 94 30 08 	call	0x1060	; 0x1060 <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     fe2:	87 e6       	ldi	r24, 0x67	; 103
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	0e 94 18 06 	call	0xc30	; 0xc30 <navigateMenu>
	menu_printCurrentMenu();
     fea:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <menu_printCurrentMenu>
	sei();
     fee:	78 94       	sei
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1012:	89 b7       	in	r24, 0x39	; 57
    1014:	80 62       	ori	r24, 0x20	; 32
    1016:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1018:	1d bc       	out	0x2d, r1	; 45
    101a:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    101c:	80 e3       	ldi	r24, 0x30	; 48
    101e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1020:	85 e0       	ldi	r24, 0x05	; 5
    1022:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1024:	80 ef       	ldi	r24, 0xF0	; 240
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	99 bd       	out	0x29, r25	; 41
    102a:	88 bd       	out	0x28, r24	; 40
    102c:	08 95       	ret

0000102e <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    102e:	36 b3       	in	r19, 0x16	; 22
    1030:	26 b3       	in	r18, 0x16	; 22
    1032:	47 b3       	in	r20, 0x17	; 23
    1034:	32 70       	andi	r19, 0x02	; 2
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	bc 01       	movw	r22, r24
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <touchButton_init+0x14>
    103e:	66 0f       	add	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	3a 95       	dec	r19
    1044:	e2 f7       	brpl	.-8      	; 0x103e <touchButton_init+0x10>
    1046:	24 70       	andi	r18, 0x04	; 4
    1048:	02 c0       	rjmp	.+4      	; 0x104e <touchButton_init+0x20>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	2a 95       	dec	r18
    1050:	e2 f7       	brpl	.-8      	; 0x104a <touchButton_init+0x1c>
    1052:	86 2b       	or	r24, r22
    1054:	97 2b       	or	r25, r23
    1056:	80 95       	com	r24
    1058:	90 95       	com	r25
    105a:	84 23       	and	r24, r20
    105c:	87 bb       	out	0x17, r24	; 23
    105e:	08 95       	ret

00001060 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1060:	86 b3       	in	r24, 0x16	; 22
    1062:	ef e6       	ldi	r30, 0x6F	; 111
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	86 95       	lsr	r24
    1068:	81 70       	andi	r24, 0x01	; 1
    106a:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    106c:	86 b3       	in	r24, 0x16	; 22
    106e:	82 fb       	bst	r24, 2
    1070:	88 27       	eor	r24, r24
    1072:	80 f9       	bld	r24, 0
    1074:	81 83       	std	Z+1, r24	; 0x01
    1076:	08 95       	ret

00001078 <touchButton_sendButtonsOverCAN>:
}
void touchButton_sendButtonsOverCAN() {
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	2b 97       	sbiw	r28, 0x0b	; 11
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
	//printf("sending");

	CAN_message_t message;
	
	message.ID = 0x03;
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9a 87       	std	Y+10, r25	; 0x0a
    1092:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 2;
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = buttons.left_button;
    1098:	ef e6       	ldi	r30, 0x6F	; 111
    109a:	f2 e0       	ldi	r31, 0x02	; 2
    109c:	80 81       	ld	r24, Z
    109e:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = buttons.right_button;
    10a0:	81 81       	ldd	r24, Z+1	; 0x01
    10a2:	8a 83       	std	Y+2, r24	; 0x02
	
	
	CAN_transmit_message(&message);
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CAN_transmit_message>
    10ac:	2b 96       	adiw	r28, 0x0b	; 11
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    10be:	5d 9b       	sbis	0x0b, 5	; 11
    10c0:	fe cf       	rjmp	.-4      	; 0x10be <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    10c2:	8c b9       	out	0x0c, r24	; 12
    10c4:	08 95       	ret

000010c6 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    10c6:	5f 9b       	sbis	0x0b, 7	; 11
    10c8:	fe cf       	rjmp	.-4      	; 0x10c6 <USART_receiveChar>
		;
	
	return UDR0;
    10ca:	8c b1       	in	r24, 0x0c	; 12
    10cc:	08 95       	ret

000010ce <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    10ce:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    10d0:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    10d2:	88 e1       	ldi	r24, 0x18	; 24
    10d4:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    10d6:	8e e8       	ldi	r24, 0x8E	; 142
    10d8:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    10da:	63 e6       	ldi	r22, 0x63	; 99
    10dc:	78 e0       	ldi	r23, 0x08	; 8
    10de:	8f e5       	ldi	r24, 0x5F	; 95
    10e0:	98 e0       	ldi	r25, 0x08	; 8
    10e2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <fdevopen>
    10e6:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <uart+0x1>
    10ea:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <uart>
    10ee:	08 95       	ret

000010f0 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    10f0:	85 b7       	in	r24, 0x35	; 53
    10f2:	80 68       	ori	r24, 0x80	; 128
    10f4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    10f6:	80 b7       	in	r24, 0x30	; 48
    10f8:	88 60       	ori	r24, 0x08	; 8
    10fa:	80 bf       	out	0x30, r24	; 48
    10fc:	08 95       	ret
    10fe:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_pscA>
    1102:	60 f0       	brcs	.+24     	; 0x111c <xmem_init+0x2c>
    1104:	80 e8       	ldi	r24, 0x80	; 128
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	09 f4       	brne	.+2      	; 0x110c <xmem_init+0x1c>
    110a:	9e ef       	ldi	r25, 0xFE	; 254
    110c:	0e 94 0d 0a 	call	0x141a	; 0x141a <__fp_pscB>
    1110:	28 f0       	brcs	.+10     	; 0x111c <xmem_init+0x2c>
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	51 e0       	ldi	r21, 0x01	; 1
    1116:	71 f4       	brne	.+28     	; 0x1134 <atan2+0x10>
    1118:	5e ef       	ldi	r21, 0xFE	; 254
    111a:	0c c0       	rjmp	.+24     	; 0x1134 <atan2+0x10>
    111c:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>
    1120:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__fp_zero>

00001124 <atan2>:
    1124:	e9 2f       	mov	r30, r25
    1126:	e0 78       	andi	r30, 0x80	; 128
    1128:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_split3>
    112c:	40 f3       	brcs	.-48     	; 0x10fe <xmem_init+0xe>
    112e:	09 2e       	mov	r0, r25
    1130:	05 2a       	or	r0, r21
    1132:	b1 f3       	breq	.-20     	; 0x1120 <xmem_init+0x30>
    1134:	26 17       	cp	r18, r22
    1136:	37 07       	cpc	r19, r23
    1138:	48 07       	cpc	r20, r24
    113a:	59 07       	cpc	r21, r25
    113c:	38 f0       	brcs	.+14     	; 0x114c <atan2+0x28>
    113e:	0e 2e       	mov	r0, r30
    1140:	07 f8       	bld	r0, 7
    1142:	e0 25       	eor	r30, r0
    1144:	69 f0       	breq	.+26     	; 0x1160 <atan2+0x3c>
    1146:	e0 25       	eor	r30, r0
    1148:	e0 64       	ori	r30, 0x40	; 64
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <atan2+0x3c>
    114c:	ef 63       	ori	r30, 0x3F	; 63
    114e:	07 f8       	bld	r0, 7
    1150:	00 94       	com	r0
    1152:	07 fa       	bst	r0, 7
    1154:	db 01       	movw	r26, r22
    1156:	b9 01       	movw	r22, r18
    1158:	9d 01       	movw	r18, r26
    115a:	dc 01       	movw	r26, r24
    115c:	ca 01       	movw	r24, r20
    115e:	ad 01       	movw	r20, r26
    1160:	ef 93       	push	r30
    1162:	0e 94 08 09 	call	0x1210	; 0x1210 <__divsf3_pse>
    1166:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fp_round>
    116a:	0e 94 c2 08 	call	0x1184	; 0x1184 <atan>
    116e:	5f 91       	pop	r21
    1170:	55 23       	and	r21, r21
    1172:	39 f0       	breq	.+14     	; 0x1182 <atan2+0x5e>
    1174:	2b ed       	ldi	r18, 0xDB	; 219
    1176:	3f e0       	ldi	r19, 0x0F	; 15
    1178:	49 e4       	ldi	r20, 0x49	; 73
    117a:	50 fd       	sbrc	r21, 0
    117c:	49 ec       	ldi	r20, 0xC9	; 201
    117e:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__addsf3>
    1182:	08 95       	ret

00001184 <atan>:
    1184:	df 93       	push	r29
    1186:	dd 27       	eor	r29, r29
    1188:	b9 2f       	mov	r27, r25
    118a:	bf 77       	andi	r27, 0x7F	; 127
    118c:	40 e8       	ldi	r20, 0x80	; 128
    118e:	5f e3       	ldi	r21, 0x3F	; 63
    1190:	16 16       	cp	r1, r22
    1192:	17 06       	cpc	r1, r23
    1194:	48 07       	cpc	r20, r24
    1196:	5b 07       	cpc	r21, r27
    1198:	18 f4       	brcc	.+6      	; 0x11a0 <atan+0x1c>
    119a:	d9 2f       	mov	r29, r25
    119c:	0e 94 4e 0a 	call	0x149c	; 0x149c <inverse>
    11a0:	9f 93       	push	r25
    11a2:	8f 93       	push	r24
    11a4:	7f 93       	push	r23
    11a6:	6f 93       	push	r22
    11a8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <square>
    11ac:	e0 e7       	ldi	r30, 0x70	; 112
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_powser>
    11b4:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fp_round>
    11b8:	2f 91       	pop	r18
    11ba:	3f 91       	pop	r19
    11bc:	4f 91       	pop	r20
    11be:	5f 91       	pop	r21
    11c0:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__mulsf3x>
    11c4:	dd 23       	and	r29, r29
    11c6:	51 f0       	breq	.+20     	; 0x11dc <atan+0x58>
    11c8:	90 58       	subi	r25, 0x80	; 128
    11ca:	a2 ea       	ldi	r26, 0xA2	; 162
    11cc:	2a ed       	ldi	r18, 0xDA	; 218
    11ce:	3f e0       	ldi	r19, 0x0F	; 15
    11d0:	49 ec       	ldi	r20, 0xC9	; 201
    11d2:	5f e3       	ldi	r21, 0x3F	; 63
    11d4:	d0 78       	andi	r29, 0x80	; 128
    11d6:	5d 27       	eor	r21, r29
    11d8:	0e 94 df 0a 	call	0x15be	; 0x15be <__addsf3x>
    11dc:	df 91       	pop	r29
    11de:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_round>

000011e2 <__divsf3>:
    11e2:	0e 94 05 09 	call	0x120a	; 0x120a <__divsf3x>
    11e6:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_round>
    11ea:	0e 94 0d 0a 	call	0x141a	; 0x141a <__fp_pscB>
    11ee:	58 f0       	brcs	.+22     	; 0x1206 <__divsf3+0x24>
    11f0:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_pscA>
    11f4:	40 f0       	brcs	.+16     	; 0x1206 <__divsf3+0x24>
    11f6:	29 f4       	brne	.+10     	; 0x1202 <__divsf3+0x20>
    11f8:	5f 3f       	cpi	r21, 0xFF	; 255
    11fa:	29 f0       	breq	.+10     	; 0x1206 <__divsf3+0x24>
    11fc:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    1200:	51 11       	cpse	r21, r1
    1202:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_szero>
    1206:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>

0000120a <__divsf3x>:
    120a:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_split3>
    120e:	68 f3       	brcs	.-38     	; 0x11ea <__divsf3+0x8>

00001210 <__divsf3_pse>:
    1210:	99 23       	and	r25, r25
    1212:	b1 f3       	breq	.-20     	; 0x1200 <__divsf3+0x1e>
    1214:	55 23       	and	r21, r21
    1216:	91 f3       	breq	.-28     	; 0x11fc <__divsf3+0x1a>
    1218:	95 1b       	sub	r25, r21
    121a:	55 0b       	sbc	r21, r21
    121c:	bb 27       	eor	r27, r27
    121e:	aa 27       	eor	r26, r26
    1220:	62 17       	cp	r22, r18
    1222:	73 07       	cpc	r23, r19
    1224:	84 07       	cpc	r24, r20
    1226:	38 f0       	brcs	.+14     	; 0x1236 <__divsf3_pse+0x26>
    1228:	9f 5f       	subi	r25, 0xFF	; 255
    122a:	5f 4f       	sbci	r21, 0xFF	; 255
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	44 1f       	adc	r20, r20
    1232:	aa 1f       	adc	r26, r26
    1234:	a9 f3       	breq	.-22     	; 0x1220 <__divsf3_pse+0x10>
    1236:	35 d0       	rcall	.+106    	; 0x12a2 <__divsf3_pse+0x92>
    1238:	0e 2e       	mov	r0, r30
    123a:	3a f0       	brmi	.+14     	; 0x124a <__divsf3_pse+0x3a>
    123c:	e0 e8       	ldi	r30, 0x80	; 128
    123e:	32 d0       	rcall	.+100    	; 0x12a4 <__divsf3_pse+0x94>
    1240:	91 50       	subi	r25, 0x01	; 1
    1242:	50 40       	sbci	r21, 0x00	; 0
    1244:	e6 95       	lsr	r30
    1246:	00 1c       	adc	r0, r0
    1248:	ca f7       	brpl	.-14     	; 0x123c <__divsf3_pse+0x2c>
    124a:	2b d0       	rcall	.+86     	; 0x12a2 <__divsf3_pse+0x92>
    124c:	fe 2f       	mov	r31, r30
    124e:	29 d0       	rcall	.+82     	; 0x12a2 <__divsf3_pse+0x92>
    1250:	66 0f       	add	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	bb 1f       	adc	r27, r27
    1258:	26 17       	cp	r18, r22
    125a:	37 07       	cpc	r19, r23
    125c:	48 07       	cpc	r20, r24
    125e:	ab 07       	cpc	r26, r27
    1260:	b0 e8       	ldi	r27, 0x80	; 128
    1262:	09 f0       	breq	.+2      	; 0x1266 <__divsf3_pse+0x56>
    1264:	bb 0b       	sbc	r27, r27
    1266:	80 2d       	mov	r24, r0
    1268:	bf 01       	movw	r22, r30
    126a:	ff 27       	eor	r31, r31
    126c:	93 58       	subi	r25, 0x83	; 131
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	3a f0       	brmi	.+14     	; 0x1280 <__divsf3_pse+0x70>
    1272:	9e 3f       	cpi	r25, 0xFE	; 254
    1274:	51 05       	cpc	r21, r1
    1276:	78 f0       	brcs	.+30     	; 0x1296 <__divsf3_pse+0x86>
    1278:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    127c:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_szero>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	e4 f3       	brlt	.-8      	; 0x127c <__divsf3_pse+0x6c>
    1284:	98 3e       	cpi	r25, 0xE8	; 232
    1286:	d4 f3       	brlt	.-12     	; 0x127c <__divsf3_pse+0x6c>
    1288:	86 95       	lsr	r24
    128a:	77 95       	ror	r23
    128c:	67 95       	ror	r22
    128e:	b7 95       	ror	r27
    1290:	f7 95       	ror	r31
    1292:	9f 5f       	subi	r25, 0xFF	; 255
    1294:	c9 f7       	brne	.-14     	; 0x1288 <__divsf3_pse+0x78>
    1296:	88 0f       	add	r24, r24
    1298:	91 1d       	adc	r25, r1
    129a:	96 95       	lsr	r25
    129c:	87 95       	ror	r24
    129e:	97 f9       	bld	r25, 7
    12a0:	08 95       	ret
    12a2:	e1 e0       	ldi	r30, 0x01	; 1
    12a4:	66 0f       	add	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	bb 1f       	adc	r27, r27
    12ac:	62 17       	cp	r22, r18
    12ae:	73 07       	cpc	r23, r19
    12b0:	84 07       	cpc	r24, r20
    12b2:	ba 07       	cpc	r27, r26
    12b4:	20 f0       	brcs	.+8      	; 0x12be <__divsf3_pse+0xae>
    12b6:	62 1b       	sub	r22, r18
    12b8:	73 0b       	sbc	r23, r19
    12ba:	84 0b       	sbc	r24, r20
    12bc:	ba 0b       	sbc	r27, r26
    12be:	ee 1f       	adc	r30, r30
    12c0:	88 f7       	brcc	.-30     	; 0x12a4 <__divsf3_pse+0x94>
    12c2:	e0 95       	com	r30
    12c4:	08 95       	ret

000012c6 <__fixsfsi>:
    12c6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixunssfsi>
    12ca:	68 94       	set
    12cc:	b1 11       	cpse	r27, r1
    12ce:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_szero>
    12d2:	08 95       	ret

000012d4 <__fixunssfsi>:
    12d4:	0e 94 2d 0a 	call	0x145a	; 0x145a <__fp_splitA>
    12d8:	88 f0       	brcs	.+34     	; 0x12fc <__fixunssfsi+0x28>
    12da:	9f 57       	subi	r25, 0x7F	; 127
    12dc:	98 f0       	brcs	.+38     	; 0x1304 <__fixunssfsi+0x30>
    12de:	b9 2f       	mov	r27, r25
    12e0:	99 27       	eor	r25, r25
    12e2:	b7 51       	subi	r27, 0x17	; 23
    12e4:	b0 f0       	brcs	.+44     	; 0x1312 <__fixunssfsi+0x3e>
    12e6:	e1 f0       	breq	.+56     	; 0x1320 <__fixunssfsi+0x4c>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	1a f0       	brmi	.+6      	; 0x12f8 <__fixunssfsi+0x24>
    12f2:	ba 95       	dec	r27
    12f4:	c9 f7       	brne	.-14     	; 0x12e8 <__fixunssfsi+0x14>
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <__fixunssfsi+0x4c>
    12f8:	b1 30       	cpi	r27, 0x01	; 1
    12fa:	91 f0       	breq	.+36     	; 0x1320 <__fixunssfsi+0x4c>
    12fc:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_zero>
    1300:	b1 e0       	ldi	r27, 0x01	; 1
    1302:	08 95       	ret
    1304:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__fp_zero>
    1308:	67 2f       	mov	r22, r23
    130a:	78 2f       	mov	r23, r24
    130c:	88 27       	eor	r24, r24
    130e:	b8 5f       	subi	r27, 0xF8	; 248
    1310:	39 f0       	breq	.+14     	; 0x1320 <__fixunssfsi+0x4c>
    1312:	b9 3f       	cpi	r27, 0xF9	; 249
    1314:	cc f3       	brlt	.-14     	; 0x1308 <__fixunssfsi+0x34>
    1316:	86 95       	lsr	r24
    1318:	77 95       	ror	r23
    131a:	67 95       	ror	r22
    131c:	b3 95       	inc	r27
    131e:	d9 f7       	brne	.-10     	; 0x1316 <__fixunssfsi+0x42>
    1320:	3e f4       	brtc	.+14     	; 0x1330 <__fixunssfsi+0x5c>
    1322:	90 95       	com	r25
    1324:	80 95       	com	r24
    1326:	70 95       	com	r23
    1328:	61 95       	neg	r22
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	08 95       	ret

00001332 <__floatunsisf>:
    1332:	e8 94       	clt
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <__floatsisf+0x12>

00001336 <__floatsisf>:
    1336:	97 fb       	bst	r25, 7
    1338:	3e f4       	brtc	.+14     	; 0x1348 <__floatsisf+0x12>
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	61 95       	neg	r22
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	99 23       	and	r25, r25
    134a:	a9 f0       	breq	.+42     	; 0x1376 <__floatsisf+0x40>
    134c:	f9 2f       	mov	r31, r25
    134e:	96 e9       	ldi	r25, 0x96	; 150
    1350:	bb 27       	eor	r27, r27
    1352:	93 95       	inc	r25
    1354:	f6 95       	lsr	r31
    1356:	87 95       	ror	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b7 95       	ror	r27
    135e:	f1 11       	cpse	r31, r1
    1360:	f8 cf       	rjmp	.-16     	; 0x1352 <__floatsisf+0x1c>
    1362:	fa f4       	brpl	.+62     	; 0x13a2 <__floatsisf+0x6c>
    1364:	bb 0f       	add	r27, r27
    1366:	11 f4       	brne	.+4      	; 0x136c <__floatsisf+0x36>
    1368:	60 ff       	sbrs	r22, 0
    136a:	1b c0       	rjmp	.+54     	; 0x13a2 <__floatsisf+0x6c>
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <__floatsisf+0x6c>
    1376:	88 23       	and	r24, r24
    1378:	11 f0       	breq	.+4      	; 0x137e <__floatsisf+0x48>
    137a:	96 e9       	ldi	r25, 0x96	; 150
    137c:	11 c0       	rjmp	.+34     	; 0x13a0 <__floatsisf+0x6a>
    137e:	77 23       	and	r23, r23
    1380:	21 f0       	breq	.+8      	; 0x138a <__floatsisf+0x54>
    1382:	9e e8       	ldi	r25, 0x8E	; 142
    1384:	87 2f       	mov	r24, r23
    1386:	76 2f       	mov	r23, r22
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <__floatsisf+0x5e>
    138a:	66 23       	and	r22, r22
    138c:	71 f0       	breq	.+28     	; 0x13aa <__floatsisf+0x74>
    138e:	96 e8       	ldi	r25, 0x86	; 134
    1390:	86 2f       	mov	r24, r22
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	2a f0       	brmi	.+10     	; 0x13a2 <__floatsisf+0x6c>
    1398:	9a 95       	dec	r25
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	da f7       	brpl	.-10     	; 0x1398 <__floatsisf+0x62>
    13a2:	88 0f       	add	r24, r24
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	97 f9       	bld	r25, 7
    13aa:	08 95       	ret

000013ac <__fp_inf>:
    13ac:	97 f9       	bld	r25, 7
    13ae:	9f 67       	ori	r25, 0x7F	; 127
    13b0:	80 e8       	ldi	r24, 0x80	; 128
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	08 95       	ret

000013b8 <__fp_nan>:
    13b8:	9f ef       	ldi	r25, 0xFF	; 255
    13ba:	80 ec       	ldi	r24, 0xC0	; 192
    13bc:	08 95       	ret

000013be <__fp_powser>:
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	1f 93       	push	r17
    13c4:	0f 93       	push	r16
    13c6:	ff 92       	push	r15
    13c8:	ef 92       	push	r14
    13ca:	df 92       	push	r13
    13cc:	7b 01       	movw	r14, r22
    13ce:	8c 01       	movw	r16, r24
    13d0:	68 94       	set
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <__fp_powser+0x22>
    13d4:	da 2e       	mov	r13, r26
    13d6:	ef 01       	movw	r28, r30
    13d8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__mulsf3x>
    13dc:	fe 01       	movw	r30, r28
    13de:	e8 94       	clt
    13e0:	a5 91       	lpm	r26, Z+
    13e2:	25 91       	lpm	r18, Z+
    13e4:	35 91       	lpm	r19, Z+
    13e6:	45 91       	lpm	r20, Z+
    13e8:	55 91       	lpm	r21, Z+
    13ea:	a6 f3       	brts	.-24     	; 0x13d4 <__fp_powser+0x16>
    13ec:	ef 01       	movw	r28, r30
    13ee:	0e 94 df 0a 	call	0x15be	; 0x15be <__addsf3x>
    13f2:	fe 01       	movw	r30, r28
    13f4:	97 01       	movw	r18, r14
    13f6:	a8 01       	movw	r20, r16
    13f8:	da 94       	dec	r13
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <__fp_powser+0x18>
    13fc:	df 90       	pop	r13
    13fe:	ef 90       	pop	r14
    1400:	ff 90       	pop	r15
    1402:	0f 91       	pop	r16
    1404:	1f 91       	pop	r17
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <__fp_pscA>:
    140c:	00 24       	eor	r0, r0
    140e:	0a 94       	dec	r0
    1410:	16 16       	cp	r1, r22
    1412:	17 06       	cpc	r1, r23
    1414:	18 06       	cpc	r1, r24
    1416:	09 06       	cpc	r0, r25
    1418:	08 95       	ret

0000141a <__fp_pscB>:
    141a:	00 24       	eor	r0, r0
    141c:	0a 94       	dec	r0
    141e:	12 16       	cp	r1, r18
    1420:	13 06       	cpc	r1, r19
    1422:	14 06       	cpc	r1, r20
    1424:	05 06       	cpc	r0, r21
    1426:	08 95       	ret

00001428 <__fp_round>:
    1428:	09 2e       	mov	r0, r25
    142a:	03 94       	inc	r0
    142c:	00 0c       	add	r0, r0
    142e:	11 f4       	brne	.+4      	; 0x1434 <__fp_round+0xc>
    1430:	88 23       	and	r24, r24
    1432:	52 f0       	brmi	.+20     	; 0x1448 <__fp_round+0x20>
    1434:	bb 0f       	add	r27, r27
    1436:	40 f4       	brcc	.+16     	; 0x1448 <__fp_round+0x20>
    1438:	bf 2b       	or	r27, r31
    143a:	11 f4       	brne	.+4      	; 0x1440 <__fp_round+0x18>
    143c:	60 ff       	sbrs	r22, 0
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <__fp_round+0x20>
    1440:	6f 5f       	subi	r22, 0xFF	; 255
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	8f 4f       	sbci	r24, 0xFF	; 255
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	08 95       	ret

0000144a <__fp_split3>:
    144a:	57 fd       	sbrc	r21, 7
    144c:	90 58       	subi	r25, 0x80	; 128
    144e:	44 0f       	add	r20, r20
    1450:	55 1f       	adc	r21, r21
    1452:	59 f0       	breq	.+22     	; 0x146a <__fp_splitA+0x10>
    1454:	5f 3f       	cpi	r21, 0xFF	; 255
    1456:	71 f0       	breq	.+28     	; 0x1474 <__fp_splitA+0x1a>
    1458:	47 95       	ror	r20

0000145a <__fp_splitA>:
    145a:	88 0f       	add	r24, r24
    145c:	97 fb       	bst	r25, 7
    145e:	99 1f       	adc	r25, r25
    1460:	61 f0       	breq	.+24     	; 0x147a <__fp_splitA+0x20>
    1462:	9f 3f       	cpi	r25, 0xFF	; 255
    1464:	79 f0       	breq	.+30     	; 0x1484 <__fp_splitA+0x2a>
    1466:	87 95       	ror	r24
    1468:	08 95       	ret
    146a:	12 16       	cp	r1, r18
    146c:	13 06       	cpc	r1, r19
    146e:	14 06       	cpc	r1, r20
    1470:	55 1f       	adc	r21, r21
    1472:	f2 cf       	rjmp	.-28     	; 0x1458 <__fp_split3+0xe>
    1474:	46 95       	lsr	r20
    1476:	f1 df       	rcall	.-30     	; 0x145a <__fp_splitA>
    1478:	08 c0       	rjmp	.+16     	; 0x148a <__fp_splitA+0x30>
    147a:	16 16       	cp	r1, r22
    147c:	17 06       	cpc	r1, r23
    147e:	18 06       	cpc	r1, r24
    1480:	99 1f       	adc	r25, r25
    1482:	f1 cf       	rjmp	.-30     	; 0x1466 <__fp_splitA+0xc>
    1484:	86 95       	lsr	r24
    1486:	71 05       	cpc	r23, r1
    1488:	61 05       	cpc	r22, r1
    148a:	08 94       	sec
    148c:	08 95       	ret

0000148e <__fp_zero>:
    148e:	e8 94       	clt

00001490 <__fp_szero>:
    1490:	bb 27       	eor	r27, r27
    1492:	66 27       	eor	r22, r22
    1494:	77 27       	eor	r23, r23
    1496:	cb 01       	movw	r24, r22
    1498:	97 f9       	bld	r25, 7
    149a:	08 95       	ret

0000149c <inverse>:
    149c:	9b 01       	movw	r18, r22
    149e:	ac 01       	movw	r20, r24
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	9f e3       	ldi	r25, 0x3F	; 63
    14a8:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__divsf3>

000014ac <__mulsf3>:
    14ac:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__mulsf3x>
    14b0:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_round>
    14b4:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_pscA>
    14b8:	38 f0       	brcs	.+14     	; 0x14c8 <__mulsf3+0x1c>
    14ba:	0e 94 0d 0a 	call	0x141a	; 0x141a <__fp_pscB>
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__mulsf3+0x1c>
    14c0:	95 23       	and	r25, r21
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <__mulsf3+0x1c>
    14c4:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    14c8:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>
    14cc:	11 24       	eor	r1, r1
    14ce:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_szero>

000014d2 <__mulsf3x>:
    14d2:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_split3>
    14d6:	70 f3       	brcs	.-36     	; 0x14b4 <__mulsf3+0x8>

000014d8 <__mulsf3_pse>:
    14d8:	95 9f       	mul	r25, r21
    14da:	c1 f3       	breq	.-16     	; 0x14cc <__mulsf3+0x20>
    14dc:	95 0f       	add	r25, r21
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	55 1f       	adc	r21, r21
    14e2:	62 9f       	mul	r22, r18
    14e4:	f0 01       	movw	r30, r0
    14e6:	72 9f       	mul	r23, r18
    14e8:	bb 27       	eor	r27, r27
    14ea:	f0 0d       	add	r31, r0
    14ec:	b1 1d       	adc	r27, r1
    14ee:	63 9f       	mul	r22, r19
    14f0:	aa 27       	eor	r26, r26
    14f2:	f0 0d       	add	r31, r0
    14f4:	b1 1d       	adc	r27, r1
    14f6:	aa 1f       	adc	r26, r26
    14f8:	64 9f       	mul	r22, r20
    14fa:	66 27       	eor	r22, r22
    14fc:	b0 0d       	add	r27, r0
    14fe:	a1 1d       	adc	r26, r1
    1500:	66 1f       	adc	r22, r22
    1502:	82 9f       	mul	r24, r18
    1504:	22 27       	eor	r18, r18
    1506:	b0 0d       	add	r27, r0
    1508:	a1 1d       	adc	r26, r1
    150a:	62 1f       	adc	r22, r18
    150c:	73 9f       	mul	r23, r19
    150e:	b0 0d       	add	r27, r0
    1510:	a1 1d       	adc	r26, r1
    1512:	62 1f       	adc	r22, r18
    1514:	83 9f       	mul	r24, r19
    1516:	a0 0d       	add	r26, r0
    1518:	61 1d       	adc	r22, r1
    151a:	22 1f       	adc	r18, r18
    151c:	74 9f       	mul	r23, r20
    151e:	33 27       	eor	r19, r19
    1520:	a0 0d       	add	r26, r0
    1522:	61 1d       	adc	r22, r1
    1524:	23 1f       	adc	r18, r19
    1526:	84 9f       	mul	r24, r20
    1528:	60 0d       	add	r22, r0
    152a:	21 1d       	adc	r18, r1
    152c:	82 2f       	mov	r24, r18
    152e:	76 2f       	mov	r23, r22
    1530:	6a 2f       	mov	r22, r26
    1532:	11 24       	eor	r1, r1
    1534:	9f 57       	subi	r25, 0x7F	; 127
    1536:	50 40       	sbci	r21, 0x00	; 0
    1538:	9a f0       	brmi	.+38     	; 0x1560 <__mulsf3_pse+0x88>
    153a:	f1 f0       	breq	.+60     	; 0x1578 <__mulsf3_pse+0xa0>
    153c:	88 23       	and	r24, r24
    153e:	4a f0       	brmi	.+18     	; 0x1552 <__mulsf3_pse+0x7a>
    1540:	ee 0f       	add	r30, r30
    1542:	ff 1f       	adc	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	91 50       	subi	r25, 0x01	; 1
    154e:	50 40       	sbci	r21, 0x00	; 0
    1550:	a9 f7       	brne	.-22     	; 0x153c <__mulsf3_pse+0x64>
    1552:	9e 3f       	cpi	r25, 0xFE	; 254
    1554:	51 05       	cpc	r21, r1
    1556:	80 f0       	brcs	.+32     	; 0x1578 <__mulsf3_pse+0xa0>
    1558:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    155c:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_szero>
    1560:	5f 3f       	cpi	r21, 0xFF	; 255
    1562:	e4 f3       	brlt	.-8      	; 0x155c <__mulsf3_pse+0x84>
    1564:	98 3e       	cpi	r25, 0xE8	; 232
    1566:	d4 f3       	brlt	.-12     	; 0x155c <__mulsf3_pse+0x84>
    1568:	86 95       	lsr	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	f7 95       	ror	r31
    1572:	e7 95       	ror	r30
    1574:	9f 5f       	subi	r25, 0xFF	; 255
    1576:	c1 f7       	brne	.-16     	; 0x1568 <__mulsf3_pse+0x90>
    1578:	fe 2b       	or	r31, r30
    157a:	88 0f       	add	r24, r24
    157c:	91 1d       	adc	r25, r1
    157e:	96 95       	lsr	r25
    1580:	87 95       	ror	r24
    1582:	97 f9       	bld	r25, 7
    1584:	08 95       	ret

00001586 <square>:
    1586:	9b 01       	movw	r18, r22
    1588:	ac 01       	movw	r20, r24
    158a:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__mulsf3>

0000158e <__subsf3>:
    158e:	50 58       	subi	r21, 0x80	; 128

00001590 <__addsf3>:
    1590:	bb 27       	eor	r27, r27
    1592:	aa 27       	eor	r26, r26
    1594:	0e 94 df 0a 	call	0x15be	; 0x15be <__addsf3x>
    1598:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_round>
    159c:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_pscA>
    15a0:	38 f0       	brcs	.+14     	; 0x15b0 <__addsf3+0x20>
    15a2:	0e 94 0d 0a 	call	0x141a	; 0x141a <__fp_pscB>
    15a6:	20 f0       	brcs	.+8      	; 0x15b0 <__addsf3+0x20>
    15a8:	39 f4       	brne	.+14     	; 0x15b8 <__addsf3+0x28>
    15aa:	9f 3f       	cpi	r25, 0xFF	; 255
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <__addsf3+0x24>
    15ae:	26 f4       	brtc	.+8      	; 0x15b8 <__addsf3+0x28>
    15b0:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>
    15b4:	0e f4       	brtc	.+2      	; 0x15b8 <__addsf3+0x28>
    15b6:	e0 95       	com	r30
    15b8:	e7 fb       	bst	r30, 7
    15ba:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>

000015be <__addsf3x>:
    15be:	e9 2f       	mov	r30, r25
    15c0:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_split3>
    15c4:	58 f3       	brcs	.-42     	; 0x159c <__addsf3+0xc>
    15c6:	ba 17       	cp	r27, r26
    15c8:	62 07       	cpc	r22, r18
    15ca:	73 07       	cpc	r23, r19
    15cc:	84 07       	cpc	r24, r20
    15ce:	95 07       	cpc	r25, r21
    15d0:	20 f0       	brcs	.+8      	; 0x15da <__addsf3x+0x1c>
    15d2:	79 f4       	brne	.+30     	; 0x15f2 <__addsf3x+0x34>
    15d4:	a6 f5       	brtc	.+104    	; 0x163e <__addsf3x+0x80>
    15d6:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__fp_zero>
    15da:	0e f4       	brtc	.+2      	; 0x15de <__addsf3x+0x20>
    15dc:	e0 95       	com	r30
    15de:	0b 2e       	mov	r0, r27
    15e0:	ba 2f       	mov	r27, r26
    15e2:	a0 2d       	mov	r26, r0
    15e4:	0b 01       	movw	r0, r22
    15e6:	b9 01       	movw	r22, r18
    15e8:	90 01       	movw	r18, r0
    15ea:	0c 01       	movw	r0, r24
    15ec:	ca 01       	movw	r24, r20
    15ee:	a0 01       	movw	r20, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	ff 27       	eor	r31, r31
    15f4:	59 1b       	sub	r21, r25
    15f6:	99 f0       	breq	.+38     	; 0x161e <__addsf3x+0x60>
    15f8:	59 3f       	cpi	r21, 0xF9	; 249
    15fa:	50 f4       	brcc	.+20     	; 0x1610 <__addsf3x+0x52>
    15fc:	50 3e       	cpi	r21, 0xE0	; 224
    15fe:	68 f1       	brcs	.+90     	; 0x165a <__addsf3x+0x9c>
    1600:	1a 16       	cp	r1, r26
    1602:	f0 40       	sbci	r31, 0x00	; 0
    1604:	a2 2f       	mov	r26, r18
    1606:	23 2f       	mov	r18, r19
    1608:	34 2f       	mov	r19, r20
    160a:	44 27       	eor	r20, r20
    160c:	58 5f       	subi	r21, 0xF8	; 248
    160e:	f3 cf       	rjmp	.-26     	; 0x15f6 <__addsf3x+0x38>
    1610:	46 95       	lsr	r20
    1612:	37 95       	ror	r19
    1614:	27 95       	ror	r18
    1616:	a7 95       	ror	r26
    1618:	f0 40       	sbci	r31, 0x00	; 0
    161a:	53 95       	inc	r21
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__addsf3x+0x52>
    161e:	7e f4       	brtc	.+30     	; 0x163e <__addsf3x+0x80>
    1620:	1f 16       	cp	r1, r31
    1622:	ba 0b       	sbc	r27, r26
    1624:	62 0b       	sbc	r22, r18
    1626:	73 0b       	sbc	r23, r19
    1628:	84 0b       	sbc	r24, r20
    162a:	ba f0       	brmi	.+46     	; 0x165a <__addsf3x+0x9c>
    162c:	91 50       	subi	r25, 0x01	; 1
    162e:	a1 f0       	breq	.+40     	; 0x1658 <__addsf3x+0x9a>
    1630:	ff 0f       	add	r31, r31
    1632:	bb 1f       	adc	r27, r27
    1634:	66 1f       	adc	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	88 1f       	adc	r24, r24
    163a:	c2 f7       	brpl	.-16     	; 0x162c <__addsf3x+0x6e>
    163c:	0e c0       	rjmp	.+28     	; 0x165a <__addsf3x+0x9c>
    163e:	ba 0f       	add	r27, r26
    1640:	62 1f       	adc	r22, r18
    1642:	73 1f       	adc	r23, r19
    1644:	84 1f       	adc	r24, r20
    1646:	48 f4       	brcc	.+18     	; 0x165a <__addsf3x+0x9c>
    1648:	87 95       	ror	r24
    164a:	77 95       	ror	r23
    164c:	67 95       	ror	r22
    164e:	b7 95       	ror	r27
    1650:	f7 95       	ror	r31
    1652:	9e 3f       	cpi	r25, 0xFE	; 254
    1654:	08 f0       	brcs	.+2      	; 0x1658 <__addsf3x+0x9a>
    1656:	b0 cf       	rjmp	.-160    	; 0x15b8 <__addsf3+0x28>
    1658:	93 95       	inc	r25
    165a:	88 0f       	add	r24, r24
    165c:	08 f0       	brcs	.+2      	; 0x1660 <__addsf3x+0xa2>
    165e:	99 27       	eor	r25, r25
    1660:	ee 0f       	add	r30, r30
    1662:	97 95       	ror	r25
    1664:	87 95       	ror	r24
    1666:	08 95       	ret

00001668 <__divmodhi4>:
    1668:	97 fb       	bst	r25, 7
    166a:	07 2e       	mov	r0, r23
    166c:	16 f4       	brtc	.+4      	; 0x1672 <__divmodhi4+0xa>
    166e:	00 94       	com	r0
    1670:	07 d0       	rcall	.+14     	; 0x1680 <__divmodhi4_neg1>
    1672:	77 fd       	sbrc	r23, 7
    1674:	09 d0       	rcall	.+18     	; 0x1688 <__divmodhi4_neg2>
    1676:	0e 94 48 0b 	call	0x1690	; 0x1690 <__udivmodhi4>
    167a:	07 fc       	sbrc	r0, 7
    167c:	05 d0       	rcall	.+10     	; 0x1688 <__divmodhi4_neg2>
    167e:	3e f4       	brtc	.+14     	; 0x168e <__divmodhi4_exit>

00001680 <__divmodhi4_neg1>:
    1680:	90 95       	com	r25
    1682:	81 95       	neg	r24
    1684:	9f 4f       	sbci	r25, 0xFF	; 255
    1686:	08 95       	ret

00001688 <__divmodhi4_neg2>:
    1688:	70 95       	com	r23
    168a:	61 95       	neg	r22
    168c:	7f 4f       	sbci	r23, 0xFF	; 255

0000168e <__divmodhi4_exit>:
    168e:	08 95       	ret

00001690 <__udivmodhi4>:
    1690:	aa 1b       	sub	r26, r26
    1692:	bb 1b       	sub	r27, r27
    1694:	51 e1       	ldi	r21, 0x11	; 17
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <__udivmodhi4_ep>

00001698 <__udivmodhi4_loop>:
    1698:	aa 1f       	adc	r26, r26
    169a:	bb 1f       	adc	r27, r27
    169c:	a6 17       	cp	r26, r22
    169e:	b7 07       	cpc	r27, r23
    16a0:	10 f0       	brcs	.+4      	; 0x16a6 <__udivmodhi4_ep>
    16a2:	a6 1b       	sub	r26, r22
    16a4:	b7 0b       	sbc	r27, r23

000016a6 <__udivmodhi4_ep>:
    16a6:	88 1f       	adc	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	5a 95       	dec	r21
    16ac:	a9 f7       	brne	.-22     	; 0x1698 <__udivmodhi4_loop>
    16ae:	80 95       	com	r24
    16b0:	90 95       	com	r25
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	08 95       	ret

000016b8 <fdevopen>:
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	31 f4       	brne	.+12     	; 0x16d0 <fdevopen+0x18>
    16c4:	61 15       	cp	r22, r1
    16c6:	71 05       	cpc	r23, r1
    16c8:	19 f4       	brne	.+6      	; 0x16d0 <fdevopen+0x18>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	3a c0       	rjmp	.+116    	; 0x1744 <fdevopen+0x8c>
    16d0:	8b 01       	movw	r16, r22
    16d2:	ec 01       	movw	r28, r24
    16d4:	6e e0       	ldi	r22, 0x0E	; 14
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <calloc>
    16e0:	fc 01       	movw	r30, r24
    16e2:	89 2b       	or	r24, r25
    16e4:	91 f3       	breq	.-28     	; 0x16ca <fdevopen+0x12>
    16e6:	80 e8       	ldi	r24, 0x80	; 128
    16e8:	83 83       	std	Z+3, r24	; 0x03
    16ea:	01 15       	cp	r16, r1
    16ec:	11 05       	cpc	r17, r1
    16ee:	71 f0       	breq	.+28     	; 0x170c <fdevopen+0x54>
    16f0:	13 87       	std	Z+11, r17	; 0x0b
    16f2:	02 87       	std	Z+10, r16	; 0x0a
    16f4:	81 e8       	ldi	r24, 0x81	; 129
    16f6:	83 83       	std	Z+3, r24	; 0x03
    16f8:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <__iob>
    16fc:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <__iob+0x1>
    1700:	89 2b       	or	r24, r25
    1702:	21 f4       	brne	.+8      	; 0x170c <fdevopen+0x54>
    1704:	f0 93 d8 03 	sts	0x03D8, r31	; 0x8003d8 <__iob+0x1>
    1708:	e0 93 d7 03 	sts	0x03D7, r30	; 0x8003d7 <__iob>
    170c:	20 97       	sbiw	r28, 0x00	; 0
    170e:	c9 f0       	breq	.+50     	; 0x1742 <fdevopen+0x8a>
    1710:	d1 87       	std	Z+9, r29	; 0x09
    1712:	c0 87       	std	Z+8, r28	; 0x08
    1714:	83 81       	ldd	r24, Z+3	; 0x03
    1716:	82 60       	ori	r24, 0x02	; 2
    1718:	83 83       	std	Z+3, r24	; 0x03
    171a:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <__iob+0x2>
    171e:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <__iob+0x3>
    1722:	89 2b       	or	r24, r25
    1724:	71 f4       	brne	.+28     	; 0x1742 <fdevopen+0x8a>
    1726:	f0 93 da 03 	sts	0x03DA, r31	; 0x8003da <__iob+0x3>
    172a:	e0 93 d9 03 	sts	0x03D9, r30	; 0x8003d9 <__iob+0x2>
    172e:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <__iob+0x4>
    1732:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <__iob+0x5>
    1736:	89 2b       	or	r24, r25
    1738:	21 f4       	brne	.+8      	; 0x1742 <fdevopen+0x8a>
    173a:	f0 93 dc 03 	sts	0x03DC, r31	; 0x8003dc <__iob+0x5>
    173e:	e0 93 db 03 	sts	0x03DB, r30	; 0x8003db <__iob+0x4>
    1742:	cf 01       	movw	r24, r30
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <printf>:
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	ed ea       	ldi	r30, 0xAD	; 173
    1754:	fb e0       	ldi	r31, 0x0B	; 11
    1756:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__prologue_saves__+0x20>
    175a:	ae 01       	movw	r20, r28
    175c:	4b 5f       	subi	r20, 0xFB	; 251
    175e:	5f 4f       	sbci	r21, 0xFF	; 255
    1760:	fa 01       	movw	r30, r20
    1762:	61 91       	ld	r22, Z+
    1764:	71 91       	ld	r23, Z+
    1766:	af 01       	movw	r20, r30
    1768:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <__iob+0x2>
    176c:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <__iob+0x3>
    1770:	0e 94 bd 0b 	call	0x177a	; 0x177a <vfprintf>
    1774:	e2 e0       	ldi	r30, 0x02	; 2
    1776:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__epilogue_restores__+0x20>

0000177a <vfprintf>:
    177a:	ab e0       	ldi	r26, 0x0B	; 11
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e3 ec       	ldi	r30, 0xC3	; 195
    1780:	fb e0       	ldi	r31, 0x0B	; 11
    1782:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__prologue_saves__>
    1786:	6c 01       	movw	r12, r24
    1788:	7b 01       	movw	r14, r22
    178a:	8a 01       	movw	r16, r20
    178c:	fc 01       	movw	r30, r24
    178e:	17 82       	std	Z+7, r1	; 0x07
    1790:	16 82       	std	Z+6, r1	; 0x06
    1792:	83 81       	ldd	r24, Z+3	; 0x03
    1794:	81 ff       	sbrs	r24, 1
    1796:	cc c1       	rjmp	.+920    	; 0x1b30 <vfprintf+0x3b6>
    1798:	ce 01       	movw	r24, r28
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	3c 01       	movw	r6, r24
    179e:	f6 01       	movw	r30, r12
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	f7 01       	movw	r30, r14
    17a4:	93 fd       	sbrc	r25, 3
    17a6:	85 91       	lpm	r24, Z+
    17a8:	93 ff       	sbrs	r25, 3
    17aa:	81 91       	ld	r24, Z+
    17ac:	7f 01       	movw	r14, r30
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <vfprintf+0x3a>
    17b2:	ba c1       	rjmp	.+884    	; 0x1b28 <vfprintf+0x3ae>
    17b4:	85 32       	cpi	r24, 0x25	; 37
    17b6:	39 f4       	brne	.+14     	; 0x17c6 <vfprintf+0x4c>
    17b8:	93 fd       	sbrc	r25, 3
    17ba:	85 91       	lpm	r24, Z+
    17bc:	93 ff       	sbrs	r25, 3
    17be:	81 91       	ld	r24, Z+
    17c0:	7f 01       	movw	r14, r30
    17c2:	85 32       	cpi	r24, 0x25	; 37
    17c4:	29 f4       	brne	.+10     	; 0x17d0 <vfprintf+0x56>
    17c6:	b6 01       	movw	r22, r12
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    17ce:	e7 cf       	rjmp	.-50     	; 0x179e <vfprintf+0x24>
    17d0:	91 2c       	mov	r9, r1
    17d2:	21 2c       	mov	r2, r1
    17d4:	31 2c       	mov	r3, r1
    17d6:	ff e1       	ldi	r31, 0x1F	; 31
    17d8:	f3 15       	cp	r31, r3
    17da:	d8 f0       	brcs	.+54     	; 0x1812 <vfprintf+0x98>
    17dc:	8b 32       	cpi	r24, 0x2B	; 43
    17de:	79 f0       	breq	.+30     	; 0x17fe <vfprintf+0x84>
    17e0:	38 f4       	brcc	.+14     	; 0x17f0 <vfprintf+0x76>
    17e2:	80 32       	cpi	r24, 0x20	; 32
    17e4:	79 f0       	breq	.+30     	; 0x1804 <vfprintf+0x8a>
    17e6:	83 32       	cpi	r24, 0x23	; 35
    17e8:	a1 f4       	brne	.+40     	; 0x1812 <vfprintf+0x98>
    17ea:	23 2d       	mov	r18, r3
    17ec:	20 61       	ori	r18, 0x10	; 16
    17ee:	1d c0       	rjmp	.+58     	; 0x182a <vfprintf+0xb0>
    17f0:	8d 32       	cpi	r24, 0x2D	; 45
    17f2:	61 f0       	breq	.+24     	; 0x180c <vfprintf+0x92>
    17f4:	80 33       	cpi	r24, 0x30	; 48
    17f6:	69 f4       	brne	.+26     	; 0x1812 <vfprintf+0x98>
    17f8:	23 2d       	mov	r18, r3
    17fa:	21 60       	ori	r18, 0x01	; 1
    17fc:	16 c0       	rjmp	.+44     	; 0x182a <vfprintf+0xb0>
    17fe:	83 2d       	mov	r24, r3
    1800:	82 60       	ori	r24, 0x02	; 2
    1802:	38 2e       	mov	r3, r24
    1804:	e3 2d       	mov	r30, r3
    1806:	e4 60       	ori	r30, 0x04	; 4
    1808:	3e 2e       	mov	r3, r30
    180a:	2a c0       	rjmp	.+84     	; 0x1860 <vfprintf+0xe6>
    180c:	f3 2d       	mov	r31, r3
    180e:	f8 60       	ori	r31, 0x08	; 8
    1810:	1d c0       	rjmp	.+58     	; 0x184c <vfprintf+0xd2>
    1812:	37 fc       	sbrc	r3, 7
    1814:	2d c0       	rjmp	.+90     	; 0x1870 <vfprintf+0xf6>
    1816:	20 ed       	ldi	r18, 0xD0	; 208
    1818:	28 0f       	add	r18, r24
    181a:	2a 30       	cpi	r18, 0x0A	; 10
    181c:	40 f0       	brcs	.+16     	; 0x182e <vfprintf+0xb4>
    181e:	8e 32       	cpi	r24, 0x2E	; 46
    1820:	b9 f4       	brne	.+46     	; 0x1850 <vfprintf+0xd6>
    1822:	36 fc       	sbrc	r3, 6
    1824:	81 c1       	rjmp	.+770    	; 0x1b28 <vfprintf+0x3ae>
    1826:	23 2d       	mov	r18, r3
    1828:	20 64       	ori	r18, 0x40	; 64
    182a:	32 2e       	mov	r3, r18
    182c:	19 c0       	rjmp	.+50     	; 0x1860 <vfprintf+0xe6>
    182e:	36 fe       	sbrs	r3, 6
    1830:	06 c0       	rjmp	.+12     	; 0x183e <vfprintf+0xc4>
    1832:	8a e0       	ldi	r24, 0x0A	; 10
    1834:	98 9e       	mul	r9, r24
    1836:	20 0d       	add	r18, r0
    1838:	11 24       	eor	r1, r1
    183a:	92 2e       	mov	r9, r18
    183c:	11 c0       	rjmp	.+34     	; 0x1860 <vfprintf+0xe6>
    183e:	ea e0       	ldi	r30, 0x0A	; 10
    1840:	2e 9e       	mul	r2, r30
    1842:	20 0d       	add	r18, r0
    1844:	11 24       	eor	r1, r1
    1846:	22 2e       	mov	r2, r18
    1848:	f3 2d       	mov	r31, r3
    184a:	f0 62       	ori	r31, 0x20	; 32
    184c:	3f 2e       	mov	r3, r31
    184e:	08 c0       	rjmp	.+16     	; 0x1860 <vfprintf+0xe6>
    1850:	8c 36       	cpi	r24, 0x6C	; 108
    1852:	21 f4       	brne	.+8      	; 0x185c <vfprintf+0xe2>
    1854:	83 2d       	mov	r24, r3
    1856:	80 68       	ori	r24, 0x80	; 128
    1858:	38 2e       	mov	r3, r24
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <vfprintf+0xe6>
    185c:	88 36       	cpi	r24, 0x68	; 104
    185e:	41 f4       	brne	.+16     	; 0x1870 <vfprintf+0xf6>
    1860:	f7 01       	movw	r30, r14
    1862:	93 fd       	sbrc	r25, 3
    1864:	85 91       	lpm	r24, Z+
    1866:	93 ff       	sbrs	r25, 3
    1868:	81 91       	ld	r24, Z+
    186a:	7f 01       	movw	r14, r30
    186c:	81 11       	cpse	r24, r1
    186e:	b3 cf       	rjmp	.-154    	; 0x17d6 <vfprintf+0x5c>
    1870:	98 2f       	mov	r25, r24
    1872:	9f 7d       	andi	r25, 0xDF	; 223
    1874:	95 54       	subi	r25, 0x45	; 69
    1876:	93 30       	cpi	r25, 0x03	; 3
    1878:	28 f4       	brcc	.+10     	; 0x1884 <vfprintf+0x10a>
    187a:	0c 5f       	subi	r16, 0xFC	; 252
    187c:	1f 4f       	sbci	r17, 0xFF	; 255
    187e:	9f e3       	ldi	r25, 0x3F	; 63
    1880:	99 83       	std	Y+1, r25	; 0x01
    1882:	0d c0       	rjmp	.+26     	; 0x189e <vfprintf+0x124>
    1884:	83 36       	cpi	r24, 0x63	; 99
    1886:	31 f0       	breq	.+12     	; 0x1894 <vfprintf+0x11a>
    1888:	83 37       	cpi	r24, 0x73	; 115
    188a:	71 f0       	breq	.+28     	; 0x18a8 <vfprintf+0x12e>
    188c:	83 35       	cpi	r24, 0x53	; 83
    188e:	09 f0       	breq	.+2      	; 0x1892 <vfprintf+0x118>
    1890:	59 c0       	rjmp	.+178    	; 0x1944 <vfprintf+0x1ca>
    1892:	21 c0       	rjmp	.+66     	; 0x18d6 <vfprintf+0x15c>
    1894:	f8 01       	movw	r30, r16
    1896:	80 81       	ld	r24, Z
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	0e 5f       	subi	r16, 0xFE	; 254
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	88 24       	eor	r8, r8
    18a0:	83 94       	inc	r8
    18a2:	91 2c       	mov	r9, r1
    18a4:	53 01       	movw	r10, r6
    18a6:	13 c0       	rjmp	.+38     	; 0x18ce <vfprintf+0x154>
    18a8:	28 01       	movw	r4, r16
    18aa:	f2 e0       	ldi	r31, 0x02	; 2
    18ac:	4f 0e       	add	r4, r31
    18ae:	51 1c       	adc	r5, r1
    18b0:	f8 01       	movw	r30, r16
    18b2:	a0 80       	ld	r10, Z
    18b4:	b1 80       	ldd	r11, Z+1	; 0x01
    18b6:	36 fe       	sbrs	r3, 6
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <vfprintf+0x146>
    18ba:	69 2d       	mov	r22, r9
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <vfprintf+0x14a>
    18c0:	6f ef       	ldi	r22, 0xFF	; 255
    18c2:	7f ef       	ldi	r23, 0xFF	; 255
    18c4:	c5 01       	movw	r24, r10
    18c6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <strnlen>
    18ca:	4c 01       	movw	r8, r24
    18cc:	82 01       	movw	r16, r4
    18ce:	f3 2d       	mov	r31, r3
    18d0:	ff 77       	andi	r31, 0x7F	; 127
    18d2:	3f 2e       	mov	r3, r31
    18d4:	16 c0       	rjmp	.+44     	; 0x1902 <vfprintf+0x188>
    18d6:	28 01       	movw	r4, r16
    18d8:	22 e0       	ldi	r18, 0x02	; 2
    18da:	42 0e       	add	r4, r18
    18dc:	51 1c       	adc	r5, r1
    18de:	f8 01       	movw	r30, r16
    18e0:	a0 80       	ld	r10, Z
    18e2:	b1 80       	ldd	r11, Z+1	; 0x01
    18e4:	36 fe       	sbrs	r3, 6
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <vfprintf+0x174>
    18e8:	69 2d       	mov	r22, r9
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <vfprintf+0x178>
    18ee:	6f ef       	ldi	r22, 0xFF	; 255
    18f0:	7f ef       	ldi	r23, 0xFF	; 255
    18f2:	c5 01       	movw	r24, r10
    18f4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <strnlen_P>
    18f8:	4c 01       	movw	r8, r24
    18fa:	f3 2d       	mov	r31, r3
    18fc:	f0 68       	ori	r31, 0x80	; 128
    18fe:	3f 2e       	mov	r3, r31
    1900:	82 01       	movw	r16, r4
    1902:	33 fc       	sbrc	r3, 3
    1904:	1b c0       	rjmp	.+54     	; 0x193c <vfprintf+0x1c2>
    1906:	82 2d       	mov	r24, r2
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	88 16       	cp	r8, r24
    190c:	99 06       	cpc	r9, r25
    190e:	b0 f4       	brcc	.+44     	; 0x193c <vfprintf+0x1c2>
    1910:	b6 01       	movw	r22, r12
    1912:	80 e2       	ldi	r24, 0x20	; 32
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    191a:	2a 94       	dec	r2
    191c:	f4 cf       	rjmp	.-24     	; 0x1906 <vfprintf+0x18c>
    191e:	f5 01       	movw	r30, r10
    1920:	37 fc       	sbrc	r3, 7
    1922:	85 91       	lpm	r24, Z+
    1924:	37 fe       	sbrs	r3, 7
    1926:	81 91       	ld	r24, Z+
    1928:	5f 01       	movw	r10, r30
    192a:	b6 01       	movw	r22, r12
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    1932:	21 10       	cpse	r2, r1
    1934:	2a 94       	dec	r2
    1936:	21 e0       	ldi	r18, 0x01	; 1
    1938:	82 1a       	sub	r8, r18
    193a:	91 08       	sbc	r9, r1
    193c:	81 14       	cp	r8, r1
    193e:	91 04       	cpc	r9, r1
    1940:	71 f7       	brne	.-36     	; 0x191e <vfprintf+0x1a4>
    1942:	e8 c0       	rjmp	.+464    	; 0x1b14 <vfprintf+0x39a>
    1944:	84 36       	cpi	r24, 0x64	; 100
    1946:	11 f0       	breq	.+4      	; 0x194c <vfprintf+0x1d2>
    1948:	89 36       	cpi	r24, 0x69	; 105
    194a:	41 f5       	brne	.+80     	; 0x199c <vfprintf+0x222>
    194c:	f8 01       	movw	r30, r16
    194e:	37 fe       	sbrs	r3, 7
    1950:	07 c0       	rjmp	.+14     	; 0x1960 <vfprintf+0x1e6>
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	0c 5f       	subi	r16, 0xFC	; 252
    195c:	1f 4f       	sbci	r17, 0xFF	; 255
    195e:	08 c0       	rjmp	.+16     	; 0x1970 <vfprintf+0x1f6>
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	07 2e       	mov	r0, r23
    1966:	00 0c       	add	r0, r0
    1968:	88 0b       	sbc	r24, r24
    196a:	99 0b       	sbc	r25, r25
    196c:	0e 5f       	subi	r16, 0xFE	; 254
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	f3 2d       	mov	r31, r3
    1972:	ff 76       	andi	r31, 0x6F	; 111
    1974:	3f 2e       	mov	r3, r31
    1976:	97 ff       	sbrs	r25, 7
    1978:	09 c0       	rjmp	.+18     	; 0x198c <vfprintf+0x212>
    197a:	90 95       	com	r25
    197c:	80 95       	com	r24
    197e:	70 95       	com	r23
    1980:	61 95       	neg	r22
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	8f 4f       	sbci	r24, 0xFF	; 255
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	f0 68       	ori	r31, 0x80	; 128
    198a:	3f 2e       	mov	r3, r31
    198c:	2a e0       	ldi	r18, 0x0A	; 10
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	a3 01       	movw	r20, r6
    1992:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__ultoa_invert>
    1996:	88 2e       	mov	r8, r24
    1998:	86 18       	sub	r8, r6
    199a:	45 c0       	rjmp	.+138    	; 0x1a26 <vfprintf+0x2ac>
    199c:	85 37       	cpi	r24, 0x75	; 117
    199e:	31 f4       	brne	.+12     	; 0x19ac <vfprintf+0x232>
    19a0:	23 2d       	mov	r18, r3
    19a2:	2f 7e       	andi	r18, 0xEF	; 239
    19a4:	b2 2e       	mov	r11, r18
    19a6:	2a e0       	ldi	r18, 0x0A	; 10
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	25 c0       	rjmp	.+74     	; 0x19f6 <vfprintf+0x27c>
    19ac:	93 2d       	mov	r25, r3
    19ae:	99 7f       	andi	r25, 0xF9	; 249
    19b0:	b9 2e       	mov	r11, r25
    19b2:	8f 36       	cpi	r24, 0x6F	; 111
    19b4:	c1 f0       	breq	.+48     	; 0x19e6 <vfprintf+0x26c>
    19b6:	18 f4       	brcc	.+6      	; 0x19be <vfprintf+0x244>
    19b8:	88 35       	cpi	r24, 0x58	; 88
    19ba:	79 f0       	breq	.+30     	; 0x19da <vfprintf+0x260>
    19bc:	b5 c0       	rjmp	.+362    	; 0x1b28 <vfprintf+0x3ae>
    19be:	80 37       	cpi	r24, 0x70	; 112
    19c0:	19 f0       	breq	.+6      	; 0x19c8 <vfprintf+0x24e>
    19c2:	88 37       	cpi	r24, 0x78	; 120
    19c4:	21 f0       	breq	.+8      	; 0x19ce <vfprintf+0x254>
    19c6:	b0 c0       	rjmp	.+352    	; 0x1b28 <vfprintf+0x3ae>
    19c8:	e9 2f       	mov	r30, r25
    19ca:	e0 61       	ori	r30, 0x10	; 16
    19cc:	be 2e       	mov	r11, r30
    19ce:	b4 fe       	sbrs	r11, 4
    19d0:	0d c0       	rjmp	.+26     	; 0x19ec <vfprintf+0x272>
    19d2:	fb 2d       	mov	r31, r11
    19d4:	f4 60       	ori	r31, 0x04	; 4
    19d6:	bf 2e       	mov	r11, r31
    19d8:	09 c0       	rjmp	.+18     	; 0x19ec <vfprintf+0x272>
    19da:	34 fe       	sbrs	r3, 4
    19dc:	0a c0       	rjmp	.+20     	; 0x19f2 <vfprintf+0x278>
    19de:	29 2f       	mov	r18, r25
    19e0:	26 60       	ori	r18, 0x06	; 6
    19e2:	b2 2e       	mov	r11, r18
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <vfprintf+0x278>
    19e6:	28 e0       	ldi	r18, 0x08	; 8
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <vfprintf+0x27c>
    19ec:	20 e1       	ldi	r18, 0x10	; 16
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <vfprintf+0x27c>
    19f2:	20 e1       	ldi	r18, 0x10	; 16
    19f4:	32 e0       	ldi	r19, 0x02	; 2
    19f6:	f8 01       	movw	r30, r16
    19f8:	b7 fe       	sbrs	r11, 7
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <vfprintf+0x290>
    19fc:	60 81       	ld	r22, Z
    19fe:	71 81       	ldd	r23, Z+1	; 0x01
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	0c 5f       	subi	r16, 0xFC	; 252
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	06 c0       	rjmp	.+12     	; 0x1a16 <vfprintf+0x29c>
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 5f       	subi	r16, 0xFE	; 254
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	a3 01       	movw	r20, r6
    1a18:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__ultoa_invert>
    1a1c:	88 2e       	mov	r8, r24
    1a1e:	86 18       	sub	r8, r6
    1a20:	fb 2d       	mov	r31, r11
    1a22:	ff 77       	andi	r31, 0x7F	; 127
    1a24:	3f 2e       	mov	r3, r31
    1a26:	36 fe       	sbrs	r3, 6
    1a28:	0d c0       	rjmp	.+26     	; 0x1a44 <vfprintf+0x2ca>
    1a2a:	23 2d       	mov	r18, r3
    1a2c:	2e 7f       	andi	r18, 0xFE	; 254
    1a2e:	a2 2e       	mov	r10, r18
    1a30:	89 14       	cp	r8, r9
    1a32:	58 f4       	brcc	.+22     	; 0x1a4a <vfprintf+0x2d0>
    1a34:	34 fe       	sbrs	r3, 4
    1a36:	0b c0       	rjmp	.+22     	; 0x1a4e <vfprintf+0x2d4>
    1a38:	32 fc       	sbrc	r3, 2
    1a3a:	09 c0       	rjmp	.+18     	; 0x1a4e <vfprintf+0x2d4>
    1a3c:	83 2d       	mov	r24, r3
    1a3e:	8e 7e       	andi	r24, 0xEE	; 238
    1a40:	a8 2e       	mov	r10, r24
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <vfprintf+0x2d4>
    1a44:	b8 2c       	mov	r11, r8
    1a46:	a3 2c       	mov	r10, r3
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <vfprintf+0x2d6>
    1a4a:	b8 2c       	mov	r11, r8
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <vfprintf+0x2d6>
    1a4e:	b9 2c       	mov	r11, r9
    1a50:	a4 fe       	sbrs	r10, 4
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <vfprintf+0x2f8>
    1a54:	fe 01       	movw	r30, r28
    1a56:	e8 0d       	add	r30, r8
    1a58:	f1 1d       	adc	r31, r1
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 33       	cpi	r24, 0x30	; 48
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <vfprintf+0x2ee>
    1a60:	9a 2d       	mov	r25, r10
    1a62:	99 7e       	andi	r25, 0xE9	; 233
    1a64:	a9 2e       	mov	r10, r25
    1a66:	09 c0       	rjmp	.+18     	; 0x1a7a <vfprintf+0x300>
    1a68:	a2 fe       	sbrs	r10, 2
    1a6a:	06 c0       	rjmp	.+12     	; 0x1a78 <vfprintf+0x2fe>
    1a6c:	b3 94       	inc	r11
    1a6e:	b3 94       	inc	r11
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <vfprintf+0x300>
    1a72:	8a 2d       	mov	r24, r10
    1a74:	86 78       	andi	r24, 0x86	; 134
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <vfprintf+0x300>
    1a78:	b3 94       	inc	r11
    1a7a:	a3 fc       	sbrc	r10, 3
    1a7c:	11 c0       	rjmp	.+34     	; 0x1aa0 <vfprintf+0x326>
    1a7e:	a0 fe       	sbrs	r10, 0
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <vfprintf+0x314>
    1a82:	b2 14       	cp	r11, r2
    1a84:	88 f4       	brcc	.+34     	; 0x1aa8 <vfprintf+0x32e>
    1a86:	28 0c       	add	r2, r8
    1a88:	92 2c       	mov	r9, r2
    1a8a:	9b 18       	sub	r9, r11
    1a8c:	0e c0       	rjmp	.+28     	; 0x1aaa <vfprintf+0x330>
    1a8e:	b2 14       	cp	r11, r2
    1a90:	60 f4       	brcc	.+24     	; 0x1aaa <vfprintf+0x330>
    1a92:	b6 01       	movw	r22, r12
    1a94:	80 e2       	ldi	r24, 0x20	; 32
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    1a9c:	b3 94       	inc	r11
    1a9e:	f7 cf       	rjmp	.-18     	; 0x1a8e <vfprintf+0x314>
    1aa0:	b2 14       	cp	r11, r2
    1aa2:	18 f4       	brcc	.+6      	; 0x1aaa <vfprintf+0x330>
    1aa4:	2b 18       	sub	r2, r11
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <vfprintf+0x332>
    1aa8:	98 2c       	mov	r9, r8
    1aaa:	21 2c       	mov	r2, r1
    1aac:	a4 fe       	sbrs	r10, 4
    1aae:	10 c0       	rjmp	.+32     	; 0x1ad0 <vfprintf+0x356>
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	80 e3       	ldi	r24, 0x30	; 48
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    1aba:	a2 fe       	sbrs	r10, 2
    1abc:	17 c0       	rjmp	.+46     	; 0x1aec <vfprintf+0x372>
    1abe:	a1 fc       	sbrc	r10, 1
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <vfprintf+0x34e>
    1ac2:	88 e7       	ldi	r24, 0x78	; 120
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <vfprintf+0x352>
    1ac8:	88 e5       	ldi	r24, 0x58	; 88
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	b6 01       	movw	r22, r12
    1ace:	0c c0       	rjmp	.+24     	; 0x1ae8 <vfprintf+0x36e>
    1ad0:	8a 2d       	mov	r24, r10
    1ad2:	86 78       	andi	r24, 0x86	; 134
    1ad4:	59 f0       	breq	.+22     	; 0x1aec <vfprintf+0x372>
    1ad6:	a1 fe       	sbrs	r10, 1
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <vfprintf+0x364>
    1ada:	8b e2       	ldi	r24, 0x2B	; 43
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <vfprintf+0x366>
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	a7 fc       	sbrc	r10, 7
    1ae2:	8d e2       	ldi	r24, 0x2D	; 45
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    1aec:	89 14       	cp	r8, r9
    1aee:	38 f4       	brcc	.+14     	; 0x1afe <vfprintf+0x384>
    1af0:	b6 01       	movw	r22, r12
    1af2:	80 e3       	ldi	r24, 0x30	; 48
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    1afa:	9a 94       	dec	r9
    1afc:	f7 cf       	rjmp	.-18     	; 0x1aec <vfprintf+0x372>
    1afe:	8a 94       	dec	r8
    1b00:	f3 01       	movw	r30, r6
    1b02:	e8 0d       	add	r30, r8
    1b04:	f1 1d       	adc	r31, r1
    1b06:	80 81       	ld	r24, Z
    1b08:	b6 01       	movw	r22, r12
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    1b10:	81 10       	cpse	r8, r1
    1b12:	f5 cf       	rjmp	.-22     	; 0x1afe <vfprintf+0x384>
    1b14:	22 20       	and	r2, r2
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <vfprintf+0x3a0>
    1b18:	42 ce       	rjmp	.-892    	; 0x179e <vfprintf+0x24>
    1b1a:	b6 01       	movw	r22, r12
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <fputc>
    1b24:	2a 94       	dec	r2
    1b26:	f6 cf       	rjmp	.-20     	; 0x1b14 <vfprintf+0x39a>
    1b28:	f6 01       	movw	r30, r12
    1b2a:	86 81       	ldd	r24, Z+6	; 0x06
    1b2c:	97 81       	ldd	r25, Z+7	; 0x07
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <vfprintf+0x3ba>
    1b30:	8f ef       	ldi	r24, 0xFF	; 255
    1b32:	9f ef       	ldi	r25, 0xFF	; 255
    1b34:	2b 96       	adiw	r28, 0x0b	; 11
    1b36:	e2 e1       	ldi	r30, 0x12	; 18
    1b38:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__epilogue_restores__>

00001b3c <calloc>:
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	86 9f       	mul	r24, r22
    1b46:	80 01       	movw	r16, r0
    1b48:	87 9f       	mul	r24, r23
    1b4a:	10 0d       	add	r17, r0
    1b4c:	96 9f       	mul	r25, r22
    1b4e:	10 0d       	add	r17, r0
    1b50:	11 24       	eor	r1, r1
    1b52:	c8 01       	movw	r24, r16
    1b54:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <malloc>
    1b58:	ec 01       	movw	r28, r24
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <calloc+0x2c>
    1b5e:	a8 01       	movw	r20, r16
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <memset>
    1b68:	ce 01       	movw	r24, r28
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	08 95       	ret

00001b74 <malloc>:
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	82 30       	cpi	r24, 0x02	; 2
    1b7e:	91 05       	cpc	r25, r1
    1b80:	10 f4       	brcc	.+4      	; 0x1b86 <malloc+0x12>
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <__flp>
    1b8a:	f0 91 e0 03 	lds	r31, 0x03E0	; 0x8003e0 <__flp+0x1>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	a0 e0       	ldi	r26, 0x00	; 0
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	30 97       	sbiw	r30, 0x00	; 0
    1b98:	19 f1       	breq	.+70     	; 0x1be0 <malloc+0x6c>
    1b9a:	40 81       	ld	r20, Z
    1b9c:	51 81       	ldd	r21, Z+1	; 0x01
    1b9e:	02 81       	ldd	r16, Z+2	; 0x02
    1ba0:	13 81       	ldd	r17, Z+3	; 0x03
    1ba2:	48 17       	cp	r20, r24
    1ba4:	59 07       	cpc	r21, r25
    1ba6:	c8 f0       	brcs	.+50     	; 0x1bda <malloc+0x66>
    1ba8:	84 17       	cp	r24, r20
    1baa:	95 07       	cpc	r25, r21
    1bac:	69 f4       	brne	.+26     	; 0x1bc8 <malloc+0x54>
    1bae:	10 97       	sbiw	r26, 0x00	; 0
    1bb0:	31 f0       	breq	.+12     	; 0x1bbe <malloc+0x4a>
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	0c 93       	st	X, r16
    1bb6:	12 97       	sbiw	r26, 0x02	; 2
    1bb8:	13 96       	adiw	r26, 0x03	; 3
    1bba:	1c 93       	st	X, r17
    1bbc:	27 c0       	rjmp	.+78     	; 0x1c0c <malloc+0x98>
    1bbe:	00 93 df 03 	sts	0x03DF, r16	; 0x8003df <__flp>
    1bc2:	10 93 e0 03 	sts	0x03E0, r17	; 0x8003e0 <__flp+0x1>
    1bc6:	22 c0       	rjmp	.+68     	; 0x1c0c <malloc+0x98>
    1bc8:	21 15       	cp	r18, r1
    1bca:	31 05       	cpc	r19, r1
    1bcc:	19 f0       	breq	.+6      	; 0x1bd4 <malloc+0x60>
    1bce:	42 17       	cp	r20, r18
    1bd0:	53 07       	cpc	r21, r19
    1bd2:	18 f4       	brcc	.+6      	; 0x1bda <malloc+0x66>
    1bd4:	9a 01       	movw	r18, r20
    1bd6:	bd 01       	movw	r22, r26
    1bd8:	ef 01       	movw	r28, r30
    1bda:	df 01       	movw	r26, r30
    1bdc:	f8 01       	movw	r30, r16
    1bde:	db cf       	rjmp	.-74     	; 0x1b96 <malloc+0x22>
    1be0:	21 15       	cp	r18, r1
    1be2:	31 05       	cpc	r19, r1
    1be4:	f9 f0       	breq	.+62     	; 0x1c24 <malloc+0xb0>
    1be6:	28 1b       	sub	r18, r24
    1be8:	39 0b       	sbc	r19, r25
    1bea:	24 30       	cpi	r18, 0x04	; 4
    1bec:	31 05       	cpc	r19, r1
    1bee:	80 f4       	brcc	.+32     	; 0x1c10 <malloc+0x9c>
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf4:	61 15       	cp	r22, r1
    1bf6:	71 05       	cpc	r23, r1
    1bf8:	21 f0       	breq	.+8      	; 0x1c02 <malloc+0x8e>
    1bfa:	fb 01       	movw	r30, r22
    1bfc:	93 83       	std	Z+3, r25	; 0x03
    1bfe:	82 83       	std	Z+2, r24	; 0x02
    1c00:	04 c0       	rjmp	.+8      	; 0x1c0a <malloc+0x96>
    1c02:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <__flp+0x1>
    1c06:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <__flp>
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	32 96       	adiw	r30, 0x02	; 2
    1c0e:	44 c0       	rjmp	.+136    	; 0x1c98 <malloc+0x124>
    1c10:	fe 01       	movw	r30, r28
    1c12:	e2 0f       	add	r30, r18
    1c14:	f3 1f       	adc	r31, r19
    1c16:	81 93       	st	Z+, r24
    1c18:	91 93       	st	Z+, r25
    1c1a:	22 50       	subi	r18, 0x02	; 2
    1c1c:	31 09       	sbc	r19, r1
    1c1e:	39 83       	std	Y+1, r19	; 0x01
    1c20:	28 83       	st	Y, r18
    1c22:	3a c0       	rjmp	.+116    	; 0x1c98 <malloc+0x124>
    1c24:	20 91 dd 03 	lds	r18, 0x03DD	; 0x8003dd <__brkval>
    1c28:	30 91 de 03 	lds	r19, 0x03DE	; 0x8003de <__brkval+0x1>
    1c2c:	23 2b       	or	r18, r19
    1c2e:	41 f4       	brne	.+16     	; 0x1c40 <malloc+0xcc>
    1c30:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1c34:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1c38:	30 93 de 03 	sts	0x03DE, r19	; 0x8003de <__brkval+0x1>
    1c3c:	20 93 dd 03 	sts	0x03DD, r18	; 0x8003dd <__brkval>
    1c40:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1c44:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1c48:	21 15       	cp	r18, r1
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	41 f4       	brne	.+16     	; 0x1c5e <malloc+0xea>
    1c4e:	2d b7       	in	r18, 0x3d	; 61
    1c50:	3e b7       	in	r19, 0x3e	; 62
    1c52:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1c56:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1c5a:	24 1b       	sub	r18, r20
    1c5c:	35 0b       	sbc	r19, r21
    1c5e:	e0 91 dd 03 	lds	r30, 0x03DD	; 0x8003dd <__brkval>
    1c62:	f0 91 de 03 	lds	r31, 0x03DE	; 0x8003de <__brkval+0x1>
    1c66:	e2 17       	cp	r30, r18
    1c68:	f3 07       	cpc	r31, r19
    1c6a:	a0 f4       	brcc	.+40     	; 0x1c94 <malloc+0x120>
    1c6c:	2e 1b       	sub	r18, r30
    1c6e:	3f 0b       	sbc	r19, r31
    1c70:	28 17       	cp	r18, r24
    1c72:	39 07       	cpc	r19, r25
    1c74:	78 f0       	brcs	.+30     	; 0x1c94 <malloc+0x120>
    1c76:	ac 01       	movw	r20, r24
    1c78:	4e 5f       	subi	r20, 0xFE	; 254
    1c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7c:	24 17       	cp	r18, r20
    1c7e:	35 07       	cpc	r19, r21
    1c80:	48 f0       	brcs	.+18     	; 0x1c94 <malloc+0x120>
    1c82:	4e 0f       	add	r20, r30
    1c84:	5f 1f       	adc	r21, r31
    1c86:	50 93 de 03 	sts	0x03DE, r21	; 0x8003de <__brkval+0x1>
    1c8a:	40 93 dd 03 	sts	0x03DD, r20	; 0x8003dd <__brkval>
    1c8e:	81 93       	st	Z+, r24
    1c90:	91 93       	st	Z+, r25
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <malloc+0x124>
    1c94:	e0 e0       	ldi	r30, 0x00	; 0
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	cf 01       	movw	r24, r30
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	08 95       	ret

00001ca4 <free>:
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	09 f4       	brne	.+2      	; 0x1cae <free+0xa>
    1cac:	81 c0       	rjmp	.+258    	; 0x1db0 <free+0x10c>
    1cae:	fc 01       	movw	r30, r24
    1cb0:	32 97       	sbiw	r30, 0x02	; 2
    1cb2:	13 82       	std	Z+3, r1	; 0x03
    1cb4:	12 82       	std	Z+2, r1	; 0x02
    1cb6:	a0 91 df 03 	lds	r26, 0x03DF	; 0x8003df <__flp>
    1cba:	b0 91 e0 03 	lds	r27, 0x03E0	; 0x8003e0 <__flp+0x1>
    1cbe:	10 97       	sbiw	r26, 0x00	; 0
    1cc0:	81 f4       	brne	.+32     	; 0x1ce2 <free+0x3e>
    1cc2:	20 81       	ld	r18, Z
    1cc4:	31 81       	ldd	r19, Z+1	; 0x01
    1cc6:	82 0f       	add	r24, r18
    1cc8:	93 1f       	adc	r25, r19
    1cca:	20 91 dd 03 	lds	r18, 0x03DD	; 0x8003dd <__brkval>
    1cce:	30 91 de 03 	lds	r19, 0x03DE	; 0x8003de <__brkval+0x1>
    1cd2:	28 17       	cp	r18, r24
    1cd4:	39 07       	cpc	r19, r25
    1cd6:	51 f5       	brne	.+84     	; 0x1d2c <free+0x88>
    1cd8:	f0 93 de 03 	sts	0x03DE, r31	; 0x8003de <__brkval+0x1>
    1cdc:	e0 93 dd 03 	sts	0x03DD, r30	; 0x8003dd <__brkval>
    1ce0:	67 c0       	rjmp	.+206    	; 0x1db0 <free+0x10c>
    1ce2:	ed 01       	movw	r28, r26
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	ce 17       	cp	r28, r30
    1cea:	df 07       	cpc	r29, r31
    1cec:	40 f4       	brcc	.+16     	; 0x1cfe <free+0x5a>
    1cee:	4a 81       	ldd	r20, Y+2	; 0x02
    1cf0:	5b 81       	ldd	r21, Y+3	; 0x03
    1cf2:	9e 01       	movw	r18, r28
    1cf4:	41 15       	cp	r20, r1
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	f1 f0       	breq	.+60     	; 0x1d36 <free+0x92>
    1cfa:	ea 01       	movw	r28, r20
    1cfc:	f5 cf       	rjmp	.-22     	; 0x1ce8 <free+0x44>
    1cfe:	d3 83       	std	Z+3, r29	; 0x03
    1d00:	c2 83       	std	Z+2, r28	; 0x02
    1d02:	40 81       	ld	r20, Z
    1d04:	51 81       	ldd	r21, Z+1	; 0x01
    1d06:	84 0f       	add	r24, r20
    1d08:	95 1f       	adc	r25, r21
    1d0a:	c8 17       	cp	r28, r24
    1d0c:	d9 07       	cpc	r29, r25
    1d0e:	59 f4       	brne	.+22     	; 0x1d26 <free+0x82>
    1d10:	88 81       	ld	r24, Y
    1d12:	99 81       	ldd	r25, Y+1	; 0x01
    1d14:	84 0f       	add	r24, r20
    1d16:	95 1f       	adc	r25, r21
    1d18:	02 96       	adiw	r24, 0x02	; 2
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	9b 81       	ldd	r25, Y+3	; 0x03
    1d22:	93 83       	std	Z+3, r25	; 0x03
    1d24:	82 83       	std	Z+2, r24	; 0x02
    1d26:	21 15       	cp	r18, r1
    1d28:	31 05       	cpc	r19, r1
    1d2a:	29 f4       	brne	.+10     	; 0x1d36 <free+0x92>
    1d2c:	f0 93 e0 03 	sts	0x03E0, r31	; 0x8003e0 <__flp+0x1>
    1d30:	e0 93 df 03 	sts	0x03DF, r30	; 0x8003df <__flp>
    1d34:	3d c0       	rjmp	.+122    	; 0x1db0 <free+0x10c>
    1d36:	e9 01       	movw	r28, r18
    1d38:	fb 83       	std	Y+3, r31	; 0x03
    1d3a:	ea 83       	std	Y+2, r30	; 0x02
    1d3c:	49 91       	ld	r20, Y+
    1d3e:	59 91       	ld	r21, Y+
    1d40:	c4 0f       	add	r28, r20
    1d42:	d5 1f       	adc	r29, r21
    1d44:	ec 17       	cp	r30, r28
    1d46:	fd 07       	cpc	r31, r29
    1d48:	61 f4       	brne	.+24     	; 0x1d62 <free+0xbe>
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	84 0f       	add	r24, r20
    1d50:	95 1f       	adc	r25, r21
    1d52:	02 96       	adiw	r24, 0x02	; 2
    1d54:	e9 01       	movw	r28, r18
    1d56:	99 83       	std	Y+1, r25	; 0x01
    1d58:	88 83       	st	Y, r24
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	9b 83       	std	Y+3, r25	; 0x03
    1d60:	8a 83       	std	Y+2, r24	; 0x02
    1d62:	e0 e0       	ldi	r30, 0x00	; 0
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	12 96       	adiw	r26, 0x02	; 2
    1d68:	8d 91       	ld	r24, X+
    1d6a:	9c 91       	ld	r25, X
    1d6c:	13 97       	sbiw	r26, 0x03	; 3
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <free+0xd4>
    1d72:	fd 01       	movw	r30, r26
    1d74:	dc 01       	movw	r26, r24
    1d76:	f7 cf       	rjmp	.-18     	; 0x1d66 <free+0xc2>
    1d78:	8d 91       	ld	r24, X+
    1d7a:	9c 91       	ld	r25, X
    1d7c:	11 97       	sbiw	r26, 0x01	; 1
    1d7e:	9d 01       	movw	r18, r26
    1d80:	2e 5f       	subi	r18, 0xFE	; 254
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	82 0f       	add	r24, r18
    1d86:	93 1f       	adc	r25, r19
    1d88:	20 91 dd 03 	lds	r18, 0x03DD	; 0x8003dd <__brkval>
    1d8c:	30 91 de 03 	lds	r19, 0x03DE	; 0x8003de <__brkval+0x1>
    1d90:	28 17       	cp	r18, r24
    1d92:	39 07       	cpc	r19, r25
    1d94:	69 f4       	brne	.+26     	; 0x1db0 <free+0x10c>
    1d96:	30 97       	sbiw	r30, 0x00	; 0
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <free+0x100>
    1d9a:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <__flp+0x1>
    1d9e:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <__flp>
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <free+0x104>
    1da4:	13 82       	std	Z+3, r1	; 0x03
    1da6:	12 82       	std	Z+2, r1	; 0x02
    1da8:	b0 93 de 03 	sts	0x03DE, r27	; 0x8003de <__brkval+0x1>
    1dac:	a0 93 dd 03 	sts	0x03DD, r26	; 0x8003dd <__brkval>
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <strnlen_P>:
    1db6:	fc 01       	movw	r30, r24
    1db8:	05 90       	lpm	r0, Z+
    1dba:	61 50       	subi	r22, 0x01	; 1
    1dbc:	70 40       	sbci	r23, 0x00	; 0
    1dbe:	01 10       	cpse	r0, r1
    1dc0:	d8 f7       	brcc	.-10     	; 0x1db8 <strnlen_P+0x2>
    1dc2:	80 95       	com	r24
    1dc4:	90 95       	com	r25
    1dc6:	8e 0f       	add	r24, r30
    1dc8:	9f 1f       	adc	r25, r31
    1dca:	08 95       	ret

00001dcc <memset>:
    1dcc:	dc 01       	movw	r26, r24
    1dce:	01 c0       	rjmp	.+2      	; 0x1dd2 <memset+0x6>
    1dd0:	6d 93       	st	X+, r22
    1dd2:	41 50       	subi	r20, 0x01	; 1
    1dd4:	50 40       	sbci	r21, 0x00	; 0
    1dd6:	e0 f7       	brcc	.-8      	; 0x1dd0 <memset+0x4>
    1dd8:	08 95       	ret

00001dda <strnlen>:
    1dda:	fc 01       	movw	r30, r24
    1ddc:	61 50       	subi	r22, 0x01	; 1
    1dde:	70 40       	sbci	r23, 0x00	; 0
    1de0:	01 90       	ld	r0, Z+
    1de2:	01 10       	cpse	r0, r1
    1de4:	d8 f7       	brcc	.-10     	; 0x1ddc <strnlen+0x2>
    1de6:	80 95       	com	r24
    1de8:	90 95       	com	r25
    1dea:	8e 0f       	add	r24, r30
    1dec:	9f 1f       	adc	r25, r31
    1dee:	08 95       	ret

00001df0 <fputc>:
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	fb 01       	movw	r30, r22
    1dfa:	23 81       	ldd	r18, Z+3	; 0x03
    1dfc:	21 fd       	sbrc	r18, 1
    1dfe:	03 c0       	rjmp	.+6      	; 0x1e06 <fputc+0x16>
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	9f ef       	ldi	r25, 0xFF	; 255
    1e04:	2c c0       	rjmp	.+88     	; 0x1e5e <fputc+0x6e>
    1e06:	22 ff       	sbrs	r18, 2
    1e08:	16 c0       	rjmp	.+44     	; 0x1e36 <fputc+0x46>
    1e0a:	46 81       	ldd	r20, Z+6	; 0x06
    1e0c:	57 81       	ldd	r21, Z+7	; 0x07
    1e0e:	24 81       	ldd	r18, Z+4	; 0x04
    1e10:	35 81       	ldd	r19, Z+5	; 0x05
    1e12:	42 17       	cp	r20, r18
    1e14:	53 07       	cpc	r21, r19
    1e16:	44 f4       	brge	.+16     	; 0x1e28 <fputc+0x38>
    1e18:	a0 81       	ld	r26, Z
    1e1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1e1c:	9d 01       	movw	r18, r26
    1e1e:	2f 5f       	subi	r18, 0xFF	; 255
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	31 83       	std	Z+1, r19	; 0x01
    1e24:	20 83       	st	Z, r18
    1e26:	8c 93       	st	X, r24
    1e28:	26 81       	ldd	r18, Z+6	; 0x06
    1e2a:	37 81       	ldd	r19, Z+7	; 0x07
    1e2c:	2f 5f       	subi	r18, 0xFF	; 255
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	37 83       	std	Z+7, r19	; 0x07
    1e32:	26 83       	std	Z+6, r18	; 0x06
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <fputc+0x6e>
    1e36:	8b 01       	movw	r16, r22
    1e38:	ec 01       	movw	r28, r24
    1e3a:	fb 01       	movw	r30, r22
    1e3c:	00 84       	ldd	r0, Z+8	; 0x08
    1e3e:	f1 85       	ldd	r31, Z+9	; 0x09
    1e40:	e0 2d       	mov	r30, r0
    1e42:	09 95       	icall
    1e44:	89 2b       	or	r24, r25
    1e46:	e1 f6       	brne	.-72     	; 0x1e00 <fputc+0x10>
    1e48:	d8 01       	movw	r26, r16
    1e4a:	16 96       	adiw	r26, 0x06	; 6
    1e4c:	8d 91       	ld	r24, X+
    1e4e:	9c 91       	ld	r25, X
    1e50:	17 97       	sbiw	r26, 0x07	; 7
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	17 96       	adiw	r26, 0x07	; 7
    1e56:	9c 93       	st	X, r25
    1e58:	8e 93       	st	-X, r24
    1e5a:	16 97       	sbiw	r26, 0x06	; 6
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	08 95       	ret

00001e68 <__ultoa_invert>:
    1e68:	fa 01       	movw	r30, r20
    1e6a:	aa 27       	eor	r26, r26
    1e6c:	28 30       	cpi	r18, 0x08	; 8
    1e6e:	51 f1       	breq	.+84     	; 0x1ec4 <__ultoa_invert+0x5c>
    1e70:	20 31       	cpi	r18, 0x10	; 16
    1e72:	81 f1       	breq	.+96     	; 0x1ed4 <__ultoa_invert+0x6c>
    1e74:	e8 94       	clt
    1e76:	6f 93       	push	r22
    1e78:	6e 7f       	andi	r22, 0xFE	; 254
    1e7a:	6e 5f       	subi	r22, 0xFE	; 254
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	af 4f       	sbci	r26, 0xFF	; 255
    1e84:	b1 e0       	ldi	r27, 0x01	; 1
    1e86:	3e d0       	rcall	.+124    	; 0x1f04 <__ultoa_invert+0x9c>
    1e88:	b4 e0       	ldi	r27, 0x04	; 4
    1e8a:	3c d0       	rcall	.+120    	; 0x1f04 <__ultoa_invert+0x9c>
    1e8c:	67 0f       	add	r22, r23
    1e8e:	78 1f       	adc	r23, r24
    1e90:	89 1f       	adc	r24, r25
    1e92:	9a 1f       	adc	r25, r26
    1e94:	a1 1d       	adc	r26, r1
    1e96:	68 0f       	add	r22, r24
    1e98:	79 1f       	adc	r23, r25
    1e9a:	8a 1f       	adc	r24, r26
    1e9c:	91 1d       	adc	r25, r1
    1e9e:	a1 1d       	adc	r26, r1
    1ea0:	6a 0f       	add	r22, r26
    1ea2:	71 1d       	adc	r23, r1
    1ea4:	81 1d       	adc	r24, r1
    1ea6:	91 1d       	adc	r25, r1
    1ea8:	a1 1d       	adc	r26, r1
    1eaa:	20 d0       	rcall	.+64     	; 0x1eec <__ultoa_invert+0x84>
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <__ultoa_invert+0x48>
    1eae:	68 94       	set
    1eb0:	3f 91       	pop	r19
    1eb2:	2a e0       	ldi	r18, 0x0A	; 10
    1eb4:	26 9f       	mul	r18, r22
    1eb6:	11 24       	eor	r1, r1
    1eb8:	30 19       	sub	r19, r0
    1eba:	30 5d       	subi	r19, 0xD0	; 208
    1ebc:	31 93       	st	Z+, r19
    1ebe:	de f6       	brtc	.-74     	; 0x1e76 <__ultoa_invert+0xe>
    1ec0:	cf 01       	movw	r24, r30
    1ec2:	08 95       	ret
    1ec4:	46 2f       	mov	r20, r22
    1ec6:	47 70       	andi	r20, 0x07	; 7
    1ec8:	40 5d       	subi	r20, 0xD0	; 208
    1eca:	41 93       	st	Z+, r20
    1ecc:	b3 e0       	ldi	r27, 0x03	; 3
    1ece:	0f d0       	rcall	.+30     	; 0x1eee <__ultoa_invert+0x86>
    1ed0:	c9 f7       	brne	.-14     	; 0x1ec4 <__ultoa_invert+0x5c>
    1ed2:	f6 cf       	rjmp	.-20     	; 0x1ec0 <__ultoa_invert+0x58>
    1ed4:	46 2f       	mov	r20, r22
    1ed6:	4f 70       	andi	r20, 0x0F	; 15
    1ed8:	40 5d       	subi	r20, 0xD0	; 208
    1eda:	4a 33       	cpi	r20, 0x3A	; 58
    1edc:	18 f0       	brcs	.+6      	; 0x1ee4 <__ultoa_invert+0x7c>
    1ede:	49 5d       	subi	r20, 0xD9	; 217
    1ee0:	31 fd       	sbrc	r19, 1
    1ee2:	40 52       	subi	r20, 0x20	; 32
    1ee4:	41 93       	st	Z+, r20
    1ee6:	02 d0       	rcall	.+4      	; 0x1eec <__ultoa_invert+0x84>
    1ee8:	a9 f7       	brne	.-22     	; 0x1ed4 <__ultoa_invert+0x6c>
    1eea:	ea cf       	rjmp	.-44     	; 0x1ec0 <__ultoa_invert+0x58>
    1eec:	b4 e0       	ldi	r27, 0x04	; 4
    1eee:	a6 95       	lsr	r26
    1ef0:	97 95       	ror	r25
    1ef2:	87 95       	ror	r24
    1ef4:	77 95       	ror	r23
    1ef6:	67 95       	ror	r22
    1ef8:	ba 95       	dec	r27
    1efa:	c9 f7       	brne	.-14     	; 0x1eee <__ultoa_invert+0x86>
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	61 05       	cpc	r22, r1
    1f00:	71 05       	cpc	r23, r1
    1f02:	08 95       	ret
    1f04:	9b 01       	movw	r18, r22
    1f06:	ac 01       	movw	r20, r24
    1f08:	0a 2e       	mov	r0, r26
    1f0a:	06 94       	lsr	r0
    1f0c:	57 95       	ror	r21
    1f0e:	47 95       	ror	r20
    1f10:	37 95       	ror	r19
    1f12:	27 95       	ror	r18
    1f14:	ba 95       	dec	r27
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__ultoa_invert+0xa2>
    1f18:	62 0f       	add	r22, r18
    1f1a:	73 1f       	adc	r23, r19
    1f1c:	84 1f       	adc	r24, r20
    1f1e:	95 1f       	adc	r25, r21
    1f20:	a0 1d       	adc	r26, r0
    1f22:	08 95       	ret

00001f24 <__prologue_saves__>:
    1f24:	2f 92       	push	r2
    1f26:	3f 92       	push	r3
    1f28:	4f 92       	push	r4
    1f2a:	5f 92       	push	r5
    1f2c:	6f 92       	push	r6
    1f2e:	7f 92       	push	r7
    1f30:	8f 92       	push	r8
    1f32:	9f 92       	push	r9
    1f34:	af 92       	push	r10
    1f36:	bf 92       	push	r11
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	ca 1b       	sub	r28, r26
    1f4e:	db 0b       	sbc	r29, r27
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	09 94       	ijmp

00001f5c <__epilogue_restores__>:
    1f5c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f5e:	39 88       	ldd	r3, Y+17	; 0x11
    1f60:	48 88       	ldd	r4, Y+16	; 0x10
    1f62:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f64:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f66:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f68:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f6e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f70:	c8 84       	ldd	r12, Y+8	; 0x08
    1f72:	df 80       	ldd	r13, Y+7	; 0x07
    1f74:	ee 80       	ldd	r14, Y+6	; 0x06
    1f76:	fd 80       	ldd	r15, Y+5	; 0x05
    1f78:	0c 81       	ldd	r16, Y+4	; 0x04
    1f7a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f80:	ce 0f       	add	r28, r30
    1f82:	d1 1d       	adc	r29, r1
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	ed 01       	movw	r28, r26
    1f90:	08 95       	ret

00001f92 <_exit>:
    1f92:	f8 94       	cli

00001f94 <__stop_program>:
    1f94:	ff cf       	rjmp	.-2      	; 0x1f94 <__stop_program>
