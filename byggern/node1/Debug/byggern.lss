
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019e  00800100  00001f72  00002006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080029e  0080029e  000021a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003697  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001790  00000000  00000000  00005bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000180e  00000000  00000000  00007383  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  00008b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a38  00000000  00000000  000092ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001532  00000000  00000000  00009ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000b216  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <addChild+0x22>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e2 e7       	ldi	r30, 0x72	; 114
     3aa:	ff e1       	ldi	r31, 0x1F	; 31
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	ae 39       	cpi	r26, 0x9E	; 158
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	ae e9       	ldi	r26, 0x9E	; 158
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a6 3c       	cpi	r26, 0xC6	; 198
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x113a>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x113a>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "pwm.h"
#include "music.h"
#include "CAN.h"
volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	//cli();
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end>
	
	
	//sei();
	
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:


int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
	setupInit();
     41a:	0e 94 62 07 	call	0xec4	; 0xec4 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     41e:	87 e5       	ldi	r24, 0x57	; 87
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	9a 87       	std	Y+10, r25	; 0x0a
     424:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     42a:	8d e0       	ldi	r24, 0x0D	; 13
     42c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     42e:	86 e1       	ldi	r24, 0x16	; 22
     430:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     432:	81 e2       	ldi	r24, 0x21	; 33
     434:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
	printf("---------------------------------------\n\r");
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	97 e0       	ldi	r25, 0x07	; 7
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x4e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x58>
     45e:	00 00       	nop
	_delay_ms(500);
	//CAN_transmit_message(&message);
	
	CAN_controller_setMode(MODE_NORMAL);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 19 04 	call	0x832	; 0x832 <CAN_controller_setMode>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
		
		if (flag) {
			printf("Message received");
     46e:	03 e4       	ldi	r16, 0x43	; 67
     470:	11 e0       	ldi	r17, 0x01	; 1
	//music_playLisaGikk();                 
	while (1) {
		//
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     472:	0e 94 a1 04 	call	0x942	; 0x942 <sleep_now>
		
		if (flag) {
     476:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end>
     47a:	88 23       	and	r24, r24
     47c:	a1 f0       	breq	.+40     	; 0x4a6 <main+0xa0>
			printf("Message received");
     47e:	1f 93       	push	r17
     480:	0f 93       	push	r16
     482:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
			flag=0;
     486:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
			CAN_receiveMessage(&received_message);
     48a:	8d ea       	ldi	r24, 0xAD	; 173
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	6c e2       	ldi	r22, 0x2C	; 44
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
			
		}
		
		joystick_sendPositionOverCAN();
     4a6:	0e 94 72 05 	call	0xae4	; 0xae4 <joystick_sendPositionOverCAN>
		slider_sendPositionOverCAN();
     4aa:	0e 94 8a 07 	call	0xf14	; 0xf14 <slider_sendPositionOverCAN>
	
	}
     4ae:	e1 cf       	rjmp	.-62     	; 0x472 <main+0x6c>

000004b0 <CAN_transmit_message>:
	
	
	
	
}
void CAN_transmit_message(CAN_message_t *message) {
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	8c 01       	movw	r16, r24
	printf("Transmitting message");
     4c0:	84 e5       	ldi	r24, 0x54	; 84
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     4cc:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <buffer_number.2114>
     4d0:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <buffer_number.2114+0x1>
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	63 e0       	ldi	r22, 0x03	; 3
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__divmodhi4>
     4de:	28 2f       	mov	r18, r24
     4e0:	39 2f       	mov	r19, r25
     4e2:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <buffer_number.2114>
     4e6:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <buffer_number.2114+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	21 30       	cpi	r18, 0x01	; 1
     4f0:	31 05       	cpc	r19, r1
     4f2:	81 f1       	breq	.+96     	; 0x554 <__stack+0x55>
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	31 05       	cpc	r19, r1
     4f8:	09 f4       	brne	.+2      	; 0x4fc <CAN_transmit_message+0x4c>
     4fa:	46 c0       	rjmp	.+140    	; 0x588 <__stack+0x89>
     4fc:	23 2b       	or	r18, r19
     4fe:	09 f0       	breq	.+2      	; 0x502 <__stack+0x3>
     500:	5c c0       	rjmp	.+184    	; 0x5ba <__stack+0xbb>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     502:	f8 01       	movw	r30, r16
     504:	40 85       	ldd	r20, Z+8	; 0x08
     506:	51 85       	ldd	r21, Z+9	; 0x09
     508:	42 95       	swap	r20
     50a:	44 0f       	add	r20, r20
     50c:	40 7e       	andi	r20, 0xE0	; 224
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	62 e3       	ldi	r22, 0x32	; 50
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 ee       	ldi	r24, 0xE0	; 224
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     51c:	f8 01       	movw	r30, r16
     51e:	60 85       	ldd	r22, Z+8	; 0x08
     520:	71 85       	ldd	r23, Z+9	; 0x09
     522:	76 95       	lsr	r23
     524:	67 95       	ror	r22
     526:	76 95       	lsr	r23
     528:	67 95       	ror	r22
     52a:	76 95       	lsr	r23
     52c:	67 95       	ror	r22
     52e:	81 e3       	ldi	r24, 0x31	; 49
     530:	0e 94 b2 03 	call	0x764	; 0x764 <CAN_controller_write>
				
				printf("Sending whole id: %i", message->ID );
     534:	f8 01       	movw	r30, r16
     536:	80 85       	ldd	r24, Z+8	; 0x08
     538:	91 85       	ldd	r25, Z+9	; 0x09
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	89 e6       	ldi	r24, 0x69	; 105
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	9f 93       	push	r25
     544:	8f 93       	push	r24
     546:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>


				break;
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	33 c0       	rjmp	.+102    	; 0x5ba <__stack+0xbb>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     554:	f8 01       	movw	r30, r16
     556:	40 85       	ldd	r20, Z+8	; 0x08
     558:	51 85       	ldd	r21, Z+9	; 0x09
     55a:	42 95       	swap	r20
     55c:	44 0f       	add	r20, r20
     55e:	40 7e       	andi	r20, 0xE0	; 224
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	62 e4       	ldi	r22, 0x42	; 66
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 ee       	ldi	r24, 0xE0	; 224
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     56e:	f8 01       	movw	r30, r16
     570:	60 85       	ldd	r22, Z+8	; 0x08
     572:	71 85       	ldd	r23, Z+9	; 0x09
     574:	76 95       	lsr	r23
     576:	67 95       	ror	r22
     578:	76 95       	lsr	r23
     57a:	67 95       	ror	r22
     57c:	76 95       	lsr	r23
     57e:	67 95       	ror	r22
     580:	81 e4       	ldi	r24, 0x41	; 65
     582:	0e 94 b2 03 	call	0x764	; 0x764 <CAN_controller_write>
				
				break;
     586:	19 c0       	rjmp	.+50     	; 0x5ba <__stack+0xbb>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     588:	f8 01       	movw	r30, r16
     58a:	40 85       	ldd	r20, Z+8	; 0x08
     58c:	51 85       	ldd	r21, Z+9	; 0x09
     58e:	42 95       	swap	r20
     590:	44 0f       	add	r20, r20
     592:	40 7e       	andi	r20, 0xE0	; 224
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	62 e5       	ldi	r22, 0x52	; 82
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	80 ee       	ldi	r24, 0xE0	; 224
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     5a2:	f8 01       	movw	r30, r16
     5a4:	60 85       	ldd	r22, Z+8	; 0x08
     5a6:	71 85       	ldd	r23, Z+9	; 0x09
     5a8:	76 95       	lsr	r23
     5aa:	67 95       	ror	r22
     5ac:	76 95       	lsr	r23
     5ae:	67 95       	ror	r22
     5b0:	76 95       	lsr	r23
     5b2:	67 95       	ror	r22
     5b4:	81 e5       	ldi	r24, 0x51	; 81
     5b6:	0e 94 b2 03 	call	0x764	; 0x764 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     5ba:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <buffer_number.2114>
     5be:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <buffer_number.2114+0x1>
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	91 05       	cpc	r25, r1
     5c6:	e9 f0       	breq	.+58     	; 0x602 <__stack+0x103>
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	91 05       	cpc	r25, r1
     5cc:	21 f1       	breq	.+72     	; 0x616 <__stack+0x117>
     5ce:	89 2b       	or	r24, r25
     5d0:	59 f5       	brne	.+86     	; 0x628 <__stack+0x129>
			case 0:
				printf("\n\rtransmitting data length: %i\n\r", message->data_length);
     5d2:	f8 01       	movw	r30, r16
     5d4:	82 85       	ldd	r24, Z+10	; 0x0a
     5d6:	1f 92       	push	r1
     5d8:	8f 93       	push	r24
     5da:	8e e7       	ldi	r24, 0x7E	; 126
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     5e6:	f8 01       	movw	r30, r16
     5e8:	42 85       	ldd	r20, Z+10	; 0x0a
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	65 e3       	ldi	r22, 0x35	; 53
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	8f e0       	ldi	r24, 0x0F	; 15
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
				break;
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	13 c0       	rjmp	.+38     	; 0x628 <__stack+0x129>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     602:	f8 01       	movw	r30, r16
     604:	42 85       	ldd	r20, Z+10	; 0x0a
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	65 e4       	ldi	r22, 0x45	; 69
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	8f e0       	ldi	r24, 0x0F	; 15
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
				break;
     614:	09 c0       	rjmp	.+18     	; 0x628 <__stack+0x129>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     616:	f8 01       	movw	r30, r16
     618:	42 85       	ldd	r20, Z+10	; 0x0a
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	65 e5       	ldi	r22, 0x55	; 85
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	8f e0       	ldi	r24, 0x0F	; 15
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     628:	f8 01       	movw	r30, r16
     62a:	82 85       	ldd	r24, Z+10	; 0x0a
     62c:	88 23       	and	r24, r24
     62e:	09 f4       	brne	.+2      	; 0x632 <__stack+0x133>
     630:	3f c0       	rjmp	.+126    	; 0x6b0 <__stack+0x1b1>
     632:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     634:	0f 2e       	mov	r0, r31
     636:	ff e9       	ldi	r31, 0x9F	; 159
     638:	cf 2e       	mov	r12, r31
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	df 2e       	mov	r13, r31
     63e:	f0 2d       	mov	r31, r0
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
		switch(buffer_number) {
     640:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <buffer_number.2114>
     644:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <buffer_number.2114+0x1>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	91 05       	cpc	r25, r1
     64c:	d9 f0       	breq	.+54     	; 0x684 <__stack+0x185>
     64e:	82 30       	cpi	r24, 0x02	; 2
     650:	91 05       	cpc	r25, r1
     652:	09 f1       	breq	.+66     	; 0x696 <__stack+0x197>
     654:	89 2b       	or	r24, r25
     656:	39 f5       	brne	.+78     	; 0x6a6 <__stack+0x1a7>
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     658:	78 01       	movw	r14, r16
     65a:	ec 0e       	add	r14, r28
     65c:	f1 1c       	adc	r15, r1
     65e:	f7 01       	movw	r30, r14
     660:	80 81       	ld	r24, Z
     662:	1f 92       	push	r1
     664:	8f 93       	push	r24
     666:	df 92       	push	r13
     668:	cf 92       	push	r12
     66a:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     66e:	f7 01       	movw	r30, r14
     670:	60 81       	ld	r22, Z
     672:	86 e3       	ldi	r24, 0x36	; 54
     674:	8c 0f       	add	r24, r28
     676:	0e 94 b2 03 	call	0x764	; 0x764 <CAN_controller_write>
				break;
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	11 c0       	rjmp	.+34     	; 0x6a6 <__stack+0x1a7>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     684:	f8 01       	movw	r30, r16
     686:	ec 0f       	add	r30, r28
     688:	f1 1d       	adc	r31, r1
     68a:	60 81       	ld	r22, Z
     68c:	86 e4       	ldi	r24, 0x46	; 70
     68e:	8c 0f       	add	r24, r28
     690:	0e 94 b2 03 	call	0x764	; 0x764 <CAN_controller_write>
				break;
     694:	08 c0       	rjmp	.+16     	; 0x6a6 <__stack+0x1a7>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     696:	f8 01       	movw	r30, r16
     698:	ec 0f       	add	r30, r28
     69a:	f1 1d       	adc	r31, r1
     69c:	60 81       	ld	r22, Z
     69e:	86 e5       	ldi	r24, 0x56	; 86
     6a0:	8c 0f       	add	r24, r28
     6a2:	0e 94 b2 03 	call	0x764	; 0x764 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     6a6:	cf 5f       	subi	r28, 0xFF	; 255
     6a8:	f8 01       	movw	r30, r16
     6aa:	82 85       	ldd	r24, Z+10	; 0x0a
     6ac:	8c 13       	cpse	r24, r28
     6ae:	c8 cf       	rjmp	.-112    	; 0x640 <__stack+0x141>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     6b0:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <buffer_number.2114>
     6b4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	08 95       	ret

000006c8 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     6d4:	82 e6       	ldi	r24, 0x62	; 98
     6d6:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_read>
     6da:	c8 2f       	mov	r28, r24
     6dc:	81 e6       	ldi	r24, 0x61	; 97
     6de:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_read>
     6e2:	c2 95       	swap	r28
     6e4:	c6 95       	lsr	r28
     6e6:	c7 70       	andi	r28, 0x07	; 7
     6e8:	28 e0       	ldi	r18, 0x08	; 8
     6ea:	82 9f       	mul	r24, r18
     6ec:	c0 01       	movw	r24, r0
     6ee:	11 24       	eor	r1, r1
     6f0:	8c 0f       	add	r24, r28
     6f2:	91 1d       	adc	r25, r1
     6f4:	f7 01       	movw	r30, r14
     6f6:	91 87       	std	Z+9, r25	; 0x09
     6f8:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     6fa:	85 e6       	ldi	r24, 0x65	; 101
     6fc:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_read>
     700:	8f 70       	andi	r24, 0x0F	; 15
     702:	f7 01       	movw	r30, r14
     704:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     706:	82 85       	ldd	r24, Z+10	; 0x0a
     708:	88 23       	and	r24, r24
     70a:	81 f0       	breq	.+32     	; 0x72c <CAN_receiveMessage+0x64>
     70c:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     70e:	0c 2f       	mov	r16, r28
     710:	10 e0       	ldi	r17, 0x00	; 0
     712:	86 e6       	ldi	r24, 0x66	; 102
     714:	8c 0f       	add	r24, r28
     716:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_read>
     71a:	f7 01       	movw	r30, r14
     71c:	e0 0f       	add	r30, r16
     71e:	f1 1f       	adc	r31, r17
     720:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     722:	cf 5f       	subi	r28, 0xFF	; 255
     724:	f7 01       	movw	r30, r14
     726:	82 85       	ldd	r24, Z+10	; 0x0a
     728:	8c 13       	cpse	r24, r28
     72a:	f1 cf       	rjmp	.-30     	; 0x70e <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	08 95       	ret

00000738 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     738:	cf 93       	push	r28
     73a:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
	SPI_masterWrite(addr);
     74a:	8c 2f       	mov	r24, r28
     74c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     750:	0e 94 b9 07 	call	0xf72	; 0xf72 <SPI_masterRead>
     754:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	84 e0       	ldi	r24, 0x04	; 4
     75a:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
	
	return data;
}
     75e:	8c 2f       	mov	r24, r28
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	d8 2f       	mov	r29, r24
     76a:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	84 e0       	ldi	r24, 0x04	; 4
     770:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
	SPI_masterWrite(addr);
     77a:	8d 2f       	mov	r24, r29
     77c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
	SPI_masterWrite(data);
     780:	8c 2f       	mov	r24, r28
     782:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
	
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	d8 2f       	mov	r29, r24
     79c:	16 2f       	mov	r17, r22
     79e:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     7a8:	85 e0       	ldi	r24, 0x05	; 5
     7aa:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
		SPI_masterWrite(addr);
     7ae:	81 2f       	mov	r24, r17
     7b0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
		SPI_masterWrite(mask);
     7b4:	8d 2f       	mov	r24, r29
     7b6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
		SPI_masterWrite(data);
     7ba:	8c 2f       	mov	r24, r28
     7bc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>

}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
	printf("Before spi write");
     7d8:	86 eb       	ldi	r24, 0xB6	; 182
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	9f 93       	push	r25
     7de:	8f 93       	push	r24
     7e0:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
	SPI_masterWrite(MCP_RESET);
     7e4:	80 ec       	ldi	r24, 0xC0	; 192
     7e6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
}
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	08 95       	ret

000007f8 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     7f8:	cf 93       	push	r28
     7fa:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
	switch (buffer) {
     804:	c1 30       	cpi	r28, 0x01	; 1
     806:	41 f0       	breq	.+16     	; 0x818 <CAN_controller_RTS+0x20>
     808:	18 f0       	brcs	.+6      	; 0x810 <CAN_controller_RTS+0x18>
     80a:	c2 30       	cpi	r28, 0x02	; 2
     80c:	49 f0       	breq	.+18     	; 0x820 <CAN_controller_RTS+0x28>
     80e:	0b c0       	rjmp	.+22     	; 0x826 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     810:	81 e8       	ldi	r24, 0x81	; 129
     812:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
			break;
     816:	07 c0       	rjmp	.+14     	; 0x826 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     818:	82 e8       	ldi	r24, 0x82	; 130
     81a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
			break;
     81e:	03 c0       	rjmp	.+6      	; 0x826 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     820:	84 e8       	ldi	r24, 0x84	; 132
     822:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	0e 94 be 07 	call	0xf7c	; 0xf7c <SPI_setChipSelect>
}
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     838:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     83c:	8e e0       	ldi	r24, 0x0E	; 14
     83e:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     842:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     844:	80 38       	cpi	r24, 0x80	; 128
     846:	69 f0       	breq	.+26     	; 0x862 <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     848:	1f 92       	push	r1
     84a:	8f 93       	push	r24
     84c:	87 ec       	ldi	r24, 0xC7	; 199
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
		return;
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	38 c0       	rjmp	.+112    	; 0x8d2 <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     862:	4c 2f       	mov	r20, r28
     864:	4c 60       	ori	r20, 0x0C	; 12
     866:	6f e0       	ldi	r22, 0x0F	; 15
     868:	8e ee       	ldi	r24, 0xEE	; 238
     86a:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	6b e2       	ldi	r22, 0x2B	; 43
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     878:	40 e6       	ldi	r20, 0x60	; 96
     87a:	60 e6       	ldi	r22, 0x60	; 96
     87c:	80 e6       	ldi	r24, 0x60	; 96
     87e:	0e 94 ca 03 	call	0x794	; 0x794 <CAN_controller_bitModify>
     882:	2f ef       	ldi	r18, 0xFF	; 255
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	80 40       	sbci	r24, 0x00	; 0
     88c:	90 40       	sbci	r25, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <CAN_controller_setMode+0x56>
     890:	00 c0       	rjmp	.+0      	; 0x892 <CAN_controller_setMode+0x60>
     892:	00 c0       	rjmp	.+0      	; 0x894 <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     894:	8e e0       	ldi	r24, 0x0E	; 14
     896:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     89a:	d8 2f       	mov	r29, r24
     89c:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     89e:	cd 17       	cp	r28, r29
     8a0:	61 f0       	breq	.+24     	; 0x8ba <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     8a2:	1f 92       	push	r1
     8a4:	df 93       	push	r29
     8a6:	82 ee       	ldi	r24, 0xE2	; 226
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	9f 93       	push	r25
     8ac:	8f 93       	push	r24
     8ae:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     8ba:	1f 92       	push	r1
     8bc:	df 93       	push	r29
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	92 e0       	ldi	r25, 0x02	; 2
     8c2:	9f 93       	push	r25
     8c4:	8f 93       	push	r24
     8c6:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     8d8:	0e 94 ac 07 	call	0xf58	; 0xf58 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     8dc:	80 e4       	ldi	r24, 0x40	; 64
     8de:	0e 94 19 04 	call	0x832	; 0x832 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	cli();
     8e2:	f8 94       	cli
	 GICR |= (1<< INT0); //turn on interrupt 0
     8e4:	8b b7       	in	r24, 0x3b	; 59
     8e6:	80 64       	ori	r24, 0x40	; 64
     8e8:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     8ea:	85 b7       	in	r24, 0x35	; 53
     8ec:	82 60       	ori	r24, 0x02	; 2
     8ee:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     8f0:	85 b7       	in	r24, 0x35	; 53
     8f2:	8e 7f       	andi	r24, 0xFE	; 254
     8f4:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     8f6:	81 b3       	in	r24, 0x11	; 17
     8f8:	84 70       	andi	r24, 0x04	; 4
     8fa:	81 bb       	out	0x11, r24	; 17
	sei();
     8fc:	78 94       	sei
     8fe:	2f ef       	ldi	r18, 0xFF	; 255
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	21 50       	subi	r18, 0x01	; 1
     906:	80 40       	sbci	r24, 0x00	; 0
     908:	90 40       	sbci	r25, 0x00	; 0
     90a:	e1 f7       	brne	.-8      	; 0x904 <CAN_controller_init+0x2c>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <CAN_controller_init+0x36>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <CAN_controller_init+0x38>
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     910:	81 e1       	ldi	r24, 0x11	; 17
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     91c:	8e e0       	ldi	r24, 0x0E	; 14
     91e:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     922:	1f 92       	push	r1
     924:	8f 93       	push	r24
     926:	8a e2       	ldi	r24, 0x2A	; 42
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	9f 93       	push	r25
     92c:	8f 93       	push	r24
     92e:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>

}
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	08 95       	ret

00000940 <sleep_init>:

#include "sleep.h"
#include <avr/sleep.h>
#include <avr/interrupt.h>

void sleep_init() {
     940:	08 95       	ret

00000942 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     942:	88 b1       	in	r24, 0x08	; 8
     944:	88 68       	ori	r24, 0x88	; 136
     946:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     948:	85 b7       	in	r24, 0x35	; 53
     94a:	80 62       	ori	r24, 0x20	; 32
     94c:	85 bf       	out	0x35, r24	; 53
     94e:	88 95       	sleep
     950:	85 b7       	in	r24, 0x35	; 53
     952:	8f 7d       	andi	r24, 0xDF	; 223
     954:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     956:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     958:	85 b7       	in	r24, 0x35	; 53
     95a:	8f 7d       	andi	r24, 0xDF	; 223
     95c:	85 bf       	out	0x35, r24	; 53
     95e:	08 95       	ret

00000960 <joystickInit>:
		case DOWN:
			printf("Down\n\r");
			return;
		
	}
}
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     966:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <joystickOffsetX>
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     970:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <joystickOffsetY>
     974:	08 95       	ret

00000976 <joystick_readPosition>:
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     988:	c8 2f       	mov	r28, r24
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     990:	e8 2f       	mov	r30, r24
     992:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <joystickOffsetX>
     996:	c6 17       	cp	r28, r22
     998:	80 f4       	brcc	.+32     	; 0x9ba <joystick_readPosition+0x44>
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	2c 2f       	mov	r18, r28
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	26 1b       	sub	r18, r22
     9a2:	37 0b       	sbc	r19, r23
     9a4:	44 e6       	ldi	r20, 0x64	; 100
     9a6:	42 9f       	mul	r20, r18
     9a8:	c0 01       	movw	r24, r0
     9aa:	43 9f       	mul	r20, r19
     9ac:	90 0d       	add	r25, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__divmodhi4>
     9b4:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <joystick_pos>
     9b8:	14 c0       	rjmp	.+40     	; 0x9e2 <joystick_readPosition+0x6c>
     9ba:	46 2f       	mov	r20, r22
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	2c 2f       	mov	r18, r28
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	24 1b       	sub	r18, r20
     9c4:	35 0b       	sbc	r19, r21
     9c6:	64 e6       	ldi	r22, 0x64	; 100
     9c8:	62 9f       	mul	r22, r18
     9ca:	c0 01       	movw	r24, r0
     9cc:	63 9f       	mul	r22, r19
     9ce:	90 0d       	add	r25, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	6f ef       	ldi	r22, 0xFF	; 255
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	64 1b       	sub	r22, r20
     9d8:	75 0b       	sbc	r23, r21
     9da:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__divmodhi4>
     9de:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <joystick_pos>
     9e2:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <joystickOffsetY>
     9e6:	e2 17       	cp	r30, r18
     9e8:	88 f4       	brcc	.+34     	; 0xa0c <joystick_readPosition+0x96>
     9ea:	62 2f       	mov	r22, r18
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	4e 2f       	mov	r20, r30
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	46 1b       	sub	r20, r22
     9f4:	57 0b       	sbc	r21, r23
     9f6:	24 e6       	ldi	r18, 0x64	; 100
     9f8:	24 9f       	mul	r18, r20
     9fa:	c0 01       	movw	r24, r0
     9fc:	25 9f       	mul	r18, r21
     9fe:	90 0d       	add	r25, r0
     a00:	11 24       	eor	r1, r1
     a02:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__divmodhi4>
     a06:	60 93 a2 02 	sts	0x02A2, r22	; 0x8002a2 <joystick_pos+0x1>
     a0a:	13 c0       	rjmp	.+38     	; 0xa32 <joystick_readPosition+0xbc>
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	4e 2f       	mov	r20, r30
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	42 1b       	sub	r20, r18
     a14:	53 0b       	sbc	r21, r19
     a16:	64 e6       	ldi	r22, 0x64	; 100
     a18:	64 9f       	mul	r22, r20
     a1a:	c0 01       	movw	r24, r0
     a1c:	65 9f       	mul	r22, r21
     a1e:	90 0d       	add	r25, r0
     a20:	11 24       	eor	r1, r1
     a22:	6f ef       	ldi	r22, 0xFF	; 255
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	62 1b       	sub	r22, r18
     a28:	73 0b       	sbc	r23, r19
     a2a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__divmodhi4>
     a2e:	60 93 a2 02 	sts	0x02A2, r22	; 0x8002a2 <joystick_pos+0x1>
     a32:	c1 ea       	ldi	r28, 0xA1	; 161
     a34:	d2 e0       	ldi	r29, 0x02	; 2
     a36:	68 81       	ld	r22, Y
     a38:	06 2e       	mov	r0, r22
     a3a:	00 0c       	add	r0, r0
     a3c:	77 0b       	sbc	r23, r23
     a3e:	88 0b       	sbc	r24, r24
     a40:	99 0b       	sbc	r25, r25
     a42:	0e 94 82 09 	call	0x1304	; 0x1304 <__floatsisf>
     a46:	6b 01       	movw	r12, r22
     a48:	7c 01       	movw	r14, r24
     a4a:	69 81       	ldd	r22, Y+1	; 0x01
     a4c:	06 2e       	mov	r0, r22
     a4e:	00 0c       	add	r0, r0
     a50:	77 0b       	sbc	r23, r23
     a52:	88 0b       	sbc	r24, r24
     a54:	99 0b       	sbc	r25, r25
     a56:	0e 94 82 09 	call	0x1304	; 0x1304 <__floatsisf>
     a5a:	a7 01       	movw	r20, r14
     a5c:	96 01       	movw	r18, r12
     a5e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <atan2>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	44 eb       	ldi	r20, 0xB4	; 180
     a68:	53 e4       	ldi	r21, 0x43	; 67
     a6a:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	5f e3       	ldi	r21, 0x3F	; 63
     a76:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     a7a:	23 ec       	ldi	r18, 0xC3	; 195
     a7c:	35 ef       	ldi	r19, 0xF5	; 245
     a7e:	48 e4       	ldi	r20, 0x48	; 72
     a80:	50 e4       	ldi	r21, 0x40	; 64
     a82:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__divsf3>
     a86:	0e 94 4a 09 	call	0x1294	; 0x1294 <__fixsfsi>
     a8a:	7b 83       	std	Y+3, r23	; 0x03
     a8c:	6a 83       	std	Y+2, r22	; 0x02
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	08 95       	ret

00000a9c <joystick_getDirection>:
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	94 e0       	ldi	r25, 0x04	; 4
     aa2:	98 0f       	add	r25, r24
     aa4:	99 30       	cpi	r25, 0x09	; 9
     aa6:	20 f4       	brcc	.+8      	; 0xab0 <joystick_getDirection+0x14>
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	9c 5f       	subi	r25, 0xFC	; 252
     aac:	99 30       	cpi	r25, 0x09	; 9
     aae:	90 f0       	brcs	.+36     	; 0xad4 <joystick_getDirection+0x38>
     ab0:	85 30       	cpi	r24, 0x05	; 5
     ab2:	2c f0       	brlt	.+10     	; 0xabe <joystick_getDirection+0x22>
     ab4:	81 81       	ldd	r24, Z+1	; 0x01
     ab6:	8f 5c       	subi	r24, 0xCF	; 207
     ab8:	83 36       	cpi	r24, 0x63	; 99
     aba:	38 f4       	brcc	.+14     	; 0xaca <joystick_getDirection+0x2e>
     abc:	0d c0       	rjmp	.+26     	; 0xad8 <joystick_getDirection+0x3c>
     abe:	8c 3f       	cpi	r24, 0xFC	; 252
     ac0:	24 f4       	brge	.+8      	; 0xaca <joystick_getDirection+0x2e>
     ac2:	81 81       	ldd	r24, Z+1	; 0x01
     ac4:	8f 5c       	subi	r24, 0xCF	; 207
     ac6:	83 36       	cpi	r24, 0x63	; 99
     ac8:	48 f0       	brcs	.+18     	; 0xadc <joystick_getDirection+0x40>
     aca:	81 81       	ldd	r24, Z+1	; 0x01
     acc:	8c 3f       	cpi	r24, 0xFC	; 252
     ace:	44 f0       	brlt	.+16     	; 0xae0 <joystick_getDirection+0x44>
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	08 95       	ret
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	08 95       	ret
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 95       	ret
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	08 95       	ret

00000ae4 <joystick_sendPositionOverCAN>:

void joystick_sendPositionOverCAN() {
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	2b 97       	sbiw	r28, 0x0b	; 11
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	9a 87       	std	Y+10, r25	; 0x0a
     afe:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 2;
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = joystick_pos.x_pos;
     b04:	e1 ea       	ldi	r30, 0xA1	; 161
     b06:	f2 e0       	ldi	r31, 0x02	; 2
     b08:	80 81       	ld	r24, Z
     b0a:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = joystick_pos.y_pos;
     b0c:	81 81       	ldd	r24, Z+1	; 0x01
     b0e:	8a 83       	std	Y+2, r24	; 0x02

	
	CAN_transmit_message(&message);
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	0e 94 58 02 	call	0x4b0	; 0x4b0 <CAN_transmit_message>
     b18:	2b 96       	adiw	r28, 0x0b	; 11
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <mainMenuInit>:
#include <avr/interrupt.h>



MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     b2a:	8f e1       	ldi	r24, 0x1F	; 31
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 43 0b 	call	0x1686	; 0x1686 <malloc>
	ptr->numChildren = 0;
     b32:	fc 01       	movw	r30, r24
     b34:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     b36:	2a e0       	ldi	r18, 0x0A	; 10
     b38:	e5 e3       	ldi	r30, 0x35	; 53
     b3a:	f2 e0       	ldi	r31, 0x02	; 2
     b3c:	dc 01       	movw	r26, r24
     b3e:	01 90       	ld	r0, Z+
     b40:	0d 92       	st	X+, r0
     b42:	2a 95       	dec	r18
     b44:	e1 f7       	brne	.-8      	; 0xb3e <mainMenuInit+0x14>
	ptr->parent = NULL;
     b46:	fc 01       	movw	r30, r24
     b48:	11 8a       	std	Z+17, r1	; 0x11
     b4a:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     b4c:	08 95       	ret

00000b4e <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	7c 01       	movw	r14, r24
     b5e:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     b60:	8f e1       	ldi	r24, 0x1F	; 31
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 43 0b 	call	0x1686	; 0x1686 <malloc>
     b68:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     b6a:	d7 01       	movw	r26, r14
     b6c:	5e 96       	adiw	r26, 0x1e	; 30
     b6e:	ec 91       	ld	r30, X
     b70:	5e 97       	sbiw	r26, 0x1e	; 30
     b72:	c1 e0       	ldi	r28, 0x01	; 1
     b74:	ce 0f       	add	r28, r30
     b76:	5e 96       	adiw	r26, 0x1e	; 30
     b78:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     b7a:	b6 01       	movw	r22, r12
     b7c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <strcpy>
	childPtr->parent = parent;
     b80:	f8 01       	movw	r30, r16
     b82:	f1 8a       	std	Z+17, r15	; 0x11
     b84:	e0 8a       	std	Z+16, r14	; 0x10
	//printf("Added child: %s\n\r", childPtr->name);

	if (parent->numChildren > MAXCHILDREN) {
     b86:	c7 30       	cpi	r28, 0x07	; 7
     b88:	58 f0       	brcs	.+22     	; 0xba0 <addChild+0x52>
		printf("REached max: \n\r");
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	9f 93       	push	r25
     b90:	8f 93       	push	r24
     b92:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
		return NULL;
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e c0       	rjmp	.+28     	; 0xbbc <addChild+0x6e>
	} 
	parent->children[parent->numChildren-1]=childPtr;
     ba0:	ec 2f       	mov	r30, r28
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	38 96       	adiw	r30, 0x08	; 8
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	ee 0d       	add	r30, r14
     bac:	ff 1d       	adc	r31, r15
     bae:	11 83       	std	Z+1, r17	; 0x01
     bb0:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     bb2:	d8 01       	movw	r26, r16
     bb4:	5e 96       	adiw	r26, 0x1e	; 30
     bb6:	1c 92       	st	X, r1
	return childPtr;
     bb8:	80 2f       	mov	r24, r16
     bba:	91 2f       	mov	r25, r17
}
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	08 95       	ret

00000bcc <menuInit>:

MenuNode* menuInit(void)
{
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     bd8:	0e 94 95 05 	call	0xb2a	; 0xb2a <mainMenuInit>
     bdc:	8c 01       	movw	r16, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     bde:	6f e4       	ldi	r22, 0x4F	; 79
     be0:	72 e0       	ldi	r23, 0x02	; 2
     be2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <addChild>
     be6:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     be8:	69 e5       	ldi	r22, 0x59	; 89
     bea:	72 e0       	ldi	r23, 0x02	; 2
     bec:	0e 94 a7 05 	call	0xb4e	; 0xb4e <addChild>
	addChild(childPlayGame,"GAME 2");
     bf0:	60 e6       	ldi	r22, 0x60	; 96
     bf2:	72 e0       	ldi	r23, 0x02	; 2
     bf4:	ce 01       	movw	r24, r28
     bf6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     bfa:	67 e6       	ldi	r22, 0x67	; 103
     bfc:	72 e0       	ldi	r23, 0x02	; 2
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 a7 05 	call	0xb4e	; 0xb4e <addChild>
     c04:	7c 01       	movw	r14, r24
     c06:	c5 e0       	ldi	r28, 0x05	; 5
     c08:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     c0a:	61 e7       	ldi	r22, 0x71	; 113
     c0c:	72 e0       	ldi	r23, 0x02	; 2
     c0e:	c7 01       	movw	r24, r14
     c10:	0e 94 a7 05 	call	0xb4e	; 0xb4e <addChild>
     c14:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     c16:	c9 f7       	brne	.-14     	; 0xc0a <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	//MenuNode* childSettings = addChild(mainMenu,"Settings");
	
	MenuNode* childMusic = addChild(mainMenu,"Music");
     c18:	69 e7       	ldi	r22, 0x79	; 121
     c1a:	72 e0       	ldi	r23, 0x02	; 2
     c1c:	c8 01       	movw	r24, r16
     c1e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <addChild>
	addChild(childMusic, "Rick");
     c22:	6f e7       	ldi	r22, 0x7F	; 127
     c24:	72 e0       	ldi	r23, 0x02	; 2
     c26:	0e 94 a7 05 	call	0xb4e	; 0xb4e <addChild>
	
	
	//addChild(childSettings, "No sett");
	
	
	printf("Number of children: %i\n\r",mainMenu->numChildren);
     c2a:	f8 01       	movw	r30, r16
     c2c:	86 8d       	ldd	r24, Z+30	; 0x1e
     c2e:	1f 92       	push	r1
     c30:	8f 93       	push	r24
     c32:	84 e8       	ldi	r24, 0x84	; 132
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	9f 93       	push	r25
     c38:	8f 93       	push	r24
     c3a:	0e 94 b6 0c 	call	0x196c	; 0x196c <printf>
	/*
	MenuNode* childSettings = addChild(mainMenu,"Settings");
	addChild(childSettings, "No sett");
	printf("Number of children: %i\n\r",childSettings->numChildren);
	*/
	currentMenu.currentMenuItem = mainMenu;
     c3e:	e5 ea       	ldi	r30, 0xA5	; 165
     c40:	f2 e0       	ldi	r31, 0x02	; 2
     c42:	11 83       	std	Z+1, r17	; 0x01
     c44:	00 83       	st	Z, r16
	currentMenu.childIndex = 0;
     c46:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     c48:	84 e0       	ldi	r24, 0x04	; 4
     c4a:	83 83       	std	Z+3, r24	; 0x03
	
	return mainMenu;
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
}
     c54:	c8 01       	movw	r24, r16
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	08 95       	ret

00000c64 <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     c64:	0e 94 4e 05 	call	0xa9c	; 0xa9c <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     c68:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <currentMenu+0x3>
     c6c:	94 30       	cpi	r25, 0x04	; 4
     c6e:	09 f0       	breq	.+2      	; 0xc72 <navigateMenu+0xe>
     c70:	58 c0       	rjmp	.+176    	; 0xd22 <navigateMenu+0xbe>
			switch (dir) {
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	e1 f1       	breq	.+120    	; 0xcee <navigateMenu+0x8a>
     c76:	60 f1       	brcs	.+88     	; 0xcd0 <navigateMenu+0x6c>
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	c9 f0       	breq	.+50     	; 0xcae <navigateMenu+0x4a>
     c7c:	83 30       	cpi	r24, 0x03	; 3
     c7e:	09 f0       	breq	.+2      	; 0xc82 <navigateMenu+0x1e>
     c80:	50 c0       	rjmp	.+160    	; 0xd22 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     c82:	e5 ea       	ldi	r30, 0xA5	; 165
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	92 81       	ldd	r25, Z+2	; 0x02
     c88:	49 2f       	mov	r20, r25
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	01 90       	ld	r0, Z+
     c8e:	f0 81       	ld	r31, Z
     c90:	e0 2d       	mov	r30, r0
     c92:	26 8d       	ldd	r18, Z+30	; 0x1e
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	21 50       	subi	r18, 0x01	; 1
     c98:	31 09       	sbc	r19, r1
     c9a:	42 17       	cp	r20, r18
     c9c:	53 07       	cpc	r21, r19
     c9e:	24 f4       	brge	.+8      	; 0xca8 <navigateMenu+0x44>
					currentMenu.childIndex++;
     ca0:	9f 5f       	subi	r25, 0xFF	; 255
     ca2:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <currentMenu+0x2>
     ca6:	3d c0       	rjmp	.+122    	; 0xd22 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     ca8:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <currentMenu+0x2>
     cac:	3a c0       	rjmp	.+116    	; 0xd22 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     cae:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <currentMenu+0x2>
     cb2:	99 23       	and	r25, r25
     cb4:	21 f0       	breq	.+8      	; 0xcbe <navigateMenu+0x5a>
					currentMenu.childIndex--;
     cb6:	91 50       	subi	r25, 0x01	; 1
     cb8:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <currentMenu+0x2>
     cbc:	32 c0       	rjmp	.+100    	; 0xd22 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     cbe:	e5 ea       	ldi	r30, 0xA5	; 165
     cc0:	f2 e0       	ldi	r31, 0x02	; 2
     cc2:	a0 81       	ld	r26, Z
     cc4:	b1 81       	ldd	r27, Z+1	; 0x01
     cc6:	5e 96       	adiw	r26, 0x1e	; 30
     cc8:	9c 91       	ld	r25, X
     cca:	91 50       	subi	r25, 0x01	; 1
     ccc:	92 83       	std	Z+2, r25	; 0x02
     cce:	29 c0       	rjmp	.+82     	; 0xd22 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     cd0:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <currentMenu>
     cd4:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <currentMenu+0x1>
     cd8:	20 89       	ldd	r18, Z+16	; 0x10
     cda:	31 89       	ldd	r19, Z+17	; 0x11
     cdc:	21 15       	cp	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	01 f1       	breq	.+64     	; 0xd22 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     ce2:	e5 ea       	ldi	r30, 0xA5	; 165
     ce4:	f2 e0       	ldi	r31, 0x02	; 2
     ce6:	31 83       	std	Z+1, r19	; 0x01
     ce8:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     cea:	12 82       	std	Z+2, r1	; 0x02
     cec:	1a c0       	rjmp	.+52     	; 0xd22 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     cee:	a5 ea       	ldi	r26, 0xA5	; 165
     cf0:	b2 e0       	ldi	r27, 0x02	; 2
     cf2:	2d 91       	ld	r18, X+
     cf4:	3c 91       	ld	r19, X
     cf6:	11 97       	sbiw	r26, 0x01	; 1
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	9c 91       	ld	r25, X
     cfc:	12 97       	sbiw	r26, 0x02	; 2
     cfe:	e9 2f       	mov	r30, r25
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	39 96       	adiw	r30, 0x09	; 9
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	e2 0f       	add	r30, r18
     d0a:	f3 1f       	adc	r31, r19
     d0c:	01 90       	ld	r0, Z+
     d0e:	f0 81       	ld	r31, Z
     d10:	e0 2d       	mov	r30, r0
     d12:	96 8d       	ldd	r25, Z+30	; 0x1e
     d14:	99 23       	and	r25, r25
     d16:	29 f0       	breq	.+10     	; 0xd22 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	fc 93       	st	X, r31
     d1c:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     d1e:	12 96       	adiw	r26, 0x02	; 2
     d20:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     d22:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <currentMenu+0x3>
     d26:	08 95       	ret

00000d28 <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
	oled_reset();
     d30:	0e 94 de 06 	call	0xdbc	; 0xdbc <oled_reset>
	oled_home();
     d34:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d38:	c5 ea       	ldi	r28, 0xA5	; 165
     d3a:	d2 e0       	ldi	r29, 0x02	; 2
     d3c:	88 81       	ld	r24, Y
     d3e:	99 81       	ldd	r25, Y+1	; 0x01
     d40:	0e 94 3a 07 	call	0xe74	; 0xe74 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d44:	e8 81       	ld	r30, Y
     d46:	f9 81       	ldd	r31, Y+1	; 0x01
     d48:	86 8d       	ldd	r24, Z+30	; 0x1e
     d4a:	88 23       	and	r24, r24
     d4c:	31 f1       	breq	.+76     	; 0xd9a <menu_printCurrentMenu+0x72>
     d4e:	c0 e0       	ldi	r28, 0x00	; 0
     d50:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d52:	05 ea       	ldi	r16, 0xA5	; 165
     d54:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     d56:	ce 01       	movw	r24, r28
     d58:	02 96       	adiw	r24, 0x02	; 2
     d5a:	0e 94 36 07 	call	0xe6c	; 0xe6c <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d5e:	d8 01       	movw	r26, r16
     d60:	8d 91       	ld	r24, X+
     d62:	9c 91       	ld	r25, X
     d64:	fe 01       	movw	r30, r28
     d66:	39 96       	adiw	r30, 0x09	; 9
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	e8 0f       	add	r30, r24
     d6e:	f9 1f       	adc	r31, r25
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	0e 94 3a 07 	call	0xe74	; 0xe74 <oled_print>
		if (currentMenu.childIndex == i) {
     d78:	f8 01       	movw	r30, r16
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	8c 17       	cp	r24, r28
     d80:	9d 07       	cpc	r25, r29
     d82:	11 f4       	brne	.+4      	; 0xd88 <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     d84:	0e 94 f4 06 	call	0xde8	; 0xde8 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d88:	21 96       	adiw	r28, 0x01	; 1
     d8a:	d8 01       	movw	r26, r16
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	86 8d       	ldd	r24, Z+30	; 0x1e
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	c8 17       	cp	r28, r24
     d96:	d9 07       	cpc	r29, r25
     d98:	f4 f2       	brlt	.-68     	; 0xd56 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     da4:	80 55       	subi	r24, 0x50	; 80
     da6:	e0 e0       	ldi	r30, 0x00	; 0
     da8:	f0 e1       	ldi	r31, 0x10	; 16
     daa:	80 83       	st	Z, r24
     dac:	86 2f       	mov	r24, r22
     dae:	8f 70       	andi	r24, 0x0F	; 15
     db0:	80 83       	st	Z, r24
     db2:	62 95       	swap	r22
     db4:	6f 70       	andi	r22, 0x0F	; 15
     db6:	60 61       	ori	r22, 0x10	; 16
     db8:	60 83       	st	Z, r22
     dba:	08 95       	ret

00000dbc <oled_reset>:
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	c0 e0       	ldi	r28, 0x00	; 0
     dc6:	d2 e1       	ldi	r29, 0x12	; 18
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	81 2f       	mov	r24, r17
     dcc:	0e 94 d2 06 	call	0xda4	; 0xda4 <oled_pos>
     dd0:	80 e8       	ldi	r24, 0x80	; 128
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	18 82       	st	Y, r1
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <oled_reset+0x18>
     dda:	1f 5f       	subi	r17, 0xFF	; 255
     ddc:	18 30       	cpi	r17, 0x08	; 8
     dde:	a1 f7       	brne	.-24     	; 0xdc8 <oled_reset+0xc>
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <oled_print_arrow>:
     de8:	e0 e0       	ldi	r30, 0x00	; 0
     dea:	f2 e1       	ldi	r31, 0x12	; 18
     dec:	88 e1       	ldi	r24, 0x18	; 24
     dee:	80 83       	st	Z, r24
     df0:	9c e3       	ldi	r25, 0x3C	; 60
     df2:	90 83       	st	Z, r25
     df4:	9e e7       	ldi	r25, 0x7E	; 126
     df6:	90 83       	st	Z, r25
     df8:	80 83       	st	Z, r24
     dfa:	80 83       	st	Z, r24
     dfc:	08 95       	ret

00000dfe <oled_home>:
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 d2 06 	call	0xda4	; 0xda4 <oled_pos>
     e06:	08 95       	ret

00000e08 <oled_init>:
     e08:	e0 e0       	ldi	r30, 0x00	; 0
     e0a:	f0 e1       	ldi	r31, 0x10	; 16
     e0c:	8e ea       	ldi	r24, 0xAE	; 174
     e0e:	80 83       	st	Z, r24
     e10:	81 ea       	ldi	r24, 0xA1	; 161
     e12:	80 83       	st	Z, r24
     e14:	8a ed       	ldi	r24, 0xDA	; 218
     e16:	80 83       	st	Z, r24
     e18:	82 e1       	ldi	r24, 0x12	; 18
     e1a:	80 83       	st	Z, r24
     e1c:	88 ec       	ldi	r24, 0xC8	; 200
     e1e:	80 83       	st	Z, r24
     e20:	88 ea       	ldi	r24, 0xA8	; 168
     e22:	80 83       	st	Z, r24
     e24:	8f e3       	ldi	r24, 0x3F	; 63
     e26:	80 83       	st	Z, r24
     e28:	85 ed       	ldi	r24, 0xD5	; 213
     e2a:	80 83       	st	Z, r24
     e2c:	80 e8       	ldi	r24, 0x80	; 128
     e2e:	80 83       	st	Z, r24
     e30:	81 e8       	ldi	r24, 0x81	; 129
     e32:	80 83       	st	Z, r24
     e34:	80 e5       	ldi	r24, 0x50	; 80
     e36:	80 83       	st	Z, r24
     e38:	89 ed       	ldi	r24, 0xD9	; 217
     e3a:	80 83       	st	Z, r24
     e3c:	81 e2       	ldi	r24, 0x21	; 33
     e3e:	80 83       	st	Z, r24
     e40:	80 e2       	ldi	r24, 0x20	; 32
     e42:	80 83       	st	Z, r24
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	80 83       	st	Z, r24
     e48:	8b ed       	ldi	r24, 0xDB	; 219
     e4a:	80 83       	st	Z, r24
     e4c:	80 e3       	ldi	r24, 0x30	; 48
     e4e:	80 83       	st	Z, r24
     e50:	8d ea       	ldi	r24, 0xAD	; 173
     e52:	80 83       	st	Z, r24
     e54:	10 82       	st	Z, r1
     e56:	84 ea       	ldi	r24, 0xA4	; 164
     e58:	80 83       	st	Z, r24
     e5a:	86 ea       	ldi	r24, 0xA6	; 166
     e5c:	80 83       	st	Z, r24
     e5e:	8f ea       	ldi	r24, 0xAF	; 175
     e60:	80 83       	st	Z, r24
     e62:	0e 94 de 06 	call	0xdbc	; 0xdbc <oled_reset>
     e66:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_home>
     e6a:	08 95       	ret

00000e6c <oled_gotoLine>:
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	0e 94 d2 06 	call	0xda4	; 0xda4 <oled_pos>
     e72:	08 95       	ret

00000e74 <oled_print>:

void oled_print(char* character){
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	dc 01       	movw	r26, r24
	while (*character != '\0')
     e7a:	8c 91       	ld	r24, X
     e7c:	81 11       	cpse	r24, r1
     e7e:	1a c0       	rjmp	.+52     	; 0xeb4 <oled_print+0x40>
     e80:	1e c0       	rjmp	.+60     	; 0xebe <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     e82:	ec 91       	ld	r30, X
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	b0 97       	sbiw	r30, 0x20	; 32
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	e2 0f       	add	r30, r18
     e96:	f3 1f       	adc	r31, r19
     e98:	e2 56       	subi	r30, 0x62	; 98
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     e9e:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     ea0:	2f 5f       	subi	r18, 0xFF	; 255
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	28 30       	cpi	r18, 0x08	; 8
     ea6:	31 05       	cpc	r19, r1
     ea8:	61 f7       	brne	.-40     	; 0xe82 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     eaa:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     eac:	8c 91       	ld	r24, X
     eae:	81 11       	cpse	r24, r1
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <oled_print+0x44>
     eb2:	05 c0       	rjmp	.+10     	; 0xebe <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     eb4:	c0 e0       	ldi	r28, 0x00	; 0
     eb6:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	e2 cf       	rjmp	.-60     	; 0xe82 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <setupInit>:
#include "oled.h"
#include "timer.h"
#include "sleep.h"

	void setupInit(void){
	cli();
     ec4:	f8 94       	cli
	xmem_init();
     ec6:	0e 94 5f 08 	call	0x10be	; 0x10be <xmem_init>
	USART_init(MYUBRR);
     eca:	8f e1       	ldi	r24, 0x1F	; 31
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 4e 08 	call	0x109c	; 0x109c <USART_init>
	adcInit();
     ed2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     ed6:	0e 94 b0 04 	call	0x960	; 0x960 <joystickInit>
	touchButton_init();
     eda:	0e 94 21 08 	call	0x1042	; 0x1042 <touchButton_init>
	oled_init();
     ede:	0e 94 04 07 	call	0xe08	; 0xe08 <oled_init>
	timer_init();
     ee2:	0e 94 13 08 	call	0x1026	; 0x1026 <timer_init>
	sleep_init();
     ee6:	0e 94 a0 04 	call	0x940	; 0x940 <sleep_init>
	menuInit();
     eea:	0e 94 e6 05 	call	0xbcc	; 0xbcc <menuInit>
	CAN_controller_init();
     eee:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_init>
	//pwm_init();
	sei();
     ef2:	78 94       	sei
     ef4:	08 95       	ret

00000ef6 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f00:	cb ea       	ldi	r28, 0xAB	; 171
     f02:	d2 e0       	ldi	r29, 0x02	; 2
     f04:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f0c:	89 83       	std	Y+1, r24	; 0x01
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <slider_sendPositionOverCAN>:

void slider_sendPositionOverCAN() {
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	2b 97       	sbiw	r28, 0x0b	; 11
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	message.ID = 0x02;
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9a 87       	std	Y+10, r25	; 0x0a
     f2e:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 2;
     f30:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     f32:	eb ea       	ldi	r30, 0xAB	; 171
     f34:	f2 e0       	ldi	r31, 0x02	; 2
     f36:	80 81       	ld	r24, Z
     f38:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     f3a:	81 81       	ldd	r24, Z+1	; 0x01
     f3c:	8a 83       	std	Y+2, r24	; 0x02
	CAN_transmit_message(&message);
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	0e 94 58 02 	call	0x4b0	; 0x4b0 <CAN_transmit_message>
     f46:	2b 96       	adiw	r28, 0x0b	; 11
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     f58:	87 b3       	in	r24, 0x17	; 23
     f5a:	80 6a       	ori	r24, 0xA0	; 160
     f5c:	87 bb       	out	0x17, r24	; 23
     f5e:	bc 9a       	sbi	0x17, 4	; 23
     f60:	8d b1       	in	r24, 0x0d	; 13
     f62:	81 65       	ori	r24, 0x51	; 81
     f64:	8d b9       	out	0x0d, r24	; 13
     f66:	c4 9a       	sbi	0x18, 4	; 24
     f68:	08 95       	ret

00000f6a <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     f6a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     f6c:	77 9b       	sbis	0x0e, 7	; 14
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <SPI_masterWrite+0x2>

}
     f70:	08 95       	ret

00000f72 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     f72:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     f74:	77 9b       	sbis	0x0e, 7	; 14
     f76:	fe cf       	rjmp	.-4      	; 0xf74 <SPI_masterRead+0x2>
	return SPDR;
     f78:	8f b1       	in	r24, 0x0f	; 15
}
     f7a:	08 95       	ret

00000f7c <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     f7c:	66 23       	and	r22, r22
     f7e:	69 f0       	breq	.+26     	; 0xf9a <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     f80:	48 b3       	in	r20, 0x18	; 24
     f82:	21 e0       	ldi	r18, 0x01	; 1
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	b9 01       	movw	r22, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <SPI_setChipSelect+0x12>
     f8a:	66 0f       	add	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	8a 95       	dec	r24
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <SPI_setChipSelect+0xe>
     f92:	cb 01       	movw	r24, r22
     f94:	84 2b       	or	r24, r20
     f96:	88 bb       	out	0x18, r24	; 24
     f98:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     f9a:	48 b3       	in	r20, 0x18	; 24
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	b9 01       	movw	r22, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <SPI_setChipSelect+0x2c>
     fa4:	66 0f       	add	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	8a 95       	dec	r24
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <SPI_setChipSelect+0x28>
     fac:	cb 01       	movw	r24, r22
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	88 bb       	out	0x18, r24	; 24
     fb4:	08 95       	ret

00000fb6 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	4f 93       	push	r20
     fc6:	5f 93       	push	r21
     fc8:	6f 93       	push	r22
     fca:	7f 93       	push	r23
     fcc:	8f 93       	push	r24
     fce:	9f 93       	push	r25
     fd0:	af 93       	push	r26
     fd2:	bf 93       	push	r27
     fd4:	ef 93       	push	r30
     fd6:	ff 93       	push	r31
	cli();
     fd8:	f8 94       	cli
	TCNT1 = 0x00;
     fda:	1d bc       	out	0x2d, r1	; 45
     fdc:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     fde:	81 ea       	ldi	r24, 0xA1	; 161
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	0e 94 bb 04 	call	0x976	; 0x976 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     fe6:	8b ea       	ldi	r24, 0xAB	; 171
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	0e 94 7b 07 	call	0xef6	; 0xef6 <slider_readPosition>
	touchButton_readButtons(&buttons);
     fee:	89 ea       	ldi	r24, 0xA9	; 169
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	0e 94 3a 08 	call	0x1074	; 0x1074 <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     ff6:	81 ea       	ldi	r24, 0xA1	; 161
     ff8:	92 e0       	ldi	r25, 0x02	; 2
     ffa:	0e 94 32 06 	call	0xc64	; 0xc64 <navigateMenu>
	menu_printCurrentMenu();
     ffe:	0e 94 94 06 	call	0xd28	; 0xd28 <menu_printCurrentMenu>
	sei();
    1002:	78 94       	sei
}
    1004:	ff 91       	pop	r31
    1006:	ef 91       	pop	r30
    1008:	bf 91       	pop	r27
    100a:	af 91       	pop	r26
    100c:	9f 91       	pop	r25
    100e:	8f 91       	pop	r24
    1010:	7f 91       	pop	r23
    1012:	6f 91       	pop	r22
    1014:	5f 91       	pop	r21
    1016:	4f 91       	pop	r20
    1018:	3f 91       	pop	r19
    101a:	2f 91       	pop	r18
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1026:	89 b7       	in	r24, 0x39	; 57
    1028:	80 62       	ori	r24, 0x20	; 32
    102a:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    102c:	1d bc       	out	0x2d, r1	; 45
    102e:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1030:	80 e3       	ldi	r24, 0x30	; 48
    1032:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1034:	85 e0       	ldi	r24, 0x05	; 5
    1036:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1038:	80 ef       	ldi	r24, 0xF0	; 240
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	99 bd       	out	0x29, r25	; 41
    103e:	88 bd       	out	0x28, r24	; 40
    1040:	08 95       	ret

00001042 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    1042:	36 b3       	in	r19, 0x16	; 22
    1044:	26 b3       	in	r18, 0x16	; 22
    1046:	47 b3       	in	r20, 0x17	; 23
    1048:	32 70       	andi	r19, 0x02	; 2
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	bc 01       	movw	r22, r24
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <touchButton_init+0x14>
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	3a 95       	dec	r19
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <touchButton_init+0x10>
    105a:	24 70       	andi	r18, 0x04	; 4
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <touchButton_init+0x20>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	2a 95       	dec	r18
    1064:	e2 f7       	brpl	.-8      	; 0x105e <touchButton_init+0x1c>
    1066:	86 2b       	or	r24, r22
    1068:	97 2b       	or	r25, r23
    106a:	80 95       	com	r24
    106c:	90 95       	com	r25
    106e:	84 23       	and	r24, r20
    1070:	87 bb       	out	0x17, r24	; 23
    1072:	08 95       	ret

00001074 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1074:	86 b3       	in	r24, 0x16	; 22
    1076:	e9 ea       	ldi	r30, 0xA9	; 169
    1078:	f2 e0       	ldi	r31, 0x02	; 2
    107a:	86 95       	lsr	r24
    107c:	81 70       	andi	r24, 0x01	; 1
    107e:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    1080:	86 b3       	in	r24, 0x16	; 22
    1082:	82 fb       	bst	r24, 2
    1084:	88 27       	eor	r24, r24
    1086:	80 f9       	bld	r24, 0
    1088:	81 83       	std	Z+1, r24	; 0x01
    108a:	08 95       	ret

0000108c <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    108c:	5d 9b       	sbis	0x0b, 5	; 11
    108e:	fe cf       	rjmp	.-4      	; 0x108c <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    1090:	8c b9       	out	0x0c, r24	; 12
    1092:	08 95       	ret

00001094 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    1094:	5f 9b       	sbis	0x0b, 7	; 11
    1096:	fe cf       	rjmp	.-4      	; 0x1094 <USART_receiveChar>
		;
	
	return UDR0;
    1098:	8c b1       	in	r24, 0x0c	; 12
    109a:	08 95       	ret

0000109c <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    109c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    109e:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    10a0:	88 e1       	ldi	r24, 0x18	; 24
    10a2:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    10a4:	8e e8       	ldi	r24, 0x8E	; 142
    10a6:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    10a8:	6a e4       	ldi	r22, 0x4A	; 74
    10aa:	78 e0       	ldi	r23, 0x08	; 8
    10ac:	86 e4       	ldi	r24, 0x46	; 70
    10ae:	98 e0       	ldi	r25, 0x08	; 8
    10b0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fdevopen>
    10b4:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <uart+0x1>
    10b8:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <uart>
    10bc:	08 95       	ret

000010be <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    10be:	85 b7       	in	r24, 0x35	; 53
    10c0:	80 68       	ori	r24, 0x80	; 128
    10c2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    10c4:	80 b7       	in	r24, 0x30	; 48
    10c6:	88 60       	ori	r24, 0x08	; 8
    10c8:	80 bf       	out	0x30, r24	; 48
    10ca:	08 95       	ret
    10cc:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_pscA>
    10d0:	60 f0       	brcs	.+24     	; 0x10ea <xmem_init+0x2c>
    10d2:	80 e8       	ldi	r24, 0x80	; 128
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	09 f4       	brne	.+2      	; 0x10da <xmem_init+0x1c>
    10d8:	9e ef       	ldi	r25, 0xFE	; 254
    10da:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscB>
    10de:	28 f0       	brcs	.+10     	; 0x10ea <xmem_init+0x2c>
    10e0:	40 e8       	ldi	r20, 0x80	; 128
    10e2:	51 e0       	ldi	r21, 0x01	; 1
    10e4:	71 f4       	brne	.+28     	; 0x1102 <atan2+0x10>
    10e6:	5e ef       	ldi	r21, 0xFE	; 254
    10e8:	0c c0       	rjmp	.+24     	; 0x1102 <atan2+0x10>
    10ea:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__fp_nan>
    10ee:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__fp_zero>

000010f2 <atan2>:
    10f2:	e9 2f       	mov	r30, r25
    10f4:	e0 78       	andi	r30, 0x80	; 128
    10f6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_split3>
    10fa:	40 f3       	brcs	.-48     	; 0x10cc <xmem_init+0xe>
    10fc:	09 2e       	mov	r0, r25
    10fe:	05 2a       	or	r0, r21
    1100:	b1 f3       	breq	.-20     	; 0x10ee <xmem_init+0x30>
    1102:	26 17       	cp	r18, r22
    1104:	37 07       	cpc	r19, r23
    1106:	48 07       	cpc	r20, r24
    1108:	59 07       	cpc	r21, r25
    110a:	38 f0       	brcs	.+14     	; 0x111a <atan2+0x28>
    110c:	0e 2e       	mov	r0, r30
    110e:	07 f8       	bld	r0, 7
    1110:	e0 25       	eor	r30, r0
    1112:	69 f0       	breq	.+26     	; 0x112e <atan2+0x3c>
    1114:	e0 25       	eor	r30, r0
    1116:	e0 64       	ori	r30, 0x40	; 64
    1118:	0a c0       	rjmp	.+20     	; 0x112e <atan2+0x3c>
    111a:	ef 63       	ori	r30, 0x3F	; 63
    111c:	07 f8       	bld	r0, 7
    111e:	00 94       	com	r0
    1120:	07 fa       	bst	r0, 7
    1122:	db 01       	movw	r26, r22
    1124:	b9 01       	movw	r22, r18
    1126:	9d 01       	movw	r18, r26
    1128:	dc 01       	movw	r26, r24
    112a:	ca 01       	movw	r24, r20
    112c:	ad 01       	movw	r20, r26
    112e:	ef 93       	push	r30
    1130:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3_pse>
    1134:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_round>
    1138:	0e 94 a9 08 	call	0x1152	; 0x1152 <atan>
    113c:	5f 91       	pop	r21
    113e:	55 23       	and	r21, r21
    1140:	39 f0       	breq	.+14     	; 0x1150 <atan2+0x5e>
    1142:	2b ed       	ldi	r18, 0xDB	; 219
    1144:	3f e0       	ldi	r19, 0x0F	; 15
    1146:	49 e4       	ldi	r20, 0x49	; 73
    1148:	50 fd       	sbrc	r21, 0
    114a:	49 ec       	ldi	r20, 0xC9	; 201
    114c:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__addsf3>
    1150:	08 95       	ret

00001152 <atan>:
    1152:	df 93       	push	r29
    1154:	dd 27       	eor	r29, r29
    1156:	b9 2f       	mov	r27, r25
    1158:	bf 77       	andi	r27, 0x7F	; 127
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	16 16       	cp	r1, r22
    1160:	17 06       	cpc	r1, r23
    1162:	48 07       	cpc	r20, r24
    1164:	5b 07       	cpc	r21, r27
    1166:	18 f4       	brcc	.+6      	; 0x116e <atan+0x1c>
    1168:	d9 2f       	mov	r29, r25
    116a:	0e 94 35 0a 	call	0x146a	; 0x146a <inverse>
    116e:	9f 93       	push	r25
    1170:	8f 93       	push	r24
    1172:	7f 93       	push	r23
    1174:	6f 93       	push	r22
    1176:	0e 94 aa 0a 	call	0x1554	; 0x1554 <square>
    117a:	e0 e7       	ldi	r30, 0x70	; 112
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	0e 94 c6 09 	call	0x138c	; 0x138c <__fp_powser>
    1182:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_round>
    1186:	2f 91       	pop	r18
    1188:	3f 91       	pop	r19
    118a:	4f 91       	pop	r20
    118c:	5f 91       	pop	r21
    118e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__mulsf3x>
    1192:	dd 23       	and	r29, r29
    1194:	51 f0       	breq	.+20     	; 0x11aa <atan+0x58>
    1196:	90 58       	subi	r25, 0x80	; 128
    1198:	a2 ea       	ldi	r26, 0xA2	; 162
    119a:	2a ed       	ldi	r18, 0xDA	; 218
    119c:	3f e0       	ldi	r19, 0x0F	; 15
    119e:	49 ec       	ldi	r20, 0xC9	; 201
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	d0 78       	andi	r29, 0x80	; 128
    11a4:	5d 27       	eor	r21, r29
    11a6:	0e 94 c6 0a 	call	0x158c	; 0x158c <__addsf3x>
    11aa:	df 91       	pop	r29
    11ac:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_round>

000011b0 <__divsf3>:
    11b0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divsf3x>
    11b4:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_round>
    11b8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscB>
    11bc:	58 f0       	brcs	.+22     	; 0x11d4 <__divsf3+0x24>
    11be:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_pscA>
    11c2:	40 f0       	brcs	.+16     	; 0x11d4 <__divsf3+0x24>
    11c4:	29 f4       	brne	.+10     	; 0x11d0 <__divsf3+0x20>
    11c6:	5f 3f       	cpi	r21, 0xFF	; 255
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <__divsf3+0x24>
    11ca:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__fp_inf>
    11ce:	51 11       	cpse	r21, r1
    11d0:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>
    11d4:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__fp_nan>

000011d8 <__divsf3x>:
    11d8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_split3>
    11dc:	68 f3       	brcs	.-38     	; 0x11b8 <__divsf3+0x8>

000011de <__divsf3_pse>:
    11de:	99 23       	and	r25, r25
    11e0:	b1 f3       	breq	.-20     	; 0x11ce <__divsf3+0x1e>
    11e2:	55 23       	and	r21, r21
    11e4:	91 f3       	breq	.-28     	; 0x11ca <__divsf3+0x1a>
    11e6:	95 1b       	sub	r25, r21
    11e8:	55 0b       	sbc	r21, r21
    11ea:	bb 27       	eor	r27, r27
    11ec:	aa 27       	eor	r26, r26
    11ee:	62 17       	cp	r22, r18
    11f0:	73 07       	cpc	r23, r19
    11f2:	84 07       	cpc	r24, r20
    11f4:	38 f0       	brcs	.+14     	; 0x1204 <__divsf3_pse+0x26>
    11f6:	9f 5f       	subi	r25, 0xFF	; 255
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	44 1f       	adc	r20, r20
    1200:	aa 1f       	adc	r26, r26
    1202:	a9 f3       	breq	.-22     	; 0x11ee <__divsf3_pse+0x10>
    1204:	35 d0       	rcall	.+106    	; 0x1270 <__divsf3_pse+0x92>
    1206:	0e 2e       	mov	r0, r30
    1208:	3a f0       	brmi	.+14     	; 0x1218 <__divsf3_pse+0x3a>
    120a:	e0 e8       	ldi	r30, 0x80	; 128
    120c:	32 d0       	rcall	.+100    	; 0x1272 <__divsf3_pse+0x94>
    120e:	91 50       	subi	r25, 0x01	; 1
    1210:	50 40       	sbci	r21, 0x00	; 0
    1212:	e6 95       	lsr	r30
    1214:	00 1c       	adc	r0, r0
    1216:	ca f7       	brpl	.-14     	; 0x120a <__divsf3_pse+0x2c>
    1218:	2b d0       	rcall	.+86     	; 0x1270 <__divsf3_pse+0x92>
    121a:	fe 2f       	mov	r31, r30
    121c:	29 d0       	rcall	.+82     	; 0x1270 <__divsf3_pse+0x92>
    121e:	66 0f       	add	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	bb 1f       	adc	r27, r27
    1226:	26 17       	cp	r18, r22
    1228:	37 07       	cpc	r19, r23
    122a:	48 07       	cpc	r20, r24
    122c:	ab 07       	cpc	r26, r27
    122e:	b0 e8       	ldi	r27, 0x80	; 128
    1230:	09 f0       	breq	.+2      	; 0x1234 <__divsf3_pse+0x56>
    1232:	bb 0b       	sbc	r27, r27
    1234:	80 2d       	mov	r24, r0
    1236:	bf 01       	movw	r22, r30
    1238:	ff 27       	eor	r31, r31
    123a:	93 58       	subi	r25, 0x83	; 131
    123c:	5f 4f       	sbci	r21, 0xFF	; 255
    123e:	3a f0       	brmi	.+14     	; 0x124e <__divsf3_pse+0x70>
    1240:	9e 3f       	cpi	r25, 0xFE	; 254
    1242:	51 05       	cpc	r21, r1
    1244:	78 f0       	brcs	.+30     	; 0x1264 <__divsf3_pse+0x86>
    1246:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__fp_inf>
    124a:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>
    124e:	5f 3f       	cpi	r21, 0xFF	; 255
    1250:	e4 f3       	brlt	.-8      	; 0x124a <__divsf3_pse+0x6c>
    1252:	98 3e       	cpi	r25, 0xE8	; 232
    1254:	d4 f3       	brlt	.-12     	; 0x124a <__divsf3_pse+0x6c>
    1256:	86 95       	lsr	r24
    1258:	77 95       	ror	r23
    125a:	67 95       	ror	r22
    125c:	b7 95       	ror	r27
    125e:	f7 95       	ror	r31
    1260:	9f 5f       	subi	r25, 0xFF	; 255
    1262:	c9 f7       	brne	.-14     	; 0x1256 <__divsf3_pse+0x78>
    1264:	88 0f       	add	r24, r24
    1266:	91 1d       	adc	r25, r1
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret
    1270:	e1 e0       	ldi	r30, 0x01	; 1
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	bb 1f       	adc	r27, r27
    127a:	62 17       	cp	r22, r18
    127c:	73 07       	cpc	r23, r19
    127e:	84 07       	cpc	r24, r20
    1280:	ba 07       	cpc	r27, r26
    1282:	20 f0       	brcs	.+8      	; 0x128c <__divsf3_pse+0xae>
    1284:	62 1b       	sub	r22, r18
    1286:	73 0b       	sbc	r23, r19
    1288:	84 0b       	sbc	r24, r20
    128a:	ba 0b       	sbc	r27, r26
    128c:	ee 1f       	adc	r30, r30
    128e:	88 f7       	brcc	.-30     	; 0x1272 <__divsf3_pse+0x94>
    1290:	e0 95       	com	r30
    1292:	08 95       	ret

00001294 <__fixsfsi>:
    1294:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fixunssfsi>
    1298:	68 94       	set
    129a:	b1 11       	cpse	r27, r1
    129c:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>
    12a0:	08 95       	ret

000012a2 <__fixunssfsi>:
    12a2:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fp_splitA>
    12a6:	88 f0       	brcs	.+34     	; 0x12ca <__fixunssfsi+0x28>
    12a8:	9f 57       	subi	r25, 0x7F	; 127
    12aa:	98 f0       	brcs	.+38     	; 0x12d2 <__fixunssfsi+0x30>
    12ac:	b9 2f       	mov	r27, r25
    12ae:	99 27       	eor	r25, r25
    12b0:	b7 51       	subi	r27, 0x17	; 23
    12b2:	b0 f0       	brcs	.+44     	; 0x12e0 <__fixunssfsi+0x3e>
    12b4:	e1 f0       	breq	.+56     	; 0x12ee <__fixunssfsi+0x4c>
    12b6:	66 0f       	add	r22, r22
    12b8:	77 1f       	adc	r23, r23
    12ba:	88 1f       	adc	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	1a f0       	brmi	.+6      	; 0x12c6 <__fixunssfsi+0x24>
    12c0:	ba 95       	dec	r27
    12c2:	c9 f7       	brne	.-14     	; 0x12b6 <__fixunssfsi+0x14>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <__fixunssfsi+0x4c>
    12c6:	b1 30       	cpi	r27, 0x01	; 1
    12c8:	91 f0       	breq	.+36     	; 0x12ee <__fixunssfsi+0x4c>
    12ca:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_zero>
    12ce:	b1 e0       	ldi	r27, 0x01	; 1
    12d0:	08 95       	ret
    12d2:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__fp_zero>
    12d6:	67 2f       	mov	r22, r23
    12d8:	78 2f       	mov	r23, r24
    12da:	88 27       	eor	r24, r24
    12dc:	b8 5f       	subi	r27, 0xF8	; 248
    12de:	39 f0       	breq	.+14     	; 0x12ee <__fixunssfsi+0x4c>
    12e0:	b9 3f       	cpi	r27, 0xF9	; 249
    12e2:	cc f3       	brlt	.-14     	; 0x12d6 <__fixunssfsi+0x34>
    12e4:	86 95       	lsr	r24
    12e6:	77 95       	ror	r23
    12e8:	67 95       	ror	r22
    12ea:	b3 95       	inc	r27
    12ec:	d9 f7       	brne	.-10     	; 0x12e4 <__fixunssfsi+0x42>
    12ee:	3e f4       	brtc	.+14     	; 0x12fe <__fixunssfsi+0x5c>
    12f0:	90 95       	com	r25
    12f2:	80 95       	com	r24
    12f4:	70 95       	com	r23
    12f6:	61 95       	neg	r22
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	8f 4f       	sbci	r24, 0xFF	; 255
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	08 95       	ret

00001300 <__floatunsisf>:
    1300:	e8 94       	clt
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <__floatsisf+0x12>

00001304 <__floatsisf>:
    1304:	97 fb       	bst	r25, 7
    1306:	3e f4       	brtc	.+14     	; 0x1316 <__floatsisf+0x12>
    1308:	90 95       	com	r25
    130a:	80 95       	com	r24
    130c:	70 95       	com	r23
    130e:	61 95       	neg	r22
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	8f 4f       	sbci	r24, 0xFF	; 255
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	99 23       	and	r25, r25
    1318:	a9 f0       	breq	.+42     	; 0x1344 <__floatsisf+0x40>
    131a:	f9 2f       	mov	r31, r25
    131c:	96 e9       	ldi	r25, 0x96	; 150
    131e:	bb 27       	eor	r27, r27
    1320:	93 95       	inc	r25
    1322:	f6 95       	lsr	r31
    1324:	87 95       	ror	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	b7 95       	ror	r27
    132c:	f1 11       	cpse	r31, r1
    132e:	f8 cf       	rjmp	.-16     	; 0x1320 <__floatsisf+0x1c>
    1330:	fa f4       	brpl	.+62     	; 0x1370 <__floatsisf+0x6c>
    1332:	bb 0f       	add	r27, r27
    1334:	11 f4       	brne	.+4      	; 0x133a <__floatsisf+0x36>
    1336:	60 ff       	sbrs	r22, 0
    1338:	1b c0       	rjmp	.+54     	; 0x1370 <__floatsisf+0x6c>
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	8f 4f       	sbci	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	16 c0       	rjmp	.+44     	; 0x1370 <__floatsisf+0x6c>
    1344:	88 23       	and	r24, r24
    1346:	11 f0       	breq	.+4      	; 0x134c <__floatsisf+0x48>
    1348:	96 e9       	ldi	r25, 0x96	; 150
    134a:	11 c0       	rjmp	.+34     	; 0x136e <__floatsisf+0x6a>
    134c:	77 23       	and	r23, r23
    134e:	21 f0       	breq	.+8      	; 0x1358 <__floatsisf+0x54>
    1350:	9e e8       	ldi	r25, 0x8E	; 142
    1352:	87 2f       	mov	r24, r23
    1354:	76 2f       	mov	r23, r22
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <__floatsisf+0x5e>
    1358:	66 23       	and	r22, r22
    135a:	71 f0       	breq	.+28     	; 0x1378 <__floatsisf+0x74>
    135c:	96 e8       	ldi	r25, 0x86	; 134
    135e:	86 2f       	mov	r24, r22
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	2a f0       	brmi	.+10     	; 0x1370 <__floatsisf+0x6c>
    1366:	9a 95       	dec	r25
    1368:	66 0f       	add	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	88 1f       	adc	r24, r24
    136e:	da f7       	brpl	.-10     	; 0x1366 <__floatsisf+0x62>
    1370:	88 0f       	add	r24, r24
    1372:	96 95       	lsr	r25
    1374:	87 95       	ror	r24
    1376:	97 f9       	bld	r25, 7
    1378:	08 95       	ret

0000137a <__fp_inf>:
    137a:	97 f9       	bld	r25, 7
    137c:	9f 67       	ori	r25, 0x7F	; 127
    137e:	80 e8       	ldi	r24, 0x80	; 128
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	08 95       	ret

00001386 <__fp_nan>:
    1386:	9f ef       	ldi	r25, 0xFF	; 255
    1388:	80 ec       	ldi	r24, 0xC0	; 192
    138a:	08 95       	ret

0000138c <__fp_powser>:
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	1f 93       	push	r17
    1392:	0f 93       	push	r16
    1394:	ff 92       	push	r15
    1396:	ef 92       	push	r14
    1398:	df 92       	push	r13
    139a:	7b 01       	movw	r14, r22
    139c:	8c 01       	movw	r16, r24
    139e:	68 94       	set
    13a0:	06 c0       	rjmp	.+12     	; 0x13ae <__fp_powser+0x22>
    13a2:	da 2e       	mov	r13, r26
    13a4:	ef 01       	movw	r28, r30
    13a6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__mulsf3x>
    13aa:	fe 01       	movw	r30, r28
    13ac:	e8 94       	clt
    13ae:	a5 91       	lpm	r26, Z+
    13b0:	25 91       	lpm	r18, Z+
    13b2:	35 91       	lpm	r19, Z+
    13b4:	45 91       	lpm	r20, Z+
    13b6:	55 91       	lpm	r21, Z+
    13b8:	a6 f3       	brts	.-24     	; 0x13a2 <__fp_powser+0x16>
    13ba:	ef 01       	movw	r28, r30
    13bc:	0e 94 c6 0a 	call	0x158c	; 0x158c <__addsf3x>
    13c0:	fe 01       	movw	r30, r28
    13c2:	97 01       	movw	r18, r14
    13c4:	a8 01       	movw	r20, r16
    13c6:	da 94       	dec	r13
    13c8:	69 f7       	brne	.-38     	; 0x13a4 <__fp_powser+0x18>
    13ca:	df 90       	pop	r13
    13cc:	ef 90       	pop	r14
    13ce:	ff 90       	pop	r15
    13d0:	0f 91       	pop	r16
    13d2:	1f 91       	pop	r17
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <__fp_pscA>:
    13da:	00 24       	eor	r0, r0
    13dc:	0a 94       	dec	r0
    13de:	16 16       	cp	r1, r22
    13e0:	17 06       	cpc	r1, r23
    13e2:	18 06       	cpc	r1, r24
    13e4:	09 06       	cpc	r0, r25
    13e6:	08 95       	ret

000013e8 <__fp_pscB>:
    13e8:	00 24       	eor	r0, r0
    13ea:	0a 94       	dec	r0
    13ec:	12 16       	cp	r1, r18
    13ee:	13 06       	cpc	r1, r19
    13f0:	14 06       	cpc	r1, r20
    13f2:	05 06       	cpc	r0, r21
    13f4:	08 95       	ret

000013f6 <__fp_round>:
    13f6:	09 2e       	mov	r0, r25
    13f8:	03 94       	inc	r0
    13fa:	00 0c       	add	r0, r0
    13fc:	11 f4       	brne	.+4      	; 0x1402 <__fp_round+0xc>
    13fe:	88 23       	and	r24, r24
    1400:	52 f0       	brmi	.+20     	; 0x1416 <__fp_round+0x20>
    1402:	bb 0f       	add	r27, r27
    1404:	40 f4       	brcc	.+16     	; 0x1416 <__fp_round+0x20>
    1406:	bf 2b       	or	r27, r31
    1408:	11 f4       	brne	.+4      	; 0x140e <__fp_round+0x18>
    140a:	60 ff       	sbrs	r22, 0
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <__fp_round+0x20>
    140e:	6f 5f       	subi	r22, 0xFF	; 255
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	8f 4f       	sbci	r24, 0xFF	; 255
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	08 95       	ret

00001418 <__fp_split3>:
    1418:	57 fd       	sbrc	r21, 7
    141a:	90 58       	subi	r25, 0x80	; 128
    141c:	44 0f       	add	r20, r20
    141e:	55 1f       	adc	r21, r21
    1420:	59 f0       	breq	.+22     	; 0x1438 <__fp_splitA+0x10>
    1422:	5f 3f       	cpi	r21, 0xFF	; 255
    1424:	71 f0       	breq	.+28     	; 0x1442 <__fp_splitA+0x1a>
    1426:	47 95       	ror	r20

00001428 <__fp_splitA>:
    1428:	88 0f       	add	r24, r24
    142a:	97 fb       	bst	r25, 7
    142c:	99 1f       	adc	r25, r25
    142e:	61 f0       	breq	.+24     	; 0x1448 <__fp_splitA+0x20>
    1430:	9f 3f       	cpi	r25, 0xFF	; 255
    1432:	79 f0       	breq	.+30     	; 0x1452 <__fp_splitA+0x2a>
    1434:	87 95       	ror	r24
    1436:	08 95       	ret
    1438:	12 16       	cp	r1, r18
    143a:	13 06       	cpc	r1, r19
    143c:	14 06       	cpc	r1, r20
    143e:	55 1f       	adc	r21, r21
    1440:	f2 cf       	rjmp	.-28     	; 0x1426 <__fp_split3+0xe>
    1442:	46 95       	lsr	r20
    1444:	f1 df       	rcall	.-30     	; 0x1428 <__fp_splitA>
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <__fp_splitA+0x30>
    1448:	16 16       	cp	r1, r22
    144a:	17 06       	cpc	r1, r23
    144c:	18 06       	cpc	r1, r24
    144e:	99 1f       	adc	r25, r25
    1450:	f1 cf       	rjmp	.-30     	; 0x1434 <__fp_splitA+0xc>
    1452:	86 95       	lsr	r24
    1454:	71 05       	cpc	r23, r1
    1456:	61 05       	cpc	r22, r1
    1458:	08 94       	sec
    145a:	08 95       	ret

0000145c <__fp_zero>:
    145c:	e8 94       	clt

0000145e <__fp_szero>:
    145e:	bb 27       	eor	r27, r27
    1460:	66 27       	eor	r22, r22
    1462:	77 27       	eor	r23, r23
    1464:	cb 01       	movw	r24, r22
    1466:	97 f9       	bld	r25, 7
    1468:	08 95       	ret

0000146a <inverse>:
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	80 e8       	ldi	r24, 0x80	; 128
    1474:	9f e3       	ldi	r25, 0x3F	; 63
    1476:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__divsf3>

0000147a <__mulsf3>:
    147a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__mulsf3x>
    147e:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_round>
    1482:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_pscA>
    1486:	38 f0       	brcs	.+14     	; 0x1496 <__mulsf3+0x1c>
    1488:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscB>
    148c:	20 f0       	brcs	.+8      	; 0x1496 <__mulsf3+0x1c>
    148e:	95 23       	and	r25, r21
    1490:	11 f0       	breq	.+4      	; 0x1496 <__mulsf3+0x1c>
    1492:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__fp_inf>
    1496:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__fp_nan>
    149a:	11 24       	eor	r1, r1
    149c:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>

000014a0 <__mulsf3x>:
    14a0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_split3>
    14a4:	70 f3       	brcs	.-36     	; 0x1482 <__mulsf3+0x8>

000014a6 <__mulsf3_pse>:
    14a6:	95 9f       	mul	r25, r21
    14a8:	c1 f3       	breq	.-16     	; 0x149a <__mulsf3+0x20>
    14aa:	95 0f       	add	r25, r21
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	55 1f       	adc	r21, r21
    14b0:	62 9f       	mul	r22, r18
    14b2:	f0 01       	movw	r30, r0
    14b4:	72 9f       	mul	r23, r18
    14b6:	bb 27       	eor	r27, r27
    14b8:	f0 0d       	add	r31, r0
    14ba:	b1 1d       	adc	r27, r1
    14bc:	63 9f       	mul	r22, r19
    14be:	aa 27       	eor	r26, r26
    14c0:	f0 0d       	add	r31, r0
    14c2:	b1 1d       	adc	r27, r1
    14c4:	aa 1f       	adc	r26, r26
    14c6:	64 9f       	mul	r22, r20
    14c8:	66 27       	eor	r22, r22
    14ca:	b0 0d       	add	r27, r0
    14cc:	a1 1d       	adc	r26, r1
    14ce:	66 1f       	adc	r22, r22
    14d0:	82 9f       	mul	r24, r18
    14d2:	22 27       	eor	r18, r18
    14d4:	b0 0d       	add	r27, r0
    14d6:	a1 1d       	adc	r26, r1
    14d8:	62 1f       	adc	r22, r18
    14da:	73 9f       	mul	r23, r19
    14dc:	b0 0d       	add	r27, r0
    14de:	a1 1d       	adc	r26, r1
    14e0:	62 1f       	adc	r22, r18
    14e2:	83 9f       	mul	r24, r19
    14e4:	a0 0d       	add	r26, r0
    14e6:	61 1d       	adc	r22, r1
    14e8:	22 1f       	adc	r18, r18
    14ea:	74 9f       	mul	r23, r20
    14ec:	33 27       	eor	r19, r19
    14ee:	a0 0d       	add	r26, r0
    14f0:	61 1d       	adc	r22, r1
    14f2:	23 1f       	adc	r18, r19
    14f4:	84 9f       	mul	r24, r20
    14f6:	60 0d       	add	r22, r0
    14f8:	21 1d       	adc	r18, r1
    14fa:	82 2f       	mov	r24, r18
    14fc:	76 2f       	mov	r23, r22
    14fe:	6a 2f       	mov	r22, r26
    1500:	11 24       	eor	r1, r1
    1502:	9f 57       	subi	r25, 0x7F	; 127
    1504:	50 40       	sbci	r21, 0x00	; 0
    1506:	9a f0       	brmi	.+38     	; 0x152e <__mulsf3_pse+0x88>
    1508:	f1 f0       	breq	.+60     	; 0x1546 <__mulsf3_pse+0xa0>
    150a:	88 23       	and	r24, r24
    150c:	4a f0       	brmi	.+18     	; 0x1520 <__mulsf3_pse+0x7a>
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	bb 1f       	adc	r27, r27
    1514:	66 1f       	adc	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	91 50       	subi	r25, 0x01	; 1
    151c:	50 40       	sbci	r21, 0x00	; 0
    151e:	a9 f7       	brne	.-22     	; 0x150a <__mulsf3_pse+0x64>
    1520:	9e 3f       	cpi	r25, 0xFE	; 254
    1522:	51 05       	cpc	r21, r1
    1524:	80 f0       	brcs	.+32     	; 0x1546 <__mulsf3_pse+0xa0>
    1526:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__fp_inf>
    152a:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>
    152e:	5f 3f       	cpi	r21, 0xFF	; 255
    1530:	e4 f3       	brlt	.-8      	; 0x152a <__mulsf3_pse+0x84>
    1532:	98 3e       	cpi	r25, 0xE8	; 232
    1534:	d4 f3       	brlt	.-12     	; 0x152a <__mulsf3_pse+0x84>
    1536:	86 95       	lsr	r24
    1538:	77 95       	ror	r23
    153a:	67 95       	ror	r22
    153c:	b7 95       	ror	r27
    153e:	f7 95       	ror	r31
    1540:	e7 95       	ror	r30
    1542:	9f 5f       	subi	r25, 0xFF	; 255
    1544:	c1 f7       	brne	.-16     	; 0x1536 <__mulsf3_pse+0x90>
    1546:	fe 2b       	or	r31, r30
    1548:	88 0f       	add	r24, r24
    154a:	91 1d       	adc	r25, r1
    154c:	96 95       	lsr	r25
    154e:	87 95       	ror	r24
    1550:	97 f9       	bld	r25, 7
    1552:	08 95       	ret

00001554 <square>:
    1554:	9b 01       	movw	r18, r22
    1556:	ac 01       	movw	r20, r24
    1558:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__mulsf3>

0000155c <__subsf3>:
    155c:	50 58       	subi	r21, 0x80	; 128

0000155e <__addsf3>:
    155e:	bb 27       	eor	r27, r27
    1560:	aa 27       	eor	r26, r26
    1562:	0e 94 c6 0a 	call	0x158c	; 0x158c <__addsf3x>
    1566:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_round>
    156a:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_pscA>
    156e:	38 f0       	brcs	.+14     	; 0x157e <__addsf3+0x20>
    1570:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscB>
    1574:	20 f0       	brcs	.+8      	; 0x157e <__addsf3+0x20>
    1576:	39 f4       	brne	.+14     	; 0x1586 <__addsf3+0x28>
    1578:	9f 3f       	cpi	r25, 0xFF	; 255
    157a:	19 f4       	brne	.+6      	; 0x1582 <__addsf3+0x24>
    157c:	26 f4       	brtc	.+8      	; 0x1586 <__addsf3+0x28>
    157e:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__fp_nan>
    1582:	0e f4       	brtc	.+2      	; 0x1586 <__addsf3+0x28>
    1584:	e0 95       	com	r30
    1586:	e7 fb       	bst	r30, 7
    1588:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__fp_inf>

0000158c <__addsf3x>:
    158c:	e9 2f       	mov	r30, r25
    158e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_split3>
    1592:	58 f3       	brcs	.-42     	; 0x156a <__addsf3+0xc>
    1594:	ba 17       	cp	r27, r26
    1596:	62 07       	cpc	r22, r18
    1598:	73 07       	cpc	r23, r19
    159a:	84 07       	cpc	r24, r20
    159c:	95 07       	cpc	r25, r21
    159e:	20 f0       	brcs	.+8      	; 0x15a8 <__addsf3x+0x1c>
    15a0:	79 f4       	brne	.+30     	; 0x15c0 <__addsf3x+0x34>
    15a2:	a6 f5       	brtc	.+104    	; 0x160c <__addsf3x+0x80>
    15a4:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__fp_zero>
    15a8:	0e f4       	brtc	.+2      	; 0x15ac <__addsf3x+0x20>
    15aa:	e0 95       	com	r30
    15ac:	0b 2e       	mov	r0, r27
    15ae:	ba 2f       	mov	r27, r26
    15b0:	a0 2d       	mov	r26, r0
    15b2:	0b 01       	movw	r0, r22
    15b4:	b9 01       	movw	r22, r18
    15b6:	90 01       	movw	r18, r0
    15b8:	0c 01       	movw	r0, r24
    15ba:	ca 01       	movw	r24, r20
    15bc:	a0 01       	movw	r20, r0
    15be:	11 24       	eor	r1, r1
    15c0:	ff 27       	eor	r31, r31
    15c2:	59 1b       	sub	r21, r25
    15c4:	99 f0       	breq	.+38     	; 0x15ec <__addsf3x+0x60>
    15c6:	59 3f       	cpi	r21, 0xF9	; 249
    15c8:	50 f4       	brcc	.+20     	; 0x15de <__addsf3x+0x52>
    15ca:	50 3e       	cpi	r21, 0xE0	; 224
    15cc:	68 f1       	brcs	.+90     	; 0x1628 <__addsf3x+0x9c>
    15ce:	1a 16       	cp	r1, r26
    15d0:	f0 40       	sbci	r31, 0x00	; 0
    15d2:	a2 2f       	mov	r26, r18
    15d4:	23 2f       	mov	r18, r19
    15d6:	34 2f       	mov	r19, r20
    15d8:	44 27       	eor	r20, r20
    15da:	58 5f       	subi	r21, 0xF8	; 248
    15dc:	f3 cf       	rjmp	.-26     	; 0x15c4 <__addsf3x+0x38>
    15de:	46 95       	lsr	r20
    15e0:	37 95       	ror	r19
    15e2:	27 95       	ror	r18
    15e4:	a7 95       	ror	r26
    15e6:	f0 40       	sbci	r31, 0x00	; 0
    15e8:	53 95       	inc	r21
    15ea:	c9 f7       	brne	.-14     	; 0x15de <__addsf3x+0x52>
    15ec:	7e f4       	brtc	.+30     	; 0x160c <__addsf3x+0x80>
    15ee:	1f 16       	cp	r1, r31
    15f0:	ba 0b       	sbc	r27, r26
    15f2:	62 0b       	sbc	r22, r18
    15f4:	73 0b       	sbc	r23, r19
    15f6:	84 0b       	sbc	r24, r20
    15f8:	ba f0       	brmi	.+46     	; 0x1628 <__addsf3x+0x9c>
    15fa:	91 50       	subi	r25, 0x01	; 1
    15fc:	a1 f0       	breq	.+40     	; 0x1626 <__addsf3x+0x9a>
    15fe:	ff 0f       	add	r31, r31
    1600:	bb 1f       	adc	r27, r27
    1602:	66 1f       	adc	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	88 1f       	adc	r24, r24
    1608:	c2 f7       	brpl	.-16     	; 0x15fa <__addsf3x+0x6e>
    160a:	0e c0       	rjmp	.+28     	; 0x1628 <__addsf3x+0x9c>
    160c:	ba 0f       	add	r27, r26
    160e:	62 1f       	adc	r22, r18
    1610:	73 1f       	adc	r23, r19
    1612:	84 1f       	adc	r24, r20
    1614:	48 f4       	brcc	.+18     	; 0x1628 <__addsf3x+0x9c>
    1616:	87 95       	ror	r24
    1618:	77 95       	ror	r23
    161a:	67 95       	ror	r22
    161c:	b7 95       	ror	r27
    161e:	f7 95       	ror	r31
    1620:	9e 3f       	cpi	r25, 0xFE	; 254
    1622:	08 f0       	brcs	.+2      	; 0x1626 <__addsf3x+0x9a>
    1624:	b0 cf       	rjmp	.-160    	; 0x1586 <__addsf3+0x28>
    1626:	93 95       	inc	r25
    1628:	88 0f       	add	r24, r24
    162a:	08 f0       	brcs	.+2      	; 0x162e <__addsf3x+0xa2>
    162c:	99 27       	eor	r25, r25
    162e:	ee 0f       	add	r30, r30
    1630:	97 95       	ror	r25
    1632:	87 95       	ror	r24
    1634:	08 95       	ret

00001636 <__divmodhi4>:
    1636:	97 fb       	bst	r25, 7
    1638:	07 2e       	mov	r0, r23
    163a:	16 f4       	brtc	.+4      	; 0x1640 <__divmodhi4+0xa>
    163c:	00 94       	com	r0
    163e:	07 d0       	rcall	.+14     	; 0x164e <__divmodhi4_neg1>
    1640:	77 fd       	sbrc	r23, 7
    1642:	09 d0       	rcall	.+18     	; 0x1656 <__divmodhi4_neg2>
    1644:	0e 94 2f 0b 	call	0x165e	; 0x165e <__udivmodhi4>
    1648:	07 fc       	sbrc	r0, 7
    164a:	05 d0       	rcall	.+10     	; 0x1656 <__divmodhi4_neg2>
    164c:	3e f4       	brtc	.+14     	; 0x165c <__divmodhi4_exit>

0000164e <__divmodhi4_neg1>:
    164e:	90 95       	com	r25
    1650:	81 95       	neg	r24
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	08 95       	ret

00001656 <__divmodhi4_neg2>:
    1656:	70 95       	com	r23
    1658:	61 95       	neg	r22
    165a:	7f 4f       	sbci	r23, 0xFF	; 255

0000165c <__divmodhi4_exit>:
    165c:	08 95       	ret

0000165e <__udivmodhi4>:
    165e:	aa 1b       	sub	r26, r26
    1660:	bb 1b       	sub	r27, r27
    1662:	51 e1       	ldi	r21, 0x11	; 17
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <__udivmodhi4_ep>

00001666 <__udivmodhi4_loop>:
    1666:	aa 1f       	adc	r26, r26
    1668:	bb 1f       	adc	r27, r27
    166a:	a6 17       	cp	r26, r22
    166c:	b7 07       	cpc	r27, r23
    166e:	10 f0       	brcs	.+4      	; 0x1674 <__udivmodhi4_ep>
    1670:	a6 1b       	sub	r26, r22
    1672:	b7 0b       	sbc	r27, r23

00001674 <__udivmodhi4_ep>:
    1674:	88 1f       	adc	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	5a 95       	dec	r21
    167a:	a9 f7       	brne	.-22     	; 0x1666 <__udivmodhi4_loop>
    167c:	80 95       	com	r24
    167e:	90 95       	com	r25
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	08 95       	ret

00001686 <malloc>:
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	91 05       	cpc	r25, r1
    1692:	10 f4       	brcc	.+4      	; 0x1698 <malloc+0x12>
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <__flp>
    169c:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <__flp+0x1>
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	30 97       	sbiw	r30, 0x00	; 0
    16aa:	19 f1       	breq	.+70     	; 0x16f2 <malloc+0x6c>
    16ac:	40 81       	ld	r20, Z
    16ae:	51 81       	ldd	r21, Z+1	; 0x01
    16b0:	02 81       	ldd	r16, Z+2	; 0x02
    16b2:	13 81       	ldd	r17, Z+3	; 0x03
    16b4:	48 17       	cp	r20, r24
    16b6:	59 07       	cpc	r21, r25
    16b8:	c8 f0       	brcs	.+50     	; 0x16ec <malloc+0x66>
    16ba:	84 17       	cp	r24, r20
    16bc:	95 07       	cpc	r25, r21
    16be:	69 f4       	brne	.+26     	; 0x16da <malloc+0x54>
    16c0:	10 97       	sbiw	r26, 0x00	; 0
    16c2:	31 f0       	breq	.+12     	; 0x16d0 <malloc+0x4a>
    16c4:	12 96       	adiw	r26, 0x02	; 2
    16c6:	0c 93       	st	X, r16
    16c8:	12 97       	sbiw	r26, 0x02	; 2
    16ca:	13 96       	adiw	r26, 0x03	; 3
    16cc:	1c 93       	st	X, r17
    16ce:	27 c0       	rjmp	.+78     	; 0x171e <malloc+0x98>
    16d0:	00 93 be 02 	sts	0x02BE, r16	; 0x8002be <__flp>
    16d4:	10 93 bf 02 	sts	0x02BF, r17	; 0x8002bf <__flp+0x1>
    16d8:	22 c0       	rjmp	.+68     	; 0x171e <malloc+0x98>
    16da:	21 15       	cp	r18, r1
    16dc:	31 05       	cpc	r19, r1
    16de:	19 f0       	breq	.+6      	; 0x16e6 <malloc+0x60>
    16e0:	42 17       	cp	r20, r18
    16e2:	53 07       	cpc	r21, r19
    16e4:	18 f4       	brcc	.+6      	; 0x16ec <malloc+0x66>
    16e6:	9a 01       	movw	r18, r20
    16e8:	bd 01       	movw	r22, r26
    16ea:	ef 01       	movw	r28, r30
    16ec:	df 01       	movw	r26, r30
    16ee:	f8 01       	movw	r30, r16
    16f0:	db cf       	rjmp	.-74     	; 0x16a8 <malloc+0x22>
    16f2:	21 15       	cp	r18, r1
    16f4:	31 05       	cpc	r19, r1
    16f6:	f9 f0       	breq	.+62     	; 0x1736 <malloc+0xb0>
    16f8:	28 1b       	sub	r18, r24
    16fa:	39 0b       	sbc	r19, r25
    16fc:	24 30       	cpi	r18, 0x04	; 4
    16fe:	31 05       	cpc	r19, r1
    1700:	80 f4       	brcc	.+32     	; 0x1722 <malloc+0x9c>
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	9b 81       	ldd	r25, Y+3	; 0x03
    1706:	61 15       	cp	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	21 f0       	breq	.+8      	; 0x1714 <malloc+0x8e>
    170c:	fb 01       	movw	r30, r22
    170e:	93 83       	std	Z+3, r25	; 0x03
    1710:	82 83       	std	Z+2, r24	; 0x02
    1712:	04 c0       	rjmp	.+8      	; 0x171c <malloc+0x96>
    1714:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <__flp+0x1>
    1718:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <__flp>
    171c:	fe 01       	movw	r30, r28
    171e:	32 96       	adiw	r30, 0x02	; 2
    1720:	44 c0       	rjmp	.+136    	; 0x17aa <malloc+0x124>
    1722:	fe 01       	movw	r30, r28
    1724:	e2 0f       	add	r30, r18
    1726:	f3 1f       	adc	r31, r19
    1728:	81 93       	st	Z+, r24
    172a:	91 93       	st	Z+, r25
    172c:	22 50       	subi	r18, 0x02	; 2
    172e:	31 09       	sbc	r19, r1
    1730:	39 83       	std	Y+1, r19	; 0x01
    1732:	28 83       	st	Y, r18
    1734:	3a c0       	rjmp	.+116    	; 0x17aa <malloc+0x124>
    1736:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
    173a:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
    173e:	23 2b       	or	r18, r19
    1740:	41 f4       	brne	.+16     	; 0x1752 <malloc+0xcc>
    1742:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1746:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    174a:	30 93 bd 02 	sts	0x02BD, r19	; 0x8002bd <__brkval+0x1>
    174e:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <__brkval>
    1752:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1756:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    175a:	21 15       	cp	r18, r1
    175c:	31 05       	cpc	r19, r1
    175e:	41 f4       	brne	.+16     	; 0x1770 <malloc+0xea>
    1760:	2d b7       	in	r18, 0x3d	; 61
    1762:	3e b7       	in	r19, 0x3e	; 62
    1764:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1768:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    176c:	24 1b       	sub	r18, r20
    176e:	35 0b       	sbc	r19, r21
    1770:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <__brkval>
    1774:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <__brkval+0x1>
    1778:	e2 17       	cp	r30, r18
    177a:	f3 07       	cpc	r31, r19
    177c:	a0 f4       	brcc	.+40     	; 0x17a6 <malloc+0x120>
    177e:	2e 1b       	sub	r18, r30
    1780:	3f 0b       	sbc	r19, r31
    1782:	28 17       	cp	r18, r24
    1784:	39 07       	cpc	r19, r25
    1786:	78 f0       	brcs	.+30     	; 0x17a6 <malloc+0x120>
    1788:	ac 01       	movw	r20, r24
    178a:	4e 5f       	subi	r20, 0xFE	; 254
    178c:	5f 4f       	sbci	r21, 0xFF	; 255
    178e:	24 17       	cp	r18, r20
    1790:	35 07       	cpc	r19, r21
    1792:	48 f0       	brcs	.+18     	; 0x17a6 <malloc+0x120>
    1794:	4e 0f       	add	r20, r30
    1796:	5f 1f       	adc	r21, r31
    1798:	50 93 bd 02 	sts	0x02BD, r21	; 0x8002bd <__brkval+0x1>
    179c:	40 93 bc 02 	sts	0x02BC, r20	; 0x8002bc <__brkval>
    17a0:	81 93       	st	Z+, r24
    17a2:	91 93       	st	Z+, r25
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <malloc+0x124>
    17a6:	e0 e0       	ldi	r30, 0x00	; 0
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	cf 01       	movw	r24, r30
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

000017b6 <free>:
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <free+0xa>
    17be:	81 c0       	rjmp	.+258    	; 0x18c2 <free+0x10c>
    17c0:	fc 01       	movw	r30, r24
    17c2:	32 97       	sbiw	r30, 0x02	; 2
    17c4:	13 82       	std	Z+3, r1	; 0x03
    17c6:	12 82       	std	Z+2, r1	; 0x02
    17c8:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <__flp>
    17cc:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <__flp+0x1>
    17d0:	10 97       	sbiw	r26, 0x00	; 0
    17d2:	81 f4       	brne	.+32     	; 0x17f4 <free+0x3e>
    17d4:	20 81       	ld	r18, Z
    17d6:	31 81       	ldd	r19, Z+1	; 0x01
    17d8:	82 0f       	add	r24, r18
    17da:	93 1f       	adc	r25, r19
    17dc:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
    17e0:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
    17e4:	28 17       	cp	r18, r24
    17e6:	39 07       	cpc	r19, r25
    17e8:	51 f5       	brne	.+84     	; 0x183e <free+0x88>
    17ea:	f0 93 bd 02 	sts	0x02BD, r31	; 0x8002bd <__brkval+0x1>
    17ee:	e0 93 bc 02 	sts	0x02BC, r30	; 0x8002bc <__brkval>
    17f2:	67 c0       	rjmp	.+206    	; 0x18c2 <free+0x10c>
    17f4:	ed 01       	movw	r28, r26
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	ce 17       	cp	r28, r30
    17fc:	df 07       	cpc	r29, r31
    17fe:	40 f4       	brcc	.+16     	; 0x1810 <free+0x5a>
    1800:	4a 81       	ldd	r20, Y+2	; 0x02
    1802:	5b 81       	ldd	r21, Y+3	; 0x03
    1804:	9e 01       	movw	r18, r28
    1806:	41 15       	cp	r20, r1
    1808:	51 05       	cpc	r21, r1
    180a:	f1 f0       	breq	.+60     	; 0x1848 <free+0x92>
    180c:	ea 01       	movw	r28, r20
    180e:	f5 cf       	rjmp	.-22     	; 0x17fa <free+0x44>
    1810:	d3 83       	std	Z+3, r29	; 0x03
    1812:	c2 83       	std	Z+2, r28	; 0x02
    1814:	40 81       	ld	r20, Z
    1816:	51 81       	ldd	r21, Z+1	; 0x01
    1818:	84 0f       	add	r24, r20
    181a:	95 1f       	adc	r25, r21
    181c:	c8 17       	cp	r28, r24
    181e:	d9 07       	cpc	r29, r25
    1820:	59 f4       	brne	.+22     	; 0x1838 <free+0x82>
    1822:	88 81       	ld	r24, Y
    1824:	99 81       	ldd	r25, Y+1	; 0x01
    1826:	84 0f       	add	r24, r20
    1828:	95 1f       	adc	r25, r21
    182a:	02 96       	adiw	r24, 0x02	; 2
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	93 83       	std	Z+3, r25	; 0x03
    1836:	82 83       	std	Z+2, r24	; 0x02
    1838:	21 15       	cp	r18, r1
    183a:	31 05       	cpc	r19, r1
    183c:	29 f4       	brne	.+10     	; 0x1848 <free+0x92>
    183e:	f0 93 bf 02 	sts	0x02BF, r31	; 0x8002bf <__flp+0x1>
    1842:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <__flp>
    1846:	3d c0       	rjmp	.+122    	; 0x18c2 <free+0x10c>
    1848:	e9 01       	movw	r28, r18
    184a:	fb 83       	std	Y+3, r31	; 0x03
    184c:	ea 83       	std	Y+2, r30	; 0x02
    184e:	49 91       	ld	r20, Y+
    1850:	59 91       	ld	r21, Y+
    1852:	c4 0f       	add	r28, r20
    1854:	d5 1f       	adc	r29, r21
    1856:	ec 17       	cp	r30, r28
    1858:	fd 07       	cpc	r31, r29
    185a:	61 f4       	brne	.+24     	; 0x1874 <free+0xbe>
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	84 0f       	add	r24, r20
    1862:	95 1f       	adc	r25, r21
    1864:	02 96       	adiw	r24, 0x02	; 2
    1866:	e9 01       	movw	r28, r18
    1868:	99 83       	std	Y+1, r25	; 0x01
    186a:	88 83       	st	Y, r24
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	9b 83       	std	Y+3, r25	; 0x03
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	e0 e0       	ldi	r30, 0x00	; 0
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	12 96       	adiw	r26, 0x02	; 2
    187a:	8d 91       	ld	r24, X+
    187c:	9c 91       	ld	r25, X
    187e:	13 97       	sbiw	r26, 0x03	; 3
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	19 f0       	breq	.+6      	; 0x188a <free+0xd4>
    1884:	fd 01       	movw	r30, r26
    1886:	dc 01       	movw	r26, r24
    1888:	f7 cf       	rjmp	.-18     	; 0x1878 <free+0xc2>
    188a:	8d 91       	ld	r24, X+
    188c:	9c 91       	ld	r25, X
    188e:	11 97       	sbiw	r26, 0x01	; 1
    1890:	9d 01       	movw	r18, r26
    1892:	2e 5f       	subi	r18, 0xFE	; 254
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	82 0f       	add	r24, r18
    1898:	93 1f       	adc	r25, r19
    189a:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
    189e:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
    18a2:	28 17       	cp	r18, r24
    18a4:	39 07       	cpc	r19, r25
    18a6:	69 f4       	brne	.+26     	; 0x18c2 <free+0x10c>
    18a8:	30 97       	sbiw	r30, 0x00	; 0
    18aa:	29 f4       	brne	.+10     	; 0x18b6 <free+0x100>
    18ac:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__flp+0x1>
    18b0:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__flp>
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <free+0x104>
    18b6:	13 82       	std	Z+3, r1	; 0x03
    18b8:	12 82       	std	Z+2, r1	; 0x02
    18ba:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <__brkval+0x1>
    18be:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <__brkval>
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <strcpy>:
    18c8:	fb 01       	movw	r30, r22
    18ca:	dc 01       	movw	r26, r24
    18cc:	01 90       	ld	r0, Z+
    18ce:	0d 92       	st	X+, r0
    18d0:	00 20       	and	r0, r0
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <strcpy+0x4>
    18d4:	08 95       	ret

000018d6 <fdevopen>:
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	31 f4       	brne	.+12     	; 0x18ee <fdevopen+0x18>
    18e2:	61 15       	cp	r22, r1
    18e4:	71 05       	cpc	r23, r1
    18e6:	19 f4       	brne	.+6      	; 0x18ee <fdevopen+0x18>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	3a c0       	rjmp	.+116    	; 0x1962 <fdevopen+0x8c>
    18ee:	8b 01       	movw	r16, r22
    18f0:	ec 01       	movw	r28, r24
    18f2:	6e e0       	ldi	r22, 0x0E	; 14
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <calloc>
    18fe:	fc 01       	movw	r30, r24
    1900:	89 2b       	or	r24, r25
    1902:	91 f3       	breq	.-28     	; 0x18e8 <fdevopen+0x12>
    1904:	80 e8       	ldi	r24, 0x80	; 128
    1906:	83 83       	std	Z+3, r24	; 0x03
    1908:	01 15       	cp	r16, r1
    190a:	11 05       	cpc	r17, r1
    190c:	71 f0       	breq	.+28     	; 0x192a <fdevopen+0x54>
    190e:	13 87       	std	Z+11, r17	; 0x0b
    1910:	02 87       	std	Z+10, r16	; 0x0a
    1912:	81 e8       	ldi	r24, 0x81	; 129
    1914:	83 83       	std	Z+3, r24	; 0x03
    1916:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__iob>
    191a:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <__iob+0x1>
    191e:	89 2b       	or	r24, r25
    1920:	21 f4       	brne	.+8      	; 0x192a <fdevopen+0x54>
    1922:	f0 93 c1 02 	sts	0x02C1, r31	; 0x8002c1 <__iob+0x1>
    1926:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <__iob>
    192a:	20 97       	sbiw	r28, 0x00	; 0
    192c:	c9 f0       	breq	.+50     	; 0x1960 <fdevopen+0x8a>
    192e:	d1 87       	std	Z+9, r29	; 0x09
    1930:	c0 87       	std	Z+8, r28	; 0x08
    1932:	83 81       	ldd	r24, Z+3	; 0x03
    1934:	82 60       	ori	r24, 0x02	; 2
    1936:	83 83       	std	Z+3, r24	; 0x03
    1938:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__iob+0x2>
    193c:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <__iob+0x3>
    1940:	89 2b       	or	r24, r25
    1942:	71 f4       	brne	.+28     	; 0x1960 <fdevopen+0x8a>
    1944:	f0 93 c3 02 	sts	0x02C3, r31	; 0x8002c3 <__iob+0x3>
    1948:	e0 93 c2 02 	sts	0x02C2, r30	; 0x8002c2 <__iob+0x2>
    194c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__iob+0x4>
    1950:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__iob+0x5>
    1954:	89 2b       	or	r24, r25
    1956:	21 f4       	brne	.+8      	; 0x1960 <fdevopen+0x8a>
    1958:	f0 93 c5 02 	sts	0x02C5, r31	; 0x8002c5 <__iob+0x5>
    195c:	e0 93 c4 02 	sts	0x02C4, r30	; 0x8002c4 <__iob+0x4>
    1960:	cf 01       	movw	r24, r30
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <printf>:
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ec eb       	ldi	r30, 0xBC	; 188
    1972:	fc e0       	ldi	r31, 0x0C	; 12
    1974:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__prologue_saves__+0x20>
    1978:	ae 01       	movw	r20, r28
    197a:	4b 5f       	subi	r20, 0xFB	; 251
    197c:	5f 4f       	sbci	r21, 0xFF	; 255
    197e:	fa 01       	movw	r30, r20
    1980:	61 91       	ld	r22, Z+
    1982:	71 91       	ld	r23, Z+
    1984:	af 01       	movw	r20, r30
    1986:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__iob+0x2>
    198a:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <__iob+0x3>
    198e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <vfprintf>
    1992:	e2 e0       	ldi	r30, 0x02	; 2
    1994:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__epilogue_restores__+0x20>

00001998 <vfprintf>:
    1998:	ab e0       	ldi	r26, 0x0B	; 11
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e2 ed       	ldi	r30, 0xD2	; 210
    199e:	fc e0       	ldi	r31, 0x0C	; 12
    19a0:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__prologue_saves__>
    19a4:	6c 01       	movw	r12, r24
    19a6:	7b 01       	movw	r14, r22
    19a8:	8a 01       	movw	r16, r20
    19aa:	fc 01       	movw	r30, r24
    19ac:	17 82       	std	Z+7, r1	; 0x07
    19ae:	16 82       	std	Z+6, r1	; 0x06
    19b0:	83 81       	ldd	r24, Z+3	; 0x03
    19b2:	81 ff       	sbrs	r24, 1
    19b4:	cc c1       	rjmp	.+920    	; 0x1d4e <vfprintf+0x3b6>
    19b6:	ce 01       	movw	r24, r28
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	3c 01       	movw	r6, r24
    19bc:	f6 01       	movw	r30, r12
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	f7 01       	movw	r30, r14
    19c2:	93 fd       	sbrc	r25, 3
    19c4:	85 91       	lpm	r24, Z+
    19c6:	93 ff       	sbrs	r25, 3
    19c8:	81 91       	ld	r24, Z+
    19ca:	7f 01       	movw	r14, r30
    19cc:	88 23       	and	r24, r24
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <vfprintf+0x3a>
    19d0:	ba c1       	rjmp	.+884    	; 0x1d46 <vfprintf+0x3ae>
    19d2:	85 32       	cpi	r24, 0x25	; 37
    19d4:	39 f4       	brne	.+14     	; 0x19e4 <vfprintf+0x4c>
    19d6:	93 fd       	sbrc	r25, 3
    19d8:	85 91       	lpm	r24, Z+
    19da:	93 ff       	sbrs	r25, 3
    19dc:	81 91       	ld	r24, Z+
    19de:	7f 01       	movw	r14, r30
    19e0:	85 32       	cpi	r24, 0x25	; 37
    19e2:	29 f4       	brne	.+10     	; 0x19ee <vfprintf+0x56>
    19e4:	b6 01       	movw	r22, r12
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    19ec:	e7 cf       	rjmp	.-50     	; 0x19bc <vfprintf+0x24>
    19ee:	91 2c       	mov	r9, r1
    19f0:	21 2c       	mov	r2, r1
    19f2:	31 2c       	mov	r3, r1
    19f4:	ff e1       	ldi	r31, 0x1F	; 31
    19f6:	f3 15       	cp	r31, r3
    19f8:	d8 f0       	brcs	.+54     	; 0x1a30 <vfprintf+0x98>
    19fa:	8b 32       	cpi	r24, 0x2B	; 43
    19fc:	79 f0       	breq	.+30     	; 0x1a1c <vfprintf+0x84>
    19fe:	38 f4       	brcc	.+14     	; 0x1a0e <vfprintf+0x76>
    1a00:	80 32       	cpi	r24, 0x20	; 32
    1a02:	79 f0       	breq	.+30     	; 0x1a22 <vfprintf+0x8a>
    1a04:	83 32       	cpi	r24, 0x23	; 35
    1a06:	a1 f4       	brne	.+40     	; 0x1a30 <vfprintf+0x98>
    1a08:	23 2d       	mov	r18, r3
    1a0a:	20 61       	ori	r18, 0x10	; 16
    1a0c:	1d c0       	rjmp	.+58     	; 0x1a48 <vfprintf+0xb0>
    1a0e:	8d 32       	cpi	r24, 0x2D	; 45
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <vfprintf+0x92>
    1a12:	80 33       	cpi	r24, 0x30	; 48
    1a14:	69 f4       	brne	.+26     	; 0x1a30 <vfprintf+0x98>
    1a16:	23 2d       	mov	r18, r3
    1a18:	21 60       	ori	r18, 0x01	; 1
    1a1a:	16 c0       	rjmp	.+44     	; 0x1a48 <vfprintf+0xb0>
    1a1c:	83 2d       	mov	r24, r3
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	38 2e       	mov	r3, r24
    1a22:	e3 2d       	mov	r30, r3
    1a24:	e4 60       	ori	r30, 0x04	; 4
    1a26:	3e 2e       	mov	r3, r30
    1a28:	2a c0       	rjmp	.+84     	; 0x1a7e <vfprintf+0xe6>
    1a2a:	f3 2d       	mov	r31, r3
    1a2c:	f8 60       	ori	r31, 0x08	; 8
    1a2e:	1d c0       	rjmp	.+58     	; 0x1a6a <vfprintf+0xd2>
    1a30:	37 fc       	sbrc	r3, 7
    1a32:	2d c0       	rjmp	.+90     	; 0x1a8e <vfprintf+0xf6>
    1a34:	20 ed       	ldi	r18, 0xD0	; 208
    1a36:	28 0f       	add	r18, r24
    1a38:	2a 30       	cpi	r18, 0x0A	; 10
    1a3a:	40 f0       	brcs	.+16     	; 0x1a4c <vfprintf+0xb4>
    1a3c:	8e 32       	cpi	r24, 0x2E	; 46
    1a3e:	b9 f4       	brne	.+46     	; 0x1a6e <vfprintf+0xd6>
    1a40:	36 fc       	sbrc	r3, 6
    1a42:	81 c1       	rjmp	.+770    	; 0x1d46 <vfprintf+0x3ae>
    1a44:	23 2d       	mov	r18, r3
    1a46:	20 64       	ori	r18, 0x40	; 64
    1a48:	32 2e       	mov	r3, r18
    1a4a:	19 c0       	rjmp	.+50     	; 0x1a7e <vfprintf+0xe6>
    1a4c:	36 fe       	sbrs	r3, 6
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <vfprintf+0xc4>
    1a50:	8a e0       	ldi	r24, 0x0A	; 10
    1a52:	98 9e       	mul	r9, r24
    1a54:	20 0d       	add	r18, r0
    1a56:	11 24       	eor	r1, r1
    1a58:	92 2e       	mov	r9, r18
    1a5a:	11 c0       	rjmp	.+34     	; 0x1a7e <vfprintf+0xe6>
    1a5c:	ea e0       	ldi	r30, 0x0A	; 10
    1a5e:	2e 9e       	mul	r2, r30
    1a60:	20 0d       	add	r18, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	22 2e       	mov	r2, r18
    1a66:	f3 2d       	mov	r31, r3
    1a68:	f0 62       	ori	r31, 0x20	; 32
    1a6a:	3f 2e       	mov	r3, r31
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <vfprintf+0xe6>
    1a6e:	8c 36       	cpi	r24, 0x6C	; 108
    1a70:	21 f4       	brne	.+8      	; 0x1a7a <vfprintf+0xe2>
    1a72:	83 2d       	mov	r24, r3
    1a74:	80 68       	ori	r24, 0x80	; 128
    1a76:	38 2e       	mov	r3, r24
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <vfprintf+0xe6>
    1a7a:	88 36       	cpi	r24, 0x68	; 104
    1a7c:	41 f4       	brne	.+16     	; 0x1a8e <vfprintf+0xf6>
    1a7e:	f7 01       	movw	r30, r14
    1a80:	93 fd       	sbrc	r25, 3
    1a82:	85 91       	lpm	r24, Z+
    1a84:	93 ff       	sbrs	r25, 3
    1a86:	81 91       	ld	r24, Z+
    1a88:	7f 01       	movw	r14, r30
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	b3 cf       	rjmp	.-154    	; 0x19f4 <vfprintf+0x5c>
    1a8e:	98 2f       	mov	r25, r24
    1a90:	9f 7d       	andi	r25, 0xDF	; 223
    1a92:	95 54       	subi	r25, 0x45	; 69
    1a94:	93 30       	cpi	r25, 0x03	; 3
    1a96:	28 f4       	brcc	.+10     	; 0x1aa2 <vfprintf+0x10a>
    1a98:	0c 5f       	subi	r16, 0xFC	; 252
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	9f e3       	ldi	r25, 0x3F	; 63
    1a9e:	99 83       	std	Y+1, r25	; 0x01
    1aa0:	0d c0       	rjmp	.+26     	; 0x1abc <vfprintf+0x124>
    1aa2:	83 36       	cpi	r24, 0x63	; 99
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <vfprintf+0x11a>
    1aa6:	83 37       	cpi	r24, 0x73	; 115
    1aa8:	71 f0       	breq	.+28     	; 0x1ac6 <vfprintf+0x12e>
    1aaa:	83 35       	cpi	r24, 0x53	; 83
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <vfprintf+0x118>
    1aae:	59 c0       	rjmp	.+178    	; 0x1b62 <vfprintf+0x1ca>
    1ab0:	21 c0       	rjmp	.+66     	; 0x1af4 <vfprintf+0x15c>
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	80 81       	ld	r24, Z
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	0e 5f       	subi	r16, 0xFE	; 254
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	88 24       	eor	r8, r8
    1abe:	83 94       	inc	r8
    1ac0:	91 2c       	mov	r9, r1
    1ac2:	53 01       	movw	r10, r6
    1ac4:	13 c0       	rjmp	.+38     	; 0x1aec <vfprintf+0x154>
    1ac6:	28 01       	movw	r4, r16
    1ac8:	f2 e0       	ldi	r31, 0x02	; 2
    1aca:	4f 0e       	add	r4, r31
    1acc:	51 1c       	adc	r5, r1
    1ace:	f8 01       	movw	r30, r16
    1ad0:	a0 80       	ld	r10, Z
    1ad2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ad4:	36 fe       	sbrs	r3, 6
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <vfprintf+0x146>
    1ad8:	69 2d       	mov	r22, r9
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x14a>
    1ade:	6f ef       	ldi	r22, 0xFF	; 255
    1ae0:	7f ef       	ldi	r23, 0xFF	; 255
    1ae2:	c5 01       	movw	r24, r10
    1ae4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <strnlen>
    1ae8:	4c 01       	movw	r8, r24
    1aea:	82 01       	movw	r16, r4
    1aec:	f3 2d       	mov	r31, r3
    1aee:	ff 77       	andi	r31, 0x7F	; 127
    1af0:	3f 2e       	mov	r3, r31
    1af2:	16 c0       	rjmp	.+44     	; 0x1b20 <vfprintf+0x188>
    1af4:	28 01       	movw	r4, r16
    1af6:	22 e0       	ldi	r18, 0x02	; 2
    1af8:	42 0e       	add	r4, r18
    1afa:	51 1c       	adc	r5, r1
    1afc:	f8 01       	movw	r30, r16
    1afe:	a0 80       	ld	r10, Z
    1b00:	b1 80       	ldd	r11, Z+1	; 0x01
    1b02:	36 fe       	sbrs	r3, 6
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <vfprintf+0x174>
    1b06:	69 2d       	mov	r22, r9
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vfprintf+0x178>
    1b0c:	6f ef       	ldi	r22, 0xFF	; 255
    1b0e:	7f ef       	ldi	r23, 0xFF	; 255
    1b10:	c5 01       	movw	r24, r10
    1b12:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <strnlen_P>
    1b16:	4c 01       	movw	r8, r24
    1b18:	f3 2d       	mov	r31, r3
    1b1a:	f0 68       	ori	r31, 0x80	; 128
    1b1c:	3f 2e       	mov	r3, r31
    1b1e:	82 01       	movw	r16, r4
    1b20:	33 fc       	sbrc	r3, 3
    1b22:	1b c0       	rjmp	.+54     	; 0x1b5a <vfprintf+0x1c2>
    1b24:	82 2d       	mov	r24, r2
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	88 16       	cp	r8, r24
    1b2a:	99 06       	cpc	r9, r25
    1b2c:	b0 f4       	brcc	.+44     	; 0x1b5a <vfprintf+0x1c2>
    1b2e:	b6 01       	movw	r22, r12
    1b30:	80 e2       	ldi	r24, 0x20	; 32
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    1b38:	2a 94       	dec	r2
    1b3a:	f4 cf       	rjmp	.-24     	; 0x1b24 <vfprintf+0x18c>
    1b3c:	f5 01       	movw	r30, r10
    1b3e:	37 fc       	sbrc	r3, 7
    1b40:	85 91       	lpm	r24, Z+
    1b42:	37 fe       	sbrs	r3, 7
    1b44:	81 91       	ld	r24, Z+
    1b46:	5f 01       	movw	r10, r30
    1b48:	b6 01       	movw	r22, r12
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    1b50:	21 10       	cpse	r2, r1
    1b52:	2a 94       	dec	r2
    1b54:	21 e0       	ldi	r18, 0x01	; 1
    1b56:	82 1a       	sub	r8, r18
    1b58:	91 08       	sbc	r9, r1
    1b5a:	81 14       	cp	r8, r1
    1b5c:	91 04       	cpc	r9, r1
    1b5e:	71 f7       	brne	.-36     	; 0x1b3c <vfprintf+0x1a4>
    1b60:	e8 c0       	rjmp	.+464    	; 0x1d32 <vfprintf+0x39a>
    1b62:	84 36       	cpi	r24, 0x64	; 100
    1b64:	11 f0       	breq	.+4      	; 0x1b6a <vfprintf+0x1d2>
    1b66:	89 36       	cpi	r24, 0x69	; 105
    1b68:	41 f5       	brne	.+80     	; 0x1bba <vfprintf+0x222>
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	37 fe       	sbrs	r3, 7
    1b6e:	07 c0       	rjmp	.+14     	; 0x1b7e <vfprintf+0x1e6>
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	0c 5f       	subi	r16, 0xFC	; 252
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	08 c0       	rjmp	.+16     	; 0x1b8e <vfprintf+0x1f6>
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	07 2e       	mov	r0, r23
    1b84:	00 0c       	add	r0, r0
    1b86:	88 0b       	sbc	r24, r24
    1b88:	99 0b       	sbc	r25, r25
    1b8a:	0e 5f       	subi	r16, 0xFE	; 254
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	f3 2d       	mov	r31, r3
    1b90:	ff 76       	andi	r31, 0x6F	; 111
    1b92:	3f 2e       	mov	r3, r31
    1b94:	97 ff       	sbrs	r25, 7
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <vfprintf+0x212>
    1b98:	90 95       	com	r25
    1b9a:	80 95       	com	r24
    1b9c:	70 95       	com	r23
    1b9e:	61 95       	neg	r22
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	f0 68       	ori	r31, 0x80	; 128
    1ba8:	3f 2e       	mov	r3, r31
    1baa:	2a e0       	ldi	r18, 0x0A	; 10
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	a3 01       	movw	r20, r6
    1bb0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__ultoa_invert>
    1bb4:	88 2e       	mov	r8, r24
    1bb6:	86 18       	sub	r8, r6
    1bb8:	45 c0       	rjmp	.+138    	; 0x1c44 <vfprintf+0x2ac>
    1bba:	85 37       	cpi	r24, 0x75	; 117
    1bbc:	31 f4       	brne	.+12     	; 0x1bca <vfprintf+0x232>
    1bbe:	23 2d       	mov	r18, r3
    1bc0:	2f 7e       	andi	r18, 0xEF	; 239
    1bc2:	b2 2e       	mov	r11, r18
    1bc4:	2a e0       	ldi	r18, 0x0A	; 10
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	25 c0       	rjmp	.+74     	; 0x1c14 <vfprintf+0x27c>
    1bca:	93 2d       	mov	r25, r3
    1bcc:	99 7f       	andi	r25, 0xF9	; 249
    1bce:	b9 2e       	mov	r11, r25
    1bd0:	8f 36       	cpi	r24, 0x6F	; 111
    1bd2:	c1 f0       	breq	.+48     	; 0x1c04 <vfprintf+0x26c>
    1bd4:	18 f4       	brcc	.+6      	; 0x1bdc <vfprintf+0x244>
    1bd6:	88 35       	cpi	r24, 0x58	; 88
    1bd8:	79 f0       	breq	.+30     	; 0x1bf8 <vfprintf+0x260>
    1bda:	b5 c0       	rjmp	.+362    	; 0x1d46 <vfprintf+0x3ae>
    1bdc:	80 37       	cpi	r24, 0x70	; 112
    1bde:	19 f0       	breq	.+6      	; 0x1be6 <vfprintf+0x24e>
    1be0:	88 37       	cpi	r24, 0x78	; 120
    1be2:	21 f0       	breq	.+8      	; 0x1bec <vfprintf+0x254>
    1be4:	b0 c0       	rjmp	.+352    	; 0x1d46 <vfprintf+0x3ae>
    1be6:	e9 2f       	mov	r30, r25
    1be8:	e0 61       	ori	r30, 0x10	; 16
    1bea:	be 2e       	mov	r11, r30
    1bec:	b4 fe       	sbrs	r11, 4
    1bee:	0d c0       	rjmp	.+26     	; 0x1c0a <vfprintf+0x272>
    1bf0:	fb 2d       	mov	r31, r11
    1bf2:	f4 60       	ori	r31, 0x04	; 4
    1bf4:	bf 2e       	mov	r11, r31
    1bf6:	09 c0       	rjmp	.+18     	; 0x1c0a <vfprintf+0x272>
    1bf8:	34 fe       	sbrs	r3, 4
    1bfa:	0a c0       	rjmp	.+20     	; 0x1c10 <vfprintf+0x278>
    1bfc:	29 2f       	mov	r18, r25
    1bfe:	26 60       	ori	r18, 0x06	; 6
    1c00:	b2 2e       	mov	r11, r18
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <vfprintf+0x278>
    1c04:	28 e0       	ldi	r18, 0x08	; 8
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <vfprintf+0x27c>
    1c0a:	20 e1       	ldi	r18, 0x10	; 16
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <vfprintf+0x27c>
    1c10:	20 e1       	ldi	r18, 0x10	; 16
    1c12:	32 e0       	ldi	r19, 0x02	; 2
    1c14:	f8 01       	movw	r30, r16
    1c16:	b7 fe       	sbrs	r11, 7
    1c18:	07 c0       	rjmp	.+14     	; 0x1c28 <vfprintf+0x290>
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	0c 5f       	subi	r16, 0xFC	; 252
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <vfprintf+0x29c>
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 5f       	subi	r16, 0xFE	; 254
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	a3 01       	movw	r20, r6
    1c36:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__ultoa_invert>
    1c3a:	88 2e       	mov	r8, r24
    1c3c:	86 18       	sub	r8, r6
    1c3e:	fb 2d       	mov	r31, r11
    1c40:	ff 77       	andi	r31, 0x7F	; 127
    1c42:	3f 2e       	mov	r3, r31
    1c44:	36 fe       	sbrs	r3, 6
    1c46:	0d c0       	rjmp	.+26     	; 0x1c62 <vfprintf+0x2ca>
    1c48:	23 2d       	mov	r18, r3
    1c4a:	2e 7f       	andi	r18, 0xFE	; 254
    1c4c:	a2 2e       	mov	r10, r18
    1c4e:	89 14       	cp	r8, r9
    1c50:	58 f4       	brcc	.+22     	; 0x1c68 <vfprintf+0x2d0>
    1c52:	34 fe       	sbrs	r3, 4
    1c54:	0b c0       	rjmp	.+22     	; 0x1c6c <vfprintf+0x2d4>
    1c56:	32 fc       	sbrc	r3, 2
    1c58:	09 c0       	rjmp	.+18     	; 0x1c6c <vfprintf+0x2d4>
    1c5a:	83 2d       	mov	r24, r3
    1c5c:	8e 7e       	andi	r24, 0xEE	; 238
    1c5e:	a8 2e       	mov	r10, r24
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <vfprintf+0x2d4>
    1c62:	b8 2c       	mov	r11, r8
    1c64:	a3 2c       	mov	r10, r3
    1c66:	03 c0       	rjmp	.+6      	; 0x1c6e <vfprintf+0x2d6>
    1c68:	b8 2c       	mov	r11, r8
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <vfprintf+0x2d6>
    1c6c:	b9 2c       	mov	r11, r9
    1c6e:	a4 fe       	sbrs	r10, 4
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <vfprintf+0x2f8>
    1c72:	fe 01       	movw	r30, r28
    1c74:	e8 0d       	add	r30, r8
    1c76:	f1 1d       	adc	r31, r1
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 33       	cpi	r24, 0x30	; 48
    1c7c:	21 f4       	brne	.+8      	; 0x1c86 <vfprintf+0x2ee>
    1c7e:	9a 2d       	mov	r25, r10
    1c80:	99 7e       	andi	r25, 0xE9	; 233
    1c82:	a9 2e       	mov	r10, r25
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <vfprintf+0x300>
    1c86:	a2 fe       	sbrs	r10, 2
    1c88:	06 c0       	rjmp	.+12     	; 0x1c96 <vfprintf+0x2fe>
    1c8a:	b3 94       	inc	r11
    1c8c:	b3 94       	inc	r11
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <vfprintf+0x300>
    1c90:	8a 2d       	mov	r24, r10
    1c92:	86 78       	andi	r24, 0x86	; 134
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <vfprintf+0x300>
    1c96:	b3 94       	inc	r11
    1c98:	a3 fc       	sbrc	r10, 3
    1c9a:	11 c0       	rjmp	.+34     	; 0x1cbe <vfprintf+0x326>
    1c9c:	a0 fe       	sbrs	r10, 0
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <vfprintf+0x314>
    1ca0:	b2 14       	cp	r11, r2
    1ca2:	88 f4       	brcc	.+34     	; 0x1cc6 <vfprintf+0x32e>
    1ca4:	28 0c       	add	r2, r8
    1ca6:	92 2c       	mov	r9, r2
    1ca8:	9b 18       	sub	r9, r11
    1caa:	0e c0       	rjmp	.+28     	; 0x1cc8 <vfprintf+0x330>
    1cac:	b2 14       	cp	r11, r2
    1cae:	60 f4       	brcc	.+24     	; 0x1cc8 <vfprintf+0x330>
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	80 e2       	ldi	r24, 0x20	; 32
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    1cba:	b3 94       	inc	r11
    1cbc:	f7 cf       	rjmp	.-18     	; 0x1cac <vfprintf+0x314>
    1cbe:	b2 14       	cp	r11, r2
    1cc0:	18 f4       	brcc	.+6      	; 0x1cc8 <vfprintf+0x330>
    1cc2:	2b 18       	sub	r2, r11
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <vfprintf+0x332>
    1cc6:	98 2c       	mov	r9, r8
    1cc8:	21 2c       	mov	r2, r1
    1cca:	a4 fe       	sbrs	r10, 4
    1ccc:	10 c0       	rjmp	.+32     	; 0x1cee <vfprintf+0x356>
    1cce:	b6 01       	movw	r22, r12
    1cd0:	80 e3       	ldi	r24, 0x30	; 48
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    1cd8:	a2 fe       	sbrs	r10, 2
    1cda:	17 c0       	rjmp	.+46     	; 0x1d0a <vfprintf+0x372>
    1cdc:	a1 fc       	sbrc	r10, 1
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <vfprintf+0x34e>
    1ce0:	88 e7       	ldi	r24, 0x78	; 120
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x352>
    1ce6:	88 e5       	ldi	r24, 0x58	; 88
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	b6 01       	movw	r22, r12
    1cec:	0c c0       	rjmp	.+24     	; 0x1d06 <vfprintf+0x36e>
    1cee:	8a 2d       	mov	r24, r10
    1cf0:	86 78       	andi	r24, 0x86	; 134
    1cf2:	59 f0       	breq	.+22     	; 0x1d0a <vfprintf+0x372>
    1cf4:	a1 fe       	sbrs	r10, 1
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0x364>
    1cf8:	8b e2       	ldi	r24, 0x2B	; 43
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <vfprintf+0x366>
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	a7 fc       	sbrc	r10, 7
    1d00:	8d e2       	ldi	r24, 0x2D	; 45
    1d02:	b6 01       	movw	r22, r12
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    1d0a:	89 14       	cp	r8, r9
    1d0c:	38 f4       	brcc	.+14     	; 0x1d1c <vfprintf+0x384>
    1d0e:	b6 01       	movw	r22, r12
    1d10:	80 e3       	ldi	r24, 0x30	; 48
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    1d18:	9a 94       	dec	r9
    1d1a:	f7 cf       	rjmp	.-18     	; 0x1d0a <vfprintf+0x372>
    1d1c:	8a 94       	dec	r8
    1d1e:	f3 01       	movw	r30, r6
    1d20:	e8 0d       	add	r30, r8
    1d22:	f1 1d       	adc	r31, r1
    1d24:	80 81       	ld	r24, Z
    1d26:	b6 01       	movw	r22, r12
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    1d2e:	81 10       	cpse	r8, r1
    1d30:	f5 cf       	rjmp	.-22     	; 0x1d1c <vfprintf+0x384>
    1d32:	22 20       	and	r2, r2
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <vfprintf+0x3a0>
    1d36:	42 ce       	rjmp	.-892    	; 0x19bc <vfprintf+0x24>
    1d38:	b6 01       	movw	r22, r12
    1d3a:	80 e2       	ldi	r24, 0x20	; 32
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <fputc>
    1d42:	2a 94       	dec	r2
    1d44:	f6 cf       	rjmp	.-20     	; 0x1d32 <vfprintf+0x39a>
    1d46:	f6 01       	movw	r30, r12
    1d48:	86 81       	ldd	r24, Z+6	; 0x06
    1d4a:	97 81       	ldd	r25, Z+7	; 0x07
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <vfprintf+0x3ba>
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	9f ef       	ldi	r25, 0xFF	; 255
    1d52:	2b 96       	adiw	r28, 0x0b	; 11
    1d54:	e2 e1       	ldi	r30, 0x12	; 18
    1d56:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__epilogue_restores__>

00001d5a <calloc>:
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	86 9f       	mul	r24, r22
    1d64:	80 01       	movw	r16, r0
    1d66:	87 9f       	mul	r24, r23
    1d68:	10 0d       	add	r17, r0
    1d6a:	96 9f       	mul	r25, r22
    1d6c:	10 0d       	add	r17, r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	c8 01       	movw	r24, r16
    1d72:	0e 94 43 0b 	call	0x1686	; 0x1686 <malloc>
    1d76:	ec 01       	movw	r28, r24
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <calloc+0x2c>
    1d7c:	a8 01       	movw	r20, r16
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <memset>
    1d86:	ce 01       	movw	r24, r28
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	1f 91       	pop	r17
    1d8e:	0f 91       	pop	r16
    1d90:	08 95       	ret

00001d92 <strnlen_P>:
    1d92:	fc 01       	movw	r30, r24
    1d94:	05 90       	lpm	r0, Z+
    1d96:	61 50       	subi	r22, 0x01	; 1
    1d98:	70 40       	sbci	r23, 0x00	; 0
    1d9a:	01 10       	cpse	r0, r1
    1d9c:	d8 f7       	brcc	.-10     	; 0x1d94 <strnlen_P+0x2>
    1d9e:	80 95       	com	r24
    1da0:	90 95       	com	r25
    1da2:	8e 0f       	add	r24, r30
    1da4:	9f 1f       	adc	r25, r31
    1da6:	08 95       	ret

00001da8 <memset>:
    1da8:	dc 01       	movw	r26, r24
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <memset+0x6>
    1dac:	6d 93       	st	X+, r22
    1dae:	41 50       	subi	r20, 0x01	; 1
    1db0:	50 40       	sbci	r21, 0x00	; 0
    1db2:	e0 f7       	brcc	.-8      	; 0x1dac <memset+0x4>
    1db4:	08 95       	ret

00001db6 <strnlen>:
    1db6:	fc 01       	movw	r30, r24
    1db8:	61 50       	subi	r22, 0x01	; 1
    1dba:	70 40       	sbci	r23, 0x00	; 0
    1dbc:	01 90       	ld	r0, Z+
    1dbe:	01 10       	cpse	r0, r1
    1dc0:	d8 f7       	brcc	.-10     	; 0x1db8 <strnlen+0x2>
    1dc2:	80 95       	com	r24
    1dc4:	90 95       	com	r25
    1dc6:	8e 0f       	add	r24, r30
    1dc8:	9f 1f       	adc	r25, r31
    1dca:	08 95       	ret

00001dcc <fputc>:
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	fb 01       	movw	r30, r22
    1dd6:	23 81       	ldd	r18, Z+3	; 0x03
    1dd8:	21 fd       	sbrc	r18, 1
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <fputc+0x16>
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	9f ef       	ldi	r25, 0xFF	; 255
    1de0:	2c c0       	rjmp	.+88     	; 0x1e3a <fputc+0x6e>
    1de2:	22 ff       	sbrs	r18, 2
    1de4:	16 c0       	rjmp	.+44     	; 0x1e12 <fputc+0x46>
    1de6:	46 81       	ldd	r20, Z+6	; 0x06
    1de8:	57 81       	ldd	r21, Z+7	; 0x07
    1dea:	24 81       	ldd	r18, Z+4	; 0x04
    1dec:	35 81       	ldd	r19, Z+5	; 0x05
    1dee:	42 17       	cp	r20, r18
    1df0:	53 07       	cpc	r21, r19
    1df2:	44 f4       	brge	.+16     	; 0x1e04 <fputc+0x38>
    1df4:	a0 81       	ld	r26, Z
    1df6:	b1 81       	ldd	r27, Z+1	; 0x01
    1df8:	9d 01       	movw	r18, r26
    1dfa:	2f 5f       	subi	r18, 0xFF	; 255
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	31 83       	std	Z+1, r19	; 0x01
    1e00:	20 83       	st	Z, r18
    1e02:	8c 93       	st	X, r24
    1e04:	26 81       	ldd	r18, Z+6	; 0x06
    1e06:	37 81       	ldd	r19, Z+7	; 0x07
    1e08:	2f 5f       	subi	r18, 0xFF	; 255
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	37 83       	std	Z+7, r19	; 0x07
    1e0e:	26 83       	std	Z+6, r18	; 0x06
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <fputc+0x6e>
    1e12:	8b 01       	movw	r16, r22
    1e14:	ec 01       	movw	r28, r24
    1e16:	fb 01       	movw	r30, r22
    1e18:	00 84       	ldd	r0, Z+8	; 0x08
    1e1a:	f1 85       	ldd	r31, Z+9	; 0x09
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	09 95       	icall
    1e20:	89 2b       	or	r24, r25
    1e22:	e1 f6       	brne	.-72     	; 0x1ddc <fputc+0x10>
    1e24:	d8 01       	movw	r26, r16
    1e26:	16 96       	adiw	r26, 0x06	; 6
    1e28:	8d 91       	ld	r24, X+
    1e2a:	9c 91       	ld	r25, X
    1e2c:	17 97       	sbiw	r26, 0x07	; 7
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	17 96       	adiw	r26, 0x07	; 7
    1e32:	9c 93       	st	X, r25
    1e34:	8e 93       	st	-X, r24
    1e36:	16 97       	sbiw	r26, 0x06	; 6
    1e38:	ce 01       	movw	r24, r28
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	08 95       	ret

00001e44 <__ultoa_invert>:
    1e44:	fa 01       	movw	r30, r20
    1e46:	aa 27       	eor	r26, r26
    1e48:	28 30       	cpi	r18, 0x08	; 8
    1e4a:	51 f1       	breq	.+84     	; 0x1ea0 <__ultoa_invert+0x5c>
    1e4c:	20 31       	cpi	r18, 0x10	; 16
    1e4e:	81 f1       	breq	.+96     	; 0x1eb0 <__ultoa_invert+0x6c>
    1e50:	e8 94       	clt
    1e52:	6f 93       	push	r22
    1e54:	6e 7f       	andi	r22, 0xFE	; 254
    1e56:	6e 5f       	subi	r22, 0xFE	; 254
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	af 4f       	sbci	r26, 0xFF	; 255
    1e60:	b1 e0       	ldi	r27, 0x01	; 1
    1e62:	3e d0       	rcall	.+124    	; 0x1ee0 <__ultoa_invert+0x9c>
    1e64:	b4 e0       	ldi	r27, 0x04	; 4
    1e66:	3c d0       	rcall	.+120    	; 0x1ee0 <__ultoa_invert+0x9c>
    1e68:	67 0f       	add	r22, r23
    1e6a:	78 1f       	adc	r23, r24
    1e6c:	89 1f       	adc	r24, r25
    1e6e:	9a 1f       	adc	r25, r26
    1e70:	a1 1d       	adc	r26, r1
    1e72:	68 0f       	add	r22, r24
    1e74:	79 1f       	adc	r23, r25
    1e76:	8a 1f       	adc	r24, r26
    1e78:	91 1d       	adc	r25, r1
    1e7a:	a1 1d       	adc	r26, r1
    1e7c:	6a 0f       	add	r22, r26
    1e7e:	71 1d       	adc	r23, r1
    1e80:	81 1d       	adc	r24, r1
    1e82:	91 1d       	adc	r25, r1
    1e84:	a1 1d       	adc	r26, r1
    1e86:	20 d0       	rcall	.+64     	; 0x1ec8 <__ultoa_invert+0x84>
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <__ultoa_invert+0x48>
    1e8a:	68 94       	set
    1e8c:	3f 91       	pop	r19
    1e8e:	2a e0       	ldi	r18, 0x0A	; 10
    1e90:	26 9f       	mul	r18, r22
    1e92:	11 24       	eor	r1, r1
    1e94:	30 19       	sub	r19, r0
    1e96:	30 5d       	subi	r19, 0xD0	; 208
    1e98:	31 93       	st	Z+, r19
    1e9a:	de f6       	brtc	.-74     	; 0x1e52 <__ultoa_invert+0xe>
    1e9c:	cf 01       	movw	r24, r30
    1e9e:	08 95       	ret
    1ea0:	46 2f       	mov	r20, r22
    1ea2:	47 70       	andi	r20, 0x07	; 7
    1ea4:	40 5d       	subi	r20, 0xD0	; 208
    1ea6:	41 93       	st	Z+, r20
    1ea8:	b3 e0       	ldi	r27, 0x03	; 3
    1eaa:	0f d0       	rcall	.+30     	; 0x1eca <__ultoa_invert+0x86>
    1eac:	c9 f7       	brne	.-14     	; 0x1ea0 <__ultoa_invert+0x5c>
    1eae:	f6 cf       	rjmp	.-20     	; 0x1e9c <__ultoa_invert+0x58>
    1eb0:	46 2f       	mov	r20, r22
    1eb2:	4f 70       	andi	r20, 0x0F	; 15
    1eb4:	40 5d       	subi	r20, 0xD0	; 208
    1eb6:	4a 33       	cpi	r20, 0x3A	; 58
    1eb8:	18 f0       	brcs	.+6      	; 0x1ec0 <__ultoa_invert+0x7c>
    1eba:	49 5d       	subi	r20, 0xD9	; 217
    1ebc:	31 fd       	sbrc	r19, 1
    1ebe:	40 52       	subi	r20, 0x20	; 32
    1ec0:	41 93       	st	Z+, r20
    1ec2:	02 d0       	rcall	.+4      	; 0x1ec8 <__ultoa_invert+0x84>
    1ec4:	a9 f7       	brne	.-22     	; 0x1eb0 <__ultoa_invert+0x6c>
    1ec6:	ea cf       	rjmp	.-44     	; 0x1e9c <__ultoa_invert+0x58>
    1ec8:	b4 e0       	ldi	r27, 0x04	; 4
    1eca:	a6 95       	lsr	r26
    1ecc:	97 95       	ror	r25
    1ece:	87 95       	ror	r24
    1ed0:	77 95       	ror	r23
    1ed2:	67 95       	ror	r22
    1ed4:	ba 95       	dec	r27
    1ed6:	c9 f7       	brne	.-14     	; 0x1eca <__ultoa_invert+0x86>
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	61 05       	cpc	r22, r1
    1edc:	71 05       	cpc	r23, r1
    1ede:	08 95       	ret
    1ee0:	9b 01       	movw	r18, r22
    1ee2:	ac 01       	movw	r20, r24
    1ee4:	0a 2e       	mov	r0, r26
    1ee6:	06 94       	lsr	r0
    1ee8:	57 95       	ror	r21
    1eea:	47 95       	ror	r20
    1eec:	37 95       	ror	r19
    1eee:	27 95       	ror	r18
    1ef0:	ba 95       	dec	r27
    1ef2:	c9 f7       	brne	.-14     	; 0x1ee6 <__ultoa_invert+0xa2>
    1ef4:	62 0f       	add	r22, r18
    1ef6:	73 1f       	adc	r23, r19
    1ef8:	84 1f       	adc	r24, r20
    1efa:	95 1f       	adc	r25, r21
    1efc:	a0 1d       	adc	r26, r0
    1efe:	08 95       	ret

00001f00 <__prologue_saves__>:
    1f00:	2f 92       	push	r2
    1f02:	3f 92       	push	r3
    1f04:	4f 92       	push	r4
    1f06:	5f 92       	push	r5
    1f08:	6f 92       	push	r6
    1f0a:	7f 92       	push	r7
    1f0c:	8f 92       	push	r8
    1f0e:	9f 92       	push	r9
    1f10:	af 92       	push	r10
    1f12:	bf 92       	push	r11
    1f14:	cf 92       	push	r12
    1f16:	df 92       	push	r13
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	ca 1b       	sub	r28, r26
    1f2a:	db 0b       	sbc	r29, r27
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	09 94       	ijmp

00001f38 <__epilogue_restores__>:
    1f38:	2a 88       	ldd	r2, Y+18	; 0x12
    1f3a:	39 88       	ldd	r3, Y+17	; 0x11
    1f3c:	48 88       	ldd	r4, Y+16	; 0x10
    1f3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f4e:	df 80       	ldd	r13, Y+7	; 0x07
    1f50:	ee 80       	ldd	r14, Y+6	; 0x06
    1f52:	fd 80       	ldd	r15, Y+5	; 0x05
    1f54:	0c 81       	ldd	r16, Y+4	; 0x04
    1f56:	1b 81       	ldd	r17, Y+3	; 0x03
    1f58:	aa 81       	ldd	r26, Y+2	; 0x02
    1f5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f5c:	ce 0f       	add	r28, r30
    1f5e:	d1 1d       	adc	r29, r1
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	ed 01       	movw	r28, r26
    1f6c:	08 95       	ret

00001f6e <_exit>:
    1f6e:	f8 94       	cli

00001f70 <__stop_program>:
    1f70:	ff cf       	rjmp	.-2      	; 0x1f70 <__stop_program>
