
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000264  00800100  00002922  000029b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002922  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800364  00800364  00002c1a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005275  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d8e  00000000  00000000  00008321  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021e3  00000000  00000000  0000a0af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000944  00000000  00000000  0000c294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d06  00000000  00000000  0000cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a2  00000000  00000000  0000d8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000fb80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	13 e0       	ldi	r17, 0x03	; 3
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	e2 e2       	ldi	r30, 0x22	; 34
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 36       	cpi	r26, 0x64	; 100
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a4 e6       	ldi	r26, 0x64	; 100
     548:	b3 e0       	ldi	r27, 0x03	; 3
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a2 3a       	cpi	r26, 0xA2	; 162
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 8f 14 	jmp	0x291e	; 0x291e <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xf5e>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xf5e>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "timer.h"
#include "CAN_controller.h"
#include "MCP2515.h"
#include "CAN.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
//p.23 for can read instructions
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 04 0c 	call	0x1808	; 0x1808 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     5aa:	87 e5       	ldi	r24, 0x57	; 87
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>
	printf("---------------------------------------\n\r");
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x4e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x58>
     5ea:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <CAN_controller_setMode>
     5f2:	af ef       	ldi	r26, 0xFF	; 255
     5f4:	bf e7       	ldi	r27, 0x7F	; 127
     5f6:	27 e0       	ldi	r18, 0x07	; 7
     5f8:	a1 50       	subi	r26, 0x01	; 1
     5fa:	b0 40       	sbci	r27, 0x00	; 0
     5fc:	20 40       	sbci	r18, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x66>
     600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x70>
     602:	00 00       	nop
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     60c:	0b e6       	ldi	r16, 0x6B	; 107
     60e:	13 e0       	ldi	r17, 0x03	; 3
	_delay_ms(500);
	//test_SRAM();            
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     610:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     614:	d8 01       	movw	r26, r16
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	80 81       	ld	r24, Z
     61c:	85 30       	cpi	r24, 0x05	; 5
     61e:	99 f0       	breq	.+38     	; 0x646 <main+0xb4>
     620:	28 f4       	brcc	.+10     	; 0x62c <main+0x9a>
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	41 f0       	breq	.+16     	; 0x636 <main+0xa4>
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	49 f0       	breq	.+18     	; 0x63c <main+0xaa>
     62a:	f2 cf       	rjmp	.-28     	; 0x610 <main+0x7e>
     62c:	86 30       	cpi	r24, 0x06	; 6
     62e:	81 f0       	breq	.+32     	; 0x650 <main+0xbe>
     630:	87 30       	cpi	r24, 0x07	; 7
     632:	99 f0       	breq	.+38     	; 0x65a <main+0xc8>
     634:	ed cf       	rjmp	.-38     	; 0x610 <main+0x7e>
			case MAIN_MENU:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     636:	0e 94 16 08 	call	0x102c	; 0x102c <music_playRick>
				break;
     63a:	ea cf       	rjmp	.-44     	; 0x610 <main+0x7e>
			case GAME_1:
				game_play(1);
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 76 07 	call	0xeec	; 0xeec <game_play>
				break;
     644:	e5 cf       	rjmp	.-54     	; 0x610 <main+0x7e>
			case GAME_2:
				game_play(2);
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 76 07 	call	0xeec	; 0xeec <game_play>
				break;
     64e:	e0 cf       	rjmp	.-64     	; 0x610 <main+0x7e>
			case HS1:
				game_displayHighscores(1);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 a3 07 	call	0xf46	; 0xf46 <game_displayHighscores>
				break;
     658:	db cf       	rjmp	.-74     	; 0x610 <main+0x7e>
			case HS2:
				game_displayHighscores(2);
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 a3 07 	call	0xf46	; 0xf46 <game_displayHighscores>
				break;
     662:	d6 cf       	rjmp	.-84     	; 0x610 <main+0x7e>

00000664 <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	6c e2       	ldi	r22, 0x2C	; 44
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
     66e:	08 95       	ret

00000670 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     678:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     67c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__divmodhi4>
     68a:	28 2f       	mov	r18, r24
     68c:	39 2f       	mov	r19, r25
     68e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <__data_end>
     692:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <__data_end+0x1>
	
	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     696:	21 30       	cpi	r18, 0x01	; 1
     698:	31 05       	cpc	r19, r1
     69a:	e9 f0       	breq	.+58     	; 0x6d6 <CAN_transmit_message+0x66>
     69c:	22 30       	cpi	r18, 0x02	; 2
     69e:	31 05       	cpc	r19, r1
     6a0:	89 f1       	breq	.+98     	; 0x704 <CAN_transmit_message+0x94>
     6a2:	23 2b       	or	r18, r19
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <CAN_transmit_message+0x38>
     6a6:	44 c0       	rjmp	.+136    	; 0x730 <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6a8:	f8 01       	movw	r30, r16
     6aa:	40 85       	ldd	r20, Z+8	; 0x08
     6ac:	51 85       	ldd	r21, Z+9	; 0x09
     6ae:	42 95       	swap	r20
     6b0:	44 0f       	add	r20, r20
     6b2:	40 7e       	andi	r20, 0xE0	; 224
     6b4:	62 e3       	ldi	r22, 0x32	; 50
     6b6:	80 ee       	ldi	r24, 0xE0	; 224
     6b8:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6bc:	f8 01       	movw	r30, r16
     6be:	60 85       	ldd	r22, Z+8	; 0x08
     6c0:	71 85       	ldd	r23, Z+9	; 0x09
     6c2:	76 95       	lsr	r23
     6c4:	67 95       	ror	r22
     6c6:	76 95       	lsr	r23
     6c8:	67 95       	ror	r22
     6ca:	76 95       	lsr	r23
     6cc:	67 95       	ror	r22
     6ce:	81 e3       	ldi	r24, 0x31	; 49
     6d0:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     6d4:	2d c0       	rjmp	.+90     	; 0x730 <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6d6:	f8 01       	movw	r30, r16
     6d8:	40 85       	ldd	r20, Z+8	; 0x08
     6da:	51 85       	ldd	r21, Z+9	; 0x09
     6dc:	42 95       	swap	r20
     6de:	44 0f       	add	r20, r20
     6e0:	40 7e       	andi	r20, 0xE0	; 224
     6e2:	62 e4       	ldi	r22, 0x42	; 66
     6e4:	80 ee       	ldi	r24, 0xE0	; 224
     6e6:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     6ea:	f8 01       	movw	r30, r16
     6ec:	60 85       	ldd	r22, Z+8	; 0x08
     6ee:	71 85       	ldd	r23, Z+9	; 0x09
     6f0:	76 95       	lsr	r23
     6f2:	67 95       	ror	r22
     6f4:	76 95       	lsr	r23
     6f6:	67 95       	ror	r22
     6f8:	76 95       	lsr	r23
     6fa:	67 95       	ror	r22
     6fc:	81 e4       	ldi	r24, 0x41	; 65
     6fe:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
				
				break;
     702:	16 c0       	rjmp	.+44     	; 0x730 <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     704:	f8 01       	movw	r30, r16
     706:	40 85       	ldd	r20, Z+8	; 0x08
     708:	51 85       	ldd	r21, Z+9	; 0x09
     70a:	42 95       	swap	r20
     70c:	44 0f       	add	r20, r20
     70e:	40 7e       	andi	r20, 0xE0	; 224
     710:	62 e5       	ldi	r22, 0x52	; 82
     712:	80 ee       	ldi	r24, 0xE0	; 224
     714:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     718:	f8 01       	movw	r30, r16
     71a:	60 85       	ldd	r22, Z+8	; 0x08
     71c:	71 85       	ldd	r23, Z+9	; 0x09
     71e:	76 95       	lsr	r23
     720:	67 95       	ror	r22
     722:	76 95       	lsr	r23
     724:	67 95       	ror	r22
     726:	76 95       	lsr	r23
     728:	67 95       	ror	r22
     72a:	81 e5       	ldi	r24, 0x51	; 81
     72c:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     730:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     734:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	91 05       	cpc	r25, r1
     73c:	61 f0       	breq	.+24     	; 0x756 <CAN_transmit_message+0xe6>
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	91 05       	cpc	r25, r1
     742:	81 f0       	breq	.+32     	; 0x764 <CAN_transmit_message+0xf4>
     744:	89 2b       	or	r24, r25
     746:	a1 f4       	brne	.+40     	; 0x770 <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     748:	f8 01       	movw	r30, r16
     74a:	42 85       	ldd	r20, Z+10	; 0x0a
     74c:	65 e3       	ldi	r22, 0x35	; 53
     74e:	8f e0       	ldi	r24, 0x0F	; 15
     750:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				break;
     754:	0d c0       	rjmp	.+26     	; 0x770 <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     756:	f8 01       	movw	r30, r16
     758:	42 85       	ldd	r20, Z+10	; 0x0a
     75a:	65 e4       	ldi	r22, 0x45	; 69
     75c:	8f e0       	ldi	r24, 0x0F	; 15
     75e:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				break;
     762:	06 c0       	rjmp	.+12     	; 0x770 <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     764:	f8 01       	movw	r30, r16
     766:	42 85       	ldd	r20, Z+10	; 0x0a
     768:	65 e5       	ldi	r22, 0x55	; 85
     76a:	8f e0       	ldi	r24, 0x0F	; 15
     76c:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     770:	f8 01       	movw	r30, r16
     772:	82 85       	ldd	r24, Z+10	; 0x0a
     774:	88 23       	and	r24, r24
     776:	61 f1       	breq	.+88     	; 0x7d0 <CAN_transmit_message+0x160>
     778:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     77a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     77e:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	91 05       	cpc	r25, r1
     786:	71 f0       	breq	.+28     	; 0x7a4 <CAN_transmit_message+0x134>
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	91 05       	cpc	r25, r1
     78c:	a1 f0       	breq	.+40     	; 0x7b6 <CAN_transmit_message+0x146>
     78e:	89 2b       	or	r24, r25
     790:	d1 f4       	brne	.+52     	; 0x7c6 <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     792:	f8 01       	movw	r30, r16
     794:	ec 0f       	add	r30, r28
     796:	f1 1d       	adc	r31, r1
     798:	60 81       	ld	r22, Z
     79a:	86 e3       	ldi	r24, 0x36	; 54
     79c:	8c 0f       	add	r24, r28
     79e:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
				break;
     7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7a4:	f8 01       	movw	r30, r16
     7a6:	ec 0f       	add	r30, r28
     7a8:	f1 1d       	adc	r31, r1
     7aa:	60 81       	ld	r22, Z
     7ac:	86 e4       	ldi	r24, 0x46	; 70
     7ae:	8c 0f       	add	r24, r28
     7b0:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
				break;
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7b6:	f8 01       	movw	r30, r16
     7b8:	ec 0f       	add	r30, r28
     7ba:	f1 1d       	adc	r31, r1
     7bc:	60 81       	ld	r22, Z
     7be:	86 e5       	ldi	r24, 0x56	; 86
     7c0:	8c 0f       	add	r24, r28
     7c2:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     7c6:	cf 5f       	subi	r28, 0xFF	; 255
     7c8:	f8 01       	movw	r30, r16
     7ca:	82 85       	ldd	r24, Z+10	; 0x0a
     7cc:	8c 13       	cpse	r24, r28
     7ce:	d5 cf       	rjmp	.-86     	; 0x77a <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7d0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     7d4:	0e 94 b7 04 	call	0x96e	; 0x96e <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     7ec:	82 e6       	ldi	r24, 0x62	; 98
     7ee:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
     7f2:	c8 2f       	mov	r28, r24
     7f4:	81 e6       	ldi	r24, 0x61	; 97
     7f6:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
     7fa:	c2 95       	swap	r28
     7fc:	c6 95       	lsr	r28
     7fe:	c7 70       	andi	r28, 0x07	; 7
     800:	28 e0       	ldi	r18, 0x08	; 8
     802:	82 9f       	mul	r24, r18
     804:	c0 01       	movw	r24, r0
     806:	11 24       	eor	r1, r1
     808:	8c 0f       	add	r24, r28
     80a:	91 1d       	adc	r25, r1
     80c:	f7 01       	movw	r30, r14
     80e:	91 87       	std	Z+9, r25	; 0x09
     810:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     812:	85 e6       	ldi	r24, 0x65	; 101
     814:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
     818:	8f 70       	andi	r24, 0x0F	; 15
     81a:	f7 01       	movw	r30, r14
     81c:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     81e:	82 85       	ldd	r24, Z+10	; 0x0a
     820:	88 23       	and	r24, r24
     822:	81 f0       	breq	.+32     	; 0x844 <CAN_receiveMessage+0x64>
     824:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     826:	0c 2f       	mov	r16, r28
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	86 e6       	ldi	r24, 0x66	; 102
     82c:	8c 0f       	add	r24, r28
     82e:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
     832:	f7 01       	movw	r30, r14
     834:	e0 0f       	add	r30, r16
     836:	f1 1f       	adc	r31, r17
     838:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     83a:	cf 5f       	subi	r28, 0xFF	; 255
     83c:	f7 01       	movw	r30, r14
     83e:	82 85       	ldd	r24, Z+10	; 0x0a
     840:	8c 13       	cpse	r24, r28
     842:	f1 cf       	rjmp	.-30     	; 0x826 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	08 95       	ret

00000850 <CAN_sendInputData>:

void CAN_sendInputData() {
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	2b 97       	sbiw	r28, 0x0b	; 11
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9a 87       	std	Y+10, r25	; 0x0a
     86a:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     870:	ec e7       	ldi	r30, 0x7C	; 124
     872:	f3 e0       	ldi	r31, 0x03	; 3
     874:	80 81       	ld	r24, Z
     876:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     87c:	ea e7       	ldi	r30, 0x7A	; 122
     87e:	f3 e0       	ldi	r31, 0x03	; 3
     880:	80 81       	ld	r24, Z
     882:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     884:	81 81       	ldd	r24, Z+1	; 0x01
     886:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     888:	e7 e6       	ldi	r30, 0x67	; 103
     88a:	f3 e0       	ldi	r31, 0x03	; 3
     88c:	80 81       	ld	r24, Z
     88e:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     890:	81 81       	ldd	r24, Z+1	; 0x01
     892:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	0e 94 38 03 	call	0x670	; 0x670 <CAN_transmit_message>
     89c:	2b 96       	adiw	r28, 0x0b	; 11
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <CAN_controller_read>:
#include <stdio.h>
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"

uint8_t CAN_controller_read(uint8_t addr) {
     8ae:	cf 93       	push	r28
     8b0:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	84 e0       	ldi	r24, 0x04	; 4
     8b6:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8c0:	8c 2f       	mov	r24, r28
     8c2:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8c6:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterRead>
     8ca:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
	
	return data;
}
     8d4:	8c 2f       	mov	r24, r28
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	d8 2f       	mov	r29, r24
     8e0:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8f0:	8d 2f       	mov	r24, r29
     8f2:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
	SPI_masterWrite(data);
     8f6:	8c 2f       	mov	r24, r28
     8f8:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
	
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	d8 2f       	mov	r29, r24
     912:	16 2f       	mov	r17, r22
     914:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	84 e0       	ldi	r24, 0x04	; 4
     91a:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
		SPI_masterWrite(addr);
     924:	81 2f       	mov	r24, r17
     926:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
		SPI_masterWrite(mask);
     92a:	8d 2f       	mov	r24, r29
     92c:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
		SPI_masterWrite(data);
     930:	8c 2f       	mov	r24, r28
     932:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>

}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	08 95       	ret

00000946 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
	printf("Before spi write");
     94e:	83 ee       	ldi	r24, 0xE3	; 227
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>
	SPI_masterWrite(MCP_RESET);
     95a:	80 ec       	ldi	r24, 0xC0	; 192
     95c:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
}
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	08 95       	ret

0000096e <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     96e:	cf 93       	push	r28
     970:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
	switch (buffer) {
     97a:	c1 30       	cpi	r28, 0x01	; 1
     97c:	41 f0       	breq	.+16     	; 0x98e <CAN_controller_RTS+0x20>
     97e:	18 f0       	brcs	.+6      	; 0x986 <CAN_controller_RTS+0x18>
     980:	c2 30       	cpi	r28, 0x02	; 2
     982:	49 f0       	breq	.+18     	; 0x996 <CAN_controller_RTS+0x28>
     984:	0b c0       	rjmp	.+22     	; 0x99c <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     986:	81 e8       	ldi	r24, 0x81	; 129
     988:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
			break;
     98c:	07 c0       	rjmp	.+14     	; 0x99c <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     98e:	82 e8       	ldi	r24, 0x82	; 130
     990:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
			break;
     994:	03 c0       	rjmp	.+6      	; 0x99c <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     996:	84 e8       	ldi	r24, 0x84	; 132
     998:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	0e 94 42 0c 	call	0x1884	; 0x1884 <SPI_setChipSelect>
}
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     9ae:	0e 94 a3 04 	call	0x946	; 0x946 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9b2:	8e e0       	ldi	r24, 0x0E	; 14
     9b4:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     9b8:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     9ba:	80 38       	cpi	r24, 0x80	; 128
     9bc:	69 f0       	breq	.+26     	; 0x9d8 <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     9be:	1f 92       	push	r1
     9c0:	8f 93       	push	r24
     9c2:	84 ef       	ldi	r24, 0xF4	; 244
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	9f 93       	push	r25
     9c8:	8f 93       	push	r24
     9ca:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>
		return;
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	38 c0       	rjmp	.+112    	; 0xa48 <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9d8:	4c 2f       	mov	r20, r28
     9da:	4c 60       	ori	r20, 0x0C	; 12
     9dc:	6f e0       	ldi	r22, 0x0F	; 15
     9de:	8e ee       	ldi	r24, 0xEE	; 238
     9e0:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	6b e2       	ldi	r22, 0x2B	; 43
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     9ee:	40 e6       	ldi	r20, 0x60	; 96
     9f0:	60 e6       	ldi	r22, 0x60	; 96
     9f2:	80 e6       	ldi	r24, 0x60	; 96
     9f4:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <CAN_controller_setMode+0x56>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <CAN_controller_setMode+0x60>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a0a:	8e e0       	ldi	r24, 0x0E	; 14
     a0c:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     a10:	d8 2f       	mov	r29, r24
     a12:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     a14:	cd 17       	cp	r28, r29
     a16:	61 f0       	breq	.+24     	; 0xa30 <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     a18:	1f 92       	push	r1
     a1a:	df 93       	push	r29
     a1c:	8f e0       	ldi	r24, 0x0F	; 15
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     a30:	1f 92       	push	r1
     a32:	df 93       	push	r29
     a34:	8f e2       	ldi	r24, 0x2F	; 47
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	9f 93       	push	r25
     a3a:	8f 93       	push	r24
     a3c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     a4e:	0e 94 30 0c 	call	0x1860	; 0x1860 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     a52:	80 e4       	ldi	r24, 0x40	; 64
     a54:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a58:	8b b7       	in	r24, 0x3b	; 59
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a5e:	85 b7       	in	r24, 0x35	; 53
     a60:	82 60       	ori	r24, 0x02	; 2
     a62:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a64:	85 b7       	in	r24, 0x35	; 53
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a6a:	81 b3       	in	r24, 0x11	; 17
     a6c:	84 70       	andi	r24, 0x04	; 4
     a6e:	81 bb       	out	0x11, r24	; 17
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <CAN_controller_init+0x28>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <CAN_controller_init+0x32>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     a82:	8e e3       	ldi	r24, 0x3E	; 62
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a8e:	8e e0       	ldi	r24, 0x0E	; 14
     a90:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
	printf("Data: %i\n\r", status);
     a94:	1f 92       	push	r1
     a96:	8f 93       	push	r24
     a98:	87 e5       	ldi	r24, 0x57	; 87
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>

}
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	08 95       	ret

00000ab2 <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     ab2:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
     ab6:	ef e7       	ldi	r30, 0x7F	; 127
     ab8:	f3 e0       	ldi	r31, 0x03	; 3
     aba:	a4 e8       	ldi	r26, 0x84	; 132
     abc:	b3 e0       	ldi	r27, 0x03	; 3
     abe:	84 e8       	ldi	r24, 0x84	; 132
     ac0:	93 e0       	ldi	r25, 0x03	; 3
     ac2:	11 92       	st	Z+, r1
     ac4:	1d 92       	st	X+, r1
     ac6:	e8 17       	cp	r30, r24
     ac8:	f9 07       	cpc	r31, r25
     aca:	d9 f7       	brne	.-10     	; 0xac2 <game_init+0x10>
     acc:	08 95       	ret

00000ace <game_countdown>:
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	1f 92       	push	r1
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	4a e0       	ldi	r20, 0x0A	; 10
     ade:	be 01       	movw	r22, r28
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
     aec:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
     af0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
     af4:	0b e6       	ldi	r16, 0x6B	; 107
     af6:	13 e0       	ldi	r17, 0x03	; 3
     af8:	f8 01       	movw	r30, r16
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	02 96       	adiw	r24, 0x02	; 2
     b00:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     b12:	86 e0       	ldi	r24, 0x06	; 6
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     b1a:	ff ef       	ldi	r31, 0xFF	; 255
     b1c:	2f e7       	ldi	r18, 0x7F	; 127
     b1e:	87 e0       	ldi	r24, 0x07	; 7
     b20:	f1 50       	subi	r31, 0x01	; 1
     b22:	20 40       	sbci	r18, 0x00	; 0
     b24:	80 40       	sbci	r24, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <game_countdown+0x52>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <game_countdown+0x5c>
     b2a:	00 00       	nop
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     b34:	9f ef       	ldi	r25, 0xFF	; 255
     b36:	ef e7       	ldi	r30, 0x7F	; 127
     b38:	f7 e0       	ldi	r31, 0x07	; 7
     b3a:	91 50       	subi	r25, 0x01	; 1
     b3c:	e0 40       	sbci	r30, 0x00	; 0
     b3e:	f0 40       	sbci	r31, 0x00	; 0
     b40:	e1 f7       	brne	.-8      	; 0xb3a <game_countdown+0x6c>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <game_countdown+0x76>
     b44:	00 00       	nop
     b46:	4a e0       	ldi	r20, 0x0A	; 10
     b48:	be 01       	movw	r22, r28
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
     b56:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
     b5a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
     b5e:	f8 01       	movw	r30, r16
     b60:	80 81       	ld	r24, Z
     b62:	91 81       	ldd	r25, Z+1	; 0x01
     b64:	02 96       	adiw	r24, 0x02	; 2
     b66:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
     b70:	ce 01       	movw	r24, r28
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     b78:	86 e0       	ldi	r24, 0x06	; 6
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     b80:	ff ef       	ldi	r31, 0xFF	; 255
     b82:	2f e7       	ldi	r18, 0x7F	; 127
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	f1 50       	subi	r31, 0x01	; 1
     b88:	20 40       	sbci	r18, 0x00	; 0
     b8a:	80 40       	sbci	r24, 0x00	; 0
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <game_countdown+0xb8>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <game_countdown+0xc2>
     b90:	00 00       	nop
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     b9a:	9f ef       	ldi	r25, 0xFF	; 255
     b9c:	ef e7       	ldi	r30, 0x7F	; 127
     b9e:	f7 e0       	ldi	r31, 0x07	; 7
     ba0:	91 50       	subi	r25, 0x01	; 1
     ba2:	e0 40       	sbci	r30, 0x00	; 0
     ba4:	f0 40       	sbci	r31, 0x00	; 0
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <game_countdown+0xd2>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <game_countdown+0xdc>
     baa:	00 00       	nop
     bac:	4a e0       	ldi	r20, 0x0A	; 10
     bae:	be 01       	movw	r22, r28
     bb0:	6f 5f       	subi	r22, 0xFF	; 255
     bb2:	7f 4f       	sbci	r23, 0xFF	; 255
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
     bbc:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
     bc0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
     bc4:	f8 01       	movw	r30, r16
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	02 96       	adiw	r24, 0x02	; 2
     bcc:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     bde:	86 e0       	ldi	r24, 0x06	; 6
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     be6:	ff ef       	ldi	r31, 0xFF	; 255
     be8:	2f e7       	ldi	r18, 0x7F	; 127
     bea:	87 e0       	ldi	r24, 0x07	; 7
     bec:	f1 50       	subi	r31, 0x01	; 1
     bee:	20 40       	sbci	r18, 0x00	; 0
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	e1 f7       	brne	.-8      	; 0xbec <game_countdown+0x11e>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <game_countdown+0x128>
     bf6:	00 00       	nop
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	ef e7       	ldi	r30, 0x7F	; 127
     c04:	f7 e0       	ldi	r31, 0x07	; 7
     c06:	91 50       	subi	r25, 0x01	; 1
     c08:	e0 40       	sbci	r30, 0x00	; 0
     c0a:	f0 40       	sbci	r31, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <game_countdown+0x138>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <game_countdown+0x142>
     c10:	00 00       	nop
     c12:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
     c16:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	02 96       	adiw	r24, 0x02	; 2
     c22:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
     c2c:	82 e6       	ldi	r24, 0x62	; 98
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     c34:	87 e1       	ldi	r24, 0x17	; 23
     c36:	94 e0       	ldi	r25, 0x04	; 4
     c38:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     c3c:	ff ef       	ldi	r31, 0xFF	; 255
     c3e:	2f e7       	ldi	r18, 0x7F	; 127
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	f1 50       	subi	r31, 0x01	; 1
     c44:	20 40       	sbci	r18, 0x00	; 0
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	e1 f7       	brne	.-8      	; 0xc42 <game_countdown+0x174>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <game_countdown+0x17e>
     c4c:	00 00       	nop
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     c56:	9f ef       	ldi	r25, 0xFF	; 255
     c58:	ef e7       	ldi	r30, 0x7F	; 127
     c5a:	f7 e0       	ldi	r31, 0x07	; 7
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	e0 40       	sbci	r30, 0x00	; 0
     c60:	f0 40       	sbci	r31, 0x00	; 0
     c62:	e1 f7       	brne	.-8      	; 0xc5c <game_countdown+0x18e>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <game_countdown+0x198>
     c66:	00 00       	nop
     c68:	0f 90       	pop	r0
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <game_initialCANMessage>:
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	2b 97       	sbiw	r28, 0x0b	; 11
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9a 87       	std	Y+10, r25	; 0x0a
     c8e:	89 87       	std	Y+9, r24	; 0x09
     c90:	1b 86       	std	Y+11, r1	; 0x0b
     c92:	ce 01       	movw	r24, r28
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	0e 94 38 03 	call	0x670	; 0x670 <CAN_transmit_message>
     c9a:	2b 96       	adiw	r28, 0x0b	; 11
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <game_newgame>:
     cac:	f8 94       	cli
     cae:	0e 94 67 05 	call	0xace	; 0xace <game_countdown>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <gameActive>
     cb8:	e9 e8       	ldi	r30, 0x89	; 137
     cba:	f3 e0       	ldi	r31, 0x03	; 3
     cbc:	8a e0       	ldi	r24, 0x0A	; 10
     cbe:	80 83       	st	Z, r24
     cc0:	12 82       	std	Z+2, r1	; 0x02
     cc2:	83 e6       	ldi	r24, 0x63	; 99
     cc4:	81 83       	std	Z+1, r24	; 0x01
     cc6:	0e 94 3a 06 	call	0xc74	; 0xc74 <game_initialCANMessage>
     cca:	78 94       	sei
     ccc:	08 95       	ret

00000cce <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     cce:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <flag>
     cd2:	88 23       	and	r24, r24
     cd4:	d9 f0       	breq	.+54     	; 0xd0c <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     cd6:	f8 94       	cli
		printf("Message received");
     cd8:	85 e6       	ldi	r24, 0x65	; 101
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <printf>
		flag=0;
     ce4:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <flag>
		CAN_receiveMessage(&received_message);
     ce8:	8f e6       	ldi	r24, 0x6F	; 111
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     cf0:	0e 94 32 03 	call	0x664	; 0x664 <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     cf4:	af e6       	ldi	r26, 0x6F	; 111
     cf6:	b3 e0       	ldi	r27, 0x03	; 3
     cf8:	8c 91       	ld	r24, X
     cfa:	e9 e8       	ldi	r30, 0x89	; 137
     cfc:	f3 e0       	ldi	r31, 0x03	; 3
     cfe:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	8c 91       	ld	r24, X
     d04:	82 83       	std	Z+2, r24	; 0x02
		sei();
     d06:	78 94       	sei
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	08 95       	ret

00000d0e <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	00 d0       	rcall	.+0      	; 0xd18 <game_updateOled+0xa>
     d18:	00 d0       	rcall	.+0      	; 0xd1a <game_updateOled+0xc>
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     d20:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
	oled_home();
     d24:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d28:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <currentMenu>
     d2c:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <currentMenu+0x1>
     d30:	02 96       	adiw	r24, 0x02	; 2
     d32:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
	switch(gameID) {
     d3c:	11 30       	cpi	r17, 0x01	; 1
     d3e:	19 f0       	breq	.+6      	; 0xd46 <game_updateOled+0x38>
     d40:	12 30       	cpi	r17, 0x02	; 2
     d42:	49 f1       	breq	.+82     	; 0xd96 <game_updateOled+0x88>
     d44:	39 c0       	rjmp	.+114    	; 0xdb8 <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     d46:	86 e7       	ldi	r24, 0x76	; 118
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
			itoa(gameData.score,score_string,10);
     d4e:	09 e8       	ldi	r16, 0x89	; 137
     d50:	13 e0       	ldi	r17, 0x03	; 3
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d52:	f8 01       	movw	r30, r16
     d54:	80 81       	ld	r24, Z
     d56:	4a e0       	ldi	r20, 0x0A	; 10
     d58:	be 01       	movw	r22, r28
     d5a:	6f 5f       	subi	r22, 0xFF	; 255
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
			oled_print(score_string);
     d64:	ce 01       	movw	r24, r28
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
			oled_gotoLine(5);
     d6c:	85 e0       	ldi	r24, 0x05	; 5
     d6e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
			oled_print("Time: ");
     d72:	8e e7       	ldi	r24, 0x7E	; 126
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     d7a:	f8 01       	movw	r30, r16
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	4a e0       	ldi	r20, 0x0A	; 10
     d80:	be 01       	movw	r22, r28
     d82:	6d 5f       	subi	r22, 0xFD	; 253
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d8c:	ce 01       	movw	r24, r28
     d8e:	03 96       	adiw	r24, 0x03	; 3
     d90:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
			break;
     d94:	11 c0       	rjmp	.+34     	; 0xdb8 <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d96:	85 e8       	ldi	r24, 0x85	; 133
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     d9e:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <gameData+0x2>
     da2:	4a e0       	ldi	r20, 0x0A	; 10
     da4:	be 01       	movw	r22, r28
     da6:	6d 5f       	subi	r22, 0xFD	; 253
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     db0:	ce 01       	movw	r24, r28
     db2:	03 96       	adiw	r24, 0x03	; 3
     db4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
			break;

	}
	
}
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <game_sendStop>:

void game_sendStop() {
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	2b 97       	sbiw	r28, 0x0b	; 11
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9a 87       	std	Y+10, r25	; 0x0a
     de4:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     de6:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 38 03 	call	0x670	; 0x670 <CAN_transmit_message>
}
     df0:	2b 96       	adiw	r28, 0x0b	; 11
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <game_finished>:
void game_finished(uint8_t gameID) {
     e02:	cf 93       	push	r28
     e04:	c8 2f       	mov	r28, r24
	cli();
     e06:	f8 94       	cli
	game_sendStop();
     e08:	0e 94 e5 06 	call	0xdca	; 0xdca <game_sendStop>
	oled_reset();
     e0c:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
	oled_home();
     e10:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
	oled_gotoLine(3);
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
	oled_print("Game over");
     e1a:	80 e9       	ldi	r24, 0x90	; 144
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
	oled_gotoLine(4);
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
	oled_print("Maybe HS?");
     e28:	8a e9       	ldi	r24, 0x9A	; 154
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
	music_gameOver();
     e30:	0e 94 96 08 	call	0x112c	; 0x112c <music_gameOver>
	gameActive=0;
     e34:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
	
	menu_init();
     e38:	0e 94 87 0a 	call	0x150e	; 0x150e <menu_init>
	switch (gameID) {
     e3c:	c1 30       	cpi	r28, 0x01	; 1
     e3e:	51 f0       	breq	.+20     	; 0xe54 <game_finished+0x52>
     e40:	c2 30       	cpi	r28, 0x02	; 2
     e42:	09 f0       	breq	.+2      	; 0xe46 <game_finished+0x44>
     e44:	50 c0       	rjmp	.+160    	; 0xee6 <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e46:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <gameData+0x2>
     e4a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <highScores2>
     e4e:	83 17       	cp	r24, r19
     e50:	48 f5       	brcc	.+82     	; 0xea4 <game_finished+0xa2>
     e52:	33 c0       	rjmp	.+102    	; 0xeba <game_finished+0xb8>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e54:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <gameData>
     e58:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <highScores>
     e5c:	83 17       	cp	r24, r19
     e5e:	58 f0       	brcs	.+22     	; 0xe76 <game_finished+0x74>
     e60:	e0 e8       	ldi	r30, 0x80	; 128
     e62:	f3 e0       	ldi	r31, 0x03	; 3
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e68:	21 91       	ld	r18, Z+
     e6a:	23 17       	cp	r18, r19
     e6c:	b0 f4       	brcc	.+44     	; 0xe9a <game_finished+0x98>
					for (int a = 4; a>i; a--) {
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	91 05       	cpc	r25, r1
     e72:	1c f0       	brlt	.+6      	; 0xe7a <game_finished+0x78>
     e74:	0d c0       	rjmp	.+26     	; 0xe90 <game_finished+0x8e>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	e3 e8       	ldi	r30, 0x83	; 131
     e7c:	f3 e0       	ldi	r31, 0x03	; 3
     e7e:	44 e0       	ldi	r20, 0x04	; 4
     e80:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e82:	41 50       	subi	r20, 0x01	; 1
     e84:	51 09       	sbc	r21, r1
     e86:	22 91       	ld	r18, -Z
     e88:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e8a:	84 17       	cp	r24, r20
     e8c:	95 07       	cpc	r25, r21
     e8e:	cc f3       	brlt	.-14     	; 0xe82 <game_finished+0x80>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e90:	fc 01       	movw	r30, r24
     e92:	e1 58       	subi	r30, 0x81	; 129
     e94:	fc 4f       	sbci	r31, 0xFC	; 252
     e96:	30 83       	st	Z, r19
					break;
     e98:	26 c0       	rjmp	.+76     	; 0xee6 <game_finished+0xe4>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	85 30       	cpi	r24, 0x05	; 5
     e9e:	91 05       	cpc	r25, r1
     ea0:	19 f7       	brne	.-58     	; 0xe68 <game_finished+0x66>
     ea2:	21 c0       	rjmp	.+66     	; 0xee6 <game_finished+0xe4>
     ea4:	e5 e8       	ldi	r30, 0x85	; 133
     ea6:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     eac:	21 91       	ld	r18, Z+
     eae:	23 17       	cp	r18, r19
     eb0:	b0 f4       	brcc	.+44     	; 0xede <game_finished+0xdc>
					for (int a = 4; a>i; a--) {
     eb2:	84 30       	cpi	r24, 0x04	; 4
     eb4:	91 05       	cpc	r25, r1
     eb6:	1c f0       	brlt	.+6      	; 0xebe <game_finished+0xbc>
     eb8:	0d c0       	rjmp	.+26     	; 0xed4 <game_finished+0xd2>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	e8 e8       	ldi	r30, 0x88	; 136
     ec0:	f3 e0       	ldi	r31, 0x03	; 3
     ec2:	44 e0       	ldi	r20, 0x04	; 4
     ec4:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     ec6:	41 50       	subi	r20, 0x01	; 1
     ec8:	51 09       	sbc	r21, r1
     eca:	22 91       	ld	r18, -Z
     ecc:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     ece:	84 17       	cp	r24, r20
     ed0:	95 07       	cpc	r25, r21
     ed2:	cc f3       	brlt	.-14     	; 0xec6 <game_finished+0xc4>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     ed4:	fc 01       	movw	r30, r24
     ed6:	ec 57       	subi	r30, 0x7C	; 124
     ed8:	fc 4f       	sbci	r31, 0xFC	; 252
     eda:	30 83       	st	Z, r19
					break;
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <game_finished+0xe4>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	85 30       	cpi	r24, 0x05	; 5
     ee2:	91 05       	cpc	r25, r1
     ee4:	19 f7       	brne	.-58     	; 0xeac <game_finished+0xaa>
			break;
		
	}
	
	
	sei();
     ee6:	78 94       	sei
}
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <game_play>:
void game_play(uint8_t gameID)
{
     eec:	cf 93       	push	r28
     eee:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     ef0:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <gameActive>
     ef4:	81 11       	cpse	r24, r1
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <game_play+0x10>
	{
		game_newgame();	
     ef8:	0e 94 56 06 	call	0xcac	; 0xcac <game_newgame>
	}
	if (buttons.right_button) {
     efc:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <buttons+0x1>
     f00:	88 23       	and	r24, r24
     f02:	21 f0       	breq	.+8      	; 0xf0c <game_play+0x20>
		gameActive = 0;
     f04:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
		menu_init();
     f08:	0e 94 87 0a 	call	0x150e	; 0x150e <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     f0c:	0e 94 28 04 	call	0x850	; 0x850 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     f10:	0e 94 67 06 	call	0xcce	; 0xcce <game_recieveGameData>
	game_updateOled(gameID);
     f14:	8c 2f       	mov	r24, r28
     f16:	0e 94 87 06 	call	0xd0e	; 0xd0e <game_updateOled>
	switch (gameID) {
     f1a:	c1 30       	cpi	r28, 0x01	; 1
     f1c:	19 f0       	breq	.+6      	; 0xf24 <game_play+0x38>
     f1e:	c2 30       	cpi	r28, 0x02	; 2
     f20:	49 f0       	breq	.+18     	; 0xf34 <game_play+0x48>
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <game_play+0x56>
		case 1:
			if (gameData.playtime==10) {
     f24:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <gameData+0x2>
     f28:	8a 30       	cpi	r24, 0x0A	; 10
     f2a:	59 f4       	brne	.+22     	; 0xf42 <game_play+0x56>
				game_finished(gameID);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 01 07 	call	0xe02	; 0xe02 <game_finished>
     f32:	07 c0       	rjmp	.+14     	; 0xf42 <game_play+0x56>
			}
			break;
		case 2:
			if (gameData.score <10) {
     f34:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <gameData>
     f38:	8a 30       	cpi	r24, 0x0A	; 10
     f3a:	18 f4       	brcc	.+6      	; 0xf42 <game_play+0x56>
				game_finished(gameID);
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	0e 94 01 07 	call	0xe02	; 0xe02 <game_finished>
			}
			break;
	}
	
	
}
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <game_displayHighscores+0x16>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	08 2f       	mov	r16, r24
	oled_reset();
     f62:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
	oled_home();
     f66:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f6a:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <currentMenu>
     f6e:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <currentMenu+0x1>
     f72:	02 96       	adiw	r24, 0x02	; 2
     f74:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
     f78:	0f 2e       	mov	r0, r31
     f7a:	ff e7       	ldi	r31, 0x7F	; 127
     f7c:	af 2e       	mov	r10, r31
     f7e:	f3 e0       	ldi	r31, 0x03	; 3
     f80:	bf 2e       	mov	r11, r31
     f82:	f0 2d       	mov	r31, r0
     f84:	0f 2e       	mov	r0, r31
     f86:	f4 e8       	ldi	r31, 0x84	; 132
     f88:	cf 2e       	mov	r12, r31
     f8a:	f3 e0       	ldi	r31, 0x03	; 3
     f8c:	df 2e       	mov	r13, r31
     f8e:	f0 2d       	mov	r31, r0
     f90:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f92:	e1 2c       	mov	r14, r1
     f94:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f96:	81 2f       	mov	r24, r17
     f98:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
		oled_print("Score ");
     f9c:	84 ea       	ldi	r24, 0xA4	; 164
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	e8 1a       	sub	r14, r24
     fa8:	f8 0a       	sbc	r15, r24
     faa:	4a e0       	ldi	r20, 0x0A	; 10
     fac:	be 01       	movw	r22, r28
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	c7 01       	movw	r24, r14
     fb4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
		oled_print(num);
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
		oled_print(": ");
     fc0:	82 e8       	ldi	r24, 0x82	; 130
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
		switch (gameID) {
     fc8:	01 30       	cpi	r16, 0x01	; 1
     fca:	19 f0       	breq	.+6      	; 0xfd2 <game_displayHighscores+0x8c>
     fcc:	02 30       	cpi	r16, 0x02	; 2
     fce:	59 f0       	breq	.+22     	; 0xfe6 <game_displayHighscores+0xa0>
     fd0:	13 c0       	rjmp	.+38     	; 0xff8 <game_displayHighscores+0xb2>
     fd2:	f5 01       	movw	r30, r10
     fd4:	80 81       	ld	r24, Z
     fd6:	4a e0       	ldi	r20, 0x0A	; 10
     fd8:	be 01       	movw	r22, r28
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
     fe4:	09 c0       	rjmp	.+18     	; 0xff8 <game_displayHighscores+0xb2>
     fe6:	f6 01       	movw	r30, r12
     fe8:	80 81       	ld	r24, Z
     fea:	4a e0       	ldi	r20, 0x0A	; 10
     fec:	be 01       	movw	r22, r28
     fee:	6f 5f       	subi	r22, 0xFF	; 255
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
    1000:	1f 5f       	subi	r17, 0xFF	; 255
    1002:	ff ef       	ldi	r31, 0xFF	; 255
    1004:	af 1a       	sub	r10, r31
    1006:	bf 0a       	sbc	r11, r31
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	c8 1a       	sub	r12, r24
    100c:	d8 0a       	sbc	r13, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
    100e:	18 30       	cpi	r17, 0x08	; 8
    1010:	11 f6       	brne	.-124    	; 0xf96 <game_displayHighscores+0x50>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	bf 90       	pop	r11
    1028:	af 90       	pop	r10
    102a:	08 95       	ret

0000102c <music_playRick>:
	pwm_setFreq(0);
	sei();

}
*/
void music_playRick() {
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
	
	//printf("You got rickrolled\n\n\r");
	cli();
    1044:	f8 94       	cli
	oled_home();
    1046:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
	oled_reset();
    104a:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
    104e:	0d ee       	ldi	r16, 0xED	; 237
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	0f 2e       	mov	r0, r31
    1054:	fe e9       	ldi	r31, 0x9E	; 158
    1056:	ef 2e       	mov	r14, r31
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	ff 2e       	mov	r15, r31
    105c:	f0 2d       	mov	r31, r0
    105e:	c6 e0       	ldi	r28, 0x06	; 6
    1060:	d1 e0       	ldi	r29, 0x01	; 1
    1062:	0f 2e       	mov	r0, r31
    1064:	f9 e2       	ldi	r31, 0x29	; 41
    1066:	cf 2e       	mov	r12, r31
    1068:	f2 e0       	ldi	r31, 0x02	; 2
    106a:	df 2e       	mov	r13, r31
    106c:	f0 2d       	mov	r31, r0
    106e:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1070:	0f 2e       	mov	r0, r31
    1072:	f4 e1       	ldi	r31, 0x14	; 20
    1074:	af 2e       	mov	r10, r31
    1076:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1078:	b1 10       	cpse	r11, r1
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <music_playRick+0x54>
			oled_reset();
    107c:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
    1080:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1082:	e8 81       	ld	r30, Y
    1084:	f9 81       	ldd	r31, Y+1	; 0x01
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	41 f0       	breq	.+16     	; 0x109c <music_playRick+0x70>
			oled_gotoLine(line);
    108c:	8b 2d       	mov	r24, r11
    108e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
			line++;
    1092:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    1094:	88 81       	ld	r24, Y
    1096:	99 81       	ldd	r25, Y+1	; 0x01
    1098:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    109c:	d4 01       	movw	r26, r8
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	22 96       	adiw	r28, 0x02	; 2
    10a4:	01 90       	ld	r0, Z+
    10a6:	00 20       	and	r0, r0
    10a8:	e9 f7       	brne	.-6      	; 0x10a4 <music_playRick+0x78>
    10aa:	32 97       	sbiw	r30, 0x02	; 2
    10ac:	80 81       	ld	r24, Z
    10ae:	8e 32       	cpi	r24, 0x2E	; 46
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <music_playRick+0x88>
			
			line = 0;
    10b2:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    10b4:	f8 01       	movw	r30, r16
    10b6:	65 91       	lpm	r22, Z+
    10b8:	74 91       	lpm	r23, Z
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    10c2:	f7 01       	movw	r30, r14
    10c4:	84 91       	lpm	r24, Z
    10c6:	a8 9e       	mul	r10, r24
    10c8:	c0 01       	movw	r24, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	09 2e       	mov	r0, r25
    10ce:	00 0c       	add	r0, r0
    10d0:	aa 0b       	sbc	r26, r26
    10d2:	bb 0b       	sbc	r27, r27
		while (duration--) {
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	a1 05       	cpc	r26, r1
    10d8:	b1 05       	cpc	r27, r1
    10da:	51 f0       	breq	.+20     	; 0x10f0 <music_playRick+0xc4>
    10dc:	ec ec       	ldi	r30, 0xCC	; 204
    10de:	f4 e0       	ldi	r31, 0x04	; 4
    10e0:	31 97       	sbiw	r30, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <music_playRick+0xb4>
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <music_playRick+0xba>
    10e6:	00 00       	nop
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	a1 09       	sbc	r26, r1
    10ec:	b1 09       	sbc	r27, r1
    10ee:	b1 f7       	brne	.-20     	; 0x10dc <music_playRick+0xb0>
    10f0:	0c 5f       	subi	r16, 0xFC	; 252
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	ff ef       	ldi	r31, 0xFF	; 255
    10f6:	ef 1a       	sub	r14, r31
    10f8:	ff 0a       	sbc	r15, r31
	//printf("You got rickrolled\n\n\r");
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    10fa:	0c 15       	cp	r16, r12
    10fc:	1d 05       	cpc	r17, r13
    10fe:	09 f0       	breq	.+2      	; 0x1102 <music_playRick+0xd6>
    1100:	bb cf       	rjmp	.-138    	; 0x1078 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	cb 01       	movw	r24, r22
    1108:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
	menu_init();
    110c:	0e 94 87 0a 	call	0x150e	; 0x150e <menu_init>

	sei();
    1110:	78 94       	sei
	

}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	bf 90       	pop	r11
    1124:	af 90       	pop	r10
    1126:	9f 90       	pop	r9
    1128:	8f 90       	pop	r8
    112a:	08 95       	ret

0000112c <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    112c:	6b e0       	ldi	r22, 0x0B	; 11
    112e:	72 e0       	ldi	r23, 0x02	; 2
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    1138:	2f ef       	ldi	r18, 0xFF	; 255
    113a:	8f e7       	ldi	r24, 0x7F	; 127
    113c:	97 e0       	ldi	r25, 0x07	; 7
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	80 40       	sbci	r24, 0x00	; 0
    1142:	90 40       	sbci	r25, 0x00	; 0
    1144:	e1 f7       	brne	.-8      	; 0x113e <music_gameOver+0x12>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <music_gameOver+0x1c>
    1148:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    114a:	68 e8       	ldi	r22, 0x88	; 136
    114c:	71 e0       	ldi	r23, 0x01	; 1
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	8f e7       	ldi	r24, 0x7F	; 127
    115a:	97 e0       	ldi	r25, 0x07	; 7
    115c:	21 50       	subi	r18, 0x01	; 1
    115e:	80 40       	sbci	r24, 0x00	; 0
    1160:	90 40       	sbci	r25, 0x00	; 0
    1162:	e1 f7       	brne	.-8      	; 0x115c <music_gameOver+0x30>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <music_gameOver+0x3a>
    1166:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    1168:	67 e3       	ldi	r22, 0x37	; 55
    116a:	71 e0       	ldi	r23, 0x01	; 1
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    1174:	2f ef       	ldi	r18, 0xFF	; 255
    1176:	8f e7       	ldi	r24, 0x7F	; 127
    1178:	97 e0       	ldi	r25, 0x07	; 7
    117a:	21 50       	subi	r18, 0x01	; 1
    117c:	80 40       	sbci	r24, 0x00	; 0
    117e:	90 40       	sbci	r25, 0x00	; 0
    1180:	e1 f7       	brne	.-8      	; 0x117a <music_gameOver+0x4e>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <music_gameOver+0x58>
    1184:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    1186:	66 e0       	ldi	r22, 0x06	; 6
    1188:	71 e0       	ldi	r23, 0x01	; 1
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    1192:	2f ef       	ldi	r18, 0xFF	; 255
    1194:	8f e7       	ldi	r24, 0x7F	; 127
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	21 50       	subi	r18, 0x01	; 1
    119a:	80 40       	sbci	r24, 0x00	; 0
    119c:	90 40       	sbci	r25, 0x00	; 0
    119e:	e1 f7       	brne	.-8      	; 0x1198 <music_gameOver+0x6c>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <music_gameOver+0x76>
    11a2:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	cb 01       	movw	r24, r22
    11aa:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    11ae:	08 95       	ret

000011b0 <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    11b0:	bc 01       	movw	r22, r24
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    11ba:	08 95       	ret

000011bc <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    11bc:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    11c2:	80 e8       	ldi	r24, 0x80	; 128
    11c4:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    11c6:	83 b7       	in	r24, 0x33	; 51
    11c8:	88 60       	ori	r24, 0x08	; 8
    11ca:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    11cc:	83 b7       	in	r24, 0x33	; 51
    11ce:	80 61       	ori	r24, 0x10	; 16
    11d0:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    11d2:	83 b7       	in	r24, 0x33	; 51
    11d4:	88 7f       	andi	r24, 0xF8	; 248
    11d6:	83 bf       	out	0x33, r24	; 51
    11d8:	08 95       	ret

000011da <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    if (freq == 0) {
    11de:	67 2b       	or	r22, r23
    11e0:	68 2b       	or	r22, r24
    11e2:	69 2b       	or	r22, r25
    11e4:	21 f4       	brne	.+8      	; 0x11ee <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11e6:	83 b7       	in	r24, 0x33	; 51
    11e8:	88 7f       	andi	r24, 0xF8	; 248
    11ea:	83 bf       	out	0x33, r24	; 51
        return;
    11ec:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e8       	ldi	r23, 0x80	; 128
    11f2:	85 e2       	ldi	r24, 0x25	; 37
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__udivmodsi4>
    11fa:	da 01       	movw	r26, r20
    11fc:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    11fe:	21 30       	cpi	r18, 0x01	; 1
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	36 07       	cpc	r19, r22
    1204:	41 05       	cpc	r20, r1
    1206:	51 05       	cpc	r21, r1
    1208:	a8 f1       	brcs	.+106    	; 0x1274 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    120a:	68 94       	set
    120c:	12 f8       	bld	r1, 2
    120e:	b6 95       	lsr	r27
    1210:	a7 95       	ror	r26
    1212:	97 95       	ror	r25
    1214:	87 95       	ror	r24
    1216:	16 94       	lsr	r1
    1218:	d1 f7       	brne	.-12     	; 0x120e <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	96 07       	cpc	r25, r22
    1220:	a1 05       	cpc	r26, r1
    1222:	b1 05       	cpc	r27, r1
    1224:	48 f1       	brcs	.+82     	; 0x1278 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    1226:	da 01       	movw	r26, r20
    1228:	c9 01       	movw	r24, r18
    122a:	68 94       	set
    122c:	15 f8       	bld	r1, 5
    122e:	b6 95       	lsr	r27
    1230:	a7 95       	ror	r26
    1232:	97 95       	ror	r25
    1234:	87 95       	ror	r24
    1236:	16 94       	lsr	r1
    1238:	d1 f7       	brne	.-12     	; 0x122e <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	96 07       	cpc	r25, r22
    1240:	a1 05       	cpc	r26, r1
    1242:	b1 05       	cpc	r27, r1
    1244:	d8 f0       	brcs	.+54     	; 0x127c <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    1246:	bb 27       	eor	r27, r27
    1248:	a5 2f       	mov	r26, r21
    124a:	94 2f       	mov	r25, r20
    124c:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	96 07       	cpc	r25, r22
    1254:	a1 05       	cpc	r26, r1
    1256:	b1 05       	cpc	r27, r1
    1258:	98 f0       	brcs	.+38     	; 0x1280 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    125a:	da 01       	movw	r26, r20
    125c:	c9 01       	movw	r24, r18
    125e:	07 2e       	mov	r0, r23
    1260:	7a e0       	ldi	r23, 0x0A	; 10
    1262:	b6 95       	lsr	r27
    1264:	a7 95       	ror	r26
    1266:	97 95       	ror	r25
    1268:	87 95       	ror	r24
    126a:	7a 95       	dec	r23
    126c:	d1 f7       	brne	.-12     	; 0x1262 <pwm_setFreq+0x88>
    126e:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    1270:	35 e0       	ldi	r19, 0x05	; 5
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    1274:	31 e0       	ldi	r19, 0x01	; 1
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    1278:	32 e0       	ldi	r19, 0x02	; 2
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    127c:	33 e0       	ldi	r19, 0x03	; 3
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    1280:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1282:	23 b7       	in	r18, 0x33	; 51
    1284:	28 7f       	andi	r18, 0xF8	; 248
    1286:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    1288:	23 b7       	in	r18, 0x33	; 51
    128a:	23 2b       	or	r18, r19
    128c:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    128e:	81 50       	subi	r24, 0x01	; 1
    1290:	81 bf       	out	0x31, r24	; 49
    1292:	08 95       	ret

00001294 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    1294:	85 b7       	in	r24, 0x35	; 53
    1296:	8f 7e       	andi	r24, 0xEF	; 239
    1298:	85 bf       	out	0x35, r24	; 53
    129a:	84 b7       	in	r24, 0x34	; 52
    129c:	8f 7d       	andi	r24, 0xDF	; 223
    129e:	84 bf       	out	0x34, r24	; 52
    12a0:	86 b7       	in	r24, 0x36	; 54
    12a2:	8f 77       	andi	r24, 0x7F	; 127
    12a4:	86 bf       	out	0x36, r24	; 54
    12a6:	08 95       	ret

000012a8 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    12a8:	88 b1       	in	r24, 0x08	; 8
    12aa:	88 68       	ori	r24, 0x88	; 136
    12ac:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    12ae:	85 b7       	in	r24, 0x35	; 53
    12b0:	80 62       	ori	r24, 0x20	; 32
    12b2:	85 bf       	out	0x35, r24	; 53
    12b4:	88 95       	sleep
    12b6:	85 b7       	in	r24, 0x35	; 53
    12b8:	8f 7d       	andi	r24, 0xDF	; 223
    12ba:	85 bf       	out	0x35, r24	; 53
    12bc:	08 95       	ret

000012be <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12c4:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12ce:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <joystickOffsetY>
    12d2:	08 95       	ret

000012d4 <joystick_readPosition>:
}
void joystick_readPosition() {
    12d4:	cf 92       	push	r12
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12e6:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12ee:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    12f0:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <joystickOffsetX>
    12f4:	c6 17       	cp	r28, r22
    12f6:	80 f4       	brcc	.+32     	; 0x1318 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	2c 2f       	mov	r18, r28
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	26 1b       	sub	r18, r22
    1300:	37 0b       	sbc	r19, r23
    1302:	44 e6       	ldi	r20, 0x64	; 100
    1304:	42 9f       	mul	r20, r18
    1306:	c0 01       	movw	r24, r0
    1308:	43 9f       	mul	r20, r19
    130a:	90 0d       	add	r25, r0
    130c:	11 24       	eor	r1, r1
    130e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__divmodhi4>
    1312:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <joystick_pos>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    1318:	46 2f       	mov	r20, r22
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	2c 2f       	mov	r18, r28
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	24 1b       	sub	r18, r20
    1322:	35 0b       	sbc	r19, r21
    1324:	64 e6       	ldi	r22, 0x64	; 100
    1326:	62 9f       	mul	r22, r18
    1328:	c0 01       	movw	r24, r0
    132a:	63 9f       	mul	r22, r19
    132c:	90 0d       	add	r25, r0
    132e:	11 24       	eor	r1, r1
    1330:	6f ef       	ldi	r22, 0xFF	; 255
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	64 1b       	sub	r22, r20
    1336:	75 0b       	sbc	r23, r21
    1338:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__divmodhi4>
    133c:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    1340:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <joystickOffsetY>
    1344:	e2 17       	cp	r30, r18
    1346:	88 f4       	brcc	.+34     	; 0x136a <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1348:	62 2f       	mov	r22, r18
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	4e 2f       	mov	r20, r30
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	46 1b       	sub	r20, r22
    1352:	57 0b       	sbc	r21, r23
    1354:	24 e6       	ldi	r18, 0x64	; 100
    1356:	24 9f       	mul	r18, r20
    1358:	c0 01       	movw	r24, r0
    135a:	25 9f       	mul	r18, r21
    135c:	90 0d       	add	r25, r0
    135e:	11 24       	eor	r1, r1
    1360:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__divmodhi4>
    1364:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos+0x1>
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	4e 2f       	mov	r20, r30
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	42 1b       	sub	r20, r18
    1372:	53 0b       	sbc	r21, r19
    1374:	64 e6       	ldi	r22, 0x64	; 100
    1376:	64 9f       	mul	r22, r20
    1378:	c0 01       	movw	r24, r0
    137a:	65 9f       	mul	r22, r21
    137c:	90 0d       	add	r25, r0
    137e:	11 24       	eor	r1, r1
    1380:	6f ef       	ldi	r22, 0xFF	; 255
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	62 1b       	sub	r22, r18
    1386:	73 0b       	sbc	r23, r19
    1388:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__divmodhi4>
    138c:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    1390:	c7 e6       	ldi	r28, 0x67	; 103
    1392:	d3 e0       	ldi	r29, 0x03	; 3
    1394:	68 81       	ld	r22, Y
    1396:	06 2e       	mov	r0, r22
    1398:	00 0c       	add	r0, r0
    139a:	77 0b       	sbc	r23, r23
    139c:	88 0b       	sbc	r24, r24
    139e:	99 0b       	sbc	r25, r25
    13a0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__floatsisf>
    13a4:	6b 01       	movw	r12, r22
    13a6:	7c 01       	movw	r14, r24
    13a8:	69 81       	ldd	r22, Y+1	; 0x01
    13aa:	06 2e       	mov	r0, r22
    13ac:	00 0c       	add	r0, r0
    13ae:	77 0b       	sbc	r23, r23
    13b0:	88 0b       	sbc	r24, r24
    13b2:	99 0b       	sbc	r25, r25
    13b4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__floatsisf>
    13b8:	a7 01       	movw	r20, r14
    13ba:	96 01       	movw	r18, r12
    13bc:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <atan2>
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	44 eb       	ldi	r20, 0xB4	; 180
    13c6:	53 e4       	ldi	r21, 0x43	; 67
    13c8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__mulsf3>
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	5f e3       	ldi	r21, 0x3F	; 63
    13d4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__mulsf3>
    13d8:	23 ec       	ldi	r18, 0xC3	; 195
    13da:	35 ef       	ldi	r19, 0xF5	; 245
    13dc:	48 e4       	ldi	r20, 0x48	; 72
    13de:	50 e4       	ldi	r21, 0x40	; 64
    13e0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__divsf3>
    13e4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__fixsfsi>
    13e8:	7b 83       	std	Y+3, r23	; 0x03
    13ea:	6a 83       	std	Y+2, r22	; 0x02
}
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	08 95       	ret

000013fa <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    13fa:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    13fc:	80 81       	ld	r24, Z
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	98 0f       	add	r25, r24
    1402:	99 30       	cpi	r25, 0x09	; 9
    1404:	20 f4       	brcc	.+8      	; 0x140e <joystick_getDirection+0x14>
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	9c 5f       	subi	r25, 0xFC	; 252
    140a:	99 30       	cpi	r25, 0x09	; 9
    140c:	90 f0       	brcs	.+36     	; 0x1432 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    140e:	85 30       	cpi	r24, 0x05	; 5
    1410:	2c f0       	brlt	.+10     	; 0x141c <joystick_getDirection+0x22>
    1412:	81 81       	ldd	r24, Z+1	; 0x01
    1414:	8f 5c       	subi	r24, 0xCF	; 207
    1416:	83 36       	cpi	r24, 0x63	; 99
    1418:	38 f4       	brcc	.+14     	; 0x1428 <joystick_getDirection+0x2e>
    141a:	0d c0       	rjmp	.+26     	; 0x1436 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    141c:	8c 3f       	cpi	r24, 0xFC	; 252
    141e:	24 f4       	brge	.+8      	; 0x1428 <joystick_getDirection+0x2e>
    1420:	81 81       	ldd	r24, Z+1	; 0x01
    1422:	8f 5c       	subi	r24, 0xCF	; 207
    1424:	83 36       	cpi	r24, 0x63	; 99
    1426:	48 f0       	brcs	.+18     	; 0x143a <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    1428:	81 81       	ldd	r24, Z+1	; 0x01
    142a:	8c 3f       	cpi	r24, 0xFC	; 252
    142c:	44 f0       	brlt	.+16     	; 0x143e <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    143e:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    1440:	08 95       	ret

00001442 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    1442:	0e 94 fd 09 	call	0x13fa	; 0x13fa <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    1446:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <currentMenu+0x3>
    144a:	94 30       	cpi	r25, 0x04	; 4
    144c:	09 f0       	breq	.+2      	; 0x1450 <navigateMenu+0xe>
    144e:	5c c0       	rjmp	.+184    	; 0x1508 <navigateMenu+0xc6>
			switch (dir) {
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	e1 f1       	breq	.+120    	; 0x14cc <navigateMenu+0x8a>
    1454:	60 f1       	brcs	.+88     	; 0x14ae <navigateMenu+0x6c>
    1456:	82 30       	cpi	r24, 0x02	; 2
    1458:	c9 f0       	breq	.+50     	; 0x148c <navigateMenu+0x4a>
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	09 f0       	breq	.+2      	; 0x1460 <navigateMenu+0x1e>
    145e:	54 c0       	rjmp	.+168    	; 0x1508 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    1460:	eb e6       	ldi	r30, 0x6B	; 107
    1462:	f3 e0       	ldi	r31, 0x03	; 3
    1464:	92 81       	ldd	r25, Z+2	; 0x02
    1466:	49 2f       	mov	r20, r25
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	01 90       	ld	r0, Z+
    146c:	f0 81       	ld	r31, Z
    146e:	e0 2d       	mov	r30, r0
    1470:	20 a1       	ldd	r18, Z+32	; 0x20
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	31 09       	sbc	r19, r1
    1478:	42 17       	cp	r20, r18
    147a:	53 07       	cpc	r21, r19
    147c:	24 f4       	brge	.+8      	; 0x1486 <navigateMenu+0x44>
					currentMenu.childIndex++;
    147e:	9f 5f       	subi	r25, 0xFF	; 255
    1480:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <currentMenu+0x2>
    1484:	41 c0       	rjmp	.+130    	; 0x1508 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1486:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <currentMenu+0x2>
    148a:	3e c0       	rjmp	.+124    	; 0x1508 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    148c:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <currentMenu+0x2>
    1490:	99 23       	and	r25, r25
    1492:	21 f0       	breq	.+8      	; 0x149c <navigateMenu+0x5a>
					currentMenu.childIndex--;
    1494:	91 50       	subi	r25, 0x01	; 1
    1496:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <currentMenu+0x2>
    149a:	36 c0       	rjmp	.+108    	; 0x1508 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    149c:	eb e6       	ldi	r30, 0x6B	; 107
    149e:	f3 e0       	ldi	r31, 0x03	; 3
    14a0:	a0 81       	ld	r26, Z
    14a2:	b1 81       	ldd	r27, Z+1	; 0x01
    14a4:	90 96       	adiw	r26, 0x20	; 32
    14a6:	9c 91       	ld	r25, X
    14a8:	91 50       	subi	r25, 0x01	; 1
    14aa:	92 83       	std	Z+2, r25	; 0x02
    14ac:	2d c0       	rjmp	.+90     	; 0x1508 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    14ae:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <currentMenu>
    14b2:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <currentMenu+0x1>
    14b6:	22 89       	ldd	r18, Z+18	; 0x12
    14b8:	33 89       	ldd	r19, Z+19	; 0x13
    14ba:	21 15       	cp	r18, r1
    14bc:	31 05       	cpc	r19, r1
    14be:	21 f1       	breq	.+72     	; 0x1508 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    14c0:	eb e6       	ldi	r30, 0x6B	; 107
    14c2:	f3 e0       	ldi	r31, 0x03	; 3
    14c4:	31 83       	std	Z+1, r19	; 0x01
    14c6:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    14c8:	12 82       	std	Z+2, r1	; 0x02
    14ca:	1e c0       	rjmp	.+60     	; 0x1508 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    14cc:	ab e6       	ldi	r26, 0x6B	; 107
    14ce:	b3 e0       	ldi	r27, 0x03	; 3
    14d0:	2d 91       	ld	r18, X+
    14d2:	3c 91       	ld	r19, X
    14d4:	11 97       	sbiw	r26, 0x01	; 1
    14d6:	12 96       	adiw	r26, 0x02	; 2
    14d8:	9c 91       	ld	r25, X
    14da:	e9 2f       	mov	r30, r25
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	3a 96       	adiw	r30, 0x0a	; 10
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	e2 0f       	add	r30, r18
    14e6:	f3 1f       	adc	r31, r19
    14e8:	01 90       	ld	r0, Z+
    14ea:	f0 81       	ld	r31, Z
    14ec:	e0 2d       	mov	r30, r0
    14ee:	90 a1       	ldd	r25, Z+32	; 0x20
    14f0:	91 11       	cpse	r25, r1
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <navigateMenu+0xb8>
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	99 23       	and	r25, r25
    14f8:	39 f0       	breq	.+14     	; 0x1508 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    14fa:	ab e6       	ldi	r26, 0x6B	; 107
    14fc:	b3 e0       	ldi	r27, 0x03	; 3
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	fc 93       	st	X, r31
    1502:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    1504:	12 96       	adiw	r26, 0x02	; 2
    1506:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    1508:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <currentMenu+0x3>
    150c:	08 95       	ret

0000150e <menu_init>:



MenuNode nodes[8];

void menu_init() {
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    1516:	8a e0       	ldi	r24, 0x0A	; 10
    1518:	ec e1       	ldi	r30, 0x1C	; 28
    151a:	f3 e0       	ldi	r31, 0x03	; 3
    151c:	a0 e9       	ldi	r26, 0x90	; 144
    151e:	b3 e0       	ldi	r27, 0x03	; 3
    1520:	01 90       	ld	r0, Z+
    1522:	0d 92       	st	X+, r0
    1524:	8a 95       	dec	r24
    1526:	e1 f7       	brne	.-8      	; 0x1520 <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    1528:	8a e0       	ldi	r24, 0x0A	; 10
    152a:	e6 e2       	ldi	r30, 0x26	; 38
    152c:	f3 e0       	ldi	r31, 0x03	; 3
    152e:	a1 eb       	ldi	r26, 0xB1	; 177
    1530:	b3 e0       	ldi	r27, 0x03	; 3
    1532:	01 90       	ld	r0, Z+
    1534:	0d 92       	st	X+, r0
    1536:	8a 95       	dec	r24
    1538:	e1 f7       	brne	.-8      	; 0x1532 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    153a:	8c e0       	ldi	r24, 0x0C	; 12
    153c:	e0 e3       	ldi	r30, 0x30	; 48
    153e:	f3 e0       	ldi	r31, 0x03	; 3
    1540:	a2 ed       	ldi	r26, 0xD2	; 210
    1542:	b3 e0       	ldi	r27, 0x03	; 3
    1544:	01 90       	ld	r0, Z+
    1546:	0d 92       	st	X+, r0
    1548:	8a 95       	dec	r24
    154a:	e1 f7       	brne	.-8      	; 0x1544 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    154c:	86 e0       	ldi	r24, 0x06	; 6
    154e:	ec e3       	ldi	r30, 0x3C	; 60
    1550:	f3 e0       	ldi	r31, 0x03	; 3
    1552:	a3 ef       	ldi	r26, 0xF3	; 243
    1554:	b3 e0       	ldi	r27, 0x03	; 3
    1556:	01 90       	ld	r0, Z+
    1558:	0d 92       	st	X+, r0
    155a:	8a 95       	dec	r24
    155c:	e1 f7       	brne	.-8      	; 0x1556 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    155e:	87 e0       	ldi	r24, 0x07	; 7
    1560:	e2 e4       	ldi	r30, 0x42	; 66
    1562:	f3 e0       	ldi	r31, 0x03	; 3
    1564:	a4 e1       	ldi	r26, 0x14	; 20
    1566:	b4 e0       	ldi	r27, 0x04	; 4
    1568:	01 90       	ld	r0, Z+
    156a:	0d 92       	st	X+, r0
    156c:	8a 95       	dec	r24
    156e:	e1 f7       	brne	.-8      	; 0x1568 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    1570:	87 e0       	ldi	r24, 0x07	; 7
    1572:	e9 e4       	ldi	r30, 0x49	; 73
    1574:	f3 e0       	ldi	r31, 0x03	; 3
    1576:	a5 e3       	ldi	r26, 0x35	; 53
    1578:	b4 e0       	ldi	r27, 0x04	; 4
    157a:	01 90       	ld	r0, Z+
    157c:	0d 92       	st	X+, r0
    157e:	8a 95       	dec	r24
    1580:	e1 f7       	brne	.-8      	; 0x157a <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    1582:	8a e0       	ldi	r24, 0x0A	; 10
    1584:	e0 e5       	ldi	r30, 0x50	; 80
    1586:	f3 e0       	ldi	r31, 0x03	; 3
    1588:	a6 e5       	ldi	r26, 0x56	; 86
    158a:	b4 e0       	ldi	r27, 0x04	; 4
    158c:	01 90       	ld	r0, Z+
    158e:	0d 92       	st	X+, r0
    1590:	8a 95       	dec	r24
    1592:	e1 f7       	brne	.-8      	; 0x158c <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    1594:	8a e0       	ldi	r24, 0x0A	; 10
    1596:	ea e5       	ldi	r30, 0x5A	; 90
    1598:	f3 e0       	ldi	r31, 0x03	; 3
    159a:	a7 e7       	ldi	r26, 0x77	; 119
    159c:	b4 e0       	ldi	r27, 0x04	; 4
    159e:	01 90       	ld	r0, Z+
    15a0:	0d 92       	st	X+, r0
    15a2:	8a 95       	dec	r24
    15a4:	e1 f7       	brne	.-8      	; 0x159e <menu_init+0x90>
    15a6:	6e e8       	ldi	r22, 0x8E	; 142
    15a8:	73 e0       	ldi	r23, 0x03	; 3
    15aa:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    15b0:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    15b2:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	91 05       	cpc	r25, r1
    15b8:	14 f0       	brlt	.+4      	; 0x15be <menu_init+0xb0>
			nodes[i].isAction=1;
    15ba:	21 83       	std	Z+1, r18	; 0x01
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    15be:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	b1 96       	adiw	r30, 0x21	; 33
    15c4:	88 30       	cpi	r24, 0x08	; 8
    15c6:	91 05       	cpc	r25, r1
    15c8:	a1 f7       	brne	.-24     	; 0x15b2 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    15ca:	ee e8       	ldi	r30, 0x8E	; 142
    15cc:	f3 e0       	ldi	r31, 0x03	; 3
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <nodes+0x41>
	nodes[2].numChildren = 2;
    15d8:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <nodes+0x62>
	nodes[3].numChildren = 0;
    15dc:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <nodes+0x83>
	nodes[4].numChildren = 0;
    15e0:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <nodes+0xa4>
	nodes[5].numChildren = 0;
    15e4:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15e8:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15ec:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    15f0:	13 8a       	std	Z+19, r1	; 0x13
    15f2:	12 8a       	std	Z+18, r1	; 0x12
    15f4:	06 e9       	ldi	r16, 0x96	; 150
    15f6:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    15f8:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    15fa:	51 e2       	ldi	r21, 0x21	; 33
    15fc:	18 c0       	rjmp	.+48     	; 0x162e <menu_init+0x120>
    15fe:	54 9f       	mul	r21, r20
    1600:	f0 01       	movw	r30, r0
    1602:	11 24       	eor	r1, r1
    1604:	e2 57       	subi	r30, 0x72	; 114
    1606:	fc 4f       	sbci	r31, 0xFC	; 252
    1608:	e9 93       	st	Y+, r30
    160a:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    160c:	b3 8b       	std	Z+19, r27	; 0x13
    160e:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    1610:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1612:	2f 5f       	subi	r18, 0xFF	; 255
    1614:	3f 4f       	sbci	r19, 0xFF	; 255
    1616:	90 96       	adiw	r26, 0x20	; 32
    1618:	8c 91       	ld	r24, X
    161a:	90 97       	sbiw	r26, 0x20	; 32
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	28 17       	cp	r18, r24
    1620:	39 07       	cpc	r19, r25
    1622:	6c f3       	brlt	.-38     	; 0x15fe <menu_init+0xf0>
    1624:	6f 5d       	subi	r22, 0xDF	; 223
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    1628:	60 17       	cp	r22, r16
    162a:	71 07       	cpc	r23, r17
    162c:	59 f0       	breq	.+22     	; 0x1644 <menu_init+0x136>
    162e:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1630:	90 96       	adiw	r26, 0x20	; 32
    1632:	8c 91       	ld	r24, X
    1634:	90 97       	sbiw	r26, 0x20	; 32
    1636:	88 23       	and	r24, r24
    1638:	a9 f3       	breq	.-22     	; 0x1624 <menu_init+0x116>
    163a:	eb 01       	movw	r28, r22
    163c:	64 96       	adiw	r28, 0x14	; 20
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	dd cf       	rjmp	.-70     	; 0x15fe <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    1644:	87 e6       	ldi	r24, 0x67	; 103
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	0e 94 21 0a 	call	0x1442	; 0x1442 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    164c:	eb e6       	ldi	r30, 0x6B	; 107
    164e:	f3 e0       	ldi	r31, 0x03	; 3
    1650:	8e e8       	ldi	r24, 0x8E	; 142
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1658:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	08 95       	ret

00001668 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
	oled_reset();
    1670:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
	oled_home();
    1674:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    1678:	cb e6       	ldi	r28, 0x6B	; 107
    167a:	d3 e0       	ldi	r29, 0x03	; 3
    167c:	88 81       	ld	r24, Y
    167e:	99 81       	ldd	r25, Y+1	; 0x01
    1680:	02 96       	adiw	r24, 0x02	; 2
    1682:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1686:	e8 81       	ld	r30, Y
    1688:	f9 81       	ldd	r31, Y+1	; 0x01
    168a:	80 a1       	ldd	r24, Z+32	; 0x20
    168c:	88 23       	and	r24, r24
    168e:	39 f1       	breq	.+78     	; 0x16de <menu_printCurrentMenu+0x76>
    1690:	c0 e0       	ldi	r28, 0x00	; 0
    1692:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1694:	0b e6       	ldi	r16, 0x6B	; 107
    1696:	13 e0       	ldi	r17, 0x03	; 3
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    1698:	ce 01       	movw	r24, r28
    169a:	02 96       	adiw	r24, 0x02	; 2
    169c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    16a0:	d8 01       	movw	r26, r16
    16a2:	8d 91       	ld	r24, X+
    16a4:	9c 91       	ld	r25, X
    16a6:	fe 01       	movw	r30, r28
    16a8:	3a 96       	adiw	r30, 0x0a	; 10
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	e8 0f       	add	r30, r24
    16b0:	f9 1f       	adc	r31, r25
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	02 96       	adiw	r24, 0x02	; 2
    16b8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_print>
		if (currentMenu.childIndex == i) {
    16bc:	f8 01       	movw	r30, r16
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	8c 17       	cp	r24, r28
    16c4:	9d 07       	cpc	r25, r29
    16c6:	11 f4       	brne	.+4      	; 0x16cc <menu_printCurrentMenu+0x64>
			oled_print_arrow();
    16c8:	0e 94 96 0b 	call	0x172c	; 0x172c <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    16cc:	21 96       	adiw	r28, 0x01	; 1
    16ce:	d8 01       	movw	r26, r16
    16d0:	ed 91       	ld	r30, X+
    16d2:	fc 91       	ld	r31, X
    16d4:	80 a1       	ldd	r24, Z+32	; 0x20
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	c8 17       	cp	r28, r24
    16da:	d9 07       	cpc	r29, r25
    16dc:	ec f2       	brlt	.-70     	; 0x1698 <menu_printCurrentMenu+0x30>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16e8:	80 55       	subi	r24, 0x50	; 80
    16ea:	e0 e0       	ldi	r30, 0x00	; 0
    16ec:	f0 e1       	ldi	r31, 0x10	; 16
    16ee:	80 83       	st	Z, r24
    16f0:	86 2f       	mov	r24, r22
    16f2:	8f 70       	andi	r24, 0x0F	; 15
    16f4:	80 83       	st	Z, r24
    16f6:	62 95       	swap	r22
    16f8:	6f 70       	andi	r22, 0x0F	; 15
    16fa:	60 61       	ori	r22, 0x10	; 16
    16fc:	60 83       	st	Z, r22
    16fe:	08 95       	ret

00001700 <oled_reset>:
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	c0 e0       	ldi	r28, 0x00	; 0
    170a:	d2 e1       	ldi	r29, 0x12	; 18
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	81 2f       	mov	r24, r17
    1710:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_pos>
    1714:	80 e8       	ldi	r24, 0x80	; 128
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	18 82       	st	Y, r1
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	e9 f7       	brne	.-6      	; 0x1718 <oled_reset+0x18>
    171e:	1f 5f       	subi	r17, 0xFF	; 255
    1720:	18 30       	cpi	r17, 0x08	; 8
    1722:	a1 f7       	brne	.-24     	; 0x170c <oled_reset+0xc>
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	08 95       	ret

0000172c <oled_print_arrow>:
    172c:	e0 e0       	ldi	r30, 0x00	; 0
    172e:	f2 e1       	ldi	r31, 0x12	; 18
    1730:	88 e1       	ldi	r24, 0x18	; 24
    1732:	80 83       	st	Z, r24
    1734:	9c e3       	ldi	r25, 0x3C	; 60
    1736:	90 83       	st	Z, r25
    1738:	9e e7       	ldi	r25, 0x7E	; 126
    173a:	90 83       	st	Z, r25
    173c:	80 83       	st	Z, r24
    173e:	80 83       	st	Z, r24
    1740:	08 95       	ret

00001742 <oled_home>:
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_pos>
    174a:	08 95       	ret

0000174c <oled_init>:
    174c:	e0 e0       	ldi	r30, 0x00	; 0
    174e:	f0 e1       	ldi	r31, 0x10	; 16
    1750:	8e ea       	ldi	r24, 0xAE	; 174
    1752:	80 83       	st	Z, r24
    1754:	81 ea       	ldi	r24, 0xA1	; 161
    1756:	80 83       	st	Z, r24
    1758:	8a ed       	ldi	r24, 0xDA	; 218
    175a:	80 83       	st	Z, r24
    175c:	82 e1       	ldi	r24, 0x12	; 18
    175e:	80 83       	st	Z, r24
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	80 83       	st	Z, r24
    1764:	88 ea       	ldi	r24, 0xA8	; 168
    1766:	80 83       	st	Z, r24
    1768:	8f e3       	ldi	r24, 0x3F	; 63
    176a:	80 83       	st	Z, r24
    176c:	85 ed       	ldi	r24, 0xD5	; 213
    176e:	80 83       	st	Z, r24
    1770:	80 e8       	ldi	r24, 0x80	; 128
    1772:	80 83       	st	Z, r24
    1774:	81 e8       	ldi	r24, 0x81	; 129
    1776:	80 83       	st	Z, r24
    1778:	80 e5       	ldi	r24, 0x50	; 80
    177a:	80 83       	st	Z, r24
    177c:	89 ed       	ldi	r24, 0xD9	; 217
    177e:	80 83       	st	Z, r24
    1780:	81 e2       	ldi	r24, 0x21	; 33
    1782:	80 83       	st	Z, r24
    1784:	80 e2       	ldi	r24, 0x20	; 32
    1786:	80 83       	st	Z, r24
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	80 83       	st	Z, r24
    178c:	8b ed       	ldi	r24, 0xDB	; 219
    178e:	80 83       	st	Z, r24
    1790:	80 e3       	ldi	r24, 0x30	; 48
    1792:	80 83       	st	Z, r24
    1794:	8d ea       	ldi	r24, 0xAD	; 173
    1796:	80 83       	st	Z, r24
    1798:	10 82       	st	Z, r1
    179a:	84 ea       	ldi	r24, 0xA4	; 164
    179c:	80 83       	st	Z, r24
    179e:	86 ea       	ldi	r24, 0xA6	; 166
    17a0:	80 83       	st	Z, r24
    17a2:	8f ea       	ldi	r24, 0xAF	; 175
    17a4:	80 83       	st	Z, r24
    17a6:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_reset>
    17aa:	0e 94 a1 0b 	call	0x1742	; 0x1742 <oled_home>
    17ae:	08 95       	ret

000017b0 <oled_gotoLine>:
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_pos>
    17b6:	08 95       	ret

000017b8 <oled_print>:

void oled_print(char* character){
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	dc 01       	movw	r26, r24
	while (*character != '\0')
    17be:	8c 91       	ld	r24, X
    17c0:	81 11       	cpse	r24, r1
    17c2:	1a c0       	rjmp	.+52     	; 0x17f8 <oled_print+0x40>
    17c4:	1e c0       	rjmp	.+60     	; 0x1802 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    17c6:	ec 91       	ld	r30, X
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	b0 97       	sbiw	r30, 0x20	; 32
    17cc:	ee 0f       	add	r30, r30
    17ce:	ff 1f       	adc	r31, r31
    17d0:	ee 0f       	add	r30, r30
    17d2:	ff 1f       	adc	r31, r31
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	e2 0f       	add	r30, r18
    17da:	f3 1f       	adc	r31, r19
    17dc:	e7 5d       	subi	r30, 0xD7	; 215
    17de:	fd 4f       	sbci	r31, 0xFD	; 253
    17e0:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17e2:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	28 30       	cpi	r18, 0x08	; 8
    17ea:	31 05       	cpc	r19, r1
    17ec:	61 f7       	brne	.-40     	; 0x17c6 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17ee:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    17f0:	8c 91       	ld	r24, X
    17f2:	81 11       	cpse	r24, r1
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <oled_print+0x44>
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17f8:	c0 e0       	ldi	r28, 0x00	; 0
    17fa:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	e2 cf       	rjmp	.-60     	; 0x17c6 <oled_print+0xe>
		}
		character++;
	}
	
	
}
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	08 95       	ret

00001808 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "game.h"

	void setupInit(void){
	cli();
    1808:	f8 94       	cli
	xmem_init();
    180a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <xmem_init>
	USART_init(MYUBRR);
    180e:	8f e1       	ldi	r24, 0x1F	; 31
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <USART_init>
	adcInit();
    1816:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
	joystickInit();
    181a:	0e 94 5f 09 	call	0x12be	; 0x12be <joystickInit>
	touchButton_init();
    181e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <touchButton_init>
	oled_init();
    1822:	0e 94 a6 0b 	call	0x174c	; 0x174c <oled_init>
	timer_init();
    1826:	0e 94 9b 0c 	call	0x1936	; 0x1936 <timer_init>
	sleep_init();
    182a:	0e 94 4a 09 	call	0x1294	; 0x1294 <sleep_init>
	menu_init();
    182e:	0e 94 87 0a 	call	0x150e	; 0x150e <menu_init>
	CAN_controller_init();
    1832:	0e 94 27 05 	call	0xa4e	; 0xa4e <CAN_controller_init>
	pwm_init();
    1836:	0e 94 de 08 	call	0x11bc	; 0x11bc <pwm_init>
	game_init();
    183a:	0e 94 59 05 	call	0xab2	; 0xab2 <game_init>
	sei();
    183e:	78 94       	sei
    1840:	08 95       	ret

00001842 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    184c:	cc e7       	ldi	r28, 0x7C	; 124
    184e:	d3 e0       	ldi	r29, 0x03	; 3
    1850:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1858:	89 83       	std	Y+1, r24	; 0x01
}
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    1860:	87 b3       	in	r24, 0x17	; 23
    1862:	80 6a       	ori	r24, 0xA0	; 160
    1864:	87 bb       	out	0x17, r24	; 23
    1866:	bc 9a       	sbi	0x17, 4	; 23
    1868:	8d b1       	in	r24, 0x0d	; 13
    186a:	81 65       	ori	r24, 0x51	; 81
    186c:	8d b9       	out	0x0d, r24	; 13
    186e:	c4 9a       	sbi	0x18, 4	; 24
    1870:	08 95       	ret

00001872 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    1872:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    1874:	77 9b       	sbis	0x0e, 7	; 14
    1876:	fe cf       	rjmp	.-4      	; 0x1874 <SPI_masterWrite+0x2>

}
    1878:	08 95       	ret

0000187a <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    187a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    187c:	77 9b       	sbis	0x0e, 7	; 14
    187e:	fe cf       	rjmp	.-4      	; 0x187c <SPI_masterRead+0x2>
	return SPDR;
    1880:	8f b1       	in	r24, 0x0f	; 15
}
    1882:	08 95       	ret

00001884 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    1884:	66 23       	and	r22, r22
    1886:	69 f0       	breq	.+26     	; 0x18a2 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1888:	48 b3       	in	r20, 0x18	; 24
    188a:	21 e0       	ldi	r18, 0x01	; 1
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	b9 01       	movw	r22, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <SPI_setChipSelect+0x12>
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	8a 95       	dec	r24
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <SPI_setChipSelect+0xe>
    189a:	cb 01       	movw	r24, r22
    189c:	84 2b       	or	r24, r20
    189e:	88 bb       	out	0x18, r24	; 24
    18a0:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    18a2:	48 b3       	in	r20, 0x18	; 24
    18a4:	21 e0       	ldi	r18, 0x01	; 1
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	b9 01       	movw	r22, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <SPI_setChipSelect+0x2c>
    18ac:	66 0f       	add	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <SPI_setChipSelect+0x28>
    18b4:	cb 01       	movw	r24, r22
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	88 bb       	out	0x18, r24	; 24
    18bc:	08 95       	ret

000018be <__vector_14>:
#include "touchButton.h"
#include "menu.h"
#include "game.h"


ISR (TIMER1_COMPB_vect) {
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
	cli();
    18e0:	f8 94       	cli
	TCNT1 = 0x00;
    18e2:	1d bc       	out	0x2d, r1	; 45
    18e4:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    18e6:	87 e6       	ldi	r24, 0x67	; 103
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    18ee:	8c e7       	ldi	r24, 0x7C	; 124
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	0e 94 21 0c 	call	0x1842	; 0x1842 <slider_readPosition>
	touchButton_readButtons(&buttons);
    18f6:	8a e7       	ldi	r24, 0x7A	; 122
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	0e 94 c2 0c 	call	0x1984	; 0x1984 <touchButton_readButtons>
	if(gameActive==0){
    18fe:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <gameActive>
    1902:	81 11       	cpse	r24, r1
    1904:	06 c0       	rjmp	.+12     	; 0x1912 <__vector_14+0x54>
		navigateMenu(&joystick_pos);
    1906:	87 e6       	ldi	r24, 0x67	; 103
    1908:	93 e0       	ldi	r25, 0x03	; 3
    190a:	0e 94 21 0a 	call	0x1442	; 0x1442 <navigateMenu>
		menu_printCurrentMenu();
    190e:	0e 94 34 0b 	call	0x1668	; 0x1668 <menu_printCurrentMenu>
	}
	else{
		//game_updateOled();
	}
	sei();
    1912:	78 94       	sei
}
    1914:	ff 91       	pop	r31
    1916:	ef 91       	pop	r30
    1918:	bf 91       	pop	r27
    191a:	af 91       	pop	r26
    191c:	9f 91       	pop	r25
    191e:	8f 91       	pop	r24
    1920:	7f 91       	pop	r23
    1922:	6f 91       	pop	r22
    1924:	5f 91       	pop	r21
    1926:	4f 91       	pop	r20
    1928:	3f 91       	pop	r19
    192a:	2f 91       	pop	r18
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	0f 90       	pop	r0
    1932:	1f 90       	pop	r1
    1934:	18 95       	reti

00001936 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1936:	89 b7       	in	r24, 0x39	; 57
    1938:	80 62       	ori	r24, 0x20	; 32
    193a:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    193c:	1d bc       	out	0x2d, r1	; 45
    193e:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1940:	80 e3       	ldi	r24, 0x30	; 48
    1942:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1944:	85 e0       	ldi	r24, 0x05	; 5
    1946:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1948:	80 ee       	ldi	r24, 0xE0	; 224
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	99 bd       	out	0x29, r25	; 41
    194e:	88 bd       	out	0x28, r24	; 40
    1950:	08 95       	ret

00001952 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    1952:	36 b3       	in	r19, 0x16	; 22
    1954:	26 b3       	in	r18, 0x16	; 22
    1956:	47 b3       	in	r20, 0x17	; 23
    1958:	32 70       	andi	r19, 0x02	; 2
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	bc 01       	movw	r22, r24
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <touchButton_init+0x14>
    1962:	66 0f       	add	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	3a 95       	dec	r19
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <touchButton_init+0x10>
    196a:	24 70       	andi	r18, 0x04	; 4
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <touchButton_init+0x20>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	2a 95       	dec	r18
    1974:	e2 f7       	brpl	.-8      	; 0x196e <touchButton_init+0x1c>
    1976:	86 2b       	or	r24, r22
    1978:	97 2b       	or	r25, r23
    197a:	80 95       	com	r24
    197c:	90 95       	com	r25
    197e:	84 23       	and	r24, r20
    1980:	87 bb       	out	0x17, r24	; 23
    1982:	08 95       	ret

00001984 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1984:	86 b3       	in	r24, 0x16	; 22
    1986:	ea e7       	ldi	r30, 0x7A	; 122
    1988:	f3 e0       	ldi	r31, 0x03	; 3
    198a:	86 95       	lsr	r24
    198c:	81 70       	andi	r24, 0x01	; 1
    198e:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    1990:	86 b3       	in	r24, 0x16	; 22
    1992:	82 fb       	bst	r24, 2
    1994:	88 27       	eor	r24, r24
    1996:	80 f9       	bld	r24, 0
    1998:	81 83       	std	Z+1, r24	; 0x01
    199a:	08 95       	ret

0000199c <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    199c:	5d 9b       	sbis	0x0b, 5	; 11
    199e:	fe cf       	rjmp	.-4      	; 0x199c <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    19a0:	8c b9       	out	0x0c, r24	; 12
    19a2:	08 95       	ret

000019a4 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    19a4:	5f 9b       	sbis	0x0b, 7	; 11
    19a6:	fe cf       	rjmp	.-4      	; 0x19a4 <USART_receiveChar>
		;
	
	return UDR0;
    19a8:	8c b1       	in	r24, 0x0c	; 12
    19aa:	08 95       	ret

000019ac <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    19ac:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    19ae:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    19b0:	88 e1       	ldi	r24, 0x18	; 24
    19b2:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    19b4:	8e e8       	ldi	r24, 0x8E	; 142
    19b6:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    19b8:	62 ed       	ldi	r22, 0xD2	; 210
    19ba:	7c e0       	ldi	r23, 0x0C	; 12
    19bc:	8e ec       	ldi	r24, 0xCE	; 206
    19be:	9c e0       	ldi	r25, 0x0C	; 12
    19c0:	0e 94 12 10 	call	0x2024	; 0x2024 <fdevopen>
    19c4:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <uart+0x1>
    19c8:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <uart>
    19cc:	08 95       	ret

000019ce <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    19ce:	85 b7       	in	r24, 0x35	; 53
    19d0:	80 68       	ori	r24, 0x80	; 128
    19d2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    19d4:	80 b7       	in	r24, 0x30	; 48
    19d6:	88 60       	ori	r24, 0x08	; 8
    19d8:	80 bf       	out	0x30, r24	; 48
    19da:	08 95       	ret
    19dc:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__fp_pscA>
    19e0:	60 f0       	brcs	.+24     	; 0x19fa <xmem_init+0x2c>
    19e2:	80 e8       	ldi	r24, 0x80	; 128
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <xmem_init+0x1c>
    19e8:	9e ef       	ldi	r25, 0xFE	; 254
    19ea:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__fp_pscB>
    19ee:	28 f0       	brcs	.+10     	; 0x19fa <xmem_init+0x2c>
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	51 e0       	ldi	r21, 0x01	; 1
    19f4:	71 f4       	brne	.+28     	; 0x1a12 <atan2+0x10>
    19f6:	5e ef       	ldi	r21, 0xFE	; 254
    19f8:	0c c0       	rjmp	.+24     	; 0x1a12 <atan2+0x10>
    19fa:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_nan>
    19fe:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_zero>

00001a02 <atan2>:
    1a02:	e9 2f       	mov	r30, r25
    1a04:	e0 78       	andi	r30, 0x80	; 128
    1a06:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__fp_split3>
    1a0a:	40 f3       	brcs	.-48     	; 0x19dc <xmem_init+0xe>
    1a0c:	09 2e       	mov	r0, r25
    1a0e:	05 2a       	or	r0, r21
    1a10:	b1 f3       	breq	.-20     	; 0x19fe <xmem_init+0x30>
    1a12:	26 17       	cp	r18, r22
    1a14:	37 07       	cpc	r19, r23
    1a16:	48 07       	cpc	r20, r24
    1a18:	59 07       	cpc	r21, r25
    1a1a:	38 f0       	brcs	.+14     	; 0x1a2a <atan2+0x28>
    1a1c:	0e 2e       	mov	r0, r30
    1a1e:	07 f8       	bld	r0, 7
    1a20:	e0 25       	eor	r30, r0
    1a22:	69 f0       	breq	.+26     	; 0x1a3e <atan2+0x3c>
    1a24:	e0 25       	eor	r30, r0
    1a26:	e0 64       	ori	r30, 0x40	; 64
    1a28:	0a c0       	rjmp	.+20     	; 0x1a3e <atan2+0x3c>
    1a2a:	ef 63       	ori	r30, 0x3F	; 63
    1a2c:	07 f8       	bld	r0, 7
    1a2e:	00 94       	com	r0
    1a30:	07 fa       	bst	r0, 7
    1a32:	db 01       	movw	r26, r22
    1a34:	b9 01       	movw	r22, r18
    1a36:	9d 01       	movw	r18, r26
    1a38:	dc 01       	movw	r26, r24
    1a3a:	ca 01       	movw	r24, r20
    1a3c:	ad 01       	movw	r20, r26
    1a3e:	ef 93       	push	r30
    1a40:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__divsf3_pse>
    1a44:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__fp_round>
    1a48:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <atan>
    1a4c:	5f 91       	pop	r21
    1a4e:	55 23       	and	r21, r21
    1a50:	39 f0       	breq	.+14     	; 0x1a60 <atan2+0x5e>
    1a52:	2b ed       	ldi	r18, 0xDB	; 219
    1a54:	3f e0       	ldi	r19, 0x0F	; 15
    1a56:	49 e4       	ldi	r20, 0x49	; 73
    1a58:	50 fd       	sbrc	r21, 0
    1a5a:	49 ec       	ldi	r20, 0xC9	; 201
    1a5c:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__addsf3>
    1a60:	08 95       	ret

00001a62 <atan>:
    1a62:	df 93       	push	r29
    1a64:	dd 27       	eor	r29, r29
    1a66:	b9 2f       	mov	r27, r25
    1a68:	bf 77       	andi	r27, 0x7F	; 127
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	16 16       	cp	r1, r22
    1a70:	17 06       	cpc	r1, r23
    1a72:	48 07       	cpc	r20, r24
    1a74:	5b 07       	cpc	r21, r27
    1a76:	18 f4       	brcc	.+6      	; 0x1a7e <atan+0x1c>
    1a78:	d9 2f       	mov	r29, r25
    1a7a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <inverse>
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	7f 93       	push	r23
    1a84:	6f 93       	push	r22
    1a86:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <square>
    1a8a:	e0 e7       	ldi	r30, 0x70	; 112
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_powser>
    1a92:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__fp_round>
    1a96:	2f 91       	pop	r18
    1a98:	3f 91       	pop	r19
    1a9a:	4f 91       	pop	r20
    1a9c:	5f 91       	pop	r21
    1a9e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__mulsf3x>
    1aa2:	dd 23       	and	r29, r29
    1aa4:	51 f0       	breq	.+20     	; 0x1aba <atan+0x58>
    1aa6:	90 58       	subi	r25, 0x80	; 128
    1aa8:	a2 ea       	ldi	r26, 0xA2	; 162
    1aaa:	2a ed       	ldi	r18, 0xDA	; 218
    1aac:	3f e0       	ldi	r19, 0x0F	; 15
    1aae:	49 ec       	ldi	r20, 0xC9	; 201
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	d0 78       	andi	r29, 0x80	; 128
    1ab4:	5d 27       	eor	r21, r29
    1ab6:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__addsf3x>
    1aba:	df 91       	pop	r29
    1abc:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__fp_round>

00001ac0 <__divsf3>:
    1ac0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3x>
    1ac4:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__fp_round>
    1ac8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__fp_pscB>
    1acc:	58 f0       	brcs	.+22     	; 0x1ae4 <__divsf3+0x24>
    1ace:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__fp_pscA>
    1ad2:	40 f0       	brcs	.+16     	; 0x1ae4 <__divsf3+0x24>
    1ad4:	29 f4       	brne	.+10     	; 0x1ae0 <__divsf3+0x20>
    1ad6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad8:	29 f0       	breq	.+10     	; 0x1ae4 <__divsf3+0x24>
    1ada:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__fp_inf>
    1ade:	51 11       	cpse	r21, r1
    1ae0:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_szero>
    1ae4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_nan>

00001ae8 <__divsf3x>:
    1ae8:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__fp_split3>
    1aec:	68 f3       	brcs	.-38     	; 0x1ac8 <__divsf3+0x8>

00001aee <__divsf3_pse>:
    1aee:	99 23       	and	r25, r25
    1af0:	b1 f3       	breq	.-20     	; 0x1ade <__divsf3+0x1e>
    1af2:	55 23       	and	r21, r21
    1af4:	91 f3       	breq	.-28     	; 0x1ada <__divsf3+0x1a>
    1af6:	95 1b       	sub	r25, r21
    1af8:	55 0b       	sbc	r21, r21
    1afa:	bb 27       	eor	r27, r27
    1afc:	aa 27       	eor	r26, r26
    1afe:	62 17       	cp	r22, r18
    1b00:	73 07       	cpc	r23, r19
    1b02:	84 07       	cpc	r24, r20
    1b04:	38 f0       	brcs	.+14     	; 0x1b14 <__divsf3_pse+0x26>
    1b06:	9f 5f       	subi	r25, 0xFF	; 255
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	22 0f       	add	r18, r18
    1b0c:	33 1f       	adc	r19, r19
    1b0e:	44 1f       	adc	r20, r20
    1b10:	aa 1f       	adc	r26, r26
    1b12:	a9 f3       	breq	.-22     	; 0x1afe <__divsf3_pse+0x10>
    1b14:	35 d0       	rcall	.+106    	; 0x1b80 <__divsf3_pse+0x92>
    1b16:	0e 2e       	mov	r0, r30
    1b18:	3a f0       	brmi	.+14     	; 0x1b28 <__divsf3_pse+0x3a>
    1b1a:	e0 e8       	ldi	r30, 0x80	; 128
    1b1c:	32 d0       	rcall	.+100    	; 0x1b82 <__divsf3_pse+0x94>
    1b1e:	91 50       	subi	r25, 0x01	; 1
    1b20:	50 40       	sbci	r21, 0x00	; 0
    1b22:	e6 95       	lsr	r30
    1b24:	00 1c       	adc	r0, r0
    1b26:	ca f7       	brpl	.-14     	; 0x1b1a <__divsf3_pse+0x2c>
    1b28:	2b d0       	rcall	.+86     	; 0x1b80 <__divsf3_pse+0x92>
    1b2a:	fe 2f       	mov	r31, r30
    1b2c:	29 d0       	rcall	.+82     	; 0x1b80 <__divsf3_pse+0x92>
    1b2e:	66 0f       	add	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	bb 1f       	adc	r27, r27
    1b36:	26 17       	cp	r18, r22
    1b38:	37 07       	cpc	r19, r23
    1b3a:	48 07       	cpc	r20, r24
    1b3c:	ab 07       	cpc	r26, r27
    1b3e:	b0 e8       	ldi	r27, 0x80	; 128
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <__divsf3_pse+0x56>
    1b42:	bb 0b       	sbc	r27, r27
    1b44:	80 2d       	mov	r24, r0
    1b46:	bf 01       	movw	r22, r30
    1b48:	ff 27       	eor	r31, r31
    1b4a:	93 58       	subi	r25, 0x83	; 131
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	3a f0       	brmi	.+14     	; 0x1b5e <__divsf3_pse+0x70>
    1b50:	9e 3f       	cpi	r25, 0xFE	; 254
    1b52:	51 05       	cpc	r21, r1
    1b54:	78 f0       	brcs	.+30     	; 0x1b74 <__divsf3_pse+0x86>
    1b56:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__fp_inf>
    1b5a:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_szero>
    1b5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b60:	e4 f3       	brlt	.-8      	; 0x1b5a <__divsf3_pse+0x6c>
    1b62:	98 3e       	cpi	r25, 0xE8	; 232
    1b64:	d4 f3       	brlt	.-12     	; 0x1b5a <__divsf3_pse+0x6c>
    1b66:	86 95       	lsr	r24
    1b68:	77 95       	ror	r23
    1b6a:	67 95       	ror	r22
    1b6c:	b7 95       	ror	r27
    1b6e:	f7 95       	ror	r31
    1b70:	9f 5f       	subi	r25, 0xFF	; 255
    1b72:	c9 f7       	brne	.-14     	; 0x1b66 <__divsf3_pse+0x78>
    1b74:	88 0f       	add	r24, r24
    1b76:	91 1d       	adc	r25, r1
    1b78:	96 95       	lsr	r25
    1b7a:	87 95       	ror	r24
    1b7c:	97 f9       	bld	r25, 7
    1b7e:	08 95       	ret
    1b80:	e1 e0       	ldi	r30, 0x01	; 1
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	62 17       	cp	r22, r18
    1b8c:	73 07       	cpc	r23, r19
    1b8e:	84 07       	cpc	r24, r20
    1b90:	ba 07       	cpc	r27, r26
    1b92:	20 f0       	brcs	.+8      	; 0x1b9c <__divsf3_pse+0xae>
    1b94:	62 1b       	sub	r22, r18
    1b96:	73 0b       	sbc	r23, r19
    1b98:	84 0b       	sbc	r24, r20
    1b9a:	ba 0b       	sbc	r27, r26
    1b9c:	ee 1f       	adc	r30, r30
    1b9e:	88 f7       	brcc	.-30     	; 0x1b82 <__divsf3_pse+0x94>
    1ba0:	e0 95       	com	r30
    1ba2:	08 95       	ret

00001ba4 <__fixsfsi>:
    1ba4:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__fixunssfsi>
    1ba8:	68 94       	set
    1baa:	b1 11       	cpse	r27, r1
    1bac:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_szero>
    1bb0:	08 95       	ret

00001bb2 <__fixunssfsi>:
    1bb2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_splitA>
    1bb6:	88 f0       	brcs	.+34     	; 0x1bda <__fixunssfsi+0x28>
    1bb8:	9f 57       	subi	r25, 0x7F	; 127
    1bba:	98 f0       	brcs	.+38     	; 0x1be2 <__fixunssfsi+0x30>
    1bbc:	b9 2f       	mov	r27, r25
    1bbe:	99 27       	eor	r25, r25
    1bc0:	b7 51       	subi	r27, 0x17	; 23
    1bc2:	b0 f0       	brcs	.+44     	; 0x1bf0 <__fixunssfsi+0x3e>
    1bc4:	e1 f0       	breq	.+56     	; 0x1bfe <__fixunssfsi+0x4c>
    1bc6:	66 0f       	add	r22, r22
    1bc8:	77 1f       	adc	r23, r23
    1bca:	88 1f       	adc	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	1a f0       	brmi	.+6      	; 0x1bd6 <__fixunssfsi+0x24>
    1bd0:	ba 95       	dec	r27
    1bd2:	c9 f7       	brne	.-14     	; 0x1bc6 <__fixunssfsi+0x14>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <__fixunssfsi+0x4c>
    1bd6:	b1 30       	cpi	r27, 0x01	; 1
    1bd8:	91 f0       	breq	.+36     	; 0x1bfe <__fixunssfsi+0x4c>
    1bda:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fp_zero>
    1bde:	b1 e0       	ldi	r27, 0x01	; 1
    1be0:	08 95       	ret
    1be2:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_zero>
    1be6:	67 2f       	mov	r22, r23
    1be8:	78 2f       	mov	r23, r24
    1bea:	88 27       	eor	r24, r24
    1bec:	b8 5f       	subi	r27, 0xF8	; 248
    1bee:	39 f0       	breq	.+14     	; 0x1bfe <__fixunssfsi+0x4c>
    1bf0:	b9 3f       	cpi	r27, 0xF9	; 249
    1bf2:	cc f3       	brlt	.-14     	; 0x1be6 <__fixunssfsi+0x34>
    1bf4:	86 95       	lsr	r24
    1bf6:	77 95       	ror	r23
    1bf8:	67 95       	ror	r22
    1bfa:	b3 95       	inc	r27
    1bfc:	d9 f7       	brne	.-10     	; 0x1bf4 <__fixunssfsi+0x42>
    1bfe:	3e f4       	brtc	.+14     	; 0x1c0e <__fixunssfsi+0x5c>
    1c00:	90 95       	com	r25
    1c02:	80 95       	com	r24
    1c04:	70 95       	com	r23
    1c06:	61 95       	neg	r22
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0e:	08 95       	ret

00001c10 <__floatunsisf>:
    1c10:	e8 94       	clt
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <__floatsisf+0x12>

00001c14 <__floatsisf>:
    1c14:	97 fb       	bst	r25, 7
    1c16:	3e f4       	brtc	.+14     	; 0x1c26 <__floatsisf+0x12>
    1c18:	90 95       	com	r25
    1c1a:	80 95       	com	r24
    1c1c:	70 95       	com	r23
    1c1e:	61 95       	neg	r22
    1c20:	7f 4f       	sbci	r23, 0xFF	; 255
    1c22:	8f 4f       	sbci	r24, 0xFF	; 255
    1c24:	9f 4f       	sbci	r25, 0xFF	; 255
    1c26:	99 23       	and	r25, r25
    1c28:	a9 f0       	breq	.+42     	; 0x1c54 <__floatsisf+0x40>
    1c2a:	f9 2f       	mov	r31, r25
    1c2c:	96 e9       	ldi	r25, 0x96	; 150
    1c2e:	bb 27       	eor	r27, r27
    1c30:	93 95       	inc	r25
    1c32:	f6 95       	lsr	r31
    1c34:	87 95       	ror	r24
    1c36:	77 95       	ror	r23
    1c38:	67 95       	ror	r22
    1c3a:	b7 95       	ror	r27
    1c3c:	f1 11       	cpse	r31, r1
    1c3e:	f8 cf       	rjmp	.-16     	; 0x1c30 <__floatsisf+0x1c>
    1c40:	fa f4       	brpl	.+62     	; 0x1c80 <__floatsisf+0x6c>
    1c42:	bb 0f       	add	r27, r27
    1c44:	11 f4       	brne	.+4      	; 0x1c4a <__floatsisf+0x36>
    1c46:	60 ff       	sbrs	r22, 0
    1c48:	1b c0       	rjmp	.+54     	; 0x1c80 <__floatsisf+0x6c>
    1c4a:	6f 5f       	subi	r22, 0xFF	; 255
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c50:	9f 4f       	sbci	r25, 0xFF	; 255
    1c52:	16 c0       	rjmp	.+44     	; 0x1c80 <__floatsisf+0x6c>
    1c54:	88 23       	and	r24, r24
    1c56:	11 f0       	breq	.+4      	; 0x1c5c <__floatsisf+0x48>
    1c58:	96 e9       	ldi	r25, 0x96	; 150
    1c5a:	11 c0       	rjmp	.+34     	; 0x1c7e <__floatsisf+0x6a>
    1c5c:	77 23       	and	r23, r23
    1c5e:	21 f0       	breq	.+8      	; 0x1c68 <__floatsisf+0x54>
    1c60:	9e e8       	ldi	r25, 0x8E	; 142
    1c62:	87 2f       	mov	r24, r23
    1c64:	76 2f       	mov	r23, r22
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <__floatsisf+0x5e>
    1c68:	66 23       	and	r22, r22
    1c6a:	71 f0       	breq	.+28     	; 0x1c88 <__floatsisf+0x74>
    1c6c:	96 e8       	ldi	r25, 0x86	; 134
    1c6e:	86 2f       	mov	r24, r22
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	2a f0       	brmi	.+10     	; 0x1c80 <__floatsisf+0x6c>
    1c76:	9a 95       	dec	r25
    1c78:	66 0f       	add	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	da f7       	brpl	.-10     	; 0x1c76 <__floatsisf+0x62>
    1c80:	88 0f       	add	r24, r24
    1c82:	96 95       	lsr	r25
    1c84:	87 95       	ror	r24
    1c86:	97 f9       	bld	r25, 7
    1c88:	08 95       	ret

00001c8a <__fp_inf>:
    1c8a:	97 f9       	bld	r25, 7
    1c8c:	9f 67       	ori	r25, 0x7F	; 127
    1c8e:	80 e8       	ldi	r24, 0x80	; 128
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	08 95       	ret

00001c96 <__fp_nan>:
    1c96:	9f ef       	ldi	r25, 0xFF	; 255
    1c98:	80 ec       	ldi	r24, 0xC0	; 192
    1c9a:	08 95       	ret

00001c9c <__fp_powser>:
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	1f 93       	push	r17
    1ca2:	0f 93       	push	r16
    1ca4:	ff 92       	push	r15
    1ca6:	ef 92       	push	r14
    1ca8:	df 92       	push	r13
    1caa:	7b 01       	movw	r14, r22
    1cac:	8c 01       	movw	r16, r24
    1cae:	68 94       	set
    1cb0:	06 c0       	rjmp	.+12     	; 0x1cbe <__fp_powser+0x22>
    1cb2:	da 2e       	mov	r13, r26
    1cb4:	ef 01       	movw	r28, r30
    1cb6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__mulsf3x>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e8 94       	clt
    1cbe:	a5 91       	lpm	r26, Z+
    1cc0:	25 91       	lpm	r18, Z+
    1cc2:	35 91       	lpm	r19, Z+
    1cc4:	45 91       	lpm	r20, Z+
    1cc6:	55 91       	lpm	r21, Z+
    1cc8:	a6 f3       	brts	.-24     	; 0x1cb2 <__fp_powser+0x16>
    1cca:	ef 01       	movw	r28, r30
    1ccc:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__addsf3x>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	97 01       	movw	r18, r14
    1cd4:	a8 01       	movw	r20, r16
    1cd6:	da 94       	dec	r13
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <__fp_powser+0x18>
    1cda:	df 90       	pop	r13
    1cdc:	ef 90       	pop	r14
    1cde:	ff 90       	pop	r15
    1ce0:	0f 91       	pop	r16
    1ce2:	1f 91       	pop	r17
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <__fp_pscA>:
    1cea:	00 24       	eor	r0, r0
    1cec:	0a 94       	dec	r0
    1cee:	16 16       	cp	r1, r22
    1cf0:	17 06       	cpc	r1, r23
    1cf2:	18 06       	cpc	r1, r24
    1cf4:	09 06       	cpc	r0, r25
    1cf6:	08 95       	ret

00001cf8 <__fp_pscB>:
    1cf8:	00 24       	eor	r0, r0
    1cfa:	0a 94       	dec	r0
    1cfc:	12 16       	cp	r1, r18
    1cfe:	13 06       	cpc	r1, r19
    1d00:	14 06       	cpc	r1, r20
    1d02:	05 06       	cpc	r0, r21
    1d04:	08 95       	ret

00001d06 <__fp_round>:
    1d06:	09 2e       	mov	r0, r25
    1d08:	03 94       	inc	r0
    1d0a:	00 0c       	add	r0, r0
    1d0c:	11 f4       	brne	.+4      	; 0x1d12 <__fp_round+0xc>
    1d0e:	88 23       	and	r24, r24
    1d10:	52 f0       	brmi	.+20     	; 0x1d26 <__fp_round+0x20>
    1d12:	bb 0f       	add	r27, r27
    1d14:	40 f4       	brcc	.+16     	; 0x1d26 <__fp_round+0x20>
    1d16:	bf 2b       	or	r27, r31
    1d18:	11 f4       	brne	.+4      	; 0x1d1e <__fp_round+0x18>
    1d1a:	60 ff       	sbrs	r22, 0
    1d1c:	04 c0       	rjmp	.+8      	; 0x1d26 <__fp_round+0x20>
    1d1e:	6f 5f       	subi	r22, 0xFF	; 255
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255
    1d22:	8f 4f       	sbci	r24, 0xFF	; 255
    1d24:	9f 4f       	sbci	r25, 0xFF	; 255
    1d26:	08 95       	ret

00001d28 <__fp_split3>:
    1d28:	57 fd       	sbrc	r21, 7
    1d2a:	90 58       	subi	r25, 0x80	; 128
    1d2c:	44 0f       	add	r20, r20
    1d2e:	55 1f       	adc	r21, r21
    1d30:	59 f0       	breq	.+22     	; 0x1d48 <__fp_splitA+0x10>
    1d32:	5f 3f       	cpi	r21, 0xFF	; 255
    1d34:	71 f0       	breq	.+28     	; 0x1d52 <__fp_splitA+0x1a>
    1d36:	47 95       	ror	r20

00001d38 <__fp_splitA>:
    1d38:	88 0f       	add	r24, r24
    1d3a:	97 fb       	bst	r25, 7
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	61 f0       	breq	.+24     	; 0x1d58 <__fp_splitA+0x20>
    1d40:	9f 3f       	cpi	r25, 0xFF	; 255
    1d42:	79 f0       	breq	.+30     	; 0x1d62 <__fp_splitA+0x2a>
    1d44:	87 95       	ror	r24
    1d46:	08 95       	ret
    1d48:	12 16       	cp	r1, r18
    1d4a:	13 06       	cpc	r1, r19
    1d4c:	14 06       	cpc	r1, r20
    1d4e:	55 1f       	adc	r21, r21
    1d50:	f2 cf       	rjmp	.-28     	; 0x1d36 <__fp_split3+0xe>
    1d52:	46 95       	lsr	r20
    1d54:	f1 df       	rcall	.-30     	; 0x1d38 <__fp_splitA>
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <__fp_splitA+0x30>
    1d58:	16 16       	cp	r1, r22
    1d5a:	17 06       	cpc	r1, r23
    1d5c:	18 06       	cpc	r1, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	f1 cf       	rjmp	.-30     	; 0x1d44 <__fp_splitA+0xc>
    1d62:	86 95       	lsr	r24
    1d64:	71 05       	cpc	r23, r1
    1d66:	61 05       	cpc	r22, r1
    1d68:	08 94       	sec
    1d6a:	08 95       	ret

00001d6c <__fp_zero>:
    1d6c:	e8 94       	clt

00001d6e <__fp_szero>:
    1d6e:	bb 27       	eor	r27, r27
    1d70:	66 27       	eor	r22, r22
    1d72:	77 27       	eor	r23, r23
    1d74:	cb 01       	movw	r24, r22
    1d76:	97 f9       	bld	r25, 7
    1d78:	08 95       	ret

00001d7a <inverse>:
    1d7a:	9b 01       	movw	r18, r22
    1d7c:	ac 01       	movw	r20, r24
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	80 e8       	ldi	r24, 0x80	; 128
    1d84:	9f e3       	ldi	r25, 0x3F	; 63
    1d86:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__divsf3>

00001d8a <__mulsf3>:
    1d8a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__mulsf3x>
    1d8e:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__fp_round>
    1d92:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__fp_pscA>
    1d96:	38 f0       	brcs	.+14     	; 0x1da6 <__mulsf3+0x1c>
    1d98:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__fp_pscB>
    1d9c:	20 f0       	brcs	.+8      	; 0x1da6 <__mulsf3+0x1c>
    1d9e:	95 23       	and	r25, r21
    1da0:	11 f0       	breq	.+4      	; 0x1da6 <__mulsf3+0x1c>
    1da2:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__fp_inf>
    1da6:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_nan>
    1daa:	11 24       	eor	r1, r1
    1dac:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_szero>

00001db0 <__mulsf3x>:
    1db0:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__fp_split3>
    1db4:	70 f3       	brcs	.-36     	; 0x1d92 <__mulsf3+0x8>

00001db6 <__mulsf3_pse>:
    1db6:	95 9f       	mul	r25, r21
    1db8:	c1 f3       	breq	.-16     	; 0x1daa <__mulsf3+0x20>
    1dba:	95 0f       	add	r25, r21
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	55 1f       	adc	r21, r21
    1dc0:	62 9f       	mul	r22, r18
    1dc2:	f0 01       	movw	r30, r0
    1dc4:	72 9f       	mul	r23, r18
    1dc6:	bb 27       	eor	r27, r27
    1dc8:	f0 0d       	add	r31, r0
    1dca:	b1 1d       	adc	r27, r1
    1dcc:	63 9f       	mul	r22, r19
    1dce:	aa 27       	eor	r26, r26
    1dd0:	f0 0d       	add	r31, r0
    1dd2:	b1 1d       	adc	r27, r1
    1dd4:	aa 1f       	adc	r26, r26
    1dd6:	64 9f       	mul	r22, r20
    1dd8:	66 27       	eor	r22, r22
    1dda:	b0 0d       	add	r27, r0
    1ddc:	a1 1d       	adc	r26, r1
    1dde:	66 1f       	adc	r22, r22
    1de0:	82 9f       	mul	r24, r18
    1de2:	22 27       	eor	r18, r18
    1de4:	b0 0d       	add	r27, r0
    1de6:	a1 1d       	adc	r26, r1
    1de8:	62 1f       	adc	r22, r18
    1dea:	73 9f       	mul	r23, r19
    1dec:	b0 0d       	add	r27, r0
    1dee:	a1 1d       	adc	r26, r1
    1df0:	62 1f       	adc	r22, r18
    1df2:	83 9f       	mul	r24, r19
    1df4:	a0 0d       	add	r26, r0
    1df6:	61 1d       	adc	r22, r1
    1df8:	22 1f       	adc	r18, r18
    1dfa:	74 9f       	mul	r23, r20
    1dfc:	33 27       	eor	r19, r19
    1dfe:	a0 0d       	add	r26, r0
    1e00:	61 1d       	adc	r22, r1
    1e02:	23 1f       	adc	r18, r19
    1e04:	84 9f       	mul	r24, r20
    1e06:	60 0d       	add	r22, r0
    1e08:	21 1d       	adc	r18, r1
    1e0a:	82 2f       	mov	r24, r18
    1e0c:	76 2f       	mov	r23, r22
    1e0e:	6a 2f       	mov	r22, r26
    1e10:	11 24       	eor	r1, r1
    1e12:	9f 57       	subi	r25, 0x7F	; 127
    1e14:	50 40       	sbci	r21, 0x00	; 0
    1e16:	9a f0       	brmi	.+38     	; 0x1e3e <__mulsf3_pse+0x88>
    1e18:	f1 f0       	breq	.+60     	; 0x1e56 <__mulsf3_pse+0xa0>
    1e1a:	88 23       	and	r24, r24
    1e1c:	4a f0       	brmi	.+18     	; 0x1e30 <__mulsf3_pse+0x7a>
    1e1e:	ee 0f       	add	r30, r30
    1e20:	ff 1f       	adc	r31, r31
    1e22:	bb 1f       	adc	r27, r27
    1e24:	66 1f       	adc	r22, r22
    1e26:	77 1f       	adc	r23, r23
    1e28:	88 1f       	adc	r24, r24
    1e2a:	91 50       	subi	r25, 0x01	; 1
    1e2c:	50 40       	sbci	r21, 0x00	; 0
    1e2e:	a9 f7       	brne	.-22     	; 0x1e1a <__mulsf3_pse+0x64>
    1e30:	9e 3f       	cpi	r25, 0xFE	; 254
    1e32:	51 05       	cpc	r21, r1
    1e34:	80 f0       	brcs	.+32     	; 0x1e56 <__mulsf3_pse+0xa0>
    1e36:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__fp_inf>
    1e3a:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_szero>
    1e3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e40:	e4 f3       	brlt	.-8      	; 0x1e3a <__mulsf3_pse+0x84>
    1e42:	98 3e       	cpi	r25, 0xE8	; 232
    1e44:	d4 f3       	brlt	.-12     	; 0x1e3a <__mulsf3_pse+0x84>
    1e46:	86 95       	lsr	r24
    1e48:	77 95       	ror	r23
    1e4a:	67 95       	ror	r22
    1e4c:	b7 95       	ror	r27
    1e4e:	f7 95       	ror	r31
    1e50:	e7 95       	ror	r30
    1e52:	9f 5f       	subi	r25, 0xFF	; 255
    1e54:	c1 f7       	brne	.-16     	; 0x1e46 <__mulsf3_pse+0x90>
    1e56:	fe 2b       	or	r31, r30
    1e58:	88 0f       	add	r24, r24
    1e5a:	91 1d       	adc	r25, r1
    1e5c:	96 95       	lsr	r25
    1e5e:	87 95       	ror	r24
    1e60:	97 f9       	bld	r25, 7
    1e62:	08 95       	ret

00001e64 <square>:
    1e64:	9b 01       	movw	r18, r22
    1e66:	ac 01       	movw	r20, r24
    1e68:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__mulsf3>

00001e6c <__subsf3>:
    1e6c:	50 58       	subi	r21, 0x80	; 128

00001e6e <__addsf3>:
    1e6e:	bb 27       	eor	r27, r27
    1e70:	aa 27       	eor	r26, r26
    1e72:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__addsf3x>
    1e76:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__fp_round>
    1e7a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__fp_pscA>
    1e7e:	38 f0       	brcs	.+14     	; 0x1e8e <__addsf3+0x20>
    1e80:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__fp_pscB>
    1e84:	20 f0       	brcs	.+8      	; 0x1e8e <__addsf3+0x20>
    1e86:	39 f4       	brne	.+14     	; 0x1e96 <__addsf3+0x28>
    1e88:	9f 3f       	cpi	r25, 0xFF	; 255
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <__addsf3+0x24>
    1e8c:	26 f4       	brtc	.+8      	; 0x1e96 <__addsf3+0x28>
    1e8e:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_nan>
    1e92:	0e f4       	brtc	.+2      	; 0x1e96 <__addsf3+0x28>
    1e94:	e0 95       	com	r30
    1e96:	e7 fb       	bst	r30, 7
    1e98:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__fp_inf>

00001e9c <__addsf3x>:
    1e9c:	e9 2f       	mov	r30, r25
    1e9e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__fp_split3>
    1ea2:	58 f3       	brcs	.-42     	; 0x1e7a <__addsf3+0xc>
    1ea4:	ba 17       	cp	r27, r26
    1ea6:	62 07       	cpc	r22, r18
    1ea8:	73 07       	cpc	r23, r19
    1eaa:	84 07       	cpc	r24, r20
    1eac:	95 07       	cpc	r25, r21
    1eae:	20 f0       	brcs	.+8      	; 0x1eb8 <__addsf3x+0x1c>
    1eb0:	79 f4       	brne	.+30     	; 0x1ed0 <__addsf3x+0x34>
    1eb2:	a6 f5       	brtc	.+104    	; 0x1f1c <__addsf3x+0x80>
    1eb4:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_zero>
    1eb8:	0e f4       	brtc	.+2      	; 0x1ebc <__addsf3x+0x20>
    1eba:	e0 95       	com	r30
    1ebc:	0b 2e       	mov	r0, r27
    1ebe:	ba 2f       	mov	r27, r26
    1ec0:	a0 2d       	mov	r26, r0
    1ec2:	0b 01       	movw	r0, r22
    1ec4:	b9 01       	movw	r22, r18
    1ec6:	90 01       	movw	r18, r0
    1ec8:	0c 01       	movw	r0, r24
    1eca:	ca 01       	movw	r24, r20
    1ecc:	a0 01       	movw	r20, r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	ff 27       	eor	r31, r31
    1ed2:	59 1b       	sub	r21, r25
    1ed4:	99 f0       	breq	.+38     	; 0x1efc <__addsf3x+0x60>
    1ed6:	59 3f       	cpi	r21, 0xF9	; 249
    1ed8:	50 f4       	brcc	.+20     	; 0x1eee <__addsf3x+0x52>
    1eda:	50 3e       	cpi	r21, 0xE0	; 224
    1edc:	68 f1       	brcs	.+90     	; 0x1f38 <__addsf3x+0x9c>
    1ede:	1a 16       	cp	r1, r26
    1ee0:	f0 40       	sbci	r31, 0x00	; 0
    1ee2:	a2 2f       	mov	r26, r18
    1ee4:	23 2f       	mov	r18, r19
    1ee6:	34 2f       	mov	r19, r20
    1ee8:	44 27       	eor	r20, r20
    1eea:	58 5f       	subi	r21, 0xF8	; 248
    1eec:	f3 cf       	rjmp	.-26     	; 0x1ed4 <__addsf3x+0x38>
    1eee:	46 95       	lsr	r20
    1ef0:	37 95       	ror	r19
    1ef2:	27 95       	ror	r18
    1ef4:	a7 95       	ror	r26
    1ef6:	f0 40       	sbci	r31, 0x00	; 0
    1ef8:	53 95       	inc	r21
    1efa:	c9 f7       	brne	.-14     	; 0x1eee <__addsf3x+0x52>
    1efc:	7e f4       	brtc	.+30     	; 0x1f1c <__addsf3x+0x80>
    1efe:	1f 16       	cp	r1, r31
    1f00:	ba 0b       	sbc	r27, r26
    1f02:	62 0b       	sbc	r22, r18
    1f04:	73 0b       	sbc	r23, r19
    1f06:	84 0b       	sbc	r24, r20
    1f08:	ba f0       	brmi	.+46     	; 0x1f38 <__addsf3x+0x9c>
    1f0a:	91 50       	subi	r25, 0x01	; 1
    1f0c:	a1 f0       	breq	.+40     	; 0x1f36 <__addsf3x+0x9a>
    1f0e:	ff 0f       	add	r31, r31
    1f10:	bb 1f       	adc	r27, r27
    1f12:	66 1f       	adc	r22, r22
    1f14:	77 1f       	adc	r23, r23
    1f16:	88 1f       	adc	r24, r24
    1f18:	c2 f7       	brpl	.-16     	; 0x1f0a <__addsf3x+0x6e>
    1f1a:	0e c0       	rjmp	.+28     	; 0x1f38 <__addsf3x+0x9c>
    1f1c:	ba 0f       	add	r27, r26
    1f1e:	62 1f       	adc	r22, r18
    1f20:	73 1f       	adc	r23, r19
    1f22:	84 1f       	adc	r24, r20
    1f24:	48 f4       	brcc	.+18     	; 0x1f38 <__addsf3x+0x9c>
    1f26:	87 95       	ror	r24
    1f28:	77 95       	ror	r23
    1f2a:	67 95       	ror	r22
    1f2c:	b7 95       	ror	r27
    1f2e:	f7 95       	ror	r31
    1f30:	9e 3f       	cpi	r25, 0xFE	; 254
    1f32:	08 f0       	brcs	.+2      	; 0x1f36 <__addsf3x+0x9a>
    1f34:	b0 cf       	rjmp	.-160    	; 0x1e96 <__addsf3+0x28>
    1f36:	93 95       	inc	r25
    1f38:	88 0f       	add	r24, r24
    1f3a:	08 f0       	brcs	.+2      	; 0x1f3e <__addsf3x+0xa2>
    1f3c:	99 27       	eor	r25, r25
    1f3e:	ee 0f       	add	r30, r30
    1f40:	97 95       	ror	r25
    1f42:	87 95       	ror	r24
    1f44:	08 95       	ret

00001f46 <__divmodhi4>:
    1f46:	97 fb       	bst	r25, 7
    1f48:	07 2e       	mov	r0, r23
    1f4a:	16 f4       	brtc	.+4      	; 0x1f50 <__divmodhi4+0xa>
    1f4c:	00 94       	com	r0
    1f4e:	07 d0       	rcall	.+14     	; 0x1f5e <__divmodhi4_neg1>
    1f50:	77 fd       	sbrc	r23, 7
    1f52:	09 d0       	rcall	.+18     	; 0x1f66 <__divmodhi4_neg2>
    1f54:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__udivmodhi4>
    1f58:	07 fc       	sbrc	r0, 7
    1f5a:	05 d0       	rcall	.+10     	; 0x1f66 <__divmodhi4_neg2>
    1f5c:	3e f4       	brtc	.+14     	; 0x1f6c <__divmodhi4_exit>

00001f5e <__divmodhi4_neg1>:
    1f5e:	90 95       	com	r25
    1f60:	81 95       	neg	r24
    1f62:	9f 4f       	sbci	r25, 0xFF	; 255
    1f64:	08 95       	ret

00001f66 <__divmodhi4_neg2>:
    1f66:	70 95       	com	r23
    1f68:	61 95       	neg	r22
    1f6a:	7f 4f       	sbci	r23, 0xFF	; 255

00001f6c <__divmodhi4_exit>:
    1f6c:	08 95       	ret

00001f6e <__udivmodsi4>:
    1f6e:	a1 e2       	ldi	r26, 0x21	; 33
    1f70:	1a 2e       	mov	r1, r26
    1f72:	aa 1b       	sub	r26, r26
    1f74:	bb 1b       	sub	r27, r27
    1f76:	fd 01       	movw	r30, r26
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <__udivmodsi4_ep>

00001f7a <__udivmodsi4_loop>:
    1f7a:	aa 1f       	adc	r26, r26
    1f7c:	bb 1f       	adc	r27, r27
    1f7e:	ee 1f       	adc	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	a2 17       	cp	r26, r18
    1f84:	b3 07       	cpc	r27, r19
    1f86:	e4 07       	cpc	r30, r20
    1f88:	f5 07       	cpc	r31, r21
    1f8a:	20 f0       	brcs	.+8      	; 0x1f94 <__udivmodsi4_ep>
    1f8c:	a2 1b       	sub	r26, r18
    1f8e:	b3 0b       	sbc	r27, r19
    1f90:	e4 0b       	sbc	r30, r20
    1f92:	f5 0b       	sbc	r31, r21

00001f94 <__udivmodsi4_ep>:
    1f94:	66 1f       	adc	r22, r22
    1f96:	77 1f       	adc	r23, r23
    1f98:	88 1f       	adc	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	1a 94       	dec	r1
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <__udivmodsi4_loop>
    1fa0:	60 95       	com	r22
    1fa2:	70 95       	com	r23
    1fa4:	80 95       	com	r24
    1fa6:	90 95       	com	r25
    1fa8:	9b 01       	movw	r18, r22
    1faa:	ac 01       	movw	r20, r24
    1fac:	bd 01       	movw	r22, r26
    1fae:	cf 01       	movw	r24, r30
    1fb0:	08 95       	ret

00001fb2 <__udivmodhi4>:
    1fb2:	aa 1b       	sub	r26, r26
    1fb4:	bb 1b       	sub	r27, r27
    1fb6:	51 e1       	ldi	r21, 0x11	; 17
    1fb8:	07 c0       	rjmp	.+14     	; 0x1fc8 <__udivmodhi4_ep>

00001fba <__udivmodhi4_loop>:
    1fba:	aa 1f       	adc	r26, r26
    1fbc:	bb 1f       	adc	r27, r27
    1fbe:	a6 17       	cp	r26, r22
    1fc0:	b7 07       	cpc	r27, r23
    1fc2:	10 f0       	brcs	.+4      	; 0x1fc8 <__udivmodhi4_ep>
    1fc4:	a6 1b       	sub	r26, r22
    1fc6:	b7 0b       	sbc	r27, r23

00001fc8 <__udivmodhi4_ep>:
    1fc8:	88 1f       	adc	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	5a 95       	dec	r21
    1fce:	a9 f7       	brne	.-22     	; 0x1fba <__udivmodhi4_loop>
    1fd0:	80 95       	com	r24
    1fd2:	90 95       	com	r25
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	08 95       	ret

00001fda <__itoa_ncheck>:
    1fda:	bb 27       	eor	r27, r27
    1fdc:	4a 30       	cpi	r20, 0x0A	; 10
    1fde:	31 f4       	brne	.+12     	; 0x1fec <__itoa_ncheck+0x12>
    1fe0:	99 23       	and	r25, r25
    1fe2:	22 f4       	brpl	.+8      	; 0x1fec <__itoa_ncheck+0x12>
    1fe4:	bd e2       	ldi	r27, 0x2D	; 45
    1fe6:	90 95       	com	r25
    1fe8:	81 95       	neg	r24
    1fea:	9f 4f       	sbci	r25, 0xFF	; 255
    1fec:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__utoa_common>

00001ff0 <__utoa_ncheck>:
    1ff0:	bb 27       	eor	r27, r27

00001ff2 <__utoa_common>:
    1ff2:	fb 01       	movw	r30, r22
    1ff4:	55 27       	eor	r21, r21
    1ff6:	aa 27       	eor	r26, r26
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	aa 1f       	adc	r26, r26
    1ffe:	a4 17       	cp	r26, r20
    2000:	10 f0       	brcs	.+4      	; 0x2006 <__utoa_common+0x14>
    2002:	a4 1b       	sub	r26, r20
    2004:	83 95       	inc	r24
    2006:	50 51       	subi	r21, 0x10	; 16
    2008:	b9 f7       	brne	.-18     	; 0x1ff8 <__utoa_common+0x6>
    200a:	a0 5d       	subi	r26, 0xD0	; 208
    200c:	aa 33       	cpi	r26, 0x3A	; 58
    200e:	08 f0       	brcs	.+2      	; 0x2012 <__utoa_common+0x20>
    2010:	a9 5d       	subi	r26, 0xD9	; 217
    2012:	a1 93       	st	Z+, r26
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	79 f7       	brne	.-34     	; 0x1ff6 <__utoa_common+0x4>
    2018:	b1 11       	cpse	r27, r1
    201a:	b1 93       	st	Z+, r27
    201c:	11 92       	st	Z+, r1
    201e:	cb 01       	movw	r24, r22
    2020:	0c 94 ae 13 	jmp	0x275c	; 0x275c <strrev>

00002024 <fdevopen>:
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	31 f4       	brne	.+12     	; 0x203c <fdevopen+0x18>
    2030:	61 15       	cp	r22, r1
    2032:	71 05       	cpc	r23, r1
    2034:	19 f4       	brne	.+6      	; 0x203c <fdevopen+0x18>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	3a c0       	rjmp	.+116    	; 0x20b0 <fdevopen+0x8c>
    203c:	8b 01       	movw	r16, r22
    203e:	ec 01       	movw	r28, r24
    2040:	6e e0       	ldi	r22, 0x0E	; 14
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 54 12 	call	0x24a8	; 0x24a8 <calloc>
    204c:	fc 01       	movw	r30, r24
    204e:	89 2b       	or	r24, r25
    2050:	91 f3       	breq	.-28     	; 0x2036 <fdevopen+0x12>
    2052:	80 e8       	ldi	r24, 0x80	; 128
    2054:	83 83       	std	Z+3, r24	; 0x03
    2056:	01 15       	cp	r16, r1
    2058:	11 05       	cpc	r17, r1
    205a:	71 f0       	breq	.+28     	; 0x2078 <fdevopen+0x54>
    205c:	13 87       	std	Z+11, r17	; 0x0b
    205e:	02 87       	std	Z+10, r16	; 0x0a
    2060:	81 e8       	ldi	r24, 0x81	; 129
    2062:	83 83       	std	Z+3, r24	; 0x03
    2064:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <__iob>
    2068:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <__iob+0x1>
    206c:	89 2b       	or	r24, r25
    206e:	21 f4       	brne	.+8      	; 0x2078 <fdevopen+0x54>
    2070:	f0 93 99 04 	sts	0x0499, r31	; 0x800499 <__iob+0x1>
    2074:	e0 93 98 04 	sts	0x0498, r30	; 0x800498 <__iob>
    2078:	20 97       	sbiw	r28, 0x00	; 0
    207a:	c9 f0       	breq	.+50     	; 0x20ae <fdevopen+0x8a>
    207c:	d1 87       	std	Z+9, r29	; 0x09
    207e:	c0 87       	std	Z+8, r28	; 0x08
    2080:	83 81       	ldd	r24, Z+3	; 0x03
    2082:	82 60       	ori	r24, 0x02	; 2
    2084:	83 83       	std	Z+3, r24	; 0x03
    2086:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    208a:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    208e:	89 2b       	or	r24, r25
    2090:	71 f4       	brne	.+28     	; 0x20ae <fdevopen+0x8a>
    2092:	f0 93 9b 04 	sts	0x049B, r31	; 0x80049b <__iob+0x3>
    2096:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <__iob+0x2>
    209a:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <__iob+0x4>
    209e:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <__iob+0x5>
    20a2:	89 2b       	or	r24, r25
    20a4:	21 f4       	brne	.+8      	; 0x20ae <fdevopen+0x8a>
    20a6:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <__iob+0x5>
    20aa:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <__iob+0x4>
    20ae:	cf 01       	movw	r24, r30
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	08 95       	ret

000020ba <printf>:
    20ba:	a0 e0       	ldi	r26, 0x00	; 0
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e3 e6       	ldi	r30, 0x63	; 99
    20c0:	f0 e1       	ldi	r31, 0x10	; 16
    20c2:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__+0x20>
    20c6:	ae 01       	movw	r20, r28
    20c8:	4b 5f       	subi	r20, 0xFB	; 251
    20ca:	5f 4f       	sbci	r21, 0xFF	; 255
    20cc:	fa 01       	movw	r30, r20
    20ce:	61 91       	ld	r22, Z+
    20d0:	71 91       	ld	r23, Z+
    20d2:	af 01       	movw	r20, r30
    20d4:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    20d8:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    20dc:	0e 94 73 10 	call	0x20e6	; 0x20e6 <vfprintf>
    20e0:	e2 e0       	ldi	r30, 0x02	; 2
    20e2:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x20>

000020e6 <vfprintf>:
    20e6:	ab e0       	ldi	r26, 0x0B	; 11
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e9 e7       	ldi	r30, 0x79	; 121
    20ec:	f0 e1       	ldi	r31, 0x10	; 16
    20ee:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__>
    20f2:	6c 01       	movw	r12, r24
    20f4:	7b 01       	movw	r14, r22
    20f6:	8a 01       	movw	r16, r20
    20f8:	fc 01       	movw	r30, r24
    20fa:	17 82       	std	Z+7, r1	; 0x07
    20fc:	16 82       	std	Z+6, r1	; 0x06
    20fe:	83 81       	ldd	r24, Z+3	; 0x03
    2100:	81 ff       	sbrs	r24, 1
    2102:	cc c1       	rjmp	.+920    	; 0x249c <vfprintf+0x3b6>
    2104:	ce 01       	movw	r24, r28
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	3c 01       	movw	r6, r24
    210a:	f6 01       	movw	r30, r12
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	f7 01       	movw	r30, r14
    2110:	93 fd       	sbrc	r25, 3
    2112:	85 91       	lpm	r24, Z+
    2114:	93 ff       	sbrs	r25, 3
    2116:	81 91       	ld	r24, Z+
    2118:	7f 01       	movw	r14, r30
    211a:	88 23       	and	r24, r24
    211c:	09 f4       	brne	.+2      	; 0x2120 <vfprintf+0x3a>
    211e:	ba c1       	rjmp	.+884    	; 0x2494 <vfprintf+0x3ae>
    2120:	85 32       	cpi	r24, 0x25	; 37
    2122:	39 f4       	brne	.+14     	; 0x2132 <vfprintf+0x4c>
    2124:	93 fd       	sbrc	r25, 3
    2126:	85 91       	lpm	r24, Z+
    2128:	93 ff       	sbrs	r25, 3
    212a:	81 91       	ld	r24, Z+
    212c:	7f 01       	movw	r14, r30
    212e:	85 32       	cpi	r24, 0x25	; 37
    2130:	29 f4       	brne	.+10     	; 0x213c <vfprintf+0x56>
    2132:	b6 01       	movw	r22, r12
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    213a:	e7 cf       	rjmp	.-50     	; 0x210a <vfprintf+0x24>
    213c:	91 2c       	mov	r9, r1
    213e:	21 2c       	mov	r2, r1
    2140:	31 2c       	mov	r3, r1
    2142:	ff e1       	ldi	r31, 0x1F	; 31
    2144:	f3 15       	cp	r31, r3
    2146:	d8 f0       	brcs	.+54     	; 0x217e <vfprintf+0x98>
    2148:	8b 32       	cpi	r24, 0x2B	; 43
    214a:	79 f0       	breq	.+30     	; 0x216a <vfprintf+0x84>
    214c:	38 f4       	brcc	.+14     	; 0x215c <vfprintf+0x76>
    214e:	80 32       	cpi	r24, 0x20	; 32
    2150:	79 f0       	breq	.+30     	; 0x2170 <vfprintf+0x8a>
    2152:	83 32       	cpi	r24, 0x23	; 35
    2154:	a1 f4       	brne	.+40     	; 0x217e <vfprintf+0x98>
    2156:	23 2d       	mov	r18, r3
    2158:	20 61       	ori	r18, 0x10	; 16
    215a:	1d c0       	rjmp	.+58     	; 0x2196 <vfprintf+0xb0>
    215c:	8d 32       	cpi	r24, 0x2D	; 45
    215e:	61 f0       	breq	.+24     	; 0x2178 <vfprintf+0x92>
    2160:	80 33       	cpi	r24, 0x30	; 48
    2162:	69 f4       	brne	.+26     	; 0x217e <vfprintf+0x98>
    2164:	23 2d       	mov	r18, r3
    2166:	21 60       	ori	r18, 0x01	; 1
    2168:	16 c0       	rjmp	.+44     	; 0x2196 <vfprintf+0xb0>
    216a:	83 2d       	mov	r24, r3
    216c:	82 60       	ori	r24, 0x02	; 2
    216e:	38 2e       	mov	r3, r24
    2170:	e3 2d       	mov	r30, r3
    2172:	e4 60       	ori	r30, 0x04	; 4
    2174:	3e 2e       	mov	r3, r30
    2176:	2a c0       	rjmp	.+84     	; 0x21cc <vfprintf+0xe6>
    2178:	f3 2d       	mov	r31, r3
    217a:	f8 60       	ori	r31, 0x08	; 8
    217c:	1d c0       	rjmp	.+58     	; 0x21b8 <vfprintf+0xd2>
    217e:	37 fc       	sbrc	r3, 7
    2180:	2d c0       	rjmp	.+90     	; 0x21dc <vfprintf+0xf6>
    2182:	20 ed       	ldi	r18, 0xD0	; 208
    2184:	28 0f       	add	r18, r24
    2186:	2a 30       	cpi	r18, 0x0A	; 10
    2188:	40 f0       	brcs	.+16     	; 0x219a <vfprintf+0xb4>
    218a:	8e 32       	cpi	r24, 0x2E	; 46
    218c:	b9 f4       	brne	.+46     	; 0x21bc <vfprintf+0xd6>
    218e:	36 fc       	sbrc	r3, 6
    2190:	81 c1       	rjmp	.+770    	; 0x2494 <vfprintf+0x3ae>
    2192:	23 2d       	mov	r18, r3
    2194:	20 64       	ori	r18, 0x40	; 64
    2196:	32 2e       	mov	r3, r18
    2198:	19 c0       	rjmp	.+50     	; 0x21cc <vfprintf+0xe6>
    219a:	36 fe       	sbrs	r3, 6
    219c:	06 c0       	rjmp	.+12     	; 0x21aa <vfprintf+0xc4>
    219e:	8a e0       	ldi	r24, 0x0A	; 10
    21a0:	98 9e       	mul	r9, r24
    21a2:	20 0d       	add	r18, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	92 2e       	mov	r9, r18
    21a8:	11 c0       	rjmp	.+34     	; 0x21cc <vfprintf+0xe6>
    21aa:	ea e0       	ldi	r30, 0x0A	; 10
    21ac:	2e 9e       	mul	r2, r30
    21ae:	20 0d       	add	r18, r0
    21b0:	11 24       	eor	r1, r1
    21b2:	22 2e       	mov	r2, r18
    21b4:	f3 2d       	mov	r31, r3
    21b6:	f0 62       	ori	r31, 0x20	; 32
    21b8:	3f 2e       	mov	r3, r31
    21ba:	08 c0       	rjmp	.+16     	; 0x21cc <vfprintf+0xe6>
    21bc:	8c 36       	cpi	r24, 0x6C	; 108
    21be:	21 f4       	brne	.+8      	; 0x21c8 <vfprintf+0xe2>
    21c0:	83 2d       	mov	r24, r3
    21c2:	80 68       	ori	r24, 0x80	; 128
    21c4:	38 2e       	mov	r3, r24
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <vfprintf+0xe6>
    21c8:	88 36       	cpi	r24, 0x68	; 104
    21ca:	41 f4       	brne	.+16     	; 0x21dc <vfprintf+0xf6>
    21cc:	f7 01       	movw	r30, r14
    21ce:	93 fd       	sbrc	r25, 3
    21d0:	85 91       	lpm	r24, Z+
    21d2:	93 ff       	sbrs	r25, 3
    21d4:	81 91       	ld	r24, Z+
    21d6:	7f 01       	movw	r14, r30
    21d8:	81 11       	cpse	r24, r1
    21da:	b3 cf       	rjmp	.-154    	; 0x2142 <vfprintf+0x5c>
    21dc:	98 2f       	mov	r25, r24
    21de:	9f 7d       	andi	r25, 0xDF	; 223
    21e0:	95 54       	subi	r25, 0x45	; 69
    21e2:	93 30       	cpi	r25, 0x03	; 3
    21e4:	28 f4       	brcc	.+10     	; 0x21f0 <vfprintf+0x10a>
    21e6:	0c 5f       	subi	r16, 0xFC	; 252
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	9f e3       	ldi	r25, 0x3F	; 63
    21ec:	99 83       	std	Y+1, r25	; 0x01
    21ee:	0d c0       	rjmp	.+26     	; 0x220a <vfprintf+0x124>
    21f0:	83 36       	cpi	r24, 0x63	; 99
    21f2:	31 f0       	breq	.+12     	; 0x2200 <vfprintf+0x11a>
    21f4:	83 37       	cpi	r24, 0x73	; 115
    21f6:	71 f0       	breq	.+28     	; 0x2214 <vfprintf+0x12e>
    21f8:	83 35       	cpi	r24, 0x53	; 83
    21fa:	09 f0       	breq	.+2      	; 0x21fe <vfprintf+0x118>
    21fc:	59 c0       	rjmp	.+178    	; 0x22b0 <vfprintf+0x1ca>
    21fe:	21 c0       	rjmp	.+66     	; 0x2242 <vfprintf+0x15c>
    2200:	f8 01       	movw	r30, r16
    2202:	80 81       	ld	r24, Z
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	0e 5f       	subi	r16, 0xFE	; 254
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	88 24       	eor	r8, r8
    220c:	83 94       	inc	r8
    220e:	91 2c       	mov	r9, r1
    2210:	53 01       	movw	r10, r6
    2212:	13 c0       	rjmp	.+38     	; 0x223a <vfprintf+0x154>
    2214:	28 01       	movw	r4, r16
    2216:	f2 e0       	ldi	r31, 0x02	; 2
    2218:	4f 0e       	add	r4, r31
    221a:	51 1c       	adc	r5, r1
    221c:	f8 01       	movw	r30, r16
    221e:	a0 80       	ld	r10, Z
    2220:	b1 80       	ldd	r11, Z+1	; 0x01
    2222:	36 fe       	sbrs	r3, 6
    2224:	03 c0       	rjmp	.+6      	; 0x222c <vfprintf+0x146>
    2226:	69 2d       	mov	r22, r9
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <vfprintf+0x14a>
    222c:	6f ef       	ldi	r22, 0xFF	; 255
    222e:	7f ef       	ldi	r23, 0xFF	; 255
    2230:	c5 01       	movw	r24, r10
    2232:	0e 94 a3 13 	call	0x2746	; 0x2746 <strnlen>
    2236:	4c 01       	movw	r8, r24
    2238:	82 01       	movw	r16, r4
    223a:	f3 2d       	mov	r31, r3
    223c:	ff 77       	andi	r31, 0x7F	; 127
    223e:	3f 2e       	mov	r3, r31
    2240:	16 c0       	rjmp	.+44     	; 0x226e <vfprintf+0x188>
    2242:	28 01       	movw	r4, r16
    2244:	22 e0       	ldi	r18, 0x02	; 2
    2246:	42 0e       	add	r4, r18
    2248:	51 1c       	adc	r5, r1
    224a:	f8 01       	movw	r30, r16
    224c:	a0 80       	ld	r10, Z
    224e:	b1 80       	ldd	r11, Z+1	; 0x01
    2250:	36 fe       	sbrs	r3, 6
    2252:	03 c0       	rjmp	.+6      	; 0x225a <vfprintf+0x174>
    2254:	69 2d       	mov	r22, r9
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	02 c0       	rjmp	.+4      	; 0x225e <vfprintf+0x178>
    225a:	6f ef       	ldi	r22, 0xFF	; 255
    225c:	7f ef       	ldi	r23, 0xFF	; 255
    225e:	c5 01       	movw	r24, r10
    2260:	0e 94 91 13 	call	0x2722	; 0x2722 <strnlen_P>
    2264:	4c 01       	movw	r8, r24
    2266:	f3 2d       	mov	r31, r3
    2268:	f0 68       	ori	r31, 0x80	; 128
    226a:	3f 2e       	mov	r3, r31
    226c:	82 01       	movw	r16, r4
    226e:	33 fc       	sbrc	r3, 3
    2270:	1b c0       	rjmp	.+54     	; 0x22a8 <vfprintf+0x1c2>
    2272:	82 2d       	mov	r24, r2
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	88 16       	cp	r8, r24
    2278:	99 06       	cpc	r9, r25
    227a:	b0 f4       	brcc	.+44     	; 0x22a8 <vfprintf+0x1c2>
    227c:	b6 01       	movw	r22, r12
    227e:	80 e2       	ldi	r24, 0x20	; 32
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    2286:	2a 94       	dec	r2
    2288:	f4 cf       	rjmp	.-24     	; 0x2272 <vfprintf+0x18c>
    228a:	f5 01       	movw	r30, r10
    228c:	37 fc       	sbrc	r3, 7
    228e:	85 91       	lpm	r24, Z+
    2290:	37 fe       	sbrs	r3, 7
    2292:	81 91       	ld	r24, Z+
    2294:	5f 01       	movw	r10, r30
    2296:	b6 01       	movw	r22, r12
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    229e:	21 10       	cpse	r2, r1
    22a0:	2a 94       	dec	r2
    22a2:	21 e0       	ldi	r18, 0x01	; 1
    22a4:	82 1a       	sub	r8, r18
    22a6:	91 08       	sbc	r9, r1
    22a8:	81 14       	cp	r8, r1
    22aa:	91 04       	cpc	r9, r1
    22ac:	71 f7       	brne	.-36     	; 0x228a <vfprintf+0x1a4>
    22ae:	e8 c0       	rjmp	.+464    	; 0x2480 <vfprintf+0x39a>
    22b0:	84 36       	cpi	r24, 0x64	; 100
    22b2:	11 f0       	breq	.+4      	; 0x22b8 <vfprintf+0x1d2>
    22b4:	89 36       	cpi	r24, 0x69	; 105
    22b6:	41 f5       	brne	.+80     	; 0x2308 <vfprintf+0x222>
    22b8:	f8 01       	movw	r30, r16
    22ba:	37 fe       	sbrs	r3, 7
    22bc:	07 c0       	rjmp	.+14     	; 0x22cc <vfprintf+0x1e6>
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	0c 5f       	subi	r16, 0xFC	; 252
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	08 c0       	rjmp	.+16     	; 0x22dc <vfprintf+0x1f6>
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	07 2e       	mov	r0, r23
    22d2:	00 0c       	add	r0, r0
    22d4:	88 0b       	sbc	r24, r24
    22d6:	99 0b       	sbc	r25, r25
    22d8:	0e 5f       	subi	r16, 0xFE	; 254
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	f3 2d       	mov	r31, r3
    22de:	ff 76       	andi	r31, 0x6F	; 111
    22e0:	3f 2e       	mov	r3, r31
    22e2:	97 ff       	sbrs	r25, 7
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <vfprintf+0x212>
    22e6:	90 95       	com	r25
    22e8:	80 95       	com	r24
    22ea:	70 95       	com	r23
    22ec:	61 95       	neg	r22
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	8f 4f       	sbci	r24, 0xFF	; 255
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	f0 68       	ori	r31, 0x80	; 128
    22f6:	3f 2e       	mov	r3, r31
    22f8:	2a e0       	ldi	r18, 0x0A	; 10
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	a3 01       	movw	r20, r6
    22fe:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__ultoa_invert>
    2302:	88 2e       	mov	r8, r24
    2304:	86 18       	sub	r8, r6
    2306:	45 c0       	rjmp	.+138    	; 0x2392 <vfprintf+0x2ac>
    2308:	85 37       	cpi	r24, 0x75	; 117
    230a:	31 f4       	brne	.+12     	; 0x2318 <vfprintf+0x232>
    230c:	23 2d       	mov	r18, r3
    230e:	2f 7e       	andi	r18, 0xEF	; 239
    2310:	b2 2e       	mov	r11, r18
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	25 c0       	rjmp	.+74     	; 0x2362 <vfprintf+0x27c>
    2318:	93 2d       	mov	r25, r3
    231a:	99 7f       	andi	r25, 0xF9	; 249
    231c:	b9 2e       	mov	r11, r25
    231e:	8f 36       	cpi	r24, 0x6F	; 111
    2320:	c1 f0       	breq	.+48     	; 0x2352 <vfprintf+0x26c>
    2322:	18 f4       	brcc	.+6      	; 0x232a <vfprintf+0x244>
    2324:	88 35       	cpi	r24, 0x58	; 88
    2326:	79 f0       	breq	.+30     	; 0x2346 <vfprintf+0x260>
    2328:	b5 c0       	rjmp	.+362    	; 0x2494 <vfprintf+0x3ae>
    232a:	80 37       	cpi	r24, 0x70	; 112
    232c:	19 f0       	breq	.+6      	; 0x2334 <vfprintf+0x24e>
    232e:	88 37       	cpi	r24, 0x78	; 120
    2330:	21 f0       	breq	.+8      	; 0x233a <vfprintf+0x254>
    2332:	b0 c0       	rjmp	.+352    	; 0x2494 <vfprintf+0x3ae>
    2334:	e9 2f       	mov	r30, r25
    2336:	e0 61       	ori	r30, 0x10	; 16
    2338:	be 2e       	mov	r11, r30
    233a:	b4 fe       	sbrs	r11, 4
    233c:	0d c0       	rjmp	.+26     	; 0x2358 <vfprintf+0x272>
    233e:	fb 2d       	mov	r31, r11
    2340:	f4 60       	ori	r31, 0x04	; 4
    2342:	bf 2e       	mov	r11, r31
    2344:	09 c0       	rjmp	.+18     	; 0x2358 <vfprintf+0x272>
    2346:	34 fe       	sbrs	r3, 4
    2348:	0a c0       	rjmp	.+20     	; 0x235e <vfprintf+0x278>
    234a:	29 2f       	mov	r18, r25
    234c:	26 60       	ori	r18, 0x06	; 6
    234e:	b2 2e       	mov	r11, r18
    2350:	06 c0       	rjmp	.+12     	; 0x235e <vfprintf+0x278>
    2352:	28 e0       	ldi	r18, 0x08	; 8
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	05 c0       	rjmp	.+10     	; 0x2362 <vfprintf+0x27c>
    2358:	20 e1       	ldi	r18, 0x10	; 16
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <vfprintf+0x27c>
    235e:	20 e1       	ldi	r18, 0x10	; 16
    2360:	32 e0       	ldi	r19, 0x02	; 2
    2362:	f8 01       	movw	r30, r16
    2364:	b7 fe       	sbrs	r11, 7
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <vfprintf+0x290>
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	0c 5f       	subi	r16, 0xFC	; 252
    2372:	1f 4f       	sbci	r17, 0xFF	; 255
    2374:	06 c0       	rjmp	.+12     	; 0x2382 <vfprintf+0x29c>
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 5f       	subi	r16, 0xFE	; 254
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	a3 01       	movw	r20, r6
    2384:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__ultoa_invert>
    2388:	88 2e       	mov	r8, r24
    238a:	86 18       	sub	r8, r6
    238c:	fb 2d       	mov	r31, r11
    238e:	ff 77       	andi	r31, 0x7F	; 127
    2390:	3f 2e       	mov	r3, r31
    2392:	36 fe       	sbrs	r3, 6
    2394:	0d c0       	rjmp	.+26     	; 0x23b0 <vfprintf+0x2ca>
    2396:	23 2d       	mov	r18, r3
    2398:	2e 7f       	andi	r18, 0xFE	; 254
    239a:	a2 2e       	mov	r10, r18
    239c:	89 14       	cp	r8, r9
    239e:	58 f4       	brcc	.+22     	; 0x23b6 <vfprintf+0x2d0>
    23a0:	34 fe       	sbrs	r3, 4
    23a2:	0b c0       	rjmp	.+22     	; 0x23ba <vfprintf+0x2d4>
    23a4:	32 fc       	sbrc	r3, 2
    23a6:	09 c0       	rjmp	.+18     	; 0x23ba <vfprintf+0x2d4>
    23a8:	83 2d       	mov	r24, r3
    23aa:	8e 7e       	andi	r24, 0xEE	; 238
    23ac:	a8 2e       	mov	r10, r24
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <vfprintf+0x2d4>
    23b0:	b8 2c       	mov	r11, r8
    23b2:	a3 2c       	mov	r10, r3
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <vfprintf+0x2d6>
    23b6:	b8 2c       	mov	r11, r8
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <vfprintf+0x2d6>
    23ba:	b9 2c       	mov	r11, r9
    23bc:	a4 fe       	sbrs	r10, 4
    23be:	0f c0       	rjmp	.+30     	; 0x23de <vfprintf+0x2f8>
    23c0:	fe 01       	movw	r30, r28
    23c2:	e8 0d       	add	r30, r8
    23c4:	f1 1d       	adc	r31, r1
    23c6:	80 81       	ld	r24, Z
    23c8:	80 33       	cpi	r24, 0x30	; 48
    23ca:	21 f4       	brne	.+8      	; 0x23d4 <vfprintf+0x2ee>
    23cc:	9a 2d       	mov	r25, r10
    23ce:	99 7e       	andi	r25, 0xE9	; 233
    23d0:	a9 2e       	mov	r10, r25
    23d2:	09 c0       	rjmp	.+18     	; 0x23e6 <vfprintf+0x300>
    23d4:	a2 fe       	sbrs	r10, 2
    23d6:	06 c0       	rjmp	.+12     	; 0x23e4 <vfprintf+0x2fe>
    23d8:	b3 94       	inc	r11
    23da:	b3 94       	inc	r11
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <vfprintf+0x300>
    23de:	8a 2d       	mov	r24, r10
    23e0:	86 78       	andi	r24, 0x86	; 134
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <vfprintf+0x300>
    23e4:	b3 94       	inc	r11
    23e6:	a3 fc       	sbrc	r10, 3
    23e8:	11 c0       	rjmp	.+34     	; 0x240c <vfprintf+0x326>
    23ea:	a0 fe       	sbrs	r10, 0
    23ec:	06 c0       	rjmp	.+12     	; 0x23fa <vfprintf+0x314>
    23ee:	b2 14       	cp	r11, r2
    23f0:	88 f4       	brcc	.+34     	; 0x2414 <vfprintf+0x32e>
    23f2:	28 0c       	add	r2, r8
    23f4:	92 2c       	mov	r9, r2
    23f6:	9b 18       	sub	r9, r11
    23f8:	0e c0       	rjmp	.+28     	; 0x2416 <vfprintf+0x330>
    23fa:	b2 14       	cp	r11, r2
    23fc:	60 f4       	brcc	.+24     	; 0x2416 <vfprintf+0x330>
    23fe:	b6 01       	movw	r22, r12
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    2408:	b3 94       	inc	r11
    240a:	f7 cf       	rjmp	.-18     	; 0x23fa <vfprintf+0x314>
    240c:	b2 14       	cp	r11, r2
    240e:	18 f4       	brcc	.+6      	; 0x2416 <vfprintf+0x330>
    2410:	2b 18       	sub	r2, r11
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <vfprintf+0x332>
    2414:	98 2c       	mov	r9, r8
    2416:	21 2c       	mov	r2, r1
    2418:	a4 fe       	sbrs	r10, 4
    241a:	10 c0       	rjmp	.+32     	; 0x243c <vfprintf+0x356>
    241c:	b6 01       	movw	r22, r12
    241e:	80 e3       	ldi	r24, 0x30	; 48
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    2426:	a2 fe       	sbrs	r10, 2
    2428:	17 c0       	rjmp	.+46     	; 0x2458 <vfprintf+0x372>
    242a:	a1 fc       	sbrc	r10, 1
    242c:	03 c0       	rjmp	.+6      	; 0x2434 <vfprintf+0x34e>
    242e:	88 e7       	ldi	r24, 0x78	; 120
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <vfprintf+0x352>
    2434:	88 e5       	ldi	r24, 0x58	; 88
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	b6 01       	movw	r22, r12
    243a:	0c c0       	rjmp	.+24     	; 0x2454 <vfprintf+0x36e>
    243c:	8a 2d       	mov	r24, r10
    243e:	86 78       	andi	r24, 0x86	; 134
    2440:	59 f0       	breq	.+22     	; 0x2458 <vfprintf+0x372>
    2442:	a1 fe       	sbrs	r10, 1
    2444:	02 c0       	rjmp	.+4      	; 0x244a <vfprintf+0x364>
    2446:	8b e2       	ldi	r24, 0x2B	; 43
    2448:	01 c0       	rjmp	.+2      	; 0x244c <vfprintf+0x366>
    244a:	80 e2       	ldi	r24, 0x20	; 32
    244c:	a7 fc       	sbrc	r10, 7
    244e:	8d e2       	ldi	r24, 0x2D	; 45
    2450:	b6 01       	movw	r22, r12
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    2458:	89 14       	cp	r8, r9
    245a:	38 f4       	brcc	.+14     	; 0x246a <vfprintf+0x384>
    245c:	b6 01       	movw	r22, r12
    245e:	80 e3       	ldi	r24, 0x30	; 48
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    2466:	9a 94       	dec	r9
    2468:	f7 cf       	rjmp	.-18     	; 0x2458 <vfprintf+0x372>
    246a:	8a 94       	dec	r8
    246c:	f3 01       	movw	r30, r6
    246e:	e8 0d       	add	r30, r8
    2470:	f1 1d       	adc	r31, r1
    2472:	80 81       	ld	r24, Z
    2474:	b6 01       	movw	r22, r12
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    247c:	81 10       	cpse	r8, r1
    247e:	f5 cf       	rjmp	.-22     	; 0x246a <vfprintf+0x384>
    2480:	22 20       	and	r2, r2
    2482:	09 f4       	brne	.+2      	; 0x2486 <vfprintf+0x3a0>
    2484:	42 ce       	rjmp	.-892    	; 0x210a <vfprintf+0x24>
    2486:	b6 01       	movw	r22, r12
    2488:	80 e2       	ldi	r24, 0x20	; 32
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 94 be 13 	call	0x277c	; 0x277c <fputc>
    2490:	2a 94       	dec	r2
    2492:	f6 cf       	rjmp	.-20     	; 0x2480 <vfprintf+0x39a>
    2494:	f6 01       	movw	r30, r12
    2496:	86 81       	ldd	r24, Z+6	; 0x06
    2498:	97 81       	ldd	r25, Z+7	; 0x07
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <vfprintf+0x3ba>
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	9f ef       	ldi	r25, 0xFF	; 255
    24a0:	2b 96       	adiw	r28, 0x0b	; 11
    24a2:	e2 e1       	ldi	r30, 0x12	; 18
    24a4:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__>

000024a8 <calloc>:
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	86 9f       	mul	r24, r22
    24b2:	80 01       	movw	r16, r0
    24b4:	87 9f       	mul	r24, r23
    24b6:	10 0d       	add	r17, r0
    24b8:	96 9f       	mul	r25, r22
    24ba:	10 0d       	add	r17, r0
    24bc:	11 24       	eor	r1, r1
    24be:	c8 01       	movw	r24, r16
    24c0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <malloc>
    24c4:	ec 01       	movw	r28, r24
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	29 f0       	breq	.+10     	; 0x24d4 <calloc+0x2c>
    24ca:	a8 01       	movw	r20, r16
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	0e 94 9c 13 	call	0x2738	; 0x2738 <memset>
    24d4:	ce 01       	movw	r24, r28
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <malloc>:
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	82 30       	cpi	r24, 0x02	; 2
    24ea:	91 05       	cpc	r25, r1
    24ec:	10 f4       	brcc	.+4      	; 0x24f2 <malloc+0x12>
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <__flp>
    24f6:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <__flp+0x1>
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	a0 e0       	ldi	r26, 0x00	; 0
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	30 97       	sbiw	r30, 0x00	; 0
    2504:	19 f1       	breq	.+70     	; 0x254c <malloc+0x6c>
    2506:	40 81       	ld	r20, Z
    2508:	51 81       	ldd	r21, Z+1	; 0x01
    250a:	02 81       	ldd	r16, Z+2	; 0x02
    250c:	13 81       	ldd	r17, Z+3	; 0x03
    250e:	48 17       	cp	r20, r24
    2510:	59 07       	cpc	r21, r25
    2512:	c8 f0       	brcs	.+50     	; 0x2546 <malloc+0x66>
    2514:	84 17       	cp	r24, r20
    2516:	95 07       	cpc	r25, r21
    2518:	69 f4       	brne	.+26     	; 0x2534 <malloc+0x54>
    251a:	10 97       	sbiw	r26, 0x00	; 0
    251c:	31 f0       	breq	.+12     	; 0x252a <malloc+0x4a>
    251e:	12 96       	adiw	r26, 0x02	; 2
    2520:	0c 93       	st	X, r16
    2522:	12 97       	sbiw	r26, 0x02	; 2
    2524:	13 96       	adiw	r26, 0x03	; 3
    2526:	1c 93       	st	X, r17
    2528:	27 c0       	rjmp	.+78     	; 0x2578 <malloc+0x98>
    252a:	00 93 a0 04 	sts	0x04A0, r16	; 0x8004a0 <__flp>
    252e:	10 93 a1 04 	sts	0x04A1, r17	; 0x8004a1 <__flp+0x1>
    2532:	22 c0       	rjmp	.+68     	; 0x2578 <malloc+0x98>
    2534:	21 15       	cp	r18, r1
    2536:	31 05       	cpc	r19, r1
    2538:	19 f0       	breq	.+6      	; 0x2540 <malloc+0x60>
    253a:	42 17       	cp	r20, r18
    253c:	53 07       	cpc	r21, r19
    253e:	18 f4       	brcc	.+6      	; 0x2546 <malloc+0x66>
    2540:	9a 01       	movw	r18, r20
    2542:	bd 01       	movw	r22, r26
    2544:	ef 01       	movw	r28, r30
    2546:	df 01       	movw	r26, r30
    2548:	f8 01       	movw	r30, r16
    254a:	db cf       	rjmp	.-74     	; 0x2502 <malloc+0x22>
    254c:	21 15       	cp	r18, r1
    254e:	31 05       	cpc	r19, r1
    2550:	f9 f0       	breq	.+62     	; 0x2590 <malloc+0xb0>
    2552:	28 1b       	sub	r18, r24
    2554:	39 0b       	sbc	r19, r25
    2556:	24 30       	cpi	r18, 0x04	; 4
    2558:	31 05       	cpc	r19, r1
    255a:	80 f4       	brcc	.+32     	; 0x257c <malloc+0x9c>
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	9b 81       	ldd	r25, Y+3	; 0x03
    2560:	61 15       	cp	r22, r1
    2562:	71 05       	cpc	r23, r1
    2564:	21 f0       	breq	.+8      	; 0x256e <malloc+0x8e>
    2566:	fb 01       	movw	r30, r22
    2568:	93 83       	std	Z+3, r25	; 0x03
    256a:	82 83       	std	Z+2, r24	; 0x02
    256c:	04 c0       	rjmp	.+8      	; 0x2576 <malloc+0x96>
    256e:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__flp+0x1>
    2572:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__flp>
    2576:	fe 01       	movw	r30, r28
    2578:	32 96       	adiw	r30, 0x02	; 2
    257a:	44 c0       	rjmp	.+136    	; 0x2604 <malloc+0x124>
    257c:	fe 01       	movw	r30, r28
    257e:	e2 0f       	add	r30, r18
    2580:	f3 1f       	adc	r31, r19
    2582:	81 93       	st	Z+, r24
    2584:	91 93       	st	Z+, r25
    2586:	22 50       	subi	r18, 0x02	; 2
    2588:	31 09       	sbc	r19, r1
    258a:	39 83       	std	Y+1, r19	; 0x01
    258c:	28 83       	st	Y, r18
    258e:	3a c0       	rjmp	.+116    	; 0x2604 <malloc+0x124>
    2590:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    2594:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    2598:	23 2b       	or	r18, r19
    259a:	41 f4       	brne	.+16     	; 0x25ac <malloc+0xcc>
    259c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25a0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    25a4:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <__brkval+0x1>
    25a8:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <__brkval>
    25ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    25b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    25b4:	21 15       	cp	r18, r1
    25b6:	31 05       	cpc	r19, r1
    25b8:	41 f4       	brne	.+16     	; 0x25ca <malloc+0xea>
    25ba:	2d b7       	in	r18, 0x3d	; 61
    25bc:	3e b7       	in	r19, 0x3e	; 62
    25be:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    25c2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    25c6:	24 1b       	sub	r18, r20
    25c8:	35 0b       	sbc	r19, r21
    25ca:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <__brkval>
    25ce:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <__brkval+0x1>
    25d2:	e2 17       	cp	r30, r18
    25d4:	f3 07       	cpc	r31, r19
    25d6:	a0 f4       	brcc	.+40     	; 0x2600 <malloc+0x120>
    25d8:	2e 1b       	sub	r18, r30
    25da:	3f 0b       	sbc	r19, r31
    25dc:	28 17       	cp	r18, r24
    25de:	39 07       	cpc	r19, r25
    25e0:	78 f0       	brcs	.+30     	; 0x2600 <malloc+0x120>
    25e2:	ac 01       	movw	r20, r24
    25e4:	4e 5f       	subi	r20, 0xFE	; 254
    25e6:	5f 4f       	sbci	r21, 0xFF	; 255
    25e8:	24 17       	cp	r18, r20
    25ea:	35 07       	cpc	r19, r21
    25ec:	48 f0       	brcs	.+18     	; 0x2600 <malloc+0x120>
    25ee:	4e 0f       	add	r20, r30
    25f0:	5f 1f       	adc	r21, r31
    25f2:	50 93 9f 04 	sts	0x049F, r21	; 0x80049f <__brkval+0x1>
    25f6:	40 93 9e 04 	sts	0x049E, r20	; 0x80049e <__brkval>
    25fa:	81 93       	st	Z+, r24
    25fc:	91 93       	st	Z+, r25
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <malloc+0x124>
    2600:	e0 e0       	ldi	r30, 0x00	; 0
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	cf 01       	movw	r24, r30
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	08 95       	ret

00002610 <free>:
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	09 f4       	brne	.+2      	; 0x261a <free+0xa>
    2618:	81 c0       	rjmp	.+258    	; 0x271c <free+0x10c>
    261a:	fc 01       	movw	r30, r24
    261c:	32 97       	sbiw	r30, 0x02	; 2
    261e:	13 82       	std	Z+3, r1	; 0x03
    2620:	12 82       	std	Z+2, r1	; 0x02
    2622:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <__flp>
    2626:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <__flp+0x1>
    262a:	10 97       	sbiw	r26, 0x00	; 0
    262c:	81 f4       	brne	.+32     	; 0x264e <free+0x3e>
    262e:	20 81       	ld	r18, Z
    2630:	31 81       	ldd	r19, Z+1	; 0x01
    2632:	82 0f       	add	r24, r18
    2634:	93 1f       	adc	r25, r19
    2636:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    263a:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    263e:	28 17       	cp	r18, r24
    2640:	39 07       	cpc	r19, r25
    2642:	51 f5       	brne	.+84     	; 0x2698 <free+0x88>
    2644:	f0 93 9f 04 	sts	0x049F, r31	; 0x80049f <__brkval+0x1>
    2648:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <__brkval>
    264c:	67 c0       	rjmp	.+206    	; 0x271c <free+0x10c>
    264e:	ed 01       	movw	r28, r26
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	ce 17       	cp	r28, r30
    2656:	df 07       	cpc	r29, r31
    2658:	40 f4       	brcc	.+16     	; 0x266a <free+0x5a>
    265a:	4a 81       	ldd	r20, Y+2	; 0x02
    265c:	5b 81       	ldd	r21, Y+3	; 0x03
    265e:	9e 01       	movw	r18, r28
    2660:	41 15       	cp	r20, r1
    2662:	51 05       	cpc	r21, r1
    2664:	f1 f0       	breq	.+60     	; 0x26a2 <free+0x92>
    2666:	ea 01       	movw	r28, r20
    2668:	f5 cf       	rjmp	.-22     	; 0x2654 <free+0x44>
    266a:	d3 83       	std	Z+3, r29	; 0x03
    266c:	c2 83       	std	Z+2, r28	; 0x02
    266e:	40 81       	ld	r20, Z
    2670:	51 81       	ldd	r21, Z+1	; 0x01
    2672:	84 0f       	add	r24, r20
    2674:	95 1f       	adc	r25, r21
    2676:	c8 17       	cp	r28, r24
    2678:	d9 07       	cpc	r29, r25
    267a:	59 f4       	brne	.+22     	; 0x2692 <free+0x82>
    267c:	88 81       	ld	r24, Y
    267e:	99 81       	ldd	r25, Y+1	; 0x01
    2680:	84 0f       	add	r24, r20
    2682:	95 1f       	adc	r25, r21
    2684:	02 96       	adiw	r24, 0x02	; 2
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	9b 81       	ldd	r25, Y+3	; 0x03
    268e:	93 83       	std	Z+3, r25	; 0x03
    2690:	82 83       	std	Z+2, r24	; 0x02
    2692:	21 15       	cp	r18, r1
    2694:	31 05       	cpc	r19, r1
    2696:	29 f4       	brne	.+10     	; 0x26a2 <free+0x92>
    2698:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <__flp+0x1>
    269c:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <__flp>
    26a0:	3d c0       	rjmp	.+122    	; 0x271c <free+0x10c>
    26a2:	e9 01       	movw	r28, r18
    26a4:	fb 83       	std	Y+3, r31	; 0x03
    26a6:	ea 83       	std	Y+2, r30	; 0x02
    26a8:	49 91       	ld	r20, Y+
    26aa:	59 91       	ld	r21, Y+
    26ac:	c4 0f       	add	r28, r20
    26ae:	d5 1f       	adc	r29, r21
    26b0:	ec 17       	cp	r30, r28
    26b2:	fd 07       	cpc	r31, r29
    26b4:	61 f4       	brne	.+24     	; 0x26ce <free+0xbe>
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	84 0f       	add	r24, r20
    26bc:	95 1f       	adc	r25, r21
    26be:	02 96       	adiw	r24, 0x02	; 2
    26c0:	e9 01       	movw	r28, r18
    26c2:	99 83       	std	Y+1, r25	; 0x01
    26c4:	88 83       	st	Y, r24
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	9b 83       	std	Y+3, r25	; 0x03
    26cc:	8a 83       	std	Y+2, r24	; 0x02
    26ce:	e0 e0       	ldi	r30, 0x00	; 0
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	12 96       	adiw	r26, 0x02	; 2
    26d4:	8d 91       	ld	r24, X+
    26d6:	9c 91       	ld	r25, X
    26d8:	13 97       	sbiw	r26, 0x03	; 3
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	19 f0       	breq	.+6      	; 0x26e4 <free+0xd4>
    26de:	fd 01       	movw	r30, r26
    26e0:	dc 01       	movw	r26, r24
    26e2:	f7 cf       	rjmp	.-18     	; 0x26d2 <free+0xc2>
    26e4:	8d 91       	ld	r24, X+
    26e6:	9c 91       	ld	r25, X
    26e8:	11 97       	sbiw	r26, 0x01	; 1
    26ea:	9d 01       	movw	r18, r26
    26ec:	2e 5f       	subi	r18, 0xFE	; 254
    26ee:	3f 4f       	sbci	r19, 0xFF	; 255
    26f0:	82 0f       	add	r24, r18
    26f2:	93 1f       	adc	r25, r19
    26f4:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    26f8:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    26fc:	28 17       	cp	r18, r24
    26fe:	39 07       	cpc	r19, r25
    2700:	69 f4       	brne	.+26     	; 0x271c <free+0x10c>
    2702:	30 97       	sbiw	r30, 0x00	; 0
    2704:	29 f4       	brne	.+10     	; 0x2710 <free+0x100>
    2706:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <__flp+0x1>
    270a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__flp>
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <free+0x104>
    2710:	13 82       	std	Z+3, r1	; 0x03
    2712:	12 82       	std	Z+2, r1	; 0x02
    2714:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <__brkval+0x1>
    2718:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <__brkval>
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	08 95       	ret

00002722 <strnlen_P>:
    2722:	fc 01       	movw	r30, r24
    2724:	05 90       	lpm	r0, Z+
    2726:	61 50       	subi	r22, 0x01	; 1
    2728:	70 40       	sbci	r23, 0x00	; 0
    272a:	01 10       	cpse	r0, r1
    272c:	d8 f7       	brcc	.-10     	; 0x2724 <strnlen_P+0x2>
    272e:	80 95       	com	r24
    2730:	90 95       	com	r25
    2732:	8e 0f       	add	r24, r30
    2734:	9f 1f       	adc	r25, r31
    2736:	08 95       	ret

00002738 <memset>:
    2738:	dc 01       	movw	r26, r24
    273a:	01 c0       	rjmp	.+2      	; 0x273e <memset+0x6>
    273c:	6d 93       	st	X+, r22
    273e:	41 50       	subi	r20, 0x01	; 1
    2740:	50 40       	sbci	r21, 0x00	; 0
    2742:	e0 f7       	brcc	.-8      	; 0x273c <memset+0x4>
    2744:	08 95       	ret

00002746 <strnlen>:
    2746:	fc 01       	movw	r30, r24
    2748:	61 50       	subi	r22, 0x01	; 1
    274a:	70 40       	sbci	r23, 0x00	; 0
    274c:	01 90       	ld	r0, Z+
    274e:	01 10       	cpse	r0, r1
    2750:	d8 f7       	brcc	.-10     	; 0x2748 <strnlen+0x2>
    2752:	80 95       	com	r24
    2754:	90 95       	com	r25
    2756:	8e 0f       	add	r24, r30
    2758:	9f 1f       	adc	r25, r31
    275a:	08 95       	ret

0000275c <strrev>:
    275c:	dc 01       	movw	r26, r24
    275e:	fc 01       	movw	r30, r24
    2760:	67 2f       	mov	r22, r23
    2762:	71 91       	ld	r23, Z+
    2764:	77 23       	and	r23, r23
    2766:	e1 f7       	brne	.-8      	; 0x2760 <strrev+0x4>
    2768:	32 97       	sbiw	r30, 0x02	; 2
    276a:	04 c0       	rjmp	.+8      	; 0x2774 <strrev+0x18>
    276c:	7c 91       	ld	r23, X
    276e:	6d 93       	st	X+, r22
    2770:	70 83       	st	Z, r23
    2772:	62 91       	ld	r22, -Z
    2774:	ae 17       	cp	r26, r30
    2776:	bf 07       	cpc	r27, r31
    2778:	c8 f3       	brcs	.-14     	; 0x276c <strrev+0x10>
    277a:	08 95       	ret

0000277c <fputc>:
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	fb 01       	movw	r30, r22
    2786:	23 81       	ldd	r18, Z+3	; 0x03
    2788:	21 fd       	sbrc	r18, 1
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <fputc+0x16>
    278c:	8f ef       	ldi	r24, 0xFF	; 255
    278e:	9f ef       	ldi	r25, 0xFF	; 255
    2790:	2c c0       	rjmp	.+88     	; 0x27ea <fputc+0x6e>
    2792:	22 ff       	sbrs	r18, 2
    2794:	16 c0       	rjmp	.+44     	; 0x27c2 <fputc+0x46>
    2796:	46 81       	ldd	r20, Z+6	; 0x06
    2798:	57 81       	ldd	r21, Z+7	; 0x07
    279a:	24 81       	ldd	r18, Z+4	; 0x04
    279c:	35 81       	ldd	r19, Z+5	; 0x05
    279e:	42 17       	cp	r20, r18
    27a0:	53 07       	cpc	r21, r19
    27a2:	44 f4       	brge	.+16     	; 0x27b4 <fputc+0x38>
    27a4:	a0 81       	ld	r26, Z
    27a6:	b1 81       	ldd	r27, Z+1	; 0x01
    27a8:	9d 01       	movw	r18, r26
    27aa:	2f 5f       	subi	r18, 0xFF	; 255
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	31 83       	std	Z+1, r19	; 0x01
    27b0:	20 83       	st	Z, r18
    27b2:	8c 93       	st	X, r24
    27b4:	26 81       	ldd	r18, Z+6	; 0x06
    27b6:	37 81       	ldd	r19, Z+7	; 0x07
    27b8:	2f 5f       	subi	r18, 0xFF	; 255
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	37 83       	std	Z+7, r19	; 0x07
    27be:	26 83       	std	Z+6, r18	; 0x06
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <fputc+0x6e>
    27c2:	8b 01       	movw	r16, r22
    27c4:	ec 01       	movw	r28, r24
    27c6:	fb 01       	movw	r30, r22
    27c8:	00 84       	ldd	r0, Z+8	; 0x08
    27ca:	f1 85       	ldd	r31, Z+9	; 0x09
    27cc:	e0 2d       	mov	r30, r0
    27ce:	09 95       	icall
    27d0:	89 2b       	or	r24, r25
    27d2:	e1 f6       	brne	.-72     	; 0x278c <fputc+0x10>
    27d4:	d8 01       	movw	r26, r16
    27d6:	16 96       	adiw	r26, 0x06	; 6
    27d8:	8d 91       	ld	r24, X+
    27da:	9c 91       	ld	r25, X
    27dc:	17 97       	sbiw	r26, 0x07	; 7
    27de:	01 96       	adiw	r24, 0x01	; 1
    27e0:	17 96       	adiw	r26, 0x07	; 7
    27e2:	9c 93       	st	X, r25
    27e4:	8e 93       	st	-X, r24
    27e6:	16 97       	sbiw	r26, 0x06	; 6
    27e8:	ce 01       	movw	r24, r28
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	08 95       	ret

000027f4 <__ultoa_invert>:
    27f4:	fa 01       	movw	r30, r20
    27f6:	aa 27       	eor	r26, r26
    27f8:	28 30       	cpi	r18, 0x08	; 8
    27fa:	51 f1       	breq	.+84     	; 0x2850 <__ultoa_invert+0x5c>
    27fc:	20 31       	cpi	r18, 0x10	; 16
    27fe:	81 f1       	breq	.+96     	; 0x2860 <__ultoa_invert+0x6c>
    2800:	e8 94       	clt
    2802:	6f 93       	push	r22
    2804:	6e 7f       	andi	r22, 0xFE	; 254
    2806:	6e 5f       	subi	r22, 0xFE	; 254
    2808:	7f 4f       	sbci	r23, 0xFF	; 255
    280a:	8f 4f       	sbci	r24, 0xFF	; 255
    280c:	9f 4f       	sbci	r25, 0xFF	; 255
    280e:	af 4f       	sbci	r26, 0xFF	; 255
    2810:	b1 e0       	ldi	r27, 0x01	; 1
    2812:	3e d0       	rcall	.+124    	; 0x2890 <__ultoa_invert+0x9c>
    2814:	b4 e0       	ldi	r27, 0x04	; 4
    2816:	3c d0       	rcall	.+120    	; 0x2890 <__ultoa_invert+0x9c>
    2818:	67 0f       	add	r22, r23
    281a:	78 1f       	adc	r23, r24
    281c:	89 1f       	adc	r24, r25
    281e:	9a 1f       	adc	r25, r26
    2820:	a1 1d       	adc	r26, r1
    2822:	68 0f       	add	r22, r24
    2824:	79 1f       	adc	r23, r25
    2826:	8a 1f       	adc	r24, r26
    2828:	91 1d       	adc	r25, r1
    282a:	a1 1d       	adc	r26, r1
    282c:	6a 0f       	add	r22, r26
    282e:	71 1d       	adc	r23, r1
    2830:	81 1d       	adc	r24, r1
    2832:	91 1d       	adc	r25, r1
    2834:	a1 1d       	adc	r26, r1
    2836:	20 d0       	rcall	.+64     	; 0x2878 <__ultoa_invert+0x84>
    2838:	09 f4       	brne	.+2      	; 0x283c <__ultoa_invert+0x48>
    283a:	68 94       	set
    283c:	3f 91       	pop	r19
    283e:	2a e0       	ldi	r18, 0x0A	; 10
    2840:	26 9f       	mul	r18, r22
    2842:	11 24       	eor	r1, r1
    2844:	30 19       	sub	r19, r0
    2846:	30 5d       	subi	r19, 0xD0	; 208
    2848:	31 93       	st	Z+, r19
    284a:	de f6       	brtc	.-74     	; 0x2802 <__ultoa_invert+0xe>
    284c:	cf 01       	movw	r24, r30
    284e:	08 95       	ret
    2850:	46 2f       	mov	r20, r22
    2852:	47 70       	andi	r20, 0x07	; 7
    2854:	40 5d       	subi	r20, 0xD0	; 208
    2856:	41 93       	st	Z+, r20
    2858:	b3 e0       	ldi	r27, 0x03	; 3
    285a:	0f d0       	rcall	.+30     	; 0x287a <__ultoa_invert+0x86>
    285c:	c9 f7       	brne	.-14     	; 0x2850 <__ultoa_invert+0x5c>
    285e:	f6 cf       	rjmp	.-20     	; 0x284c <__ultoa_invert+0x58>
    2860:	46 2f       	mov	r20, r22
    2862:	4f 70       	andi	r20, 0x0F	; 15
    2864:	40 5d       	subi	r20, 0xD0	; 208
    2866:	4a 33       	cpi	r20, 0x3A	; 58
    2868:	18 f0       	brcs	.+6      	; 0x2870 <__ultoa_invert+0x7c>
    286a:	49 5d       	subi	r20, 0xD9	; 217
    286c:	31 fd       	sbrc	r19, 1
    286e:	40 52       	subi	r20, 0x20	; 32
    2870:	41 93       	st	Z+, r20
    2872:	02 d0       	rcall	.+4      	; 0x2878 <__ultoa_invert+0x84>
    2874:	a9 f7       	brne	.-22     	; 0x2860 <__ultoa_invert+0x6c>
    2876:	ea cf       	rjmp	.-44     	; 0x284c <__ultoa_invert+0x58>
    2878:	b4 e0       	ldi	r27, 0x04	; 4
    287a:	a6 95       	lsr	r26
    287c:	97 95       	ror	r25
    287e:	87 95       	ror	r24
    2880:	77 95       	ror	r23
    2882:	67 95       	ror	r22
    2884:	ba 95       	dec	r27
    2886:	c9 f7       	brne	.-14     	; 0x287a <__ultoa_invert+0x86>
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	61 05       	cpc	r22, r1
    288c:	71 05       	cpc	r23, r1
    288e:	08 95       	ret
    2890:	9b 01       	movw	r18, r22
    2892:	ac 01       	movw	r20, r24
    2894:	0a 2e       	mov	r0, r26
    2896:	06 94       	lsr	r0
    2898:	57 95       	ror	r21
    289a:	47 95       	ror	r20
    289c:	37 95       	ror	r19
    289e:	27 95       	ror	r18
    28a0:	ba 95       	dec	r27
    28a2:	c9 f7       	brne	.-14     	; 0x2896 <__ultoa_invert+0xa2>
    28a4:	62 0f       	add	r22, r18
    28a6:	73 1f       	adc	r23, r19
    28a8:	84 1f       	adc	r24, r20
    28aa:	95 1f       	adc	r25, r21
    28ac:	a0 1d       	adc	r26, r0
    28ae:	08 95       	ret

000028b0 <__prologue_saves__>:
    28b0:	2f 92       	push	r2
    28b2:	3f 92       	push	r3
    28b4:	4f 92       	push	r4
    28b6:	5f 92       	push	r5
    28b8:	6f 92       	push	r6
    28ba:	7f 92       	push	r7
    28bc:	8f 92       	push	r8
    28be:	9f 92       	push	r9
    28c0:	af 92       	push	r10
    28c2:	bf 92       	push	r11
    28c4:	cf 92       	push	r12
    28c6:	df 92       	push	r13
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	ca 1b       	sub	r28, r26
    28da:	db 0b       	sbc	r29, r27
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	09 94       	ijmp

000028e8 <__epilogue_restores__>:
    28e8:	2a 88       	ldd	r2, Y+18	; 0x12
    28ea:	39 88       	ldd	r3, Y+17	; 0x11
    28ec:	48 88       	ldd	r4, Y+16	; 0x10
    28ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28fa:	b9 84       	ldd	r11, Y+9	; 0x09
    28fc:	c8 84       	ldd	r12, Y+8	; 0x08
    28fe:	df 80       	ldd	r13, Y+7	; 0x07
    2900:	ee 80       	ldd	r14, Y+6	; 0x06
    2902:	fd 80       	ldd	r15, Y+5	; 0x05
    2904:	0c 81       	ldd	r16, Y+4	; 0x04
    2906:	1b 81       	ldd	r17, Y+3	; 0x03
    2908:	aa 81       	ldd	r26, Y+2	; 0x02
    290a:	b9 81       	ldd	r27, Y+1	; 0x01
    290c:	ce 0f       	add	r28, r30
    290e:	d1 1d       	adc	r29, r1
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	ed 01       	movw	r28, r26
    291c:	08 95       	ret

0000291e <_exit>:
    291e:	f8 94       	cli

00002920 <__stop_program>:
    2920:	ff cf       	rjmp	.-2      	; 0x2920 <__stop_program>
