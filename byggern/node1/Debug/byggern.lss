
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800100  000028b4  00002948  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800320  00800320  00002b68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000053b0  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cf9  00000000  00000000  000083a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021e1  00000000  00000000  0000a0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000914  00000000  00000000  0000c284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf9  00000000  00000000  0000cb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000215b  00000000  00000000  0000d891  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	13 e0       	ldi	r17, 0x03	; 3
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	e4 eb       	ldi	r30, 0xB4	; 180
     536:	f8 e2       	ldi	r31, 0x28	; 40
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a0 32       	cpi	r26, 0x20	; 32
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a0 e2       	ldi	r26, 0x20	; 32
     548:	b3 e0       	ldi	r27, 0x03	; 3
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	ae 35       	cpi	r26, 0x5E	; 94
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xfa2>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xfa2>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "CAN.h"
#include "game.h"
#include "music.h"
#include "sleep.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
//p.23 for can read instructions
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     5aa:	87 e5       	ldi	r24, 0x57	; 87
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 26 10 	call	0x204c	; 0x204c <printf>
	printf("---------------------------------------\n\r");
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 26 10 	call	0x204c	; 0x204c <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x4e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x58>
     5ea:	00 00       	nop
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     5f4:	0d e2       	ldi	r16, 0x2D	; 45
     5f6:	13 e0       	ldi	r17, 0x03	; 3
	printf("---------------------------------------\n\r");
	_delay_ms(500);    
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     5f8:	0e 94 1c 09 	call	0x1238	; 0x1238 <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     5fc:	d8 01       	movw	r26, r16
     5fe:	ed 91       	ld	r30, X+
     600:	fc 91       	ld	r31, X
     602:	80 81       	ld	r24, Z
     604:	85 30       	cpi	r24, 0x05	; 5
     606:	91 f0       	breq	.+36     	; 0x62c <main+0x9a>
     608:	28 f4       	brcc	.+10     	; 0x614 <main+0x82>
     60a:	83 30       	cpi	r24, 0x03	; 3
     60c:	41 f0       	breq	.+16     	; 0x61e <main+0x8c>
     60e:	84 30       	cpi	r24, 0x04	; 4
     610:	49 f0       	breq	.+18     	; 0x624 <main+0x92>
     612:	f2 cf       	rjmp	.-28     	; 0x5f8 <main+0x66>
     614:	86 30       	cpi	r24, 0x06	; 6
     616:	71 f0       	breq	.+28     	; 0x634 <main+0xa2>
     618:	87 30       	cpi	r24, 0x07	; 7
     61a:	81 f0       	breq	.+32     	; 0x63c <main+0xaa>
     61c:	ed cf       	rjmp	.-38     	; 0x5f8 <main+0x66>
			case PLAY_GAME:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     61e:	0e 94 de 07 	call	0xfbc	; 0xfbc <music_playRick>
				break;
     622:	ea cf       	rjmp	.-44     	; 0x5f8 <main+0x66>
			case GAME_1:
				game_play(1);
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 3e 07 	call	0xe7c	; 0xe7c <game_play>
				break;
     62a:	e6 cf       	rjmp	.-52     	; 0x5f8 <main+0x66>
			case GAME_2:
				game_play(2);
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <game_play>
				break;
     632:	e2 cf       	rjmp	.-60     	; 0x5f8 <main+0x66>
			case HS1:
				game_displayHighscores(1);
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 6b 07 	call	0xed6	; 0xed6 <game_displayHighscores>
				break;
     63a:	de cf       	rjmp	.-68     	; 0x5f8 <main+0x66>
			case HS2:
				game_displayHighscores(2);
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	0e 94 6b 07 	call	0xed6	; 0xed6 <game_displayHighscores>
				break;
     642:	da cf       	rjmp	.-76     	; 0x5f8 <main+0x66>

00000644 <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	6c e2       	ldi	r22, 0x2C	; 44
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
     64e:	08 95       	ret

00000650 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     658:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     65c:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	63 e0       	ldi	r22, 0x03	; 3
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__divmodhi4>
     66a:	28 2f       	mov	r18, r24
     66c:	39 2f       	mov	r19, r25
     66e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
     672:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
	
	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     676:	21 30       	cpi	r18, 0x01	; 1
     678:	31 05       	cpc	r19, r1
     67a:	e9 f0       	breq	.+58     	; 0x6b6 <CAN_transmit_message+0x66>
     67c:	22 30       	cpi	r18, 0x02	; 2
     67e:	31 05       	cpc	r19, r1
     680:	89 f1       	breq	.+98     	; 0x6e4 <CAN_transmit_message+0x94>
     682:	23 2b       	or	r18, r19
     684:	09 f0       	breq	.+2      	; 0x688 <CAN_transmit_message+0x38>
     686:	44 c0       	rjmp	.+136    	; 0x710 <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     688:	f8 01       	movw	r30, r16
     68a:	40 85       	ldd	r20, Z+8	; 0x08
     68c:	51 85       	ldd	r21, Z+9	; 0x09
     68e:	42 95       	swap	r20
     690:	44 0f       	add	r20, r20
     692:	40 7e       	andi	r20, 0xE0	; 224
     694:	62 e3       	ldi	r22, 0x32	; 50
     696:	80 ee       	ldi	r24, 0xE0	; 224
     698:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     69c:	f8 01       	movw	r30, r16
     69e:	60 85       	ldd	r22, Z+8	; 0x08
     6a0:	71 85       	ldd	r23, Z+9	; 0x09
     6a2:	76 95       	lsr	r23
     6a4:	67 95       	ror	r22
     6a6:	76 95       	lsr	r23
     6a8:	67 95       	ror	r22
     6aa:	76 95       	lsr	r23
     6ac:	67 95       	ror	r22
     6ae:	81 e3       	ldi	r24, 0x31	; 49
     6b0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     6b4:	2d c0       	rjmp	.+90     	; 0x710 <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6b6:	f8 01       	movw	r30, r16
     6b8:	40 85       	ldd	r20, Z+8	; 0x08
     6ba:	51 85       	ldd	r21, Z+9	; 0x09
     6bc:	42 95       	swap	r20
     6be:	44 0f       	add	r20, r20
     6c0:	40 7e       	andi	r20, 0xE0	; 224
     6c2:	62 e4       	ldi	r22, 0x42	; 66
     6c4:	80 ee       	ldi	r24, 0xE0	; 224
     6c6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     6ca:	f8 01       	movw	r30, r16
     6cc:	60 85       	ldd	r22, Z+8	; 0x08
     6ce:	71 85       	ldd	r23, Z+9	; 0x09
     6d0:	76 95       	lsr	r23
     6d2:	67 95       	ror	r22
     6d4:	76 95       	lsr	r23
     6d6:	67 95       	ror	r22
     6d8:	76 95       	lsr	r23
     6da:	67 95       	ror	r22
     6dc:	81 e4       	ldi	r24, 0x41	; 65
     6de:	0e 94 60 04 	call	0x8c0	; 0x8c0 <CAN_controller_write>
				
				break;
     6e2:	16 c0       	rjmp	.+44     	; 0x710 <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6e4:	f8 01       	movw	r30, r16
     6e6:	40 85       	ldd	r20, Z+8	; 0x08
     6e8:	51 85       	ldd	r21, Z+9	; 0x09
     6ea:	42 95       	swap	r20
     6ec:	44 0f       	add	r20, r20
     6ee:	40 7e       	andi	r20, 0xE0	; 224
     6f0:	62 e5       	ldi	r22, 0x52	; 82
     6f2:	80 ee       	ldi	r24, 0xE0	; 224
     6f4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     6f8:	f8 01       	movw	r30, r16
     6fa:	60 85       	ldd	r22, Z+8	; 0x08
     6fc:	71 85       	ldd	r23, Z+9	; 0x09
     6fe:	76 95       	lsr	r23
     700:	67 95       	ror	r22
     702:	76 95       	lsr	r23
     704:	67 95       	ror	r22
     706:	76 95       	lsr	r23
     708:	67 95       	ror	r22
     70a:	81 e5       	ldi	r24, 0x51	; 81
     70c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     710:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     714:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
     718:	81 30       	cpi	r24, 0x01	; 1
     71a:	91 05       	cpc	r25, r1
     71c:	61 f0       	breq	.+24     	; 0x736 <CAN_transmit_message+0xe6>
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	91 05       	cpc	r25, r1
     722:	81 f0       	breq	.+32     	; 0x744 <CAN_transmit_message+0xf4>
     724:	89 2b       	or	r24, r25
     726:	a1 f4       	brne	.+40     	; 0x750 <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     728:	f8 01       	movw	r30, r16
     72a:	42 85       	ldd	r20, Z+10	; 0x0a
     72c:	65 e3       	ldi	r22, 0x35	; 53
     72e:	8f e0       	ldi	r24, 0x0F	; 15
     730:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
				break;
     734:	0d c0       	rjmp	.+26     	; 0x750 <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     736:	f8 01       	movw	r30, r16
     738:	42 85       	ldd	r20, Z+10	; 0x0a
     73a:	65 e4       	ldi	r22, 0x45	; 69
     73c:	8f e0       	ldi	r24, 0x0F	; 15
     73e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
				break;
     742:	06 c0       	rjmp	.+12     	; 0x750 <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     744:	f8 01       	movw	r30, r16
     746:	42 85       	ldd	r20, Z+10	; 0x0a
     748:	65 e5       	ldi	r22, 0x55	; 85
     74a:	8f e0       	ldi	r24, 0x0F	; 15
     74c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     750:	f8 01       	movw	r30, r16
     752:	82 85       	ldd	r24, Z+10	; 0x0a
     754:	88 23       	and	r24, r24
     756:	61 f1       	breq	.+88     	; 0x7b0 <CAN_transmit_message+0x160>
     758:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     75a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     75e:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	91 05       	cpc	r25, r1
     766:	71 f0       	breq	.+28     	; 0x784 <CAN_transmit_message+0x134>
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	91 05       	cpc	r25, r1
     76c:	a1 f0       	breq	.+40     	; 0x796 <CAN_transmit_message+0x146>
     76e:	89 2b       	or	r24, r25
     770:	d1 f4       	brne	.+52     	; 0x7a6 <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     772:	f8 01       	movw	r30, r16
     774:	ec 0f       	add	r30, r28
     776:	f1 1d       	adc	r31, r1
     778:	60 81       	ld	r22, Z
     77a:	86 e3       	ldi	r24, 0x36	; 54
     77c:	8c 0f       	add	r24, r28
     77e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <CAN_controller_write>
				break;
     782:	11 c0       	rjmp	.+34     	; 0x7a6 <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     784:	f8 01       	movw	r30, r16
     786:	ec 0f       	add	r30, r28
     788:	f1 1d       	adc	r31, r1
     78a:	60 81       	ld	r22, Z
     78c:	86 e4       	ldi	r24, 0x46	; 70
     78e:	8c 0f       	add	r24, r28
     790:	0e 94 60 04 	call	0x8c0	; 0x8c0 <CAN_controller_write>
				break;
     794:	08 c0       	rjmp	.+16     	; 0x7a6 <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     796:	f8 01       	movw	r30, r16
     798:	ec 0f       	add	r30, r28
     79a:	f1 1d       	adc	r31, r1
     79c:	60 81       	ld	r22, Z
     79e:	86 e5       	ldi	r24, 0x56	; 86
     7a0:	8c 0f       	add	r24, r28
     7a2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     7a6:	cf 5f       	subi	r28, 0xFF	; 255
     7a8:	f8 01       	movw	r30, r16
     7aa:	82 85       	ldd	r24, Z+10	; 0x0a
     7ac:	8c 13       	cpse	r24, r28
     7ae:	d5 cf       	rjmp	.-86     	; 0x75a <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7b0:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     7b4:	0e 94 a2 04 	call	0x944	; 0x944 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <CAN_receiveMessage>:

void CAN_receiveMessage(volatile CAN_message_t * received_message) {
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     7cc:	82 e6       	ldi	r24, 0x62	; 98
     7ce:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_controller_read>
     7d2:	c8 2f       	mov	r28, r24
     7d4:	81 e6       	ldi	r24, 0x61	; 97
     7d6:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_controller_read>
     7da:	c2 95       	swap	r28
     7dc:	c6 95       	lsr	r28
     7de:	c7 70       	andi	r28, 0x07	; 7
     7e0:	28 e0       	ldi	r18, 0x08	; 8
     7e2:	82 9f       	mul	r24, r18
     7e4:	c0 01       	movw	r24, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	8c 0f       	add	r24, r28
     7ea:	91 1d       	adc	r25, r1
     7ec:	f7 01       	movw	r30, r14
     7ee:	91 87       	std	Z+9, r25	; 0x09
     7f0:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     7f2:	85 e6       	ldi	r24, 0x65	; 101
     7f4:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_controller_read>
     7f8:	8f 70       	andi	r24, 0x0F	; 15
     7fa:	f7 01       	movw	r30, r14
     7fc:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     7fe:	82 85       	ldd	r24, Z+10	; 0x0a
     800:	88 23       	and	r24, r24
     802:	81 f0       	breq	.+32     	; 0x824 <CAN_receiveMessage+0x64>
     804:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     806:	0c 2f       	mov	r16, r28
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	86 e6       	ldi	r24, 0x66	; 102
     80c:	8c 0f       	add	r24, r28
     80e:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_controller_read>
     812:	f7 01       	movw	r30, r14
     814:	e0 0f       	add	r30, r16
     816:	f1 1f       	adc	r31, r17
     818:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     81a:	cf 5f       	subi	r28, 0xFF	; 255
     81c:	f7 01       	movw	r30, r14
     81e:	82 85       	ldd	r24, Z+10	; 0x0a
     820:	8c 13       	cpse	r24, r28
     822:	f1 cf       	rjmp	.-30     	; 0x806 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	08 95       	ret

00000830 <CAN_sendInputData>:

void CAN_sendInputData() {
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	2b 97       	sbiw	r28, 0x0b	; 11
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	9a 87       	std	Y+10, r25	; 0x0a
     84a:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     84c:	86 e0       	ldi	r24, 0x06	; 6
     84e:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     850:	e6 e4       	ldi	r30, 0x46	; 70
     852:	f3 e0       	ldi	r31, 0x03	; 3
     854:	80 81       	ld	r24, Z
     856:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     858:	81 81       	ldd	r24, Z+1	; 0x01
     85a:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     85c:	e4 e4       	ldi	r30, 0x44	; 68
     85e:	f3 e0       	ldi	r31, 0x03	; 3
     860:	80 81       	ld	r24, Z
     862:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     864:	81 81       	ldd	r24, Z+1	; 0x01
     866:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     868:	e4 e2       	ldi	r30, 0x24	; 36
     86a:	f3 e0       	ldi	r31, 0x03	; 3
     86c:	80 81       	ld	r24, Z
     86e:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     870:	81 81       	ldd	r24, Z+1	; 0x01
     872:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	0e 94 28 03 	call	0x650	; 0x650 <CAN_transmit_message>
}
     87c:	2b 96       	adiw	r28, 0x0b	; 11
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <CAN_init>:

void CAN_init() {
	CAN_controller_init();
     88e:	0e 94 03 05 	call	0xa06	; 0xa06 <CAN_controller_init>
     892:	08 95       	ret

00000894 <CAN_controller_read>:
#include <stdio.h>
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"

uint8_t CAN_controller_read(uint8_t addr) {
     894:	cf 93       	push	r28
     896:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
	SPI_masterWrite(addr);
     8a6:	8c 2f       	mov	r24, r28
     8a8:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8ac:	0e 94 0a 0c 	call	0x1814	; 0x1814 <SPI_masterRead>
     8b0:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	84 e0       	ldi	r24, 0x04	; 4
     8b6:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
	
	return data;
}
     8ba:	8c 2f       	mov	r24, r28
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	d8 2f       	mov	r29, r24
     8c6:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	84 e0       	ldi	r24, 0x04	; 4
     8cc:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
	SPI_masterWrite(addr);
     8d6:	8d 2f       	mov	r24, r29
     8d8:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
	SPI_masterWrite(data);
     8dc:	8c 2f       	mov	r24, r28
     8de:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
	
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	d8 2f       	mov	r29, r24
     8f8:	16 2f       	mov	r17, r22
     8fa:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     904:	85 e0       	ldi	r24, 0x05	; 5
     906:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
		SPI_masterWrite(addr);
     90a:	81 2f       	mov	r24, r17
     90c:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
		SPI_masterWrite(mask);
     910:	8d 2f       	mov	r24, r29
     912:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
		SPI_masterWrite(data);
     916:	8c 2f       	mov	r24, r28
     918:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>

}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	08 95       	ret

0000092c <CAN_controller_reset>:
void CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
     934:	80 ec       	ldi	r24, 0xC0	; 192
     936:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	84 e0       	ldi	r24, 0x04	; 4
     93e:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
     942:	08 95       	ret

00000944 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	//printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     944:	cf 93       	push	r28
     946:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	84 e0       	ldi	r24, 0x04	; 4
     94c:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
	switch (buffer) {
     950:	c1 30       	cpi	r28, 0x01	; 1
     952:	41 f0       	breq	.+16     	; 0x964 <CAN_controller_RTS+0x20>
     954:	18 f0       	brcs	.+6      	; 0x95c <CAN_controller_RTS+0x18>
     956:	c2 30       	cpi	r28, 0x02	; 2
     958:	49 f0       	breq	.+18     	; 0x96c <CAN_controller_RTS+0x28>
     95a:	0b c0       	rjmp	.+22     	; 0x972 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     95c:	81 e8       	ldi	r24, 0x81	; 129
     95e:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
			break;
     962:	07 c0       	rjmp	.+14     	; 0x972 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     964:	82 e8       	ldi	r24, 0x82	; 130
     966:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
			break;
     96a:	03 c0       	rjmp	.+6      	; 0x972 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     96c:	84 e8       	ldi	r24, 0x84	; 132
     96e:	0e 94 06 0c 	call	0x180c	; 0x180c <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_setChipSelect>
}
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     97e:	cf 93       	push	r28
     980:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     982:	0e 94 96 04 	call	0x92c	; 0x92c <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     986:	8e e0       	ldi	r24, 0x0E	; 14
     988:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     98c:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     98e:	80 38       	cpi	r24, 0x80	; 128
     990:	69 f0       	breq	.+26     	; 0x9ac <CAN_controller_setMode+0x2e>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     992:	1f 92       	push	r1
     994:	8f 93       	push	r24
     996:	83 ee       	ldi	r24, 0xE3	; 227
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	0e 94 26 10 	call	0x204c	; 0x204c <printf>
		return;
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	2b c0       	rjmp	.+86     	; 0xa02 <CAN_controller_setMode+0x84>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9ac:	4c 2f       	mov	r20, r28
     9ae:	4c 60       	ori	r20, 0x0C	; 12
     9b0:	6f e0       	ldi	r22, 0x0F	; 15
     9b2:	8e ee       	ldi	r24, 0xEE	; 238
     9b4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9b8:	41 e0       	ldi	r20, 0x01	; 1
     9ba:	6b e2       	ldi	r22, 0x2B	; 43
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     9c2:	40 e6       	ldi	r20, 0x60	; 96
     9c4:	60 e6       	ldi	r22, 0x60	; 96
     9c6:	80 e6       	ldi	r24, 0x60	; 96
     9c8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <CAN_controller_bitModify>
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	80 40       	sbci	r24, 0x00	; 0
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <CAN_controller_setMode+0x54>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <CAN_controller_setMode+0x5e>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <CAN_controller_setMode+0x60>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     9de:	8e e0       	ldi	r24, 0x0E	; 14
     9e0:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     9e4:	80 7e       	andi	r24, 0xE0	; 224
	if (mode_bits != mode) {
     9e6:	c8 17       	cp	r28, r24
     9e8:	61 f0       	breq	.+24     	; 0xa02 <CAN_controller_setMode+0x84>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     9ea:	1f 92       	push	r1
     9ec:	8f 93       	push	r24
     9ee:	8e ef       	ldi	r24, 0xFE	; 254
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	9f 93       	push	r25
     9f4:	8f 93       	push	r24
     9f6:	0e 94 26 10 	call	0x204c	; 0x204c <printf>
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0

	}
	//printf("Mode set: %i\n\r", status & MODE_MASK);
}
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     a06:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_masterInit>

	CAN_controller_setMode(MODE_NORMAL);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 bf 04 	call	0x97e	; 0x97e <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a10:	8b b7       	in	r24, 0x3b	; 59
     a12:	80 64       	ori	r24, 0x40	; 64
     a14:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a16:	85 b7       	in	r24, 0x35	; 53
     a18:	82 60       	ori	r24, 0x02	; 2
     a1a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a1c:	85 b7       	in	r24, 0x35	; 53
     a1e:	8e 7f       	andi	r24, 0xFE	; 254
     a20:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a22:	81 b3       	in	r24, 0x11	; 17
     a24:	84 70       	andi	r24, 0x04	; 4
     a26:	81 bb       	out	0x11, r24	; 17
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	80 40       	sbci	r24, 0x00	; 0
     a32:	90 40       	sbci	r25, 0x00	; 0
     a34:	e1 f7       	brne	.-8      	; 0xa2e <CAN_controller_init+0x28>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <CAN_controller_init+0x32>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <CAN_controller_init+0x34>
	
	_delay_ms(200);
	//printf("after write to canctrl\n\r");
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a3a:	8e e0       	ldi	r24, 0x0E	; 14
     a3c:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_controller_read>
     a40:	08 95       	ret

00000a42 <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     a42:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <gameActive>
     a46:	e8 e2       	ldi	r30, 0x28	; 40
     a48:	f3 e0       	ldi	r31, 0x03	; 3
     a4a:	a1 e3       	ldi	r26, 0x31	; 49
     a4c:	b3 e0       	ldi	r27, 0x03	; 3
     a4e:	8d e2       	ldi	r24, 0x2D	; 45
     a50:	93 e0       	ldi	r25, 0x03	; 3
     a52:	11 92       	st	Z+, r1
     a54:	1d 92       	st	X+, r1
     a56:	e8 17       	cp	r30, r24
     a58:	f9 07       	cpc	r31, r25
     a5a:	d9 f7       	brne	.-10     	; 0xa52 <game_init+0x10>
     a5c:	08 95       	ret

00000a5e <game_countdown>:
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	1f 92       	push	r1
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	4a e0       	ldi	r20, 0x0A	; 10
     a6e:	be 01       	movw	r22, r28
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
     a7c:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
     a80:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
     a84:	0d e2       	ldi	r16, 0x2D	; 45
     a86:	13 e0       	ldi	r17, 0x03	; 3
     a88:	f8 01       	movw	r30, r16
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	02 96       	adiw	r24, 0x02	; 2
     a90:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     aa2:	86 e0       	ldi	r24, 0x06	; 6
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 a0 08 	call	0x1140	; 0x1140 <music_playNote>
     aaa:	ff ef       	ldi	r31, 0xFF	; 255
     aac:	2f e7       	ldi	r18, 0x7F	; 127
     aae:	87 e0       	ldi	r24, 0x07	; 7
     ab0:	f1 50       	subi	r31, 0x01	; 1
     ab2:	20 40       	sbci	r18, 0x00	; 0
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <game_countdown+0x52>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <game_countdown+0x5c>
     aba:	00 00       	nop
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 a0 08 	call	0x1140	; 0x1140 <music_playNote>
     ac4:	9f ef       	ldi	r25, 0xFF	; 255
     ac6:	ef e7       	ldi	r30, 0x7F	; 127
     ac8:	f7 e0       	ldi	r31, 0x07	; 7
     aca:	91 50       	subi	r25, 0x01	; 1
     acc:	e0 40       	sbci	r30, 0x00	; 0
     ace:	f0 40       	sbci	r31, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <game_countdown+0x6c>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <game_countdown+0x76>
     ad4:	00 00       	nop
     ad6:	4a e0       	ldi	r20, 0x0A	; 10
     ad8:	be 01       	movw	r22, r28
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
     ae6:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
     aea:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
     aee:	f8 01       	movw	r30, r16
     af0:	80 81       	ld	r24, Z
     af2:	91 81       	ldd	r25, Z+1	; 0x01
     af4:	02 96       	adiw	r24, 0x02	; 2
     af6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     b08:	86 e0       	ldi	r24, 0x06	; 6
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 a0 08 	call	0x1140	; 0x1140 <music_playNote>
     b10:	ff ef       	ldi	r31, 0xFF	; 255
     b12:	2f e7       	ldi	r18, 0x7F	; 127
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	f1 50       	subi	r31, 0x01	; 1
     b18:	20 40       	sbci	r18, 0x00	; 0
     b1a:	80 40       	sbci	r24, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <game_countdown+0xb8>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <game_countdown+0xc2>
     b20:	00 00       	nop
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 a0 08 	call	0x1140	; 0x1140 <music_playNote>
     b2a:	9f ef       	ldi	r25, 0xFF	; 255
     b2c:	ef e7       	ldi	r30, 0x7F	; 127
     b2e:	f7 e0       	ldi	r31, 0x07	; 7
     b30:	91 50       	subi	r25, 0x01	; 1
     b32:	e0 40       	sbci	r30, 0x00	; 0
     b34:	f0 40       	sbci	r31, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <game_countdown+0xd2>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <game_countdown+0xdc>
     b3a:	00 00       	nop
     b3c:	4a e0       	ldi	r20, 0x0A	; 10
     b3e:	be 01       	movw	r22, r28
     b40:	6f 5f       	subi	r22, 0xFF	; 255
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
     b4c:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
     b50:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
     b54:	f8 01       	movw	r30, r16
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	02 96       	adiw	r24, 0x02	; 2
     b5c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 a0 08 	call	0x1140	; 0x1140 <music_playNote>
     b76:	ff ef       	ldi	r31, 0xFF	; 255
     b78:	2f e7       	ldi	r18, 0x7F	; 127
     b7a:	87 e0       	ldi	r24, 0x07	; 7
     b7c:	f1 50       	subi	r31, 0x01	; 1
     b7e:	20 40       	sbci	r18, 0x00	; 0
     b80:	80 40       	sbci	r24, 0x00	; 0
     b82:	e1 f7       	brne	.-8      	; 0xb7c <game_countdown+0x11e>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <game_countdown+0x128>
     b86:	00 00       	nop
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 a0 08 	call	0x1140	; 0x1140 <music_playNote>
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	ef e7       	ldi	r30, 0x7F	; 127
     b94:	f7 e0       	ldi	r31, 0x07	; 7
     b96:	91 50       	subi	r25, 0x01	; 1
     b98:	e0 40       	sbci	r30, 0x00	; 0
     b9a:	f0 40       	sbci	r31, 0x00	; 0
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <game_countdown+0x138>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <game_countdown+0x142>
     ba0:	00 00       	nop
     ba2:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
     ba6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
     baa:	f8 01       	movw	r30, r16
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	02 96       	adiw	r24, 0x02	; 2
     bb2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
     bbc:	8e e1       	ldi	r24, 0x1E	; 30
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     bc4:	87 e1       	ldi	r24, 0x17	; 23
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	0e 94 a0 08 	call	0x1140	; 0x1140 <music_playNote>
     bcc:	ff ef       	ldi	r31, 0xFF	; 255
     bce:	2f e7       	ldi	r18, 0x7F	; 127
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	f1 50       	subi	r31, 0x01	; 1
     bd4:	20 40       	sbci	r18, 0x00	; 0
     bd6:	80 40       	sbci	r24, 0x00	; 0
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <game_countdown+0x174>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <game_countdown+0x17e>
     bdc:	00 00       	nop
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 a0 08 	call	0x1140	; 0x1140 <music_playNote>
     be6:	9f ef       	ldi	r25, 0xFF	; 255
     be8:	ef e7       	ldi	r30, 0x7F	; 127
     bea:	f7 e0       	ldi	r31, 0x07	; 7
     bec:	91 50       	subi	r25, 0x01	; 1
     bee:	e0 40       	sbci	r30, 0x00	; 0
     bf0:	f0 40       	sbci	r31, 0x00	; 0
     bf2:	e1 f7       	brne	.-8      	; 0xbec <game_countdown+0x18e>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <game_countdown+0x198>
     bf6:	00 00       	nop
     bf8:	0f 90       	pop	r0
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <game_initialCANMessage>:
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	2b 97       	sbiw	r28, 0x0b	; 11
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	9a 87       	std	Y+10, r25	; 0x0a
     c1e:	89 87       	std	Y+9, r24	; 0x09
     c20:	1b 86       	std	Y+11, r1	; 0x0b
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	0e 94 28 03 	call	0x650	; 0x650 <CAN_transmit_message>
     c2a:	2b 96       	adiw	r28, 0x0b	; 11
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <game_newgame>:
     c3c:	f8 94       	cli
     c3e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <game_countdown>
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <gameActive>
     c48:	e6 e3       	ldi	r30, 0x36	; 54
     c4a:	f3 e0       	ldi	r31, 0x03	; 3
     c4c:	8a e0       	ldi	r24, 0x0A	; 10
     c4e:	80 83       	st	Z, r24
     c50:	12 82       	std	Z+2, r1	; 0x02
     c52:	83 e6       	ldi	r24, 0x63	; 99
     c54:	81 83       	std	Z+1, r24	; 0x01
     c56:	0e 94 02 06 	call	0xc04	; 0xc04 <game_initialCANMessage>
     c5a:	78 94       	sei
     c5c:	08 95       	ret

00000c5e <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     c5e:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <flag>
     c62:	88 23       	and	r24, r24
     c64:	d9 f0       	breq	.+54     	; 0xc9c <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     c66:	f8 94       	cli
		printf("Message received");
     c68:	81 e2       	ldi	r24, 0x21	; 33
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	9f 93       	push	r25
     c6e:	8f 93       	push	r24
     c70:	0e 94 26 10 	call	0x204c	; 0x204c <printf>
		flag=0;
     c74:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <flag>
		CAN_receiveMessage(&received_message);
     c78:	89 e3       	ldi	r24, 0x39	; 57
     c7a:	93 e0       	ldi	r25, 0x03	; 3
     c7c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     c80:	0e 94 22 03 	call	0x644	; 0x644 <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     c84:	a9 e3       	ldi	r26, 0x39	; 57
     c86:	b3 e0       	ldi	r27, 0x03	; 3
     c88:	8c 91       	ld	r24, X
     c8a:	e6 e3       	ldi	r30, 0x36	; 54
     c8c:	f3 e0       	ldi	r31, 0x03	; 3
     c8e:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	8c 91       	ld	r24, X
     c94:	82 83       	std	Z+2, r24	; 0x02
		sei();
     c96:	78 94       	sei
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	08 95       	ret

00000c9e <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <game_updateOled+0xa>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <game_updateOled+0xc>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     cb0:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
	oled_home();
     cb4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     cb8:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <currentMenu>
     cbc:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <currentMenu+0x1>
     cc0:	02 96       	adiw	r24, 0x02	; 2
     cc2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
	switch(gameID) {
     ccc:	11 30       	cpi	r17, 0x01	; 1
     cce:	19 f0       	breq	.+6      	; 0xcd6 <game_updateOled+0x38>
     cd0:	12 30       	cpi	r17, 0x02	; 2
     cd2:	49 f1       	breq	.+82     	; 0xd26 <game_updateOled+0x88>
     cd4:	39 c0       	rjmp	.+114    	; 0xd48 <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     cd6:	82 e3       	ldi	r24, 0x32	; 50
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
			itoa(gameData.score,score_string,10);
     cde:	06 e3       	ldi	r16, 0x36	; 54
     ce0:	13 e0       	ldi	r17, 0x03	; 3
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 81       	ld	r24, Z
     ce6:	4a e0       	ldi	r20, 0x0A	; 10
     ce8:	be 01       	movw	r22, r28
     cea:	6f 5f       	subi	r22, 0xFF	; 255
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
			oled_print(score_string);
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
			oled_gotoLine(5);
     cfc:	85 e0       	ldi	r24, 0x05	; 5
     cfe:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
			oled_print("Time: ");
     d02:	8a e3       	ldi	r24, 0x3A	; 58
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     d0a:	f8 01       	movw	r30, r16
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	4a e0       	ldi	r20, 0x0A	; 10
     d10:	be 01       	movw	r22, r28
     d12:	6d 5f       	subi	r22, 0xFD	; 253
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d1c:	ce 01       	movw	r24, r28
     d1e:	03 96       	adiw	r24, 0x03	; 3
     d20:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
			break;
     d24:	11 c0       	rjmp	.+34     	; 0xd48 <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d26:	81 e4       	ldi	r24, 0x41	; 65
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     d2e:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <gameData+0x2>
     d32:	4a e0       	ldi	r20, 0x0A	; 10
     d34:	be 01       	movw	r22, r28
     d36:	6d 5f       	subi	r22, 0xFD	; 253
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d40:	ce 01       	movw	r24, r28
     d42:	03 96       	adiw	r24, 0x03	; 3
     d44:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
			break;

	}
	
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <game_sendStop>:

void game_sendStop() {
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	2b 97       	sbiw	r28, 0x0b	; 11
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9a 87       	std	Y+10, r25	; 0x0a
     d74:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     d76:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     d78:	ce 01       	movw	r24, r28
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	0e 94 28 03 	call	0x650	; 0x650 <CAN_transmit_message>
}
     d80:	2b 96       	adiw	r28, 0x0b	; 11
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <game_finished>:
void game_finished(uint8_t gameID) {
     d92:	cf 93       	push	r28
     d94:	c8 2f       	mov	r28, r24
	cli();
     d96:	f8 94       	cli
	game_sendStop();
     d98:	0e 94 ad 06 	call	0xd5a	; 0xd5a <game_sendStop>
	oled_reset();
     d9c:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
	oled_home();
     da0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
	oled_gotoLine(3);
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
	oled_print("Game over");
     daa:	8c e4       	ldi	r24, 0x4C	; 76
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
	oled_gotoLine(4);
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
	oled_print("Maybe HS?");
     db8:	86 e5       	ldi	r24, 0x56	; 86
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
	music_gameOver();
     dc0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <music_gameOver>
	gameActive=0;
     dc4:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <gameActive>
	
	menu_init();
     dc8:	0e 94 4f 0a 	call	0x149e	; 0x149e <menu_init>
	switch (gameID) {
     dcc:	c1 30       	cpi	r28, 0x01	; 1
     dce:	51 f0       	breq	.+20     	; 0xde4 <game_finished+0x52>
     dd0:	c2 30       	cpi	r28, 0x02	; 2
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <game_finished+0x44>
     dd4:	50 c0       	rjmp	.+160    	; 0xe76 <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     dd6:	30 91 38 03 	lds	r19, 0x0338	; 0x800338 <gameData+0x2>
     dda:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <highScores2>
     dde:	83 17       	cp	r24, r19
     de0:	48 f5       	brcc	.+82     	; 0xe34 <game_finished+0xa2>
     de2:	33 c0       	rjmp	.+102    	; 0xe4a <game_finished+0xb8>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     de4:	30 91 36 03 	lds	r19, 0x0336	; 0x800336 <gameData>
     de8:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <highScores>
     dec:	83 17       	cp	r24, r19
     dee:	58 f0       	brcs	.+22     	; 0xe06 <game_finished+0x74>
     df0:	e9 e2       	ldi	r30, 0x29	; 41
     df2:	f3 e0       	ldi	r31, 0x03	; 3
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     df8:	21 91       	ld	r18, Z+
     dfa:	23 17       	cp	r18, r19
     dfc:	b0 f4       	brcc	.+44     	; 0xe2a <game_finished+0x98>
					for (int a = 4; a>i; a--) {
     dfe:	84 30       	cpi	r24, 0x04	; 4
     e00:	91 05       	cpc	r25, r1
     e02:	1c f0       	brlt	.+6      	; 0xe0a <game_finished+0x78>
     e04:	0d c0       	rjmp	.+26     	; 0xe20 <game_finished+0x8e>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	ec e2       	ldi	r30, 0x2C	; 44
     e0c:	f3 e0       	ldi	r31, 0x03	; 3
     e0e:	44 e0       	ldi	r20, 0x04	; 4
     e10:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e12:	41 50       	subi	r20, 0x01	; 1
     e14:	51 09       	sbc	r21, r1
     e16:	22 91       	ld	r18, -Z
     e18:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e1a:	84 17       	cp	r24, r20
     e1c:	95 07       	cpc	r25, r21
     e1e:	cc f3       	brlt	.-14     	; 0xe12 <game_finished+0x80>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e20:	fc 01       	movw	r30, r24
     e22:	e8 5d       	subi	r30, 0xD8	; 216
     e24:	fc 4f       	sbci	r31, 0xFC	; 252
     e26:	30 83       	st	Z, r19
					break;
     e28:	26 c0       	rjmp	.+76     	; 0xe76 <game_finished+0xe4>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	85 30       	cpi	r24, 0x05	; 5
     e2e:	91 05       	cpc	r25, r1
     e30:	19 f7       	brne	.-58     	; 0xdf8 <game_finished+0x66>
     e32:	21 c0       	rjmp	.+66     	; 0xe76 <game_finished+0xe4>
     e34:	e2 e3       	ldi	r30, 0x32	; 50
     e36:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     e3c:	21 91       	ld	r18, Z+
     e3e:	23 17       	cp	r18, r19
     e40:	b0 f4       	brcc	.+44     	; 0xe6e <game_finished+0xdc>
					for (int a = 4; a>i; a--) {
     e42:	84 30       	cpi	r24, 0x04	; 4
     e44:	91 05       	cpc	r25, r1
     e46:	1c f0       	brlt	.+6      	; 0xe4e <game_finished+0xbc>
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <game_finished+0xd2>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	e5 e3       	ldi	r30, 0x35	; 53
     e50:	f3 e0       	ldi	r31, 0x03	; 3
     e52:	44 e0       	ldi	r20, 0x04	; 4
     e54:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     e56:	41 50       	subi	r20, 0x01	; 1
     e58:	51 09       	sbc	r21, r1
     e5a:	22 91       	ld	r18, -Z
     e5c:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     e5e:	84 17       	cp	r24, r20
     e60:	95 07       	cpc	r25, r21
     e62:	cc f3       	brlt	.-14     	; 0xe56 <game_finished+0xc4>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     e64:	fc 01       	movw	r30, r24
     e66:	ef 5c       	subi	r30, 0xCF	; 207
     e68:	fc 4f       	sbci	r31, 0xFC	; 252
     e6a:	30 83       	st	Z, r19
					break;
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <game_finished+0xe4>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	85 30       	cpi	r24, 0x05	; 5
     e72:	91 05       	cpc	r25, r1
     e74:	19 f7       	brne	.-58     	; 0xe3c <game_finished+0xaa>
			break;
		
	}
	
	
	sei();
     e76:	78 94       	sei
}
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <game_play>:
void game_play(uint8_t gameID)
{
     e7c:	cf 93       	push	r28
     e7e:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     e80:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <gameActive>
     e84:	81 11       	cpse	r24, r1
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <game_play+0x10>
	{
		game_newgame();	
     e88:	0e 94 1e 06 	call	0xc3c	; 0xc3c <game_newgame>
	}
	if (buttons.right_button) {
     e8c:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <buttons+0x1>
     e90:	88 23       	and	r24, r24
     e92:	21 f0       	breq	.+8      	; 0xe9c <game_play+0x20>
		gameActive = 0;
     e94:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <gameActive>
		menu_init();
     e98:	0e 94 4f 0a 	call	0x149e	; 0x149e <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     e9c:	0e 94 18 04 	call	0x830	; 0x830 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     ea0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <game_recieveGameData>
	game_updateOled(gameID);
     ea4:	8c 2f       	mov	r24, r28
     ea6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <game_updateOled>
	switch (gameID) {
     eaa:	c1 30       	cpi	r28, 0x01	; 1
     eac:	19 f0       	breq	.+6      	; 0xeb4 <game_play+0x38>
     eae:	c2 30       	cpi	r28, 0x02	; 2
     eb0:	49 f0       	breq	.+18     	; 0xec4 <game_play+0x48>
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <game_play+0x56>
		case 1:
			if (gameData.playtime==10) {
     eb4:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <gameData+0x2>
     eb8:	8a 30       	cpi	r24, 0x0A	; 10
     eba:	59 f4       	brne	.+22     	; 0xed2 <game_play+0x56>
				game_finished(gameID);
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	0e 94 c9 06 	call	0xd92	; 0xd92 <game_finished>
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <game_play+0x56>
			}
			break;
		case 2:
			if (gameData.score <10) {
     ec4:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <gameData>
     ec8:	8a 30       	cpi	r24, 0x0A	; 10
     eca:	18 f4       	brcc	.+6      	; 0xed2 <game_play+0x56>
				game_finished(gameID);
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	0e 94 c9 06 	call	0xd92	; 0xd92 <game_finished>
			}
			break;
	}
	
	
}
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     ed6:	af 92       	push	r10
     ed8:	bf 92       	push	r11
     eda:	cf 92       	push	r12
     edc:	df 92       	push	r13
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	00 d0       	rcall	.+0      	; 0xeec <game_displayHighscores+0x16>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	08 2f       	mov	r16, r24
	oled_reset();
     ef2:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
	oled_home();
     ef6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     efa:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <currentMenu>
     efe:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <currentMenu+0x1>
     f02:	02 96       	adiw	r24, 0x02	; 2
     f04:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     f08:	0f 2e       	mov	r0, r31
     f0a:	f8 e2       	ldi	r31, 0x28	; 40
     f0c:	af 2e       	mov	r10, r31
     f0e:	f3 e0       	ldi	r31, 0x03	; 3
     f10:	bf 2e       	mov	r11, r31
     f12:	f0 2d       	mov	r31, r0
     f14:	0f 2e       	mov	r0, r31
     f16:	f1 e3       	ldi	r31, 0x31	; 49
     f18:	cf 2e       	mov	r12, r31
     f1a:	f3 e0       	ldi	r31, 0x03	; 3
     f1c:	df 2e       	mov	r13, r31
     f1e:	f0 2d       	mov	r31, r0
     f20:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f22:	e1 2c       	mov	r14, r1
     f24:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f26:	81 2f       	mov	r24, r17
     f28:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
		oled_print("Score ");
     f2c:	80 e6       	ldi	r24, 0x60	; 96
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	e8 1a       	sub	r14, r24
     f38:	f8 0a       	sbc	r15, r24
     f3a:	4a e0       	ldi	r20, 0x0A	; 10
     f3c:	be 01       	movw	r22, r28
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	c7 01       	movw	r24, r14
     f44:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
		oled_print(num);
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
		oled_print(": ");
     f50:	8e e3       	ldi	r24, 0x3E	; 62
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
		switch (gameID) {
     f58:	01 30       	cpi	r16, 0x01	; 1
     f5a:	19 f0       	breq	.+6      	; 0xf62 <game_displayHighscores+0x8c>
     f5c:	02 30       	cpi	r16, 0x02	; 2
     f5e:	59 f0       	breq	.+22     	; 0xf76 <game_displayHighscores+0xa0>
     f60:	13 c0       	rjmp	.+38     	; 0xf88 <game_displayHighscores+0xb2>
     f62:	f5 01       	movw	r30, r10
     f64:	80 81       	ld	r24, Z
     f66:	4a e0       	ldi	r20, 0x0A	; 10
     f68:	be 01       	movw	r22, r28
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
     f74:	09 c0       	rjmp	.+18     	; 0xf88 <game_displayHighscores+0xb2>
     f76:	f6 01       	movw	r30, r12
     f78:	80 81       	ld	r24, Z
     f7a:	4a e0       	ldi	r20, 0x0A	; 10
     f7c:	be 01       	movw	r22, r28
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
     f90:	1f 5f       	subi	r17, 0xFF	; 255
     f92:	ff ef       	ldi	r31, 0xFF	; 255
     f94:	af 1a       	sub	r10, r31
     f96:	bf 0a       	sbc	r11, r31
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	c8 1a       	sub	r12, r24
     f9c:	d8 0a       	sbc	r13, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
     f9e:	18 30       	cpi	r17, 0x08	; 8
     fa0:	11 f6       	brne	.-124    	; 0xf26 <game_displayHighscores+0x50>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	bf 90       	pop	r11
     fb8:	af 90       	pop	r10
     fba:	08 95       	ret

00000fbc <music_playRick>:
	 30, 10, 20, 20,
	 20,40, 80, 40
};


void music_playRick() {
     fbc:	8f 92       	push	r8
     fbe:	9f 92       	push	r9
     fc0:	af 92       	push	r10
     fc2:	bf 92       	push	r11
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
	cli();
     fd4:	f8 94       	cli
	oled_home();
     fd6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
	oled_reset();
     fda:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
     fde:	0d ee       	ldi	r16, 0xED	; 237
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	0f 2e       	mov	r0, r31
     fe4:	fe e9       	ldi	r31, 0x9E	; 158
     fe6:	ef 2e       	mov	r14, r31
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	ff 2e       	mov	r15, r31
     fec:	f0 2d       	mov	r31, r0
     fee:	c6 e0       	ldi	r28, 0x06	; 6
     ff0:	d1 e0       	ldi	r29, 0x01	; 1
     ff2:	0f 2e       	mov	r0, r31
     ff4:	f9 e2       	ldi	r31, 0x29	; 41
     ff6:	cf 2e       	mov	r12, r31
     ff8:	f2 e0       	ldi	r31, 0x02	; 2
     ffa:	df 2e       	mov	r13, r31
     ffc:	f0 2d       	mov	r31, r0
     ffe:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1000:	0f 2e       	mov	r0, r31
    1002:	f4 e1       	ldi	r31, 0x14	; 20
    1004:	af 2e       	mov	r10, r31
    1006:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1008:	b1 10       	cpse	r11, r1
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <music_playRick+0x54>
			oled_reset();
    100c:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
    1010:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1012:	e8 81       	ld	r30, Y
    1014:	f9 81       	ldd	r31, Y+1	; 0x01
    1016:	80 81       	ld	r24, Z
    1018:	88 23       	and	r24, r24
    101a:	41 f0       	breq	.+16     	; 0x102c <music_playRick+0x70>
			oled_gotoLine(line);
    101c:	8b 2d       	mov	r24, r11
    101e:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
			line++;
    1022:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    1024:	88 81       	ld	r24, Y
    1026:	99 81       	ldd	r25, Y+1	; 0x01
    1028:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    102c:	d4 01       	movw	r26, r8
    102e:	ed 91       	ld	r30, X+
    1030:	fc 91       	ld	r31, X
    1032:	22 96       	adiw	r28, 0x02	; 2
    1034:	01 90       	ld	r0, Z+
    1036:	00 20       	and	r0, r0
    1038:	e9 f7       	brne	.-6      	; 0x1034 <music_playRick+0x78>
    103a:	32 97       	sbiw	r30, 0x02	; 2
    103c:	80 81       	ld	r24, Z
    103e:	8e 32       	cpi	r24, 0x2E	; 46
    1040:	09 f4       	brne	.+2      	; 0x1044 <music_playRick+0x88>
			
			line = 0;
    1042:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    1044:	f8 01       	movw	r30, r16
    1046:	65 91       	lpm	r22, Z+
    1048:	74 91       	lpm	r23, Z
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 b5 08 	call	0x116a	; 0x116a <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1052:	f7 01       	movw	r30, r14
    1054:	84 91       	lpm	r24, Z
    1056:	a8 9e       	mul	r10, r24
    1058:	c0 01       	movw	r24, r0
    105a:	11 24       	eor	r1, r1
    105c:	09 2e       	mov	r0, r25
    105e:	00 0c       	add	r0, r0
    1060:	aa 0b       	sbc	r26, r26
    1062:	bb 0b       	sbc	r27, r27
		while (duration--) {
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	a1 05       	cpc	r26, r1
    1068:	b1 05       	cpc	r27, r1
    106a:	51 f0       	breq	.+20     	; 0x1080 <music_playRick+0xc4>
    106c:	ec ec       	ldi	r30, 0xCC	; 204
    106e:	f4 e0       	ldi	r31, 0x04	; 4
    1070:	31 97       	sbiw	r30, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <music_playRick+0xb4>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <music_playRick+0xba>
    1076:	00 00       	nop
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	a1 09       	sbc	r26, r1
    107c:	b1 09       	sbc	r27, r1
    107e:	b1 f7       	brne	.-20     	; 0x106c <music_playRick+0xb0>
    1080:	0c 5f       	subi	r16, 0xFC	; 252
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	ff ef       	ldi	r31, 0xFF	; 255
    1086:	ef 1a       	sub	r14, r31
    1088:	ff 0a       	sbc	r15, r31
void music_playRick() {
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    108a:	0c 15       	cp	r16, r12
    108c:	1d 05       	cpc	r17, r13
    108e:	09 f0       	breq	.+2      	; 0x1092 <music_playRick+0xd6>
    1090:	bb cf       	rjmp	.-138    	; 0x1008 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	cb 01       	movw	r24, r22
    1098:	0e 94 b5 08 	call	0x116a	; 0x116a <pwm_setFreq>
	menu_init();
    109c:	0e 94 4f 0a 	call	0x149e	; 0x149e <menu_init>

	sei();
    10a0:	78 94       	sei
	

}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	08 95       	ret

000010bc <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    10bc:	6b e0       	ldi	r22, 0x0B	; 11
    10be:	72 e0       	ldi	r23, 0x02	; 2
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 b5 08 	call	0x116a	; 0x116a <pwm_setFreq>
    10c8:	2f ef       	ldi	r18, 0xFF	; 255
    10ca:	8f e7       	ldi	r24, 0x7F	; 127
    10cc:	97 e0       	ldi	r25, 0x07	; 7
    10ce:	21 50       	subi	r18, 0x01	; 1
    10d0:	80 40       	sbci	r24, 0x00	; 0
    10d2:	90 40       	sbci	r25, 0x00	; 0
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <music_gameOver+0x12>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <music_gameOver+0x1c>
    10d8:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    10da:	68 e8       	ldi	r22, 0x88	; 136
    10dc:	71 e0       	ldi	r23, 0x01	; 1
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 b5 08 	call	0x116a	; 0x116a <pwm_setFreq>
    10e6:	2f ef       	ldi	r18, 0xFF	; 255
    10e8:	8f e7       	ldi	r24, 0x7F	; 127
    10ea:	97 e0       	ldi	r25, 0x07	; 7
    10ec:	21 50       	subi	r18, 0x01	; 1
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	90 40       	sbci	r25, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <music_gameOver+0x30>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <music_gameOver+0x3a>
    10f6:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    10f8:	67 e3       	ldi	r22, 0x37	; 55
    10fa:	71 e0       	ldi	r23, 0x01	; 1
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 b5 08 	call	0x116a	; 0x116a <pwm_setFreq>
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	8f e7       	ldi	r24, 0x7F	; 127
    1108:	97 e0       	ldi	r25, 0x07	; 7
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	80 40       	sbci	r24, 0x00	; 0
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <music_gameOver+0x4e>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <music_gameOver+0x58>
    1114:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    1116:	66 e0       	ldi	r22, 0x06	; 6
    1118:	71 e0       	ldi	r23, 0x01	; 1
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 b5 08 	call	0x116a	; 0x116a <pwm_setFreq>
    1122:	2f ef       	ldi	r18, 0xFF	; 255
    1124:	8f e7       	ldi	r24, 0x7F	; 127
    1126:	97 e0       	ldi	r25, 0x07	; 7
    1128:	21 50       	subi	r18, 0x01	; 1
    112a:	80 40       	sbci	r24, 0x00	; 0
    112c:	90 40       	sbci	r25, 0x00	; 0
    112e:	e1 f7       	brne	.-8      	; 0x1128 <music_gameOver+0x6c>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <music_gameOver+0x76>
    1132:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	cb 01       	movw	r24, r22
    113a:	0e 94 b5 08 	call	0x116a	; 0x116a <pwm_setFreq>
    113e:	08 95       	ret

00001140 <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    1140:	bc 01       	movw	r22, r24
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 b5 08 	call	0x116a	; 0x116a <pwm_setFreq>
    114a:	08 95       	ret

0000114c <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    114c:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    1152:	80 e8       	ldi	r24, 0x80	; 128
    1154:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    1156:	83 b7       	in	r24, 0x33	; 51
    1158:	88 60       	ori	r24, 0x08	; 8
    115a:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    115c:	83 b7       	in	r24, 0x33	; 51
    115e:	80 61       	ori	r24, 0x10	; 16
    1160:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    1162:	83 b7       	in	r24, 0x33	; 51
    1164:	88 7f       	andi	r24, 0xF8	; 248
    1166:	83 bf       	out	0x33, r24	; 51
    1168:	08 95       	ret

0000116a <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    116a:	9b 01       	movw	r18, r22
    116c:	ac 01       	movw	r20, r24
    if (freq == 0) {
    116e:	67 2b       	or	r22, r23
    1170:	68 2b       	or	r22, r24
    1172:	69 2b       	or	r22, r25
    1174:	21 f4       	brne	.+8      	; 0x117e <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    1176:	83 b7       	in	r24, 0x33	; 51
    1178:	88 7f       	andi	r24, 0xF8	; 248
    117a:	83 bf       	out	0x33, r24	; 51
        return;
    117c:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e8       	ldi	r23, 0x80	; 128
    1182:	85 e2       	ldi	r24, 0x25	; 37
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__udivmodsi4>
    118a:	da 01       	movw	r26, r20
    118c:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    118e:	21 30       	cpi	r18, 0x01	; 1
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	36 07       	cpc	r19, r22
    1194:	41 05       	cpc	r20, r1
    1196:	51 05       	cpc	r21, r1
    1198:	a8 f1       	brcs	.+106    	; 0x1204 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    119a:	68 94       	set
    119c:	12 f8       	bld	r1, 2
    119e:	b6 95       	lsr	r27
    11a0:	a7 95       	ror	r26
    11a2:	97 95       	ror	r25
    11a4:	87 95       	ror	r24
    11a6:	16 94       	lsr	r1
    11a8:	d1 f7       	brne	.-12     	; 0x119e <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	96 07       	cpc	r25, r22
    11b0:	a1 05       	cpc	r26, r1
    11b2:	b1 05       	cpc	r27, r1
    11b4:	48 f1       	brcs	.+82     	; 0x1208 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    11b6:	da 01       	movw	r26, r20
    11b8:	c9 01       	movw	r24, r18
    11ba:	68 94       	set
    11bc:	15 f8       	bld	r1, 5
    11be:	b6 95       	lsr	r27
    11c0:	a7 95       	ror	r26
    11c2:	97 95       	ror	r25
    11c4:	87 95       	ror	r24
    11c6:	16 94       	lsr	r1
    11c8:	d1 f7       	brne	.-12     	; 0x11be <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	96 07       	cpc	r25, r22
    11d0:	a1 05       	cpc	r26, r1
    11d2:	b1 05       	cpc	r27, r1
    11d4:	d8 f0       	brcs	.+54     	; 0x120c <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    11d6:	bb 27       	eor	r27, r27
    11d8:	a5 2f       	mov	r26, r21
    11da:	94 2f       	mov	r25, r20
    11dc:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	96 07       	cpc	r25, r22
    11e4:	a1 05       	cpc	r26, r1
    11e6:	b1 05       	cpc	r27, r1
    11e8:	98 f0       	brcs	.+38     	; 0x1210 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    11ea:	da 01       	movw	r26, r20
    11ec:	c9 01       	movw	r24, r18
    11ee:	07 2e       	mov	r0, r23
    11f0:	7a e0       	ldi	r23, 0x0A	; 10
    11f2:	b6 95       	lsr	r27
    11f4:	a7 95       	ror	r26
    11f6:	97 95       	ror	r25
    11f8:	87 95       	ror	r24
    11fa:	7a 95       	dec	r23
    11fc:	d1 f7       	brne	.-12     	; 0x11f2 <pwm_setFreq+0x88>
    11fe:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    1200:	35 e0       	ldi	r19, 0x05	; 5
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    1204:	31 e0       	ldi	r19, 0x01	; 1
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    1208:	32 e0       	ldi	r19, 0x02	; 2
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    120c:	33 e0       	ldi	r19, 0x03	; 3
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    1210:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1212:	23 b7       	in	r18, 0x33	; 51
    1214:	28 7f       	andi	r18, 0xF8	; 248
    1216:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    1218:	23 b7       	in	r18, 0x33	; 51
    121a:	23 2b       	or	r18, r19
    121c:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    121e:	81 50       	subi	r24, 0x01	; 1
    1220:	81 bf       	out	0x31, r24	; 49
    1222:	08 95       	ret

00001224 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    1224:	85 b7       	in	r24, 0x35	; 53
    1226:	8f 7e       	andi	r24, 0xEF	; 239
    1228:	85 bf       	out	0x35, r24	; 53
    122a:	84 b7       	in	r24, 0x34	; 52
    122c:	8f 7d       	andi	r24, 0xDF	; 223
    122e:	84 bf       	out	0x34, r24	; 52
    1230:	86 b7       	in	r24, 0x36	; 54
    1232:	8f 77       	andi	r24, 0x7F	; 127
    1234:	86 bf       	out	0x36, r24	; 54
    1236:	08 95       	ret

00001238 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    1238:	88 b1       	in	r24, 0x08	; 8
    123a:	88 68       	ori	r24, 0x88	; 136
    123c:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    123e:	85 b7       	in	r24, 0x35	; 53
    1240:	80 62       	ori	r24, 0x20	; 32
    1242:	85 bf       	out	0x35, r24	; 53
    1244:	88 95       	sleep
    1246:	85 b7       	in	r24, 0x35	; 53
    1248:	8f 7d       	andi	r24, 0xDF	; 223
    124a:	85 bf       	out	0x35, r24	; 53
    124c:	08 95       	ret

0000124e <joystick_init>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystick_init() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1254:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    125e:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <joystickOffsetY>
    1262:	08 95       	ret

00001264 <joystick_readPosition>:
}
void joystick_readPosition() {
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1276:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    127e:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    1280:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <joystickOffsetX>
    1284:	c6 17       	cp	r28, r22
    1286:	80 f4       	brcc	.+32     	; 0x12a8 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	2c 2f       	mov	r18, r28
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	26 1b       	sub	r18, r22
    1290:	37 0b       	sbc	r19, r23
    1292:	44 e6       	ldi	r20, 0x64	; 100
    1294:	42 9f       	mul	r20, r18
    1296:	c0 01       	movw	r24, r0
    1298:	43 9f       	mul	r20, r19
    129a:	90 0d       	add	r25, r0
    129c:	11 24       	eor	r1, r1
    129e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__divmodhi4>
    12a2:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <joystick_pos>
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    12a8:	46 2f       	mov	r20, r22
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	2c 2f       	mov	r18, r28
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	24 1b       	sub	r18, r20
    12b2:	35 0b       	sbc	r19, r21
    12b4:	64 e6       	ldi	r22, 0x64	; 100
    12b6:	62 9f       	mul	r22, r18
    12b8:	c0 01       	movw	r24, r0
    12ba:	63 9f       	mul	r22, r19
    12bc:	90 0d       	add	r25, r0
    12be:	11 24       	eor	r1, r1
    12c0:	6f ef       	ldi	r22, 0xFF	; 255
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	64 1b       	sub	r22, r20
    12c6:	75 0b       	sbc	r23, r21
    12c8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__divmodhi4>
    12cc:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    12d0:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <joystickOffsetY>
    12d4:	e2 17       	cp	r30, r18
    12d6:	88 f4       	brcc	.+34     	; 0x12fa <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    12d8:	62 2f       	mov	r22, r18
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	4e 2f       	mov	r20, r30
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	46 1b       	sub	r20, r22
    12e2:	57 0b       	sbc	r21, r23
    12e4:	24 e6       	ldi	r18, 0x64	; 100
    12e6:	24 9f       	mul	r18, r20
    12e8:	c0 01       	movw	r24, r0
    12ea:	25 9f       	mul	r18, r21
    12ec:	90 0d       	add	r25, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__divmodhi4>
    12f4:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <joystick_pos+0x1>
    12f8:	13 c0       	rjmp	.+38     	; 0x1320 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4e 2f       	mov	r20, r30
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	42 1b       	sub	r20, r18
    1302:	53 0b       	sbc	r21, r19
    1304:	64 e6       	ldi	r22, 0x64	; 100
    1306:	64 9f       	mul	r22, r20
    1308:	c0 01       	movw	r24, r0
    130a:	65 9f       	mul	r22, r21
    130c:	90 0d       	add	r25, r0
    130e:	11 24       	eor	r1, r1
    1310:	6f ef       	ldi	r22, 0xFF	; 255
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	62 1b       	sub	r22, r18
    1316:	73 0b       	sbc	r23, r19
    1318:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__divmodhi4>
    131c:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    1320:	c4 e2       	ldi	r28, 0x24	; 36
    1322:	d3 e0       	ldi	r29, 0x03	; 3
    1324:	68 81       	ld	r22, Y
    1326:	06 2e       	mov	r0, r22
    1328:	00 0c       	add	r0, r0
    132a:	77 0b       	sbc	r23, r23
    132c:	88 0b       	sbc	r24, r24
    132e:	99 0b       	sbc	r25, r25
    1330:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatsisf>
    1334:	6b 01       	movw	r12, r22
    1336:	7c 01       	movw	r14, r24
    1338:	69 81       	ldd	r22, Y+1	; 0x01
    133a:	06 2e       	mov	r0, r22
    133c:	00 0c       	add	r0, r0
    133e:	77 0b       	sbc	r23, r23
    1340:	88 0b       	sbc	r24, r24
    1342:	99 0b       	sbc	r25, r25
    1344:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatsisf>
    1348:	a7 01       	movw	r20, r14
    134a:	96 01       	movw	r18, r12
    134c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <atan2>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	44 eb       	ldi	r20, 0xB4	; 180
    1356:	53 e4       	ldi	r21, 0x43	; 67
    1358:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	5f e3       	ldi	r21, 0x3F	; 63
    1364:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
    1368:	23 ec       	ldi	r18, 0xC3	; 195
    136a:	35 ef       	ldi	r19, 0xF5	; 245
    136c:	48 e4       	ldi	r20, 0x48	; 72
    136e:	50 e4       	ldi	r21, 0x40	; 64
    1370:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__divsf3>
    1374:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
    1378:	7b 83       	std	Y+3, r23	; 0x03
    137a:	6a 83       	std	Y+2, r22	; 0x02
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	08 95       	ret

0000138a <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    138a:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    138c:	80 81       	ld	r24, Z
    138e:	94 e0       	ldi	r25, 0x04	; 4
    1390:	98 0f       	add	r25, r24
    1392:	99 30       	cpi	r25, 0x09	; 9
    1394:	20 f4       	brcc	.+8      	; 0x139e <joystick_getDirection+0x14>
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	9c 5f       	subi	r25, 0xFC	; 252
    139a:	99 30       	cpi	r25, 0x09	; 9
    139c:	90 f0       	brcs	.+36     	; 0x13c2 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    139e:	85 30       	cpi	r24, 0x05	; 5
    13a0:	2c f0       	brlt	.+10     	; 0x13ac <joystick_getDirection+0x22>
    13a2:	81 81       	ldd	r24, Z+1	; 0x01
    13a4:	8f 5c       	subi	r24, 0xCF	; 207
    13a6:	83 36       	cpi	r24, 0x63	; 99
    13a8:	38 f4       	brcc	.+14     	; 0x13b8 <joystick_getDirection+0x2e>
    13aa:	0d c0       	rjmp	.+26     	; 0x13c6 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    13ac:	8c 3f       	cpi	r24, 0xFC	; 252
    13ae:	24 f4       	brge	.+8      	; 0x13b8 <joystick_getDirection+0x2e>
    13b0:	81 81       	ldd	r24, Z+1	; 0x01
    13b2:	8f 5c       	subi	r24, 0xCF	; 207
    13b4:	83 36       	cpi	r24, 0x63	; 99
    13b6:	48 f0       	brcs	.+18     	; 0x13ca <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
    13ba:	8c 3f       	cpi	r24, 0xFC	; 252
    13bc:	44 f0       	brlt	.+16     	; 0x13ce <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    13c2:	84 e0       	ldi	r24, 0x04	; 4
    13c4:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    13ce:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    13d0:	08 95       	ret

000013d2 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    13d2:	0e 94 c5 09 	call	0x138a	; 0x138a <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    13d6:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <currentMenu+0x3>
    13da:	94 30       	cpi	r25, 0x04	; 4
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <navigateMenu+0xe>
    13de:	5c c0       	rjmp	.+184    	; 0x1498 <navigateMenu+0xc6>
			switch (dir) {
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	e1 f1       	breq	.+120    	; 0x145c <navigateMenu+0x8a>
    13e4:	60 f1       	brcs	.+88     	; 0x143e <navigateMenu+0x6c>
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	c9 f0       	breq	.+50     	; 0x141c <navigateMenu+0x4a>
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <navigateMenu+0x1e>
    13ee:	54 c0       	rjmp	.+168    	; 0x1498 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    13f0:	ed e2       	ldi	r30, 0x2D	; 45
    13f2:	f3 e0       	ldi	r31, 0x03	; 3
    13f4:	92 81       	ldd	r25, Z+2	; 0x02
    13f6:	49 2f       	mov	r20, r25
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	01 90       	ld	r0, Z+
    13fc:	f0 81       	ld	r31, Z
    13fe:	e0 2d       	mov	r30, r0
    1400:	20 a1       	ldd	r18, Z+32	; 0x20
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	31 09       	sbc	r19, r1
    1408:	42 17       	cp	r20, r18
    140a:	53 07       	cpc	r21, r19
    140c:	24 f4       	brge	.+8      	; 0x1416 <navigateMenu+0x44>
					currentMenu.childIndex++;
    140e:	9f 5f       	subi	r25, 0xFF	; 255
    1410:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <currentMenu+0x2>
    1414:	41 c0       	rjmp	.+130    	; 0x1498 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1416:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <currentMenu+0x2>
    141a:	3e c0       	rjmp	.+124    	; 0x1498 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    141c:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <currentMenu+0x2>
    1420:	99 23       	and	r25, r25
    1422:	21 f0       	breq	.+8      	; 0x142c <navigateMenu+0x5a>
					currentMenu.childIndex--;
    1424:	91 50       	subi	r25, 0x01	; 1
    1426:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <currentMenu+0x2>
    142a:	36 c0       	rjmp	.+108    	; 0x1498 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    142c:	ed e2       	ldi	r30, 0x2D	; 45
    142e:	f3 e0       	ldi	r31, 0x03	; 3
    1430:	a0 81       	ld	r26, Z
    1432:	b1 81       	ldd	r27, Z+1	; 0x01
    1434:	90 96       	adiw	r26, 0x20	; 32
    1436:	9c 91       	ld	r25, X
    1438:	91 50       	subi	r25, 0x01	; 1
    143a:	92 83       	std	Z+2, r25	; 0x02
    143c:	2d c0       	rjmp	.+90     	; 0x1498 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    143e:	e0 91 2d 03 	lds	r30, 0x032D	; 0x80032d <currentMenu>
    1442:	f0 91 2e 03 	lds	r31, 0x032E	; 0x80032e <currentMenu+0x1>
    1446:	22 89       	ldd	r18, Z+18	; 0x12
    1448:	33 89       	ldd	r19, Z+19	; 0x13
    144a:	21 15       	cp	r18, r1
    144c:	31 05       	cpc	r19, r1
    144e:	21 f1       	breq	.+72     	; 0x1498 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    1450:	ed e2       	ldi	r30, 0x2D	; 45
    1452:	f3 e0       	ldi	r31, 0x03	; 3
    1454:	31 83       	std	Z+1, r19	; 0x01
    1456:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    1458:	12 82       	std	Z+2, r1	; 0x02
    145a:	1e c0       	rjmp	.+60     	; 0x1498 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    145c:	ad e2       	ldi	r26, 0x2D	; 45
    145e:	b3 e0       	ldi	r27, 0x03	; 3
    1460:	2d 91       	ld	r18, X+
    1462:	3c 91       	ld	r19, X
    1464:	11 97       	sbiw	r26, 0x01	; 1
    1466:	12 96       	adiw	r26, 0x02	; 2
    1468:	9c 91       	ld	r25, X
    146a:	e9 2f       	mov	r30, r25
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	3a 96       	adiw	r30, 0x0a	; 10
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	e2 0f       	add	r30, r18
    1476:	f3 1f       	adc	r31, r19
    1478:	01 90       	ld	r0, Z+
    147a:	f0 81       	ld	r31, Z
    147c:	e0 2d       	mov	r30, r0
    147e:	90 a1       	ldd	r25, Z+32	; 0x20
    1480:	91 11       	cpse	r25, r1
    1482:	03 c0       	rjmp	.+6      	; 0x148a <navigateMenu+0xb8>
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	99 23       	and	r25, r25
    1488:	39 f0       	breq	.+14     	; 0x1498 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    148a:	ad e2       	ldi	r26, 0x2D	; 45
    148c:	b3 e0       	ldi	r27, 0x03	; 3
    148e:	11 96       	adiw	r26, 0x01	; 1
    1490:	fc 93       	st	X, r31
    1492:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    1494:	12 96       	adiw	r26, 0x02	; 2
    1496:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    1498:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <currentMenu+0x3>
    149c:	08 95       	ret

0000149e <menu_init>:
#include <string.h>


MenuNode nodes[8];

void menu_init() {
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    14a6:	8a e0       	ldi	r24, 0x0A	; 10
    14a8:	e8 ed       	ldi	r30, 0xD8	; 216
    14aa:	f2 e0       	ldi	r31, 0x02	; 2
    14ac:	ac e4       	ldi	r26, 0x4C	; 76
    14ae:	b3 e0       	ldi	r27, 0x03	; 3
    14b0:	01 90       	ld	r0, Z+
    14b2:	0d 92       	st	X+, r0
    14b4:	8a 95       	dec	r24
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    14b8:	8a e0       	ldi	r24, 0x0A	; 10
    14ba:	e2 ee       	ldi	r30, 0xE2	; 226
    14bc:	f2 e0       	ldi	r31, 0x02	; 2
    14be:	ad e6       	ldi	r26, 0x6D	; 109
    14c0:	b3 e0       	ldi	r27, 0x03	; 3
    14c2:	01 90       	ld	r0, Z+
    14c4:	0d 92       	st	X+, r0
    14c6:	8a 95       	dec	r24
    14c8:	e1 f7       	brne	.-8      	; 0x14c2 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    14ca:	8c e0       	ldi	r24, 0x0C	; 12
    14cc:	ec ee       	ldi	r30, 0xEC	; 236
    14ce:	f2 e0       	ldi	r31, 0x02	; 2
    14d0:	ae e8       	ldi	r26, 0x8E	; 142
    14d2:	b3 e0       	ldi	r27, 0x03	; 3
    14d4:	01 90       	ld	r0, Z+
    14d6:	0d 92       	st	X+, r0
    14d8:	8a 95       	dec	r24
    14da:	e1 f7       	brne	.-8      	; 0x14d4 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    14dc:	86 e0       	ldi	r24, 0x06	; 6
    14de:	e8 ef       	ldi	r30, 0xF8	; 248
    14e0:	f2 e0       	ldi	r31, 0x02	; 2
    14e2:	af ea       	ldi	r26, 0xAF	; 175
    14e4:	b3 e0       	ldi	r27, 0x03	; 3
    14e6:	01 90       	ld	r0, Z+
    14e8:	0d 92       	st	X+, r0
    14ea:	8a 95       	dec	r24
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    14ee:	87 e0       	ldi	r24, 0x07	; 7
    14f0:	ee ef       	ldi	r30, 0xFE	; 254
    14f2:	f2 e0       	ldi	r31, 0x02	; 2
    14f4:	a0 ed       	ldi	r26, 0xD0	; 208
    14f6:	b3 e0       	ldi	r27, 0x03	; 3
    14f8:	01 90       	ld	r0, Z+
    14fa:	0d 92       	st	X+, r0
    14fc:	8a 95       	dec	r24
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    1500:	87 e0       	ldi	r24, 0x07	; 7
    1502:	e5 e0       	ldi	r30, 0x05	; 5
    1504:	f3 e0       	ldi	r31, 0x03	; 3
    1506:	a1 ef       	ldi	r26, 0xF1	; 241
    1508:	b3 e0       	ldi	r27, 0x03	; 3
    150a:	01 90       	ld	r0, Z+
    150c:	0d 92       	st	X+, r0
    150e:	8a 95       	dec	r24
    1510:	e1 f7       	brne	.-8      	; 0x150a <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    1512:	8a e0       	ldi	r24, 0x0A	; 10
    1514:	ec e0       	ldi	r30, 0x0C	; 12
    1516:	f3 e0       	ldi	r31, 0x03	; 3
    1518:	a2 e1       	ldi	r26, 0x12	; 18
    151a:	b4 e0       	ldi	r27, 0x04	; 4
    151c:	01 90       	ld	r0, Z+
    151e:	0d 92       	st	X+, r0
    1520:	8a 95       	dec	r24
    1522:	e1 f7       	brne	.-8      	; 0x151c <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    1524:	8a e0       	ldi	r24, 0x0A	; 10
    1526:	e6 e1       	ldi	r30, 0x16	; 22
    1528:	f3 e0       	ldi	r31, 0x03	; 3
    152a:	a3 e3       	ldi	r26, 0x33	; 51
    152c:	b4 e0       	ldi	r27, 0x04	; 4
    152e:	01 90       	ld	r0, Z+
    1530:	0d 92       	st	X+, r0
    1532:	8a 95       	dec	r24
    1534:	e1 f7       	brne	.-8      	; 0x152e <menu_init+0x90>
    1536:	6a e4       	ldi	r22, 0x4A	; 74
    1538:	73 e0       	ldi	r23, 0x03	; 3
    153a:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    1540:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    1542:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	91 05       	cpc	r25, r1
    1548:	14 f0       	brlt	.+4      	; 0x154e <menu_init+0xb0>
			nodes[i].isAction=1;
    154a:	21 83       	std	Z+1, r18	; 0x01
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    154e:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	b1 96       	adiw	r30, 0x21	; 33
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	91 05       	cpc	r25, r1
    1558:	a1 f7       	brne	.-24     	; 0x1542 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    155a:	ea e4       	ldi	r30, 0x4A	; 74
    155c:	f3 e0       	ldi	r31, 0x03	; 3
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <nodes+0x41>
	nodes[2].numChildren = 2;
    1568:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <nodes+0x62>
	nodes[3].numChildren = 0;
    156c:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <nodes+0x83>
	nodes[4].numChildren = 0;
    1570:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <nodes+0xa4>
	nodes[5].numChildren = 0;
    1574:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <nodes+0xc5>
	nodes[6].numChildren = 0;
    1578:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <nodes+0xe6>
	nodes[7].numChildren = 0;
    157c:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    1580:	13 8a       	std	Z+19, r1	; 0x13
    1582:	12 8a       	std	Z+18, r1	; 0x12
    1584:	02 e5       	ldi	r16, 0x52	; 82
    1586:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    1588:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    158a:	51 e2       	ldi	r21, 0x21	; 33
    158c:	18 c0       	rjmp	.+48     	; 0x15be <menu_init+0x120>
    158e:	54 9f       	mul	r21, r20
    1590:	f0 01       	movw	r30, r0
    1592:	11 24       	eor	r1, r1
    1594:	e6 5b       	subi	r30, 0xB6	; 182
    1596:	fc 4f       	sbci	r31, 0xFC	; 252
    1598:	e9 93       	st	Y+, r30
    159a:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    159c:	b3 8b       	std	Z+19, r27	; 0x13
    159e:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    15a0:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15a2:	2f 5f       	subi	r18, 0xFF	; 255
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	90 96       	adiw	r26, 0x20	; 32
    15a8:	8c 91       	ld	r24, X
    15aa:	90 97       	sbiw	r26, 0x20	; 32
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	28 17       	cp	r18, r24
    15b0:	39 07       	cpc	r19, r25
    15b2:	6c f3       	brlt	.-38     	; 0x158e <menu_init+0xf0>
    15b4:	6f 5d       	subi	r22, 0xDF	; 223
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    15b8:	60 17       	cp	r22, r16
    15ba:	71 07       	cpc	r23, r17
    15bc:	59 f0       	breq	.+22     	; 0x15d4 <menu_init+0x136>
    15be:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15c0:	90 96       	adiw	r26, 0x20	; 32
    15c2:	8c 91       	ld	r24, X
    15c4:	90 97       	sbiw	r26, 0x20	; 32
    15c6:	88 23       	and	r24, r24
    15c8:	a9 f3       	breq	.-22     	; 0x15b4 <menu_init+0x116>
    15ca:	eb 01       	movw	r28, r22
    15cc:	64 96       	adiw	r28, 0x14	; 20
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	dd cf       	rjmp	.-70     	; 0x158e <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    15d4:	84 e2       	ldi	r24, 0x24	; 36
    15d6:	93 e0       	ldi	r25, 0x03	; 3
    15d8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    15dc:	ed e2       	ldi	r30, 0x2D	; 45
    15de:	f3 e0       	ldi	r31, 0x03	; 3
    15e0:	8a e4       	ldi	r24, 0x4A	; 74
    15e2:	93 e0       	ldi	r25, 0x03	; 3
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    15e8:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	08 95       	ret

000015f8 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
	oled_reset();
    1602:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
	oled_home();
    1606:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    160a:	cd e2       	ldi	r28, 0x2D	; 45
    160c:	d3 e0       	ldi	r29, 0x03	; 3
    160e:	88 81       	ld	r24, Y
    1610:	99 81       	ldd	r25, Y+1	; 0x01
    1612:	02 96       	adiw	r24, 0x02	; 2
    1614:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1618:	e8 81       	ld	r30, Y
    161a:	f9 81       	ldd	r31, Y+1	; 0x01
    161c:	80 a1       	ldd	r24, Z+32	; 0x20
    161e:	88 23       	and	r24, r24
    1620:	51 f1       	breq	.+84     	; 0x1676 <menu_printCurrentMenu+0x7e>
    1622:	68 94       	set
    1624:	ff 24       	eor	r15, r15
    1626:	f1 f8       	bld	r15, 1
    1628:	c0 e0       	ldi	r28, 0x00	; 0
    162a:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    162c:	0d e2       	ldi	r16, 0x2D	; 45
    162e:	13 e0       	ldi	r17, 0x03	; 3
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    1630:	8f 2d       	mov	r24, r15
    1632:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1636:	d8 01       	movw	r26, r16
    1638:	8d 91       	ld	r24, X+
    163a:	9c 91       	ld	r25, X
    163c:	fe 01       	movw	r30, r28
    163e:	3a 96       	adiw	r30, 0x0a	; 10
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	e8 0f       	add	r30, r24
    1646:	f9 1f       	adc	r31, r25
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	02 96       	adiw	r24, 0x02	; 2
    164e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_print>
		if (currentMenu.childIndex == i) {
    1652:	f8 01       	movw	r30, r16
    1654:	82 81       	ldd	r24, Z+2	; 0x02
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	8c 17       	cp	r24, r28
    165a:	9d 07       	cpc	r25, r29
    165c:	11 f4       	brne	.+4      	; 0x1662 <menu_printCurrentMenu+0x6a>
			oled_print_arrow();
    165e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1662:	21 96       	adiw	r28, 0x01	; 1
    1664:	f3 94       	inc	r15
    1666:	d8 01       	movw	r26, r16
    1668:	ed 91       	ld	r30, X+
    166a:	fc 91       	ld	r31, X
    166c:	80 a1       	ldd	r24, Z+32	; 0x20
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	c8 17       	cp	r28, r24
    1672:	d9 07       	cpc	r29, r25
    1674:	ec f2       	brlt	.-70     	; 0x1630 <menu_printCurrentMenu+0x38>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	08 95       	ret

00001682 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    1682:	80 55       	subi	r24, 0x50	; 80
    1684:	e0 e0       	ldi	r30, 0x00	; 0
    1686:	f0 e1       	ldi	r31, 0x10	; 16
    1688:	80 83       	st	Z, r24
    168a:	86 2f       	mov	r24, r22
    168c:	8f 70       	andi	r24, 0x0F	; 15
    168e:	80 83       	st	Z, r24
    1690:	62 95       	swap	r22
    1692:	6f 70       	andi	r22, 0x0F	; 15
    1694:	60 61       	ori	r22, 0x10	; 16
    1696:	60 83       	st	Z, r22
    1698:	08 95       	ret

0000169a <oled_reset>:
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	10 e0       	ldi	r17, 0x00	; 0
    16a2:	c0 e0       	ldi	r28, 0x00	; 0
    16a4:	d2 e1       	ldi	r29, 0x12	; 18
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	81 2f       	mov	r24, r17
    16aa:	0e 94 41 0b 	call	0x1682	; 0x1682 <oled_pos>
    16ae:	80 e8       	ldi	r24, 0x80	; 128
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	18 82       	st	Y, r1
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	e9 f7       	brne	.-6      	; 0x16b2 <oled_reset+0x18>
    16b8:	1f 5f       	subi	r17, 0xFF	; 255
    16ba:	18 30       	cpi	r17, 0x08	; 8
    16bc:	a1 f7       	brne	.-24     	; 0x16a6 <oled_reset+0xc>
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	1f 91       	pop	r17
    16c4:	08 95       	ret

000016c6 <oled_print_arrow>:
    16c6:	e0 e0       	ldi	r30, 0x00	; 0
    16c8:	f2 e1       	ldi	r31, 0x12	; 18
    16ca:	88 e1       	ldi	r24, 0x18	; 24
    16cc:	80 83       	st	Z, r24
    16ce:	9c e3       	ldi	r25, 0x3C	; 60
    16d0:	90 83       	st	Z, r25
    16d2:	9e e7       	ldi	r25, 0x7E	; 126
    16d4:	90 83       	st	Z, r25
    16d6:	80 83       	st	Z, r24
    16d8:	80 83       	st	Z, r24
    16da:	08 95       	ret

000016dc <oled_home>:
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	0e 94 41 0b 	call	0x1682	; 0x1682 <oled_pos>
    16e4:	08 95       	ret

000016e6 <oled_init>:
    16e6:	e0 e0       	ldi	r30, 0x00	; 0
    16e8:	f0 e1       	ldi	r31, 0x10	; 16
    16ea:	8e ea       	ldi	r24, 0xAE	; 174
    16ec:	80 83       	st	Z, r24
    16ee:	81 ea       	ldi	r24, 0xA1	; 161
    16f0:	80 83       	st	Z, r24
    16f2:	8a ed       	ldi	r24, 0xDA	; 218
    16f4:	80 83       	st	Z, r24
    16f6:	82 e1       	ldi	r24, 0x12	; 18
    16f8:	80 83       	st	Z, r24
    16fa:	88 ec       	ldi	r24, 0xC8	; 200
    16fc:	80 83       	st	Z, r24
    16fe:	88 ea       	ldi	r24, 0xA8	; 168
    1700:	80 83       	st	Z, r24
    1702:	8f e3       	ldi	r24, 0x3F	; 63
    1704:	80 83       	st	Z, r24
    1706:	85 ed       	ldi	r24, 0xD5	; 213
    1708:	80 83       	st	Z, r24
    170a:	80 e8       	ldi	r24, 0x80	; 128
    170c:	80 83       	st	Z, r24
    170e:	81 e8       	ldi	r24, 0x81	; 129
    1710:	80 83       	st	Z, r24
    1712:	80 e5       	ldi	r24, 0x50	; 80
    1714:	80 83       	st	Z, r24
    1716:	89 ed       	ldi	r24, 0xD9	; 217
    1718:	80 83       	st	Z, r24
    171a:	81 e2       	ldi	r24, 0x21	; 33
    171c:	80 83       	st	Z, r24
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	80 83       	st	Z, r24
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	80 83       	st	Z, r24
    1726:	8b ed       	ldi	r24, 0xDB	; 219
    1728:	80 83       	st	Z, r24
    172a:	80 e3       	ldi	r24, 0x30	; 48
    172c:	80 83       	st	Z, r24
    172e:	8d ea       	ldi	r24, 0xAD	; 173
    1730:	80 83       	st	Z, r24
    1732:	10 82       	st	Z, r1
    1734:	84 ea       	ldi	r24, 0xA4	; 164
    1736:	80 83       	st	Z, r24
    1738:	86 ea       	ldi	r24, 0xA6	; 166
    173a:	80 83       	st	Z, r24
    173c:	8f ea       	ldi	r24, 0xAF	; 175
    173e:	80 83       	st	Z, r24
    1740:	0e 94 4d 0b 	call	0x169a	; 0x169a <oled_reset>
    1744:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_home>
    1748:	08 95       	ret

0000174a <oled_gotoLine>:
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	0e 94 41 0b 	call	0x1682	; 0x1682 <oled_pos>
    1750:	08 95       	ret

00001752 <oled_print>:

void oled_print(char* character){
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	dc 01       	movw	r26, r24
	while (*character != '\0')
    1758:	8c 91       	ld	r24, X
    175a:	81 11       	cpse	r24, r1
    175c:	1a c0       	rjmp	.+52     	; 0x1792 <oled_print+0x40>
    175e:	1e c0       	rjmp	.+60     	; 0x179c <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    1760:	ec 91       	ld	r30, X
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	b0 97       	sbiw	r30, 0x20	; 32
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	ee 0f       	add	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	e2 0f       	add	r30, r18
    1774:	f3 1f       	adc	r31, r19
    1776:	e7 5d       	subi	r30, 0xD7	; 215
    1778:	fd 4f       	sbci	r31, 0xFD	; 253
    177a:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    177c:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    177e:	2f 5f       	subi	r18, 0xFF	; 255
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	28 30       	cpi	r18, 0x08	; 8
    1784:	31 05       	cpc	r19, r1
    1786:	61 f7       	brne	.-40     	; 0x1760 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    1788:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    178a:	8c 91       	ld	r24, X
    178c:	81 11       	cpse	r24, r1
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <oled_print+0x44>
    1790:	05 c0       	rjmp	.+10     	; 0x179c <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1792:	c0 e0       	ldi	r28, 0x00	; 0
    1794:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	e2 cf       	rjmp	.-60     	; 0x1760 <oled_print+0xe>
		}
		character++;
	}
	
	
}
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <setupInit>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1


	void setupInit(void){
	cli();
    17a2:	f8 94       	cli
	xmem_init();
    17a4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <xmem_init>
	USART_init(MYUBRR);
    17a8:	8f e1       	ldi	r24, 0x1F	; 31
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 9f 0c 	call	0x193e	; 0x193e <USART_init>
	adcInit();
    17b0:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
	joystick_init();
    17b4:	0e 94 27 09 	call	0x124e	; 0x124e <joystick_init>
	touchButton_init();
    17b8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <touchButton_init>
	oled_init();
    17bc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <oled_init>
	timer_init();
    17c0:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <timer_init>
	sleep_init();
    17c4:	0e 94 12 09 	call	0x1224	; 0x1224 <sleep_init>
	menu_init();
    17c8:	0e 94 4f 0a 	call	0x149e	; 0x149e <menu_init>
	CAN_init();
    17cc:	0e 94 47 04 	call	0x88e	; 0x88e <CAN_init>
	pwm_init();
    17d0:	0e 94 a6 08 	call	0x114c	; 0x114c <pwm_init>
	game_init();
    17d4:	0e 94 21 05 	call	0xa42	; 0xa42 <game_init>
	sei();
    17d8:	78 94       	sei
    17da:	08 95       	ret

000017dc <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    17e6:	c6 e4       	ldi	r28, 0x46	; 70
    17e8:	d3 e0       	ldi	r29, 0x03	; 3
    17ea:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    17f2:	89 83       	std	Y+1, r24	; 0x01
}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    17fa:	87 b3       	in	r24, 0x17	; 23
    17fc:	80 6a       	ori	r24, 0xA0	; 160
    17fe:	87 bb       	out	0x17, r24	; 23
    1800:	bc 9a       	sbi	0x17, 4	; 23
    1802:	8d b1       	in	r24, 0x0d	; 13
    1804:	81 65       	ori	r24, 0x51	; 81
    1806:	8d b9       	out	0x0d, r24	; 13
    1808:	c4 9a       	sbi	0x18, 4	; 24
    180a:	08 95       	ret

0000180c <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    180c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    180e:	77 9b       	sbis	0x0e, 7	; 14
    1810:	fe cf       	rjmp	.-4      	; 0x180e <SPI_masterWrite+0x2>

}
    1812:	08 95       	ret

00001814 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    1814:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    1816:	77 9b       	sbis	0x0e, 7	; 14
    1818:	fe cf       	rjmp	.-4      	; 0x1816 <SPI_masterRead+0x2>
	return SPDR;
    181a:	8f b1       	in	r24, 0x0f	; 15
}
    181c:	08 95       	ret

0000181e <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    181e:	66 23       	and	r22, r22
    1820:	69 f0       	breq	.+26     	; 0x183c <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1822:	48 b3       	in	r20, 0x18	; 24
    1824:	21 e0       	ldi	r18, 0x01	; 1
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	b9 01       	movw	r22, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <SPI_setChipSelect+0x12>
    182c:	66 0f       	add	r22, r22
    182e:	77 1f       	adc	r23, r23
    1830:	8a 95       	dec	r24
    1832:	e2 f7       	brpl	.-8      	; 0x182c <SPI_setChipSelect+0xe>
    1834:	cb 01       	movw	r24, r22
    1836:	84 2b       	or	r24, r20
    1838:	88 bb       	out	0x18, r24	; 24
    183a:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    183c:	48 b3       	in	r20, 0x18	; 24
    183e:	21 e0       	ldi	r18, 0x01	; 1
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	b9 01       	movw	r22, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <SPI_setChipSelect+0x2c>
    1846:	66 0f       	add	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	8a 95       	dec	r24
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <SPI_setChipSelect+0x28>
    184e:	cb 01       	movw	r24, r22
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	88 bb       	out	0x18, r24	; 24
    1856:	08 95       	ret

00001858 <__vector_14>:
#include "menu.h"
#include "game.h"
#include <avr/interrupt.h>


ISR (TIMER1_COMPB_vect) {
    1858:	1f 92       	push	r1
    185a:	0f 92       	push	r0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	2f 93       	push	r18
    1864:	3f 93       	push	r19
    1866:	4f 93       	push	r20
    1868:	5f 93       	push	r21
    186a:	6f 93       	push	r22
    186c:	7f 93       	push	r23
    186e:	8f 93       	push	r24
    1870:	9f 93       	push	r25
    1872:	af 93       	push	r26
    1874:	bf 93       	push	r27
    1876:	ef 93       	push	r30
    1878:	ff 93       	push	r31
	cli();
    187a:	f8 94       	cli
	TCNT1 = 0x00;
    187c:	1d bc       	out	0x2d, r1	; 45
    187e:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition();
    1880:	0e 94 32 09 	call	0x1264	; 0x1264 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    1884:	86 e4       	ldi	r24, 0x46	; 70
    1886:	93 e0       	ldi	r25, 0x03	; 3
    1888:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <slider_readPosition>
	touchButton_readButtons();
    188c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <touchButton_readButtons>
	if(gameActive==0){
    1890:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <gameActive>
    1894:	81 11       	cpse	r24, r1
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <__vector_14+0x4c>
		navigateMenu(&joystick_pos);
    1898:	84 e2       	ldi	r24, 0x24	; 36
    189a:	93 e0       	ldi	r25, 0x03	; 3
    189c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <navigateMenu>
		menu_printCurrentMenu();
    18a0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <menu_printCurrentMenu>
	}
	sei();
    18a4:	78 94       	sei
}
    18a6:	ff 91       	pop	r31
    18a8:	ef 91       	pop	r30
    18aa:	bf 91       	pop	r27
    18ac:	af 91       	pop	r26
    18ae:	9f 91       	pop	r25
    18b0:	8f 91       	pop	r24
    18b2:	7f 91       	pop	r23
    18b4:	6f 91       	pop	r22
    18b6:	5f 91       	pop	r21
    18b8:	4f 91       	pop	r20
    18ba:	3f 91       	pop	r19
    18bc:	2f 91       	pop	r18
    18be:	0f 90       	pop	r0
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	0f 90       	pop	r0
    18c4:	1f 90       	pop	r1
    18c6:	18 95       	reti

000018c8 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    18c8:	89 b7       	in	r24, 0x39	; 57
    18ca:	80 62       	ori	r24, 0x20	; 32
    18cc:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    18ce:	1d bc       	out	0x2d, r1	; 45
    18d0:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    18d2:	80 e3       	ldi	r24, 0x30	; 48
    18d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    18d6:	85 e0       	ldi	r24, 0x05	; 5
    18d8:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    18da:	80 ee       	ldi	r24, 0xE0	; 224
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	99 bd       	out	0x29, r25	; 41
    18e0:	88 bd       	out	0x28, r24	; 40
    18e2:	08 95       	ret

000018e4 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    18e4:	36 b3       	in	r19, 0x16	; 22
    18e6:	26 b3       	in	r18, 0x16	; 22
    18e8:	47 b3       	in	r20, 0x17	; 23
    18ea:	32 70       	andi	r19, 0x02	; 2
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	bc 01       	movw	r22, r24
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <touchButton_init+0x14>
    18f4:	66 0f       	add	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	3a 95       	dec	r19
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <touchButton_init+0x10>
    18fc:	24 70       	andi	r18, 0x04	; 4
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <touchButton_init+0x20>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	2a 95       	dec	r18
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <touchButton_init+0x1c>
    1908:	86 2b       	or	r24, r22
    190a:	97 2b       	or	r25, r23
    190c:	80 95       	com	r24
    190e:	90 95       	com	r25
    1910:	84 23       	and	r24, r20
    1912:	87 bb       	out	0x17, r24	; 23
    1914:	08 95       	ret

00001916 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1916:	86 b3       	in	r24, 0x16	; 22
    1918:	e4 e4       	ldi	r30, 0x44	; 68
    191a:	f3 e0       	ldi	r31, 0x03	; 3
    191c:	86 95       	lsr	r24
    191e:	81 70       	andi	r24, 0x01	; 1
    1920:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    1922:	86 b3       	in	r24, 0x16	; 22
    1924:	82 fb       	bst	r24, 2
    1926:	88 27       	eor	r24, r24
    1928:	80 f9       	bld	r24, 0
    192a:	81 83       	std	Z+1, r24	; 0x01
    192c:	08 95       	ret

0000192e <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    192e:	5d 9b       	sbis	0x0b, 5	; 11
    1930:	fe cf       	rjmp	.-4      	; 0x192e <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    1932:	8c b9       	out	0x0c, r24	; 12
    1934:	08 95       	ret

00001936 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    1936:	5f 9b       	sbis	0x0b, 7	; 11
    1938:	fe cf       	rjmp	.-4      	; 0x1936 <USART_receiveChar>
		;
	
	return UDR0;
    193a:	8c b1       	in	r24, 0x0c	; 12
    193c:	08 95       	ret

0000193e <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    193e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    1940:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    1942:	88 e1       	ldi	r24, 0x18	; 24
    1944:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1946:	8e e8       	ldi	r24, 0x8E	; 142
    1948:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    194a:	6b e9       	ldi	r22, 0x9B	; 155
    194c:	7c e0       	ldi	r23, 0x0C	; 12
    194e:	87 e9       	ldi	r24, 0x97	; 151
    1950:	9c e0       	ldi	r25, 0x0C	; 12
    1952:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fdevopen>
    1956:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <uart+0x1>
    195a:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <uart>
    195e:	08 95       	ret

00001960 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1960:	85 b7       	in	r24, 0x35	; 53
    1962:	80 68       	ori	r24, 0x80	; 128
    1964:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1966:	80 b7       	in	r24, 0x30	; 48
    1968:	88 60       	ori	r24, 0x08	; 8
    196a:	80 bf       	out	0x30, r24	; 48
    196c:	08 95       	ret
    196e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_pscA>
    1972:	60 f0       	brcs	.+24     	; 0x198c <xmem_init+0x2c>
    1974:	80 e8       	ldi	r24, 0x80	; 128
    1976:	91 e0       	ldi	r25, 0x01	; 1
    1978:	09 f4       	brne	.+2      	; 0x197c <xmem_init+0x1c>
    197a:	9e ef       	ldi	r25, 0xFE	; 254
    197c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__fp_pscB>
    1980:	28 f0       	brcs	.+10     	; 0x198c <xmem_init+0x2c>
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	51 e0       	ldi	r21, 0x01	; 1
    1986:	71 f4       	brne	.+28     	; 0x19a4 <atan2+0x10>
    1988:	5e ef       	ldi	r21, 0xFE	; 254
    198a:	0c c0       	rjmp	.+24     	; 0x19a4 <atan2+0x10>
    198c:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_nan>
    1990:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_zero>

00001994 <atan2>:
    1994:	e9 2f       	mov	r30, r25
    1996:	e0 78       	andi	r30, 0x80	; 128
    1998:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__fp_split3>
    199c:	40 f3       	brcs	.-48     	; 0x196e <xmem_init+0xe>
    199e:	09 2e       	mov	r0, r25
    19a0:	05 2a       	or	r0, r21
    19a2:	b1 f3       	breq	.-20     	; 0x1990 <xmem_init+0x30>
    19a4:	26 17       	cp	r18, r22
    19a6:	37 07       	cpc	r19, r23
    19a8:	48 07       	cpc	r20, r24
    19aa:	59 07       	cpc	r21, r25
    19ac:	38 f0       	brcs	.+14     	; 0x19bc <atan2+0x28>
    19ae:	0e 2e       	mov	r0, r30
    19b0:	07 f8       	bld	r0, 7
    19b2:	e0 25       	eor	r30, r0
    19b4:	69 f0       	breq	.+26     	; 0x19d0 <atan2+0x3c>
    19b6:	e0 25       	eor	r30, r0
    19b8:	e0 64       	ori	r30, 0x40	; 64
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <atan2+0x3c>
    19bc:	ef 63       	ori	r30, 0x3F	; 63
    19be:	07 f8       	bld	r0, 7
    19c0:	00 94       	com	r0
    19c2:	07 fa       	bst	r0, 7
    19c4:	db 01       	movw	r26, r22
    19c6:	b9 01       	movw	r22, r18
    19c8:	9d 01       	movw	r18, r26
    19ca:	dc 01       	movw	r26, r24
    19cc:	ca 01       	movw	r24, r20
    19ce:	ad 01       	movw	r20, r26
    19d0:	ef 93       	push	r30
    19d2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__divsf3_pse>
    19d6:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__fp_round>
    19da:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <atan>
    19de:	5f 91       	pop	r21
    19e0:	55 23       	and	r21, r21
    19e2:	39 f0       	breq	.+14     	; 0x19f2 <atan2+0x5e>
    19e4:	2b ed       	ldi	r18, 0xDB	; 219
    19e6:	3f e0       	ldi	r19, 0x0F	; 15
    19e8:	49 e4       	ldi	r20, 0x49	; 73
    19ea:	50 fd       	sbrc	r21, 0
    19ec:	49 ec       	ldi	r20, 0xC9	; 201
    19ee:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__addsf3>
    19f2:	08 95       	ret

000019f4 <atan>:
    19f4:	df 93       	push	r29
    19f6:	dd 27       	eor	r29, r29
    19f8:	b9 2f       	mov	r27, r25
    19fa:	bf 77       	andi	r27, 0x7F	; 127
    19fc:	40 e8       	ldi	r20, 0x80	; 128
    19fe:	5f e3       	ldi	r21, 0x3F	; 63
    1a00:	16 16       	cp	r1, r22
    1a02:	17 06       	cpc	r1, r23
    1a04:	48 07       	cpc	r20, r24
    1a06:	5b 07       	cpc	r21, r27
    1a08:	18 f4       	brcc	.+6      	; 0x1a10 <atan+0x1c>
    1a0a:	d9 2f       	mov	r29, r25
    1a0c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <inverse>
    1a10:	9f 93       	push	r25
    1a12:	8f 93       	push	r24
    1a14:	7f 93       	push	r23
    1a16:	6f 93       	push	r22
    1a18:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <square>
    1a1c:	e0 e7       	ldi	r30, 0x70	; 112
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_powser>
    1a24:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__fp_round>
    1a28:	2f 91       	pop	r18
    1a2a:	3f 91       	pop	r19
    1a2c:	4f 91       	pop	r20
    1a2e:	5f 91       	pop	r21
    1a30:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3x>
    1a34:	dd 23       	and	r29, r29
    1a36:	51 f0       	breq	.+20     	; 0x1a4c <atan+0x58>
    1a38:	90 58       	subi	r25, 0x80	; 128
    1a3a:	a2 ea       	ldi	r26, 0xA2	; 162
    1a3c:	2a ed       	ldi	r18, 0xDA	; 218
    1a3e:	3f e0       	ldi	r19, 0x0F	; 15
    1a40:	49 ec       	ldi	r20, 0xC9	; 201
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	d0 78       	andi	r29, 0x80	; 128
    1a46:	5d 27       	eor	r21, r29
    1a48:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__addsf3x>
    1a4c:	df 91       	pop	r29
    1a4e:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__fp_round>

00001a52 <__divsf3>:
    1a52:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__divsf3x>
    1a56:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__fp_round>
    1a5a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__fp_pscB>
    1a5e:	58 f0       	brcs	.+22     	; 0x1a76 <__divsf3+0x24>
    1a60:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_pscA>
    1a64:	40 f0       	brcs	.+16     	; 0x1a76 <__divsf3+0x24>
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <__divsf3+0x20>
    1a68:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6a:	29 f0       	breq	.+10     	; 0x1a76 <__divsf3+0x24>
    1a6c:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>
    1a70:	51 11       	cpse	r21, r1
    1a72:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_szero>
    1a76:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_nan>

00001a7a <__divsf3x>:
    1a7a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__fp_split3>
    1a7e:	68 f3       	brcs	.-38     	; 0x1a5a <__divsf3+0x8>

00001a80 <__divsf3_pse>:
    1a80:	99 23       	and	r25, r25
    1a82:	b1 f3       	breq	.-20     	; 0x1a70 <__divsf3+0x1e>
    1a84:	55 23       	and	r21, r21
    1a86:	91 f3       	breq	.-28     	; 0x1a6c <__divsf3+0x1a>
    1a88:	95 1b       	sub	r25, r21
    1a8a:	55 0b       	sbc	r21, r21
    1a8c:	bb 27       	eor	r27, r27
    1a8e:	aa 27       	eor	r26, r26
    1a90:	62 17       	cp	r22, r18
    1a92:	73 07       	cpc	r23, r19
    1a94:	84 07       	cpc	r24, r20
    1a96:	38 f0       	brcs	.+14     	; 0x1aa6 <__divsf3_pse+0x26>
    1a98:	9f 5f       	subi	r25, 0xFF	; 255
    1a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	44 1f       	adc	r20, r20
    1aa2:	aa 1f       	adc	r26, r26
    1aa4:	a9 f3       	breq	.-22     	; 0x1a90 <__divsf3_pse+0x10>
    1aa6:	35 d0       	rcall	.+106    	; 0x1b12 <__divsf3_pse+0x92>
    1aa8:	0e 2e       	mov	r0, r30
    1aaa:	3a f0       	brmi	.+14     	; 0x1aba <__divsf3_pse+0x3a>
    1aac:	e0 e8       	ldi	r30, 0x80	; 128
    1aae:	32 d0       	rcall	.+100    	; 0x1b14 <__divsf3_pse+0x94>
    1ab0:	91 50       	subi	r25, 0x01	; 1
    1ab2:	50 40       	sbci	r21, 0x00	; 0
    1ab4:	e6 95       	lsr	r30
    1ab6:	00 1c       	adc	r0, r0
    1ab8:	ca f7       	brpl	.-14     	; 0x1aac <__divsf3_pse+0x2c>
    1aba:	2b d0       	rcall	.+86     	; 0x1b12 <__divsf3_pse+0x92>
    1abc:	fe 2f       	mov	r31, r30
    1abe:	29 d0       	rcall	.+82     	; 0x1b12 <__divsf3_pse+0x92>
    1ac0:	66 0f       	add	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	26 17       	cp	r18, r22
    1aca:	37 07       	cpc	r19, r23
    1acc:	48 07       	cpc	r20, r24
    1ace:	ab 07       	cpc	r26, r27
    1ad0:	b0 e8       	ldi	r27, 0x80	; 128
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <__divsf3_pse+0x56>
    1ad4:	bb 0b       	sbc	r27, r27
    1ad6:	80 2d       	mov	r24, r0
    1ad8:	bf 01       	movw	r22, r30
    1ada:	ff 27       	eor	r31, r31
    1adc:	93 58       	subi	r25, 0x83	; 131
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	3a f0       	brmi	.+14     	; 0x1af0 <__divsf3_pse+0x70>
    1ae2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	78 f0       	brcs	.+30     	; 0x1b06 <__divsf3_pse+0x86>
    1ae8:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>
    1aec:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_szero>
    1af0:	5f 3f       	cpi	r21, 0xFF	; 255
    1af2:	e4 f3       	brlt	.-8      	; 0x1aec <__divsf3_pse+0x6c>
    1af4:	98 3e       	cpi	r25, 0xE8	; 232
    1af6:	d4 f3       	brlt	.-12     	; 0x1aec <__divsf3_pse+0x6c>
    1af8:	86 95       	lsr	r24
    1afa:	77 95       	ror	r23
    1afc:	67 95       	ror	r22
    1afe:	b7 95       	ror	r27
    1b00:	f7 95       	ror	r31
    1b02:	9f 5f       	subi	r25, 0xFF	; 255
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <__divsf3_pse+0x78>
    1b06:	88 0f       	add	r24, r24
    1b08:	91 1d       	adc	r25, r1
    1b0a:	96 95       	lsr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	97 f9       	bld	r25, 7
    1b10:	08 95       	ret
    1b12:	e1 e0       	ldi	r30, 0x01	; 1
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	bb 1f       	adc	r27, r27
    1b1c:	62 17       	cp	r22, r18
    1b1e:	73 07       	cpc	r23, r19
    1b20:	84 07       	cpc	r24, r20
    1b22:	ba 07       	cpc	r27, r26
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <__divsf3_pse+0xae>
    1b26:	62 1b       	sub	r22, r18
    1b28:	73 0b       	sbc	r23, r19
    1b2a:	84 0b       	sbc	r24, r20
    1b2c:	ba 0b       	sbc	r27, r26
    1b2e:	ee 1f       	adc	r30, r30
    1b30:	88 f7       	brcc	.-30     	; 0x1b14 <__divsf3_pse+0x94>
    1b32:	e0 95       	com	r30
    1b34:	08 95       	ret

00001b36 <__fixsfsi>:
    1b36:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fixunssfsi>
    1b3a:	68 94       	set
    1b3c:	b1 11       	cpse	r27, r1
    1b3e:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_szero>
    1b42:	08 95       	ret

00001b44 <__fixunssfsi>:
    1b44:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__fp_splitA>
    1b48:	88 f0       	brcs	.+34     	; 0x1b6c <__fixunssfsi+0x28>
    1b4a:	9f 57       	subi	r25, 0x7F	; 127
    1b4c:	98 f0       	brcs	.+38     	; 0x1b74 <__fixunssfsi+0x30>
    1b4e:	b9 2f       	mov	r27, r25
    1b50:	99 27       	eor	r25, r25
    1b52:	b7 51       	subi	r27, 0x17	; 23
    1b54:	b0 f0       	brcs	.+44     	; 0x1b82 <__fixunssfsi+0x3e>
    1b56:	e1 f0       	breq	.+56     	; 0x1b90 <__fixunssfsi+0x4c>
    1b58:	66 0f       	add	r22, r22
    1b5a:	77 1f       	adc	r23, r23
    1b5c:	88 1f       	adc	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	1a f0       	brmi	.+6      	; 0x1b68 <__fixunssfsi+0x24>
    1b62:	ba 95       	dec	r27
    1b64:	c9 f7       	brne	.-14     	; 0x1b58 <__fixunssfsi+0x14>
    1b66:	14 c0       	rjmp	.+40     	; 0x1b90 <__fixunssfsi+0x4c>
    1b68:	b1 30       	cpi	r27, 0x01	; 1
    1b6a:	91 f0       	breq	.+36     	; 0x1b90 <__fixunssfsi+0x4c>
    1b6c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fp_zero>
    1b70:	b1 e0       	ldi	r27, 0x01	; 1
    1b72:	08 95       	ret
    1b74:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_zero>
    1b78:	67 2f       	mov	r22, r23
    1b7a:	78 2f       	mov	r23, r24
    1b7c:	88 27       	eor	r24, r24
    1b7e:	b8 5f       	subi	r27, 0xF8	; 248
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <__fixunssfsi+0x4c>
    1b82:	b9 3f       	cpi	r27, 0xF9	; 249
    1b84:	cc f3       	brlt	.-14     	; 0x1b78 <__fixunssfsi+0x34>
    1b86:	86 95       	lsr	r24
    1b88:	77 95       	ror	r23
    1b8a:	67 95       	ror	r22
    1b8c:	b3 95       	inc	r27
    1b8e:	d9 f7       	brne	.-10     	; 0x1b86 <__fixunssfsi+0x42>
    1b90:	3e f4       	brtc	.+14     	; 0x1ba0 <__fixunssfsi+0x5c>
    1b92:	90 95       	com	r25
    1b94:	80 95       	com	r24
    1b96:	70 95       	com	r23
    1b98:	61 95       	neg	r22
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	08 95       	ret

00001ba2 <__floatunsisf>:
    1ba2:	e8 94       	clt
    1ba4:	09 c0       	rjmp	.+18     	; 0x1bb8 <__floatsisf+0x12>

00001ba6 <__floatsisf>:
    1ba6:	97 fb       	bst	r25, 7
    1ba8:	3e f4       	brtc	.+14     	; 0x1bb8 <__floatsisf+0x12>
    1baa:	90 95       	com	r25
    1bac:	80 95       	com	r24
    1bae:	70 95       	com	r23
    1bb0:	61 95       	neg	r22
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	99 23       	and	r25, r25
    1bba:	a9 f0       	breq	.+42     	; 0x1be6 <__floatsisf+0x40>
    1bbc:	f9 2f       	mov	r31, r25
    1bbe:	96 e9       	ldi	r25, 0x96	; 150
    1bc0:	bb 27       	eor	r27, r27
    1bc2:	93 95       	inc	r25
    1bc4:	f6 95       	lsr	r31
    1bc6:	87 95       	ror	r24
    1bc8:	77 95       	ror	r23
    1bca:	67 95       	ror	r22
    1bcc:	b7 95       	ror	r27
    1bce:	f1 11       	cpse	r31, r1
    1bd0:	f8 cf       	rjmp	.-16     	; 0x1bc2 <__floatsisf+0x1c>
    1bd2:	fa f4       	brpl	.+62     	; 0x1c12 <__floatsisf+0x6c>
    1bd4:	bb 0f       	add	r27, r27
    1bd6:	11 f4       	brne	.+4      	; 0x1bdc <__floatsisf+0x36>
    1bd8:	60 ff       	sbrs	r22, 0
    1bda:	1b c0       	rjmp	.+54     	; 0x1c12 <__floatsisf+0x6c>
    1bdc:	6f 5f       	subi	r22, 0xFF	; 255
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	8f 4f       	sbci	r24, 0xFF	; 255
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	16 c0       	rjmp	.+44     	; 0x1c12 <__floatsisf+0x6c>
    1be6:	88 23       	and	r24, r24
    1be8:	11 f0       	breq	.+4      	; 0x1bee <__floatsisf+0x48>
    1bea:	96 e9       	ldi	r25, 0x96	; 150
    1bec:	11 c0       	rjmp	.+34     	; 0x1c10 <__floatsisf+0x6a>
    1bee:	77 23       	and	r23, r23
    1bf0:	21 f0       	breq	.+8      	; 0x1bfa <__floatsisf+0x54>
    1bf2:	9e e8       	ldi	r25, 0x8E	; 142
    1bf4:	87 2f       	mov	r24, r23
    1bf6:	76 2f       	mov	r23, r22
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <__floatsisf+0x5e>
    1bfa:	66 23       	and	r22, r22
    1bfc:	71 f0       	breq	.+28     	; 0x1c1a <__floatsisf+0x74>
    1bfe:	96 e8       	ldi	r25, 0x86	; 134
    1c00:	86 2f       	mov	r24, r22
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	2a f0       	brmi	.+10     	; 0x1c12 <__floatsisf+0x6c>
    1c08:	9a 95       	dec	r25
    1c0a:	66 0f       	add	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	88 1f       	adc	r24, r24
    1c10:	da f7       	brpl	.-10     	; 0x1c08 <__floatsisf+0x62>
    1c12:	88 0f       	add	r24, r24
    1c14:	96 95       	lsr	r25
    1c16:	87 95       	ror	r24
    1c18:	97 f9       	bld	r25, 7
    1c1a:	08 95       	ret

00001c1c <__fp_inf>:
    1c1c:	97 f9       	bld	r25, 7
    1c1e:	9f 67       	ori	r25, 0x7F	; 127
    1c20:	80 e8       	ldi	r24, 0x80	; 128
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	08 95       	ret

00001c28 <__fp_nan>:
    1c28:	9f ef       	ldi	r25, 0xFF	; 255
    1c2a:	80 ec       	ldi	r24, 0xC0	; 192
    1c2c:	08 95       	ret

00001c2e <__fp_powser>:
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	1f 93       	push	r17
    1c34:	0f 93       	push	r16
    1c36:	ff 92       	push	r15
    1c38:	ef 92       	push	r14
    1c3a:	df 92       	push	r13
    1c3c:	7b 01       	movw	r14, r22
    1c3e:	8c 01       	movw	r16, r24
    1c40:	68 94       	set
    1c42:	06 c0       	rjmp	.+12     	; 0x1c50 <__fp_powser+0x22>
    1c44:	da 2e       	mov	r13, r26
    1c46:	ef 01       	movw	r28, r30
    1c48:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3x>
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e8 94       	clt
    1c50:	a5 91       	lpm	r26, Z+
    1c52:	25 91       	lpm	r18, Z+
    1c54:	35 91       	lpm	r19, Z+
    1c56:	45 91       	lpm	r20, Z+
    1c58:	55 91       	lpm	r21, Z+
    1c5a:	a6 f3       	brts	.-24     	; 0x1c44 <__fp_powser+0x16>
    1c5c:	ef 01       	movw	r28, r30
    1c5e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__addsf3x>
    1c62:	fe 01       	movw	r30, r28
    1c64:	97 01       	movw	r18, r14
    1c66:	a8 01       	movw	r20, r16
    1c68:	da 94       	dec	r13
    1c6a:	69 f7       	brne	.-38     	; 0x1c46 <__fp_powser+0x18>
    1c6c:	df 90       	pop	r13
    1c6e:	ef 90       	pop	r14
    1c70:	ff 90       	pop	r15
    1c72:	0f 91       	pop	r16
    1c74:	1f 91       	pop	r17
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <__fp_pscA>:
    1c7c:	00 24       	eor	r0, r0
    1c7e:	0a 94       	dec	r0
    1c80:	16 16       	cp	r1, r22
    1c82:	17 06       	cpc	r1, r23
    1c84:	18 06       	cpc	r1, r24
    1c86:	09 06       	cpc	r0, r25
    1c88:	08 95       	ret

00001c8a <__fp_pscB>:
    1c8a:	00 24       	eor	r0, r0
    1c8c:	0a 94       	dec	r0
    1c8e:	12 16       	cp	r1, r18
    1c90:	13 06       	cpc	r1, r19
    1c92:	14 06       	cpc	r1, r20
    1c94:	05 06       	cpc	r0, r21
    1c96:	08 95       	ret

00001c98 <__fp_round>:
    1c98:	09 2e       	mov	r0, r25
    1c9a:	03 94       	inc	r0
    1c9c:	00 0c       	add	r0, r0
    1c9e:	11 f4       	brne	.+4      	; 0x1ca4 <__fp_round+0xc>
    1ca0:	88 23       	and	r24, r24
    1ca2:	52 f0       	brmi	.+20     	; 0x1cb8 <__fp_round+0x20>
    1ca4:	bb 0f       	add	r27, r27
    1ca6:	40 f4       	brcc	.+16     	; 0x1cb8 <__fp_round+0x20>
    1ca8:	bf 2b       	or	r27, r31
    1caa:	11 f4       	brne	.+4      	; 0x1cb0 <__fp_round+0x18>
    1cac:	60 ff       	sbrs	r22, 0
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <__fp_round+0x20>
    1cb0:	6f 5f       	subi	r22, 0xFF	; 255
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	08 95       	ret

00001cba <__fp_split3>:
    1cba:	57 fd       	sbrc	r21, 7
    1cbc:	90 58       	subi	r25, 0x80	; 128
    1cbe:	44 0f       	add	r20, r20
    1cc0:	55 1f       	adc	r21, r21
    1cc2:	59 f0       	breq	.+22     	; 0x1cda <__fp_splitA+0x10>
    1cc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc6:	71 f0       	breq	.+28     	; 0x1ce4 <__fp_splitA+0x1a>
    1cc8:	47 95       	ror	r20

00001cca <__fp_splitA>:
    1cca:	88 0f       	add	r24, r24
    1ccc:	97 fb       	bst	r25, 7
    1cce:	99 1f       	adc	r25, r25
    1cd0:	61 f0       	breq	.+24     	; 0x1cea <__fp_splitA+0x20>
    1cd2:	9f 3f       	cpi	r25, 0xFF	; 255
    1cd4:	79 f0       	breq	.+30     	; 0x1cf4 <__fp_splitA+0x2a>
    1cd6:	87 95       	ror	r24
    1cd8:	08 95       	ret
    1cda:	12 16       	cp	r1, r18
    1cdc:	13 06       	cpc	r1, r19
    1cde:	14 06       	cpc	r1, r20
    1ce0:	55 1f       	adc	r21, r21
    1ce2:	f2 cf       	rjmp	.-28     	; 0x1cc8 <__fp_split3+0xe>
    1ce4:	46 95       	lsr	r20
    1ce6:	f1 df       	rcall	.-30     	; 0x1cca <__fp_splitA>
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <__fp_splitA+0x30>
    1cea:	16 16       	cp	r1, r22
    1cec:	17 06       	cpc	r1, r23
    1cee:	18 06       	cpc	r1, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	f1 cf       	rjmp	.-30     	; 0x1cd6 <__fp_splitA+0xc>
    1cf4:	86 95       	lsr	r24
    1cf6:	71 05       	cpc	r23, r1
    1cf8:	61 05       	cpc	r22, r1
    1cfa:	08 94       	sec
    1cfc:	08 95       	ret

00001cfe <__fp_zero>:
    1cfe:	e8 94       	clt

00001d00 <__fp_szero>:
    1d00:	bb 27       	eor	r27, r27
    1d02:	66 27       	eor	r22, r22
    1d04:	77 27       	eor	r23, r23
    1d06:	cb 01       	movw	r24, r22
    1d08:	97 f9       	bld	r25, 7
    1d0a:	08 95       	ret

00001d0c <inverse>:
    1d0c:	9b 01       	movw	r18, r22
    1d0e:	ac 01       	movw	r20, r24
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	80 e8       	ldi	r24, 0x80	; 128
    1d16:	9f e3       	ldi	r25, 0x3F	; 63
    1d18:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__divsf3>

00001d1c <__mulsf3>:
    1d1c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3x>
    1d20:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__fp_round>
    1d24:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_pscA>
    1d28:	38 f0       	brcs	.+14     	; 0x1d38 <__mulsf3+0x1c>
    1d2a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__fp_pscB>
    1d2e:	20 f0       	brcs	.+8      	; 0x1d38 <__mulsf3+0x1c>
    1d30:	95 23       	and	r25, r21
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <__mulsf3+0x1c>
    1d34:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>
    1d38:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_nan>
    1d3c:	11 24       	eor	r1, r1
    1d3e:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_szero>

00001d42 <__mulsf3x>:
    1d42:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__fp_split3>
    1d46:	70 f3       	brcs	.-36     	; 0x1d24 <__mulsf3+0x8>

00001d48 <__mulsf3_pse>:
    1d48:	95 9f       	mul	r25, r21
    1d4a:	c1 f3       	breq	.-16     	; 0x1d3c <__mulsf3+0x20>
    1d4c:	95 0f       	add	r25, r21
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	55 1f       	adc	r21, r21
    1d52:	62 9f       	mul	r22, r18
    1d54:	f0 01       	movw	r30, r0
    1d56:	72 9f       	mul	r23, r18
    1d58:	bb 27       	eor	r27, r27
    1d5a:	f0 0d       	add	r31, r0
    1d5c:	b1 1d       	adc	r27, r1
    1d5e:	63 9f       	mul	r22, r19
    1d60:	aa 27       	eor	r26, r26
    1d62:	f0 0d       	add	r31, r0
    1d64:	b1 1d       	adc	r27, r1
    1d66:	aa 1f       	adc	r26, r26
    1d68:	64 9f       	mul	r22, r20
    1d6a:	66 27       	eor	r22, r22
    1d6c:	b0 0d       	add	r27, r0
    1d6e:	a1 1d       	adc	r26, r1
    1d70:	66 1f       	adc	r22, r22
    1d72:	82 9f       	mul	r24, r18
    1d74:	22 27       	eor	r18, r18
    1d76:	b0 0d       	add	r27, r0
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	62 1f       	adc	r22, r18
    1d7c:	73 9f       	mul	r23, r19
    1d7e:	b0 0d       	add	r27, r0
    1d80:	a1 1d       	adc	r26, r1
    1d82:	62 1f       	adc	r22, r18
    1d84:	83 9f       	mul	r24, r19
    1d86:	a0 0d       	add	r26, r0
    1d88:	61 1d       	adc	r22, r1
    1d8a:	22 1f       	adc	r18, r18
    1d8c:	74 9f       	mul	r23, r20
    1d8e:	33 27       	eor	r19, r19
    1d90:	a0 0d       	add	r26, r0
    1d92:	61 1d       	adc	r22, r1
    1d94:	23 1f       	adc	r18, r19
    1d96:	84 9f       	mul	r24, r20
    1d98:	60 0d       	add	r22, r0
    1d9a:	21 1d       	adc	r18, r1
    1d9c:	82 2f       	mov	r24, r18
    1d9e:	76 2f       	mov	r23, r22
    1da0:	6a 2f       	mov	r22, r26
    1da2:	11 24       	eor	r1, r1
    1da4:	9f 57       	subi	r25, 0x7F	; 127
    1da6:	50 40       	sbci	r21, 0x00	; 0
    1da8:	9a f0       	brmi	.+38     	; 0x1dd0 <__mulsf3_pse+0x88>
    1daa:	f1 f0       	breq	.+60     	; 0x1de8 <__mulsf3_pse+0xa0>
    1dac:	88 23       	and	r24, r24
    1dae:	4a f0       	brmi	.+18     	; 0x1dc2 <__mulsf3_pse+0x7a>
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	bb 1f       	adc	r27, r27
    1db6:	66 1f       	adc	r22, r22
    1db8:	77 1f       	adc	r23, r23
    1dba:	88 1f       	adc	r24, r24
    1dbc:	91 50       	subi	r25, 0x01	; 1
    1dbe:	50 40       	sbci	r21, 0x00	; 0
    1dc0:	a9 f7       	brne	.-22     	; 0x1dac <__mulsf3_pse+0x64>
    1dc2:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc4:	51 05       	cpc	r21, r1
    1dc6:	80 f0       	brcs	.+32     	; 0x1de8 <__mulsf3_pse+0xa0>
    1dc8:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>
    1dcc:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_szero>
    1dd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd2:	e4 f3       	brlt	.-8      	; 0x1dcc <__mulsf3_pse+0x84>
    1dd4:	98 3e       	cpi	r25, 0xE8	; 232
    1dd6:	d4 f3       	brlt	.-12     	; 0x1dcc <__mulsf3_pse+0x84>
    1dd8:	86 95       	lsr	r24
    1dda:	77 95       	ror	r23
    1ddc:	67 95       	ror	r22
    1dde:	b7 95       	ror	r27
    1de0:	f7 95       	ror	r31
    1de2:	e7 95       	ror	r30
    1de4:	9f 5f       	subi	r25, 0xFF	; 255
    1de6:	c1 f7       	brne	.-16     	; 0x1dd8 <__mulsf3_pse+0x90>
    1de8:	fe 2b       	or	r31, r30
    1dea:	88 0f       	add	r24, r24
    1dec:	91 1d       	adc	r25, r1
    1dee:	96 95       	lsr	r25
    1df0:	87 95       	ror	r24
    1df2:	97 f9       	bld	r25, 7
    1df4:	08 95       	ret

00001df6 <square>:
    1df6:	9b 01       	movw	r18, r22
    1df8:	ac 01       	movw	r20, r24
    1dfa:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__mulsf3>

00001dfe <__subsf3>:
    1dfe:	50 58       	subi	r21, 0x80	; 128

00001e00 <__addsf3>:
    1e00:	bb 27       	eor	r27, r27
    1e02:	aa 27       	eor	r26, r26
    1e04:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__addsf3x>
    1e08:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__fp_round>
    1e0c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_pscA>
    1e10:	38 f0       	brcs	.+14     	; 0x1e20 <__addsf3+0x20>
    1e12:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__fp_pscB>
    1e16:	20 f0       	brcs	.+8      	; 0x1e20 <__addsf3+0x20>
    1e18:	39 f4       	brne	.+14     	; 0x1e28 <__addsf3+0x28>
    1e1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e1c:	19 f4       	brne	.+6      	; 0x1e24 <__addsf3+0x24>
    1e1e:	26 f4       	brtc	.+8      	; 0x1e28 <__addsf3+0x28>
    1e20:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_nan>
    1e24:	0e f4       	brtc	.+2      	; 0x1e28 <__addsf3+0x28>
    1e26:	e0 95       	com	r30
    1e28:	e7 fb       	bst	r30, 7
    1e2a:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>

00001e2e <__addsf3x>:
    1e2e:	e9 2f       	mov	r30, r25
    1e30:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__fp_split3>
    1e34:	58 f3       	brcs	.-42     	; 0x1e0c <__addsf3+0xc>
    1e36:	ba 17       	cp	r27, r26
    1e38:	62 07       	cpc	r22, r18
    1e3a:	73 07       	cpc	r23, r19
    1e3c:	84 07       	cpc	r24, r20
    1e3e:	95 07       	cpc	r25, r21
    1e40:	20 f0       	brcs	.+8      	; 0x1e4a <__addsf3x+0x1c>
    1e42:	79 f4       	brne	.+30     	; 0x1e62 <__addsf3x+0x34>
    1e44:	a6 f5       	brtc	.+104    	; 0x1eae <__addsf3x+0x80>
    1e46:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_zero>
    1e4a:	0e f4       	brtc	.+2      	; 0x1e4e <__addsf3x+0x20>
    1e4c:	e0 95       	com	r30
    1e4e:	0b 2e       	mov	r0, r27
    1e50:	ba 2f       	mov	r27, r26
    1e52:	a0 2d       	mov	r26, r0
    1e54:	0b 01       	movw	r0, r22
    1e56:	b9 01       	movw	r22, r18
    1e58:	90 01       	movw	r18, r0
    1e5a:	0c 01       	movw	r0, r24
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	a0 01       	movw	r20, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	ff 27       	eor	r31, r31
    1e64:	59 1b       	sub	r21, r25
    1e66:	99 f0       	breq	.+38     	; 0x1e8e <__addsf3x+0x60>
    1e68:	59 3f       	cpi	r21, 0xF9	; 249
    1e6a:	50 f4       	brcc	.+20     	; 0x1e80 <__addsf3x+0x52>
    1e6c:	50 3e       	cpi	r21, 0xE0	; 224
    1e6e:	68 f1       	brcs	.+90     	; 0x1eca <__addsf3x+0x9c>
    1e70:	1a 16       	cp	r1, r26
    1e72:	f0 40       	sbci	r31, 0x00	; 0
    1e74:	a2 2f       	mov	r26, r18
    1e76:	23 2f       	mov	r18, r19
    1e78:	34 2f       	mov	r19, r20
    1e7a:	44 27       	eor	r20, r20
    1e7c:	58 5f       	subi	r21, 0xF8	; 248
    1e7e:	f3 cf       	rjmp	.-26     	; 0x1e66 <__addsf3x+0x38>
    1e80:	46 95       	lsr	r20
    1e82:	37 95       	ror	r19
    1e84:	27 95       	ror	r18
    1e86:	a7 95       	ror	r26
    1e88:	f0 40       	sbci	r31, 0x00	; 0
    1e8a:	53 95       	inc	r21
    1e8c:	c9 f7       	brne	.-14     	; 0x1e80 <__addsf3x+0x52>
    1e8e:	7e f4       	brtc	.+30     	; 0x1eae <__addsf3x+0x80>
    1e90:	1f 16       	cp	r1, r31
    1e92:	ba 0b       	sbc	r27, r26
    1e94:	62 0b       	sbc	r22, r18
    1e96:	73 0b       	sbc	r23, r19
    1e98:	84 0b       	sbc	r24, r20
    1e9a:	ba f0       	brmi	.+46     	; 0x1eca <__addsf3x+0x9c>
    1e9c:	91 50       	subi	r25, 0x01	; 1
    1e9e:	a1 f0       	breq	.+40     	; 0x1ec8 <__addsf3x+0x9a>
    1ea0:	ff 0f       	add	r31, r31
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	66 1f       	adc	r22, r22
    1ea6:	77 1f       	adc	r23, r23
    1ea8:	88 1f       	adc	r24, r24
    1eaa:	c2 f7       	brpl	.-16     	; 0x1e9c <__addsf3x+0x6e>
    1eac:	0e c0       	rjmp	.+28     	; 0x1eca <__addsf3x+0x9c>
    1eae:	ba 0f       	add	r27, r26
    1eb0:	62 1f       	adc	r22, r18
    1eb2:	73 1f       	adc	r23, r19
    1eb4:	84 1f       	adc	r24, r20
    1eb6:	48 f4       	brcc	.+18     	; 0x1eca <__addsf3x+0x9c>
    1eb8:	87 95       	ror	r24
    1eba:	77 95       	ror	r23
    1ebc:	67 95       	ror	r22
    1ebe:	b7 95       	ror	r27
    1ec0:	f7 95       	ror	r31
    1ec2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <__addsf3x+0x9a>
    1ec6:	b0 cf       	rjmp	.-160    	; 0x1e28 <__addsf3+0x28>
    1ec8:	93 95       	inc	r25
    1eca:	88 0f       	add	r24, r24
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <__addsf3x+0xa2>
    1ece:	99 27       	eor	r25, r25
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	97 95       	ror	r25
    1ed4:	87 95       	ror	r24
    1ed6:	08 95       	ret

00001ed8 <__divmodhi4>:
    1ed8:	97 fb       	bst	r25, 7
    1eda:	07 2e       	mov	r0, r23
    1edc:	16 f4       	brtc	.+4      	; 0x1ee2 <__divmodhi4+0xa>
    1ede:	00 94       	com	r0
    1ee0:	07 d0       	rcall	.+14     	; 0x1ef0 <__divmodhi4_neg1>
    1ee2:	77 fd       	sbrc	r23, 7
    1ee4:	09 d0       	rcall	.+18     	; 0x1ef8 <__divmodhi4_neg2>
    1ee6:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__udivmodhi4>
    1eea:	07 fc       	sbrc	r0, 7
    1eec:	05 d0       	rcall	.+10     	; 0x1ef8 <__divmodhi4_neg2>
    1eee:	3e f4       	brtc	.+14     	; 0x1efe <__divmodhi4_exit>

00001ef0 <__divmodhi4_neg1>:
    1ef0:	90 95       	com	r25
    1ef2:	81 95       	neg	r24
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	08 95       	ret

00001ef8 <__divmodhi4_neg2>:
    1ef8:	70 95       	com	r23
    1efa:	61 95       	neg	r22
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255

00001efe <__divmodhi4_exit>:
    1efe:	08 95       	ret

00001f00 <__udivmodsi4>:
    1f00:	a1 e2       	ldi	r26, 0x21	; 33
    1f02:	1a 2e       	mov	r1, r26
    1f04:	aa 1b       	sub	r26, r26
    1f06:	bb 1b       	sub	r27, r27
    1f08:	fd 01       	movw	r30, r26
    1f0a:	0d c0       	rjmp	.+26     	; 0x1f26 <__udivmodsi4_ep>

00001f0c <__udivmodsi4_loop>:
    1f0c:	aa 1f       	adc	r26, r26
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	ee 1f       	adc	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	a2 17       	cp	r26, r18
    1f16:	b3 07       	cpc	r27, r19
    1f18:	e4 07       	cpc	r30, r20
    1f1a:	f5 07       	cpc	r31, r21
    1f1c:	20 f0       	brcs	.+8      	; 0x1f26 <__udivmodsi4_ep>
    1f1e:	a2 1b       	sub	r26, r18
    1f20:	b3 0b       	sbc	r27, r19
    1f22:	e4 0b       	sbc	r30, r20
    1f24:	f5 0b       	sbc	r31, r21

00001f26 <__udivmodsi4_ep>:
    1f26:	66 1f       	adc	r22, r22
    1f28:	77 1f       	adc	r23, r23
    1f2a:	88 1f       	adc	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	1a 94       	dec	r1
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <__udivmodsi4_loop>
    1f32:	60 95       	com	r22
    1f34:	70 95       	com	r23
    1f36:	80 95       	com	r24
    1f38:	90 95       	com	r25
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	bd 01       	movw	r22, r26
    1f40:	cf 01       	movw	r24, r30
    1f42:	08 95       	ret

00001f44 <__udivmodhi4>:
    1f44:	aa 1b       	sub	r26, r26
    1f46:	bb 1b       	sub	r27, r27
    1f48:	51 e1       	ldi	r21, 0x11	; 17
    1f4a:	07 c0       	rjmp	.+14     	; 0x1f5a <__udivmodhi4_ep>

00001f4c <__udivmodhi4_loop>:
    1f4c:	aa 1f       	adc	r26, r26
    1f4e:	bb 1f       	adc	r27, r27
    1f50:	a6 17       	cp	r26, r22
    1f52:	b7 07       	cpc	r27, r23
    1f54:	10 f0       	brcs	.+4      	; 0x1f5a <__udivmodhi4_ep>
    1f56:	a6 1b       	sub	r26, r22
    1f58:	b7 0b       	sbc	r27, r23

00001f5a <__udivmodhi4_ep>:
    1f5a:	88 1f       	adc	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	5a 95       	dec	r21
    1f60:	a9 f7       	brne	.-22     	; 0x1f4c <__udivmodhi4_loop>
    1f62:	80 95       	com	r24
    1f64:	90 95       	com	r25
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	08 95       	ret

00001f6c <__itoa_ncheck>:
    1f6c:	bb 27       	eor	r27, r27
    1f6e:	4a 30       	cpi	r20, 0x0A	; 10
    1f70:	31 f4       	brne	.+12     	; 0x1f7e <__itoa_ncheck+0x12>
    1f72:	99 23       	and	r25, r25
    1f74:	22 f4       	brpl	.+8      	; 0x1f7e <__itoa_ncheck+0x12>
    1f76:	bd e2       	ldi	r27, 0x2D	; 45
    1f78:	90 95       	com	r25
    1f7a:	81 95       	neg	r24
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__utoa_common>

00001f82 <__utoa_ncheck>:
    1f82:	bb 27       	eor	r27, r27

00001f84 <__utoa_common>:
    1f84:	fb 01       	movw	r30, r22
    1f86:	55 27       	eor	r21, r21
    1f88:	aa 27       	eor	r26, r26
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	aa 1f       	adc	r26, r26
    1f90:	a4 17       	cp	r26, r20
    1f92:	10 f0       	brcs	.+4      	; 0x1f98 <__utoa_common+0x14>
    1f94:	a4 1b       	sub	r26, r20
    1f96:	83 95       	inc	r24
    1f98:	50 51       	subi	r21, 0x10	; 16
    1f9a:	b9 f7       	brne	.-18     	; 0x1f8a <__utoa_common+0x6>
    1f9c:	a0 5d       	subi	r26, 0xD0	; 208
    1f9e:	aa 33       	cpi	r26, 0x3A	; 58
    1fa0:	08 f0       	brcs	.+2      	; 0x1fa4 <__utoa_common+0x20>
    1fa2:	a9 5d       	subi	r26, 0xD9	; 217
    1fa4:	a1 93       	st	Z+, r26
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	79 f7       	brne	.-34     	; 0x1f88 <__utoa_common+0x4>
    1faa:	b1 11       	cpse	r27, r1
    1fac:	b1 93       	st	Z+, r27
    1fae:	11 92       	st	Z+, r1
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <strrev>

00001fb6 <fdevopen>:
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	31 f4       	brne	.+12     	; 0x1fce <fdevopen+0x18>
    1fc2:	61 15       	cp	r22, r1
    1fc4:	71 05       	cpc	r23, r1
    1fc6:	19 f4       	brne	.+6      	; 0x1fce <fdevopen+0x18>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	3a c0       	rjmp	.+116    	; 0x2042 <fdevopen+0x8c>
    1fce:	8b 01       	movw	r16, r22
    1fd0:	ec 01       	movw	r28, r24
    1fd2:	6e e0       	ldi	r22, 0x0E	; 14
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 1d 12 	call	0x243a	; 0x243a <calloc>
    1fde:	fc 01       	movw	r30, r24
    1fe0:	89 2b       	or	r24, r25
    1fe2:	91 f3       	breq	.-28     	; 0x1fc8 <fdevopen+0x12>
    1fe4:	80 e8       	ldi	r24, 0x80	; 128
    1fe6:	83 83       	std	Z+3, r24	; 0x03
    1fe8:	01 15       	cp	r16, r1
    1fea:	11 05       	cpc	r17, r1
    1fec:	71 f0       	breq	.+28     	; 0x200a <fdevopen+0x54>
    1fee:	13 87       	std	Z+11, r17	; 0x0b
    1ff0:	02 87       	std	Z+10, r16	; 0x0a
    1ff2:	81 e8       	ldi	r24, 0x81	; 129
    1ff4:	83 83       	std	Z+3, r24	; 0x03
    1ff6:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__iob>
    1ffa:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <__iob+0x1>
    1ffe:	89 2b       	or	r24, r25
    2000:	21 f4       	brne	.+8      	; 0x200a <fdevopen+0x54>
    2002:	f0 93 55 04 	sts	0x0455, r31	; 0x800455 <__iob+0x1>
    2006:	e0 93 54 04 	sts	0x0454, r30	; 0x800454 <__iob>
    200a:	20 97       	sbiw	r28, 0x00	; 0
    200c:	c9 f0       	breq	.+50     	; 0x2040 <fdevopen+0x8a>
    200e:	d1 87       	std	Z+9, r29	; 0x09
    2010:	c0 87       	std	Z+8, r28	; 0x08
    2012:	83 81       	ldd	r24, Z+3	; 0x03
    2014:	82 60       	ori	r24, 0x02	; 2
    2016:	83 83       	std	Z+3, r24	; 0x03
    2018:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__iob+0x2>
    201c:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <__iob+0x3>
    2020:	89 2b       	or	r24, r25
    2022:	71 f4       	brne	.+28     	; 0x2040 <fdevopen+0x8a>
    2024:	f0 93 57 04 	sts	0x0457, r31	; 0x800457 <__iob+0x3>
    2028:	e0 93 56 04 	sts	0x0456, r30	; 0x800456 <__iob+0x2>
    202c:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__iob+0x4>
    2030:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <__iob+0x5>
    2034:	89 2b       	or	r24, r25
    2036:	21 f4       	brne	.+8      	; 0x2040 <fdevopen+0x8a>
    2038:	f0 93 59 04 	sts	0x0459, r31	; 0x800459 <__iob+0x5>
    203c:	e0 93 58 04 	sts	0x0458, r30	; 0x800458 <__iob+0x4>
    2040:	cf 01       	movw	r24, r30
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	08 95       	ret

0000204c <printf>:
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	ec e2       	ldi	r30, 0x2C	; 44
    2052:	f0 e1       	ldi	r31, 0x10	; 16
    2054:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__+0x20>
    2058:	ae 01       	movw	r20, r28
    205a:	4b 5f       	subi	r20, 0xFB	; 251
    205c:	5f 4f       	sbci	r21, 0xFF	; 255
    205e:	fa 01       	movw	r30, r20
    2060:	61 91       	ld	r22, Z+
    2062:	71 91       	ld	r23, Z+
    2064:	af 01       	movw	r20, r30
    2066:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__iob+0x2>
    206a:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <__iob+0x3>
    206e:	0e 94 3c 10 	call	0x2078	; 0x2078 <vfprintf>
    2072:	e2 e0       	ldi	r30, 0x02	; 2
    2074:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__+0x20>

00002078 <vfprintf>:
    2078:	ab e0       	ldi	r26, 0x0B	; 11
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e2 e4       	ldi	r30, 0x42	; 66
    207e:	f0 e1       	ldi	r31, 0x10	; 16
    2080:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__prologue_saves__>
    2084:	6c 01       	movw	r12, r24
    2086:	7b 01       	movw	r14, r22
    2088:	8a 01       	movw	r16, r20
    208a:	fc 01       	movw	r30, r24
    208c:	17 82       	std	Z+7, r1	; 0x07
    208e:	16 82       	std	Z+6, r1	; 0x06
    2090:	83 81       	ldd	r24, Z+3	; 0x03
    2092:	81 ff       	sbrs	r24, 1
    2094:	cc c1       	rjmp	.+920    	; 0x242e <vfprintf+0x3b6>
    2096:	ce 01       	movw	r24, r28
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	3c 01       	movw	r6, r24
    209c:	f6 01       	movw	r30, r12
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	f7 01       	movw	r30, r14
    20a2:	93 fd       	sbrc	r25, 3
    20a4:	85 91       	lpm	r24, Z+
    20a6:	93 ff       	sbrs	r25, 3
    20a8:	81 91       	ld	r24, Z+
    20aa:	7f 01       	movw	r14, r30
    20ac:	88 23       	and	r24, r24
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <vfprintf+0x3a>
    20b0:	ba c1       	rjmp	.+884    	; 0x2426 <vfprintf+0x3ae>
    20b2:	85 32       	cpi	r24, 0x25	; 37
    20b4:	39 f4       	brne	.+14     	; 0x20c4 <vfprintf+0x4c>
    20b6:	93 fd       	sbrc	r25, 3
    20b8:	85 91       	lpm	r24, Z+
    20ba:	93 ff       	sbrs	r25, 3
    20bc:	81 91       	ld	r24, Z+
    20be:	7f 01       	movw	r14, r30
    20c0:	85 32       	cpi	r24, 0x25	; 37
    20c2:	29 f4       	brne	.+10     	; 0x20ce <vfprintf+0x56>
    20c4:	b6 01       	movw	r22, r12
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    20cc:	e7 cf       	rjmp	.-50     	; 0x209c <vfprintf+0x24>
    20ce:	91 2c       	mov	r9, r1
    20d0:	21 2c       	mov	r2, r1
    20d2:	31 2c       	mov	r3, r1
    20d4:	ff e1       	ldi	r31, 0x1F	; 31
    20d6:	f3 15       	cp	r31, r3
    20d8:	d8 f0       	brcs	.+54     	; 0x2110 <vfprintf+0x98>
    20da:	8b 32       	cpi	r24, 0x2B	; 43
    20dc:	79 f0       	breq	.+30     	; 0x20fc <vfprintf+0x84>
    20de:	38 f4       	brcc	.+14     	; 0x20ee <vfprintf+0x76>
    20e0:	80 32       	cpi	r24, 0x20	; 32
    20e2:	79 f0       	breq	.+30     	; 0x2102 <vfprintf+0x8a>
    20e4:	83 32       	cpi	r24, 0x23	; 35
    20e6:	a1 f4       	brne	.+40     	; 0x2110 <vfprintf+0x98>
    20e8:	23 2d       	mov	r18, r3
    20ea:	20 61       	ori	r18, 0x10	; 16
    20ec:	1d c0       	rjmp	.+58     	; 0x2128 <vfprintf+0xb0>
    20ee:	8d 32       	cpi	r24, 0x2D	; 45
    20f0:	61 f0       	breq	.+24     	; 0x210a <vfprintf+0x92>
    20f2:	80 33       	cpi	r24, 0x30	; 48
    20f4:	69 f4       	brne	.+26     	; 0x2110 <vfprintf+0x98>
    20f6:	23 2d       	mov	r18, r3
    20f8:	21 60       	ori	r18, 0x01	; 1
    20fa:	16 c0       	rjmp	.+44     	; 0x2128 <vfprintf+0xb0>
    20fc:	83 2d       	mov	r24, r3
    20fe:	82 60       	ori	r24, 0x02	; 2
    2100:	38 2e       	mov	r3, r24
    2102:	e3 2d       	mov	r30, r3
    2104:	e4 60       	ori	r30, 0x04	; 4
    2106:	3e 2e       	mov	r3, r30
    2108:	2a c0       	rjmp	.+84     	; 0x215e <vfprintf+0xe6>
    210a:	f3 2d       	mov	r31, r3
    210c:	f8 60       	ori	r31, 0x08	; 8
    210e:	1d c0       	rjmp	.+58     	; 0x214a <vfprintf+0xd2>
    2110:	37 fc       	sbrc	r3, 7
    2112:	2d c0       	rjmp	.+90     	; 0x216e <vfprintf+0xf6>
    2114:	20 ed       	ldi	r18, 0xD0	; 208
    2116:	28 0f       	add	r18, r24
    2118:	2a 30       	cpi	r18, 0x0A	; 10
    211a:	40 f0       	brcs	.+16     	; 0x212c <vfprintf+0xb4>
    211c:	8e 32       	cpi	r24, 0x2E	; 46
    211e:	b9 f4       	brne	.+46     	; 0x214e <vfprintf+0xd6>
    2120:	36 fc       	sbrc	r3, 6
    2122:	81 c1       	rjmp	.+770    	; 0x2426 <vfprintf+0x3ae>
    2124:	23 2d       	mov	r18, r3
    2126:	20 64       	ori	r18, 0x40	; 64
    2128:	32 2e       	mov	r3, r18
    212a:	19 c0       	rjmp	.+50     	; 0x215e <vfprintf+0xe6>
    212c:	36 fe       	sbrs	r3, 6
    212e:	06 c0       	rjmp	.+12     	; 0x213c <vfprintf+0xc4>
    2130:	8a e0       	ldi	r24, 0x0A	; 10
    2132:	98 9e       	mul	r9, r24
    2134:	20 0d       	add	r18, r0
    2136:	11 24       	eor	r1, r1
    2138:	92 2e       	mov	r9, r18
    213a:	11 c0       	rjmp	.+34     	; 0x215e <vfprintf+0xe6>
    213c:	ea e0       	ldi	r30, 0x0A	; 10
    213e:	2e 9e       	mul	r2, r30
    2140:	20 0d       	add	r18, r0
    2142:	11 24       	eor	r1, r1
    2144:	22 2e       	mov	r2, r18
    2146:	f3 2d       	mov	r31, r3
    2148:	f0 62       	ori	r31, 0x20	; 32
    214a:	3f 2e       	mov	r3, r31
    214c:	08 c0       	rjmp	.+16     	; 0x215e <vfprintf+0xe6>
    214e:	8c 36       	cpi	r24, 0x6C	; 108
    2150:	21 f4       	brne	.+8      	; 0x215a <vfprintf+0xe2>
    2152:	83 2d       	mov	r24, r3
    2154:	80 68       	ori	r24, 0x80	; 128
    2156:	38 2e       	mov	r3, r24
    2158:	02 c0       	rjmp	.+4      	; 0x215e <vfprintf+0xe6>
    215a:	88 36       	cpi	r24, 0x68	; 104
    215c:	41 f4       	brne	.+16     	; 0x216e <vfprintf+0xf6>
    215e:	f7 01       	movw	r30, r14
    2160:	93 fd       	sbrc	r25, 3
    2162:	85 91       	lpm	r24, Z+
    2164:	93 ff       	sbrs	r25, 3
    2166:	81 91       	ld	r24, Z+
    2168:	7f 01       	movw	r14, r30
    216a:	81 11       	cpse	r24, r1
    216c:	b3 cf       	rjmp	.-154    	; 0x20d4 <vfprintf+0x5c>
    216e:	98 2f       	mov	r25, r24
    2170:	9f 7d       	andi	r25, 0xDF	; 223
    2172:	95 54       	subi	r25, 0x45	; 69
    2174:	93 30       	cpi	r25, 0x03	; 3
    2176:	28 f4       	brcc	.+10     	; 0x2182 <vfprintf+0x10a>
    2178:	0c 5f       	subi	r16, 0xFC	; 252
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
    217c:	9f e3       	ldi	r25, 0x3F	; 63
    217e:	99 83       	std	Y+1, r25	; 0x01
    2180:	0d c0       	rjmp	.+26     	; 0x219c <vfprintf+0x124>
    2182:	83 36       	cpi	r24, 0x63	; 99
    2184:	31 f0       	breq	.+12     	; 0x2192 <vfprintf+0x11a>
    2186:	83 37       	cpi	r24, 0x73	; 115
    2188:	71 f0       	breq	.+28     	; 0x21a6 <vfprintf+0x12e>
    218a:	83 35       	cpi	r24, 0x53	; 83
    218c:	09 f0       	breq	.+2      	; 0x2190 <vfprintf+0x118>
    218e:	59 c0       	rjmp	.+178    	; 0x2242 <vfprintf+0x1ca>
    2190:	21 c0       	rjmp	.+66     	; 0x21d4 <vfprintf+0x15c>
    2192:	f8 01       	movw	r30, r16
    2194:	80 81       	ld	r24, Z
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	0e 5f       	subi	r16, 0xFE	; 254
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	88 24       	eor	r8, r8
    219e:	83 94       	inc	r8
    21a0:	91 2c       	mov	r9, r1
    21a2:	53 01       	movw	r10, r6
    21a4:	13 c0       	rjmp	.+38     	; 0x21cc <vfprintf+0x154>
    21a6:	28 01       	movw	r4, r16
    21a8:	f2 e0       	ldi	r31, 0x02	; 2
    21aa:	4f 0e       	add	r4, r31
    21ac:	51 1c       	adc	r5, r1
    21ae:	f8 01       	movw	r30, r16
    21b0:	a0 80       	ld	r10, Z
    21b2:	b1 80       	ldd	r11, Z+1	; 0x01
    21b4:	36 fe       	sbrs	r3, 6
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <vfprintf+0x146>
    21b8:	69 2d       	mov	r22, r9
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <vfprintf+0x14a>
    21be:	6f ef       	ldi	r22, 0xFF	; 255
    21c0:	7f ef       	ldi	r23, 0xFF	; 255
    21c2:	c5 01       	movw	r24, r10
    21c4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <strnlen>
    21c8:	4c 01       	movw	r8, r24
    21ca:	82 01       	movw	r16, r4
    21cc:	f3 2d       	mov	r31, r3
    21ce:	ff 77       	andi	r31, 0x7F	; 127
    21d0:	3f 2e       	mov	r3, r31
    21d2:	16 c0       	rjmp	.+44     	; 0x2200 <vfprintf+0x188>
    21d4:	28 01       	movw	r4, r16
    21d6:	22 e0       	ldi	r18, 0x02	; 2
    21d8:	42 0e       	add	r4, r18
    21da:	51 1c       	adc	r5, r1
    21dc:	f8 01       	movw	r30, r16
    21de:	a0 80       	ld	r10, Z
    21e0:	b1 80       	ldd	r11, Z+1	; 0x01
    21e2:	36 fe       	sbrs	r3, 6
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <vfprintf+0x174>
    21e6:	69 2d       	mov	r22, r9
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <vfprintf+0x178>
    21ec:	6f ef       	ldi	r22, 0xFF	; 255
    21ee:	7f ef       	ldi	r23, 0xFF	; 255
    21f0:	c5 01       	movw	r24, r10
    21f2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <strnlen_P>
    21f6:	4c 01       	movw	r8, r24
    21f8:	f3 2d       	mov	r31, r3
    21fa:	f0 68       	ori	r31, 0x80	; 128
    21fc:	3f 2e       	mov	r3, r31
    21fe:	82 01       	movw	r16, r4
    2200:	33 fc       	sbrc	r3, 3
    2202:	1b c0       	rjmp	.+54     	; 0x223a <vfprintf+0x1c2>
    2204:	82 2d       	mov	r24, r2
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	88 16       	cp	r8, r24
    220a:	99 06       	cpc	r9, r25
    220c:	b0 f4       	brcc	.+44     	; 0x223a <vfprintf+0x1c2>
    220e:	b6 01       	movw	r22, r12
    2210:	80 e2       	ldi	r24, 0x20	; 32
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    2218:	2a 94       	dec	r2
    221a:	f4 cf       	rjmp	.-24     	; 0x2204 <vfprintf+0x18c>
    221c:	f5 01       	movw	r30, r10
    221e:	37 fc       	sbrc	r3, 7
    2220:	85 91       	lpm	r24, Z+
    2222:	37 fe       	sbrs	r3, 7
    2224:	81 91       	ld	r24, Z+
    2226:	5f 01       	movw	r10, r30
    2228:	b6 01       	movw	r22, r12
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    2230:	21 10       	cpse	r2, r1
    2232:	2a 94       	dec	r2
    2234:	21 e0       	ldi	r18, 0x01	; 1
    2236:	82 1a       	sub	r8, r18
    2238:	91 08       	sbc	r9, r1
    223a:	81 14       	cp	r8, r1
    223c:	91 04       	cpc	r9, r1
    223e:	71 f7       	brne	.-36     	; 0x221c <vfprintf+0x1a4>
    2240:	e8 c0       	rjmp	.+464    	; 0x2412 <vfprintf+0x39a>
    2242:	84 36       	cpi	r24, 0x64	; 100
    2244:	11 f0       	breq	.+4      	; 0x224a <vfprintf+0x1d2>
    2246:	89 36       	cpi	r24, 0x69	; 105
    2248:	41 f5       	brne	.+80     	; 0x229a <vfprintf+0x222>
    224a:	f8 01       	movw	r30, r16
    224c:	37 fe       	sbrs	r3, 7
    224e:	07 c0       	rjmp	.+14     	; 0x225e <vfprintf+0x1e6>
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	0c 5f       	subi	r16, 0xFC	; 252
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	08 c0       	rjmp	.+16     	; 0x226e <vfprintf+0x1f6>
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	07 2e       	mov	r0, r23
    2264:	00 0c       	add	r0, r0
    2266:	88 0b       	sbc	r24, r24
    2268:	99 0b       	sbc	r25, r25
    226a:	0e 5f       	subi	r16, 0xFE	; 254
    226c:	1f 4f       	sbci	r17, 0xFF	; 255
    226e:	f3 2d       	mov	r31, r3
    2270:	ff 76       	andi	r31, 0x6F	; 111
    2272:	3f 2e       	mov	r3, r31
    2274:	97 ff       	sbrs	r25, 7
    2276:	09 c0       	rjmp	.+18     	; 0x228a <vfprintf+0x212>
    2278:	90 95       	com	r25
    227a:	80 95       	com	r24
    227c:	70 95       	com	r23
    227e:	61 95       	neg	r22
    2280:	7f 4f       	sbci	r23, 0xFF	; 255
    2282:	8f 4f       	sbci	r24, 0xFF	; 255
    2284:	9f 4f       	sbci	r25, 0xFF	; 255
    2286:	f0 68       	ori	r31, 0x80	; 128
    2288:	3f 2e       	mov	r3, r31
    228a:	2a e0       	ldi	r18, 0x0A	; 10
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	a3 01       	movw	r20, r6
    2290:	0e 94 c3 13 	call	0x2786	; 0x2786 <__ultoa_invert>
    2294:	88 2e       	mov	r8, r24
    2296:	86 18       	sub	r8, r6
    2298:	45 c0       	rjmp	.+138    	; 0x2324 <vfprintf+0x2ac>
    229a:	85 37       	cpi	r24, 0x75	; 117
    229c:	31 f4       	brne	.+12     	; 0x22aa <vfprintf+0x232>
    229e:	23 2d       	mov	r18, r3
    22a0:	2f 7e       	andi	r18, 0xEF	; 239
    22a2:	b2 2e       	mov	r11, r18
    22a4:	2a e0       	ldi	r18, 0x0A	; 10
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	25 c0       	rjmp	.+74     	; 0x22f4 <vfprintf+0x27c>
    22aa:	93 2d       	mov	r25, r3
    22ac:	99 7f       	andi	r25, 0xF9	; 249
    22ae:	b9 2e       	mov	r11, r25
    22b0:	8f 36       	cpi	r24, 0x6F	; 111
    22b2:	c1 f0       	breq	.+48     	; 0x22e4 <vfprintf+0x26c>
    22b4:	18 f4       	brcc	.+6      	; 0x22bc <vfprintf+0x244>
    22b6:	88 35       	cpi	r24, 0x58	; 88
    22b8:	79 f0       	breq	.+30     	; 0x22d8 <vfprintf+0x260>
    22ba:	b5 c0       	rjmp	.+362    	; 0x2426 <vfprintf+0x3ae>
    22bc:	80 37       	cpi	r24, 0x70	; 112
    22be:	19 f0       	breq	.+6      	; 0x22c6 <vfprintf+0x24e>
    22c0:	88 37       	cpi	r24, 0x78	; 120
    22c2:	21 f0       	breq	.+8      	; 0x22cc <vfprintf+0x254>
    22c4:	b0 c0       	rjmp	.+352    	; 0x2426 <vfprintf+0x3ae>
    22c6:	e9 2f       	mov	r30, r25
    22c8:	e0 61       	ori	r30, 0x10	; 16
    22ca:	be 2e       	mov	r11, r30
    22cc:	b4 fe       	sbrs	r11, 4
    22ce:	0d c0       	rjmp	.+26     	; 0x22ea <vfprintf+0x272>
    22d0:	fb 2d       	mov	r31, r11
    22d2:	f4 60       	ori	r31, 0x04	; 4
    22d4:	bf 2e       	mov	r11, r31
    22d6:	09 c0       	rjmp	.+18     	; 0x22ea <vfprintf+0x272>
    22d8:	34 fe       	sbrs	r3, 4
    22da:	0a c0       	rjmp	.+20     	; 0x22f0 <vfprintf+0x278>
    22dc:	29 2f       	mov	r18, r25
    22de:	26 60       	ori	r18, 0x06	; 6
    22e0:	b2 2e       	mov	r11, r18
    22e2:	06 c0       	rjmp	.+12     	; 0x22f0 <vfprintf+0x278>
    22e4:	28 e0       	ldi	r18, 0x08	; 8
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	05 c0       	rjmp	.+10     	; 0x22f4 <vfprintf+0x27c>
    22ea:	20 e1       	ldi	r18, 0x10	; 16
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <vfprintf+0x27c>
    22f0:	20 e1       	ldi	r18, 0x10	; 16
    22f2:	32 e0       	ldi	r19, 0x02	; 2
    22f4:	f8 01       	movw	r30, r16
    22f6:	b7 fe       	sbrs	r11, 7
    22f8:	07 c0       	rjmp	.+14     	; 0x2308 <vfprintf+0x290>
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	0c 5f       	subi	r16, 0xFC	; 252
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <vfprintf+0x29c>
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0e 5f       	subi	r16, 0xFE	; 254
    2312:	1f 4f       	sbci	r17, 0xFF	; 255
    2314:	a3 01       	movw	r20, r6
    2316:	0e 94 c3 13 	call	0x2786	; 0x2786 <__ultoa_invert>
    231a:	88 2e       	mov	r8, r24
    231c:	86 18       	sub	r8, r6
    231e:	fb 2d       	mov	r31, r11
    2320:	ff 77       	andi	r31, 0x7F	; 127
    2322:	3f 2e       	mov	r3, r31
    2324:	36 fe       	sbrs	r3, 6
    2326:	0d c0       	rjmp	.+26     	; 0x2342 <vfprintf+0x2ca>
    2328:	23 2d       	mov	r18, r3
    232a:	2e 7f       	andi	r18, 0xFE	; 254
    232c:	a2 2e       	mov	r10, r18
    232e:	89 14       	cp	r8, r9
    2330:	58 f4       	brcc	.+22     	; 0x2348 <vfprintf+0x2d0>
    2332:	34 fe       	sbrs	r3, 4
    2334:	0b c0       	rjmp	.+22     	; 0x234c <vfprintf+0x2d4>
    2336:	32 fc       	sbrc	r3, 2
    2338:	09 c0       	rjmp	.+18     	; 0x234c <vfprintf+0x2d4>
    233a:	83 2d       	mov	r24, r3
    233c:	8e 7e       	andi	r24, 0xEE	; 238
    233e:	a8 2e       	mov	r10, r24
    2340:	05 c0       	rjmp	.+10     	; 0x234c <vfprintf+0x2d4>
    2342:	b8 2c       	mov	r11, r8
    2344:	a3 2c       	mov	r10, r3
    2346:	03 c0       	rjmp	.+6      	; 0x234e <vfprintf+0x2d6>
    2348:	b8 2c       	mov	r11, r8
    234a:	01 c0       	rjmp	.+2      	; 0x234e <vfprintf+0x2d6>
    234c:	b9 2c       	mov	r11, r9
    234e:	a4 fe       	sbrs	r10, 4
    2350:	0f c0       	rjmp	.+30     	; 0x2370 <vfprintf+0x2f8>
    2352:	fe 01       	movw	r30, r28
    2354:	e8 0d       	add	r30, r8
    2356:	f1 1d       	adc	r31, r1
    2358:	80 81       	ld	r24, Z
    235a:	80 33       	cpi	r24, 0x30	; 48
    235c:	21 f4       	brne	.+8      	; 0x2366 <vfprintf+0x2ee>
    235e:	9a 2d       	mov	r25, r10
    2360:	99 7e       	andi	r25, 0xE9	; 233
    2362:	a9 2e       	mov	r10, r25
    2364:	09 c0       	rjmp	.+18     	; 0x2378 <vfprintf+0x300>
    2366:	a2 fe       	sbrs	r10, 2
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <vfprintf+0x2fe>
    236a:	b3 94       	inc	r11
    236c:	b3 94       	inc	r11
    236e:	04 c0       	rjmp	.+8      	; 0x2378 <vfprintf+0x300>
    2370:	8a 2d       	mov	r24, r10
    2372:	86 78       	andi	r24, 0x86	; 134
    2374:	09 f0       	breq	.+2      	; 0x2378 <vfprintf+0x300>
    2376:	b3 94       	inc	r11
    2378:	a3 fc       	sbrc	r10, 3
    237a:	11 c0       	rjmp	.+34     	; 0x239e <vfprintf+0x326>
    237c:	a0 fe       	sbrs	r10, 0
    237e:	06 c0       	rjmp	.+12     	; 0x238c <vfprintf+0x314>
    2380:	b2 14       	cp	r11, r2
    2382:	88 f4       	brcc	.+34     	; 0x23a6 <vfprintf+0x32e>
    2384:	28 0c       	add	r2, r8
    2386:	92 2c       	mov	r9, r2
    2388:	9b 18       	sub	r9, r11
    238a:	0e c0       	rjmp	.+28     	; 0x23a8 <vfprintf+0x330>
    238c:	b2 14       	cp	r11, r2
    238e:	60 f4       	brcc	.+24     	; 0x23a8 <vfprintf+0x330>
    2390:	b6 01       	movw	r22, r12
    2392:	80 e2       	ldi	r24, 0x20	; 32
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    239a:	b3 94       	inc	r11
    239c:	f7 cf       	rjmp	.-18     	; 0x238c <vfprintf+0x314>
    239e:	b2 14       	cp	r11, r2
    23a0:	18 f4       	brcc	.+6      	; 0x23a8 <vfprintf+0x330>
    23a2:	2b 18       	sub	r2, r11
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <vfprintf+0x332>
    23a6:	98 2c       	mov	r9, r8
    23a8:	21 2c       	mov	r2, r1
    23aa:	a4 fe       	sbrs	r10, 4
    23ac:	10 c0       	rjmp	.+32     	; 0x23ce <vfprintf+0x356>
    23ae:	b6 01       	movw	r22, r12
    23b0:	80 e3       	ldi	r24, 0x30	; 48
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    23b8:	a2 fe       	sbrs	r10, 2
    23ba:	17 c0       	rjmp	.+46     	; 0x23ea <vfprintf+0x372>
    23bc:	a1 fc       	sbrc	r10, 1
    23be:	03 c0       	rjmp	.+6      	; 0x23c6 <vfprintf+0x34e>
    23c0:	88 e7       	ldi	r24, 0x78	; 120
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <vfprintf+0x352>
    23c6:	88 e5       	ldi	r24, 0x58	; 88
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	b6 01       	movw	r22, r12
    23cc:	0c c0       	rjmp	.+24     	; 0x23e6 <vfprintf+0x36e>
    23ce:	8a 2d       	mov	r24, r10
    23d0:	86 78       	andi	r24, 0x86	; 134
    23d2:	59 f0       	breq	.+22     	; 0x23ea <vfprintf+0x372>
    23d4:	a1 fe       	sbrs	r10, 1
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <vfprintf+0x364>
    23d8:	8b e2       	ldi	r24, 0x2B	; 43
    23da:	01 c0       	rjmp	.+2      	; 0x23de <vfprintf+0x366>
    23dc:	80 e2       	ldi	r24, 0x20	; 32
    23de:	a7 fc       	sbrc	r10, 7
    23e0:	8d e2       	ldi	r24, 0x2D	; 45
    23e2:	b6 01       	movw	r22, r12
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    23ea:	89 14       	cp	r8, r9
    23ec:	38 f4       	brcc	.+14     	; 0x23fc <vfprintf+0x384>
    23ee:	b6 01       	movw	r22, r12
    23f0:	80 e3       	ldi	r24, 0x30	; 48
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    23f8:	9a 94       	dec	r9
    23fa:	f7 cf       	rjmp	.-18     	; 0x23ea <vfprintf+0x372>
    23fc:	8a 94       	dec	r8
    23fe:	f3 01       	movw	r30, r6
    2400:	e8 0d       	add	r30, r8
    2402:	f1 1d       	adc	r31, r1
    2404:	80 81       	ld	r24, Z
    2406:	b6 01       	movw	r22, r12
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    240e:	81 10       	cpse	r8, r1
    2410:	f5 cf       	rjmp	.-22     	; 0x23fc <vfprintf+0x384>
    2412:	22 20       	and	r2, r2
    2414:	09 f4       	brne	.+2      	; 0x2418 <vfprintf+0x3a0>
    2416:	42 ce       	rjmp	.-892    	; 0x209c <vfprintf+0x24>
    2418:	b6 01       	movw	r22, r12
    241a:	80 e2       	ldi	r24, 0x20	; 32
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    2422:	2a 94       	dec	r2
    2424:	f6 cf       	rjmp	.-20     	; 0x2412 <vfprintf+0x39a>
    2426:	f6 01       	movw	r30, r12
    2428:	86 81       	ldd	r24, Z+6	; 0x06
    242a:	97 81       	ldd	r25, Z+7	; 0x07
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <vfprintf+0x3ba>
    242e:	8f ef       	ldi	r24, 0xFF	; 255
    2430:	9f ef       	ldi	r25, 0xFF	; 255
    2432:	2b 96       	adiw	r28, 0x0b	; 11
    2434:	e2 e1       	ldi	r30, 0x12	; 18
    2436:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__epilogue_restores__>

0000243a <calloc>:
    243a:	0f 93       	push	r16
    243c:	1f 93       	push	r17
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	86 9f       	mul	r24, r22
    2444:	80 01       	movw	r16, r0
    2446:	87 9f       	mul	r24, r23
    2448:	10 0d       	add	r17, r0
    244a:	96 9f       	mul	r25, r22
    244c:	10 0d       	add	r17, r0
    244e:	11 24       	eor	r1, r1
    2450:	c8 01       	movw	r24, r16
    2452:	0e 94 39 12 	call	0x2472	; 0x2472 <malloc>
    2456:	ec 01       	movw	r28, r24
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	29 f0       	breq	.+10     	; 0x2466 <calloc+0x2c>
    245c:	a8 01       	movw	r20, r16
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	0e 94 65 13 	call	0x26ca	; 0x26ca <memset>
    2466:	ce 01       	movw	r24, r28
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	08 95       	ret

00002472 <malloc>:
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	82 30       	cpi	r24, 0x02	; 2
    247c:	91 05       	cpc	r25, r1
    247e:	10 f4       	brcc	.+4      	; 0x2484 <malloc+0x12>
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <__flp>
    2488:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <__flp+0x1>
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	a0 e0       	ldi	r26, 0x00	; 0
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	30 97       	sbiw	r30, 0x00	; 0
    2496:	19 f1       	breq	.+70     	; 0x24de <malloc+0x6c>
    2498:	40 81       	ld	r20, Z
    249a:	51 81       	ldd	r21, Z+1	; 0x01
    249c:	02 81       	ldd	r16, Z+2	; 0x02
    249e:	13 81       	ldd	r17, Z+3	; 0x03
    24a0:	48 17       	cp	r20, r24
    24a2:	59 07       	cpc	r21, r25
    24a4:	c8 f0       	brcs	.+50     	; 0x24d8 <malloc+0x66>
    24a6:	84 17       	cp	r24, r20
    24a8:	95 07       	cpc	r25, r21
    24aa:	69 f4       	brne	.+26     	; 0x24c6 <malloc+0x54>
    24ac:	10 97       	sbiw	r26, 0x00	; 0
    24ae:	31 f0       	breq	.+12     	; 0x24bc <malloc+0x4a>
    24b0:	12 96       	adiw	r26, 0x02	; 2
    24b2:	0c 93       	st	X, r16
    24b4:	12 97       	sbiw	r26, 0x02	; 2
    24b6:	13 96       	adiw	r26, 0x03	; 3
    24b8:	1c 93       	st	X, r17
    24ba:	27 c0       	rjmp	.+78     	; 0x250a <malloc+0x98>
    24bc:	00 93 5c 04 	sts	0x045C, r16	; 0x80045c <__flp>
    24c0:	10 93 5d 04 	sts	0x045D, r17	; 0x80045d <__flp+0x1>
    24c4:	22 c0       	rjmp	.+68     	; 0x250a <malloc+0x98>
    24c6:	21 15       	cp	r18, r1
    24c8:	31 05       	cpc	r19, r1
    24ca:	19 f0       	breq	.+6      	; 0x24d2 <malloc+0x60>
    24cc:	42 17       	cp	r20, r18
    24ce:	53 07       	cpc	r21, r19
    24d0:	18 f4       	brcc	.+6      	; 0x24d8 <malloc+0x66>
    24d2:	9a 01       	movw	r18, r20
    24d4:	bd 01       	movw	r22, r26
    24d6:	ef 01       	movw	r28, r30
    24d8:	df 01       	movw	r26, r30
    24da:	f8 01       	movw	r30, r16
    24dc:	db cf       	rjmp	.-74     	; 0x2494 <malloc+0x22>
    24de:	21 15       	cp	r18, r1
    24e0:	31 05       	cpc	r19, r1
    24e2:	f9 f0       	breq	.+62     	; 0x2522 <malloc+0xb0>
    24e4:	28 1b       	sub	r18, r24
    24e6:	39 0b       	sbc	r19, r25
    24e8:	24 30       	cpi	r18, 0x04	; 4
    24ea:	31 05       	cpc	r19, r1
    24ec:	80 f4       	brcc	.+32     	; 0x250e <malloc+0x9c>
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	9b 81       	ldd	r25, Y+3	; 0x03
    24f2:	61 15       	cp	r22, r1
    24f4:	71 05       	cpc	r23, r1
    24f6:	21 f0       	breq	.+8      	; 0x2500 <malloc+0x8e>
    24f8:	fb 01       	movw	r30, r22
    24fa:	93 83       	std	Z+3, r25	; 0x03
    24fc:	82 83       	std	Z+2, r24	; 0x02
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <malloc+0x96>
    2500:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <__flp+0x1>
    2504:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <__flp>
    2508:	fe 01       	movw	r30, r28
    250a:	32 96       	adiw	r30, 0x02	; 2
    250c:	44 c0       	rjmp	.+136    	; 0x2596 <malloc+0x124>
    250e:	fe 01       	movw	r30, r28
    2510:	e2 0f       	add	r30, r18
    2512:	f3 1f       	adc	r31, r19
    2514:	81 93       	st	Z+, r24
    2516:	91 93       	st	Z+, r25
    2518:	22 50       	subi	r18, 0x02	; 2
    251a:	31 09       	sbc	r19, r1
    251c:	39 83       	std	Y+1, r19	; 0x01
    251e:	28 83       	st	Y, r18
    2520:	3a c0       	rjmp	.+116    	; 0x2596 <malloc+0x124>
    2522:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <__brkval>
    2526:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <__brkval+0x1>
    252a:	23 2b       	or	r18, r19
    252c:	41 f4       	brne	.+16     	; 0x253e <malloc+0xcc>
    252e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2532:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2536:	30 93 5b 04 	sts	0x045B, r19	; 0x80045b <__brkval+0x1>
    253a:	20 93 5a 04 	sts	0x045A, r18	; 0x80045a <__brkval>
    253e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2542:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2546:	21 15       	cp	r18, r1
    2548:	31 05       	cpc	r19, r1
    254a:	41 f4       	brne	.+16     	; 0x255c <malloc+0xea>
    254c:	2d b7       	in	r18, 0x3d	; 61
    254e:	3e b7       	in	r19, 0x3e	; 62
    2550:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2554:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2558:	24 1b       	sub	r18, r20
    255a:	35 0b       	sbc	r19, r21
    255c:	e0 91 5a 04 	lds	r30, 0x045A	; 0x80045a <__brkval>
    2560:	f0 91 5b 04 	lds	r31, 0x045B	; 0x80045b <__brkval+0x1>
    2564:	e2 17       	cp	r30, r18
    2566:	f3 07       	cpc	r31, r19
    2568:	a0 f4       	brcc	.+40     	; 0x2592 <malloc+0x120>
    256a:	2e 1b       	sub	r18, r30
    256c:	3f 0b       	sbc	r19, r31
    256e:	28 17       	cp	r18, r24
    2570:	39 07       	cpc	r19, r25
    2572:	78 f0       	brcs	.+30     	; 0x2592 <malloc+0x120>
    2574:	ac 01       	movw	r20, r24
    2576:	4e 5f       	subi	r20, 0xFE	; 254
    2578:	5f 4f       	sbci	r21, 0xFF	; 255
    257a:	24 17       	cp	r18, r20
    257c:	35 07       	cpc	r19, r21
    257e:	48 f0       	brcs	.+18     	; 0x2592 <malloc+0x120>
    2580:	4e 0f       	add	r20, r30
    2582:	5f 1f       	adc	r21, r31
    2584:	50 93 5b 04 	sts	0x045B, r21	; 0x80045b <__brkval+0x1>
    2588:	40 93 5a 04 	sts	0x045A, r20	; 0x80045a <__brkval>
    258c:	81 93       	st	Z+, r24
    258e:	91 93       	st	Z+, r25
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <malloc+0x124>
    2592:	e0 e0       	ldi	r30, 0x00	; 0
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	cf 01       	movw	r24, r30
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	08 95       	ret

000025a2 <free>:
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	09 f4       	brne	.+2      	; 0x25ac <free+0xa>
    25aa:	81 c0       	rjmp	.+258    	; 0x26ae <free+0x10c>
    25ac:	fc 01       	movw	r30, r24
    25ae:	32 97       	sbiw	r30, 0x02	; 2
    25b0:	13 82       	std	Z+3, r1	; 0x03
    25b2:	12 82       	std	Z+2, r1	; 0x02
    25b4:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <__flp>
    25b8:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <__flp+0x1>
    25bc:	10 97       	sbiw	r26, 0x00	; 0
    25be:	81 f4       	brne	.+32     	; 0x25e0 <free+0x3e>
    25c0:	20 81       	ld	r18, Z
    25c2:	31 81       	ldd	r19, Z+1	; 0x01
    25c4:	82 0f       	add	r24, r18
    25c6:	93 1f       	adc	r25, r19
    25c8:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <__brkval>
    25cc:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <__brkval+0x1>
    25d0:	28 17       	cp	r18, r24
    25d2:	39 07       	cpc	r19, r25
    25d4:	51 f5       	brne	.+84     	; 0x262a <free+0x88>
    25d6:	f0 93 5b 04 	sts	0x045B, r31	; 0x80045b <__brkval+0x1>
    25da:	e0 93 5a 04 	sts	0x045A, r30	; 0x80045a <__brkval>
    25de:	67 c0       	rjmp	.+206    	; 0x26ae <free+0x10c>
    25e0:	ed 01       	movw	r28, r26
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	ce 17       	cp	r28, r30
    25e8:	df 07       	cpc	r29, r31
    25ea:	40 f4       	brcc	.+16     	; 0x25fc <free+0x5a>
    25ec:	4a 81       	ldd	r20, Y+2	; 0x02
    25ee:	5b 81       	ldd	r21, Y+3	; 0x03
    25f0:	9e 01       	movw	r18, r28
    25f2:	41 15       	cp	r20, r1
    25f4:	51 05       	cpc	r21, r1
    25f6:	f1 f0       	breq	.+60     	; 0x2634 <free+0x92>
    25f8:	ea 01       	movw	r28, r20
    25fa:	f5 cf       	rjmp	.-22     	; 0x25e6 <free+0x44>
    25fc:	d3 83       	std	Z+3, r29	; 0x03
    25fe:	c2 83       	std	Z+2, r28	; 0x02
    2600:	40 81       	ld	r20, Z
    2602:	51 81       	ldd	r21, Z+1	; 0x01
    2604:	84 0f       	add	r24, r20
    2606:	95 1f       	adc	r25, r21
    2608:	c8 17       	cp	r28, r24
    260a:	d9 07       	cpc	r29, r25
    260c:	59 f4       	brne	.+22     	; 0x2624 <free+0x82>
    260e:	88 81       	ld	r24, Y
    2610:	99 81       	ldd	r25, Y+1	; 0x01
    2612:	84 0f       	add	r24, r20
    2614:	95 1f       	adc	r25, r21
    2616:	02 96       	adiw	r24, 0x02	; 2
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	80 83       	st	Z, r24
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	9b 81       	ldd	r25, Y+3	; 0x03
    2620:	93 83       	std	Z+3, r25	; 0x03
    2622:	82 83       	std	Z+2, r24	; 0x02
    2624:	21 15       	cp	r18, r1
    2626:	31 05       	cpc	r19, r1
    2628:	29 f4       	brne	.+10     	; 0x2634 <free+0x92>
    262a:	f0 93 5d 04 	sts	0x045D, r31	; 0x80045d <__flp+0x1>
    262e:	e0 93 5c 04 	sts	0x045C, r30	; 0x80045c <__flp>
    2632:	3d c0       	rjmp	.+122    	; 0x26ae <free+0x10c>
    2634:	e9 01       	movw	r28, r18
    2636:	fb 83       	std	Y+3, r31	; 0x03
    2638:	ea 83       	std	Y+2, r30	; 0x02
    263a:	49 91       	ld	r20, Y+
    263c:	59 91       	ld	r21, Y+
    263e:	c4 0f       	add	r28, r20
    2640:	d5 1f       	adc	r29, r21
    2642:	ec 17       	cp	r30, r28
    2644:	fd 07       	cpc	r31, r29
    2646:	61 f4       	brne	.+24     	; 0x2660 <free+0xbe>
    2648:	80 81       	ld	r24, Z
    264a:	91 81       	ldd	r25, Z+1	; 0x01
    264c:	84 0f       	add	r24, r20
    264e:	95 1f       	adc	r25, r21
    2650:	02 96       	adiw	r24, 0x02	; 2
    2652:	e9 01       	movw	r28, r18
    2654:	99 83       	std	Y+1, r25	; 0x01
    2656:	88 83       	st	Y, r24
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	9b 83       	std	Y+3, r25	; 0x03
    265e:	8a 83       	std	Y+2, r24	; 0x02
    2660:	e0 e0       	ldi	r30, 0x00	; 0
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	12 96       	adiw	r26, 0x02	; 2
    2666:	8d 91       	ld	r24, X+
    2668:	9c 91       	ld	r25, X
    266a:	13 97       	sbiw	r26, 0x03	; 3
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	19 f0       	breq	.+6      	; 0x2676 <free+0xd4>
    2670:	fd 01       	movw	r30, r26
    2672:	dc 01       	movw	r26, r24
    2674:	f7 cf       	rjmp	.-18     	; 0x2664 <free+0xc2>
    2676:	8d 91       	ld	r24, X+
    2678:	9c 91       	ld	r25, X
    267a:	11 97       	sbiw	r26, 0x01	; 1
    267c:	9d 01       	movw	r18, r26
    267e:	2e 5f       	subi	r18, 0xFE	; 254
    2680:	3f 4f       	sbci	r19, 0xFF	; 255
    2682:	82 0f       	add	r24, r18
    2684:	93 1f       	adc	r25, r19
    2686:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <__brkval>
    268a:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <__brkval+0x1>
    268e:	28 17       	cp	r18, r24
    2690:	39 07       	cpc	r19, r25
    2692:	69 f4       	brne	.+26     	; 0x26ae <free+0x10c>
    2694:	30 97       	sbiw	r30, 0x00	; 0
    2696:	29 f4       	brne	.+10     	; 0x26a2 <free+0x100>
    2698:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <__flp+0x1>
    269c:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <__flp>
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <free+0x104>
    26a2:	13 82       	std	Z+3, r1	; 0x03
    26a4:	12 82       	std	Z+2, r1	; 0x02
    26a6:	b0 93 5b 04 	sts	0x045B, r27	; 0x80045b <__brkval+0x1>
    26aa:	a0 93 5a 04 	sts	0x045A, r26	; 0x80045a <__brkval>
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <strnlen_P>:
    26b4:	fc 01       	movw	r30, r24
    26b6:	05 90       	lpm	r0, Z+
    26b8:	61 50       	subi	r22, 0x01	; 1
    26ba:	70 40       	sbci	r23, 0x00	; 0
    26bc:	01 10       	cpse	r0, r1
    26be:	d8 f7       	brcc	.-10     	; 0x26b6 <strnlen_P+0x2>
    26c0:	80 95       	com	r24
    26c2:	90 95       	com	r25
    26c4:	8e 0f       	add	r24, r30
    26c6:	9f 1f       	adc	r25, r31
    26c8:	08 95       	ret

000026ca <memset>:
    26ca:	dc 01       	movw	r26, r24
    26cc:	01 c0       	rjmp	.+2      	; 0x26d0 <memset+0x6>
    26ce:	6d 93       	st	X+, r22
    26d0:	41 50       	subi	r20, 0x01	; 1
    26d2:	50 40       	sbci	r21, 0x00	; 0
    26d4:	e0 f7       	brcc	.-8      	; 0x26ce <memset+0x4>
    26d6:	08 95       	ret

000026d8 <strnlen>:
    26d8:	fc 01       	movw	r30, r24
    26da:	61 50       	subi	r22, 0x01	; 1
    26dc:	70 40       	sbci	r23, 0x00	; 0
    26de:	01 90       	ld	r0, Z+
    26e0:	01 10       	cpse	r0, r1
    26e2:	d8 f7       	brcc	.-10     	; 0x26da <strnlen+0x2>
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
    26e8:	8e 0f       	add	r24, r30
    26ea:	9f 1f       	adc	r25, r31
    26ec:	08 95       	ret

000026ee <strrev>:
    26ee:	dc 01       	movw	r26, r24
    26f0:	fc 01       	movw	r30, r24
    26f2:	67 2f       	mov	r22, r23
    26f4:	71 91       	ld	r23, Z+
    26f6:	77 23       	and	r23, r23
    26f8:	e1 f7       	brne	.-8      	; 0x26f2 <strrev+0x4>
    26fa:	32 97       	sbiw	r30, 0x02	; 2
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <strrev+0x18>
    26fe:	7c 91       	ld	r23, X
    2700:	6d 93       	st	X+, r22
    2702:	70 83       	st	Z, r23
    2704:	62 91       	ld	r22, -Z
    2706:	ae 17       	cp	r26, r30
    2708:	bf 07       	cpc	r27, r31
    270a:	c8 f3       	brcs	.-14     	; 0x26fe <strrev+0x10>
    270c:	08 95       	ret

0000270e <fputc>:
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	fb 01       	movw	r30, r22
    2718:	23 81       	ldd	r18, Z+3	; 0x03
    271a:	21 fd       	sbrc	r18, 1
    271c:	03 c0       	rjmp	.+6      	; 0x2724 <fputc+0x16>
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	9f ef       	ldi	r25, 0xFF	; 255
    2722:	2c c0       	rjmp	.+88     	; 0x277c <fputc+0x6e>
    2724:	22 ff       	sbrs	r18, 2
    2726:	16 c0       	rjmp	.+44     	; 0x2754 <fputc+0x46>
    2728:	46 81       	ldd	r20, Z+6	; 0x06
    272a:	57 81       	ldd	r21, Z+7	; 0x07
    272c:	24 81       	ldd	r18, Z+4	; 0x04
    272e:	35 81       	ldd	r19, Z+5	; 0x05
    2730:	42 17       	cp	r20, r18
    2732:	53 07       	cpc	r21, r19
    2734:	44 f4       	brge	.+16     	; 0x2746 <fputc+0x38>
    2736:	a0 81       	ld	r26, Z
    2738:	b1 81       	ldd	r27, Z+1	; 0x01
    273a:	9d 01       	movw	r18, r26
    273c:	2f 5f       	subi	r18, 0xFF	; 255
    273e:	3f 4f       	sbci	r19, 0xFF	; 255
    2740:	31 83       	std	Z+1, r19	; 0x01
    2742:	20 83       	st	Z, r18
    2744:	8c 93       	st	X, r24
    2746:	26 81       	ldd	r18, Z+6	; 0x06
    2748:	37 81       	ldd	r19, Z+7	; 0x07
    274a:	2f 5f       	subi	r18, 0xFF	; 255
    274c:	3f 4f       	sbci	r19, 0xFF	; 255
    274e:	37 83       	std	Z+7, r19	; 0x07
    2750:	26 83       	std	Z+6, r18	; 0x06
    2752:	14 c0       	rjmp	.+40     	; 0x277c <fputc+0x6e>
    2754:	8b 01       	movw	r16, r22
    2756:	ec 01       	movw	r28, r24
    2758:	fb 01       	movw	r30, r22
    275a:	00 84       	ldd	r0, Z+8	; 0x08
    275c:	f1 85       	ldd	r31, Z+9	; 0x09
    275e:	e0 2d       	mov	r30, r0
    2760:	09 95       	icall
    2762:	89 2b       	or	r24, r25
    2764:	e1 f6       	brne	.-72     	; 0x271e <fputc+0x10>
    2766:	d8 01       	movw	r26, r16
    2768:	16 96       	adiw	r26, 0x06	; 6
    276a:	8d 91       	ld	r24, X+
    276c:	9c 91       	ld	r25, X
    276e:	17 97       	sbiw	r26, 0x07	; 7
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	17 96       	adiw	r26, 0x07	; 7
    2774:	9c 93       	st	X, r25
    2776:	8e 93       	st	-X, r24
    2778:	16 97       	sbiw	r26, 0x06	; 6
    277a:	ce 01       	movw	r24, r28
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	08 95       	ret

00002786 <__ultoa_invert>:
    2786:	fa 01       	movw	r30, r20
    2788:	aa 27       	eor	r26, r26
    278a:	28 30       	cpi	r18, 0x08	; 8
    278c:	51 f1       	breq	.+84     	; 0x27e2 <__ultoa_invert+0x5c>
    278e:	20 31       	cpi	r18, 0x10	; 16
    2790:	81 f1       	breq	.+96     	; 0x27f2 <__ultoa_invert+0x6c>
    2792:	e8 94       	clt
    2794:	6f 93       	push	r22
    2796:	6e 7f       	andi	r22, 0xFE	; 254
    2798:	6e 5f       	subi	r22, 0xFE	; 254
    279a:	7f 4f       	sbci	r23, 0xFF	; 255
    279c:	8f 4f       	sbci	r24, 0xFF	; 255
    279e:	9f 4f       	sbci	r25, 0xFF	; 255
    27a0:	af 4f       	sbci	r26, 0xFF	; 255
    27a2:	b1 e0       	ldi	r27, 0x01	; 1
    27a4:	3e d0       	rcall	.+124    	; 0x2822 <__ultoa_invert+0x9c>
    27a6:	b4 e0       	ldi	r27, 0x04	; 4
    27a8:	3c d0       	rcall	.+120    	; 0x2822 <__ultoa_invert+0x9c>
    27aa:	67 0f       	add	r22, r23
    27ac:	78 1f       	adc	r23, r24
    27ae:	89 1f       	adc	r24, r25
    27b0:	9a 1f       	adc	r25, r26
    27b2:	a1 1d       	adc	r26, r1
    27b4:	68 0f       	add	r22, r24
    27b6:	79 1f       	adc	r23, r25
    27b8:	8a 1f       	adc	r24, r26
    27ba:	91 1d       	adc	r25, r1
    27bc:	a1 1d       	adc	r26, r1
    27be:	6a 0f       	add	r22, r26
    27c0:	71 1d       	adc	r23, r1
    27c2:	81 1d       	adc	r24, r1
    27c4:	91 1d       	adc	r25, r1
    27c6:	a1 1d       	adc	r26, r1
    27c8:	20 d0       	rcall	.+64     	; 0x280a <__ultoa_invert+0x84>
    27ca:	09 f4       	brne	.+2      	; 0x27ce <__ultoa_invert+0x48>
    27cc:	68 94       	set
    27ce:	3f 91       	pop	r19
    27d0:	2a e0       	ldi	r18, 0x0A	; 10
    27d2:	26 9f       	mul	r18, r22
    27d4:	11 24       	eor	r1, r1
    27d6:	30 19       	sub	r19, r0
    27d8:	30 5d       	subi	r19, 0xD0	; 208
    27da:	31 93       	st	Z+, r19
    27dc:	de f6       	brtc	.-74     	; 0x2794 <__ultoa_invert+0xe>
    27de:	cf 01       	movw	r24, r30
    27e0:	08 95       	ret
    27e2:	46 2f       	mov	r20, r22
    27e4:	47 70       	andi	r20, 0x07	; 7
    27e6:	40 5d       	subi	r20, 0xD0	; 208
    27e8:	41 93       	st	Z+, r20
    27ea:	b3 e0       	ldi	r27, 0x03	; 3
    27ec:	0f d0       	rcall	.+30     	; 0x280c <__ultoa_invert+0x86>
    27ee:	c9 f7       	brne	.-14     	; 0x27e2 <__ultoa_invert+0x5c>
    27f0:	f6 cf       	rjmp	.-20     	; 0x27de <__ultoa_invert+0x58>
    27f2:	46 2f       	mov	r20, r22
    27f4:	4f 70       	andi	r20, 0x0F	; 15
    27f6:	40 5d       	subi	r20, 0xD0	; 208
    27f8:	4a 33       	cpi	r20, 0x3A	; 58
    27fa:	18 f0       	brcs	.+6      	; 0x2802 <__ultoa_invert+0x7c>
    27fc:	49 5d       	subi	r20, 0xD9	; 217
    27fe:	31 fd       	sbrc	r19, 1
    2800:	40 52       	subi	r20, 0x20	; 32
    2802:	41 93       	st	Z+, r20
    2804:	02 d0       	rcall	.+4      	; 0x280a <__ultoa_invert+0x84>
    2806:	a9 f7       	brne	.-22     	; 0x27f2 <__ultoa_invert+0x6c>
    2808:	ea cf       	rjmp	.-44     	; 0x27de <__ultoa_invert+0x58>
    280a:	b4 e0       	ldi	r27, 0x04	; 4
    280c:	a6 95       	lsr	r26
    280e:	97 95       	ror	r25
    2810:	87 95       	ror	r24
    2812:	77 95       	ror	r23
    2814:	67 95       	ror	r22
    2816:	ba 95       	dec	r27
    2818:	c9 f7       	brne	.-14     	; 0x280c <__ultoa_invert+0x86>
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	61 05       	cpc	r22, r1
    281e:	71 05       	cpc	r23, r1
    2820:	08 95       	ret
    2822:	9b 01       	movw	r18, r22
    2824:	ac 01       	movw	r20, r24
    2826:	0a 2e       	mov	r0, r26
    2828:	06 94       	lsr	r0
    282a:	57 95       	ror	r21
    282c:	47 95       	ror	r20
    282e:	37 95       	ror	r19
    2830:	27 95       	ror	r18
    2832:	ba 95       	dec	r27
    2834:	c9 f7       	brne	.-14     	; 0x2828 <__ultoa_invert+0xa2>
    2836:	62 0f       	add	r22, r18
    2838:	73 1f       	adc	r23, r19
    283a:	84 1f       	adc	r24, r20
    283c:	95 1f       	adc	r25, r21
    283e:	a0 1d       	adc	r26, r0
    2840:	08 95       	ret

00002842 <__prologue_saves__>:
    2842:	2f 92       	push	r2
    2844:	3f 92       	push	r3
    2846:	4f 92       	push	r4
    2848:	5f 92       	push	r5
    284a:	6f 92       	push	r6
    284c:	7f 92       	push	r7
    284e:	8f 92       	push	r8
    2850:	9f 92       	push	r9
    2852:	af 92       	push	r10
    2854:	bf 92       	push	r11
    2856:	cf 92       	push	r12
    2858:	df 92       	push	r13
    285a:	ef 92       	push	r14
    285c:	ff 92       	push	r15
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	ca 1b       	sub	r28, r26
    286c:	db 0b       	sbc	r29, r27
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	09 94       	ijmp

0000287a <__epilogue_restores__>:
    287a:	2a 88       	ldd	r2, Y+18	; 0x12
    287c:	39 88       	ldd	r3, Y+17	; 0x11
    287e:	48 88       	ldd	r4, Y+16	; 0x10
    2880:	5f 84       	ldd	r5, Y+15	; 0x0f
    2882:	6e 84       	ldd	r6, Y+14	; 0x0e
    2884:	7d 84       	ldd	r7, Y+13	; 0x0d
    2886:	8c 84       	ldd	r8, Y+12	; 0x0c
    2888:	9b 84       	ldd	r9, Y+11	; 0x0b
    288a:	aa 84       	ldd	r10, Y+10	; 0x0a
    288c:	b9 84       	ldd	r11, Y+9	; 0x09
    288e:	c8 84       	ldd	r12, Y+8	; 0x08
    2890:	df 80       	ldd	r13, Y+7	; 0x07
    2892:	ee 80       	ldd	r14, Y+6	; 0x06
    2894:	fd 80       	ldd	r15, Y+5	; 0x05
    2896:	0c 81       	ldd	r16, Y+4	; 0x04
    2898:	1b 81       	ldd	r17, Y+3	; 0x03
    289a:	aa 81       	ldd	r26, Y+2	; 0x02
    289c:	b9 81       	ldd	r27, Y+1	; 0x01
    289e:	ce 0f       	add	r28, r30
    28a0:	d1 1d       	adc	r29, r1
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	ed 01       	movw	r28, r26
    28ae:	08 95       	ret

000028b0 <_exit>:
    28b0:	f8 94       	cli

000028b2 <__stop_program>:
    28b2:	ff cf       	rjmp	.-2      	; 0x28b2 <__stop_program>
