
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  0000296c  00002a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000296c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  008002d4  008002d4  00002bd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005764  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d41  00000000  00000000  000087c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022fd  00000000  00000000  0000a509  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  0000c808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d17  00000000  00000000  0000d0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023f5  00000000  00000000  0000ddf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	12 e0       	ldi	r17, 0x02	; 2
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	ec e6       	ldi	r30, 0x6C	; 108
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 3d       	cpi	r26, 0xD4	; 212
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a4 ed       	ldi	r26, 0xD4	; 212
     548:	b2 e0       	ldi	r27, 0x02	; 2
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a3 31       	cpi	r26, 0x13	; 19
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xfed>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xfed>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "sleep.h"
#include "slider.h"
#include "joystick.h"
#include "touchButton.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <setupInit>
	
	//Send initialize message to Node 2
	CAN_message_t message;
	message.ID = 0x10;
     5aa:	80 e1       	ldi	r24, 0x10	; 16
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 0;
     5b2:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&message);
     5b4:	ce 01       	movw	r24, r28
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	0e 94 41 03 	call	0x682	; 0x682 <CAN_transmit_message>
	
	printf("Starting program\n\r");
     5bc:	86 ea       	ldi	r24, 0xA6	; 166
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	0e 94 82 10 	call	0x2104	; 0x2104 <printf>
	printf("---------------------------------------\n\r");
     5c8:	89 eb       	ldi	r24, 0xB9	; 185
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 82 10 	call	0x2104	; 0x2104 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	8f e7       	ldi	r24, 0x7F	; 127
     5d8:	97 e0       	ldi	r25, 0x07	; 7
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	90 40       	sbci	r25, 0x00	; 0
     5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x48>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x52>
     5e4:	00 00       	nop
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
				menu_printCurrentMenu();
			}
			timerFlag=0;
			sei();
		}
		switch(currentMenu.currentMenuItem->nodeID){
     5ee:	02 ee       	ldi	r16, 0xE2	; 226
     5f0:	12 e0       	ldi	r17, 0x02	; 2
	
	printf("Starting program\n\r");
	printf("---------------------------------------\n\r");
	_delay_ms(500);    
	while (1) {
		if (timerFlag)
     5f2:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <timerFlag>
     5f6:	88 23       	and	r24, r24
     5f8:	c1 f0       	breq	.+48     	; 0x62a <main+0x98>
		{
			cli();
     5fa:	f8 94       	cli
			TCNT1 = 0x00;
     5fc:	1d bc       	out	0x2d, r1	; 45
     5fe:	1c bc       	out	0x2c, r1	; 44
			joystick_readPosition();
     600:	0e 94 49 09 	call	0x1292	; 0x1292 <joystick_readPosition>
			slider_readPosition(&slider_pos);
     604:	80 ef       	ldi	r24, 0xF0	; 240
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <slider_readPosition>
			touchButton_readButtons();
     60c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <touchButton_readButtons>
			if(gameActive==0){
     610:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <gameActive>
     614:	81 11       	cpse	r24, r1
     616:	06 c0       	rjmp	.+12     	; 0x624 <main+0x92>
				navigateMenu(&joystick_pos);
     618:	88 ed       	ldi	r24, 0xD8	; 216
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	0e 94 00 0a 	call	0x1400	; 0x1400 <navigateMenu>
				menu_printCurrentMenu();
     620:	0e 94 13 0b 	call	0x1626	; 0x1626 <menu_printCurrentMenu>
			}
			timerFlag=0;
     624:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <timerFlag>
			sei();
     628:	78 94       	sei
		}
		switch(currentMenu.currentMenuItem->nodeID){
     62a:	d8 01       	movw	r26, r16
     62c:	ed 91       	ld	r30, X+
     62e:	fc 91       	ld	r31, X
     630:	80 81       	ld	r24, Z
     632:	85 30       	cpi	r24, 0x05	; 5
     634:	91 f0       	breq	.+36     	; 0x65a <main+0xc8>
     636:	28 f4       	brcc	.+10     	; 0x642 <main+0xb0>
     638:	83 30       	cpi	r24, 0x03	; 3
     63a:	41 f0       	breq	.+16     	; 0x64c <main+0xba>
     63c:	84 30       	cpi	r24, 0x04	; 4
     63e:	49 f0       	breq	.+18     	; 0x652 <main+0xc0>
     640:	17 c0       	rjmp	.+46     	; 0x670 <main+0xde>
     642:	86 30       	cpi	r24, 0x06	; 6
     644:	71 f0       	breq	.+28     	; 0x662 <main+0xd0>
     646:	87 30       	cpi	r24, 0x07	; 7
     648:	81 f0       	breq	.+32     	; 0x66a <main+0xd8>
     64a:	12 c0       	rjmp	.+36     	; 0x670 <main+0xde>
			case PLAY_GAME:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     64c:	0e 94 f5 07 	call	0xfea	; 0xfea <music_playRick>
				break;
     650:	0f c0       	rjmp	.+30     	; 0x670 <main+0xde>
			case GAME_1:
				game_play(1);
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	0e 94 4a 07 	call	0xe94	; 0xe94 <game_play>
				break;
     658:	0b c0       	rjmp	.+22     	; 0x670 <main+0xde>
			case GAME_2:
				game_play(2);
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 4a 07 	call	0xe94	; 0xe94 <game_play>
				break;
     660:	07 c0       	rjmp	.+14     	; 0x670 <main+0xde>
			case HS1:
				game_displayHighscores(1);
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	0e 94 82 07 	call	0xf04	; 0xf04 <game_displayHighscores>
				break;
     668:	03 c0       	rjmp	.+6      	; 0x670 <main+0xde>
			case HS2:
				game_displayHighscores(2);
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	0e 94 82 07 	call	0xf04	; 0xf04 <game_displayHighscores>
				break;
			
		}
		//Put microcontroller to sleep until next interrupt.
		sleep_now();
     670:	0e 94 33 09 	call	0x1266	; 0x1266 <sleep_now>
	}
     674:	be cf       	rjmp	.-132    	; 0x5f2 <main+0x60>

00000676 <CAN_clearInterrupt>:


void CAN_clearInterrupt()
{
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	6c e2       	ldi	r22, 0x2C	; 44
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
     680:	08 95       	ret

00000682 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	8c 01       	movw	r16, r24
	
	//changing between three buffers
	static int buffer_number = 0;
	buffer_number++;
	buffer_number = buffer_number%3;
     68a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     68e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	63 e0       	ldi	r22, 0x03	; 3
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodhi4>
     69c:	28 2f       	mov	r18, r24
     69e:	39 2f       	mov	r19, r25
     6a0:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <__data_end>
     6a4:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <__data_end+0x1>
	
	//Load ID in message
	switch(buffer_number) {
     6a8:	21 30       	cpi	r18, 0x01	; 1
     6aa:	31 05       	cpc	r19, r1
     6ac:	e9 f0       	breq	.+58     	; 0x6e8 <CAN_transmit_message+0x66>
     6ae:	22 30       	cpi	r18, 0x02	; 2
     6b0:	31 05       	cpc	r19, r1
     6b2:	89 f1       	breq	.+98     	; 0x716 <CAN_transmit_message+0x94>
     6b4:	23 2b       	or	r18, r19
     6b6:	09 f0       	breq	.+2      	; 0x6ba <CAN_transmit_message+0x38>
     6b8:	44 c0       	rjmp	.+136    	; 0x742 <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6ba:	f8 01       	movw	r30, r16
     6bc:	40 85       	ldd	r20, Z+8	; 0x08
     6be:	51 85       	ldd	r21, Z+9	; 0x09
     6c0:	42 95       	swap	r20
     6c2:	44 0f       	add	r20, r20
     6c4:	40 7e       	andi	r20, 0xE0	; 224
     6c6:	62 e3       	ldi	r22, 0x32	; 50
     6c8:	80 ee       	ldi	r24, 0xE0	; 224
     6ca:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6ce:	f8 01       	movw	r30, r16
     6d0:	60 85       	ldd	r22, Z+8	; 0x08
     6d2:	71 85       	ldd	r23, Z+9	; 0x09
     6d4:	76 95       	lsr	r23
     6d6:	67 95       	ror	r22
     6d8:	76 95       	lsr	r23
     6da:	67 95       	ror	r22
     6dc:	76 95       	lsr	r23
     6de:	67 95       	ror	r22
     6e0:	81 e3       	ldi	r24, 0x31	; 49
     6e2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <CAN_controller_write>
				break;
     6e6:	2d c0       	rjmp	.+90     	; 0x742 <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6e8:	f8 01       	movw	r30, r16
     6ea:	40 85       	ldd	r20, Z+8	; 0x08
     6ec:	51 85       	ldd	r21, Z+9	; 0x09
     6ee:	42 95       	swap	r20
     6f0:	44 0f       	add	r20, r20
     6f2:	40 7e       	andi	r20, 0xE0	; 224
     6f4:	62 e4       	ldi	r22, 0x42	; 66
     6f6:	80 ee       	ldi	r24, 0xE0	; 224
     6f8:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );				
     6fc:	f8 01       	movw	r30, r16
     6fe:	60 85       	ldd	r22, Z+8	; 0x08
     700:	71 85       	ldd	r23, Z+9	; 0x09
     702:	76 95       	lsr	r23
     704:	67 95       	ror	r22
     706:	76 95       	lsr	r23
     708:	67 95       	ror	r22
     70a:	76 95       	lsr	r23
     70c:	67 95       	ror	r22
     70e:	81 e4       	ldi	r24, 0x41	; 65
     710:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <CAN_controller_write>
				break;
     714:	16 c0       	rjmp	.+44     	; 0x742 <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     716:	f8 01       	movw	r30, r16
     718:	40 85       	ldd	r20, Z+8	; 0x08
     71a:	51 85       	ldd	r21, Z+9	; 0x09
     71c:	42 95       	swap	r20
     71e:	44 0f       	add	r20, r20
     720:	40 7e       	andi	r20, 0xE0	; 224
     722:	62 e5       	ldi	r22, 0x52	; 82
     724:	80 ee       	ldi	r24, 0xE0	; 224
     726:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     72a:	f8 01       	movw	r30, r16
     72c:	60 85       	ldd	r22, Z+8	; 0x08
     72e:	71 85       	ldd	r23, Z+9	; 0x09
     730:	76 95       	lsr	r23
     732:	67 95       	ror	r22
     734:	76 95       	lsr	r23
     736:	67 95       	ror	r22
     738:	76 95       	lsr	r23
     73a:	67 95       	ror	r22
     73c:	81 e5       	ldi	r24, 0x51	; 81
     73e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <CAN_controller_write>
				break;
	}
		
	//Filling message with data length
	switch(buffer_number) {
     742:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     746:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	91 05       	cpc	r25, r1
     74e:	61 f0       	breq	.+24     	; 0x768 <CAN_transmit_message+0xe6>
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	91 05       	cpc	r25, r1
     754:	81 f0       	breq	.+32     	; 0x776 <CAN_transmit_message+0xf4>
     756:	89 2b       	or	r24, r25
     758:	a1 f4       	brne	.+40     	; 0x782 <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     75a:	f8 01       	movw	r30, r16
     75c:	42 85       	ldd	r20, Z+10	; 0x0a
     75e:	65 e3       	ldi	r22, 0x35	; 53
     760:	8f e0       	ldi	r24, 0x0F	; 15
     762:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
				break;
     766:	0d c0       	rjmp	.+26     	; 0x782 <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     768:	f8 01       	movw	r30, r16
     76a:	42 85       	ldd	r20, Z+10	; 0x0a
     76c:	65 e4       	ldi	r22, 0x45	; 69
     76e:	8f e0       	ldi	r24, 0x0F	; 15
     770:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
				break;
     774:	06 c0       	rjmp	.+12     	; 0x782 <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     776:	f8 01       	movw	r30, r16
     778:	42 85       	ldd	r20, Z+10	; 0x0a
     77a:	65 e5       	ldi	r22, 0x55	; 85
     77c:	8f e0       	ldi	r24, 0x0F	; 15
     77e:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
				break;
				
	}

	//Filling message with data.
	for (uint8_t i = 0; i != message->data_length; i++) {
     782:	f8 01       	movw	r30, r16
     784:	82 85       	ldd	r24, Z+10	; 0x0a
     786:	88 23       	and	r24, r24
     788:	61 f1       	breq	.+88     	; 0x7e2 <CAN_transmit_message+0x160>
     78a:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     78c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     790:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	91 05       	cpc	r25, r1
     798:	71 f0       	breq	.+28     	; 0x7b6 <CAN_transmit_message+0x134>
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	91 05       	cpc	r25, r1
     79e:	a1 f0       	breq	.+40     	; 0x7c8 <CAN_transmit_message+0x146>
     7a0:	89 2b       	or	r24, r25
     7a2:	d1 f4       	brne	.+52     	; 0x7d8 <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     7a4:	f8 01       	movw	r30, r16
     7a6:	ec 0f       	add	r30, r28
     7a8:	f1 1d       	adc	r31, r1
     7aa:	60 81       	ld	r22, Z
     7ac:	86 e3       	ldi	r24, 0x36	; 54
     7ae:	8c 0f       	add	r24, r28
     7b0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <CAN_controller_write>
				break;
     7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7b6:	f8 01       	movw	r30, r16
     7b8:	ec 0f       	add	r30, r28
     7ba:	f1 1d       	adc	r31, r1
     7bc:	60 81       	ld	r22, Z
     7be:	86 e4       	ldi	r24, 0x46	; 70
     7c0:	8c 0f       	add	r24, r28
     7c2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <CAN_controller_write>
				break;
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7c8:	f8 01       	movw	r30, r16
     7ca:	ec 0f       	add	r30, r28
     7cc:	f1 1d       	adc	r31, r1
     7ce:	60 81       	ld	r22, Z
     7d0:	86 e5       	ldi	r24, 0x56	; 86
     7d2:	8c 0f       	add	r24, r28
     7d4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <CAN_controller_write>
				break;
				
	}

	//Filling message with data.
	for (uint8_t i = 0; i != message->data_length; i++) {
     7d8:	cf 5f       	subi	r28, 0xFF	; 255
     7da:	f8 01       	movw	r30, r16
     7dc:	82 85       	ldd	r24, Z+10	; 0x0a
     7de:	8c 13       	cpse	r24, r28
     7e0:	d5 cf       	rjmp	.-86     	; 0x78c <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7e2:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     7e6:	0e 94 bd 04 	call	0x97a	; 0x97a <CAN_controller_RTS>
	
	//Currently no error handling	
}
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	7c 01       	movw	r14, r24
	
	//read ID
	received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     7fe:	82 e6       	ldi	r24, 0x62	; 98
     800:	0e 94 65 04 	call	0x8ca	; 0x8ca <CAN_controller_read>
     804:	c8 2f       	mov	r28, r24
     806:	81 e6       	ldi	r24, 0x61	; 97
     808:	0e 94 65 04 	call	0x8ca	; 0x8ca <CAN_controller_read>
     80c:	c2 95       	swap	r28
     80e:	c6 95       	lsr	r28
     810:	c7 70       	andi	r28, 0x07	; 7
     812:	28 e0       	ldi	r18, 0x08	; 8
     814:	82 9f       	mul	r24, r18
     816:	c0 01       	movw	r24, r0
     818:	11 24       	eor	r1, r1
     81a:	8c 0f       	add	r24, r28
     81c:	91 1d       	adc	r25, r1
     81e:	f7 01       	movw	r30, r14
     820:	91 87       	std	Z+9, r25	; 0x09
     822:	80 87       	std	Z+8, r24	; 0x08
	
	//read data length
	received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     824:	85 e6       	ldi	r24, 0x65	; 101
     826:	0e 94 65 04 	call	0x8ca	; 0x8ca <CAN_controller_read>
     82a:	8f 70       	andi	r24, 0x0F	; 15
     82c:	f7 01       	movw	r30, r14
     82e:	82 87       	std	Z+10, r24	; 0x0a
	
	//read data
	for (uint8_t i = 0; i != received_message->data_length; i++) {
     830:	82 85       	ldd	r24, Z+10	; 0x0a
     832:	88 23       	and	r24, r24
     834:	81 f0       	breq	.+32     	; 0x856 <CAN_receiveMessage+0x64>
     836:	c0 e0       	ldi	r28, 0x00	; 0
		received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     838:	0c 2f       	mov	r16, r28
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	86 e6       	ldi	r24, 0x66	; 102
     83e:	8c 0f       	add	r24, r28
     840:	0e 94 65 04 	call	0x8ca	; 0x8ca <CAN_controller_read>
     844:	f7 01       	movw	r30, r14
     846:	e0 0f       	add	r30, r16
     848:	f1 1f       	adc	r31, r17
     84a:	80 83       	st	Z, r24
	
	//read data length
	received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
	
	//read data
	for (uint8_t i = 0; i != received_message->data_length; i++) {
     84c:	cf 5f       	subi	r28, 0xFF	; 255
     84e:	f7 01       	movw	r30, r14
     850:	82 85       	ldd	r24, Z+10	; 0x0a
     852:	8c 13       	cpse	r24, r28
     854:	f1 cf       	rjmp	.-30     	; 0x838 <CAN_receiveMessage+0x46>
		received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
	}
	
	
}
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	08 95       	ret

00000862 <CAN_sendInputData>:

void CAN_sendInputData() {
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	2b 97       	sbiw	r28, 0x0b	; 11
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	9a 87       	std	Y+10, r25	; 0x0a
     87c:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     87e:	86 e0       	ldi	r24, 0x06	; 6
     880:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     882:	e0 ef       	ldi	r30, 0xF0	; 240
     884:	f2 e0       	ldi	r31, 0x02	; 2
     886:	80 81       	ld	r24, Z
     888:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     88a:	81 81       	ldd	r24, Z+1	; 0x01
     88c:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     88e:	e6 ee       	ldi	r30, 0xE6	; 230
     890:	f2 e0       	ldi	r31, 0x02	; 2
     892:	80 81       	ld	r24, Z
     894:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     896:	81 81       	ldd	r24, Z+1	; 0x01
     898:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     89a:	e8 ed       	ldi	r30, 0xD8	; 216
     89c:	f2 e0       	ldi	r31, 0x02	; 2
     89e:	80 81       	ld	r24, Z
     8a0:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     8a2:	81 81       	ldd	r24, Z+1	; 0x01
     8a4:	8e 83       	std	Y+6, r24	; 0x06
	
	CAN_transmit_message(&message);
     8a6:	ce 01       	movw	r24, r28
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	0e 94 41 03 	call	0x682	; 0x682 <CAN_transmit_message>
}
     8ae:	2b 96       	adiw	r28, 0x0b	; 11
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <CAN_init>:

void CAN_init() {
	CAN_controller_init();
     8c0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <CAN_controller_init>

	flag=0;
     8c4:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <flag>
     8c8:	08 95       	ret

000008ca <CAN_controller_read>:
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"


uint8_t CAN_controller_read(uint8_t addr) {
     8ca:	cf 93       	push	r28
     8cc:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	84 e0       	ldi	r24, 0x04	; 4
     8d2:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_READ);
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8dc:	8c 2f       	mov	r24, r28
     8de:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8e2:	0e 94 8d 0c 	call	0x191a	; 0x191a <SPI_masterRead>
     8e6:	c8 2f       	mov	r28, r24
	
	SPI_setChipSelect(PB4, 1);
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	84 e0       	ldi	r24, 0x04	; 4
     8ec:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
	
	return data;
}
     8f0:	8c 2f       	mov	r24, r28
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	d8 2f       	mov	r29, r24
     8fc:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
	SPI_masterWrite(addr);
     90c:	8d 2f       	mov	r24, r29
     90e:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
	SPI_masterWrite(data);
     912:	8c 2f       	mov	r24, r28
     914:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	84 e0       	ldi	r24, 0x04	; 4
     91c:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
	
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <CAN_controller_bitModify>:

void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	d8 2f       	mov	r29, r24
     92e:	16 2f       	mov	r17, r22
     930:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     93a:	85 e0       	ldi	r24, 0x05	; 5
     93c:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
		SPI_masterWrite(addr);
     940:	81 2f       	mov	r24, r17
     942:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
		SPI_masterWrite(mask);
     946:	8d 2f       	mov	r24, r29
     948:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
		SPI_masterWrite(data);
     94c:	8c 2f       	mov	r24, r28
     94e:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>

}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	08 95       	ret

00000962 <CAN_controller_reset>:

//Reset Can controller, necessary for config mode.
void CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
     96a:	80 ec       	ldi	r24, 0xC0	; 192
     96c:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
     978:	08 95       	ret

0000097a <CAN_controller_RTS>:
	//Check CANSTAT register
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);

}

void CAN_controller_RTS(uint8_t buffer) {
     97a:	cf 93       	push	r28
     97c:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	84 e0       	ldi	r24, 0x04	; 4
     982:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
	switch (buffer) {
     986:	c1 30       	cpi	r28, 0x01	; 1
     988:	41 f0       	breq	.+16     	; 0x99a <CAN_controller_RTS+0x20>
     98a:	18 f0       	brcs	.+6      	; 0x992 <CAN_controller_RTS+0x18>
     98c:	c2 30       	cpi	r28, 0x02	; 2
     98e:	49 f0       	breq	.+18     	; 0x9a2 <CAN_controller_RTS+0x28>
     990:	0b c0       	rjmp	.+22     	; 0x9a8 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     992:	81 e8       	ldi	r24, 0x81	; 129
     994:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
			break;
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     99a:	82 e8       	ldi	r24, 0x82	; 130
     99c:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
			break;
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     9a2:	84 e8       	ldi	r24, 0x84	; 132
     9a4:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterWrite>
			break;
		default: 
			break;			
	}
	SPI_setChipSelect(PB4, 1);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	84 e0       	ldi	r24, 0x04	; 4
     9ac:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_setChipSelect>
}
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	1f 92       	push	r1
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	18 2f       	mov	r17, r24
	
	CAN_controller_reset();
     9c2:	0e 94 b1 04 	call	0x962	; 0x962 <CAN_controller_reset>
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9c6:	8e e0       	ldi	r24, 0x0E	; 14
     9c8:	0e 94 65 04 	call	0x8ca	; 0x8ca <CAN_controller_read>
     9cc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t mode_bits = (status & MODE_MASK);
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
	
	if (mode_bits != MODE_CONFIG) {
     9d0:	80 7e       	andi	r24, 0xE0	; 224
     9d2:	80 38       	cpi	r24, 0x80	; 128
     9d4:	f1 f4       	brne	.+60     	; 0xa12 <CAN_controller_setMode+0x5e>
		//printf("Not in config mode, \t %i\n\r", mode_bits);
		return;
	}
	
	//set mode
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9d6:	41 2f       	mov	r20, r17
     9d8:	4c 60       	ori	r20, 0x0C	; 12
     9da:	6f e0       	ldi	r22, 0x0F	; 15
     9dc:	8e ee       	ldi	r24, 0xEE	; 238
     9de:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
	
	//enable interrupts
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9e2:	41 e0       	ldi	r20, 0x01	; 1
     9e4:	6b e2       	ldi	r22, 0x2B	; 43
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
	
	//receive any type of message, no filter p. 27
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000);
     9ec:	40 e6       	ldi	r20, 0x60	; 96
     9ee:	60 e6       	ldi	r22, 0x60	; 96
     9f0:	80 e6       	ldi	r24, 0x60	; 96
     9f2:	0e 94 93 04 	call	0x926	; 0x926 <CAN_controller_bitModify>
     9f6:	2f ef       	ldi	r18, 0xFF	; 255
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	21 50       	subi	r18, 0x01	; 1
     9fe:	80 40       	sbci	r24, 0x00	; 0
     a00:	90 40       	sbci	r25, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <CAN_controller_setMode+0x48>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <CAN_controller_setMode+0x52>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <CAN_controller_setMode+0x54>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a08:	8e e0       	ldi	r24, 0x0E	; 14
     a0a:	0e 94 65 04 	call	0x8ca	; 0x8ca <CAN_controller_read>
     a0e:	89 83       	std	Y+1, r24	; 0x01
	mode_bits = (status & MODE_MASK);
     a10:	89 81       	ldd	r24, Y+1	; 0x01
	if (mode_bits != mode) {
			//printf("Not in correct mode: Mode: %i\n\r", mode_bits);
	}
	//printf("Mode set: %i\n\r", status & MODE_MASK);
}
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	08 95       	ret

00000a1c <CAN_controller_init>:
	SPI_setChipSelect(PB4, 0);
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	1f 92       	push	r1
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62

	SPI_masterInit();
     a26:	0e 94 80 0c 	call	0x1900	; 0x1900 <SPI_masterInit>

	CAN_controller_setMode(MODE_NORMAL);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a30:	8b b7       	in	r24, 0x3b	; 59
     a32:	80 64       	ori	r24, 0x40	; 64
     a34:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a36:	85 b7       	in	r24, 0x35	; 53
     a38:	82 60       	ori	r24, 0x02	; 2
     a3a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a3c:	85 b7       	in	r24, 0x35	; 53
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a42:	81 b3       	in	r24, 0x11	; 17
     a44:	84 70       	andi	r24, 0x04	; 4
     a46:	81 bb       	out	0x11, r24	; 17
     a48:	2f ef       	ldi	r18, 0xFF	; 255
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	21 50       	subi	r18, 0x01	; 1
     a50:	80 40       	sbci	r24, 0x00	; 0
     a52:	90 40       	sbci	r25, 0x00	; 0
     a54:	e1 f7       	brne	.-8      	; 0xa4e <CAN_controller_init+0x32>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <CAN_controller_init+0x3c>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <CAN_controller_init+0x3e>
	
	_delay_ms(200);
	//printf("after write to canctrl\n\r");
	
	//Check CANSTAT register
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a5a:	8e e0       	ldi	r24, 0x0E	; 14
     a5c:	0e 94 65 04 	call	0x8ca	; 0x8ca <CAN_controller_read>
     a60:	89 83       	std	Y+1, r24	; 0x01

}
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     a6a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
     a6e:	ec ed       	ldi	r30, 0xDC	; 220
     a70:	f2 e0       	ldi	r31, 0x02	; 2
     a72:	a8 ee       	ldi	r26, 0xE8	; 232
     a74:	b2 e0       	ldi	r27, 0x02	; 2
     a76:	81 ee       	ldi	r24, 0xE1	; 225
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	11 92       	st	Z+, r1
     a7c:	1d 92       	st	X+, r1
     a7e:	e8 17       	cp	r30, r24
     a80:	f9 07       	cpc	r31, r25
     a82:	d9 f7       	brne	.-10     	; 0xa7a <game_init+0x10>
     a84:	08 95       	ret

00000a86 <game_countdown>:
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	1f 92       	push	r1
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	4a e0       	ldi	r20, 0x0A	; 10
     a96:	be 01       	movw	r22, r28
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
     aa4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
     aa8:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
     aac:	02 ee       	ldi	r16, 0xE2	; 226
     aae:	12 e0       	ldi	r17, 0x02	; 2
     ab0:	f8 01       	movw	r30, r16
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	02 96       	adiw	r24, 0x02	; 2
     ab8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     abc:	83 e0       	ldi	r24, 0x03	; 3
     abe:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     aca:	86 e0       	ldi	r24, 0x06	; 6
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 b7 08 	call	0x116e	; 0x116e <music_playNote>
     ad2:	ff ef       	ldi	r31, 0xFF	; 255
     ad4:	2f e7       	ldi	r18, 0x7F	; 127
     ad6:	87 e0       	ldi	r24, 0x07	; 7
     ad8:	f1 50       	subi	r31, 0x01	; 1
     ada:	20 40       	sbci	r18, 0x00	; 0
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	e1 f7       	brne	.-8      	; 0xad8 <game_countdown+0x52>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <game_countdown+0x5c>
     ae2:	00 00       	nop
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 b7 08 	call	0x116e	; 0x116e <music_playNote>
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	ef e7       	ldi	r30, 0x7F	; 127
     af0:	f7 e0       	ldi	r31, 0x07	; 7
     af2:	91 50       	subi	r25, 0x01	; 1
     af4:	e0 40       	sbci	r30, 0x00	; 0
     af6:	f0 40       	sbci	r31, 0x00	; 0
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <game_countdown+0x6c>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <game_countdown+0x76>
     afc:	00 00       	nop
     afe:	4a e0       	ldi	r20, 0x0A	; 10
     b00:	be 01       	movw	r22, r28
     b02:	6f 5f       	subi	r22, 0xFF	; 255
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
     b0e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
     b12:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
     b16:	f8 01       	movw	r30, r16
     b18:	80 81       	ld	r24, Z
     b1a:	91 81       	ldd	r25, Z+1	; 0x01
     b1c:	02 96       	adiw	r24, 0x02	; 2
     b1e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     b30:	86 e0       	ldi	r24, 0x06	; 6
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 b7 08 	call	0x116e	; 0x116e <music_playNote>
     b38:	ff ef       	ldi	r31, 0xFF	; 255
     b3a:	2f e7       	ldi	r18, 0x7F	; 127
     b3c:	87 e0       	ldi	r24, 0x07	; 7
     b3e:	f1 50       	subi	r31, 0x01	; 1
     b40:	20 40       	sbci	r18, 0x00	; 0
     b42:	80 40       	sbci	r24, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <game_countdown+0xb8>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <game_countdown+0xc2>
     b48:	00 00       	nop
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 b7 08 	call	0x116e	; 0x116e <music_playNote>
     b52:	9f ef       	ldi	r25, 0xFF	; 255
     b54:	ef e7       	ldi	r30, 0x7F	; 127
     b56:	f7 e0       	ldi	r31, 0x07	; 7
     b58:	91 50       	subi	r25, 0x01	; 1
     b5a:	e0 40       	sbci	r30, 0x00	; 0
     b5c:	f0 40       	sbci	r31, 0x00	; 0
     b5e:	e1 f7       	brne	.-8      	; 0xb58 <game_countdown+0xd2>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <game_countdown+0xdc>
     b62:	00 00       	nop
     b64:	4a e0       	ldi	r20, 0x0A	; 10
     b66:	be 01       	movw	r22, r28
     b68:	6f 5f       	subi	r22, 0xFF	; 255
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
     b74:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
     b78:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
     b7c:	f8 01       	movw	r30, r16
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	02 96       	adiw	r24, 0x02	; 2
     b84:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     b96:	86 e0       	ldi	r24, 0x06	; 6
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 b7 08 	call	0x116e	; 0x116e <music_playNote>
     b9e:	ff ef       	ldi	r31, 0xFF	; 255
     ba0:	2f e7       	ldi	r18, 0x7F	; 127
     ba2:	87 e0       	ldi	r24, 0x07	; 7
     ba4:	f1 50       	subi	r31, 0x01	; 1
     ba6:	20 40       	sbci	r18, 0x00	; 0
     ba8:	80 40       	sbci	r24, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <game_countdown+0x11e>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <game_countdown+0x128>
     bae:	00 00       	nop
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 b7 08 	call	0x116e	; 0x116e <music_playNote>
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	ef e7       	ldi	r30, 0x7F	; 127
     bbc:	f7 e0       	ldi	r31, 0x07	; 7
     bbe:	91 50       	subi	r25, 0x01	; 1
     bc0:	e0 40       	sbci	r30, 0x00	; 0
     bc2:	f0 40       	sbci	r31, 0x00	; 0
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <game_countdown+0x138>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <game_countdown+0x142>
     bc8:	00 00       	nop
     bca:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
     bce:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
     bd2:	f8 01       	movw	r30, r16
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	02 96       	adiw	r24, 0x02	; 2
     bda:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
     be4:	83 ee       	ldi	r24, 0xE3	; 227
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     bec:	87 e1       	ldi	r24, 0x17	; 23
     bee:	94 e0       	ldi	r25, 0x04	; 4
     bf0:	0e 94 b7 08 	call	0x116e	; 0x116e <music_playNote>
     bf4:	ff ef       	ldi	r31, 0xFF	; 255
     bf6:	2f e7       	ldi	r18, 0x7F	; 127
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	f1 50       	subi	r31, 0x01	; 1
     bfc:	20 40       	sbci	r18, 0x00	; 0
     bfe:	80 40       	sbci	r24, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <game_countdown+0x174>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <game_countdown+0x17e>
     c04:	00 00       	nop
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 b7 08 	call	0x116e	; 0x116e <music_playNote>
     c0e:	9f ef       	ldi	r25, 0xFF	; 255
     c10:	ef e7       	ldi	r30, 0x7F	; 127
     c12:	f7 e0       	ldi	r31, 0x07	; 7
     c14:	91 50       	subi	r25, 0x01	; 1
     c16:	e0 40       	sbci	r30, 0x00	; 0
     c18:	f0 40       	sbci	r31, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <game_countdown+0x18e>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <game_countdown+0x198>
     c1e:	00 00       	nop
     c20:	0f 90       	pop	r0
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <game_initialCANMessage>:
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	2b 97       	sbiw	r28, 0x0b	; 11
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9a 87       	std	Y+10, r25	; 0x0a
     c46:	89 87       	std	Y+9, r24	; 0x09
     c48:	1b 86       	std	Y+11, r1	; 0x0b
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	0e 94 41 03 	call	0x682	; 0x682 <CAN_transmit_message>
     c52:	2b 96       	adiw	r28, 0x0b	; 11
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <game_newgame>:
     c64:	f8 94       	cli
     c66:	0e 94 43 05 	call	0xa86	; 0xa86 <game_countdown>
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <gameActive>
     c70:	ed ee       	ldi	r30, 0xED	; 237
     c72:	f2 e0       	ldi	r31, 0x02	; 2
     c74:	8a e0       	ldi	r24, 0x0A	; 10
     c76:	80 83       	st	Z, r24
     c78:	12 82       	std	Z+2, r1	; 0x02
     c7a:	83 e6       	ldi	r24, 0x63	; 99
     c7c:	81 83       	std	Z+1, r24	; 0x01
     c7e:	0e 94 16 06 	call	0xc2c	; 0xc2c <game_initialCANMessage>
     c82:	78 94       	sei
     c84:	08 95       	ret

00000c86 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     c86:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <flag>
     c8a:	88 23       	and	r24, r24
     c8c:	99 f0       	breq	.+38     	; 0xcb4 <game_recieveGameData+0x2e>
		//Handle the message
		cli();
     c8e:	f8 94       	cli
		//printf("Message received");
		flag=0;
     c90:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <flag>
		CAN_receiveMessage(&received_message);
     c94:	82 ef       	ldi	r24, 0xF2	; 242
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     c9c:	0e 94 3b 03 	call	0x676	; 0x676 <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     ca0:	a2 ef       	ldi	r26, 0xF2	; 242
     ca2:	b2 e0       	ldi	r27, 0x02	; 2
     ca4:	8c 91       	ld	r24, X
     ca6:	ed ee       	ldi	r30, 0xED	; 237
     ca8:	f2 e0       	ldi	r31, 0x02	; 2
     caa:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	8c 91       	ld	r24, X
     cb0:	82 83       	std	Z+2, r24	; 0x02
		sei();
     cb2:	78 94       	sei
     cb4:	08 95       	ret

00000cb6 <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <game_updateOled+0xa>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <game_updateOled+0xc>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     cc8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
	oled_home();
     ccc:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     cd0:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <currentMenu>
     cd4:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <currentMenu+0x1>
     cd8:	02 96       	adiw	r24, 0x02	; 2
     cda:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
	switch(gameID) {
     ce4:	11 30       	cpi	r17, 0x01	; 1
     ce6:	19 f0       	breq	.+6      	; 0xcee <game_updateOled+0x38>
     ce8:	12 30       	cpi	r17, 0x02	; 2
     cea:	49 f1       	breq	.+82     	; 0xd3e <game_updateOled+0x88>
     cec:	39 c0       	rjmp	.+114    	; 0xd60 <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     cee:	86 ee       	ldi	r24, 0xE6	; 230
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
			itoa(gameData.score,score_string,10);
     cf6:	0d ee       	ldi	r16, 0xED	; 237
     cf8:	12 e0       	ldi	r17, 0x02	; 2
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cfa:	f8 01       	movw	r30, r16
     cfc:	80 81       	ld	r24, Z
     cfe:	4a e0       	ldi	r20, 0x0A	; 10
     d00:	be 01       	movw	r22, r28
     d02:	6f 5f       	subi	r22, 0xFF	; 255
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
			oled_print(score_string);
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
			oled_gotoLine(5);
     d14:	85 e0       	ldi	r24, 0x05	; 5
     d16:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
			oled_print("Time: ");
     d1a:	8e ee       	ldi	r24, 0xEE	; 238
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     d22:	f8 01       	movw	r30, r16
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	4a e0       	ldi	r20, 0x0A	; 10
     d28:	be 01       	movw	r22, r28
     d2a:	6d 5f       	subi	r22, 0xFD	; 253
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d34:	ce 01       	movw	r24, r28
     d36:	03 96       	adiw	r24, 0x03	; 3
     d38:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
			break;
     d3c:	11 c0       	rjmp	.+34     	; 0xd60 <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d3e:	85 ef       	ldi	r24, 0xF5	; 245
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     d46:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <gameData+0x2>
     d4a:	4a e0       	ldi	r20, 0x0A	; 10
     d4c:	be 01       	movw	r22, r28
     d4e:	6d 5f       	subi	r22, 0xFD	; 253
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d58:	ce 01       	movw	r24, r28
     d5a:	03 96       	adiw	r24, 0x03	; 3
     d5c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
			break;

	}
	
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <game_sendStop>:

void game_sendStop() {
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	2b 97       	sbiw	r28, 0x0b	; 11
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9a 87       	std	Y+10, r25	; 0x0a
     d8c:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     d8e:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	0e 94 41 03 	call	0x682	; 0x682 <CAN_transmit_message>
}
     d98:	2b 96       	adiw	r28, 0x0b	; 11
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <game_finished>:
void game_finished(uint8_t gameID) {
     daa:	cf 93       	push	r28
     dac:	c8 2f       	mov	r28, r24
	cli();
     dae:	f8 94       	cli
	game_sendStop();
     db0:	0e 94 b9 06 	call	0xd72	; 0xd72 <game_sendStop>
	oled_reset();
     db4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
	oled_home();
     db8:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
	oled_gotoLine(3);
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
	oled_print("Game over");
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
	oled_gotoLine(4);
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
	oled_print("Maybe HS?");
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
	music_gameOver();
     dd8:	0e 94 75 08 	call	0x10ea	; 0x10ea <music_gameOver>
	gameActive=0;
     ddc:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
	
	menu_init();
     de0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <menu_init>
	switch (gameID) {
     de4:	c1 30       	cpi	r28, 0x01	; 1
     de6:	51 f0       	breq	.+20     	; 0xdfc <game_finished+0x52>
     de8:	c2 30       	cpi	r28, 0x02	; 2
     dea:	09 f0       	breq	.+2      	; 0xdee <game_finished+0x44>
     dec:	50 c0       	rjmp	.+160    	; 0xe8e <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     dee:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <gameData+0x2>
     df2:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <highScores2>
     df6:	83 17       	cp	r24, r19
     df8:	48 f5       	brcc	.+82     	; 0xe4c <game_finished+0xa2>
     dfa:	33 c0       	rjmp	.+102    	; 0xe62 <game_finished+0xb8>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     dfc:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <gameData>
     e00:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <highScores>
     e04:	83 17       	cp	r24, r19
     e06:	58 f0       	brcs	.+22     	; 0xe1e <game_finished+0x74>
     e08:	ed ed       	ldi	r30, 0xDD	; 221
     e0a:	f2 e0       	ldi	r31, 0x02	; 2
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e10:	21 91       	ld	r18, Z+
     e12:	23 17       	cp	r18, r19
     e14:	b0 f4       	brcc	.+44     	; 0xe42 <game_finished+0x98>
					for (int a = 4; a>i; a--) {
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	91 05       	cpc	r25, r1
     e1a:	1c f0       	brlt	.+6      	; 0xe22 <game_finished+0x78>
     e1c:	0d c0       	rjmp	.+26     	; 0xe38 <game_finished+0x8e>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	e0 ee       	ldi	r30, 0xE0	; 224
     e24:	f2 e0       	ldi	r31, 0x02	; 2
     e26:	44 e0       	ldi	r20, 0x04	; 4
     e28:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e2a:	41 50       	subi	r20, 0x01	; 1
     e2c:	51 09       	sbc	r21, r1
     e2e:	22 91       	ld	r18, -Z
     e30:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e32:	84 17       	cp	r24, r20
     e34:	95 07       	cpc	r25, r21
     e36:	cc f3       	brlt	.-14     	; 0xe2a <game_finished+0x80>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e38:	fc 01       	movw	r30, r24
     e3a:	e4 52       	subi	r30, 0x24	; 36
     e3c:	fd 4f       	sbci	r31, 0xFD	; 253
     e3e:	30 83       	st	Z, r19
					break;
     e40:	26 c0       	rjmp	.+76     	; 0xe8e <game_finished+0xe4>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	85 30       	cpi	r24, 0x05	; 5
     e46:	91 05       	cpc	r25, r1
     e48:	19 f7       	brne	.-58     	; 0xe10 <game_finished+0x66>
     e4a:	21 c0       	rjmp	.+66     	; 0xe8e <game_finished+0xe4>
     e4c:	e9 ee       	ldi	r30, 0xE9	; 233
     e4e:	f2 e0       	ldi	r31, 0x02	; 2
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     e54:	21 91       	ld	r18, Z+
     e56:	23 17       	cp	r18, r19
     e58:	b0 f4       	brcc	.+44     	; 0xe86 <game_finished+0xdc>
					for (int a = 4; a>i; a--) {
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	91 05       	cpc	r25, r1
     e5e:	1c f0       	brlt	.+6      	; 0xe66 <game_finished+0xbc>
     e60:	0d c0       	rjmp	.+26     	; 0xe7c <game_finished+0xd2>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	ec ee       	ldi	r30, 0xEC	; 236
     e68:	f2 e0       	ldi	r31, 0x02	; 2
     e6a:	44 e0       	ldi	r20, 0x04	; 4
     e6c:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     e6e:	41 50       	subi	r20, 0x01	; 1
     e70:	51 09       	sbc	r21, r1
     e72:	22 91       	ld	r18, -Z
     e74:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     e76:	84 17       	cp	r24, r20
     e78:	95 07       	cpc	r25, r21
     e7a:	cc f3       	brlt	.-14     	; 0xe6e <game_finished+0xc4>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     e7c:	fc 01       	movw	r30, r24
     e7e:	e8 51       	subi	r30, 0x18	; 24
     e80:	fd 4f       	sbci	r31, 0xFD	; 253
     e82:	30 83       	st	Z, r19
					break;
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <game_finished+0xe4>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	85 30       	cpi	r24, 0x05	; 5
     e8a:	91 05       	cpc	r25, r1
     e8c:	19 f7       	brne	.-58     	; 0xe54 <game_finished+0xaa>
			break;
		
	}
	
	
	sei();
     e8e:	78 94       	sei
}
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <game_play>:
void game_play(uint8_t gameID)
{
     e94:	cf 93       	push	r28
     e96:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     e98:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <gameActive>
     e9c:	81 11       	cpse	r24, r1
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <game_play+0x26>
	{
		game_sendStop();
     ea0:	0e 94 b9 06 	call	0xd72	; 0xd72 <game_sendStop>
     ea4:	2f ef       	ldi	r18, 0xFF	; 255
     ea6:	8f e7       	ldi	r24, 0x7F	; 127
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	21 50       	subi	r18, 0x01	; 1
     eac:	80 40       	sbci	r24, 0x00	; 0
     eae:	90 40       	sbci	r25, 0x00	; 0
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <game_play+0x16>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <game_play+0x20>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <game_play+0x22>
		_delay_ms(100);
		game_newgame();	
     eb6:	0e 94 32 06 	call	0xc64	; 0xc64 <game_newgame>
	}
	if (buttons.right_button) {
     eba:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <buttons+0x1>
     ebe:	88 23       	and	r24, r24
     ec0:	21 f0       	breq	.+8      	; 0xeca <game_play+0x36>
		gameActive = 0;
     ec2:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
		menu_init();
     ec6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     eca:	0e 94 31 04 	call	0x862	; 0x862 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     ece:	0e 94 43 06 	call	0xc86	; 0xc86 <game_recieveGameData>
	game_updateOled(gameID);
     ed2:	8c 2f       	mov	r24, r28
     ed4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <game_updateOled>
	switch (gameID) {
     ed8:	c1 30       	cpi	r28, 0x01	; 1
     eda:	19 f0       	breq	.+6      	; 0xee2 <game_play+0x4e>
     edc:	c2 30       	cpi	r28, 0x02	; 2
     ede:	49 f0       	breq	.+18     	; 0xef2 <game_play+0x5e>
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <game_play+0x6c>
		case 1:
			if (gameData.playtime==10) {
     ee2:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <gameData+0x2>
     ee6:	8a 30       	cpi	r24, 0x0A	; 10
     ee8:	59 f4       	brne	.+22     	; 0xf00 <game_play+0x6c>
				game_finished(gameID);
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 d5 06 	call	0xdaa	; 0xdaa <game_finished>
     ef0:	07 c0       	rjmp	.+14     	; 0xf00 <game_play+0x6c>
			}
			break;
		case 2:
			if (gameData.score <10) {
     ef2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <gameData>
     ef6:	8a 30       	cpi	r24, 0x0A	; 10
     ef8:	18 f4       	brcc	.+6      	; 0xf00 <game_play+0x6c>
				game_finished(gameID);
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <game_finished>
			}
			break;
	}
	
	
}
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f04:	af 92       	push	r10
     f06:	bf 92       	push	r11
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	00 d0       	rcall	.+0      	; 0xf1a <game_displayHighscores+0x16>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	08 2f       	mov	r16, r24
	oled_reset();
     f20:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
	oled_home();
     f24:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f28:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <currentMenu>
     f2c:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <currentMenu+0x1>
     f30:	02 96       	adiw	r24, 0x02	; 2
     f32:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     f36:	0f 2e       	mov	r0, r31
     f38:	fc ed       	ldi	r31, 0xDC	; 220
     f3a:	af 2e       	mov	r10, r31
     f3c:	f2 e0       	ldi	r31, 0x02	; 2
     f3e:	bf 2e       	mov	r11, r31
     f40:	f0 2d       	mov	r31, r0
     f42:	0f 2e       	mov	r0, r31
     f44:	f8 ee       	ldi	r31, 0xE8	; 232
     f46:	cf 2e       	mov	r12, r31
     f48:	f2 e0       	ldi	r31, 0x02	; 2
     f4a:	df 2e       	mov	r13, r31
     f4c:	f0 2d       	mov	r31, r0
     f4e:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f50:	e1 2c       	mov	r14, r1
     f52:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f54:	81 2f       	mov	r24, r17
     f56:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
		oled_print("Score ");
     f5a:	84 e1       	ldi	r24, 0x14	; 20
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	e8 1a       	sub	r14, r24
     f66:	f8 0a       	sbc	r15, r24
     f68:	4a e0       	ldi	r20, 0x0A	; 10
     f6a:	be 01       	movw	r22, r28
     f6c:	6f 5f       	subi	r22, 0xFF	; 255
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	c7 01       	movw	r24, r14
     f72:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
		oled_print(num);
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
		oled_print(": ");
     f7e:	82 ef       	ldi	r24, 0xF2	; 242
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
		switch (gameID) {
     f86:	01 30       	cpi	r16, 0x01	; 1
     f88:	19 f0       	breq	.+6      	; 0xf90 <game_displayHighscores+0x8c>
     f8a:	02 30       	cpi	r16, 0x02	; 2
     f8c:	59 f0       	breq	.+22     	; 0xfa4 <game_displayHighscores+0xa0>
     f8e:	13 c0       	rjmp	.+38     	; 0xfb6 <game_displayHighscores+0xb2>
     f90:	f5 01       	movw	r30, r10
     f92:	80 81       	ld	r24, Z
     f94:	4a e0       	ldi	r20, 0x0A	; 10
     f96:	be 01       	movw	r22, r28
     f98:	6f 5f       	subi	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <game_displayHighscores+0xb2>
     fa4:	f6 01       	movw	r30, r12
     fa6:	80 81       	ld	r24, Z
     fa8:	4a e0       	ldi	r20, 0x0A	; 10
     faa:	be 01       	movw	r22, r28
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 12 10 	call	0x2024	; 0x2024 <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
     fbe:	1f 5f       	subi	r17, 0xFF	; 255
     fc0:	ff ef       	ldi	r31, 0xFF	; 255
     fc2:	af 1a       	sub	r10, r31
     fc4:	bf 0a       	sbc	r11, r31
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	c8 1a       	sub	r12, r24
     fca:	d8 0a       	sbc	r13, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
     fcc:	18 30       	cpi	r17, 0x08	; 8
     fce:	11 f6       	brne	.-124    	; 0xf54 <game_displayHighscores+0x50>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	08 95       	ret

00000fea <music_playRick>:
	 30, 10, 20, 20,
	 20,40, 80, 40
};


void music_playRick() {
     fea:	8f 92       	push	r8
     fec:	9f 92       	push	r9
     fee:	af 92       	push	r10
     ff0:	bf 92       	push	r11
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
	cli();
    1002:	f8 94       	cli
	oled_home();
    1004:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
	oled_reset();
    1008:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
    100c:	0d ee       	ldi	r16, 0xED	; 237
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	0f 2e       	mov	r0, r31
    1012:	fe e9       	ldi	r31, 0x9E	; 158
    1014:	ef 2e       	mov	r14, r31
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	ff 2e       	mov	r15, r31
    101a:	f0 2d       	mov	r31, r0
    101c:	c6 e0       	ldi	r28, 0x06	; 6
    101e:	d1 e0       	ldi	r29, 0x01	; 1
    1020:	0f 2e       	mov	r0, r31
    1022:	f9 e2       	ldi	r31, 0x29	; 41
    1024:	cf 2e       	mov	r12, r31
    1026:	f2 e0       	ldi	r31, 0x02	; 2
    1028:	df 2e       	mov	r13, r31
    102a:	f0 2d       	mov	r31, r0
    102c:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    102e:	0f 2e       	mov	r0, r31
    1030:	f4 e1       	ldi	r31, 0x14	; 20
    1032:	af 2e       	mov	r10, r31
    1034:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1036:	b1 10       	cpse	r11, r1
    1038:	02 c0       	rjmp	.+4      	; 0x103e <music_playRick+0x54>
			oled_reset();
    103a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
    103e:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1040:	e8 81       	ld	r30, Y
    1042:	f9 81       	ldd	r31, Y+1	; 0x01
    1044:	80 81       	ld	r24, Z
    1046:	88 23       	and	r24, r24
    1048:	41 f0       	breq	.+16     	; 0x105a <music_playRick+0x70>
			oled_gotoLine(line);
    104a:	8b 2d       	mov	r24, r11
    104c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
			line++;
    1050:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    1052:	88 81       	ld	r24, Y
    1054:	99 81       	ldd	r25, Y+1	; 0x01
    1056:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    105a:	d4 01       	movw	r26, r8
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	22 96       	adiw	r28, 0x02	; 2
    1062:	01 90       	ld	r0, Z+
    1064:	00 20       	and	r0, r0
    1066:	e9 f7       	brne	.-6      	; 0x1062 <music_playRick+0x78>
    1068:	32 97       	sbiw	r30, 0x02	; 2
    106a:	80 81       	ld	r24, Z
    106c:	8e 32       	cpi	r24, 0x2E	; 46
    106e:	09 f4       	brne	.+2      	; 0x1072 <music_playRick+0x88>
			
			line = 0;
    1070:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    1072:	f8 01       	movw	r30, r16
    1074:	65 91       	lpm	r22, Z+
    1076:	74 91       	lpm	r23, Z
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 cc 08 	call	0x1198	; 0x1198 <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1080:	f7 01       	movw	r30, r14
    1082:	84 91       	lpm	r24, Z
    1084:	a8 9e       	mul	r10, r24
    1086:	c0 01       	movw	r24, r0
    1088:	11 24       	eor	r1, r1
    108a:	09 2e       	mov	r0, r25
    108c:	00 0c       	add	r0, r0
    108e:	aa 0b       	sbc	r26, r26
    1090:	bb 0b       	sbc	r27, r27
		while (duration--) {
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	a1 05       	cpc	r26, r1
    1096:	b1 05       	cpc	r27, r1
    1098:	51 f0       	breq	.+20     	; 0x10ae <music_playRick+0xc4>
    109a:	ec ec       	ldi	r30, 0xCC	; 204
    109c:	f4 e0       	ldi	r31, 0x04	; 4
    109e:	31 97       	sbiw	r30, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <music_playRick+0xb4>
    10a2:	00 c0       	rjmp	.+0      	; 0x10a4 <music_playRick+0xba>
    10a4:	00 00       	nop
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	a1 09       	sbc	r26, r1
    10aa:	b1 09       	sbc	r27, r1
    10ac:	b1 f7       	brne	.-20     	; 0x109a <music_playRick+0xb0>
    10ae:	0c 5f       	subi	r16, 0xFC	; 252
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	ff ef       	ldi	r31, 0xFF	; 255
    10b4:	ef 1a       	sub	r14, r31
    10b6:	ff 0a       	sbc	r15, r31
void music_playRick() {
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    10b8:	0c 15       	cp	r16, r12
    10ba:	1d 05       	cpc	r17, r13
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <music_playRick+0xd6>
    10be:	bb cf       	rjmp	.-138    	; 0x1036 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	cb 01       	movw	r24, r22
    10c6:	0e 94 cc 08 	call	0x1198	; 0x1198 <pwm_setFreq>
	menu_init();
    10ca:	0e 94 66 0a 	call	0x14cc	; 0x14cc <menu_init>

	sei();
    10ce:	78 94       	sei
	

}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	8f 90       	pop	r8
    10e8:	08 95       	ret

000010ea <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    10ea:	6b e0       	ldi	r22, 0x0B	; 11
    10ec:	72 e0       	ldi	r23, 0x02	; 2
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 cc 08 	call	0x1198	; 0x1198 <pwm_setFreq>
    10f6:	2f ef       	ldi	r18, 0xFF	; 255
    10f8:	8f e7       	ldi	r24, 0x7F	; 127
    10fa:	97 e0       	ldi	r25, 0x07	; 7
    10fc:	21 50       	subi	r18, 0x01	; 1
    10fe:	80 40       	sbci	r24, 0x00	; 0
    1100:	90 40       	sbci	r25, 0x00	; 0
    1102:	e1 f7       	brne	.-8      	; 0x10fc <music_gameOver+0x12>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <music_gameOver+0x1c>
    1106:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    1108:	68 e8       	ldi	r22, 0x88	; 136
    110a:	71 e0       	ldi	r23, 0x01	; 1
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 cc 08 	call	0x1198	; 0x1198 <pwm_setFreq>
    1114:	2f ef       	ldi	r18, 0xFF	; 255
    1116:	8f e7       	ldi	r24, 0x7F	; 127
    1118:	97 e0       	ldi	r25, 0x07	; 7
    111a:	21 50       	subi	r18, 0x01	; 1
    111c:	80 40       	sbci	r24, 0x00	; 0
    111e:	90 40       	sbci	r25, 0x00	; 0
    1120:	e1 f7       	brne	.-8      	; 0x111a <music_gameOver+0x30>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <music_gameOver+0x3a>
    1124:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    1126:	67 e3       	ldi	r22, 0x37	; 55
    1128:	71 e0       	ldi	r23, 0x01	; 1
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 cc 08 	call	0x1198	; 0x1198 <pwm_setFreq>
    1132:	2f ef       	ldi	r18, 0xFF	; 255
    1134:	8f e7       	ldi	r24, 0x7F	; 127
    1136:	97 e0       	ldi	r25, 0x07	; 7
    1138:	21 50       	subi	r18, 0x01	; 1
    113a:	80 40       	sbci	r24, 0x00	; 0
    113c:	90 40       	sbci	r25, 0x00	; 0
    113e:	e1 f7       	brne	.-8      	; 0x1138 <music_gameOver+0x4e>
    1140:	00 c0       	rjmp	.+0      	; 0x1142 <music_gameOver+0x58>
    1142:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    1144:	66 e0       	ldi	r22, 0x06	; 6
    1146:	71 e0       	ldi	r23, 0x01	; 1
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 cc 08 	call	0x1198	; 0x1198 <pwm_setFreq>
    1150:	2f ef       	ldi	r18, 0xFF	; 255
    1152:	8f e7       	ldi	r24, 0x7F	; 127
    1154:	97 e0       	ldi	r25, 0x07	; 7
    1156:	21 50       	subi	r18, 0x01	; 1
    1158:	80 40       	sbci	r24, 0x00	; 0
    115a:	90 40       	sbci	r25, 0x00	; 0
    115c:	e1 f7       	brne	.-8      	; 0x1156 <music_gameOver+0x6c>
    115e:	00 c0       	rjmp	.+0      	; 0x1160 <music_gameOver+0x76>
    1160:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	cb 01       	movw	r24, r22
    1168:	0e 94 cc 08 	call	0x1198	; 0x1198 <pwm_setFreq>
    116c:	08 95       	ret

0000116e <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    116e:	bc 01       	movw	r22, r24
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 cc 08 	call	0x1198	; 0x1198 <pwm_setFreq>
    1178:	08 95       	ret

0000117a <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    117a:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    1180:	80 e8       	ldi	r24, 0x80	; 128
    1182:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    1184:	83 b7       	in	r24, 0x33	; 51
    1186:	88 60       	ori	r24, 0x08	; 8
    1188:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    118a:	83 b7       	in	r24, 0x33	; 51
    118c:	80 61       	ori	r24, 0x10	; 16
    118e:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    1190:	83 b7       	in	r24, 0x33	; 51
    1192:	88 7f       	andi	r24, 0xF8	; 248
    1194:	83 bf       	out	0x33, r24	; 51
    1196:	08 95       	ret

00001198 <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    if (freq == 0) {
    119c:	67 2b       	or	r22, r23
    119e:	68 2b       	or	r22, r24
    11a0:	69 2b       	or	r22, r25
    11a2:	21 f4       	brne	.+8      	; 0x11ac <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11a4:	83 b7       	in	r24, 0x33	; 51
    11a6:	88 7f       	andi	r24, 0xF8	; 248
    11a8:	83 bf       	out	0x33, r24	; 51
        return;
    11aa:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e8       	ldi	r23, 0x80	; 128
    11b0:	85 e2       	ldi	r24, 0x25	; 37
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__udivmodsi4>
    11b8:	da 01       	movw	r26, r20
    11ba:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    11bc:	21 30       	cpi	r18, 0x01	; 1
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	36 07       	cpc	r19, r22
    11c2:	41 05       	cpc	r20, r1
    11c4:	51 05       	cpc	r21, r1
    11c6:	a8 f1       	brcs	.+106    	; 0x1232 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    11c8:	68 94       	set
    11ca:	12 f8       	bld	r1, 2
    11cc:	b6 95       	lsr	r27
    11ce:	a7 95       	ror	r26
    11d0:	97 95       	ror	r25
    11d2:	87 95       	ror	r24
    11d4:	16 94       	lsr	r1
    11d6:	d1 f7       	brne	.-12     	; 0x11cc <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	96 07       	cpc	r25, r22
    11de:	a1 05       	cpc	r26, r1
    11e0:	b1 05       	cpc	r27, r1
    11e2:	48 f1       	brcs	.+82     	; 0x1236 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    11e4:	da 01       	movw	r26, r20
    11e6:	c9 01       	movw	r24, r18
    11e8:	68 94       	set
    11ea:	15 f8       	bld	r1, 5
    11ec:	b6 95       	lsr	r27
    11ee:	a7 95       	ror	r26
    11f0:	97 95       	ror	r25
    11f2:	87 95       	ror	r24
    11f4:	16 94       	lsr	r1
    11f6:	d1 f7       	brne	.-12     	; 0x11ec <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	96 07       	cpc	r25, r22
    11fe:	a1 05       	cpc	r26, r1
    1200:	b1 05       	cpc	r27, r1
    1202:	d8 f0       	brcs	.+54     	; 0x123a <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    1204:	bb 27       	eor	r27, r27
    1206:	a5 2f       	mov	r26, r21
    1208:	94 2f       	mov	r25, r20
    120a:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	96 07       	cpc	r25, r22
    1212:	a1 05       	cpc	r26, r1
    1214:	b1 05       	cpc	r27, r1
    1216:	98 f0       	brcs	.+38     	; 0x123e <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    1218:	da 01       	movw	r26, r20
    121a:	c9 01       	movw	r24, r18
    121c:	07 2e       	mov	r0, r23
    121e:	7a e0       	ldi	r23, 0x0A	; 10
    1220:	b6 95       	lsr	r27
    1222:	a7 95       	ror	r26
    1224:	97 95       	ror	r25
    1226:	87 95       	ror	r24
    1228:	7a 95       	dec	r23
    122a:	d1 f7       	brne	.-12     	; 0x1220 <pwm_setFreq+0x88>
    122c:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    122e:	35 e0       	ldi	r19, 0x05	; 5
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    1232:	31 e0       	ldi	r19, 0x01	; 1
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    1236:	32 e0       	ldi	r19, 0x02	; 2
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    123a:	33 e0       	ldi	r19, 0x03	; 3
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    123e:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1240:	23 b7       	in	r18, 0x33	; 51
    1242:	28 7f       	andi	r18, 0xF8	; 248
    1244:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    1246:	23 b7       	in	r18, 0x33	; 51
    1248:	23 2b       	or	r18, r19
    124a:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    124c:	81 50       	subi	r24, 0x01	; 1
    124e:	81 bf       	out	0x31, r24	; 49
    1250:	08 95       	ret

00001252 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    1252:	85 b7       	in	r24, 0x35	; 53
    1254:	8f 7e       	andi	r24, 0xEF	; 239
    1256:	85 bf       	out	0x35, r24	; 53
    1258:	84 b7       	in	r24, 0x34	; 52
    125a:	8f 7d       	andi	r24, 0xDF	; 223
    125c:	84 bf       	out	0x34, r24	; 52
    125e:	86 b7       	in	r24, 0x36	; 54
    1260:	8f 77       	andi	r24, 0x7F	; 127
    1262:	86 bf       	out	0x36, r24	; 54
    1264:	08 95       	ret

00001266 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    1266:	88 b1       	in	r24, 0x08	; 8
    1268:	88 68       	ori	r24, 0x88	; 136
    126a:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    126c:	85 b7       	in	r24, 0x35	; 53
    126e:	80 62       	ori	r24, 0x20	; 32
    1270:	85 bf       	out	0x35, r24	; 53
    1272:	88 95       	sleep
    1274:	85 b7       	in	r24, 0x35	; 53
    1276:	8f 7d       	andi	r24, 0xDF	; 223
    1278:	85 bf       	out	0x35, r24	; 53
    127a:	08 95       	ret

0000127c <joystick_init>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystick_init() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1282:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    128c:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <joystickOffsetY>
    1290:	08 95       	ret

00001292 <joystick_readPosition>:
}
void joystick_readPosition() {
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12a4:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12ac:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    12ae:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <joystickOffsetX>
    12b2:	c6 17       	cp	r28, r22
    12b4:	80 f4       	brcc	.+32     	; 0x12d6 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	2c 2f       	mov	r18, r28
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	26 1b       	sub	r18, r22
    12be:	37 0b       	sbc	r19, r23
    12c0:	44 e6       	ldi	r20, 0x64	; 100
    12c2:	42 9f       	mul	r20, r18
    12c4:	c0 01       	movw	r24, r0
    12c6:	43 9f       	mul	r20, r19
    12c8:	90 0d       	add	r25, r0
    12ca:	11 24       	eor	r1, r1
    12cc:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodhi4>
    12d0:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <joystick_pos>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    12d6:	46 2f       	mov	r20, r22
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	2c 2f       	mov	r18, r28
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	24 1b       	sub	r18, r20
    12e0:	35 0b       	sbc	r19, r21
    12e2:	64 e6       	ldi	r22, 0x64	; 100
    12e4:	62 9f       	mul	r22, r18
    12e6:	c0 01       	movw	r24, r0
    12e8:	63 9f       	mul	r22, r19
    12ea:	90 0d       	add	r25, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	6f ef       	ldi	r22, 0xFF	; 255
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	64 1b       	sub	r22, r20
    12f4:	75 0b       	sbc	r23, r21
    12f6:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodhi4>
    12fa:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    12fe:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <joystickOffsetY>
    1302:	e2 17       	cp	r30, r18
    1304:	88 f4       	brcc	.+34     	; 0x1328 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1306:	62 2f       	mov	r22, r18
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	4e 2f       	mov	r20, r30
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	46 1b       	sub	r20, r22
    1310:	57 0b       	sbc	r21, r23
    1312:	24 e6       	ldi	r18, 0x64	; 100
    1314:	24 9f       	mul	r18, r20
    1316:	c0 01       	movw	r24, r0
    1318:	25 9f       	mul	r18, r21
    131a:	90 0d       	add	r25, r0
    131c:	11 24       	eor	r1, r1
    131e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodhi4>
    1322:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <joystick_pos+0x1>
    1326:	13 c0       	rjmp	.+38     	; 0x134e <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4e 2f       	mov	r20, r30
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	42 1b       	sub	r20, r18
    1330:	53 0b       	sbc	r21, r19
    1332:	64 e6       	ldi	r22, 0x64	; 100
    1334:	64 9f       	mul	r22, r20
    1336:	c0 01       	movw	r24, r0
    1338:	65 9f       	mul	r22, r21
    133a:	90 0d       	add	r25, r0
    133c:	11 24       	eor	r1, r1
    133e:	6f ef       	ldi	r22, 0xFF	; 255
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	62 1b       	sub	r22, r18
    1344:	73 0b       	sbc	r23, r19
    1346:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodhi4>
    134a:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    134e:	c8 ed       	ldi	r28, 0xD8	; 216
    1350:	d2 e0       	ldi	r29, 0x02	; 2
    1352:	68 81       	ld	r22, Y
    1354:	06 2e       	mov	r0, r22
    1356:	00 0c       	add	r0, r0
    1358:	77 0b       	sbc	r23, r23
    135a:	88 0b       	sbc	r24, r24
    135c:	99 0b       	sbc	r25, r25
    135e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__floatsisf>
    1362:	6b 01       	movw	r12, r22
    1364:	7c 01       	movw	r14, r24
    1366:	69 81       	ldd	r22, Y+1	; 0x01
    1368:	06 2e       	mov	r0, r22
    136a:	00 0c       	add	r0, r0
    136c:	77 0b       	sbc	r23, r23
    136e:	88 0b       	sbc	r24, r24
    1370:	99 0b       	sbc	r25, r25
    1372:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__floatsisf>
    1376:	a7 01       	movw	r20, r14
    1378:	96 01       	movw	r18, r12
    137a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <atan2>
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	44 eb       	ldi	r20, 0xB4	; 180
    1384:	53 e4       	ldi	r21, 0x43	; 67
    1386:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__mulsf3>
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__mulsf3>
    1396:	23 ec       	ldi	r18, 0xC3	; 195
    1398:	35 ef       	ldi	r19, 0xF5	; 245
    139a:	48 e4       	ldi	r20, 0x48	; 72
    139c:	50 e4       	ldi	r21, 0x40	; 64
    139e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__divsf3>
    13a2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fixsfsi>
    13a6:	7b 83       	std	Y+3, r23	; 0x03
    13a8:	6a 83       	std	Y+2, r22	; 0x02
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	08 95       	ret

000013b8 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    13b8:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    13ba:	80 81       	ld	r24, Z
    13bc:	94 e0       	ldi	r25, 0x04	; 4
    13be:	98 0f       	add	r25, r24
    13c0:	99 30       	cpi	r25, 0x09	; 9
    13c2:	20 f4       	brcc	.+8      	; 0x13cc <joystick_getDirection+0x14>
    13c4:	91 81       	ldd	r25, Z+1	; 0x01
    13c6:	9c 5f       	subi	r25, 0xFC	; 252
    13c8:	99 30       	cpi	r25, 0x09	; 9
    13ca:	90 f0       	brcs	.+36     	; 0x13f0 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    13cc:	85 30       	cpi	r24, 0x05	; 5
    13ce:	2c f0       	brlt	.+10     	; 0x13da <joystick_getDirection+0x22>
    13d0:	81 81       	ldd	r24, Z+1	; 0x01
    13d2:	8f 5c       	subi	r24, 0xCF	; 207
    13d4:	83 36       	cpi	r24, 0x63	; 99
    13d6:	38 f4       	brcc	.+14     	; 0x13e6 <joystick_getDirection+0x2e>
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    13da:	8c 3f       	cpi	r24, 0xFC	; 252
    13dc:	24 f4       	brge	.+8      	; 0x13e6 <joystick_getDirection+0x2e>
    13de:	81 81       	ldd	r24, Z+1	; 0x01
    13e0:	8f 5c       	subi	r24, 0xCF	; 207
    13e2:	83 36       	cpi	r24, 0x63	; 99
    13e4:	48 f0       	brcs	.+18     	; 0x13f8 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    13e6:	81 81       	ldd	r24, Z+1	; 0x01
    13e8:	8c 3f       	cpi	r24, 0xFC	; 252
    13ea:	44 f0       	brlt	.+16     	; 0x13fc <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    13f0:	84 e0       	ldi	r24, 0x04	; 4
    13f2:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    13fc:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    13fe:	08 95       	ret

00001400 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    1400:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    1404:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <currentMenu+0x3>
    1408:	94 30       	cpi	r25, 0x04	; 4
    140a:	09 f0       	breq	.+2      	; 0x140e <navigateMenu+0xe>
    140c:	5c c0       	rjmp	.+184    	; 0x14c6 <navigateMenu+0xc6>
			switch (dir) {
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	e1 f1       	breq	.+120    	; 0x148a <navigateMenu+0x8a>
    1412:	60 f1       	brcs	.+88     	; 0x146c <navigateMenu+0x6c>
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	c9 f0       	breq	.+50     	; 0x144a <navigateMenu+0x4a>
    1418:	83 30       	cpi	r24, 0x03	; 3
    141a:	09 f0       	breq	.+2      	; 0x141e <navigateMenu+0x1e>
    141c:	54 c0       	rjmp	.+168    	; 0x14c6 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    141e:	e2 ee       	ldi	r30, 0xE2	; 226
    1420:	f2 e0       	ldi	r31, 0x02	; 2
    1422:	92 81       	ldd	r25, Z+2	; 0x02
    1424:	49 2f       	mov	r20, r25
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	01 90       	ld	r0, Z+
    142a:	f0 81       	ld	r31, Z
    142c:	e0 2d       	mov	r30, r0
    142e:	20 a1       	ldd	r18, Z+32	; 0x20
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	21 50       	subi	r18, 0x01	; 1
    1434:	31 09       	sbc	r19, r1
    1436:	42 17       	cp	r20, r18
    1438:	53 07       	cpc	r21, r19
    143a:	24 f4       	brge	.+8      	; 0x1444 <navigateMenu+0x44>
					currentMenu.childIndex++;
    143c:	9f 5f       	subi	r25, 0xFF	; 255
    143e:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <currentMenu+0x2>
    1442:	41 c0       	rjmp	.+130    	; 0x14c6 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1444:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <currentMenu+0x2>
    1448:	3e c0       	rjmp	.+124    	; 0x14c6 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    144a:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <currentMenu+0x2>
    144e:	99 23       	and	r25, r25
    1450:	21 f0       	breq	.+8      	; 0x145a <navigateMenu+0x5a>
					currentMenu.childIndex--;
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <currentMenu+0x2>
    1458:	36 c0       	rjmp	.+108    	; 0x14c6 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    145a:	e2 ee       	ldi	r30, 0xE2	; 226
    145c:	f2 e0       	ldi	r31, 0x02	; 2
    145e:	a0 81       	ld	r26, Z
    1460:	b1 81       	ldd	r27, Z+1	; 0x01
    1462:	90 96       	adiw	r26, 0x20	; 32
    1464:	9c 91       	ld	r25, X
    1466:	91 50       	subi	r25, 0x01	; 1
    1468:	92 83       	std	Z+2, r25	; 0x02
    146a:	2d c0       	rjmp	.+90     	; 0x14c6 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    146c:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <currentMenu>
    1470:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <currentMenu+0x1>
    1474:	22 89       	ldd	r18, Z+18	; 0x12
    1476:	33 89       	ldd	r19, Z+19	; 0x13
    1478:	21 15       	cp	r18, r1
    147a:	31 05       	cpc	r19, r1
    147c:	21 f1       	breq	.+72     	; 0x14c6 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    147e:	e2 ee       	ldi	r30, 0xE2	; 226
    1480:	f2 e0       	ldi	r31, 0x02	; 2
    1482:	31 83       	std	Z+1, r19	; 0x01
    1484:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    1486:	12 82       	std	Z+2, r1	; 0x02
    1488:	1e c0       	rjmp	.+60     	; 0x14c6 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    148a:	a2 ee       	ldi	r26, 0xE2	; 226
    148c:	b2 e0       	ldi	r27, 0x02	; 2
    148e:	2d 91       	ld	r18, X+
    1490:	3c 91       	ld	r19, X
    1492:	11 97       	sbiw	r26, 0x01	; 1
    1494:	12 96       	adiw	r26, 0x02	; 2
    1496:	9c 91       	ld	r25, X
    1498:	e9 2f       	mov	r30, r25
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	3a 96       	adiw	r30, 0x0a	; 10
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e2 0f       	add	r30, r18
    14a4:	f3 1f       	adc	r31, r19
    14a6:	01 90       	ld	r0, Z+
    14a8:	f0 81       	ld	r31, Z
    14aa:	e0 2d       	mov	r30, r0
    14ac:	90 a1       	ldd	r25, Z+32	; 0x20
    14ae:	91 11       	cpse	r25, r1
    14b0:	03 c0       	rjmp	.+6      	; 0x14b8 <navigateMenu+0xb8>
    14b2:	91 81       	ldd	r25, Z+1	; 0x01
    14b4:	99 23       	and	r25, r25
    14b6:	39 f0       	breq	.+14     	; 0x14c6 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    14b8:	a2 ee       	ldi	r26, 0xE2	; 226
    14ba:	b2 e0       	ldi	r27, 0x02	; 2
    14bc:	11 96       	adiw	r26, 0x01	; 1
    14be:	fc 93       	st	X, r31
    14c0:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    14c2:	12 96       	adiw	r26, 0x02	; 2
    14c4:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    14c6:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <currentMenu+0x3>
    14ca:	08 95       	ret

000014cc <menu_init>:
#include <string.h>


MenuNode nodes[8];

void menu_init() {
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    14d4:	8a e0       	ldi	r24, 0x0A	; 10
    14d6:	ec e8       	ldi	r30, 0x8C	; 140
    14d8:	f2 e0       	ldi	r31, 0x02	; 2
    14da:	a1 e0       	ldi	r26, 0x01	; 1
    14dc:	b3 e0       	ldi	r27, 0x03	; 3
    14de:	01 90       	ld	r0, Z+
    14e0:	0d 92       	st	X+, r0
    14e2:	8a 95       	dec	r24
    14e4:	e1 f7       	brne	.-8      	; 0x14de <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    14e6:	8a e0       	ldi	r24, 0x0A	; 10
    14e8:	e6 e9       	ldi	r30, 0x96	; 150
    14ea:	f2 e0       	ldi	r31, 0x02	; 2
    14ec:	a2 e2       	ldi	r26, 0x22	; 34
    14ee:	b3 e0       	ldi	r27, 0x03	; 3
    14f0:	01 90       	ld	r0, Z+
    14f2:	0d 92       	st	X+, r0
    14f4:	8a 95       	dec	r24
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    14f8:	8c e0       	ldi	r24, 0x0C	; 12
    14fa:	e0 ea       	ldi	r30, 0xA0	; 160
    14fc:	f2 e0       	ldi	r31, 0x02	; 2
    14fe:	a3 e4       	ldi	r26, 0x43	; 67
    1500:	b3 e0       	ldi	r27, 0x03	; 3
    1502:	01 90       	ld	r0, Z+
    1504:	0d 92       	st	X+, r0
    1506:	8a 95       	dec	r24
    1508:	e1 f7       	brne	.-8      	; 0x1502 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    150a:	86 e0       	ldi	r24, 0x06	; 6
    150c:	ec ea       	ldi	r30, 0xAC	; 172
    150e:	f2 e0       	ldi	r31, 0x02	; 2
    1510:	a4 e6       	ldi	r26, 0x64	; 100
    1512:	b3 e0       	ldi	r27, 0x03	; 3
    1514:	01 90       	ld	r0, Z+
    1516:	0d 92       	st	X+, r0
    1518:	8a 95       	dec	r24
    151a:	e1 f7       	brne	.-8      	; 0x1514 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    151c:	87 e0       	ldi	r24, 0x07	; 7
    151e:	e2 eb       	ldi	r30, 0xB2	; 178
    1520:	f2 e0       	ldi	r31, 0x02	; 2
    1522:	a5 e8       	ldi	r26, 0x85	; 133
    1524:	b3 e0       	ldi	r27, 0x03	; 3
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	8a 95       	dec	r24
    152c:	e1 f7       	brne	.-8      	; 0x1526 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    152e:	87 e0       	ldi	r24, 0x07	; 7
    1530:	e9 eb       	ldi	r30, 0xB9	; 185
    1532:	f2 e0       	ldi	r31, 0x02	; 2
    1534:	a6 ea       	ldi	r26, 0xA6	; 166
    1536:	b3 e0       	ldi	r27, 0x03	; 3
    1538:	01 90       	ld	r0, Z+
    153a:	0d 92       	st	X+, r0
    153c:	8a 95       	dec	r24
    153e:	e1 f7       	brne	.-8      	; 0x1538 <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    1540:	8a e0       	ldi	r24, 0x0A	; 10
    1542:	e0 ec       	ldi	r30, 0xC0	; 192
    1544:	f2 e0       	ldi	r31, 0x02	; 2
    1546:	a7 ec       	ldi	r26, 0xC7	; 199
    1548:	b3 e0       	ldi	r27, 0x03	; 3
    154a:	01 90       	ld	r0, Z+
    154c:	0d 92       	st	X+, r0
    154e:	8a 95       	dec	r24
    1550:	e1 f7       	brne	.-8      	; 0x154a <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    1552:	8a e0       	ldi	r24, 0x0A	; 10
    1554:	ea ec       	ldi	r30, 0xCA	; 202
    1556:	f2 e0       	ldi	r31, 0x02	; 2
    1558:	a8 ee       	ldi	r26, 0xE8	; 232
    155a:	b3 e0       	ldi	r27, 0x03	; 3
    155c:	01 90       	ld	r0, Z+
    155e:	0d 92       	st	X+, r0
    1560:	8a 95       	dec	r24
    1562:	e1 f7       	brne	.-8      	; 0x155c <menu_init+0x90>
    1564:	6f ef       	ldi	r22, 0xFF	; 255
    1566:	72 e0       	ldi	r23, 0x02	; 2
    1568:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    156e:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    1570:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    1572:	83 30       	cpi	r24, 0x03	; 3
    1574:	91 05       	cpc	r25, r1
    1576:	14 f0       	brlt	.+4      	; 0x157c <menu_init+0xb0>
			nodes[i].isAction=1;
    1578:	21 83       	std	Z+1, r18	; 0x01
    157a:	01 c0       	rjmp	.+2      	; 0x157e <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    157c:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	b1 96       	adiw	r30, 0x21	; 33
    1582:	88 30       	cpi	r24, 0x08	; 8
    1584:	91 05       	cpc	r25, r1
    1586:	a1 f7       	brne	.-24     	; 0x1570 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    1588:	ef ef       	ldi	r30, 0xFF	; 255
    158a:	f2 e0       	ldi	r31, 0x02	; 2
    158c:	83 e0       	ldi	r24, 0x03	; 3
    158e:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <nodes+0x41>
	nodes[2].numChildren = 2;
    1596:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <nodes+0x62>
	nodes[3].numChildren = 0;
    159a:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <nodes+0x83>
	nodes[4].numChildren = 0;
    159e:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <nodes+0xa4>
	nodes[5].numChildren = 0;
    15a2:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15a6:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15aa:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    15ae:	13 8a       	std	Z+19, r1	; 0x13
    15b0:	12 8a       	std	Z+18, r1	; 0x12
    15b2:	07 e0       	ldi	r16, 0x07	; 7
    15b4:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    15b6:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    15b8:	51 e2       	ldi	r21, 0x21	; 33
    15ba:	18 c0       	rjmp	.+48     	; 0x15ec <menu_init+0x120>
    15bc:	54 9f       	mul	r21, r20
    15be:	f0 01       	movw	r30, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	e1 50       	subi	r30, 0x01	; 1
    15c4:	fd 4f       	sbci	r31, 0xFD	; 253
    15c6:	e9 93       	st	Y+, r30
    15c8:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    15ca:	b3 8b       	std	Z+19, r27	; 0x13
    15cc:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    15ce:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15d0:	2f 5f       	subi	r18, 0xFF	; 255
    15d2:	3f 4f       	sbci	r19, 0xFF	; 255
    15d4:	90 96       	adiw	r26, 0x20	; 32
    15d6:	8c 91       	ld	r24, X
    15d8:	90 97       	sbiw	r26, 0x20	; 32
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	28 17       	cp	r18, r24
    15de:	39 07       	cpc	r19, r25
    15e0:	6c f3       	brlt	.-38     	; 0x15bc <menu_init+0xf0>
    15e2:	6f 5d       	subi	r22, 0xDF	; 223
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    15e6:	60 17       	cp	r22, r16
    15e8:	71 07       	cpc	r23, r17
    15ea:	59 f0       	breq	.+22     	; 0x1602 <menu_init+0x136>
    15ec:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15ee:	90 96       	adiw	r26, 0x20	; 32
    15f0:	8c 91       	ld	r24, X
    15f2:	90 97       	sbiw	r26, 0x20	; 32
    15f4:	88 23       	and	r24, r24
    15f6:	a9 f3       	breq	.-22     	; 0x15e2 <menu_init+0x116>
    15f8:	eb 01       	movw	r28, r22
    15fa:	64 96       	adiw	r28, 0x14	; 20
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	dd cf       	rjmp	.-70     	; 0x15bc <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    1602:	88 ed       	ldi	r24, 0xD8	; 216
    1604:	92 e0       	ldi	r25, 0x02	; 2
    1606:	0e 94 00 0a 	call	0x1400	; 0x1400 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    160a:	e2 ee       	ldi	r30, 0xE2	; 226
    160c:	f2 e0       	ldi	r31, 0x02	; 2
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	92 e0       	ldi	r25, 0x02	; 2
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1616:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    1618:	84 e0       	ldi	r24, 0x04	; 4
    161a:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	08 95       	ret

00001626 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
	oled_reset();
    1630:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
	oled_home();
    1634:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    1638:	c2 ee       	ldi	r28, 0xE2	; 226
    163a:	d2 e0       	ldi	r29, 0x02	; 2
    163c:	88 81       	ld	r24, Y
    163e:	99 81       	ldd	r25, Y+1	; 0x01
    1640:	02 96       	adiw	r24, 0x02	; 2
    1642:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1646:	e8 81       	ld	r30, Y
    1648:	f9 81       	ldd	r31, Y+1	; 0x01
    164a:	80 a1       	ldd	r24, Z+32	; 0x20
    164c:	88 23       	and	r24, r24
    164e:	51 f1       	breq	.+84     	; 0x16a4 <menu_printCurrentMenu+0x7e>
    1650:	68 94       	set
    1652:	ff 24       	eor	r15, r15
    1654:	f1 f8       	bld	r15, 1
    1656:	c0 e0       	ldi	r28, 0x00	; 0
    1658:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    165a:	02 ee       	ldi	r16, 0xE2	; 226
    165c:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    165e:	8f 2d       	mov	r24, r15
    1660:	0e 94 bc 0b 	call	0x1778	; 0x1778 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1664:	d8 01       	movw	r26, r16
    1666:	8d 91       	ld	r24, X+
    1668:	9c 91       	ld	r25, X
    166a:	fe 01       	movw	r30, r28
    166c:	3a 96       	adiw	r30, 0x0a	; 10
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	e8 0f       	add	r30, r24
    1674:	f9 1f       	adc	r31, r25
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	02 96       	adiw	r24, 0x02	; 2
    167c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print>
		if (currentMenu.childIndex == i) {
    1680:	f8 01       	movw	r30, r16
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	8c 17       	cp	r24, r28
    1688:	9d 07       	cpc	r25, r29
    168a:	11 f4       	brne	.+4      	; 0x1690 <menu_printCurrentMenu+0x6a>
			oled_print_arrow();
    168c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1690:	21 96       	adiw	r28, 0x01	; 1
    1692:	f3 94       	inc	r15
    1694:	d8 01       	movw	r26, r16
    1696:	ed 91       	ld	r30, X+
    1698:	fc 91       	ld	r31, X
    169a:	80 a1       	ldd	r24, Z+32	; 0x20
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	c8 17       	cp	r28, r24
    16a0:	d9 07       	cpc	r29, r25
    16a2:	ec f2       	brlt	.-70     	; 0x165e <menu_printCurrentMenu+0x38>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	08 95       	ret

000016b0 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16b0:	80 55       	subi	r24, 0x50	; 80
    16b2:	e0 e0       	ldi	r30, 0x00	; 0
    16b4:	f0 e1       	ldi	r31, 0x10	; 16
    16b6:	80 83       	st	Z, r24
    16b8:	86 2f       	mov	r24, r22
    16ba:	8f 70       	andi	r24, 0x0F	; 15
    16bc:	80 83       	st	Z, r24
    16be:	62 95       	swap	r22
    16c0:	6f 70       	andi	r22, 0x0F	; 15
    16c2:	60 61       	ori	r22, 0x10	; 16
    16c4:	60 83       	st	Z, r22
    16c6:	08 95       	ret

000016c8 <oled_reset>:
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	c0 e0       	ldi	r28, 0x00	; 0
    16d2:	d2 e1       	ldi	r29, 0x12	; 18
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	81 2f       	mov	r24, r17
    16d8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <oled_pos>
    16dc:	80 e8       	ldi	r24, 0x80	; 128
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	18 82       	st	Y, r1
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	e9 f7       	brne	.-6      	; 0x16e0 <oled_reset+0x18>
    16e6:	1f 5f       	subi	r17, 0xFF	; 255
    16e8:	18 30       	cpi	r17, 0x08	; 8
    16ea:	a1 f7       	brne	.-24     	; 0x16d4 <oled_reset+0xc>
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	08 95       	ret

000016f4 <oled_print_arrow>:
    16f4:	e0 e0       	ldi	r30, 0x00	; 0
    16f6:	f2 e1       	ldi	r31, 0x12	; 18
    16f8:	88 e1       	ldi	r24, 0x18	; 24
    16fa:	80 83       	st	Z, r24
    16fc:	9c e3       	ldi	r25, 0x3C	; 60
    16fe:	90 83       	st	Z, r25
    1700:	9e e7       	ldi	r25, 0x7E	; 126
    1702:	90 83       	st	Z, r25
    1704:	80 83       	st	Z, r24
    1706:	80 83       	st	Z, r24
    1708:	08 95       	ret

0000170a <oled_home>:
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <oled_pos>
    1712:	08 95       	ret

00001714 <oled_init>:
    1714:	e0 e0       	ldi	r30, 0x00	; 0
    1716:	f0 e1       	ldi	r31, 0x10	; 16
    1718:	8e ea       	ldi	r24, 0xAE	; 174
    171a:	80 83       	st	Z, r24
    171c:	81 ea       	ldi	r24, 0xA1	; 161
    171e:	80 83       	st	Z, r24
    1720:	8a ed       	ldi	r24, 0xDA	; 218
    1722:	80 83       	st	Z, r24
    1724:	82 e1       	ldi	r24, 0x12	; 18
    1726:	80 83       	st	Z, r24
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	80 83       	st	Z, r24
    172c:	88 ea       	ldi	r24, 0xA8	; 168
    172e:	80 83       	st	Z, r24
    1730:	8f e3       	ldi	r24, 0x3F	; 63
    1732:	80 83       	st	Z, r24
    1734:	85 ed       	ldi	r24, 0xD5	; 213
    1736:	80 83       	st	Z, r24
    1738:	80 e8       	ldi	r24, 0x80	; 128
    173a:	80 83       	st	Z, r24
    173c:	81 e8       	ldi	r24, 0x81	; 129
    173e:	80 83       	st	Z, r24
    1740:	80 e5       	ldi	r24, 0x50	; 80
    1742:	80 83       	st	Z, r24
    1744:	89 ed       	ldi	r24, 0xD9	; 217
    1746:	80 83       	st	Z, r24
    1748:	81 e2       	ldi	r24, 0x21	; 33
    174a:	80 83       	st	Z, r24
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	80 83       	st	Z, r24
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	80 83       	st	Z, r24
    1754:	8b ed       	ldi	r24, 0xDB	; 219
    1756:	80 83       	st	Z, r24
    1758:	80 e3       	ldi	r24, 0x30	; 48
    175a:	80 83       	st	Z, r24
    175c:	8d ea       	ldi	r24, 0xAD	; 173
    175e:	80 83       	st	Z, r24
    1760:	10 82       	st	Z, r1
    1762:	84 ea       	ldi	r24, 0xA4	; 164
    1764:	80 83       	st	Z, r24
    1766:	86 ea       	ldi	r24, 0xA6	; 166
    1768:	80 83       	st	Z, r24
    176a:	8f ea       	ldi	r24, 0xAF	; 175
    176c:	80 83       	st	Z, r24
    176e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <oled_reset>
    1772:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_home>
    1776:	08 95       	ret

00001778 <oled_gotoLine>:
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <oled_pos>
    177e:	08 95       	ret

00001780 <oled_print>:

void oled_print(char* character){
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	dc 01       	movw	r26, r24
	while (*character != '\0')
    1786:	8c 91       	ld	r24, X
    1788:	81 11       	cpse	r24, r1
    178a:	1a c0       	rjmp	.+52     	; 0x17c0 <oled_print+0x40>
    178c:	1e c0       	rjmp	.+60     	; 0x17ca <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    178e:	ec 91       	ld	r30, X
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	b0 97       	sbiw	r30, 0x20	; 32
    1794:	ee 0f       	add	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	ee 0f       	add	r30, r30
    179a:	ff 1f       	adc	r31, r31
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	e2 0f       	add	r30, r18
    17a2:	f3 1f       	adc	r31, r19
    17a4:	e7 5d       	subi	r30, 0xD7	; 215
    17a6:	fd 4f       	sbci	r31, 0xFD	; 253
    17a8:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17aa:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17ac:	2f 5f       	subi	r18, 0xFF	; 255
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	28 30       	cpi	r18, 0x08	; 8
    17b2:	31 05       	cpc	r19, r1
    17b4:	61 f7       	brne	.-40     	; 0x178e <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17b6:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    17b8:	8c 91       	ld	r24, X
    17ba:	81 11       	cpse	r24, r1
    17bc:	03 c0       	rjmp	.+6      	; 0x17c4 <oled_print+0x44>
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17c0:	c0 e0       	ldi	r28, 0x00	; 0
    17c2:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	e2 cf       	rjmp	.-60     	; 0x178e <oled_print+0xe>
		}
		character++;
	}
	
	
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <setupInit>:
#define MYUBRR FOSC/16/BAUD-1
#include <util/delay.h>


	void setupInit(void){
	cli();
    17d0:	f8 94       	cli
	xmem_init();
    17d2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <xmem_init>
    17d6:	2f ef       	ldi	r18, 0xFF	; 255
    17d8:	8f e7       	ldi	r24, 0x7F	; 127
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	21 50       	subi	r18, 0x01	; 1
    17de:	80 40       	sbci	r24, 0x00	; 0
    17e0:	90 40       	sbci	r25, 0x00	; 0
    17e2:	e1 f7       	brne	.-8      	; 0x17dc <setupInit+0xc>
    17e4:	00 c0       	rjmp	.+0      	; 0x17e6 <setupInit+0x16>
    17e6:	00 c0       	rjmp	.+0      	; 0x17e8 <setupInit+0x18>
	_delay_ms(100);
	USART_init(MYUBRR);
    17e8:	8f e1       	ldi	r24, 0x1F	; 31
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <USART_init>
    17f0:	2f ef       	ldi	r18, 0xFF	; 255
    17f2:	8f e7       	ldi	r24, 0x7F	; 127
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	21 50       	subi	r18, 0x01	; 1
    17f8:	80 40       	sbci	r24, 0x00	; 0
    17fa:	90 40       	sbci	r25, 0x00	; 0
    17fc:	e1 f7       	brne	.-8      	; 0x17f6 <setupInit+0x26>
    17fe:	00 c0       	rjmp	.+0      	; 0x1800 <setupInit+0x30>
    1800:	00 c0       	rjmp	.+0      	; 0x1802 <setupInit+0x32>
	_delay_ms(100);
	CAN_init();
    1802:	0e 94 60 04 	call	0x8c0	; 0x8c0 <CAN_init>
    1806:	2f ef       	ldi	r18, 0xFF	; 255
    1808:	8f e7       	ldi	r24, 0x7F	; 127
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	21 50       	subi	r18, 0x01	; 1
    180e:	80 40       	sbci	r24, 0x00	; 0
    1810:	90 40       	sbci	r25, 0x00	; 0
    1812:	e1 f7       	brne	.-8      	; 0x180c <setupInit+0x3c>
    1814:	00 c0       	rjmp	.+0      	; 0x1816 <setupInit+0x46>
    1816:	00 c0       	rjmp	.+0      	; 0x1818 <setupInit+0x48>
	_delay_ms(100);
	adcInit();
    1818:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
    181c:	2f ef       	ldi	r18, 0xFF	; 255
    181e:	8f e7       	ldi	r24, 0x7F	; 127
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	21 50       	subi	r18, 0x01	; 1
    1824:	80 40       	sbci	r24, 0x00	; 0
    1826:	90 40       	sbci	r25, 0x00	; 0
    1828:	e1 f7       	brne	.-8      	; 0x1822 <setupInit+0x52>
    182a:	00 c0       	rjmp	.+0      	; 0x182c <setupInit+0x5c>
    182c:	00 c0       	rjmp	.+0      	; 0x182e <setupInit+0x5e>
	_delay_ms(100);
	joystick_init();
    182e:	0e 94 3e 09 	call	0x127c	; 0x127c <joystick_init>
    1832:	2f ef       	ldi	r18, 0xFF	; 255
    1834:	8f e7       	ldi	r24, 0x7F	; 127
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	21 50       	subi	r18, 0x01	; 1
    183a:	80 40       	sbci	r24, 0x00	; 0
    183c:	90 40       	sbci	r25, 0x00	; 0
    183e:	e1 f7       	brne	.-8      	; 0x1838 <setupInit+0x68>
    1840:	00 c0       	rjmp	.+0      	; 0x1842 <setupInit+0x72>
    1842:	00 c0       	rjmp	.+0      	; 0x1844 <setupInit+0x74>
	_delay_ms(100);
	touchButton_init();
    1844:	0e 94 ce 0c 	call	0x199c	; 0x199c <touchButton_init>
    1848:	2f ef       	ldi	r18, 0xFF	; 255
    184a:	8f e7       	ldi	r24, 0x7F	; 127
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	21 50       	subi	r18, 0x01	; 1
    1850:	80 40       	sbci	r24, 0x00	; 0
    1852:	90 40       	sbci	r25, 0x00	; 0
    1854:	e1 f7       	brne	.-8      	; 0x184e <setupInit+0x7e>
    1856:	00 c0       	rjmp	.+0      	; 0x1858 <setupInit+0x88>
    1858:	00 c0       	rjmp	.+0      	; 0x185a <setupInit+0x8a>
	_delay_ms(100);
	oled_init();
    185a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_init>
    185e:	2f ef       	ldi	r18, 0xFF	; 255
    1860:	8f e7       	ldi	r24, 0x7F	; 127
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	21 50       	subi	r18, 0x01	; 1
    1866:	80 40       	sbci	r24, 0x00	; 0
    1868:	90 40       	sbci	r25, 0x00	; 0
    186a:	e1 f7       	brne	.-8      	; 0x1864 <setupInit+0x94>
    186c:	00 c0       	rjmp	.+0      	; 0x186e <setupInit+0x9e>
    186e:	00 c0       	rjmp	.+0      	; 0x1870 <setupInit+0xa0>
	_delay_ms(100);
	timer_init();
    1870:	0e 94 be 0c 	call	0x197c	; 0x197c <timer_init>
    1874:	2f ef       	ldi	r18, 0xFF	; 255
    1876:	8f e7       	ldi	r24, 0x7F	; 127
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	21 50       	subi	r18, 0x01	; 1
    187c:	80 40       	sbci	r24, 0x00	; 0
    187e:	90 40       	sbci	r25, 0x00	; 0
    1880:	e1 f7       	brne	.-8      	; 0x187a <setupInit+0xaa>
    1882:	00 c0       	rjmp	.+0      	; 0x1884 <setupInit+0xb4>
    1884:	00 c0       	rjmp	.+0      	; 0x1886 <setupInit+0xb6>
	_delay_ms(100);
	sleep_init();
    1886:	0e 94 29 09 	call	0x1252	; 0x1252 <sleep_init>
    188a:	2f ef       	ldi	r18, 0xFF	; 255
    188c:	8f e7       	ldi	r24, 0x7F	; 127
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	21 50       	subi	r18, 0x01	; 1
    1892:	80 40       	sbci	r24, 0x00	; 0
    1894:	90 40       	sbci	r25, 0x00	; 0
    1896:	e1 f7       	brne	.-8      	; 0x1890 <setupInit+0xc0>
    1898:	00 c0       	rjmp	.+0      	; 0x189a <setupInit+0xca>
    189a:	00 c0       	rjmp	.+0      	; 0x189c <setupInit+0xcc>
	_delay_ms(100);
	menu_init();
    189c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <menu_init>
    18a0:	2f ef       	ldi	r18, 0xFF	; 255
    18a2:	8f e7       	ldi	r24, 0x7F	; 127
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	21 50       	subi	r18, 0x01	; 1
    18a8:	80 40       	sbci	r24, 0x00	; 0
    18aa:	90 40       	sbci	r25, 0x00	; 0
    18ac:	e1 f7       	brne	.-8      	; 0x18a6 <setupInit+0xd6>
    18ae:	00 c0       	rjmp	.+0      	; 0x18b0 <setupInit+0xe0>
    18b0:	00 c0       	rjmp	.+0      	; 0x18b2 <setupInit+0xe2>
	_delay_ms(100);
	pwm_init();
    18b2:	0e 94 bd 08 	call	0x117a	; 0x117a <pwm_init>
    18b6:	2f ef       	ldi	r18, 0xFF	; 255
    18b8:	8f e7       	ldi	r24, 0x7F	; 127
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	21 50       	subi	r18, 0x01	; 1
    18be:	80 40       	sbci	r24, 0x00	; 0
    18c0:	90 40       	sbci	r25, 0x00	; 0
    18c2:	e1 f7       	brne	.-8      	; 0x18bc <setupInit+0xec>
    18c4:	00 c0       	rjmp	.+0      	; 0x18c6 <setupInit+0xf6>
    18c6:	00 c0       	rjmp	.+0      	; 0x18c8 <setupInit+0xf8>
	_delay_ms(100);
	game_init();
    18c8:	0e 94 35 05 	call	0xa6a	; 0xa6a <game_init>
    18cc:	2f ef       	ldi	r18, 0xFF	; 255
    18ce:	8f e7       	ldi	r24, 0x7F	; 127
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	21 50       	subi	r18, 0x01	; 1
    18d4:	80 40       	sbci	r24, 0x00	; 0
    18d6:	90 40       	sbci	r25, 0x00	; 0
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <setupInit+0x102>
    18da:	00 c0       	rjmp	.+0      	; 0x18dc <setupInit+0x10c>
    18dc:	00 c0       	rjmp	.+0      	; 0x18de <setupInit+0x10e>
	_delay_ms(100);
	sei();
    18de:	78 94       	sei
    18e0:	08 95       	ret

000018e2 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    18ec:	c0 ef       	ldi	r28, 0xF0	; 240
    18ee:	d2 e0       	ldi	r29, 0x02	; 2
    18f0:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    18f8:	89 83       	std	Y+1, r24	; 0x01
}
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    1900:	87 b3       	in	r24, 0x17	; 23
    1902:	80 6a       	ori	r24, 0xA0	; 160
    1904:	87 bb       	out	0x17, r24	; 23
    1906:	bc 9a       	sbi	0x17, 4	; 23
    1908:	8d b1       	in	r24, 0x0d	; 13
    190a:	81 65       	ori	r24, 0x51	; 81
    190c:	8d b9       	out	0x0d, r24	; 13
    190e:	c4 9a       	sbi	0x18, 4	; 24
    1910:	08 95       	ret

00001912 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    1912:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    1914:	77 9b       	sbis	0x0e, 7	; 14
    1916:	fe cf       	rjmp	.-4      	; 0x1914 <SPI_masterWrite+0x2>

}
    1918:	08 95       	ret

0000191a <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    191a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    191c:	77 9b       	sbis	0x0e, 7	; 14
    191e:	fe cf       	rjmp	.-4      	; 0x191c <SPI_masterRead+0x2>
	return SPDR;
    1920:	8f b1       	in	r24, 0x0f	; 15
}
    1922:	08 95       	ret

00001924 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    1924:	66 23       	and	r22, r22
    1926:	69 f0       	breq	.+26     	; 0x1942 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1928:	48 b3       	in	r20, 0x18	; 24
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	b9 01       	movw	r22, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <SPI_setChipSelect+0x12>
    1932:	66 0f       	add	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	8a 95       	dec	r24
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <SPI_setChipSelect+0xe>
    193a:	cb 01       	movw	r24, r22
    193c:	84 2b       	or	r24, r20
    193e:	88 bb       	out	0x18, r24	; 24
    1940:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    1942:	48 b3       	in	r20, 0x18	; 24
    1944:	21 e0       	ldi	r18, 0x01	; 1
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	b9 01       	movw	r22, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <SPI_setChipSelect+0x2c>
    194c:	66 0f       	add	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	8a 95       	dec	r24
    1952:	e2 f7       	brpl	.-8      	; 0x194c <SPI_setChipSelect+0x28>
    1954:	cb 01       	movw	r24, r22
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	88 bb       	out	0x18, r24	; 24
    195c:	08 95       	ret

0000195e <__vector_14>:
#include "menu.h"
#include "game.h"
#include <avr/interrupt.h>


ISR (TIMER1_COMPB_vect) {
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	8f 93       	push	r24
	
	timerFlag=1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <timerFlag>

}
    1970:	8f 91       	pop	r24
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    197c:	89 b7       	in	r24, 0x39	; 57
    197e:	80 62       	ori	r24, 0x20	; 32
    1980:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1982:	1d bc       	out	0x2d, r1	; 45
    1984:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1986:	80 e3       	ldi	r24, 0x30	; 48
    1988:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    198a:	85 e0       	ldi	r24, 0x05	; 5
    198c:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    198e:	80 ee       	ldi	r24, 0xE0	; 224
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	99 bd       	out	0x29, r25	; 41
    1994:	88 bd       	out	0x28, r24	; 40
	timerFlag=0;
    1996:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <timerFlag>
    199a:	08 95       	ret

0000199c <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    199c:	36 b3       	in	r19, 0x16	; 22
    199e:	26 b3       	in	r18, 0x16	; 22
    19a0:	47 b3       	in	r20, 0x17	; 23
    19a2:	32 70       	andi	r19, 0x02	; 2
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	bc 01       	movw	r22, r24
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <touchButton_init+0x14>
    19ac:	66 0f       	add	r22, r22
    19ae:	77 1f       	adc	r23, r23
    19b0:	3a 95       	dec	r19
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <touchButton_init+0x10>
    19b4:	24 70       	andi	r18, 0x04	; 4
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <touchButton_init+0x20>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	2a 95       	dec	r18
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <touchButton_init+0x1c>
    19c0:	86 2b       	or	r24, r22
    19c2:	97 2b       	or	r25, r23
    19c4:	80 95       	com	r24
    19c6:	90 95       	com	r25
    19c8:	84 23       	and	r24, r20
    19ca:	87 bb       	out	0x17, r24	; 23
    19cc:	08 95       	ret

000019ce <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    19ce:	86 b3       	in	r24, 0x16	; 22
    19d0:	e6 ee       	ldi	r30, 0xE6	; 230
    19d2:	f2 e0       	ldi	r31, 0x02	; 2
    19d4:	86 95       	lsr	r24
    19d6:	81 70       	andi	r24, 0x01	; 1
    19d8:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    19da:	86 b3       	in	r24, 0x16	; 22
    19dc:	82 fb       	bst	r24, 2
    19de:	88 27       	eor	r24, r24
    19e0:	80 f9       	bld	r24, 0
    19e2:	81 83       	std	Z+1, r24	; 0x01
    19e4:	08 95       	ret

000019e6 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    19e6:	5d 9b       	sbis	0x0b, 5	; 11
    19e8:	fe cf       	rjmp	.-4      	; 0x19e6 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    19ea:	8c b9       	out	0x0c, r24	; 12
    19ec:	08 95       	ret

000019ee <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    19ee:	5f 9b       	sbis	0x0b, 7	; 11
    19f0:	fe cf       	rjmp	.-4      	; 0x19ee <USART_receiveChar>
		;
	
	return UDR0;
    19f2:	8c b1       	in	r24, 0x0c	; 12
    19f4:	08 95       	ret

000019f6 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    19f6:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    19f8:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    19fa:	88 e1       	ldi	r24, 0x18	; 24
    19fc:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    19fe:	8e e8       	ldi	r24, 0x8E	; 142
    1a00:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1a02:	67 ef       	ldi	r22, 0xF7	; 247
    1a04:	7c e0       	ldi	r23, 0x0C	; 12
    1a06:	83 ef       	ldi	r24, 0xF3	; 243
    1a08:	9c e0       	ldi	r25, 0x0C	; 12
    1a0a:	0e 94 37 10 	call	0x206e	; 0x206e <fdevopen>
    1a0e:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <uart+0x1>
    1a12:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <uart>
    1a16:	08 95       	ret

00001a18 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1a18:	85 b7       	in	r24, 0x35	; 53
    1a1a:	80 68       	ori	r24, 0x80	; 128
    1a1c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1a1e:	80 b7       	in	r24, 0x30	; 48
    1a20:	88 60       	ori	r24, 0x08	; 8
    1a22:	80 bf       	out	0x30, r24	; 48
    1a24:	08 95       	ret
    1a26:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__fp_pscA>
    1a2a:	60 f0       	brcs	.+24     	; 0x1a44 <xmem_init+0x2c>
    1a2c:	80 e8       	ldi	r24, 0x80	; 128
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <xmem_init+0x1c>
    1a32:	9e ef       	ldi	r25, 0xFE	; 254
    1a34:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscB>
    1a38:	28 f0       	brcs	.+10     	; 0x1a44 <xmem_init+0x2c>
    1a3a:	40 e8       	ldi	r20, 0x80	; 128
    1a3c:	51 e0       	ldi	r21, 0x01	; 1
    1a3e:	71 f4       	brne	.+28     	; 0x1a5c <atan2+0x10>
    1a40:	5e ef       	ldi	r21, 0xFE	; 254
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <atan2+0x10>
    1a44:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_nan>
    1a48:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__fp_zero>

00001a4c <atan2>:
    1a4c:	e9 2f       	mov	r30, r25
    1a4e:	e0 78       	andi	r30, 0x80	; 128
    1a50:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_split3>
    1a54:	40 f3       	brcs	.-48     	; 0x1a26 <xmem_init+0xe>
    1a56:	09 2e       	mov	r0, r25
    1a58:	05 2a       	or	r0, r21
    1a5a:	b1 f3       	breq	.-20     	; 0x1a48 <xmem_init+0x30>
    1a5c:	26 17       	cp	r18, r22
    1a5e:	37 07       	cpc	r19, r23
    1a60:	48 07       	cpc	r20, r24
    1a62:	59 07       	cpc	r21, r25
    1a64:	38 f0       	brcs	.+14     	; 0x1a74 <atan2+0x28>
    1a66:	0e 2e       	mov	r0, r30
    1a68:	07 f8       	bld	r0, 7
    1a6a:	e0 25       	eor	r30, r0
    1a6c:	69 f0       	breq	.+26     	; 0x1a88 <atan2+0x3c>
    1a6e:	e0 25       	eor	r30, r0
    1a70:	e0 64       	ori	r30, 0x40	; 64
    1a72:	0a c0       	rjmp	.+20     	; 0x1a88 <atan2+0x3c>
    1a74:	ef 63       	ori	r30, 0x3F	; 63
    1a76:	07 f8       	bld	r0, 7
    1a78:	00 94       	com	r0
    1a7a:	07 fa       	bst	r0, 7
    1a7c:	db 01       	movw	r26, r22
    1a7e:	b9 01       	movw	r22, r18
    1a80:	9d 01       	movw	r18, r26
    1a82:	dc 01       	movw	r26, r24
    1a84:	ca 01       	movw	r24, r20
    1a86:	ad 01       	movw	r20, r26
    1a88:	ef 93       	push	r30
    1a8a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divsf3_pse>
    1a8e:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_round>
    1a92:	0e 94 56 0d 	call	0x1aac	; 0x1aac <atan>
    1a96:	5f 91       	pop	r21
    1a98:	55 23       	and	r21, r21
    1a9a:	39 f0       	breq	.+14     	; 0x1aaa <atan2+0x5e>
    1a9c:	2b ed       	ldi	r18, 0xDB	; 219
    1a9e:	3f e0       	ldi	r19, 0x0F	; 15
    1aa0:	49 e4       	ldi	r20, 0x49	; 73
    1aa2:	50 fd       	sbrc	r21, 0
    1aa4:	49 ec       	ldi	r20, 0xC9	; 201
    1aa6:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__addsf3>
    1aaa:	08 95       	ret

00001aac <atan>:
    1aac:	df 93       	push	r29
    1aae:	dd 27       	eor	r29, r29
    1ab0:	b9 2f       	mov	r27, r25
    1ab2:	bf 77       	andi	r27, 0x7F	; 127
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	16 16       	cp	r1, r22
    1aba:	17 06       	cpc	r1, r23
    1abc:	48 07       	cpc	r20, r24
    1abe:	5b 07       	cpc	r21, r27
    1ac0:	18 f4       	brcc	.+6      	; 0x1ac8 <atan+0x1c>
    1ac2:	d9 2f       	mov	r29, r25
    1ac4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <inverse>
    1ac8:	9f 93       	push	r25
    1aca:	8f 93       	push	r24
    1acc:	7f 93       	push	r23
    1ace:	6f 93       	push	r22
    1ad0:	0e 94 57 0f 	call	0x1eae	; 0x1eae <square>
    1ad4:	e0 e7       	ldi	r30, 0x70	; 112
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__fp_powser>
    1adc:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_round>
    1ae0:	2f 91       	pop	r18
    1ae2:	3f 91       	pop	r19
    1ae4:	4f 91       	pop	r20
    1ae6:	5f 91       	pop	r21
    1ae8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__mulsf3x>
    1aec:	dd 23       	and	r29, r29
    1aee:	51 f0       	breq	.+20     	; 0x1b04 <atan+0x58>
    1af0:	90 58       	subi	r25, 0x80	; 128
    1af2:	a2 ea       	ldi	r26, 0xA2	; 162
    1af4:	2a ed       	ldi	r18, 0xDA	; 218
    1af6:	3f e0       	ldi	r19, 0x0F	; 15
    1af8:	49 ec       	ldi	r20, 0xC9	; 201
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	d0 78       	andi	r29, 0x80	; 128
    1afe:	5d 27       	eor	r21, r29
    1b00:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__addsf3x>
    1b04:	df 91       	pop	r29
    1b06:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_round>

00001b0a <__divsf3>:
    1b0a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__divsf3x>
    1b0e:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_round>
    1b12:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscB>
    1b16:	58 f0       	brcs	.+22     	; 0x1b2e <__divsf3+0x24>
    1b18:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__fp_pscA>
    1b1c:	40 f0       	brcs	.+16     	; 0x1b2e <__divsf3+0x24>
    1b1e:	29 f4       	brne	.+10     	; 0x1b2a <__divsf3+0x20>
    1b20:	5f 3f       	cpi	r21, 0xFF	; 255
    1b22:	29 f0       	breq	.+10     	; 0x1b2e <__divsf3+0x24>
    1b24:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__fp_inf>
    1b28:	51 11       	cpse	r21, r1
    1b2a:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>
    1b2e:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_nan>

00001b32 <__divsf3x>:
    1b32:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_split3>
    1b36:	68 f3       	brcs	.-38     	; 0x1b12 <__divsf3+0x8>

00001b38 <__divsf3_pse>:
    1b38:	99 23       	and	r25, r25
    1b3a:	b1 f3       	breq	.-20     	; 0x1b28 <__divsf3+0x1e>
    1b3c:	55 23       	and	r21, r21
    1b3e:	91 f3       	breq	.-28     	; 0x1b24 <__divsf3+0x1a>
    1b40:	95 1b       	sub	r25, r21
    1b42:	55 0b       	sbc	r21, r21
    1b44:	bb 27       	eor	r27, r27
    1b46:	aa 27       	eor	r26, r26
    1b48:	62 17       	cp	r22, r18
    1b4a:	73 07       	cpc	r23, r19
    1b4c:	84 07       	cpc	r24, r20
    1b4e:	38 f0       	brcs	.+14     	; 0x1b5e <__divsf3_pse+0x26>
    1b50:	9f 5f       	subi	r25, 0xFF	; 255
    1b52:	5f 4f       	sbci	r21, 0xFF	; 255
    1b54:	22 0f       	add	r18, r18
    1b56:	33 1f       	adc	r19, r19
    1b58:	44 1f       	adc	r20, r20
    1b5a:	aa 1f       	adc	r26, r26
    1b5c:	a9 f3       	breq	.-22     	; 0x1b48 <__divsf3_pse+0x10>
    1b5e:	35 d0       	rcall	.+106    	; 0x1bca <__divsf3_pse+0x92>
    1b60:	0e 2e       	mov	r0, r30
    1b62:	3a f0       	brmi	.+14     	; 0x1b72 <__divsf3_pse+0x3a>
    1b64:	e0 e8       	ldi	r30, 0x80	; 128
    1b66:	32 d0       	rcall	.+100    	; 0x1bcc <__divsf3_pse+0x94>
    1b68:	91 50       	subi	r25, 0x01	; 1
    1b6a:	50 40       	sbci	r21, 0x00	; 0
    1b6c:	e6 95       	lsr	r30
    1b6e:	00 1c       	adc	r0, r0
    1b70:	ca f7       	brpl	.-14     	; 0x1b64 <__divsf3_pse+0x2c>
    1b72:	2b d0       	rcall	.+86     	; 0x1bca <__divsf3_pse+0x92>
    1b74:	fe 2f       	mov	r31, r30
    1b76:	29 d0       	rcall	.+82     	; 0x1bca <__divsf3_pse+0x92>
    1b78:	66 0f       	add	r22, r22
    1b7a:	77 1f       	adc	r23, r23
    1b7c:	88 1f       	adc	r24, r24
    1b7e:	bb 1f       	adc	r27, r27
    1b80:	26 17       	cp	r18, r22
    1b82:	37 07       	cpc	r19, r23
    1b84:	48 07       	cpc	r20, r24
    1b86:	ab 07       	cpc	r26, r27
    1b88:	b0 e8       	ldi	r27, 0x80	; 128
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <__divsf3_pse+0x56>
    1b8c:	bb 0b       	sbc	r27, r27
    1b8e:	80 2d       	mov	r24, r0
    1b90:	bf 01       	movw	r22, r30
    1b92:	ff 27       	eor	r31, r31
    1b94:	93 58       	subi	r25, 0x83	; 131
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	3a f0       	brmi	.+14     	; 0x1ba8 <__divsf3_pse+0x70>
    1b9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b9c:	51 05       	cpc	r21, r1
    1b9e:	78 f0       	brcs	.+30     	; 0x1bbe <__divsf3_pse+0x86>
    1ba0:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__fp_inf>
    1ba4:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>
    1ba8:	5f 3f       	cpi	r21, 0xFF	; 255
    1baa:	e4 f3       	brlt	.-8      	; 0x1ba4 <__divsf3_pse+0x6c>
    1bac:	98 3e       	cpi	r25, 0xE8	; 232
    1bae:	d4 f3       	brlt	.-12     	; 0x1ba4 <__divsf3_pse+0x6c>
    1bb0:	86 95       	lsr	r24
    1bb2:	77 95       	ror	r23
    1bb4:	67 95       	ror	r22
    1bb6:	b7 95       	ror	r27
    1bb8:	f7 95       	ror	r31
    1bba:	9f 5f       	subi	r25, 0xFF	; 255
    1bbc:	c9 f7       	brne	.-14     	; 0x1bb0 <__divsf3_pse+0x78>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	91 1d       	adc	r25, r1
    1bc2:	96 95       	lsr	r25
    1bc4:	87 95       	ror	r24
    1bc6:	97 f9       	bld	r25, 7
    1bc8:	08 95       	ret
    1bca:	e1 e0       	ldi	r30, 0x01	; 1
    1bcc:	66 0f       	add	r22, r22
    1bce:	77 1f       	adc	r23, r23
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	bb 1f       	adc	r27, r27
    1bd4:	62 17       	cp	r22, r18
    1bd6:	73 07       	cpc	r23, r19
    1bd8:	84 07       	cpc	r24, r20
    1bda:	ba 07       	cpc	r27, r26
    1bdc:	20 f0       	brcs	.+8      	; 0x1be6 <__divsf3_pse+0xae>
    1bde:	62 1b       	sub	r22, r18
    1be0:	73 0b       	sbc	r23, r19
    1be2:	84 0b       	sbc	r24, r20
    1be4:	ba 0b       	sbc	r27, r26
    1be6:	ee 1f       	adc	r30, r30
    1be8:	88 f7       	brcc	.-30     	; 0x1bcc <__divsf3_pse+0x94>
    1bea:	e0 95       	com	r30
    1bec:	08 95       	ret

00001bee <__fixsfsi>:
    1bee:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fixunssfsi>
    1bf2:	68 94       	set
    1bf4:	b1 11       	cpse	r27, r1
    1bf6:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>
    1bfa:	08 95       	ret

00001bfc <__fixunssfsi>:
    1bfc:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_splitA>
    1c00:	88 f0       	brcs	.+34     	; 0x1c24 <__fixunssfsi+0x28>
    1c02:	9f 57       	subi	r25, 0x7F	; 127
    1c04:	98 f0       	brcs	.+38     	; 0x1c2c <__fixunssfsi+0x30>
    1c06:	b9 2f       	mov	r27, r25
    1c08:	99 27       	eor	r25, r25
    1c0a:	b7 51       	subi	r27, 0x17	; 23
    1c0c:	b0 f0       	brcs	.+44     	; 0x1c3a <__fixunssfsi+0x3e>
    1c0e:	e1 f0       	breq	.+56     	; 0x1c48 <__fixunssfsi+0x4c>
    1c10:	66 0f       	add	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	88 1f       	adc	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	1a f0       	brmi	.+6      	; 0x1c20 <__fixunssfsi+0x24>
    1c1a:	ba 95       	dec	r27
    1c1c:	c9 f7       	brne	.-14     	; 0x1c10 <__fixunssfsi+0x14>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <__fixunssfsi+0x4c>
    1c20:	b1 30       	cpi	r27, 0x01	; 1
    1c22:	91 f0       	breq	.+36     	; 0x1c48 <__fixunssfsi+0x4c>
    1c24:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_zero>
    1c28:	b1 e0       	ldi	r27, 0x01	; 1
    1c2a:	08 95       	ret
    1c2c:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__fp_zero>
    1c30:	67 2f       	mov	r22, r23
    1c32:	78 2f       	mov	r23, r24
    1c34:	88 27       	eor	r24, r24
    1c36:	b8 5f       	subi	r27, 0xF8	; 248
    1c38:	39 f0       	breq	.+14     	; 0x1c48 <__fixunssfsi+0x4c>
    1c3a:	b9 3f       	cpi	r27, 0xF9	; 249
    1c3c:	cc f3       	brlt	.-14     	; 0x1c30 <__fixunssfsi+0x34>
    1c3e:	86 95       	lsr	r24
    1c40:	77 95       	ror	r23
    1c42:	67 95       	ror	r22
    1c44:	b3 95       	inc	r27
    1c46:	d9 f7       	brne	.-10     	; 0x1c3e <__fixunssfsi+0x42>
    1c48:	3e f4       	brtc	.+14     	; 0x1c58 <__fixunssfsi+0x5c>
    1c4a:	90 95       	com	r25
    1c4c:	80 95       	com	r24
    1c4e:	70 95       	com	r23
    1c50:	61 95       	neg	r22
    1c52:	7f 4f       	sbci	r23, 0xFF	; 255
    1c54:	8f 4f       	sbci	r24, 0xFF	; 255
    1c56:	9f 4f       	sbci	r25, 0xFF	; 255
    1c58:	08 95       	ret

00001c5a <__floatunsisf>:
    1c5a:	e8 94       	clt
    1c5c:	09 c0       	rjmp	.+18     	; 0x1c70 <__floatsisf+0x12>

00001c5e <__floatsisf>:
    1c5e:	97 fb       	bst	r25, 7
    1c60:	3e f4       	brtc	.+14     	; 0x1c70 <__floatsisf+0x12>
    1c62:	90 95       	com	r25
    1c64:	80 95       	com	r24
    1c66:	70 95       	com	r23
    1c68:	61 95       	neg	r22
    1c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	99 23       	and	r25, r25
    1c72:	a9 f0       	breq	.+42     	; 0x1c9e <__floatsisf+0x40>
    1c74:	f9 2f       	mov	r31, r25
    1c76:	96 e9       	ldi	r25, 0x96	; 150
    1c78:	bb 27       	eor	r27, r27
    1c7a:	93 95       	inc	r25
    1c7c:	f6 95       	lsr	r31
    1c7e:	87 95       	ror	r24
    1c80:	77 95       	ror	r23
    1c82:	67 95       	ror	r22
    1c84:	b7 95       	ror	r27
    1c86:	f1 11       	cpse	r31, r1
    1c88:	f8 cf       	rjmp	.-16     	; 0x1c7a <__floatsisf+0x1c>
    1c8a:	fa f4       	brpl	.+62     	; 0x1cca <__floatsisf+0x6c>
    1c8c:	bb 0f       	add	r27, r27
    1c8e:	11 f4       	brne	.+4      	; 0x1c94 <__floatsisf+0x36>
    1c90:	60 ff       	sbrs	r22, 0
    1c92:	1b c0       	rjmp	.+54     	; 0x1cca <__floatsisf+0x6c>
    1c94:	6f 5f       	subi	r22, 0xFF	; 255
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	16 c0       	rjmp	.+44     	; 0x1cca <__floatsisf+0x6c>
    1c9e:	88 23       	and	r24, r24
    1ca0:	11 f0       	breq	.+4      	; 0x1ca6 <__floatsisf+0x48>
    1ca2:	96 e9       	ldi	r25, 0x96	; 150
    1ca4:	11 c0       	rjmp	.+34     	; 0x1cc8 <__floatsisf+0x6a>
    1ca6:	77 23       	and	r23, r23
    1ca8:	21 f0       	breq	.+8      	; 0x1cb2 <__floatsisf+0x54>
    1caa:	9e e8       	ldi	r25, 0x8E	; 142
    1cac:	87 2f       	mov	r24, r23
    1cae:	76 2f       	mov	r23, r22
    1cb0:	05 c0       	rjmp	.+10     	; 0x1cbc <__floatsisf+0x5e>
    1cb2:	66 23       	and	r22, r22
    1cb4:	71 f0       	breq	.+28     	; 0x1cd2 <__floatsisf+0x74>
    1cb6:	96 e8       	ldi	r25, 0x86	; 134
    1cb8:	86 2f       	mov	r24, r22
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	2a f0       	brmi	.+10     	; 0x1cca <__floatsisf+0x6c>
    1cc0:	9a 95       	dec	r25
    1cc2:	66 0f       	add	r22, r22
    1cc4:	77 1f       	adc	r23, r23
    1cc6:	88 1f       	adc	r24, r24
    1cc8:	da f7       	brpl	.-10     	; 0x1cc0 <__floatsisf+0x62>
    1cca:	88 0f       	add	r24, r24
    1ccc:	96 95       	lsr	r25
    1cce:	87 95       	ror	r24
    1cd0:	97 f9       	bld	r25, 7
    1cd2:	08 95       	ret

00001cd4 <__fp_inf>:
    1cd4:	97 f9       	bld	r25, 7
    1cd6:	9f 67       	ori	r25, 0x7F	; 127
    1cd8:	80 e8       	ldi	r24, 0x80	; 128
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	08 95       	ret

00001ce0 <__fp_nan>:
    1ce0:	9f ef       	ldi	r25, 0xFF	; 255
    1ce2:	80 ec       	ldi	r24, 0xC0	; 192
    1ce4:	08 95       	ret

00001ce6 <__fp_powser>:
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	1f 93       	push	r17
    1cec:	0f 93       	push	r16
    1cee:	ff 92       	push	r15
    1cf0:	ef 92       	push	r14
    1cf2:	df 92       	push	r13
    1cf4:	7b 01       	movw	r14, r22
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	68 94       	set
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <__fp_powser+0x22>
    1cfc:	da 2e       	mov	r13, r26
    1cfe:	ef 01       	movw	r28, r30
    1d00:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__mulsf3x>
    1d04:	fe 01       	movw	r30, r28
    1d06:	e8 94       	clt
    1d08:	a5 91       	lpm	r26, Z+
    1d0a:	25 91       	lpm	r18, Z+
    1d0c:	35 91       	lpm	r19, Z+
    1d0e:	45 91       	lpm	r20, Z+
    1d10:	55 91       	lpm	r21, Z+
    1d12:	a6 f3       	brts	.-24     	; 0x1cfc <__fp_powser+0x16>
    1d14:	ef 01       	movw	r28, r30
    1d16:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__addsf3x>
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	97 01       	movw	r18, r14
    1d1e:	a8 01       	movw	r20, r16
    1d20:	da 94       	dec	r13
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <__fp_powser+0x18>
    1d24:	df 90       	pop	r13
    1d26:	ef 90       	pop	r14
    1d28:	ff 90       	pop	r15
    1d2a:	0f 91       	pop	r16
    1d2c:	1f 91       	pop	r17
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <__fp_pscA>:
    1d34:	00 24       	eor	r0, r0
    1d36:	0a 94       	dec	r0
    1d38:	16 16       	cp	r1, r22
    1d3a:	17 06       	cpc	r1, r23
    1d3c:	18 06       	cpc	r1, r24
    1d3e:	09 06       	cpc	r0, r25
    1d40:	08 95       	ret

00001d42 <__fp_pscB>:
    1d42:	00 24       	eor	r0, r0
    1d44:	0a 94       	dec	r0
    1d46:	12 16       	cp	r1, r18
    1d48:	13 06       	cpc	r1, r19
    1d4a:	14 06       	cpc	r1, r20
    1d4c:	05 06       	cpc	r0, r21
    1d4e:	08 95       	ret

00001d50 <__fp_round>:
    1d50:	09 2e       	mov	r0, r25
    1d52:	03 94       	inc	r0
    1d54:	00 0c       	add	r0, r0
    1d56:	11 f4       	brne	.+4      	; 0x1d5c <__fp_round+0xc>
    1d58:	88 23       	and	r24, r24
    1d5a:	52 f0       	brmi	.+20     	; 0x1d70 <__fp_round+0x20>
    1d5c:	bb 0f       	add	r27, r27
    1d5e:	40 f4       	brcc	.+16     	; 0x1d70 <__fp_round+0x20>
    1d60:	bf 2b       	or	r27, r31
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <__fp_round+0x18>
    1d64:	60 ff       	sbrs	r22, 0
    1d66:	04 c0       	rjmp	.+8      	; 0x1d70 <__fp_round+0x20>
    1d68:	6f 5f       	subi	r22, 0xFF	; 255
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	08 95       	ret

00001d72 <__fp_split3>:
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	90 58       	subi	r25, 0x80	; 128
    1d76:	44 0f       	add	r20, r20
    1d78:	55 1f       	adc	r21, r21
    1d7a:	59 f0       	breq	.+22     	; 0x1d92 <__fp_splitA+0x10>
    1d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7e:	71 f0       	breq	.+28     	; 0x1d9c <__fp_splitA+0x1a>
    1d80:	47 95       	ror	r20

00001d82 <__fp_splitA>:
    1d82:	88 0f       	add	r24, r24
    1d84:	97 fb       	bst	r25, 7
    1d86:	99 1f       	adc	r25, r25
    1d88:	61 f0       	breq	.+24     	; 0x1da2 <__fp_splitA+0x20>
    1d8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d8c:	79 f0       	breq	.+30     	; 0x1dac <__fp_splitA+0x2a>
    1d8e:	87 95       	ror	r24
    1d90:	08 95       	ret
    1d92:	12 16       	cp	r1, r18
    1d94:	13 06       	cpc	r1, r19
    1d96:	14 06       	cpc	r1, r20
    1d98:	55 1f       	adc	r21, r21
    1d9a:	f2 cf       	rjmp	.-28     	; 0x1d80 <__fp_split3+0xe>
    1d9c:	46 95       	lsr	r20
    1d9e:	f1 df       	rcall	.-30     	; 0x1d82 <__fp_splitA>
    1da0:	08 c0       	rjmp	.+16     	; 0x1db2 <__fp_splitA+0x30>
    1da2:	16 16       	cp	r1, r22
    1da4:	17 06       	cpc	r1, r23
    1da6:	18 06       	cpc	r1, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	f1 cf       	rjmp	.-30     	; 0x1d8e <__fp_splitA+0xc>
    1dac:	86 95       	lsr	r24
    1dae:	71 05       	cpc	r23, r1
    1db0:	61 05       	cpc	r22, r1
    1db2:	08 94       	sec
    1db4:	08 95       	ret

00001db6 <__fp_zero>:
    1db6:	e8 94       	clt

00001db8 <__fp_szero>:
    1db8:	bb 27       	eor	r27, r27
    1dba:	66 27       	eor	r22, r22
    1dbc:	77 27       	eor	r23, r23
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	97 f9       	bld	r25, 7
    1dc2:	08 95       	ret

00001dc4 <inverse>:
    1dc4:	9b 01       	movw	r18, r22
    1dc6:	ac 01       	movw	r20, r24
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	80 e8       	ldi	r24, 0x80	; 128
    1dce:	9f e3       	ldi	r25, 0x3F	; 63
    1dd0:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__divsf3>

00001dd4 <__mulsf3>:
    1dd4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__mulsf3x>
    1dd8:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_round>
    1ddc:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__fp_pscA>
    1de0:	38 f0       	brcs	.+14     	; 0x1df0 <__mulsf3+0x1c>
    1de2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscB>
    1de6:	20 f0       	brcs	.+8      	; 0x1df0 <__mulsf3+0x1c>
    1de8:	95 23       	and	r25, r21
    1dea:	11 f0       	breq	.+4      	; 0x1df0 <__mulsf3+0x1c>
    1dec:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__fp_inf>
    1df0:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_nan>
    1df4:	11 24       	eor	r1, r1
    1df6:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>

00001dfa <__mulsf3x>:
    1dfa:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_split3>
    1dfe:	70 f3       	brcs	.-36     	; 0x1ddc <__mulsf3+0x8>

00001e00 <__mulsf3_pse>:
    1e00:	95 9f       	mul	r25, r21
    1e02:	c1 f3       	breq	.-16     	; 0x1df4 <__mulsf3+0x20>
    1e04:	95 0f       	add	r25, r21
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	55 1f       	adc	r21, r21
    1e0a:	62 9f       	mul	r22, r18
    1e0c:	f0 01       	movw	r30, r0
    1e0e:	72 9f       	mul	r23, r18
    1e10:	bb 27       	eor	r27, r27
    1e12:	f0 0d       	add	r31, r0
    1e14:	b1 1d       	adc	r27, r1
    1e16:	63 9f       	mul	r22, r19
    1e18:	aa 27       	eor	r26, r26
    1e1a:	f0 0d       	add	r31, r0
    1e1c:	b1 1d       	adc	r27, r1
    1e1e:	aa 1f       	adc	r26, r26
    1e20:	64 9f       	mul	r22, r20
    1e22:	66 27       	eor	r22, r22
    1e24:	b0 0d       	add	r27, r0
    1e26:	a1 1d       	adc	r26, r1
    1e28:	66 1f       	adc	r22, r22
    1e2a:	82 9f       	mul	r24, r18
    1e2c:	22 27       	eor	r18, r18
    1e2e:	b0 0d       	add	r27, r0
    1e30:	a1 1d       	adc	r26, r1
    1e32:	62 1f       	adc	r22, r18
    1e34:	73 9f       	mul	r23, r19
    1e36:	b0 0d       	add	r27, r0
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	62 1f       	adc	r22, r18
    1e3c:	83 9f       	mul	r24, r19
    1e3e:	a0 0d       	add	r26, r0
    1e40:	61 1d       	adc	r22, r1
    1e42:	22 1f       	adc	r18, r18
    1e44:	74 9f       	mul	r23, r20
    1e46:	33 27       	eor	r19, r19
    1e48:	a0 0d       	add	r26, r0
    1e4a:	61 1d       	adc	r22, r1
    1e4c:	23 1f       	adc	r18, r19
    1e4e:	84 9f       	mul	r24, r20
    1e50:	60 0d       	add	r22, r0
    1e52:	21 1d       	adc	r18, r1
    1e54:	82 2f       	mov	r24, r18
    1e56:	76 2f       	mov	r23, r22
    1e58:	6a 2f       	mov	r22, r26
    1e5a:	11 24       	eor	r1, r1
    1e5c:	9f 57       	subi	r25, 0x7F	; 127
    1e5e:	50 40       	sbci	r21, 0x00	; 0
    1e60:	9a f0       	brmi	.+38     	; 0x1e88 <__mulsf3_pse+0x88>
    1e62:	f1 f0       	breq	.+60     	; 0x1ea0 <__mulsf3_pse+0xa0>
    1e64:	88 23       	and	r24, r24
    1e66:	4a f0       	brmi	.+18     	; 0x1e7a <__mulsf3_pse+0x7a>
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	bb 1f       	adc	r27, r27
    1e6e:	66 1f       	adc	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	88 1f       	adc	r24, r24
    1e74:	91 50       	subi	r25, 0x01	; 1
    1e76:	50 40       	sbci	r21, 0x00	; 0
    1e78:	a9 f7       	brne	.-22     	; 0x1e64 <__mulsf3_pse+0x64>
    1e7a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e7c:	51 05       	cpc	r21, r1
    1e7e:	80 f0       	brcs	.+32     	; 0x1ea0 <__mulsf3_pse+0xa0>
    1e80:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__fp_inf>
    1e84:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>
    1e88:	5f 3f       	cpi	r21, 0xFF	; 255
    1e8a:	e4 f3       	brlt	.-8      	; 0x1e84 <__mulsf3_pse+0x84>
    1e8c:	98 3e       	cpi	r25, 0xE8	; 232
    1e8e:	d4 f3       	brlt	.-12     	; 0x1e84 <__mulsf3_pse+0x84>
    1e90:	86 95       	lsr	r24
    1e92:	77 95       	ror	r23
    1e94:	67 95       	ror	r22
    1e96:	b7 95       	ror	r27
    1e98:	f7 95       	ror	r31
    1e9a:	e7 95       	ror	r30
    1e9c:	9f 5f       	subi	r25, 0xFF	; 255
    1e9e:	c1 f7       	brne	.-16     	; 0x1e90 <__mulsf3_pse+0x90>
    1ea0:	fe 2b       	or	r31, r30
    1ea2:	88 0f       	add	r24, r24
    1ea4:	91 1d       	adc	r25, r1
    1ea6:	96 95       	lsr	r25
    1ea8:	87 95       	ror	r24
    1eaa:	97 f9       	bld	r25, 7
    1eac:	08 95       	ret

00001eae <square>:
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__mulsf3>

00001eb6 <__subsf3>:
    1eb6:	50 58       	subi	r21, 0x80	; 128

00001eb8 <__addsf3>:
    1eb8:	bb 27       	eor	r27, r27
    1eba:	aa 27       	eor	r26, r26
    1ebc:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__addsf3x>
    1ec0:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_round>
    1ec4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__fp_pscA>
    1ec8:	38 f0       	brcs	.+14     	; 0x1ed8 <__addsf3+0x20>
    1eca:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscB>
    1ece:	20 f0       	brcs	.+8      	; 0x1ed8 <__addsf3+0x20>
    1ed0:	39 f4       	brne	.+14     	; 0x1ee0 <__addsf3+0x28>
    1ed2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ed4:	19 f4       	brne	.+6      	; 0x1edc <__addsf3+0x24>
    1ed6:	26 f4       	brtc	.+8      	; 0x1ee0 <__addsf3+0x28>
    1ed8:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_nan>
    1edc:	0e f4       	brtc	.+2      	; 0x1ee0 <__addsf3+0x28>
    1ede:	e0 95       	com	r30
    1ee0:	e7 fb       	bst	r30, 7
    1ee2:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__fp_inf>

00001ee6 <__addsf3x>:
    1ee6:	e9 2f       	mov	r30, r25
    1ee8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_split3>
    1eec:	58 f3       	brcs	.-42     	; 0x1ec4 <__addsf3+0xc>
    1eee:	ba 17       	cp	r27, r26
    1ef0:	62 07       	cpc	r22, r18
    1ef2:	73 07       	cpc	r23, r19
    1ef4:	84 07       	cpc	r24, r20
    1ef6:	95 07       	cpc	r25, r21
    1ef8:	20 f0       	brcs	.+8      	; 0x1f02 <__addsf3x+0x1c>
    1efa:	79 f4       	brne	.+30     	; 0x1f1a <__addsf3x+0x34>
    1efc:	a6 f5       	brtc	.+104    	; 0x1f66 <__addsf3x+0x80>
    1efe:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__fp_zero>
    1f02:	0e f4       	brtc	.+2      	; 0x1f06 <__addsf3x+0x20>
    1f04:	e0 95       	com	r30
    1f06:	0b 2e       	mov	r0, r27
    1f08:	ba 2f       	mov	r27, r26
    1f0a:	a0 2d       	mov	r26, r0
    1f0c:	0b 01       	movw	r0, r22
    1f0e:	b9 01       	movw	r22, r18
    1f10:	90 01       	movw	r18, r0
    1f12:	0c 01       	movw	r0, r24
    1f14:	ca 01       	movw	r24, r20
    1f16:	a0 01       	movw	r20, r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	ff 27       	eor	r31, r31
    1f1c:	59 1b       	sub	r21, r25
    1f1e:	99 f0       	breq	.+38     	; 0x1f46 <__addsf3x+0x60>
    1f20:	59 3f       	cpi	r21, 0xF9	; 249
    1f22:	50 f4       	brcc	.+20     	; 0x1f38 <__addsf3x+0x52>
    1f24:	50 3e       	cpi	r21, 0xE0	; 224
    1f26:	68 f1       	brcs	.+90     	; 0x1f82 <__addsf3x+0x9c>
    1f28:	1a 16       	cp	r1, r26
    1f2a:	f0 40       	sbci	r31, 0x00	; 0
    1f2c:	a2 2f       	mov	r26, r18
    1f2e:	23 2f       	mov	r18, r19
    1f30:	34 2f       	mov	r19, r20
    1f32:	44 27       	eor	r20, r20
    1f34:	58 5f       	subi	r21, 0xF8	; 248
    1f36:	f3 cf       	rjmp	.-26     	; 0x1f1e <__addsf3x+0x38>
    1f38:	46 95       	lsr	r20
    1f3a:	37 95       	ror	r19
    1f3c:	27 95       	ror	r18
    1f3e:	a7 95       	ror	r26
    1f40:	f0 40       	sbci	r31, 0x00	; 0
    1f42:	53 95       	inc	r21
    1f44:	c9 f7       	brne	.-14     	; 0x1f38 <__addsf3x+0x52>
    1f46:	7e f4       	brtc	.+30     	; 0x1f66 <__addsf3x+0x80>
    1f48:	1f 16       	cp	r1, r31
    1f4a:	ba 0b       	sbc	r27, r26
    1f4c:	62 0b       	sbc	r22, r18
    1f4e:	73 0b       	sbc	r23, r19
    1f50:	84 0b       	sbc	r24, r20
    1f52:	ba f0       	brmi	.+46     	; 0x1f82 <__addsf3x+0x9c>
    1f54:	91 50       	subi	r25, 0x01	; 1
    1f56:	a1 f0       	breq	.+40     	; 0x1f80 <__addsf3x+0x9a>
    1f58:	ff 0f       	add	r31, r31
    1f5a:	bb 1f       	adc	r27, r27
    1f5c:	66 1f       	adc	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 1f       	adc	r24, r24
    1f62:	c2 f7       	brpl	.-16     	; 0x1f54 <__addsf3x+0x6e>
    1f64:	0e c0       	rjmp	.+28     	; 0x1f82 <__addsf3x+0x9c>
    1f66:	ba 0f       	add	r27, r26
    1f68:	62 1f       	adc	r22, r18
    1f6a:	73 1f       	adc	r23, r19
    1f6c:	84 1f       	adc	r24, r20
    1f6e:	48 f4       	brcc	.+18     	; 0x1f82 <__addsf3x+0x9c>
    1f70:	87 95       	ror	r24
    1f72:	77 95       	ror	r23
    1f74:	67 95       	ror	r22
    1f76:	b7 95       	ror	r27
    1f78:	f7 95       	ror	r31
    1f7a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f7c:	08 f0       	brcs	.+2      	; 0x1f80 <__addsf3x+0x9a>
    1f7e:	b0 cf       	rjmp	.-160    	; 0x1ee0 <__addsf3+0x28>
    1f80:	93 95       	inc	r25
    1f82:	88 0f       	add	r24, r24
    1f84:	08 f0       	brcs	.+2      	; 0x1f88 <__addsf3x+0xa2>
    1f86:	99 27       	eor	r25, r25
    1f88:	ee 0f       	add	r30, r30
    1f8a:	97 95       	ror	r25
    1f8c:	87 95       	ror	r24
    1f8e:	08 95       	ret

00001f90 <__divmodhi4>:
    1f90:	97 fb       	bst	r25, 7
    1f92:	07 2e       	mov	r0, r23
    1f94:	16 f4       	brtc	.+4      	; 0x1f9a <__divmodhi4+0xa>
    1f96:	00 94       	com	r0
    1f98:	07 d0       	rcall	.+14     	; 0x1fa8 <__divmodhi4_neg1>
    1f9a:	77 fd       	sbrc	r23, 7
    1f9c:	09 d0       	rcall	.+18     	; 0x1fb0 <__divmodhi4_neg2>
    1f9e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__udivmodhi4>
    1fa2:	07 fc       	sbrc	r0, 7
    1fa4:	05 d0       	rcall	.+10     	; 0x1fb0 <__divmodhi4_neg2>
    1fa6:	3e f4       	brtc	.+14     	; 0x1fb6 <__divmodhi4_exit>

00001fa8 <__divmodhi4_neg1>:
    1fa8:	90 95       	com	r25
    1faa:	81 95       	neg	r24
    1fac:	9f 4f       	sbci	r25, 0xFF	; 255
    1fae:	08 95       	ret

00001fb0 <__divmodhi4_neg2>:
    1fb0:	70 95       	com	r23
    1fb2:	61 95       	neg	r22
    1fb4:	7f 4f       	sbci	r23, 0xFF	; 255

00001fb6 <__divmodhi4_exit>:
    1fb6:	08 95       	ret

00001fb8 <__udivmodsi4>:
    1fb8:	a1 e2       	ldi	r26, 0x21	; 33
    1fba:	1a 2e       	mov	r1, r26
    1fbc:	aa 1b       	sub	r26, r26
    1fbe:	bb 1b       	sub	r27, r27
    1fc0:	fd 01       	movw	r30, r26
    1fc2:	0d c0       	rjmp	.+26     	; 0x1fde <__udivmodsi4_ep>

00001fc4 <__udivmodsi4_loop>:
    1fc4:	aa 1f       	adc	r26, r26
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	ee 1f       	adc	r30, r30
    1fca:	ff 1f       	adc	r31, r31
    1fcc:	a2 17       	cp	r26, r18
    1fce:	b3 07       	cpc	r27, r19
    1fd0:	e4 07       	cpc	r30, r20
    1fd2:	f5 07       	cpc	r31, r21
    1fd4:	20 f0       	brcs	.+8      	; 0x1fde <__udivmodsi4_ep>
    1fd6:	a2 1b       	sub	r26, r18
    1fd8:	b3 0b       	sbc	r27, r19
    1fda:	e4 0b       	sbc	r30, r20
    1fdc:	f5 0b       	sbc	r31, r21

00001fde <__udivmodsi4_ep>:
    1fde:	66 1f       	adc	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	1a 94       	dec	r1
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <__udivmodsi4_loop>
    1fea:	60 95       	com	r22
    1fec:	70 95       	com	r23
    1fee:	80 95       	com	r24
    1ff0:	90 95       	com	r25
    1ff2:	9b 01       	movw	r18, r22
    1ff4:	ac 01       	movw	r20, r24
    1ff6:	bd 01       	movw	r22, r26
    1ff8:	cf 01       	movw	r24, r30
    1ffa:	08 95       	ret

00001ffc <__udivmodhi4>:
    1ffc:	aa 1b       	sub	r26, r26
    1ffe:	bb 1b       	sub	r27, r27
    2000:	51 e1       	ldi	r21, 0x11	; 17
    2002:	07 c0       	rjmp	.+14     	; 0x2012 <__udivmodhi4_ep>

00002004 <__udivmodhi4_loop>:
    2004:	aa 1f       	adc	r26, r26
    2006:	bb 1f       	adc	r27, r27
    2008:	a6 17       	cp	r26, r22
    200a:	b7 07       	cpc	r27, r23
    200c:	10 f0       	brcs	.+4      	; 0x2012 <__udivmodhi4_ep>
    200e:	a6 1b       	sub	r26, r22
    2010:	b7 0b       	sbc	r27, r23

00002012 <__udivmodhi4_ep>:
    2012:	88 1f       	adc	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	5a 95       	dec	r21
    2018:	a9 f7       	brne	.-22     	; 0x2004 <__udivmodhi4_loop>
    201a:	80 95       	com	r24
    201c:	90 95       	com	r25
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	08 95       	ret

00002024 <__itoa_ncheck>:
    2024:	bb 27       	eor	r27, r27
    2026:	4a 30       	cpi	r20, 0x0A	; 10
    2028:	31 f4       	brne	.+12     	; 0x2036 <__itoa_ncheck+0x12>
    202a:	99 23       	and	r25, r25
    202c:	22 f4       	brpl	.+8      	; 0x2036 <__itoa_ncheck+0x12>
    202e:	bd e2       	ldi	r27, 0x2D	; 45
    2030:	90 95       	com	r25
    2032:	81 95       	neg	r24
    2034:	9f 4f       	sbci	r25, 0xFF	; 255
    2036:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__utoa_common>

0000203a <__utoa_ncheck>:
    203a:	bb 27       	eor	r27, r27

0000203c <__utoa_common>:
    203c:	fb 01       	movw	r30, r22
    203e:	55 27       	eor	r21, r21
    2040:	aa 27       	eor	r26, r26
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	aa 1f       	adc	r26, r26
    2048:	a4 17       	cp	r26, r20
    204a:	10 f0       	brcs	.+4      	; 0x2050 <__utoa_common+0x14>
    204c:	a4 1b       	sub	r26, r20
    204e:	83 95       	inc	r24
    2050:	50 51       	subi	r21, 0x10	; 16
    2052:	b9 f7       	brne	.-18     	; 0x2042 <__utoa_common+0x6>
    2054:	a0 5d       	subi	r26, 0xD0	; 208
    2056:	aa 33       	cpi	r26, 0x3A	; 58
    2058:	08 f0       	brcs	.+2      	; 0x205c <__utoa_common+0x20>
    205a:	a9 5d       	subi	r26, 0xD9	; 217
    205c:	a1 93       	st	Z+, r26
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	79 f7       	brne	.-34     	; 0x2040 <__utoa_common+0x4>
    2062:	b1 11       	cpse	r27, r1
    2064:	b1 93       	st	Z+, r27
    2066:	11 92       	st	Z+, r1
    2068:	cb 01       	movw	r24, r22
    206a:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <strrev>

0000206e <fdevopen>:
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	31 f4       	brne	.+12     	; 0x2086 <fdevopen+0x18>
    207a:	61 15       	cp	r22, r1
    207c:	71 05       	cpc	r23, r1
    207e:	19 f4       	brne	.+6      	; 0x2086 <fdevopen+0x18>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	3a c0       	rjmp	.+116    	; 0x20fa <fdevopen+0x8c>
    2086:	8b 01       	movw	r16, r22
    2088:	ec 01       	movw	r28, r24
    208a:	6e e0       	ldi	r22, 0x0E	; 14
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0e 94 79 12 	call	0x24f2	; 0x24f2 <calloc>
    2096:	fc 01       	movw	r30, r24
    2098:	89 2b       	or	r24, r25
    209a:	91 f3       	breq	.-28     	; 0x2080 <fdevopen+0x12>
    209c:	80 e8       	ldi	r24, 0x80	; 128
    209e:	83 83       	std	Z+3, r24	; 0x03
    20a0:	01 15       	cp	r16, r1
    20a2:	11 05       	cpc	r17, r1
    20a4:	71 f0       	breq	.+28     	; 0x20c2 <fdevopen+0x54>
    20a6:	13 87       	std	Z+11, r17	; 0x0b
    20a8:	02 87       	std	Z+10, r16	; 0x0a
    20aa:	81 e8       	ldi	r24, 0x81	; 129
    20ac:	83 83       	std	Z+3, r24	; 0x03
    20ae:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__iob>
    20b2:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <__iob+0x1>
    20b6:	89 2b       	or	r24, r25
    20b8:	21 f4       	brne	.+8      	; 0x20c2 <fdevopen+0x54>
    20ba:	f0 93 0a 04 	sts	0x040A, r31	; 0x80040a <__iob+0x1>
    20be:	e0 93 09 04 	sts	0x0409, r30	; 0x800409 <__iob>
    20c2:	20 97       	sbiw	r28, 0x00	; 0
    20c4:	c9 f0       	breq	.+50     	; 0x20f8 <fdevopen+0x8a>
    20c6:	d1 87       	std	Z+9, r29	; 0x09
    20c8:	c0 87       	std	Z+8, r28	; 0x08
    20ca:	83 81       	ldd	r24, Z+3	; 0x03
    20cc:	82 60       	ori	r24, 0x02	; 2
    20ce:	83 83       	std	Z+3, r24	; 0x03
    20d0:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <__iob+0x2>
    20d4:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <__iob+0x3>
    20d8:	89 2b       	or	r24, r25
    20da:	71 f4       	brne	.+28     	; 0x20f8 <fdevopen+0x8a>
    20dc:	f0 93 0c 04 	sts	0x040C, r31	; 0x80040c <__iob+0x3>
    20e0:	e0 93 0b 04 	sts	0x040B, r30	; 0x80040b <__iob+0x2>
    20e4:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <__iob+0x4>
    20e8:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <__iob+0x5>
    20ec:	89 2b       	or	r24, r25
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <fdevopen+0x8a>
    20f0:	f0 93 0e 04 	sts	0x040E, r31	; 0x80040e <__iob+0x5>
    20f4:	e0 93 0d 04 	sts	0x040D, r30	; 0x80040d <__iob+0x4>
    20f8:	cf 01       	movw	r24, r30
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	08 95       	ret

00002104 <printf>:
    2104:	a0 e0       	ldi	r26, 0x00	; 0
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e8 e8       	ldi	r30, 0x88	; 136
    210a:	f0 e1       	ldi	r31, 0x10	; 16
    210c:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__prologue_saves__+0x20>
    2110:	ae 01       	movw	r20, r28
    2112:	4b 5f       	subi	r20, 0xFB	; 251
    2114:	5f 4f       	sbci	r21, 0xFF	; 255
    2116:	fa 01       	movw	r30, r20
    2118:	61 91       	ld	r22, Z+
    211a:	71 91       	ld	r23, Z+
    211c:	af 01       	movw	r20, r30
    211e:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <__iob+0x2>
    2122:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <__iob+0x3>
    2126:	0e 94 98 10 	call	0x2130	; 0x2130 <vfprintf>
    212a:	e2 e0       	ldi	r30, 0x02	; 2
    212c:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__epilogue_restores__+0x20>

00002130 <vfprintf>:
    2130:	ab e0       	ldi	r26, 0x0B	; 11
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	ee e9       	ldi	r30, 0x9E	; 158
    2136:	f0 e1       	ldi	r31, 0x10	; 16
    2138:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__prologue_saves__>
    213c:	6c 01       	movw	r12, r24
    213e:	7b 01       	movw	r14, r22
    2140:	8a 01       	movw	r16, r20
    2142:	fc 01       	movw	r30, r24
    2144:	17 82       	std	Z+7, r1	; 0x07
    2146:	16 82       	std	Z+6, r1	; 0x06
    2148:	83 81       	ldd	r24, Z+3	; 0x03
    214a:	81 ff       	sbrs	r24, 1
    214c:	cc c1       	rjmp	.+920    	; 0x24e6 <vfprintf+0x3b6>
    214e:	ce 01       	movw	r24, r28
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	3c 01       	movw	r6, r24
    2154:	f6 01       	movw	r30, r12
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	f7 01       	movw	r30, r14
    215a:	93 fd       	sbrc	r25, 3
    215c:	85 91       	lpm	r24, Z+
    215e:	93 ff       	sbrs	r25, 3
    2160:	81 91       	ld	r24, Z+
    2162:	7f 01       	movw	r14, r30
    2164:	88 23       	and	r24, r24
    2166:	09 f4       	brne	.+2      	; 0x216a <vfprintf+0x3a>
    2168:	ba c1       	rjmp	.+884    	; 0x24de <vfprintf+0x3ae>
    216a:	85 32       	cpi	r24, 0x25	; 37
    216c:	39 f4       	brne	.+14     	; 0x217c <vfprintf+0x4c>
    216e:	93 fd       	sbrc	r25, 3
    2170:	85 91       	lpm	r24, Z+
    2172:	93 ff       	sbrs	r25, 3
    2174:	81 91       	ld	r24, Z+
    2176:	7f 01       	movw	r14, r30
    2178:	85 32       	cpi	r24, 0x25	; 37
    217a:	29 f4       	brne	.+10     	; 0x2186 <vfprintf+0x56>
    217c:	b6 01       	movw	r22, r12
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    2184:	e7 cf       	rjmp	.-50     	; 0x2154 <vfprintf+0x24>
    2186:	91 2c       	mov	r9, r1
    2188:	21 2c       	mov	r2, r1
    218a:	31 2c       	mov	r3, r1
    218c:	ff e1       	ldi	r31, 0x1F	; 31
    218e:	f3 15       	cp	r31, r3
    2190:	d8 f0       	brcs	.+54     	; 0x21c8 <vfprintf+0x98>
    2192:	8b 32       	cpi	r24, 0x2B	; 43
    2194:	79 f0       	breq	.+30     	; 0x21b4 <vfprintf+0x84>
    2196:	38 f4       	brcc	.+14     	; 0x21a6 <vfprintf+0x76>
    2198:	80 32       	cpi	r24, 0x20	; 32
    219a:	79 f0       	breq	.+30     	; 0x21ba <vfprintf+0x8a>
    219c:	83 32       	cpi	r24, 0x23	; 35
    219e:	a1 f4       	brne	.+40     	; 0x21c8 <vfprintf+0x98>
    21a0:	23 2d       	mov	r18, r3
    21a2:	20 61       	ori	r18, 0x10	; 16
    21a4:	1d c0       	rjmp	.+58     	; 0x21e0 <vfprintf+0xb0>
    21a6:	8d 32       	cpi	r24, 0x2D	; 45
    21a8:	61 f0       	breq	.+24     	; 0x21c2 <vfprintf+0x92>
    21aa:	80 33       	cpi	r24, 0x30	; 48
    21ac:	69 f4       	brne	.+26     	; 0x21c8 <vfprintf+0x98>
    21ae:	23 2d       	mov	r18, r3
    21b0:	21 60       	ori	r18, 0x01	; 1
    21b2:	16 c0       	rjmp	.+44     	; 0x21e0 <vfprintf+0xb0>
    21b4:	83 2d       	mov	r24, r3
    21b6:	82 60       	ori	r24, 0x02	; 2
    21b8:	38 2e       	mov	r3, r24
    21ba:	e3 2d       	mov	r30, r3
    21bc:	e4 60       	ori	r30, 0x04	; 4
    21be:	3e 2e       	mov	r3, r30
    21c0:	2a c0       	rjmp	.+84     	; 0x2216 <vfprintf+0xe6>
    21c2:	f3 2d       	mov	r31, r3
    21c4:	f8 60       	ori	r31, 0x08	; 8
    21c6:	1d c0       	rjmp	.+58     	; 0x2202 <vfprintf+0xd2>
    21c8:	37 fc       	sbrc	r3, 7
    21ca:	2d c0       	rjmp	.+90     	; 0x2226 <vfprintf+0xf6>
    21cc:	20 ed       	ldi	r18, 0xD0	; 208
    21ce:	28 0f       	add	r18, r24
    21d0:	2a 30       	cpi	r18, 0x0A	; 10
    21d2:	40 f0       	brcs	.+16     	; 0x21e4 <vfprintf+0xb4>
    21d4:	8e 32       	cpi	r24, 0x2E	; 46
    21d6:	b9 f4       	brne	.+46     	; 0x2206 <vfprintf+0xd6>
    21d8:	36 fc       	sbrc	r3, 6
    21da:	81 c1       	rjmp	.+770    	; 0x24de <vfprintf+0x3ae>
    21dc:	23 2d       	mov	r18, r3
    21de:	20 64       	ori	r18, 0x40	; 64
    21e0:	32 2e       	mov	r3, r18
    21e2:	19 c0       	rjmp	.+50     	; 0x2216 <vfprintf+0xe6>
    21e4:	36 fe       	sbrs	r3, 6
    21e6:	06 c0       	rjmp	.+12     	; 0x21f4 <vfprintf+0xc4>
    21e8:	8a e0       	ldi	r24, 0x0A	; 10
    21ea:	98 9e       	mul	r9, r24
    21ec:	20 0d       	add	r18, r0
    21ee:	11 24       	eor	r1, r1
    21f0:	92 2e       	mov	r9, r18
    21f2:	11 c0       	rjmp	.+34     	; 0x2216 <vfprintf+0xe6>
    21f4:	ea e0       	ldi	r30, 0x0A	; 10
    21f6:	2e 9e       	mul	r2, r30
    21f8:	20 0d       	add	r18, r0
    21fa:	11 24       	eor	r1, r1
    21fc:	22 2e       	mov	r2, r18
    21fe:	f3 2d       	mov	r31, r3
    2200:	f0 62       	ori	r31, 0x20	; 32
    2202:	3f 2e       	mov	r3, r31
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <vfprintf+0xe6>
    2206:	8c 36       	cpi	r24, 0x6C	; 108
    2208:	21 f4       	brne	.+8      	; 0x2212 <vfprintf+0xe2>
    220a:	83 2d       	mov	r24, r3
    220c:	80 68       	ori	r24, 0x80	; 128
    220e:	38 2e       	mov	r3, r24
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <vfprintf+0xe6>
    2212:	88 36       	cpi	r24, 0x68	; 104
    2214:	41 f4       	brne	.+16     	; 0x2226 <vfprintf+0xf6>
    2216:	f7 01       	movw	r30, r14
    2218:	93 fd       	sbrc	r25, 3
    221a:	85 91       	lpm	r24, Z+
    221c:	93 ff       	sbrs	r25, 3
    221e:	81 91       	ld	r24, Z+
    2220:	7f 01       	movw	r14, r30
    2222:	81 11       	cpse	r24, r1
    2224:	b3 cf       	rjmp	.-154    	; 0x218c <vfprintf+0x5c>
    2226:	98 2f       	mov	r25, r24
    2228:	9f 7d       	andi	r25, 0xDF	; 223
    222a:	95 54       	subi	r25, 0x45	; 69
    222c:	93 30       	cpi	r25, 0x03	; 3
    222e:	28 f4       	brcc	.+10     	; 0x223a <vfprintf+0x10a>
    2230:	0c 5f       	subi	r16, 0xFC	; 252
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    2234:	9f e3       	ldi	r25, 0x3F	; 63
    2236:	99 83       	std	Y+1, r25	; 0x01
    2238:	0d c0       	rjmp	.+26     	; 0x2254 <vfprintf+0x124>
    223a:	83 36       	cpi	r24, 0x63	; 99
    223c:	31 f0       	breq	.+12     	; 0x224a <vfprintf+0x11a>
    223e:	83 37       	cpi	r24, 0x73	; 115
    2240:	71 f0       	breq	.+28     	; 0x225e <vfprintf+0x12e>
    2242:	83 35       	cpi	r24, 0x53	; 83
    2244:	09 f0       	breq	.+2      	; 0x2248 <vfprintf+0x118>
    2246:	59 c0       	rjmp	.+178    	; 0x22fa <vfprintf+0x1ca>
    2248:	21 c0       	rjmp	.+66     	; 0x228c <vfprintf+0x15c>
    224a:	f8 01       	movw	r30, r16
    224c:	80 81       	ld	r24, Z
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	0e 5f       	subi	r16, 0xFE	; 254
    2252:	1f 4f       	sbci	r17, 0xFF	; 255
    2254:	88 24       	eor	r8, r8
    2256:	83 94       	inc	r8
    2258:	91 2c       	mov	r9, r1
    225a:	53 01       	movw	r10, r6
    225c:	13 c0       	rjmp	.+38     	; 0x2284 <vfprintf+0x154>
    225e:	28 01       	movw	r4, r16
    2260:	f2 e0       	ldi	r31, 0x02	; 2
    2262:	4f 0e       	add	r4, r31
    2264:	51 1c       	adc	r5, r1
    2266:	f8 01       	movw	r30, r16
    2268:	a0 80       	ld	r10, Z
    226a:	b1 80       	ldd	r11, Z+1	; 0x01
    226c:	36 fe       	sbrs	r3, 6
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <vfprintf+0x146>
    2270:	69 2d       	mov	r22, r9
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	02 c0       	rjmp	.+4      	; 0x227a <vfprintf+0x14a>
    2276:	6f ef       	ldi	r22, 0xFF	; 255
    2278:	7f ef       	ldi	r23, 0xFF	; 255
    227a:	c5 01       	movw	r24, r10
    227c:	0e 94 c8 13 	call	0x2790	; 0x2790 <strnlen>
    2280:	4c 01       	movw	r8, r24
    2282:	82 01       	movw	r16, r4
    2284:	f3 2d       	mov	r31, r3
    2286:	ff 77       	andi	r31, 0x7F	; 127
    2288:	3f 2e       	mov	r3, r31
    228a:	16 c0       	rjmp	.+44     	; 0x22b8 <vfprintf+0x188>
    228c:	28 01       	movw	r4, r16
    228e:	22 e0       	ldi	r18, 0x02	; 2
    2290:	42 0e       	add	r4, r18
    2292:	51 1c       	adc	r5, r1
    2294:	f8 01       	movw	r30, r16
    2296:	a0 80       	ld	r10, Z
    2298:	b1 80       	ldd	r11, Z+1	; 0x01
    229a:	36 fe       	sbrs	r3, 6
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <vfprintf+0x174>
    229e:	69 2d       	mov	r22, r9
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <vfprintf+0x178>
    22a4:	6f ef       	ldi	r22, 0xFF	; 255
    22a6:	7f ef       	ldi	r23, 0xFF	; 255
    22a8:	c5 01       	movw	r24, r10
    22aa:	0e 94 b6 13 	call	0x276c	; 0x276c <strnlen_P>
    22ae:	4c 01       	movw	r8, r24
    22b0:	f3 2d       	mov	r31, r3
    22b2:	f0 68       	ori	r31, 0x80	; 128
    22b4:	3f 2e       	mov	r3, r31
    22b6:	82 01       	movw	r16, r4
    22b8:	33 fc       	sbrc	r3, 3
    22ba:	1b c0       	rjmp	.+54     	; 0x22f2 <vfprintf+0x1c2>
    22bc:	82 2d       	mov	r24, r2
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	88 16       	cp	r8, r24
    22c2:	99 06       	cpc	r9, r25
    22c4:	b0 f4       	brcc	.+44     	; 0x22f2 <vfprintf+0x1c2>
    22c6:	b6 01       	movw	r22, r12
    22c8:	80 e2       	ldi	r24, 0x20	; 32
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    22d0:	2a 94       	dec	r2
    22d2:	f4 cf       	rjmp	.-24     	; 0x22bc <vfprintf+0x18c>
    22d4:	f5 01       	movw	r30, r10
    22d6:	37 fc       	sbrc	r3, 7
    22d8:	85 91       	lpm	r24, Z+
    22da:	37 fe       	sbrs	r3, 7
    22dc:	81 91       	ld	r24, Z+
    22de:	5f 01       	movw	r10, r30
    22e0:	b6 01       	movw	r22, r12
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    22e8:	21 10       	cpse	r2, r1
    22ea:	2a 94       	dec	r2
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	82 1a       	sub	r8, r18
    22f0:	91 08       	sbc	r9, r1
    22f2:	81 14       	cp	r8, r1
    22f4:	91 04       	cpc	r9, r1
    22f6:	71 f7       	brne	.-36     	; 0x22d4 <vfprintf+0x1a4>
    22f8:	e8 c0       	rjmp	.+464    	; 0x24ca <vfprintf+0x39a>
    22fa:	84 36       	cpi	r24, 0x64	; 100
    22fc:	11 f0       	breq	.+4      	; 0x2302 <vfprintf+0x1d2>
    22fe:	89 36       	cpi	r24, 0x69	; 105
    2300:	41 f5       	brne	.+80     	; 0x2352 <vfprintf+0x222>
    2302:	f8 01       	movw	r30, r16
    2304:	37 fe       	sbrs	r3, 7
    2306:	07 c0       	rjmp	.+14     	; 0x2316 <vfprintf+0x1e6>
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	0c 5f       	subi	r16, 0xFC	; 252
    2312:	1f 4f       	sbci	r17, 0xFF	; 255
    2314:	08 c0       	rjmp	.+16     	; 0x2326 <vfprintf+0x1f6>
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	07 2e       	mov	r0, r23
    231c:	00 0c       	add	r0, r0
    231e:	88 0b       	sbc	r24, r24
    2320:	99 0b       	sbc	r25, r25
    2322:	0e 5f       	subi	r16, 0xFE	; 254
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	f3 2d       	mov	r31, r3
    2328:	ff 76       	andi	r31, 0x6F	; 111
    232a:	3f 2e       	mov	r3, r31
    232c:	97 ff       	sbrs	r25, 7
    232e:	09 c0       	rjmp	.+18     	; 0x2342 <vfprintf+0x212>
    2330:	90 95       	com	r25
    2332:	80 95       	com	r24
    2334:	70 95       	com	r23
    2336:	61 95       	neg	r22
    2338:	7f 4f       	sbci	r23, 0xFF	; 255
    233a:	8f 4f       	sbci	r24, 0xFF	; 255
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	f0 68       	ori	r31, 0x80	; 128
    2340:	3f 2e       	mov	r3, r31
    2342:	2a e0       	ldi	r18, 0x0A	; 10
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	a3 01       	movw	r20, r6
    2348:	0e 94 1f 14 	call	0x283e	; 0x283e <__ultoa_invert>
    234c:	88 2e       	mov	r8, r24
    234e:	86 18       	sub	r8, r6
    2350:	45 c0       	rjmp	.+138    	; 0x23dc <vfprintf+0x2ac>
    2352:	85 37       	cpi	r24, 0x75	; 117
    2354:	31 f4       	brne	.+12     	; 0x2362 <vfprintf+0x232>
    2356:	23 2d       	mov	r18, r3
    2358:	2f 7e       	andi	r18, 0xEF	; 239
    235a:	b2 2e       	mov	r11, r18
    235c:	2a e0       	ldi	r18, 0x0A	; 10
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	25 c0       	rjmp	.+74     	; 0x23ac <vfprintf+0x27c>
    2362:	93 2d       	mov	r25, r3
    2364:	99 7f       	andi	r25, 0xF9	; 249
    2366:	b9 2e       	mov	r11, r25
    2368:	8f 36       	cpi	r24, 0x6F	; 111
    236a:	c1 f0       	breq	.+48     	; 0x239c <vfprintf+0x26c>
    236c:	18 f4       	brcc	.+6      	; 0x2374 <vfprintf+0x244>
    236e:	88 35       	cpi	r24, 0x58	; 88
    2370:	79 f0       	breq	.+30     	; 0x2390 <vfprintf+0x260>
    2372:	b5 c0       	rjmp	.+362    	; 0x24de <vfprintf+0x3ae>
    2374:	80 37       	cpi	r24, 0x70	; 112
    2376:	19 f0       	breq	.+6      	; 0x237e <vfprintf+0x24e>
    2378:	88 37       	cpi	r24, 0x78	; 120
    237a:	21 f0       	breq	.+8      	; 0x2384 <vfprintf+0x254>
    237c:	b0 c0       	rjmp	.+352    	; 0x24de <vfprintf+0x3ae>
    237e:	e9 2f       	mov	r30, r25
    2380:	e0 61       	ori	r30, 0x10	; 16
    2382:	be 2e       	mov	r11, r30
    2384:	b4 fe       	sbrs	r11, 4
    2386:	0d c0       	rjmp	.+26     	; 0x23a2 <vfprintf+0x272>
    2388:	fb 2d       	mov	r31, r11
    238a:	f4 60       	ori	r31, 0x04	; 4
    238c:	bf 2e       	mov	r11, r31
    238e:	09 c0       	rjmp	.+18     	; 0x23a2 <vfprintf+0x272>
    2390:	34 fe       	sbrs	r3, 4
    2392:	0a c0       	rjmp	.+20     	; 0x23a8 <vfprintf+0x278>
    2394:	29 2f       	mov	r18, r25
    2396:	26 60       	ori	r18, 0x06	; 6
    2398:	b2 2e       	mov	r11, r18
    239a:	06 c0       	rjmp	.+12     	; 0x23a8 <vfprintf+0x278>
    239c:	28 e0       	ldi	r18, 0x08	; 8
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <vfprintf+0x27c>
    23a2:	20 e1       	ldi	r18, 0x10	; 16
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <vfprintf+0x27c>
    23a8:	20 e1       	ldi	r18, 0x10	; 16
    23aa:	32 e0       	ldi	r19, 0x02	; 2
    23ac:	f8 01       	movw	r30, r16
    23ae:	b7 fe       	sbrs	r11, 7
    23b0:	07 c0       	rjmp	.+14     	; 0x23c0 <vfprintf+0x290>
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	0c 5f       	subi	r16, 0xFC	; 252
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	06 c0       	rjmp	.+12     	; 0x23cc <vfprintf+0x29c>
    23c0:	60 81       	ld	r22, Z
    23c2:	71 81       	ldd	r23, Z+1	; 0x01
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 5f       	subi	r16, 0xFE	; 254
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	a3 01       	movw	r20, r6
    23ce:	0e 94 1f 14 	call	0x283e	; 0x283e <__ultoa_invert>
    23d2:	88 2e       	mov	r8, r24
    23d4:	86 18       	sub	r8, r6
    23d6:	fb 2d       	mov	r31, r11
    23d8:	ff 77       	andi	r31, 0x7F	; 127
    23da:	3f 2e       	mov	r3, r31
    23dc:	36 fe       	sbrs	r3, 6
    23de:	0d c0       	rjmp	.+26     	; 0x23fa <vfprintf+0x2ca>
    23e0:	23 2d       	mov	r18, r3
    23e2:	2e 7f       	andi	r18, 0xFE	; 254
    23e4:	a2 2e       	mov	r10, r18
    23e6:	89 14       	cp	r8, r9
    23e8:	58 f4       	brcc	.+22     	; 0x2400 <vfprintf+0x2d0>
    23ea:	34 fe       	sbrs	r3, 4
    23ec:	0b c0       	rjmp	.+22     	; 0x2404 <vfprintf+0x2d4>
    23ee:	32 fc       	sbrc	r3, 2
    23f0:	09 c0       	rjmp	.+18     	; 0x2404 <vfprintf+0x2d4>
    23f2:	83 2d       	mov	r24, r3
    23f4:	8e 7e       	andi	r24, 0xEE	; 238
    23f6:	a8 2e       	mov	r10, r24
    23f8:	05 c0       	rjmp	.+10     	; 0x2404 <vfprintf+0x2d4>
    23fa:	b8 2c       	mov	r11, r8
    23fc:	a3 2c       	mov	r10, r3
    23fe:	03 c0       	rjmp	.+6      	; 0x2406 <vfprintf+0x2d6>
    2400:	b8 2c       	mov	r11, r8
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <vfprintf+0x2d6>
    2404:	b9 2c       	mov	r11, r9
    2406:	a4 fe       	sbrs	r10, 4
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <vfprintf+0x2f8>
    240a:	fe 01       	movw	r30, r28
    240c:	e8 0d       	add	r30, r8
    240e:	f1 1d       	adc	r31, r1
    2410:	80 81       	ld	r24, Z
    2412:	80 33       	cpi	r24, 0x30	; 48
    2414:	21 f4       	brne	.+8      	; 0x241e <vfprintf+0x2ee>
    2416:	9a 2d       	mov	r25, r10
    2418:	99 7e       	andi	r25, 0xE9	; 233
    241a:	a9 2e       	mov	r10, r25
    241c:	09 c0       	rjmp	.+18     	; 0x2430 <vfprintf+0x300>
    241e:	a2 fe       	sbrs	r10, 2
    2420:	06 c0       	rjmp	.+12     	; 0x242e <vfprintf+0x2fe>
    2422:	b3 94       	inc	r11
    2424:	b3 94       	inc	r11
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <vfprintf+0x300>
    2428:	8a 2d       	mov	r24, r10
    242a:	86 78       	andi	r24, 0x86	; 134
    242c:	09 f0       	breq	.+2      	; 0x2430 <vfprintf+0x300>
    242e:	b3 94       	inc	r11
    2430:	a3 fc       	sbrc	r10, 3
    2432:	11 c0       	rjmp	.+34     	; 0x2456 <vfprintf+0x326>
    2434:	a0 fe       	sbrs	r10, 0
    2436:	06 c0       	rjmp	.+12     	; 0x2444 <vfprintf+0x314>
    2438:	b2 14       	cp	r11, r2
    243a:	88 f4       	brcc	.+34     	; 0x245e <vfprintf+0x32e>
    243c:	28 0c       	add	r2, r8
    243e:	92 2c       	mov	r9, r2
    2440:	9b 18       	sub	r9, r11
    2442:	0e c0       	rjmp	.+28     	; 0x2460 <vfprintf+0x330>
    2444:	b2 14       	cp	r11, r2
    2446:	60 f4       	brcc	.+24     	; 0x2460 <vfprintf+0x330>
    2448:	b6 01       	movw	r22, r12
    244a:	80 e2       	ldi	r24, 0x20	; 32
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    2452:	b3 94       	inc	r11
    2454:	f7 cf       	rjmp	.-18     	; 0x2444 <vfprintf+0x314>
    2456:	b2 14       	cp	r11, r2
    2458:	18 f4       	brcc	.+6      	; 0x2460 <vfprintf+0x330>
    245a:	2b 18       	sub	r2, r11
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <vfprintf+0x332>
    245e:	98 2c       	mov	r9, r8
    2460:	21 2c       	mov	r2, r1
    2462:	a4 fe       	sbrs	r10, 4
    2464:	10 c0       	rjmp	.+32     	; 0x2486 <vfprintf+0x356>
    2466:	b6 01       	movw	r22, r12
    2468:	80 e3       	ldi	r24, 0x30	; 48
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    2470:	a2 fe       	sbrs	r10, 2
    2472:	17 c0       	rjmp	.+46     	; 0x24a2 <vfprintf+0x372>
    2474:	a1 fc       	sbrc	r10, 1
    2476:	03 c0       	rjmp	.+6      	; 0x247e <vfprintf+0x34e>
    2478:	88 e7       	ldi	r24, 0x78	; 120
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <vfprintf+0x352>
    247e:	88 e5       	ldi	r24, 0x58	; 88
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	b6 01       	movw	r22, r12
    2484:	0c c0       	rjmp	.+24     	; 0x249e <vfprintf+0x36e>
    2486:	8a 2d       	mov	r24, r10
    2488:	86 78       	andi	r24, 0x86	; 134
    248a:	59 f0       	breq	.+22     	; 0x24a2 <vfprintf+0x372>
    248c:	a1 fe       	sbrs	r10, 1
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <vfprintf+0x364>
    2490:	8b e2       	ldi	r24, 0x2B	; 43
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <vfprintf+0x366>
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	a7 fc       	sbrc	r10, 7
    2498:	8d e2       	ldi	r24, 0x2D	; 45
    249a:	b6 01       	movw	r22, r12
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    24a2:	89 14       	cp	r8, r9
    24a4:	38 f4       	brcc	.+14     	; 0x24b4 <vfprintf+0x384>
    24a6:	b6 01       	movw	r22, r12
    24a8:	80 e3       	ldi	r24, 0x30	; 48
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    24b0:	9a 94       	dec	r9
    24b2:	f7 cf       	rjmp	.-18     	; 0x24a2 <vfprintf+0x372>
    24b4:	8a 94       	dec	r8
    24b6:	f3 01       	movw	r30, r6
    24b8:	e8 0d       	add	r30, r8
    24ba:	f1 1d       	adc	r31, r1
    24bc:	80 81       	ld	r24, Z
    24be:	b6 01       	movw	r22, r12
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    24c6:	81 10       	cpse	r8, r1
    24c8:	f5 cf       	rjmp	.-22     	; 0x24b4 <vfprintf+0x384>
    24ca:	22 20       	and	r2, r2
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <vfprintf+0x3a0>
    24ce:	42 ce       	rjmp	.-892    	; 0x2154 <vfprintf+0x24>
    24d0:	b6 01       	movw	r22, r12
    24d2:	80 e2       	ldi	r24, 0x20	; 32
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fputc>
    24da:	2a 94       	dec	r2
    24dc:	f6 cf       	rjmp	.-20     	; 0x24ca <vfprintf+0x39a>
    24de:	f6 01       	movw	r30, r12
    24e0:	86 81       	ldd	r24, Z+6	; 0x06
    24e2:	97 81       	ldd	r25, Z+7	; 0x07
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <vfprintf+0x3ba>
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	9f ef       	ldi	r25, 0xFF	; 255
    24ea:	2b 96       	adiw	r28, 0x0b	; 11
    24ec:	e2 e1       	ldi	r30, 0x12	; 18
    24ee:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__epilogue_restores__>

000024f2 <calloc>:
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	86 9f       	mul	r24, r22
    24fc:	80 01       	movw	r16, r0
    24fe:	87 9f       	mul	r24, r23
    2500:	10 0d       	add	r17, r0
    2502:	96 9f       	mul	r25, r22
    2504:	10 0d       	add	r17, r0
    2506:	11 24       	eor	r1, r1
    2508:	c8 01       	movw	r24, r16
    250a:	0e 94 95 12 	call	0x252a	; 0x252a <malloc>
    250e:	ec 01       	movw	r28, r24
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	29 f0       	breq	.+10     	; 0x251e <calloc+0x2c>
    2514:	a8 01       	movw	r20, r16
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	0e 94 c1 13 	call	0x2782	; 0x2782 <memset>
    251e:	ce 01       	movw	r24, r28
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	08 95       	ret

0000252a <malloc>:
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	82 30       	cpi	r24, 0x02	; 2
    2534:	91 05       	cpc	r25, r1
    2536:	10 f4       	brcc	.+4      	; 0x253c <malloc+0x12>
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <__flp>
    2540:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <__flp+0x1>
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	a0 e0       	ldi	r26, 0x00	; 0
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	30 97       	sbiw	r30, 0x00	; 0
    254e:	19 f1       	breq	.+70     	; 0x2596 <malloc+0x6c>
    2550:	40 81       	ld	r20, Z
    2552:	51 81       	ldd	r21, Z+1	; 0x01
    2554:	02 81       	ldd	r16, Z+2	; 0x02
    2556:	13 81       	ldd	r17, Z+3	; 0x03
    2558:	48 17       	cp	r20, r24
    255a:	59 07       	cpc	r21, r25
    255c:	c8 f0       	brcs	.+50     	; 0x2590 <malloc+0x66>
    255e:	84 17       	cp	r24, r20
    2560:	95 07       	cpc	r25, r21
    2562:	69 f4       	brne	.+26     	; 0x257e <malloc+0x54>
    2564:	10 97       	sbiw	r26, 0x00	; 0
    2566:	31 f0       	breq	.+12     	; 0x2574 <malloc+0x4a>
    2568:	12 96       	adiw	r26, 0x02	; 2
    256a:	0c 93       	st	X, r16
    256c:	12 97       	sbiw	r26, 0x02	; 2
    256e:	13 96       	adiw	r26, 0x03	; 3
    2570:	1c 93       	st	X, r17
    2572:	27 c0       	rjmp	.+78     	; 0x25c2 <malloc+0x98>
    2574:	00 93 11 04 	sts	0x0411, r16	; 0x800411 <__flp>
    2578:	10 93 12 04 	sts	0x0412, r17	; 0x800412 <__flp+0x1>
    257c:	22 c0       	rjmp	.+68     	; 0x25c2 <malloc+0x98>
    257e:	21 15       	cp	r18, r1
    2580:	31 05       	cpc	r19, r1
    2582:	19 f0       	breq	.+6      	; 0x258a <malloc+0x60>
    2584:	42 17       	cp	r20, r18
    2586:	53 07       	cpc	r21, r19
    2588:	18 f4       	brcc	.+6      	; 0x2590 <malloc+0x66>
    258a:	9a 01       	movw	r18, r20
    258c:	bd 01       	movw	r22, r26
    258e:	ef 01       	movw	r28, r30
    2590:	df 01       	movw	r26, r30
    2592:	f8 01       	movw	r30, r16
    2594:	db cf       	rjmp	.-74     	; 0x254c <malloc+0x22>
    2596:	21 15       	cp	r18, r1
    2598:	31 05       	cpc	r19, r1
    259a:	f9 f0       	breq	.+62     	; 0x25da <malloc+0xb0>
    259c:	28 1b       	sub	r18, r24
    259e:	39 0b       	sbc	r19, r25
    25a0:	24 30       	cpi	r18, 0x04	; 4
    25a2:	31 05       	cpc	r19, r1
    25a4:	80 f4       	brcc	.+32     	; 0x25c6 <malloc+0x9c>
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	61 15       	cp	r22, r1
    25ac:	71 05       	cpc	r23, r1
    25ae:	21 f0       	breq	.+8      	; 0x25b8 <malloc+0x8e>
    25b0:	fb 01       	movw	r30, r22
    25b2:	93 83       	std	Z+3, r25	; 0x03
    25b4:	82 83       	std	Z+2, r24	; 0x02
    25b6:	04 c0       	rjmp	.+8      	; 0x25c0 <malloc+0x96>
    25b8:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <__flp+0x1>
    25bc:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <__flp>
    25c0:	fe 01       	movw	r30, r28
    25c2:	32 96       	adiw	r30, 0x02	; 2
    25c4:	44 c0       	rjmp	.+136    	; 0x264e <malloc+0x124>
    25c6:	fe 01       	movw	r30, r28
    25c8:	e2 0f       	add	r30, r18
    25ca:	f3 1f       	adc	r31, r19
    25cc:	81 93       	st	Z+, r24
    25ce:	91 93       	st	Z+, r25
    25d0:	22 50       	subi	r18, 0x02	; 2
    25d2:	31 09       	sbc	r19, r1
    25d4:	39 83       	std	Y+1, r19	; 0x01
    25d6:	28 83       	st	Y, r18
    25d8:	3a c0       	rjmp	.+116    	; 0x264e <malloc+0x124>
    25da:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <__brkval>
    25de:	30 91 10 04 	lds	r19, 0x0410	; 0x800410 <__brkval+0x1>
    25e2:	23 2b       	or	r18, r19
    25e4:	41 f4       	brne	.+16     	; 0x25f6 <malloc+0xcc>
    25e6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25ea:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    25ee:	30 93 10 04 	sts	0x0410, r19	; 0x800410 <__brkval+0x1>
    25f2:	20 93 0f 04 	sts	0x040F, r18	; 0x80040f <__brkval>
    25f6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    25fa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    25fe:	21 15       	cp	r18, r1
    2600:	31 05       	cpc	r19, r1
    2602:	41 f4       	brne	.+16     	; 0x2614 <malloc+0xea>
    2604:	2d b7       	in	r18, 0x3d	; 61
    2606:	3e b7       	in	r19, 0x3e	; 62
    2608:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    260c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2610:	24 1b       	sub	r18, r20
    2612:	35 0b       	sbc	r19, r21
    2614:	e0 91 0f 04 	lds	r30, 0x040F	; 0x80040f <__brkval>
    2618:	f0 91 10 04 	lds	r31, 0x0410	; 0x800410 <__brkval+0x1>
    261c:	e2 17       	cp	r30, r18
    261e:	f3 07       	cpc	r31, r19
    2620:	a0 f4       	brcc	.+40     	; 0x264a <malloc+0x120>
    2622:	2e 1b       	sub	r18, r30
    2624:	3f 0b       	sbc	r19, r31
    2626:	28 17       	cp	r18, r24
    2628:	39 07       	cpc	r19, r25
    262a:	78 f0       	brcs	.+30     	; 0x264a <malloc+0x120>
    262c:	ac 01       	movw	r20, r24
    262e:	4e 5f       	subi	r20, 0xFE	; 254
    2630:	5f 4f       	sbci	r21, 0xFF	; 255
    2632:	24 17       	cp	r18, r20
    2634:	35 07       	cpc	r19, r21
    2636:	48 f0       	brcs	.+18     	; 0x264a <malloc+0x120>
    2638:	4e 0f       	add	r20, r30
    263a:	5f 1f       	adc	r21, r31
    263c:	50 93 10 04 	sts	0x0410, r21	; 0x800410 <__brkval+0x1>
    2640:	40 93 0f 04 	sts	0x040F, r20	; 0x80040f <__brkval>
    2644:	81 93       	st	Z+, r24
    2646:	91 93       	st	Z+, r25
    2648:	02 c0       	rjmp	.+4      	; 0x264e <malloc+0x124>
    264a:	e0 e0       	ldi	r30, 0x00	; 0
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	cf 01       	movw	r24, r30
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	08 95       	ret

0000265a <free>:
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	09 f4       	brne	.+2      	; 0x2664 <free+0xa>
    2662:	81 c0       	rjmp	.+258    	; 0x2766 <free+0x10c>
    2664:	fc 01       	movw	r30, r24
    2666:	32 97       	sbiw	r30, 0x02	; 2
    2668:	13 82       	std	Z+3, r1	; 0x03
    266a:	12 82       	std	Z+2, r1	; 0x02
    266c:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <__flp>
    2670:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <__flp+0x1>
    2674:	10 97       	sbiw	r26, 0x00	; 0
    2676:	81 f4       	brne	.+32     	; 0x2698 <free+0x3e>
    2678:	20 81       	ld	r18, Z
    267a:	31 81       	ldd	r19, Z+1	; 0x01
    267c:	82 0f       	add	r24, r18
    267e:	93 1f       	adc	r25, r19
    2680:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <__brkval>
    2684:	30 91 10 04 	lds	r19, 0x0410	; 0x800410 <__brkval+0x1>
    2688:	28 17       	cp	r18, r24
    268a:	39 07       	cpc	r19, r25
    268c:	51 f5       	brne	.+84     	; 0x26e2 <free+0x88>
    268e:	f0 93 10 04 	sts	0x0410, r31	; 0x800410 <__brkval+0x1>
    2692:	e0 93 0f 04 	sts	0x040F, r30	; 0x80040f <__brkval>
    2696:	67 c0       	rjmp	.+206    	; 0x2766 <free+0x10c>
    2698:	ed 01       	movw	r28, r26
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	ce 17       	cp	r28, r30
    26a0:	df 07       	cpc	r29, r31
    26a2:	40 f4       	brcc	.+16     	; 0x26b4 <free+0x5a>
    26a4:	4a 81       	ldd	r20, Y+2	; 0x02
    26a6:	5b 81       	ldd	r21, Y+3	; 0x03
    26a8:	9e 01       	movw	r18, r28
    26aa:	41 15       	cp	r20, r1
    26ac:	51 05       	cpc	r21, r1
    26ae:	f1 f0       	breq	.+60     	; 0x26ec <free+0x92>
    26b0:	ea 01       	movw	r28, r20
    26b2:	f5 cf       	rjmp	.-22     	; 0x269e <free+0x44>
    26b4:	d3 83       	std	Z+3, r29	; 0x03
    26b6:	c2 83       	std	Z+2, r28	; 0x02
    26b8:	40 81       	ld	r20, Z
    26ba:	51 81       	ldd	r21, Z+1	; 0x01
    26bc:	84 0f       	add	r24, r20
    26be:	95 1f       	adc	r25, r21
    26c0:	c8 17       	cp	r28, r24
    26c2:	d9 07       	cpc	r29, r25
    26c4:	59 f4       	brne	.+22     	; 0x26dc <free+0x82>
    26c6:	88 81       	ld	r24, Y
    26c8:	99 81       	ldd	r25, Y+1	; 0x01
    26ca:	84 0f       	add	r24, r20
    26cc:	95 1f       	adc	r25, r21
    26ce:	02 96       	adiw	r24, 0x02	; 2
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	9b 81       	ldd	r25, Y+3	; 0x03
    26d8:	93 83       	std	Z+3, r25	; 0x03
    26da:	82 83       	std	Z+2, r24	; 0x02
    26dc:	21 15       	cp	r18, r1
    26de:	31 05       	cpc	r19, r1
    26e0:	29 f4       	brne	.+10     	; 0x26ec <free+0x92>
    26e2:	f0 93 12 04 	sts	0x0412, r31	; 0x800412 <__flp+0x1>
    26e6:	e0 93 11 04 	sts	0x0411, r30	; 0x800411 <__flp>
    26ea:	3d c0       	rjmp	.+122    	; 0x2766 <free+0x10c>
    26ec:	e9 01       	movw	r28, r18
    26ee:	fb 83       	std	Y+3, r31	; 0x03
    26f0:	ea 83       	std	Y+2, r30	; 0x02
    26f2:	49 91       	ld	r20, Y+
    26f4:	59 91       	ld	r21, Y+
    26f6:	c4 0f       	add	r28, r20
    26f8:	d5 1f       	adc	r29, r21
    26fa:	ec 17       	cp	r30, r28
    26fc:	fd 07       	cpc	r31, r29
    26fe:	61 f4       	brne	.+24     	; 0x2718 <free+0xbe>
    2700:	80 81       	ld	r24, Z
    2702:	91 81       	ldd	r25, Z+1	; 0x01
    2704:	84 0f       	add	r24, r20
    2706:	95 1f       	adc	r25, r21
    2708:	02 96       	adiw	r24, 0x02	; 2
    270a:	e9 01       	movw	r28, r18
    270c:	99 83       	std	Y+1, r25	; 0x01
    270e:	88 83       	st	Y, r24
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	9b 83       	std	Y+3, r25	; 0x03
    2716:	8a 83       	std	Y+2, r24	; 0x02
    2718:	e0 e0       	ldi	r30, 0x00	; 0
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	12 96       	adiw	r26, 0x02	; 2
    271e:	8d 91       	ld	r24, X+
    2720:	9c 91       	ld	r25, X
    2722:	13 97       	sbiw	r26, 0x03	; 3
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	19 f0       	breq	.+6      	; 0x272e <free+0xd4>
    2728:	fd 01       	movw	r30, r26
    272a:	dc 01       	movw	r26, r24
    272c:	f7 cf       	rjmp	.-18     	; 0x271c <free+0xc2>
    272e:	8d 91       	ld	r24, X+
    2730:	9c 91       	ld	r25, X
    2732:	11 97       	sbiw	r26, 0x01	; 1
    2734:	9d 01       	movw	r18, r26
    2736:	2e 5f       	subi	r18, 0xFE	; 254
    2738:	3f 4f       	sbci	r19, 0xFF	; 255
    273a:	82 0f       	add	r24, r18
    273c:	93 1f       	adc	r25, r19
    273e:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <__brkval>
    2742:	30 91 10 04 	lds	r19, 0x0410	; 0x800410 <__brkval+0x1>
    2746:	28 17       	cp	r18, r24
    2748:	39 07       	cpc	r19, r25
    274a:	69 f4       	brne	.+26     	; 0x2766 <free+0x10c>
    274c:	30 97       	sbiw	r30, 0x00	; 0
    274e:	29 f4       	brne	.+10     	; 0x275a <free+0x100>
    2750:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__flp+0x1>
    2754:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__flp>
    2758:	02 c0       	rjmp	.+4      	; 0x275e <free+0x104>
    275a:	13 82       	std	Z+3, r1	; 0x03
    275c:	12 82       	std	Z+2, r1	; 0x02
    275e:	b0 93 10 04 	sts	0x0410, r27	; 0x800410 <__brkval+0x1>
    2762:	a0 93 0f 04 	sts	0x040F, r26	; 0x80040f <__brkval>
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	08 95       	ret

0000276c <strnlen_P>:
    276c:	fc 01       	movw	r30, r24
    276e:	05 90       	lpm	r0, Z+
    2770:	61 50       	subi	r22, 0x01	; 1
    2772:	70 40       	sbci	r23, 0x00	; 0
    2774:	01 10       	cpse	r0, r1
    2776:	d8 f7       	brcc	.-10     	; 0x276e <strnlen_P+0x2>
    2778:	80 95       	com	r24
    277a:	90 95       	com	r25
    277c:	8e 0f       	add	r24, r30
    277e:	9f 1f       	adc	r25, r31
    2780:	08 95       	ret

00002782 <memset>:
    2782:	dc 01       	movw	r26, r24
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <memset+0x6>
    2786:	6d 93       	st	X+, r22
    2788:	41 50       	subi	r20, 0x01	; 1
    278a:	50 40       	sbci	r21, 0x00	; 0
    278c:	e0 f7       	brcc	.-8      	; 0x2786 <memset+0x4>
    278e:	08 95       	ret

00002790 <strnlen>:
    2790:	fc 01       	movw	r30, r24
    2792:	61 50       	subi	r22, 0x01	; 1
    2794:	70 40       	sbci	r23, 0x00	; 0
    2796:	01 90       	ld	r0, Z+
    2798:	01 10       	cpse	r0, r1
    279a:	d8 f7       	brcc	.-10     	; 0x2792 <strnlen+0x2>
    279c:	80 95       	com	r24
    279e:	90 95       	com	r25
    27a0:	8e 0f       	add	r24, r30
    27a2:	9f 1f       	adc	r25, r31
    27a4:	08 95       	ret

000027a6 <strrev>:
    27a6:	dc 01       	movw	r26, r24
    27a8:	fc 01       	movw	r30, r24
    27aa:	67 2f       	mov	r22, r23
    27ac:	71 91       	ld	r23, Z+
    27ae:	77 23       	and	r23, r23
    27b0:	e1 f7       	brne	.-8      	; 0x27aa <strrev+0x4>
    27b2:	32 97       	sbiw	r30, 0x02	; 2
    27b4:	04 c0       	rjmp	.+8      	; 0x27be <strrev+0x18>
    27b6:	7c 91       	ld	r23, X
    27b8:	6d 93       	st	X+, r22
    27ba:	70 83       	st	Z, r23
    27bc:	62 91       	ld	r22, -Z
    27be:	ae 17       	cp	r26, r30
    27c0:	bf 07       	cpc	r27, r31
    27c2:	c8 f3       	brcs	.-14     	; 0x27b6 <strrev+0x10>
    27c4:	08 95       	ret

000027c6 <fputc>:
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	fb 01       	movw	r30, r22
    27d0:	23 81       	ldd	r18, Z+3	; 0x03
    27d2:	21 fd       	sbrc	r18, 1
    27d4:	03 c0       	rjmp	.+6      	; 0x27dc <fputc+0x16>
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	9f ef       	ldi	r25, 0xFF	; 255
    27da:	2c c0       	rjmp	.+88     	; 0x2834 <fputc+0x6e>
    27dc:	22 ff       	sbrs	r18, 2
    27de:	16 c0       	rjmp	.+44     	; 0x280c <fputc+0x46>
    27e0:	46 81       	ldd	r20, Z+6	; 0x06
    27e2:	57 81       	ldd	r21, Z+7	; 0x07
    27e4:	24 81       	ldd	r18, Z+4	; 0x04
    27e6:	35 81       	ldd	r19, Z+5	; 0x05
    27e8:	42 17       	cp	r20, r18
    27ea:	53 07       	cpc	r21, r19
    27ec:	44 f4       	brge	.+16     	; 0x27fe <fputc+0x38>
    27ee:	a0 81       	ld	r26, Z
    27f0:	b1 81       	ldd	r27, Z+1	; 0x01
    27f2:	9d 01       	movw	r18, r26
    27f4:	2f 5f       	subi	r18, 0xFF	; 255
    27f6:	3f 4f       	sbci	r19, 0xFF	; 255
    27f8:	31 83       	std	Z+1, r19	; 0x01
    27fa:	20 83       	st	Z, r18
    27fc:	8c 93       	st	X, r24
    27fe:	26 81       	ldd	r18, Z+6	; 0x06
    2800:	37 81       	ldd	r19, Z+7	; 0x07
    2802:	2f 5f       	subi	r18, 0xFF	; 255
    2804:	3f 4f       	sbci	r19, 0xFF	; 255
    2806:	37 83       	std	Z+7, r19	; 0x07
    2808:	26 83       	std	Z+6, r18	; 0x06
    280a:	14 c0       	rjmp	.+40     	; 0x2834 <fputc+0x6e>
    280c:	8b 01       	movw	r16, r22
    280e:	ec 01       	movw	r28, r24
    2810:	fb 01       	movw	r30, r22
    2812:	00 84       	ldd	r0, Z+8	; 0x08
    2814:	f1 85       	ldd	r31, Z+9	; 0x09
    2816:	e0 2d       	mov	r30, r0
    2818:	09 95       	icall
    281a:	89 2b       	or	r24, r25
    281c:	e1 f6       	brne	.-72     	; 0x27d6 <fputc+0x10>
    281e:	d8 01       	movw	r26, r16
    2820:	16 96       	adiw	r26, 0x06	; 6
    2822:	8d 91       	ld	r24, X+
    2824:	9c 91       	ld	r25, X
    2826:	17 97       	sbiw	r26, 0x07	; 7
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	17 96       	adiw	r26, 0x07	; 7
    282c:	9c 93       	st	X, r25
    282e:	8e 93       	st	-X, r24
    2830:	16 97       	sbiw	r26, 0x06	; 6
    2832:	ce 01       	movw	r24, r28
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	1f 91       	pop	r17
    283a:	0f 91       	pop	r16
    283c:	08 95       	ret

0000283e <__ultoa_invert>:
    283e:	fa 01       	movw	r30, r20
    2840:	aa 27       	eor	r26, r26
    2842:	28 30       	cpi	r18, 0x08	; 8
    2844:	51 f1       	breq	.+84     	; 0x289a <__ultoa_invert+0x5c>
    2846:	20 31       	cpi	r18, 0x10	; 16
    2848:	81 f1       	breq	.+96     	; 0x28aa <__ultoa_invert+0x6c>
    284a:	e8 94       	clt
    284c:	6f 93       	push	r22
    284e:	6e 7f       	andi	r22, 0xFE	; 254
    2850:	6e 5f       	subi	r22, 0xFE	; 254
    2852:	7f 4f       	sbci	r23, 0xFF	; 255
    2854:	8f 4f       	sbci	r24, 0xFF	; 255
    2856:	9f 4f       	sbci	r25, 0xFF	; 255
    2858:	af 4f       	sbci	r26, 0xFF	; 255
    285a:	b1 e0       	ldi	r27, 0x01	; 1
    285c:	3e d0       	rcall	.+124    	; 0x28da <__ultoa_invert+0x9c>
    285e:	b4 e0       	ldi	r27, 0x04	; 4
    2860:	3c d0       	rcall	.+120    	; 0x28da <__ultoa_invert+0x9c>
    2862:	67 0f       	add	r22, r23
    2864:	78 1f       	adc	r23, r24
    2866:	89 1f       	adc	r24, r25
    2868:	9a 1f       	adc	r25, r26
    286a:	a1 1d       	adc	r26, r1
    286c:	68 0f       	add	r22, r24
    286e:	79 1f       	adc	r23, r25
    2870:	8a 1f       	adc	r24, r26
    2872:	91 1d       	adc	r25, r1
    2874:	a1 1d       	adc	r26, r1
    2876:	6a 0f       	add	r22, r26
    2878:	71 1d       	adc	r23, r1
    287a:	81 1d       	adc	r24, r1
    287c:	91 1d       	adc	r25, r1
    287e:	a1 1d       	adc	r26, r1
    2880:	20 d0       	rcall	.+64     	; 0x28c2 <__ultoa_invert+0x84>
    2882:	09 f4       	brne	.+2      	; 0x2886 <__ultoa_invert+0x48>
    2884:	68 94       	set
    2886:	3f 91       	pop	r19
    2888:	2a e0       	ldi	r18, 0x0A	; 10
    288a:	26 9f       	mul	r18, r22
    288c:	11 24       	eor	r1, r1
    288e:	30 19       	sub	r19, r0
    2890:	30 5d       	subi	r19, 0xD0	; 208
    2892:	31 93       	st	Z+, r19
    2894:	de f6       	brtc	.-74     	; 0x284c <__ultoa_invert+0xe>
    2896:	cf 01       	movw	r24, r30
    2898:	08 95       	ret
    289a:	46 2f       	mov	r20, r22
    289c:	47 70       	andi	r20, 0x07	; 7
    289e:	40 5d       	subi	r20, 0xD0	; 208
    28a0:	41 93       	st	Z+, r20
    28a2:	b3 e0       	ldi	r27, 0x03	; 3
    28a4:	0f d0       	rcall	.+30     	; 0x28c4 <__ultoa_invert+0x86>
    28a6:	c9 f7       	brne	.-14     	; 0x289a <__ultoa_invert+0x5c>
    28a8:	f6 cf       	rjmp	.-20     	; 0x2896 <__ultoa_invert+0x58>
    28aa:	46 2f       	mov	r20, r22
    28ac:	4f 70       	andi	r20, 0x0F	; 15
    28ae:	40 5d       	subi	r20, 0xD0	; 208
    28b0:	4a 33       	cpi	r20, 0x3A	; 58
    28b2:	18 f0       	brcs	.+6      	; 0x28ba <__ultoa_invert+0x7c>
    28b4:	49 5d       	subi	r20, 0xD9	; 217
    28b6:	31 fd       	sbrc	r19, 1
    28b8:	40 52       	subi	r20, 0x20	; 32
    28ba:	41 93       	st	Z+, r20
    28bc:	02 d0       	rcall	.+4      	; 0x28c2 <__ultoa_invert+0x84>
    28be:	a9 f7       	brne	.-22     	; 0x28aa <__ultoa_invert+0x6c>
    28c0:	ea cf       	rjmp	.-44     	; 0x2896 <__ultoa_invert+0x58>
    28c2:	b4 e0       	ldi	r27, 0x04	; 4
    28c4:	a6 95       	lsr	r26
    28c6:	97 95       	ror	r25
    28c8:	87 95       	ror	r24
    28ca:	77 95       	ror	r23
    28cc:	67 95       	ror	r22
    28ce:	ba 95       	dec	r27
    28d0:	c9 f7       	brne	.-14     	; 0x28c4 <__ultoa_invert+0x86>
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	61 05       	cpc	r22, r1
    28d6:	71 05       	cpc	r23, r1
    28d8:	08 95       	ret
    28da:	9b 01       	movw	r18, r22
    28dc:	ac 01       	movw	r20, r24
    28de:	0a 2e       	mov	r0, r26
    28e0:	06 94       	lsr	r0
    28e2:	57 95       	ror	r21
    28e4:	47 95       	ror	r20
    28e6:	37 95       	ror	r19
    28e8:	27 95       	ror	r18
    28ea:	ba 95       	dec	r27
    28ec:	c9 f7       	brne	.-14     	; 0x28e0 <__ultoa_invert+0xa2>
    28ee:	62 0f       	add	r22, r18
    28f0:	73 1f       	adc	r23, r19
    28f2:	84 1f       	adc	r24, r20
    28f4:	95 1f       	adc	r25, r21
    28f6:	a0 1d       	adc	r26, r0
    28f8:	08 95       	ret

000028fa <__prologue_saves__>:
    28fa:	2f 92       	push	r2
    28fc:	3f 92       	push	r3
    28fe:	4f 92       	push	r4
    2900:	5f 92       	push	r5
    2902:	6f 92       	push	r6
    2904:	7f 92       	push	r7
    2906:	8f 92       	push	r8
    2908:	9f 92       	push	r9
    290a:	af 92       	push	r10
    290c:	bf 92       	push	r11
    290e:	cf 92       	push	r12
    2910:	df 92       	push	r13
    2912:	ef 92       	push	r14
    2914:	ff 92       	push	r15
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	ca 1b       	sub	r28, r26
    2924:	db 0b       	sbc	r29, r27
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	09 94       	ijmp

00002932 <__epilogue_restores__>:
    2932:	2a 88       	ldd	r2, Y+18	; 0x12
    2934:	39 88       	ldd	r3, Y+17	; 0x11
    2936:	48 88       	ldd	r4, Y+16	; 0x10
    2938:	5f 84       	ldd	r5, Y+15	; 0x0f
    293a:	6e 84       	ldd	r6, Y+14	; 0x0e
    293c:	7d 84       	ldd	r7, Y+13	; 0x0d
    293e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2940:	9b 84       	ldd	r9, Y+11	; 0x0b
    2942:	aa 84       	ldd	r10, Y+10	; 0x0a
    2944:	b9 84       	ldd	r11, Y+9	; 0x09
    2946:	c8 84       	ldd	r12, Y+8	; 0x08
    2948:	df 80       	ldd	r13, Y+7	; 0x07
    294a:	ee 80       	ldd	r14, Y+6	; 0x06
    294c:	fd 80       	ldd	r15, Y+5	; 0x05
    294e:	0c 81       	ldd	r16, Y+4	; 0x04
    2950:	1b 81       	ldd	r17, Y+3	; 0x03
    2952:	aa 81       	ldd	r26, Y+2	; 0x02
    2954:	b9 81       	ldd	r27, Y+1	; 0x01
    2956:	ce 0f       	add	r28, r30
    2958:	d1 1d       	adc	r29, r1
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	ed 01       	movw	r28, r26
    2966:	08 95       	ret

00002968 <_exit>:
    2968:	f8 94       	cli

0000296a <__stop_program>:
    296a:	ff cf       	rjmp	.-2      	; 0x296a <__stop_program>
