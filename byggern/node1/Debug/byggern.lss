
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  000029a8  00002a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  008002d4  008002d4  00002c10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000057e5  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d53  00000000  00000000  00008885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000232d  00000000  00000000  0000a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  0000c908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d28  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000243b  00000000  00000000  0000df04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0001033f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	12 e0       	ldi	r17, 0x02	; 2
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	e8 ea       	ldi	r30, 0xA8	; 168
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 3d       	cpi	r26, 0xD4	; 212
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a4 ed       	ldi	r26, 0xD4	; 212
     548:	b2 e0       	ldi	r27, 0x02	; 2
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a4 31       	cpi	r26, 0x14	; 20
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xfec>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xfec>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "sleep.h"
#include "slider.h"
#include "joystick.h"
#include "touchButton.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 06 0c 	call	0x180c	; 0x180c <setupInit>
	
	//Send initialize message to Node 2
	CAN_message_t message;
	message.ID = 0x10;
     5aa:	80 e1       	ldi	r24, 0x10	; 16
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 0;
     5b2:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&message);
     5b4:	ce 01       	movw	r24, r28
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CAN_transmit_message>
	
	printf("Starting program\n\r");
     5bc:	86 ea       	ldi	r24, 0xA6	; 166
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	0e 94 a0 10 	call	0x2140	; 0x2140 <printf>
	printf("---------------------------------------\n\r");
     5c8:	89 eb       	ldi	r24, 0xB9	; 185
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 a0 10 	call	0x2140	; 0x2140 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	8f e7       	ldi	r24, 0x7F	; 127
     5d8:	97 e0       	ldi	r25, 0x07	; 7
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	90 40       	sbci	r25, 0x00	; 0
     5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x48>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x52>
     5e4:	00 00       	nop
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
			timerFlag=0;
			TCNT1 = 0x00;

			sei();
		}
		switch(currentMenu.currentMenuItem->nodeID){
     5ee:	02 ee       	ldi	r16, 0xE2	; 226
     5f0:	12 e0       	ldi	r17, 0x02	; 2
     5f2:	af ef       	ldi	r26, 0xFF	; 255
     5f4:	b7 e1       	ldi	r27, 0x17	; 23
     5f6:	11 97       	sbiw	r26, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <main+0x64>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0x6a>
     5fc:	00 00       	nop
	printf("---------------------------------------\n\r");
	_delay_ms(500);    
	while (1) {
		_delay_ms(5);
		
		if (timerFlag)
     5fe:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <timerFlag>
     602:	88 23       	and	r24, r24
     604:	81 f0       	breq	.+32     	; 0x626 <main+0x94>
		{
			cli();
     606:	f8 94       	cli
			TCNT1 = 0x00;
     608:	1d bc       	out	0x2d, r1	; 45
     60a:	1c bc       	out	0x2c, r1	; 44
			joystick_readPosition();
     60c:	0e 94 67 09 	call	0x12ce	; 0x12ce <joystick_readPosition>
			slider_readPosition(&slider_pos);
     610:	81 ef       	ldi	r24, 0xF1	; 241
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	0e 94 8f 0c 	call	0x191e	; 0x191e <slider_readPosition>
			touchButton_readButtons();
     618:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <touchButton_readButtons>
			
			timerFlag=0;
     61c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <timerFlag>
			TCNT1 = 0x00;
     620:	1d bc       	out	0x2d, r1	; 45
     622:	1c bc       	out	0x2c, r1	; 44

			sei();
     624:	78 94       	sei
		}
		switch(currentMenu.currentMenuItem->nodeID){
     626:	d8 01       	movw	r26, r16
     628:	ed 91       	ld	r30, X+
     62a:	fc 91       	ld	r31, X
     62c:	80 81       	ld	r24, Z
     62e:	84 30       	cpi	r24, 0x04	; 4
     630:	91 f0       	breq	.+36     	; 0x656 <main+0xc4>
     632:	28 f4       	brcc	.+10     	; 0x63e <main+0xac>
     634:	82 30       	cpi	r24, 0x02	; 2
     636:	49 f0       	breq	.+18     	; 0x64a <main+0xb8>
     638:	83 30       	cpi	r24, 0x03	; 3
     63a:	51 f0       	breq	.+20     	; 0x650 <main+0xbe>
     63c:	1b c0       	rjmp	.+54     	; 0x674 <main+0xe2>
     63e:	86 30       	cpi	r24, 0x06	; 6
     640:	91 f0       	breq	.+36     	; 0x666 <main+0xd4>
     642:	68 f0       	brcs	.+26     	; 0x65e <main+0xcc>
     644:	87 30       	cpi	r24, 0x07	; 7
     646:	99 f0       	breq	.+38     	; 0x66e <main+0xdc>
     648:	15 c0       	rjmp	.+42     	; 0x674 <main+0xe2>
			case MAIN_MENU:
				break;
			case PLAY_GAME:
				break;
			case HIGH_SCORE:
				highScoresActive = 0;
     64a:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <highScoresActive>
				break;
     64e:	12 c0       	rjmp	.+36     	; 0x674 <main+0xe2>
			case MUSIC:
				music_playRick();
     650:	0e 94 16 08 	call	0x102c	; 0x102c <music_playRick>
				break;
     654:	0f c0       	rjmp	.+30     	; 0x674 <main+0xe2>
			case GAME_1:
				game_play(1);
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 68 07 	call	0xed0	; 0xed0 <game_play>
				break;
     65c:	0b c0       	rjmp	.+22     	; 0x674 <main+0xe2>
			case GAME_2:
				game_play(2);
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	0e 94 68 07 	call	0xed0	; 0xed0 <game_play>
				break;
     664:	07 c0       	rjmp	.+14     	; 0x674 <main+0xe2>
			case HS1:
				game_displayHighscores(1);
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 a0 07 	call	0xf40	; 0xf40 <game_displayHighscores>
				break;
     66c:	03 c0       	rjmp	.+6      	; 0x674 <main+0xe2>
			case HS2:
				game_displayHighscores(2);
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	0e 94 a0 07 	call	0xf40	; 0xf40 <game_displayHighscores>
				break;
			
		}
		if (gameActive == 0) {
     674:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <gameActive>
     678:	81 11       	cpse	r24, r1
     67a:	16 c0       	rjmp	.+44     	; 0x6a8 <main+0x116>
					navigateMenu(&joystick_pos);
     67c:	88 ed       	ldi	r24, 0xD8	; 216
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	0e 94 1e 0a 	call	0x143c	; 0x143c <navigateMenu>

		}
		if(gameActive==0 & highScoresActive == 0) {
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <gameActive>
     68a:	91 11       	cpse	r25, r1
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	88 23       	and	r24, r24
     690:	59 f0       	breq	.+22     	; 0x6a8 <main+0x116>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <highScoresActive>
     698:	91 11       	cpse	r25, r1
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	88 23       	and	r24, r24
     69e:	21 f0       	breq	.+8      	; 0x6a8 <main+0x116>
			
			menu_printCurrentMenu();
     6a0:	0e 94 31 0b 	call	0x1662	; 0x1662 <menu_printCurrentMenu>
			TCNT1 = 0x00;
     6a4:	1d bc       	out	0x2d, r1	; 45
     6a6:	1c bc       	out	0x2c, r1	; 44
		}
		//Put microcontroller to sleep until next interrupt.

		sleep_now();
     6a8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sleep_now>
		
	}
     6ac:	a2 cf       	rjmp	.-188    	; 0x5f2 <main+0x60>

000006ae <CAN_clearInterrupt>:


void CAN_clearInterrupt()
{
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	6c e2       	ldi	r22, 0x2C	; 44
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
     6b8:	08 95       	ret

000006ba <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	8c 01       	movw	r16, r24
	
	//changing between three buffers
	static int buffer_number = 0;
	buffer_number++;
	buffer_number = buffer_number%3;
     6c2:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     6c6:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divmodhi4>
     6d4:	28 2f       	mov	r18, r24
     6d6:	39 2f       	mov	r19, r25
     6d8:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <__data_end>
     6dc:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <__data_end+0x1>
	
	//Load ID in message
	switch(buffer_number) {
     6e0:	21 30       	cpi	r18, 0x01	; 1
     6e2:	31 05       	cpc	r19, r1
     6e4:	e9 f0       	breq	.+58     	; 0x720 <CAN_transmit_message+0x66>
     6e6:	22 30       	cpi	r18, 0x02	; 2
     6e8:	31 05       	cpc	r19, r1
     6ea:	89 f1       	breq	.+98     	; 0x74e <CAN_transmit_message+0x94>
     6ec:	23 2b       	or	r18, r19
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <CAN_transmit_message+0x38>
     6f0:	44 c0       	rjmp	.+136    	; 0x77a <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6f2:	f8 01       	movw	r30, r16
     6f4:	40 85       	ldd	r20, Z+8	; 0x08
     6f6:	51 85       	ldd	r21, Z+9	; 0x09
     6f8:	42 95       	swap	r20
     6fa:	44 0f       	add	r20, r20
     6fc:	40 7e       	andi	r20, 0xE0	; 224
     6fe:	62 e3       	ldi	r22, 0x32	; 50
     700:	80 ee       	ldi	r24, 0xE0	; 224
     702:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     706:	f8 01       	movw	r30, r16
     708:	60 85       	ldd	r22, Z+8	; 0x08
     70a:	71 85       	ldd	r23, Z+9	; 0x09
     70c:	76 95       	lsr	r23
     70e:	67 95       	ror	r22
     710:	76 95       	lsr	r23
     712:	67 95       	ror	r22
     714:	76 95       	lsr	r23
     716:	67 95       	ror	r22
     718:	81 e3       	ldi	r24, 0x31	; 49
     71a:	0e 94 97 04 	call	0x92e	; 0x92e <CAN_controller_write>
				break;
     71e:	2d c0       	rjmp	.+90     	; 0x77a <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     720:	f8 01       	movw	r30, r16
     722:	40 85       	ldd	r20, Z+8	; 0x08
     724:	51 85       	ldd	r21, Z+9	; 0x09
     726:	42 95       	swap	r20
     728:	44 0f       	add	r20, r20
     72a:	40 7e       	andi	r20, 0xE0	; 224
     72c:	62 e4       	ldi	r22, 0x42	; 66
     72e:	80 ee       	ldi	r24, 0xE0	; 224
     730:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );				
     734:	f8 01       	movw	r30, r16
     736:	60 85       	ldd	r22, Z+8	; 0x08
     738:	71 85       	ldd	r23, Z+9	; 0x09
     73a:	76 95       	lsr	r23
     73c:	67 95       	ror	r22
     73e:	76 95       	lsr	r23
     740:	67 95       	ror	r22
     742:	76 95       	lsr	r23
     744:	67 95       	ror	r22
     746:	81 e4       	ldi	r24, 0x41	; 65
     748:	0e 94 97 04 	call	0x92e	; 0x92e <CAN_controller_write>
				break;
     74c:	16 c0       	rjmp	.+44     	; 0x77a <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     74e:	f8 01       	movw	r30, r16
     750:	40 85       	ldd	r20, Z+8	; 0x08
     752:	51 85       	ldd	r21, Z+9	; 0x09
     754:	42 95       	swap	r20
     756:	44 0f       	add	r20, r20
     758:	40 7e       	andi	r20, 0xE0	; 224
     75a:	62 e5       	ldi	r22, 0x52	; 82
     75c:	80 ee       	ldi	r24, 0xE0	; 224
     75e:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     762:	f8 01       	movw	r30, r16
     764:	60 85       	ldd	r22, Z+8	; 0x08
     766:	71 85       	ldd	r23, Z+9	; 0x09
     768:	76 95       	lsr	r23
     76a:	67 95       	ror	r22
     76c:	76 95       	lsr	r23
     76e:	67 95       	ror	r22
     770:	76 95       	lsr	r23
     772:	67 95       	ror	r22
     774:	81 e5       	ldi	r24, 0x51	; 81
     776:	0e 94 97 04 	call	0x92e	; 0x92e <CAN_controller_write>
				break;
	}
		
	//Filling message with data length
	switch(buffer_number) {
     77a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     77e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	91 05       	cpc	r25, r1
     786:	61 f0       	breq	.+24     	; 0x7a0 <CAN_transmit_message+0xe6>
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	91 05       	cpc	r25, r1
     78c:	81 f0       	breq	.+32     	; 0x7ae <CAN_transmit_message+0xf4>
     78e:	89 2b       	or	r24, r25
     790:	a1 f4       	brne	.+40     	; 0x7ba <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     792:	f8 01       	movw	r30, r16
     794:	42 85       	ldd	r20, Z+10	; 0x0a
     796:	65 e3       	ldi	r22, 0x35	; 53
     798:	8f e0       	ldi	r24, 0x0F	; 15
     79a:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
				break;
     79e:	0d c0       	rjmp	.+26     	; 0x7ba <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     7a0:	f8 01       	movw	r30, r16
     7a2:	42 85       	ldd	r20, Z+10	; 0x0a
     7a4:	65 e4       	ldi	r22, 0x45	; 69
     7a6:	8f e0       	ldi	r24, 0x0F	; 15
     7a8:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
				break;
     7ac:	06 c0       	rjmp	.+12     	; 0x7ba <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     7ae:	f8 01       	movw	r30, r16
     7b0:	42 85       	ldd	r20, Z+10	; 0x0a
     7b2:	65 e5       	ldi	r22, 0x55	; 85
     7b4:	8f e0       	ldi	r24, 0x0F	; 15
     7b6:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
				break;
				
	}

	//Filling message with data.
	for (uint8_t i = 0; i != message->data_length; i++) {
     7ba:	f8 01       	movw	r30, r16
     7bc:	82 85       	ldd	r24, Z+10	; 0x0a
     7be:	88 23       	and	r24, r24
     7c0:	61 f1       	breq	.+88     	; 0x81a <CAN_transmit_message+0x160>
     7c2:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     7c4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     7c8:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	91 05       	cpc	r25, r1
     7d0:	71 f0       	breq	.+28     	; 0x7ee <CAN_transmit_message+0x134>
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	91 05       	cpc	r25, r1
     7d6:	a1 f0       	breq	.+40     	; 0x800 <CAN_transmit_message+0x146>
     7d8:	89 2b       	or	r24, r25
     7da:	d1 f4       	brne	.+52     	; 0x810 <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     7dc:	f8 01       	movw	r30, r16
     7de:	ec 0f       	add	r30, r28
     7e0:	f1 1d       	adc	r31, r1
     7e2:	60 81       	ld	r22, Z
     7e4:	86 e3       	ldi	r24, 0x36	; 54
     7e6:	8c 0f       	add	r24, r28
     7e8:	0e 94 97 04 	call	0x92e	; 0x92e <CAN_controller_write>
				break;
     7ec:	11 c0       	rjmp	.+34     	; 0x810 <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7ee:	f8 01       	movw	r30, r16
     7f0:	ec 0f       	add	r30, r28
     7f2:	f1 1d       	adc	r31, r1
     7f4:	60 81       	ld	r22, Z
     7f6:	86 e4       	ldi	r24, 0x46	; 70
     7f8:	8c 0f       	add	r24, r28
     7fa:	0e 94 97 04 	call	0x92e	; 0x92e <CAN_controller_write>
				break;
     7fe:	08 c0       	rjmp	.+16     	; 0x810 <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     800:	f8 01       	movw	r30, r16
     802:	ec 0f       	add	r30, r28
     804:	f1 1d       	adc	r31, r1
     806:	60 81       	ld	r22, Z
     808:	86 e5       	ldi	r24, 0x56	; 86
     80a:	8c 0f       	add	r24, r28
     80c:	0e 94 97 04 	call	0x92e	; 0x92e <CAN_controller_write>
				break;
				
	}

	//Filling message with data.
	for (uint8_t i = 0; i != message->data_length; i++) {
     810:	cf 5f       	subi	r28, 0xFF	; 255
     812:	f8 01       	movw	r30, r16
     814:	82 85       	ldd	r24, Z+10	; 0x0a
     816:	8c 13       	cpse	r24, r28
     818:	d5 cf       	rjmp	.-86     	; 0x7c4 <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     81a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     81e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <CAN_controller_RTS>
	
	//Currently no error handling	
}
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	7c 01       	movw	r14, r24
	
	//read ID
	received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     836:	82 e6       	ldi	r24, 0x62	; 98
     838:	0e 94 81 04 	call	0x902	; 0x902 <CAN_controller_read>
     83c:	c8 2f       	mov	r28, r24
     83e:	81 e6       	ldi	r24, 0x61	; 97
     840:	0e 94 81 04 	call	0x902	; 0x902 <CAN_controller_read>
     844:	c2 95       	swap	r28
     846:	c6 95       	lsr	r28
     848:	c7 70       	andi	r28, 0x07	; 7
     84a:	28 e0       	ldi	r18, 0x08	; 8
     84c:	82 9f       	mul	r24, r18
     84e:	c0 01       	movw	r24, r0
     850:	11 24       	eor	r1, r1
     852:	8c 0f       	add	r24, r28
     854:	91 1d       	adc	r25, r1
     856:	f7 01       	movw	r30, r14
     858:	91 87       	std	Z+9, r25	; 0x09
     85a:	80 87       	std	Z+8, r24	; 0x08
	
	//read data length
	received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     85c:	85 e6       	ldi	r24, 0x65	; 101
     85e:	0e 94 81 04 	call	0x902	; 0x902 <CAN_controller_read>
     862:	8f 70       	andi	r24, 0x0F	; 15
     864:	f7 01       	movw	r30, r14
     866:	82 87       	std	Z+10, r24	; 0x0a
	
	//read data
	for (uint8_t i = 0; i != received_message->data_length; i++) {
     868:	82 85       	ldd	r24, Z+10	; 0x0a
     86a:	88 23       	and	r24, r24
     86c:	81 f0       	breq	.+32     	; 0x88e <CAN_receiveMessage+0x64>
     86e:	c0 e0       	ldi	r28, 0x00	; 0
		received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     870:	0c 2f       	mov	r16, r28
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	86 e6       	ldi	r24, 0x66	; 102
     876:	8c 0f       	add	r24, r28
     878:	0e 94 81 04 	call	0x902	; 0x902 <CAN_controller_read>
     87c:	f7 01       	movw	r30, r14
     87e:	e0 0f       	add	r30, r16
     880:	f1 1f       	adc	r31, r17
     882:	80 83       	st	Z, r24
	
	//read data length
	received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
	
	//read data
	for (uint8_t i = 0; i != received_message->data_length; i++) {
     884:	cf 5f       	subi	r28, 0xFF	; 255
     886:	f7 01       	movw	r30, r14
     888:	82 85       	ldd	r24, Z+10	; 0x0a
     88a:	8c 13       	cpse	r24, r28
     88c:	f1 cf       	rjmp	.-30     	; 0x870 <CAN_receiveMessage+0x46>
		received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
	}
	
	
}
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	08 95       	ret

0000089a <CAN_sendInputData>:

void CAN_sendInputData() {
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	2b 97       	sbiw	r28, 0x0b	; 11
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	9a 87       	std	Y+10, r25	; 0x0a
     8b4:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     8b6:	86 e0       	ldi	r24, 0x06	; 6
     8b8:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     8ba:	e1 ef       	ldi	r30, 0xF1	; 241
     8bc:	f2 e0       	ldi	r31, 0x02	; 2
     8be:	80 81       	ld	r24, Z
     8c0:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     8c2:	81 81       	ldd	r24, Z+1	; 0x01
     8c4:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     8c6:	e7 ee       	ldi	r30, 0xE7	; 231
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	80 81       	ld	r24, Z
     8cc:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     8ce:	81 81       	ldd	r24, Z+1	; 0x01
     8d0:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     8d2:	e8 ed       	ldi	r30, 0xD8	; 216
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
     8d6:	80 81       	ld	r24, Z
     8d8:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     8da:	81 81       	ldd	r24, Z+1	; 0x01
     8dc:	8e 83       	std	Y+6, r24	; 0x06
	
	CAN_transmit_message(&message);
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CAN_transmit_message>
}
     8e6:	2b 96       	adiw	r28, 0x0b	; 11
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <CAN_init>:

void CAN_init() {
	CAN_controller_init();
     8f8:	0e 94 2a 05 	call	0xa54	; 0xa54 <CAN_controller_init>

	flag=0;
     8fc:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <flag>
     900:	08 95       	ret

00000902 <CAN_controller_read>:
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"


uint8_t CAN_controller_read(uint8_t addr) {
     902:	cf 93       	push	r28
     904:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_READ);
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
	SPI_masterWrite(addr);
     914:	8c 2f       	mov	r24, r28
     916:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     91a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <SPI_masterRead>
     91e:	c8 2f       	mov	r28, r24
	
	SPI_setChipSelect(PB4, 1);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	84 e0       	ldi	r24, 0x04	; 4
     924:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
	
	return data;
}
     928:	8c 2f       	mov	r24, r28
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	d8 2f       	mov	r29, r24
     934:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
	SPI_masterWrite(addr);
     944:	8d 2f       	mov	r24, r29
     946:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
	SPI_masterWrite(data);
     94a:	8c 2f       	mov	r24, r28
     94c:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
	
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <CAN_controller_bitModify>:

void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	d8 2f       	mov	r29, r24
     966:	16 2f       	mov	r17, r22
     968:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     972:	85 e0       	ldi	r24, 0x05	; 5
     974:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
		SPI_masterWrite(addr);
     978:	81 2f       	mov	r24, r17
     97a:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
		SPI_masterWrite(mask);
     97e:	8d 2f       	mov	r24, r29
     980:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
		SPI_masterWrite(data);
     984:	8c 2f       	mov	r24, r28
     986:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>

}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	08 95       	ret

0000099a <CAN_controller_reset>:

//Reset Can controller, necessary for config mode.
void CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
     9a2:	80 ec       	ldi	r24, 0xC0	; 192
     9a4:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	84 e0       	ldi	r24, 0x04	; 4
     9ac:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
     9b0:	08 95       	ret

000009b2 <CAN_controller_RTS>:
	//Check CANSTAT register
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);

}

void CAN_controller_RTS(uint8_t buffer) {
     9b2:	cf 93       	push	r28
     9b4:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
	switch (buffer) {
     9be:	c1 30       	cpi	r28, 0x01	; 1
     9c0:	41 f0       	breq	.+16     	; 0x9d2 <CAN_controller_RTS+0x20>
     9c2:	18 f0       	brcs	.+6      	; 0x9ca <CAN_controller_RTS+0x18>
     9c4:	c2 30       	cpi	r28, 0x02	; 2
     9c6:	49 f0       	breq	.+18     	; 0x9da <CAN_controller_RTS+0x28>
     9c8:	0b c0       	rjmp	.+22     	; 0x9e0 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     9ca:	81 e8       	ldi	r24, 0x81	; 129
     9cc:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
			break;
     9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     9d2:	82 e8       	ldi	r24, 0x82	; 130
     9d4:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
			break;
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     9da:	84 e8       	ldi	r24, 0x84	; 132
     9dc:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_masterWrite>
			break;
		default: 
			break;			
	}
	SPI_setChipSelect(PB4, 1);
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	84 e0       	ldi	r24, 0x04	; 4
     9e4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SPI_setChipSelect>
}
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	1f 92       	push	r1
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	18 2f       	mov	r17, r24
	
	CAN_controller_reset();
     9fa:	0e 94 cd 04 	call	0x99a	; 0x99a <CAN_controller_reset>
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9fe:	8e e0       	ldi	r24, 0x0E	; 14
     a00:	0e 94 81 04 	call	0x902	; 0x902 <CAN_controller_read>
     a04:	89 83       	std	Y+1, r24	; 0x01
	uint8_t mode_bits = (status & MODE_MASK);
     a06:	89 81       	ldd	r24, Y+1	; 0x01
	
	if (mode_bits != MODE_CONFIG) {
     a08:	80 7e       	andi	r24, 0xE0	; 224
     a0a:	80 38       	cpi	r24, 0x80	; 128
     a0c:	f1 f4       	brne	.+60     	; 0xa4a <CAN_controller_setMode+0x5e>
		//printf("Not in config mode, \t %i\n\r", mode_bits);
		return;
	}
	
	//set mode
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     a0e:	41 2f       	mov	r20, r17
     a10:	4c 60       	ori	r20, 0x0C	; 12
     a12:	6f e0       	ldi	r22, 0x0F	; 15
     a14:	8e ee       	ldi	r24, 0xEE	; 238
     a16:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
	
	//enable interrupts
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	6b e2       	ldi	r22, 0x2B	; 43
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
	
	//receive any type of message, no filter p. 27
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000);
     a24:	40 e6       	ldi	r20, 0x60	; 96
     a26:	60 e6       	ldi	r22, 0x60	; 96
     a28:	80 e6       	ldi	r24, 0x60	; 96
     a2a:	0e 94 af 04 	call	0x95e	; 0x95e <CAN_controller_bitModify>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	21 50       	subi	r18, 0x01	; 1
     a36:	80 40       	sbci	r24, 0x00	; 0
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <CAN_controller_setMode+0x48>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <CAN_controller_setMode+0x52>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <CAN_controller_setMode+0x54>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a40:	8e e0       	ldi	r24, 0x0E	; 14
     a42:	0e 94 81 04 	call	0x902	; 0x902 <CAN_controller_read>
     a46:	89 83       	std	Y+1, r24	; 0x01
	mode_bits = (status & MODE_MASK);
     a48:	89 81       	ldd	r24, Y+1	; 0x01
	if (mode_bits != mode) {
			//printf("Not in correct mode: Mode: %i\n\r", mode_bits);
	}
	//printf("Mode set: %i\n\r", status & MODE_MASK);
}
     a4a:	0f 90       	pop	r0
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	08 95       	ret

00000a54 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 0);
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	1f 92       	push	r1
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62

	SPI_masterInit();
     a5e:	0e 94 9e 0c 	call	0x193c	; 0x193c <SPI_masterInit>

	CAN_controller_setMode(MODE_NORMAL);
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0e 94 f6 04 	call	0x9ec	; 0x9ec <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a68:	8b b7       	in	r24, 0x3b	; 59
     a6a:	80 64       	ori	r24, 0x40	; 64
     a6c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a6e:	85 b7       	in	r24, 0x35	; 53
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a74:	85 b7       	in	r24, 0x35	; 53
     a76:	8e 7f       	andi	r24, 0xFE	; 254
     a78:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a7a:	81 b3       	in	r24, 0x11	; 17
     a7c:	84 70       	andi	r24, 0x04	; 4
     a7e:	81 bb       	out	0x11, r24	; 17
     a80:	2f ef       	ldi	r18, 0xFF	; 255
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	21 50       	subi	r18, 0x01	; 1
     a88:	80 40       	sbci	r24, 0x00	; 0
     a8a:	90 40       	sbci	r25, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <CAN_controller_init+0x32>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <CAN_controller_init+0x3c>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <CAN_controller_init+0x3e>
	
	_delay_ms(200);
	//printf("after write to canctrl\n\r");
	
	//Check CANSTAT register
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a92:	8e e0       	ldi	r24, 0x0E	; 14
     a94:	0e 94 81 04 	call	0x902	; 0x902 <CAN_controller_read>
     a98:	89 83       	std	Y+1, r24	; 0x01

}
     a9a:	0f 90       	pop	r0
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     aa2:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
     aa6:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <highScoresActive>
     aaa:	ec ed       	ldi	r30, 0xDC	; 220
     aac:	f2 e0       	ldi	r31, 0x02	; 2
     aae:	a9 ee       	ldi	r26, 0xE9	; 233
     ab0:	b2 e0       	ldi	r27, 0x02	; 2
     ab2:	81 ee       	ldi	r24, 0xE1	; 225
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	11 92       	st	Z+, r1
     ab8:	1d 92       	st	X+, r1
     aba:	e8 17       	cp	r30, r24
     abc:	f9 07       	cpc	r31, r25
     abe:	d9 f7       	brne	.-10     	; 0xab6 <game_init+0x14>
     ac0:	08 95       	ret

00000ac2 <game_countdown>:
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	1f 92       	push	r1
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	4a e0       	ldi	r20, 0x0A	; 10
     ad2:	be 01       	movw	r22, r28
     ad4:	6f 5f       	subi	r22, 0xFF	; 255
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     ae0:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
     ae4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
     ae8:	02 ee       	ldi	r16, 0xE2	; 226
     aea:	12 e0       	ldi	r17, 0x02	; 2
     aec:	f8 01       	movw	r30, r16
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	02 96       	adiw	r24, 0x02	; 2
     af4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     b06:	86 e0       	ldi	r24, 0x06	; 6
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     b0e:	ff ef       	ldi	r31, 0xFF	; 255
     b10:	2f e7       	ldi	r18, 0x7F	; 127
     b12:	87 e0       	ldi	r24, 0x07	; 7
     b14:	f1 50       	subi	r31, 0x01	; 1
     b16:	20 40       	sbci	r18, 0x00	; 0
     b18:	80 40       	sbci	r24, 0x00	; 0
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <game_countdown+0x52>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <game_countdown+0x5c>
     b1e:	00 00       	nop
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     b28:	9f ef       	ldi	r25, 0xFF	; 255
     b2a:	ef e7       	ldi	r30, 0x7F	; 127
     b2c:	f7 e0       	ldi	r31, 0x07	; 7
     b2e:	91 50       	subi	r25, 0x01	; 1
     b30:	e0 40       	sbci	r30, 0x00	; 0
     b32:	f0 40       	sbci	r31, 0x00	; 0
     b34:	e1 f7       	brne	.-8      	; 0xb2e <game_countdown+0x6c>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <game_countdown+0x76>
     b38:	00 00       	nop
     b3a:	4a e0       	ldi	r20, 0x0A	; 10
     b3c:	be 01       	movw	r22, r28
     b3e:	6f 5f       	subi	r22, 0xFF	; 255
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     b4a:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
     b4e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
     b52:	f8 01       	movw	r30, r16
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	02 96       	adiw	r24, 0x02	; 2
     b5a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     b6c:	86 e0       	ldi	r24, 0x06	; 6
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     b74:	ff ef       	ldi	r31, 0xFF	; 255
     b76:	2f e7       	ldi	r18, 0x7F	; 127
     b78:	87 e0       	ldi	r24, 0x07	; 7
     b7a:	f1 50       	subi	r31, 0x01	; 1
     b7c:	20 40       	sbci	r18, 0x00	; 0
     b7e:	80 40       	sbci	r24, 0x00	; 0
     b80:	e1 f7       	brne	.-8      	; 0xb7a <game_countdown+0xb8>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <game_countdown+0xc2>
     b84:	00 00       	nop
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     b8e:	9f ef       	ldi	r25, 0xFF	; 255
     b90:	ef e7       	ldi	r30, 0x7F	; 127
     b92:	f7 e0       	ldi	r31, 0x07	; 7
     b94:	91 50       	subi	r25, 0x01	; 1
     b96:	e0 40       	sbci	r30, 0x00	; 0
     b98:	f0 40       	sbci	r31, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <game_countdown+0xd2>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <game_countdown+0xdc>
     b9e:	00 00       	nop
     ba0:	4a e0       	ldi	r20, 0x0A	; 10
     ba2:	be 01       	movw	r22, r28
     ba4:	6f 5f       	subi	r22, 0xFF	; 255
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     bb0:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
     bb4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
     bb8:	f8 01       	movw	r30, r16
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	02 96       	adiw	r24, 0x02	; 2
     bc0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     bd2:	86 e0       	ldi	r24, 0x06	; 6
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     bda:	ff ef       	ldi	r31, 0xFF	; 255
     bdc:	2f e7       	ldi	r18, 0x7F	; 127
     bde:	87 e0       	ldi	r24, 0x07	; 7
     be0:	f1 50       	subi	r31, 0x01	; 1
     be2:	20 40       	sbci	r18, 0x00	; 0
     be4:	80 40       	sbci	r24, 0x00	; 0
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <game_countdown+0x11e>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <game_countdown+0x128>
     bea:	00 00       	nop
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     bf4:	9f ef       	ldi	r25, 0xFF	; 255
     bf6:	ef e7       	ldi	r30, 0x7F	; 127
     bf8:	f7 e0       	ldi	r31, 0x07	; 7
     bfa:	91 50       	subi	r25, 0x01	; 1
     bfc:	e0 40       	sbci	r30, 0x00	; 0
     bfe:	f0 40       	sbci	r31, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <game_countdown+0x138>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <game_countdown+0x142>
     c04:	00 00       	nop
     c06:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
     c0a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
     c0e:	f8 01       	movw	r30, r16
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	02 96       	adiw	r24, 0x02	; 2
     c16:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
     c20:	83 ee       	ldi	r24, 0xE3	; 227
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     c28:	87 e1       	ldi	r24, 0x17	; 23
     c2a:	94 e0       	ldi	r25, 0x04	; 4
     c2c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     c30:	ff ef       	ldi	r31, 0xFF	; 255
     c32:	2f e7       	ldi	r18, 0x7F	; 127
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	f1 50       	subi	r31, 0x01	; 1
     c38:	20 40       	sbci	r18, 0x00	; 0
     c3a:	80 40       	sbci	r24, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <game_countdown+0x174>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <game_countdown+0x17e>
     c40:	00 00       	nop
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <music_playNote>
     c4a:	9f ef       	ldi	r25, 0xFF	; 255
     c4c:	ef e7       	ldi	r30, 0x7F	; 127
     c4e:	f7 e0       	ldi	r31, 0x07	; 7
     c50:	91 50       	subi	r25, 0x01	; 1
     c52:	e0 40       	sbci	r30, 0x00	; 0
     c54:	f0 40       	sbci	r31, 0x00	; 0
     c56:	e1 f7       	brne	.-8      	; 0xc50 <game_countdown+0x18e>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <game_countdown+0x198>
     c5a:	00 00       	nop
     c5c:	0f 90       	pop	r0
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <game_initialCANMessage>:
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	2b 97       	sbiw	r28, 0x0b	; 11
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	9a 87       	std	Y+10, r25	; 0x0a
     c82:	89 87       	std	Y+9, r24	; 0x09
     c84:	1b 86       	std	Y+11, r1	; 0x0b
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CAN_transmit_message>
     c8e:	2b 96       	adiw	r28, 0x0b	; 11
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <game_newgame>:
     ca0:	f8 94       	cli
     ca2:	0e 94 61 05 	call	0xac2	; 0xac2 <game_countdown>
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <gameActive>
     cac:	ee ee       	ldi	r30, 0xEE	; 238
     cae:	f2 e0       	ldi	r31, 0x02	; 2
     cb0:	8a e0       	ldi	r24, 0x0A	; 10
     cb2:	80 83       	st	Z, r24
     cb4:	12 82       	std	Z+2, r1	; 0x02
     cb6:	8e e1       	ldi	r24, 0x1E	; 30
     cb8:	81 83       	std	Z+1, r24	; 0x01
     cba:	0e 94 34 06 	call	0xc68	; 0xc68 <game_initialCANMessage>
     cbe:	78 94       	sei
     cc0:	08 95       	ret

00000cc2 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     cc2:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <flag>
     cc6:	88 23       	and	r24, r24
     cc8:	99 f0       	breq	.+38     	; 0xcf0 <game_recieveGameData+0x2e>
		//Handle the message
		cli();
     cca:	f8 94       	cli
		//printf("Message received");
		flag=0;
     ccc:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <flag>
		CAN_receiveMessage(&received_message);
     cd0:	83 ef       	ldi	r24, 0xF3	; 243
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 15 04 	call	0x82a	; 0x82a <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     cd8:	0e 94 57 03 	call	0x6ae	; 0x6ae <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     cdc:	a3 ef       	ldi	r26, 0xF3	; 243
     cde:	b2 e0       	ldi	r27, 0x02	; 2
     ce0:	8c 91       	ld	r24, X
     ce2:	ee ee       	ldi	r30, 0xEE	; 238
     ce4:	f2 e0       	ldi	r31, 0x02	; 2
     ce6:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     ce8:	11 96       	adiw	r26, 0x01	; 1
     cea:	8c 91       	ld	r24, X
     cec:	82 83       	std	Z+2, r24	; 0x02
		sei();
     cee:	78 94       	sei
     cf0:	08 95       	ret

00000cf2 <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <game_updateOled+0xa>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <game_updateOled+0xc>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     d04:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
	oled_home();
     d08:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d0c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <currentMenu>
     d10:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <currentMenu+0x1>
     d14:	02 96       	adiw	r24, 0x02	; 2
     d16:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
	switch(gameID) {
     d20:	11 30       	cpi	r17, 0x01	; 1
     d22:	19 f0       	breq	.+6      	; 0xd2a <game_updateOled+0x38>
     d24:	12 30       	cpi	r17, 0x02	; 2
     d26:	49 f1       	breq	.+82     	; 0xd7a <game_updateOled+0x88>
     d28:	39 c0       	rjmp	.+114    	; 0xd9c <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     d2a:	86 ee       	ldi	r24, 0xE6	; 230
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
			itoa(gameData.score,score_string,10);
     d32:	0e ee       	ldi	r16, 0xEE	; 238
     d34:	12 e0       	ldi	r17, 0x02	; 2
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d36:	f8 01       	movw	r30, r16
     d38:	80 81       	ld	r24, Z
     d3a:	4a e0       	ldi	r20, 0x0A	; 10
     d3c:	be 01       	movw	r22, r28
     d3e:	6f 5f       	subi	r22, 0xFF	; 255
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
			oled_print(score_string);
     d48:	ce 01       	movw	r24, r28
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
			oled_gotoLine(5);
     d50:	85 e0       	ldi	r24, 0x05	; 5
     d52:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
			oled_print("Time: ");
     d56:	8e ee       	ldi	r24, 0xEE	; 238
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     d5e:	f8 01       	movw	r30, r16
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	4a e0       	ldi	r20, 0x0A	; 10
     d64:	be 01       	movw	r22, r28
     d66:	6d 5f       	subi	r22, 0xFD	; 253
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d70:	ce 01       	movw	r24, r28
     d72:	03 96       	adiw	r24, 0x03	; 3
     d74:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
			break;
     d78:	11 c0       	rjmp	.+34     	; 0xd9c <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d7a:	85 ef       	ldi	r24, 0xF5	; 245
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     d82:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <gameData+0x2>
     d86:	4a e0       	ldi	r20, 0x0A	; 10
     d88:	be 01       	movw	r22, r28
     d8a:	6d 5f       	subi	r22, 0xFD	; 253
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d94:	ce 01       	movw	r24, r28
     d96:	03 96       	adiw	r24, 0x03	; 3
     d98:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
			break;

	}
	
}
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	08 95       	ret

00000dae <game_sendStop>:

void game_sendStop() {
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	2b 97       	sbiw	r28, 0x0b	; 11
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9a 87       	std	Y+10, r25	; 0x0a
     dc8:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     dca:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CAN_transmit_message>
}
     dd4:	2b 96       	adiw	r28, 0x0b	; 11
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <game_finished>:
void game_finished(uint8_t gameID) {
     de6:	cf 93       	push	r28
     de8:	c8 2f       	mov	r28, r24
	cli();
     dea:	f8 94       	cli
	game_sendStop();
     dec:	0e 94 d7 06 	call	0xdae	; 0xdae <game_sendStop>
	oled_reset();
     df0:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
	oled_home();
     df4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
	oled_gotoLine(3);
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
	oled_print("Game over");
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
	oled_gotoLine(4);
     e06:	84 e0       	ldi	r24, 0x04	; 4
     e08:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
	oled_print("Maybe HS?");
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
	music_gameOver();
     e14:	0e 94 96 08 	call	0x112c	; 0x112c <music_gameOver>
	
	gameActive=0;
     e18:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
	sei();
     e1c:	78 94       	sei
	menu_init();
     e1e:	0e 94 84 0a 	call	0x1508	; 0x1508 <menu_init>
	//menu_printCurrentMenu();
	switch (gameID) {
     e22:	c1 30       	cpi	r28, 0x01	; 1
     e24:	51 f0       	breq	.+20     	; 0xe3a <game_finished+0x54>
     e26:	c2 30       	cpi	r28, 0x02	; 2
     e28:	09 f0       	breq	.+2      	; 0xe2c <game_finished+0x46>
     e2a:	50 c0       	rjmp	.+160    	; 0xecc <game_finished+0xe6>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e2c:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <gameData+0x2>
     e30:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <highScores2>
     e34:	83 17       	cp	r24, r19
     e36:	48 f5       	brcc	.+82     	; 0xe8a <game_finished+0xa4>
     e38:	33 c0       	rjmp	.+102    	; 0xea0 <game_finished+0xba>
	menu_init();
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e3a:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <gameData>
     e3e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <highScores>
     e42:	83 17       	cp	r24, r19
     e44:	58 f0       	brcs	.+22     	; 0xe5c <game_finished+0x76>
     e46:	ed ed       	ldi	r30, 0xDD	; 221
     e48:	f2 e0       	ldi	r31, 0x02	; 2
	sei();
	menu_init();
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e4e:	21 91       	ld	r18, Z+
     e50:	23 17       	cp	r18, r19
     e52:	b0 f4       	brcc	.+44     	; 0xe80 <game_finished+0x9a>
					for (int a = 4; a>i; a--) {
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	91 05       	cpc	r25, r1
     e58:	1c f0       	brlt	.+6      	; 0xe60 <game_finished+0x7a>
     e5a:	0d c0       	rjmp	.+26     	; 0xe76 <game_finished+0x90>
	menu_init();
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	e0 ee       	ldi	r30, 0xE0	; 224
     e62:	f2 e0       	ldi	r31, 0x02	; 2
     e64:	44 e0       	ldi	r20, 0x04	; 4
     e66:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e68:	41 50       	subi	r20, 0x01	; 1
     e6a:	51 09       	sbc	r21, r1
     e6c:	22 91       	ld	r18, -Z
     e6e:	21 83       	std	Z+1, r18	; 0x01
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e70:	84 17       	cp	r24, r20
     e72:	95 07       	cpc	r25, r21
     e74:	cc f3       	brlt	.-14     	; 0xe68 <game_finished+0x82>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e76:	fc 01       	movw	r30, r24
     e78:	e4 52       	subi	r30, 0x24	; 36
     e7a:	fd 4f       	sbci	r31, 0xFD	; 253
     e7c:	30 83       	st	Z, r19
					break;
     e7e:	26 c0       	rjmp	.+76     	; 0xecc <game_finished+0xe6>
	sei();
	menu_init();
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	85 30       	cpi	r24, 0x05	; 5
     e84:	91 05       	cpc	r25, r1
     e86:	19 f7       	brne	.-58     	; 0xe4e <game_finished+0x68>
     e88:	21 c0       	rjmp	.+66     	; 0xecc <game_finished+0xe6>
     e8a:	ea ee       	ldi	r30, 0xEA	; 234
     e8c:	f2 e0       	ldi	r31, 0x02	; 2
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     e92:	21 91       	ld	r18, Z+
     e94:	23 17       	cp	r18, r19
     e96:	b0 f4       	brcc	.+44     	; 0xec4 <game_finished+0xde>
					for (int a = 4; a>i; a--) {
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	91 05       	cpc	r25, r1
     e9c:	1c f0       	brlt	.+6      	; 0xea4 <game_finished+0xbe>
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <game_finished+0xd4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	ed ee       	ldi	r30, 0xED	; 237
     ea6:	f2 e0       	ldi	r31, 0x02	; 2
     ea8:	44 e0       	ldi	r20, 0x04	; 4
     eaa:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     eac:	41 50       	subi	r20, 0x01	; 1
     eae:	51 09       	sbc	r21, r1
     eb0:	22 91       	ld	r18, -Z
     eb2:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     eb4:	84 17       	cp	r24, r20
     eb6:	95 07       	cpc	r25, r21
     eb8:	cc f3       	brlt	.-14     	; 0xeac <game_finished+0xc6>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     eba:	fc 01       	movw	r30, r24
     ebc:	e7 51       	subi	r30, 0x17	; 23
     ebe:	fd 4f       	sbci	r31, 0xFD	; 253
     ec0:	30 83       	st	Z, r19
					break;
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <game_finished+0xe6>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	85 30       	cpi	r24, 0x05	; 5
     ec8:	91 05       	cpc	r25, r1
     eca:	19 f7       	brne	.-58     	; 0xe92 <game_finished+0xac>
		
	}
	
	
	
}
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <game_play>:
void game_play(uint8_t gameID)
{
     ed0:	cf 93       	push	r28
     ed2:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     ed4:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <gameActive>
     ed8:	81 11       	cpse	r24, r1
     eda:	0d c0       	rjmp	.+26     	; 0xef6 <game_play+0x26>
	{
		game_sendStop();
     edc:	0e 94 d7 06 	call	0xdae	; 0xdae <game_sendStop>
     ee0:	2f ef       	ldi	r18, 0xFF	; 255
     ee2:	8f e7       	ldi	r24, 0x7F	; 127
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	21 50       	subi	r18, 0x01	; 1
     ee8:	80 40       	sbci	r24, 0x00	; 0
     eea:	90 40       	sbci	r25, 0x00	; 0
     eec:	e1 f7       	brne	.-8      	; 0xee6 <game_play+0x16>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <game_play+0x20>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <game_play+0x22>
		_delay_ms(100);
		game_newgame();	
     ef2:	0e 94 50 06 	call	0xca0	; 0xca0 <game_newgame>
	}
	if (buttons.right_button) {
     ef6:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <buttons+0x1>
     efa:	88 23       	and	r24, r24
     efc:	21 f0       	breq	.+8      	; 0xf06 <game_play+0x36>
		gameActive = 0;
     efe:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
		menu_init();
     f02:	0e 94 84 0a 	call	0x1508	; 0x1508 <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     f06:	0e 94 4d 04 	call	0x89a	; 0x89a <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     f0a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <game_recieveGameData>
	game_updateOled(gameID);
     f0e:	8c 2f       	mov	r24, r28
     f10:	0e 94 79 06 	call	0xcf2	; 0xcf2 <game_updateOled>
	switch (gameID) {
     f14:	c1 30       	cpi	r28, 0x01	; 1
     f16:	19 f0       	breq	.+6      	; 0xf1e <game_play+0x4e>
     f18:	c2 30       	cpi	r28, 0x02	; 2
     f1a:	49 f0       	breq	.+18     	; 0xf2e <game_play+0x5e>
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <game_play+0x6c>
		case 1:
			if (gameData.playtime==TIMELIMIT) {
     f1e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <gameData+0x2>
     f22:	8e 31       	cpi	r24, 0x1E	; 30
     f24:	59 f4       	brne	.+22     	; 0xf3c <game_play+0x6c>
				game_finished(gameID);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	0e 94 f3 06 	call	0xde6	; 0xde6 <game_finished>
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <game_play+0x6c>
			}
			break;
		case 2:
			if (gameData.score < INITSCORE) {
     f2e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <gameData>
     f32:	8a 30       	cpi	r24, 0x0A	; 10
     f34:	18 f4       	brcc	.+6      	; 0xf3c <game_play+0x6c>
				game_finished(gameID);
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	0e 94 f3 06 	call	0xde6	; 0xde6 <game_finished>
			}
			break;
	}
	
	
}
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f40:	af 92       	push	r10
     f42:	bf 92       	push	r11
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	00 d0       	rcall	.+0      	; 0xf56 <game_displayHighscores+0x16>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	08 2f       	mov	r16, r24
	highScoresActive= 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <highScoresActive>
	oled_reset();
     f62:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
	oled_home();
     f66:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f6a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <currentMenu>
     f6e:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <currentMenu+0x1>
     f72:	02 96       	adiw	r24, 0x02	; 2
     f74:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
     f78:	0f 2e       	mov	r0, r31
     f7a:	fc ed       	ldi	r31, 0xDC	; 220
     f7c:	af 2e       	mov	r10, r31
     f7e:	f2 e0       	ldi	r31, 0x02	; 2
     f80:	bf 2e       	mov	r11, r31
     f82:	f0 2d       	mov	r31, r0
     f84:	0f 2e       	mov	r0, r31
     f86:	f9 ee       	ldi	r31, 0xE9	; 233
     f88:	cf 2e       	mov	r12, r31
     f8a:	f2 e0       	ldi	r31, 0x02	; 2
     f8c:	df 2e       	mov	r13, r31
     f8e:	f0 2d       	mov	r31, r0
     f90:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f92:	e1 2c       	mov	r14, r1
     f94:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f96:	81 2f       	mov	r24, r17
     f98:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
		oled_print("Score ");
     f9c:	84 e1       	ldi	r24, 0x14	; 20
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
		char num[2];
		itoa(i+1,num,10);
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	e8 1a       	sub	r14, r24
     fa8:	f8 0a       	sbc	r15, r24
     faa:	4a e0       	ldi	r20, 0x0A	; 10
     fac:	be 01       	movw	r22, r28
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	c7 01       	movw	r24, r14
     fb4:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
		oled_print(num);
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
		oled_print(": ");
     fc0:	82 ef       	ldi	r24, 0xF2	; 242
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
		switch (gameID) {
     fc8:	01 30       	cpi	r16, 0x01	; 1
     fca:	19 f0       	breq	.+6      	; 0xfd2 <game_displayHighscores+0x92>
     fcc:	02 30       	cpi	r16, 0x02	; 2
     fce:	59 f0       	breq	.+22     	; 0xfe6 <game_displayHighscores+0xa6>
     fd0:	13 c0       	rjmp	.+38     	; 0xff8 <game_displayHighscores+0xb8>
     fd2:	f5 01       	movw	r30, r10
     fd4:	80 81       	ld	r24, Z
     fd6:	4a e0       	ldi	r20, 0x0A	; 10
     fd8:	be 01       	movw	r22, r28
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     fe4:	09 c0       	rjmp	.+18     	; 0xff8 <game_displayHighscores+0xb8>
     fe6:	f6 01       	movw	r30, r12
     fe8:	80 81       	ld	r24, Z
     fea:	4a e0       	ldi	r20, 0x0A	; 10
     fec:	be 01       	movw	r22, r28
     fee:	6f 5f       	subi	r22, 0xFF	; 255
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
    1000:	1f 5f       	subi	r17, 0xFF	; 255
    1002:	ff ef       	ldi	r31, 0xFF	; 255
    1004:	af 1a       	sub	r10, r31
    1006:	bf 0a       	sbc	r11, r31
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	c8 1a       	sub	r12, r24
    100c:	d8 0a       	sbc	r13, r24
	highScoresActive= 1;
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
    100e:	18 30       	cpi	r17, 0x08	; 8
    1010:	11 f6       	brne	.-124    	; 0xf96 <game_displayHighscores+0x56>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	bf 90       	pop	r11
    1028:	af 90       	pop	r10
    102a:	08 95       	ret

0000102c <music_playRick>:
	 30, 10, 20, 20,
	 20,40, 80, 40
};


void music_playRick() {
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
	cli();
    1044:	f8 94       	cli
	oled_home();
    1046:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
	oled_reset();
    104a:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
    104e:	0d ee       	ldi	r16, 0xED	; 237
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	0f 2e       	mov	r0, r31
    1054:	fe e9       	ldi	r31, 0x9E	; 158
    1056:	ef 2e       	mov	r14, r31
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	ff 2e       	mov	r15, r31
    105c:	f0 2d       	mov	r31, r0
    105e:	c6 e0       	ldi	r28, 0x06	; 6
    1060:	d1 e0       	ldi	r29, 0x01	; 1
    1062:	0f 2e       	mov	r0, r31
    1064:	f9 e2       	ldi	r31, 0x29	; 41
    1066:	cf 2e       	mov	r12, r31
    1068:	f2 e0       	ldi	r31, 0x02	; 2
    106a:	df 2e       	mov	r13, r31
    106c:	f0 2d       	mov	r31, r0
    106e:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1070:	0f 2e       	mov	r0, r31
    1072:	f4 e1       	ldi	r31, 0x14	; 20
    1074:	af 2e       	mov	r10, r31
    1076:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1078:	b1 10       	cpse	r11, r1
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <music_playRick+0x54>
			oled_reset();
    107c:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
    1080:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1082:	e8 81       	ld	r30, Y
    1084:	f9 81       	ldd	r31, Y+1	; 0x01
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	41 f0       	breq	.+16     	; 0x109c <music_playRick+0x70>
			oled_gotoLine(line);
    108c:	8b 2d       	mov	r24, r11
    108e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
			line++;
    1092:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    1094:	88 81       	ld	r24, Y
    1096:	99 81       	ldd	r25, Y+1	; 0x01
    1098:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    109c:	d4 01       	movw	r26, r8
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	22 96       	adiw	r28, 0x02	; 2
    10a4:	01 90       	ld	r0, Z+
    10a6:	00 20       	and	r0, r0
    10a8:	e9 f7       	brne	.-6      	; 0x10a4 <music_playRick+0x78>
    10aa:	32 97       	sbiw	r30, 0x02	; 2
    10ac:	80 81       	ld	r24, Z
    10ae:	8e 32       	cpi	r24, 0x2E	; 46
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <music_playRick+0x88>
			
			line = 0;
    10b2:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    10b4:	f8 01       	movw	r30, r16
    10b6:	65 91       	lpm	r22, Z+
    10b8:	74 91       	lpm	r23, Z
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    10c2:	f7 01       	movw	r30, r14
    10c4:	84 91       	lpm	r24, Z
    10c6:	a8 9e       	mul	r10, r24
    10c8:	c0 01       	movw	r24, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	09 2e       	mov	r0, r25
    10ce:	00 0c       	add	r0, r0
    10d0:	aa 0b       	sbc	r26, r26
    10d2:	bb 0b       	sbc	r27, r27
		while (duration--) {
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	a1 05       	cpc	r26, r1
    10d8:	b1 05       	cpc	r27, r1
    10da:	51 f0       	breq	.+20     	; 0x10f0 <music_playRick+0xc4>
    10dc:	ec ec       	ldi	r30, 0xCC	; 204
    10de:	f4 e0       	ldi	r31, 0x04	; 4
    10e0:	31 97       	sbiw	r30, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <music_playRick+0xb4>
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <music_playRick+0xba>
    10e6:	00 00       	nop
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	a1 09       	sbc	r26, r1
    10ec:	b1 09       	sbc	r27, r1
    10ee:	b1 f7       	brne	.-20     	; 0x10dc <music_playRick+0xb0>
    10f0:	0c 5f       	subi	r16, 0xFC	; 252
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	ff ef       	ldi	r31, 0xFF	; 255
    10f6:	ef 1a       	sub	r14, r31
    10f8:	ff 0a       	sbc	r15, r31
void music_playRick() {
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    10fa:	0c 15       	cp	r16, r12
    10fc:	1d 05       	cpc	r17, r13
    10fe:	09 f0       	breq	.+2      	; 0x1102 <music_playRick+0xd6>
    1100:	bb cf       	rjmp	.-138    	; 0x1078 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	cb 01       	movw	r24, r22
    1108:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
	menu_init();
    110c:	0e 94 84 0a 	call	0x1508	; 0x1508 <menu_init>

	sei();
    1110:	78 94       	sei
	

}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	bf 90       	pop	r11
    1124:	af 90       	pop	r10
    1126:	9f 90       	pop	r9
    1128:	8f 90       	pop	r8
    112a:	08 95       	ret

0000112c <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    112c:	6b e0       	ldi	r22, 0x0B	; 11
    112e:	72 e0       	ldi	r23, 0x02	; 2
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    1138:	2f ef       	ldi	r18, 0xFF	; 255
    113a:	8f e7       	ldi	r24, 0x7F	; 127
    113c:	97 e0       	ldi	r25, 0x07	; 7
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	80 40       	sbci	r24, 0x00	; 0
    1142:	90 40       	sbci	r25, 0x00	; 0
    1144:	e1 f7       	brne	.-8      	; 0x113e <music_gameOver+0x12>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <music_gameOver+0x1c>
    1148:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    114a:	68 e8       	ldi	r22, 0x88	; 136
    114c:	71 e0       	ldi	r23, 0x01	; 1
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	8f e7       	ldi	r24, 0x7F	; 127
    115a:	97 e0       	ldi	r25, 0x07	; 7
    115c:	21 50       	subi	r18, 0x01	; 1
    115e:	80 40       	sbci	r24, 0x00	; 0
    1160:	90 40       	sbci	r25, 0x00	; 0
    1162:	e1 f7       	brne	.-8      	; 0x115c <music_gameOver+0x30>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <music_gameOver+0x3a>
    1166:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    1168:	67 e3       	ldi	r22, 0x37	; 55
    116a:	71 e0       	ldi	r23, 0x01	; 1
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    1174:	2f ef       	ldi	r18, 0xFF	; 255
    1176:	8f e7       	ldi	r24, 0x7F	; 127
    1178:	97 e0       	ldi	r25, 0x07	; 7
    117a:	21 50       	subi	r18, 0x01	; 1
    117c:	80 40       	sbci	r24, 0x00	; 0
    117e:	90 40       	sbci	r25, 0x00	; 0
    1180:	e1 f7       	brne	.-8      	; 0x117a <music_gameOver+0x4e>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <music_gameOver+0x58>
    1184:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    1186:	66 e0       	ldi	r22, 0x06	; 6
    1188:	71 e0       	ldi	r23, 0x01	; 1
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    1192:	2f ef       	ldi	r18, 0xFF	; 255
    1194:	8f e7       	ldi	r24, 0x7F	; 127
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	21 50       	subi	r18, 0x01	; 1
    119a:	80 40       	sbci	r24, 0x00	; 0
    119c:	90 40       	sbci	r25, 0x00	; 0
    119e:	e1 f7       	brne	.-8      	; 0x1198 <music_gameOver+0x6c>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <music_gameOver+0x76>
    11a2:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	cb 01       	movw	r24, r22
    11aa:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    11ae:	08 95       	ret

000011b0 <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    11b0:	bc 01       	movw	r22, r24
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 ed 08 	call	0x11da	; 0x11da <pwm_setFreq>
    11ba:	08 95       	ret

000011bc <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    11bc:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    11c2:	80 e8       	ldi	r24, 0x80	; 128
    11c4:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    11c6:	83 b7       	in	r24, 0x33	; 51
    11c8:	88 60       	ori	r24, 0x08	; 8
    11ca:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    11cc:	83 b7       	in	r24, 0x33	; 51
    11ce:	80 61       	ori	r24, 0x10	; 16
    11d0:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    11d2:	83 b7       	in	r24, 0x33	; 51
    11d4:	88 7f       	andi	r24, 0xF8	; 248
    11d6:	83 bf       	out	0x33, r24	; 51
    11d8:	08 95       	ret

000011da <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    if (freq == 0) {
    11de:	67 2b       	or	r22, r23
    11e0:	68 2b       	or	r22, r24
    11e2:	69 2b       	or	r22, r25
    11e4:	21 f4       	brne	.+8      	; 0x11ee <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11e6:	83 b7       	in	r24, 0x33	; 51
    11e8:	88 7f       	andi	r24, 0xF8	; 248
    11ea:	83 bf       	out	0x33, r24	; 51
        return;
    11ec:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e8       	ldi	r23, 0x80	; 128
    11f2:	85 e2       	ldi	r24, 0x25	; 37
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__udivmodsi4>
    11fa:	da 01       	movw	r26, r20
    11fc:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    11fe:	21 30       	cpi	r18, 0x01	; 1
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	36 07       	cpc	r19, r22
    1204:	41 05       	cpc	r20, r1
    1206:	51 05       	cpc	r21, r1
    1208:	a8 f1       	brcs	.+106    	; 0x1274 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    120a:	68 94       	set
    120c:	12 f8       	bld	r1, 2
    120e:	b6 95       	lsr	r27
    1210:	a7 95       	ror	r26
    1212:	97 95       	ror	r25
    1214:	87 95       	ror	r24
    1216:	16 94       	lsr	r1
    1218:	d1 f7       	brne	.-12     	; 0x120e <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	96 07       	cpc	r25, r22
    1220:	a1 05       	cpc	r26, r1
    1222:	b1 05       	cpc	r27, r1
    1224:	48 f1       	brcs	.+82     	; 0x1278 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    1226:	da 01       	movw	r26, r20
    1228:	c9 01       	movw	r24, r18
    122a:	68 94       	set
    122c:	15 f8       	bld	r1, 5
    122e:	b6 95       	lsr	r27
    1230:	a7 95       	ror	r26
    1232:	97 95       	ror	r25
    1234:	87 95       	ror	r24
    1236:	16 94       	lsr	r1
    1238:	d1 f7       	brne	.-12     	; 0x122e <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	96 07       	cpc	r25, r22
    1240:	a1 05       	cpc	r26, r1
    1242:	b1 05       	cpc	r27, r1
    1244:	d8 f0       	brcs	.+54     	; 0x127c <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    1246:	bb 27       	eor	r27, r27
    1248:	a5 2f       	mov	r26, r21
    124a:	94 2f       	mov	r25, r20
    124c:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	96 07       	cpc	r25, r22
    1254:	a1 05       	cpc	r26, r1
    1256:	b1 05       	cpc	r27, r1
    1258:	98 f0       	brcs	.+38     	; 0x1280 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    125a:	da 01       	movw	r26, r20
    125c:	c9 01       	movw	r24, r18
    125e:	07 2e       	mov	r0, r23
    1260:	7a e0       	ldi	r23, 0x0A	; 10
    1262:	b6 95       	lsr	r27
    1264:	a7 95       	ror	r26
    1266:	97 95       	ror	r25
    1268:	87 95       	ror	r24
    126a:	7a 95       	dec	r23
    126c:	d1 f7       	brne	.-12     	; 0x1262 <pwm_setFreq+0x88>
    126e:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    1270:	35 e0       	ldi	r19, 0x05	; 5
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    1274:	31 e0       	ldi	r19, 0x01	; 1
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    1278:	32 e0       	ldi	r19, 0x02	; 2
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    127c:	33 e0       	ldi	r19, 0x03	; 3
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    1280:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1282:	23 b7       	in	r18, 0x33	; 51
    1284:	28 7f       	andi	r18, 0xF8	; 248
    1286:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    1288:	23 b7       	in	r18, 0x33	; 51
    128a:	23 2b       	or	r18, r19
    128c:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    128e:	81 50       	subi	r24, 0x01	; 1
    1290:	81 bf       	out	0x31, r24	; 49
    1292:	08 95       	ret

00001294 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    1294:	85 b7       	in	r24, 0x35	; 53
    1296:	8f 7e       	andi	r24, 0xEF	; 239
    1298:	85 bf       	out	0x35, r24	; 53
    129a:	84 b7       	in	r24, 0x34	; 52
    129c:	8f 7d       	andi	r24, 0xDF	; 223
    129e:	84 bf       	out	0x34, r24	; 52
    12a0:	86 b7       	in	r24, 0x36	; 54
    12a2:	8f 77       	andi	r24, 0x7F	; 127
    12a4:	86 bf       	out	0x36, r24	; 54
    12a6:	08 95       	ret

000012a8 <sleep_now>:

void sleep_now() {
	
	
	// Put the device to sleep:
	sleep_mode();
    12a8:	85 b7       	in	r24, 0x35	; 53
    12aa:	80 62       	ori	r24, 0x20	; 32
    12ac:	85 bf       	out	0x35, r24	; 53
    12ae:	88 95       	sleep
    12b0:	85 b7       	in	r24, 0x35	; 53
    12b2:	8f 7d       	andi	r24, 0xDF	; 223
    12b4:	85 bf       	out	0x35, r24	; 53
    12b6:	08 95       	ret

000012b8 <joystick_init>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystick_init() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12be:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12c8:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <joystickOffsetY>
    12cc:	08 95       	ret

000012ce <joystick_readPosition>:
}
void joystick_readPosition() {
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12e0:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12e8:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    12ea:	60 91 ff 02 	lds	r22, 0x02FF	; 0x8002ff <joystickOffsetX>
    12ee:	c6 17       	cp	r28, r22
    12f0:	80 f4       	brcc	.+32     	; 0x1312 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	2c 2f       	mov	r18, r28
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	26 1b       	sub	r18, r22
    12fa:	37 0b       	sbc	r19, r23
    12fc:	44 e6       	ldi	r20, 0x64	; 100
    12fe:	42 9f       	mul	r20, r18
    1300:	c0 01       	movw	r24, r0
    1302:	43 9f       	mul	r20, r19
    1304:	90 0d       	add	r25, r0
    1306:	11 24       	eor	r1, r1
    1308:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divmodhi4>
    130c:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <joystick_pos>
    1310:	14 c0       	rjmp	.+40     	; 0x133a <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    1312:	46 2f       	mov	r20, r22
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	2c 2f       	mov	r18, r28
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	24 1b       	sub	r18, r20
    131c:	35 0b       	sbc	r19, r21
    131e:	64 e6       	ldi	r22, 0x64	; 100
    1320:	62 9f       	mul	r22, r18
    1322:	c0 01       	movw	r24, r0
    1324:	63 9f       	mul	r22, r19
    1326:	90 0d       	add	r25, r0
    1328:	11 24       	eor	r1, r1
    132a:	6f ef       	ldi	r22, 0xFF	; 255
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	64 1b       	sub	r22, r20
    1330:	75 0b       	sbc	r23, r21
    1332:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divmodhi4>
    1336:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    133a:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <joystickOffsetY>
    133e:	e2 17       	cp	r30, r18
    1340:	88 f4       	brcc	.+34     	; 0x1364 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1342:	62 2f       	mov	r22, r18
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	4e 2f       	mov	r20, r30
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	46 1b       	sub	r20, r22
    134c:	57 0b       	sbc	r21, r23
    134e:	24 e6       	ldi	r18, 0x64	; 100
    1350:	24 9f       	mul	r18, r20
    1352:	c0 01       	movw	r24, r0
    1354:	25 9f       	mul	r18, r21
    1356:	90 0d       	add	r25, r0
    1358:	11 24       	eor	r1, r1
    135a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divmodhi4>
    135e:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <joystick_pos+0x1>
    1362:	13 c0       	rjmp	.+38     	; 0x138a <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	4e 2f       	mov	r20, r30
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	42 1b       	sub	r20, r18
    136c:	53 0b       	sbc	r21, r19
    136e:	64 e6       	ldi	r22, 0x64	; 100
    1370:	64 9f       	mul	r22, r20
    1372:	c0 01       	movw	r24, r0
    1374:	65 9f       	mul	r22, r21
    1376:	90 0d       	add	r25, r0
    1378:	11 24       	eor	r1, r1
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	62 1b       	sub	r22, r18
    1380:	73 0b       	sbc	r23, r19
    1382:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divmodhi4>
    1386:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    138a:	c8 ed       	ldi	r28, 0xD8	; 216
    138c:	d2 e0       	ldi	r29, 0x02	; 2
    138e:	68 81       	ld	r22, Y
    1390:	06 2e       	mov	r0, r22
    1392:	00 0c       	add	r0, r0
    1394:	77 0b       	sbc	r23, r23
    1396:	88 0b       	sbc	r24, r24
    1398:	99 0b       	sbc	r25, r25
    139a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__floatsisf>
    139e:	6b 01       	movw	r12, r22
    13a0:	7c 01       	movw	r14, r24
    13a2:	69 81       	ldd	r22, Y+1	; 0x01
    13a4:	06 2e       	mov	r0, r22
    13a6:	00 0c       	add	r0, r0
    13a8:	77 0b       	sbc	r23, r23
    13aa:	88 0b       	sbc	r24, r24
    13ac:	99 0b       	sbc	r25, r25
    13ae:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__floatsisf>
    13b2:	a7 01       	movw	r20, r14
    13b4:	96 01       	movw	r18, r12
    13b6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <atan2>
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	44 eb       	ldi	r20, 0xB4	; 180
    13c0:	53 e4       	ldi	r21, 0x43	; 67
    13c2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__mulsf3>
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__mulsf3>
    13d2:	23 ec       	ldi	r18, 0xC3	; 195
    13d4:	35 ef       	ldi	r19, 0xF5	; 245
    13d6:	48 e4       	ldi	r20, 0x48	; 72
    13d8:	50 e4       	ldi	r21, 0x40	; 64
    13da:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3>
    13de:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__fixsfsi>
    13e2:	7b 83       	std	Y+3, r23	; 0x03
    13e4:	6a 83       	std	Y+2, r22	; 0x02
}
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	08 95       	ret

000013f4 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    13f4:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    13f6:	80 81       	ld	r24, Z
    13f8:	94 e0       	ldi	r25, 0x04	; 4
    13fa:	98 0f       	add	r25, r24
    13fc:	99 30       	cpi	r25, 0x09	; 9
    13fe:	20 f4       	brcc	.+8      	; 0x1408 <joystick_getDirection+0x14>
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	9c 5f       	subi	r25, 0xFC	; 252
    1404:	99 30       	cpi	r25, 0x09	; 9
    1406:	90 f0       	brcs	.+36     	; 0x142c <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    1408:	85 30       	cpi	r24, 0x05	; 5
    140a:	2c f0       	brlt	.+10     	; 0x1416 <joystick_getDirection+0x22>
    140c:	81 81       	ldd	r24, Z+1	; 0x01
    140e:	8f 5c       	subi	r24, 0xCF	; 207
    1410:	83 36       	cpi	r24, 0x63	; 99
    1412:	38 f4       	brcc	.+14     	; 0x1422 <joystick_getDirection+0x2e>
    1414:	0d c0       	rjmp	.+26     	; 0x1430 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    1416:	8c 3f       	cpi	r24, 0xFC	; 252
    1418:	24 f4       	brge	.+8      	; 0x1422 <joystick_getDirection+0x2e>
    141a:	81 81       	ldd	r24, Z+1	; 0x01
    141c:	8f 5c       	subi	r24, 0xCF	; 207
    141e:	83 36       	cpi	r24, 0x63	; 99
    1420:	48 f0       	brcs	.+18     	; 0x1434 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    1422:	81 81       	ldd	r24, Z+1	; 0x01
    1424:	8c 3f       	cpi	r24, 0xFC	; 252
    1426:	44 f0       	brlt	.+16     	; 0x1438 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    1438:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    143a:	08 95       	ret

0000143c <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    143c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    1440:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <currentMenu+0x3>
    1444:	94 30       	cpi	r25, 0x04	; 4
    1446:	09 f0       	breq	.+2      	; 0x144a <navigateMenu+0xe>
    1448:	5c c0       	rjmp	.+184    	; 0x1502 <navigateMenu+0xc6>
			switch (dir) {
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	e1 f1       	breq	.+120    	; 0x14c6 <navigateMenu+0x8a>
    144e:	60 f1       	brcs	.+88     	; 0x14a8 <navigateMenu+0x6c>
    1450:	82 30       	cpi	r24, 0x02	; 2
    1452:	c9 f0       	breq	.+50     	; 0x1486 <navigateMenu+0x4a>
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	09 f0       	breq	.+2      	; 0x145a <navigateMenu+0x1e>
    1458:	54 c0       	rjmp	.+168    	; 0x1502 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    145a:	e2 ee       	ldi	r30, 0xE2	; 226
    145c:	f2 e0       	ldi	r31, 0x02	; 2
    145e:	92 81       	ldd	r25, Z+2	; 0x02
    1460:	49 2f       	mov	r20, r25
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	01 90       	ld	r0, Z+
    1466:	f0 81       	ld	r31, Z
    1468:	e0 2d       	mov	r30, r0
    146a:	20 a1       	ldd	r18, Z+32	; 0x20
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	21 50       	subi	r18, 0x01	; 1
    1470:	31 09       	sbc	r19, r1
    1472:	42 17       	cp	r20, r18
    1474:	53 07       	cpc	r21, r19
    1476:	24 f4       	brge	.+8      	; 0x1480 <navigateMenu+0x44>
					currentMenu.childIndex++;
    1478:	9f 5f       	subi	r25, 0xFF	; 255
    147a:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <currentMenu+0x2>
    147e:	41 c0       	rjmp	.+130    	; 0x1502 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1480:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <currentMenu+0x2>
    1484:	3e c0       	rjmp	.+124    	; 0x1502 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    1486:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <currentMenu+0x2>
    148a:	99 23       	and	r25, r25
    148c:	21 f0       	breq	.+8      	; 0x1496 <navigateMenu+0x5a>
					currentMenu.childIndex--;
    148e:	91 50       	subi	r25, 0x01	; 1
    1490:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <currentMenu+0x2>
    1494:	36 c0       	rjmp	.+108    	; 0x1502 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    1496:	e2 ee       	ldi	r30, 0xE2	; 226
    1498:	f2 e0       	ldi	r31, 0x02	; 2
    149a:	a0 81       	ld	r26, Z
    149c:	b1 81       	ldd	r27, Z+1	; 0x01
    149e:	90 96       	adiw	r26, 0x20	; 32
    14a0:	9c 91       	ld	r25, X
    14a2:	91 50       	subi	r25, 0x01	; 1
    14a4:	92 83       	std	Z+2, r25	; 0x02
    14a6:	2d c0       	rjmp	.+90     	; 0x1502 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    14a8:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <currentMenu>
    14ac:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <currentMenu+0x1>
    14b0:	22 89       	ldd	r18, Z+18	; 0x12
    14b2:	33 89       	ldd	r19, Z+19	; 0x13
    14b4:	21 15       	cp	r18, r1
    14b6:	31 05       	cpc	r19, r1
    14b8:	21 f1       	breq	.+72     	; 0x1502 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    14ba:	e2 ee       	ldi	r30, 0xE2	; 226
    14bc:	f2 e0       	ldi	r31, 0x02	; 2
    14be:	31 83       	std	Z+1, r19	; 0x01
    14c0:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    14c2:	12 82       	std	Z+2, r1	; 0x02
    14c4:	1e c0       	rjmp	.+60     	; 0x1502 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    14c6:	a2 ee       	ldi	r26, 0xE2	; 226
    14c8:	b2 e0       	ldi	r27, 0x02	; 2
    14ca:	2d 91       	ld	r18, X+
    14cc:	3c 91       	ld	r19, X
    14ce:	11 97       	sbiw	r26, 0x01	; 1
    14d0:	12 96       	adiw	r26, 0x02	; 2
    14d2:	9c 91       	ld	r25, X
    14d4:	e9 2f       	mov	r30, r25
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	3a 96       	adiw	r30, 0x0a	; 10
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	e2 0f       	add	r30, r18
    14e0:	f3 1f       	adc	r31, r19
    14e2:	01 90       	ld	r0, Z+
    14e4:	f0 81       	ld	r31, Z
    14e6:	e0 2d       	mov	r30, r0
    14e8:	90 a1       	ldd	r25, Z+32	; 0x20
    14ea:	91 11       	cpse	r25, r1
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <navigateMenu+0xb8>
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	99 23       	and	r25, r25
    14f2:	39 f0       	breq	.+14     	; 0x1502 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    14f4:	a2 ee       	ldi	r26, 0xE2	; 226
    14f6:	b2 e0       	ldi	r27, 0x02	; 2
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	fc 93       	st	X, r31
    14fc:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    14fe:	12 96       	adiw	r26, 0x02	; 2
    1500:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    1502:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <currentMenu+0x3>
    1506:	08 95       	ret

00001508 <menu_init>:
#include <string.h>


MenuNode nodes[8];

void menu_init() {
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    1510:	8a e0       	ldi	r24, 0x0A	; 10
    1512:	ec e8       	ldi	r30, 0x8C	; 140
    1514:	f2 e0       	ldi	r31, 0x02	; 2
    1516:	a2 e0       	ldi	r26, 0x02	; 2
    1518:	b3 e0       	ldi	r27, 0x03	; 3
    151a:	01 90       	ld	r0, Z+
    151c:	0d 92       	st	X+, r0
    151e:	8a 95       	dec	r24
    1520:	e1 f7       	brne	.-8      	; 0x151a <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    1522:	8a e0       	ldi	r24, 0x0A	; 10
    1524:	e6 e9       	ldi	r30, 0x96	; 150
    1526:	f2 e0       	ldi	r31, 0x02	; 2
    1528:	a3 e2       	ldi	r26, 0x23	; 35
    152a:	b3 e0       	ldi	r27, 0x03	; 3
    152c:	01 90       	ld	r0, Z+
    152e:	0d 92       	st	X+, r0
    1530:	8a 95       	dec	r24
    1532:	e1 f7       	brne	.-8      	; 0x152c <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    1534:	8c e0       	ldi	r24, 0x0C	; 12
    1536:	e0 ea       	ldi	r30, 0xA0	; 160
    1538:	f2 e0       	ldi	r31, 0x02	; 2
    153a:	a4 e4       	ldi	r26, 0x44	; 68
    153c:	b3 e0       	ldi	r27, 0x03	; 3
    153e:	01 90       	ld	r0, Z+
    1540:	0d 92       	st	X+, r0
    1542:	8a 95       	dec	r24
    1544:	e1 f7       	brne	.-8      	; 0x153e <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    1546:	86 e0       	ldi	r24, 0x06	; 6
    1548:	ec ea       	ldi	r30, 0xAC	; 172
    154a:	f2 e0       	ldi	r31, 0x02	; 2
    154c:	a5 e6       	ldi	r26, 0x65	; 101
    154e:	b3 e0       	ldi	r27, 0x03	; 3
    1550:	01 90       	ld	r0, Z+
    1552:	0d 92       	st	X+, r0
    1554:	8a 95       	dec	r24
    1556:	e1 f7       	brne	.-8      	; 0x1550 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    1558:	87 e0       	ldi	r24, 0x07	; 7
    155a:	e2 eb       	ldi	r30, 0xB2	; 178
    155c:	f2 e0       	ldi	r31, 0x02	; 2
    155e:	a6 e8       	ldi	r26, 0x86	; 134
    1560:	b3 e0       	ldi	r27, 0x03	; 3
    1562:	01 90       	ld	r0, Z+
    1564:	0d 92       	st	X+, r0
    1566:	8a 95       	dec	r24
    1568:	e1 f7       	brne	.-8      	; 0x1562 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    156a:	87 e0       	ldi	r24, 0x07	; 7
    156c:	e9 eb       	ldi	r30, 0xB9	; 185
    156e:	f2 e0       	ldi	r31, 0x02	; 2
    1570:	a7 ea       	ldi	r26, 0xA7	; 167
    1572:	b3 e0       	ldi	r27, 0x03	; 3
    1574:	01 90       	ld	r0, Z+
    1576:	0d 92       	st	X+, r0
    1578:	8a 95       	dec	r24
    157a:	e1 f7       	brne	.-8      	; 0x1574 <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    157c:	8a e0       	ldi	r24, 0x0A	; 10
    157e:	e0 ec       	ldi	r30, 0xC0	; 192
    1580:	f2 e0       	ldi	r31, 0x02	; 2
    1582:	a8 ec       	ldi	r26, 0xC8	; 200
    1584:	b3 e0       	ldi	r27, 0x03	; 3
    1586:	01 90       	ld	r0, Z+
    1588:	0d 92       	st	X+, r0
    158a:	8a 95       	dec	r24
    158c:	e1 f7       	brne	.-8      	; 0x1586 <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    158e:	8a e0       	ldi	r24, 0x0A	; 10
    1590:	ea ec       	ldi	r30, 0xCA	; 202
    1592:	f2 e0       	ldi	r31, 0x02	; 2
    1594:	a9 ee       	ldi	r26, 0xE9	; 233
    1596:	b3 e0       	ldi	r27, 0x03	; 3
    1598:	01 90       	ld	r0, Z+
    159a:	0d 92       	st	X+, r0
    159c:	8a 95       	dec	r24
    159e:	e1 f7       	brne	.-8      	; 0x1598 <menu_init+0x90>
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	73 e0       	ldi	r23, 0x03	; 3
    15a4:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    15aa:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    15ac:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	14 f0       	brlt	.+4      	; 0x15b8 <menu_init+0xb0>
			nodes[i].isAction=1;
    15b4:	21 83       	std	Z+1, r18	; 0x01
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    15b8:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	b1 96       	adiw	r30, 0x21	; 33
    15be:	88 30       	cpi	r24, 0x08	; 8
    15c0:	91 05       	cpc	r25, r1
    15c2:	a1 f7       	brne	.-24     	; 0x15ac <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    15c4:	e0 e0       	ldi	r30, 0x00	; 0
    15c6:	f3 e0       	ldi	r31, 0x03	; 3
    15c8:	83 e0       	ldi	r24, 0x03	; 3
    15ca:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <nodes+0x41>
	nodes[2].numChildren = 2;
    15d2:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <nodes+0x62>
	nodes[3].numChildren = 0;
    15d6:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <nodes+0x83>
	nodes[4].numChildren = 0;
    15da:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <nodes+0xa4>
	nodes[5].numChildren = 0;
    15de:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15e2:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15e6:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    15ea:	13 8a       	std	Z+19, r1	; 0x13
    15ec:	12 8a       	std	Z+18, r1	; 0x12
    15ee:	08 e0       	ldi	r16, 0x08	; 8
    15f0:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    15f2:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    15f4:	51 e2       	ldi	r21, 0x21	; 33
    15f6:	18 c0       	rjmp	.+48     	; 0x1628 <menu_init+0x120>
    15f8:	54 9f       	mul	r21, r20
    15fa:	f0 01       	movw	r30, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	e0 50       	subi	r30, 0x00	; 0
    1600:	fd 4f       	sbci	r31, 0xFD	; 253
    1602:	e9 93       	st	Y+, r30
    1604:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    1606:	b3 8b       	std	Z+19, r27	; 0x13
    1608:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    160a:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    160c:	2f 5f       	subi	r18, 0xFF	; 255
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	90 96       	adiw	r26, 0x20	; 32
    1612:	8c 91       	ld	r24, X
    1614:	90 97       	sbiw	r26, 0x20	; 32
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	28 17       	cp	r18, r24
    161a:	39 07       	cpc	r19, r25
    161c:	6c f3       	brlt	.-38     	; 0x15f8 <menu_init+0xf0>
    161e:	6f 5d       	subi	r22, 0xDF	; 223
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    1622:	60 17       	cp	r22, r16
    1624:	71 07       	cpc	r23, r17
    1626:	59 f0       	breq	.+22     	; 0x163e <menu_init+0x136>
    1628:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    162a:	90 96       	adiw	r26, 0x20	; 32
    162c:	8c 91       	ld	r24, X
    162e:	90 97       	sbiw	r26, 0x20	; 32
    1630:	88 23       	and	r24, r24
    1632:	a9 f3       	breq	.-22     	; 0x161e <menu_init+0x116>
    1634:	eb 01       	movw	r28, r22
    1636:	64 96       	adiw	r28, 0x14	; 20
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	dd cf       	rjmp	.-70     	; 0x15f8 <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    163e:	88 ed       	ldi	r24, 0xD8	; 216
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	0e 94 1e 0a 	call	0x143c	; 0x143c <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    1646:	e2 ee       	ldi	r30, 0xE2	; 226
    1648:	f2 e0       	ldi	r31, 0x02	; 2
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	93 e0       	ldi	r25, 0x03	; 3
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1652:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1662:	ff 92       	push	r15
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
	oled_reset();
    166c:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
	oled_home();
    1670:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    1674:	c2 ee       	ldi	r28, 0xE2	; 226
    1676:	d2 e0       	ldi	r29, 0x02	; 2
    1678:	88 81       	ld	r24, Y
    167a:	99 81       	ldd	r25, Y+1	; 0x01
    167c:	02 96       	adiw	r24, 0x02	; 2
    167e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1682:	e8 81       	ld	r30, Y
    1684:	f9 81       	ldd	r31, Y+1	; 0x01
    1686:	80 a1       	ldd	r24, Z+32	; 0x20
    1688:	88 23       	and	r24, r24
    168a:	51 f1       	breq	.+84     	; 0x16e0 <menu_printCurrentMenu+0x7e>
    168c:	68 94       	set
    168e:	ff 24       	eor	r15, r15
    1690:	f1 f8       	bld	r15, 1
    1692:	c0 e0       	ldi	r28, 0x00	; 0
    1694:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1696:	02 ee       	ldi	r16, 0xE2	; 226
    1698:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    169a:	8f 2d       	mov	r24, r15
    169c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    16a0:	d8 01       	movw	r26, r16
    16a2:	8d 91       	ld	r24, X+
    16a4:	9c 91       	ld	r25, X
    16a6:	fe 01       	movw	r30, r28
    16a8:	3a 96       	adiw	r30, 0x0a	; 10
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	e8 0f       	add	r30, r24
    16b0:	f9 1f       	adc	r31, r25
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	02 96       	adiw	r24, 0x02	; 2
    16b8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <oled_print>
		if (currentMenu.childIndex == i) {
    16bc:	f8 01       	movw	r30, r16
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	8c 17       	cp	r24, r28
    16c4:	9d 07       	cpc	r25, r29
    16c6:	11 f4       	brne	.+4      	; 0x16cc <menu_printCurrentMenu+0x6a>
			oled_print_arrow();
    16c8:	0e 94 98 0b 	call	0x1730	; 0x1730 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    16cc:	21 96       	adiw	r28, 0x01	; 1
    16ce:	f3 94       	inc	r15
    16d0:	d8 01       	movw	r26, r16
    16d2:	ed 91       	ld	r30, X+
    16d4:	fc 91       	ld	r31, X
    16d6:	80 a1       	ldd	r24, Z+32	; 0x20
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	c8 17       	cp	r28, r24
    16dc:	d9 07       	cpc	r29, r25
    16de:	ec f2       	brlt	.-70     	; 0x169a <menu_printCurrentMenu+0x38>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	08 95       	ret

000016ec <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16ec:	80 55       	subi	r24, 0x50	; 80
    16ee:	e0 e0       	ldi	r30, 0x00	; 0
    16f0:	f0 e1       	ldi	r31, 0x10	; 16
    16f2:	80 83       	st	Z, r24
    16f4:	86 2f       	mov	r24, r22
    16f6:	8f 70       	andi	r24, 0x0F	; 15
    16f8:	80 83       	st	Z, r24
    16fa:	62 95       	swap	r22
    16fc:	6f 70       	andi	r22, 0x0F	; 15
    16fe:	60 61       	ori	r22, 0x10	; 16
    1700:	60 83       	st	Z, r22
    1702:	08 95       	ret

00001704 <oled_reset>:
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	10 e0       	ldi	r17, 0x00	; 0
    170c:	c0 e0       	ldi	r28, 0x00	; 0
    170e:	d2 e1       	ldi	r29, 0x12	; 18
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	81 2f       	mov	r24, r17
    1714:	0e 94 76 0b 	call	0x16ec	; 0x16ec <oled_pos>
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	18 82       	st	Y, r1
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	e9 f7       	brne	.-6      	; 0x171c <oled_reset+0x18>
    1722:	1f 5f       	subi	r17, 0xFF	; 255
    1724:	18 30       	cpi	r17, 0x08	; 8
    1726:	a1 f7       	brne	.-24     	; 0x1710 <oled_reset+0xc>
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	08 95       	ret

00001730 <oled_print_arrow>:
    1730:	e0 e0       	ldi	r30, 0x00	; 0
    1732:	f2 e1       	ldi	r31, 0x12	; 18
    1734:	88 e1       	ldi	r24, 0x18	; 24
    1736:	80 83       	st	Z, r24
    1738:	9c e3       	ldi	r25, 0x3C	; 60
    173a:	90 83       	st	Z, r25
    173c:	9e e7       	ldi	r25, 0x7E	; 126
    173e:	90 83       	st	Z, r25
    1740:	80 83       	st	Z, r24
    1742:	80 83       	st	Z, r24
    1744:	08 95       	ret

00001746 <oled_home>:
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <oled_pos>
    174e:	08 95       	ret

00001750 <oled_init>:
    1750:	e0 e0       	ldi	r30, 0x00	; 0
    1752:	f0 e1       	ldi	r31, 0x10	; 16
    1754:	8e ea       	ldi	r24, 0xAE	; 174
    1756:	80 83       	st	Z, r24
    1758:	81 ea       	ldi	r24, 0xA1	; 161
    175a:	80 83       	st	Z, r24
    175c:	8a ed       	ldi	r24, 0xDA	; 218
    175e:	80 83       	st	Z, r24
    1760:	82 e1       	ldi	r24, 0x12	; 18
    1762:	80 83       	st	Z, r24
    1764:	88 ec       	ldi	r24, 0xC8	; 200
    1766:	80 83       	st	Z, r24
    1768:	88 ea       	ldi	r24, 0xA8	; 168
    176a:	80 83       	st	Z, r24
    176c:	8f e3       	ldi	r24, 0x3F	; 63
    176e:	80 83       	st	Z, r24
    1770:	85 ed       	ldi	r24, 0xD5	; 213
    1772:	80 83       	st	Z, r24
    1774:	80 e8       	ldi	r24, 0x80	; 128
    1776:	80 83       	st	Z, r24
    1778:	81 e8       	ldi	r24, 0x81	; 129
    177a:	80 83       	st	Z, r24
    177c:	80 e5       	ldi	r24, 0x50	; 80
    177e:	80 83       	st	Z, r24
    1780:	89 ed       	ldi	r24, 0xD9	; 217
    1782:	80 83       	st	Z, r24
    1784:	81 e2       	ldi	r24, 0x21	; 33
    1786:	80 83       	st	Z, r24
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	80 83       	st	Z, r24
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	80 83       	st	Z, r24
    1790:	8b ed       	ldi	r24, 0xDB	; 219
    1792:	80 83       	st	Z, r24
    1794:	80 e3       	ldi	r24, 0x30	; 48
    1796:	80 83       	st	Z, r24
    1798:	8d ea       	ldi	r24, 0xAD	; 173
    179a:	80 83       	st	Z, r24
    179c:	10 82       	st	Z, r1
    179e:	84 ea       	ldi	r24, 0xA4	; 164
    17a0:	80 83       	st	Z, r24
    17a2:	86 ea       	ldi	r24, 0xA6	; 166
    17a4:	80 83       	st	Z, r24
    17a6:	8f ea       	ldi	r24, 0xAF	; 175
    17a8:	80 83       	st	Z, r24
    17aa:	0e 94 82 0b 	call	0x1704	; 0x1704 <oled_reset>
    17ae:	0e 94 a3 0b 	call	0x1746	; 0x1746 <oled_home>
    17b2:	08 95       	ret

000017b4 <oled_gotoLine>:
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <oled_pos>
    17ba:	08 95       	ret

000017bc <oled_print>:

void oled_print(char* character){
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	dc 01       	movw	r26, r24
	while (*character != '\0')
    17c2:	8c 91       	ld	r24, X
    17c4:	81 11       	cpse	r24, r1
    17c6:	1a c0       	rjmp	.+52     	; 0x17fc <oled_print+0x40>
    17c8:	1e c0       	rjmp	.+60     	; 0x1806 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    17ca:	ec 91       	ld	r30, X
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	b0 97       	sbiw	r30, 0x20	; 32
    17d0:	ee 0f       	add	r30, r30
    17d2:	ff 1f       	adc	r31, r31
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	e2 0f       	add	r30, r18
    17de:	f3 1f       	adc	r31, r19
    17e0:	e7 5d       	subi	r30, 0xD7	; 215
    17e2:	fd 4f       	sbci	r31, 0xFD	; 253
    17e4:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17e6:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17e8:	2f 5f       	subi	r18, 0xFF	; 255
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	28 30       	cpi	r18, 0x08	; 8
    17ee:	31 05       	cpc	r19, r1
    17f0:	61 f7       	brne	.-40     	; 0x17ca <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17f2:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    17f4:	8c 91       	ld	r24, X
    17f6:	81 11       	cpse	r24, r1
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <oled_print+0x44>
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17fc:	c0 e0       	ldi	r28, 0x00	; 0
    17fe:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	e2 cf       	rjmp	.-60     	; 0x17ca <oled_print+0xe>
		}
		character++;
	}
	
	
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <setupInit>:
#define MYUBRR FOSC/16/BAUD-1
#include <util/delay.h>


	void setupInit(void){
	cli();
    180c:	f8 94       	cli
	xmem_init();
    180e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <xmem_init>
    1812:	2f ef       	ldi	r18, 0xFF	; 255
    1814:	8f e7       	ldi	r24, 0x7F	; 127
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	21 50       	subi	r18, 0x01	; 1
    181a:	80 40       	sbci	r24, 0x00	; 0
    181c:	90 40       	sbci	r25, 0x00	; 0
    181e:	e1 f7       	brne	.-8      	; 0x1818 <setupInit+0xc>
    1820:	00 c0       	rjmp	.+0      	; 0x1822 <setupInit+0x16>
    1822:	00 c0       	rjmp	.+0      	; 0x1824 <setupInit+0x18>
	_delay_ms(100);
	USART_init(MYUBRR);
    1824:	8f e1       	ldi	r24, 0x1F	; 31
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <USART_init>
    182c:	2f ef       	ldi	r18, 0xFF	; 255
    182e:	8f e7       	ldi	r24, 0x7F	; 127
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	21 50       	subi	r18, 0x01	; 1
    1834:	80 40       	sbci	r24, 0x00	; 0
    1836:	90 40       	sbci	r25, 0x00	; 0
    1838:	e1 f7       	brne	.-8      	; 0x1832 <setupInit+0x26>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <setupInit+0x30>
    183c:	00 c0       	rjmp	.+0      	; 0x183e <setupInit+0x32>
	_delay_ms(100);
	CAN_init();
    183e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_init>
    1842:	2f ef       	ldi	r18, 0xFF	; 255
    1844:	8f e7       	ldi	r24, 0x7F	; 127
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	80 40       	sbci	r24, 0x00	; 0
    184c:	90 40       	sbci	r25, 0x00	; 0
    184e:	e1 f7       	brne	.-8      	; 0x1848 <setupInit+0x3c>
    1850:	00 c0       	rjmp	.+0      	; 0x1852 <setupInit+0x46>
    1852:	00 c0       	rjmp	.+0      	; 0x1854 <setupInit+0x48>
	_delay_ms(100);
	adcInit();
    1854:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
    1858:	2f ef       	ldi	r18, 0xFF	; 255
    185a:	8f e7       	ldi	r24, 0x7F	; 127
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	21 50       	subi	r18, 0x01	; 1
    1860:	80 40       	sbci	r24, 0x00	; 0
    1862:	90 40       	sbci	r25, 0x00	; 0
    1864:	e1 f7       	brne	.-8      	; 0x185e <setupInit+0x52>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <setupInit+0x5c>
    1868:	00 c0       	rjmp	.+0      	; 0x186a <setupInit+0x5e>
	_delay_ms(100);
	joystick_init();
    186a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <joystick_init>
    186e:	2f ef       	ldi	r18, 0xFF	; 255
    1870:	8f e7       	ldi	r24, 0x7F	; 127
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	21 50       	subi	r18, 0x01	; 1
    1876:	80 40       	sbci	r24, 0x00	; 0
    1878:	90 40       	sbci	r25, 0x00	; 0
    187a:	e1 f7       	brne	.-8      	; 0x1874 <setupInit+0x68>
    187c:	00 c0       	rjmp	.+0      	; 0x187e <setupInit+0x72>
    187e:	00 c0       	rjmp	.+0      	; 0x1880 <setupInit+0x74>
	_delay_ms(100);
	touchButton_init();
    1880:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <touchButton_init>
    1884:	2f ef       	ldi	r18, 0xFF	; 255
    1886:	8f e7       	ldi	r24, 0x7F	; 127
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	21 50       	subi	r18, 0x01	; 1
    188c:	80 40       	sbci	r24, 0x00	; 0
    188e:	90 40       	sbci	r25, 0x00	; 0
    1890:	e1 f7       	brne	.-8      	; 0x188a <setupInit+0x7e>
    1892:	00 c0       	rjmp	.+0      	; 0x1894 <setupInit+0x88>
    1894:	00 c0       	rjmp	.+0      	; 0x1896 <setupInit+0x8a>
	_delay_ms(100);
	oled_init();
    1896:	0e 94 a8 0b 	call	0x1750	; 0x1750 <oled_init>
    189a:	2f ef       	ldi	r18, 0xFF	; 255
    189c:	8f e7       	ldi	r24, 0x7F	; 127
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	21 50       	subi	r18, 0x01	; 1
    18a2:	80 40       	sbci	r24, 0x00	; 0
    18a4:	90 40       	sbci	r25, 0x00	; 0
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <setupInit+0x94>
    18a8:	00 c0       	rjmp	.+0      	; 0x18aa <setupInit+0x9e>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <setupInit+0xa0>
	_delay_ms(100);
	timer_init();
    18ac:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <timer_init>
    18b0:	2f ef       	ldi	r18, 0xFF	; 255
    18b2:	8f e7       	ldi	r24, 0x7F	; 127
    18b4:	91 e0       	ldi	r25, 0x01	; 1
    18b6:	21 50       	subi	r18, 0x01	; 1
    18b8:	80 40       	sbci	r24, 0x00	; 0
    18ba:	90 40       	sbci	r25, 0x00	; 0
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <setupInit+0xaa>
    18be:	00 c0       	rjmp	.+0      	; 0x18c0 <setupInit+0xb4>
    18c0:	00 c0       	rjmp	.+0      	; 0x18c2 <setupInit+0xb6>
	_delay_ms(100);
	sleep_init();
    18c2:	0e 94 4a 09 	call	0x1294	; 0x1294 <sleep_init>
    18c6:	2f ef       	ldi	r18, 0xFF	; 255
    18c8:	8f e7       	ldi	r24, 0x7F	; 127
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	21 50       	subi	r18, 0x01	; 1
    18ce:	80 40       	sbci	r24, 0x00	; 0
    18d0:	90 40       	sbci	r25, 0x00	; 0
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <setupInit+0xc0>
    18d4:	00 c0       	rjmp	.+0      	; 0x18d6 <setupInit+0xca>
    18d6:	00 c0       	rjmp	.+0      	; 0x18d8 <setupInit+0xcc>
	_delay_ms(100);
	menu_init();
    18d8:	0e 94 84 0a 	call	0x1508	; 0x1508 <menu_init>
    18dc:	2f ef       	ldi	r18, 0xFF	; 255
    18de:	8f e7       	ldi	r24, 0x7F	; 127
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	21 50       	subi	r18, 0x01	; 1
    18e4:	80 40       	sbci	r24, 0x00	; 0
    18e6:	90 40       	sbci	r25, 0x00	; 0
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <setupInit+0xd6>
    18ea:	00 c0       	rjmp	.+0      	; 0x18ec <setupInit+0xe0>
    18ec:	00 c0       	rjmp	.+0      	; 0x18ee <setupInit+0xe2>
	_delay_ms(100);
	pwm_init();
    18ee:	0e 94 de 08 	call	0x11bc	; 0x11bc <pwm_init>
    18f2:	2f ef       	ldi	r18, 0xFF	; 255
    18f4:	8f e7       	ldi	r24, 0x7F	; 127
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	21 50       	subi	r18, 0x01	; 1
    18fa:	80 40       	sbci	r24, 0x00	; 0
    18fc:	90 40       	sbci	r25, 0x00	; 0
    18fe:	e1 f7       	brne	.-8      	; 0x18f8 <setupInit+0xec>
    1900:	00 c0       	rjmp	.+0      	; 0x1902 <setupInit+0xf6>
    1902:	00 c0       	rjmp	.+0      	; 0x1904 <setupInit+0xf8>
	_delay_ms(100);
	game_init();
    1904:	0e 94 51 05 	call	0xaa2	; 0xaa2 <game_init>
    1908:	2f ef       	ldi	r18, 0xFF	; 255
    190a:	8f e7       	ldi	r24, 0x7F	; 127
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	21 50       	subi	r18, 0x01	; 1
    1910:	80 40       	sbci	r24, 0x00	; 0
    1912:	90 40       	sbci	r25, 0x00	; 0
    1914:	e1 f7       	brne	.-8      	; 0x190e <setupInit+0x102>
    1916:	00 c0       	rjmp	.+0      	; 0x1918 <setupInit+0x10c>
    1918:	00 c0       	rjmp	.+0      	; 0x191a <setupInit+0x10e>
	_delay_ms(100);
	sei();
    191a:	78 94       	sei
    191c:	08 95       	ret

0000191e <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1928:	c1 ef       	ldi	r28, 0xF1	; 241
    192a:	d2 e0       	ldi	r29, 0x02	; 2
    192c:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1934:	89 83       	std	Y+1, r24	; 0x01
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    193c:	87 b3       	in	r24, 0x17	; 23
    193e:	80 6a       	ori	r24, 0xA0	; 160
    1940:	87 bb       	out	0x17, r24	; 23
    1942:	bc 9a       	sbi	0x17, 4	; 23
    1944:	8d b1       	in	r24, 0x0d	; 13
    1946:	81 65       	ori	r24, 0x51	; 81
    1948:	8d b9       	out	0x0d, r24	; 13
    194a:	c4 9a       	sbi	0x18, 4	; 24
    194c:	08 95       	ret

0000194e <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    194e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    1950:	77 9b       	sbis	0x0e, 7	; 14
    1952:	fe cf       	rjmp	.-4      	; 0x1950 <SPI_masterWrite+0x2>

}
    1954:	08 95       	ret

00001956 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    1956:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    1958:	77 9b       	sbis	0x0e, 7	; 14
    195a:	fe cf       	rjmp	.-4      	; 0x1958 <SPI_masterRead+0x2>
	return SPDR;
    195c:	8f b1       	in	r24, 0x0f	; 15
}
    195e:	08 95       	ret

00001960 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    1960:	66 23       	and	r22, r22
    1962:	69 f0       	breq	.+26     	; 0x197e <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1964:	48 b3       	in	r20, 0x18	; 24
    1966:	21 e0       	ldi	r18, 0x01	; 1
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	b9 01       	movw	r22, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <SPI_setChipSelect+0x12>
    196e:	66 0f       	add	r22, r22
    1970:	77 1f       	adc	r23, r23
    1972:	8a 95       	dec	r24
    1974:	e2 f7       	brpl	.-8      	; 0x196e <SPI_setChipSelect+0xe>
    1976:	cb 01       	movw	r24, r22
    1978:	84 2b       	or	r24, r20
    197a:	88 bb       	out	0x18, r24	; 24
    197c:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    197e:	48 b3       	in	r20, 0x18	; 24
    1980:	21 e0       	ldi	r18, 0x01	; 1
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	b9 01       	movw	r22, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <SPI_setChipSelect+0x2c>
    1988:	66 0f       	add	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	8a 95       	dec	r24
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <SPI_setChipSelect+0x28>
    1990:	cb 01       	movw	r24, r22
    1992:	80 95       	com	r24
    1994:	84 23       	and	r24, r20
    1996:	88 bb       	out	0x18, r24	; 24
    1998:	08 95       	ret

0000199a <__vector_14>:
#include "menu.h"
#include "game.h"
#include <avr/interrupt.h>


ISR (TIMER1_COMPB_vect) {
    199a:	1f 92       	push	r1
    199c:	0f 92       	push	r0
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	0f 92       	push	r0
    19a2:	11 24       	eor	r1, r1
    19a4:	8f 93       	push	r24
	
	timerFlag=1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <timerFlag>

}
    19ac:	8f 91       	pop	r24
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    19b8:	89 b7       	in	r24, 0x39	; 57
    19ba:	80 62       	ori	r24, 0x20	; 32
    19bc:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    19be:	1d bc       	out	0x2d, r1	; 45
    19c0:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    19c2:	80 e3       	ldi	r24, 0x30	; 48
    19c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    19c6:	85 e0       	ldi	r24, 0x05	; 5
    19c8:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    19ca:	80 ee       	ldi	r24, 0xE0	; 224
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	99 bd       	out	0x29, r25	; 41
    19d0:	88 bd       	out	0x28, r24	; 40
	timerFlag=0;
    19d2:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <timerFlag>
    19d6:	08 95       	ret

000019d8 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    19d8:	36 b3       	in	r19, 0x16	; 22
    19da:	26 b3       	in	r18, 0x16	; 22
    19dc:	47 b3       	in	r20, 0x17	; 23
    19de:	32 70       	andi	r19, 0x02	; 2
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	bc 01       	movw	r22, r24
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <touchButton_init+0x14>
    19e8:	66 0f       	add	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	3a 95       	dec	r19
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <touchButton_init+0x10>
    19f0:	24 70       	andi	r18, 0x04	; 4
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <touchButton_init+0x20>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	2a 95       	dec	r18
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <touchButton_init+0x1c>
    19fc:	86 2b       	or	r24, r22
    19fe:	97 2b       	or	r25, r23
    1a00:	80 95       	com	r24
    1a02:	90 95       	com	r25
    1a04:	84 23       	and	r24, r20
    1a06:	87 bb       	out	0x17, r24	; 23
    1a08:	08 95       	ret

00001a0a <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1a0a:	86 b3       	in	r24, 0x16	; 22
    1a0c:	e7 ee       	ldi	r30, 0xE7	; 231
    1a0e:	f2 e0       	ldi	r31, 0x02	; 2
    1a10:	86 95       	lsr	r24
    1a12:	81 70       	andi	r24, 0x01	; 1
    1a14:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    1a16:	86 b3       	in	r24, 0x16	; 22
    1a18:	82 fb       	bst	r24, 2
    1a1a:	88 27       	eor	r24, r24
    1a1c:	80 f9       	bld	r24, 0
    1a1e:	81 83       	std	Z+1, r24	; 0x01
    1a20:	08 95       	ret

00001a22 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    1a22:	5d 9b       	sbis	0x0b, 5	; 11
    1a24:	fe cf       	rjmp	.-4      	; 0x1a22 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    1a26:	8c b9       	out	0x0c, r24	; 12
    1a28:	08 95       	ret

00001a2a <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    1a2a:	5f 9b       	sbis	0x0b, 7	; 11
    1a2c:	fe cf       	rjmp	.-4      	; 0x1a2a <USART_receiveChar>
		;
	
	return UDR0;
    1a2e:	8c b1       	in	r24, 0x0c	; 12
    1a30:	08 95       	ret

00001a32 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1a32:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    1a34:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    1a36:	88 e1       	ldi	r24, 0x18	; 24
    1a38:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1a3a:	8e e8       	ldi	r24, 0x8E	; 142
    1a3c:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1a3e:	65 e1       	ldi	r22, 0x15	; 21
    1a40:	7d e0       	ldi	r23, 0x0D	; 13
    1a42:	81 e1       	ldi	r24, 0x11	; 17
    1a44:	9d e0       	ldi	r25, 0x0D	; 13
    1a46:	0e 94 55 10 	call	0x20aa	; 0x20aa <fdevopen>
    1a4a:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <uart+0x1>
    1a4e:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <uart>
    1a52:	08 95       	ret

00001a54 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1a54:	85 b7       	in	r24, 0x35	; 53
    1a56:	80 68       	ori	r24, 0x80	; 128
    1a58:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1a5a:	80 b7       	in	r24, 0x30	; 48
    1a5c:	88 60       	ori	r24, 0x08	; 8
    1a5e:	80 bf       	out	0x30, r24	; 48
    1a60:	08 95       	ret
    1a62:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__fp_pscA>
    1a66:	60 f0       	brcs	.+24     	; 0x1a80 <xmem_init+0x2c>
    1a68:	80 e8       	ldi	r24, 0x80	; 128
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <xmem_init+0x1c>
    1a6e:	9e ef       	ldi	r25, 0xFE	; 254
    1a70:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_pscB>
    1a74:	28 f0       	brcs	.+10     	; 0x1a80 <xmem_init+0x2c>
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	51 e0       	ldi	r21, 0x01	; 1
    1a7a:	71 f4       	brne	.+28     	; 0x1a98 <atan2+0x10>
    1a7c:	5e ef       	ldi	r21, 0xFE	; 254
    1a7e:	0c c0       	rjmp	.+24     	; 0x1a98 <atan2+0x10>
    1a80:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_nan>
    1a84:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__fp_zero>

00001a88 <atan2>:
    1a88:	e9 2f       	mov	r30, r25
    1a8a:	e0 78       	andi	r30, 0x80	; 128
    1a8c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_split3>
    1a90:	40 f3       	brcs	.-48     	; 0x1a62 <xmem_init+0xe>
    1a92:	09 2e       	mov	r0, r25
    1a94:	05 2a       	or	r0, r21
    1a96:	b1 f3       	breq	.-20     	; 0x1a84 <xmem_init+0x30>
    1a98:	26 17       	cp	r18, r22
    1a9a:	37 07       	cpc	r19, r23
    1a9c:	48 07       	cpc	r20, r24
    1a9e:	59 07       	cpc	r21, r25
    1aa0:	38 f0       	brcs	.+14     	; 0x1ab0 <atan2+0x28>
    1aa2:	0e 2e       	mov	r0, r30
    1aa4:	07 f8       	bld	r0, 7
    1aa6:	e0 25       	eor	r30, r0
    1aa8:	69 f0       	breq	.+26     	; 0x1ac4 <atan2+0x3c>
    1aaa:	e0 25       	eor	r30, r0
    1aac:	e0 64       	ori	r30, 0x40	; 64
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <atan2+0x3c>
    1ab0:	ef 63       	ori	r30, 0x3F	; 63
    1ab2:	07 f8       	bld	r0, 7
    1ab4:	00 94       	com	r0
    1ab6:	07 fa       	bst	r0, 7
    1ab8:	db 01       	movw	r26, r22
    1aba:	b9 01       	movw	r22, r18
    1abc:	9d 01       	movw	r18, r26
    1abe:	dc 01       	movw	r26, r24
    1ac0:	ca 01       	movw	r24, r20
    1ac2:	ad 01       	movw	r20, r26
    1ac4:	ef 93       	push	r30
    1ac6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__divsf3_pse>
    1aca:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_round>
    1ace:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <atan>
    1ad2:	5f 91       	pop	r21
    1ad4:	55 23       	and	r21, r21
    1ad6:	39 f0       	breq	.+14     	; 0x1ae6 <atan2+0x5e>
    1ad8:	2b ed       	ldi	r18, 0xDB	; 219
    1ada:	3f e0       	ldi	r19, 0x0F	; 15
    1adc:	49 e4       	ldi	r20, 0x49	; 73
    1ade:	50 fd       	sbrc	r21, 0
    1ae0:	49 ec       	ldi	r20, 0xC9	; 201
    1ae2:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__addsf3>
    1ae6:	08 95       	ret

00001ae8 <atan>:
    1ae8:	df 93       	push	r29
    1aea:	dd 27       	eor	r29, r29
    1aec:	b9 2f       	mov	r27, r25
    1aee:	bf 77       	andi	r27, 0x7F	; 127
    1af0:	40 e8       	ldi	r20, 0x80	; 128
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	16 16       	cp	r1, r22
    1af6:	17 06       	cpc	r1, r23
    1af8:	48 07       	cpc	r20, r24
    1afa:	5b 07       	cpc	r21, r27
    1afc:	18 f4       	brcc	.+6      	; 0x1b04 <atan+0x1c>
    1afe:	d9 2f       	mov	r29, r25
    1b00:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <inverse>
    1b04:	9f 93       	push	r25
    1b06:	8f 93       	push	r24
    1b08:	7f 93       	push	r23
    1b0a:	6f 93       	push	r22
    1b0c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <square>
    1b10:	e0 e7       	ldi	r30, 0x70	; 112
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__fp_powser>
    1b18:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_round>
    1b1c:	2f 91       	pop	r18
    1b1e:	3f 91       	pop	r19
    1b20:	4f 91       	pop	r20
    1b22:	5f 91       	pop	r21
    1b24:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3x>
    1b28:	dd 23       	and	r29, r29
    1b2a:	51 f0       	breq	.+20     	; 0x1b40 <atan+0x58>
    1b2c:	90 58       	subi	r25, 0x80	; 128
    1b2e:	a2 ea       	ldi	r26, 0xA2	; 162
    1b30:	2a ed       	ldi	r18, 0xDA	; 218
    1b32:	3f e0       	ldi	r19, 0x0F	; 15
    1b34:	49 ec       	ldi	r20, 0xC9	; 201
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	d0 78       	andi	r29, 0x80	; 128
    1b3a:	5d 27       	eor	r21, r29
    1b3c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3x>
    1b40:	df 91       	pop	r29
    1b42:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__fp_round>

00001b46 <__divsf3>:
    1b46:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__divsf3x>
    1b4a:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__fp_round>
    1b4e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_pscB>
    1b52:	58 f0       	brcs	.+22     	; 0x1b6a <__divsf3+0x24>
    1b54:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__fp_pscA>
    1b58:	40 f0       	brcs	.+16     	; 0x1b6a <__divsf3+0x24>
    1b5a:	29 f4       	brne	.+10     	; 0x1b66 <__divsf3+0x20>
    1b5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <__divsf3+0x24>
    1b60:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__fp_inf>
    1b64:	51 11       	cpse	r21, r1
    1b66:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_szero>
    1b6a:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_nan>

00001b6e <__divsf3x>:
    1b6e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_split3>
    1b72:	68 f3       	brcs	.-38     	; 0x1b4e <__divsf3+0x8>

00001b74 <__divsf3_pse>:
    1b74:	99 23       	and	r25, r25
    1b76:	b1 f3       	breq	.-20     	; 0x1b64 <__divsf3+0x1e>
    1b78:	55 23       	and	r21, r21
    1b7a:	91 f3       	breq	.-28     	; 0x1b60 <__divsf3+0x1a>
    1b7c:	95 1b       	sub	r25, r21
    1b7e:	55 0b       	sbc	r21, r21
    1b80:	bb 27       	eor	r27, r27
    1b82:	aa 27       	eor	r26, r26
    1b84:	62 17       	cp	r22, r18
    1b86:	73 07       	cpc	r23, r19
    1b88:	84 07       	cpc	r24, r20
    1b8a:	38 f0       	brcs	.+14     	; 0x1b9a <__divsf3_pse+0x26>
    1b8c:	9f 5f       	subi	r25, 0xFF	; 255
    1b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b90:	22 0f       	add	r18, r18
    1b92:	33 1f       	adc	r19, r19
    1b94:	44 1f       	adc	r20, r20
    1b96:	aa 1f       	adc	r26, r26
    1b98:	a9 f3       	breq	.-22     	; 0x1b84 <__divsf3_pse+0x10>
    1b9a:	35 d0       	rcall	.+106    	; 0x1c06 <__divsf3_pse+0x92>
    1b9c:	0e 2e       	mov	r0, r30
    1b9e:	3a f0       	brmi	.+14     	; 0x1bae <__divsf3_pse+0x3a>
    1ba0:	e0 e8       	ldi	r30, 0x80	; 128
    1ba2:	32 d0       	rcall	.+100    	; 0x1c08 <__divsf3_pse+0x94>
    1ba4:	91 50       	subi	r25, 0x01	; 1
    1ba6:	50 40       	sbci	r21, 0x00	; 0
    1ba8:	e6 95       	lsr	r30
    1baa:	00 1c       	adc	r0, r0
    1bac:	ca f7       	brpl	.-14     	; 0x1ba0 <__divsf3_pse+0x2c>
    1bae:	2b d0       	rcall	.+86     	; 0x1c06 <__divsf3_pse+0x92>
    1bb0:	fe 2f       	mov	r31, r30
    1bb2:	29 d0       	rcall	.+82     	; 0x1c06 <__divsf3_pse+0x92>
    1bb4:	66 0f       	add	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	bb 1f       	adc	r27, r27
    1bbc:	26 17       	cp	r18, r22
    1bbe:	37 07       	cpc	r19, r23
    1bc0:	48 07       	cpc	r20, r24
    1bc2:	ab 07       	cpc	r26, r27
    1bc4:	b0 e8       	ldi	r27, 0x80	; 128
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <__divsf3_pse+0x56>
    1bc8:	bb 0b       	sbc	r27, r27
    1bca:	80 2d       	mov	r24, r0
    1bcc:	bf 01       	movw	r22, r30
    1bce:	ff 27       	eor	r31, r31
    1bd0:	93 58       	subi	r25, 0x83	; 131
    1bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd4:	3a f0       	brmi	.+14     	; 0x1be4 <__divsf3_pse+0x70>
    1bd6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bd8:	51 05       	cpc	r21, r1
    1bda:	78 f0       	brcs	.+30     	; 0x1bfa <__divsf3_pse+0x86>
    1bdc:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__fp_inf>
    1be0:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_szero>
    1be4:	5f 3f       	cpi	r21, 0xFF	; 255
    1be6:	e4 f3       	brlt	.-8      	; 0x1be0 <__divsf3_pse+0x6c>
    1be8:	98 3e       	cpi	r25, 0xE8	; 232
    1bea:	d4 f3       	brlt	.-12     	; 0x1be0 <__divsf3_pse+0x6c>
    1bec:	86 95       	lsr	r24
    1bee:	77 95       	ror	r23
    1bf0:	67 95       	ror	r22
    1bf2:	b7 95       	ror	r27
    1bf4:	f7 95       	ror	r31
    1bf6:	9f 5f       	subi	r25, 0xFF	; 255
    1bf8:	c9 f7       	brne	.-14     	; 0x1bec <__divsf3_pse+0x78>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	91 1d       	adc	r25, r1
    1bfe:	96 95       	lsr	r25
    1c00:	87 95       	ror	r24
    1c02:	97 f9       	bld	r25, 7
    1c04:	08 95       	ret
    1c06:	e1 e0       	ldi	r30, 0x01	; 1
    1c08:	66 0f       	add	r22, r22
    1c0a:	77 1f       	adc	r23, r23
    1c0c:	88 1f       	adc	r24, r24
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	62 17       	cp	r22, r18
    1c12:	73 07       	cpc	r23, r19
    1c14:	84 07       	cpc	r24, r20
    1c16:	ba 07       	cpc	r27, r26
    1c18:	20 f0       	brcs	.+8      	; 0x1c22 <__divsf3_pse+0xae>
    1c1a:	62 1b       	sub	r22, r18
    1c1c:	73 0b       	sbc	r23, r19
    1c1e:	84 0b       	sbc	r24, r20
    1c20:	ba 0b       	sbc	r27, r26
    1c22:	ee 1f       	adc	r30, r30
    1c24:	88 f7       	brcc	.-30     	; 0x1c08 <__divsf3_pse+0x94>
    1c26:	e0 95       	com	r30
    1c28:	08 95       	ret

00001c2a <__fixsfsi>:
    1c2a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
    1c2e:	68 94       	set
    1c30:	b1 11       	cpse	r27, r1
    1c32:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_szero>
    1c36:	08 95       	ret

00001c38 <__fixunssfsi>:
    1c38:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__fp_splitA>
    1c3c:	88 f0       	brcs	.+34     	; 0x1c60 <__fixunssfsi+0x28>
    1c3e:	9f 57       	subi	r25, 0x7F	; 127
    1c40:	98 f0       	brcs	.+38     	; 0x1c68 <__fixunssfsi+0x30>
    1c42:	b9 2f       	mov	r27, r25
    1c44:	99 27       	eor	r25, r25
    1c46:	b7 51       	subi	r27, 0x17	; 23
    1c48:	b0 f0       	brcs	.+44     	; 0x1c76 <__fixunssfsi+0x3e>
    1c4a:	e1 f0       	breq	.+56     	; 0x1c84 <__fixunssfsi+0x4c>
    1c4c:	66 0f       	add	r22, r22
    1c4e:	77 1f       	adc	r23, r23
    1c50:	88 1f       	adc	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	1a f0       	brmi	.+6      	; 0x1c5c <__fixunssfsi+0x24>
    1c56:	ba 95       	dec	r27
    1c58:	c9 f7       	brne	.-14     	; 0x1c4c <__fixunssfsi+0x14>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <__fixunssfsi+0x4c>
    1c5c:	b1 30       	cpi	r27, 0x01	; 1
    1c5e:	91 f0       	breq	.+36     	; 0x1c84 <__fixunssfsi+0x4c>
    1c60:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__fp_zero>
    1c64:	b1 e0       	ldi	r27, 0x01	; 1
    1c66:	08 95       	ret
    1c68:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__fp_zero>
    1c6c:	67 2f       	mov	r22, r23
    1c6e:	78 2f       	mov	r23, r24
    1c70:	88 27       	eor	r24, r24
    1c72:	b8 5f       	subi	r27, 0xF8	; 248
    1c74:	39 f0       	breq	.+14     	; 0x1c84 <__fixunssfsi+0x4c>
    1c76:	b9 3f       	cpi	r27, 0xF9	; 249
    1c78:	cc f3       	brlt	.-14     	; 0x1c6c <__fixunssfsi+0x34>
    1c7a:	86 95       	lsr	r24
    1c7c:	77 95       	ror	r23
    1c7e:	67 95       	ror	r22
    1c80:	b3 95       	inc	r27
    1c82:	d9 f7       	brne	.-10     	; 0x1c7a <__fixunssfsi+0x42>
    1c84:	3e f4       	brtc	.+14     	; 0x1c94 <__fixunssfsi+0x5c>
    1c86:	90 95       	com	r25
    1c88:	80 95       	com	r24
    1c8a:	70 95       	com	r23
    1c8c:	61 95       	neg	r22
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	8f 4f       	sbci	r24, 0xFF	; 255
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	08 95       	ret

00001c96 <__floatunsisf>:
    1c96:	e8 94       	clt
    1c98:	09 c0       	rjmp	.+18     	; 0x1cac <__floatsisf+0x12>

00001c9a <__floatsisf>:
    1c9a:	97 fb       	bst	r25, 7
    1c9c:	3e f4       	brtc	.+14     	; 0x1cac <__floatsisf+0x12>
    1c9e:	90 95       	com	r25
    1ca0:	80 95       	com	r24
    1ca2:	70 95       	com	r23
    1ca4:	61 95       	neg	r22
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    1caa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cac:	99 23       	and	r25, r25
    1cae:	a9 f0       	breq	.+42     	; 0x1cda <__floatsisf+0x40>
    1cb0:	f9 2f       	mov	r31, r25
    1cb2:	96 e9       	ldi	r25, 0x96	; 150
    1cb4:	bb 27       	eor	r27, r27
    1cb6:	93 95       	inc	r25
    1cb8:	f6 95       	lsr	r31
    1cba:	87 95       	ror	r24
    1cbc:	77 95       	ror	r23
    1cbe:	67 95       	ror	r22
    1cc0:	b7 95       	ror	r27
    1cc2:	f1 11       	cpse	r31, r1
    1cc4:	f8 cf       	rjmp	.-16     	; 0x1cb6 <__floatsisf+0x1c>
    1cc6:	fa f4       	brpl	.+62     	; 0x1d06 <__floatsisf+0x6c>
    1cc8:	bb 0f       	add	r27, r27
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <__floatsisf+0x36>
    1ccc:	60 ff       	sbrs	r22, 0
    1cce:	1b c0       	rjmp	.+54     	; 0x1d06 <__floatsisf+0x6c>
    1cd0:	6f 5f       	subi	r22, 0xFF	; 255
    1cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	16 c0       	rjmp	.+44     	; 0x1d06 <__floatsisf+0x6c>
    1cda:	88 23       	and	r24, r24
    1cdc:	11 f0       	breq	.+4      	; 0x1ce2 <__floatsisf+0x48>
    1cde:	96 e9       	ldi	r25, 0x96	; 150
    1ce0:	11 c0       	rjmp	.+34     	; 0x1d04 <__floatsisf+0x6a>
    1ce2:	77 23       	and	r23, r23
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <__floatsisf+0x54>
    1ce6:	9e e8       	ldi	r25, 0x8E	; 142
    1ce8:	87 2f       	mov	r24, r23
    1cea:	76 2f       	mov	r23, r22
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <__floatsisf+0x5e>
    1cee:	66 23       	and	r22, r22
    1cf0:	71 f0       	breq	.+28     	; 0x1d0e <__floatsisf+0x74>
    1cf2:	96 e8       	ldi	r25, 0x86	; 134
    1cf4:	86 2f       	mov	r24, r22
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	2a f0       	brmi	.+10     	; 0x1d06 <__floatsisf+0x6c>
    1cfc:	9a 95       	dec	r25
    1cfe:	66 0f       	add	r22, r22
    1d00:	77 1f       	adc	r23, r23
    1d02:	88 1f       	adc	r24, r24
    1d04:	da f7       	brpl	.-10     	; 0x1cfc <__floatsisf+0x62>
    1d06:	88 0f       	add	r24, r24
    1d08:	96 95       	lsr	r25
    1d0a:	87 95       	ror	r24
    1d0c:	97 f9       	bld	r25, 7
    1d0e:	08 95       	ret

00001d10 <__fp_inf>:
    1d10:	97 f9       	bld	r25, 7
    1d12:	9f 67       	ori	r25, 0x7F	; 127
    1d14:	80 e8       	ldi	r24, 0x80	; 128
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	08 95       	ret

00001d1c <__fp_nan>:
    1d1c:	9f ef       	ldi	r25, 0xFF	; 255
    1d1e:	80 ec       	ldi	r24, 0xC0	; 192
    1d20:	08 95       	ret

00001d22 <__fp_powser>:
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	1f 93       	push	r17
    1d28:	0f 93       	push	r16
    1d2a:	ff 92       	push	r15
    1d2c:	ef 92       	push	r14
    1d2e:	df 92       	push	r13
    1d30:	7b 01       	movw	r14, r22
    1d32:	8c 01       	movw	r16, r24
    1d34:	68 94       	set
    1d36:	06 c0       	rjmp	.+12     	; 0x1d44 <__fp_powser+0x22>
    1d38:	da 2e       	mov	r13, r26
    1d3a:	ef 01       	movw	r28, r30
    1d3c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3x>
    1d40:	fe 01       	movw	r30, r28
    1d42:	e8 94       	clt
    1d44:	a5 91       	lpm	r26, Z+
    1d46:	25 91       	lpm	r18, Z+
    1d48:	35 91       	lpm	r19, Z+
    1d4a:	45 91       	lpm	r20, Z+
    1d4c:	55 91       	lpm	r21, Z+
    1d4e:	a6 f3       	brts	.-24     	; 0x1d38 <__fp_powser+0x16>
    1d50:	ef 01       	movw	r28, r30
    1d52:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3x>
    1d56:	fe 01       	movw	r30, r28
    1d58:	97 01       	movw	r18, r14
    1d5a:	a8 01       	movw	r20, r16
    1d5c:	da 94       	dec	r13
    1d5e:	69 f7       	brne	.-38     	; 0x1d3a <__fp_powser+0x18>
    1d60:	df 90       	pop	r13
    1d62:	ef 90       	pop	r14
    1d64:	ff 90       	pop	r15
    1d66:	0f 91       	pop	r16
    1d68:	1f 91       	pop	r17
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <__fp_pscA>:
    1d70:	00 24       	eor	r0, r0
    1d72:	0a 94       	dec	r0
    1d74:	16 16       	cp	r1, r22
    1d76:	17 06       	cpc	r1, r23
    1d78:	18 06       	cpc	r1, r24
    1d7a:	09 06       	cpc	r0, r25
    1d7c:	08 95       	ret

00001d7e <__fp_pscB>:
    1d7e:	00 24       	eor	r0, r0
    1d80:	0a 94       	dec	r0
    1d82:	12 16       	cp	r1, r18
    1d84:	13 06       	cpc	r1, r19
    1d86:	14 06       	cpc	r1, r20
    1d88:	05 06       	cpc	r0, r21
    1d8a:	08 95       	ret

00001d8c <__fp_round>:
    1d8c:	09 2e       	mov	r0, r25
    1d8e:	03 94       	inc	r0
    1d90:	00 0c       	add	r0, r0
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <__fp_round+0xc>
    1d94:	88 23       	and	r24, r24
    1d96:	52 f0       	brmi	.+20     	; 0x1dac <__fp_round+0x20>
    1d98:	bb 0f       	add	r27, r27
    1d9a:	40 f4       	brcc	.+16     	; 0x1dac <__fp_round+0x20>
    1d9c:	bf 2b       	or	r27, r31
    1d9e:	11 f4       	brne	.+4      	; 0x1da4 <__fp_round+0x18>
    1da0:	60 ff       	sbrs	r22, 0
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <__fp_round+0x20>
    1da4:	6f 5f       	subi	r22, 0xFF	; 255
    1da6:	7f 4f       	sbci	r23, 0xFF	; 255
    1da8:	8f 4f       	sbci	r24, 0xFF	; 255
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	08 95       	ret

00001dae <__fp_split3>:
    1dae:	57 fd       	sbrc	r21, 7
    1db0:	90 58       	subi	r25, 0x80	; 128
    1db2:	44 0f       	add	r20, r20
    1db4:	55 1f       	adc	r21, r21
    1db6:	59 f0       	breq	.+22     	; 0x1dce <__fp_splitA+0x10>
    1db8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dba:	71 f0       	breq	.+28     	; 0x1dd8 <__fp_splitA+0x1a>
    1dbc:	47 95       	ror	r20

00001dbe <__fp_splitA>:
    1dbe:	88 0f       	add	r24, r24
    1dc0:	97 fb       	bst	r25, 7
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	61 f0       	breq	.+24     	; 0x1dde <__fp_splitA+0x20>
    1dc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc8:	79 f0       	breq	.+30     	; 0x1de8 <__fp_splitA+0x2a>
    1dca:	87 95       	ror	r24
    1dcc:	08 95       	ret
    1dce:	12 16       	cp	r1, r18
    1dd0:	13 06       	cpc	r1, r19
    1dd2:	14 06       	cpc	r1, r20
    1dd4:	55 1f       	adc	r21, r21
    1dd6:	f2 cf       	rjmp	.-28     	; 0x1dbc <__fp_split3+0xe>
    1dd8:	46 95       	lsr	r20
    1dda:	f1 df       	rcall	.-30     	; 0x1dbe <__fp_splitA>
    1ddc:	08 c0       	rjmp	.+16     	; 0x1dee <__fp_splitA+0x30>
    1dde:	16 16       	cp	r1, r22
    1de0:	17 06       	cpc	r1, r23
    1de2:	18 06       	cpc	r1, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	f1 cf       	rjmp	.-30     	; 0x1dca <__fp_splitA+0xc>
    1de8:	86 95       	lsr	r24
    1dea:	71 05       	cpc	r23, r1
    1dec:	61 05       	cpc	r22, r1
    1dee:	08 94       	sec
    1df0:	08 95       	ret

00001df2 <__fp_zero>:
    1df2:	e8 94       	clt

00001df4 <__fp_szero>:
    1df4:	bb 27       	eor	r27, r27
    1df6:	66 27       	eor	r22, r22
    1df8:	77 27       	eor	r23, r23
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	97 f9       	bld	r25, 7
    1dfe:	08 95       	ret

00001e00 <inverse>:
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	80 e8       	ldi	r24, 0x80	; 128
    1e0a:	9f e3       	ldi	r25, 0x3F	; 63
    1e0c:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__divsf3>

00001e10 <__mulsf3>:
    1e10:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3x>
    1e14:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__fp_round>
    1e18:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__fp_pscA>
    1e1c:	38 f0       	brcs	.+14     	; 0x1e2c <__mulsf3+0x1c>
    1e1e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_pscB>
    1e22:	20 f0       	brcs	.+8      	; 0x1e2c <__mulsf3+0x1c>
    1e24:	95 23       	and	r25, r21
    1e26:	11 f0       	breq	.+4      	; 0x1e2c <__mulsf3+0x1c>
    1e28:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__fp_inf>
    1e2c:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_nan>
    1e30:	11 24       	eor	r1, r1
    1e32:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_szero>

00001e36 <__mulsf3x>:
    1e36:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_split3>
    1e3a:	70 f3       	brcs	.-36     	; 0x1e18 <__mulsf3+0x8>

00001e3c <__mulsf3_pse>:
    1e3c:	95 9f       	mul	r25, r21
    1e3e:	c1 f3       	breq	.-16     	; 0x1e30 <__mulsf3+0x20>
    1e40:	95 0f       	add	r25, r21
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	55 1f       	adc	r21, r21
    1e46:	62 9f       	mul	r22, r18
    1e48:	f0 01       	movw	r30, r0
    1e4a:	72 9f       	mul	r23, r18
    1e4c:	bb 27       	eor	r27, r27
    1e4e:	f0 0d       	add	r31, r0
    1e50:	b1 1d       	adc	r27, r1
    1e52:	63 9f       	mul	r22, r19
    1e54:	aa 27       	eor	r26, r26
    1e56:	f0 0d       	add	r31, r0
    1e58:	b1 1d       	adc	r27, r1
    1e5a:	aa 1f       	adc	r26, r26
    1e5c:	64 9f       	mul	r22, r20
    1e5e:	66 27       	eor	r22, r22
    1e60:	b0 0d       	add	r27, r0
    1e62:	a1 1d       	adc	r26, r1
    1e64:	66 1f       	adc	r22, r22
    1e66:	82 9f       	mul	r24, r18
    1e68:	22 27       	eor	r18, r18
    1e6a:	b0 0d       	add	r27, r0
    1e6c:	a1 1d       	adc	r26, r1
    1e6e:	62 1f       	adc	r22, r18
    1e70:	73 9f       	mul	r23, r19
    1e72:	b0 0d       	add	r27, r0
    1e74:	a1 1d       	adc	r26, r1
    1e76:	62 1f       	adc	r22, r18
    1e78:	83 9f       	mul	r24, r19
    1e7a:	a0 0d       	add	r26, r0
    1e7c:	61 1d       	adc	r22, r1
    1e7e:	22 1f       	adc	r18, r18
    1e80:	74 9f       	mul	r23, r20
    1e82:	33 27       	eor	r19, r19
    1e84:	a0 0d       	add	r26, r0
    1e86:	61 1d       	adc	r22, r1
    1e88:	23 1f       	adc	r18, r19
    1e8a:	84 9f       	mul	r24, r20
    1e8c:	60 0d       	add	r22, r0
    1e8e:	21 1d       	adc	r18, r1
    1e90:	82 2f       	mov	r24, r18
    1e92:	76 2f       	mov	r23, r22
    1e94:	6a 2f       	mov	r22, r26
    1e96:	11 24       	eor	r1, r1
    1e98:	9f 57       	subi	r25, 0x7F	; 127
    1e9a:	50 40       	sbci	r21, 0x00	; 0
    1e9c:	9a f0       	brmi	.+38     	; 0x1ec4 <__mulsf3_pse+0x88>
    1e9e:	f1 f0       	breq	.+60     	; 0x1edc <__mulsf3_pse+0xa0>
    1ea0:	88 23       	and	r24, r24
    1ea2:	4a f0       	brmi	.+18     	; 0x1eb6 <__mulsf3_pse+0x7a>
    1ea4:	ee 0f       	add	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
    1ea8:	bb 1f       	adc	r27, r27
    1eaa:	66 1f       	adc	r22, r22
    1eac:	77 1f       	adc	r23, r23
    1eae:	88 1f       	adc	r24, r24
    1eb0:	91 50       	subi	r25, 0x01	; 1
    1eb2:	50 40       	sbci	r21, 0x00	; 0
    1eb4:	a9 f7       	brne	.-22     	; 0x1ea0 <__mulsf3_pse+0x64>
    1eb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb8:	51 05       	cpc	r21, r1
    1eba:	80 f0       	brcs	.+32     	; 0x1edc <__mulsf3_pse+0xa0>
    1ebc:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__fp_inf>
    1ec0:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_szero>
    1ec4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec6:	e4 f3       	brlt	.-8      	; 0x1ec0 <__mulsf3_pse+0x84>
    1ec8:	98 3e       	cpi	r25, 0xE8	; 232
    1eca:	d4 f3       	brlt	.-12     	; 0x1ec0 <__mulsf3_pse+0x84>
    1ecc:	86 95       	lsr	r24
    1ece:	77 95       	ror	r23
    1ed0:	67 95       	ror	r22
    1ed2:	b7 95       	ror	r27
    1ed4:	f7 95       	ror	r31
    1ed6:	e7 95       	ror	r30
    1ed8:	9f 5f       	subi	r25, 0xFF	; 255
    1eda:	c1 f7       	brne	.-16     	; 0x1ecc <__mulsf3_pse+0x90>
    1edc:	fe 2b       	or	r31, r30
    1ede:	88 0f       	add	r24, r24
    1ee0:	91 1d       	adc	r25, r1
    1ee2:	96 95       	lsr	r25
    1ee4:	87 95       	ror	r24
    1ee6:	97 f9       	bld	r25, 7
    1ee8:	08 95       	ret

00001eea <square>:
    1eea:	9b 01       	movw	r18, r22
    1eec:	ac 01       	movw	r20, r24
    1eee:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__mulsf3>

00001ef2 <__subsf3>:
    1ef2:	50 58       	subi	r21, 0x80	; 128

00001ef4 <__addsf3>:
    1ef4:	bb 27       	eor	r27, r27
    1ef6:	aa 27       	eor	r26, r26
    1ef8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3x>
    1efc:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__fp_round>
    1f00:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__fp_pscA>
    1f04:	38 f0       	brcs	.+14     	; 0x1f14 <__addsf3+0x20>
    1f06:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_pscB>
    1f0a:	20 f0       	brcs	.+8      	; 0x1f14 <__addsf3+0x20>
    1f0c:	39 f4       	brne	.+14     	; 0x1f1c <__addsf3+0x28>
    1f0e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f10:	19 f4       	brne	.+6      	; 0x1f18 <__addsf3+0x24>
    1f12:	26 f4       	brtc	.+8      	; 0x1f1c <__addsf3+0x28>
    1f14:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_nan>
    1f18:	0e f4       	brtc	.+2      	; 0x1f1c <__addsf3+0x28>
    1f1a:	e0 95       	com	r30
    1f1c:	e7 fb       	bst	r30, 7
    1f1e:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__fp_inf>

00001f22 <__addsf3x>:
    1f22:	e9 2f       	mov	r30, r25
    1f24:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_split3>
    1f28:	58 f3       	brcs	.-42     	; 0x1f00 <__addsf3+0xc>
    1f2a:	ba 17       	cp	r27, r26
    1f2c:	62 07       	cpc	r22, r18
    1f2e:	73 07       	cpc	r23, r19
    1f30:	84 07       	cpc	r24, r20
    1f32:	95 07       	cpc	r25, r21
    1f34:	20 f0       	brcs	.+8      	; 0x1f3e <__addsf3x+0x1c>
    1f36:	79 f4       	brne	.+30     	; 0x1f56 <__addsf3x+0x34>
    1f38:	a6 f5       	brtc	.+104    	; 0x1fa2 <__addsf3x+0x80>
    1f3a:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__fp_zero>
    1f3e:	0e f4       	brtc	.+2      	; 0x1f42 <__addsf3x+0x20>
    1f40:	e0 95       	com	r30
    1f42:	0b 2e       	mov	r0, r27
    1f44:	ba 2f       	mov	r27, r26
    1f46:	a0 2d       	mov	r26, r0
    1f48:	0b 01       	movw	r0, r22
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	90 01       	movw	r18, r0
    1f4e:	0c 01       	movw	r0, r24
    1f50:	ca 01       	movw	r24, r20
    1f52:	a0 01       	movw	r20, r0
    1f54:	11 24       	eor	r1, r1
    1f56:	ff 27       	eor	r31, r31
    1f58:	59 1b       	sub	r21, r25
    1f5a:	99 f0       	breq	.+38     	; 0x1f82 <__addsf3x+0x60>
    1f5c:	59 3f       	cpi	r21, 0xF9	; 249
    1f5e:	50 f4       	brcc	.+20     	; 0x1f74 <__addsf3x+0x52>
    1f60:	50 3e       	cpi	r21, 0xE0	; 224
    1f62:	68 f1       	brcs	.+90     	; 0x1fbe <__addsf3x+0x9c>
    1f64:	1a 16       	cp	r1, r26
    1f66:	f0 40       	sbci	r31, 0x00	; 0
    1f68:	a2 2f       	mov	r26, r18
    1f6a:	23 2f       	mov	r18, r19
    1f6c:	34 2f       	mov	r19, r20
    1f6e:	44 27       	eor	r20, r20
    1f70:	58 5f       	subi	r21, 0xF8	; 248
    1f72:	f3 cf       	rjmp	.-26     	; 0x1f5a <__addsf3x+0x38>
    1f74:	46 95       	lsr	r20
    1f76:	37 95       	ror	r19
    1f78:	27 95       	ror	r18
    1f7a:	a7 95       	ror	r26
    1f7c:	f0 40       	sbci	r31, 0x00	; 0
    1f7e:	53 95       	inc	r21
    1f80:	c9 f7       	brne	.-14     	; 0x1f74 <__addsf3x+0x52>
    1f82:	7e f4       	brtc	.+30     	; 0x1fa2 <__addsf3x+0x80>
    1f84:	1f 16       	cp	r1, r31
    1f86:	ba 0b       	sbc	r27, r26
    1f88:	62 0b       	sbc	r22, r18
    1f8a:	73 0b       	sbc	r23, r19
    1f8c:	84 0b       	sbc	r24, r20
    1f8e:	ba f0       	brmi	.+46     	; 0x1fbe <__addsf3x+0x9c>
    1f90:	91 50       	subi	r25, 0x01	; 1
    1f92:	a1 f0       	breq	.+40     	; 0x1fbc <__addsf3x+0x9a>
    1f94:	ff 0f       	add	r31, r31
    1f96:	bb 1f       	adc	r27, r27
    1f98:	66 1f       	adc	r22, r22
    1f9a:	77 1f       	adc	r23, r23
    1f9c:	88 1f       	adc	r24, r24
    1f9e:	c2 f7       	brpl	.-16     	; 0x1f90 <__addsf3x+0x6e>
    1fa0:	0e c0       	rjmp	.+28     	; 0x1fbe <__addsf3x+0x9c>
    1fa2:	ba 0f       	add	r27, r26
    1fa4:	62 1f       	adc	r22, r18
    1fa6:	73 1f       	adc	r23, r19
    1fa8:	84 1f       	adc	r24, r20
    1faa:	48 f4       	brcc	.+18     	; 0x1fbe <__addsf3x+0x9c>
    1fac:	87 95       	ror	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	b7 95       	ror	r27
    1fb4:	f7 95       	ror	r31
    1fb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1fb8:	08 f0       	brcs	.+2      	; 0x1fbc <__addsf3x+0x9a>
    1fba:	b0 cf       	rjmp	.-160    	; 0x1f1c <__addsf3+0x28>
    1fbc:	93 95       	inc	r25
    1fbe:	88 0f       	add	r24, r24
    1fc0:	08 f0       	brcs	.+2      	; 0x1fc4 <__addsf3x+0xa2>
    1fc2:	99 27       	eor	r25, r25
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	97 95       	ror	r25
    1fc8:	87 95       	ror	r24
    1fca:	08 95       	ret

00001fcc <__divmodhi4>:
    1fcc:	97 fb       	bst	r25, 7
    1fce:	07 2e       	mov	r0, r23
    1fd0:	16 f4       	brtc	.+4      	; 0x1fd6 <__divmodhi4+0xa>
    1fd2:	00 94       	com	r0
    1fd4:	07 d0       	rcall	.+14     	; 0x1fe4 <__divmodhi4_neg1>
    1fd6:	77 fd       	sbrc	r23, 7
    1fd8:	09 d0       	rcall	.+18     	; 0x1fec <__divmodhi4_neg2>
    1fda:	0e 94 1c 10 	call	0x2038	; 0x2038 <__udivmodhi4>
    1fde:	07 fc       	sbrc	r0, 7
    1fe0:	05 d0       	rcall	.+10     	; 0x1fec <__divmodhi4_neg2>
    1fe2:	3e f4       	brtc	.+14     	; 0x1ff2 <__divmodhi4_exit>

00001fe4 <__divmodhi4_neg1>:
    1fe4:	90 95       	com	r25
    1fe6:	81 95       	neg	r24
    1fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fea:	08 95       	ret

00001fec <__divmodhi4_neg2>:
    1fec:	70 95       	com	r23
    1fee:	61 95       	neg	r22
    1ff0:	7f 4f       	sbci	r23, 0xFF	; 255

00001ff2 <__divmodhi4_exit>:
    1ff2:	08 95       	ret

00001ff4 <__udivmodsi4>:
    1ff4:	a1 e2       	ldi	r26, 0x21	; 33
    1ff6:	1a 2e       	mov	r1, r26
    1ff8:	aa 1b       	sub	r26, r26
    1ffa:	bb 1b       	sub	r27, r27
    1ffc:	fd 01       	movw	r30, r26
    1ffe:	0d c0       	rjmp	.+26     	; 0x201a <__udivmodsi4_ep>

00002000 <__udivmodsi4_loop>:
    2000:	aa 1f       	adc	r26, r26
    2002:	bb 1f       	adc	r27, r27
    2004:	ee 1f       	adc	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	a2 17       	cp	r26, r18
    200a:	b3 07       	cpc	r27, r19
    200c:	e4 07       	cpc	r30, r20
    200e:	f5 07       	cpc	r31, r21
    2010:	20 f0       	brcs	.+8      	; 0x201a <__udivmodsi4_ep>
    2012:	a2 1b       	sub	r26, r18
    2014:	b3 0b       	sbc	r27, r19
    2016:	e4 0b       	sbc	r30, r20
    2018:	f5 0b       	sbc	r31, r21

0000201a <__udivmodsi4_ep>:
    201a:	66 1f       	adc	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	1a 94       	dec	r1
    2024:	69 f7       	brne	.-38     	; 0x2000 <__udivmodsi4_loop>
    2026:	60 95       	com	r22
    2028:	70 95       	com	r23
    202a:	80 95       	com	r24
    202c:	90 95       	com	r25
    202e:	9b 01       	movw	r18, r22
    2030:	ac 01       	movw	r20, r24
    2032:	bd 01       	movw	r22, r26
    2034:	cf 01       	movw	r24, r30
    2036:	08 95       	ret

00002038 <__udivmodhi4>:
    2038:	aa 1b       	sub	r26, r26
    203a:	bb 1b       	sub	r27, r27
    203c:	51 e1       	ldi	r21, 0x11	; 17
    203e:	07 c0       	rjmp	.+14     	; 0x204e <__udivmodhi4_ep>

00002040 <__udivmodhi4_loop>:
    2040:	aa 1f       	adc	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	a6 17       	cp	r26, r22
    2046:	b7 07       	cpc	r27, r23
    2048:	10 f0       	brcs	.+4      	; 0x204e <__udivmodhi4_ep>
    204a:	a6 1b       	sub	r26, r22
    204c:	b7 0b       	sbc	r27, r23

0000204e <__udivmodhi4_ep>:
    204e:	88 1f       	adc	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	5a 95       	dec	r21
    2054:	a9 f7       	brne	.-22     	; 0x2040 <__udivmodhi4_loop>
    2056:	80 95       	com	r24
    2058:	90 95       	com	r25
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	08 95       	ret

00002060 <__itoa_ncheck>:
    2060:	bb 27       	eor	r27, r27
    2062:	4a 30       	cpi	r20, 0x0A	; 10
    2064:	31 f4       	brne	.+12     	; 0x2072 <__itoa_ncheck+0x12>
    2066:	99 23       	and	r25, r25
    2068:	22 f4       	brpl	.+8      	; 0x2072 <__itoa_ncheck+0x12>
    206a:	bd e2       	ldi	r27, 0x2D	; 45
    206c:	90 95       	com	r25
    206e:	81 95       	neg	r24
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__utoa_common>

00002076 <__utoa_ncheck>:
    2076:	bb 27       	eor	r27, r27

00002078 <__utoa_common>:
    2078:	fb 01       	movw	r30, r22
    207a:	55 27       	eor	r21, r21
    207c:	aa 27       	eor	r26, r26
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	aa 1f       	adc	r26, r26
    2084:	a4 17       	cp	r26, r20
    2086:	10 f0       	brcs	.+4      	; 0x208c <__utoa_common+0x14>
    2088:	a4 1b       	sub	r26, r20
    208a:	83 95       	inc	r24
    208c:	50 51       	subi	r21, 0x10	; 16
    208e:	b9 f7       	brne	.-18     	; 0x207e <__utoa_common+0x6>
    2090:	a0 5d       	subi	r26, 0xD0	; 208
    2092:	aa 33       	cpi	r26, 0x3A	; 58
    2094:	08 f0       	brcs	.+2      	; 0x2098 <__utoa_common+0x20>
    2096:	a9 5d       	subi	r26, 0xD9	; 217
    2098:	a1 93       	st	Z+, r26
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	79 f7       	brne	.-34     	; 0x207c <__utoa_common+0x4>
    209e:	b1 11       	cpse	r27, r1
    20a0:	b1 93       	st	Z+, r27
    20a2:	11 92       	st	Z+, r1
    20a4:	cb 01       	movw	r24, r22
    20a6:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <strrev>

000020aa <fdevopen>:
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	31 f4       	brne	.+12     	; 0x20c2 <fdevopen+0x18>
    20b6:	61 15       	cp	r22, r1
    20b8:	71 05       	cpc	r23, r1
    20ba:	19 f4       	brne	.+6      	; 0x20c2 <fdevopen+0x18>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	3a c0       	rjmp	.+116    	; 0x2136 <fdevopen+0x8c>
    20c2:	8b 01       	movw	r16, r22
    20c4:	ec 01       	movw	r28, r24
    20c6:	6e e0       	ldi	r22, 0x0E	; 14
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 97 12 	call	0x252e	; 0x252e <calloc>
    20d2:	fc 01       	movw	r30, r24
    20d4:	89 2b       	or	r24, r25
    20d6:	91 f3       	breq	.-28     	; 0x20bc <fdevopen+0x12>
    20d8:	80 e8       	ldi	r24, 0x80	; 128
    20da:	83 83       	std	Z+3, r24	; 0x03
    20dc:	01 15       	cp	r16, r1
    20de:	11 05       	cpc	r17, r1
    20e0:	71 f0       	breq	.+28     	; 0x20fe <fdevopen+0x54>
    20e2:	13 87       	std	Z+11, r17	; 0x0b
    20e4:	02 87       	std	Z+10, r16	; 0x0a
    20e6:	81 e8       	ldi	r24, 0x81	; 129
    20e8:	83 83       	std	Z+3, r24	; 0x03
    20ea:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__iob>
    20ee:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <__iob+0x1>
    20f2:	89 2b       	or	r24, r25
    20f4:	21 f4       	brne	.+8      	; 0x20fe <fdevopen+0x54>
    20f6:	f0 93 0b 04 	sts	0x040B, r31	; 0x80040b <__iob+0x1>
    20fa:	e0 93 0a 04 	sts	0x040A, r30	; 0x80040a <__iob>
    20fe:	20 97       	sbiw	r28, 0x00	; 0
    2100:	c9 f0       	breq	.+50     	; 0x2134 <fdevopen+0x8a>
    2102:	d1 87       	std	Z+9, r29	; 0x09
    2104:	c0 87       	std	Z+8, r28	; 0x08
    2106:	83 81       	ldd	r24, Z+3	; 0x03
    2108:	82 60       	ori	r24, 0x02	; 2
    210a:	83 83       	std	Z+3, r24	; 0x03
    210c:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__iob+0x2>
    2110:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <__iob+0x3>
    2114:	89 2b       	or	r24, r25
    2116:	71 f4       	brne	.+28     	; 0x2134 <fdevopen+0x8a>
    2118:	f0 93 0d 04 	sts	0x040D, r31	; 0x80040d <__iob+0x3>
    211c:	e0 93 0c 04 	sts	0x040C, r30	; 0x80040c <__iob+0x2>
    2120:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <__iob+0x4>
    2124:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <__iob+0x5>
    2128:	89 2b       	or	r24, r25
    212a:	21 f4       	brne	.+8      	; 0x2134 <fdevopen+0x8a>
    212c:	f0 93 0f 04 	sts	0x040F, r31	; 0x80040f <__iob+0x5>
    2130:	e0 93 0e 04 	sts	0x040E, r30	; 0x80040e <__iob+0x4>
    2134:	cf 01       	movw	r24, r30
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	08 95       	ret

00002140 <printf>:
    2140:	a0 e0       	ldi	r26, 0x00	; 0
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e6 ea       	ldi	r30, 0xA6	; 166
    2146:	f0 e1       	ldi	r31, 0x10	; 16
    2148:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__prologue_saves__+0x20>
    214c:	ae 01       	movw	r20, r28
    214e:	4b 5f       	subi	r20, 0xFB	; 251
    2150:	5f 4f       	sbci	r21, 0xFF	; 255
    2152:	fa 01       	movw	r30, r20
    2154:	61 91       	ld	r22, Z+
    2156:	71 91       	ld	r23, Z+
    2158:	af 01       	movw	r20, r30
    215a:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__iob+0x2>
    215e:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <__iob+0x3>
    2162:	0e 94 b6 10 	call	0x216c	; 0x216c <vfprintf>
    2166:	e2 e0       	ldi	r30, 0x02	; 2
    2168:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__epilogue_restores__+0x20>

0000216c <vfprintf>:
    216c:	ab e0       	ldi	r26, 0x0B	; 11
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	ec eb       	ldi	r30, 0xBC	; 188
    2172:	f0 e1       	ldi	r31, 0x10	; 16
    2174:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__>
    2178:	6c 01       	movw	r12, r24
    217a:	7b 01       	movw	r14, r22
    217c:	8a 01       	movw	r16, r20
    217e:	fc 01       	movw	r30, r24
    2180:	17 82       	std	Z+7, r1	; 0x07
    2182:	16 82       	std	Z+6, r1	; 0x06
    2184:	83 81       	ldd	r24, Z+3	; 0x03
    2186:	81 ff       	sbrs	r24, 1
    2188:	cc c1       	rjmp	.+920    	; 0x2522 <vfprintf+0x3b6>
    218a:	ce 01       	movw	r24, r28
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	3c 01       	movw	r6, r24
    2190:	f6 01       	movw	r30, r12
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	f7 01       	movw	r30, r14
    2196:	93 fd       	sbrc	r25, 3
    2198:	85 91       	lpm	r24, Z+
    219a:	93 ff       	sbrs	r25, 3
    219c:	81 91       	ld	r24, Z+
    219e:	7f 01       	movw	r14, r30
    21a0:	88 23       	and	r24, r24
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <vfprintf+0x3a>
    21a4:	ba c1       	rjmp	.+884    	; 0x251a <vfprintf+0x3ae>
    21a6:	85 32       	cpi	r24, 0x25	; 37
    21a8:	39 f4       	brne	.+14     	; 0x21b8 <vfprintf+0x4c>
    21aa:	93 fd       	sbrc	r25, 3
    21ac:	85 91       	lpm	r24, Z+
    21ae:	93 ff       	sbrs	r25, 3
    21b0:	81 91       	ld	r24, Z+
    21b2:	7f 01       	movw	r14, r30
    21b4:	85 32       	cpi	r24, 0x25	; 37
    21b6:	29 f4       	brne	.+10     	; 0x21c2 <vfprintf+0x56>
    21b8:	b6 01       	movw	r22, r12
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    21c0:	e7 cf       	rjmp	.-50     	; 0x2190 <vfprintf+0x24>
    21c2:	91 2c       	mov	r9, r1
    21c4:	21 2c       	mov	r2, r1
    21c6:	31 2c       	mov	r3, r1
    21c8:	ff e1       	ldi	r31, 0x1F	; 31
    21ca:	f3 15       	cp	r31, r3
    21cc:	d8 f0       	brcs	.+54     	; 0x2204 <vfprintf+0x98>
    21ce:	8b 32       	cpi	r24, 0x2B	; 43
    21d0:	79 f0       	breq	.+30     	; 0x21f0 <vfprintf+0x84>
    21d2:	38 f4       	brcc	.+14     	; 0x21e2 <vfprintf+0x76>
    21d4:	80 32       	cpi	r24, 0x20	; 32
    21d6:	79 f0       	breq	.+30     	; 0x21f6 <vfprintf+0x8a>
    21d8:	83 32       	cpi	r24, 0x23	; 35
    21da:	a1 f4       	brne	.+40     	; 0x2204 <vfprintf+0x98>
    21dc:	23 2d       	mov	r18, r3
    21de:	20 61       	ori	r18, 0x10	; 16
    21e0:	1d c0       	rjmp	.+58     	; 0x221c <vfprintf+0xb0>
    21e2:	8d 32       	cpi	r24, 0x2D	; 45
    21e4:	61 f0       	breq	.+24     	; 0x21fe <vfprintf+0x92>
    21e6:	80 33       	cpi	r24, 0x30	; 48
    21e8:	69 f4       	brne	.+26     	; 0x2204 <vfprintf+0x98>
    21ea:	23 2d       	mov	r18, r3
    21ec:	21 60       	ori	r18, 0x01	; 1
    21ee:	16 c0       	rjmp	.+44     	; 0x221c <vfprintf+0xb0>
    21f0:	83 2d       	mov	r24, r3
    21f2:	82 60       	ori	r24, 0x02	; 2
    21f4:	38 2e       	mov	r3, r24
    21f6:	e3 2d       	mov	r30, r3
    21f8:	e4 60       	ori	r30, 0x04	; 4
    21fa:	3e 2e       	mov	r3, r30
    21fc:	2a c0       	rjmp	.+84     	; 0x2252 <vfprintf+0xe6>
    21fe:	f3 2d       	mov	r31, r3
    2200:	f8 60       	ori	r31, 0x08	; 8
    2202:	1d c0       	rjmp	.+58     	; 0x223e <vfprintf+0xd2>
    2204:	37 fc       	sbrc	r3, 7
    2206:	2d c0       	rjmp	.+90     	; 0x2262 <vfprintf+0xf6>
    2208:	20 ed       	ldi	r18, 0xD0	; 208
    220a:	28 0f       	add	r18, r24
    220c:	2a 30       	cpi	r18, 0x0A	; 10
    220e:	40 f0       	brcs	.+16     	; 0x2220 <vfprintf+0xb4>
    2210:	8e 32       	cpi	r24, 0x2E	; 46
    2212:	b9 f4       	brne	.+46     	; 0x2242 <vfprintf+0xd6>
    2214:	36 fc       	sbrc	r3, 6
    2216:	81 c1       	rjmp	.+770    	; 0x251a <vfprintf+0x3ae>
    2218:	23 2d       	mov	r18, r3
    221a:	20 64       	ori	r18, 0x40	; 64
    221c:	32 2e       	mov	r3, r18
    221e:	19 c0       	rjmp	.+50     	; 0x2252 <vfprintf+0xe6>
    2220:	36 fe       	sbrs	r3, 6
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <vfprintf+0xc4>
    2224:	8a e0       	ldi	r24, 0x0A	; 10
    2226:	98 9e       	mul	r9, r24
    2228:	20 0d       	add	r18, r0
    222a:	11 24       	eor	r1, r1
    222c:	92 2e       	mov	r9, r18
    222e:	11 c0       	rjmp	.+34     	; 0x2252 <vfprintf+0xe6>
    2230:	ea e0       	ldi	r30, 0x0A	; 10
    2232:	2e 9e       	mul	r2, r30
    2234:	20 0d       	add	r18, r0
    2236:	11 24       	eor	r1, r1
    2238:	22 2e       	mov	r2, r18
    223a:	f3 2d       	mov	r31, r3
    223c:	f0 62       	ori	r31, 0x20	; 32
    223e:	3f 2e       	mov	r3, r31
    2240:	08 c0       	rjmp	.+16     	; 0x2252 <vfprintf+0xe6>
    2242:	8c 36       	cpi	r24, 0x6C	; 108
    2244:	21 f4       	brne	.+8      	; 0x224e <vfprintf+0xe2>
    2246:	83 2d       	mov	r24, r3
    2248:	80 68       	ori	r24, 0x80	; 128
    224a:	38 2e       	mov	r3, r24
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <vfprintf+0xe6>
    224e:	88 36       	cpi	r24, 0x68	; 104
    2250:	41 f4       	brne	.+16     	; 0x2262 <vfprintf+0xf6>
    2252:	f7 01       	movw	r30, r14
    2254:	93 fd       	sbrc	r25, 3
    2256:	85 91       	lpm	r24, Z+
    2258:	93 ff       	sbrs	r25, 3
    225a:	81 91       	ld	r24, Z+
    225c:	7f 01       	movw	r14, r30
    225e:	81 11       	cpse	r24, r1
    2260:	b3 cf       	rjmp	.-154    	; 0x21c8 <vfprintf+0x5c>
    2262:	98 2f       	mov	r25, r24
    2264:	9f 7d       	andi	r25, 0xDF	; 223
    2266:	95 54       	subi	r25, 0x45	; 69
    2268:	93 30       	cpi	r25, 0x03	; 3
    226a:	28 f4       	brcc	.+10     	; 0x2276 <vfprintf+0x10a>
    226c:	0c 5f       	subi	r16, 0xFC	; 252
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	9f e3       	ldi	r25, 0x3F	; 63
    2272:	99 83       	std	Y+1, r25	; 0x01
    2274:	0d c0       	rjmp	.+26     	; 0x2290 <vfprintf+0x124>
    2276:	83 36       	cpi	r24, 0x63	; 99
    2278:	31 f0       	breq	.+12     	; 0x2286 <vfprintf+0x11a>
    227a:	83 37       	cpi	r24, 0x73	; 115
    227c:	71 f0       	breq	.+28     	; 0x229a <vfprintf+0x12e>
    227e:	83 35       	cpi	r24, 0x53	; 83
    2280:	09 f0       	breq	.+2      	; 0x2284 <vfprintf+0x118>
    2282:	59 c0       	rjmp	.+178    	; 0x2336 <vfprintf+0x1ca>
    2284:	21 c0       	rjmp	.+66     	; 0x22c8 <vfprintf+0x15c>
    2286:	f8 01       	movw	r30, r16
    2288:	80 81       	ld	r24, Z
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	0e 5f       	subi	r16, 0xFE	; 254
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	88 24       	eor	r8, r8
    2292:	83 94       	inc	r8
    2294:	91 2c       	mov	r9, r1
    2296:	53 01       	movw	r10, r6
    2298:	13 c0       	rjmp	.+38     	; 0x22c0 <vfprintf+0x154>
    229a:	28 01       	movw	r4, r16
    229c:	f2 e0       	ldi	r31, 0x02	; 2
    229e:	4f 0e       	add	r4, r31
    22a0:	51 1c       	adc	r5, r1
    22a2:	f8 01       	movw	r30, r16
    22a4:	a0 80       	ld	r10, Z
    22a6:	b1 80       	ldd	r11, Z+1	; 0x01
    22a8:	36 fe       	sbrs	r3, 6
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <vfprintf+0x146>
    22ac:	69 2d       	mov	r22, r9
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <vfprintf+0x14a>
    22b2:	6f ef       	ldi	r22, 0xFF	; 255
    22b4:	7f ef       	ldi	r23, 0xFF	; 255
    22b6:	c5 01       	movw	r24, r10
    22b8:	0e 94 e6 13 	call	0x27cc	; 0x27cc <strnlen>
    22bc:	4c 01       	movw	r8, r24
    22be:	82 01       	movw	r16, r4
    22c0:	f3 2d       	mov	r31, r3
    22c2:	ff 77       	andi	r31, 0x7F	; 127
    22c4:	3f 2e       	mov	r3, r31
    22c6:	16 c0       	rjmp	.+44     	; 0x22f4 <vfprintf+0x188>
    22c8:	28 01       	movw	r4, r16
    22ca:	22 e0       	ldi	r18, 0x02	; 2
    22cc:	42 0e       	add	r4, r18
    22ce:	51 1c       	adc	r5, r1
    22d0:	f8 01       	movw	r30, r16
    22d2:	a0 80       	ld	r10, Z
    22d4:	b1 80       	ldd	r11, Z+1	; 0x01
    22d6:	36 fe       	sbrs	r3, 6
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <vfprintf+0x174>
    22da:	69 2d       	mov	r22, r9
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <vfprintf+0x178>
    22e0:	6f ef       	ldi	r22, 0xFF	; 255
    22e2:	7f ef       	ldi	r23, 0xFF	; 255
    22e4:	c5 01       	movw	r24, r10
    22e6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <strnlen_P>
    22ea:	4c 01       	movw	r8, r24
    22ec:	f3 2d       	mov	r31, r3
    22ee:	f0 68       	ori	r31, 0x80	; 128
    22f0:	3f 2e       	mov	r3, r31
    22f2:	82 01       	movw	r16, r4
    22f4:	33 fc       	sbrc	r3, 3
    22f6:	1b c0       	rjmp	.+54     	; 0x232e <vfprintf+0x1c2>
    22f8:	82 2d       	mov	r24, r2
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	88 16       	cp	r8, r24
    22fe:	99 06       	cpc	r9, r25
    2300:	b0 f4       	brcc	.+44     	; 0x232e <vfprintf+0x1c2>
    2302:	b6 01       	movw	r22, r12
    2304:	80 e2       	ldi	r24, 0x20	; 32
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    230c:	2a 94       	dec	r2
    230e:	f4 cf       	rjmp	.-24     	; 0x22f8 <vfprintf+0x18c>
    2310:	f5 01       	movw	r30, r10
    2312:	37 fc       	sbrc	r3, 7
    2314:	85 91       	lpm	r24, Z+
    2316:	37 fe       	sbrs	r3, 7
    2318:	81 91       	ld	r24, Z+
    231a:	5f 01       	movw	r10, r30
    231c:	b6 01       	movw	r22, r12
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    2324:	21 10       	cpse	r2, r1
    2326:	2a 94       	dec	r2
    2328:	21 e0       	ldi	r18, 0x01	; 1
    232a:	82 1a       	sub	r8, r18
    232c:	91 08       	sbc	r9, r1
    232e:	81 14       	cp	r8, r1
    2330:	91 04       	cpc	r9, r1
    2332:	71 f7       	brne	.-36     	; 0x2310 <vfprintf+0x1a4>
    2334:	e8 c0       	rjmp	.+464    	; 0x2506 <vfprintf+0x39a>
    2336:	84 36       	cpi	r24, 0x64	; 100
    2338:	11 f0       	breq	.+4      	; 0x233e <vfprintf+0x1d2>
    233a:	89 36       	cpi	r24, 0x69	; 105
    233c:	41 f5       	brne	.+80     	; 0x238e <vfprintf+0x222>
    233e:	f8 01       	movw	r30, r16
    2340:	37 fe       	sbrs	r3, 7
    2342:	07 c0       	rjmp	.+14     	; 0x2352 <vfprintf+0x1e6>
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	0c 5f       	subi	r16, 0xFC	; 252
    234e:	1f 4f       	sbci	r17, 0xFF	; 255
    2350:	08 c0       	rjmp	.+16     	; 0x2362 <vfprintf+0x1f6>
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	07 2e       	mov	r0, r23
    2358:	00 0c       	add	r0, r0
    235a:	88 0b       	sbc	r24, r24
    235c:	99 0b       	sbc	r25, r25
    235e:	0e 5f       	subi	r16, 0xFE	; 254
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	f3 2d       	mov	r31, r3
    2364:	ff 76       	andi	r31, 0x6F	; 111
    2366:	3f 2e       	mov	r3, r31
    2368:	97 ff       	sbrs	r25, 7
    236a:	09 c0       	rjmp	.+18     	; 0x237e <vfprintf+0x212>
    236c:	90 95       	com	r25
    236e:	80 95       	com	r24
    2370:	70 95       	com	r23
    2372:	61 95       	neg	r22
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	8f 4f       	sbci	r24, 0xFF	; 255
    2378:	9f 4f       	sbci	r25, 0xFF	; 255
    237a:	f0 68       	ori	r31, 0x80	; 128
    237c:	3f 2e       	mov	r3, r31
    237e:	2a e0       	ldi	r18, 0x0A	; 10
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	a3 01       	movw	r20, r6
    2384:	0e 94 3d 14 	call	0x287a	; 0x287a <__ultoa_invert>
    2388:	88 2e       	mov	r8, r24
    238a:	86 18       	sub	r8, r6
    238c:	45 c0       	rjmp	.+138    	; 0x2418 <vfprintf+0x2ac>
    238e:	85 37       	cpi	r24, 0x75	; 117
    2390:	31 f4       	brne	.+12     	; 0x239e <vfprintf+0x232>
    2392:	23 2d       	mov	r18, r3
    2394:	2f 7e       	andi	r18, 0xEF	; 239
    2396:	b2 2e       	mov	r11, r18
    2398:	2a e0       	ldi	r18, 0x0A	; 10
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	25 c0       	rjmp	.+74     	; 0x23e8 <vfprintf+0x27c>
    239e:	93 2d       	mov	r25, r3
    23a0:	99 7f       	andi	r25, 0xF9	; 249
    23a2:	b9 2e       	mov	r11, r25
    23a4:	8f 36       	cpi	r24, 0x6F	; 111
    23a6:	c1 f0       	breq	.+48     	; 0x23d8 <vfprintf+0x26c>
    23a8:	18 f4       	brcc	.+6      	; 0x23b0 <vfprintf+0x244>
    23aa:	88 35       	cpi	r24, 0x58	; 88
    23ac:	79 f0       	breq	.+30     	; 0x23cc <vfprintf+0x260>
    23ae:	b5 c0       	rjmp	.+362    	; 0x251a <vfprintf+0x3ae>
    23b0:	80 37       	cpi	r24, 0x70	; 112
    23b2:	19 f0       	breq	.+6      	; 0x23ba <vfprintf+0x24e>
    23b4:	88 37       	cpi	r24, 0x78	; 120
    23b6:	21 f0       	breq	.+8      	; 0x23c0 <vfprintf+0x254>
    23b8:	b0 c0       	rjmp	.+352    	; 0x251a <vfprintf+0x3ae>
    23ba:	e9 2f       	mov	r30, r25
    23bc:	e0 61       	ori	r30, 0x10	; 16
    23be:	be 2e       	mov	r11, r30
    23c0:	b4 fe       	sbrs	r11, 4
    23c2:	0d c0       	rjmp	.+26     	; 0x23de <vfprintf+0x272>
    23c4:	fb 2d       	mov	r31, r11
    23c6:	f4 60       	ori	r31, 0x04	; 4
    23c8:	bf 2e       	mov	r11, r31
    23ca:	09 c0       	rjmp	.+18     	; 0x23de <vfprintf+0x272>
    23cc:	34 fe       	sbrs	r3, 4
    23ce:	0a c0       	rjmp	.+20     	; 0x23e4 <vfprintf+0x278>
    23d0:	29 2f       	mov	r18, r25
    23d2:	26 60       	ori	r18, 0x06	; 6
    23d4:	b2 2e       	mov	r11, r18
    23d6:	06 c0       	rjmp	.+12     	; 0x23e4 <vfprintf+0x278>
    23d8:	28 e0       	ldi	r18, 0x08	; 8
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	05 c0       	rjmp	.+10     	; 0x23e8 <vfprintf+0x27c>
    23de:	20 e1       	ldi	r18, 0x10	; 16
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <vfprintf+0x27c>
    23e4:	20 e1       	ldi	r18, 0x10	; 16
    23e6:	32 e0       	ldi	r19, 0x02	; 2
    23e8:	f8 01       	movw	r30, r16
    23ea:	b7 fe       	sbrs	r11, 7
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <vfprintf+0x290>
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	0c 5f       	subi	r16, 0xFC	; 252
    23f8:	1f 4f       	sbci	r17, 0xFF	; 255
    23fa:	06 c0       	rjmp	.+12     	; 0x2408 <vfprintf+0x29c>
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 5f       	subi	r16, 0xFE	; 254
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	a3 01       	movw	r20, r6
    240a:	0e 94 3d 14 	call	0x287a	; 0x287a <__ultoa_invert>
    240e:	88 2e       	mov	r8, r24
    2410:	86 18       	sub	r8, r6
    2412:	fb 2d       	mov	r31, r11
    2414:	ff 77       	andi	r31, 0x7F	; 127
    2416:	3f 2e       	mov	r3, r31
    2418:	36 fe       	sbrs	r3, 6
    241a:	0d c0       	rjmp	.+26     	; 0x2436 <vfprintf+0x2ca>
    241c:	23 2d       	mov	r18, r3
    241e:	2e 7f       	andi	r18, 0xFE	; 254
    2420:	a2 2e       	mov	r10, r18
    2422:	89 14       	cp	r8, r9
    2424:	58 f4       	brcc	.+22     	; 0x243c <vfprintf+0x2d0>
    2426:	34 fe       	sbrs	r3, 4
    2428:	0b c0       	rjmp	.+22     	; 0x2440 <vfprintf+0x2d4>
    242a:	32 fc       	sbrc	r3, 2
    242c:	09 c0       	rjmp	.+18     	; 0x2440 <vfprintf+0x2d4>
    242e:	83 2d       	mov	r24, r3
    2430:	8e 7e       	andi	r24, 0xEE	; 238
    2432:	a8 2e       	mov	r10, r24
    2434:	05 c0       	rjmp	.+10     	; 0x2440 <vfprintf+0x2d4>
    2436:	b8 2c       	mov	r11, r8
    2438:	a3 2c       	mov	r10, r3
    243a:	03 c0       	rjmp	.+6      	; 0x2442 <vfprintf+0x2d6>
    243c:	b8 2c       	mov	r11, r8
    243e:	01 c0       	rjmp	.+2      	; 0x2442 <vfprintf+0x2d6>
    2440:	b9 2c       	mov	r11, r9
    2442:	a4 fe       	sbrs	r10, 4
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <vfprintf+0x2f8>
    2446:	fe 01       	movw	r30, r28
    2448:	e8 0d       	add	r30, r8
    244a:	f1 1d       	adc	r31, r1
    244c:	80 81       	ld	r24, Z
    244e:	80 33       	cpi	r24, 0x30	; 48
    2450:	21 f4       	brne	.+8      	; 0x245a <vfprintf+0x2ee>
    2452:	9a 2d       	mov	r25, r10
    2454:	99 7e       	andi	r25, 0xE9	; 233
    2456:	a9 2e       	mov	r10, r25
    2458:	09 c0       	rjmp	.+18     	; 0x246c <vfprintf+0x300>
    245a:	a2 fe       	sbrs	r10, 2
    245c:	06 c0       	rjmp	.+12     	; 0x246a <vfprintf+0x2fe>
    245e:	b3 94       	inc	r11
    2460:	b3 94       	inc	r11
    2462:	04 c0       	rjmp	.+8      	; 0x246c <vfprintf+0x300>
    2464:	8a 2d       	mov	r24, r10
    2466:	86 78       	andi	r24, 0x86	; 134
    2468:	09 f0       	breq	.+2      	; 0x246c <vfprintf+0x300>
    246a:	b3 94       	inc	r11
    246c:	a3 fc       	sbrc	r10, 3
    246e:	11 c0       	rjmp	.+34     	; 0x2492 <vfprintf+0x326>
    2470:	a0 fe       	sbrs	r10, 0
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <vfprintf+0x314>
    2474:	b2 14       	cp	r11, r2
    2476:	88 f4       	brcc	.+34     	; 0x249a <vfprintf+0x32e>
    2478:	28 0c       	add	r2, r8
    247a:	92 2c       	mov	r9, r2
    247c:	9b 18       	sub	r9, r11
    247e:	0e c0       	rjmp	.+28     	; 0x249c <vfprintf+0x330>
    2480:	b2 14       	cp	r11, r2
    2482:	60 f4       	brcc	.+24     	; 0x249c <vfprintf+0x330>
    2484:	b6 01       	movw	r22, r12
    2486:	80 e2       	ldi	r24, 0x20	; 32
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    248e:	b3 94       	inc	r11
    2490:	f7 cf       	rjmp	.-18     	; 0x2480 <vfprintf+0x314>
    2492:	b2 14       	cp	r11, r2
    2494:	18 f4       	brcc	.+6      	; 0x249c <vfprintf+0x330>
    2496:	2b 18       	sub	r2, r11
    2498:	02 c0       	rjmp	.+4      	; 0x249e <vfprintf+0x332>
    249a:	98 2c       	mov	r9, r8
    249c:	21 2c       	mov	r2, r1
    249e:	a4 fe       	sbrs	r10, 4
    24a0:	10 c0       	rjmp	.+32     	; 0x24c2 <vfprintf+0x356>
    24a2:	b6 01       	movw	r22, r12
    24a4:	80 e3       	ldi	r24, 0x30	; 48
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    24ac:	a2 fe       	sbrs	r10, 2
    24ae:	17 c0       	rjmp	.+46     	; 0x24de <vfprintf+0x372>
    24b0:	a1 fc       	sbrc	r10, 1
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <vfprintf+0x34e>
    24b4:	88 e7       	ldi	r24, 0x78	; 120
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <vfprintf+0x352>
    24ba:	88 e5       	ldi	r24, 0x58	; 88
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	b6 01       	movw	r22, r12
    24c0:	0c c0       	rjmp	.+24     	; 0x24da <vfprintf+0x36e>
    24c2:	8a 2d       	mov	r24, r10
    24c4:	86 78       	andi	r24, 0x86	; 134
    24c6:	59 f0       	breq	.+22     	; 0x24de <vfprintf+0x372>
    24c8:	a1 fe       	sbrs	r10, 1
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <vfprintf+0x364>
    24cc:	8b e2       	ldi	r24, 0x2B	; 43
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <vfprintf+0x366>
    24d0:	80 e2       	ldi	r24, 0x20	; 32
    24d2:	a7 fc       	sbrc	r10, 7
    24d4:	8d e2       	ldi	r24, 0x2D	; 45
    24d6:	b6 01       	movw	r22, r12
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    24de:	89 14       	cp	r8, r9
    24e0:	38 f4       	brcc	.+14     	; 0x24f0 <vfprintf+0x384>
    24e2:	b6 01       	movw	r22, r12
    24e4:	80 e3       	ldi	r24, 0x30	; 48
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    24ec:	9a 94       	dec	r9
    24ee:	f7 cf       	rjmp	.-18     	; 0x24de <vfprintf+0x372>
    24f0:	8a 94       	dec	r8
    24f2:	f3 01       	movw	r30, r6
    24f4:	e8 0d       	add	r30, r8
    24f6:	f1 1d       	adc	r31, r1
    24f8:	80 81       	ld	r24, Z
    24fa:	b6 01       	movw	r22, r12
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    2502:	81 10       	cpse	r8, r1
    2504:	f5 cf       	rjmp	.-22     	; 0x24f0 <vfprintf+0x384>
    2506:	22 20       	and	r2, r2
    2508:	09 f4       	brne	.+2      	; 0x250c <vfprintf+0x3a0>
    250a:	42 ce       	rjmp	.-892    	; 0x2190 <vfprintf+0x24>
    250c:	b6 01       	movw	r22, r12
    250e:	80 e2       	ldi	r24, 0x20	; 32
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 01 14 	call	0x2802	; 0x2802 <fputc>
    2516:	2a 94       	dec	r2
    2518:	f6 cf       	rjmp	.-20     	; 0x2506 <vfprintf+0x39a>
    251a:	f6 01       	movw	r30, r12
    251c:	86 81       	ldd	r24, Z+6	; 0x06
    251e:	97 81       	ldd	r25, Z+7	; 0x07
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <vfprintf+0x3ba>
    2522:	8f ef       	ldi	r24, 0xFF	; 255
    2524:	9f ef       	ldi	r25, 0xFF	; 255
    2526:	2b 96       	adiw	r28, 0x0b	; 11
    2528:	e2 e1       	ldi	r30, 0x12	; 18
    252a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__>

0000252e <calloc>:
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	86 9f       	mul	r24, r22
    2538:	80 01       	movw	r16, r0
    253a:	87 9f       	mul	r24, r23
    253c:	10 0d       	add	r17, r0
    253e:	96 9f       	mul	r25, r22
    2540:	10 0d       	add	r17, r0
    2542:	11 24       	eor	r1, r1
    2544:	c8 01       	movw	r24, r16
    2546:	0e 94 b3 12 	call	0x2566	; 0x2566 <malloc>
    254a:	ec 01       	movw	r28, r24
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	29 f0       	breq	.+10     	; 0x255a <calloc+0x2c>
    2550:	a8 01       	movw	r20, r16
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
    255a:	ce 01       	movw	r24, r28
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	08 95       	ret

00002566 <malloc>:
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	82 30       	cpi	r24, 0x02	; 2
    2570:	91 05       	cpc	r25, r1
    2572:	10 f4       	brcc	.+4      	; 0x2578 <malloc+0x12>
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <__flp>
    257c:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <__flp+0x1>
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	a0 e0       	ldi	r26, 0x00	; 0
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	30 97       	sbiw	r30, 0x00	; 0
    258a:	19 f1       	breq	.+70     	; 0x25d2 <malloc+0x6c>
    258c:	40 81       	ld	r20, Z
    258e:	51 81       	ldd	r21, Z+1	; 0x01
    2590:	02 81       	ldd	r16, Z+2	; 0x02
    2592:	13 81       	ldd	r17, Z+3	; 0x03
    2594:	48 17       	cp	r20, r24
    2596:	59 07       	cpc	r21, r25
    2598:	c8 f0       	brcs	.+50     	; 0x25cc <malloc+0x66>
    259a:	84 17       	cp	r24, r20
    259c:	95 07       	cpc	r25, r21
    259e:	69 f4       	brne	.+26     	; 0x25ba <malloc+0x54>
    25a0:	10 97       	sbiw	r26, 0x00	; 0
    25a2:	31 f0       	breq	.+12     	; 0x25b0 <malloc+0x4a>
    25a4:	12 96       	adiw	r26, 0x02	; 2
    25a6:	0c 93       	st	X, r16
    25a8:	12 97       	sbiw	r26, 0x02	; 2
    25aa:	13 96       	adiw	r26, 0x03	; 3
    25ac:	1c 93       	st	X, r17
    25ae:	27 c0       	rjmp	.+78     	; 0x25fe <malloc+0x98>
    25b0:	00 93 12 04 	sts	0x0412, r16	; 0x800412 <__flp>
    25b4:	10 93 13 04 	sts	0x0413, r17	; 0x800413 <__flp+0x1>
    25b8:	22 c0       	rjmp	.+68     	; 0x25fe <malloc+0x98>
    25ba:	21 15       	cp	r18, r1
    25bc:	31 05       	cpc	r19, r1
    25be:	19 f0       	breq	.+6      	; 0x25c6 <malloc+0x60>
    25c0:	42 17       	cp	r20, r18
    25c2:	53 07       	cpc	r21, r19
    25c4:	18 f4       	brcc	.+6      	; 0x25cc <malloc+0x66>
    25c6:	9a 01       	movw	r18, r20
    25c8:	bd 01       	movw	r22, r26
    25ca:	ef 01       	movw	r28, r30
    25cc:	df 01       	movw	r26, r30
    25ce:	f8 01       	movw	r30, r16
    25d0:	db cf       	rjmp	.-74     	; 0x2588 <malloc+0x22>
    25d2:	21 15       	cp	r18, r1
    25d4:	31 05       	cpc	r19, r1
    25d6:	f9 f0       	breq	.+62     	; 0x2616 <malloc+0xb0>
    25d8:	28 1b       	sub	r18, r24
    25da:	39 0b       	sbc	r19, r25
    25dc:	24 30       	cpi	r18, 0x04	; 4
    25de:	31 05       	cpc	r19, r1
    25e0:	80 f4       	brcc	.+32     	; 0x2602 <malloc+0x9c>
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	9b 81       	ldd	r25, Y+3	; 0x03
    25e6:	61 15       	cp	r22, r1
    25e8:	71 05       	cpc	r23, r1
    25ea:	21 f0       	breq	.+8      	; 0x25f4 <malloc+0x8e>
    25ec:	fb 01       	movw	r30, r22
    25ee:	93 83       	std	Z+3, r25	; 0x03
    25f0:	82 83       	std	Z+2, r24	; 0x02
    25f2:	04 c0       	rjmp	.+8      	; 0x25fc <malloc+0x96>
    25f4:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <__flp+0x1>
    25f8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__flp>
    25fc:	fe 01       	movw	r30, r28
    25fe:	32 96       	adiw	r30, 0x02	; 2
    2600:	44 c0       	rjmp	.+136    	; 0x268a <malloc+0x124>
    2602:	fe 01       	movw	r30, r28
    2604:	e2 0f       	add	r30, r18
    2606:	f3 1f       	adc	r31, r19
    2608:	81 93       	st	Z+, r24
    260a:	91 93       	st	Z+, r25
    260c:	22 50       	subi	r18, 0x02	; 2
    260e:	31 09       	sbc	r19, r1
    2610:	39 83       	std	Y+1, r19	; 0x01
    2612:	28 83       	st	Y, r18
    2614:	3a c0       	rjmp	.+116    	; 0x268a <malloc+0x124>
    2616:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    261a:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    261e:	23 2b       	or	r18, r19
    2620:	41 f4       	brne	.+16     	; 0x2632 <malloc+0xcc>
    2622:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2626:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    262a:	30 93 11 04 	sts	0x0411, r19	; 0x800411 <__brkval+0x1>
    262e:	20 93 10 04 	sts	0x0410, r18	; 0x800410 <__brkval>
    2632:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2636:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    263a:	21 15       	cp	r18, r1
    263c:	31 05       	cpc	r19, r1
    263e:	41 f4       	brne	.+16     	; 0x2650 <malloc+0xea>
    2640:	2d b7       	in	r18, 0x3d	; 61
    2642:	3e b7       	in	r19, 0x3e	; 62
    2644:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2648:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    264c:	24 1b       	sub	r18, r20
    264e:	35 0b       	sbc	r19, r21
    2650:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <__brkval>
    2654:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <__brkval+0x1>
    2658:	e2 17       	cp	r30, r18
    265a:	f3 07       	cpc	r31, r19
    265c:	a0 f4       	brcc	.+40     	; 0x2686 <malloc+0x120>
    265e:	2e 1b       	sub	r18, r30
    2660:	3f 0b       	sbc	r19, r31
    2662:	28 17       	cp	r18, r24
    2664:	39 07       	cpc	r19, r25
    2666:	78 f0       	brcs	.+30     	; 0x2686 <malloc+0x120>
    2668:	ac 01       	movw	r20, r24
    266a:	4e 5f       	subi	r20, 0xFE	; 254
    266c:	5f 4f       	sbci	r21, 0xFF	; 255
    266e:	24 17       	cp	r18, r20
    2670:	35 07       	cpc	r19, r21
    2672:	48 f0       	brcs	.+18     	; 0x2686 <malloc+0x120>
    2674:	4e 0f       	add	r20, r30
    2676:	5f 1f       	adc	r21, r31
    2678:	50 93 11 04 	sts	0x0411, r21	; 0x800411 <__brkval+0x1>
    267c:	40 93 10 04 	sts	0x0410, r20	; 0x800410 <__brkval>
    2680:	81 93       	st	Z+, r24
    2682:	91 93       	st	Z+, r25
    2684:	02 c0       	rjmp	.+4      	; 0x268a <malloc+0x124>
    2686:	e0 e0       	ldi	r30, 0x00	; 0
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	cf 01       	movw	r24, r30
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	08 95       	ret

00002696 <free>:
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	09 f4       	brne	.+2      	; 0x26a0 <free+0xa>
    269e:	81 c0       	rjmp	.+258    	; 0x27a2 <free+0x10c>
    26a0:	fc 01       	movw	r30, r24
    26a2:	32 97       	sbiw	r30, 0x02	; 2
    26a4:	13 82       	std	Z+3, r1	; 0x03
    26a6:	12 82       	std	Z+2, r1	; 0x02
    26a8:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <__flp>
    26ac:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <__flp+0x1>
    26b0:	10 97       	sbiw	r26, 0x00	; 0
    26b2:	81 f4       	brne	.+32     	; 0x26d4 <free+0x3e>
    26b4:	20 81       	ld	r18, Z
    26b6:	31 81       	ldd	r19, Z+1	; 0x01
    26b8:	82 0f       	add	r24, r18
    26ba:	93 1f       	adc	r25, r19
    26bc:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    26c0:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    26c4:	28 17       	cp	r18, r24
    26c6:	39 07       	cpc	r19, r25
    26c8:	51 f5       	brne	.+84     	; 0x271e <free+0x88>
    26ca:	f0 93 11 04 	sts	0x0411, r31	; 0x800411 <__brkval+0x1>
    26ce:	e0 93 10 04 	sts	0x0410, r30	; 0x800410 <__brkval>
    26d2:	67 c0       	rjmp	.+206    	; 0x27a2 <free+0x10c>
    26d4:	ed 01       	movw	r28, r26
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	ce 17       	cp	r28, r30
    26dc:	df 07       	cpc	r29, r31
    26de:	40 f4       	brcc	.+16     	; 0x26f0 <free+0x5a>
    26e0:	4a 81       	ldd	r20, Y+2	; 0x02
    26e2:	5b 81       	ldd	r21, Y+3	; 0x03
    26e4:	9e 01       	movw	r18, r28
    26e6:	41 15       	cp	r20, r1
    26e8:	51 05       	cpc	r21, r1
    26ea:	f1 f0       	breq	.+60     	; 0x2728 <free+0x92>
    26ec:	ea 01       	movw	r28, r20
    26ee:	f5 cf       	rjmp	.-22     	; 0x26da <free+0x44>
    26f0:	d3 83       	std	Z+3, r29	; 0x03
    26f2:	c2 83       	std	Z+2, r28	; 0x02
    26f4:	40 81       	ld	r20, Z
    26f6:	51 81       	ldd	r21, Z+1	; 0x01
    26f8:	84 0f       	add	r24, r20
    26fa:	95 1f       	adc	r25, r21
    26fc:	c8 17       	cp	r28, r24
    26fe:	d9 07       	cpc	r29, r25
    2700:	59 f4       	brne	.+22     	; 0x2718 <free+0x82>
    2702:	88 81       	ld	r24, Y
    2704:	99 81       	ldd	r25, Y+1	; 0x01
    2706:	84 0f       	add	r24, r20
    2708:	95 1f       	adc	r25, r21
    270a:	02 96       	adiw	r24, 0x02	; 2
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	9b 81       	ldd	r25, Y+3	; 0x03
    2714:	93 83       	std	Z+3, r25	; 0x03
    2716:	82 83       	std	Z+2, r24	; 0x02
    2718:	21 15       	cp	r18, r1
    271a:	31 05       	cpc	r19, r1
    271c:	29 f4       	brne	.+10     	; 0x2728 <free+0x92>
    271e:	f0 93 13 04 	sts	0x0413, r31	; 0x800413 <__flp+0x1>
    2722:	e0 93 12 04 	sts	0x0412, r30	; 0x800412 <__flp>
    2726:	3d c0       	rjmp	.+122    	; 0x27a2 <free+0x10c>
    2728:	e9 01       	movw	r28, r18
    272a:	fb 83       	std	Y+3, r31	; 0x03
    272c:	ea 83       	std	Y+2, r30	; 0x02
    272e:	49 91       	ld	r20, Y+
    2730:	59 91       	ld	r21, Y+
    2732:	c4 0f       	add	r28, r20
    2734:	d5 1f       	adc	r29, r21
    2736:	ec 17       	cp	r30, r28
    2738:	fd 07       	cpc	r31, r29
    273a:	61 f4       	brne	.+24     	; 0x2754 <free+0xbe>
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	84 0f       	add	r24, r20
    2742:	95 1f       	adc	r25, r21
    2744:	02 96       	adiw	r24, 0x02	; 2
    2746:	e9 01       	movw	r28, r18
    2748:	99 83       	std	Y+1, r25	; 0x01
    274a:	88 83       	st	Y, r24
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	9b 83       	std	Y+3, r25	; 0x03
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	e0 e0       	ldi	r30, 0x00	; 0
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	12 96       	adiw	r26, 0x02	; 2
    275a:	8d 91       	ld	r24, X+
    275c:	9c 91       	ld	r25, X
    275e:	13 97       	sbiw	r26, 0x03	; 3
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	19 f0       	breq	.+6      	; 0x276a <free+0xd4>
    2764:	fd 01       	movw	r30, r26
    2766:	dc 01       	movw	r26, r24
    2768:	f7 cf       	rjmp	.-18     	; 0x2758 <free+0xc2>
    276a:	8d 91       	ld	r24, X+
    276c:	9c 91       	ld	r25, X
    276e:	11 97       	sbiw	r26, 0x01	; 1
    2770:	9d 01       	movw	r18, r26
    2772:	2e 5f       	subi	r18, 0xFE	; 254
    2774:	3f 4f       	sbci	r19, 0xFF	; 255
    2776:	82 0f       	add	r24, r18
    2778:	93 1f       	adc	r25, r19
    277a:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    277e:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    2782:	28 17       	cp	r18, r24
    2784:	39 07       	cpc	r19, r25
    2786:	69 f4       	brne	.+26     	; 0x27a2 <free+0x10c>
    2788:	30 97       	sbiw	r30, 0x00	; 0
    278a:	29 f4       	brne	.+10     	; 0x2796 <free+0x100>
    278c:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <__flp+0x1>
    2790:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__flp>
    2794:	02 c0       	rjmp	.+4      	; 0x279a <free+0x104>
    2796:	13 82       	std	Z+3, r1	; 0x03
    2798:	12 82       	std	Z+2, r1	; 0x02
    279a:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <__brkval+0x1>
    279e:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <__brkval>
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	08 95       	ret

000027a8 <strnlen_P>:
    27a8:	fc 01       	movw	r30, r24
    27aa:	05 90       	lpm	r0, Z+
    27ac:	61 50       	subi	r22, 0x01	; 1
    27ae:	70 40       	sbci	r23, 0x00	; 0
    27b0:	01 10       	cpse	r0, r1
    27b2:	d8 f7       	brcc	.-10     	; 0x27aa <strnlen_P+0x2>
    27b4:	80 95       	com	r24
    27b6:	90 95       	com	r25
    27b8:	8e 0f       	add	r24, r30
    27ba:	9f 1f       	adc	r25, r31
    27bc:	08 95       	ret

000027be <memset>:
    27be:	dc 01       	movw	r26, r24
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <memset+0x6>
    27c2:	6d 93       	st	X+, r22
    27c4:	41 50       	subi	r20, 0x01	; 1
    27c6:	50 40       	sbci	r21, 0x00	; 0
    27c8:	e0 f7       	brcc	.-8      	; 0x27c2 <memset+0x4>
    27ca:	08 95       	ret

000027cc <strnlen>:
    27cc:	fc 01       	movw	r30, r24
    27ce:	61 50       	subi	r22, 0x01	; 1
    27d0:	70 40       	sbci	r23, 0x00	; 0
    27d2:	01 90       	ld	r0, Z+
    27d4:	01 10       	cpse	r0, r1
    27d6:	d8 f7       	brcc	.-10     	; 0x27ce <strnlen+0x2>
    27d8:	80 95       	com	r24
    27da:	90 95       	com	r25
    27dc:	8e 0f       	add	r24, r30
    27de:	9f 1f       	adc	r25, r31
    27e0:	08 95       	ret

000027e2 <strrev>:
    27e2:	dc 01       	movw	r26, r24
    27e4:	fc 01       	movw	r30, r24
    27e6:	67 2f       	mov	r22, r23
    27e8:	71 91       	ld	r23, Z+
    27ea:	77 23       	and	r23, r23
    27ec:	e1 f7       	brne	.-8      	; 0x27e6 <strrev+0x4>
    27ee:	32 97       	sbiw	r30, 0x02	; 2
    27f0:	04 c0       	rjmp	.+8      	; 0x27fa <strrev+0x18>
    27f2:	7c 91       	ld	r23, X
    27f4:	6d 93       	st	X+, r22
    27f6:	70 83       	st	Z, r23
    27f8:	62 91       	ld	r22, -Z
    27fa:	ae 17       	cp	r26, r30
    27fc:	bf 07       	cpc	r27, r31
    27fe:	c8 f3       	brcs	.-14     	; 0x27f2 <strrev+0x10>
    2800:	08 95       	ret

00002802 <fputc>:
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	fb 01       	movw	r30, r22
    280c:	23 81       	ldd	r18, Z+3	; 0x03
    280e:	21 fd       	sbrc	r18, 1
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <fputc+0x16>
    2812:	8f ef       	ldi	r24, 0xFF	; 255
    2814:	9f ef       	ldi	r25, 0xFF	; 255
    2816:	2c c0       	rjmp	.+88     	; 0x2870 <fputc+0x6e>
    2818:	22 ff       	sbrs	r18, 2
    281a:	16 c0       	rjmp	.+44     	; 0x2848 <fputc+0x46>
    281c:	46 81       	ldd	r20, Z+6	; 0x06
    281e:	57 81       	ldd	r21, Z+7	; 0x07
    2820:	24 81       	ldd	r18, Z+4	; 0x04
    2822:	35 81       	ldd	r19, Z+5	; 0x05
    2824:	42 17       	cp	r20, r18
    2826:	53 07       	cpc	r21, r19
    2828:	44 f4       	brge	.+16     	; 0x283a <fputc+0x38>
    282a:	a0 81       	ld	r26, Z
    282c:	b1 81       	ldd	r27, Z+1	; 0x01
    282e:	9d 01       	movw	r18, r26
    2830:	2f 5f       	subi	r18, 0xFF	; 255
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	31 83       	std	Z+1, r19	; 0x01
    2836:	20 83       	st	Z, r18
    2838:	8c 93       	st	X, r24
    283a:	26 81       	ldd	r18, Z+6	; 0x06
    283c:	37 81       	ldd	r19, Z+7	; 0x07
    283e:	2f 5f       	subi	r18, 0xFF	; 255
    2840:	3f 4f       	sbci	r19, 0xFF	; 255
    2842:	37 83       	std	Z+7, r19	; 0x07
    2844:	26 83       	std	Z+6, r18	; 0x06
    2846:	14 c0       	rjmp	.+40     	; 0x2870 <fputc+0x6e>
    2848:	8b 01       	movw	r16, r22
    284a:	ec 01       	movw	r28, r24
    284c:	fb 01       	movw	r30, r22
    284e:	00 84       	ldd	r0, Z+8	; 0x08
    2850:	f1 85       	ldd	r31, Z+9	; 0x09
    2852:	e0 2d       	mov	r30, r0
    2854:	09 95       	icall
    2856:	89 2b       	or	r24, r25
    2858:	e1 f6       	brne	.-72     	; 0x2812 <fputc+0x10>
    285a:	d8 01       	movw	r26, r16
    285c:	16 96       	adiw	r26, 0x06	; 6
    285e:	8d 91       	ld	r24, X+
    2860:	9c 91       	ld	r25, X
    2862:	17 97       	sbiw	r26, 0x07	; 7
    2864:	01 96       	adiw	r24, 0x01	; 1
    2866:	17 96       	adiw	r26, 0x07	; 7
    2868:	9c 93       	st	X, r25
    286a:	8e 93       	st	-X, r24
    286c:	16 97       	sbiw	r26, 0x06	; 6
    286e:	ce 01       	movw	r24, r28
    2870:	df 91       	pop	r29
    2872:	cf 91       	pop	r28
    2874:	1f 91       	pop	r17
    2876:	0f 91       	pop	r16
    2878:	08 95       	ret

0000287a <__ultoa_invert>:
    287a:	fa 01       	movw	r30, r20
    287c:	aa 27       	eor	r26, r26
    287e:	28 30       	cpi	r18, 0x08	; 8
    2880:	51 f1       	breq	.+84     	; 0x28d6 <__ultoa_invert+0x5c>
    2882:	20 31       	cpi	r18, 0x10	; 16
    2884:	81 f1       	breq	.+96     	; 0x28e6 <__ultoa_invert+0x6c>
    2886:	e8 94       	clt
    2888:	6f 93       	push	r22
    288a:	6e 7f       	andi	r22, 0xFE	; 254
    288c:	6e 5f       	subi	r22, 0xFE	; 254
    288e:	7f 4f       	sbci	r23, 0xFF	; 255
    2890:	8f 4f       	sbci	r24, 0xFF	; 255
    2892:	9f 4f       	sbci	r25, 0xFF	; 255
    2894:	af 4f       	sbci	r26, 0xFF	; 255
    2896:	b1 e0       	ldi	r27, 0x01	; 1
    2898:	3e d0       	rcall	.+124    	; 0x2916 <__ultoa_invert+0x9c>
    289a:	b4 e0       	ldi	r27, 0x04	; 4
    289c:	3c d0       	rcall	.+120    	; 0x2916 <__ultoa_invert+0x9c>
    289e:	67 0f       	add	r22, r23
    28a0:	78 1f       	adc	r23, r24
    28a2:	89 1f       	adc	r24, r25
    28a4:	9a 1f       	adc	r25, r26
    28a6:	a1 1d       	adc	r26, r1
    28a8:	68 0f       	add	r22, r24
    28aa:	79 1f       	adc	r23, r25
    28ac:	8a 1f       	adc	r24, r26
    28ae:	91 1d       	adc	r25, r1
    28b0:	a1 1d       	adc	r26, r1
    28b2:	6a 0f       	add	r22, r26
    28b4:	71 1d       	adc	r23, r1
    28b6:	81 1d       	adc	r24, r1
    28b8:	91 1d       	adc	r25, r1
    28ba:	a1 1d       	adc	r26, r1
    28bc:	20 d0       	rcall	.+64     	; 0x28fe <__ultoa_invert+0x84>
    28be:	09 f4       	brne	.+2      	; 0x28c2 <__ultoa_invert+0x48>
    28c0:	68 94       	set
    28c2:	3f 91       	pop	r19
    28c4:	2a e0       	ldi	r18, 0x0A	; 10
    28c6:	26 9f       	mul	r18, r22
    28c8:	11 24       	eor	r1, r1
    28ca:	30 19       	sub	r19, r0
    28cc:	30 5d       	subi	r19, 0xD0	; 208
    28ce:	31 93       	st	Z+, r19
    28d0:	de f6       	brtc	.-74     	; 0x2888 <__ultoa_invert+0xe>
    28d2:	cf 01       	movw	r24, r30
    28d4:	08 95       	ret
    28d6:	46 2f       	mov	r20, r22
    28d8:	47 70       	andi	r20, 0x07	; 7
    28da:	40 5d       	subi	r20, 0xD0	; 208
    28dc:	41 93       	st	Z+, r20
    28de:	b3 e0       	ldi	r27, 0x03	; 3
    28e0:	0f d0       	rcall	.+30     	; 0x2900 <__ultoa_invert+0x86>
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <__ultoa_invert+0x5c>
    28e4:	f6 cf       	rjmp	.-20     	; 0x28d2 <__ultoa_invert+0x58>
    28e6:	46 2f       	mov	r20, r22
    28e8:	4f 70       	andi	r20, 0x0F	; 15
    28ea:	40 5d       	subi	r20, 0xD0	; 208
    28ec:	4a 33       	cpi	r20, 0x3A	; 58
    28ee:	18 f0       	brcs	.+6      	; 0x28f6 <__ultoa_invert+0x7c>
    28f0:	49 5d       	subi	r20, 0xD9	; 217
    28f2:	31 fd       	sbrc	r19, 1
    28f4:	40 52       	subi	r20, 0x20	; 32
    28f6:	41 93       	st	Z+, r20
    28f8:	02 d0       	rcall	.+4      	; 0x28fe <__ultoa_invert+0x84>
    28fa:	a9 f7       	brne	.-22     	; 0x28e6 <__ultoa_invert+0x6c>
    28fc:	ea cf       	rjmp	.-44     	; 0x28d2 <__ultoa_invert+0x58>
    28fe:	b4 e0       	ldi	r27, 0x04	; 4
    2900:	a6 95       	lsr	r26
    2902:	97 95       	ror	r25
    2904:	87 95       	ror	r24
    2906:	77 95       	ror	r23
    2908:	67 95       	ror	r22
    290a:	ba 95       	dec	r27
    290c:	c9 f7       	brne	.-14     	; 0x2900 <__ultoa_invert+0x86>
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	61 05       	cpc	r22, r1
    2912:	71 05       	cpc	r23, r1
    2914:	08 95       	ret
    2916:	9b 01       	movw	r18, r22
    2918:	ac 01       	movw	r20, r24
    291a:	0a 2e       	mov	r0, r26
    291c:	06 94       	lsr	r0
    291e:	57 95       	ror	r21
    2920:	47 95       	ror	r20
    2922:	37 95       	ror	r19
    2924:	27 95       	ror	r18
    2926:	ba 95       	dec	r27
    2928:	c9 f7       	brne	.-14     	; 0x291c <__ultoa_invert+0xa2>
    292a:	62 0f       	add	r22, r18
    292c:	73 1f       	adc	r23, r19
    292e:	84 1f       	adc	r24, r20
    2930:	95 1f       	adc	r25, r21
    2932:	a0 1d       	adc	r26, r0
    2934:	08 95       	ret

00002936 <__prologue_saves__>:
    2936:	2f 92       	push	r2
    2938:	3f 92       	push	r3
    293a:	4f 92       	push	r4
    293c:	5f 92       	push	r5
    293e:	6f 92       	push	r6
    2940:	7f 92       	push	r7
    2942:	8f 92       	push	r8
    2944:	9f 92       	push	r9
    2946:	af 92       	push	r10
    2948:	bf 92       	push	r11
    294a:	cf 92       	push	r12
    294c:	df 92       	push	r13
    294e:	ef 92       	push	r14
    2950:	ff 92       	push	r15
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	ca 1b       	sub	r28, r26
    2960:	db 0b       	sbc	r29, r27
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	09 94       	ijmp

0000296e <__epilogue_restores__>:
    296e:	2a 88       	ldd	r2, Y+18	; 0x12
    2970:	39 88       	ldd	r3, Y+17	; 0x11
    2972:	48 88       	ldd	r4, Y+16	; 0x10
    2974:	5f 84       	ldd	r5, Y+15	; 0x0f
    2976:	6e 84       	ldd	r6, Y+14	; 0x0e
    2978:	7d 84       	ldd	r7, Y+13	; 0x0d
    297a:	8c 84       	ldd	r8, Y+12	; 0x0c
    297c:	9b 84       	ldd	r9, Y+11	; 0x0b
    297e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2980:	b9 84       	ldd	r11, Y+9	; 0x09
    2982:	c8 84       	ldd	r12, Y+8	; 0x08
    2984:	df 80       	ldd	r13, Y+7	; 0x07
    2986:	ee 80       	ldd	r14, Y+6	; 0x06
    2988:	fd 80       	ldd	r15, Y+5	; 0x05
    298a:	0c 81       	ldd	r16, Y+4	; 0x04
    298c:	1b 81       	ldd	r17, Y+3	; 0x03
    298e:	aa 81       	ldd	r26, Y+2	; 0x02
    2990:	b9 81       	ldd	r27, Y+1	; 0x01
    2992:	ce 0f       	add	r28, r30
    2994:	d1 1d       	adc	r29, r1
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	ed 01       	movw	r28, r26
    29a2:	08 95       	ret

000029a4 <_exit>:
    29a4:	f8 94       	cli

000029a6 <__stop_program>:
    29a6:	ff cf       	rjmp	.-2      	; 0x29a6 <__stop_program>
