
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000264  00800100  00002932  000029c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002932  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800364  00800364  00002c2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000055fc  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d2c  00000000  00000000  000086b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002244  00000000  00000000  0000a3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000940  00000000  00000000  0000c628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d06  00000000  00000000  0000cf68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002295  00000000  00000000  0000dc6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000ff03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	13 e0       	ldi	r17, 0x03	; 3
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	e2 e3       	ldi	r30, 0x32	; 50
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 36       	cpi	r26, 0x64	; 100
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a4 e6       	ldi	r26, 0x64	; 100
     548:	b3 e0       	ldi	r27, 0x03	; 3
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a2 3a       	cpi	r26, 0xA2	; 162
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 97 14 	jmp	0x292e	; 0x292e <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xf5e>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xf5e>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "timer.h"
#include "CAN_controller.h"
#include "MCP2515.h"
#include "CAN.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
//p.23 for can read instructions
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     5aa:	87 e5       	ldi	r24, 0x57	; 87
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
	printf("---------------------------------------\n\r");
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x4e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x58>
     5ea:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <CAN_controller_setMode>
     5f2:	af ef       	ldi	r26, 0xFF	; 255
     5f4:	bf e7       	ldi	r27, 0x7F	; 127
     5f6:	27 e0       	ldi	r18, 0x07	; 7
     5f8:	a1 50       	subi	r26, 0x01	; 1
     5fa:	b0 40       	sbci	r27, 0x00	; 0
     5fc:	20 40       	sbci	r18, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x66>
     600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x70>
     602:	00 00       	nop
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     60c:	0b e6       	ldi	r16, 0x6B	; 107
     60e:	13 e0       	ldi	r17, 0x03	; 3
	_delay_ms(500);
	//test_SRAM();            
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     610:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     614:	d8 01       	movw	r26, r16
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	80 81       	ld	r24, Z
     61c:	85 30       	cpi	r24, 0x05	; 5
     61e:	99 f0       	breq	.+38     	; 0x646 <main+0xb4>
     620:	28 f4       	brcc	.+10     	; 0x62c <main+0x9a>
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	41 f0       	breq	.+16     	; 0x636 <main+0xa4>
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	49 f0       	breq	.+18     	; 0x63c <main+0xaa>
     62a:	f2 cf       	rjmp	.-28     	; 0x610 <main+0x7e>
     62c:	86 30       	cpi	r24, 0x06	; 6
     62e:	81 f0       	breq	.+32     	; 0x650 <main+0xbe>
     630:	87 30       	cpi	r24, 0x07	; 7
     632:	99 f0       	breq	.+38     	; 0x65a <main+0xc8>
     634:	ed cf       	rjmp	.-38     	; 0x610 <main+0x7e>
			case MAIN_MENU:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     636:	0e 94 1e 08 	call	0x103c	; 0x103c <music_playRick>
				break;
     63a:	ea cf       	rjmp	.-44     	; 0x610 <main+0x7e>
			case GAME_1:
				game_play(1);
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 7e 07 	call	0xefc	; 0xefc <game_play>
				break;
     644:	e5 cf       	rjmp	.-54     	; 0x610 <main+0x7e>
			case GAME_2:
				game_play(2);
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 7e 07 	call	0xefc	; 0xefc <game_play>
				break;
     64e:	e0 cf       	rjmp	.-64     	; 0x610 <main+0x7e>
			case HS1:
				game_displayHighscores(1);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 ab 07 	call	0xf56	; 0xf56 <game_displayHighscores>
				break;
     658:	db cf       	rjmp	.-74     	; 0x610 <main+0x7e>
			case HS2:
				game_displayHighscores(2);
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 ab 07 	call	0xf56	; 0xf56 <game_displayHighscores>
				break;
     662:	d6 cf       	rjmp	.-84     	; 0x610 <main+0x7e>

00000664 <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	6c e2       	ldi	r22, 0x2C	; 44
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
     66e:	08 95       	ret

00000670 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     678:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     67c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
     68a:	28 2f       	mov	r18, r24
     68c:	39 2f       	mov	r19, r25
     68e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <__data_end>
     692:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <__data_end+0x1>
	
	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     696:	21 30       	cpi	r18, 0x01	; 1
     698:	31 05       	cpc	r19, r1
     69a:	e9 f0       	breq	.+58     	; 0x6d6 <CAN_transmit_message+0x66>
     69c:	22 30       	cpi	r18, 0x02	; 2
     69e:	31 05       	cpc	r19, r1
     6a0:	89 f1       	breq	.+98     	; 0x704 <CAN_transmit_message+0x94>
     6a2:	23 2b       	or	r18, r19
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <CAN_transmit_message+0x38>
     6a6:	44 c0       	rjmp	.+136    	; 0x730 <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6a8:	f8 01       	movw	r30, r16
     6aa:	40 85       	ldd	r20, Z+8	; 0x08
     6ac:	51 85       	ldd	r21, Z+9	; 0x09
     6ae:	42 95       	swap	r20
     6b0:	44 0f       	add	r20, r20
     6b2:	40 7e       	andi	r20, 0xE0	; 224
     6b4:	62 e3       	ldi	r22, 0x32	; 50
     6b6:	80 ee       	ldi	r24, 0xE0	; 224
     6b8:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6bc:	f8 01       	movw	r30, r16
     6be:	60 85       	ldd	r22, Z+8	; 0x08
     6c0:	71 85       	ldd	r23, Z+9	; 0x09
     6c2:	76 95       	lsr	r23
     6c4:	67 95       	ror	r22
     6c6:	76 95       	lsr	r23
     6c8:	67 95       	ror	r22
     6ca:	76 95       	lsr	r23
     6cc:	67 95       	ror	r22
     6ce:	81 e3       	ldi	r24, 0x31	; 49
     6d0:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     6d4:	2d c0       	rjmp	.+90     	; 0x730 <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6d6:	f8 01       	movw	r30, r16
     6d8:	40 85       	ldd	r20, Z+8	; 0x08
     6da:	51 85       	ldd	r21, Z+9	; 0x09
     6dc:	42 95       	swap	r20
     6de:	44 0f       	add	r20, r20
     6e0:	40 7e       	andi	r20, 0xE0	; 224
     6e2:	62 e4       	ldi	r22, 0x42	; 66
     6e4:	80 ee       	ldi	r24, 0xE0	; 224
     6e6:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     6ea:	f8 01       	movw	r30, r16
     6ec:	60 85       	ldd	r22, Z+8	; 0x08
     6ee:	71 85       	ldd	r23, Z+9	; 0x09
     6f0:	76 95       	lsr	r23
     6f2:	67 95       	ror	r22
     6f4:	76 95       	lsr	r23
     6f6:	67 95       	ror	r22
     6f8:	76 95       	lsr	r23
     6fa:	67 95       	ror	r22
     6fc:	81 e4       	ldi	r24, 0x41	; 65
     6fe:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
				
				break;
     702:	16 c0       	rjmp	.+44     	; 0x730 <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     704:	f8 01       	movw	r30, r16
     706:	40 85       	ldd	r20, Z+8	; 0x08
     708:	51 85       	ldd	r21, Z+9	; 0x09
     70a:	42 95       	swap	r20
     70c:	44 0f       	add	r20, r20
     70e:	40 7e       	andi	r20, 0xE0	; 224
     710:	62 e5       	ldi	r22, 0x52	; 82
     712:	80 ee       	ldi	r24, 0xE0	; 224
     714:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     718:	f8 01       	movw	r30, r16
     71a:	60 85       	ldd	r22, Z+8	; 0x08
     71c:	71 85       	ldd	r23, Z+9	; 0x09
     71e:	76 95       	lsr	r23
     720:	67 95       	ror	r22
     722:	76 95       	lsr	r23
     724:	67 95       	ror	r22
     726:	76 95       	lsr	r23
     728:	67 95       	ror	r22
     72a:	81 e5       	ldi	r24, 0x51	; 81
     72c:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     730:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     734:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	91 05       	cpc	r25, r1
     73c:	61 f0       	breq	.+24     	; 0x756 <CAN_transmit_message+0xe6>
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	91 05       	cpc	r25, r1
     742:	81 f0       	breq	.+32     	; 0x764 <CAN_transmit_message+0xf4>
     744:	89 2b       	or	r24, r25
     746:	a1 f4       	brne	.+40     	; 0x770 <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     748:	f8 01       	movw	r30, r16
     74a:	42 85       	ldd	r20, Z+10	; 0x0a
     74c:	65 e3       	ldi	r22, 0x35	; 53
     74e:	8f e0       	ldi	r24, 0x0F	; 15
     750:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				break;
     754:	0d c0       	rjmp	.+26     	; 0x770 <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     756:	f8 01       	movw	r30, r16
     758:	42 85       	ldd	r20, Z+10	; 0x0a
     75a:	65 e4       	ldi	r22, 0x45	; 69
     75c:	8f e0       	ldi	r24, 0x0F	; 15
     75e:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
				break;
     762:	06 c0       	rjmp	.+12     	; 0x770 <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     764:	f8 01       	movw	r30, r16
     766:	42 85       	ldd	r20, Z+10	; 0x0a
     768:	65 e5       	ldi	r22, 0x55	; 85
     76a:	8f e0       	ldi	r24, 0x0F	; 15
     76c:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     770:	f8 01       	movw	r30, r16
     772:	82 85       	ldd	r24, Z+10	; 0x0a
     774:	88 23       	and	r24, r24
     776:	61 f1       	breq	.+88     	; 0x7d0 <CAN_transmit_message+0x160>
     778:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     77a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     77e:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	91 05       	cpc	r25, r1
     786:	71 f0       	breq	.+28     	; 0x7a4 <CAN_transmit_message+0x134>
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	91 05       	cpc	r25, r1
     78c:	a1 f0       	breq	.+40     	; 0x7b6 <CAN_transmit_message+0x146>
     78e:	89 2b       	or	r24, r25
     790:	d1 f4       	brne	.+52     	; 0x7c6 <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     792:	f8 01       	movw	r30, r16
     794:	ec 0f       	add	r30, r28
     796:	f1 1d       	adc	r31, r1
     798:	60 81       	ld	r22, Z
     79a:	86 e3       	ldi	r24, 0x36	; 54
     79c:	8c 0f       	add	r24, r28
     79e:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
				break;
     7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7a4:	f8 01       	movw	r30, r16
     7a6:	ec 0f       	add	r30, r28
     7a8:	f1 1d       	adc	r31, r1
     7aa:	60 81       	ld	r22, Z
     7ac:	86 e4       	ldi	r24, 0x46	; 70
     7ae:	8c 0f       	add	r24, r28
     7b0:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
				break;
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7b6:	f8 01       	movw	r30, r16
     7b8:	ec 0f       	add	r30, r28
     7ba:	f1 1d       	adc	r31, r1
     7bc:	60 81       	ld	r22, Z
     7be:	86 e5       	ldi	r24, 0x56	; 86
     7c0:	8c 0f       	add	r24, r28
     7c2:	0e 94 6d 04 	call	0x8da	; 0x8da <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     7c6:	cf 5f       	subi	r28, 0xFF	; 255
     7c8:	f8 01       	movw	r30, r16
     7ca:	82 85       	ldd	r24, Z+10	; 0x0a
     7cc:	8c 13       	cpse	r24, r28
     7ce:	d5 cf       	rjmp	.-86     	; 0x77a <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7d0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     7d4:	0e 94 b7 04 	call	0x96e	; 0x96e <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     7ec:	82 e6       	ldi	r24, 0x62	; 98
     7ee:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
     7f2:	c8 2f       	mov	r28, r24
     7f4:	81 e6       	ldi	r24, 0x61	; 97
     7f6:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
     7fa:	c2 95       	swap	r28
     7fc:	c6 95       	lsr	r28
     7fe:	c7 70       	andi	r28, 0x07	; 7
     800:	28 e0       	ldi	r18, 0x08	; 8
     802:	82 9f       	mul	r24, r18
     804:	c0 01       	movw	r24, r0
     806:	11 24       	eor	r1, r1
     808:	8c 0f       	add	r24, r28
     80a:	91 1d       	adc	r25, r1
     80c:	f7 01       	movw	r30, r14
     80e:	91 87       	std	Z+9, r25	; 0x09
     810:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     812:	85 e6       	ldi	r24, 0x65	; 101
     814:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
     818:	8f 70       	andi	r24, 0x0F	; 15
     81a:	f7 01       	movw	r30, r14
     81c:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     81e:	82 85       	ldd	r24, Z+10	; 0x0a
     820:	88 23       	and	r24, r24
     822:	81 f0       	breq	.+32     	; 0x844 <CAN_receiveMessage+0x64>
     824:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     826:	0c 2f       	mov	r16, r28
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	86 e6       	ldi	r24, 0x66	; 102
     82c:	8c 0f       	add	r24, r28
     82e:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
     832:	f7 01       	movw	r30, r14
     834:	e0 0f       	add	r30, r16
     836:	f1 1f       	adc	r31, r17
     838:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     83a:	cf 5f       	subi	r28, 0xFF	; 255
     83c:	f7 01       	movw	r30, r14
     83e:	82 85       	ldd	r24, Z+10	; 0x0a
     840:	8c 13       	cpse	r24, r28
     842:	f1 cf       	rjmp	.-30     	; 0x826 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	08 95       	ret

00000850 <CAN_sendInputData>:

void CAN_sendInputData() {
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	2b 97       	sbiw	r28, 0x0b	; 11
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9a 87       	std	Y+10, r25	; 0x0a
     86a:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     870:	e1 e7       	ldi	r30, 0x71	; 113
     872:	f3 e0       	ldi	r31, 0x03	; 3
     874:	80 81       	ld	r24, Z
     876:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     87c:	ef e6       	ldi	r30, 0x6F	; 111
     87e:	f3 e0       	ldi	r31, 0x03	; 3
     880:	80 81       	ld	r24, Z
     882:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     884:	81 81       	ldd	r24, Z+1	; 0x01
     886:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     888:	e7 e6       	ldi	r30, 0x67	; 103
     88a:	f3 e0       	ldi	r31, 0x03	; 3
     88c:	80 81       	ld	r24, Z
     88e:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     890:	81 81       	ldd	r24, Z+1	; 0x01
     892:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	0e 94 38 03 	call	0x670	; 0x670 <CAN_transmit_message>
     89c:	2b 96       	adiw	r28, 0x0b	; 11
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <CAN_controller_read>:



#include "CAN_controller.h"

uint8_t CAN_controller_read(uint8_t addr) {
     8ae:	cf 93       	push	r28
     8b0:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	84 e0       	ldi	r24, 0x04	; 4
     8b6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8c0:	8c 2f       	mov	r24, r28
     8c2:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8c6:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_masterRead>
     8ca:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
	
	return data;
}
     8d4:	8c 2f       	mov	r24, r28
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	d8 2f       	mov	r29, r24
     8e0:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8f0:	8d 2f       	mov	r24, r29
     8f2:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
	SPI_masterWrite(data);
     8f6:	8c 2f       	mov	r24, r28
     8f8:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
	
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	d8 2f       	mov	r29, r24
     912:	16 2f       	mov	r17, r22
     914:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	84 e0       	ldi	r24, 0x04	; 4
     91a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
		SPI_masterWrite(addr);
     924:	81 2f       	mov	r24, r17
     926:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
		SPI_masterWrite(mask);
     92a:	8d 2f       	mov	r24, r29
     92c:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
		SPI_masterWrite(data);
     930:	8c 2f       	mov	r24, r28
     932:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>

}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	08 95       	ret

00000946 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
	printf("Before spi write");
     94e:	83 ee       	ldi	r24, 0xE3	; 227
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
	SPI_masterWrite(MCP_RESET);
     95a:	80 ec       	ldi	r24, 0xC0	; 192
     95c:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
}
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	08 95       	ret

0000096e <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     96e:	cf 93       	push	r28
     970:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
	switch (buffer) {
     97a:	c1 30       	cpi	r28, 0x01	; 1
     97c:	41 f0       	breq	.+16     	; 0x98e <CAN_controller_RTS+0x20>
     97e:	18 f0       	brcs	.+6      	; 0x986 <CAN_controller_RTS+0x18>
     980:	c2 30       	cpi	r28, 0x02	; 2
     982:	49 f0       	breq	.+18     	; 0x996 <CAN_controller_RTS+0x28>
     984:	0b c0       	rjmp	.+22     	; 0x99c <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     986:	81 e8       	ldi	r24, 0x81	; 129
     988:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
			break;
     98c:	07 c0       	rjmp	.+14     	; 0x99c <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     98e:	82 e8       	ldi	r24, 0x82	; 130
     990:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
			break;
     994:	03 c0       	rjmp	.+6      	; 0x99c <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     996:	84 e8       	ldi	r24, 0x84	; 132
     998:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <SPI_setChipSelect>
}
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     9ae:	0e 94 a3 04 	call	0x946	; 0x946 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9b2:	8e e0       	ldi	r24, 0x0E	; 14
     9b4:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     9b8:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     9ba:	80 38       	cpi	r24, 0x80	; 128
     9bc:	69 f0       	breq	.+26     	; 0x9d8 <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     9be:	1f 92       	push	r1
     9c0:	8f 93       	push	r24
     9c2:	84 ef       	ldi	r24, 0xF4	; 244
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	9f 93       	push	r25
     9c8:	8f 93       	push	r24
     9ca:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
		return;
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	38 c0       	rjmp	.+112    	; 0xa48 <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9d8:	4c 2f       	mov	r20, r28
     9da:	4c 60       	ori	r20, 0x0C	; 12
     9dc:	6f e0       	ldi	r22, 0x0F	; 15
     9de:	8e ee       	ldi	r24, 0xEE	; 238
     9e0:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	6b e2       	ldi	r22, 0x2B	; 43
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     9ee:	40 e6       	ldi	r20, 0x60	; 96
     9f0:	60 e6       	ldi	r22, 0x60	; 96
     9f2:	80 e6       	ldi	r24, 0x60	; 96
     9f4:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_bitModify>
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <CAN_controller_setMode+0x56>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <CAN_controller_setMode+0x60>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a0a:	8e e0       	ldi	r24, 0x0E	; 14
     a0c:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     a10:	d8 2f       	mov	r29, r24
     a12:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     a14:	cd 17       	cp	r28, r29
     a16:	61 f0       	breq	.+24     	; 0xa30 <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     a18:	1f 92       	push	r1
     a1a:	df 93       	push	r29
     a1c:	8f e0       	ldi	r24, 0x0F	; 15
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     a30:	1f 92       	push	r1
     a32:	df 93       	push	r29
     a34:	8f e2       	ldi	r24, 0x2F	; 47
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	9f 93       	push	r25
     a3a:	8f 93       	push	r24
     a3c:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     a4e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     a52:	80 e4       	ldi	r24, 0x40	; 64
     a54:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a58:	8b b7       	in	r24, 0x3b	; 59
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a5e:	85 b7       	in	r24, 0x35	; 53
     a60:	82 60       	ori	r24, 0x02	; 2
     a62:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a64:	85 b7       	in	r24, 0x35	; 53
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a6a:	81 b3       	in	r24, 0x11	; 17
     a6c:	84 70       	andi	r24, 0x04	; 4
     a6e:	81 bb       	out	0x11, r24	; 17
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <CAN_controller_init+0x28>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <CAN_controller_init+0x32>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     a82:	8e e3       	ldi	r24, 0x3E	; 62
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a8e:	8e e0       	ldi	r24, 0x0E	; 14
     a90:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_controller_read>
	printf("Data: %i\n\r", status);
     a94:	1f 92       	push	r1
     a96:	8f 93       	push	r24
     a98:	87 e5       	ldi	r24, 0x57	; 87
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>

}
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	08 95       	ret

00000ab2 <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     ab2:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
     ab6:	ef e7       	ldi	r30, 0x7F	; 127
     ab8:	f3 e0       	ldi	r31, 0x03	; 3
     aba:	a4 e8       	ldi	r26, 0x84	; 132
     abc:	b3 e0       	ldi	r27, 0x03	; 3
     abe:	84 e8       	ldi	r24, 0x84	; 132
     ac0:	93 e0       	ldi	r25, 0x03	; 3
     ac2:	11 92       	st	Z+, r1
     ac4:	1d 92       	st	X+, r1
     ac6:	e8 17       	cp	r30, r24
     ac8:	f9 07       	cpc	r31, r25
     aca:	d9 f7       	brne	.-10     	; 0xac2 <game_init+0x10>
     acc:	08 95       	ret

00000ace <game_countdown>:
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	1f 92       	push	r1
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	4a e0       	ldi	r20, 0x0A	; 10
     ade:	be 01       	movw	r22, r28
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
     aec:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
     af0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
     af4:	0b e6       	ldi	r16, 0x6B	; 107
     af6:	13 e0       	ldi	r17, 0x03	; 3
     af8:	f8 01       	movw	r30, r16
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	02 96       	adiw	r24, 0x02	; 2
     b00:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     b14:	86 e0       	ldi	r24, 0x06	; 6
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <music_playNote>
     b1c:	ff ef       	ldi	r31, 0xFF	; 255
     b1e:	2f e7       	ldi	r18, 0x7F	; 127
     b20:	87 e0       	ldi	r24, 0x07	; 7
     b22:	f1 50       	subi	r31, 0x01	; 1
     b24:	20 40       	sbci	r18, 0x00	; 0
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <game_countdown+0x54>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <game_countdown+0x5e>
     b2c:	00 00       	nop
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <music_playNote>
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	ef e7       	ldi	r30, 0x7F	; 127
     b3a:	f7 e0       	ldi	r31, 0x07	; 7
     b3c:	91 50       	subi	r25, 0x01	; 1
     b3e:	e0 40       	sbci	r30, 0x00	; 0
     b40:	f0 40       	sbci	r31, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <game_countdown+0x6e>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <game_countdown+0x78>
     b46:	00 00       	nop
     b48:	4a e0       	ldi	r20, 0x0A	; 10
     b4a:	be 01       	movw	r22, r28
     b4c:	6f 5f       	subi	r22, 0xFF	; 255
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
     b58:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
     b5c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
     b60:	f8 01       	movw	r30, r16
     b62:	80 81       	ld	r24, Z
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	02 96       	adiw	r24, 0x02	; 2
     b68:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     b7c:	86 e0       	ldi	r24, 0x06	; 6
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <music_playNote>
     b84:	ff ef       	ldi	r31, 0xFF	; 255
     b86:	2f e7       	ldi	r18, 0x7F	; 127
     b88:	87 e0       	ldi	r24, 0x07	; 7
     b8a:	f1 50       	subi	r31, 0x01	; 1
     b8c:	20 40       	sbci	r18, 0x00	; 0
     b8e:	80 40       	sbci	r24, 0x00	; 0
     b90:	e1 f7       	brne	.-8      	; 0xb8a <game_countdown+0xbc>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <game_countdown+0xc6>
     b94:	00 00       	nop
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <music_playNote>
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	ef e7       	ldi	r30, 0x7F	; 127
     ba2:	f7 e0       	ldi	r31, 0x07	; 7
     ba4:	91 50       	subi	r25, 0x01	; 1
     ba6:	e0 40       	sbci	r30, 0x00	; 0
     ba8:	f0 40       	sbci	r31, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <game_countdown+0xd6>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <game_countdown+0xe0>
     bae:	00 00       	nop
     bb0:	4a e0       	ldi	r20, 0x0A	; 10
     bb2:	be 01       	movw	r22, r28
     bb4:	6f 5f       	subi	r22, 0xFF	; 255
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
     bc0:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
     bc4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
     bc8:	f8 01       	movw	r30, r16
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	02 96       	adiw	r24, 0x02	; 2
     bd0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     be4:	86 e0       	ldi	r24, 0x06	; 6
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <music_playNote>
     bec:	ff ef       	ldi	r31, 0xFF	; 255
     bee:	2f e7       	ldi	r18, 0x7F	; 127
     bf0:	87 e0       	ldi	r24, 0x07	; 7
     bf2:	f1 50       	subi	r31, 0x01	; 1
     bf4:	20 40       	sbci	r18, 0x00	; 0
     bf6:	80 40       	sbci	r24, 0x00	; 0
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <game_countdown+0x124>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <game_countdown+0x12e>
     bfc:	00 00       	nop
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <music_playNote>
     c06:	9f ef       	ldi	r25, 0xFF	; 255
     c08:	ef e7       	ldi	r30, 0x7F	; 127
     c0a:	f7 e0       	ldi	r31, 0x07	; 7
     c0c:	91 50       	subi	r25, 0x01	; 1
     c0e:	e0 40       	sbci	r30, 0x00	; 0
     c10:	f0 40       	sbci	r31, 0x00	; 0
     c12:	e1 f7       	brne	.-8      	; 0xc0c <game_countdown+0x13e>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <game_countdown+0x148>
     c16:	00 00       	nop
     c18:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
     c1c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
     c20:	f8 01       	movw	r30, r16
     c22:	80 81       	ld	r24, Z
     c24:	91 81       	ldd	r25, Z+1	; 0x01
     c26:	02 96       	adiw	r24, 0x02	; 2
     c28:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
     c34:	82 e6       	ldi	r24, 0x62	; 98
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     c3c:	87 e1       	ldi	r24, 0x17	; 23
     c3e:	94 e0       	ldi	r25, 0x04	; 4
     c40:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <music_playNote>
     c44:	ff ef       	ldi	r31, 0xFF	; 255
     c46:	2f e7       	ldi	r18, 0x7F	; 127
     c48:	87 e0       	ldi	r24, 0x07	; 7
     c4a:	f1 50       	subi	r31, 0x01	; 1
     c4c:	20 40       	sbci	r18, 0x00	; 0
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	e1 f7       	brne	.-8      	; 0xc4a <game_countdown+0x17c>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <game_countdown+0x186>
     c54:	00 00       	nop
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <music_playNote>
     c5e:	9f ef       	ldi	r25, 0xFF	; 255
     c60:	ef e7       	ldi	r30, 0x7F	; 127
     c62:	f7 e0       	ldi	r31, 0x07	; 7
     c64:	91 50       	subi	r25, 0x01	; 1
     c66:	e0 40       	sbci	r30, 0x00	; 0
     c68:	f0 40       	sbci	r31, 0x00	; 0
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <game_countdown+0x196>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <game_countdown+0x1a0>
     c6e:	00 00       	nop
     c70:	0f 90       	pop	r0
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <game_initialCANMessage>:
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	2b 97       	sbiw	r28, 0x0b	; 11
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9a 87       	std	Y+10, r25	; 0x0a
     c96:	89 87       	std	Y+9, r24	; 0x09
     c98:	1b 86       	std	Y+11, r1	; 0x0b
     c9a:	ce 01       	movw	r24, r28
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	0e 94 38 03 	call	0x670	; 0x670 <CAN_transmit_message>
     ca2:	2b 96       	adiw	r28, 0x0b	; 11
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <game_newgame>:
     cb4:	f8 94       	cli
     cb6:	0e 94 67 05 	call	0xace	; 0xace <game_countdown>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <gameActive>
     cc0:	e9 e8       	ldi	r30, 0x89	; 137
     cc2:	f3 e0       	ldi	r31, 0x03	; 3
     cc4:	8a e0       	ldi	r24, 0x0A	; 10
     cc6:	80 83       	st	Z, r24
     cc8:	12 82       	std	Z+2, r1	; 0x02
     cca:	83 e6       	ldi	r24, 0x63	; 99
     ccc:	81 83       	std	Z+1, r24	; 0x01
     cce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <game_initialCANMessage>
     cd2:	78 94       	sei
     cd4:	08 95       	ret

00000cd6 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     cd6:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <flag>
     cda:	88 23       	and	r24, r24
     cdc:	d9 f0       	breq	.+54     	; 0xd14 <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     cde:	f8 94       	cli
		printf("Message received");
     ce0:	85 e6       	ldi	r24, 0x65	; 101
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
		flag=0;
     cec:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <flag>
		CAN_receiveMessage(&received_message);
     cf0:	83 e7       	ldi	r24, 0x73	; 115
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     cf8:	0e 94 32 03 	call	0x664	; 0x664 <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     cfc:	a3 e7       	ldi	r26, 0x73	; 115
     cfe:	b3 e0       	ldi	r27, 0x03	; 3
     d00:	8c 91       	ld	r24, X
     d02:	e9 e8       	ldi	r30, 0x89	; 137
     d04:	f3 e0       	ldi	r31, 0x03	; 3
     d06:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     d08:	11 96       	adiw	r26, 0x01	; 1
     d0a:	8c 91       	ld	r24, X
     d0c:	82 83       	std	Z+2, r24	; 0x02
		sei();
     d0e:	78 94       	sei
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	08 95       	ret

00000d16 <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <game_updateOled+0xa>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <game_updateOled+0xc>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     d28:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
	oled_home();
     d2c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d30:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <currentMenu>
     d34:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <currentMenu+0x1>
     d38:	02 96       	adiw	r24, 0x02	; 2
     d3a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     d3e:	83 e0       	ldi	r24, 0x03	; 3
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
	switch(gameID) {
     d46:	11 30       	cpi	r17, 0x01	; 1
     d48:	19 f0       	breq	.+6      	; 0xd50 <game_updateOled+0x3a>
     d4a:	12 30       	cpi	r17, 0x02	; 2
     d4c:	51 f1       	breq	.+84     	; 0xda2 <game_updateOled+0x8c>
     d4e:	3a c0       	rjmp	.+116    	; 0xdc4 <game_updateOled+0xae>
		case 1:
			oled_print("Score: ");
     d50:	86 e7       	ldi	r24, 0x76	; 118
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
			itoa(gameData.score,score_string,10);
     d58:	09 e8       	ldi	r16, 0x89	; 137
     d5a:	13 e0       	ldi	r17, 0x03	; 3
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d5c:	f8 01       	movw	r30, r16
     d5e:	80 81       	ld	r24, Z
     d60:	4a e0       	ldi	r20, 0x0A	; 10
     d62:	be 01       	movw	r22, r28
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
			oled_print(score_string);
     d6e:	ce 01       	movw	r24, r28
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
			oled_gotoLine(5);
     d76:	85 e0       	ldi	r24, 0x05	; 5
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
			oled_print("Time: ");
     d7e:	8e e7       	ldi	r24, 0x7E	; 126
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     d86:	f8 01       	movw	r30, r16
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	4a e0       	ldi	r20, 0x0A	; 10
     d8c:	be 01       	movw	r22, r28
     d8e:	6d 5f       	subi	r22, 0xFD	; 253
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d98:	ce 01       	movw	r24, r28
     d9a:	03 96       	adiw	r24, 0x03	; 3
     d9c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
			break;
     da0:	11 c0       	rjmp	.+34     	; 0xdc4 <game_updateOled+0xae>
		case 2:
			oled_print("Air time: ");
     da2:	85 e8       	ldi	r24, 0x85	; 133
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     daa:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <gameData+0x2>
     dae:	4a e0       	ldi	r20, 0x0A	; 10
     db0:	be 01       	movw	r22, r28
     db2:	6d 5f       	subi	r22, 0xFD	; 253
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     dbc:	ce 01       	movw	r24, r28
     dbe:	03 96       	adiw	r24, 0x03	; 3
     dc0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
			break;

	}
	
}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	08 95       	ret

00000dd6 <game_sendStop>:

void game_sendStop() {
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	2b 97       	sbiw	r28, 0x0b	; 11
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     dea:	83 e0       	ldi	r24, 0x03	; 3
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9a 87       	std	Y+10, r25	; 0x0a
     df0:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     df2:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 38 03 	call	0x670	; 0x670 <CAN_transmit_message>
}
     dfc:	2b 96       	adiw	r28, 0x0b	; 11
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <game_finished>:
void game_finished(uint8_t gameID) {
     e0e:	cf 93       	push	r28
     e10:	c8 2f       	mov	r28, r24
	cli();
     e12:	f8 94       	cli
	game_sendStop();
     e14:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <game_sendStop>
	oled_reset();
     e18:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
	oled_home();
     e1c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
	oled_gotoLine(3);
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
	oled_print("Game over");
     e28:	80 e9       	ldi	r24, 0x90	; 144
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
	oled_gotoLine(4);
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
	oled_print("Maybe HS?");
     e38:	8a e9       	ldi	r24, 0x9A	; 154
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
	music_gameOver();
     e40:	0e 94 9e 08 	call	0x113c	; 0x113c <music_gameOver>
	gameActive=0;
     e44:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
	
	menu_init();
     e48:	0e 94 8f 0a 	call	0x151e	; 0x151e <menu_init>
	switch (gameID) {
     e4c:	c1 30       	cpi	r28, 0x01	; 1
     e4e:	51 f0       	breq	.+20     	; 0xe64 <game_finished+0x56>
     e50:	c2 30       	cpi	r28, 0x02	; 2
     e52:	09 f0       	breq	.+2      	; 0xe56 <game_finished+0x48>
     e54:	50 c0       	rjmp	.+160    	; 0xef6 <game_finished+0xe8>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e56:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <gameData+0x2>
     e5a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <highScores2>
     e5e:	83 17       	cp	r24, r19
     e60:	48 f5       	brcc	.+82     	; 0xeb4 <game_finished+0xa6>
     e62:	33 c0       	rjmp	.+102    	; 0xeca <game_finished+0xbc>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e64:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <gameData>
     e68:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <highScores>
     e6c:	83 17       	cp	r24, r19
     e6e:	58 f0       	brcs	.+22     	; 0xe86 <game_finished+0x78>
     e70:	e0 e8       	ldi	r30, 0x80	; 128
     e72:	f3 e0       	ldi	r31, 0x03	; 3
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e78:	21 91       	ld	r18, Z+
     e7a:	23 17       	cp	r18, r19
     e7c:	b0 f4       	brcc	.+44     	; 0xeaa <game_finished+0x9c>
					for (int a = 4; a>i; a--) {
     e7e:	84 30       	cpi	r24, 0x04	; 4
     e80:	91 05       	cpc	r25, r1
     e82:	1c f0       	brlt	.+6      	; 0xe8a <game_finished+0x7c>
     e84:	0d c0       	rjmp	.+26     	; 0xea0 <game_finished+0x92>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	e3 e8       	ldi	r30, 0x83	; 131
     e8c:	f3 e0       	ldi	r31, 0x03	; 3
     e8e:	44 e0       	ldi	r20, 0x04	; 4
     e90:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e92:	41 50       	subi	r20, 0x01	; 1
     e94:	51 09       	sbc	r21, r1
     e96:	22 91       	ld	r18, -Z
     e98:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e9a:	84 17       	cp	r24, r20
     e9c:	95 07       	cpc	r25, r21
     e9e:	cc f3       	brlt	.-14     	; 0xe92 <game_finished+0x84>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     ea0:	fc 01       	movw	r30, r24
     ea2:	e1 58       	subi	r30, 0x81	; 129
     ea4:	fc 4f       	sbci	r31, 0xFC	; 252
     ea6:	30 83       	st	Z, r19
					break;
     ea8:	26 c0       	rjmp	.+76     	; 0xef6 <game_finished+0xe8>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	85 30       	cpi	r24, 0x05	; 5
     eae:	91 05       	cpc	r25, r1
     eb0:	19 f7       	brne	.-58     	; 0xe78 <game_finished+0x6a>
     eb2:	21 c0       	rjmp	.+66     	; 0xef6 <game_finished+0xe8>
     eb4:	e5 e8       	ldi	r30, 0x85	; 133
     eb6:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     ebc:	21 91       	ld	r18, Z+
     ebe:	23 17       	cp	r18, r19
     ec0:	b0 f4       	brcc	.+44     	; 0xeee <game_finished+0xe0>
					for (int a = 4; a>i; a--) {
     ec2:	84 30       	cpi	r24, 0x04	; 4
     ec4:	91 05       	cpc	r25, r1
     ec6:	1c f0       	brlt	.+6      	; 0xece <game_finished+0xc0>
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <game_finished+0xd6>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	e8 e8       	ldi	r30, 0x88	; 136
     ed0:	f3 e0       	ldi	r31, 0x03	; 3
     ed2:	44 e0       	ldi	r20, 0x04	; 4
     ed4:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     ed6:	41 50       	subi	r20, 0x01	; 1
     ed8:	51 09       	sbc	r21, r1
     eda:	22 91       	ld	r18, -Z
     edc:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     ede:	84 17       	cp	r24, r20
     ee0:	95 07       	cpc	r25, r21
     ee2:	cc f3       	brlt	.-14     	; 0xed6 <game_finished+0xc8>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     ee4:	fc 01       	movw	r30, r24
     ee6:	ec 57       	subi	r30, 0x7C	; 124
     ee8:	fc 4f       	sbci	r31, 0xFC	; 252
     eea:	30 83       	st	Z, r19
					break;
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <game_finished+0xe8>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	85 30       	cpi	r24, 0x05	; 5
     ef2:	91 05       	cpc	r25, r1
     ef4:	19 f7       	brne	.-58     	; 0xebc <game_finished+0xae>
			break;
		
	}
	
	
	sei();
     ef6:	78 94       	sei
}
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <game_play>:
void game_play(uint8_t gameID)
{
     efc:	cf 93       	push	r28
     efe:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     f00:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <gameActive>
     f04:	81 11       	cpse	r24, r1
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <game_play+0x10>
	{
		game_newgame();	
     f08:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <game_newgame>
	}
	if (buttons.right_button) {
     f0c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <buttons+0x1>
     f10:	88 23       	and	r24, r24
     f12:	21 f0       	breq	.+8      	; 0xf1c <game_play+0x20>
		gameActive = 0;
     f14:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
		menu_init();
     f18:	0e 94 8f 0a 	call	0x151e	; 0x151e <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     f1c:	0e 94 28 04 	call	0x850	; 0x850 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     f20:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <game_recieveGameData>
	game_updateOled(gameID);
     f24:	8c 2f       	mov	r24, r28
     f26:	0e 94 8b 06 	call	0xd16	; 0xd16 <game_updateOled>
	switch (gameID) {
     f2a:	c1 30       	cpi	r28, 0x01	; 1
     f2c:	19 f0       	breq	.+6      	; 0xf34 <game_play+0x38>
     f2e:	c2 30       	cpi	r28, 0x02	; 2
     f30:	49 f0       	breq	.+18     	; 0xf44 <game_play+0x48>
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <game_play+0x56>
		case 1:
			if (gameData.playtime==10) {
     f34:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <gameData+0x2>
     f38:	8a 30       	cpi	r24, 0x0A	; 10
     f3a:	59 f4       	brne	.+22     	; 0xf52 <game_play+0x56>
				game_finished(gameID);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	0e 94 07 07 	call	0xe0e	; 0xe0e <game_finished>
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <game_play+0x56>
			}
			break;
		case 2:
			if (gameData.score <10) {
     f44:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <gameData>
     f48:	8a 30       	cpi	r24, 0x0A	; 10
     f4a:	18 f4       	brcc	.+6      	; 0xf52 <game_play+0x56>
				game_finished(gameID);
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	0e 94 07 07 	call	0xe0e	; 0xe0e <game_finished>
			}
			break;
	}
	
	
}
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f56:	bf 92       	push	r11
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	00 d0       	rcall	.+0      	; 0xf6a <game_displayHighscores+0x14>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	b8 2e       	mov	r11, r24
	oled_reset();
     f70:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
	oled_home();
     f74:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f78:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <currentMenu>
     f7c:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <currentMenu+0x1>
     f80:	02 96       	adiw	r24, 0x02	; 2
     f82:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
     f86:	0f 2e       	mov	r0, r31
     f88:	ff e7       	ldi	r31, 0x7F	; 127
     f8a:	cf 2e       	mov	r12, r31
     f8c:	f3 e0       	ldi	r31, 0x03	; 3
     f8e:	df 2e       	mov	r13, r31
     f90:	f0 2d       	mov	r31, r0
     f92:	0f 2e       	mov	r0, r31
     f94:	f4 e8       	ldi	r31, 0x84	; 132
     f96:	ef 2e       	mov	r14, r31
     f98:	f3 e0       	ldi	r31, 0x03	; 3
     f9a:	ff 2e       	mov	r15, r31
     f9c:	f0 2d       	mov	r31, r0
	
	for (int i=0;i<5;i++)
     f9e:	00 e0       	ldi	r16, 0x00	; 0
     fa0:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_gotoLine(3+i);
     fa2:	c8 01       	movw	r24, r16
     fa4:	03 96       	adiw	r24, 0x03	; 3
     fa6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
		oled_print("Score ");
     faa:	84 ea       	ldi	r24, 0xA4	; 164
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     fb2:	0f 5f       	subi	r16, 0xFF	; 255
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	4a e0       	ldi	r20, 0x0A	; 10
     fb8:	be 01       	movw	r22, r28
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	c8 01       	movw	r24, r16
     fc0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
		oled_print(num);
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
		oled_print(": ");
     fcc:	82 e8       	ldi	r24, 0x82	; 130
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
		switch (gameID) {
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	b8 16       	cp	r11, r24
     fd8:	21 f0       	breq	.+8      	; 0xfe2 <game_displayHighscores+0x8c>
     fda:	e2 e0       	ldi	r30, 0x02	; 2
     fdc:	be 16       	cp	r11, r30
     fde:	59 f0       	breq	.+22     	; 0xff6 <game_displayHighscores+0xa0>
     fe0:	13 c0       	rjmp	.+38     	; 0x1008 <game_displayHighscores+0xb2>
     fe2:	f6 01       	movw	r30, r12
     fe4:	80 81       	ld	r24, Z
     fe6:	4a e0       	ldi	r20, 0x0A	; 10
     fe8:	be 01       	movw	r22, r28
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <game_displayHighscores+0xb2>
     ff6:	f7 01       	movw	r30, r14
     ff8:	80 81       	ld	r24, Z
     ffa:	4a e0       	ldi	r20, 0x0A	; 10
     ffc:	be 01       	movw	r22, r28
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
    1008:	ce 01       	movw	r24, r28
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
    1010:	ff ef       	ldi	r31, 0xFF	; 255
    1012:	cf 1a       	sub	r12, r31
    1014:	df 0a       	sbc	r13, r31
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	e8 1a       	sub	r14, r24
    101a:	f8 0a       	sbc	r15, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
    101c:	05 30       	cpi	r16, 0x05	; 5
    101e:	11 05       	cpc	r17, r1
    1020:	09 f0       	breq	.+2      	; 0x1024 <game_displayHighscores+0xce>
    1022:	bf cf       	rjmp	.-130    	; 0xfa2 <game_displayHighscores+0x4c>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	bf 90       	pop	r11
    103a:	08 95       	ret

0000103c <music_playRick>:
	pwm_setFreq(0);
	sei();

}
*/
void music_playRick() {
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
	
	//printf("You got rickrolled\n\n\r");
	cli();
    1054:	f8 94       	cli
	oled_home();
    1056:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
	oled_reset();
    105a:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
    105e:	0d ee       	ldi	r16, 0xED	; 237
    1060:	10 e0       	ldi	r17, 0x00	; 0
    1062:	0f 2e       	mov	r0, r31
    1064:	fe e9       	ldi	r31, 0x9E	; 158
    1066:	ef 2e       	mov	r14, r31
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	ff 2e       	mov	r15, r31
    106c:	f0 2d       	mov	r31, r0
    106e:	c6 e0       	ldi	r28, 0x06	; 6
    1070:	d1 e0       	ldi	r29, 0x01	; 1
    1072:	0f 2e       	mov	r0, r31
    1074:	f9 e2       	ldi	r31, 0x29	; 41
    1076:	cf 2e       	mov	r12, r31
    1078:	f2 e0       	ldi	r31, 0x02	; 2
    107a:	df 2e       	mov	r13, r31
    107c:	f0 2d       	mov	r31, r0
    107e:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1080:	0f 2e       	mov	r0, r31
    1082:	f4 e1       	ldi	r31, 0x14	; 20
    1084:	af 2e       	mov	r10, r31
    1086:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1088:	b1 10       	cpse	r11, r1
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <music_playRick+0x54>
			oled_reset();
    108c:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
    1090:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1092:	e8 81       	ld	r30, Y
    1094:	f9 81       	ldd	r31, Y+1	; 0x01
    1096:	80 81       	ld	r24, Z
    1098:	88 23       	and	r24, r24
    109a:	41 f0       	breq	.+16     	; 0x10ac <music_playRick+0x70>
			oled_gotoLine(line);
    109c:	8b 2d       	mov	r24, r11
    109e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
			line++;
    10a2:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    10a4:	88 81       	ld	r24, Y
    10a6:	99 81       	ldd	r25, Y+1	; 0x01
    10a8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    10ac:	d4 01       	movw	r26, r8
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	22 96       	adiw	r28, 0x02	; 2
    10b4:	01 90       	ld	r0, Z+
    10b6:	00 20       	and	r0, r0
    10b8:	e9 f7       	brne	.-6      	; 0x10b4 <music_playRick+0x78>
    10ba:	32 97       	sbiw	r30, 0x02	; 2
    10bc:	80 81       	ld	r24, Z
    10be:	8e 32       	cpi	r24, 0x2E	; 46
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <music_playRick+0x88>
			
			line = 0;
    10c2:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    10c4:	f8 01       	movw	r30, r16
    10c6:	65 91       	lpm	r22, Z+
    10c8:	74 91       	lpm	r23, Z
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    10d2:	f7 01       	movw	r30, r14
    10d4:	84 91       	lpm	r24, Z
    10d6:	a8 9e       	mul	r10, r24
    10d8:	c0 01       	movw	r24, r0
    10da:	11 24       	eor	r1, r1
    10dc:	09 2e       	mov	r0, r25
    10de:	00 0c       	add	r0, r0
    10e0:	aa 0b       	sbc	r26, r26
    10e2:	bb 0b       	sbc	r27, r27
		while (duration--) {
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	a1 05       	cpc	r26, r1
    10e8:	b1 05       	cpc	r27, r1
    10ea:	51 f0       	breq	.+20     	; 0x1100 <music_playRick+0xc4>
    10ec:	ec ec       	ldi	r30, 0xCC	; 204
    10ee:	f4 e0       	ldi	r31, 0x04	; 4
    10f0:	31 97       	sbiw	r30, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <music_playRick+0xb4>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <music_playRick+0xba>
    10f6:	00 00       	nop
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	a1 09       	sbc	r26, r1
    10fc:	b1 09       	sbc	r27, r1
    10fe:	b1 f7       	brne	.-20     	; 0x10ec <music_playRick+0xb0>
    1100:	0c 5f       	subi	r16, 0xFC	; 252
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	ff ef       	ldi	r31, 0xFF	; 255
    1106:	ef 1a       	sub	r14, r31
    1108:	ff 0a       	sbc	r15, r31
	//printf("You got rickrolled\n\n\r");
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    110a:	0c 15       	cp	r16, r12
    110c:	1d 05       	cpc	r17, r13
    110e:	09 f0       	breq	.+2      	; 0x1112 <music_playRick+0xd6>
    1110:	bb cf       	rjmp	.-138    	; 0x1088 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	cb 01       	movw	r24, r22
    1118:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_setFreq>
	menu_init();
    111c:	0e 94 8f 0a 	call	0x151e	; 0x151e <menu_init>

	sei();
    1120:	78 94       	sei
	

}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12
    1132:	bf 90       	pop	r11
    1134:	af 90       	pop	r10
    1136:	9f 90       	pop	r9
    1138:	8f 90       	pop	r8
    113a:	08 95       	ret

0000113c <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    113c:	6b e0       	ldi	r22, 0x0B	; 11
    113e:	72 e0       	ldi	r23, 0x02	; 2
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_setFreq>
    1148:	2f ef       	ldi	r18, 0xFF	; 255
    114a:	8f e7       	ldi	r24, 0x7F	; 127
    114c:	97 e0       	ldi	r25, 0x07	; 7
    114e:	21 50       	subi	r18, 0x01	; 1
    1150:	80 40       	sbci	r24, 0x00	; 0
    1152:	90 40       	sbci	r25, 0x00	; 0
    1154:	e1 f7       	brne	.-8      	; 0x114e <music_gameOver+0x12>
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <music_gameOver+0x1c>
    1158:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    115a:	68 e8       	ldi	r22, 0x88	; 136
    115c:	71 e0       	ldi	r23, 0x01	; 1
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_setFreq>
    1166:	2f ef       	ldi	r18, 0xFF	; 255
    1168:	8f e7       	ldi	r24, 0x7F	; 127
    116a:	97 e0       	ldi	r25, 0x07	; 7
    116c:	21 50       	subi	r18, 0x01	; 1
    116e:	80 40       	sbci	r24, 0x00	; 0
    1170:	90 40       	sbci	r25, 0x00	; 0
    1172:	e1 f7       	brne	.-8      	; 0x116c <music_gameOver+0x30>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <music_gameOver+0x3a>
    1176:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    1178:	67 e3       	ldi	r22, 0x37	; 55
    117a:	71 e0       	ldi	r23, 0x01	; 1
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_setFreq>
    1184:	2f ef       	ldi	r18, 0xFF	; 255
    1186:	8f e7       	ldi	r24, 0x7F	; 127
    1188:	97 e0       	ldi	r25, 0x07	; 7
    118a:	21 50       	subi	r18, 0x01	; 1
    118c:	80 40       	sbci	r24, 0x00	; 0
    118e:	90 40       	sbci	r25, 0x00	; 0
    1190:	e1 f7       	brne	.-8      	; 0x118a <music_gameOver+0x4e>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <music_gameOver+0x58>
    1194:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    1196:	66 e0       	ldi	r22, 0x06	; 6
    1198:	71 e0       	ldi	r23, 0x01	; 1
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_setFreq>
    11a2:	2f ef       	ldi	r18, 0xFF	; 255
    11a4:	8f e7       	ldi	r24, 0x7F	; 127
    11a6:	97 e0       	ldi	r25, 0x07	; 7
    11a8:	21 50       	subi	r18, 0x01	; 1
    11aa:	80 40       	sbci	r24, 0x00	; 0
    11ac:	90 40       	sbci	r25, 0x00	; 0
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <music_gameOver+0x6c>
    11b0:	00 c0       	rjmp	.+0      	; 0x11b2 <music_gameOver+0x76>
    11b2:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	cb 01       	movw	r24, r22
    11ba:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_setFreq>
    11be:	08 95       	ret

000011c0 <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    11c0:	bc 01       	movw	r22, r24
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_setFreq>
    11ca:	08 95       	ret

000011cc <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    11cc:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    11d6:	83 b7       	in	r24, 0x33	; 51
    11d8:	88 60       	ori	r24, 0x08	; 8
    11da:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    11dc:	83 b7       	in	r24, 0x33	; 51
    11de:	80 61       	ori	r24, 0x10	; 16
    11e0:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    11e2:	83 b7       	in	r24, 0x33	; 51
    11e4:	88 7f       	andi	r24, 0xF8	; 248
    11e6:	83 bf       	out	0x33, r24	; 51
    11e8:	08 95       	ret

000011ea <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    if (freq == 0) {
    11ee:	67 2b       	or	r22, r23
    11f0:	68 2b       	or	r22, r24
    11f2:	69 2b       	or	r22, r25
    11f4:	21 f4       	brne	.+8      	; 0x11fe <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11f6:	83 b7       	in	r24, 0x33	; 51
    11f8:	88 7f       	andi	r24, 0xF8	; 248
    11fa:	83 bf       	out	0x33, r24	; 51
        return;
    11fc:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	70 e8       	ldi	r23, 0x80	; 128
    1202:	85 e2       	ldi	r24, 0x25	; 37
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__udivmodsi4>
    120a:	da 01       	movw	r26, r20
    120c:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    120e:	21 30       	cpi	r18, 0x01	; 1
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	36 07       	cpc	r19, r22
    1214:	41 05       	cpc	r20, r1
    1216:	51 05       	cpc	r21, r1
    1218:	a8 f1       	brcs	.+106    	; 0x1284 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    121a:	68 94       	set
    121c:	12 f8       	bld	r1, 2
    121e:	b6 95       	lsr	r27
    1220:	a7 95       	ror	r26
    1222:	97 95       	ror	r25
    1224:	87 95       	ror	r24
    1226:	16 94       	lsr	r1
    1228:	d1 f7       	brne	.-12     	; 0x121e <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	96 07       	cpc	r25, r22
    1230:	a1 05       	cpc	r26, r1
    1232:	b1 05       	cpc	r27, r1
    1234:	48 f1       	brcs	.+82     	; 0x1288 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    1236:	da 01       	movw	r26, r20
    1238:	c9 01       	movw	r24, r18
    123a:	68 94       	set
    123c:	15 f8       	bld	r1, 5
    123e:	b6 95       	lsr	r27
    1240:	a7 95       	ror	r26
    1242:	97 95       	ror	r25
    1244:	87 95       	ror	r24
    1246:	16 94       	lsr	r1
    1248:	d1 f7       	brne	.-12     	; 0x123e <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	96 07       	cpc	r25, r22
    1250:	a1 05       	cpc	r26, r1
    1252:	b1 05       	cpc	r27, r1
    1254:	d8 f0       	brcs	.+54     	; 0x128c <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    1256:	bb 27       	eor	r27, r27
    1258:	a5 2f       	mov	r26, r21
    125a:	94 2f       	mov	r25, r20
    125c:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	96 07       	cpc	r25, r22
    1264:	a1 05       	cpc	r26, r1
    1266:	b1 05       	cpc	r27, r1
    1268:	98 f0       	brcs	.+38     	; 0x1290 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    126a:	da 01       	movw	r26, r20
    126c:	c9 01       	movw	r24, r18
    126e:	07 2e       	mov	r0, r23
    1270:	7a e0       	ldi	r23, 0x0A	; 10
    1272:	b6 95       	lsr	r27
    1274:	a7 95       	ror	r26
    1276:	97 95       	ror	r25
    1278:	87 95       	ror	r24
    127a:	7a 95       	dec	r23
    127c:	d1 f7       	brne	.-12     	; 0x1272 <pwm_setFreq+0x88>
    127e:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    1280:	35 e0       	ldi	r19, 0x05	; 5
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    1284:	31 e0       	ldi	r19, 0x01	; 1
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    1288:	32 e0       	ldi	r19, 0x02	; 2
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    128c:	33 e0       	ldi	r19, 0x03	; 3
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    1290:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1292:	23 b7       	in	r18, 0x33	; 51
    1294:	28 7f       	andi	r18, 0xF8	; 248
    1296:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    1298:	23 b7       	in	r18, 0x33	; 51
    129a:	23 2b       	or	r18, r19
    129c:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    129e:	81 50       	subi	r24, 0x01	; 1
    12a0:	81 bf       	out	0x31, r24	; 49
    12a2:	08 95       	ret

000012a4 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    12a4:	85 b7       	in	r24, 0x35	; 53
    12a6:	8f 7e       	andi	r24, 0xEF	; 239
    12a8:	85 bf       	out	0x35, r24	; 53
    12aa:	84 b7       	in	r24, 0x34	; 52
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	84 bf       	out	0x34, r24	; 52
    12b0:	86 b7       	in	r24, 0x36	; 54
    12b2:	8f 77       	andi	r24, 0x7F	; 127
    12b4:	86 bf       	out	0x36, r24	; 54
    12b6:	08 95       	ret

000012b8 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    12b8:	88 b1       	in	r24, 0x08	; 8
    12ba:	88 68       	ori	r24, 0x88	; 136
    12bc:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    12be:	85 b7       	in	r24, 0x35	; 53
    12c0:	80 62       	ori	r24, 0x20	; 32
    12c2:	85 bf       	out	0x35, r24	; 53
    12c4:	88 95       	sleep
    12c6:	85 b7       	in	r24, 0x35	; 53
    12c8:	8f 7d       	andi	r24, 0xDF	; 223
    12ca:	85 bf       	out	0x35, r24	; 53
    12cc:	08 95       	ret

000012ce <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12d4:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12de:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <joystickOffsetY>
    12e2:	08 95       	ret

000012e4 <joystick_readPosition>:
}
void joystick_readPosition() {
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12f6:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12fe:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    1300:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <joystickOffsetX>
    1304:	c6 17       	cp	r28, r22
    1306:	80 f4       	brcc	.+32     	; 0x1328 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	2c 2f       	mov	r18, r28
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	26 1b       	sub	r18, r22
    1310:	37 0b       	sbc	r19, r23
    1312:	44 e6       	ldi	r20, 0x64	; 100
    1314:	42 9f       	mul	r20, r18
    1316:	c0 01       	movw	r24, r0
    1318:	43 9f       	mul	r20, r19
    131a:	90 0d       	add	r25, r0
    131c:	11 24       	eor	r1, r1
    131e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    1322:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <joystick_pos>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    1328:	46 2f       	mov	r20, r22
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	2c 2f       	mov	r18, r28
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	24 1b       	sub	r18, r20
    1332:	35 0b       	sbc	r19, r21
    1334:	64 e6       	ldi	r22, 0x64	; 100
    1336:	62 9f       	mul	r22, r18
    1338:	c0 01       	movw	r24, r0
    133a:	63 9f       	mul	r22, r19
    133c:	90 0d       	add	r25, r0
    133e:	11 24       	eor	r1, r1
    1340:	6f ef       	ldi	r22, 0xFF	; 255
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	64 1b       	sub	r22, r20
    1346:	75 0b       	sbc	r23, r21
    1348:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    134c:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    1350:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <joystickOffsetY>
    1354:	e2 17       	cp	r30, r18
    1356:	88 f4       	brcc	.+34     	; 0x137a <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1358:	62 2f       	mov	r22, r18
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	4e 2f       	mov	r20, r30
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	46 1b       	sub	r20, r22
    1362:	57 0b       	sbc	r21, r23
    1364:	24 e6       	ldi	r18, 0x64	; 100
    1366:	24 9f       	mul	r18, r20
    1368:	c0 01       	movw	r24, r0
    136a:	25 9f       	mul	r18, r21
    136c:	90 0d       	add	r25, r0
    136e:	11 24       	eor	r1, r1
    1370:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    1374:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos+0x1>
    1378:	13 c0       	rjmp	.+38     	; 0x13a0 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4e 2f       	mov	r20, r30
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	42 1b       	sub	r20, r18
    1382:	53 0b       	sbc	r21, r19
    1384:	64 e6       	ldi	r22, 0x64	; 100
    1386:	64 9f       	mul	r22, r20
    1388:	c0 01       	movw	r24, r0
    138a:	65 9f       	mul	r22, r21
    138c:	90 0d       	add	r25, r0
    138e:	11 24       	eor	r1, r1
    1390:	6f ef       	ldi	r22, 0xFF	; 255
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	62 1b       	sub	r22, r18
    1396:	73 0b       	sbc	r23, r19
    1398:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    139c:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    13a0:	c7 e6       	ldi	r28, 0x67	; 103
    13a2:	d3 e0       	ldi	r29, 0x03	; 3
    13a4:	68 81       	ld	r22, Y
    13a6:	06 2e       	mov	r0, r22
    13a8:	00 0c       	add	r0, r0
    13aa:	77 0b       	sbc	r23, r23
    13ac:	88 0b       	sbc	r24, r24
    13ae:	99 0b       	sbc	r25, r25
    13b0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__floatsisf>
    13b4:	6b 01       	movw	r12, r22
    13b6:	7c 01       	movw	r14, r24
    13b8:	69 81       	ldd	r22, Y+1	; 0x01
    13ba:	06 2e       	mov	r0, r22
    13bc:	00 0c       	add	r0, r0
    13be:	77 0b       	sbc	r23, r23
    13c0:	88 0b       	sbc	r24, r24
    13c2:	99 0b       	sbc	r25, r25
    13c4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__floatsisf>
    13c8:	a7 01       	movw	r20, r14
    13ca:	96 01       	movw	r18, r12
    13cc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <atan2>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	44 eb       	ldi	r20, 0xB4	; 180
    13d6:	53 e4       	ldi	r21, 0x43	; 67
    13d8:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	5f e3       	ldi	r21, 0x3F	; 63
    13e4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
    13e8:	23 ec       	ldi	r18, 0xC3	; 195
    13ea:	35 ef       	ldi	r19, 0xF5	; 245
    13ec:	48 e4       	ldi	r20, 0x48	; 72
    13ee:	50 e4       	ldi	r21, 0x40	; 64
    13f0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__divsf3>
    13f4:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__fixsfsi>
    13f8:	7b 83       	std	Y+3, r23	; 0x03
    13fa:	6a 83       	std	Y+2, r22	; 0x02
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	08 95       	ret

0000140a <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    140a:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    140c:	80 81       	ld	r24, Z
    140e:	94 e0       	ldi	r25, 0x04	; 4
    1410:	98 0f       	add	r25, r24
    1412:	99 30       	cpi	r25, 0x09	; 9
    1414:	20 f4       	brcc	.+8      	; 0x141e <joystick_getDirection+0x14>
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	9c 5f       	subi	r25, 0xFC	; 252
    141a:	99 30       	cpi	r25, 0x09	; 9
    141c:	90 f0       	brcs	.+36     	; 0x1442 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    141e:	85 30       	cpi	r24, 0x05	; 5
    1420:	2c f0       	brlt	.+10     	; 0x142c <joystick_getDirection+0x22>
    1422:	81 81       	ldd	r24, Z+1	; 0x01
    1424:	8f 5c       	subi	r24, 0xCF	; 207
    1426:	83 36       	cpi	r24, 0x63	; 99
    1428:	38 f4       	brcc	.+14     	; 0x1438 <joystick_getDirection+0x2e>
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    142c:	8c 3f       	cpi	r24, 0xFC	; 252
    142e:	24 f4       	brge	.+8      	; 0x1438 <joystick_getDirection+0x2e>
    1430:	81 81       	ldd	r24, Z+1	; 0x01
    1432:	8f 5c       	subi	r24, 0xCF	; 207
    1434:	83 36       	cpi	r24, 0x63	; 99
    1436:	48 f0       	brcs	.+18     	; 0x144a <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    1438:	81 81       	ldd	r24, Z+1	; 0x01
    143a:	8c 3f       	cpi	r24, 0xFC	; 252
    143c:	44 f0       	brlt	.+16     	; 0x144e <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    144e:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    1450:	08 95       	ret

00001452 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    1452:	0e 94 05 0a 	call	0x140a	; 0x140a <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    1456:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <currentMenu+0x3>
    145a:	94 30       	cpi	r25, 0x04	; 4
    145c:	09 f0       	breq	.+2      	; 0x1460 <navigateMenu+0xe>
    145e:	5c c0       	rjmp	.+184    	; 0x1518 <navigateMenu+0xc6>
			switch (dir) {
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	e1 f1       	breq	.+120    	; 0x14dc <navigateMenu+0x8a>
    1464:	60 f1       	brcs	.+88     	; 0x14be <navigateMenu+0x6c>
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	c9 f0       	breq	.+50     	; 0x149c <navigateMenu+0x4a>
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	09 f0       	breq	.+2      	; 0x1470 <navigateMenu+0x1e>
    146e:	54 c0       	rjmp	.+168    	; 0x1518 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    1470:	eb e6       	ldi	r30, 0x6B	; 107
    1472:	f3 e0       	ldi	r31, 0x03	; 3
    1474:	92 81       	ldd	r25, Z+2	; 0x02
    1476:	49 2f       	mov	r20, r25
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	01 90       	ld	r0, Z+
    147c:	f0 81       	ld	r31, Z
    147e:	e0 2d       	mov	r30, r0
    1480:	20 a1       	ldd	r18, Z+32	; 0x20
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	21 50       	subi	r18, 0x01	; 1
    1486:	31 09       	sbc	r19, r1
    1488:	42 17       	cp	r20, r18
    148a:	53 07       	cpc	r21, r19
    148c:	24 f4       	brge	.+8      	; 0x1496 <navigateMenu+0x44>
					currentMenu.childIndex++;
    148e:	9f 5f       	subi	r25, 0xFF	; 255
    1490:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <currentMenu+0x2>
    1494:	41 c0       	rjmp	.+130    	; 0x1518 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1496:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <currentMenu+0x2>
    149a:	3e c0       	rjmp	.+124    	; 0x1518 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    149c:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <currentMenu+0x2>
    14a0:	99 23       	and	r25, r25
    14a2:	21 f0       	breq	.+8      	; 0x14ac <navigateMenu+0x5a>
					currentMenu.childIndex--;
    14a4:	91 50       	subi	r25, 0x01	; 1
    14a6:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <currentMenu+0x2>
    14aa:	36 c0       	rjmp	.+108    	; 0x1518 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    14ac:	eb e6       	ldi	r30, 0x6B	; 107
    14ae:	f3 e0       	ldi	r31, 0x03	; 3
    14b0:	a0 81       	ld	r26, Z
    14b2:	b1 81       	ldd	r27, Z+1	; 0x01
    14b4:	90 96       	adiw	r26, 0x20	; 32
    14b6:	9c 91       	ld	r25, X
    14b8:	91 50       	subi	r25, 0x01	; 1
    14ba:	92 83       	std	Z+2, r25	; 0x02
    14bc:	2d c0       	rjmp	.+90     	; 0x1518 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    14be:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <currentMenu>
    14c2:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <currentMenu+0x1>
    14c6:	22 89       	ldd	r18, Z+18	; 0x12
    14c8:	33 89       	ldd	r19, Z+19	; 0x13
    14ca:	21 15       	cp	r18, r1
    14cc:	31 05       	cpc	r19, r1
    14ce:	21 f1       	breq	.+72     	; 0x1518 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    14d0:	eb e6       	ldi	r30, 0x6B	; 107
    14d2:	f3 e0       	ldi	r31, 0x03	; 3
    14d4:	31 83       	std	Z+1, r19	; 0x01
    14d6:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    14d8:	12 82       	std	Z+2, r1	; 0x02
    14da:	1e c0       	rjmp	.+60     	; 0x1518 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    14dc:	ab e6       	ldi	r26, 0x6B	; 107
    14de:	b3 e0       	ldi	r27, 0x03	; 3
    14e0:	2d 91       	ld	r18, X+
    14e2:	3c 91       	ld	r19, X
    14e4:	11 97       	sbiw	r26, 0x01	; 1
    14e6:	12 96       	adiw	r26, 0x02	; 2
    14e8:	9c 91       	ld	r25, X
    14ea:	e9 2f       	mov	r30, r25
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	3a 96       	adiw	r30, 0x0a	; 10
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	e2 0f       	add	r30, r18
    14f6:	f3 1f       	adc	r31, r19
    14f8:	01 90       	ld	r0, Z+
    14fa:	f0 81       	ld	r31, Z
    14fc:	e0 2d       	mov	r30, r0
    14fe:	90 a1       	ldd	r25, Z+32	; 0x20
    1500:	91 11       	cpse	r25, r1
    1502:	03 c0       	rjmp	.+6      	; 0x150a <navigateMenu+0xb8>
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	99 23       	and	r25, r25
    1508:	39 f0       	breq	.+14     	; 0x1518 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    150a:	ab e6       	ldi	r26, 0x6B	; 107
    150c:	b3 e0       	ldi	r27, 0x03	; 3
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	fc 93       	st	X, r31
    1512:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    1514:	12 96       	adiw	r26, 0x02	; 2
    1516:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    1518:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <currentMenu+0x3>
    151c:	08 95       	ret

0000151e <menu_init>:



MenuNode nodes[8];

void menu_init() {
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    1526:	8a e0       	ldi	r24, 0x0A	; 10
    1528:	ec e1       	ldi	r30, 0x1C	; 28
    152a:	f3 e0       	ldi	r31, 0x03	; 3
    152c:	a0 e9       	ldi	r26, 0x90	; 144
    152e:	b3 e0       	ldi	r27, 0x03	; 3
    1530:	01 90       	ld	r0, Z+
    1532:	0d 92       	st	X+, r0
    1534:	8a 95       	dec	r24
    1536:	e1 f7       	brne	.-8      	; 0x1530 <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	e6 e2       	ldi	r30, 0x26	; 38
    153c:	f3 e0       	ldi	r31, 0x03	; 3
    153e:	a1 eb       	ldi	r26, 0xB1	; 177
    1540:	b3 e0       	ldi	r27, 0x03	; 3
    1542:	01 90       	ld	r0, Z+
    1544:	0d 92       	st	X+, r0
    1546:	8a 95       	dec	r24
    1548:	e1 f7       	brne	.-8      	; 0x1542 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    154a:	8c e0       	ldi	r24, 0x0C	; 12
    154c:	e0 e3       	ldi	r30, 0x30	; 48
    154e:	f3 e0       	ldi	r31, 0x03	; 3
    1550:	a2 ed       	ldi	r26, 0xD2	; 210
    1552:	b3 e0       	ldi	r27, 0x03	; 3
    1554:	01 90       	ld	r0, Z+
    1556:	0d 92       	st	X+, r0
    1558:	8a 95       	dec	r24
    155a:	e1 f7       	brne	.-8      	; 0x1554 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    155c:	86 e0       	ldi	r24, 0x06	; 6
    155e:	ec e3       	ldi	r30, 0x3C	; 60
    1560:	f3 e0       	ldi	r31, 0x03	; 3
    1562:	a3 ef       	ldi	r26, 0xF3	; 243
    1564:	b3 e0       	ldi	r27, 0x03	; 3
    1566:	01 90       	ld	r0, Z+
    1568:	0d 92       	st	X+, r0
    156a:	8a 95       	dec	r24
    156c:	e1 f7       	brne	.-8      	; 0x1566 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    156e:	87 e0       	ldi	r24, 0x07	; 7
    1570:	e2 e4       	ldi	r30, 0x42	; 66
    1572:	f3 e0       	ldi	r31, 0x03	; 3
    1574:	a4 e1       	ldi	r26, 0x14	; 20
    1576:	b4 e0       	ldi	r27, 0x04	; 4
    1578:	01 90       	ld	r0, Z+
    157a:	0d 92       	st	X+, r0
    157c:	8a 95       	dec	r24
    157e:	e1 f7       	brne	.-8      	; 0x1578 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    1580:	87 e0       	ldi	r24, 0x07	; 7
    1582:	e9 e4       	ldi	r30, 0x49	; 73
    1584:	f3 e0       	ldi	r31, 0x03	; 3
    1586:	a5 e3       	ldi	r26, 0x35	; 53
    1588:	b4 e0       	ldi	r27, 0x04	; 4
    158a:	01 90       	ld	r0, Z+
    158c:	0d 92       	st	X+, r0
    158e:	8a 95       	dec	r24
    1590:	e1 f7       	brne	.-8      	; 0x158a <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    1592:	8a e0       	ldi	r24, 0x0A	; 10
    1594:	e0 e5       	ldi	r30, 0x50	; 80
    1596:	f3 e0       	ldi	r31, 0x03	; 3
    1598:	a6 e5       	ldi	r26, 0x56	; 86
    159a:	b4 e0       	ldi	r27, 0x04	; 4
    159c:	01 90       	ld	r0, Z+
    159e:	0d 92       	st	X+, r0
    15a0:	8a 95       	dec	r24
    15a2:	e1 f7       	brne	.-8      	; 0x159c <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    15a4:	8a e0       	ldi	r24, 0x0A	; 10
    15a6:	ea e5       	ldi	r30, 0x5A	; 90
    15a8:	f3 e0       	ldi	r31, 0x03	; 3
    15aa:	a7 e7       	ldi	r26, 0x77	; 119
    15ac:	b4 e0       	ldi	r27, 0x04	; 4
    15ae:	01 90       	ld	r0, Z+
    15b0:	0d 92       	st	X+, r0
    15b2:	8a 95       	dec	r24
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <menu_init+0x90>
    15b6:	6e e8       	ldi	r22, 0x8E	; 142
    15b8:	73 e0       	ldi	r23, 0x03	; 3
    15ba:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    15c0:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    15c2:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	14 f0       	brlt	.+4      	; 0x15ce <menu_init+0xb0>
			nodes[i].isAction=1;
    15ca:	21 83       	std	Z+1, r18	; 0x01
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    15ce:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	b1 96       	adiw	r30, 0x21	; 33
    15d4:	88 30       	cpi	r24, 0x08	; 8
    15d6:	91 05       	cpc	r25, r1
    15d8:	a1 f7       	brne	.-24     	; 0x15c2 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    15da:	ee e8       	ldi	r30, 0x8E	; 142
    15dc:	f3 e0       	ldi	r31, 0x03	; 3
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <nodes+0x41>
	nodes[2].numChildren = 2;
    15e8:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <nodes+0x62>
	nodes[3].numChildren = 0;
    15ec:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <nodes+0x83>
	nodes[4].numChildren = 0;
    15f0:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <nodes+0xa4>
	nodes[5].numChildren = 0;
    15f4:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15f8:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15fc:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    1600:	13 8a       	std	Z+19, r1	; 0x13
    1602:	12 8a       	std	Z+18, r1	; 0x12
    1604:	06 e9       	ldi	r16, 0x96	; 150
    1606:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    1608:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    160a:	51 e2       	ldi	r21, 0x21	; 33
    160c:	18 c0       	rjmp	.+48     	; 0x163e <menu_init+0x120>
    160e:	54 9f       	mul	r21, r20
    1610:	f0 01       	movw	r30, r0
    1612:	11 24       	eor	r1, r1
    1614:	e2 57       	subi	r30, 0x72	; 114
    1616:	fc 4f       	sbci	r31, 0xFC	; 252
    1618:	e9 93       	st	Y+, r30
    161a:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    161c:	b3 8b       	std	Z+19, r27	; 0x13
    161e:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    1620:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	90 96       	adiw	r26, 0x20	; 32
    1628:	8c 91       	ld	r24, X
    162a:	90 97       	sbiw	r26, 0x20	; 32
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	28 17       	cp	r18, r24
    1630:	39 07       	cpc	r19, r25
    1632:	6c f3       	brlt	.-38     	; 0x160e <menu_init+0xf0>
    1634:	6f 5d       	subi	r22, 0xDF	; 223
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    1638:	60 17       	cp	r22, r16
    163a:	71 07       	cpc	r23, r17
    163c:	59 f0       	breq	.+22     	; 0x1654 <menu_init+0x136>
    163e:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1640:	90 96       	adiw	r26, 0x20	; 32
    1642:	8c 91       	ld	r24, X
    1644:	90 97       	sbiw	r26, 0x20	; 32
    1646:	88 23       	and	r24, r24
    1648:	a9 f3       	breq	.-22     	; 0x1634 <menu_init+0x116>
    164a:	eb 01       	movw	r28, r22
    164c:	64 96       	adiw	r28, 0x14	; 20
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	dd cf       	rjmp	.-70     	; 0x160e <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    1654:	87 e6       	ldi	r24, 0x67	; 103
    1656:	93 e0       	ldi	r25, 0x03	; 3
    1658:	0e 94 29 0a 	call	0x1452	; 0x1452 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    165c:	eb e6       	ldi	r30, 0x6B	; 107
    165e:	f3 e0       	ldi	r31, 0x03	; 3
    1660:	8e e8       	ldi	r24, 0x8E	; 142
    1662:	93 e0       	ldi	r25, 0x03	; 3
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1668:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    166a:	84 e0       	ldi	r24, 0x04	; 4
    166c:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	08 95       	ret

00001678 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
	oled_reset();
    1680:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
	oled_home();
    1684:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    1688:	cb e6       	ldi	r28, 0x6B	; 107
    168a:	d3 e0       	ldi	r29, 0x03	; 3
    168c:	88 81       	ld	r24, Y
    168e:	99 81       	ldd	r25, Y+1	; 0x01
    1690:	02 96       	adiw	r24, 0x02	; 2
    1692:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1696:	e8 81       	ld	r30, Y
    1698:	f9 81       	ldd	r31, Y+1	; 0x01
    169a:	80 a1       	ldd	r24, Z+32	; 0x20
    169c:	88 23       	and	r24, r24
    169e:	39 f1       	breq	.+78     	; 0x16ee <menu_printCurrentMenu+0x76>
    16a0:	c0 e0       	ldi	r28, 0x00	; 0
    16a2:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    16a4:	0b e6       	ldi	r16, 0x6B	; 107
    16a6:	13 e0       	ldi	r17, 0x03	; 3
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    16a8:	ce 01       	movw	r24, r28
    16aa:	02 96       	adiw	r24, 0x02	; 2
    16ac:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    16b0:	d8 01       	movw	r26, r16
    16b2:	8d 91       	ld	r24, X+
    16b4:	9c 91       	ld	r25, X
    16b6:	fe 01       	movw	r30, r28
    16b8:	3a 96       	adiw	r30, 0x0a	; 10
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	e8 0f       	add	r30, r24
    16c0:	f9 1f       	adc	r31, r25
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	02 96       	adiw	r24, 0x02	; 2
    16c8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <oled_print>
		if (currentMenu.childIndex == i) {
    16cc:	f8 01       	movw	r30, r16
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	8c 17       	cp	r24, r28
    16d4:	9d 07       	cpc	r25, r29
    16d6:	11 f4       	brne	.+4      	; 0x16dc <menu_printCurrentMenu+0x64>
			oled_print_arrow();
    16d8:	0e 94 9e 0b 	call	0x173c	; 0x173c <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    16dc:	21 96       	adiw	r28, 0x01	; 1
    16de:	d8 01       	movw	r26, r16
    16e0:	ed 91       	ld	r30, X+
    16e2:	fc 91       	ld	r31, X
    16e4:	80 a1       	ldd	r24, Z+32	; 0x20
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	c8 17       	cp	r28, r24
    16ea:	d9 07       	cpc	r29, r25
    16ec:	ec f2       	brlt	.-70     	; 0x16a8 <menu_printCurrentMenu+0x30>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	08 95       	ret

000016f8 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16f8:	80 55       	subi	r24, 0x50	; 80
    16fa:	e0 e0       	ldi	r30, 0x00	; 0
    16fc:	f0 e1       	ldi	r31, 0x10	; 16
    16fe:	80 83       	st	Z, r24
    1700:	86 2f       	mov	r24, r22
    1702:	8f 70       	andi	r24, 0x0F	; 15
    1704:	80 83       	st	Z, r24
    1706:	62 95       	swap	r22
    1708:	6f 70       	andi	r22, 0x0F	; 15
    170a:	60 61       	ori	r22, 0x10	; 16
    170c:	60 83       	st	Z, r22
    170e:	08 95       	ret

00001710 <oled_reset>:
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	10 e0       	ldi	r17, 0x00	; 0
    1718:	c0 e0       	ldi	r28, 0x00	; 0
    171a:	d2 e1       	ldi	r29, 0x12	; 18
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	81 2f       	mov	r24, r17
    1720:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <oled_pos>
    1724:	80 e8       	ldi	r24, 0x80	; 128
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	18 82       	st	Y, r1
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	e9 f7       	brne	.-6      	; 0x1728 <oled_reset+0x18>
    172e:	1f 5f       	subi	r17, 0xFF	; 255
    1730:	18 30       	cpi	r17, 0x08	; 8
    1732:	a1 f7       	brne	.-24     	; 0x171c <oled_reset+0xc>
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	08 95       	ret

0000173c <oled_print_arrow>:
    173c:	e0 e0       	ldi	r30, 0x00	; 0
    173e:	f2 e1       	ldi	r31, 0x12	; 18
    1740:	88 e1       	ldi	r24, 0x18	; 24
    1742:	80 83       	st	Z, r24
    1744:	9c e3       	ldi	r25, 0x3C	; 60
    1746:	90 83       	st	Z, r25
    1748:	9e e7       	ldi	r25, 0x7E	; 126
    174a:	90 83       	st	Z, r25
    174c:	80 83       	st	Z, r24
    174e:	80 83       	st	Z, r24
    1750:	08 95       	ret

00001752 <oled_home>:
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <oled_pos>
    175a:	08 95       	ret

0000175c <oled_init>:
    175c:	e0 e0       	ldi	r30, 0x00	; 0
    175e:	f0 e1       	ldi	r31, 0x10	; 16
    1760:	8e ea       	ldi	r24, 0xAE	; 174
    1762:	80 83       	st	Z, r24
    1764:	81 ea       	ldi	r24, 0xA1	; 161
    1766:	80 83       	st	Z, r24
    1768:	8a ed       	ldi	r24, 0xDA	; 218
    176a:	80 83       	st	Z, r24
    176c:	82 e1       	ldi	r24, 0x12	; 18
    176e:	80 83       	st	Z, r24
    1770:	88 ec       	ldi	r24, 0xC8	; 200
    1772:	80 83       	st	Z, r24
    1774:	88 ea       	ldi	r24, 0xA8	; 168
    1776:	80 83       	st	Z, r24
    1778:	8f e3       	ldi	r24, 0x3F	; 63
    177a:	80 83       	st	Z, r24
    177c:	85 ed       	ldi	r24, 0xD5	; 213
    177e:	80 83       	st	Z, r24
    1780:	80 e8       	ldi	r24, 0x80	; 128
    1782:	80 83       	st	Z, r24
    1784:	81 e8       	ldi	r24, 0x81	; 129
    1786:	80 83       	st	Z, r24
    1788:	80 e5       	ldi	r24, 0x50	; 80
    178a:	80 83       	st	Z, r24
    178c:	89 ed       	ldi	r24, 0xD9	; 217
    178e:	80 83       	st	Z, r24
    1790:	81 e2       	ldi	r24, 0x21	; 33
    1792:	80 83       	st	Z, r24
    1794:	80 e2       	ldi	r24, 0x20	; 32
    1796:	80 83       	st	Z, r24
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	80 83       	st	Z, r24
    179c:	8b ed       	ldi	r24, 0xDB	; 219
    179e:	80 83       	st	Z, r24
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	80 83       	st	Z, r24
    17a4:	8d ea       	ldi	r24, 0xAD	; 173
    17a6:	80 83       	st	Z, r24
    17a8:	10 82       	st	Z, r1
    17aa:	84 ea       	ldi	r24, 0xA4	; 164
    17ac:	80 83       	st	Z, r24
    17ae:	86 ea       	ldi	r24, 0xA6	; 166
    17b0:	80 83       	st	Z, r24
    17b2:	8f ea       	ldi	r24, 0xAF	; 175
    17b4:	80 83       	st	Z, r24
    17b6:	0e 94 88 0b 	call	0x1710	; 0x1710 <oled_reset>
    17ba:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_home>
    17be:	08 95       	ret

000017c0 <oled_gotoLine>:
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <oled_pos>
    17c6:	08 95       	ret

000017c8 <oled_print>:

void oled_print(char* character){
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	dc 01       	movw	r26, r24
	while (*character != '\0')
    17ce:	8c 91       	ld	r24, X
    17d0:	81 11       	cpse	r24, r1
    17d2:	1a c0       	rjmp	.+52     	; 0x1808 <oled_print+0x40>
    17d4:	1e c0       	rjmp	.+60     	; 0x1812 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    17d6:	ec 91       	ld	r30, X
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	b0 97       	sbiw	r30, 0x20	; 32
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	ee 0f       	add	r30, r30
    17e2:	ff 1f       	adc	r31, r31
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	e2 0f       	add	r30, r18
    17ea:	f3 1f       	adc	r31, r19
    17ec:	e7 5d       	subi	r30, 0xD7	; 215
    17ee:	fd 4f       	sbci	r31, 0xFD	; 253
    17f0:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17f2:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17f4:	2f 5f       	subi	r18, 0xFF	; 255
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	28 30       	cpi	r18, 0x08	; 8
    17fa:	31 05       	cpc	r19, r1
    17fc:	61 f7       	brne	.-40     	; 0x17d6 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17fe:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    1800:	8c 91       	ld	r24, X
    1802:	81 11       	cpse	r24, r1
    1804:	03 c0       	rjmp	.+6      	; 0x180c <oled_print+0x44>
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1808:	c0 e0       	ldi	r28, 0x00	; 0
    180a:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	e2 cf       	rjmp	.-60     	; 0x17d6 <oled_print+0xe>
		}
		character++;
	}
	
	
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "game.h"

	void setupInit(void){
	cli();
    1818:	f8 94       	cli
	xmem_init();
    181a:	0e 94 ef 0c 	call	0x19de	; 0x19de <xmem_init>
	USART_init(MYUBRR);
    181e:	8f e1       	ldi	r24, 0x1F	; 31
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_init>
	adcInit();
    1826:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
	joystickInit();
    182a:	0e 94 67 09 	call	0x12ce	; 0x12ce <joystickInit>
	touchButton_init();
    182e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <touchButton_init>
	oled_init();
    1832:	0e 94 ae 0b 	call	0x175c	; 0x175c <oled_init>
	timer_init();
    1836:	0e 94 a3 0c 	call	0x1946	; 0x1946 <timer_init>
	sleep_init();
    183a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <sleep_init>
	menu_init();
    183e:	0e 94 8f 0a 	call	0x151e	; 0x151e <menu_init>
	CAN_controller_init();
    1842:	0e 94 27 05 	call	0xa4e	; 0xa4e <CAN_controller_init>
	pwm_init();
    1846:	0e 94 e6 08 	call	0x11cc	; 0x11cc <pwm_init>
	game_init();
    184a:	0e 94 59 05 	call	0xab2	; 0xab2 <game_init>
	sei();
    184e:	78 94       	sei
    1850:	08 95       	ret

00001852 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    185c:	c1 e7       	ldi	r28, 0x71	; 113
    185e:	d3 e0       	ldi	r29, 0x03	; 3
    1860:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1868:	89 83       	std	Y+1, r24	; 0x01
}
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	08 95       	ret

00001870 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    1870:	87 b3       	in	r24, 0x17	; 23
    1872:	80 6a       	ori	r24, 0xA0	; 160
    1874:	87 bb       	out	0x17, r24	; 23
    1876:	bc 9a       	sbi	0x17, 4	; 23
    1878:	8d b1       	in	r24, 0x0d	; 13
    187a:	81 65       	ori	r24, 0x51	; 81
    187c:	8d b9       	out	0x0d, r24	; 13
    187e:	c4 9a       	sbi	0x18, 4	; 24
    1880:	08 95       	ret

00001882 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    1882:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    1884:	77 9b       	sbis	0x0e, 7	; 14
    1886:	fe cf       	rjmp	.-4      	; 0x1884 <SPI_masterWrite+0x2>

}
    1888:	08 95       	ret

0000188a <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    188a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    188c:	77 9b       	sbis	0x0e, 7	; 14
    188e:	fe cf       	rjmp	.-4      	; 0x188c <SPI_masterRead+0x2>
	return SPDR;
    1890:	8f b1       	in	r24, 0x0f	; 15
}
    1892:	08 95       	ret

00001894 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    1894:	66 23       	and	r22, r22
    1896:	69 f0       	breq	.+26     	; 0x18b2 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1898:	48 b3       	in	r20, 0x18	; 24
    189a:	21 e0       	ldi	r18, 0x01	; 1
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	b9 01       	movw	r22, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <SPI_setChipSelect+0x12>
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <SPI_setChipSelect+0xe>
    18aa:	cb 01       	movw	r24, r22
    18ac:	84 2b       	or	r24, r20
    18ae:	88 bb       	out	0x18, r24	; 24
    18b0:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    18b2:	48 b3       	in	r20, 0x18	; 24
    18b4:	21 e0       	ldi	r18, 0x01	; 1
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	b9 01       	movw	r22, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <SPI_setChipSelect+0x2c>
    18bc:	66 0f       	add	r22, r22
    18be:	77 1f       	adc	r23, r23
    18c0:	8a 95       	dec	r24
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <SPI_setChipSelect+0x28>
    18c4:	cb 01       	movw	r24, r22
    18c6:	80 95       	com	r24
    18c8:	84 23       	and	r24, r20
    18ca:	88 bb       	out	0x18, r24	; 24
    18cc:	08 95       	ret

000018ce <__vector_14>:
#include "touchButton.h"
#include "menu.h"
#include "game.h"


ISR (TIMER1_COMPB_vect) {
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	11 24       	eor	r1, r1
    18d8:	2f 93       	push	r18
    18da:	3f 93       	push	r19
    18dc:	4f 93       	push	r20
    18de:	5f 93       	push	r21
    18e0:	6f 93       	push	r22
    18e2:	7f 93       	push	r23
    18e4:	8f 93       	push	r24
    18e6:	9f 93       	push	r25
    18e8:	af 93       	push	r26
    18ea:	bf 93       	push	r27
    18ec:	ef 93       	push	r30
    18ee:	ff 93       	push	r31
	cli();
    18f0:	f8 94       	cli
	TCNT1 = 0x00;
    18f2:	1d bc       	out	0x2d, r1	; 45
    18f4:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    18f6:	87 e6       	ldi	r24, 0x67	; 103
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	0e 94 72 09 	call	0x12e4	; 0x12e4 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    18fe:	81 e7       	ldi	r24, 0x71	; 113
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	0e 94 29 0c 	call	0x1852	; 0x1852 <slider_readPosition>
	touchButton_readButtons(&buttons);
    1906:	8f e6       	ldi	r24, 0x6F	; 111
    1908:	93 e0       	ldi	r25, 0x03	; 3
    190a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <touchButton_readButtons>
	if(gameActive==0){
    190e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <gameActive>
    1912:	81 11       	cpse	r24, r1
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <__vector_14+0x54>
		navigateMenu(&joystick_pos);
    1916:	87 e6       	ldi	r24, 0x67	; 103
    1918:	93 e0       	ldi	r25, 0x03	; 3
    191a:	0e 94 29 0a 	call	0x1452	; 0x1452 <navigateMenu>
		menu_printCurrentMenu();
    191e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <menu_printCurrentMenu>
	}
	else{
		//game_updateOled();
	}
	sei();
    1922:	78 94       	sei
}
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	7f 91       	pop	r23
    1932:	6f 91       	pop	r22
    1934:	5f 91       	pop	r21
    1936:	4f 91       	pop	r20
    1938:	3f 91       	pop	r19
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	0f 90       	pop	r0
    1942:	1f 90       	pop	r1
    1944:	18 95       	reti

00001946 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1946:	89 b7       	in	r24, 0x39	; 57
    1948:	80 62       	ori	r24, 0x20	; 32
    194a:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    194c:	1d bc       	out	0x2d, r1	; 45
    194e:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1950:	80 e3       	ldi	r24, 0x30	; 48
    1952:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1954:	85 e0       	ldi	r24, 0x05	; 5
    1956:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1958:	80 ee       	ldi	r24, 0xE0	; 224
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	99 bd       	out	0x29, r25	; 41
    195e:	88 bd       	out	0x28, r24	; 40
    1960:	08 95       	ret

00001962 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    1962:	36 b3       	in	r19, 0x16	; 22
    1964:	26 b3       	in	r18, 0x16	; 22
    1966:	47 b3       	in	r20, 0x17	; 23
    1968:	32 70       	andi	r19, 0x02	; 2
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	bc 01       	movw	r22, r24
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <touchButton_init+0x14>
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	3a 95       	dec	r19
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <touchButton_init+0x10>
    197a:	24 70       	andi	r18, 0x04	; 4
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <touchButton_init+0x20>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	2a 95       	dec	r18
    1984:	e2 f7       	brpl	.-8      	; 0x197e <touchButton_init+0x1c>
    1986:	86 2b       	or	r24, r22
    1988:	97 2b       	or	r25, r23
    198a:	80 95       	com	r24
    198c:	90 95       	com	r25
    198e:	84 23       	and	r24, r20
    1990:	87 bb       	out	0x17, r24	; 23
    1992:	08 95       	ret

00001994 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1994:	86 b3       	in	r24, 0x16	; 22
    1996:	ef e6       	ldi	r30, 0x6F	; 111
    1998:	f3 e0       	ldi	r31, 0x03	; 3
    199a:	86 95       	lsr	r24
    199c:	81 70       	andi	r24, 0x01	; 1
    199e:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    19a0:	86 b3       	in	r24, 0x16	; 22
    19a2:	82 fb       	bst	r24, 2
    19a4:	88 27       	eor	r24, r24
    19a6:	80 f9       	bld	r24, 0
    19a8:	81 83       	std	Z+1, r24	; 0x01
    19aa:	08 95       	ret

000019ac <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    19ac:	5d 9b       	sbis	0x0b, 5	; 11
    19ae:	fe cf       	rjmp	.-4      	; 0x19ac <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    19b0:	8c b9       	out	0x0c, r24	; 12
    19b2:	08 95       	ret

000019b4 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    19b4:	5f 9b       	sbis	0x0b, 7	; 11
    19b6:	fe cf       	rjmp	.-4      	; 0x19b4 <USART_receiveChar>
		;
	
	return UDR0;
    19b8:	8c b1       	in	r24, 0x0c	; 12
    19ba:	08 95       	ret

000019bc <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    19bc:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    19be:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    19c0:	88 e1       	ldi	r24, 0x18	; 24
    19c2:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    19c4:	8e e8       	ldi	r24, 0x8E	; 142
    19c6:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    19c8:	6a ed       	ldi	r22, 0xDA	; 218
    19ca:	7c e0       	ldi	r23, 0x0C	; 12
    19cc:	86 ed       	ldi	r24, 0xD6	; 214
    19ce:	9c e0       	ldi	r25, 0x0C	; 12
    19d0:	0e 94 1a 10 	call	0x2034	; 0x2034 <fdevopen>
    19d4:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <uart+0x1>
    19d8:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <uart>
    19dc:	08 95       	ret

000019de <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    19de:	85 b7       	in	r24, 0x35	; 53
    19e0:	80 68       	ori	r24, 0x80	; 128
    19e2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    19e4:	80 b7       	in	r24, 0x30	; 48
    19e6:	88 60       	ori	r24, 0x08	; 8
    19e8:	80 bf       	out	0x30, r24	; 48
    19ea:	08 95       	ret
    19ec:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__fp_pscA>
    19f0:	60 f0       	brcs	.+24     	; 0x1a0a <xmem_init+0x2c>
    19f2:	80 e8       	ldi	r24, 0x80	; 128
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <xmem_init+0x1c>
    19f8:	9e ef       	ldi	r25, 0xFE	; 254
    19fa:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__fp_pscB>
    19fe:	28 f0       	brcs	.+10     	; 0x1a0a <xmem_init+0x2c>
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	51 e0       	ldi	r21, 0x01	; 1
    1a04:	71 f4       	brne	.+28     	; 0x1a22 <atan2+0x10>
    1a06:	5e ef       	ldi	r21, 0xFE	; 254
    1a08:	0c c0       	rjmp	.+24     	; 0x1a22 <atan2+0x10>
    1a0a:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_nan>
    1a0e:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__fp_zero>

00001a12 <atan2>:
    1a12:	e9 2f       	mov	r30, r25
    1a14:	e0 78       	andi	r30, 0x80	; 128
    1a16:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_split3>
    1a1a:	40 f3       	brcs	.-48     	; 0x19ec <xmem_init+0xe>
    1a1c:	09 2e       	mov	r0, r25
    1a1e:	05 2a       	or	r0, r21
    1a20:	b1 f3       	breq	.-20     	; 0x1a0e <xmem_init+0x30>
    1a22:	26 17       	cp	r18, r22
    1a24:	37 07       	cpc	r19, r23
    1a26:	48 07       	cpc	r20, r24
    1a28:	59 07       	cpc	r21, r25
    1a2a:	38 f0       	brcs	.+14     	; 0x1a3a <atan2+0x28>
    1a2c:	0e 2e       	mov	r0, r30
    1a2e:	07 f8       	bld	r0, 7
    1a30:	e0 25       	eor	r30, r0
    1a32:	69 f0       	breq	.+26     	; 0x1a4e <atan2+0x3c>
    1a34:	e0 25       	eor	r30, r0
    1a36:	e0 64       	ori	r30, 0x40	; 64
    1a38:	0a c0       	rjmp	.+20     	; 0x1a4e <atan2+0x3c>
    1a3a:	ef 63       	ori	r30, 0x3F	; 63
    1a3c:	07 f8       	bld	r0, 7
    1a3e:	00 94       	com	r0
    1a40:	07 fa       	bst	r0, 7
    1a42:	db 01       	movw	r26, r22
    1a44:	b9 01       	movw	r22, r18
    1a46:	9d 01       	movw	r18, r26
    1a48:	dc 01       	movw	r26, r24
    1a4a:	ca 01       	movw	r24, r20
    1a4c:	ad 01       	movw	r20, r26
    1a4e:	ef 93       	push	r30
    1a50:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__divsf3_pse>
    1a54:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fp_round>
    1a58:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <atan>
    1a5c:	5f 91       	pop	r21
    1a5e:	55 23       	and	r21, r21
    1a60:	39 f0       	breq	.+14     	; 0x1a70 <atan2+0x5e>
    1a62:	2b ed       	ldi	r18, 0xDB	; 219
    1a64:	3f e0       	ldi	r19, 0x0F	; 15
    1a66:	49 e4       	ldi	r20, 0x49	; 73
    1a68:	50 fd       	sbrc	r21, 0
    1a6a:	49 ec       	ldi	r20, 0xC9	; 201
    1a6c:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__addsf3>
    1a70:	08 95       	ret

00001a72 <atan>:
    1a72:	df 93       	push	r29
    1a74:	dd 27       	eor	r29, r29
    1a76:	b9 2f       	mov	r27, r25
    1a78:	bf 77       	andi	r27, 0x7F	; 127
    1a7a:	40 e8       	ldi	r20, 0x80	; 128
    1a7c:	5f e3       	ldi	r21, 0x3F	; 63
    1a7e:	16 16       	cp	r1, r22
    1a80:	17 06       	cpc	r1, r23
    1a82:	48 07       	cpc	r20, r24
    1a84:	5b 07       	cpc	r21, r27
    1a86:	18 f4       	brcc	.+6      	; 0x1a8e <atan+0x1c>
    1a88:	d9 2f       	mov	r29, r25
    1a8a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <inverse>
    1a8e:	9f 93       	push	r25
    1a90:	8f 93       	push	r24
    1a92:	7f 93       	push	r23
    1a94:	6f 93       	push	r22
    1a96:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <square>
    1a9a:	e0 e7       	ldi	r30, 0x70	; 112
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__fp_powser>
    1aa2:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fp_round>
    1aa6:	2f 91       	pop	r18
    1aa8:	3f 91       	pop	r19
    1aaa:	4f 91       	pop	r20
    1aac:	5f 91       	pop	r21
    1aae:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3x>
    1ab2:	dd 23       	and	r29, r29
    1ab4:	51 f0       	breq	.+20     	; 0x1aca <atan+0x58>
    1ab6:	90 58       	subi	r25, 0x80	; 128
    1ab8:	a2 ea       	ldi	r26, 0xA2	; 162
    1aba:	2a ed       	ldi	r18, 0xDA	; 218
    1abc:	3f e0       	ldi	r19, 0x0F	; 15
    1abe:	49 ec       	ldi	r20, 0xC9	; 201
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	d0 78       	andi	r29, 0x80	; 128
    1ac4:	5d 27       	eor	r21, r29
    1ac6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__addsf3x>
    1aca:	df 91       	pop	r29
    1acc:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <__fp_round>

00001ad0 <__divsf3>:
    1ad0:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__divsf3x>
    1ad4:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <__fp_round>
    1ad8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__fp_pscB>
    1adc:	58 f0       	brcs	.+22     	; 0x1af4 <__divsf3+0x24>
    1ade:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__fp_pscA>
    1ae2:	40 f0       	brcs	.+16     	; 0x1af4 <__divsf3+0x24>
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <__divsf3+0x20>
    1ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae8:	29 f0       	breq	.+10     	; 0x1af4 <__divsf3+0x24>
    1aea:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__fp_inf>
    1aee:	51 11       	cpse	r21, r1
    1af0:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_szero>
    1af4:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_nan>

00001af8 <__divsf3x>:
    1af8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_split3>
    1afc:	68 f3       	brcs	.-38     	; 0x1ad8 <__divsf3+0x8>

00001afe <__divsf3_pse>:
    1afe:	99 23       	and	r25, r25
    1b00:	b1 f3       	breq	.-20     	; 0x1aee <__divsf3+0x1e>
    1b02:	55 23       	and	r21, r21
    1b04:	91 f3       	breq	.-28     	; 0x1aea <__divsf3+0x1a>
    1b06:	95 1b       	sub	r25, r21
    1b08:	55 0b       	sbc	r21, r21
    1b0a:	bb 27       	eor	r27, r27
    1b0c:	aa 27       	eor	r26, r26
    1b0e:	62 17       	cp	r22, r18
    1b10:	73 07       	cpc	r23, r19
    1b12:	84 07       	cpc	r24, r20
    1b14:	38 f0       	brcs	.+14     	; 0x1b24 <__divsf3_pse+0x26>
    1b16:	9f 5f       	subi	r25, 0xFF	; 255
    1b18:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1a:	22 0f       	add	r18, r18
    1b1c:	33 1f       	adc	r19, r19
    1b1e:	44 1f       	adc	r20, r20
    1b20:	aa 1f       	adc	r26, r26
    1b22:	a9 f3       	breq	.-22     	; 0x1b0e <__divsf3_pse+0x10>
    1b24:	35 d0       	rcall	.+106    	; 0x1b90 <__divsf3_pse+0x92>
    1b26:	0e 2e       	mov	r0, r30
    1b28:	3a f0       	brmi	.+14     	; 0x1b38 <__divsf3_pse+0x3a>
    1b2a:	e0 e8       	ldi	r30, 0x80	; 128
    1b2c:	32 d0       	rcall	.+100    	; 0x1b92 <__divsf3_pse+0x94>
    1b2e:	91 50       	subi	r25, 0x01	; 1
    1b30:	50 40       	sbci	r21, 0x00	; 0
    1b32:	e6 95       	lsr	r30
    1b34:	00 1c       	adc	r0, r0
    1b36:	ca f7       	brpl	.-14     	; 0x1b2a <__divsf3_pse+0x2c>
    1b38:	2b d0       	rcall	.+86     	; 0x1b90 <__divsf3_pse+0x92>
    1b3a:	fe 2f       	mov	r31, r30
    1b3c:	29 d0       	rcall	.+82     	; 0x1b90 <__divsf3_pse+0x92>
    1b3e:	66 0f       	add	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	88 1f       	adc	r24, r24
    1b44:	bb 1f       	adc	r27, r27
    1b46:	26 17       	cp	r18, r22
    1b48:	37 07       	cpc	r19, r23
    1b4a:	48 07       	cpc	r20, r24
    1b4c:	ab 07       	cpc	r26, r27
    1b4e:	b0 e8       	ldi	r27, 0x80	; 128
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <__divsf3_pse+0x56>
    1b52:	bb 0b       	sbc	r27, r27
    1b54:	80 2d       	mov	r24, r0
    1b56:	bf 01       	movw	r22, r30
    1b58:	ff 27       	eor	r31, r31
    1b5a:	93 58       	subi	r25, 0x83	; 131
    1b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5e:	3a f0       	brmi	.+14     	; 0x1b6e <__divsf3_pse+0x70>
    1b60:	9e 3f       	cpi	r25, 0xFE	; 254
    1b62:	51 05       	cpc	r21, r1
    1b64:	78 f0       	brcs	.+30     	; 0x1b84 <__divsf3_pse+0x86>
    1b66:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__fp_inf>
    1b6a:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_szero>
    1b6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b70:	e4 f3       	brlt	.-8      	; 0x1b6a <__divsf3_pse+0x6c>
    1b72:	98 3e       	cpi	r25, 0xE8	; 232
    1b74:	d4 f3       	brlt	.-12     	; 0x1b6a <__divsf3_pse+0x6c>
    1b76:	86 95       	lsr	r24
    1b78:	77 95       	ror	r23
    1b7a:	67 95       	ror	r22
    1b7c:	b7 95       	ror	r27
    1b7e:	f7 95       	ror	r31
    1b80:	9f 5f       	subi	r25, 0xFF	; 255
    1b82:	c9 f7       	brne	.-14     	; 0x1b76 <__divsf3_pse+0x78>
    1b84:	88 0f       	add	r24, r24
    1b86:	91 1d       	adc	r25, r1
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	97 f9       	bld	r25, 7
    1b8e:	08 95       	ret
    1b90:	e1 e0       	ldi	r30, 0x01	; 1
    1b92:	66 0f       	add	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	88 1f       	adc	r24, r24
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	62 17       	cp	r22, r18
    1b9c:	73 07       	cpc	r23, r19
    1b9e:	84 07       	cpc	r24, r20
    1ba0:	ba 07       	cpc	r27, r26
    1ba2:	20 f0       	brcs	.+8      	; 0x1bac <__divsf3_pse+0xae>
    1ba4:	62 1b       	sub	r22, r18
    1ba6:	73 0b       	sbc	r23, r19
    1ba8:	84 0b       	sbc	r24, r20
    1baa:	ba 0b       	sbc	r27, r26
    1bac:	ee 1f       	adc	r30, r30
    1bae:	88 f7       	brcc	.-30     	; 0x1b92 <__divsf3_pse+0x94>
    1bb0:	e0 95       	com	r30
    1bb2:	08 95       	ret

00001bb4 <__fixsfsi>:
    1bb4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fixunssfsi>
    1bb8:	68 94       	set
    1bba:	b1 11       	cpse	r27, r1
    1bbc:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_szero>
    1bc0:	08 95       	ret

00001bc2 <__fixunssfsi>:
    1bc2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__fp_splitA>
    1bc6:	88 f0       	brcs	.+34     	; 0x1bea <__fixunssfsi+0x28>
    1bc8:	9f 57       	subi	r25, 0x7F	; 127
    1bca:	98 f0       	brcs	.+38     	; 0x1bf2 <__fixunssfsi+0x30>
    1bcc:	b9 2f       	mov	r27, r25
    1bce:	99 27       	eor	r25, r25
    1bd0:	b7 51       	subi	r27, 0x17	; 23
    1bd2:	b0 f0       	brcs	.+44     	; 0x1c00 <__fixunssfsi+0x3e>
    1bd4:	e1 f0       	breq	.+56     	; 0x1c0e <__fixunssfsi+0x4c>
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	1a f0       	brmi	.+6      	; 0x1be6 <__fixunssfsi+0x24>
    1be0:	ba 95       	dec	r27
    1be2:	c9 f7       	brne	.-14     	; 0x1bd6 <__fixunssfsi+0x14>
    1be4:	14 c0       	rjmp	.+40     	; 0x1c0e <__fixunssfsi+0x4c>
    1be6:	b1 30       	cpi	r27, 0x01	; 1
    1be8:	91 f0       	breq	.+36     	; 0x1c0e <__fixunssfsi+0x4c>
    1bea:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__fp_zero>
    1bee:	b1 e0       	ldi	r27, 0x01	; 1
    1bf0:	08 95       	ret
    1bf2:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__fp_zero>
    1bf6:	67 2f       	mov	r22, r23
    1bf8:	78 2f       	mov	r23, r24
    1bfa:	88 27       	eor	r24, r24
    1bfc:	b8 5f       	subi	r27, 0xF8	; 248
    1bfe:	39 f0       	breq	.+14     	; 0x1c0e <__fixunssfsi+0x4c>
    1c00:	b9 3f       	cpi	r27, 0xF9	; 249
    1c02:	cc f3       	brlt	.-14     	; 0x1bf6 <__fixunssfsi+0x34>
    1c04:	86 95       	lsr	r24
    1c06:	77 95       	ror	r23
    1c08:	67 95       	ror	r22
    1c0a:	b3 95       	inc	r27
    1c0c:	d9 f7       	brne	.-10     	; 0x1c04 <__fixunssfsi+0x42>
    1c0e:	3e f4       	brtc	.+14     	; 0x1c1e <__fixunssfsi+0x5c>
    1c10:	90 95       	com	r25
    1c12:	80 95       	com	r24
    1c14:	70 95       	com	r23
    1c16:	61 95       	neg	r22
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	08 95       	ret

00001c20 <__floatunsisf>:
    1c20:	e8 94       	clt
    1c22:	09 c0       	rjmp	.+18     	; 0x1c36 <__floatsisf+0x12>

00001c24 <__floatsisf>:
    1c24:	97 fb       	bst	r25, 7
    1c26:	3e f4       	brtc	.+14     	; 0x1c36 <__floatsisf+0x12>
    1c28:	90 95       	com	r25
    1c2a:	80 95       	com	r24
    1c2c:	70 95       	com	r23
    1c2e:	61 95       	neg	r22
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	8f 4f       	sbci	r24, 0xFF	; 255
    1c34:	9f 4f       	sbci	r25, 0xFF	; 255
    1c36:	99 23       	and	r25, r25
    1c38:	a9 f0       	breq	.+42     	; 0x1c64 <__floatsisf+0x40>
    1c3a:	f9 2f       	mov	r31, r25
    1c3c:	96 e9       	ldi	r25, 0x96	; 150
    1c3e:	bb 27       	eor	r27, r27
    1c40:	93 95       	inc	r25
    1c42:	f6 95       	lsr	r31
    1c44:	87 95       	ror	r24
    1c46:	77 95       	ror	r23
    1c48:	67 95       	ror	r22
    1c4a:	b7 95       	ror	r27
    1c4c:	f1 11       	cpse	r31, r1
    1c4e:	f8 cf       	rjmp	.-16     	; 0x1c40 <__floatsisf+0x1c>
    1c50:	fa f4       	brpl	.+62     	; 0x1c90 <__floatsisf+0x6c>
    1c52:	bb 0f       	add	r27, r27
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <__floatsisf+0x36>
    1c56:	60 ff       	sbrs	r22, 0
    1c58:	1b c0       	rjmp	.+54     	; 0x1c90 <__floatsisf+0x6c>
    1c5a:	6f 5f       	subi	r22, 0xFF	; 255
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	16 c0       	rjmp	.+44     	; 0x1c90 <__floatsisf+0x6c>
    1c64:	88 23       	and	r24, r24
    1c66:	11 f0       	breq	.+4      	; 0x1c6c <__floatsisf+0x48>
    1c68:	96 e9       	ldi	r25, 0x96	; 150
    1c6a:	11 c0       	rjmp	.+34     	; 0x1c8e <__floatsisf+0x6a>
    1c6c:	77 23       	and	r23, r23
    1c6e:	21 f0       	breq	.+8      	; 0x1c78 <__floatsisf+0x54>
    1c70:	9e e8       	ldi	r25, 0x8E	; 142
    1c72:	87 2f       	mov	r24, r23
    1c74:	76 2f       	mov	r23, r22
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <__floatsisf+0x5e>
    1c78:	66 23       	and	r22, r22
    1c7a:	71 f0       	breq	.+28     	; 0x1c98 <__floatsisf+0x74>
    1c7c:	96 e8       	ldi	r25, 0x86	; 134
    1c7e:	86 2f       	mov	r24, r22
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	2a f0       	brmi	.+10     	; 0x1c90 <__floatsisf+0x6c>
    1c86:	9a 95       	dec	r25
    1c88:	66 0f       	add	r22, r22
    1c8a:	77 1f       	adc	r23, r23
    1c8c:	88 1f       	adc	r24, r24
    1c8e:	da f7       	brpl	.-10     	; 0x1c86 <__floatsisf+0x62>
    1c90:	88 0f       	add	r24, r24
    1c92:	96 95       	lsr	r25
    1c94:	87 95       	ror	r24
    1c96:	97 f9       	bld	r25, 7
    1c98:	08 95       	ret

00001c9a <__fp_inf>:
    1c9a:	97 f9       	bld	r25, 7
    1c9c:	9f 67       	ori	r25, 0x7F	; 127
    1c9e:	80 e8       	ldi	r24, 0x80	; 128
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	08 95       	ret

00001ca6 <__fp_nan>:
    1ca6:	9f ef       	ldi	r25, 0xFF	; 255
    1ca8:	80 ec       	ldi	r24, 0xC0	; 192
    1caa:	08 95       	ret

00001cac <__fp_powser>:
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	1f 93       	push	r17
    1cb2:	0f 93       	push	r16
    1cb4:	ff 92       	push	r15
    1cb6:	ef 92       	push	r14
    1cb8:	df 92       	push	r13
    1cba:	7b 01       	movw	r14, r22
    1cbc:	8c 01       	movw	r16, r24
    1cbe:	68 94       	set
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <__fp_powser+0x22>
    1cc2:	da 2e       	mov	r13, r26
    1cc4:	ef 01       	movw	r28, r30
    1cc6:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3x>
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e8 94       	clt
    1cce:	a5 91       	lpm	r26, Z+
    1cd0:	25 91       	lpm	r18, Z+
    1cd2:	35 91       	lpm	r19, Z+
    1cd4:	45 91       	lpm	r20, Z+
    1cd6:	55 91       	lpm	r21, Z+
    1cd8:	a6 f3       	brts	.-24     	; 0x1cc2 <__fp_powser+0x16>
    1cda:	ef 01       	movw	r28, r30
    1cdc:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__addsf3x>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	97 01       	movw	r18, r14
    1ce4:	a8 01       	movw	r20, r16
    1ce6:	da 94       	dec	r13
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <__fp_powser+0x18>
    1cea:	df 90       	pop	r13
    1cec:	ef 90       	pop	r14
    1cee:	ff 90       	pop	r15
    1cf0:	0f 91       	pop	r16
    1cf2:	1f 91       	pop	r17
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <__fp_pscA>:
    1cfa:	00 24       	eor	r0, r0
    1cfc:	0a 94       	dec	r0
    1cfe:	16 16       	cp	r1, r22
    1d00:	17 06       	cpc	r1, r23
    1d02:	18 06       	cpc	r1, r24
    1d04:	09 06       	cpc	r0, r25
    1d06:	08 95       	ret

00001d08 <__fp_pscB>:
    1d08:	00 24       	eor	r0, r0
    1d0a:	0a 94       	dec	r0
    1d0c:	12 16       	cp	r1, r18
    1d0e:	13 06       	cpc	r1, r19
    1d10:	14 06       	cpc	r1, r20
    1d12:	05 06       	cpc	r0, r21
    1d14:	08 95       	ret

00001d16 <__fp_round>:
    1d16:	09 2e       	mov	r0, r25
    1d18:	03 94       	inc	r0
    1d1a:	00 0c       	add	r0, r0
    1d1c:	11 f4       	brne	.+4      	; 0x1d22 <__fp_round+0xc>
    1d1e:	88 23       	and	r24, r24
    1d20:	52 f0       	brmi	.+20     	; 0x1d36 <__fp_round+0x20>
    1d22:	bb 0f       	add	r27, r27
    1d24:	40 f4       	brcc	.+16     	; 0x1d36 <__fp_round+0x20>
    1d26:	bf 2b       	or	r27, r31
    1d28:	11 f4       	brne	.+4      	; 0x1d2e <__fp_round+0x18>
    1d2a:	60 ff       	sbrs	r22, 0
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <__fp_round+0x20>
    1d2e:	6f 5f       	subi	r22, 0xFF	; 255
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	8f 4f       	sbci	r24, 0xFF	; 255
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	08 95       	ret

00001d38 <__fp_split3>:
    1d38:	57 fd       	sbrc	r21, 7
    1d3a:	90 58       	subi	r25, 0x80	; 128
    1d3c:	44 0f       	add	r20, r20
    1d3e:	55 1f       	adc	r21, r21
    1d40:	59 f0       	breq	.+22     	; 0x1d58 <__fp_splitA+0x10>
    1d42:	5f 3f       	cpi	r21, 0xFF	; 255
    1d44:	71 f0       	breq	.+28     	; 0x1d62 <__fp_splitA+0x1a>
    1d46:	47 95       	ror	r20

00001d48 <__fp_splitA>:
    1d48:	88 0f       	add	r24, r24
    1d4a:	97 fb       	bst	r25, 7
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	61 f0       	breq	.+24     	; 0x1d68 <__fp_splitA+0x20>
    1d50:	9f 3f       	cpi	r25, 0xFF	; 255
    1d52:	79 f0       	breq	.+30     	; 0x1d72 <__fp_splitA+0x2a>
    1d54:	87 95       	ror	r24
    1d56:	08 95       	ret
    1d58:	12 16       	cp	r1, r18
    1d5a:	13 06       	cpc	r1, r19
    1d5c:	14 06       	cpc	r1, r20
    1d5e:	55 1f       	adc	r21, r21
    1d60:	f2 cf       	rjmp	.-28     	; 0x1d46 <__fp_split3+0xe>
    1d62:	46 95       	lsr	r20
    1d64:	f1 df       	rcall	.-30     	; 0x1d48 <__fp_splitA>
    1d66:	08 c0       	rjmp	.+16     	; 0x1d78 <__fp_splitA+0x30>
    1d68:	16 16       	cp	r1, r22
    1d6a:	17 06       	cpc	r1, r23
    1d6c:	18 06       	cpc	r1, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	f1 cf       	rjmp	.-30     	; 0x1d54 <__fp_splitA+0xc>
    1d72:	86 95       	lsr	r24
    1d74:	71 05       	cpc	r23, r1
    1d76:	61 05       	cpc	r22, r1
    1d78:	08 94       	sec
    1d7a:	08 95       	ret

00001d7c <__fp_zero>:
    1d7c:	e8 94       	clt

00001d7e <__fp_szero>:
    1d7e:	bb 27       	eor	r27, r27
    1d80:	66 27       	eor	r22, r22
    1d82:	77 27       	eor	r23, r23
    1d84:	cb 01       	movw	r24, r22
    1d86:	97 f9       	bld	r25, 7
    1d88:	08 95       	ret

00001d8a <inverse>:
    1d8a:	9b 01       	movw	r18, r22
    1d8c:	ac 01       	movw	r20, r24
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	80 e8       	ldi	r24, 0x80	; 128
    1d94:	9f e3       	ldi	r25, 0x3F	; 63
    1d96:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__divsf3>

00001d9a <__mulsf3>:
    1d9a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3x>
    1d9e:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <__fp_round>
    1da2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__fp_pscA>
    1da6:	38 f0       	brcs	.+14     	; 0x1db6 <__mulsf3+0x1c>
    1da8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__fp_pscB>
    1dac:	20 f0       	brcs	.+8      	; 0x1db6 <__mulsf3+0x1c>
    1dae:	95 23       	and	r25, r21
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <__mulsf3+0x1c>
    1db2:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__fp_inf>
    1db6:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_nan>
    1dba:	11 24       	eor	r1, r1
    1dbc:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_szero>

00001dc0 <__mulsf3x>:
    1dc0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_split3>
    1dc4:	70 f3       	brcs	.-36     	; 0x1da2 <__mulsf3+0x8>

00001dc6 <__mulsf3_pse>:
    1dc6:	95 9f       	mul	r25, r21
    1dc8:	c1 f3       	breq	.-16     	; 0x1dba <__mulsf3+0x20>
    1dca:	95 0f       	add	r25, r21
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	55 1f       	adc	r21, r21
    1dd0:	62 9f       	mul	r22, r18
    1dd2:	f0 01       	movw	r30, r0
    1dd4:	72 9f       	mul	r23, r18
    1dd6:	bb 27       	eor	r27, r27
    1dd8:	f0 0d       	add	r31, r0
    1dda:	b1 1d       	adc	r27, r1
    1ddc:	63 9f       	mul	r22, r19
    1dde:	aa 27       	eor	r26, r26
    1de0:	f0 0d       	add	r31, r0
    1de2:	b1 1d       	adc	r27, r1
    1de4:	aa 1f       	adc	r26, r26
    1de6:	64 9f       	mul	r22, r20
    1de8:	66 27       	eor	r22, r22
    1dea:	b0 0d       	add	r27, r0
    1dec:	a1 1d       	adc	r26, r1
    1dee:	66 1f       	adc	r22, r22
    1df0:	82 9f       	mul	r24, r18
    1df2:	22 27       	eor	r18, r18
    1df4:	b0 0d       	add	r27, r0
    1df6:	a1 1d       	adc	r26, r1
    1df8:	62 1f       	adc	r22, r18
    1dfa:	73 9f       	mul	r23, r19
    1dfc:	b0 0d       	add	r27, r0
    1dfe:	a1 1d       	adc	r26, r1
    1e00:	62 1f       	adc	r22, r18
    1e02:	83 9f       	mul	r24, r19
    1e04:	a0 0d       	add	r26, r0
    1e06:	61 1d       	adc	r22, r1
    1e08:	22 1f       	adc	r18, r18
    1e0a:	74 9f       	mul	r23, r20
    1e0c:	33 27       	eor	r19, r19
    1e0e:	a0 0d       	add	r26, r0
    1e10:	61 1d       	adc	r22, r1
    1e12:	23 1f       	adc	r18, r19
    1e14:	84 9f       	mul	r24, r20
    1e16:	60 0d       	add	r22, r0
    1e18:	21 1d       	adc	r18, r1
    1e1a:	82 2f       	mov	r24, r18
    1e1c:	76 2f       	mov	r23, r22
    1e1e:	6a 2f       	mov	r22, r26
    1e20:	11 24       	eor	r1, r1
    1e22:	9f 57       	subi	r25, 0x7F	; 127
    1e24:	50 40       	sbci	r21, 0x00	; 0
    1e26:	9a f0       	brmi	.+38     	; 0x1e4e <__mulsf3_pse+0x88>
    1e28:	f1 f0       	breq	.+60     	; 0x1e66 <__mulsf3_pse+0xa0>
    1e2a:	88 23       	and	r24, r24
    1e2c:	4a f0       	brmi	.+18     	; 0x1e40 <__mulsf3_pse+0x7a>
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	bb 1f       	adc	r27, r27
    1e34:	66 1f       	adc	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	88 1f       	adc	r24, r24
    1e3a:	91 50       	subi	r25, 0x01	; 1
    1e3c:	50 40       	sbci	r21, 0x00	; 0
    1e3e:	a9 f7       	brne	.-22     	; 0x1e2a <__mulsf3_pse+0x64>
    1e40:	9e 3f       	cpi	r25, 0xFE	; 254
    1e42:	51 05       	cpc	r21, r1
    1e44:	80 f0       	brcs	.+32     	; 0x1e66 <__mulsf3_pse+0xa0>
    1e46:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__fp_inf>
    1e4a:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_szero>
    1e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e50:	e4 f3       	brlt	.-8      	; 0x1e4a <__mulsf3_pse+0x84>
    1e52:	98 3e       	cpi	r25, 0xE8	; 232
    1e54:	d4 f3       	brlt	.-12     	; 0x1e4a <__mulsf3_pse+0x84>
    1e56:	86 95       	lsr	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	b7 95       	ror	r27
    1e5e:	f7 95       	ror	r31
    1e60:	e7 95       	ror	r30
    1e62:	9f 5f       	subi	r25, 0xFF	; 255
    1e64:	c1 f7       	brne	.-16     	; 0x1e56 <__mulsf3_pse+0x90>
    1e66:	fe 2b       	or	r31, r30
    1e68:	88 0f       	add	r24, r24
    1e6a:	91 1d       	adc	r25, r1
    1e6c:	96 95       	lsr	r25
    1e6e:	87 95       	ror	r24
    1e70:	97 f9       	bld	r25, 7
    1e72:	08 95       	ret

00001e74 <square>:
    1e74:	9b 01       	movw	r18, r22
    1e76:	ac 01       	movw	r20, r24
    1e78:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__mulsf3>

00001e7c <__subsf3>:
    1e7c:	50 58       	subi	r21, 0x80	; 128

00001e7e <__addsf3>:
    1e7e:	bb 27       	eor	r27, r27
    1e80:	aa 27       	eor	r26, r26
    1e82:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__addsf3x>
    1e86:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <__fp_round>
    1e8a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__fp_pscA>
    1e8e:	38 f0       	brcs	.+14     	; 0x1e9e <__addsf3+0x20>
    1e90:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__fp_pscB>
    1e94:	20 f0       	brcs	.+8      	; 0x1e9e <__addsf3+0x20>
    1e96:	39 f4       	brne	.+14     	; 0x1ea6 <__addsf3+0x28>
    1e98:	9f 3f       	cpi	r25, 0xFF	; 255
    1e9a:	19 f4       	brne	.+6      	; 0x1ea2 <__addsf3+0x24>
    1e9c:	26 f4       	brtc	.+8      	; 0x1ea6 <__addsf3+0x28>
    1e9e:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__fp_nan>
    1ea2:	0e f4       	brtc	.+2      	; 0x1ea6 <__addsf3+0x28>
    1ea4:	e0 95       	com	r30
    1ea6:	e7 fb       	bst	r30, 7
    1ea8:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__fp_inf>

00001eac <__addsf3x>:
    1eac:	e9 2f       	mov	r30, r25
    1eae:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_split3>
    1eb2:	58 f3       	brcs	.-42     	; 0x1e8a <__addsf3+0xc>
    1eb4:	ba 17       	cp	r27, r26
    1eb6:	62 07       	cpc	r22, r18
    1eb8:	73 07       	cpc	r23, r19
    1eba:	84 07       	cpc	r24, r20
    1ebc:	95 07       	cpc	r25, r21
    1ebe:	20 f0       	brcs	.+8      	; 0x1ec8 <__addsf3x+0x1c>
    1ec0:	79 f4       	brne	.+30     	; 0x1ee0 <__addsf3x+0x34>
    1ec2:	a6 f5       	brtc	.+104    	; 0x1f2c <__addsf3x+0x80>
    1ec4:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__fp_zero>
    1ec8:	0e f4       	brtc	.+2      	; 0x1ecc <__addsf3x+0x20>
    1eca:	e0 95       	com	r30
    1ecc:	0b 2e       	mov	r0, r27
    1ece:	ba 2f       	mov	r27, r26
    1ed0:	a0 2d       	mov	r26, r0
    1ed2:	0b 01       	movw	r0, r22
    1ed4:	b9 01       	movw	r22, r18
    1ed6:	90 01       	movw	r18, r0
    1ed8:	0c 01       	movw	r0, r24
    1eda:	ca 01       	movw	r24, r20
    1edc:	a0 01       	movw	r20, r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	ff 27       	eor	r31, r31
    1ee2:	59 1b       	sub	r21, r25
    1ee4:	99 f0       	breq	.+38     	; 0x1f0c <__addsf3x+0x60>
    1ee6:	59 3f       	cpi	r21, 0xF9	; 249
    1ee8:	50 f4       	brcc	.+20     	; 0x1efe <__addsf3x+0x52>
    1eea:	50 3e       	cpi	r21, 0xE0	; 224
    1eec:	68 f1       	brcs	.+90     	; 0x1f48 <__addsf3x+0x9c>
    1eee:	1a 16       	cp	r1, r26
    1ef0:	f0 40       	sbci	r31, 0x00	; 0
    1ef2:	a2 2f       	mov	r26, r18
    1ef4:	23 2f       	mov	r18, r19
    1ef6:	34 2f       	mov	r19, r20
    1ef8:	44 27       	eor	r20, r20
    1efa:	58 5f       	subi	r21, 0xF8	; 248
    1efc:	f3 cf       	rjmp	.-26     	; 0x1ee4 <__addsf3x+0x38>
    1efe:	46 95       	lsr	r20
    1f00:	37 95       	ror	r19
    1f02:	27 95       	ror	r18
    1f04:	a7 95       	ror	r26
    1f06:	f0 40       	sbci	r31, 0x00	; 0
    1f08:	53 95       	inc	r21
    1f0a:	c9 f7       	brne	.-14     	; 0x1efe <__addsf3x+0x52>
    1f0c:	7e f4       	brtc	.+30     	; 0x1f2c <__addsf3x+0x80>
    1f0e:	1f 16       	cp	r1, r31
    1f10:	ba 0b       	sbc	r27, r26
    1f12:	62 0b       	sbc	r22, r18
    1f14:	73 0b       	sbc	r23, r19
    1f16:	84 0b       	sbc	r24, r20
    1f18:	ba f0       	brmi	.+46     	; 0x1f48 <__addsf3x+0x9c>
    1f1a:	91 50       	subi	r25, 0x01	; 1
    1f1c:	a1 f0       	breq	.+40     	; 0x1f46 <__addsf3x+0x9a>
    1f1e:	ff 0f       	add	r31, r31
    1f20:	bb 1f       	adc	r27, r27
    1f22:	66 1f       	adc	r22, r22
    1f24:	77 1f       	adc	r23, r23
    1f26:	88 1f       	adc	r24, r24
    1f28:	c2 f7       	brpl	.-16     	; 0x1f1a <__addsf3x+0x6e>
    1f2a:	0e c0       	rjmp	.+28     	; 0x1f48 <__addsf3x+0x9c>
    1f2c:	ba 0f       	add	r27, r26
    1f2e:	62 1f       	adc	r22, r18
    1f30:	73 1f       	adc	r23, r19
    1f32:	84 1f       	adc	r24, r20
    1f34:	48 f4       	brcc	.+18     	; 0x1f48 <__addsf3x+0x9c>
    1f36:	87 95       	ror	r24
    1f38:	77 95       	ror	r23
    1f3a:	67 95       	ror	r22
    1f3c:	b7 95       	ror	r27
    1f3e:	f7 95       	ror	r31
    1f40:	9e 3f       	cpi	r25, 0xFE	; 254
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <__addsf3x+0x9a>
    1f44:	b0 cf       	rjmp	.-160    	; 0x1ea6 <__addsf3+0x28>
    1f46:	93 95       	inc	r25
    1f48:	88 0f       	add	r24, r24
    1f4a:	08 f0       	brcs	.+2      	; 0x1f4e <__addsf3x+0xa2>
    1f4c:	99 27       	eor	r25, r25
    1f4e:	ee 0f       	add	r30, r30
    1f50:	97 95       	ror	r25
    1f52:	87 95       	ror	r24
    1f54:	08 95       	ret

00001f56 <__divmodhi4>:
    1f56:	97 fb       	bst	r25, 7
    1f58:	07 2e       	mov	r0, r23
    1f5a:	16 f4       	brtc	.+4      	; 0x1f60 <__divmodhi4+0xa>
    1f5c:	00 94       	com	r0
    1f5e:	07 d0       	rcall	.+14     	; 0x1f6e <__divmodhi4_neg1>
    1f60:	77 fd       	sbrc	r23, 7
    1f62:	09 d0       	rcall	.+18     	; 0x1f76 <__divmodhi4_neg2>
    1f64:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__udivmodhi4>
    1f68:	07 fc       	sbrc	r0, 7
    1f6a:	05 d0       	rcall	.+10     	; 0x1f76 <__divmodhi4_neg2>
    1f6c:	3e f4       	brtc	.+14     	; 0x1f7c <__divmodhi4_exit>

00001f6e <__divmodhi4_neg1>:
    1f6e:	90 95       	com	r25
    1f70:	81 95       	neg	r24
    1f72:	9f 4f       	sbci	r25, 0xFF	; 255
    1f74:	08 95       	ret

00001f76 <__divmodhi4_neg2>:
    1f76:	70 95       	com	r23
    1f78:	61 95       	neg	r22
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255

00001f7c <__divmodhi4_exit>:
    1f7c:	08 95       	ret

00001f7e <__udivmodsi4>:
    1f7e:	a1 e2       	ldi	r26, 0x21	; 33
    1f80:	1a 2e       	mov	r1, r26
    1f82:	aa 1b       	sub	r26, r26
    1f84:	bb 1b       	sub	r27, r27
    1f86:	fd 01       	movw	r30, r26
    1f88:	0d c0       	rjmp	.+26     	; 0x1fa4 <__udivmodsi4_ep>

00001f8a <__udivmodsi4_loop>:
    1f8a:	aa 1f       	adc	r26, r26
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	ee 1f       	adc	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	a2 17       	cp	r26, r18
    1f94:	b3 07       	cpc	r27, r19
    1f96:	e4 07       	cpc	r30, r20
    1f98:	f5 07       	cpc	r31, r21
    1f9a:	20 f0       	brcs	.+8      	; 0x1fa4 <__udivmodsi4_ep>
    1f9c:	a2 1b       	sub	r26, r18
    1f9e:	b3 0b       	sbc	r27, r19
    1fa0:	e4 0b       	sbc	r30, r20
    1fa2:	f5 0b       	sbc	r31, r21

00001fa4 <__udivmodsi4_ep>:
    1fa4:	66 1f       	adc	r22, r22
    1fa6:	77 1f       	adc	r23, r23
    1fa8:	88 1f       	adc	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	1a 94       	dec	r1
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <__udivmodsi4_loop>
    1fb0:	60 95       	com	r22
    1fb2:	70 95       	com	r23
    1fb4:	80 95       	com	r24
    1fb6:	90 95       	com	r25
    1fb8:	9b 01       	movw	r18, r22
    1fba:	ac 01       	movw	r20, r24
    1fbc:	bd 01       	movw	r22, r26
    1fbe:	cf 01       	movw	r24, r30
    1fc0:	08 95       	ret

00001fc2 <__udivmodhi4>:
    1fc2:	aa 1b       	sub	r26, r26
    1fc4:	bb 1b       	sub	r27, r27
    1fc6:	51 e1       	ldi	r21, 0x11	; 17
    1fc8:	07 c0       	rjmp	.+14     	; 0x1fd8 <__udivmodhi4_ep>

00001fca <__udivmodhi4_loop>:
    1fca:	aa 1f       	adc	r26, r26
    1fcc:	bb 1f       	adc	r27, r27
    1fce:	a6 17       	cp	r26, r22
    1fd0:	b7 07       	cpc	r27, r23
    1fd2:	10 f0       	brcs	.+4      	; 0x1fd8 <__udivmodhi4_ep>
    1fd4:	a6 1b       	sub	r26, r22
    1fd6:	b7 0b       	sbc	r27, r23

00001fd8 <__udivmodhi4_ep>:
    1fd8:	88 1f       	adc	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	5a 95       	dec	r21
    1fde:	a9 f7       	brne	.-22     	; 0x1fca <__udivmodhi4_loop>
    1fe0:	80 95       	com	r24
    1fe2:	90 95       	com	r25
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	08 95       	ret

00001fea <__itoa_ncheck>:
    1fea:	bb 27       	eor	r27, r27
    1fec:	4a 30       	cpi	r20, 0x0A	; 10
    1fee:	31 f4       	brne	.+12     	; 0x1ffc <__itoa_ncheck+0x12>
    1ff0:	99 23       	and	r25, r25
    1ff2:	22 f4       	brpl	.+8      	; 0x1ffc <__itoa_ncheck+0x12>
    1ff4:	bd e2       	ldi	r27, 0x2D	; 45
    1ff6:	90 95       	com	r25
    1ff8:	81 95       	neg	r24
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__utoa_common>

00002000 <__utoa_ncheck>:
    2000:	bb 27       	eor	r27, r27

00002002 <__utoa_common>:
    2002:	fb 01       	movw	r30, r22
    2004:	55 27       	eor	r21, r21
    2006:	aa 27       	eor	r26, r26
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	aa 1f       	adc	r26, r26
    200e:	a4 17       	cp	r26, r20
    2010:	10 f0       	brcs	.+4      	; 0x2016 <__utoa_common+0x14>
    2012:	a4 1b       	sub	r26, r20
    2014:	83 95       	inc	r24
    2016:	50 51       	subi	r21, 0x10	; 16
    2018:	b9 f7       	brne	.-18     	; 0x2008 <__utoa_common+0x6>
    201a:	a0 5d       	subi	r26, 0xD0	; 208
    201c:	aa 33       	cpi	r26, 0x3A	; 58
    201e:	08 f0       	brcs	.+2      	; 0x2022 <__utoa_common+0x20>
    2020:	a9 5d       	subi	r26, 0xD9	; 217
    2022:	a1 93       	st	Z+, r26
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	79 f7       	brne	.-34     	; 0x2006 <__utoa_common+0x4>
    2028:	b1 11       	cpse	r27, r1
    202a:	b1 93       	st	Z+, r27
    202c:	11 92       	st	Z+, r1
    202e:	cb 01       	movw	r24, r22
    2030:	0c 94 b6 13 	jmp	0x276c	; 0x276c <strrev>

00002034 <fdevopen>:
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	31 f4       	brne	.+12     	; 0x204c <fdevopen+0x18>
    2040:	61 15       	cp	r22, r1
    2042:	71 05       	cpc	r23, r1
    2044:	19 f4       	brne	.+6      	; 0x204c <fdevopen+0x18>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	3a c0       	rjmp	.+116    	; 0x20c0 <fdevopen+0x8c>
    204c:	8b 01       	movw	r16, r22
    204e:	ec 01       	movw	r28, r24
    2050:	6e e0       	ldi	r22, 0x0E	; 14
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <calloc>
    205c:	fc 01       	movw	r30, r24
    205e:	89 2b       	or	r24, r25
    2060:	91 f3       	breq	.-28     	; 0x2046 <fdevopen+0x12>
    2062:	80 e8       	ldi	r24, 0x80	; 128
    2064:	83 83       	std	Z+3, r24	; 0x03
    2066:	01 15       	cp	r16, r1
    2068:	11 05       	cpc	r17, r1
    206a:	71 f0       	breq	.+28     	; 0x2088 <fdevopen+0x54>
    206c:	13 87       	std	Z+11, r17	; 0x0b
    206e:	02 87       	std	Z+10, r16	; 0x0a
    2070:	81 e8       	ldi	r24, 0x81	; 129
    2072:	83 83       	std	Z+3, r24	; 0x03
    2074:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <__iob>
    2078:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <__iob+0x1>
    207c:	89 2b       	or	r24, r25
    207e:	21 f4       	brne	.+8      	; 0x2088 <fdevopen+0x54>
    2080:	f0 93 99 04 	sts	0x0499, r31	; 0x800499 <__iob+0x1>
    2084:	e0 93 98 04 	sts	0x0498, r30	; 0x800498 <__iob>
    2088:	20 97       	sbiw	r28, 0x00	; 0
    208a:	c9 f0       	breq	.+50     	; 0x20be <fdevopen+0x8a>
    208c:	d1 87       	std	Z+9, r29	; 0x09
    208e:	c0 87       	std	Z+8, r28	; 0x08
    2090:	83 81       	ldd	r24, Z+3	; 0x03
    2092:	82 60       	ori	r24, 0x02	; 2
    2094:	83 83       	std	Z+3, r24	; 0x03
    2096:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    209a:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    209e:	89 2b       	or	r24, r25
    20a0:	71 f4       	brne	.+28     	; 0x20be <fdevopen+0x8a>
    20a2:	f0 93 9b 04 	sts	0x049B, r31	; 0x80049b <__iob+0x3>
    20a6:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <__iob+0x2>
    20aa:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <__iob+0x4>
    20ae:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <__iob+0x5>
    20b2:	89 2b       	or	r24, r25
    20b4:	21 f4       	brne	.+8      	; 0x20be <fdevopen+0x8a>
    20b6:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <__iob+0x5>
    20ba:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <__iob+0x4>
    20be:	cf 01       	movw	r24, r30
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <printf>:
    20ca:	a0 e0       	ldi	r26, 0x00	; 0
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e6       	ldi	r30, 0x6B	; 107
    20d0:	f0 e1       	ldi	r31, 0x10	; 16
    20d2:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__+0x20>
    20d6:	ae 01       	movw	r20, r28
    20d8:	4b 5f       	subi	r20, 0xFB	; 251
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	fa 01       	movw	r30, r20
    20de:	61 91       	ld	r22, Z+
    20e0:	71 91       	ld	r23, Z+
    20e2:	af 01       	movw	r20, r30
    20e4:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    20e8:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    20ec:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vfprintf>
    20f0:	e2 e0       	ldi	r30, 0x02	; 2
    20f2:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__+0x20>

000020f6 <vfprintf>:
    20f6:	ab e0       	ldi	r26, 0x0B	; 11
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e1 e8       	ldi	r30, 0x81	; 129
    20fc:	f0 e1       	ldi	r31, 0x10	; 16
    20fe:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__prologue_saves__>
    2102:	6c 01       	movw	r12, r24
    2104:	7b 01       	movw	r14, r22
    2106:	8a 01       	movw	r16, r20
    2108:	fc 01       	movw	r30, r24
    210a:	17 82       	std	Z+7, r1	; 0x07
    210c:	16 82       	std	Z+6, r1	; 0x06
    210e:	83 81       	ldd	r24, Z+3	; 0x03
    2110:	81 ff       	sbrs	r24, 1
    2112:	cc c1       	rjmp	.+920    	; 0x24ac <vfprintf+0x3b6>
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	3c 01       	movw	r6, r24
    211a:	f6 01       	movw	r30, r12
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	f7 01       	movw	r30, r14
    2120:	93 fd       	sbrc	r25, 3
    2122:	85 91       	lpm	r24, Z+
    2124:	93 ff       	sbrs	r25, 3
    2126:	81 91       	ld	r24, Z+
    2128:	7f 01       	movw	r14, r30
    212a:	88 23       	and	r24, r24
    212c:	09 f4       	brne	.+2      	; 0x2130 <vfprintf+0x3a>
    212e:	ba c1       	rjmp	.+884    	; 0x24a4 <vfprintf+0x3ae>
    2130:	85 32       	cpi	r24, 0x25	; 37
    2132:	39 f4       	brne	.+14     	; 0x2142 <vfprintf+0x4c>
    2134:	93 fd       	sbrc	r25, 3
    2136:	85 91       	lpm	r24, Z+
    2138:	93 ff       	sbrs	r25, 3
    213a:	81 91       	ld	r24, Z+
    213c:	7f 01       	movw	r14, r30
    213e:	85 32       	cpi	r24, 0x25	; 37
    2140:	29 f4       	brne	.+10     	; 0x214c <vfprintf+0x56>
    2142:	b6 01       	movw	r22, r12
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    214a:	e7 cf       	rjmp	.-50     	; 0x211a <vfprintf+0x24>
    214c:	91 2c       	mov	r9, r1
    214e:	21 2c       	mov	r2, r1
    2150:	31 2c       	mov	r3, r1
    2152:	ff e1       	ldi	r31, 0x1F	; 31
    2154:	f3 15       	cp	r31, r3
    2156:	d8 f0       	brcs	.+54     	; 0x218e <vfprintf+0x98>
    2158:	8b 32       	cpi	r24, 0x2B	; 43
    215a:	79 f0       	breq	.+30     	; 0x217a <vfprintf+0x84>
    215c:	38 f4       	brcc	.+14     	; 0x216c <vfprintf+0x76>
    215e:	80 32       	cpi	r24, 0x20	; 32
    2160:	79 f0       	breq	.+30     	; 0x2180 <vfprintf+0x8a>
    2162:	83 32       	cpi	r24, 0x23	; 35
    2164:	a1 f4       	brne	.+40     	; 0x218e <vfprintf+0x98>
    2166:	23 2d       	mov	r18, r3
    2168:	20 61       	ori	r18, 0x10	; 16
    216a:	1d c0       	rjmp	.+58     	; 0x21a6 <vfprintf+0xb0>
    216c:	8d 32       	cpi	r24, 0x2D	; 45
    216e:	61 f0       	breq	.+24     	; 0x2188 <vfprintf+0x92>
    2170:	80 33       	cpi	r24, 0x30	; 48
    2172:	69 f4       	brne	.+26     	; 0x218e <vfprintf+0x98>
    2174:	23 2d       	mov	r18, r3
    2176:	21 60       	ori	r18, 0x01	; 1
    2178:	16 c0       	rjmp	.+44     	; 0x21a6 <vfprintf+0xb0>
    217a:	83 2d       	mov	r24, r3
    217c:	82 60       	ori	r24, 0x02	; 2
    217e:	38 2e       	mov	r3, r24
    2180:	e3 2d       	mov	r30, r3
    2182:	e4 60       	ori	r30, 0x04	; 4
    2184:	3e 2e       	mov	r3, r30
    2186:	2a c0       	rjmp	.+84     	; 0x21dc <vfprintf+0xe6>
    2188:	f3 2d       	mov	r31, r3
    218a:	f8 60       	ori	r31, 0x08	; 8
    218c:	1d c0       	rjmp	.+58     	; 0x21c8 <vfprintf+0xd2>
    218e:	37 fc       	sbrc	r3, 7
    2190:	2d c0       	rjmp	.+90     	; 0x21ec <vfprintf+0xf6>
    2192:	20 ed       	ldi	r18, 0xD0	; 208
    2194:	28 0f       	add	r18, r24
    2196:	2a 30       	cpi	r18, 0x0A	; 10
    2198:	40 f0       	brcs	.+16     	; 0x21aa <vfprintf+0xb4>
    219a:	8e 32       	cpi	r24, 0x2E	; 46
    219c:	b9 f4       	brne	.+46     	; 0x21cc <vfprintf+0xd6>
    219e:	36 fc       	sbrc	r3, 6
    21a0:	81 c1       	rjmp	.+770    	; 0x24a4 <vfprintf+0x3ae>
    21a2:	23 2d       	mov	r18, r3
    21a4:	20 64       	ori	r18, 0x40	; 64
    21a6:	32 2e       	mov	r3, r18
    21a8:	19 c0       	rjmp	.+50     	; 0x21dc <vfprintf+0xe6>
    21aa:	36 fe       	sbrs	r3, 6
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <vfprintf+0xc4>
    21ae:	8a e0       	ldi	r24, 0x0A	; 10
    21b0:	98 9e       	mul	r9, r24
    21b2:	20 0d       	add	r18, r0
    21b4:	11 24       	eor	r1, r1
    21b6:	92 2e       	mov	r9, r18
    21b8:	11 c0       	rjmp	.+34     	; 0x21dc <vfprintf+0xe6>
    21ba:	ea e0       	ldi	r30, 0x0A	; 10
    21bc:	2e 9e       	mul	r2, r30
    21be:	20 0d       	add	r18, r0
    21c0:	11 24       	eor	r1, r1
    21c2:	22 2e       	mov	r2, r18
    21c4:	f3 2d       	mov	r31, r3
    21c6:	f0 62       	ori	r31, 0x20	; 32
    21c8:	3f 2e       	mov	r3, r31
    21ca:	08 c0       	rjmp	.+16     	; 0x21dc <vfprintf+0xe6>
    21cc:	8c 36       	cpi	r24, 0x6C	; 108
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <vfprintf+0xe2>
    21d0:	83 2d       	mov	r24, r3
    21d2:	80 68       	ori	r24, 0x80	; 128
    21d4:	38 2e       	mov	r3, r24
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <vfprintf+0xe6>
    21d8:	88 36       	cpi	r24, 0x68	; 104
    21da:	41 f4       	brne	.+16     	; 0x21ec <vfprintf+0xf6>
    21dc:	f7 01       	movw	r30, r14
    21de:	93 fd       	sbrc	r25, 3
    21e0:	85 91       	lpm	r24, Z+
    21e2:	93 ff       	sbrs	r25, 3
    21e4:	81 91       	ld	r24, Z+
    21e6:	7f 01       	movw	r14, r30
    21e8:	81 11       	cpse	r24, r1
    21ea:	b3 cf       	rjmp	.-154    	; 0x2152 <vfprintf+0x5c>
    21ec:	98 2f       	mov	r25, r24
    21ee:	9f 7d       	andi	r25, 0xDF	; 223
    21f0:	95 54       	subi	r25, 0x45	; 69
    21f2:	93 30       	cpi	r25, 0x03	; 3
    21f4:	28 f4       	brcc	.+10     	; 0x2200 <vfprintf+0x10a>
    21f6:	0c 5f       	subi	r16, 0xFC	; 252
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	9f e3       	ldi	r25, 0x3F	; 63
    21fc:	99 83       	std	Y+1, r25	; 0x01
    21fe:	0d c0       	rjmp	.+26     	; 0x221a <vfprintf+0x124>
    2200:	83 36       	cpi	r24, 0x63	; 99
    2202:	31 f0       	breq	.+12     	; 0x2210 <vfprintf+0x11a>
    2204:	83 37       	cpi	r24, 0x73	; 115
    2206:	71 f0       	breq	.+28     	; 0x2224 <vfprintf+0x12e>
    2208:	83 35       	cpi	r24, 0x53	; 83
    220a:	09 f0       	breq	.+2      	; 0x220e <vfprintf+0x118>
    220c:	59 c0       	rjmp	.+178    	; 0x22c0 <vfprintf+0x1ca>
    220e:	21 c0       	rjmp	.+66     	; 0x2252 <vfprintf+0x15c>
    2210:	f8 01       	movw	r30, r16
    2212:	80 81       	ld	r24, Z
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	0e 5f       	subi	r16, 0xFE	; 254
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	88 24       	eor	r8, r8
    221c:	83 94       	inc	r8
    221e:	91 2c       	mov	r9, r1
    2220:	53 01       	movw	r10, r6
    2222:	13 c0       	rjmp	.+38     	; 0x224a <vfprintf+0x154>
    2224:	28 01       	movw	r4, r16
    2226:	f2 e0       	ldi	r31, 0x02	; 2
    2228:	4f 0e       	add	r4, r31
    222a:	51 1c       	adc	r5, r1
    222c:	f8 01       	movw	r30, r16
    222e:	a0 80       	ld	r10, Z
    2230:	b1 80       	ldd	r11, Z+1	; 0x01
    2232:	36 fe       	sbrs	r3, 6
    2234:	03 c0       	rjmp	.+6      	; 0x223c <vfprintf+0x146>
    2236:	69 2d       	mov	r22, r9
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <vfprintf+0x14a>
    223c:	6f ef       	ldi	r22, 0xFF	; 255
    223e:	7f ef       	ldi	r23, 0xFF	; 255
    2240:	c5 01       	movw	r24, r10
    2242:	0e 94 ab 13 	call	0x2756	; 0x2756 <strnlen>
    2246:	4c 01       	movw	r8, r24
    2248:	82 01       	movw	r16, r4
    224a:	f3 2d       	mov	r31, r3
    224c:	ff 77       	andi	r31, 0x7F	; 127
    224e:	3f 2e       	mov	r3, r31
    2250:	16 c0       	rjmp	.+44     	; 0x227e <vfprintf+0x188>
    2252:	28 01       	movw	r4, r16
    2254:	22 e0       	ldi	r18, 0x02	; 2
    2256:	42 0e       	add	r4, r18
    2258:	51 1c       	adc	r5, r1
    225a:	f8 01       	movw	r30, r16
    225c:	a0 80       	ld	r10, Z
    225e:	b1 80       	ldd	r11, Z+1	; 0x01
    2260:	36 fe       	sbrs	r3, 6
    2262:	03 c0       	rjmp	.+6      	; 0x226a <vfprintf+0x174>
    2264:	69 2d       	mov	r22, r9
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	02 c0       	rjmp	.+4      	; 0x226e <vfprintf+0x178>
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	7f ef       	ldi	r23, 0xFF	; 255
    226e:	c5 01       	movw	r24, r10
    2270:	0e 94 99 13 	call	0x2732	; 0x2732 <strnlen_P>
    2274:	4c 01       	movw	r8, r24
    2276:	f3 2d       	mov	r31, r3
    2278:	f0 68       	ori	r31, 0x80	; 128
    227a:	3f 2e       	mov	r3, r31
    227c:	82 01       	movw	r16, r4
    227e:	33 fc       	sbrc	r3, 3
    2280:	1b c0       	rjmp	.+54     	; 0x22b8 <vfprintf+0x1c2>
    2282:	82 2d       	mov	r24, r2
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	88 16       	cp	r8, r24
    2288:	99 06       	cpc	r9, r25
    228a:	b0 f4       	brcc	.+44     	; 0x22b8 <vfprintf+0x1c2>
    228c:	b6 01       	movw	r22, r12
    228e:	80 e2       	ldi	r24, 0x20	; 32
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2296:	2a 94       	dec	r2
    2298:	f4 cf       	rjmp	.-24     	; 0x2282 <vfprintf+0x18c>
    229a:	f5 01       	movw	r30, r10
    229c:	37 fc       	sbrc	r3, 7
    229e:	85 91       	lpm	r24, Z+
    22a0:	37 fe       	sbrs	r3, 7
    22a2:	81 91       	ld	r24, Z+
    22a4:	5f 01       	movw	r10, r30
    22a6:	b6 01       	movw	r22, r12
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    22ae:	21 10       	cpse	r2, r1
    22b0:	2a 94       	dec	r2
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	82 1a       	sub	r8, r18
    22b6:	91 08       	sbc	r9, r1
    22b8:	81 14       	cp	r8, r1
    22ba:	91 04       	cpc	r9, r1
    22bc:	71 f7       	brne	.-36     	; 0x229a <vfprintf+0x1a4>
    22be:	e8 c0       	rjmp	.+464    	; 0x2490 <vfprintf+0x39a>
    22c0:	84 36       	cpi	r24, 0x64	; 100
    22c2:	11 f0       	breq	.+4      	; 0x22c8 <vfprintf+0x1d2>
    22c4:	89 36       	cpi	r24, 0x69	; 105
    22c6:	41 f5       	brne	.+80     	; 0x2318 <vfprintf+0x222>
    22c8:	f8 01       	movw	r30, r16
    22ca:	37 fe       	sbrs	r3, 7
    22cc:	07 c0       	rjmp	.+14     	; 0x22dc <vfprintf+0x1e6>
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	0c 5f       	subi	r16, 0xFC	; 252
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	08 c0       	rjmp	.+16     	; 0x22ec <vfprintf+0x1f6>
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	07 2e       	mov	r0, r23
    22e2:	00 0c       	add	r0, r0
    22e4:	88 0b       	sbc	r24, r24
    22e6:	99 0b       	sbc	r25, r25
    22e8:	0e 5f       	subi	r16, 0xFE	; 254
    22ea:	1f 4f       	sbci	r17, 0xFF	; 255
    22ec:	f3 2d       	mov	r31, r3
    22ee:	ff 76       	andi	r31, 0x6F	; 111
    22f0:	3f 2e       	mov	r3, r31
    22f2:	97 ff       	sbrs	r25, 7
    22f4:	09 c0       	rjmp	.+18     	; 0x2308 <vfprintf+0x212>
    22f6:	90 95       	com	r25
    22f8:	80 95       	com	r24
    22fa:	70 95       	com	r23
    22fc:	61 95       	neg	r22
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	8f 4f       	sbci	r24, 0xFF	; 255
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	f0 68       	ori	r31, 0x80	; 128
    2306:	3f 2e       	mov	r3, r31
    2308:	2a e0       	ldi	r18, 0x0A	; 10
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	a3 01       	movw	r20, r6
    230e:	0e 94 02 14 	call	0x2804	; 0x2804 <__ultoa_invert>
    2312:	88 2e       	mov	r8, r24
    2314:	86 18       	sub	r8, r6
    2316:	45 c0       	rjmp	.+138    	; 0x23a2 <vfprintf+0x2ac>
    2318:	85 37       	cpi	r24, 0x75	; 117
    231a:	31 f4       	brne	.+12     	; 0x2328 <vfprintf+0x232>
    231c:	23 2d       	mov	r18, r3
    231e:	2f 7e       	andi	r18, 0xEF	; 239
    2320:	b2 2e       	mov	r11, r18
    2322:	2a e0       	ldi	r18, 0x0A	; 10
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	25 c0       	rjmp	.+74     	; 0x2372 <vfprintf+0x27c>
    2328:	93 2d       	mov	r25, r3
    232a:	99 7f       	andi	r25, 0xF9	; 249
    232c:	b9 2e       	mov	r11, r25
    232e:	8f 36       	cpi	r24, 0x6F	; 111
    2330:	c1 f0       	breq	.+48     	; 0x2362 <vfprintf+0x26c>
    2332:	18 f4       	brcc	.+6      	; 0x233a <vfprintf+0x244>
    2334:	88 35       	cpi	r24, 0x58	; 88
    2336:	79 f0       	breq	.+30     	; 0x2356 <vfprintf+0x260>
    2338:	b5 c0       	rjmp	.+362    	; 0x24a4 <vfprintf+0x3ae>
    233a:	80 37       	cpi	r24, 0x70	; 112
    233c:	19 f0       	breq	.+6      	; 0x2344 <vfprintf+0x24e>
    233e:	88 37       	cpi	r24, 0x78	; 120
    2340:	21 f0       	breq	.+8      	; 0x234a <vfprintf+0x254>
    2342:	b0 c0       	rjmp	.+352    	; 0x24a4 <vfprintf+0x3ae>
    2344:	e9 2f       	mov	r30, r25
    2346:	e0 61       	ori	r30, 0x10	; 16
    2348:	be 2e       	mov	r11, r30
    234a:	b4 fe       	sbrs	r11, 4
    234c:	0d c0       	rjmp	.+26     	; 0x2368 <vfprintf+0x272>
    234e:	fb 2d       	mov	r31, r11
    2350:	f4 60       	ori	r31, 0x04	; 4
    2352:	bf 2e       	mov	r11, r31
    2354:	09 c0       	rjmp	.+18     	; 0x2368 <vfprintf+0x272>
    2356:	34 fe       	sbrs	r3, 4
    2358:	0a c0       	rjmp	.+20     	; 0x236e <vfprintf+0x278>
    235a:	29 2f       	mov	r18, r25
    235c:	26 60       	ori	r18, 0x06	; 6
    235e:	b2 2e       	mov	r11, r18
    2360:	06 c0       	rjmp	.+12     	; 0x236e <vfprintf+0x278>
    2362:	28 e0       	ldi	r18, 0x08	; 8
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <vfprintf+0x27c>
    2368:	20 e1       	ldi	r18, 0x10	; 16
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <vfprintf+0x27c>
    236e:	20 e1       	ldi	r18, 0x10	; 16
    2370:	32 e0       	ldi	r19, 0x02	; 2
    2372:	f8 01       	movw	r30, r16
    2374:	b7 fe       	sbrs	r11, 7
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <vfprintf+0x290>
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	0c 5f       	subi	r16, 0xFC	; 252
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	06 c0       	rjmp	.+12     	; 0x2392 <vfprintf+0x29c>
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 5f       	subi	r16, 0xFE	; 254
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	a3 01       	movw	r20, r6
    2394:	0e 94 02 14 	call	0x2804	; 0x2804 <__ultoa_invert>
    2398:	88 2e       	mov	r8, r24
    239a:	86 18       	sub	r8, r6
    239c:	fb 2d       	mov	r31, r11
    239e:	ff 77       	andi	r31, 0x7F	; 127
    23a0:	3f 2e       	mov	r3, r31
    23a2:	36 fe       	sbrs	r3, 6
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <vfprintf+0x2ca>
    23a6:	23 2d       	mov	r18, r3
    23a8:	2e 7f       	andi	r18, 0xFE	; 254
    23aa:	a2 2e       	mov	r10, r18
    23ac:	89 14       	cp	r8, r9
    23ae:	58 f4       	brcc	.+22     	; 0x23c6 <vfprintf+0x2d0>
    23b0:	34 fe       	sbrs	r3, 4
    23b2:	0b c0       	rjmp	.+22     	; 0x23ca <vfprintf+0x2d4>
    23b4:	32 fc       	sbrc	r3, 2
    23b6:	09 c0       	rjmp	.+18     	; 0x23ca <vfprintf+0x2d4>
    23b8:	83 2d       	mov	r24, r3
    23ba:	8e 7e       	andi	r24, 0xEE	; 238
    23bc:	a8 2e       	mov	r10, r24
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <vfprintf+0x2d4>
    23c0:	b8 2c       	mov	r11, r8
    23c2:	a3 2c       	mov	r10, r3
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <vfprintf+0x2d6>
    23c6:	b8 2c       	mov	r11, r8
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <vfprintf+0x2d6>
    23ca:	b9 2c       	mov	r11, r9
    23cc:	a4 fe       	sbrs	r10, 4
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <vfprintf+0x2f8>
    23d0:	fe 01       	movw	r30, r28
    23d2:	e8 0d       	add	r30, r8
    23d4:	f1 1d       	adc	r31, r1
    23d6:	80 81       	ld	r24, Z
    23d8:	80 33       	cpi	r24, 0x30	; 48
    23da:	21 f4       	brne	.+8      	; 0x23e4 <vfprintf+0x2ee>
    23dc:	9a 2d       	mov	r25, r10
    23de:	99 7e       	andi	r25, 0xE9	; 233
    23e0:	a9 2e       	mov	r10, r25
    23e2:	09 c0       	rjmp	.+18     	; 0x23f6 <vfprintf+0x300>
    23e4:	a2 fe       	sbrs	r10, 2
    23e6:	06 c0       	rjmp	.+12     	; 0x23f4 <vfprintf+0x2fe>
    23e8:	b3 94       	inc	r11
    23ea:	b3 94       	inc	r11
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <vfprintf+0x300>
    23ee:	8a 2d       	mov	r24, r10
    23f0:	86 78       	andi	r24, 0x86	; 134
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <vfprintf+0x300>
    23f4:	b3 94       	inc	r11
    23f6:	a3 fc       	sbrc	r10, 3
    23f8:	11 c0       	rjmp	.+34     	; 0x241c <vfprintf+0x326>
    23fa:	a0 fe       	sbrs	r10, 0
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <vfprintf+0x314>
    23fe:	b2 14       	cp	r11, r2
    2400:	88 f4       	brcc	.+34     	; 0x2424 <vfprintf+0x32e>
    2402:	28 0c       	add	r2, r8
    2404:	92 2c       	mov	r9, r2
    2406:	9b 18       	sub	r9, r11
    2408:	0e c0       	rjmp	.+28     	; 0x2426 <vfprintf+0x330>
    240a:	b2 14       	cp	r11, r2
    240c:	60 f4       	brcc	.+24     	; 0x2426 <vfprintf+0x330>
    240e:	b6 01       	movw	r22, r12
    2410:	80 e2       	ldi	r24, 0x20	; 32
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2418:	b3 94       	inc	r11
    241a:	f7 cf       	rjmp	.-18     	; 0x240a <vfprintf+0x314>
    241c:	b2 14       	cp	r11, r2
    241e:	18 f4       	brcc	.+6      	; 0x2426 <vfprintf+0x330>
    2420:	2b 18       	sub	r2, r11
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <vfprintf+0x332>
    2424:	98 2c       	mov	r9, r8
    2426:	21 2c       	mov	r2, r1
    2428:	a4 fe       	sbrs	r10, 4
    242a:	10 c0       	rjmp	.+32     	; 0x244c <vfprintf+0x356>
    242c:	b6 01       	movw	r22, r12
    242e:	80 e3       	ldi	r24, 0x30	; 48
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2436:	a2 fe       	sbrs	r10, 2
    2438:	17 c0       	rjmp	.+46     	; 0x2468 <vfprintf+0x372>
    243a:	a1 fc       	sbrc	r10, 1
    243c:	03 c0       	rjmp	.+6      	; 0x2444 <vfprintf+0x34e>
    243e:	88 e7       	ldi	r24, 0x78	; 120
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <vfprintf+0x352>
    2444:	88 e5       	ldi	r24, 0x58	; 88
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	b6 01       	movw	r22, r12
    244a:	0c c0       	rjmp	.+24     	; 0x2464 <vfprintf+0x36e>
    244c:	8a 2d       	mov	r24, r10
    244e:	86 78       	andi	r24, 0x86	; 134
    2450:	59 f0       	breq	.+22     	; 0x2468 <vfprintf+0x372>
    2452:	a1 fe       	sbrs	r10, 1
    2454:	02 c0       	rjmp	.+4      	; 0x245a <vfprintf+0x364>
    2456:	8b e2       	ldi	r24, 0x2B	; 43
    2458:	01 c0       	rjmp	.+2      	; 0x245c <vfprintf+0x366>
    245a:	80 e2       	ldi	r24, 0x20	; 32
    245c:	a7 fc       	sbrc	r10, 7
    245e:	8d e2       	ldi	r24, 0x2D	; 45
    2460:	b6 01       	movw	r22, r12
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2468:	89 14       	cp	r8, r9
    246a:	38 f4       	brcc	.+14     	; 0x247a <vfprintf+0x384>
    246c:	b6 01       	movw	r22, r12
    246e:	80 e3       	ldi	r24, 0x30	; 48
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    2476:	9a 94       	dec	r9
    2478:	f7 cf       	rjmp	.-18     	; 0x2468 <vfprintf+0x372>
    247a:	8a 94       	dec	r8
    247c:	f3 01       	movw	r30, r6
    247e:	e8 0d       	add	r30, r8
    2480:	f1 1d       	adc	r31, r1
    2482:	80 81       	ld	r24, Z
    2484:	b6 01       	movw	r22, r12
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    248c:	81 10       	cpse	r8, r1
    248e:	f5 cf       	rjmp	.-22     	; 0x247a <vfprintf+0x384>
    2490:	22 20       	and	r2, r2
    2492:	09 f4       	brne	.+2      	; 0x2496 <vfprintf+0x3a0>
    2494:	42 ce       	rjmp	.-892    	; 0x211a <vfprintf+0x24>
    2496:	b6 01       	movw	r22, r12
    2498:	80 e2       	ldi	r24, 0x20	; 32
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0e 94 c6 13 	call	0x278c	; 0x278c <fputc>
    24a0:	2a 94       	dec	r2
    24a2:	f6 cf       	rjmp	.-20     	; 0x2490 <vfprintf+0x39a>
    24a4:	f6 01       	movw	r30, r12
    24a6:	86 81       	ldd	r24, Z+6	; 0x06
    24a8:	97 81       	ldd	r25, Z+7	; 0x07
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <vfprintf+0x3ba>
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	9f ef       	ldi	r25, 0xFF	; 255
    24b0:	2b 96       	adiw	r28, 0x0b	; 11
    24b2:	e2 e1       	ldi	r30, 0x12	; 18
    24b4:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__epilogue_restores__>

000024b8 <calloc>:
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	86 9f       	mul	r24, r22
    24c2:	80 01       	movw	r16, r0
    24c4:	87 9f       	mul	r24, r23
    24c6:	10 0d       	add	r17, r0
    24c8:	96 9f       	mul	r25, r22
    24ca:	10 0d       	add	r17, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	c8 01       	movw	r24, r16
    24d0:	0e 94 78 12 	call	0x24f0	; 0x24f0 <malloc>
    24d4:	ec 01       	movw	r28, r24
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	29 f0       	breq	.+10     	; 0x24e4 <calloc+0x2c>
    24da:	a8 01       	movw	r20, r16
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	0e 94 a4 13 	call	0x2748	; 0x2748 <memset>
    24e4:	ce 01       	movw	r24, r28
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	0f 91       	pop	r16
    24ee:	08 95       	ret

000024f0 <malloc>:
    24f0:	0f 93       	push	r16
    24f2:	1f 93       	push	r17
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	82 30       	cpi	r24, 0x02	; 2
    24fa:	91 05       	cpc	r25, r1
    24fc:	10 f4       	brcc	.+4      	; 0x2502 <malloc+0x12>
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <__flp>
    2506:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <__flp+0x1>
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	a0 e0       	ldi	r26, 0x00	; 0
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	30 97       	sbiw	r30, 0x00	; 0
    2514:	19 f1       	breq	.+70     	; 0x255c <malloc+0x6c>
    2516:	40 81       	ld	r20, Z
    2518:	51 81       	ldd	r21, Z+1	; 0x01
    251a:	02 81       	ldd	r16, Z+2	; 0x02
    251c:	13 81       	ldd	r17, Z+3	; 0x03
    251e:	48 17       	cp	r20, r24
    2520:	59 07       	cpc	r21, r25
    2522:	c8 f0       	brcs	.+50     	; 0x2556 <malloc+0x66>
    2524:	84 17       	cp	r24, r20
    2526:	95 07       	cpc	r25, r21
    2528:	69 f4       	brne	.+26     	; 0x2544 <malloc+0x54>
    252a:	10 97       	sbiw	r26, 0x00	; 0
    252c:	31 f0       	breq	.+12     	; 0x253a <malloc+0x4a>
    252e:	12 96       	adiw	r26, 0x02	; 2
    2530:	0c 93       	st	X, r16
    2532:	12 97       	sbiw	r26, 0x02	; 2
    2534:	13 96       	adiw	r26, 0x03	; 3
    2536:	1c 93       	st	X, r17
    2538:	27 c0       	rjmp	.+78     	; 0x2588 <malloc+0x98>
    253a:	00 93 a0 04 	sts	0x04A0, r16	; 0x8004a0 <__flp>
    253e:	10 93 a1 04 	sts	0x04A1, r17	; 0x8004a1 <__flp+0x1>
    2542:	22 c0       	rjmp	.+68     	; 0x2588 <malloc+0x98>
    2544:	21 15       	cp	r18, r1
    2546:	31 05       	cpc	r19, r1
    2548:	19 f0       	breq	.+6      	; 0x2550 <malloc+0x60>
    254a:	42 17       	cp	r20, r18
    254c:	53 07       	cpc	r21, r19
    254e:	18 f4       	brcc	.+6      	; 0x2556 <malloc+0x66>
    2550:	9a 01       	movw	r18, r20
    2552:	bd 01       	movw	r22, r26
    2554:	ef 01       	movw	r28, r30
    2556:	df 01       	movw	r26, r30
    2558:	f8 01       	movw	r30, r16
    255a:	db cf       	rjmp	.-74     	; 0x2512 <malloc+0x22>
    255c:	21 15       	cp	r18, r1
    255e:	31 05       	cpc	r19, r1
    2560:	f9 f0       	breq	.+62     	; 0x25a0 <malloc+0xb0>
    2562:	28 1b       	sub	r18, r24
    2564:	39 0b       	sbc	r19, r25
    2566:	24 30       	cpi	r18, 0x04	; 4
    2568:	31 05       	cpc	r19, r1
    256a:	80 f4       	brcc	.+32     	; 0x258c <malloc+0x9c>
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	9b 81       	ldd	r25, Y+3	; 0x03
    2570:	61 15       	cp	r22, r1
    2572:	71 05       	cpc	r23, r1
    2574:	21 f0       	breq	.+8      	; 0x257e <malloc+0x8e>
    2576:	fb 01       	movw	r30, r22
    2578:	93 83       	std	Z+3, r25	; 0x03
    257a:	82 83       	std	Z+2, r24	; 0x02
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <malloc+0x96>
    257e:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__flp+0x1>
    2582:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__flp>
    2586:	fe 01       	movw	r30, r28
    2588:	32 96       	adiw	r30, 0x02	; 2
    258a:	44 c0       	rjmp	.+136    	; 0x2614 <malloc+0x124>
    258c:	fe 01       	movw	r30, r28
    258e:	e2 0f       	add	r30, r18
    2590:	f3 1f       	adc	r31, r19
    2592:	81 93       	st	Z+, r24
    2594:	91 93       	st	Z+, r25
    2596:	22 50       	subi	r18, 0x02	; 2
    2598:	31 09       	sbc	r19, r1
    259a:	39 83       	std	Y+1, r19	; 0x01
    259c:	28 83       	st	Y, r18
    259e:	3a c0       	rjmp	.+116    	; 0x2614 <malloc+0x124>
    25a0:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    25a4:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    25a8:	23 2b       	or	r18, r19
    25aa:	41 f4       	brne	.+16     	; 0x25bc <malloc+0xcc>
    25ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25b0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    25b4:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <__brkval+0x1>
    25b8:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <__brkval>
    25bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    25c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    25c4:	21 15       	cp	r18, r1
    25c6:	31 05       	cpc	r19, r1
    25c8:	41 f4       	brne	.+16     	; 0x25da <malloc+0xea>
    25ca:	2d b7       	in	r18, 0x3d	; 61
    25cc:	3e b7       	in	r19, 0x3e	; 62
    25ce:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    25d2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    25d6:	24 1b       	sub	r18, r20
    25d8:	35 0b       	sbc	r19, r21
    25da:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <__brkval>
    25de:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <__brkval+0x1>
    25e2:	e2 17       	cp	r30, r18
    25e4:	f3 07       	cpc	r31, r19
    25e6:	a0 f4       	brcc	.+40     	; 0x2610 <malloc+0x120>
    25e8:	2e 1b       	sub	r18, r30
    25ea:	3f 0b       	sbc	r19, r31
    25ec:	28 17       	cp	r18, r24
    25ee:	39 07       	cpc	r19, r25
    25f0:	78 f0       	brcs	.+30     	; 0x2610 <malloc+0x120>
    25f2:	ac 01       	movw	r20, r24
    25f4:	4e 5f       	subi	r20, 0xFE	; 254
    25f6:	5f 4f       	sbci	r21, 0xFF	; 255
    25f8:	24 17       	cp	r18, r20
    25fa:	35 07       	cpc	r19, r21
    25fc:	48 f0       	brcs	.+18     	; 0x2610 <malloc+0x120>
    25fe:	4e 0f       	add	r20, r30
    2600:	5f 1f       	adc	r21, r31
    2602:	50 93 9f 04 	sts	0x049F, r21	; 0x80049f <__brkval+0x1>
    2606:	40 93 9e 04 	sts	0x049E, r20	; 0x80049e <__brkval>
    260a:	81 93       	st	Z+, r24
    260c:	91 93       	st	Z+, r25
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <malloc+0x124>
    2610:	e0 e0       	ldi	r30, 0x00	; 0
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	cf 01       	movw	r24, r30
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	08 95       	ret

00002620 <free>:
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	09 f4       	brne	.+2      	; 0x262a <free+0xa>
    2628:	81 c0       	rjmp	.+258    	; 0x272c <free+0x10c>
    262a:	fc 01       	movw	r30, r24
    262c:	32 97       	sbiw	r30, 0x02	; 2
    262e:	13 82       	std	Z+3, r1	; 0x03
    2630:	12 82       	std	Z+2, r1	; 0x02
    2632:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <__flp>
    2636:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <__flp+0x1>
    263a:	10 97       	sbiw	r26, 0x00	; 0
    263c:	81 f4       	brne	.+32     	; 0x265e <free+0x3e>
    263e:	20 81       	ld	r18, Z
    2640:	31 81       	ldd	r19, Z+1	; 0x01
    2642:	82 0f       	add	r24, r18
    2644:	93 1f       	adc	r25, r19
    2646:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    264a:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    264e:	28 17       	cp	r18, r24
    2650:	39 07       	cpc	r19, r25
    2652:	51 f5       	brne	.+84     	; 0x26a8 <free+0x88>
    2654:	f0 93 9f 04 	sts	0x049F, r31	; 0x80049f <__brkval+0x1>
    2658:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <__brkval>
    265c:	67 c0       	rjmp	.+206    	; 0x272c <free+0x10c>
    265e:	ed 01       	movw	r28, r26
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	ce 17       	cp	r28, r30
    2666:	df 07       	cpc	r29, r31
    2668:	40 f4       	brcc	.+16     	; 0x267a <free+0x5a>
    266a:	4a 81       	ldd	r20, Y+2	; 0x02
    266c:	5b 81       	ldd	r21, Y+3	; 0x03
    266e:	9e 01       	movw	r18, r28
    2670:	41 15       	cp	r20, r1
    2672:	51 05       	cpc	r21, r1
    2674:	f1 f0       	breq	.+60     	; 0x26b2 <free+0x92>
    2676:	ea 01       	movw	r28, r20
    2678:	f5 cf       	rjmp	.-22     	; 0x2664 <free+0x44>
    267a:	d3 83       	std	Z+3, r29	; 0x03
    267c:	c2 83       	std	Z+2, r28	; 0x02
    267e:	40 81       	ld	r20, Z
    2680:	51 81       	ldd	r21, Z+1	; 0x01
    2682:	84 0f       	add	r24, r20
    2684:	95 1f       	adc	r25, r21
    2686:	c8 17       	cp	r28, r24
    2688:	d9 07       	cpc	r29, r25
    268a:	59 f4       	brne	.+22     	; 0x26a2 <free+0x82>
    268c:	88 81       	ld	r24, Y
    268e:	99 81       	ldd	r25, Y+1	; 0x01
    2690:	84 0f       	add	r24, r20
    2692:	95 1f       	adc	r25, r21
    2694:	02 96       	adiw	r24, 0x02	; 2
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	93 83       	std	Z+3, r25	; 0x03
    26a0:	82 83       	std	Z+2, r24	; 0x02
    26a2:	21 15       	cp	r18, r1
    26a4:	31 05       	cpc	r19, r1
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <free+0x92>
    26a8:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <__flp+0x1>
    26ac:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <__flp>
    26b0:	3d c0       	rjmp	.+122    	; 0x272c <free+0x10c>
    26b2:	e9 01       	movw	r28, r18
    26b4:	fb 83       	std	Y+3, r31	; 0x03
    26b6:	ea 83       	std	Y+2, r30	; 0x02
    26b8:	49 91       	ld	r20, Y+
    26ba:	59 91       	ld	r21, Y+
    26bc:	c4 0f       	add	r28, r20
    26be:	d5 1f       	adc	r29, r21
    26c0:	ec 17       	cp	r30, r28
    26c2:	fd 07       	cpc	r31, r29
    26c4:	61 f4       	brne	.+24     	; 0x26de <free+0xbe>
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	84 0f       	add	r24, r20
    26cc:	95 1f       	adc	r25, r21
    26ce:	02 96       	adiw	r24, 0x02	; 2
    26d0:	e9 01       	movw	r28, r18
    26d2:	99 83       	std	Y+1, r25	; 0x01
    26d4:	88 83       	st	Y, r24
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	9b 83       	std	Y+3, r25	; 0x03
    26dc:	8a 83       	std	Y+2, r24	; 0x02
    26de:	e0 e0       	ldi	r30, 0x00	; 0
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	12 96       	adiw	r26, 0x02	; 2
    26e4:	8d 91       	ld	r24, X+
    26e6:	9c 91       	ld	r25, X
    26e8:	13 97       	sbiw	r26, 0x03	; 3
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	19 f0       	breq	.+6      	; 0x26f4 <free+0xd4>
    26ee:	fd 01       	movw	r30, r26
    26f0:	dc 01       	movw	r26, r24
    26f2:	f7 cf       	rjmp	.-18     	; 0x26e2 <free+0xc2>
    26f4:	8d 91       	ld	r24, X+
    26f6:	9c 91       	ld	r25, X
    26f8:	11 97       	sbiw	r26, 0x01	; 1
    26fa:	9d 01       	movw	r18, r26
    26fc:	2e 5f       	subi	r18, 0xFE	; 254
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	82 0f       	add	r24, r18
    2702:	93 1f       	adc	r25, r19
    2704:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    2708:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    270c:	28 17       	cp	r18, r24
    270e:	39 07       	cpc	r19, r25
    2710:	69 f4       	brne	.+26     	; 0x272c <free+0x10c>
    2712:	30 97       	sbiw	r30, 0x00	; 0
    2714:	29 f4       	brne	.+10     	; 0x2720 <free+0x100>
    2716:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <__flp+0x1>
    271a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__flp>
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <free+0x104>
    2720:	13 82       	std	Z+3, r1	; 0x03
    2722:	12 82       	std	Z+2, r1	; 0x02
    2724:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <__brkval+0x1>
    2728:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <__brkval>
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <strnlen_P>:
    2732:	fc 01       	movw	r30, r24
    2734:	05 90       	lpm	r0, Z+
    2736:	61 50       	subi	r22, 0x01	; 1
    2738:	70 40       	sbci	r23, 0x00	; 0
    273a:	01 10       	cpse	r0, r1
    273c:	d8 f7       	brcc	.-10     	; 0x2734 <strnlen_P+0x2>
    273e:	80 95       	com	r24
    2740:	90 95       	com	r25
    2742:	8e 0f       	add	r24, r30
    2744:	9f 1f       	adc	r25, r31
    2746:	08 95       	ret

00002748 <memset>:
    2748:	dc 01       	movw	r26, r24
    274a:	01 c0       	rjmp	.+2      	; 0x274e <memset+0x6>
    274c:	6d 93       	st	X+, r22
    274e:	41 50       	subi	r20, 0x01	; 1
    2750:	50 40       	sbci	r21, 0x00	; 0
    2752:	e0 f7       	brcc	.-8      	; 0x274c <memset+0x4>
    2754:	08 95       	ret

00002756 <strnlen>:
    2756:	fc 01       	movw	r30, r24
    2758:	61 50       	subi	r22, 0x01	; 1
    275a:	70 40       	sbci	r23, 0x00	; 0
    275c:	01 90       	ld	r0, Z+
    275e:	01 10       	cpse	r0, r1
    2760:	d8 f7       	brcc	.-10     	; 0x2758 <strnlen+0x2>
    2762:	80 95       	com	r24
    2764:	90 95       	com	r25
    2766:	8e 0f       	add	r24, r30
    2768:	9f 1f       	adc	r25, r31
    276a:	08 95       	ret

0000276c <strrev>:
    276c:	dc 01       	movw	r26, r24
    276e:	fc 01       	movw	r30, r24
    2770:	67 2f       	mov	r22, r23
    2772:	71 91       	ld	r23, Z+
    2774:	77 23       	and	r23, r23
    2776:	e1 f7       	brne	.-8      	; 0x2770 <strrev+0x4>
    2778:	32 97       	sbiw	r30, 0x02	; 2
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <strrev+0x18>
    277c:	7c 91       	ld	r23, X
    277e:	6d 93       	st	X+, r22
    2780:	70 83       	st	Z, r23
    2782:	62 91       	ld	r22, -Z
    2784:	ae 17       	cp	r26, r30
    2786:	bf 07       	cpc	r27, r31
    2788:	c8 f3       	brcs	.-14     	; 0x277c <strrev+0x10>
    278a:	08 95       	ret

0000278c <fputc>:
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	fb 01       	movw	r30, r22
    2796:	23 81       	ldd	r18, Z+3	; 0x03
    2798:	21 fd       	sbrc	r18, 1
    279a:	03 c0       	rjmp	.+6      	; 0x27a2 <fputc+0x16>
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	9f ef       	ldi	r25, 0xFF	; 255
    27a0:	2c c0       	rjmp	.+88     	; 0x27fa <fputc+0x6e>
    27a2:	22 ff       	sbrs	r18, 2
    27a4:	16 c0       	rjmp	.+44     	; 0x27d2 <fputc+0x46>
    27a6:	46 81       	ldd	r20, Z+6	; 0x06
    27a8:	57 81       	ldd	r21, Z+7	; 0x07
    27aa:	24 81       	ldd	r18, Z+4	; 0x04
    27ac:	35 81       	ldd	r19, Z+5	; 0x05
    27ae:	42 17       	cp	r20, r18
    27b0:	53 07       	cpc	r21, r19
    27b2:	44 f4       	brge	.+16     	; 0x27c4 <fputc+0x38>
    27b4:	a0 81       	ld	r26, Z
    27b6:	b1 81       	ldd	r27, Z+1	; 0x01
    27b8:	9d 01       	movw	r18, r26
    27ba:	2f 5f       	subi	r18, 0xFF	; 255
    27bc:	3f 4f       	sbci	r19, 0xFF	; 255
    27be:	31 83       	std	Z+1, r19	; 0x01
    27c0:	20 83       	st	Z, r18
    27c2:	8c 93       	st	X, r24
    27c4:	26 81       	ldd	r18, Z+6	; 0x06
    27c6:	37 81       	ldd	r19, Z+7	; 0x07
    27c8:	2f 5f       	subi	r18, 0xFF	; 255
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	37 83       	std	Z+7, r19	; 0x07
    27ce:	26 83       	std	Z+6, r18	; 0x06
    27d0:	14 c0       	rjmp	.+40     	; 0x27fa <fputc+0x6e>
    27d2:	8b 01       	movw	r16, r22
    27d4:	ec 01       	movw	r28, r24
    27d6:	fb 01       	movw	r30, r22
    27d8:	00 84       	ldd	r0, Z+8	; 0x08
    27da:	f1 85       	ldd	r31, Z+9	; 0x09
    27dc:	e0 2d       	mov	r30, r0
    27de:	09 95       	icall
    27e0:	89 2b       	or	r24, r25
    27e2:	e1 f6       	brne	.-72     	; 0x279c <fputc+0x10>
    27e4:	d8 01       	movw	r26, r16
    27e6:	16 96       	adiw	r26, 0x06	; 6
    27e8:	8d 91       	ld	r24, X+
    27ea:	9c 91       	ld	r25, X
    27ec:	17 97       	sbiw	r26, 0x07	; 7
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	17 96       	adiw	r26, 0x07	; 7
    27f2:	9c 93       	st	X, r25
    27f4:	8e 93       	st	-X, r24
    27f6:	16 97       	sbiw	r26, 0x06	; 6
    27f8:	ce 01       	movw	r24, r28
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	08 95       	ret

00002804 <__ultoa_invert>:
    2804:	fa 01       	movw	r30, r20
    2806:	aa 27       	eor	r26, r26
    2808:	28 30       	cpi	r18, 0x08	; 8
    280a:	51 f1       	breq	.+84     	; 0x2860 <__ultoa_invert+0x5c>
    280c:	20 31       	cpi	r18, 0x10	; 16
    280e:	81 f1       	breq	.+96     	; 0x2870 <__ultoa_invert+0x6c>
    2810:	e8 94       	clt
    2812:	6f 93       	push	r22
    2814:	6e 7f       	andi	r22, 0xFE	; 254
    2816:	6e 5f       	subi	r22, 0xFE	; 254
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	8f 4f       	sbci	r24, 0xFF	; 255
    281c:	9f 4f       	sbci	r25, 0xFF	; 255
    281e:	af 4f       	sbci	r26, 0xFF	; 255
    2820:	b1 e0       	ldi	r27, 0x01	; 1
    2822:	3e d0       	rcall	.+124    	; 0x28a0 <__ultoa_invert+0x9c>
    2824:	b4 e0       	ldi	r27, 0x04	; 4
    2826:	3c d0       	rcall	.+120    	; 0x28a0 <__ultoa_invert+0x9c>
    2828:	67 0f       	add	r22, r23
    282a:	78 1f       	adc	r23, r24
    282c:	89 1f       	adc	r24, r25
    282e:	9a 1f       	adc	r25, r26
    2830:	a1 1d       	adc	r26, r1
    2832:	68 0f       	add	r22, r24
    2834:	79 1f       	adc	r23, r25
    2836:	8a 1f       	adc	r24, r26
    2838:	91 1d       	adc	r25, r1
    283a:	a1 1d       	adc	r26, r1
    283c:	6a 0f       	add	r22, r26
    283e:	71 1d       	adc	r23, r1
    2840:	81 1d       	adc	r24, r1
    2842:	91 1d       	adc	r25, r1
    2844:	a1 1d       	adc	r26, r1
    2846:	20 d0       	rcall	.+64     	; 0x2888 <__ultoa_invert+0x84>
    2848:	09 f4       	brne	.+2      	; 0x284c <__ultoa_invert+0x48>
    284a:	68 94       	set
    284c:	3f 91       	pop	r19
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	26 9f       	mul	r18, r22
    2852:	11 24       	eor	r1, r1
    2854:	30 19       	sub	r19, r0
    2856:	30 5d       	subi	r19, 0xD0	; 208
    2858:	31 93       	st	Z+, r19
    285a:	de f6       	brtc	.-74     	; 0x2812 <__ultoa_invert+0xe>
    285c:	cf 01       	movw	r24, r30
    285e:	08 95       	ret
    2860:	46 2f       	mov	r20, r22
    2862:	47 70       	andi	r20, 0x07	; 7
    2864:	40 5d       	subi	r20, 0xD0	; 208
    2866:	41 93       	st	Z+, r20
    2868:	b3 e0       	ldi	r27, 0x03	; 3
    286a:	0f d0       	rcall	.+30     	; 0x288a <__ultoa_invert+0x86>
    286c:	c9 f7       	brne	.-14     	; 0x2860 <__ultoa_invert+0x5c>
    286e:	f6 cf       	rjmp	.-20     	; 0x285c <__ultoa_invert+0x58>
    2870:	46 2f       	mov	r20, r22
    2872:	4f 70       	andi	r20, 0x0F	; 15
    2874:	40 5d       	subi	r20, 0xD0	; 208
    2876:	4a 33       	cpi	r20, 0x3A	; 58
    2878:	18 f0       	brcs	.+6      	; 0x2880 <__ultoa_invert+0x7c>
    287a:	49 5d       	subi	r20, 0xD9	; 217
    287c:	31 fd       	sbrc	r19, 1
    287e:	40 52       	subi	r20, 0x20	; 32
    2880:	41 93       	st	Z+, r20
    2882:	02 d0       	rcall	.+4      	; 0x2888 <__ultoa_invert+0x84>
    2884:	a9 f7       	brne	.-22     	; 0x2870 <__ultoa_invert+0x6c>
    2886:	ea cf       	rjmp	.-44     	; 0x285c <__ultoa_invert+0x58>
    2888:	b4 e0       	ldi	r27, 0x04	; 4
    288a:	a6 95       	lsr	r26
    288c:	97 95       	ror	r25
    288e:	87 95       	ror	r24
    2890:	77 95       	ror	r23
    2892:	67 95       	ror	r22
    2894:	ba 95       	dec	r27
    2896:	c9 f7       	brne	.-14     	; 0x288a <__ultoa_invert+0x86>
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	61 05       	cpc	r22, r1
    289c:	71 05       	cpc	r23, r1
    289e:	08 95       	ret
    28a0:	9b 01       	movw	r18, r22
    28a2:	ac 01       	movw	r20, r24
    28a4:	0a 2e       	mov	r0, r26
    28a6:	06 94       	lsr	r0
    28a8:	57 95       	ror	r21
    28aa:	47 95       	ror	r20
    28ac:	37 95       	ror	r19
    28ae:	27 95       	ror	r18
    28b0:	ba 95       	dec	r27
    28b2:	c9 f7       	brne	.-14     	; 0x28a6 <__ultoa_invert+0xa2>
    28b4:	62 0f       	add	r22, r18
    28b6:	73 1f       	adc	r23, r19
    28b8:	84 1f       	adc	r24, r20
    28ba:	95 1f       	adc	r25, r21
    28bc:	a0 1d       	adc	r26, r0
    28be:	08 95       	ret

000028c0 <__prologue_saves__>:
    28c0:	2f 92       	push	r2
    28c2:	3f 92       	push	r3
    28c4:	4f 92       	push	r4
    28c6:	5f 92       	push	r5
    28c8:	6f 92       	push	r6
    28ca:	7f 92       	push	r7
    28cc:	8f 92       	push	r8
    28ce:	9f 92       	push	r9
    28d0:	af 92       	push	r10
    28d2:	bf 92       	push	r11
    28d4:	cf 92       	push	r12
    28d6:	df 92       	push	r13
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	ca 1b       	sub	r28, r26
    28ea:	db 0b       	sbc	r29, r27
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
    28f6:	09 94       	ijmp

000028f8 <__epilogue_restores__>:
    28f8:	2a 88       	ldd	r2, Y+18	; 0x12
    28fa:	39 88       	ldd	r3, Y+17	; 0x11
    28fc:	48 88       	ldd	r4, Y+16	; 0x10
    28fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2900:	6e 84       	ldd	r6, Y+14	; 0x0e
    2902:	7d 84       	ldd	r7, Y+13	; 0x0d
    2904:	8c 84       	ldd	r8, Y+12	; 0x0c
    2906:	9b 84       	ldd	r9, Y+11	; 0x0b
    2908:	aa 84       	ldd	r10, Y+10	; 0x0a
    290a:	b9 84       	ldd	r11, Y+9	; 0x09
    290c:	c8 84       	ldd	r12, Y+8	; 0x08
    290e:	df 80       	ldd	r13, Y+7	; 0x07
    2910:	ee 80       	ldd	r14, Y+6	; 0x06
    2912:	fd 80       	ldd	r15, Y+5	; 0x05
    2914:	0c 81       	ldd	r16, Y+4	; 0x04
    2916:	1b 81       	ldd	r17, Y+3	; 0x03
    2918:	aa 81       	ldd	r26, Y+2	; 0x02
    291a:	b9 81       	ldd	r27, Y+1	; 0x01
    291c:	ce 0f       	add	r28, r30
    291e:	d1 1d       	adc	r29, r1
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	ed 01       	movw	r28, r26
    292c:	08 95       	ret

0000292e <_exit>:
    292e:	f8 94       	cli

00002930 <__stop_program>:
    2930:	ff cf       	rjmp	.-2      	; 0x2930 <__stop_program>
