
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000264  00800100  00002852  000028e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800364  00800364  00002b4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00002be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000514c  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d3c  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002242  00000000  00000000  00009e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000920  00000000  00000000  0000c098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf7  00000000  00000000  0000c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000206f  00000000  00000000  0000d6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000f71e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	13 e0       	ldi	r17, 0x03	; 3
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	e2 e5       	ldi	r30, 0x52	; 82
     536:	f8 e2       	ldi	r31, 0x28	; 40
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 36       	cpi	r26, 0x64	; 100
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a4 e6       	ldi	r26, 0x64	; 100
     548:	b3 e0       	ldi	r27, 0x03	; 3
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a2 3a       	cpi	r26, 0xA2	; 162
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 27 14 	jmp	0x284e	; 0x284e <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xf5e>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xf5e>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "MCP2515.h"
#include "pwm.h"
#include "music.h"
#include "CAN.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
//p.23 for can read instructions
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     5aa:	87 e5       	ldi	r24, 0x57	; 87
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>
	printf("---------------------------------------\n\r");
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x4e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x58>
     5ea:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <CAN_controller_setMode>
     5f2:	af ef       	ldi	r26, 0xFF	; 255
     5f4:	bf e7       	ldi	r27, 0x7F	; 127
     5f6:	27 e0       	ldi	r18, 0x07	; 7
     5f8:	a1 50       	subi	r26, 0x01	; 1
     5fa:	b0 40       	sbci	r27, 0x00	; 0
     5fc:	20 40       	sbci	r18, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x66>
     600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x70>
     602:	00 00       	nop
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     60c:	0b e6       	ldi	r16, 0x6B	; 107
     60e:	13 e0       	ldi	r17, 0x03	; 3
	_delay_ms(500);
	//test_SRAM();            
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     610:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     614:	d8 01       	movw	r26, r16
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	80 81       	ld	r24, Z
     61c:	85 30       	cpi	r24, 0x05	; 5
     61e:	99 f0       	breq	.+38     	; 0x646 <main+0xb4>
     620:	28 f4       	brcc	.+10     	; 0x62c <main+0x9a>
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	41 f0       	breq	.+16     	; 0x636 <main+0xa4>
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	49 f0       	breq	.+18     	; 0x63c <main+0xaa>
     62a:	f2 cf       	rjmp	.-28     	; 0x610 <main+0x7e>
     62c:	86 30       	cpi	r24, 0x06	; 6
     62e:	81 f0       	breq	.+32     	; 0x650 <main+0xbe>
     630:	87 30       	cpi	r24, 0x07	; 7
     632:	99 f0       	breq	.+38     	; 0x65a <main+0xc8>
     634:	ed cf       	rjmp	.-38     	; 0x610 <main+0x7e>
			case MAIN_MENU:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     636:	0e 94 f6 07 	call	0xfec	; 0xfec <music_playRick>
				break;
     63a:	ea cf       	rjmp	.-44     	; 0x610 <main+0x7e>
			case GAME_1:
				game_play(1);
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 56 07 	call	0xeac	; 0xeac <game_play>
				break;
     644:	e5 cf       	rjmp	.-54     	; 0x610 <main+0x7e>
			case GAME_2:
				game_play(2);
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 56 07 	call	0xeac	; 0xeac <game_play>
				break;
     64e:	e0 cf       	rjmp	.-64     	; 0x610 <main+0x7e>
			case HS1:
				game_displayHighscores(1);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 83 07 	call	0xf06	; 0xf06 <game_displayHighscores>
				break;
     658:	db cf       	rjmp	.-74     	; 0x610 <main+0x7e>
			case HS2:
				game_displayHighscores(2);
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 83 07 	call	0xf06	; 0xf06 <game_displayHighscores>
				break;
     662:	d6 cf       	rjmp	.-84     	; 0x610 <main+0x7e>

00000664 <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	6c e2       	ldi	r22, 0x2C	; 44
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
     674:	08 95       	ret

00000676 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     67e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     682:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	63 e0       	ldi	r22, 0x03	; 3
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__divmodhi4>
     690:	28 2f       	mov	r18, r24
     692:	39 2f       	mov	r19, r25
     694:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <__data_end>
     698:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <__data_end+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     69c:	21 30       	cpi	r18, 0x01	; 1
     69e:	31 05       	cpc	r19, r1
     6a0:	01 f1       	breq	.+64     	; 0x6e2 <CAN_transmit_message+0x6c>
     6a2:	22 30       	cpi	r18, 0x02	; 2
     6a4:	31 05       	cpc	r19, r1
     6a6:	b9 f1       	breq	.+110    	; 0x716 <CAN_transmit_message+0xa0>
     6a8:	23 2b       	or	r18, r19
     6aa:	09 f0       	breq	.+2      	; 0x6ae <CAN_transmit_message+0x38>
     6ac:	4d c0       	rjmp	.+154    	; 0x748 <CAN_transmit_message+0xd2>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6ae:	f8 01       	movw	r30, r16
     6b0:	40 85       	ldd	r20, Z+8	; 0x08
     6b2:	51 85       	ldd	r21, Z+9	; 0x09
     6b4:	42 95       	swap	r20
     6b6:	44 0f       	add	r20, r20
     6b8:	40 7e       	andi	r20, 0xE0	; 224
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	62 e3       	ldi	r22, 0x32	; 50
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 ee       	ldi	r24, 0xE0	; 224
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6c8:	f8 01       	movw	r30, r16
     6ca:	60 85       	ldd	r22, Z+8	; 0x08
     6cc:	71 85       	ldd	r23, Z+9	; 0x09
     6ce:	76 95       	lsr	r23
     6d0:	67 95       	ror	r22
     6d2:	76 95       	lsr	r23
     6d4:	67 95       	ror	r22
     6d6:	76 95       	lsr	r23
     6d8:	67 95       	ror	r22
     6da:	81 e3       	ldi	r24, 0x31	; 49
     6dc:	0e 94 82 04 	call	0x904	; 0x904 <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     6e0:	33 c0       	rjmp	.+102    	; 0x748 <CAN_transmit_message+0xd2>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6e2:	f8 01       	movw	r30, r16
     6e4:	40 85       	ldd	r20, Z+8	; 0x08
     6e6:	51 85       	ldd	r21, Z+9	; 0x09
     6e8:	42 95       	swap	r20
     6ea:	44 0f       	add	r20, r20
     6ec:	40 7e       	andi	r20, 0xE0	; 224
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	62 e4       	ldi	r22, 0x42	; 66
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 ee       	ldi	r24, 0xE0	; 224
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     6fc:	f8 01       	movw	r30, r16
     6fe:	60 85       	ldd	r22, Z+8	; 0x08
     700:	71 85       	ldd	r23, Z+9	; 0x09
     702:	76 95       	lsr	r23
     704:	67 95       	ror	r22
     706:	76 95       	lsr	r23
     708:	67 95       	ror	r22
     70a:	76 95       	lsr	r23
     70c:	67 95       	ror	r22
     70e:	81 e4       	ldi	r24, 0x41	; 65
     710:	0e 94 82 04 	call	0x904	; 0x904 <CAN_controller_write>
				
				break;
     714:	19 c0       	rjmp	.+50     	; 0x748 <CAN_transmit_message+0xd2>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     716:	f8 01       	movw	r30, r16
     718:	40 85       	ldd	r20, Z+8	; 0x08
     71a:	51 85       	ldd	r21, Z+9	; 0x09
     71c:	42 95       	swap	r20
     71e:	44 0f       	add	r20, r20
     720:	40 7e       	andi	r20, 0xE0	; 224
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	62 e5       	ldi	r22, 0x52	; 82
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 ee       	ldi	r24, 0xE0	; 224
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     730:	f8 01       	movw	r30, r16
     732:	60 85       	ldd	r22, Z+8	; 0x08
     734:	71 85       	ldd	r23, Z+9	; 0x09
     736:	76 95       	lsr	r23
     738:	67 95       	ror	r22
     73a:	76 95       	lsr	r23
     73c:	67 95       	ror	r22
     73e:	76 95       	lsr	r23
     740:	67 95       	ror	r22
     742:	81 e5       	ldi	r24, 0x51	; 81
     744:	0e 94 82 04 	call	0x904	; 0x904 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     748:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     74c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	91 05       	cpc	r25, r1
     754:	79 f0       	breq	.+30     	; 0x774 <CAN_transmit_message+0xfe>
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	91 05       	cpc	r25, r1
     75a:	b1 f0       	breq	.+44     	; 0x788 <CAN_transmit_message+0x112>
     75c:	89 2b       	or	r24, r25
     75e:	e9 f4       	brne	.+58     	; 0x79a <CAN_transmit_message+0x124>
			case 0:
				//printf("\n\rtransmitting data length: %i\n\r", message->data_length);
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     760:	f8 01       	movw	r30, r16
     762:	42 85       	ldd	r20, Z+10	; 0x0a
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	65 e3       	ldi	r22, 0x35	; 53
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	8f e0       	ldi	r24, 0x0F	; 15
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
				break;
     772:	13 c0       	rjmp	.+38     	; 0x79a <CAN_transmit_message+0x124>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     774:	f8 01       	movw	r30, r16
     776:	42 85       	ldd	r20, Z+10	; 0x0a
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	65 e4       	ldi	r22, 0x45	; 69
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	8f e0       	ldi	r24, 0x0F	; 15
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
				break;
     786:	09 c0       	rjmp	.+18     	; 0x79a <CAN_transmit_message+0x124>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     788:	f8 01       	movw	r30, r16
     78a:	42 85       	ldd	r20, Z+10	; 0x0a
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	65 e5       	ldi	r22, 0x55	; 85
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	8f e0       	ldi	r24, 0x0F	; 15
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     79a:	f8 01       	movw	r30, r16
     79c:	82 85       	ldd	r24, Z+10	; 0x0a
     79e:	88 23       	and	r24, r24
     7a0:	61 f1       	breq	.+88     	; 0x7fa <CAN_transmit_message+0x184>
     7a2:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     7a4:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     7a8:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	91 05       	cpc	r25, r1
     7b0:	71 f0       	breq	.+28     	; 0x7ce <CAN_transmit_message+0x158>
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	91 05       	cpc	r25, r1
     7b6:	a1 f0       	breq	.+40     	; 0x7e0 <CAN_transmit_message+0x16a>
     7b8:	89 2b       	or	r24, r25
     7ba:	d1 f4       	brne	.+52     	; 0x7f0 <CAN_transmit_message+0x17a>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     7bc:	f8 01       	movw	r30, r16
     7be:	ec 0f       	add	r30, r28
     7c0:	f1 1d       	adc	r31, r1
     7c2:	60 81       	ld	r22, Z
     7c4:	86 e3       	ldi	r24, 0x36	; 54
     7c6:	8c 0f       	add	r24, r28
     7c8:	0e 94 82 04 	call	0x904	; 0x904 <CAN_controller_write>
				break;
     7cc:	11 c0       	rjmp	.+34     	; 0x7f0 <CAN_transmit_message+0x17a>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7ce:	f8 01       	movw	r30, r16
     7d0:	ec 0f       	add	r30, r28
     7d2:	f1 1d       	adc	r31, r1
     7d4:	60 81       	ld	r22, Z
     7d6:	86 e4       	ldi	r24, 0x46	; 70
     7d8:	8c 0f       	add	r24, r28
     7da:	0e 94 82 04 	call	0x904	; 0x904 <CAN_controller_write>
				break;
     7de:	08 c0       	rjmp	.+16     	; 0x7f0 <CAN_transmit_message+0x17a>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7e0:	f8 01       	movw	r30, r16
     7e2:	ec 0f       	add	r30, r28
     7e4:	f1 1d       	adc	r31, r1
     7e6:	60 81       	ld	r22, Z
     7e8:	86 e5       	ldi	r24, 0x56	; 86
     7ea:	8c 0f       	add	r24, r28
     7ec:	0e 94 82 04 	call	0x904	; 0x904 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     7f0:	cf 5f       	subi	r28, 0xFF	; 255
     7f2:	f8 01       	movw	r30, r16
     7f4:	82 85       	ldd	r24, Z+10	; 0x0a
     7f6:	8c 13       	cpse	r24, r28
     7f8:	d5 cf       	rjmp	.-86     	; 0x7a4 <CAN_transmit_message+0x12e>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7fa:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     7fe:	0e 94 cc 04 	call	0x998	; 0x998 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     816:	82 e6       	ldi	r24, 0x62	; 98
     818:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_read>
     81c:	c8 2f       	mov	r28, r24
     81e:	81 e6       	ldi	r24, 0x61	; 97
     820:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_read>
     824:	c2 95       	swap	r28
     826:	c6 95       	lsr	r28
     828:	c7 70       	andi	r28, 0x07	; 7
     82a:	28 e0       	ldi	r18, 0x08	; 8
     82c:	82 9f       	mul	r24, r18
     82e:	c0 01       	movw	r24, r0
     830:	11 24       	eor	r1, r1
     832:	8c 0f       	add	r24, r28
     834:	91 1d       	adc	r25, r1
     836:	f7 01       	movw	r30, r14
     838:	91 87       	std	Z+9, r25	; 0x09
     83a:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     83c:	85 e6       	ldi	r24, 0x65	; 101
     83e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_read>
     842:	8f 70       	andi	r24, 0x0F	; 15
     844:	f7 01       	movw	r30, r14
     846:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     848:	82 85       	ldd	r24, Z+10	; 0x0a
     84a:	88 23       	and	r24, r24
     84c:	81 f0       	breq	.+32     	; 0x86e <CAN_receiveMessage+0x64>
     84e:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     850:	0c 2f       	mov	r16, r28
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	86 e6       	ldi	r24, 0x66	; 102
     856:	8c 0f       	add	r24, r28
     858:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_read>
     85c:	f7 01       	movw	r30, r14
     85e:	e0 0f       	add	r30, r16
     860:	f1 1f       	adc	r31, r17
     862:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     864:	cf 5f       	subi	r28, 0xFF	; 255
     866:	f7 01       	movw	r30, r14
     868:	82 85       	ldd	r24, Z+10	; 0x0a
     86a:	8c 13       	cpse	r24, r28
     86c:	f1 cf       	rjmp	.-30     	; 0x850 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	08 95       	ret

0000087a <CAN_sendInputData>:

void CAN_sendInputData() {
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	2b 97       	sbiw	r28, 0x0b	; 11
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9a 87       	std	Y+10, r25	; 0x0a
     894:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     896:	86 e0       	ldi	r24, 0x06	; 6
     898:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     89a:	e1 e7       	ldi	r30, 0x71	; 113
     89c:	f3 e0       	ldi	r31, 0x03	; 3
     89e:	80 81       	ld	r24, Z
     8a0:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     8a2:	81 81       	ldd	r24, Z+1	; 0x01
     8a4:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     8a6:	ef e6       	ldi	r30, 0x6F	; 111
     8a8:	f3 e0       	ldi	r31, 0x03	; 3
     8aa:	80 81       	ld	r24, Z
     8ac:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     8ae:	81 81       	ldd	r24, Z+1	; 0x01
     8b0:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     8b2:	e7 e6       	ldi	r30, 0x67	; 103
     8b4:	f3 e0       	ldi	r31, 0x03	; 3
     8b6:	80 81       	ld	r24, Z
     8b8:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     8ba:	81 81       	ldd	r24, Z+1	; 0x01
     8bc:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	0e 94 3b 03 	call	0x676	; 0x676 <CAN_transmit_message>
     8c6:	2b 96       	adiw	r28, 0x0b	; 11
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     8d8:	cf 93       	push	r28
     8da:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8ea:	8c 2f       	mov	r24, r28
     8ec:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8f0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <SPI_masterRead>
     8f4:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
	
	return data;
}
     8fe:	8c 2f       	mov	r24, r28
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	d8 2f       	mov	r29, r24
     90a:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	84 e0       	ldi	r24, 0x04	; 4
     910:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
	SPI_masterWrite(addr);
     91a:	8d 2f       	mov	r24, r29
     91c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
	SPI_masterWrite(data);
     920:	8c 2f       	mov	r24, r28
     922:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
	
}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	d8 2f       	mov	r29, r24
     93c:	16 2f       	mov	r17, r22
     93e:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     948:	85 e0       	ldi	r24, 0x05	; 5
     94a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
		SPI_masterWrite(addr);
     94e:	81 2f       	mov	r24, r17
     950:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
		SPI_masterWrite(mask);
     954:	8d 2f       	mov	r24, r29
     956:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
		SPI_masterWrite(data);
     95a:	8c 2f       	mov	r24, r28
     95c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>

}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	08 95       	ret

00000970 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
	printf("Before spi write");
     978:	83 ee       	ldi	r24, 0xE3	; 227
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>
	SPI_masterWrite(MCP_RESET);
     984:	80 ec       	ldi	r24, 0xC0	; 192
     986:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
}
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	08 95       	ret

00000998 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     998:	cf 93       	push	r28
     99a:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
	switch (buffer) {
     9a4:	c1 30       	cpi	r28, 0x01	; 1
     9a6:	41 f0       	breq	.+16     	; 0x9b8 <CAN_controller_RTS+0x20>
     9a8:	18 f0       	brcs	.+6      	; 0x9b0 <CAN_controller_RTS+0x18>
     9aa:	c2 30       	cpi	r28, 0x02	; 2
     9ac:	49 f0       	breq	.+18     	; 0x9c0 <CAN_controller_RTS+0x28>
     9ae:	0b c0       	rjmp	.+22     	; 0x9c6 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     9b0:	81 e8       	ldi	r24, 0x81	; 129
     9b2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
			break;
     9b6:	07 c0       	rjmp	.+14     	; 0x9c6 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     9b8:	82 e8       	ldi	r24, 0x82	; 130
     9ba:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
			break;
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     9c0:	84 e8       	ldi	r24, 0x84	; 132
     9c2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	84 e0       	ldi	r24, 0x04	; 4
     9ca:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_setChipSelect>
}
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     9d8:	0e 94 b8 04 	call	0x970	; 0x970 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9dc:	8e e0       	ldi	r24, 0x0E	; 14
     9de:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     9e2:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     9e4:	80 38       	cpi	r24, 0x80	; 128
     9e6:	69 f0       	breq	.+26     	; 0xa02 <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     9e8:	1f 92       	push	r1
     9ea:	8f 93       	push	r24
     9ec:	84 ef       	ldi	r24, 0xF4	; 244
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>
		return;
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	38 c0       	rjmp	.+112    	; 0xa72 <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     a02:	4c 2f       	mov	r20, r28
     a04:	4c 60       	ori	r20, 0x0C	; 12
     a06:	6f e0       	ldi	r22, 0x0F	; 15
     a08:	8e ee       	ldi	r24, 0xEE	; 238
     a0a:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     a0e:	41 e0       	ldi	r20, 0x01	; 1
     a10:	6b e2       	ldi	r22, 0x2B	; 43
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     a18:	40 e6       	ldi	r20, 0x60	; 96
     a1a:	60 e6       	ldi	r22, 0x60	; 96
     a1c:	80 e6       	ldi	r24, 0x60	; 96
     a1e:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_controller_bitModify>
     a22:	2f ef       	ldi	r18, 0xFF	; 255
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	21 50       	subi	r18, 0x01	; 1
     a2a:	80 40       	sbci	r24, 0x00	; 0
     a2c:	90 40       	sbci	r25, 0x00	; 0
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <CAN_controller_setMode+0x56>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <CAN_controller_setMode+0x60>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a34:	8e e0       	ldi	r24, 0x0E	; 14
     a36:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     a3a:	d8 2f       	mov	r29, r24
     a3c:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     a3e:	cd 17       	cp	r28, r29
     a40:	61 f0       	breq	.+24     	; 0xa5a <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     a42:	1f 92       	push	r1
     a44:	df 93       	push	r29
     a46:	8f e0       	ldi	r24, 0x0F	; 15
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     a5a:	1f 92       	push	r1
     a5c:	df 93       	push	r29
     a5e:	8f e2       	ldi	r24, 0x2F	; 47
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	9f 93       	push	r25
     a64:	8f 93       	push	r24
     a66:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     a78:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a82:	8b b7       	in	r24, 0x3b	; 59
     a84:	80 64       	ori	r24, 0x40	; 64
     a86:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a88:	85 b7       	in	r24, 0x35	; 53
     a8a:	82 60       	ori	r24, 0x02	; 2
     a8c:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a8e:	85 b7       	in	r24, 0x35	; 53
     a90:	8e 7f       	andi	r24, 0xFE	; 254
     a92:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a94:	81 b3       	in	r24, 0x11	; 17
     a96:	84 70       	andi	r24, 0x04	; 4
     a98:	81 bb       	out	0x11, r24	; 17
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	80 40       	sbci	r24, 0x00	; 0
     aa4:	90 40       	sbci	r25, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <CAN_controller_init+0x28>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <CAN_controller_init+0x32>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     aac:	8e e3       	ldi	r24, 0x3E	; 62
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     ab8:	8e e0       	ldi	r24, 0x0E	; 14
     aba:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     abe:	1f 92       	push	r1
     ac0:	8f 93       	push	r24
     ac2:	87 e5       	ldi	r24, 0x57	; 87
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>

}
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	08 95       	ret

00000adc <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     adc:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
     ae0:	ef e7       	ldi	r30, 0x7F	; 127
     ae2:	f3 e0       	ldi	r31, 0x03	; 3
     ae4:	a4 e8       	ldi	r26, 0x84	; 132
     ae6:	b3 e0       	ldi	r27, 0x03	; 3
     ae8:	84 e8       	ldi	r24, 0x84	; 132
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	11 92       	st	Z+, r1
     aee:	1d 92       	st	X+, r1
     af0:	e8 17       	cp	r30, r24
     af2:	f9 07       	cpc	r31, r25
     af4:	d9 f7       	brne	.-10     	; 0xaec <game_init+0x10>
     af6:	08 95       	ret

00000af8 <game_countdown>:
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	1f 92       	push	r1
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	4a e0       	ldi	r20, 0x0A	; 10
     b08:	be 01       	movw	r22, r28
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
     b16:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
     b1a:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
     b1e:	0b e6       	ldi	r16, 0x6B	; 107
     b20:	13 e0       	ldi	r17, 0x03	; 3
     b22:	f8 01       	movw	r30, r16
     b24:	80 81       	ld	r24, Z
     b26:	91 81       	ldd	r25, Z+1	; 0x01
     b28:	02 96       	adiw	r24, 0x02	; 2
     b2a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     b3e:	ff ef       	ldi	r31, 0xFF	; 255
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	8e e0       	ldi	r24, 0x0E	; 14
     b44:	f1 50       	subi	r31, 0x01	; 1
     b46:	20 40       	sbci	r18, 0x00	; 0
     b48:	80 40       	sbci	r24, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <game_countdown+0x4c>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <game_countdown+0x56>
     b4e:	00 00       	nop
     b50:	4a e0       	ldi	r20, 0x0A	; 10
     b52:	be 01       	movw	r22, r28
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
     b60:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
     b64:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
     b68:	f8 01       	movw	r30, r16
     b6a:	80 81       	ld	r24, Z
     b6c:	91 81       	ldd	r25, Z+1	; 0x01
     b6e:	02 96       	adiw	r24, 0x02	; 2
     b70:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     b84:	ff ef       	ldi	r31, 0xFF	; 255
     b86:	2f ef       	ldi	r18, 0xFF	; 255
     b88:	8e e0       	ldi	r24, 0x0E	; 14
     b8a:	f1 50       	subi	r31, 0x01	; 1
     b8c:	20 40       	sbci	r18, 0x00	; 0
     b8e:	80 40       	sbci	r24, 0x00	; 0
     b90:	e1 f7       	brne	.-8      	; 0xb8a <game_countdown+0x92>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <game_countdown+0x9c>
     b94:	00 00       	nop
     b96:	4a e0       	ldi	r20, 0x0A	; 10
     b98:	be 01       	movw	r22, r28
     b9a:	6f 5f       	subi	r22, 0xFF	; 255
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
     ba6:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
     baa:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
     bae:	f8 01       	movw	r30, r16
     bb0:	80 81       	ld	r24, Z
     bb2:	91 81       	ldd	r25, Z+1	; 0x01
     bb4:	02 96       	adiw	r24, 0x02	; 2
     bb6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     bca:	ff ef       	ldi	r31, 0xFF	; 255
     bcc:	2f ef       	ldi	r18, 0xFF	; 255
     bce:	8e e0       	ldi	r24, 0x0E	; 14
     bd0:	f1 50       	subi	r31, 0x01	; 1
     bd2:	20 40       	sbci	r18, 0x00	; 0
     bd4:	80 40       	sbci	r24, 0x00	; 0
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <game_countdown+0xd8>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <game_countdown+0xe2>
     bda:	00 00       	nop
     bdc:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
     be0:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
     be4:	f8 01       	movw	r30, r16
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	02 96       	adiw	r24, 0x02	; 2
     bec:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
     bf8:	82 e6       	ldi	r24, 0x62	; 98
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     c00:	ff ef       	ldi	r31, 0xFF	; 255
     c02:	2f ef       	ldi	r18, 0xFF	; 255
     c04:	8e e0       	ldi	r24, 0x0E	; 14
     c06:	f1 50       	subi	r31, 0x01	; 1
     c08:	20 40       	sbci	r18, 0x00	; 0
     c0a:	80 40       	sbci	r24, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <game_countdown+0x10e>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <game_countdown+0x118>
     c10:	00 00       	nop
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	08 95       	ret

00000c1e <game_initialCANMessage>:
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	2b 97       	sbiw	r28, 0x0b	; 11
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9a 87       	std	Y+10, r25	; 0x0a
     c38:	89 87       	std	Y+9, r24	; 0x09
     c3a:	1b 86       	std	Y+11, r1	; 0x0b
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	0e 94 3b 03 	call	0x676	; 0x676 <CAN_transmit_message>
     c44:	2b 96       	adiw	r28, 0x0b	; 11
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <game_newgame>:
     c56:	f8 94       	cli
     c58:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <game_countdown>
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <gameActive>
     c62:	e9 e8       	ldi	r30, 0x89	; 137
     c64:	f3 e0       	ldi	r31, 0x03	; 3
     c66:	8a e0       	ldi	r24, 0x0A	; 10
     c68:	80 83       	st	Z, r24
     c6a:	12 82       	std	Z+2, r1	; 0x02
     c6c:	83 e6       	ldi	r24, 0x63	; 99
     c6e:	81 83       	std	Z+1, r24	; 0x01
     c70:	0e 94 0f 06 	call	0xc1e	; 0xc1e <game_initialCANMessage>
     c74:	78 94       	sei
     c76:	08 95       	ret

00000c78 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     c78:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <flag>
     c7c:	88 23       	and	r24, r24
     c7e:	d9 f0       	breq	.+54     	; 0xcb6 <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     c80:	f8 94       	cli
		printf("Message received");
     c82:	85 e6       	ldi	r24, 0x65	; 101
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	9f 93       	push	r25
     c88:	8f 93       	push	r24
     c8a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <printf>
		flag=0;
     c8e:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <flag>
		CAN_receiveMessage(&received_message);
     c92:	83 e7       	ldi	r24, 0x73	; 115
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	0e 94 05 04 	call	0x80a	; 0x80a <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     c9a:	0e 94 32 03 	call	0x664	; 0x664 <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     c9e:	a3 e7       	ldi	r26, 0x73	; 115
     ca0:	b3 e0       	ldi	r27, 0x03	; 3
     ca2:	8c 91       	ld	r24, X
     ca4:	e9 e8       	ldi	r30, 0x89	; 137
     ca6:	f3 e0       	ldi	r31, 0x03	; 3
     ca8:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	8c 91       	ld	r24, X
     cae:	82 83       	std	Z+2, r24	; 0x02
		sei();
     cb0:	78 94       	sei
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	08 95       	ret

00000cb8 <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <game_updateOled+0xa>
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <game_updateOled+0xc>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     cca:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	oled_home();
     cce:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     cd2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <currentMenu>
     cd6:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <currentMenu+0x1>
     cda:	02 96       	adiw	r24, 0x02	; 2
     cdc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
	switch(gameID) {
     ce8:	11 30       	cpi	r17, 0x01	; 1
     cea:	19 f0       	breq	.+6      	; 0xcf2 <game_updateOled+0x3a>
     cec:	12 30       	cpi	r17, 0x02	; 2
     cee:	51 f1       	breq	.+84     	; 0xd44 <game_updateOled+0x8c>
     cf0:	3a c0       	rjmp	.+116    	; 0xd66 <game_updateOled+0xae>
		case 1:
			oled_print("Score: ");
     cf2:	86 e7       	ldi	r24, 0x76	; 118
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
			itoa(gameData.score,score_string,10);
     cfa:	09 e8       	ldi	r16, 0x89	; 137
     cfc:	13 e0       	ldi	r17, 0x03	; 3
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cfe:	f8 01       	movw	r30, r16
     d00:	80 81       	ld	r24, Z
     d02:	4a e0       	ldi	r20, 0x0A	; 10
     d04:	be 01       	movw	r22, r28
     d06:	6f 5f       	subi	r22, 0xFF	; 255
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
			oled_print(score_string);
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
			oled_gotoLine(5);
     d18:	85 e0       	ldi	r24, 0x05	; 5
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
			oled_print("Time: ");
     d20:	8e e7       	ldi	r24, 0x7E	; 126
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     d28:	f8 01       	movw	r30, r16
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	4a e0       	ldi	r20, 0x0A	; 10
     d2e:	be 01       	movw	r22, r28
     d30:	6d 5f       	subi	r22, 0xFD	; 253
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d3a:	ce 01       	movw	r24, r28
     d3c:	03 96       	adiw	r24, 0x03	; 3
     d3e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
			break;
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <game_updateOled+0xae>
		case 2:
			oled_print("Air time: ");
     d44:	85 e8       	ldi	r24, 0x85	; 133
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     d4c:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <gameData+0x2>
     d50:	4a e0       	ldi	r20, 0x0A	; 10
     d52:	be 01       	movw	r22, r28
     d54:	6d 5f       	subi	r22, 0xFD	; 253
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d5e:	ce 01       	movw	r24, r28
     d60:	03 96       	adiw	r24, 0x03	; 3
     d62:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
			break;

	}
	
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <game_sendStop>:

void game_sendStop() {
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	2b 97       	sbiw	r28, 0x0b	; 11
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9a 87       	std	Y+10, r25	; 0x0a
     d92:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     d94:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 3b 03 	call	0x676	; 0x676 <CAN_transmit_message>
}
     d9e:	2b 96       	adiw	r28, 0x0b	; 11
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <game_finished>:
void game_finished(uint8_t gameID) {
     db0:	cf 93       	push	r28
     db2:	c8 2f       	mov	r28, r24
	cli();
     db4:	f8 94       	cli
	game_sendStop();
     db6:	0e 94 bc 06 	call	0xd78	; 0xd78 <game_sendStop>
	oled_reset();
     dba:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	oled_home();
     dbe:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
	oled_gotoLine(3);
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
	oled_print("Game over");
     dca:	80 e9       	ldi	r24, 0x90	; 144
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
	oled_gotoLine(4);
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
	oled_print("Maybe HS?");
     dda:	8a e9       	ldi	r24, 0x9A	; 154
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	9c e2       	ldi	r25, 0x2C	; 44
     de8:	21 50       	subi	r18, 0x01	; 1
     dea:	80 40       	sbci	r24, 0x00	; 0
     dec:	90 40       	sbci	r25, 0x00	; 0
     dee:	e1 f7       	brne	.-8      	; 0xde8 <game_finished+0x38>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <game_finished+0x42>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <game_finished+0x44>
	_delay_ms(3000);
	gameActive=0;
     df4:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
	
	menu_init();
     df8:	0e 94 1f 0a 	call	0x143e	; 0x143e <menu_init>
	switch (gameID) {
     dfc:	c1 30       	cpi	r28, 0x01	; 1
     dfe:	51 f0       	breq	.+20     	; 0xe14 <game_finished+0x64>
     e00:	c2 30       	cpi	r28, 0x02	; 2
     e02:	09 f0       	breq	.+2      	; 0xe06 <game_finished+0x56>
     e04:	50 c0       	rjmp	.+160    	; 0xea6 <game_finished+0xf6>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e06:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <gameData+0x2>
     e0a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <highScores2>
     e0e:	83 17       	cp	r24, r19
     e10:	48 f5       	brcc	.+82     	; 0xe64 <game_finished+0xb4>
     e12:	33 c0       	rjmp	.+102    	; 0xe7a <game_finished+0xca>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e14:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <gameData>
     e18:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <highScores>
     e1c:	83 17       	cp	r24, r19
     e1e:	58 f0       	brcs	.+22     	; 0xe36 <game_finished+0x86>
     e20:	e0 e8       	ldi	r30, 0x80	; 128
     e22:	f3 e0       	ldi	r31, 0x03	; 3
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e28:	21 91       	ld	r18, Z+
     e2a:	23 17       	cp	r18, r19
     e2c:	b0 f4       	brcc	.+44     	; 0xe5a <game_finished+0xaa>
					for (int a = 4; a>i; a--) {
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	91 05       	cpc	r25, r1
     e32:	1c f0       	brlt	.+6      	; 0xe3a <game_finished+0x8a>
     e34:	0d c0       	rjmp	.+26     	; 0xe50 <game_finished+0xa0>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	e3 e8       	ldi	r30, 0x83	; 131
     e3c:	f3 e0       	ldi	r31, 0x03	; 3
     e3e:	44 e0       	ldi	r20, 0x04	; 4
     e40:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e42:	41 50       	subi	r20, 0x01	; 1
     e44:	51 09       	sbc	r21, r1
     e46:	22 91       	ld	r18, -Z
     e48:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e4a:	84 17       	cp	r24, r20
     e4c:	95 07       	cpc	r25, r21
     e4e:	cc f3       	brlt	.-14     	; 0xe42 <game_finished+0x92>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e50:	fc 01       	movw	r30, r24
     e52:	e1 58       	subi	r30, 0x81	; 129
     e54:	fc 4f       	sbci	r31, 0xFC	; 252
     e56:	30 83       	st	Z, r19
					break;
     e58:	26 c0       	rjmp	.+76     	; 0xea6 <game_finished+0xf6>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	85 30       	cpi	r24, 0x05	; 5
     e5e:	91 05       	cpc	r25, r1
     e60:	19 f7       	brne	.-58     	; 0xe28 <game_finished+0x78>
     e62:	21 c0       	rjmp	.+66     	; 0xea6 <game_finished+0xf6>
     e64:	e5 e8       	ldi	r30, 0x85	; 133
     e66:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     e6c:	21 91       	ld	r18, Z+
     e6e:	23 17       	cp	r18, r19
     e70:	b0 f4       	brcc	.+44     	; 0xe9e <game_finished+0xee>
					for (int a = 4; a>i; a--) {
     e72:	84 30       	cpi	r24, 0x04	; 4
     e74:	91 05       	cpc	r25, r1
     e76:	1c f0       	brlt	.+6      	; 0xe7e <game_finished+0xce>
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	e8 e8       	ldi	r30, 0x88	; 136
     e80:	f3 e0       	ldi	r31, 0x03	; 3
     e82:	44 e0       	ldi	r20, 0x04	; 4
     e84:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     e86:	41 50       	subi	r20, 0x01	; 1
     e88:	51 09       	sbc	r21, r1
     e8a:	22 91       	ld	r18, -Z
     e8c:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     e8e:	84 17       	cp	r24, r20
     e90:	95 07       	cpc	r25, r21
     e92:	cc f3       	brlt	.-14     	; 0xe86 <game_finished+0xd6>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     e94:	fc 01       	movw	r30, r24
     e96:	ec 57       	subi	r30, 0x7C	; 124
     e98:	fc 4f       	sbci	r31, 0xFC	; 252
     e9a:	30 83       	st	Z, r19
					break;
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <game_finished+0xf6>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	85 30       	cpi	r24, 0x05	; 5
     ea2:	91 05       	cpc	r25, r1
     ea4:	19 f7       	brne	.-58     	; 0xe6c <game_finished+0xbc>
			break;
		
	}
	
	
	sei();
     ea6:	78 94       	sei
}
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <game_play>:
void game_play(uint8_t gameID)
{
     eac:	cf 93       	push	r28
     eae:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     eb0:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <gameActive>
     eb4:	81 11       	cpse	r24, r1
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <game_play+0x10>
	{
		game_newgame();	
     eb8:	0e 94 2b 06 	call	0xc56	; 0xc56 <game_newgame>
	}
	if (buttons.right_button) {
     ebc:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <buttons+0x1>
     ec0:	88 23       	and	r24, r24
     ec2:	21 f0       	breq	.+8      	; 0xecc <game_play+0x20>
		gameActive = 0;
     ec4:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
		menu_init();
     ec8:	0e 94 1f 0a 	call	0x143e	; 0x143e <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     ecc:	0e 94 3d 04 	call	0x87a	; 0x87a <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     ed0:	0e 94 3c 06 	call	0xc78	; 0xc78 <game_recieveGameData>
	game_updateOled(gameID);
     ed4:	8c 2f       	mov	r24, r28
     ed6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <game_updateOled>
	switch (gameID) {
     eda:	c1 30       	cpi	r28, 0x01	; 1
     edc:	19 f0       	breq	.+6      	; 0xee4 <game_play+0x38>
     ede:	c2 30       	cpi	r28, 0x02	; 2
     ee0:	49 f0       	breq	.+18     	; 0xef4 <game_play+0x48>
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <game_play+0x56>
		case 1:
			if (gameData.playtime==10) {
     ee4:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <gameData+0x2>
     ee8:	8a 30       	cpi	r24, 0x0A	; 10
     eea:	59 f4       	brne	.+22     	; 0xf02 <game_play+0x56>
				game_finished(gameID);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <game_finished>
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <game_play+0x56>
			}
			break;
		case 2:
			if (gameData.score <10) {
     ef4:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <gameData>
     ef8:	8a 30       	cpi	r24, 0x0A	; 10
     efa:	18 f4       	brcc	.+6      	; 0xf02 <game_play+0x56>
				game_finished(gameID);
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <game_finished>
			}
			break;
	}
	
	
}
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f06:	bf 92       	push	r11
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	00 d0       	rcall	.+0      	; 0xf1a <game_displayHighscores+0x14>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	b8 2e       	mov	r11, r24
	oled_reset();
     f20:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	oled_home();
     f24:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f28:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <currentMenu>
     f2c:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <currentMenu+0x1>
     f30:	02 96       	adiw	r24, 0x02	; 2
     f32:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     f36:	0f 2e       	mov	r0, r31
     f38:	ff e7       	ldi	r31, 0x7F	; 127
     f3a:	cf 2e       	mov	r12, r31
     f3c:	f3 e0       	ldi	r31, 0x03	; 3
     f3e:	df 2e       	mov	r13, r31
     f40:	f0 2d       	mov	r31, r0
     f42:	0f 2e       	mov	r0, r31
     f44:	f4 e8       	ldi	r31, 0x84	; 132
     f46:	ef 2e       	mov	r14, r31
     f48:	f3 e0       	ldi	r31, 0x03	; 3
     f4a:	ff 2e       	mov	r15, r31
     f4c:	f0 2d       	mov	r31, r0
	
	for (int i=0;i<5;i++)
     f4e:	00 e0       	ldi	r16, 0x00	; 0
     f50:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_gotoLine(3+i);
     f52:	c8 01       	movw	r24, r16
     f54:	03 96       	adiw	r24, 0x03	; 3
     f56:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
		oled_print("Score ");
     f5a:	84 ea       	ldi	r24, 0xA4	; 164
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     f62:	0f 5f       	subi	r16, 0xFF	; 255
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	4a e0       	ldi	r20, 0x0A	; 10
     f68:	be 01       	movw	r22, r28
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	c8 01       	movw	r24, r16
     f70:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
		oled_print(num);
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
		oled_print(": ");
     f7c:	82 e8       	ldi	r24, 0x82	; 130
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
		switch (gameID) {
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	b8 16       	cp	r11, r24
     f88:	21 f0       	breq	.+8      	; 0xf92 <game_displayHighscores+0x8c>
     f8a:	e2 e0       	ldi	r30, 0x02	; 2
     f8c:	be 16       	cp	r11, r30
     f8e:	59 f0       	breq	.+22     	; 0xfa6 <game_displayHighscores+0xa0>
     f90:	13 c0       	rjmp	.+38     	; 0xfb8 <game_displayHighscores+0xb2>
     f92:	f6 01       	movw	r30, r12
     f94:	80 81       	ld	r24, Z
     f96:	4a e0       	ldi	r20, 0x0A	; 10
     f98:	be 01       	movw	r22, r28
     f9a:	6f 5f       	subi	r22, 0xFF	; 255
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <game_displayHighscores+0xb2>
     fa6:	f7 01       	movw	r30, r14
     fa8:	80 81       	ld	r24, Z
     faa:	4a e0       	ldi	r20, 0x0A	; 10
     fac:	be 01       	movw	r22, r28
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
     fc0:	ff ef       	ldi	r31, 0xFF	; 255
     fc2:	cf 1a       	sub	r12, r31
     fc4:	df 0a       	sbc	r13, r31
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	e8 1a       	sub	r14, r24
     fca:	f8 0a       	sbc	r15, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
     fcc:	05 30       	cpi	r16, 0x05	; 5
     fce:	11 05       	cpc	r17, r1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <game_displayHighscores+0xce>
     fd2:	bf cf       	rjmp	.-130    	; 0xf52 <game_displayHighscores+0x4c>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	bf 90       	pop	r11
     fea:	08 95       	ret

00000fec <music_playRick>:
	pwm_setFreq(0);
	sei();

}
*/
void music_playRick() {
     fec:	8f 92       	push	r8
     fee:	9f 92       	push	r9
     ff0:	af 92       	push	r10
     ff2:	bf 92       	push	r11
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
	
	//printf("You got rickrolled\n\n\r");
	cli();
    1004:	f8 94       	cli
	oled_home();
    1006:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
	oled_reset();
    100a:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
    100e:	0d ee       	ldi	r16, 0xED	; 237
    1010:	10 e0       	ldi	r17, 0x00	; 0
    1012:	0f 2e       	mov	r0, r31
    1014:	fe e9       	ldi	r31, 0x9E	; 158
    1016:	ef 2e       	mov	r14, r31
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	ff 2e       	mov	r15, r31
    101c:	f0 2d       	mov	r31, r0
    101e:	c6 e0       	ldi	r28, 0x06	; 6
    1020:	d1 e0       	ldi	r29, 0x01	; 1
    1022:	0f 2e       	mov	r0, r31
    1024:	f9 e2       	ldi	r31, 0x29	; 41
    1026:	cf 2e       	mov	r12, r31
    1028:	f2 e0       	ldi	r31, 0x02	; 2
    102a:	df 2e       	mov	r13, r31
    102c:	f0 2d       	mov	r31, r0
    102e:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1030:	0f 2e       	mov	r0, r31
    1032:	f4 e1       	ldi	r31, 0x14	; 20
    1034:	af 2e       	mov	r10, r31
    1036:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1038:	b1 10       	cpse	r11, r1
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <music_playRick+0x54>
			oled_reset();
    103c:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
    1040:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1042:	e8 81       	ld	r30, Y
    1044:	f9 81       	ldd	r31, Y+1	; 0x01
    1046:	80 81       	ld	r24, Z
    1048:	88 23       	and	r24, r24
    104a:	41 f0       	breq	.+16     	; 0x105c <music_playRick+0x70>
			oled_gotoLine(line);
    104c:	8b 2d       	mov	r24, r11
    104e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
			line++;
    1052:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    1054:	88 81       	ld	r24, Y
    1056:	99 81       	ldd	r25, Y+1	; 0x01
    1058:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    105c:	d4 01       	movw	r26, r8
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	22 96       	adiw	r28, 0x02	; 2
    1064:	01 90       	ld	r0, Z+
    1066:	00 20       	and	r0, r0
    1068:	e9 f7       	brne	.-6      	; 0x1064 <music_playRick+0x78>
    106a:	32 97       	sbiw	r30, 0x02	; 2
    106c:	80 81       	ld	r24, Z
    106e:	8e 32       	cpi	r24, 0x2E	; 46
    1070:	09 f4       	brne	.+2      	; 0x1074 <music_playRick+0x88>
			
			line = 0;
    1072:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    1074:	f8 01       	movw	r30, r16
    1076:	65 91       	lpm	r22, Z+
    1078:	74 91       	lpm	r23, Z
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 85 08 	call	0x110a	; 0x110a <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1082:	f7 01       	movw	r30, r14
    1084:	84 91       	lpm	r24, Z
    1086:	a8 9e       	mul	r10, r24
    1088:	c0 01       	movw	r24, r0
    108a:	11 24       	eor	r1, r1
    108c:	09 2e       	mov	r0, r25
    108e:	00 0c       	add	r0, r0
    1090:	aa 0b       	sbc	r26, r26
    1092:	bb 0b       	sbc	r27, r27
		while (duration--) {
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	a1 05       	cpc	r26, r1
    1098:	b1 05       	cpc	r27, r1
    109a:	51 f0       	breq	.+20     	; 0x10b0 <music_playRick+0xc4>
    109c:	ec ec       	ldi	r30, 0xCC	; 204
    109e:	f4 e0       	ldi	r31, 0x04	; 4
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <music_playRick+0xb4>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <music_playRick+0xba>
    10a6:	00 00       	nop
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	a1 09       	sbc	r26, r1
    10ac:	b1 09       	sbc	r27, r1
    10ae:	b1 f7       	brne	.-20     	; 0x109c <music_playRick+0xb0>
    10b0:	0c 5f       	subi	r16, 0xFC	; 252
    10b2:	1f 4f       	sbci	r17, 0xFF	; 255
    10b4:	ff ef       	ldi	r31, 0xFF	; 255
    10b6:	ef 1a       	sub	r14, r31
    10b8:	ff 0a       	sbc	r15, r31
	//printf("You got rickrolled\n\n\r");
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    10ba:	0c 15       	cp	r16, r12
    10bc:	1d 05       	cpc	r17, r13
    10be:	09 f0       	breq	.+2      	; 0x10c2 <music_playRick+0xd6>
    10c0:	bb cf       	rjmp	.-138    	; 0x1038 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	cb 01       	movw	r24, r22
    10c8:	0e 94 85 08 	call	0x110a	; 0x110a <pwm_setFreq>
	menu_init();
    10cc:	0e 94 1f 0a 	call	0x143e	; 0x143e <menu_init>

	sei();
    10d0:	78 94       	sei
	

}
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	af 90       	pop	r10
    10e6:	9f 90       	pop	r9
    10e8:	8f 90       	pop	r8
    10ea:	08 95       	ret

000010ec <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    10ec:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    10f2:	80 e8       	ldi	r24, 0x80	; 128
    10f4:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    10f6:	83 b7       	in	r24, 0x33	; 51
    10f8:	88 60       	ori	r24, 0x08	; 8
    10fa:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    10fc:	83 b7       	in	r24, 0x33	; 51
    10fe:	80 61       	ori	r24, 0x10	; 16
    1100:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    1102:	83 b7       	in	r24, 0x33	; 51
    1104:	88 7f       	andi	r24, 0xF8	; 248
    1106:	83 bf       	out	0x33, r24	; 51
    1108:	08 95       	ret

0000110a <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    if (freq == 0) {
    110e:	67 2b       	or	r22, r23
    1110:	68 2b       	or	r22, r24
    1112:	69 2b       	or	r22, r25
    1114:	21 f4       	brne	.+8      	; 0x111e <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    1116:	83 b7       	in	r24, 0x33	; 51
    1118:	88 7f       	andi	r24, 0xF8	; 248
    111a:	83 bf       	out	0x33, r24	; 51
        return;
    111c:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e8       	ldi	r23, 0x80	; 128
    1122:	85 e2       	ldi	r24, 0x25	; 37
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__udivmodsi4>
    112a:	da 01       	movw	r26, r20
    112c:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    112e:	21 30       	cpi	r18, 0x01	; 1
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	36 07       	cpc	r19, r22
    1134:	41 05       	cpc	r20, r1
    1136:	51 05       	cpc	r21, r1
    1138:	a8 f1       	brcs	.+106    	; 0x11a4 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    113a:	68 94       	set
    113c:	12 f8       	bld	r1, 2
    113e:	b6 95       	lsr	r27
    1140:	a7 95       	ror	r26
    1142:	97 95       	ror	r25
    1144:	87 95       	ror	r24
    1146:	16 94       	lsr	r1
    1148:	d1 f7       	brne	.-12     	; 0x113e <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	96 07       	cpc	r25, r22
    1150:	a1 05       	cpc	r26, r1
    1152:	b1 05       	cpc	r27, r1
    1154:	48 f1       	brcs	.+82     	; 0x11a8 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    1156:	da 01       	movw	r26, r20
    1158:	c9 01       	movw	r24, r18
    115a:	68 94       	set
    115c:	15 f8       	bld	r1, 5
    115e:	b6 95       	lsr	r27
    1160:	a7 95       	ror	r26
    1162:	97 95       	ror	r25
    1164:	87 95       	ror	r24
    1166:	16 94       	lsr	r1
    1168:	d1 f7       	brne	.-12     	; 0x115e <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	96 07       	cpc	r25, r22
    1170:	a1 05       	cpc	r26, r1
    1172:	b1 05       	cpc	r27, r1
    1174:	d8 f0       	brcs	.+54     	; 0x11ac <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    1176:	bb 27       	eor	r27, r27
    1178:	a5 2f       	mov	r26, r21
    117a:	94 2f       	mov	r25, r20
    117c:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	96 07       	cpc	r25, r22
    1184:	a1 05       	cpc	r26, r1
    1186:	b1 05       	cpc	r27, r1
    1188:	98 f0       	brcs	.+38     	; 0x11b0 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    118a:	da 01       	movw	r26, r20
    118c:	c9 01       	movw	r24, r18
    118e:	07 2e       	mov	r0, r23
    1190:	7a e0       	ldi	r23, 0x0A	; 10
    1192:	b6 95       	lsr	r27
    1194:	a7 95       	ror	r26
    1196:	97 95       	ror	r25
    1198:	87 95       	ror	r24
    119a:	7a 95       	dec	r23
    119c:	d1 f7       	brne	.-12     	; 0x1192 <pwm_setFreq+0x88>
    119e:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    11a0:	35 e0       	ldi	r19, 0x05	; 5
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    11a4:	31 e0       	ldi	r19, 0x01	; 1
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    11a8:	32 e0       	ldi	r19, 0x02	; 2
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    11ac:	33 e0       	ldi	r19, 0x03	; 3
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    11b0:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    11b2:	23 b7       	in	r18, 0x33	; 51
    11b4:	28 7f       	andi	r18, 0xF8	; 248
    11b6:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    11b8:	23 b7       	in	r18, 0x33	; 51
    11ba:	23 2b       	or	r18, r19
    11bc:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    11be:	81 50       	subi	r24, 0x01	; 1
    11c0:	81 bf       	out	0x31, r24	; 49
    11c2:	08 95       	ret

000011c4 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    11c4:	85 b7       	in	r24, 0x35	; 53
    11c6:	8f 7e       	andi	r24, 0xEF	; 239
    11c8:	85 bf       	out	0x35, r24	; 53
    11ca:	84 b7       	in	r24, 0x34	; 52
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	84 bf       	out	0x34, r24	; 52
    11d0:	86 b7       	in	r24, 0x36	; 54
    11d2:	8f 77       	andi	r24, 0x7F	; 127
    11d4:	86 bf       	out	0x36, r24	; 54
    11d6:	08 95       	ret

000011d8 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    11d8:	88 b1       	in	r24, 0x08	; 8
    11da:	88 68       	ori	r24, 0x88	; 136
    11dc:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    11de:	85 b7       	in	r24, 0x35	; 53
    11e0:	80 62       	ori	r24, 0x20	; 32
    11e2:	85 bf       	out	0x35, r24	; 53
    11e4:	88 95       	sleep
    11e6:	85 b7       	in	r24, 0x35	; 53
    11e8:	8f 7d       	andi	r24, 0xDF	; 223
    11ea:	85 bf       	out	0x35, r24	; 53
    11ec:	08 95       	ret

000011ee <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    11f4:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    11fe:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <joystickOffsetY>
    1202:	08 95       	ret

00001204 <joystick_readPosition>:
}
void joystick_readPosition() {
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1216:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    121e:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    1220:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <joystickOffsetX>
    1224:	c6 17       	cp	r28, r22
    1226:	80 f4       	brcc	.+32     	; 0x1248 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	2c 2f       	mov	r18, r28
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	26 1b       	sub	r18, r22
    1230:	37 0b       	sbc	r19, r23
    1232:	44 e6       	ldi	r20, 0x64	; 100
    1234:	42 9f       	mul	r20, r18
    1236:	c0 01       	movw	r24, r0
    1238:	43 9f       	mul	r20, r19
    123a:	90 0d       	add	r25, r0
    123c:	11 24       	eor	r1, r1
    123e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__divmodhi4>
    1242:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <joystick_pos>
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    1248:	46 2f       	mov	r20, r22
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	2c 2f       	mov	r18, r28
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	24 1b       	sub	r18, r20
    1252:	35 0b       	sbc	r19, r21
    1254:	64 e6       	ldi	r22, 0x64	; 100
    1256:	62 9f       	mul	r22, r18
    1258:	c0 01       	movw	r24, r0
    125a:	63 9f       	mul	r22, r19
    125c:	90 0d       	add	r25, r0
    125e:	11 24       	eor	r1, r1
    1260:	6f ef       	ldi	r22, 0xFF	; 255
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	64 1b       	sub	r22, r20
    1266:	75 0b       	sbc	r23, r21
    1268:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__divmodhi4>
    126c:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    1270:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <joystickOffsetY>
    1274:	e2 17       	cp	r30, r18
    1276:	88 f4       	brcc	.+34     	; 0x129a <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1278:	62 2f       	mov	r22, r18
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	4e 2f       	mov	r20, r30
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	46 1b       	sub	r20, r22
    1282:	57 0b       	sbc	r21, r23
    1284:	24 e6       	ldi	r18, 0x64	; 100
    1286:	24 9f       	mul	r18, r20
    1288:	c0 01       	movw	r24, r0
    128a:	25 9f       	mul	r18, r21
    128c:	90 0d       	add	r25, r0
    128e:	11 24       	eor	r1, r1
    1290:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__divmodhi4>
    1294:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos+0x1>
    1298:	13 c0       	rjmp	.+38     	; 0x12c0 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4e 2f       	mov	r20, r30
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	42 1b       	sub	r20, r18
    12a2:	53 0b       	sbc	r21, r19
    12a4:	64 e6       	ldi	r22, 0x64	; 100
    12a6:	64 9f       	mul	r22, r20
    12a8:	c0 01       	movw	r24, r0
    12aa:	65 9f       	mul	r22, r21
    12ac:	90 0d       	add	r25, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	6f ef       	ldi	r22, 0xFF	; 255
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	62 1b       	sub	r22, r18
    12b6:	73 0b       	sbc	r23, r19
    12b8:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__divmodhi4>
    12bc:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    12c0:	c7 e6       	ldi	r28, 0x67	; 103
    12c2:	d3 e0       	ldi	r29, 0x03	; 3
    12c4:	68 81       	ld	r22, Y
    12c6:	06 2e       	mov	r0, r22
    12c8:	00 0c       	add	r0, r0
    12ca:	77 0b       	sbc	r23, r23
    12cc:	88 0b       	sbc	r24, r24
    12ce:	99 0b       	sbc	r25, r25
    12d0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__floatsisf>
    12d4:	6b 01       	movw	r12, r22
    12d6:	7c 01       	movw	r14, r24
    12d8:	69 81       	ldd	r22, Y+1	; 0x01
    12da:	06 2e       	mov	r0, r22
    12dc:	00 0c       	add	r0, r0
    12de:	77 0b       	sbc	r23, r23
    12e0:	88 0b       	sbc	r24, r24
    12e2:	99 0b       	sbc	r25, r25
    12e4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__floatsisf>
    12e8:	a7 01       	movw	r20, r14
    12ea:	96 01       	movw	r18, r12
    12ec:	0e 94 99 0c 	call	0x1932	; 0x1932 <atan2>
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	44 eb       	ldi	r20, 0xB4	; 180
    12f6:	53 e4       	ldi	r21, 0x43	; 67
    12f8:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
    1308:	23 ec       	ldi	r18, 0xC3	; 195
    130a:	35 ef       	ldi	r19, 0xF5	; 245
    130c:	48 e4       	ldi	r20, 0x48	; 72
    130e:	50 e4       	ldi	r21, 0x40	; 64
    1310:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__divsf3>
    1314:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__fixsfsi>
    1318:	7b 83       	std	Y+3, r23	; 0x03
    131a:	6a 83       	std	Y+2, r22	; 0x02
}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	cf 90       	pop	r12
    1328:	08 95       	ret

0000132a <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    132a:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    132c:	80 81       	ld	r24, Z
    132e:	94 e0       	ldi	r25, 0x04	; 4
    1330:	98 0f       	add	r25, r24
    1332:	99 30       	cpi	r25, 0x09	; 9
    1334:	20 f4       	brcc	.+8      	; 0x133e <joystick_getDirection+0x14>
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	9c 5f       	subi	r25, 0xFC	; 252
    133a:	99 30       	cpi	r25, 0x09	; 9
    133c:	90 f0       	brcs	.+36     	; 0x1362 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    133e:	85 30       	cpi	r24, 0x05	; 5
    1340:	2c f0       	brlt	.+10     	; 0x134c <joystick_getDirection+0x22>
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	8f 5c       	subi	r24, 0xCF	; 207
    1346:	83 36       	cpi	r24, 0x63	; 99
    1348:	38 f4       	brcc	.+14     	; 0x1358 <joystick_getDirection+0x2e>
    134a:	0d c0       	rjmp	.+26     	; 0x1366 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    134c:	8c 3f       	cpi	r24, 0xFC	; 252
    134e:	24 f4       	brge	.+8      	; 0x1358 <joystick_getDirection+0x2e>
    1350:	81 81       	ldd	r24, Z+1	; 0x01
    1352:	8f 5c       	subi	r24, 0xCF	; 207
    1354:	83 36       	cpi	r24, 0x63	; 99
    1356:	48 f0       	brcs	.+18     	; 0x136a <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    1358:	81 81       	ldd	r24, Z+1	; 0x01
    135a:	8c 3f       	cpi	r24, 0xFC	; 252
    135c:	44 f0       	brlt	.+16     	; 0x136e <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    1362:	84 e0       	ldi	r24, 0x04	; 4
    1364:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    136e:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    1370:	08 95       	ret

00001372 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    1372:	0e 94 95 09 	call	0x132a	; 0x132a <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    1376:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <currentMenu+0x3>
    137a:	94 30       	cpi	r25, 0x04	; 4
    137c:	09 f0       	breq	.+2      	; 0x1380 <navigateMenu+0xe>
    137e:	5c c0       	rjmp	.+184    	; 0x1438 <navigateMenu+0xc6>
			switch (dir) {
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	e1 f1       	breq	.+120    	; 0x13fc <navigateMenu+0x8a>
    1384:	60 f1       	brcs	.+88     	; 0x13de <navigateMenu+0x6c>
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	c9 f0       	breq	.+50     	; 0x13bc <navigateMenu+0x4a>
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	09 f0       	breq	.+2      	; 0x1390 <navigateMenu+0x1e>
    138e:	54 c0       	rjmp	.+168    	; 0x1438 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    1390:	eb e6       	ldi	r30, 0x6B	; 107
    1392:	f3 e0       	ldi	r31, 0x03	; 3
    1394:	92 81       	ldd	r25, Z+2	; 0x02
    1396:	49 2f       	mov	r20, r25
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	01 90       	ld	r0, Z+
    139c:	f0 81       	ld	r31, Z
    139e:	e0 2d       	mov	r30, r0
    13a0:	20 a1       	ldd	r18, Z+32	; 0x20
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	21 50       	subi	r18, 0x01	; 1
    13a6:	31 09       	sbc	r19, r1
    13a8:	42 17       	cp	r20, r18
    13aa:	53 07       	cpc	r21, r19
    13ac:	24 f4       	brge	.+8      	; 0x13b6 <navigateMenu+0x44>
					currentMenu.childIndex++;
    13ae:	9f 5f       	subi	r25, 0xFF	; 255
    13b0:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <currentMenu+0x2>
    13b4:	41 c0       	rjmp	.+130    	; 0x1438 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    13b6:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <currentMenu+0x2>
    13ba:	3e c0       	rjmp	.+124    	; 0x1438 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    13bc:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <currentMenu+0x2>
    13c0:	99 23       	and	r25, r25
    13c2:	21 f0       	breq	.+8      	; 0x13cc <navigateMenu+0x5a>
					currentMenu.childIndex--;
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <currentMenu+0x2>
    13ca:	36 c0       	rjmp	.+108    	; 0x1438 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    13cc:	eb e6       	ldi	r30, 0x6B	; 107
    13ce:	f3 e0       	ldi	r31, 0x03	; 3
    13d0:	a0 81       	ld	r26, Z
    13d2:	b1 81       	ldd	r27, Z+1	; 0x01
    13d4:	90 96       	adiw	r26, 0x20	; 32
    13d6:	9c 91       	ld	r25, X
    13d8:	91 50       	subi	r25, 0x01	; 1
    13da:	92 83       	std	Z+2, r25	; 0x02
    13dc:	2d c0       	rjmp	.+90     	; 0x1438 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    13de:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <currentMenu>
    13e2:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <currentMenu+0x1>
    13e6:	22 89       	ldd	r18, Z+18	; 0x12
    13e8:	33 89       	ldd	r19, Z+19	; 0x13
    13ea:	21 15       	cp	r18, r1
    13ec:	31 05       	cpc	r19, r1
    13ee:	21 f1       	breq	.+72     	; 0x1438 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    13f0:	eb e6       	ldi	r30, 0x6B	; 107
    13f2:	f3 e0       	ldi	r31, 0x03	; 3
    13f4:	31 83       	std	Z+1, r19	; 0x01
    13f6:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    13f8:	12 82       	std	Z+2, r1	; 0x02
    13fa:	1e c0       	rjmp	.+60     	; 0x1438 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    13fc:	ab e6       	ldi	r26, 0x6B	; 107
    13fe:	b3 e0       	ldi	r27, 0x03	; 3
    1400:	2d 91       	ld	r18, X+
    1402:	3c 91       	ld	r19, X
    1404:	11 97       	sbiw	r26, 0x01	; 1
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	9c 91       	ld	r25, X
    140a:	e9 2f       	mov	r30, r25
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	3a 96       	adiw	r30, 0x0a	; 10
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	e2 0f       	add	r30, r18
    1416:	f3 1f       	adc	r31, r19
    1418:	01 90       	ld	r0, Z+
    141a:	f0 81       	ld	r31, Z
    141c:	e0 2d       	mov	r30, r0
    141e:	90 a1       	ldd	r25, Z+32	; 0x20
    1420:	91 11       	cpse	r25, r1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <navigateMenu+0xb8>
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	99 23       	and	r25, r25
    1428:	39 f0       	breq	.+14     	; 0x1438 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    142a:	ab e6       	ldi	r26, 0x6B	; 107
    142c:	b3 e0       	ldi	r27, 0x03	; 3
    142e:	11 96       	adiw	r26, 0x01	; 1
    1430:	fc 93       	st	X, r31
    1432:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    1434:	12 96       	adiw	r26, 0x02	; 2
    1436:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    1438:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <currentMenu+0x3>
    143c:	08 95       	ret

0000143e <menu_init>:



MenuNode nodes[8];

void menu_init() {
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    1446:	8a e0       	ldi	r24, 0x0A	; 10
    1448:	ec e1       	ldi	r30, 0x1C	; 28
    144a:	f3 e0       	ldi	r31, 0x03	; 3
    144c:	a0 e9       	ldi	r26, 0x90	; 144
    144e:	b3 e0       	ldi	r27, 0x03	; 3
    1450:	01 90       	ld	r0, Z+
    1452:	0d 92       	st	X+, r0
    1454:	8a 95       	dec	r24
    1456:	e1 f7       	brne	.-8      	; 0x1450 <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    1458:	8a e0       	ldi	r24, 0x0A	; 10
    145a:	e6 e2       	ldi	r30, 0x26	; 38
    145c:	f3 e0       	ldi	r31, 0x03	; 3
    145e:	a1 eb       	ldi	r26, 0xB1	; 177
    1460:	b3 e0       	ldi	r27, 0x03	; 3
    1462:	01 90       	ld	r0, Z+
    1464:	0d 92       	st	X+, r0
    1466:	8a 95       	dec	r24
    1468:	e1 f7       	brne	.-8      	; 0x1462 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    146a:	8c e0       	ldi	r24, 0x0C	; 12
    146c:	e0 e3       	ldi	r30, 0x30	; 48
    146e:	f3 e0       	ldi	r31, 0x03	; 3
    1470:	a2 ed       	ldi	r26, 0xD2	; 210
    1472:	b3 e0       	ldi	r27, 0x03	; 3
    1474:	01 90       	ld	r0, Z+
    1476:	0d 92       	st	X+, r0
    1478:	8a 95       	dec	r24
    147a:	e1 f7       	brne	.-8      	; 0x1474 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    147c:	86 e0       	ldi	r24, 0x06	; 6
    147e:	ec e3       	ldi	r30, 0x3C	; 60
    1480:	f3 e0       	ldi	r31, 0x03	; 3
    1482:	a3 ef       	ldi	r26, 0xF3	; 243
    1484:	b3 e0       	ldi	r27, 0x03	; 3
    1486:	01 90       	ld	r0, Z+
    1488:	0d 92       	st	X+, r0
    148a:	8a 95       	dec	r24
    148c:	e1 f7       	brne	.-8      	; 0x1486 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    148e:	87 e0       	ldi	r24, 0x07	; 7
    1490:	e2 e4       	ldi	r30, 0x42	; 66
    1492:	f3 e0       	ldi	r31, 0x03	; 3
    1494:	a4 e1       	ldi	r26, 0x14	; 20
    1496:	b4 e0       	ldi	r27, 0x04	; 4
    1498:	01 90       	ld	r0, Z+
    149a:	0d 92       	st	X+, r0
    149c:	8a 95       	dec	r24
    149e:	e1 f7       	brne	.-8      	; 0x1498 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    14a0:	87 e0       	ldi	r24, 0x07	; 7
    14a2:	e9 e4       	ldi	r30, 0x49	; 73
    14a4:	f3 e0       	ldi	r31, 0x03	; 3
    14a6:	a5 e3       	ldi	r26, 0x35	; 53
    14a8:	b4 e0       	ldi	r27, 0x04	; 4
    14aa:	01 90       	ld	r0, Z+
    14ac:	0d 92       	st	X+, r0
    14ae:	8a 95       	dec	r24
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    14b2:	8a e0       	ldi	r24, 0x0A	; 10
    14b4:	e0 e5       	ldi	r30, 0x50	; 80
    14b6:	f3 e0       	ldi	r31, 0x03	; 3
    14b8:	a6 e5       	ldi	r26, 0x56	; 86
    14ba:	b4 e0       	ldi	r27, 0x04	; 4
    14bc:	01 90       	ld	r0, Z+
    14be:	0d 92       	st	X+, r0
    14c0:	8a 95       	dec	r24
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    14c4:	8a e0       	ldi	r24, 0x0A	; 10
    14c6:	ea e5       	ldi	r30, 0x5A	; 90
    14c8:	f3 e0       	ldi	r31, 0x03	; 3
    14ca:	a7 e7       	ldi	r26, 0x77	; 119
    14cc:	b4 e0       	ldi	r27, 0x04	; 4
    14ce:	01 90       	ld	r0, Z+
    14d0:	0d 92       	st	X+, r0
    14d2:	8a 95       	dec	r24
    14d4:	e1 f7       	brne	.-8      	; 0x14ce <menu_init+0x90>
    14d6:	6e e8       	ldi	r22, 0x8E	; 142
    14d8:	73 e0       	ldi	r23, 0x03	; 3
    14da:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    14e0:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    14e2:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	14 f0       	brlt	.+4      	; 0x14ee <menu_init+0xb0>
			nodes[i].isAction=1;
    14ea:	21 83       	std	Z+1, r18	; 0x01
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    14ee:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	b1 96       	adiw	r30, 0x21	; 33
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	91 05       	cpc	r25, r1
    14f8:	a1 f7       	brne	.-24     	; 0x14e2 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    14fa:	ee e8       	ldi	r30, 0x8E	; 142
    14fc:	f3 e0       	ldi	r31, 0x03	; 3
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <nodes+0x41>
	nodes[2].numChildren = 2;
    1508:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <nodes+0x62>
	nodes[3].numChildren = 0;
    150c:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <nodes+0x83>
	nodes[4].numChildren = 0;
    1510:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <nodes+0xa4>
	nodes[5].numChildren = 0;
    1514:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <nodes+0xc5>
	nodes[6].numChildren = 0;
    1518:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <nodes+0xe6>
	nodes[7].numChildren = 0;
    151c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    1520:	13 8a       	std	Z+19, r1	; 0x13
    1522:	12 8a       	std	Z+18, r1	; 0x12
    1524:	06 e9       	ldi	r16, 0x96	; 150
    1526:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    1528:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    152a:	51 e2       	ldi	r21, 0x21	; 33
    152c:	18 c0       	rjmp	.+48     	; 0x155e <menu_init+0x120>
    152e:	54 9f       	mul	r21, r20
    1530:	f0 01       	movw	r30, r0
    1532:	11 24       	eor	r1, r1
    1534:	e2 57       	subi	r30, 0x72	; 114
    1536:	fc 4f       	sbci	r31, 0xFC	; 252
    1538:	e9 93       	st	Y+, r30
    153a:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    153c:	b3 8b       	std	Z+19, r27	; 0x13
    153e:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    1540:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	90 96       	adiw	r26, 0x20	; 32
    1548:	8c 91       	ld	r24, X
    154a:	90 97       	sbiw	r26, 0x20	; 32
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	28 17       	cp	r18, r24
    1550:	39 07       	cpc	r19, r25
    1552:	6c f3       	brlt	.-38     	; 0x152e <menu_init+0xf0>
    1554:	6f 5d       	subi	r22, 0xDF	; 223
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    1558:	60 17       	cp	r22, r16
    155a:	71 07       	cpc	r23, r17
    155c:	59 f0       	breq	.+22     	; 0x1574 <menu_init+0x136>
    155e:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1560:	90 96       	adiw	r26, 0x20	; 32
    1562:	8c 91       	ld	r24, X
    1564:	90 97       	sbiw	r26, 0x20	; 32
    1566:	88 23       	and	r24, r24
    1568:	a9 f3       	breq	.-22     	; 0x1554 <menu_init+0x116>
    156a:	eb 01       	movw	r28, r22
    156c:	64 96       	adiw	r28, 0x14	; 20
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	dd cf       	rjmp	.-70     	; 0x152e <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    1574:	87 e6       	ldi	r24, 0x67	; 103
    1576:	93 e0       	ldi	r25, 0x03	; 3
    1578:	0e 94 b9 09 	call	0x1372	; 0x1372 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    157c:	eb e6       	ldi	r30, 0x6B	; 107
    157e:	f3 e0       	ldi	r31, 0x03	; 3
    1580:	8e e8       	ldi	r24, 0x8E	; 142
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1588:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	08 95       	ret

00001598 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
	oled_reset();
    15a0:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	oled_home();
    15a4:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    15a8:	cb e6       	ldi	r28, 0x6B	; 107
    15aa:	d3 e0       	ldi	r29, 0x03	; 3
    15ac:	88 81       	ld	r24, Y
    15ae:	99 81       	ldd	r25, Y+1	; 0x01
    15b0:	02 96       	adiw	r24, 0x02	; 2
    15b2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    15b6:	e8 81       	ld	r30, Y
    15b8:	f9 81       	ldd	r31, Y+1	; 0x01
    15ba:	80 a1       	ldd	r24, Z+32	; 0x20
    15bc:	88 23       	and	r24, r24
    15be:	39 f1       	breq	.+78     	; 0x160e <menu_printCurrentMenu+0x76>
    15c0:	c0 e0       	ldi	r28, 0x00	; 0
    15c2:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    15c4:	0b e6       	ldi	r16, 0x6B	; 107
    15c6:	13 e0       	ldi	r17, 0x03	; 3
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    15c8:	ce 01       	movw	r24, r28
    15ca:	02 96       	adiw	r24, 0x02	; 2
    15cc:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    15d0:	d8 01       	movw	r26, r16
    15d2:	8d 91       	ld	r24, X+
    15d4:	9c 91       	ld	r25, X
    15d6:	fe 01       	movw	r30, r28
    15d8:	3a 96       	adiw	r30, 0x0a	; 10
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	e8 0f       	add	r30, r24
    15e0:	f9 1f       	adc	r31, r25
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	02 96       	adiw	r24, 0x02	; 2
    15e8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print>
		if (currentMenu.childIndex == i) {
    15ec:	f8 01       	movw	r30, r16
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	8c 17       	cp	r24, r28
    15f4:	9d 07       	cpc	r25, r29
    15f6:	11 f4       	brne	.+4      	; 0x15fc <menu_printCurrentMenu+0x64>
			oled_print_arrow();
    15f8:	0e 94 2e 0b 	call	0x165c	; 0x165c <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    15fc:	21 96       	adiw	r28, 0x01	; 1
    15fe:	d8 01       	movw	r26, r16
    1600:	ed 91       	ld	r30, X+
    1602:	fc 91       	ld	r31, X
    1604:	80 a1       	ldd	r24, Z+32	; 0x20
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	c8 17       	cp	r28, r24
    160a:	d9 07       	cpc	r29, r25
    160c:	ec f2       	brlt	.-70     	; 0x15c8 <menu_printCurrentMenu+0x30>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    1618:	80 55       	subi	r24, 0x50	; 80
    161a:	e0 e0       	ldi	r30, 0x00	; 0
    161c:	f0 e1       	ldi	r31, 0x10	; 16
    161e:	80 83       	st	Z, r24
    1620:	86 2f       	mov	r24, r22
    1622:	8f 70       	andi	r24, 0x0F	; 15
    1624:	80 83       	st	Z, r24
    1626:	62 95       	swap	r22
    1628:	6f 70       	andi	r22, 0x0F	; 15
    162a:	60 61       	ori	r22, 0x10	; 16
    162c:	60 83       	st	Z, r22
    162e:	08 95       	ret

00001630 <oled_reset>:
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	10 e0       	ldi	r17, 0x00	; 0
    1638:	c0 e0       	ldi	r28, 0x00	; 0
    163a:	d2 e1       	ldi	r29, 0x12	; 18
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	81 2f       	mov	r24, r17
    1640:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_pos>
    1644:	80 e8       	ldi	r24, 0x80	; 128
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	18 82       	st	Y, r1
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	e9 f7       	brne	.-6      	; 0x1648 <oled_reset+0x18>
    164e:	1f 5f       	subi	r17, 0xFF	; 255
    1650:	18 30       	cpi	r17, 0x08	; 8
    1652:	a1 f7       	brne	.-24     	; 0x163c <oled_reset+0xc>
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	08 95       	ret

0000165c <oled_print_arrow>:
    165c:	e0 e0       	ldi	r30, 0x00	; 0
    165e:	f2 e1       	ldi	r31, 0x12	; 18
    1660:	88 e1       	ldi	r24, 0x18	; 24
    1662:	80 83       	st	Z, r24
    1664:	9c e3       	ldi	r25, 0x3C	; 60
    1666:	90 83       	st	Z, r25
    1668:	9e e7       	ldi	r25, 0x7E	; 126
    166a:	90 83       	st	Z, r25
    166c:	80 83       	st	Z, r24
    166e:	80 83       	st	Z, r24
    1670:	08 95       	ret

00001672 <oled_home>:
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_pos>
    167a:	08 95       	ret

0000167c <oled_init>:
    167c:	e0 e0       	ldi	r30, 0x00	; 0
    167e:	f0 e1       	ldi	r31, 0x10	; 16
    1680:	8e ea       	ldi	r24, 0xAE	; 174
    1682:	80 83       	st	Z, r24
    1684:	81 ea       	ldi	r24, 0xA1	; 161
    1686:	80 83       	st	Z, r24
    1688:	8a ed       	ldi	r24, 0xDA	; 218
    168a:	80 83       	st	Z, r24
    168c:	82 e1       	ldi	r24, 0x12	; 18
    168e:	80 83       	st	Z, r24
    1690:	88 ec       	ldi	r24, 0xC8	; 200
    1692:	80 83       	st	Z, r24
    1694:	88 ea       	ldi	r24, 0xA8	; 168
    1696:	80 83       	st	Z, r24
    1698:	8f e3       	ldi	r24, 0x3F	; 63
    169a:	80 83       	st	Z, r24
    169c:	85 ed       	ldi	r24, 0xD5	; 213
    169e:	80 83       	st	Z, r24
    16a0:	80 e8       	ldi	r24, 0x80	; 128
    16a2:	80 83       	st	Z, r24
    16a4:	81 e8       	ldi	r24, 0x81	; 129
    16a6:	80 83       	st	Z, r24
    16a8:	80 e5       	ldi	r24, 0x50	; 80
    16aa:	80 83       	st	Z, r24
    16ac:	89 ed       	ldi	r24, 0xD9	; 217
    16ae:	80 83       	st	Z, r24
    16b0:	81 e2       	ldi	r24, 0x21	; 33
    16b2:	80 83       	st	Z, r24
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	80 83       	st	Z, r24
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	80 83       	st	Z, r24
    16bc:	8b ed       	ldi	r24, 0xDB	; 219
    16be:	80 83       	st	Z, r24
    16c0:	80 e3       	ldi	r24, 0x30	; 48
    16c2:	80 83       	st	Z, r24
    16c4:	8d ea       	ldi	r24, 0xAD	; 173
    16c6:	80 83       	st	Z, r24
    16c8:	10 82       	st	Z, r1
    16ca:	84 ea       	ldi	r24, 0xA4	; 164
    16cc:	80 83       	st	Z, r24
    16ce:	86 ea       	ldi	r24, 0xA6	; 166
    16d0:	80 83       	st	Z, r24
    16d2:	8f ea       	ldi	r24, 0xAF	; 175
    16d4:	80 83       	st	Z, r24
    16d6:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
    16da:	0e 94 39 0b 	call	0x1672	; 0x1672 <oled_home>
    16de:	08 95       	ret

000016e0 <oled_gotoLine>:
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_pos>
    16e6:	08 95       	ret

000016e8 <oled_print>:

void oled_print(char* character){
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	dc 01       	movw	r26, r24
	while (*character != '\0')
    16ee:	8c 91       	ld	r24, X
    16f0:	81 11       	cpse	r24, r1
    16f2:	1a c0       	rjmp	.+52     	; 0x1728 <oled_print+0x40>
    16f4:	1e c0       	rjmp	.+60     	; 0x1732 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    16f6:	ec 91       	ld	r30, X
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	b0 97       	sbiw	r30, 0x20	; 32
    16fc:	ee 0f       	add	r30, r30
    16fe:	ff 1f       	adc	r31, r31
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	e2 0f       	add	r30, r18
    170a:	f3 1f       	adc	r31, r19
    170c:	e7 5d       	subi	r30, 0xD7	; 215
    170e:	fd 4f       	sbci	r31, 0xFD	; 253
    1710:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1712:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    1714:	2f 5f       	subi	r18, 0xFF	; 255
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	28 30       	cpi	r18, 0x08	; 8
    171a:	31 05       	cpc	r19, r1
    171c:	61 f7       	brne	.-40     	; 0x16f6 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    171e:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    1720:	8c 91       	ld	r24, X
    1722:	81 11       	cpse	r24, r1
    1724:	03 c0       	rjmp	.+6      	; 0x172c <oled_print+0x44>
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1728:	c0 e0       	ldi	r28, 0x00	; 0
    172a:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	e2 cf       	rjmp	.-60     	; 0x16f6 <oled_print+0xe>
		}
		character++;
	}
	
	
}
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "game.h"

	void setupInit(void){
	cli();
    1738:	f8 94       	cli
	xmem_init();
    173a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <xmem_init>
	USART_init(MYUBRR);
    173e:	8f e1       	ldi	r24, 0x1F	; 31
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <USART_init>
	adcInit();
    1746:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
	joystickInit();
    174a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <joystickInit>
	touchButton_init();
    174e:	0e 94 41 0c 	call	0x1882	; 0x1882 <touchButton_init>
	oled_init();
    1752:	0e 94 3e 0b 	call	0x167c	; 0x167c <oled_init>
	timer_init();
    1756:	0e 94 33 0c 	call	0x1866	; 0x1866 <timer_init>
	sleep_init();
    175a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <sleep_init>
	menu_init();
    175e:	0e 94 1f 0a 	call	0x143e	; 0x143e <menu_init>
	CAN_controller_init();
    1762:	0e 94 3c 05 	call	0xa78	; 0xa78 <CAN_controller_init>
	pwm_init();
    1766:	0e 94 76 08 	call	0x10ec	; 0x10ec <pwm_init>
	game_init();
    176a:	0e 94 6e 05 	call	0xadc	; 0xadc <game_init>
	sei();
    176e:	78 94       	sei
    1770:	08 95       	ret

00001772 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    177c:	c1 e7       	ldi	r28, 0x71	; 113
    177e:	d3 e0       	ldi	r29, 0x03	; 3
    1780:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1788:	89 83       	std	Y+1, r24	; 0x01
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    1790:	87 b3       	in	r24, 0x17	; 23
    1792:	80 6a       	ori	r24, 0xA0	; 160
    1794:	87 bb       	out	0x17, r24	; 23
    1796:	bc 9a       	sbi	0x17, 4	; 23
    1798:	8d b1       	in	r24, 0x0d	; 13
    179a:	81 65       	ori	r24, 0x51	; 81
    179c:	8d b9       	out	0x0d, r24	; 13
    179e:	c4 9a       	sbi	0x18, 4	; 24
    17a0:	08 95       	ret

000017a2 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    17a2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    17a4:	77 9b       	sbis	0x0e, 7	; 14
    17a6:	fe cf       	rjmp	.-4      	; 0x17a4 <SPI_masterWrite+0x2>

}
    17a8:	08 95       	ret

000017aa <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    17aa:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    17ac:	77 9b       	sbis	0x0e, 7	; 14
    17ae:	fe cf       	rjmp	.-4      	; 0x17ac <SPI_masterRead+0x2>
	return SPDR;
    17b0:	8f b1       	in	r24, 0x0f	; 15
}
    17b2:	08 95       	ret

000017b4 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    17b4:	66 23       	and	r22, r22
    17b6:	69 f0       	breq	.+26     	; 0x17d2 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    17b8:	48 b3       	in	r20, 0x18	; 24
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	b9 01       	movw	r22, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <SPI_setChipSelect+0x12>
    17c2:	66 0f       	add	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <SPI_setChipSelect+0xe>
    17ca:	cb 01       	movw	r24, r22
    17cc:	84 2b       	or	r24, r20
    17ce:	88 bb       	out	0x18, r24	; 24
    17d0:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    17d2:	48 b3       	in	r20, 0x18	; 24
    17d4:	21 e0       	ldi	r18, 0x01	; 1
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	b9 01       	movw	r22, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <SPI_setChipSelect+0x2c>
    17dc:	66 0f       	add	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	8a 95       	dec	r24
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <SPI_setChipSelect+0x28>
    17e4:	cb 01       	movw	r24, r22
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	88 bb       	out	0x18, r24	; 24
    17ec:	08 95       	ret

000017ee <__vector_14>:
#include "touchButton.h"
#include "menu.h"
#include "game.h"


ISR (TIMER1_COMPB_vect) {
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
	cli();
    1810:	f8 94       	cli
	TCNT1 = 0x00;
    1812:	1d bc       	out	0x2d, r1	; 45
    1814:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    1816:	87 e6       	ldi	r24, 0x67	; 103
    1818:	93 e0       	ldi	r25, 0x03	; 3
    181a:	0e 94 02 09 	call	0x1204	; 0x1204 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    181e:	81 e7       	ldi	r24, 0x71	; 113
    1820:	93 e0       	ldi	r25, 0x03	; 3
    1822:	0e 94 b9 0b 	call	0x1772	; 0x1772 <slider_readPosition>
	touchButton_readButtons(&buttons);
    1826:	8f e6       	ldi	r24, 0x6F	; 111
    1828:	93 e0       	ldi	r25, 0x03	; 3
    182a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <touchButton_readButtons>
	if(gameActive==0){
    182e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <gameActive>
    1832:	81 11       	cpse	r24, r1
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <__vector_14+0x54>
		navigateMenu(&joystick_pos);
    1836:	87 e6       	ldi	r24, 0x67	; 103
    1838:	93 e0       	ldi	r25, 0x03	; 3
    183a:	0e 94 b9 09 	call	0x1372	; 0x1372 <navigateMenu>
		menu_printCurrentMenu();
    183e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <menu_printCurrentMenu>
	}
	else{
		//game_updateOled();
	}
	sei();
    1842:	78 94       	sei
}
    1844:	ff 91       	pop	r31
    1846:	ef 91       	pop	r30
    1848:	bf 91       	pop	r27
    184a:	af 91       	pop	r26
    184c:	9f 91       	pop	r25
    184e:	8f 91       	pop	r24
    1850:	7f 91       	pop	r23
    1852:	6f 91       	pop	r22
    1854:	5f 91       	pop	r21
    1856:	4f 91       	pop	r20
    1858:	3f 91       	pop	r19
    185a:	2f 91       	pop	r18
    185c:	0f 90       	pop	r0
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	0f 90       	pop	r0
    1862:	1f 90       	pop	r1
    1864:	18 95       	reti

00001866 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1866:	89 b7       	in	r24, 0x39	; 57
    1868:	80 62       	ori	r24, 0x20	; 32
    186a:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    186c:	1d bc       	out	0x2d, r1	; 45
    186e:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1870:	80 e3       	ldi	r24, 0x30	; 48
    1872:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1874:	85 e0       	ldi	r24, 0x05	; 5
    1876:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1878:	80 ee       	ldi	r24, 0xE0	; 224
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	99 bd       	out	0x29, r25	; 41
    187e:	88 bd       	out	0x28, r24	; 40
    1880:	08 95       	ret

00001882 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    1882:	36 b3       	in	r19, 0x16	; 22
    1884:	26 b3       	in	r18, 0x16	; 22
    1886:	47 b3       	in	r20, 0x17	; 23
    1888:	32 70       	andi	r19, 0x02	; 2
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	bc 01       	movw	r22, r24
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <touchButton_init+0x14>
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	3a 95       	dec	r19
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <touchButton_init+0x10>
    189a:	24 70       	andi	r18, 0x04	; 4
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <touchButton_init+0x20>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	2a 95       	dec	r18
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <touchButton_init+0x1c>
    18a6:	86 2b       	or	r24, r22
    18a8:	97 2b       	or	r25, r23
    18aa:	80 95       	com	r24
    18ac:	90 95       	com	r25
    18ae:	84 23       	and	r24, r20
    18b0:	87 bb       	out	0x17, r24	; 23
    18b2:	08 95       	ret

000018b4 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    18b4:	86 b3       	in	r24, 0x16	; 22
    18b6:	ef e6       	ldi	r30, 0x6F	; 111
    18b8:	f3 e0       	ldi	r31, 0x03	; 3
    18ba:	86 95       	lsr	r24
    18bc:	81 70       	andi	r24, 0x01	; 1
    18be:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    18c0:	86 b3       	in	r24, 0x16	; 22
    18c2:	82 fb       	bst	r24, 2
    18c4:	88 27       	eor	r24, r24
    18c6:	80 f9       	bld	r24, 0
    18c8:	81 83       	std	Z+1, r24	; 0x01
    18ca:	08 95       	ret

000018cc <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    18cc:	5d 9b       	sbis	0x0b, 5	; 11
    18ce:	fe cf       	rjmp	.-4      	; 0x18cc <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    18d0:	8c b9       	out	0x0c, r24	; 12
    18d2:	08 95       	ret

000018d4 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    18d4:	5f 9b       	sbis	0x0b, 7	; 11
    18d6:	fe cf       	rjmp	.-4      	; 0x18d4 <USART_receiveChar>
		;
	
	return UDR0;
    18d8:	8c b1       	in	r24, 0x0c	; 12
    18da:	08 95       	ret

000018dc <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    18dc:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    18de:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    18e0:	88 e1       	ldi	r24, 0x18	; 24
    18e2:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    18e4:	8e e8       	ldi	r24, 0x8E	; 142
    18e6:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    18e8:	6a e6       	ldi	r22, 0x6A	; 106
    18ea:	7c e0       	ldi	r23, 0x0C	; 12
    18ec:	86 e6       	ldi	r24, 0x66	; 102
    18ee:	9c e0       	ldi	r25, 0x0C	; 12
    18f0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <fdevopen>
    18f4:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <uart+0x1>
    18f8:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <uart>
    18fc:	08 95       	ret

000018fe <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    18fe:	85 b7       	in	r24, 0x35	; 53
    1900:	80 68       	ori	r24, 0x80	; 128
    1902:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1904:	80 b7       	in	r24, 0x30	; 48
    1906:	88 60       	ori	r24, 0x08	; 8
    1908:	80 bf       	out	0x30, r24	; 48
    190a:	08 95       	ret
    190c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fp_pscA>
    1910:	60 f0       	brcs	.+24     	; 0x192a <xmem_init+0x2c>
    1912:	80 e8       	ldi	r24, 0x80	; 128
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	09 f4       	brne	.+2      	; 0x191a <xmem_init+0x1c>
    1918:	9e ef       	ldi	r25, 0xFE	; 254
    191a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__fp_pscB>
    191e:	28 f0       	brcs	.+10     	; 0x192a <xmem_init+0x2c>
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	51 e0       	ldi	r21, 0x01	; 1
    1924:	71 f4       	brne	.+28     	; 0x1942 <atan2+0x10>
    1926:	5e ef       	ldi	r21, 0xFE	; 254
    1928:	0c c0       	rjmp	.+24     	; 0x1942 <atan2+0x10>
    192a:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__fp_nan>
    192e:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_zero>

00001932 <atan2>:
    1932:	e9 2f       	mov	r30, r25
    1934:	e0 78       	andi	r30, 0x80	; 128
    1936:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__fp_split3>
    193a:	40 f3       	brcs	.-48     	; 0x190c <xmem_init+0xe>
    193c:	09 2e       	mov	r0, r25
    193e:	05 2a       	or	r0, r21
    1940:	b1 f3       	breq	.-20     	; 0x192e <xmem_init+0x30>
    1942:	26 17       	cp	r18, r22
    1944:	37 07       	cpc	r19, r23
    1946:	48 07       	cpc	r20, r24
    1948:	59 07       	cpc	r21, r25
    194a:	38 f0       	brcs	.+14     	; 0x195a <atan2+0x28>
    194c:	0e 2e       	mov	r0, r30
    194e:	07 f8       	bld	r0, 7
    1950:	e0 25       	eor	r30, r0
    1952:	69 f0       	breq	.+26     	; 0x196e <atan2+0x3c>
    1954:	e0 25       	eor	r30, r0
    1956:	e0 64       	ori	r30, 0x40	; 64
    1958:	0a c0       	rjmp	.+20     	; 0x196e <atan2+0x3c>
    195a:	ef 63       	ori	r30, 0x3F	; 63
    195c:	07 f8       	bld	r0, 7
    195e:	00 94       	com	r0
    1960:	07 fa       	bst	r0, 7
    1962:	db 01       	movw	r26, r22
    1964:	b9 01       	movw	r22, r18
    1966:	9d 01       	movw	r18, r26
    1968:	dc 01       	movw	r26, r24
    196a:	ca 01       	movw	r24, r20
    196c:	ad 01       	movw	r20, r26
    196e:	ef 93       	push	r30
    1970:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__divsf3_pse>
    1974:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fp_round>
    1978:	0e 94 c9 0c 	call	0x1992	; 0x1992 <atan>
    197c:	5f 91       	pop	r21
    197e:	55 23       	and	r21, r21
    1980:	39 f0       	breq	.+14     	; 0x1990 <atan2+0x5e>
    1982:	2b ed       	ldi	r18, 0xDB	; 219
    1984:	3f e0       	ldi	r19, 0x0F	; 15
    1986:	49 e4       	ldi	r20, 0x49	; 73
    1988:	50 fd       	sbrc	r21, 0
    198a:	49 ec       	ldi	r20, 0xC9	; 201
    198c:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__addsf3>
    1990:	08 95       	ret

00001992 <atan>:
    1992:	df 93       	push	r29
    1994:	dd 27       	eor	r29, r29
    1996:	b9 2f       	mov	r27, r25
    1998:	bf 77       	andi	r27, 0x7F	; 127
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	16 16       	cp	r1, r22
    19a0:	17 06       	cpc	r1, r23
    19a2:	48 07       	cpc	r20, r24
    19a4:	5b 07       	cpc	r21, r27
    19a6:	18 f4       	brcc	.+6      	; 0x19ae <atan+0x1c>
    19a8:	d9 2f       	mov	r29, r25
    19aa:	0e 94 55 0e 	call	0x1caa	; 0x1caa <inverse>
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	7f 93       	push	r23
    19b4:	6f 93       	push	r22
    19b6:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <square>
    19ba:	e0 e7       	ldi	r30, 0x70	; 112
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fp_powser>
    19c2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fp_round>
    19c6:	2f 91       	pop	r18
    19c8:	3f 91       	pop	r19
    19ca:	4f 91       	pop	r20
    19cc:	5f 91       	pop	r21
    19ce:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__mulsf3x>
    19d2:	dd 23       	and	r29, r29
    19d4:	51 f0       	breq	.+20     	; 0x19ea <atan+0x58>
    19d6:	90 58       	subi	r25, 0x80	; 128
    19d8:	a2 ea       	ldi	r26, 0xA2	; 162
    19da:	2a ed       	ldi	r18, 0xDA	; 218
    19dc:	3f e0       	ldi	r19, 0x0F	; 15
    19de:	49 ec       	ldi	r20, 0xC9	; 201
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	d0 78       	andi	r29, 0x80	; 128
    19e4:	5d 27       	eor	r21, r29
    19e6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__addsf3x>
    19ea:	df 91       	pop	r29
    19ec:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_round>

000019f0 <__divsf3>:
    19f0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__divsf3x>
    19f4:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_round>
    19f8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__fp_pscB>
    19fc:	58 f0       	brcs	.+22     	; 0x1a14 <__divsf3+0x24>
    19fe:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fp_pscA>
    1a02:	40 f0       	brcs	.+16     	; 0x1a14 <__divsf3+0x24>
    1a04:	29 f4       	brne	.+10     	; 0x1a10 <__divsf3+0x20>
    1a06:	5f 3f       	cpi	r21, 0xFF	; 255
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <__divsf3+0x24>
    1a0a:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_inf>
    1a0e:	51 11       	cpse	r21, r1
    1a10:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_szero>
    1a14:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__fp_nan>

00001a18 <__divsf3x>:
    1a18:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__fp_split3>
    1a1c:	68 f3       	brcs	.-38     	; 0x19f8 <__divsf3+0x8>

00001a1e <__divsf3_pse>:
    1a1e:	99 23       	and	r25, r25
    1a20:	b1 f3       	breq	.-20     	; 0x1a0e <__divsf3+0x1e>
    1a22:	55 23       	and	r21, r21
    1a24:	91 f3       	breq	.-28     	; 0x1a0a <__divsf3+0x1a>
    1a26:	95 1b       	sub	r25, r21
    1a28:	55 0b       	sbc	r21, r21
    1a2a:	bb 27       	eor	r27, r27
    1a2c:	aa 27       	eor	r26, r26
    1a2e:	62 17       	cp	r22, r18
    1a30:	73 07       	cpc	r23, r19
    1a32:	84 07       	cpc	r24, r20
    1a34:	38 f0       	brcs	.+14     	; 0x1a44 <__divsf3_pse+0x26>
    1a36:	9f 5f       	subi	r25, 0xFF	; 255
    1a38:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3a:	22 0f       	add	r18, r18
    1a3c:	33 1f       	adc	r19, r19
    1a3e:	44 1f       	adc	r20, r20
    1a40:	aa 1f       	adc	r26, r26
    1a42:	a9 f3       	breq	.-22     	; 0x1a2e <__divsf3_pse+0x10>
    1a44:	35 d0       	rcall	.+106    	; 0x1ab0 <__divsf3_pse+0x92>
    1a46:	0e 2e       	mov	r0, r30
    1a48:	3a f0       	brmi	.+14     	; 0x1a58 <__divsf3_pse+0x3a>
    1a4a:	e0 e8       	ldi	r30, 0x80	; 128
    1a4c:	32 d0       	rcall	.+100    	; 0x1ab2 <__divsf3_pse+0x94>
    1a4e:	91 50       	subi	r25, 0x01	; 1
    1a50:	50 40       	sbci	r21, 0x00	; 0
    1a52:	e6 95       	lsr	r30
    1a54:	00 1c       	adc	r0, r0
    1a56:	ca f7       	brpl	.-14     	; 0x1a4a <__divsf3_pse+0x2c>
    1a58:	2b d0       	rcall	.+86     	; 0x1ab0 <__divsf3_pse+0x92>
    1a5a:	fe 2f       	mov	r31, r30
    1a5c:	29 d0       	rcall	.+82     	; 0x1ab0 <__divsf3_pse+0x92>
    1a5e:	66 0f       	add	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	88 1f       	adc	r24, r24
    1a64:	bb 1f       	adc	r27, r27
    1a66:	26 17       	cp	r18, r22
    1a68:	37 07       	cpc	r19, r23
    1a6a:	48 07       	cpc	r20, r24
    1a6c:	ab 07       	cpc	r26, r27
    1a6e:	b0 e8       	ldi	r27, 0x80	; 128
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <__divsf3_pse+0x56>
    1a72:	bb 0b       	sbc	r27, r27
    1a74:	80 2d       	mov	r24, r0
    1a76:	bf 01       	movw	r22, r30
    1a78:	ff 27       	eor	r31, r31
    1a7a:	93 58       	subi	r25, 0x83	; 131
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7e:	3a f0       	brmi	.+14     	; 0x1a8e <__divsf3_pse+0x70>
    1a80:	9e 3f       	cpi	r25, 0xFE	; 254
    1a82:	51 05       	cpc	r21, r1
    1a84:	78 f0       	brcs	.+30     	; 0x1aa4 <__divsf3_pse+0x86>
    1a86:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_inf>
    1a8a:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_szero>
    1a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a90:	e4 f3       	brlt	.-8      	; 0x1a8a <__divsf3_pse+0x6c>
    1a92:	98 3e       	cpi	r25, 0xE8	; 232
    1a94:	d4 f3       	brlt	.-12     	; 0x1a8a <__divsf3_pse+0x6c>
    1a96:	86 95       	lsr	r24
    1a98:	77 95       	ror	r23
    1a9a:	67 95       	ror	r22
    1a9c:	b7 95       	ror	r27
    1a9e:	f7 95       	ror	r31
    1aa0:	9f 5f       	subi	r25, 0xFF	; 255
    1aa2:	c9 f7       	brne	.-14     	; 0x1a96 <__divsf3_pse+0x78>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	91 1d       	adc	r25, r1
    1aa8:	96 95       	lsr	r25
    1aaa:	87 95       	ror	r24
    1aac:	97 f9       	bld	r25, 7
    1aae:	08 95       	ret
    1ab0:	e1 e0       	ldi	r30, 0x01	; 1
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	bb 1f       	adc	r27, r27
    1aba:	62 17       	cp	r22, r18
    1abc:	73 07       	cpc	r23, r19
    1abe:	84 07       	cpc	r24, r20
    1ac0:	ba 07       	cpc	r27, r26
    1ac2:	20 f0       	brcs	.+8      	; 0x1acc <__divsf3_pse+0xae>
    1ac4:	62 1b       	sub	r22, r18
    1ac6:	73 0b       	sbc	r23, r19
    1ac8:	84 0b       	sbc	r24, r20
    1aca:	ba 0b       	sbc	r27, r26
    1acc:	ee 1f       	adc	r30, r30
    1ace:	88 f7       	brcc	.-30     	; 0x1ab2 <__divsf3_pse+0x94>
    1ad0:	e0 95       	com	r30
    1ad2:	08 95       	ret

00001ad4 <__fixsfsi>:
    1ad4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__fixunssfsi>
    1ad8:	68 94       	set
    1ada:	b1 11       	cpse	r27, r1
    1adc:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_szero>
    1ae0:	08 95       	ret

00001ae2 <__fixunssfsi>:
    1ae2:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__fp_splitA>
    1ae6:	88 f0       	brcs	.+34     	; 0x1b0a <__fixunssfsi+0x28>
    1ae8:	9f 57       	subi	r25, 0x7F	; 127
    1aea:	98 f0       	brcs	.+38     	; 0x1b12 <__fixunssfsi+0x30>
    1aec:	b9 2f       	mov	r27, r25
    1aee:	99 27       	eor	r25, r25
    1af0:	b7 51       	subi	r27, 0x17	; 23
    1af2:	b0 f0       	brcs	.+44     	; 0x1b20 <__fixunssfsi+0x3e>
    1af4:	e1 f0       	breq	.+56     	; 0x1b2e <__fixunssfsi+0x4c>
    1af6:	66 0f       	add	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	1a f0       	brmi	.+6      	; 0x1b06 <__fixunssfsi+0x24>
    1b00:	ba 95       	dec	r27
    1b02:	c9 f7       	brne	.-14     	; 0x1af6 <__fixunssfsi+0x14>
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <__fixunssfsi+0x4c>
    1b06:	b1 30       	cpi	r27, 0x01	; 1
    1b08:	91 f0       	breq	.+36     	; 0x1b2e <__fixunssfsi+0x4c>
    1b0a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_zero>
    1b0e:	b1 e0       	ldi	r27, 0x01	; 1
    1b10:	08 95       	ret
    1b12:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_zero>
    1b16:	67 2f       	mov	r22, r23
    1b18:	78 2f       	mov	r23, r24
    1b1a:	88 27       	eor	r24, r24
    1b1c:	b8 5f       	subi	r27, 0xF8	; 248
    1b1e:	39 f0       	breq	.+14     	; 0x1b2e <__fixunssfsi+0x4c>
    1b20:	b9 3f       	cpi	r27, 0xF9	; 249
    1b22:	cc f3       	brlt	.-14     	; 0x1b16 <__fixunssfsi+0x34>
    1b24:	86 95       	lsr	r24
    1b26:	77 95       	ror	r23
    1b28:	67 95       	ror	r22
    1b2a:	b3 95       	inc	r27
    1b2c:	d9 f7       	brne	.-10     	; 0x1b24 <__fixunssfsi+0x42>
    1b2e:	3e f4       	brtc	.+14     	; 0x1b3e <__fixunssfsi+0x5c>
    1b30:	90 95       	com	r25
    1b32:	80 95       	com	r24
    1b34:	70 95       	com	r23
    1b36:	61 95       	neg	r22
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	08 95       	ret

00001b40 <__floatunsisf>:
    1b40:	e8 94       	clt
    1b42:	09 c0       	rjmp	.+18     	; 0x1b56 <__floatsisf+0x12>

00001b44 <__floatsisf>:
    1b44:	97 fb       	bst	r25, 7
    1b46:	3e f4       	brtc	.+14     	; 0x1b56 <__floatsisf+0x12>
    1b48:	90 95       	com	r25
    1b4a:	80 95       	com	r24
    1b4c:	70 95       	com	r23
    1b4e:	61 95       	neg	r22
    1b50:	7f 4f       	sbci	r23, 0xFF	; 255
    1b52:	8f 4f       	sbci	r24, 0xFF	; 255
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	99 23       	and	r25, r25
    1b58:	a9 f0       	breq	.+42     	; 0x1b84 <__floatsisf+0x40>
    1b5a:	f9 2f       	mov	r31, r25
    1b5c:	96 e9       	ldi	r25, 0x96	; 150
    1b5e:	bb 27       	eor	r27, r27
    1b60:	93 95       	inc	r25
    1b62:	f6 95       	lsr	r31
    1b64:	87 95       	ror	r24
    1b66:	77 95       	ror	r23
    1b68:	67 95       	ror	r22
    1b6a:	b7 95       	ror	r27
    1b6c:	f1 11       	cpse	r31, r1
    1b6e:	f8 cf       	rjmp	.-16     	; 0x1b60 <__floatsisf+0x1c>
    1b70:	fa f4       	brpl	.+62     	; 0x1bb0 <__floatsisf+0x6c>
    1b72:	bb 0f       	add	r27, r27
    1b74:	11 f4       	brne	.+4      	; 0x1b7a <__floatsisf+0x36>
    1b76:	60 ff       	sbrs	r22, 0
    1b78:	1b c0       	rjmp	.+54     	; 0x1bb0 <__floatsisf+0x6c>
    1b7a:	6f 5f       	subi	r22, 0xFF	; 255
    1b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	16 c0       	rjmp	.+44     	; 0x1bb0 <__floatsisf+0x6c>
    1b84:	88 23       	and	r24, r24
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <__floatsisf+0x48>
    1b88:	96 e9       	ldi	r25, 0x96	; 150
    1b8a:	11 c0       	rjmp	.+34     	; 0x1bae <__floatsisf+0x6a>
    1b8c:	77 23       	and	r23, r23
    1b8e:	21 f0       	breq	.+8      	; 0x1b98 <__floatsisf+0x54>
    1b90:	9e e8       	ldi	r25, 0x8E	; 142
    1b92:	87 2f       	mov	r24, r23
    1b94:	76 2f       	mov	r23, r22
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <__floatsisf+0x5e>
    1b98:	66 23       	and	r22, r22
    1b9a:	71 f0       	breq	.+28     	; 0x1bb8 <__floatsisf+0x74>
    1b9c:	96 e8       	ldi	r25, 0x86	; 134
    1b9e:	86 2f       	mov	r24, r22
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	2a f0       	brmi	.+10     	; 0x1bb0 <__floatsisf+0x6c>
    1ba6:	9a 95       	dec	r25
    1ba8:	66 0f       	add	r22, r22
    1baa:	77 1f       	adc	r23, r23
    1bac:	88 1f       	adc	r24, r24
    1bae:	da f7       	brpl	.-10     	; 0x1ba6 <__floatsisf+0x62>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	96 95       	lsr	r25
    1bb4:	87 95       	ror	r24
    1bb6:	97 f9       	bld	r25, 7
    1bb8:	08 95       	ret

00001bba <__fp_inf>:
    1bba:	97 f9       	bld	r25, 7
    1bbc:	9f 67       	ori	r25, 0x7F	; 127
    1bbe:	80 e8       	ldi	r24, 0x80	; 128
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	08 95       	ret

00001bc6 <__fp_nan>:
    1bc6:	9f ef       	ldi	r25, 0xFF	; 255
    1bc8:	80 ec       	ldi	r24, 0xC0	; 192
    1bca:	08 95       	ret

00001bcc <__fp_powser>:
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	1f 93       	push	r17
    1bd2:	0f 93       	push	r16
    1bd4:	ff 92       	push	r15
    1bd6:	ef 92       	push	r14
    1bd8:	df 92       	push	r13
    1bda:	7b 01       	movw	r14, r22
    1bdc:	8c 01       	movw	r16, r24
    1bde:	68 94       	set
    1be0:	06 c0       	rjmp	.+12     	; 0x1bee <__fp_powser+0x22>
    1be2:	da 2e       	mov	r13, r26
    1be4:	ef 01       	movw	r28, r30
    1be6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__mulsf3x>
    1bea:	fe 01       	movw	r30, r28
    1bec:	e8 94       	clt
    1bee:	a5 91       	lpm	r26, Z+
    1bf0:	25 91       	lpm	r18, Z+
    1bf2:	35 91       	lpm	r19, Z+
    1bf4:	45 91       	lpm	r20, Z+
    1bf6:	55 91       	lpm	r21, Z+
    1bf8:	a6 f3       	brts	.-24     	; 0x1be2 <__fp_powser+0x16>
    1bfa:	ef 01       	movw	r28, r30
    1bfc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__addsf3x>
    1c00:	fe 01       	movw	r30, r28
    1c02:	97 01       	movw	r18, r14
    1c04:	a8 01       	movw	r20, r16
    1c06:	da 94       	dec	r13
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <__fp_powser+0x18>
    1c0a:	df 90       	pop	r13
    1c0c:	ef 90       	pop	r14
    1c0e:	ff 90       	pop	r15
    1c10:	0f 91       	pop	r16
    1c12:	1f 91       	pop	r17
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <__fp_pscA>:
    1c1a:	00 24       	eor	r0, r0
    1c1c:	0a 94       	dec	r0
    1c1e:	16 16       	cp	r1, r22
    1c20:	17 06       	cpc	r1, r23
    1c22:	18 06       	cpc	r1, r24
    1c24:	09 06       	cpc	r0, r25
    1c26:	08 95       	ret

00001c28 <__fp_pscB>:
    1c28:	00 24       	eor	r0, r0
    1c2a:	0a 94       	dec	r0
    1c2c:	12 16       	cp	r1, r18
    1c2e:	13 06       	cpc	r1, r19
    1c30:	14 06       	cpc	r1, r20
    1c32:	05 06       	cpc	r0, r21
    1c34:	08 95       	ret

00001c36 <__fp_round>:
    1c36:	09 2e       	mov	r0, r25
    1c38:	03 94       	inc	r0
    1c3a:	00 0c       	add	r0, r0
    1c3c:	11 f4       	brne	.+4      	; 0x1c42 <__fp_round+0xc>
    1c3e:	88 23       	and	r24, r24
    1c40:	52 f0       	brmi	.+20     	; 0x1c56 <__fp_round+0x20>
    1c42:	bb 0f       	add	r27, r27
    1c44:	40 f4       	brcc	.+16     	; 0x1c56 <__fp_round+0x20>
    1c46:	bf 2b       	or	r27, r31
    1c48:	11 f4       	brne	.+4      	; 0x1c4e <__fp_round+0x18>
    1c4a:	60 ff       	sbrs	r22, 0
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <__fp_round+0x20>
    1c4e:	6f 5f       	subi	r22, 0xFF	; 255
    1c50:	7f 4f       	sbci	r23, 0xFF	; 255
    1c52:	8f 4f       	sbci	r24, 0xFF	; 255
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	08 95       	ret

00001c58 <__fp_split3>:
    1c58:	57 fd       	sbrc	r21, 7
    1c5a:	90 58       	subi	r25, 0x80	; 128
    1c5c:	44 0f       	add	r20, r20
    1c5e:	55 1f       	adc	r21, r21
    1c60:	59 f0       	breq	.+22     	; 0x1c78 <__fp_splitA+0x10>
    1c62:	5f 3f       	cpi	r21, 0xFF	; 255
    1c64:	71 f0       	breq	.+28     	; 0x1c82 <__fp_splitA+0x1a>
    1c66:	47 95       	ror	r20

00001c68 <__fp_splitA>:
    1c68:	88 0f       	add	r24, r24
    1c6a:	97 fb       	bst	r25, 7
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	61 f0       	breq	.+24     	; 0x1c88 <__fp_splitA+0x20>
    1c70:	9f 3f       	cpi	r25, 0xFF	; 255
    1c72:	79 f0       	breq	.+30     	; 0x1c92 <__fp_splitA+0x2a>
    1c74:	87 95       	ror	r24
    1c76:	08 95       	ret
    1c78:	12 16       	cp	r1, r18
    1c7a:	13 06       	cpc	r1, r19
    1c7c:	14 06       	cpc	r1, r20
    1c7e:	55 1f       	adc	r21, r21
    1c80:	f2 cf       	rjmp	.-28     	; 0x1c66 <__fp_split3+0xe>
    1c82:	46 95       	lsr	r20
    1c84:	f1 df       	rcall	.-30     	; 0x1c68 <__fp_splitA>
    1c86:	08 c0       	rjmp	.+16     	; 0x1c98 <__fp_splitA+0x30>
    1c88:	16 16       	cp	r1, r22
    1c8a:	17 06       	cpc	r1, r23
    1c8c:	18 06       	cpc	r1, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	f1 cf       	rjmp	.-30     	; 0x1c74 <__fp_splitA+0xc>
    1c92:	86 95       	lsr	r24
    1c94:	71 05       	cpc	r23, r1
    1c96:	61 05       	cpc	r22, r1
    1c98:	08 94       	sec
    1c9a:	08 95       	ret

00001c9c <__fp_zero>:
    1c9c:	e8 94       	clt

00001c9e <__fp_szero>:
    1c9e:	bb 27       	eor	r27, r27
    1ca0:	66 27       	eor	r22, r22
    1ca2:	77 27       	eor	r23, r23
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	97 f9       	bld	r25, 7
    1ca8:	08 95       	ret

00001caa <inverse>:
    1caa:	9b 01       	movw	r18, r22
    1cac:	ac 01       	movw	r20, r24
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	80 e8       	ldi	r24, 0x80	; 128
    1cb4:	9f e3       	ldi	r25, 0x3F	; 63
    1cb6:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__divsf3>

00001cba <__mulsf3>:
    1cba:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__mulsf3x>
    1cbe:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_round>
    1cc2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fp_pscA>
    1cc6:	38 f0       	brcs	.+14     	; 0x1cd6 <__mulsf3+0x1c>
    1cc8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__fp_pscB>
    1ccc:	20 f0       	brcs	.+8      	; 0x1cd6 <__mulsf3+0x1c>
    1cce:	95 23       	and	r25, r21
    1cd0:	11 f0       	breq	.+4      	; 0x1cd6 <__mulsf3+0x1c>
    1cd2:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_inf>
    1cd6:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__fp_nan>
    1cda:	11 24       	eor	r1, r1
    1cdc:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_szero>

00001ce0 <__mulsf3x>:
    1ce0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__fp_split3>
    1ce4:	70 f3       	brcs	.-36     	; 0x1cc2 <__mulsf3+0x8>

00001ce6 <__mulsf3_pse>:
    1ce6:	95 9f       	mul	r25, r21
    1ce8:	c1 f3       	breq	.-16     	; 0x1cda <__mulsf3+0x20>
    1cea:	95 0f       	add	r25, r21
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	55 1f       	adc	r21, r21
    1cf0:	62 9f       	mul	r22, r18
    1cf2:	f0 01       	movw	r30, r0
    1cf4:	72 9f       	mul	r23, r18
    1cf6:	bb 27       	eor	r27, r27
    1cf8:	f0 0d       	add	r31, r0
    1cfa:	b1 1d       	adc	r27, r1
    1cfc:	63 9f       	mul	r22, r19
    1cfe:	aa 27       	eor	r26, r26
    1d00:	f0 0d       	add	r31, r0
    1d02:	b1 1d       	adc	r27, r1
    1d04:	aa 1f       	adc	r26, r26
    1d06:	64 9f       	mul	r22, r20
    1d08:	66 27       	eor	r22, r22
    1d0a:	b0 0d       	add	r27, r0
    1d0c:	a1 1d       	adc	r26, r1
    1d0e:	66 1f       	adc	r22, r22
    1d10:	82 9f       	mul	r24, r18
    1d12:	22 27       	eor	r18, r18
    1d14:	b0 0d       	add	r27, r0
    1d16:	a1 1d       	adc	r26, r1
    1d18:	62 1f       	adc	r22, r18
    1d1a:	73 9f       	mul	r23, r19
    1d1c:	b0 0d       	add	r27, r0
    1d1e:	a1 1d       	adc	r26, r1
    1d20:	62 1f       	adc	r22, r18
    1d22:	83 9f       	mul	r24, r19
    1d24:	a0 0d       	add	r26, r0
    1d26:	61 1d       	adc	r22, r1
    1d28:	22 1f       	adc	r18, r18
    1d2a:	74 9f       	mul	r23, r20
    1d2c:	33 27       	eor	r19, r19
    1d2e:	a0 0d       	add	r26, r0
    1d30:	61 1d       	adc	r22, r1
    1d32:	23 1f       	adc	r18, r19
    1d34:	84 9f       	mul	r24, r20
    1d36:	60 0d       	add	r22, r0
    1d38:	21 1d       	adc	r18, r1
    1d3a:	82 2f       	mov	r24, r18
    1d3c:	76 2f       	mov	r23, r22
    1d3e:	6a 2f       	mov	r22, r26
    1d40:	11 24       	eor	r1, r1
    1d42:	9f 57       	subi	r25, 0x7F	; 127
    1d44:	50 40       	sbci	r21, 0x00	; 0
    1d46:	9a f0       	brmi	.+38     	; 0x1d6e <__mulsf3_pse+0x88>
    1d48:	f1 f0       	breq	.+60     	; 0x1d86 <__mulsf3_pse+0xa0>
    1d4a:	88 23       	and	r24, r24
    1d4c:	4a f0       	brmi	.+18     	; 0x1d60 <__mulsf3_pse+0x7a>
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	bb 1f       	adc	r27, r27
    1d54:	66 1f       	adc	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	91 50       	subi	r25, 0x01	; 1
    1d5c:	50 40       	sbci	r21, 0x00	; 0
    1d5e:	a9 f7       	brne	.-22     	; 0x1d4a <__mulsf3_pse+0x64>
    1d60:	9e 3f       	cpi	r25, 0xFE	; 254
    1d62:	51 05       	cpc	r21, r1
    1d64:	80 f0       	brcs	.+32     	; 0x1d86 <__mulsf3_pse+0xa0>
    1d66:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_inf>
    1d6a:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_szero>
    1d6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d70:	e4 f3       	brlt	.-8      	; 0x1d6a <__mulsf3_pse+0x84>
    1d72:	98 3e       	cpi	r25, 0xE8	; 232
    1d74:	d4 f3       	brlt	.-12     	; 0x1d6a <__mulsf3_pse+0x84>
    1d76:	86 95       	lsr	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	b7 95       	ror	r27
    1d7e:	f7 95       	ror	r31
    1d80:	e7 95       	ror	r30
    1d82:	9f 5f       	subi	r25, 0xFF	; 255
    1d84:	c1 f7       	brne	.-16     	; 0x1d76 <__mulsf3_pse+0x90>
    1d86:	fe 2b       	or	r31, r30
    1d88:	88 0f       	add	r24, r24
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	96 95       	lsr	r25
    1d8e:	87 95       	ror	r24
    1d90:	97 f9       	bld	r25, 7
    1d92:	08 95       	ret

00001d94 <square>:
    1d94:	9b 01       	movw	r18, r22
    1d96:	ac 01       	movw	r20, r24
    1d98:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__mulsf3>

00001d9c <__subsf3>:
    1d9c:	50 58       	subi	r21, 0x80	; 128

00001d9e <__addsf3>:
    1d9e:	bb 27       	eor	r27, r27
    1da0:	aa 27       	eor	r26, r26
    1da2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__addsf3x>
    1da6:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_round>
    1daa:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fp_pscA>
    1dae:	38 f0       	brcs	.+14     	; 0x1dbe <__addsf3+0x20>
    1db0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__fp_pscB>
    1db4:	20 f0       	brcs	.+8      	; 0x1dbe <__addsf3+0x20>
    1db6:	39 f4       	brne	.+14     	; 0x1dc6 <__addsf3+0x28>
    1db8:	9f 3f       	cpi	r25, 0xFF	; 255
    1dba:	19 f4       	brne	.+6      	; 0x1dc2 <__addsf3+0x24>
    1dbc:	26 f4       	brtc	.+8      	; 0x1dc6 <__addsf3+0x28>
    1dbe:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__fp_nan>
    1dc2:	0e f4       	brtc	.+2      	; 0x1dc6 <__addsf3+0x28>
    1dc4:	e0 95       	com	r30
    1dc6:	e7 fb       	bst	r30, 7
    1dc8:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_inf>

00001dcc <__addsf3x>:
    1dcc:	e9 2f       	mov	r30, r25
    1dce:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__fp_split3>
    1dd2:	58 f3       	brcs	.-42     	; 0x1daa <__addsf3+0xc>
    1dd4:	ba 17       	cp	r27, r26
    1dd6:	62 07       	cpc	r22, r18
    1dd8:	73 07       	cpc	r23, r19
    1dda:	84 07       	cpc	r24, r20
    1ddc:	95 07       	cpc	r25, r21
    1dde:	20 f0       	brcs	.+8      	; 0x1de8 <__addsf3x+0x1c>
    1de0:	79 f4       	brne	.+30     	; 0x1e00 <__addsf3x+0x34>
    1de2:	a6 f5       	brtc	.+104    	; 0x1e4c <__addsf3x+0x80>
    1de4:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_zero>
    1de8:	0e f4       	brtc	.+2      	; 0x1dec <__addsf3x+0x20>
    1dea:	e0 95       	com	r30
    1dec:	0b 2e       	mov	r0, r27
    1dee:	ba 2f       	mov	r27, r26
    1df0:	a0 2d       	mov	r26, r0
    1df2:	0b 01       	movw	r0, r22
    1df4:	b9 01       	movw	r22, r18
    1df6:	90 01       	movw	r18, r0
    1df8:	0c 01       	movw	r0, r24
    1dfa:	ca 01       	movw	r24, r20
    1dfc:	a0 01       	movw	r20, r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	ff 27       	eor	r31, r31
    1e02:	59 1b       	sub	r21, r25
    1e04:	99 f0       	breq	.+38     	; 0x1e2c <__addsf3x+0x60>
    1e06:	59 3f       	cpi	r21, 0xF9	; 249
    1e08:	50 f4       	brcc	.+20     	; 0x1e1e <__addsf3x+0x52>
    1e0a:	50 3e       	cpi	r21, 0xE0	; 224
    1e0c:	68 f1       	brcs	.+90     	; 0x1e68 <__addsf3x+0x9c>
    1e0e:	1a 16       	cp	r1, r26
    1e10:	f0 40       	sbci	r31, 0x00	; 0
    1e12:	a2 2f       	mov	r26, r18
    1e14:	23 2f       	mov	r18, r19
    1e16:	34 2f       	mov	r19, r20
    1e18:	44 27       	eor	r20, r20
    1e1a:	58 5f       	subi	r21, 0xF8	; 248
    1e1c:	f3 cf       	rjmp	.-26     	; 0x1e04 <__addsf3x+0x38>
    1e1e:	46 95       	lsr	r20
    1e20:	37 95       	ror	r19
    1e22:	27 95       	ror	r18
    1e24:	a7 95       	ror	r26
    1e26:	f0 40       	sbci	r31, 0x00	; 0
    1e28:	53 95       	inc	r21
    1e2a:	c9 f7       	brne	.-14     	; 0x1e1e <__addsf3x+0x52>
    1e2c:	7e f4       	brtc	.+30     	; 0x1e4c <__addsf3x+0x80>
    1e2e:	1f 16       	cp	r1, r31
    1e30:	ba 0b       	sbc	r27, r26
    1e32:	62 0b       	sbc	r22, r18
    1e34:	73 0b       	sbc	r23, r19
    1e36:	84 0b       	sbc	r24, r20
    1e38:	ba f0       	brmi	.+46     	; 0x1e68 <__addsf3x+0x9c>
    1e3a:	91 50       	subi	r25, 0x01	; 1
    1e3c:	a1 f0       	breq	.+40     	; 0x1e66 <__addsf3x+0x9a>
    1e3e:	ff 0f       	add	r31, r31
    1e40:	bb 1f       	adc	r27, r27
    1e42:	66 1f       	adc	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	c2 f7       	brpl	.-16     	; 0x1e3a <__addsf3x+0x6e>
    1e4a:	0e c0       	rjmp	.+28     	; 0x1e68 <__addsf3x+0x9c>
    1e4c:	ba 0f       	add	r27, r26
    1e4e:	62 1f       	adc	r22, r18
    1e50:	73 1f       	adc	r23, r19
    1e52:	84 1f       	adc	r24, r20
    1e54:	48 f4       	brcc	.+18     	; 0x1e68 <__addsf3x+0x9c>
    1e56:	87 95       	ror	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	b7 95       	ror	r27
    1e5e:	f7 95       	ror	r31
    1e60:	9e 3f       	cpi	r25, 0xFE	; 254
    1e62:	08 f0       	brcs	.+2      	; 0x1e66 <__addsf3x+0x9a>
    1e64:	b0 cf       	rjmp	.-160    	; 0x1dc6 <__addsf3+0x28>
    1e66:	93 95       	inc	r25
    1e68:	88 0f       	add	r24, r24
    1e6a:	08 f0       	brcs	.+2      	; 0x1e6e <__addsf3x+0xa2>
    1e6c:	99 27       	eor	r25, r25
    1e6e:	ee 0f       	add	r30, r30
    1e70:	97 95       	ror	r25
    1e72:	87 95       	ror	r24
    1e74:	08 95       	ret

00001e76 <__divmodhi4>:
    1e76:	97 fb       	bst	r25, 7
    1e78:	07 2e       	mov	r0, r23
    1e7a:	16 f4       	brtc	.+4      	; 0x1e80 <__divmodhi4+0xa>
    1e7c:	00 94       	com	r0
    1e7e:	07 d0       	rcall	.+14     	; 0x1e8e <__divmodhi4_neg1>
    1e80:	77 fd       	sbrc	r23, 7
    1e82:	09 d0       	rcall	.+18     	; 0x1e96 <__divmodhi4_neg2>
    1e84:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__udivmodhi4>
    1e88:	07 fc       	sbrc	r0, 7
    1e8a:	05 d0       	rcall	.+10     	; 0x1e96 <__divmodhi4_neg2>
    1e8c:	3e f4       	brtc	.+14     	; 0x1e9c <__divmodhi4_exit>

00001e8e <__divmodhi4_neg1>:
    1e8e:	90 95       	com	r25
    1e90:	81 95       	neg	r24
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	08 95       	ret

00001e96 <__divmodhi4_neg2>:
    1e96:	70 95       	com	r23
    1e98:	61 95       	neg	r22
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255

00001e9c <__divmodhi4_exit>:
    1e9c:	08 95       	ret

00001e9e <__udivmodsi4>:
    1e9e:	a1 e2       	ldi	r26, 0x21	; 33
    1ea0:	1a 2e       	mov	r1, r26
    1ea2:	aa 1b       	sub	r26, r26
    1ea4:	bb 1b       	sub	r27, r27
    1ea6:	fd 01       	movw	r30, r26
    1ea8:	0d c0       	rjmp	.+26     	; 0x1ec4 <__udivmodsi4_ep>

00001eaa <__udivmodsi4_loop>:
    1eaa:	aa 1f       	adc	r26, r26
    1eac:	bb 1f       	adc	r27, r27
    1eae:	ee 1f       	adc	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	a2 17       	cp	r26, r18
    1eb4:	b3 07       	cpc	r27, r19
    1eb6:	e4 07       	cpc	r30, r20
    1eb8:	f5 07       	cpc	r31, r21
    1eba:	20 f0       	brcs	.+8      	; 0x1ec4 <__udivmodsi4_ep>
    1ebc:	a2 1b       	sub	r26, r18
    1ebe:	b3 0b       	sbc	r27, r19
    1ec0:	e4 0b       	sbc	r30, r20
    1ec2:	f5 0b       	sbc	r31, r21

00001ec4 <__udivmodsi4_ep>:
    1ec4:	66 1f       	adc	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	1a 94       	dec	r1
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <__udivmodsi4_loop>
    1ed0:	60 95       	com	r22
    1ed2:	70 95       	com	r23
    1ed4:	80 95       	com	r24
    1ed6:	90 95       	com	r25
    1ed8:	9b 01       	movw	r18, r22
    1eda:	ac 01       	movw	r20, r24
    1edc:	bd 01       	movw	r22, r26
    1ede:	cf 01       	movw	r24, r30
    1ee0:	08 95       	ret

00001ee2 <__udivmodhi4>:
    1ee2:	aa 1b       	sub	r26, r26
    1ee4:	bb 1b       	sub	r27, r27
    1ee6:	51 e1       	ldi	r21, 0x11	; 17
    1ee8:	07 c0       	rjmp	.+14     	; 0x1ef8 <__udivmodhi4_ep>

00001eea <__udivmodhi4_loop>:
    1eea:	aa 1f       	adc	r26, r26
    1eec:	bb 1f       	adc	r27, r27
    1eee:	a6 17       	cp	r26, r22
    1ef0:	b7 07       	cpc	r27, r23
    1ef2:	10 f0       	brcs	.+4      	; 0x1ef8 <__udivmodhi4_ep>
    1ef4:	a6 1b       	sub	r26, r22
    1ef6:	b7 0b       	sbc	r27, r23

00001ef8 <__udivmodhi4_ep>:
    1ef8:	88 1f       	adc	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	5a 95       	dec	r21
    1efe:	a9 f7       	brne	.-22     	; 0x1eea <__udivmodhi4_loop>
    1f00:	80 95       	com	r24
    1f02:	90 95       	com	r25
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	08 95       	ret

00001f0a <__itoa_ncheck>:
    1f0a:	bb 27       	eor	r27, r27
    1f0c:	4a 30       	cpi	r20, 0x0A	; 10
    1f0e:	31 f4       	brne	.+12     	; 0x1f1c <__itoa_ncheck+0x12>
    1f10:	99 23       	and	r25, r25
    1f12:	22 f4       	brpl	.+8      	; 0x1f1c <__itoa_ncheck+0x12>
    1f14:	bd e2       	ldi	r27, 0x2D	; 45
    1f16:	90 95       	com	r25
    1f18:	81 95       	neg	r24
    1f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1c:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__utoa_common>

00001f20 <__utoa_ncheck>:
    1f20:	bb 27       	eor	r27, r27

00001f22 <__utoa_common>:
    1f22:	fb 01       	movw	r30, r22
    1f24:	55 27       	eor	r21, r21
    1f26:	aa 27       	eor	r26, r26
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	aa 1f       	adc	r26, r26
    1f2e:	a4 17       	cp	r26, r20
    1f30:	10 f0       	brcs	.+4      	; 0x1f36 <__utoa_common+0x14>
    1f32:	a4 1b       	sub	r26, r20
    1f34:	83 95       	inc	r24
    1f36:	50 51       	subi	r21, 0x10	; 16
    1f38:	b9 f7       	brne	.-18     	; 0x1f28 <__utoa_common+0x6>
    1f3a:	a0 5d       	subi	r26, 0xD0	; 208
    1f3c:	aa 33       	cpi	r26, 0x3A	; 58
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <__utoa_common+0x20>
    1f40:	a9 5d       	subi	r26, 0xD9	; 217
    1f42:	a1 93       	st	Z+, r26
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	79 f7       	brne	.-34     	; 0x1f26 <__utoa_common+0x4>
    1f48:	b1 11       	cpse	r27, r1
    1f4a:	b1 93       	st	Z+, r27
    1f4c:	11 92       	st	Z+, r1
    1f4e:	cb 01       	movw	r24, r22
    1f50:	0c 94 46 13 	jmp	0x268c	; 0x268c <strrev>

00001f54 <fdevopen>:
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	31 f4       	brne	.+12     	; 0x1f6c <fdevopen+0x18>
    1f60:	61 15       	cp	r22, r1
    1f62:	71 05       	cpc	r23, r1
    1f64:	19 f4       	brne	.+6      	; 0x1f6c <fdevopen+0x18>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	3a c0       	rjmp	.+116    	; 0x1fe0 <fdevopen+0x8c>
    1f6c:	8b 01       	movw	r16, r22
    1f6e:	ec 01       	movw	r28, r24
    1f70:	6e e0       	ldi	r22, 0x0E	; 14
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <calloc>
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	89 2b       	or	r24, r25
    1f80:	91 f3       	breq	.-28     	; 0x1f66 <fdevopen+0x12>
    1f82:	80 e8       	ldi	r24, 0x80	; 128
    1f84:	83 83       	std	Z+3, r24	; 0x03
    1f86:	01 15       	cp	r16, r1
    1f88:	11 05       	cpc	r17, r1
    1f8a:	71 f0       	breq	.+28     	; 0x1fa8 <fdevopen+0x54>
    1f8c:	13 87       	std	Z+11, r17	; 0x0b
    1f8e:	02 87       	std	Z+10, r16	; 0x0a
    1f90:	81 e8       	ldi	r24, 0x81	; 129
    1f92:	83 83       	std	Z+3, r24	; 0x03
    1f94:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <__iob>
    1f98:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <__iob+0x1>
    1f9c:	89 2b       	or	r24, r25
    1f9e:	21 f4       	brne	.+8      	; 0x1fa8 <fdevopen+0x54>
    1fa0:	f0 93 99 04 	sts	0x0499, r31	; 0x800499 <__iob+0x1>
    1fa4:	e0 93 98 04 	sts	0x0498, r30	; 0x800498 <__iob>
    1fa8:	20 97       	sbiw	r28, 0x00	; 0
    1faa:	c9 f0       	breq	.+50     	; 0x1fde <fdevopen+0x8a>
    1fac:	d1 87       	std	Z+9, r29	; 0x09
    1fae:	c0 87       	std	Z+8, r28	; 0x08
    1fb0:	83 81       	ldd	r24, Z+3	; 0x03
    1fb2:	82 60       	ori	r24, 0x02	; 2
    1fb4:	83 83       	std	Z+3, r24	; 0x03
    1fb6:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    1fba:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    1fbe:	89 2b       	or	r24, r25
    1fc0:	71 f4       	brne	.+28     	; 0x1fde <fdevopen+0x8a>
    1fc2:	f0 93 9b 04 	sts	0x049B, r31	; 0x80049b <__iob+0x3>
    1fc6:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <__iob+0x2>
    1fca:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <__iob+0x4>
    1fce:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <__iob+0x5>
    1fd2:	89 2b       	or	r24, r25
    1fd4:	21 f4       	brne	.+8      	; 0x1fde <fdevopen+0x8a>
    1fd6:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <__iob+0x5>
    1fda:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <__iob+0x4>
    1fde:	cf 01       	movw	r24, r30
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	08 95       	ret

00001fea <printf>:
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	eb ef       	ldi	r30, 0xFB	; 251
    1ff0:	ff e0       	ldi	r31, 0x0F	; 15
    1ff2:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x20>
    1ff6:	ae 01       	movw	r20, r28
    1ff8:	4b 5f       	subi	r20, 0xFB	; 251
    1ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffc:	fa 01       	movw	r30, r20
    1ffe:	61 91       	ld	r22, Z+
    2000:	71 91       	ld	r23, Z+
    2002:	af 01       	movw	r20, r30
    2004:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    2008:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    200c:	0e 94 0b 10 	call	0x2016	; 0x2016 <vfprintf>
    2010:	e2 e0       	ldi	r30, 0x02	; 2
    2012:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x20>

00002016 <vfprintf>:
    2016:	ab e0       	ldi	r26, 0x0B	; 11
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e1 e1       	ldi	r30, 0x11	; 17
    201c:	f0 e1       	ldi	r31, 0x10	; 16
    201e:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__>
    2022:	6c 01       	movw	r12, r24
    2024:	7b 01       	movw	r14, r22
    2026:	8a 01       	movw	r16, r20
    2028:	fc 01       	movw	r30, r24
    202a:	17 82       	std	Z+7, r1	; 0x07
    202c:	16 82       	std	Z+6, r1	; 0x06
    202e:	83 81       	ldd	r24, Z+3	; 0x03
    2030:	81 ff       	sbrs	r24, 1
    2032:	cc c1       	rjmp	.+920    	; 0x23cc <vfprintf+0x3b6>
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	3c 01       	movw	r6, r24
    203a:	f6 01       	movw	r30, r12
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	f7 01       	movw	r30, r14
    2040:	93 fd       	sbrc	r25, 3
    2042:	85 91       	lpm	r24, Z+
    2044:	93 ff       	sbrs	r25, 3
    2046:	81 91       	ld	r24, Z+
    2048:	7f 01       	movw	r14, r30
    204a:	88 23       	and	r24, r24
    204c:	09 f4       	brne	.+2      	; 0x2050 <vfprintf+0x3a>
    204e:	ba c1       	rjmp	.+884    	; 0x23c4 <vfprintf+0x3ae>
    2050:	85 32       	cpi	r24, 0x25	; 37
    2052:	39 f4       	brne	.+14     	; 0x2062 <vfprintf+0x4c>
    2054:	93 fd       	sbrc	r25, 3
    2056:	85 91       	lpm	r24, Z+
    2058:	93 ff       	sbrs	r25, 3
    205a:	81 91       	ld	r24, Z+
    205c:	7f 01       	movw	r14, r30
    205e:	85 32       	cpi	r24, 0x25	; 37
    2060:	29 f4       	brne	.+10     	; 0x206c <vfprintf+0x56>
    2062:	b6 01       	movw	r22, r12
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    206a:	e7 cf       	rjmp	.-50     	; 0x203a <vfprintf+0x24>
    206c:	91 2c       	mov	r9, r1
    206e:	21 2c       	mov	r2, r1
    2070:	31 2c       	mov	r3, r1
    2072:	ff e1       	ldi	r31, 0x1F	; 31
    2074:	f3 15       	cp	r31, r3
    2076:	d8 f0       	brcs	.+54     	; 0x20ae <vfprintf+0x98>
    2078:	8b 32       	cpi	r24, 0x2B	; 43
    207a:	79 f0       	breq	.+30     	; 0x209a <vfprintf+0x84>
    207c:	38 f4       	brcc	.+14     	; 0x208c <vfprintf+0x76>
    207e:	80 32       	cpi	r24, 0x20	; 32
    2080:	79 f0       	breq	.+30     	; 0x20a0 <vfprintf+0x8a>
    2082:	83 32       	cpi	r24, 0x23	; 35
    2084:	a1 f4       	brne	.+40     	; 0x20ae <vfprintf+0x98>
    2086:	23 2d       	mov	r18, r3
    2088:	20 61       	ori	r18, 0x10	; 16
    208a:	1d c0       	rjmp	.+58     	; 0x20c6 <vfprintf+0xb0>
    208c:	8d 32       	cpi	r24, 0x2D	; 45
    208e:	61 f0       	breq	.+24     	; 0x20a8 <vfprintf+0x92>
    2090:	80 33       	cpi	r24, 0x30	; 48
    2092:	69 f4       	brne	.+26     	; 0x20ae <vfprintf+0x98>
    2094:	23 2d       	mov	r18, r3
    2096:	21 60       	ori	r18, 0x01	; 1
    2098:	16 c0       	rjmp	.+44     	; 0x20c6 <vfprintf+0xb0>
    209a:	83 2d       	mov	r24, r3
    209c:	82 60       	ori	r24, 0x02	; 2
    209e:	38 2e       	mov	r3, r24
    20a0:	e3 2d       	mov	r30, r3
    20a2:	e4 60       	ori	r30, 0x04	; 4
    20a4:	3e 2e       	mov	r3, r30
    20a6:	2a c0       	rjmp	.+84     	; 0x20fc <vfprintf+0xe6>
    20a8:	f3 2d       	mov	r31, r3
    20aa:	f8 60       	ori	r31, 0x08	; 8
    20ac:	1d c0       	rjmp	.+58     	; 0x20e8 <vfprintf+0xd2>
    20ae:	37 fc       	sbrc	r3, 7
    20b0:	2d c0       	rjmp	.+90     	; 0x210c <vfprintf+0xf6>
    20b2:	20 ed       	ldi	r18, 0xD0	; 208
    20b4:	28 0f       	add	r18, r24
    20b6:	2a 30       	cpi	r18, 0x0A	; 10
    20b8:	40 f0       	brcs	.+16     	; 0x20ca <vfprintf+0xb4>
    20ba:	8e 32       	cpi	r24, 0x2E	; 46
    20bc:	b9 f4       	brne	.+46     	; 0x20ec <vfprintf+0xd6>
    20be:	36 fc       	sbrc	r3, 6
    20c0:	81 c1       	rjmp	.+770    	; 0x23c4 <vfprintf+0x3ae>
    20c2:	23 2d       	mov	r18, r3
    20c4:	20 64       	ori	r18, 0x40	; 64
    20c6:	32 2e       	mov	r3, r18
    20c8:	19 c0       	rjmp	.+50     	; 0x20fc <vfprintf+0xe6>
    20ca:	36 fe       	sbrs	r3, 6
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <vfprintf+0xc4>
    20ce:	8a e0       	ldi	r24, 0x0A	; 10
    20d0:	98 9e       	mul	r9, r24
    20d2:	20 0d       	add	r18, r0
    20d4:	11 24       	eor	r1, r1
    20d6:	92 2e       	mov	r9, r18
    20d8:	11 c0       	rjmp	.+34     	; 0x20fc <vfprintf+0xe6>
    20da:	ea e0       	ldi	r30, 0x0A	; 10
    20dc:	2e 9e       	mul	r2, r30
    20de:	20 0d       	add	r18, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	22 2e       	mov	r2, r18
    20e4:	f3 2d       	mov	r31, r3
    20e6:	f0 62       	ori	r31, 0x20	; 32
    20e8:	3f 2e       	mov	r3, r31
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <vfprintf+0xe6>
    20ec:	8c 36       	cpi	r24, 0x6C	; 108
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <vfprintf+0xe2>
    20f0:	83 2d       	mov	r24, r3
    20f2:	80 68       	ori	r24, 0x80	; 128
    20f4:	38 2e       	mov	r3, r24
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <vfprintf+0xe6>
    20f8:	88 36       	cpi	r24, 0x68	; 104
    20fa:	41 f4       	brne	.+16     	; 0x210c <vfprintf+0xf6>
    20fc:	f7 01       	movw	r30, r14
    20fe:	93 fd       	sbrc	r25, 3
    2100:	85 91       	lpm	r24, Z+
    2102:	93 ff       	sbrs	r25, 3
    2104:	81 91       	ld	r24, Z+
    2106:	7f 01       	movw	r14, r30
    2108:	81 11       	cpse	r24, r1
    210a:	b3 cf       	rjmp	.-154    	; 0x2072 <vfprintf+0x5c>
    210c:	98 2f       	mov	r25, r24
    210e:	9f 7d       	andi	r25, 0xDF	; 223
    2110:	95 54       	subi	r25, 0x45	; 69
    2112:	93 30       	cpi	r25, 0x03	; 3
    2114:	28 f4       	brcc	.+10     	; 0x2120 <vfprintf+0x10a>
    2116:	0c 5f       	subi	r16, 0xFC	; 252
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	9f e3       	ldi	r25, 0x3F	; 63
    211c:	99 83       	std	Y+1, r25	; 0x01
    211e:	0d c0       	rjmp	.+26     	; 0x213a <vfprintf+0x124>
    2120:	83 36       	cpi	r24, 0x63	; 99
    2122:	31 f0       	breq	.+12     	; 0x2130 <vfprintf+0x11a>
    2124:	83 37       	cpi	r24, 0x73	; 115
    2126:	71 f0       	breq	.+28     	; 0x2144 <vfprintf+0x12e>
    2128:	83 35       	cpi	r24, 0x53	; 83
    212a:	09 f0       	breq	.+2      	; 0x212e <vfprintf+0x118>
    212c:	59 c0       	rjmp	.+178    	; 0x21e0 <vfprintf+0x1ca>
    212e:	21 c0       	rjmp	.+66     	; 0x2172 <vfprintf+0x15c>
    2130:	f8 01       	movw	r30, r16
    2132:	80 81       	ld	r24, Z
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	0e 5f       	subi	r16, 0xFE	; 254
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	88 24       	eor	r8, r8
    213c:	83 94       	inc	r8
    213e:	91 2c       	mov	r9, r1
    2140:	53 01       	movw	r10, r6
    2142:	13 c0       	rjmp	.+38     	; 0x216a <vfprintf+0x154>
    2144:	28 01       	movw	r4, r16
    2146:	f2 e0       	ldi	r31, 0x02	; 2
    2148:	4f 0e       	add	r4, r31
    214a:	51 1c       	adc	r5, r1
    214c:	f8 01       	movw	r30, r16
    214e:	a0 80       	ld	r10, Z
    2150:	b1 80       	ldd	r11, Z+1	; 0x01
    2152:	36 fe       	sbrs	r3, 6
    2154:	03 c0       	rjmp	.+6      	; 0x215c <vfprintf+0x146>
    2156:	69 2d       	mov	r22, r9
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <vfprintf+0x14a>
    215c:	6f ef       	ldi	r22, 0xFF	; 255
    215e:	7f ef       	ldi	r23, 0xFF	; 255
    2160:	c5 01       	movw	r24, r10
    2162:	0e 94 3b 13 	call	0x2676	; 0x2676 <strnlen>
    2166:	4c 01       	movw	r8, r24
    2168:	82 01       	movw	r16, r4
    216a:	f3 2d       	mov	r31, r3
    216c:	ff 77       	andi	r31, 0x7F	; 127
    216e:	3f 2e       	mov	r3, r31
    2170:	16 c0       	rjmp	.+44     	; 0x219e <vfprintf+0x188>
    2172:	28 01       	movw	r4, r16
    2174:	22 e0       	ldi	r18, 0x02	; 2
    2176:	42 0e       	add	r4, r18
    2178:	51 1c       	adc	r5, r1
    217a:	f8 01       	movw	r30, r16
    217c:	a0 80       	ld	r10, Z
    217e:	b1 80       	ldd	r11, Z+1	; 0x01
    2180:	36 fe       	sbrs	r3, 6
    2182:	03 c0       	rjmp	.+6      	; 0x218a <vfprintf+0x174>
    2184:	69 2d       	mov	r22, r9
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	02 c0       	rjmp	.+4      	; 0x218e <vfprintf+0x178>
    218a:	6f ef       	ldi	r22, 0xFF	; 255
    218c:	7f ef       	ldi	r23, 0xFF	; 255
    218e:	c5 01       	movw	r24, r10
    2190:	0e 94 29 13 	call	0x2652	; 0x2652 <strnlen_P>
    2194:	4c 01       	movw	r8, r24
    2196:	f3 2d       	mov	r31, r3
    2198:	f0 68       	ori	r31, 0x80	; 128
    219a:	3f 2e       	mov	r3, r31
    219c:	82 01       	movw	r16, r4
    219e:	33 fc       	sbrc	r3, 3
    21a0:	1b c0       	rjmp	.+54     	; 0x21d8 <vfprintf+0x1c2>
    21a2:	82 2d       	mov	r24, r2
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	88 16       	cp	r8, r24
    21a8:	99 06       	cpc	r9, r25
    21aa:	b0 f4       	brcc	.+44     	; 0x21d8 <vfprintf+0x1c2>
    21ac:	b6 01       	movw	r22, r12
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    21b6:	2a 94       	dec	r2
    21b8:	f4 cf       	rjmp	.-24     	; 0x21a2 <vfprintf+0x18c>
    21ba:	f5 01       	movw	r30, r10
    21bc:	37 fc       	sbrc	r3, 7
    21be:	85 91       	lpm	r24, Z+
    21c0:	37 fe       	sbrs	r3, 7
    21c2:	81 91       	ld	r24, Z+
    21c4:	5f 01       	movw	r10, r30
    21c6:	b6 01       	movw	r22, r12
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    21ce:	21 10       	cpse	r2, r1
    21d0:	2a 94       	dec	r2
    21d2:	21 e0       	ldi	r18, 0x01	; 1
    21d4:	82 1a       	sub	r8, r18
    21d6:	91 08       	sbc	r9, r1
    21d8:	81 14       	cp	r8, r1
    21da:	91 04       	cpc	r9, r1
    21dc:	71 f7       	brne	.-36     	; 0x21ba <vfprintf+0x1a4>
    21de:	e8 c0       	rjmp	.+464    	; 0x23b0 <vfprintf+0x39a>
    21e0:	84 36       	cpi	r24, 0x64	; 100
    21e2:	11 f0       	breq	.+4      	; 0x21e8 <vfprintf+0x1d2>
    21e4:	89 36       	cpi	r24, 0x69	; 105
    21e6:	41 f5       	brne	.+80     	; 0x2238 <vfprintf+0x222>
    21e8:	f8 01       	movw	r30, r16
    21ea:	37 fe       	sbrs	r3, 7
    21ec:	07 c0       	rjmp	.+14     	; 0x21fc <vfprintf+0x1e6>
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	0c 5f       	subi	r16, 0xFC	; 252
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	08 c0       	rjmp	.+16     	; 0x220c <vfprintf+0x1f6>
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	07 2e       	mov	r0, r23
    2202:	00 0c       	add	r0, r0
    2204:	88 0b       	sbc	r24, r24
    2206:	99 0b       	sbc	r25, r25
    2208:	0e 5f       	subi	r16, 0xFE	; 254
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	f3 2d       	mov	r31, r3
    220e:	ff 76       	andi	r31, 0x6F	; 111
    2210:	3f 2e       	mov	r3, r31
    2212:	97 ff       	sbrs	r25, 7
    2214:	09 c0       	rjmp	.+18     	; 0x2228 <vfprintf+0x212>
    2216:	90 95       	com	r25
    2218:	80 95       	com	r24
    221a:	70 95       	com	r23
    221c:	61 95       	neg	r22
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	8f 4f       	sbci	r24, 0xFF	; 255
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	f0 68       	ori	r31, 0x80	; 128
    2226:	3f 2e       	mov	r3, r31
    2228:	2a e0       	ldi	r18, 0x0A	; 10
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	a3 01       	movw	r20, r6
    222e:	0e 94 92 13 	call	0x2724	; 0x2724 <__ultoa_invert>
    2232:	88 2e       	mov	r8, r24
    2234:	86 18       	sub	r8, r6
    2236:	45 c0       	rjmp	.+138    	; 0x22c2 <vfprintf+0x2ac>
    2238:	85 37       	cpi	r24, 0x75	; 117
    223a:	31 f4       	brne	.+12     	; 0x2248 <vfprintf+0x232>
    223c:	23 2d       	mov	r18, r3
    223e:	2f 7e       	andi	r18, 0xEF	; 239
    2240:	b2 2e       	mov	r11, r18
    2242:	2a e0       	ldi	r18, 0x0A	; 10
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	25 c0       	rjmp	.+74     	; 0x2292 <vfprintf+0x27c>
    2248:	93 2d       	mov	r25, r3
    224a:	99 7f       	andi	r25, 0xF9	; 249
    224c:	b9 2e       	mov	r11, r25
    224e:	8f 36       	cpi	r24, 0x6F	; 111
    2250:	c1 f0       	breq	.+48     	; 0x2282 <vfprintf+0x26c>
    2252:	18 f4       	brcc	.+6      	; 0x225a <vfprintf+0x244>
    2254:	88 35       	cpi	r24, 0x58	; 88
    2256:	79 f0       	breq	.+30     	; 0x2276 <vfprintf+0x260>
    2258:	b5 c0       	rjmp	.+362    	; 0x23c4 <vfprintf+0x3ae>
    225a:	80 37       	cpi	r24, 0x70	; 112
    225c:	19 f0       	breq	.+6      	; 0x2264 <vfprintf+0x24e>
    225e:	88 37       	cpi	r24, 0x78	; 120
    2260:	21 f0       	breq	.+8      	; 0x226a <vfprintf+0x254>
    2262:	b0 c0       	rjmp	.+352    	; 0x23c4 <vfprintf+0x3ae>
    2264:	e9 2f       	mov	r30, r25
    2266:	e0 61       	ori	r30, 0x10	; 16
    2268:	be 2e       	mov	r11, r30
    226a:	b4 fe       	sbrs	r11, 4
    226c:	0d c0       	rjmp	.+26     	; 0x2288 <vfprintf+0x272>
    226e:	fb 2d       	mov	r31, r11
    2270:	f4 60       	ori	r31, 0x04	; 4
    2272:	bf 2e       	mov	r11, r31
    2274:	09 c0       	rjmp	.+18     	; 0x2288 <vfprintf+0x272>
    2276:	34 fe       	sbrs	r3, 4
    2278:	0a c0       	rjmp	.+20     	; 0x228e <vfprintf+0x278>
    227a:	29 2f       	mov	r18, r25
    227c:	26 60       	ori	r18, 0x06	; 6
    227e:	b2 2e       	mov	r11, r18
    2280:	06 c0       	rjmp	.+12     	; 0x228e <vfprintf+0x278>
    2282:	28 e0       	ldi	r18, 0x08	; 8
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	05 c0       	rjmp	.+10     	; 0x2292 <vfprintf+0x27c>
    2288:	20 e1       	ldi	r18, 0x10	; 16
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <vfprintf+0x27c>
    228e:	20 e1       	ldi	r18, 0x10	; 16
    2290:	32 e0       	ldi	r19, 0x02	; 2
    2292:	f8 01       	movw	r30, r16
    2294:	b7 fe       	sbrs	r11, 7
    2296:	07 c0       	rjmp	.+14     	; 0x22a6 <vfprintf+0x290>
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	0c 5f       	subi	r16, 0xFC	; 252
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	06 c0       	rjmp	.+12     	; 0x22b2 <vfprintf+0x29c>
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 5f       	subi	r16, 0xFE	; 254
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	a3 01       	movw	r20, r6
    22b4:	0e 94 92 13 	call	0x2724	; 0x2724 <__ultoa_invert>
    22b8:	88 2e       	mov	r8, r24
    22ba:	86 18       	sub	r8, r6
    22bc:	fb 2d       	mov	r31, r11
    22be:	ff 77       	andi	r31, 0x7F	; 127
    22c0:	3f 2e       	mov	r3, r31
    22c2:	36 fe       	sbrs	r3, 6
    22c4:	0d c0       	rjmp	.+26     	; 0x22e0 <vfprintf+0x2ca>
    22c6:	23 2d       	mov	r18, r3
    22c8:	2e 7f       	andi	r18, 0xFE	; 254
    22ca:	a2 2e       	mov	r10, r18
    22cc:	89 14       	cp	r8, r9
    22ce:	58 f4       	brcc	.+22     	; 0x22e6 <vfprintf+0x2d0>
    22d0:	34 fe       	sbrs	r3, 4
    22d2:	0b c0       	rjmp	.+22     	; 0x22ea <vfprintf+0x2d4>
    22d4:	32 fc       	sbrc	r3, 2
    22d6:	09 c0       	rjmp	.+18     	; 0x22ea <vfprintf+0x2d4>
    22d8:	83 2d       	mov	r24, r3
    22da:	8e 7e       	andi	r24, 0xEE	; 238
    22dc:	a8 2e       	mov	r10, r24
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <vfprintf+0x2d4>
    22e0:	b8 2c       	mov	r11, r8
    22e2:	a3 2c       	mov	r10, r3
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <vfprintf+0x2d6>
    22e6:	b8 2c       	mov	r11, r8
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <vfprintf+0x2d6>
    22ea:	b9 2c       	mov	r11, r9
    22ec:	a4 fe       	sbrs	r10, 4
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <vfprintf+0x2f8>
    22f0:	fe 01       	movw	r30, r28
    22f2:	e8 0d       	add	r30, r8
    22f4:	f1 1d       	adc	r31, r1
    22f6:	80 81       	ld	r24, Z
    22f8:	80 33       	cpi	r24, 0x30	; 48
    22fa:	21 f4       	brne	.+8      	; 0x2304 <vfprintf+0x2ee>
    22fc:	9a 2d       	mov	r25, r10
    22fe:	99 7e       	andi	r25, 0xE9	; 233
    2300:	a9 2e       	mov	r10, r25
    2302:	09 c0       	rjmp	.+18     	; 0x2316 <vfprintf+0x300>
    2304:	a2 fe       	sbrs	r10, 2
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <vfprintf+0x2fe>
    2308:	b3 94       	inc	r11
    230a:	b3 94       	inc	r11
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <vfprintf+0x300>
    230e:	8a 2d       	mov	r24, r10
    2310:	86 78       	andi	r24, 0x86	; 134
    2312:	09 f0       	breq	.+2      	; 0x2316 <vfprintf+0x300>
    2314:	b3 94       	inc	r11
    2316:	a3 fc       	sbrc	r10, 3
    2318:	11 c0       	rjmp	.+34     	; 0x233c <vfprintf+0x326>
    231a:	a0 fe       	sbrs	r10, 0
    231c:	06 c0       	rjmp	.+12     	; 0x232a <vfprintf+0x314>
    231e:	b2 14       	cp	r11, r2
    2320:	88 f4       	brcc	.+34     	; 0x2344 <vfprintf+0x32e>
    2322:	28 0c       	add	r2, r8
    2324:	92 2c       	mov	r9, r2
    2326:	9b 18       	sub	r9, r11
    2328:	0e c0       	rjmp	.+28     	; 0x2346 <vfprintf+0x330>
    232a:	b2 14       	cp	r11, r2
    232c:	60 f4       	brcc	.+24     	; 0x2346 <vfprintf+0x330>
    232e:	b6 01       	movw	r22, r12
    2330:	80 e2       	ldi	r24, 0x20	; 32
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2338:	b3 94       	inc	r11
    233a:	f7 cf       	rjmp	.-18     	; 0x232a <vfprintf+0x314>
    233c:	b2 14       	cp	r11, r2
    233e:	18 f4       	brcc	.+6      	; 0x2346 <vfprintf+0x330>
    2340:	2b 18       	sub	r2, r11
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <vfprintf+0x332>
    2344:	98 2c       	mov	r9, r8
    2346:	21 2c       	mov	r2, r1
    2348:	a4 fe       	sbrs	r10, 4
    234a:	10 c0       	rjmp	.+32     	; 0x236c <vfprintf+0x356>
    234c:	b6 01       	movw	r22, r12
    234e:	80 e3       	ldi	r24, 0x30	; 48
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2356:	a2 fe       	sbrs	r10, 2
    2358:	17 c0       	rjmp	.+46     	; 0x2388 <vfprintf+0x372>
    235a:	a1 fc       	sbrc	r10, 1
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <vfprintf+0x34e>
    235e:	88 e7       	ldi	r24, 0x78	; 120
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <vfprintf+0x352>
    2364:	88 e5       	ldi	r24, 0x58	; 88
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	b6 01       	movw	r22, r12
    236a:	0c c0       	rjmp	.+24     	; 0x2384 <vfprintf+0x36e>
    236c:	8a 2d       	mov	r24, r10
    236e:	86 78       	andi	r24, 0x86	; 134
    2370:	59 f0       	breq	.+22     	; 0x2388 <vfprintf+0x372>
    2372:	a1 fe       	sbrs	r10, 1
    2374:	02 c0       	rjmp	.+4      	; 0x237a <vfprintf+0x364>
    2376:	8b e2       	ldi	r24, 0x2B	; 43
    2378:	01 c0       	rjmp	.+2      	; 0x237c <vfprintf+0x366>
    237a:	80 e2       	ldi	r24, 0x20	; 32
    237c:	a7 fc       	sbrc	r10, 7
    237e:	8d e2       	ldi	r24, 0x2D	; 45
    2380:	b6 01       	movw	r22, r12
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2388:	89 14       	cp	r8, r9
    238a:	38 f4       	brcc	.+14     	; 0x239a <vfprintf+0x384>
    238c:	b6 01       	movw	r22, r12
    238e:	80 e3       	ldi	r24, 0x30	; 48
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2396:	9a 94       	dec	r9
    2398:	f7 cf       	rjmp	.-18     	; 0x2388 <vfprintf+0x372>
    239a:	8a 94       	dec	r8
    239c:	f3 01       	movw	r30, r6
    239e:	e8 0d       	add	r30, r8
    23a0:	f1 1d       	adc	r31, r1
    23a2:	80 81       	ld	r24, Z
    23a4:	b6 01       	movw	r22, r12
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    23ac:	81 10       	cpse	r8, r1
    23ae:	f5 cf       	rjmp	.-22     	; 0x239a <vfprintf+0x384>
    23b0:	22 20       	and	r2, r2
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <vfprintf+0x3a0>
    23b4:	42 ce       	rjmp	.-892    	; 0x203a <vfprintf+0x24>
    23b6:	b6 01       	movw	r22, r12
    23b8:	80 e2       	ldi	r24, 0x20	; 32
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    23c0:	2a 94       	dec	r2
    23c2:	f6 cf       	rjmp	.-20     	; 0x23b0 <vfprintf+0x39a>
    23c4:	f6 01       	movw	r30, r12
    23c6:	86 81       	ldd	r24, Z+6	; 0x06
    23c8:	97 81       	ldd	r25, Z+7	; 0x07
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <vfprintf+0x3ba>
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	9f ef       	ldi	r25, 0xFF	; 255
    23d0:	2b 96       	adiw	r28, 0x0b	; 11
    23d2:	e2 e1       	ldi	r30, 0x12	; 18
    23d4:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__>

000023d8 <calloc>:
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	86 9f       	mul	r24, r22
    23e2:	80 01       	movw	r16, r0
    23e4:	87 9f       	mul	r24, r23
    23e6:	10 0d       	add	r17, r0
    23e8:	96 9f       	mul	r25, r22
    23ea:	10 0d       	add	r17, r0
    23ec:	11 24       	eor	r1, r1
    23ee:	c8 01       	movw	r24, r16
    23f0:	0e 94 08 12 	call	0x2410	; 0x2410 <malloc>
    23f4:	ec 01       	movw	r28, r24
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	29 f0       	breq	.+10     	; 0x2404 <calloc+0x2c>
    23fa:	a8 01       	movw	r20, r16
    23fc:	60 e0       	ldi	r22, 0x00	; 0
    23fe:	70 e0       	ldi	r23, 0x00	; 0
    2400:	0e 94 34 13 	call	0x2668	; 0x2668 <memset>
    2404:	ce 01       	movw	r24, r28
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	08 95       	ret

00002410 <malloc>:
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	82 30       	cpi	r24, 0x02	; 2
    241a:	91 05       	cpc	r25, r1
    241c:	10 f4       	brcc	.+4      	; 0x2422 <malloc+0x12>
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <__flp>
    2426:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <__flp+0x1>
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	a0 e0       	ldi	r26, 0x00	; 0
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	30 97       	sbiw	r30, 0x00	; 0
    2434:	19 f1       	breq	.+70     	; 0x247c <malloc+0x6c>
    2436:	40 81       	ld	r20, Z
    2438:	51 81       	ldd	r21, Z+1	; 0x01
    243a:	02 81       	ldd	r16, Z+2	; 0x02
    243c:	13 81       	ldd	r17, Z+3	; 0x03
    243e:	48 17       	cp	r20, r24
    2440:	59 07       	cpc	r21, r25
    2442:	c8 f0       	brcs	.+50     	; 0x2476 <malloc+0x66>
    2444:	84 17       	cp	r24, r20
    2446:	95 07       	cpc	r25, r21
    2448:	69 f4       	brne	.+26     	; 0x2464 <malloc+0x54>
    244a:	10 97       	sbiw	r26, 0x00	; 0
    244c:	31 f0       	breq	.+12     	; 0x245a <malloc+0x4a>
    244e:	12 96       	adiw	r26, 0x02	; 2
    2450:	0c 93       	st	X, r16
    2452:	12 97       	sbiw	r26, 0x02	; 2
    2454:	13 96       	adiw	r26, 0x03	; 3
    2456:	1c 93       	st	X, r17
    2458:	27 c0       	rjmp	.+78     	; 0x24a8 <malloc+0x98>
    245a:	00 93 a0 04 	sts	0x04A0, r16	; 0x8004a0 <__flp>
    245e:	10 93 a1 04 	sts	0x04A1, r17	; 0x8004a1 <__flp+0x1>
    2462:	22 c0       	rjmp	.+68     	; 0x24a8 <malloc+0x98>
    2464:	21 15       	cp	r18, r1
    2466:	31 05       	cpc	r19, r1
    2468:	19 f0       	breq	.+6      	; 0x2470 <malloc+0x60>
    246a:	42 17       	cp	r20, r18
    246c:	53 07       	cpc	r21, r19
    246e:	18 f4       	brcc	.+6      	; 0x2476 <malloc+0x66>
    2470:	9a 01       	movw	r18, r20
    2472:	bd 01       	movw	r22, r26
    2474:	ef 01       	movw	r28, r30
    2476:	df 01       	movw	r26, r30
    2478:	f8 01       	movw	r30, r16
    247a:	db cf       	rjmp	.-74     	; 0x2432 <malloc+0x22>
    247c:	21 15       	cp	r18, r1
    247e:	31 05       	cpc	r19, r1
    2480:	f9 f0       	breq	.+62     	; 0x24c0 <malloc+0xb0>
    2482:	28 1b       	sub	r18, r24
    2484:	39 0b       	sbc	r19, r25
    2486:	24 30       	cpi	r18, 0x04	; 4
    2488:	31 05       	cpc	r19, r1
    248a:	80 f4       	brcc	.+32     	; 0x24ac <malloc+0x9c>
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	9b 81       	ldd	r25, Y+3	; 0x03
    2490:	61 15       	cp	r22, r1
    2492:	71 05       	cpc	r23, r1
    2494:	21 f0       	breq	.+8      	; 0x249e <malloc+0x8e>
    2496:	fb 01       	movw	r30, r22
    2498:	93 83       	std	Z+3, r25	; 0x03
    249a:	82 83       	std	Z+2, r24	; 0x02
    249c:	04 c0       	rjmp	.+8      	; 0x24a6 <malloc+0x96>
    249e:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__flp+0x1>
    24a2:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__flp>
    24a6:	fe 01       	movw	r30, r28
    24a8:	32 96       	adiw	r30, 0x02	; 2
    24aa:	44 c0       	rjmp	.+136    	; 0x2534 <malloc+0x124>
    24ac:	fe 01       	movw	r30, r28
    24ae:	e2 0f       	add	r30, r18
    24b0:	f3 1f       	adc	r31, r19
    24b2:	81 93       	st	Z+, r24
    24b4:	91 93       	st	Z+, r25
    24b6:	22 50       	subi	r18, 0x02	; 2
    24b8:	31 09       	sbc	r19, r1
    24ba:	39 83       	std	Y+1, r19	; 0x01
    24bc:	28 83       	st	Y, r18
    24be:	3a c0       	rjmp	.+116    	; 0x2534 <malloc+0x124>
    24c0:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    24c4:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    24c8:	23 2b       	or	r18, r19
    24ca:	41 f4       	brne	.+16     	; 0x24dc <malloc+0xcc>
    24cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    24d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    24d4:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <__brkval+0x1>
    24d8:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <__brkval>
    24dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    24e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    24e4:	21 15       	cp	r18, r1
    24e6:	31 05       	cpc	r19, r1
    24e8:	41 f4       	brne	.+16     	; 0x24fa <malloc+0xea>
    24ea:	2d b7       	in	r18, 0x3d	; 61
    24ec:	3e b7       	in	r19, 0x3e	; 62
    24ee:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    24f2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    24f6:	24 1b       	sub	r18, r20
    24f8:	35 0b       	sbc	r19, r21
    24fa:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <__brkval>
    24fe:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <__brkval+0x1>
    2502:	e2 17       	cp	r30, r18
    2504:	f3 07       	cpc	r31, r19
    2506:	a0 f4       	brcc	.+40     	; 0x2530 <malloc+0x120>
    2508:	2e 1b       	sub	r18, r30
    250a:	3f 0b       	sbc	r19, r31
    250c:	28 17       	cp	r18, r24
    250e:	39 07       	cpc	r19, r25
    2510:	78 f0       	brcs	.+30     	; 0x2530 <malloc+0x120>
    2512:	ac 01       	movw	r20, r24
    2514:	4e 5f       	subi	r20, 0xFE	; 254
    2516:	5f 4f       	sbci	r21, 0xFF	; 255
    2518:	24 17       	cp	r18, r20
    251a:	35 07       	cpc	r19, r21
    251c:	48 f0       	brcs	.+18     	; 0x2530 <malloc+0x120>
    251e:	4e 0f       	add	r20, r30
    2520:	5f 1f       	adc	r21, r31
    2522:	50 93 9f 04 	sts	0x049F, r21	; 0x80049f <__brkval+0x1>
    2526:	40 93 9e 04 	sts	0x049E, r20	; 0x80049e <__brkval>
    252a:	81 93       	st	Z+, r24
    252c:	91 93       	st	Z+, r25
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <malloc+0x124>
    2530:	e0 e0       	ldi	r30, 0x00	; 0
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	cf 01       	movw	r24, r30
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	08 95       	ret

00002540 <free>:
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	09 f4       	brne	.+2      	; 0x254a <free+0xa>
    2548:	81 c0       	rjmp	.+258    	; 0x264c <free+0x10c>
    254a:	fc 01       	movw	r30, r24
    254c:	32 97       	sbiw	r30, 0x02	; 2
    254e:	13 82       	std	Z+3, r1	; 0x03
    2550:	12 82       	std	Z+2, r1	; 0x02
    2552:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <__flp>
    2556:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <__flp+0x1>
    255a:	10 97       	sbiw	r26, 0x00	; 0
    255c:	81 f4       	brne	.+32     	; 0x257e <free+0x3e>
    255e:	20 81       	ld	r18, Z
    2560:	31 81       	ldd	r19, Z+1	; 0x01
    2562:	82 0f       	add	r24, r18
    2564:	93 1f       	adc	r25, r19
    2566:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    256a:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    256e:	28 17       	cp	r18, r24
    2570:	39 07       	cpc	r19, r25
    2572:	51 f5       	brne	.+84     	; 0x25c8 <free+0x88>
    2574:	f0 93 9f 04 	sts	0x049F, r31	; 0x80049f <__brkval+0x1>
    2578:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <__brkval>
    257c:	67 c0       	rjmp	.+206    	; 0x264c <free+0x10c>
    257e:	ed 01       	movw	r28, r26
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	ce 17       	cp	r28, r30
    2586:	df 07       	cpc	r29, r31
    2588:	40 f4       	brcc	.+16     	; 0x259a <free+0x5a>
    258a:	4a 81       	ldd	r20, Y+2	; 0x02
    258c:	5b 81       	ldd	r21, Y+3	; 0x03
    258e:	9e 01       	movw	r18, r28
    2590:	41 15       	cp	r20, r1
    2592:	51 05       	cpc	r21, r1
    2594:	f1 f0       	breq	.+60     	; 0x25d2 <free+0x92>
    2596:	ea 01       	movw	r28, r20
    2598:	f5 cf       	rjmp	.-22     	; 0x2584 <free+0x44>
    259a:	d3 83       	std	Z+3, r29	; 0x03
    259c:	c2 83       	std	Z+2, r28	; 0x02
    259e:	40 81       	ld	r20, Z
    25a0:	51 81       	ldd	r21, Z+1	; 0x01
    25a2:	84 0f       	add	r24, r20
    25a4:	95 1f       	adc	r25, r21
    25a6:	c8 17       	cp	r28, r24
    25a8:	d9 07       	cpc	r29, r25
    25aa:	59 f4       	brne	.+22     	; 0x25c2 <free+0x82>
    25ac:	88 81       	ld	r24, Y
    25ae:	99 81       	ldd	r25, Y+1	; 0x01
    25b0:	84 0f       	add	r24, r20
    25b2:	95 1f       	adc	r25, r21
    25b4:	02 96       	adiw	r24, 0x02	; 2
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	93 83       	std	Z+3, r25	; 0x03
    25c0:	82 83       	std	Z+2, r24	; 0x02
    25c2:	21 15       	cp	r18, r1
    25c4:	31 05       	cpc	r19, r1
    25c6:	29 f4       	brne	.+10     	; 0x25d2 <free+0x92>
    25c8:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <__flp+0x1>
    25cc:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <__flp>
    25d0:	3d c0       	rjmp	.+122    	; 0x264c <free+0x10c>
    25d2:	e9 01       	movw	r28, r18
    25d4:	fb 83       	std	Y+3, r31	; 0x03
    25d6:	ea 83       	std	Y+2, r30	; 0x02
    25d8:	49 91       	ld	r20, Y+
    25da:	59 91       	ld	r21, Y+
    25dc:	c4 0f       	add	r28, r20
    25de:	d5 1f       	adc	r29, r21
    25e0:	ec 17       	cp	r30, r28
    25e2:	fd 07       	cpc	r31, r29
    25e4:	61 f4       	brne	.+24     	; 0x25fe <free+0xbe>
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	84 0f       	add	r24, r20
    25ec:	95 1f       	adc	r25, r21
    25ee:	02 96       	adiw	r24, 0x02	; 2
    25f0:	e9 01       	movw	r28, r18
    25f2:	99 83       	std	Y+1, r25	; 0x01
    25f4:	88 83       	st	Y, r24
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	9b 83       	std	Y+3, r25	; 0x03
    25fc:	8a 83       	std	Y+2, r24	; 0x02
    25fe:	e0 e0       	ldi	r30, 0x00	; 0
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	12 96       	adiw	r26, 0x02	; 2
    2604:	8d 91       	ld	r24, X+
    2606:	9c 91       	ld	r25, X
    2608:	13 97       	sbiw	r26, 0x03	; 3
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	19 f0       	breq	.+6      	; 0x2614 <free+0xd4>
    260e:	fd 01       	movw	r30, r26
    2610:	dc 01       	movw	r26, r24
    2612:	f7 cf       	rjmp	.-18     	; 0x2602 <free+0xc2>
    2614:	8d 91       	ld	r24, X+
    2616:	9c 91       	ld	r25, X
    2618:	11 97       	sbiw	r26, 0x01	; 1
    261a:	9d 01       	movw	r18, r26
    261c:	2e 5f       	subi	r18, 0xFE	; 254
    261e:	3f 4f       	sbci	r19, 0xFF	; 255
    2620:	82 0f       	add	r24, r18
    2622:	93 1f       	adc	r25, r19
    2624:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    2628:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    262c:	28 17       	cp	r18, r24
    262e:	39 07       	cpc	r19, r25
    2630:	69 f4       	brne	.+26     	; 0x264c <free+0x10c>
    2632:	30 97       	sbiw	r30, 0x00	; 0
    2634:	29 f4       	brne	.+10     	; 0x2640 <free+0x100>
    2636:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <__flp+0x1>
    263a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__flp>
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <free+0x104>
    2640:	13 82       	std	Z+3, r1	; 0x03
    2642:	12 82       	std	Z+2, r1	; 0x02
    2644:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <__brkval+0x1>
    2648:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <__brkval>
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	08 95       	ret

00002652 <strnlen_P>:
    2652:	fc 01       	movw	r30, r24
    2654:	05 90       	lpm	r0, Z+
    2656:	61 50       	subi	r22, 0x01	; 1
    2658:	70 40       	sbci	r23, 0x00	; 0
    265a:	01 10       	cpse	r0, r1
    265c:	d8 f7       	brcc	.-10     	; 0x2654 <strnlen_P+0x2>
    265e:	80 95       	com	r24
    2660:	90 95       	com	r25
    2662:	8e 0f       	add	r24, r30
    2664:	9f 1f       	adc	r25, r31
    2666:	08 95       	ret

00002668 <memset>:
    2668:	dc 01       	movw	r26, r24
    266a:	01 c0       	rjmp	.+2      	; 0x266e <memset+0x6>
    266c:	6d 93       	st	X+, r22
    266e:	41 50       	subi	r20, 0x01	; 1
    2670:	50 40       	sbci	r21, 0x00	; 0
    2672:	e0 f7       	brcc	.-8      	; 0x266c <memset+0x4>
    2674:	08 95       	ret

00002676 <strnlen>:
    2676:	fc 01       	movw	r30, r24
    2678:	61 50       	subi	r22, 0x01	; 1
    267a:	70 40       	sbci	r23, 0x00	; 0
    267c:	01 90       	ld	r0, Z+
    267e:	01 10       	cpse	r0, r1
    2680:	d8 f7       	brcc	.-10     	; 0x2678 <strnlen+0x2>
    2682:	80 95       	com	r24
    2684:	90 95       	com	r25
    2686:	8e 0f       	add	r24, r30
    2688:	9f 1f       	adc	r25, r31
    268a:	08 95       	ret

0000268c <strrev>:
    268c:	dc 01       	movw	r26, r24
    268e:	fc 01       	movw	r30, r24
    2690:	67 2f       	mov	r22, r23
    2692:	71 91       	ld	r23, Z+
    2694:	77 23       	and	r23, r23
    2696:	e1 f7       	brne	.-8      	; 0x2690 <strrev+0x4>
    2698:	32 97       	sbiw	r30, 0x02	; 2
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <strrev+0x18>
    269c:	7c 91       	ld	r23, X
    269e:	6d 93       	st	X+, r22
    26a0:	70 83       	st	Z, r23
    26a2:	62 91       	ld	r22, -Z
    26a4:	ae 17       	cp	r26, r30
    26a6:	bf 07       	cpc	r27, r31
    26a8:	c8 f3       	brcs	.-14     	; 0x269c <strrev+0x10>
    26aa:	08 95       	ret

000026ac <fputc>:
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	fb 01       	movw	r30, r22
    26b6:	23 81       	ldd	r18, Z+3	; 0x03
    26b8:	21 fd       	sbrc	r18, 1
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <fputc+0x16>
    26bc:	8f ef       	ldi	r24, 0xFF	; 255
    26be:	9f ef       	ldi	r25, 0xFF	; 255
    26c0:	2c c0       	rjmp	.+88     	; 0x271a <fputc+0x6e>
    26c2:	22 ff       	sbrs	r18, 2
    26c4:	16 c0       	rjmp	.+44     	; 0x26f2 <fputc+0x46>
    26c6:	46 81       	ldd	r20, Z+6	; 0x06
    26c8:	57 81       	ldd	r21, Z+7	; 0x07
    26ca:	24 81       	ldd	r18, Z+4	; 0x04
    26cc:	35 81       	ldd	r19, Z+5	; 0x05
    26ce:	42 17       	cp	r20, r18
    26d0:	53 07       	cpc	r21, r19
    26d2:	44 f4       	brge	.+16     	; 0x26e4 <fputc+0x38>
    26d4:	a0 81       	ld	r26, Z
    26d6:	b1 81       	ldd	r27, Z+1	; 0x01
    26d8:	9d 01       	movw	r18, r26
    26da:	2f 5f       	subi	r18, 0xFF	; 255
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	31 83       	std	Z+1, r19	; 0x01
    26e0:	20 83       	st	Z, r18
    26e2:	8c 93       	st	X, r24
    26e4:	26 81       	ldd	r18, Z+6	; 0x06
    26e6:	37 81       	ldd	r19, Z+7	; 0x07
    26e8:	2f 5f       	subi	r18, 0xFF	; 255
    26ea:	3f 4f       	sbci	r19, 0xFF	; 255
    26ec:	37 83       	std	Z+7, r19	; 0x07
    26ee:	26 83       	std	Z+6, r18	; 0x06
    26f0:	14 c0       	rjmp	.+40     	; 0x271a <fputc+0x6e>
    26f2:	8b 01       	movw	r16, r22
    26f4:	ec 01       	movw	r28, r24
    26f6:	fb 01       	movw	r30, r22
    26f8:	00 84       	ldd	r0, Z+8	; 0x08
    26fa:	f1 85       	ldd	r31, Z+9	; 0x09
    26fc:	e0 2d       	mov	r30, r0
    26fe:	09 95       	icall
    2700:	89 2b       	or	r24, r25
    2702:	e1 f6       	brne	.-72     	; 0x26bc <fputc+0x10>
    2704:	d8 01       	movw	r26, r16
    2706:	16 96       	adiw	r26, 0x06	; 6
    2708:	8d 91       	ld	r24, X+
    270a:	9c 91       	ld	r25, X
    270c:	17 97       	sbiw	r26, 0x07	; 7
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	17 96       	adiw	r26, 0x07	; 7
    2712:	9c 93       	st	X, r25
    2714:	8e 93       	st	-X, r24
    2716:	16 97       	sbiw	r26, 0x06	; 6
    2718:	ce 01       	movw	r24, r28
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	08 95       	ret

00002724 <__ultoa_invert>:
    2724:	fa 01       	movw	r30, r20
    2726:	aa 27       	eor	r26, r26
    2728:	28 30       	cpi	r18, 0x08	; 8
    272a:	51 f1       	breq	.+84     	; 0x2780 <__ultoa_invert+0x5c>
    272c:	20 31       	cpi	r18, 0x10	; 16
    272e:	81 f1       	breq	.+96     	; 0x2790 <__ultoa_invert+0x6c>
    2730:	e8 94       	clt
    2732:	6f 93       	push	r22
    2734:	6e 7f       	andi	r22, 0xFE	; 254
    2736:	6e 5f       	subi	r22, 0xFE	; 254
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	8f 4f       	sbci	r24, 0xFF	; 255
    273c:	9f 4f       	sbci	r25, 0xFF	; 255
    273e:	af 4f       	sbci	r26, 0xFF	; 255
    2740:	b1 e0       	ldi	r27, 0x01	; 1
    2742:	3e d0       	rcall	.+124    	; 0x27c0 <__ultoa_invert+0x9c>
    2744:	b4 e0       	ldi	r27, 0x04	; 4
    2746:	3c d0       	rcall	.+120    	; 0x27c0 <__ultoa_invert+0x9c>
    2748:	67 0f       	add	r22, r23
    274a:	78 1f       	adc	r23, r24
    274c:	89 1f       	adc	r24, r25
    274e:	9a 1f       	adc	r25, r26
    2750:	a1 1d       	adc	r26, r1
    2752:	68 0f       	add	r22, r24
    2754:	79 1f       	adc	r23, r25
    2756:	8a 1f       	adc	r24, r26
    2758:	91 1d       	adc	r25, r1
    275a:	a1 1d       	adc	r26, r1
    275c:	6a 0f       	add	r22, r26
    275e:	71 1d       	adc	r23, r1
    2760:	81 1d       	adc	r24, r1
    2762:	91 1d       	adc	r25, r1
    2764:	a1 1d       	adc	r26, r1
    2766:	20 d0       	rcall	.+64     	; 0x27a8 <__ultoa_invert+0x84>
    2768:	09 f4       	brne	.+2      	; 0x276c <__ultoa_invert+0x48>
    276a:	68 94       	set
    276c:	3f 91       	pop	r19
    276e:	2a e0       	ldi	r18, 0x0A	; 10
    2770:	26 9f       	mul	r18, r22
    2772:	11 24       	eor	r1, r1
    2774:	30 19       	sub	r19, r0
    2776:	30 5d       	subi	r19, 0xD0	; 208
    2778:	31 93       	st	Z+, r19
    277a:	de f6       	brtc	.-74     	; 0x2732 <__ultoa_invert+0xe>
    277c:	cf 01       	movw	r24, r30
    277e:	08 95       	ret
    2780:	46 2f       	mov	r20, r22
    2782:	47 70       	andi	r20, 0x07	; 7
    2784:	40 5d       	subi	r20, 0xD0	; 208
    2786:	41 93       	st	Z+, r20
    2788:	b3 e0       	ldi	r27, 0x03	; 3
    278a:	0f d0       	rcall	.+30     	; 0x27aa <__ultoa_invert+0x86>
    278c:	c9 f7       	brne	.-14     	; 0x2780 <__ultoa_invert+0x5c>
    278e:	f6 cf       	rjmp	.-20     	; 0x277c <__ultoa_invert+0x58>
    2790:	46 2f       	mov	r20, r22
    2792:	4f 70       	andi	r20, 0x0F	; 15
    2794:	40 5d       	subi	r20, 0xD0	; 208
    2796:	4a 33       	cpi	r20, 0x3A	; 58
    2798:	18 f0       	brcs	.+6      	; 0x27a0 <__ultoa_invert+0x7c>
    279a:	49 5d       	subi	r20, 0xD9	; 217
    279c:	31 fd       	sbrc	r19, 1
    279e:	40 52       	subi	r20, 0x20	; 32
    27a0:	41 93       	st	Z+, r20
    27a2:	02 d0       	rcall	.+4      	; 0x27a8 <__ultoa_invert+0x84>
    27a4:	a9 f7       	brne	.-22     	; 0x2790 <__ultoa_invert+0x6c>
    27a6:	ea cf       	rjmp	.-44     	; 0x277c <__ultoa_invert+0x58>
    27a8:	b4 e0       	ldi	r27, 0x04	; 4
    27aa:	a6 95       	lsr	r26
    27ac:	97 95       	ror	r25
    27ae:	87 95       	ror	r24
    27b0:	77 95       	ror	r23
    27b2:	67 95       	ror	r22
    27b4:	ba 95       	dec	r27
    27b6:	c9 f7       	brne	.-14     	; 0x27aa <__ultoa_invert+0x86>
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	61 05       	cpc	r22, r1
    27bc:	71 05       	cpc	r23, r1
    27be:	08 95       	ret
    27c0:	9b 01       	movw	r18, r22
    27c2:	ac 01       	movw	r20, r24
    27c4:	0a 2e       	mov	r0, r26
    27c6:	06 94       	lsr	r0
    27c8:	57 95       	ror	r21
    27ca:	47 95       	ror	r20
    27cc:	37 95       	ror	r19
    27ce:	27 95       	ror	r18
    27d0:	ba 95       	dec	r27
    27d2:	c9 f7       	brne	.-14     	; 0x27c6 <__ultoa_invert+0xa2>
    27d4:	62 0f       	add	r22, r18
    27d6:	73 1f       	adc	r23, r19
    27d8:	84 1f       	adc	r24, r20
    27da:	95 1f       	adc	r25, r21
    27dc:	a0 1d       	adc	r26, r0
    27de:	08 95       	ret

000027e0 <__prologue_saves__>:
    27e0:	2f 92       	push	r2
    27e2:	3f 92       	push	r3
    27e4:	4f 92       	push	r4
    27e6:	5f 92       	push	r5
    27e8:	6f 92       	push	r6
    27ea:	7f 92       	push	r7
    27ec:	8f 92       	push	r8
    27ee:	9f 92       	push	r9
    27f0:	af 92       	push	r10
    27f2:	bf 92       	push	r11
    27f4:	cf 92       	push	r12
    27f6:	df 92       	push	r13
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	ca 1b       	sub	r28, r26
    280a:	db 0b       	sbc	r29, r27
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	09 94       	ijmp

00002818 <__epilogue_restores__>:
    2818:	2a 88       	ldd	r2, Y+18	; 0x12
    281a:	39 88       	ldd	r3, Y+17	; 0x11
    281c:	48 88       	ldd	r4, Y+16	; 0x10
    281e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2820:	6e 84       	ldd	r6, Y+14	; 0x0e
    2822:	7d 84       	ldd	r7, Y+13	; 0x0d
    2824:	8c 84       	ldd	r8, Y+12	; 0x0c
    2826:	9b 84       	ldd	r9, Y+11	; 0x0b
    2828:	aa 84       	ldd	r10, Y+10	; 0x0a
    282a:	b9 84       	ldd	r11, Y+9	; 0x09
    282c:	c8 84       	ldd	r12, Y+8	; 0x08
    282e:	df 80       	ldd	r13, Y+7	; 0x07
    2830:	ee 80       	ldd	r14, Y+6	; 0x06
    2832:	fd 80       	ldd	r15, Y+5	; 0x05
    2834:	0c 81       	ldd	r16, Y+4	; 0x04
    2836:	1b 81       	ldd	r17, Y+3	; 0x03
    2838:	aa 81       	ldd	r26, Y+2	; 0x02
    283a:	b9 81       	ldd	r27, Y+1	; 0x01
    283c:	ce 0f       	add	r28, r30
    283e:	d1 1d       	adc	r29, r1
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	ed 01       	movw	r28, r26
    284c:	08 95       	ret

0000284e <_exit>:
    284e:	f8 94       	cli

00002850 <__stop_program>:
    2850:	ff cf       	rjmp	.-2      	; 0x2850 <__stop_program>
