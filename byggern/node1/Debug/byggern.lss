
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000264  00800100  00002928  000029bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002928  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800364  00800364  00002c20  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000053ed  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dea  00000000  00000000  0000849d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002216  00000000  00000000  0000a287  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000944  00000000  00000000  0000c4a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d0e  00000000  00000000  0000cde4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a2  00000000  00000000  0000daf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000fd94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	13 e0       	ldi	r17, 0x03	; 3
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	e8 e2       	ldi	r30, 0x28	; 40
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 36       	cpi	r26, 0x64	; 100
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a4 e6       	ldi	r26, 0x64	; 100
     548:	b3 e0       	ldi	r27, 0x03	; 3
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a2 3a       	cpi	r26, 0xA2	; 162
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 92 14 	jmp	0x2924	; 0x2924 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xf5e>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xf5e>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "timer.h"
#include "CAN_controller.h"
#include "MCP2515.h"
#include "CAN.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
//p.23 for can read instructions
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 07 0c 	call	0x180e	; 0x180e <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     5aa:	87 e5       	ldi	r24, 0x57	; 87
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>
	printf("---------------------------------------\n\r");
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x4e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x58>
     5ea:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 d7 04 	call	0x9ae	; 0x9ae <CAN_controller_setMode>
     5f2:	af ef       	ldi	r26, 0xFF	; 255
     5f4:	bf e7       	ldi	r27, 0x7F	; 127
     5f6:	27 e0       	ldi	r18, 0x07	; 7
     5f8:	a1 50       	subi	r26, 0x01	; 1
     5fa:	b0 40       	sbci	r27, 0x00	; 0
     5fc:	20 40       	sbci	r18, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x66>
     600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x70>
     602:	00 00       	nop
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     60c:	0b e6       	ldi	r16, 0x6B	; 107
     60e:	13 e0       	ldi	r17, 0x03	; 3
	_delay_ms(500);
	//test_SRAM();            
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     610:	0e 94 57 09 	call	0x12ae	; 0x12ae <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     614:	d8 01       	movw	r26, r16
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	80 81       	ld	r24, Z
     61c:	85 30       	cpi	r24, 0x05	; 5
     61e:	99 f0       	breq	.+38     	; 0x646 <main+0xb4>
     620:	28 f4       	brcc	.+10     	; 0x62c <main+0x9a>
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	41 f0       	breq	.+16     	; 0x636 <main+0xa4>
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	49 f0       	breq	.+18     	; 0x63c <main+0xaa>
     62a:	f2 cf       	rjmp	.-28     	; 0x610 <main+0x7e>
     62c:	86 30       	cpi	r24, 0x06	; 6
     62e:	81 f0       	breq	.+32     	; 0x650 <main+0xbe>
     630:	87 30       	cpi	r24, 0x07	; 7
     632:	99 f0       	breq	.+38     	; 0x65a <main+0xc8>
     634:	ed cf       	rjmp	.-38     	; 0x610 <main+0x7e>
			case MAIN_MENU:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     636:	0e 94 19 08 	call	0x1032	; 0x1032 <music_playRick>
				break;
     63a:	ea cf       	rjmp	.-44     	; 0x610 <main+0x7e>
			case GAME_1:
				game_play(1);
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 79 07 	call	0xef2	; 0xef2 <game_play>
				break;
     644:	e5 cf       	rjmp	.-54     	; 0x610 <main+0x7e>
			case GAME_2:
				game_play(2);
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 79 07 	call	0xef2	; 0xef2 <game_play>
				break;
     64e:	e0 cf       	rjmp	.-64     	; 0x610 <main+0x7e>
			case HS1:
				game_displayHighscores(1);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 a6 07 	call	0xf4c	; 0xf4c <game_displayHighscores>
				break;
     658:	db cf       	rjmp	.-74     	; 0x610 <main+0x7e>
			case HS2:
				game_displayHighscores(2);
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <game_displayHighscores>
				break;
     662:	d6 cf       	rjmp	.-84     	; 0x610 <main+0x7e>

00000664 <CAN_init>:
#define F_CPU 4915200
#include <util/delay.h>


void CAN_init() {
	CAN_controller_init();
     664:	0e 94 2a 05 	call	0xa54	; 0xa54 <CAN_controller_init>
     668:	08 95       	ret

0000066a <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	6c e2       	ldi	r22, 0x2C	; 44
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
     674:	08 95       	ret

00000676 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     67e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     682:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	63 e0       	ldi	r22, 0x03	; 3
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodhi4>
     690:	28 2f       	mov	r18, r24
     692:	39 2f       	mov	r19, r25
     694:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <__data_end>
     698:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <__data_end+0x1>
	
	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     69c:	21 30       	cpi	r18, 0x01	; 1
     69e:	31 05       	cpc	r19, r1
     6a0:	e9 f0       	breq	.+58     	; 0x6dc <CAN_transmit_message+0x66>
     6a2:	22 30       	cpi	r18, 0x02	; 2
     6a4:	31 05       	cpc	r19, r1
     6a6:	89 f1       	breq	.+98     	; 0x70a <CAN_transmit_message+0x94>
     6a8:	23 2b       	or	r18, r19
     6aa:	09 f0       	breq	.+2      	; 0x6ae <CAN_transmit_message+0x38>
     6ac:	44 c0       	rjmp	.+136    	; 0x736 <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6ae:	f8 01       	movw	r30, r16
     6b0:	40 85       	ldd	r20, Z+8	; 0x08
     6b2:	51 85       	ldd	r21, Z+9	; 0x09
     6b4:	42 95       	swap	r20
     6b6:	44 0f       	add	r20, r20
     6b8:	40 7e       	andi	r20, 0xE0	; 224
     6ba:	62 e3       	ldi	r22, 0x32	; 50
     6bc:	80 ee       	ldi	r24, 0xE0	; 224
     6be:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6c2:	f8 01       	movw	r30, r16
     6c4:	60 85       	ldd	r22, Z+8	; 0x08
     6c6:	71 85       	ldd	r23, Z+9	; 0x09
     6c8:	76 95       	lsr	r23
     6ca:	67 95       	ror	r22
     6cc:	76 95       	lsr	r23
     6ce:	67 95       	ror	r22
     6d0:	76 95       	lsr	r23
     6d2:	67 95       	ror	r22
     6d4:	81 e3       	ldi	r24, 0x31	; 49
     6d6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     6da:	2d c0       	rjmp	.+90     	; 0x736 <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6dc:	f8 01       	movw	r30, r16
     6de:	40 85       	ldd	r20, Z+8	; 0x08
     6e0:	51 85       	ldd	r21, Z+9	; 0x09
     6e2:	42 95       	swap	r20
     6e4:	44 0f       	add	r20, r20
     6e6:	40 7e       	andi	r20, 0xE0	; 224
     6e8:	62 e4       	ldi	r22, 0x42	; 66
     6ea:	80 ee       	ldi	r24, 0xE0	; 224
     6ec:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     6f0:	f8 01       	movw	r30, r16
     6f2:	60 85       	ldd	r22, Z+8	; 0x08
     6f4:	71 85       	ldd	r23, Z+9	; 0x09
     6f6:	76 95       	lsr	r23
     6f8:	67 95       	ror	r22
     6fa:	76 95       	lsr	r23
     6fc:	67 95       	ror	r22
     6fe:	76 95       	lsr	r23
     700:	67 95       	ror	r22
     702:	81 e4       	ldi	r24, 0x41	; 65
     704:	0e 94 70 04 	call	0x8e0	; 0x8e0 <CAN_controller_write>
				
				break;
     708:	16 c0       	rjmp	.+44     	; 0x736 <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     70a:	f8 01       	movw	r30, r16
     70c:	40 85       	ldd	r20, Z+8	; 0x08
     70e:	51 85       	ldd	r21, Z+9	; 0x09
     710:	42 95       	swap	r20
     712:	44 0f       	add	r20, r20
     714:	40 7e       	andi	r20, 0xE0	; 224
     716:	62 e5       	ldi	r22, 0x52	; 82
     718:	80 ee       	ldi	r24, 0xE0	; 224
     71a:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     71e:	f8 01       	movw	r30, r16
     720:	60 85       	ldd	r22, Z+8	; 0x08
     722:	71 85       	ldd	r23, Z+9	; 0x09
     724:	76 95       	lsr	r23
     726:	67 95       	ror	r22
     728:	76 95       	lsr	r23
     72a:	67 95       	ror	r22
     72c:	76 95       	lsr	r23
     72e:	67 95       	ror	r22
     730:	81 e5       	ldi	r24, 0x51	; 81
     732:	0e 94 70 04 	call	0x8e0	; 0x8e0 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     736:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     73a:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	91 05       	cpc	r25, r1
     742:	61 f0       	breq	.+24     	; 0x75c <CAN_transmit_message+0xe6>
     744:	82 30       	cpi	r24, 0x02	; 2
     746:	91 05       	cpc	r25, r1
     748:	81 f0       	breq	.+32     	; 0x76a <CAN_transmit_message+0xf4>
     74a:	89 2b       	or	r24, r25
     74c:	a1 f4       	brne	.+40     	; 0x776 <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     74e:	f8 01       	movw	r30, r16
     750:	42 85       	ldd	r20, Z+10	; 0x0a
     752:	65 e3       	ldi	r22, 0x35	; 53
     754:	8f e0       	ldi	r24, 0x0F	; 15
     756:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
				break;
     75a:	0d c0       	rjmp	.+26     	; 0x776 <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     75c:	f8 01       	movw	r30, r16
     75e:	42 85       	ldd	r20, Z+10	; 0x0a
     760:	65 e4       	ldi	r22, 0x45	; 69
     762:	8f e0       	ldi	r24, 0x0F	; 15
     764:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
				break;
     768:	06 c0       	rjmp	.+12     	; 0x776 <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     76a:	f8 01       	movw	r30, r16
     76c:	42 85       	ldd	r20, Z+10	; 0x0a
     76e:	65 e5       	ldi	r22, 0x55	; 85
     770:	8f e0       	ldi	r24, 0x0F	; 15
     772:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     776:	f8 01       	movw	r30, r16
     778:	82 85       	ldd	r24, Z+10	; 0x0a
     77a:	88 23       	and	r24, r24
     77c:	61 f1       	breq	.+88     	; 0x7d6 <CAN_transmit_message+0x160>
     77e:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     780:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     784:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	91 05       	cpc	r25, r1
     78c:	71 f0       	breq	.+28     	; 0x7aa <CAN_transmit_message+0x134>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	91 05       	cpc	r25, r1
     792:	a1 f0       	breq	.+40     	; 0x7bc <CAN_transmit_message+0x146>
     794:	89 2b       	or	r24, r25
     796:	d1 f4       	brne	.+52     	; 0x7cc <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     798:	f8 01       	movw	r30, r16
     79a:	ec 0f       	add	r30, r28
     79c:	f1 1d       	adc	r31, r1
     79e:	60 81       	ld	r22, Z
     7a0:	86 e3       	ldi	r24, 0x36	; 54
     7a2:	8c 0f       	add	r24, r28
     7a4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <CAN_controller_write>
				break;
     7a8:	11 c0       	rjmp	.+34     	; 0x7cc <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7aa:	f8 01       	movw	r30, r16
     7ac:	ec 0f       	add	r30, r28
     7ae:	f1 1d       	adc	r31, r1
     7b0:	60 81       	ld	r22, Z
     7b2:	86 e4       	ldi	r24, 0x46	; 70
     7b4:	8c 0f       	add	r24, r28
     7b6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <CAN_controller_write>
				break;
     7ba:	08 c0       	rjmp	.+16     	; 0x7cc <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7bc:	f8 01       	movw	r30, r16
     7be:	ec 0f       	add	r30, r28
     7c0:	f1 1d       	adc	r31, r1
     7c2:	60 81       	ld	r22, Z
     7c4:	86 e5       	ldi	r24, 0x56	; 86
     7c6:	8c 0f       	add	r24, r28
     7c8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     7cc:	cf 5f       	subi	r28, 0xFF	; 255
     7ce:	f8 01       	movw	r30, r16
     7d0:	82 85       	ldd	r24, Z+10	; 0x0a
     7d2:	8c 13       	cpse	r24, r28
     7d4:	d5 cf       	rjmp	.-86     	; 0x780 <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7d6:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     7da:	0e 94 ba 04 	call	0x974	; 0x974 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	08 95       	ret

000007e6 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     7f2:	82 e6       	ldi	r24, 0x62	; 98
     7f4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <CAN_controller_read>
     7f8:	c8 2f       	mov	r28, r24
     7fa:	81 e6       	ldi	r24, 0x61	; 97
     7fc:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <CAN_controller_read>
     800:	c2 95       	swap	r28
     802:	c6 95       	lsr	r28
     804:	c7 70       	andi	r28, 0x07	; 7
     806:	28 e0       	ldi	r18, 0x08	; 8
     808:	82 9f       	mul	r24, r18
     80a:	c0 01       	movw	r24, r0
     80c:	11 24       	eor	r1, r1
     80e:	8c 0f       	add	r24, r28
     810:	91 1d       	adc	r25, r1
     812:	f7 01       	movw	r30, r14
     814:	91 87       	std	Z+9, r25	; 0x09
     816:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     818:	85 e6       	ldi	r24, 0x65	; 101
     81a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <CAN_controller_read>
     81e:	8f 70       	andi	r24, 0x0F	; 15
     820:	f7 01       	movw	r30, r14
     822:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     824:	82 85       	ldd	r24, Z+10	; 0x0a
     826:	88 23       	and	r24, r24
     828:	81 f0       	breq	.+32     	; 0x84a <CAN_receiveMessage+0x64>
     82a:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     82c:	0c 2f       	mov	r16, r28
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	86 e6       	ldi	r24, 0x66	; 102
     832:	8c 0f       	add	r24, r28
     834:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <CAN_controller_read>
     838:	f7 01       	movw	r30, r14
     83a:	e0 0f       	add	r30, r16
     83c:	f1 1f       	adc	r31, r17
     83e:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     840:	cf 5f       	subi	r28, 0xFF	; 255
     842:	f7 01       	movw	r30, r14
     844:	82 85       	ldd	r24, Z+10	; 0x0a
     846:	8c 13       	cpse	r24, r28
     848:	f1 cf       	rjmp	.-30     	; 0x82c <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	08 95       	ret

00000856 <CAN_sendInputData>:

void CAN_sendInputData() {
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	2b 97       	sbiw	r28, 0x0b	; 11
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	9a 87       	std	Y+10, r25	; 0x0a
     870:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     872:	86 e0       	ldi	r24, 0x06	; 6
     874:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     876:	ec e7       	ldi	r30, 0x7C	; 124
     878:	f3 e0       	ldi	r31, 0x03	; 3
     87a:	80 81       	ld	r24, Z
     87c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     87e:	81 81       	ldd	r24, Z+1	; 0x01
     880:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     882:	ea e7       	ldi	r30, 0x7A	; 122
     884:	f3 e0       	ldi	r31, 0x03	; 3
     886:	80 81       	ld	r24, Z
     888:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     88a:	81 81       	ldd	r24, Z+1	; 0x01
     88c:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     88e:	e7 e6       	ldi	r30, 0x67	; 103
     890:	f3 e0       	ldi	r31, 0x03	; 3
     892:	80 81       	ld	r24, Z
     894:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     896:	81 81       	ldd	r24, Z+1	; 0x01
     898:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	0e 94 3b 03 	call	0x676	; 0x676 <CAN_transmit_message>
     8a2:	2b 96       	adiw	r28, 0x0b	; 11
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <CAN_controller_read>:
#include <stdio.h>
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"

uint8_t CAN_controller_read(uint8_t addr) {
     8b4:	cf 93       	push	r28
     8b6:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	84 e0       	ldi	r24, 0x04	; 4
     8bc:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8c6:	8c 2f       	mov	r24, r28
     8c8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8cc:	0e 94 40 0c 	call	0x1880	; 0x1880 <SPI_masterRead>
     8d0:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	84 e0       	ldi	r24, 0x04	; 4
     8d6:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
	
	return data;
}
     8da:	8c 2f       	mov	r24, r28
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	d8 2f       	mov	r29, r24
     8e6:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	84 e0       	ldi	r24, 0x04	; 4
     8ec:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8f6:	8d 2f       	mov	r24, r29
     8f8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
	SPI_masterWrite(data);
     8fc:	8c 2f       	mov	r24, r28
     8fe:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
	
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	d8 2f       	mov	r29, r24
     918:	16 2f       	mov	r17, r22
     91a:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     924:	85 e0       	ldi	r24, 0x05	; 5
     926:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
		SPI_masterWrite(addr);
     92a:	81 2f       	mov	r24, r17
     92c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
		SPI_masterWrite(mask);
     930:	8d 2f       	mov	r24, r29
     932:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
		SPI_masterWrite(data);
     936:	8c 2f       	mov	r24, r28
     938:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>

}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	84 e0       	ldi	r24, 0x04	; 4
     950:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
	printf("Before spi write");
     954:	83 ee       	ldi	r24, 0xE3	; 227
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	9f 93       	push	r25
     95a:	8f 93       	push	r24
     95c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>
	SPI_masterWrite(MCP_RESET);
     960:	80 ec       	ldi	r24, 0xC0	; 192
     962:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
}
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	08 95       	ret

00000974 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     974:	cf 93       	push	r28
     976:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
	switch (buffer) {
     980:	c1 30       	cpi	r28, 0x01	; 1
     982:	41 f0       	breq	.+16     	; 0x994 <CAN_controller_RTS+0x20>
     984:	18 f0       	brcs	.+6      	; 0x98c <CAN_controller_RTS+0x18>
     986:	c2 30       	cpi	r28, 0x02	; 2
     988:	49 f0       	breq	.+18     	; 0x99c <CAN_controller_RTS+0x28>
     98a:	0b c0       	rjmp	.+22     	; 0x9a2 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     98c:	81 e8       	ldi	r24, 0x81	; 129
     98e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
			break;
     992:	07 c0       	rjmp	.+14     	; 0x9a2 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     994:	82 e8       	ldi	r24, 0x82	; 130
     996:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
			break;
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     99c:	84 e8       	ldi	r24, 0x84	; 132
     99e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	84 e0       	ldi	r24, 0x04	; 4
     9a6:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_setChipSelect>
}
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     9b4:	0e 94 a6 04 	call	0x94c	; 0x94c <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9b8:	8e e0       	ldi	r24, 0x0E	; 14
     9ba:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     9be:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     9c0:	80 38       	cpi	r24, 0x80	; 128
     9c2:	69 f0       	breq	.+26     	; 0x9de <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     9c4:	1f 92       	push	r1
     9c6:	8f 93       	push	r24
     9c8:	84 ef       	ldi	r24, 0xF4	; 244
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	9f 93       	push	r25
     9ce:	8f 93       	push	r24
     9d0:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>
		return;
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	38 c0       	rjmp	.+112    	; 0xa4e <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9de:	4c 2f       	mov	r20, r28
     9e0:	4c 60       	ori	r20, 0x0C	; 12
     9e2:	6f e0       	ldi	r22, 0x0F	; 15
     9e4:	8e ee       	ldi	r24, 0xEE	; 238
     9e6:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	6b e2       	ldi	r22, 0x2B	; 43
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     9f4:	40 e6       	ldi	r20, 0x60	; 96
     9f6:	60 e6       	ldi	r22, 0x60	; 96
     9f8:	80 e6       	ldi	r24, 0x60	; 96
     9fa:	0e 94 88 04 	call	0x910	; 0x910 <CAN_controller_bitModify>
     9fe:	2f ef       	ldi	r18, 0xFF	; 255
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	21 50       	subi	r18, 0x01	; 1
     a06:	80 40       	sbci	r24, 0x00	; 0
     a08:	90 40       	sbci	r25, 0x00	; 0
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <CAN_controller_setMode+0x56>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <CAN_controller_setMode+0x60>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a10:	8e e0       	ldi	r24, 0x0E	; 14
     a12:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     a16:	d8 2f       	mov	r29, r24
     a18:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     a1a:	cd 17       	cp	r28, r29
     a1c:	61 f0       	breq	.+24     	; 0xa36 <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     a1e:	1f 92       	push	r1
     a20:	df 93       	push	r29
     a22:	8f e0       	ldi	r24, 0x0F	; 15
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     a36:	1f 92       	push	r1
     a38:	df 93       	push	r29
     a3a:	8f e2       	ldi	r24, 0x2F	; 47
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	9f 93       	push	r25
     a40:	8f 93       	push	r24
     a42:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     a54:	0e 94 33 0c 	call	0x1866	; 0x1866 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     a58:	80 e4       	ldi	r24, 0x40	; 64
     a5a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a5e:	8b b7       	in	r24, 0x3b	; 59
     a60:	80 64       	ori	r24, 0x40	; 64
     a62:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a64:	85 b7       	in	r24, 0x35	; 53
     a66:	82 60       	ori	r24, 0x02	; 2
     a68:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a6a:	85 b7       	in	r24, 0x35	; 53
     a6c:	8e 7f       	andi	r24, 0xFE	; 254
     a6e:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a70:	81 b3       	in	r24, 0x11	; 17
     a72:	84 70       	andi	r24, 0x04	; 4
     a74:	81 bb       	out	0x11, r24	; 17
     a76:	2f ef       	ldi	r18, 0xFF	; 255
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	21 50       	subi	r18, 0x01	; 1
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	90 40       	sbci	r25, 0x00	; 0
     a82:	e1 f7       	brne	.-8      	; 0xa7c <CAN_controller_init+0x28>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <CAN_controller_init+0x32>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     a88:	8e e3       	ldi	r24, 0x3E	; 62
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a94:	8e e0       	ldi	r24, 0x0E	; 14
     a96:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     a9a:	1f 92       	push	r1
     a9c:	8f 93       	push	r24
     a9e:	87 e5       	ldi	r24, 0x57	; 87
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>

}
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	08 95       	ret

00000ab8 <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     ab8:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
     abc:	ef e7       	ldi	r30, 0x7F	; 127
     abe:	f3 e0       	ldi	r31, 0x03	; 3
     ac0:	a4 e8       	ldi	r26, 0x84	; 132
     ac2:	b3 e0       	ldi	r27, 0x03	; 3
     ac4:	84 e8       	ldi	r24, 0x84	; 132
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	11 92       	st	Z+, r1
     aca:	1d 92       	st	X+, r1
     acc:	e8 17       	cp	r30, r24
     ace:	f9 07       	cpc	r31, r25
     ad0:	d9 f7       	brne	.-10     	; 0xac8 <game_init+0x10>
     ad2:	08 95       	ret

00000ad4 <game_countdown>:
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	1f 92       	push	r1
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	4a e0       	ldi	r20, 0x0A	; 10
     ae4:	be 01       	movw	r22, r28
     ae6:	6f 5f       	subi	r22, 0xFF	; 255
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	83 e0       	ldi	r24, 0x03	; 3
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
     af2:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
     af6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
     afa:	0b e6       	ldi	r16, 0x6B	; 107
     afc:	13 e0       	ldi	r17, 0x03	; 3
     afe:	f8 01       	movw	r30, r16
     b00:	80 81       	ld	r24, Z
     b02:	91 81       	ldd	r25, Z+1	; 0x01
     b04:	02 96       	adiw	r24, 0x02	; 2
     b06:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <music_playNote>
     b20:	ff ef       	ldi	r31, 0xFF	; 255
     b22:	2f e7       	ldi	r18, 0x7F	; 127
     b24:	87 e0       	ldi	r24, 0x07	; 7
     b26:	f1 50       	subi	r31, 0x01	; 1
     b28:	20 40       	sbci	r18, 0x00	; 0
     b2a:	80 40       	sbci	r24, 0x00	; 0
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <game_countdown+0x52>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <game_countdown+0x5c>
     b30:	00 00       	nop
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 db 08 	call	0x11b6	; 0x11b6 <music_playNote>
     b3a:	9f ef       	ldi	r25, 0xFF	; 255
     b3c:	ef e7       	ldi	r30, 0x7F	; 127
     b3e:	f7 e0       	ldi	r31, 0x07	; 7
     b40:	91 50       	subi	r25, 0x01	; 1
     b42:	e0 40       	sbci	r30, 0x00	; 0
     b44:	f0 40       	sbci	r31, 0x00	; 0
     b46:	e1 f7       	brne	.-8      	; 0xb40 <game_countdown+0x6c>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <game_countdown+0x76>
     b4a:	00 00       	nop
     b4c:	4a e0       	ldi	r20, 0x0A	; 10
     b4e:	be 01       	movw	r22, r28
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
     b5c:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
     b60:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
     b64:	f8 01       	movw	r30, r16
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	02 96       	adiw	r24, 0x02	; 2
     b6c:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     b7e:	86 e0       	ldi	r24, 0x06	; 6
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 db 08 	call	0x11b6	; 0x11b6 <music_playNote>
     b86:	ff ef       	ldi	r31, 0xFF	; 255
     b88:	2f e7       	ldi	r18, 0x7F	; 127
     b8a:	87 e0       	ldi	r24, 0x07	; 7
     b8c:	f1 50       	subi	r31, 0x01	; 1
     b8e:	20 40       	sbci	r18, 0x00	; 0
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	e1 f7       	brne	.-8      	; 0xb8c <game_countdown+0xb8>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <game_countdown+0xc2>
     b96:	00 00       	nop
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <music_playNote>
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	ef e7       	ldi	r30, 0x7F	; 127
     ba4:	f7 e0       	ldi	r31, 0x07	; 7
     ba6:	91 50       	subi	r25, 0x01	; 1
     ba8:	e0 40       	sbci	r30, 0x00	; 0
     baa:	f0 40       	sbci	r31, 0x00	; 0
     bac:	e1 f7       	brne	.-8      	; 0xba6 <game_countdown+0xd2>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <game_countdown+0xdc>
     bb0:	00 00       	nop
     bb2:	4a e0       	ldi	r20, 0x0A	; 10
     bb4:	be 01       	movw	r22, r28
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
     bc2:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
     bc6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
     bca:	f8 01       	movw	r30, r16
     bcc:	80 81       	ld	r24, Z
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	02 96       	adiw	r24, 0x02	; 2
     bd2:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     be4:	86 e0       	ldi	r24, 0x06	; 6
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <music_playNote>
     bec:	ff ef       	ldi	r31, 0xFF	; 255
     bee:	2f e7       	ldi	r18, 0x7F	; 127
     bf0:	87 e0       	ldi	r24, 0x07	; 7
     bf2:	f1 50       	subi	r31, 0x01	; 1
     bf4:	20 40       	sbci	r18, 0x00	; 0
     bf6:	80 40       	sbci	r24, 0x00	; 0
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <game_countdown+0x11e>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <game_countdown+0x128>
     bfc:	00 00       	nop
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 db 08 	call	0x11b6	; 0x11b6 <music_playNote>
     c06:	9f ef       	ldi	r25, 0xFF	; 255
     c08:	ef e7       	ldi	r30, 0x7F	; 127
     c0a:	f7 e0       	ldi	r31, 0x07	; 7
     c0c:	91 50       	subi	r25, 0x01	; 1
     c0e:	e0 40       	sbci	r30, 0x00	; 0
     c10:	f0 40       	sbci	r31, 0x00	; 0
     c12:	e1 f7       	brne	.-8      	; 0xc0c <game_countdown+0x138>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <game_countdown+0x142>
     c16:	00 00       	nop
     c18:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
     c1c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
     c20:	f8 01       	movw	r30, r16
     c22:	80 81       	ld	r24, Z
     c24:	91 81       	ldd	r25, Z+1	; 0x01
     c26:	02 96       	adiw	r24, 0x02	; 2
     c28:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
     c32:	82 e6       	ldi	r24, 0x62	; 98
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     c3a:	87 e1       	ldi	r24, 0x17	; 23
     c3c:	94 e0       	ldi	r25, 0x04	; 4
     c3e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <music_playNote>
     c42:	ff ef       	ldi	r31, 0xFF	; 255
     c44:	2f e7       	ldi	r18, 0x7F	; 127
     c46:	87 e0       	ldi	r24, 0x07	; 7
     c48:	f1 50       	subi	r31, 0x01	; 1
     c4a:	20 40       	sbci	r18, 0x00	; 0
     c4c:	80 40       	sbci	r24, 0x00	; 0
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <game_countdown+0x174>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <game_countdown+0x17e>
     c52:	00 00       	nop
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 db 08 	call	0x11b6	; 0x11b6 <music_playNote>
     c5c:	9f ef       	ldi	r25, 0xFF	; 255
     c5e:	ef e7       	ldi	r30, 0x7F	; 127
     c60:	f7 e0       	ldi	r31, 0x07	; 7
     c62:	91 50       	subi	r25, 0x01	; 1
     c64:	e0 40       	sbci	r30, 0x00	; 0
     c66:	f0 40       	sbci	r31, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <game_countdown+0x18e>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <game_countdown+0x198>
     c6c:	00 00       	nop
     c6e:	0f 90       	pop	r0
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <game_initialCANMessage>:
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	2b 97       	sbiw	r28, 0x0b	; 11
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9a 87       	std	Y+10, r25	; 0x0a
     c94:	89 87       	std	Y+9, r24	; 0x09
     c96:	1b 86       	std	Y+11, r1	; 0x0b
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 3b 03 	call	0x676	; 0x676 <CAN_transmit_message>
     ca0:	2b 96       	adiw	r28, 0x0b	; 11
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <game_newgame>:
     cb2:	f8 94       	cli
     cb4:	0e 94 6a 05 	call	0xad4	; 0xad4 <game_countdown>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <gameActive>
     cbe:	e9 e8       	ldi	r30, 0x89	; 137
     cc0:	f3 e0       	ldi	r31, 0x03	; 3
     cc2:	8a e0       	ldi	r24, 0x0A	; 10
     cc4:	80 83       	st	Z, r24
     cc6:	12 82       	std	Z+2, r1	; 0x02
     cc8:	83 e6       	ldi	r24, 0x63	; 99
     cca:	81 83       	std	Z+1, r24	; 0x01
     ccc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <game_initialCANMessage>
     cd0:	78 94       	sei
     cd2:	08 95       	ret

00000cd4 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     cd4:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <flag>
     cd8:	88 23       	and	r24, r24
     cda:	d9 f0       	breq	.+54     	; 0xd12 <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     cdc:	f8 94       	cli
		printf("Message received");
     cde:	85 e6       	ldi	r24, 0x65	; 101
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <printf>
		flag=0;
     cea:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <flag>
		CAN_receiveMessage(&received_message);
     cee:	8f e6       	ldi	r24, 0x6F	; 111
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     cf6:	0e 94 35 03 	call	0x66a	; 0x66a <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     cfa:	af e6       	ldi	r26, 0x6F	; 111
     cfc:	b3 e0       	ldi	r27, 0x03	; 3
     cfe:	8c 91       	ld	r24, X
     d00:	e9 e8       	ldi	r30, 0x89	; 137
     d02:	f3 e0       	ldi	r31, 0x03	; 3
     d04:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	8c 91       	ld	r24, X
     d0a:	82 83       	std	Z+2, r24	; 0x02
		sei();
     d0c:	78 94       	sei
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	08 95       	ret

00000d14 <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <game_updateOled+0xa>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <game_updateOled+0xc>
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     d26:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
	oled_home();
     d2a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d2e:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <currentMenu>
     d32:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <currentMenu+0x1>
     d36:	02 96       	adiw	r24, 0x02	; 2
     d38:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
	switch(gameID) {
     d42:	11 30       	cpi	r17, 0x01	; 1
     d44:	19 f0       	breq	.+6      	; 0xd4c <game_updateOled+0x38>
     d46:	12 30       	cpi	r17, 0x02	; 2
     d48:	49 f1       	breq	.+82     	; 0xd9c <game_updateOled+0x88>
     d4a:	39 c0       	rjmp	.+114    	; 0xdbe <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     d4c:	86 e7       	ldi	r24, 0x76	; 118
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
			itoa(gameData.score,score_string,10);
     d54:	09 e8       	ldi	r16, 0x89	; 137
     d56:	13 e0       	ldi	r17, 0x03	; 3
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d58:	f8 01       	movw	r30, r16
     d5a:	80 81       	ld	r24, Z
     d5c:	4a e0       	ldi	r20, 0x0A	; 10
     d5e:	be 01       	movw	r22, r28
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
			oled_print(score_string);
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
			oled_gotoLine(5);
     d72:	85 e0       	ldi	r24, 0x05	; 5
     d74:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
			oled_print("Time: ");
     d78:	8e e7       	ldi	r24, 0x7E	; 126
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     d80:	f8 01       	movw	r30, r16
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	4a e0       	ldi	r20, 0x0A	; 10
     d86:	be 01       	movw	r22, r28
     d88:	6d 5f       	subi	r22, 0xFD	; 253
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d92:	ce 01       	movw	r24, r28
     d94:	03 96       	adiw	r24, 0x03	; 3
     d96:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
			break;
     d9a:	11 c0       	rjmp	.+34     	; 0xdbe <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d9c:	85 e8       	ldi	r24, 0x85	; 133
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     da4:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <gameData+0x2>
     da8:	4a e0       	ldi	r20, 0x0A	; 10
     daa:	be 01       	movw	r22, r28
     dac:	6d 5f       	subi	r22, 0xFD	; 253
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     db6:	ce 01       	movw	r24, r28
     db8:	03 96       	adiw	r24, 0x03	; 3
     dba:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
			break;

	}
	
}
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <game_sendStop>:

void game_sendStop() {
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	2b 97       	sbiw	r28, 0x0b	; 11
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9a 87       	std	Y+10, r25	; 0x0a
     dea:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     dec:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	0e 94 3b 03 	call	0x676	; 0x676 <CAN_transmit_message>
}
     df6:	2b 96       	adiw	r28, 0x0b	; 11
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <game_finished>:
void game_finished(uint8_t gameID) {
     e08:	cf 93       	push	r28
     e0a:	c8 2f       	mov	r28, r24
	cli();
     e0c:	f8 94       	cli
	game_sendStop();
     e0e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <game_sendStop>
	oled_reset();
     e12:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
	oled_home();
     e16:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
	oled_gotoLine(3);
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
	oled_print("Game over");
     e20:	80 e9       	ldi	r24, 0x90	; 144
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
	oled_gotoLine(4);
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
	oled_print("Maybe HS?");
     e2e:	8a e9       	ldi	r24, 0x9A	; 154
     e30:	92 e0       	ldi	r25, 0x02	; 2
     e32:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
	music_gameOver();
     e36:	0e 94 99 08 	call	0x1132	; 0x1132 <music_gameOver>
	gameActive=0;
     e3a:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
	
	menu_init();
     e3e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <menu_init>
	switch (gameID) {
     e42:	c1 30       	cpi	r28, 0x01	; 1
     e44:	51 f0       	breq	.+20     	; 0xe5a <game_finished+0x52>
     e46:	c2 30       	cpi	r28, 0x02	; 2
     e48:	09 f0       	breq	.+2      	; 0xe4c <game_finished+0x44>
     e4a:	50 c0       	rjmp	.+160    	; 0xeec <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e4c:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <gameData+0x2>
     e50:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <highScores2>
     e54:	83 17       	cp	r24, r19
     e56:	48 f5       	brcc	.+82     	; 0xeaa <game_finished+0xa2>
     e58:	33 c0       	rjmp	.+102    	; 0xec0 <game_finished+0xb8>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e5a:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <gameData>
     e5e:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <highScores>
     e62:	83 17       	cp	r24, r19
     e64:	58 f0       	brcs	.+22     	; 0xe7c <game_finished+0x74>
     e66:	e0 e8       	ldi	r30, 0x80	; 128
     e68:	f3 e0       	ldi	r31, 0x03	; 3
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e6e:	21 91       	ld	r18, Z+
     e70:	23 17       	cp	r18, r19
     e72:	b0 f4       	brcc	.+44     	; 0xea0 <game_finished+0x98>
					for (int a = 4; a>i; a--) {
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	91 05       	cpc	r25, r1
     e78:	1c f0       	brlt	.+6      	; 0xe80 <game_finished+0x78>
     e7a:	0d c0       	rjmp	.+26     	; 0xe96 <game_finished+0x8e>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	e3 e8       	ldi	r30, 0x83	; 131
     e82:	f3 e0       	ldi	r31, 0x03	; 3
     e84:	44 e0       	ldi	r20, 0x04	; 4
     e86:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e88:	41 50       	subi	r20, 0x01	; 1
     e8a:	51 09       	sbc	r21, r1
     e8c:	22 91       	ld	r18, -Z
     e8e:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e90:	84 17       	cp	r24, r20
     e92:	95 07       	cpc	r25, r21
     e94:	cc f3       	brlt	.-14     	; 0xe88 <game_finished+0x80>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e96:	fc 01       	movw	r30, r24
     e98:	e1 58       	subi	r30, 0x81	; 129
     e9a:	fc 4f       	sbci	r31, 0xFC	; 252
     e9c:	30 83       	st	Z, r19
					break;
     e9e:	26 c0       	rjmp	.+76     	; 0xeec <game_finished+0xe4>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	85 30       	cpi	r24, 0x05	; 5
     ea4:	91 05       	cpc	r25, r1
     ea6:	19 f7       	brne	.-58     	; 0xe6e <game_finished+0x66>
     ea8:	21 c0       	rjmp	.+66     	; 0xeec <game_finished+0xe4>
     eaa:	e5 e8       	ldi	r30, 0x85	; 133
     eac:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     eb2:	21 91       	ld	r18, Z+
     eb4:	23 17       	cp	r18, r19
     eb6:	b0 f4       	brcc	.+44     	; 0xee4 <game_finished+0xdc>
					for (int a = 4; a>i; a--) {
     eb8:	84 30       	cpi	r24, 0x04	; 4
     eba:	91 05       	cpc	r25, r1
     ebc:	1c f0       	brlt	.+6      	; 0xec4 <game_finished+0xbc>
     ebe:	0d c0       	rjmp	.+26     	; 0xeda <game_finished+0xd2>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	e8 e8       	ldi	r30, 0x88	; 136
     ec6:	f3 e0       	ldi	r31, 0x03	; 3
     ec8:	44 e0       	ldi	r20, 0x04	; 4
     eca:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     ecc:	41 50       	subi	r20, 0x01	; 1
     ece:	51 09       	sbc	r21, r1
     ed0:	22 91       	ld	r18, -Z
     ed2:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     ed4:	84 17       	cp	r24, r20
     ed6:	95 07       	cpc	r25, r21
     ed8:	cc f3       	brlt	.-14     	; 0xecc <game_finished+0xc4>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     eda:	fc 01       	movw	r30, r24
     edc:	ec 57       	subi	r30, 0x7C	; 124
     ede:	fc 4f       	sbci	r31, 0xFC	; 252
     ee0:	30 83       	st	Z, r19
					break;
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <game_finished+0xe4>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	85 30       	cpi	r24, 0x05	; 5
     ee8:	91 05       	cpc	r25, r1
     eea:	19 f7       	brne	.-58     	; 0xeb2 <game_finished+0xaa>
			break;
		
	}
	
	
	sei();
     eec:	78 94       	sei
}
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <game_play>:
void game_play(uint8_t gameID)
{
     ef2:	cf 93       	push	r28
     ef4:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     ef6:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <gameActive>
     efa:	81 11       	cpse	r24, r1
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <game_play+0x10>
	{
		game_newgame();	
     efe:	0e 94 59 06 	call	0xcb2	; 0xcb2 <game_newgame>
	}
	if (buttons.right_button) {
     f02:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <buttons+0x1>
     f06:	88 23       	and	r24, r24
     f08:	21 f0       	breq	.+8      	; 0xf12 <game_play+0x20>
		gameActive = 0;
     f0a:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <gameActive>
		menu_init();
     f0e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     f12:	0e 94 2b 04 	call	0x856	; 0x856 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     f16:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <game_recieveGameData>
	game_updateOled(gameID);
     f1a:	8c 2f       	mov	r24, r28
     f1c:	0e 94 8a 06 	call	0xd14	; 0xd14 <game_updateOled>
	switch (gameID) {
     f20:	c1 30       	cpi	r28, 0x01	; 1
     f22:	19 f0       	breq	.+6      	; 0xf2a <game_play+0x38>
     f24:	c2 30       	cpi	r28, 0x02	; 2
     f26:	49 f0       	breq	.+18     	; 0xf3a <game_play+0x48>
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <game_play+0x56>
		case 1:
			if (gameData.playtime==10) {
     f2a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <gameData+0x2>
     f2e:	8a 30       	cpi	r24, 0x0A	; 10
     f30:	59 f4       	brne	.+22     	; 0xf48 <game_play+0x56>
				game_finished(gameID);
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 04 07 	call	0xe08	; 0xe08 <game_finished>
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <game_play+0x56>
			}
			break;
		case 2:
			if (gameData.score <10) {
     f3a:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <gameData>
     f3e:	8a 30       	cpi	r24, 0x0A	; 10
     f40:	18 f4       	brcc	.+6      	; 0xf48 <game_play+0x56>
				game_finished(gameID);
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	0e 94 04 07 	call	0xe08	; 0xe08 <game_finished>
			}
			break;
	}
	
	
}
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f4c:	af 92       	push	r10
     f4e:	bf 92       	push	r11
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	00 d0       	rcall	.+0      	; 0xf62 <game_displayHighscores+0x16>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	08 2f       	mov	r16, r24
	oled_reset();
     f68:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
	oled_home();
     f6c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f70:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <currentMenu>
     f74:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <currentMenu+0x1>
     f78:	02 96       	adiw	r24, 0x02	; 2
     f7a:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
     f7e:	0f 2e       	mov	r0, r31
     f80:	ff e7       	ldi	r31, 0x7F	; 127
     f82:	af 2e       	mov	r10, r31
     f84:	f3 e0       	ldi	r31, 0x03	; 3
     f86:	bf 2e       	mov	r11, r31
     f88:	f0 2d       	mov	r31, r0
     f8a:	0f 2e       	mov	r0, r31
     f8c:	f4 e8       	ldi	r31, 0x84	; 132
     f8e:	cf 2e       	mov	r12, r31
     f90:	f3 e0       	ldi	r31, 0x03	; 3
     f92:	df 2e       	mov	r13, r31
     f94:	f0 2d       	mov	r31, r0
     f96:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f98:	e1 2c       	mov	r14, r1
     f9a:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f9c:	81 2f       	mov	r24, r17
     f9e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
		oled_print("Score ");
     fa2:	84 ea       	ldi	r24, 0xA4	; 164
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
		char num[2];
		itoa(i+1,num,10);
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	e8 1a       	sub	r14, r24
     fae:	f8 0a       	sbc	r15, r24
     fb0:	4a e0       	ldi	r20, 0x0A	; 10
     fb2:	be 01       	movw	r22, r28
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	c7 01       	movw	r24, r14
     fba:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
		oled_print(num);
     fbe:	ce 01       	movw	r24, r28
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
		oled_print(": ");
     fc6:	82 e8       	ldi	r24, 0x82	; 130
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
		switch (gameID) {
     fce:	01 30       	cpi	r16, 0x01	; 1
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <game_displayHighscores+0x8c>
     fd2:	02 30       	cpi	r16, 0x02	; 2
     fd4:	59 f0       	breq	.+22     	; 0xfec <game_displayHighscores+0xa0>
     fd6:	13 c0       	rjmp	.+38     	; 0xffe <game_displayHighscores+0xb2>
     fd8:	f5 01       	movw	r30, r10
     fda:	80 81       	ld	r24, Z
     fdc:	4a e0       	ldi	r20, 0x0A	; 10
     fde:	be 01       	movw	r22, r28
     fe0:	6f 5f       	subi	r22, 0xFF	; 255
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
     fea:	09 c0       	rjmp	.+18     	; 0xffe <game_displayHighscores+0xb2>
     fec:	f6 01       	movw	r30, r12
     fee:	80 81       	ld	r24, Z
     ff0:	4a e0       	ldi	r20, 0x0A	; 10
     ff2:	be 01       	movw	r22, r28
     ff4:	6f 5f       	subi	r22, 0xFF	; 255
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
    1006:	1f 5f       	subi	r17, 0xFF	; 255
    1008:	ff ef       	ldi	r31, 0xFF	; 255
    100a:	af 1a       	sub	r10, r31
    100c:	bf 0a       	sbc	r11, r31
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	c8 1a       	sub	r12, r24
    1012:	d8 0a       	sbc	r13, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
    1014:	18 30       	cpi	r17, 0x08	; 8
    1016:	11 f6       	brne	.-124    	; 0xf9c <game_displayHighscores+0x50>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	08 95       	ret

00001032 <music_playRick>:
	 30, 10, 20, 20,
	 20,40, 80, 40
};


void music_playRick() {
    1032:	8f 92       	push	r8
    1034:	9f 92       	push	r9
    1036:	af 92       	push	r10
    1038:	bf 92       	push	r11
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
	cli();
    104a:	f8 94       	cli
	oled_home();
    104c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
	oled_reset();
    1050:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
    1054:	0d ee       	ldi	r16, 0xED	; 237
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	0f 2e       	mov	r0, r31
    105a:	fe e9       	ldi	r31, 0x9E	; 158
    105c:	ef 2e       	mov	r14, r31
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	ff 2e       	mov	r15, r31
    1062:	f0 2d       	mov	r31, r0
    1064:	c6 e0       	ldi	r28, 0x06	; 6
    1066:	d1 e0       	ldi	r29, 0x01	; 1
    1068:	0f 2e       	mov	r0, r31
    106a:	f9 e2       	ldi	r31, 0x29	; 41
    106c:	cf 2e       	mov	r12, r31
    106e:	f2 e0       	ldi	r31, 0x02	; 2
    1070:	df 2e       	mov	r13, r31
    1072:	f0 2d       	mov	r31, r0
    1074:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1076:	0f 2e       	mov	r0, r31
    1078:	f4 e1       	ldi	r31, 0x14	; 20
    107a:	af 2e       	mov	r10, r31
    107c:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    107e:	b1 10       	cpse	r11, r1
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <music_playRick+0x54>
			oled_reset();
    1082:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
    1086:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1088:	e8 81       	ld	r30, Y
    108a:	f9 81       	ldd	r31, Y+1	; 0x01
    108c:	80 81       	ld	r24, Z
    108e:	88 23       	and	r24, r24
    1090:	41 f0       	breq	.+16     	; 0x10a2 <music_playRick+0x70>
			oled_gotoLine(line);
    1092:	8b 2d       	mov	r24, r11
    1094:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
			line++;
    1098:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    109a:	88 81       	ld	r24, Y
    109c:	99 81       	ldd	r25, Y+1	; 0x01
    109e:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    10a2:	d4 01       	movw	r26, r8
    10a4:	ed 91       	ld	r30, X+
    10a6:	fc 91       	ld	r31, X
    10a8:	22 96       	adiw	r28, 0x02	; 2
    10aa:	01 90       	ld	r0, Z+
    10ac:	00 20       	and	r0, r0
    10ae:	e9 f7       	brne	.-6      	; 0x10aa <music_playRick+0x78>
    10b0:	32 97       	sbiw	r30, 0x02	; 2
    10b2:	80 81       	ld	r24, Z
    10b4:	8e 32       	cpi	r24, 0x2E	; 46
    10b6:	09 f4       	brne	.+2      	; 0x10ba <music_playRick+0x88>
			
			line = 0;
    10b8:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    10ba:	f8 01       	movw	r30, r16
    10bc:	65 91       	lpm	r22, Z+
    10be:	74 91       	lpm	r23, Z
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    10c8:	f7 01       	movw	r30, r14
    10ca:	84 91       	lpm	r24, Z
    10cc:	a8 9e       	mul	r10, r24
    10ce:	c0 01       	movw	r24, r0
    10d0:	11 24       	eor	r1, r1
    10d2:	09 2e       	mov	r0, r25
    10d4:	00 0c       	add	r0, r0
    10d6:	aa 0b       	sbc	r26, r26
    10d8:	bb 0b       	sbc	r27, r27
		while (duration--) {
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	a1 05       	cpc	r26, r1
    10de:	b1 05       	cpc	r27, r1
    10e0:	51 f0       	breq	.+20     	; 0x10f6 <music_playRick+0xc4>
    10e2:	ec ec       	ldi	r30, 0xCC	; 204
    10e4:	f4 e0       	ldi	r31, 0x04	; 4
    10e6:	31 97       	sbiw	r30, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <music_playRick+0xb4>
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <music_playRick+0xba>
    10ec:	00 00       	nop
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	a1 09       	sbc	r26, r1
    10f2:	b1 09       	sbc	r27, r1
    10f4:	b1 f7       	brne	.-20     	; 0x10e2 <music_playRick+0xb0>
    10f6:	0c 5f       	subi	r16, 0xFC	; 252
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	ff ef       	ldi	r31, 0xFF	; 255
    10fc:	ef 1a       	sub	r14, r31
    10fe:	ff 0a       	sbc	r15, r31
void music_playRick() {
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    1100:	0c 15       	cp	r16, r12
    1102:	1d 05       	cpc	r17, r13
    1104:	09 f0       	breq	.+2      	; 0x1108 <music_playRick+0xd6>
    1106:	bb cf       	rjmp	.-138    	; 0x107e <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	cb 01       	movw	r24, r22
    110e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <pwm_setFreq>
	menu_init();
    1112:	0e 94 8a 0a 	call	0x1514	; 0x1514 <menu_init>

	sei();
    1116:	78 94       	sei
	

}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	8f 90       	pop	r8
    1130:	08 95       	ret

00001132 <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    1132:	6b e0       	ldi	r22, 0x0B	; 11
    1134:	72 e0       	ldi	r23, 0x02	; 2
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <pwm_setFreq>
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	8f e7       	ldi	r24, 0x7F	; 127
    1142:	97 e0       	ldi	r25, 0x07	; 7
    1144:	21 50       	subi	r18, 0x01	; 1
    1146:	80 40       	sbci	r24, 0x00	; 0
    1148:	90 40       	sbci	r25, 0x00	; 0
    114a:	e1 f7       	brne	.-8      	; 0x1144 <music_gameOver+0x12>
    114c:	00 c0       	rjmp	.+0      	; 0x114e <music_gameOver+0x1c>
    114e:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    1150:	68 e8       	ldi	r22, 0x88	; 136
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <pwm_setFreq>
    115c:	2f ef       	ldi	r18, 0xFF	; 255
    115e:	8f e7       	ldi	r24, 0x7F	; 127
    1160:	97 e0       	ldi	r25, 0x07	; 7
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	80 40       	sbci	r24, 0x00	; 0
    1166:	90 40       	sbci	r25, 0x00	; 0
    1168:	e1 f7       	brne	.-8      	; 0x1162 <music_gameOver+0x30>
    116a:	00 c0       	rjmp	.+0      	; 0x116c <music_gameOver+0x3a>
    116c:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    116e:	67 e3       	ldi	r22, 0x37	; 55
    1170:	71 e0       	ldi	r23, 0x01	; 1
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <pwm_setFreq>
    117a:	2f ef       	ldi	r18, 0xFF	; 255
    117c:	8f e7       	ldi	r24, 0x7F	; 127
    117e:	97 e0       	ldi	r25, 0x07	; 7
    1180:	21 50       	subi	r18, 0x01	; 1
    1182:	80 40       	sbci	r24, 0x00	; 0
    1184:	90 40       	sbci	r25, 0x00	; 0
    1186:	e1 f7       	brne	.-8      	; 0x1180 <music_gameOver+0x4e>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <music_gameOver+0x58>
    118a:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    118c:	66 e0       	ldi	r22, 0x06	; 6
    118e:	71 e0       	ldi	r23, 0x01	; 1
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <pwm_setFreq>
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	8f e7       	ldi	r24, 0x7F	; 127
    119c:	97 e0       	ldi	r25, 0x07	; 7
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	80 40       	sbci	r24, 0x00	; 0
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <music_gameOver+0x6c>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <music_gameOver+0x76>
    11a8:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	cb 01       	movw	r24, r22
    11b0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <pwm_setFreq>
    11b4:	08 95       	ret

000011b6 <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    11b6:	bc 01       	movw	r22, r24
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <pwm_setFreq>
    11c0:	08 95       	ret

000011c2 <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    11c2:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    11c8:	80 e8       	ldi	r24, 0x80	; 128
    11ca:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    11cc:	83 b7       	in	r24, 0x33	; 51
    11ce:	88 60       	ori	r24, 0x08	; 8
    11d0:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    11d2:	83 b7       	in	r24, 0x33	; 51
    11d4:	80 61       	ori	r24, 0x10	; 16
    11d6:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    11d8:	83 b7       	in	r24, 0x33	; 51
    11da:	88 7f       	andi	r24, 0xF8	; 248
    11dc:	83 bf       	out	0x33, r24	; 51
    11de:	08 95       	ret

000011e0 <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    11e0:	9b 01       	movw	r18, r22
    11e2:	ac 01       	movw	r20, r24
    if (freq == 0) {
    11e4:	67 2b       	or	r22, r23
    11e6:	68 2b       	or	r22, r24
    11e8:	69 2b       	or	r22, r25
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11ec:	83 b7       	in	r24, 0x33	; 51
    11ee:	88 7f       	andi	r24, 0xF8	; 248
    11f0:	83 bf       	out	0x33, r24	; 51
        return;
    11f2:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e8       	ldi	r23, 0x80	; 128
    11f8:	85 e2       	ldi	r24, 0x25	; 37
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__udivmodsi4>
    1200:	da 01       	movw	r26, r20
    1202:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    1204:	21 30       	cpi	r18, 0x01	; 1
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	36 07       	cpc	r19, r22
    120a:	41 05       	cpc	r20, r1
    120c:	51 05       	cpc	r21, r1
    120e:	a8 f1       	brcs	.+106    	; 0x127a <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    1210:	68 94       	set
    1212:	12 f8       	bld	r1, 2
    1214:	b6 95       	lsr	r27
    1216:	a7 95       	ror	r26
    1218:	97 95       	ror	r25
    121a:	87 95       	ror	r24
    121c:	16 94       	lsr	r1
    121e:	d1 f7       	brne	.-12     	; 0x1214 <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	96 07       	cpc	r25, r22
    1226:	a1 05       	cpc	r26, r1
    1228:	b1 05       	cpc	r27, r1
    122a:	48 f1       	brcs	.+82     	; 0x127e <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    122c:	da 01       	movw	r26, r20
    122e:	c9 01       	movw	r24, r18
    1230:	68 94       	set
    1232:	15 f8       	bld	r1, 5
    1234:	b6 95       	lsr	r27
    1236:	a7 95       	ror	r26
    1238:	97 95       	ror	r25
    123a:	87 95       	ror	r24
    123c:	16 94       	lsr	r1
    123e:	d1 f7       	brne	.-12     	; 0x1234 <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	96 07       	cpc	r25, r22
    1246:	a1 05       	cpc	r26, r1
    1248:	b1 05       	cpc	r27, r1
    124a:	d8 f0       	brcs	.+54     	; 0x1282 <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    124c:	bb 27       	eor	r27, r27
    124e:	a5 2f       	mov	r26, r21
    1250:	94 2f       	mov	r25, r20
    1252:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	96 07       	cpc	r25, r22
    125a:	a1 05       	cpc	r26, r1
    125c:	b1 05       	cpc	r27, r1
    125e:	98 f0       	brcs	.+38     	; 0x1286 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    1260:	da 01       	movw	r26, r20
    1262:	c9 01       	movw	r24, r18
    1264:	07 2e       	mov	r0, r23
    1266:	7a e0       	ldi	r23, 0x0A	; 10
    1268:	b6 95       	lsr	r27
    126a:	a7 95       	ror	r26
    126c:	97 95       	ror	r25
    126e:	87 95       	ror	r24
    1270:	7a 95       	dec	r23
    1272:	d1 f7       	brne	.-12     	; 0x1268 <pwm_setFreq+0x88>
    1274:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    1276:	35 e0       	ldi	r19, 0x05	; 5
    1278:	07 c0       	rjmp	.+14     	; 0x1288 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    127a:	31 e0       	ldi	r19, 0x01	; 1
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    127e:	32 e0       	ldi	r19, 0x02	; 2
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    1282:	33 e0       	ldi	r19, 0x03	; 3
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    1286:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1288:	23 b7       	in	r18, 0x33	; 51
    128a:	28 7f       	andi	r18, 0xF8	; 248
    128c:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    128e:	23 b7       	in	r18, 0x33	; 51
    1290:	23 2b       	or	r18, r19
    1292:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    1294:	81 50       	subi	r24, 0x01	; 1
    1296:	81 bf       	out	0x31, r24	; 49
    1298:	08 95       	ret

0000129a <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    129a:	85 b7       	in	r24, 0x35	; 53
    129c:	8f 7e       	andi	r24, 0xEF	; 239
    129e:	85 bf       	out	0x35, r24	; 53
    12a0:	84 b7       	in	r24, 0x34	; 52
    12a2:	8f 7d       	andi	r24, 0xDF	; 223
    12a4:	84 bf       	out	0x34, r24	; 52
    12a6:	86 b7       	in	r24, 0x36	; 54
    12a8:	8f 77       	andi	r24, 0x7F	; 127
    12aa:	86 bf       	out	0x36, r24	; 54
    12ac:	08 95       	ret

000012ae <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    12ae:	88 b1       	in	r24, 0x08	; 8
    12b0:	88 68       	ori	r24, 0x88	; 136
    12b2:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    12b4:	85 b7       	in	r24, 0x35	; 53
    12b6:	80 62       	ori	r24, 0x20	; 32
    12b8:	85 bf       	out	0x35, r24	; 53
    12ba:	88 95       	sleep
    12bc:	85 b7       	in	r24, 0x35	; 53
    12be:	8f 7d       	andi	r24, 0xDF	; 223
    12c0:	85 bf       	out	0x35, r24	; 53
    12c2:	08 95       	ret

000012c4 <joystick_init>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystick_init() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12ca:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12d4:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <joystickOffsetY>
    12d8:	08 95       	ret

000012da <joystick_readPosition>:
}
void joystick_readPosition() {
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12ec:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12f4:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    12f6:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <joystickOffsetX>
    12fa:	c6 17       	cp	r28, r22
    12fc:	80 f4       	brcc	.+32     	; 0x131e <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	2c 2f       	mov	r18, r28
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	26 1b       	sub	r18, r22
    1306:	37 0b       	sbc	r19, r23
    1308:	44 e6       	ldi	r20, 0x64	; 100
    130a:	42 9f       	mul	r20, r18
    130c:	c0 01       	movw	r24, r0
    130e:	43 9f       	mul	r20, r19
    1310:	90 0d       	add	r25, r0
    1312:	11 24       	eor	r1, r1
    1314:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodhi4>
    1318:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <joystick_pos>
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    131e:	46 2f       	mov	r20, r22
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	2c 2f       	mov	r18, r28
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	24 1b       	sub	r18, r20
    1328:	35 0b       	sbc	r19, r21
    132a:	64 e6       	ldi	r22, 0x64	; 100
    132c:	62 9f       	mul	r22, r18
    132e:	c0 01       	movw	r24, r0
    1330:	63 9f       	mul	r22, r19
    1332:	90 0d       	add	r25, r0
    1334:	11 24       	eor	r1, r1
    1336:	6f ef       	ldi	r22, 0xFF	; 255
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	64 1b       	sub	r22, r20
    133c:	75 0b       	sbc	r23, r21
    133e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodhi4>
    1342:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    1346:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <joystickOffsetY>
    134a:	e2 17       	cp	r30, r18
    134c:	88 f4       	brcc	.+34     	; 0x1370 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    134e:	62 2f       	mov	r22, r18
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	4e 2f       	mov	r20, r30
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	46 1b       	sub	r20, r22
    1358:	57 0b       	sbc	r21, r23
    135a:	24 e6       	ldi	r18, 0x64	; 100
    135c:	24 9f       	mul	r18, r20
    135e:	c0 01       	movw	r24, r0
    1360:	25 9f       	mul	r18, r21
    1362:	90 0d       	add	r25, r0
    1364:	11 24       	eor	r1, r1
    1366:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodhi4>
    136a:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos+0x1>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4e 2f       	mov	r20, r30
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	42 1b       	sub	r20, r18
    1378:	53 0b       	sbc	r21, r19
    137a:	64 e6       	ldi	r22, 0x64	; 100
    137c:	64 9f       	mul	r22, r20
    137e:	c0 01       	movw	r24, r0
    1380:	65 9f       	mul	r22, r21
    1382:	90 0d       	add	r25, r0
    1384:	11 24       	eor	r1, r1
    1386:	6f ef       	ldi	r22, 0xFF	; 255
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	62 1b       	sub	r22, r18
    138c:	73 0b       	sbc	r23, r19
    138e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodhi4>
    1392:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    1396:	c7 e6       	ldi	r28, 0x67	; 103
    1398:	d3 e0       	ldi	r29, 0x03	; 3
    139a:	68 81       	ld	r22, Y
    139c:	06 2e       	mov	r0, r22
    139e:	00 0c       	add	r0, r0
    13a0:	77 0b       	sbc	r23, r23
    13a2:	88 0b       	sbc	r24, r24
    13a4:	99 0b       	sbc	r25, r25
    13a6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__floatsisf>
    13aa:	6b 01       	movw	r12, r22
    13ac:	7c 01       	movw	r14, r24
    13ae:	69 81       	ldd	r22, Y+1	; 0x01
    13b0:	06 2e       	mov	r0, r22
    13b2:	00 0c       	add	r0, r0
    13b4:	77 0b       	sbc	r23, r23
    13b6:	88 0b       	sbc	r24, r24
    13b8:	99 0b       	sbc	r25, r25
    13ba:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__floatsisf>
    13be:	a7 01       	movw	r20, r14
    13c0:	96 01       	movw	r18, r12
    13c2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <atan2>
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	44 eb       	ldi	r20, 0xB4	; 180
    13cc:	53 e4       	ldi	r21, 0x43	; 67
    13ce:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__mulsf3>
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__mulsf3>
    13de:	23 ec       	ldi	r18, 0xC3	; 195
    13e0:	35 ef       	ldi	r19, 0xF5	; 245
    13e2:	48 e4       	ldi	r20, 0x48	; 72
    13e4:	50 e4       	ldi	r21, 0x40	; 64
    13e6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__divsf3>
    13ea:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__fixsfsi>
    13ee:	7b 83       	std	Y+3, r23	; 0x03
    13f0:	6a 83       	std	Y+2, r22	; 0x02
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	08 95       	ret

00001400 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    1400:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    1402:	80 81       	ld	r24, Z
    1404:	94 e0       	ldi	r25, 0x04	; 4
    1406:	98 0f       	add	r25, r24
    1408:	99 30       	cpi	r25, 0x09	; 9
    140a:	20 f4       	brcc	.+8      	; 0x1414 <joystick_getDirection+0x14>
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	9c 5f       	subi	r25, 0xFC	; 252
    1410:	99 30       	cpi	r25, 0x09	; 9
    1412:	90 f0       	brcs	.+36     	; 0x1438 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    1414:	85 30       	cpi	r24, 0x05	; 5
    1416:	2c f0       	brlt	.+10     	; 0x1422 <joystick_getDirection+0x22>
    1418:	81 81       	ldd	r24, Z+1	; 0x01
    141a:	8f 5c       	subi	r24, 0xCF	; 207
    141c:	83 36       	cpi	r24, 0x63	; 99
    141e:	38 f4       	brcc	.+14     	; 0x142e <joystick_getDirection+0x2e>
    1420:	0d c0       	rjmp	.+26     	; 0x143c <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    1422:	8c 3f       	cpi	r24, 0xFC	; 252
    1424:	24 f4       	brge	.+8      	; 0x142e <joystick_getDirection+0x2e>
    1426:	81 81       	ldd	r24, Z+1	; 0x01
    1428:	8f 5c       	subi	r24, 0xCF	; 207
    142a:	83 36       	cpi	r24, 0x63	; 99
    142c:	48 f0       	brcs	.+18     	; 0x1440 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    142e:	81 81       	ldd	r24, Z+1	; 0x01
    1430:	8c 3f       	cpi	r24, 0xFC	; 252
    1432:	44 f0       	brlt	.+16     	; 0x1444 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    1438:	84 e0       	ldi	r24, 0x04	; 4
    143a:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    1444:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    1446:	08 95       	ret

00001448 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    1448:	0e 94 00 0a 	call	0x1400	; 0x1400 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    144c:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <currentMenu+0x3>
    1450:	94 30       	cpi	r25, 0x04	; 4
    1452:	09 f0       	breq	.+2      	; 0x1456 <navigateMenu+0xe>
    1454:	5c c0       	rjmp	.+184    	; 0x150e <navigateMenu+0xc6>
			switch (dir) {
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	e1 f1       	breq	.+120    	; 0x14d2 <navigateMenu+0x8a>
    145a:	60 f1       	brcs	.+88     	; 0x14b4 <navigateMenu+0x6c>
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	c9 f0       	breq	.+50     	; 0x1492 <navigateMenu+0x4a>
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	09 f0       	breq	.+2      	; 0x1466 <navigateMenu+0x1e>
    1464:	54 c0       	rjmp	.+168    	; 0x150e <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    1466:	eb e6       	ldi	r30, 0x6B	; 107
    1468:	f3 e0       	ldi	r31, 0x03	; 3
    146a:	92 81       	ldd	r25, Z+2	; 0x02
    146c:	49 2f       	mov	r20, r25
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	01 90       	ld	r0, Z+
    1472:	f0 81       	ld	r31, Z
    1474:	e0 2d       	mov	r30, r0
    1476:	20 a1       	ldd	r18, Z+32	; 0x20
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	21 50       	subi	r18, 0x01	; 1
    147c:	31 09       	sbc	r19, r1
    147e:	42 17       	cp	r20, r18
    1480:	53 07       	cpc	r21, r19
    1482:	24 f4       	brge	.+8      	; 0x148c <navigateMenu+0x44>
					currentMenu.childIndex++;
    1484:	9f 5f       	subi	r25, 0xFF	; 255
    1486:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <currentMenu+0x2>
    148a:	41 c0       	rjmp	.+130    	; 0x150e <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    148c:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <currentMenu+0x2>
    1490:	3e c0       	rjmp	.+124    	; 0x150e <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    1492:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <currentMenu+0x2>
    1496:	99 23       	and	r25, r25
    1498:	21 f0       	breq	.+8      	; 0x14a2 <navigateMenu+0x5a>
					currentMenu.childIndex--;
    149a:	91 50       	subi	r25, 0x01	; 1
    149c:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <currentMenu+0x2>
    14a0:	36 c0       	rjmp	.+108    	; 0x150e <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    14a2:	eb e6       	ldi	r30, 0x6B	; 107
    14a4:	f3 e0       	ldi	r31, 0x03	; 3
    14a6:	a0 81       	ld	r26, Z
    14a8:	b1 81       	ldd	r27, Z+1	; 0x01
    14aa:	90 96       	adiw	r26, 0x20	; 32
    14ac:	9c 91       	ld	r25, X
    14ae:	91 50       	subi	r25, 0x01	; 1
    14b0:	92 83       	std	Z+2, r25	; 0x02
    14b2:	2d c0       	rjmp	.+90     	; 0x150e <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    14b4:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <currentMenu>
    14b8:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <currentMenu+0x1>
    14bc:	22 89       	ldd	r18, Z+18	; 0x12
    14be:	33 89       	ldd	r19, Z+19	; 0x13
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	21 f1       	breq	.+72     	; 0x150e <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    14c6:	eb e6       	ldi	r30, 0x6B	; 107
    14c8:	f3 e0       	ldi	r31, 0x03	; 3
    14ca:	31 83       	std	Z+1, r19	; 0x01
    14cc:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    14ce:	12 82       	std	Z+2, r1	; 0x02
    14d0:	1e c0       	rjmp	.+60     	; 0x150e <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    14d2:	ab e6       	ldi	r26, 0x6B	; 107
    14d4:	b3 e0       	ldi	r27, 0x03	; 3
    14d6:	2d 91       	ld	r18, X+
    14d8:	3c 91       	ld	r19, X
    14da:	11 97       	sbiw	r26, 0x01	; 1
    14dc:	12 96       	adiw	r26, 0x02	; 2
    14de:	9c 91       	ld	r25, X
    14e0:	e9 2f       	mov	r30, r25
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	3a 96       	adiw	r30, 0x0a	; 10
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	e2 0f       	add	r30, r18
    14ec:	f3 1f       	adc	r31, r19
    14ee:	01 90       	ld	r0, Z+
    14f0:	f0 81       	ld	r31, Z
    14f2:	e0 2d       	mov	r30, r0
    14f4:	90 a1       	ldd	r25, Z+32	; 0x20
    14f6:	91 11       	cpse	r25, r1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <navigateMenu+0xb8>
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	99 23       	and	r25, r25
    14fe:	39 f0       	breq	.+14     	; 0x150e <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    1500:	ab e6       	ldi	r26, 0x6B	; 107
    1502:	b3 e0       	ldi	r27, 0x03	; 3
    1504:	11 96       	adiw	r26, 0x01	; 1
    1506:	fc 93       	st	X, r31
    1508:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    150a:	12 96       	adiw	r26, 0x02	; 2
    150c:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    150e:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <currentMenu+0x3>
    1512:	08 95       	ret

00001514 <menu_init>:
#include <stdio.h>


MenuNode nodes[8];

void menu_init() {
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    151c:	8a e0       	ldi	r24, 0x0A	; 10
    151e:	ec e1       	ldi	r30, 0x1C	; 28
    1520:	f3 e0       	ldi	r31, 0x03	; 3
    1522:	a0 e9       	ldi	r26, 0x90	; 144
    1524:	b3 e0       	ldi	r27, 0x03	; 3
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	8a 95       	dec	r24
    152c:	e1 f7       	brne	.-8      	; 0x1526 <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    152e:	8a e0       	ldi	r24, 0x0A	; 10
    1530:	e6 e2       	ldi	r30, 0x26	; 38
    1532:	f3 e0       	ldi	r31, 0x03	; 3
    1534:	a1 eb       	ldi	r26, 0xB1	; 177
    1536:	b3 e0       	ldi	r27, 0x03	; 3
    1538:	01 90       	ld	r0, Z+
    153a:	0d 92       	st	X+, r0
    153c:	8a 95       	dec	r24
    153e:	e1 f7       	brne	.-8      	; 0x1538 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    1540:	8c e0       	ldi	r24, 0x0C	; 12
    1542:	e0 e3       	ldi	r30, 0x30	; 48
    1544:	f3 e0       	ldi	r31, 0x03	; 3
    1546:	a2 ed       	ldi	r26, 0xD2	; 210
    1548:	b3 e0       	ldi	r27, 0x03	; 3
    154a:	01 90       	ld	r0, Z+
    154c:	0d 92       	st	X+, r0
    154e:	8a 95       	dec	r24
    1550:	e1 f7       	brne	.-8      	; 0x154a <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    1552:	86 e0       	ldi	r24, 0x06	; 6
    1554:	ec e3       	ldi	r30, 0x3C	; 60
    1556:	f3 e0       	ldi	r31, 0x03	; 3
    1558:	a3 ef       	ldi	r26, 0xF3	; 243
    155a:	b3 e0       	ldi	r27, 0x03	; 3
    155c:	01 90       	ld	r0, Z+
    155e:	0d 92       	st	X+, r0
    1560:	8a 95       	dec	r24
    1562:	e1 f7       	brne	.-8      	; 0x155c <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    1564:	87 e0       	ldi	r24, 0x07	; 7
    1566:	e2 e4       	ldi	r30, 0x42	; 66
    1568:	f3 e0       	ldi	r31, 0x03	; 3
    156a:	a4 e1       	ldi	r26, 0x14	; 20
    156c:	b4 e0       	ldi	r27, 0x04	; 4
    156e:	01 90       	ld	r0, Z+
    1570:	0d 92       	st	X+, r0
    1572:	8a 95       	dec	r24
    1574:	e1 f7       	brne	.-8      	; 0x156e <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    1576:	87 e0       	ldi	r24, 0x07	; 7
    1578:	e9 e4       	ldi	r30, 0x49	; 73
    157a:	f3 e0       	ldi	r31, 0x03	; 3
    157c:	a5 e3       	ldi	r26, 0x35	; 53
    157e:	b4 e0       	ldi	r27, 0x04	; 4
    1580:	01 90       	ld	r0, Z+
    1582:	0d 92       	st	X+, r0
    1584:	8a 95       	dec	r24
    1586:	e1 f7       	brne	.-8      	; 0x1580 <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    1588:	8a e0       	ldi	r24, 0x0A	; 10
    158a:	e0 e5       	ldi	r30, 0x50	; 80
    158c:	f3 e0       	ldi	r31, 0x03	; 3
    158e:	a6 e5       	ldi	r26, 0x56	; 86
    1590:	b4 e0       	ldi	r27, 0x04	; 4
    1592:	01 90       	ld	r0, Z+
    1594:	0d 92       	st	X+, r0
    1596:	8a 95       	dec	r24
    1598:	e1 f7       	brne	.-8      	; 0x1592 <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    159a:	8a e0       	ldi	r24, 0x0A	; 10
    159c:	ea e5       	ldi	r30, 0x5A	; 90
    159e:	f3 e0       	ldi	r31, 0x03	; 3
    15a0:	a7 e7       	ldi	r26, 0x77	; 119
    15a2:	b4 e0       	ldi	r27, 0x04	; 4
    15a4:	01 90       	ld	r0, Z+
    15a6:	0d 92       	st	X+, r0
    15a8:	8a 95       	dec	r24
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <menu_init+0x90>
    15ac:	6e e8       	ldi	r22, 0x8E	; 142
    15ae:	73 e0       	ldi	r23, 0x03	; 3
    15b0:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    15b6:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    15b8:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	91 05       	cpc	r25, r1
    15be:	14 f0       	brlt	.+4      	; 0x15c4 <menu_init+0xb0>
			nodes[i].isAction=1;
    15c0:	21 83       	std	Z+1, r18	; 0x01
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    15c4:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	b1 96       	adiw	r30, 0x21	; 33
    15ca:	88 30       	cpi	r24, 0x08	; 8
    15cc:	91 05       	cpc	r25, r1
    15ce:	a1 f7       	brne	.-24     	; 0x15b8 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    15d0:	ee e8       	ldi	r30, 0x8E	; 142
    15d2:	f3 e0       	ldi	r31, 0x03	; 3
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <nodes+0x41>
	nodes[2].numChildren = 2;
    15de:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <nodes+0x62>
	nodes[3].numChildren = 0;
    15e2:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <nodes+0x83>
	nodes[4].numChildren = 0;
    15e6:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <nodes+0xa4>
	nodes[5].numChildren = 0;
    15ea:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15ee:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15f2:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    15f6:	13 8a       	std	Z+19, r1	; 0x13
    15f8:	12 8a       	std	Z+18, r1	; 0x12
    15fa:	06 e9       	ldi	r16, 0x96	; 150
    15fc:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    15fe:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    1600:	51 e2       	ldi	r21, 0x21	; 33
    1602:	18 c0       	rjmp	.+48     	; 0x1634 <menu_init+0x120>
    1604:	54 9f       	mul	r21, r20
    1606:	f0 01       	movw	r30, r0
    1608:	11 24       	eor	r1, r1
    160a:	e2 57       	subi	r30, 0x72	; 114
    160c:	fc 4f       	sbci	r31, 0xFC	; 252
    160e:	e9 93       	st	Y+, r30
    1610:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    1612:	b3 8b       	std	Z+19, r27	; 0x13
    1614:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    1616:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1618:	2f 5f       	subi	r18, 0xFF	; 255
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	90 96       	adiw	r26, 0x20	; 32
    161e:	8c 91       	ld	r24, X
    1620:	90 97       	sbiw	r26, 0x20	; 32
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	28 17       	cp	r18, r24
    1626:	39 07       	cpc	r19, r25
    1628:	6c f3       	brlt	.-38     	; 0x1604 <menu_init+0xf0>
    162a:	6f 5d       	subi	r22, 0xDF	; 223
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    162e:	60 17       	cp	r22, r16
    1630:	71 07       	cpc	r23, r17
    1632:	59 f0       	breq	.+22     	; 0x164a <menu_init+0x136>
    1634:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1636:	90 96       	adiw	r26, 0x20	; 32
    1638:	8c 91       	ld	r24, X
    163a:	90 97       	sbiw	r26, 0x20	; 32
    163c:	88 23       	and	r24, r24
    163e:	a9 f3       	breq	.-22     	; 0x162a <menu_init+0x116>
    1640:	eb 01       	movw	r28, r22
    1642:	64 96       	adiw	r28, 0x14	; 20
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	dd cf       	rjmp	.-70     	; 0x1604 <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    164a:	87 e6       	ldi	r24, 0x67	; 103
    164c:	93 e0       	ldi	r25, 0x03	; 3
    164e:	0e 94 24 0a 	call	0x1448	; 0x1448 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    1652:	eb e6       	ldi	r30, 0x6B	; 107
    1654:	f3 e0       	ldi	r31, 0x03	; 3
    1656:	8e e8       	ldi	r24, 0x8E	; 142
    1658:	93 e0       	ldi	r25, 0x03	; 3
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    165e:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    1660:	84 e0       	ldi	r24, 0x04	; 4
    1662:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	08 95       	ret

0000166e <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
	oled_reset();
    1676:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
	oled_home();
    167a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    167e:	cb e6       	ldi	r28, 0x6B	; 107
    1680:	d3 e0       	ldi	r29, 0x03	; 3
    1682:	88 81       	ld	r24, Y
    1684:	99 81       	ldd	r25, Y+1	; 0x01
    1686:	02 96       	adiw	r24, 0x02	; 2
    1688:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    168c:	e8 81       	ld	r30, Y
    168e:	f9 81       	ldd	r31, Y+1	; 0x01
    1690:	80 a1       	ldd	r24, Z+32	; 0x20
    1692:	88 23       	and	r24, r24
    1694:	39 f1       	breq	.+78     	; 0x16e4 <menu_printCurrentMenu+0x76>
    1696:	c0 e0       	ldi	r28, 0x00	; 0
    1698:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    169a:	0b e6       	ldi	r16, 0x6B	; 107
    169c:	13 e0       	ldi	r17, 0x03	; 3
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    169e:	ce 01       	movw	r24, r28
    16a0:	02 96       	adiw	r24, 0x02	; 2
    16a2:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    16a6:	d8 01       	movw	r26, r16
    16a8:	8d 91       	ld	r24, X+
    16aa:	9c 91       	ld	r25, X
    16ac:	fe 01       	movw	r30, r28
    16ae:	3a 96       	adiw	r30, 0x0a	; 10
    16b0:	ee 0f       	add	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	e8 0f       	add	r30, r24
    16b6:	f9 1f       	adc	r31, r25
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	02 96       	adiw	r24, 0x02	; 2
    16be:	0e 94 df 0b 	call	0x17be	; 0x17be <oled_print>
		if (currentMenu.childIndex == i) {
    16c2:	f8 01       	movw	r30, r16
    16c4:	82 81       	ldd	r24, Z+2	; 0x02
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	8c 17       	cp	r24, r28
    16ca:	9d 07       	cpc	r25, r29
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <menu_printCurrentMenu+0x64>
			oled_print_arrow();
    16ce:	0e 94 99 0b 	call	0x1732	; 0x1732 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    16d2:	21 96       	adiw	r28, 0x01	; 1
    16d4:	d8 01       	movw	r26, r16
    16d6:	ed 91       	ld	r30, X+
    16d8:	fc 91       	ld	r31, X
    16da:	80 a1       	ldd	r24, Z+32	; 0x20
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	c8 17       	cp	r28, r24
    16e0:	d9 07       	cpc	r29, r25
    16e2:	ec f2       	brlt	.-70     	; 0x169e <menu_printCurrentMenu+0x30>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16ee:	80 55       	subi	r24, 0x50	; 80
    16f0:	e0 e0       	ldi	r30, 0x00	; 0
    16f2:	f0 e1       	ldi	r31, 0x10	; 16
    16f4:	80 83       	st	Z, r24
    16f6:	86 2f       	mov	r24, r22
    16f8:	8f 70       	andi	r24, 0x0F	; 15
    16fa:	80 83       	st	Z, r24
    16fc:	62 95       	swap	r22
    16fe:	6f 70       	andi	r22, 0x0F	; 15
    1700:	60 61       	ori	r22, 0x10	; 16
    1702:	60 83       	st	Z, r22
    1704:	08 95       	ret

00001706 <oled_reset>:
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	10 e0       	ldi	r17, 0x00	; 0
    170e:	c0 e0       	ldi	r28, 0x00	; 0
    1710:	d2 e1       	ldi	r29, 0x12	; 18
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	81 2f       	mov	r24, r17
    1716:	0e 94 77 0b 	call	0x16ee	; 0x16ee <oled_pos>
    171a:	80 e8       	ldi	r24, 0x80	; 128
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	18 82       	st	Y, r1
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	e9 f7       	brne	.-6      	; 0x171e <oled_reset+0x18>
    1724:	1f 5f       	subi	r17, 0xFF	; 255
    1726:	18 30       	cpi	r17, 0x08	; 8
    1728:	a1 f7       	brne	.-24     	; 0x1712 <oled_reset+0xc>
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	08 95       	ret

00001732 <oled_print_arrow>:
    1732:	e0 e0       	ldi	r30, 0x00	; 0
    1734:	f2 e1       	ldi	r31, 0x12	; 18
    1736:	88 e1       	ldi	r24, 0x18	; 24
    1738:	80 83       	st	Z, r24
    173a:	9c e3       	ldi	r25, 0x3C	; 60
    173c:	90 83       	st	Z, r25
    173e:	9e e7       	ldi	r25, 0x7E	; 126
    1740:	90 83       	st	Z, r25
    1742:	80 83       	st	Z, r24
    1744:	80 83       	st	Z, r24
    1746:	08 95       	ret

00001748 <oled_home>:
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <oled_pos>
    1750:	08 95       	ret

00001752 <oled_init>:
    1752:	e0 e0       	ldi	r30, 0x00	; 0
    1754:	f0 e1       	ldi	r31, 0x10	; 16
    1756:	8e ea       	ldi	r24, 0xAE	; 174
    1758:	80 83       	st	Z, r24
    175a:	81 ea       	ldi	r24, 0xA1	; 161
    175c:	80 83       	st	Z, r24
    175e:	8a ed       	ldi	r24, 0xDA	; 218
    1760:	80 83       	st	Z, r24
    1762:	82 e1       	ldi	r24, 0x12	; 18
    1764:	80 83       	st	Z, r24
    1766:	88 ec       	ldi	r24, 0xC8	; 200
    1768:	80 83       	st	Z, r24
    176a:	88 ea       	ldi	r24, 0xA8	; 168
    176c:	80 83       	st	Z, r24
    176e:	8f e3       	ldi	r24, 0x3F	; 63
    1770:	80 83       	st	Z, r24
    1772:	85 ed       	ldi	r24, 0xD5	; 213
    1774:	80 83       	st	Z, r24
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	80 83       	st	Z, r24
    177a:	81 e8       	ldi	r24, 0x81	; 129
    177c:	80 83       	st	Z, r24
    177e:	80 e5       	ldi	r24, 0x50	; 80
    1780:	80 83       	st	Z, r24
    1782:	89 ed       	ldi	r24, 0xD9	; 217
    1784:	80 83       	st	Z, r24
    1786:	81 e2       	ldi	r24, 0x21	; 33
    1788:	80 83       	st	Z, r24
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	80 83       	st	Z, r24
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	80 83       	st	Z, r24
    1792:	8b ed       	ldi	r24, 0xDB	; 219
    1794:	80 83       	st	Z, r24
    1796:	80 e3       	ldi	r24, 0x30	; 48
    1798:	80 83       	st	Z, r24
    179a:	8d ea       	ldi	r24, 0xAD	; 173
    179c:	80 83       	st	Z, r24
    179e:	10 82       	st	Z, r1
    17a0:	84 ea       	ldi	r24, 0xA4	; 164
    17a2:	80 83       	st	Z, r24
    17a4:	86 ea       	ldi	r24, 0xA6	; 166
    17a6:	80 83       	st	Z, r24
    17a8:	8f ea       	ldi	r24, 0xAF	; 175
    17aa:	80 83       	st	Z, r24
    17ac:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_reset>
    17b0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <oled_home>
    17b4:	08 95       	ret

000017b6 <oled_gotoLine>:
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <oled_pos>
    17bc:	08 95       	ret

000017be <oled_print>:

void oled_print(char* character){
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	dc 01       	movw	r26, r24
	while (*character != '\0')
    17c4:	8c 91       	ld	r24, X
    17c6:	81 11       	cpse	r24, r1
    17c8:	1a c0       	rjmp	.+52     	; 0x17fe <oled_print+0x40>
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    17cc:	ec 91       	ld	r30, X
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	b0 97       	sbiw	r30, 0x20	; 32
    17d2:	ee 0f       	add	r30, r30
    17d4:	ff 1f       	adc	r31, r31
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	e2 0f       	add	r30, r18
    17e0:	f3 1f       	adc	r31, r19
    17e2:	e7 5d       	subi	r30, 0xD7	; 215
    17e4:	fd 4f       	sbci	r31, 0xFD	; 253
    17e6:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17e8:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17ea:	2f 5f       	subi	r18, 0xFF	; 255
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	28 30       	cpi	r18, 0x08	; 8
    17f0:	31 05       	cpc	r19, r1
    17f2:	61 f7       	brne	.-40     	; 0x17cc <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17f4:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    17f6:	8c 91       	ld	r24, X
    17f8:	81 11       	cpse	r24, r1
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <oled_print+0x44>
    17fc:	05 c0       	rjmp	.+10     	; 0x1808 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17fe:	c0 e0       	ldi	r28, 0x00	; 0
    1800:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	e2 cf       	rjmp	.-60     	; 0x17cc <oled_print+0xe>
		}
		character++;
	}
	
	
}
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <setupInit>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1


	void setupInit(void){
	cli();
    180e:	f8 94       	cli
	xmem_init();
    1810:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <xmem_init>
	USART_init(MYUBRR);
    1814:	8f e1       	ldi	r24, 0x1F	; 31
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <USART_init>
	adcInit();
    181c:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
	joystick_init();
    1820:	0e 94 62 09 	call	0x12c4	; 0x12c4 <joystick_init>
	touchButton_init();
    1824:	0e 94 ac 0c 	call	0x1958	; 0x1958 <touchButton_init>
	oled_init();
    1828:	0e 94 a9 0b 	call	0x1752	; 0x1752 <oled_init>
	timer_init();
    182c:	0e 94 9e 0c 	call	0x193c	; 0x193c <timer_init>
	sleep_init();
    1830:	0e 94 4d 09 	call	0x129a	; 0x129a <sleep_init>
	menu_init();
    1834:	0e 94 8a 0a 	call	0x1514	; 0x1514 <menu_init>
	CAN_init();
    1838:	0e 94 32 03 	call	0x664	; 0x664 <CAN_init>
	pwm_init();
    183c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <pwm_init>
	game_init();
    1840:	0e 94 5c 05 	call	0xab8	; 0xab8 <game_init>
	sei();
    1844:	78 94       	sei
    1846:	08 95       	ret

00001848 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1852:	cc e7       	ldi	r28, 0x7C	; 124
    1854:	d3 e0       	ldi	r29, 0x03	; 3
    1856:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    185e:	89 83       	std	Y+1, r24	; 0x01
}
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    1866:	87 b3       	in	r24, 0x17	; 23
    1868:	80 6a       	ori	r24, 0xA0	; 160
    186a:	87 bb       	out	0x17, r24	; 23
    186c:	bc 9a       	sbi	0x17, 4	; 23
    186e:	8d b1       	in	r24, 0x0d	; 13
    1870:	81 65       	ori	r24, 0x51	; 81
    1872:	8d b9       	out	0x0d, r24	; 13
    1874:	c4 9a       	sbi	0x18, 4	; 24
    1876:	08 95       	ret

00001878 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    1878:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    187a:	77 9b       	sbis	0x0e, 7	; 14
    187c:	fe cf       	rjmp	.-4      	; 0x187a <SPI_masterWrite+0x2>

}
    187e:	08 95       	ret

00001880 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    1880:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    1882:	77 9b       	sbis	0x0e, 7	; 14
    1884:	fe cf       	rjmp	.-4      	; 0x1882 <SPI_masterRead+0x2>
	return SPDR;
    1886:	8f b1       	in	r24, 0x0f	; 15
}
    1888:	08 95       	ret

0000188a <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    188a:	66 23       	and	r22, r22
    188c:	69 f0       	breq	.+26     	; 0x18a8 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    188e:	48 b3       	in	r20, 0x18	; 24
    1890:	21 e0       	ldi	r18, 0x01	; 1
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	b9 01       	movw	r22, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <SPI_setChipSelect+0x12>
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	8a 95       	dec	r24
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <SPI_setChipSelect+0xe>
    18a0:	cb 01       	movw	r24, r22
    18a2:	84 2b       	or	r24, r20
    18a4:	88 bb       	out	0x18, r24	; 24
    18a6:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    18a8:	48 b3       	in	r20, 0x18	; 24
    18aa:	21 e0       	ldi	r18, 0x01	; 1
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	b9 01       	movw	r22, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <SPI_setChipSelect+0x2c>
    18b2:	66 0f       	add	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	8a 95       	dec	r24
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <SPI_setChipSelect+0x28>
    18ba:	cb 01       	movw	r24, r22
    18bc:	80 95       	com	r24
    18be:	84 23       	and	r24, r20
    18c0:	88 bb       	out	0x18, r24	; 24
    18c2:	08 95       	ret

000018c4 <__vector_14>:
#include "menu.h"
#include "game.h"
#include <avr/interrupt.h>


ISR (TIMER1_COMPB_vect) {
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
	cli();
    18e6:	f8 94       	cli
	TCNT1 = 0x00;
    18e8:	1d bc       	out	0x2d, r1	; 45
    18ea:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    18ec:	87 e6       	ldi	r24, 0x67	; 103
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	0e 94 6d 09 	call	0x12da	; 0x12da <joystick_readPosition>
	slider_readPosition(&slider_pos);
    18f4:	8c e7       	ldi	r24, 0x7C	; 124
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 24 0c 	call	0x1848	; 0x1848 <slider_readPosition>
	touchButton_readButtons(&buttons);
    18fc:	8a e7       	ldi	r24, 0x7A	; 122
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	0e 94 c5 0c 	call	0x198a	; 0x198a <touchButton_readButtons>
	if(gameActive==0){
    1904:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <gameActive>
    1908:	81 11       	cpse	r24, r1
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <__vector_14+0x54>
		navigateMenu(&joystick_pos);
    190c:	87 e6       	ldi	r24, 0x67	; 103
    190e:	93 e0       	ldi	r25, 0x03	; 3
    1910:	0e 94 24 0a 	call	0x1448	; 0x1448 <navigateMenu>
		menu_printCurrentMenu();
    1914:	0e 94 37 0b 	call	0x166e	; 0x166e <menu_printCurrentMenu>
	}
	else{
		//game_updateOled();
	}
	sei();
    1918:	78 94       	sei
}
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	7f 91       	pop	r23
    1928:	6f 91       	pop	r22
    192a:	5f 91       	pop	r21
    192c:	4f 91       	pop	r20
    192e:	3f 91       	pop	r19
    1930:	2f 91       	pop	r18
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	0f 90       	pop	r0
    1938:	1f 90       	pop	r1
    193a:	18 95       	reti

0000193c <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    193c:	89 b7       	in	r24, 0x39	; 57
    193e:	80 62       	ori	r24, 0x20	; 32
    1940:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1942:	1d bc       	out	0x2d, r1	; 45
    1944:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1946:	80 e3       	ldi	r24, 0x30	; 48
    1948:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    194a:	85 e0       	ldi	r24, 0x05	; 5
    194c:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    194e:	80 ee       	ldi	r24, 0xE0	; 224
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	99 bd       	out	0x29, r25	; 41
    1954:	88 bd       	out	0x28, r24	; 40
    1956:	08 95       	ret

00001958 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    1958:	36 b3       	in	r19, 0x16	; 22
    195a:	26 b3       	in	r18, 0x16	; 22
    195c:	47 b3       	in	r20, 0x17	; 23
    195e:	32 70       	andi	r19, 0x02	; 2
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	bc 01       	movw	r22, r24
    1966:	02 c0       	rjmp	.+4      	; 0x196c <touchButton_init+0x14>
    1968:	66 0f       	add	r22, r22
    196a:	77 1f       	adc	r23, r23
    196c:	3a 95       	dec	r19
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <touchButton_init+0x10>
    1970:	24 70       	andi	r18, 0x04	; 4
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <touchButton_init+0x20>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	2a 95       	dec	r18
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <touchButton_init+0x1c>
    197c:	86 2b       	or	r24, r22
    197e:	97 2b       	or	r25, r23
    1980:	80 95       	com	r24
    1982:	90 95       	com	r25
    1984:	84 23       	and	r24, r20
    1986:	87 bb       	out	0x17, r24	; 23
    1988:	08 95       	ret

0000198a <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    198a:	86 b3       	in	r24, 0x16	; 22
    198c:	ea e7       	ldi	r30, 0x7A	; 122
    198e:	f3 e0       	ldi	r31, 0x03	; 3
    1990:	86 95       	lsr	r24
    1992:	81 70       	andi	r24, 0x01	; 1
    1994:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    1996:	86 b3       	in	r24, 0x16	; 22
    1998:	82 fb       	bst	r24, 2
    199a:	88 27       	eor	r24, r24
    199c:	80 f9       	bld	r24, 0
    199e:	81 83       	std	Z+1, r24	; 0x01
    19a0:	08 95       	ret

000019a2 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    19a2:	5d 9b       	sbis	0x0b, 5	; 11
    19a4:	fe cf       	rjmp	.-4      	; 0x19a2 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    19a6:	8c b9       	out	0x0c, r24	; 12
    19a8:	08 95       	ret

000019aa <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    19aa:	5f 9b       	sbis	0x0b, 7	; 11
    19ac:	fe cf       	rjmp	.-4      	; 0x19aa <USART_receiveChar>
		;
	
	return UDR0;
    19ae:	8c b1       	in	r24, 0x0c	; 12
    19b0:	08 95       	ret

000019b2 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    19b2:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    19b4:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    19b6:	88 e1       	ldi	r24, 0x18	; 24
    19b8:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    19ba:	8e e8       	ldi	r24, 0x8E	; 142
    19bc:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    19be:	65 ed       	ldi	r22, 0xD5	; 213
    19c0:	7c e0       	ldi	r23, 0x0C	; 12
    19c2:	81 ed       	ldi	r24, 0xD1	; 209
    19c4:	9c e0       	ldi	r25, 0x0C	; 12
    19c6:	0e 94 15 10 	call	0x202a	; 0x202a <fdevopen>
    19ca:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <uart+0x1>
    19ce:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <uart>
    19d2:	08 95       	ret

000019d4 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    19d4:	85 b7       	in	r24, 0x35	; 53
    19d6:	80 68       	ori	r24, 0x80	; 128
    19d8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    19da:	80 b7       	in	r24, 0x30	; 48
    19dc:	88 60       	ori	r24, 0x08	; 8
    19de:	80 bf       	out	0x30, r24	; 48
    19e0:	08 95       	ret
    19e2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_pscA>
    19e6:	60 f0       	brcs	.+24     	; 0x1a00 <xmem_init+0x2c>
    19e8:	80 e8       	ldi	r24, 0x80	; 128
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <xmem_init+0x1c>
    19ee:	9e ef       	ldi	r25, 0xFE	; 254
    19f0:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fp_pscB>
    19f4:	28 f0       	brcs	.+10     	; 0x1a00 <xmem_init+0x2c>
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	51 e0       	ldi	r21, 0x01	; 1
    19fa:	71 f4       	brne	.+28     	; 0x1a18 <atan2+0x10>
    19fc:	5e ef       	ldi	r21, 0xFE	; 254
    19fe:	0c c0       	rjmp	.+24     	; 0x1a18 <atan2+0x10>
    1a00:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_nan>
    1a04:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__fp_zero>

00001a08 <atan2>:
    1a08:	e9 2f       	mov	r30, r25
    1a0a:	e0 78       	andi	r30, 0x80	; 128
    1a0c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fp_split3>
    1a10:	40 f3       	brcs	.-48     	; 0x19e2 <xmem_init+0xe>
    1a12:	09 2e       	mov	r0, r25
    1a14:	05 2a       	or	r0, r21
    1a16:	b1 f3       	breq	.-20     	; 0x1a04 <xmem_init+0x30>
    1a18:	26 17       	cp	r18, r22
    1a1a:	37 07       	cpc	r19, r23
    1a1c:	48 07       	cpc	r20, r24
    1a1e:	59 07       	cpc	r21, r25
    1a20:	38 f0       	brcs	.+14     	; 0x1a30 <atan2+0x28>
    1a22:	0e 2e       	mov	r0, r30
    1a24:	07 f8       	bld	r0, 7
    1a26:	e0 25       	eor	r30, r0
    1a28:	69 f0       	breq	.+26     	; 0x1a44 <atan2+0x3c>
    1a2a:	e0 25       	eor	r30, r0
    1a2c:	e0 64       	ori	r30, 0x40	; 64
    1a2e:	0a c0       	rjmp	.+20     	; 0x1a44 <atan2+0x3c>
    1a30:	ef 63       	ori	r30, 0x3F	; 63
    1a32:	07 f8       	bld	r0, 7
    1a34:	00 94       	com	r0
    1a36:	07 fa       	bst	r0, 7
    1a38:	db 01       	movw	r26, r22
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	9d 01       	movw	r18, r26
    1a3e:	dc 01       	movw	r26, r24
    1a40:	ca 01       	movw	r24, r20
    1a42:	ad 01       	movw	r20, r26
    1a44:	ef 93       	push	r30
    1a46:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__divsf3_pse>
    1a4a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__fp_round>
    1a4e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <atan>
    1a52:	5f 91       	pop	r21
    1a54:	55 23       	and	r21, r21
    1a56:	39 f0       	breq	.+14     	; 0x1a66 <atan2+0x5e>
    1a58:	2b ed       	ldi	r18, 0xDB	; 219
    1a5a:	3f e0       	ldi	r19, 0x0F	; 15
    1a5c:	49 e4       	ldi	r20, 0x49	; 73
    1a5e:	50 fd       	sbrc	r21, 0
    1a60:	49 ec       	ldi	r20, 0xC9	; 201
    1a62:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__addsf3>
    1a66:	08 95       	ret

00001a68 <atan>:
    1a68:	df 93       	push	r29
    1a6a:	dd 27       	eor	r29, r29
    1a6c:	b9 2f       	mov	r27, r25
    1a6e:	bf 77       	andi	r27, 0x7F	; 127
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	16 16       	cp	r1, r22
    1a76:	17 06       	cpc	r1, r23
    1a78:	48 07       	cpc	r20, r24
    1a7a:	5b 07       	cpc	r21, r27
    1a7c:	18 f4       	brcc	.+6      	; 0x1a84 <atan+0x1c>
    1a7e:	d9 2f       	mov	r29, r25
    1a80:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <inverse>
    1a84:	9f 93       	push	r25
    1a86:	8f 93       	push	r24
    1a88:	7f 93       	push	r23
    1a8a:	6f 93       	push	r22
    1a8c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <square>
    1a90:	e0 e7       	ldi	r30, 0x70	; 112
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fp_powser>
    1a98:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__fp_round>
    1a9c:	2f 91       	pop	r18
    1a9e:	3f 91       	pop	r19
    1aa0:	4f 91       	pop	r20
    1aa2:	5f 91       	pop	r21
    1aa4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__mulsf3x>
    1aa8:	dd 23       	and	r29, r29
    1aaa:	51 f0       	breq	.+20     	; 0x1ac0 <atan+0x58>
    1aac:	90 58       	subi	r25, 0x80	; 128
    1aae:	a2 ea       	ldi	r26, 0xA2	; 162
    1ab0:	2a ed       	ldi	r18, 0xDA	; 218
    1ab2:	3f e0       	ldi	r19, 0x0F	; 15
    1ab4:	49 ec       	ldi	r20, 0xC9	; 201
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	d0 78       	andi	r29, 0x80	; 128
    1aba:	5d 27       	eor	r21, r29
    1abc:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__addsf3x>
    1ac0:	df 91       	pop	r29
    1ac2:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_round>

00001ac6 <__divsf3>:
    1ac6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__divsf3x>
    1aca:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_round>
    1ace:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fp_pscB>
    1ad2:	58 f0       	brcs	.+22     	; 0x1aea <__divsf3+0x24>
    1ad4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_pscA>
    1ad8:	40 f0       	brcs	.+16     	; 0x1aea <__divsf3+0x24>
    1ada:	29 f4       	brne	.+10     	; 0x1ae6 <__divsf3+0x20>
    1adc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ade:	29 f0       	breq	.+10     	; 0x1aea <__divsf3+0x24>
    1ae0:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__fp_inf>
    1ae4:	51 11       	cpse	r21, r1
    1ae6:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__fp_szero>
    1aea:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_nan>

00001aee <__divsf3x>:
    1aee:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fp_split3>
    1af2:	68 f3       	brcs	.-38     	; 0x1ace <__divsf3+0x8>

00001af4 <__divsf3_pse>:
    1af4:	99 23       	and	r25, r25
    1af6:	b1 f3       	breq	.-20     	; 0x1ae4 <__divsf3+0x1e>
    1af8:	55 23       	and	r21, r21
    1afa:	91 f3       	breq	.-28     	; 0x1ae0 <__divsf3+0x1a>
    1afc:	95 1b       	sub	r25, r21
    1afe:	55 0b       	sbc	r21, r21
    1b00:	bb 27       	eor	r27, r27
    1b02:	aa 27       	eor	r26, r26
    1b04:	62 17       	cp	r22, r18
    1b06:	73 07       	cpc	r23, r19
    1b08:	84 07       	cpc	r24, r20
    1b0a:	38 f0       	brcs	.+14     	; 0x1b1a <__divsf3_pse+0x26>
    1b0c:	9f 5f       	subi	r25, 0xFF	; 255
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	22 0f       	add	r18, r18
    1b12:	33 1f       	adc	r19, r19
    1b14:	44 1f       	adc	r20, r20
    1b16:	aa 1f       	adc	r26, r26
    1b18:	a9 f3       	breq	.-22     	; 0x1b04 <__divsf3_pse+0x10>
    1b1a:	35 d0       	rcall	.+106    	; 0x1b86 <__divsf3_pse+0x92>
    1b1c:	0e 2e       	mov	r0, r30
    1b1e:	3a f0       	brmi	.+14     	; 0x1b2e <__divsf3_pse+0x3a>
    1b20:	e0 e8       	ldi	r30, 0x80	; 128
    1b22:	32 d0       	rcall	.+100    	; 0x1b88 <__divsf3_pse+0x94>
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	e6 95       	lsr	r30
    1b2a:	00 1c       	adc	r0, r0
    1b2c:	ca f7       	brpl	.-14     	; 0x1b20 <__divsf3_pse+0x2c>
    1b2e:	2b d0       	rcall	.+86     	; 0x1b86 <__divsf3_pse+0x92>
    1b30:	fe 2f       	mov	r31, r30
    1b32:	29 d0       	rcall	.+82     	; 0x1b86 <__divsf3_pse+0x92>
    1b34:	66 0f       	add	r22, r22
    1b36:	77 1f       	adc	r23, r23
    1b38:	88 1f       	adc	r24, r24
    1b3a:	bb 1f       	adc	r27, r27
    1b3c:	26 17       	cp	r18, r22
    1b3e:	37 07       	cpc	r19, r23
    1b40:	48 07       	cpc	r20, r24
    1b42:	ab 07       	cpc	r26, r27
    1b44:	b0 e8       	ldi	r27, 0x80	; 128
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <__divsf3_pse+0x56>
    1b48:	bb 0b       	sbc	r27, r27
    1b4a:	80 2d       	mov	r24, r0
    1b4c:	bf 01       	movw	r22, r30
    1b4e:	ff 27       	eor	r31, r31
    1b50:	93 58       	subi	r25, 0x83	; 131
    1b52:	5f 4f       	sbci	r21, 0xFF	; 255
    1b54:	3a f0       	brmi	.+14     	; 0x1b64 <__divsf3_pse+0x70>
    1b56:	9e 3f       	cpi	r25, 0xFE	; 254
    1b58:	51 05       	cpc	r21, r1
    1b5a:	78 f0       	brcs	.+30     	; 0x1b7a <__divsf3_pse+0x86>
    1b5c:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__fp_inf>
    1b60:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__fp_szero>
    1b64:	5f 3f       	cpi	r21, 0xFF	; 255
    1b66:	e4 f3       	brlt	.-8      	; 0x1b60 <__divsf3_pse+0x6c>
    1b68:	98 3e       	cpi	r25, 0xE8	; 232
    1b6a:	d4 f3       	brlt	.-12     	; 0x1b60 <__divsf3_pse+0x6c>
    1b6c:	86 95       	lsr	r24
    1b6e:	77 95       	ror	r23
    1b70:	67 95       	ror	r22
    1b72:	b7 95       	ror	r27
    1b74:	f7 95       	ror	r31
    1b76:	9f 5f       	subi	r25, 0xFF	; 255
    1b78:	c9 f7       	brne	.-14     	; 0x1b6c <__divsf3_pse+0x78>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	91 1d       	adc	r25, r1
    1b7e:	96 95       	lsr	r25
    1b80:	87 95       	ror	r24
    1b82:	97 f9       	bld	r25, 7
    1b84:	08 95       	ret
    1b86:	e1 e0       	ldi	r30, 0x01	; 1
    1b88:	66 0f       	add	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	bb 1f       	adc	r27, r27
    1b90:	62 17       	cp	r22, r18
    1b92:	73 07       	cpc	r23, r19
    1b94:	84 07       	cpc	r24, r20
    1b96:	ba 07       	cpc	r27, r26
    1b98:	20 f0       	brcs	.+8      	; 0x1ba2 <__divsf3_pse+0xae>
    1b9a:	62 1b       	sub	r22, r18
    1b9c:	73 0b       	sbc	r23, r19
    1b9e:	84 0b       	sbc	r24, r20
    1ba0:	ba 0b       	sbc	r27, r26
    1ba2:	ee 1f       	adc	r30, r30
    1ba4:	88 f7       	brcc	.-30     	; 0x1b88 <__divsf3_pse+0x94>
    1ba6:	e0 95       	com	r30
    1ba8:	08 95       	ret

00001baa <__fixsfsi>:
    1baa:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixunssfsi>
    1bae:	68 94       	set
    1bb0:	b1 11       	cpse	r27, r1
    1bb2:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__fp_szero>
    1bb6:	08 95       	ret

00001bb8 <__fixunssfsi>:
    1bb8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_splitA>
    1bbc:	88 f0       	brcs	.+34     	; 0x1be0 <__fixunssfsi+0x28>
    1bbe:	9f 57       	subi	r25, 0x7F	; 127
    1bc0:	98 f0       	brcs	.+38     	; 0x1be8 <__fixunssfsi+0x30>
    1bc2:	b9 2f       	mov	r27, r25
    1bc4:	99 27       	eor	r25, r25
    1bc6:	b7 51       	subi	r27, 0x17	; 23
    1bc8:	b0 f0       	brcs	.+44     	; 0x1bf6 <__fixunssfsi+0x3e>
    1bca:	e1 f0       	breq	.+56     	; 0x1c04 <__fixunssfsi+0x4c>
    1bcc:	66 0f       	add	r22, r22
    1bce:	77 1f       	adc	r23, r23
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	1a f0       	brmi	.+6      	; 0x1bdc <__fixunssfsi+0x24>
    1bd6:	ba 95       	dec	r27
    1bd8:	c9 f7       	brne	.-14     	; 0x1bcc <__fixunssfsi+0x14>
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <__fixunssfsi+0x4c>
    1bdc:	b1 30       	cpi	r27, 0x01	; 1
    1bde:	91 f0       	breq	.+36     	; 0x1c04 <__fixunssfsi+0x4c>
    1be0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_zero>
    1be4:	b1 e0       	ldi	r27, 0x01	; 1
    1be6:	08 95       	ret
    1be8:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__fp_zero>
    1bec:	67 2f       	mov	r22, r23
    1bee:	78 2f       	mov	r23, r24
    1bf0:	88 27       	eor	r24, r24
    1bf2:	b8 5f       	subi	r27, 0xF8	; 248
    1bf4:	39 f0       	breq	.+14     	; 0x1c04 <__fixunssfsi+0x4c>
    1bf6:	b9 3f       	cpi	r27, 0xF9	; 249
    1bf8:	cc f3       	brlt	.-14     	; 0x1bec <__fixunssfsi+0x34>
    1bfa:	86 95       	lsr	r24
    1bfc:	77 95       	ror	r23
    1bfe:	67 95       	ror	r22
    1c00:	b3 95       	inc	r27
    1c02:	d9 f7       	brne	.-10     	; 0x1bfa <__fixunssfsi+0x42>
    1c04:	3e f4       	brtc	.+14     	; 0x1c14 <__fixunssfsi+0x5c>
    1c06:	90 95       	com	r25
    1c08:	80 95       	com	r24
    1c0a:	70 95       	com	r23
    1c0c:	61 95       	neg	r22
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	8f 4f       	sbci	r24, 0xFF	; 255
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	08 95       	ret

00001c16 <__floatunsisf>:
    1c16:	e8 94       	clt
    1c18:	09 c0       	rjmp	.+18     	; 0x1c2c <__floatsisf+0x12>

00001c1a <__floatsisf>:
    1c1a:	97 fb       	bst	r25, 7
    1c1c:	3e f4       	brtc	.+14     	; 0x1c2c <__floatsisf+0x12>
    1c1e:	90 95       	com	r25
    1c20:	80 95       	com	r24
    1c22:	70 95       	com	r23
    1c24:	61 95       	neg	r22
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2c:	99 23       	and	r25, r25
    1c2e:	a9 f0       	breq	.+42     	; 0x1c5a <__floatsisf+0x40>
    1c30:	f9 2f       	mov	r31, r25
    1c32:	96 e9       	ldi	r25, 0x96	; 150
    1c34:	bb 27       	eor	r27, r27
    1c36:	93 95       	inc	r25
    1c38:	f6 95       	lsr	r31
    1c3a:	87 95       	ror	r24
    1c3c:	77 95       	ror	r23
    1c3e:	67 95       	ror	r22
    1c40:	b7 95       	ror	r27
    1c42:	f1 11       	cpse	r31, r1
    1c44:	f8 cf       	rjmp	.-16     	; 0x1c36 <__floatsisf+0x1c>
    1c46:	fa f4       	brpl	.+62     	; 0x1c86 <__floatsisf+0x6c>
    1c48:	bb 0f       	add	r27, r27
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <__floatsisf+0x36>
    1c4c:	60 ff       	sbrs	r22, 0
    1c4e:	1b c0       	rjmp	.+54     	; 0x1c86 <__floatsisf+0x6c>
    1c50:	6f 5f       	subi	r22, 0xFF	; 255
    1c52:	7f 4f       	sbci	r23, 0xFF	; 255
    1c54:	8f 4f       	sbci	r24, 0xFF	; 255
    1c56:	9f 4f       	sbci	r25, 0xFF	; 255
    1c58:	16 c0       	rjmp	.+44     	; 0x1c86 <__floatsisf+0x6c>
    1c5a:	88 23       	and	r24, r24
    1c5c:	11 f0       	breq	.+4      	; 0x1c62 <__floatsisf+0x48>
    1c5e:	96 e9       	ldi	r25, 0x96	; 150
    1c60:	11 c0       	rjmp	.+34     	; 0x1c84 <__floatsisf+0x6a>
    1c62:	77 23       	and	r23, r23
    1c64:	21 f0       	breq	.+8      	; 0x1c6e <__floatsisf+0x54>
    1c66:	9e e8       	ldi	r25, 0x8E	; 142
    1c68:	87 2f       	mov	r24, r23
    1c6a:	76 2f       	mov	r23, r22
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <__floatsisf+0x5e>
    1c6e:	66 23       	and	r22, r22
    1c70:	71 f0       	breq	.+28     	; 0x1c8e <__floatsisf+0x74>
    1c72:	96 e8       	ldi	r25, 0x86	; 134
    1c74:	86 2f       	mov	r24, r22
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	2a f0       	brmi	.+10     	; 0x1c86 <__floatsisf+0x6c>
    1c7c:	9a 95       	dec	r25
    1c7e:	66 0f       	add	r22, r22
    1c80:	77 1f       	adc	r23, r23
    1c82:	88 1f       	adc	r24, r24
    1c84:	da f7       	brpl	.-10     	; 0x1c7c <__floatsisf+0x62>
    1c86:	88 0f       	add	r24, r24
    1c88:	96 95       	lsr	r25
    1c8a:	87 95       	ror	r24
    1c8c:	97 f9       	bld	r25, 7
    1c8e:	08 95       	ret

00001c90 <__fp_inf>:
    1c90:	97 f9       	bld	r25, 7
    1c92:	9f 67       	ori	r25, 0x7F	; 127
    1c94:	80 e8       	ldi	r24, 0x80	; 128
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	08 95       	ret

00001c9c <__fp_nan>:
    1c9c:	9f ef       	ldi	r25, 0xFF	; 255
    1c9e:	80 ec       	ldi	r24, 0xC0	; 192
    1ca0:	08 95       	ret

00001ca2 <__fp_powser>:
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	1f 93       	push	r17
    1ca8:	0f 93       	push	r16
    1caa:	ff 92       	push	r15
    1cac:	ef 92       	push	r14
    1cae:	df 92       	push	r13
    1cb0:	7b 01       	movw	r14, r22
    1cb2:	8c 01       	movw	r16, r24
    1cb4:	68 94       	set
    1cb6:	06 c0       	rjmp	.+12     	; 0x1cc4 <__fp_powser+0x22>
    1cb8:	da 2e       	mov	r13, r26
    1cba:	ef 01       	movw	r28, r30
    1cbc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__mulsf3x>
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e8 94       	clt
    1cc4:	a5 91       	lpm	r26, Z+
    1cc6:	25 91       	lpm	r18, Z+
    1cc8:	35 91       	lpm	r19, Z+
    1cca:	45 91       	lpm	r20, Z+
    1ccc:	55 91       	lpm	r21, Z+
    1cce:	a6 f3       	brts	.-24     	; 0x1cb8 <__fp_powser+0x16>
    1cd0:	ef 01       	movw	r28, r30
    1cd2:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__addsf3x>
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	97 01       	movw	r18, r14
    1cda:	a8 01       	movw	r20, r16
    1cdc:	da 94       	dec	r13
    1cde:	69 f7       	brne	.-38     	; 0x1cba <__fp_powser+0x18>
    1ce0:	df 90       	pop	r13
    1ce2:	ef 90       	pop	r14
    1ce4:	ff 90       	pop	r15
    1ce6:	0f 91       	pop	r16
    1ce8:	1f 91       	pop	r17
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <__fp_pscA>:
    1cf0:	00 24       	eor	r0, r0
    1cf2:	0a 94       	dec	r0
    1cf4:	16 16       	cp	r1, r22
    1cf6:	17 06       	cpc	r1, r23
    1cf8:	18 06       	cpc	r1, r24
    1cfa:	09 06       	cpc	r0, r25
    1cfc:	08 95       	ret

00001cfe <__fp_pscB>:
    1cfe:	00 24       	eor	r0, r0
    1d00:	0a 94       	dec	r0
    1d02:	12 16       	cp	r1, r18
    1d04:	13 06       	cpc	r1, r19
    1d06:	14 06       	cpc	r1, r20
    1d08:	05 06       	cpc	r0, r21
    1d0a:	08 95       	ret

00001d0c <__fp_round>:
    1d0c:	09 2e       	mov	r0, r25
    1d0e:	03 94       	inc	r0
    1d10:	00 0c       	add	r0, r0
    1d12:	11 f4       	brne	.+4      	; 0x1d18 <__fp_round+0xc>
    1d14:	88 23       	and	r24, r24
    1d16:	52 f0       	brmi	.+20     	; 0x1d2c <__fp_round+0x20>
    1d18:	bb 0f       	add	r27, r27
    1d1a:	40 f4       	brcc	.+16     	; 0x1d2c <__fp_round+0x20>
    1d1c:	bf 2b       	or	r27, r31
    1d1e:	11 f4       	brne	.+4      	; 0x1d24 <__fp_round+0x18>
    1d20:	60 ff       	sbrs	r22, 0
    1d22:	04 c0       	rjmp	.+8      	; 0x1d2c <__fp_round+0x20>
    1d24:	6f 5f       	subi	r22, 0xFF	; 255
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2c:	08 95       	ret

00001d2e <__fp_split3>:
    1d2e:	57 fd       	sbrc	r21, 7
    1d30:	90 58       	subi	r25, 0x80	; 128
    1d32:	44 0f       	add	r20, r20
    1d34:	55 1f       	adc	r21, r21
    1d36:	59 f0       	breq	.+22     	; 0x1d4e <__fp_splitA+0x10>
    1d38:	5f 3f       	cpi	r21, 0xFF	; 255
    1d3a:	71 f0       	breq	.+28     	; 0x1d58 <__fp_splitA+0x1a>
    1d3c:	47 95       	ror	r20

00001d3e <__fp_splitA>:
    1d3e:	88 0f       	add	r24, r24
    1d40:	97 fb       	bst	r25, 7
    1d42:	99 1f       	adc	r25, r25
    1d44:	61 f0       	breq	.+24     	; 0x1d5e <__fp_splitA+0x20>
    1d46:	9f 3f       	cpi	r25, 0xFF	; 255
    1d48:	79 f0       	breq	.+30     	; 0x1d68 <__fp_splitA+0x2a>
    1d4a:	87 95       	ror	r24
    1d4c:	08 95       	ret
    1d4e:	12 16       	cp	r1, r18
    1d50:	13 06       	cpc	r1, r19
    1d52:	14 06       	cpc	r1, r20
    1d54:	55 1f       	adc	r21, r21
    1d56:	f2 cf       	rjmp	.-28     	; 0x1d3c <__fp_split3+0xe>
    1d58:	46 95       	lsr	r20
    1d5a:	f1 df       	rcall	.-30     	; 0x1d3e <__fp_splitA>
    1d5c:	08 c0       	rjmp	.+16     	; 0x1d6e <__fp_splitA+0x30>
    1d5e:	16 16       	cp	r1, r22
    1d60:	17 06       	cpc	r1, r23
    1d62:	18 06       	cpc	r1, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	f1 cf       	rjmp	.-30     	; 0x1d4a <__fp_splitA+0xc>
    1d68:	86 95       	lsr	r24
    1d6a:	71 05       	cpc	r23, r1
    1d6c:	61 05       	cpc	r22, r1
    1d6e:	08 94       	sec
    1d70:	08 95       	ret

00001d72 <__fp_zero>:
    1d72:	e8 94       	clt

00001d74 <__fp_szero>:
    1d74:	bb 27       	eor	r27, r27
    1d76:	66 27       	eor	r22, r22
    1d78:	77 27       	eor	r23, r23
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	97 f9       	bld	r25, 7
    1d7e:	08 95       	ret

00001d80 <inverse>:
    1d80:	9b 01       	movw	r18, r22
    1d82:	ac 01       	movw	r20, r24
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	80 e8       	ldi	r24, 0x80	; 128
    1d8a:	9f e3       	ldi	r25, 0x3F	; 63
    1d8c:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__divsf3>

00001d90 <__mulsf3>:
    1d90:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__mulsf3x>
    1d94:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_round>
    1d98:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_pscA>
    1d9c:	38 f0       	brcs	.+14     	; 0x1dac <__mulsf3+0x1c>
    1d9e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fp_pscB>
    1da2:	20 f0       	brcs	.+8      	; 0x1dac <__mulsf3+0x1c>
    1da4:	95 23       	and	r25, r21
    1da6:	11 f0       	breq	.+4      	; 0x1dac <__mulsf3+0x1c>
    1da8:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__fp_inf>
    1dac:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_nan>
    1db0:	11 24       	eor	r1, r1
    1db2:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__fp_szero>

00001db6 <__mulsf3x>:
    1db6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fp_split3>
    1dba:	70 f3       	brcs	.-36     	; 0x1d98 <__mulsf3+0x8>

00001dbc <__mulsf3_pse>:
    1dbc:	95 9f       	mul	r25, r21
    1dbe:	c1 f3       	breq	.-16     	; 0x1db0 <__mulsf3+0x20>
    1dc0:	95 0f       	add	r25, r21
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	55 1f       	adc	r21, r21
    1dc6:	62 9f       	mul	r22, r18
    1dc8:	f0 01       	movw	r30, r0
    1dca:	72 9f       	mul	r23, r18
    1dcc:	bb 27       	eor	r27, r27
    1dce:	f0 0d       	add	r31, r0
    1dd0:	b1 1d       	adc	r27, r1
    1dd2:	63 9f       	mul	r22, r19
    1dd4:	aa 27       	eor	r26, r26
    1dd6:	f0 0d       	add	r31, r0
    1dd8:	b1 1d       	adc	r27, r1
    1dda:	aa 1f       	adc	r26, r26
    1ddc:	64 9f       	mul	r22, r20
    1dde:	66 27       	eor	r22, r22
    1de0:	b0 0d       	add	r27, r0
    1de2:	a1 1d       	adc	r26, r1
    1de4:	66 1f       	adc	r22, r22
    1de6:	82 9f       	mul	r24, r18
    1de8:	22 27       	eor	r18, r18
    1dea:	b0 0d       	add	r27, r0
    1dec:	a1 1d       	adc	r26, r1
    1dee:	62 1f       	adc	r22, r18
    1df0:	73 9f       	mul	r23, r19
    1df2:	b0 0d       	add	r27, r0
    1df4:	a1 1d       	adc	r26, r1
    1df6:	62 1f       	adc	r22, r18
    1df8:	83 9f       	mul	r24, r19
    1dfa:	a0 0d       	add	r26, r0
    1dfc:	61 1d       	adc	r22, r1
    1dfe:	22 1f       	adc	r18, r18
    1e00:	74 9f       	mul	r23, r20
    1e02:	33 27       	eor	r19, r19
    1e04:	a0 0d       	add	r26, r0
    1e06:	61 1d       	adc	r22, r1
    1e08:	23 1f       	adc	r18, r19
    1e0a:	84 9f       	mul	r24, r20
    1e0c:	60 0d       	add	r22, r0
    1e0e:	21 1d       	adc	r18, r1
    1e10:	82 2f       	mov	r24, r18
    1e12:	76 2f       	mov	r23, r22
    1e14:	6a 2f       	mov	r22, r26
    1e16:	11 24       	eor	r1, r1
    1e18:	9f 57       	subi	r25, 0x7F	; 127
    1e1a:	50 40       	sbci	r21, 0x00	; 0
    1e1c:	9a f0       	brmi	.+38     	; 0x1e44 <__mulsf3_pse+0x88>
    1e1e:	f1 f0       	breq	.+60     	; 0x1e5c <__mulsf3_pse+0xa0>
    1e20:	88 23       	and	r24, r24
    1e22:	4a f0       	brmi	.+18     	; 0x1e36 <__mulsf3_pse+0x7a>
    1e24:	ee 0f       	add	r30, r30
    1e26:	ff 1f       	adc	r31, r31
    1e28:	bb 1f       	adc	r27, r27
    1e2a:	66 1f       	adc	r22, r22
    1e2c:	77 1f       	adc	r23, r23
    1e2e:	88 1f       	adc	r24, r24
    1e30:	91 50       	subi	r25, 0x01	; 1
    1e32:	50 40       	sbci	r21, 0x00	; 0
    1e34:	a9 f7       	brne	.-22     	; 0x1e20 <__mulsf3_pse+0x64>
    1e36:	9e 3f       	cpi	r25, 0xFE	; 254
    1e38:	51 05       	cpc	r21, r1
    1e3a:	80 f0       	brcs	.+32     	; 0x1e5c <__mulsf3_pse+0xa0>
    1e3c:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__fp_inf>
    1e40:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__fp_szero>
    1e44:	5f 3f       	cpi	r21, 0xFF	; 255
    1e46:	e4 f3       	brlt	.-8      	; 0x1e40 <__mulsf3_pse+0x84>
    1e48:	98 3e       	cpi	r25, 0xE8	; 232
    1e4a:	d4 f3       	brlt	.-12     	; 0x1e40 <__mulsf3_pse+0x84>
    1e4c:	86 95       	lsr	r24
    1e4e:	77 95       	ror	r23
    1e50:	67 95       	ror	r22
    1e52:	b7 95       	ror	r27
    1e54:	f7 95       	ror	r31
    1e56:	e7 95       	ror	r30
    1e58:	9f 5f       	subi	r25, 0xFF	; 255
    1e5a:	c1 f7       	brne	.-16     	; 0x1e4c <__mulsf3_pse+0x90>
    1e5c:	fe 2b       	or	r31, r30
    1e5e:	88 0f       	add	r24, r24
    1e60:	91 1d       	adc	r25, r1
    1e62:	96 95       	lsr	r25
    1e64:	87 95       	ror	r24
    1e66:	97 f9       	bld	r25, 7
    1e68:	08 95       	ret

00001e6a <square>:
    1e6a:	9b 01       	movw	r18, r22
    1e6c:	ac 01       	movw	r20, r24
    1e6e:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__mulsf3>

00001e72 <__subsf3>:
    1e72:	50 58       	subi	r21, 0x80	; 128

00001e74 <__addsf3>:
    1e74:	bb 27       	eor	r27, r27
    1e76:	aa 27       	eor	r26, r26
    1e78:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__addsf3x>
    1e7c:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_round>
    1e80:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_pscA>
    1e84:	38 f0       	brcs	.+14     	; 0x1e94 <__addsf3+0x20>
    1e86:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fp_pscB>
    1e8a:	20 f0       	brcs	.+8      	; 0x1e94 <__addsf3+0x20>
    1e8c:	39 f4       	brne	.+14     	; 0x1e9c <__addsf3+0x28>
    1e8e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e90:	19 f4       	brne	.+6      	; 0x1e98 <__addsf3+0x24>
    1e92:	26 f4       	brtc	.+8      	; 0x1e9c <__addsf3+0x28>
    1e94:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_nan>
    1e98:	0e f4       	brtc	.+2      	; 0x1e9c <__addsf3+0x28>
    1e9a:	e0 95       	com	r30
    1e9c:	e7 fb       	bst	r30, 7
    1e9e:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__fp_inf>

00001ea2 <__addsf3x>:
    1ea2:	e9 2f       	mov	r30, r25
    1ea4:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fp_split3>
    1ea8:	58 f3       	brcs	.-42     	; 0x1e80 <__addsf3+0xc>
    1eaa:	ba 17       	cp	r27, r26
    1eac:	62 07       	cpc	r22, r18
    1eae:	73 07       	cpc	r23, r19
    1eb0:	84 07       	cpc	r24, r20
    1eb2:	95 07       	cpc	r25, r21
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <__addsf3x+0x1c>
    1eb6:	79 f4       	brne	.+30     	; 0x1ed6 <__addsf3x+0x34>
    1eb8:	a6 f5       	brtc	.+104    	; 0x1f22 <__addsf3x+0x80>
    1eba:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__fp_zero>
    1ebe:	0e f4       	brtc	.+2      	; 0x1ec2 <__addsf3x+0x20>
    1ec0:	e0 95       	com	r30
    1ec2:	0b 2e       	mov	r0, r27
    1ec4:	ba 2f       	mov	r27, r26
    1ec6:	a0 2d       	mov	r26, r0
    1ec8:	0b 01       	movw	r0, r22
    1eca:	b9 01       	movw	r22, r18
    1ecc:	90 01       	movw	r18, r0
    1ece:	0c 01       	movw	r0, r24
    1ed0:	ca 01       	movw	r24, r20
    1ed2:	a0 01       	movw	r20, r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	ff 27       	eor	r31, r31
    1ed8:	59 1b       	sub	r21, r25
    1eda:	99 f0       	breq	.+38     	; 0x1f02 <__addsf3x+0x60>
    1edc:	59 3f       	cpi	r21, 0xF9	; 249
    1ede:	50 f4       	brcc	.+20     	; 0x1ef4 <__addsf3x+0x52>
    1ee0:	50 3e       	cpi	r21, 0xE0	; 224
    1ee2:	68 f1       	brcs	.+90     	; 0x1f3e <__addsf3x+0x9c>
    1ee4:	1a 16       	cp	r1, r26
    1ee6:	f0 40       	sbci	r31, 0x00	; 0
    1ee8:	a2 2f       	mov	r26, r18
    1eea:	23 2f       	mov	r18, r19
    1eec:	34 2f       	mov	r19, r20
    1eee:	44 27       	eor	r20, r20
    1ef0:	58 5f       	subi	r21, 0xF8	; 248
    1ef2:	f3 cf       	rjmp	.-26     	; 0x1eda <__addsf3x+0x38>
    1ef4:	46 95       	lsr	r20
    1ef6:	37 95       	ror	r19
    1ef8:	27 95       	ror	r18
    1efa:	a7 95       	ror	r26
    1efc:	f0 40       	sbci	r31, 0x00	; 0
    1efe:	53 95       	inc	r21
    1f00:	c9 f7       	brne	.-14     	; 0x1ef4 <__addsf3x+0x52>
    1f02:	7e f4       	brtc	.+30     	; 0x1f22 <__addsf3x+0x80>
    1f04:	1f 16       	cp	r1, r31
    1f06:	ba 0b       	sbc	r27, r26
    1f08:	62 0b       	sbc	r22, r18
    1f0a:	73 0b       	sbc	r23, r19
    1f0c:	84 0b       	sbc	r24, r20
    1f0e:	ba f0       	brmi	.+46     	; 0x1f3e <__addsf3x+0x9c>
    1f10:	91 50       	subi	r25, 0x01	; 1
    1f12:	a1 f0       	breq	.+40     	; 0x1f3c <__addsf3x+0x9a>
    1f14:	ff 0f       	add	r31, r31
    1f16:	bb 1f       	adc	r27, r27
    1f18:	66 1f       	adc	r22, r22
    1f1a:	77 1f       	adc	r23, r23
    1f1c:	88 1f       	adc	r24, r24
    1f1e:	c2 f7       	brpl	.-16     	; 0x1f10 <__addsf3x+0x6e>
    1f20:	0e c0       	rjmp	.+28     	; 0x1f3e <__addsf3x+0x9c>
    1f22:	ba 0f       	add	r27, r26
    1f24:	62 1f       	adc	r22, r18
    1f26:	73 1f       	adc	r23, r19
    1f28:	84 1f       	adc	r24, r20
    1f2a:	48 f4       	brcc	.+18     	; 0x1f3e <__addsf3x+0x9c>
    1f2c:	87 95       	ror	r24
    1f2e:	77 95       	ror	r23
    1f30:	67 95       	ror	r22
    1f32:	b7 95       	ror	r27
    1f34:	f7 95       	ror	r31
    1f36:	9e 3f       	cpi	r25, 0xFE	; 254
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <__addsf3x+0x9a>
    1f3a:	b0 cf       	rjmp	.-160    	; 0x1e9c <__addsf3+0x28>
    1f3c:	93 95       	inc	r25
    1f3e:	88 0f       	add	r24, r24
    1f40:	08 f0       	brcs	.+2      	; 0x1f44 <__addsf3x+0xa2>
    1f42:	99 27       	eor	r25, r25
    1f44:	ee 0f       	add	r30, r30
    1f46:	97 95       	ror	r25
    1f48:	87 95       	ror	r24
    1f4a:	08 95       	ret

00001f4c <__divmodhi4>:
    1f4c:	97 fb       	bst	r25, 7
    1f4e:	07 2e       	mov	r0, r23
    1f50:	16 f4       	brtc	.+4      	; 0x1f56 <__divmodhi4+0xa>
    1f52:	00 94       	com	r0
    1f54:	07 d0       	rcall	.+14     	; 0x1f64 <__divmodhi4_neg1>
    1f56:	77 fd       	sbrc	r23, 7
    1f58:	09 d0       	rcall	.+18     	; 0x1f6c <__divmodhi4_neg2>
    1f5a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__udivmodhi4>
    1f5e:	07 fc       	sbrc	r0, 7
    1f60:	05 d0       	rcall	.+10     	; 0x1f6c <__divmodhi4_neg2>
    1f62:	3e f4       	brtc	.+14     	; 0x1f72 <__divmodhi4_exit>

00001f64 <__divmodhi4_neg1>:
    1f64:	90 95       	com	r25
    1f66:	81 95       	neg	r24
    1f68:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6a:	08 95       	ret

00001f6c <__divmodhi4_neg2>:
    1f6c:	70 95       	com	r23
    1f6e:	61 95       	neg	r22
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255

00001f72 <__divmodhi4_exit>:
    1f72:	08 95       	ret

00001f74 <__udivmodsi4>:
    1f74:	a1 e2       	ldi	r26, 0x21	; 33
    1f76:	1a 2e       	mov	r1, r26
    1f78:	aa 1b       	sub	r26, r26
    1f7a:	bb 1b       	sub	r27, r27
    1f7c:	fd 01       	movw	r30, r26
    1f7e:	0d c0       	rjmp	.+26     	; 0x1f9a <__udivmodsi4_ep>

00001f80 <__udivmodsi4_loop>:
    1f80:	aa 1f       	adc	r26, r26
    1f82:	bb 1f       	adc	r27, r27
    1f84:	ee 1f       	adc	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	a2 17       	cp	r26, r18
    1f8a:	b3 07       	cpc	r27, r19
    1f8c:	e4 07       	cpc	r30, r20
    1f8e:	f5 07       	cpc	r31, r21
    1f90:	20 f0       	brcs	.+8      	; 0x1f9a <__udivmodsi4_ep>
    1f92:	a2 1b       	sub	r26, r18
    1f94:	b3 0b       	sbc	r27, r19
    1f96:	e4 0b       	sbc	r30, r20
    1f98:	f5 0b       	sbc	r31, r21

00001f9a <__udivmodsi4_ep>:
    1f9a:	66 1f       	adc	r22, r22
    1f9c:	77 1f       	adc	r23, r23
    1f9e:	88 1f       	adc	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	1a 94       	dec	r1
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <__udivmodsi4_loop>
    1fa6:	60 95       	com	r22
    1fa8:	70 95       	com	r23
    1faa:	80 95       	com	r24
    1fac:	90 95       	com	r25
    1fae:	9b 01       	movw	r18, r22
    1fb0:	ac 01       	movw	r20, r24
    1fb2:	bd 01       	movw	r22, r26
    1fb4:	cf 01       	movw	r24, r30
    1fb6:	08 95       	ret

00001fb8 <__udivmodhi4>:
    1fb8:	aa 1b       	sub	r26, r26
    1fba:	bb 1b       	sub	r27, r27
    1fbc:	51 e1       	ldi	r21, 0x11	; 17
    1fbe:	07 c0       	rjmp	.+14     	; 0x1fce <__udivmodhi4_ep>

00001fc0 <__udivmodhi4_loop>:
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	a6 17       	cp	r26, r22
    1fc6:	b7 07       	cpc	r27, r23
    1fc8:	10 f0       	brcs	.+4      	; 0x1fce <__udivmodhi4_ep>
    1fca:	a6 1b       	sub	r26, r22
    1fcc:	b7 0b       	sbc	r27, r23

00001fce <__udivmodhi4_ep>:
    1fce:	88 1f       	adc	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	5a 95       	dec	r21
    1fd4:	a9 f7       	brne	.-22     	; 0x1fc0 <__udivmodhi4_loop>
    1fd6:	80 95       	com	r24
    1fd8:	90 95       	com	r25
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	08 95       	ret

00001fe0 <__itoa_ncheck>:
    1fe0:	bb 27       	eor	r27, r27
    1fe2:	4a 30       	cpi	r20, 0x0A	; 10
    1fe4:	31 f4       	brne	.+12     	; 0x1ff2 <__itoa_ncheck+0x12>
    1fe6:	99 23       	and	r25, r25
    1fe8:	22 f4       	brpl	.+8      	; 0x1ff2 <__itoa_ncheck+0x12>
    1fea:	bd e2       	ldi	r27, 0x2D	; 45
    1fec:	90 95       	com	r25
    1fee:	81 95       	neg	r24
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__utoa_common>

00001ff6 <__utoa_ncheck>:
    1ff6:	bb 27       	eor	r27, r27

00001ff8 <__utoa_common>:
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	55 27       	eor	r21, r21
    1ffc:	aa 27       	eor	r26, r26
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	aa 1f       	adc	r26, r26
    2004:	a4 17       	cp	r26, r20
    2006:	10 f0       	brcs	.+4      	; 0x200c <__utoa_common+0x14>
    2008:	a4 1b       	sub	r26, r20
    200a:	83 95       	inc	r24
    200c:	50 51       	subi	r21, 0x10	; 16
    200e:	b9 f7       	brne	.-18     	; 0x1ffe <__utoa_common+0x6>
    2010:	a0 5d       	subi	r26, 0xD0	; 208
    2012:	aa 33       	cpi	r26, 0x3A	; 58
    2014:	08 f0       	brcs	.+2      	; 0x2018 <__utoa_common+0x20>
    2016:	a9 5d       	subi	r26, 0xD9	; 217
    2018:	a1 93       	st	Z+, r26
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	79 f7       	brne	.-34     	; 0x1ffc <__utoa_common+0x4>
    201e:	b1 11       	cpse	r27, r1
    2020:	b1 93       	st	Z+, r27
    2022:	11 92       	st	Z+, r1
    2024:	cb 01       	movw	r24, r22
    2026:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <strrev>

0000202a <fdevopen>:
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	31 f4       	brne	.+12     	; 0x2042 <fdevopen+0x18>
    2036:	61 15       	cp	r22, r1
    2038:	71 05       	cpc	r23, r1
    203a:	19 f4       	brne	.+6      	; 0x2042 <fdevopen+0x18>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	3a c0       	rjmp	.+116    	; 0x20b6 <fdevopen+0x8c>
    2042:	8b 01       	movw	r16, r22
    2044:	ec 01       	movw	r28, r24
    2046:	6e e0       	ldi	r22, 0x0E	; 14
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 57 12 	call	0x24ae	; 0x24ae <calloc>
    2052:	fc 01       	movw	r30, r24
    2054:	89 2b       	or	r24, r25
    2056:	91 f3       	breq	.-28     	; 0x203c <fdevopen+0x12>
    2058:	80 e8       	ldi	r24, 0x80	; 128
    205a:	83 83       	std	Z+3, r24	; 0x03
    205c:	01 15       	cp	r16, r1
    205e:	11 05       	cpc	r17, r1
    2060:	71 f0       	breq	.+28     	; 0x207e <fdevopen+0x54>
    2062:	13 87       	std	Z+11, r17	; 0x0b
    2064:	02 87       	std	Z+10, r16	; 0x0a
    2066:	81 e8       	ldi	r24, 0x81	; 129
    2068:	83 83       	std	Z+3, r24	; 0x03
    206a:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <__iob>
    206e:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <__iob+0x1>
    2072:	89 2b       	or	r24, r25
    2074:	21 f4       	brne	.+8      	; 0x207e <fdevopen+0x54>
    2076:	f0 93 99 04 	sts	0x0499, r31	; 0x800499 <__iob+0x1>
    207a:	e0 93 98 04 	sts	0x0498, r30	; 0x800498 <__iob>
    207e:	20 97       	sbiw	r28, 0x00	; 0
    2080:	c9 f0       	breq	.+50     	; 0x20b4 <fdevopen+0x8a>
    2082:	d1 87       	std	Z+9, r29	; 0x09
    2084:	c0 87       	std	Z+8, r28	; 0x08
    2086:	83 81       	ldd	r24, Z+3	; 0x03
    2088:	82 60       	ori	r24, 0x02	; 2
    208a:	83 83       	std	Z+3, r24	; 0x03
    208c:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    2090:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    2094:	89 2b       	or	r24, r25
    2096:	71 f4       	brne	.+28     	; 0x20b4 <fdevopen+0x8a>
    2098:	f0 93 9b 04 	sts	0x049B, r31	; 0x80049b <__iob+0x3>
    209c:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <__iob+0x2>
    20a0:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <__iob+0x4>
    20a4:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <__iob+0x5>
    20a8:	89 2b       	or	r24, r25
    20aa:	21 f4       	brne	.+8      	; 0x20b4 <fdevopen+0x8a>
    20ac:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <__iob+0x5>
    20b0:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <__iob+0x4>
    20b4:	cf 01       	movw	r24, r30
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	08 95       	ret

000020c0 <printf>:
    20c0:	a0 e0       	ldi	r26, 0x00	; 0
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e6 e6       	ldi	r30, 0x66	; 102
    20c6:	f0 e1       	ldi	r31, 0x10	; 16
    20c8:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__+0x20>
    20cc:	ae 01       	movw	r20, r28
    20ce:	4b 5f       	subi	r20, 0xFB	; 251
    20d0:	5f 4f       	sbci	r21, 0xFF	; 255
    20d2:	fa 01       	movw	r30, r20
    20d4:	61 91       	ld	r22, Z+
    20d6:	71 91       	ld	r23, Z+
    20d8:	af 01       	movw	r20, r30
    20da:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    20de:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    20e2:	0e 94 76 10 	call	0x20ec	; 0x20ec <vfprintf>
    20e6:	e2 e0       	ldi	r30, 0x02	; 2
    20e8:	0c 94 87 14 	jmp	0x290e	; 0x290e <__epilogue_restores__+0x20>

000020ec <vfprintf>:
    20ec:	ab e0       	ldi	r26, 0x0B	; 11
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	ec e7       	ldi	r30, 0x7C	; 124
    20f2:	f0 e1       	ldi	r31, 0x10	; 16
    20f4:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__>
    20f8:	6c 01       	movw	r12, r24
    20fa:	7b 01       	movw	r14, r22
    20fc:	8a 01       	movw	r16, r20
    20fe:	fc 01       	movw	r30, r24
    2100:	17 82       	std	Z+7, r1	; 0x07
    2102:	16 82       	std	Z+6, r1	; 0x06
    2104:	83 81       	ldd	r24, Z+3	; 0x03
    2106:	81 ff       	sbrs	r24, 1
    2108:	cc c1       	rjmp	.+920    	; 0x24a2 <vfprintf+0x3b6>
    210a:	ce 01       	movw	r24, r28
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	3c 01       	movw	r6, r24
    2110:	f6 01       	movw	r30, r12
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	f7 01       	movw	r30, r14
    2116:	93 fd       	sbrc	r25, 3
    2118:	85 91       	lpm	r24, Z+
    211a:	93 ff       	sbrs	r25, 3
    211c:	81 91       	ld	r24, Z+
    211e:	7f 01       	movw	r14, r30
    2120:	88 23       	and	r24, r24
    2122:	09 f4       	brne	.+2      	; 0x2126 <vfprintf+0x3a>
    2124:	ba c1       	rjmp	.+884    	; 0x249a <vfprintf+0x3ae>
    2126:	85 32       	cpi	r24, 0x25	; 37
    2128:	39 f4       	brne	.+14     	; 0x2138 <vfprintf+0x4c>
    212a:	93 fd       	sbrc	r25, 3
    212c:	85 91       	lpm	r24, Z+
    212e:	93 ff       	sbrs	r25, 3
    2130:	81 91       	ld	r24, Z+
    2132:	7f 01       	movw	r14, r30
    2134:	85 32       	cpi	r24, 0x25	; 37
    2136:	29 f4       	brne	.+10     	; 0x2142 <vfprintf+0x56>
    2138:	b6 01       	movw	r22, r12
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    2140:	e7 cf       	rjmp	.-50     	; 0x2110 <vfprintf+0x24>
    2142:	91 2c       	mov	r9, r1
    2144:	21 2c       	mov	r2, r1
    2146:	31 2c       	mov	r3, r1
    2148:	ff e1       	ldi	r31, 0x1F	; 31
    214a:	f3 15       	cp	r31, r3
    214c:	d8 f0       	brcs	.+54     	; 0x2184 <vfprintf+0x98>
    214e:	8b 32       	cpi	r24, 0x2B	; 43
    2150:	79 f0       	breq	.+30     	; 0x2170 <vfprintf+0x84>
    2152:	38 f4       	brcc	.+14     	; 0x2162 <vfprintf+0x76>
    2154:	80 32       	cpi	r24, 0x20	; 32
    2156:	79 f0       	breq	.+30     	; 0x2176 <vfprintf+0x8a>
    2158:	83 32       	cpi	r24, 0x23	; 35
    215a:	a1 f4       	brne	.+40     	; 0x2184 <vfprintf+0x98>
    215c:	23 2d       	mov	r18, r3
    215e:	20 61       	ori	r18, 0x10	; 16
    2160:	1d c0       	rjmp	.+58     	; 0x219c <vfprintf+0xb0>
    2162:	8d 32       	cpi	r24, 0x2D	; 45
    2164:	61 f0       	breq	.+24     	; 0x217e <vfprintf+0x92>
    2166:	80 33       	cpi	r24, 0x30	; 48
    2168:	69 f4       	brne	.+26     	; 0x2184 <vfprintf+0x98>
    216a:	23 2d       	mov	r18, r3
    216c:	21 60       	ori	r18, 0x01	; 1
    216e:	16 c0       	rjmp	.+44     	; 0x219c <vfprintf+0xb0>
    2170:	83 2d       	mov	r24, r3
    2172:	82 60       	ori	r24, 0x02	; 2
    2174:	38 2e       	mov	r3, r24
    2176:	e3 2d       	mov	r30, r3
    2178:	e4 60       	ori	r30, 0x04	; 4
    217a:	3e 2e       	mov	r3, r30
    217c:	2a c0       	rjmp	.+84     	; 0x21d2 <vfprintf+0xe6>
    217e:	f3 2d       	mov	r31, r3
    2180:	f8 60       	ori	r31, 0x08	; 8
    2182:	1d c0       	rjmp	.+58     	; 0x21be <vfprintf+0xd2>
    2184:	37 fc       	sbrc	r3, 7
    2186:	2d c0       	rjmp	.+90     	; 0x21e2 <vfprintf+0xf6>
    2188:	20 ed       	ldi	r18, 0xD0	; 208
    218a:	28 0f       	add	r18, r24
    218c:	2a 30       	cpi	r18, 0x0A	; 10
    218e:	40 f0       	brcs	.+16     	; 0x21a0 <vfprintf+0xb4>
    2190:	8e 32       	cpi	r24, 0x2E	; 46
    2192:	b9 f4       	brne	.+46     	; 0x21c2 <vfprintf+0xd6>
    2194:	36 fc       	sbrc	r3, 6
    2196:	81 c1       	rjmp	.+770    	; 0x249a <vfprintf+0x3ae>
    2198:	23 2d       	mov	r18, r3
    219a:	20 64       	ori	r18, 0x40	; 64
    219c:	32 2e       	mov	r3, r18
    219e:	19 c0       	rjmp	.+50     	; 0x21d2 <vfprintf+0xe6>
    21a0:	36 fe       	sbrs	r3, 6
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <vfprintf+0xc4>
    21a4:	8a e0       	ldi	r24, 0x0A	; 10
    21a6:	98 9e       	mul	r9, r24
    21a8:	20 0d       	add	r18, r0
    21aa:	11 24       	eor	r1, r1
    21ac:	92 2e       	mov	r9, r18
    21ae:	11 c0       	rjmp	.+34     	; 0x21d2 <vfprintf+0xe6>
    21b0:	ea e0       	ldi	r30, 0x0A	; 10
    21b2:	2e 9e       	mul	r2, r30
    21b4:	20 0d       	add	r18, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	22 2e       	mov	r2, r18
    21ba:	f3 2d       	mov	r31, r3
    21bc:	f0 62       	ori	r31, 0x20	; 32
    21be:	3f 2e       	mov	r3, r31
    21c0:	08 c0       	rjmp	.+16     	; 0x21d2 <vfprintf+0xe6>
    21c2:	8c 36       	cpi	r24, 0x6C	; 108
    21c4:	21 f4       	brne	.+8      	; 0x21ce <vfprintf+0xe2>
    21c6:	83 2d       	mov	r24, r3
    21c8:	80 68       	ori	r24, 0x80	; 128
    21ca:	38 2e       	mov	r3, r24
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <vfprintf+0xe6>
    21ce:	88 36       	cpi	r24, 0x68	; 104
    21d0:	41 f4       	brne	.+16     	; 0x21e2 <vfprintf+0xf6>
    21d2:	f7 01       	movw	r30, r14
    21d4:	93 fd       	sbrc	r25, 3
    21d6:	85 91       	lpm	r24, Z+
    21d8:	93 ff       	sbrs	r25, 3
    21da:	81 91       	ld	r24, Z+
    21dc:	7f 01       	movw	r14, r30
    21de:	81 11       	cpse	r24, r1
    21e0:	b3 cf       	rjmp	.-154    	; 0x2148 <vfprintf+0x5c>
    21e2:	98 2f       	mov	r25, r24
    21e4:	9f 7d       	andi	r25, 0xDF	; 223
    21e6:	95 54       	subi	r25, 0x45	; 69
    21e8:	93 30       	cpi	r25, 0x03	; 3
    21ea:	28 f4       	brcc	.+10     	; 0x21f6 <vfprintf+0x10a>
    21ec:	0c 5f       	subi	r16, 0xFC	; 252
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	9f e3       	ldi	r25, 0x3F	; 63
    21f2:	99 83       	std	Y+1, r25	; 0x01
    21f4:	0d c0       	rjmp	.+26     	; 0x2210 <vfprintf+0x124>
    21f6:	83 36       	cpi	r24, 0x63	; 99
    21f8:	31 f0       	breq	.+12     	; 0x2206 <vfprintf+0x11a>
    21fa:	83 37       	cpi	r24, 0x73	; 115
    21fc:	71 f0       	breq	.+28     	; 0x221a <vfprintf+0x12e>
    21fe:	83 35       	cpi	r24, 0x53	; 83
    2200:	09 f0       	breq	.+2      	; 0x2204 <vfprintf+0x118>
    2202:	59 c0       	rjmp	.+178    	; 0x22b6 <vfprintf+0x1ca>
    2204:	21 c0       	rjmp	.+66     	; 0x2248 <vfprintf+0x15c>
    2206:	f8 01       	movw	r30, r16
    2208:	80 81       	ld	r24, Z
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	0e 5f       	subi	r16, 0xFE	; 254
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	88 24       	eor	r8, r8
    2212:	83 94       	inc	r8
    2214:	91 2c       	mov	r9, r1
    2216:	53 01       	movw	r10, r6
    2218:	13 c0       	rjmp	.+38     	; 0x2240 <vfprintf+0x154>
    221a:	28 01       	movw	r4, r16
    221c:	f2 e0       	ldi	r31, 0x02	; 2
    221e:	4f 0e       	add	r4, r31
    2220:	51 1c       	adc	r5, r1
    2222:	f8 01       	movw	r30, r16
    2224:	a0 80       	ld	r10, Z
    2226:	b1 80       	ldd	r11, Z+1	; 0x01
    2228:	36 fe       	sbrs	r3, 6
    222a:	03 c0       	rjmp	.+6      	; 0x2232 <vfprintf+0x146>
    222c:	69 2d       	mov	r22, r9
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <vfprintf+0x14a>
    2232:	6f ef       	ldi	r22, 0xFF	; 255
    2234:	7f ef       	ldi	r23, 0xFF	; 255
    2236:	c5 01       	movw	r24, r10
    2238:	0e 94 a6 13 	call	0x274c	; 0x274c <strnlen>
    223c:	4c 01       	movw	r8, r24
    223e:	82 01       	movw	r16, r4
    2240:	f3 2d       	mov	r31, r3
    2242:	ff 77       	andi	r31, 0x7F	; 127
    2244:	3f 2e       	mov	r3, r31
    2246:	16 c0       	rjmp	.+44     	; 0x2274 <vfprintf+0x188>
    2248:	28 01       	movw	r4, r16
    224a:	22 e0       	ldi	r18, 0x02	; 2
    224c:	42 0e       	add	r4, r18
    224e:	51 1c       	adc	r5, r1
    2250:	f8 01       	movw	r30, r16
    2252:	a0 80       	ld	r10, Z
    2254:	b1 80       	ldd	r11, Z+1	; 0x01
    2256:	36 fe       	sbrs	r3, 6
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <vfprintf+0x174>
    225a:	69 2d       	mov	r22, r9
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <vfprintf+0x178>
    2260:	6f ef       	ldi	r22, 0xFF	; 255
    2262:	7f ef       	ldi	r23, 0xFF	; 255
    2264:	c5 01       	movw	r24, r10
    2266:	0e 94 94 13 	call	0x2728	; 0x2728 <strnlen_P>
    226a:	4c 01       	movw	r8, r24
    226c:	f3 2d       	mov	r31, r3
    226e:	f0 68       	ori	r31, 0x80	; 128
    2270:	3f 2e       	mov	r3, r31
    2272:	82 01       	movw	r16, r4
    2274:	33 fc       	sbrc	r3, 3
    2276:	1b c0       	rjmp	.+54     	; 0x22ae <vfprintf+0x1c2>
    2278:	82 2d       	mov	r24, r2
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	88 16       	cp	r8, r24
    227e:	99 06       	cpc	r9, r25
    2280:	b0 f4       	brcc	.+44     	; 0x22ae <vfprintf+0x1c2>
    2282:	b6 01       	movw	r22, r12
    2284:	80 e2       	ldi	r24, 0x20	; 32
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    228c:	2a 94       	dec	r2
    228e:	f4 cf       	rjmp	.-24     	; 0x2278 <vfprintf+0x18c>
    2290:	f5 01       	movw	r30, r10
    2292:	37 fc       	sbrc	r3, 7
    2294:	85 91       	lpm	r24, Z+
    2296:	37 fe       	sbrs	r3, 7
    2298:	81 91       	ld	r24, Z+
    229a:	5f 01       	movw	r10, r30
    229c:	b6 01       	movw	r22, r12
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    22a4:	21 10       	cpse	r2, r1
    22a6:	2a 94       	dec	r2
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	82 1a       	sub	r8, r18
    22ac:	91 08       	sbc	r9, r1
    22ae:	81 14       	cp	r8, r1
    22b0:	91 04       	cpc	r9, r1
    22b2:	71 f7       	brne	.-36     	; 0x2290 <vfprintf+0x1a4>
    22b4:	e8 c0       	rjmp	.+464    	; 0x2486 <vfprintf+0x39a>
    22b6:	84 36       	cpi	r24, 0x64	; 100
    22b8:	11 f0       	breq	.+4      	; 0x22be <vfprintf+0x1d2>
    22ba:	89 36       	cpi	r24, 0x69	; 105
    22bc:	41 f5       	brne	.+80     	; 0x230e <vfprintf+0x222>
    22be:	f8 01       	movw	r30, r16
    22c0:	37 fe       	sbrs	r3, 7
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <vfprintf+0x1e6>
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	82 81       	ldd	r24, Z+2	; 0x02
    22ca:	93 81       	ldd	r25, Z+3	; 0x03
    22cc:	0c 5f       	subi	r16, 0xFC	; 252
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	08 c0       	rjmp	.+16     	; 0x22e2 <vfprintf+0x1f6>
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	07 2e       	mov	r0, r23
    22d8:	00 0c       	add	r0, r0
    22da:	88 0b       	sbc	r24, r24
    22dc:	99 0b       	sbc	r25, r25
    22de:	0e 5f       	subi	r16, 0xFE	; 254
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	f3 2d       	mov	r31, r3
    22e4:	ff 76       	andi	r31, 0x6F	; 111
    22e6:	3f 2e       	mov	r3, r31
    22e8:	97 ff       	sbrs	r25, 7
    22ea:	09 c0       	rjmp	.+18     	; 0x22fe <vfprintf+0x212>
    22ec:	90 95       	com	r25
    22ee:	80 95       	com	r24
    22f0:	70 95       	com	r23
    22f2:	61 95       	neg	r22
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	8f 4f       	sbci	r24, 0xFF	; 255
    22f8:	9f 4f       	sbci	r25, 0xFF	; 255
    22fa:	f0 68       	ori	r31, 0x80	; 128
    22fc:	3f 2e       	mov	r3, r31
    22fe:	2a e0       	ldi	r18, 0x0A	; 10
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	a3 01       	movw	r20, r6
    2304:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__ultoa_invert>
    2308:	88 2e       	mov	r8, r24
    230a:	86 18       	sub	r8, r6
    230c:	45 c0       	rjmp	.+138    	; 0x2398 <vfprintf+0x2ac>
    230e:	85 37       	cpi	r24, 0x75	; 117
    2310:	31 f4       	brne	.+12     	; 0x231e <vfprintf+0x232>
    2312:	23 2d       	mov	r18, r3
    2314:	2f 7e       	andi	r18, 0xEF	; 239
    2316:	b2 2e       	mov	r11, r18
    2318:	2a e0       	ldi	r18, 0x0A	; 10
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	25 c0       	rjmp	.+74     	; 0x2368 <vfprintf+0x27c>
    231e:	93 2d       	mov	r25, r3
    2320:	99 7f       	andi	r25, 0xF9	; 249
    2322:	b9 2e       	mov	r11, r25
    2324:	8f 36       	cpi	r24, 0x6F	; 111
    2326:	c1 f0       	breq	.+48     	; 0x2358 <vfprintf+0x26c>
    2328:	18 f4       	brcc	.+6      	; 0x2330 <vfprintf+0x244>
    232a:	88 35       	cpi	r24, 0x58	; 88
    232c:	79 f0       	breq	.+30     	; 0x234c <vfprintf+0x260>
    232e:	b5 c0       	rjmp	.+362    	; 0x249a <vfprintf+0x3ae>
    2330:	80 37       	cpi	r24, 0x70	; 112
    2332:	19 f0       	breq	.+6      	; 0x233a <vfprintf+0x24e>
    2334:	88 37       	cpi	r24, 0x78	; 120
    2336:	21 f0       	breq	.+8      	; 0x2340 <vfprintf+0x254>
    2338:	b0 c0       	rjmp	.+352    	; 0x249a <vfprintf+0x3ae>
    233a:	e9 2f       	mov	r30, r25
    233c:	e0 61       	ori	r30, 0x10	; 16
    233e:	be 2e       	mov	r11, r30
    2340:	b4 fe       	sbrs	r11, 4
    2342:	0d c0       	rjmp	.+26     	; 0x235e <vfprintf+0x272>
    2344:	fb 2d       	mov	r31, r11
    2346:	f4 60       	ori	r31, 0x04	; 4
    2348:	bf 2e       	mov	r11, r31
    234a:	09 c0       	rjmp	.+18     	; 0x235e <vfprintf+0x272>
    234c:	34 fe       	sbrs	r3, 4
    234e:	0a c0       	rjmp	.+20     	; 0x2364 <vfprintf+0x278>
    2350:	29 2f       	mov	r18, r25
    2352:	26 60       	ori	r18, 0x06	; 6
    2354:	b2 2e       	mov	r11, r18
    2356:	06 c0       	rjmp	.+12     	; 0x2364 <vfprintf+0x278>
    2358:	28 e0       	ldi	r18, 0x08	; 8
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <vfprintf+0x27c>
    235e:	20 e1       	ldi	r18, 0x10	; 16
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <vfprintf+0x27c>
    2364:	20 e1       	ldi	r18, 0x10	; 16
    2366:	32 e0       	ldi	r19, 0x02	; 2
    2368:	f8 01       	movw	r30, r16
    236a:	b7 fe       	sbrs	r11, 7
    236c:	07 c0       	rjmp	.+14     	; 0x237c <vfprintf+0x290>
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	0c 5f       	subi	r16, 0xFC	; 252
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	06 c0       	rjmp	.+12     	; 0x2388 <vfprintf+0x29c>
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 5f       	subi	r16, 0xFE	; 254
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	a3 01       	movw	r20, r6
    238a:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__ultoa_invert>
    238e:	88 2e       	mov	r8, r24
    2390:	86 18       	sub	r8, r6
    2392:	fb 2d       	mov	r31, r11
    2394:	ff 77       	andi	r31, 0x7F	; 127
    2396:	3f 2e       	mov	r3, r31
    2398:	36 fe       	sbrs	r3, 6
    239a:	0d c0       	rjmp	.+26     	; 0x23b6 <vfprintf+0x2ca>
    239c:	23 2d       	mov	r18, r3
    239e:	2e 7f       	andi	r18, 0xFE	; 254
    23a0:	a2 2e       	mov	r10, r18
    23a2:	89 14       	cp	r8, r9
    23a4:	58 f4       	brcc	.+22     	; 0x23bc <vfprintf+0x2d0>
    23a6:	34 fe       	sbrs	r3, 4
    23a8:	0b c0       	rjmp	.+22     	; 0x23c0 <vfprintf+0x2d4>
    23aa:	32 fc       	sbrc	r3, 2
    23ac:	09 c0       	rjmp	.+18     	; 0x23c0 <vfprintf+0x2d4>
    23ae:	83 2d       	mov	r24, r3
    23b0:	8e 7e       	andi	r24, 0xEE	; 238
    23b2:	a8 2e       	mov	r10, r24
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <vfprintf+0x2d4>
    23b6:	b8 2c       	mov	r11, r8
    23b8:	a3 2c       	mov	r10, r3
    23ba:	03 c0       	rjmp	.+6      	; 0x23c2 <vfprintf+0x2d6>
    23bc:	b8 2c       	mov	r11, r8
    23be:	01 c0       	rjmp	.+2      	; 0x23c2 <vfprintf+0x2d6>
    23c0:	b9 2c       	mov	r11, r9
    23c2:	a4 fe       	sbrs	r10, 4
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <vfprintf+0x2f8>
    23c6:	fe 01       	movw	r30, r28
    23c8:	e8 0d       	add	r30, r8
    23ca:	f1 1d       	adc	r31, r1
    23cc:	80 81       	ld	r24, Z
    23ce:	80 33       	cpi	r24, 0x30	; 48
    23d0:	21 f4       	brne	.+8      	; 0x23da <vfprintf+0x2ee>
    23d2:	9a 2d       	mov	r25, r10
    23d4:	99 7e       	andi	r25, 0xE9	; 233
    23d6:	a9 2e       	mov	r10, r25
    23d8:	09 c0       	rjmp	.+18     	; 0x23ec <vfprintf+0x300>
    23da:	a2 fe       	sbrs	r10, 2
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <vfprintf+0x2fe>
    23de:	b3 94       	inc	r11
    23e0:	b3 94       	inc	r11
    23e2:	04 c0       	rjmp	.+8      	; 0x23ec <vfprintf+0x300>
    23e4:	8a 2d       	mov	r24, r10
    23e6:	86 78       	andi	r24, 0x86	; 134
    23e8:	09 f0       	breq	.+2      	; 0x23ec <vfprintf+0x300>
    23ea:	b3 94       	inc	r11
    23ec:	a3 fc       	sbrc	r10, 3
    23ee:	11 c0       	rjmp	.+34     	; 0x2412 <vfprintf+0x326>
    23f0:	a0 fe       	sbrs	r10, 0
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <vfprintf+0x314>
    23f4:	b2 14       	cp	r11, r2
    23f6:	88 f4       	brcc	.+34     	; 0x241a <vfprintf+0x32e>
    23f8:	28 0c       	add	r2, r8
    23fa:	92 2c       	mov	r9, r2
    23fc:	9b 18       	sub	r9, r11
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <vfprintf+0x330>
    2400:	b2 14       	cp	r11, r2
    2402:	60 f4       	brcc	.+24     	; 0x241c <vfprintf+0x330>
    2404:	b6 01       	movw	r22, r12
    2406:	80 e2       	ldi	r24, 0x20	; 32
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    240e:	b3 94       	inc	r11
    2410:	f7 cf       	rjmp	.-18     	; 0x2400 <vfprintf+0x314>
    2412:	b2 14       	cp	r11, r2
    2414:	18 f4       	brcc	.+6      	; 0x241c <vfprintf+0x330>
    2416:	2b 18       	sub	r2, r11
    2418:	02 c0       	rjmp	.+4      	; 0x241e <vfprintf+0x332>
    241a:	98 2c       	mov	r9, r8
    241c:	21 2c       	mov	r2, r1
    241e:	a4 fe       	sbrs	r10, 4
    2420:	10 c0       	rjmp	.+32     	; 0x2442 <vfprintf+0x356>
    2422:	b6 01       	movw	r22, r12
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    242c:	a2 fe       	sbrs	r10, 2
    242e:	17 c0       	rjmp	.+46     	; 0x245e <vfprintf+0x372>
    2430:	a1 fc       	sbrc	r10, 1
    2432:	03 c0       	rjmp	.+6      	; 0x243a <vfprintf+0x34e>
    2434:	88 e7       	ldi	r24, 0x78	; 120
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	02 c0       	rjmp	.+4      	; 0x243e <vfprintf+0x352>
    243a:	88 e5       	ldi	r24, 0x58	; 88
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	b6 01       	movw	r22, r12
    2440:	0c c0       	rjmp	.+24     	; 0x245a <vfprintf+0x36e>
    2442:	8a 2d       	mov	r24, r10
    2444:	86 78       	andi	r24, 0x86	; 134
    2446:	59 f0       	breq	.+22     	; 0x245e <vfprintf+0x372>
    2448:	a1 fe       	sbrs	r10, 1
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <vfprintf+0x364>
    244c:	8b e2       	ldi	r24, 0x2B	; 43
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <vfprintf+0x366>
    2450:	80 e2       	ldi	r24, 0x20	; 32
    2452:	a7 fc       	sbrc	r10, 7
    2454:	8d e2       	ldi	r24, 0x2D	; 45
    2456:	b6 01       	movw	r22, r12
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    245e:	89 14       	cp	r8, r9
    2460:	38 f4       	brcc	.+14     	; 0x2470 <vfprintf+0x384>
    2462:	b6 01       	movw	r22, r12
    2464:	80 e3       	ldi	r24, 0x30	; 48
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    246c:	9a 94       	dec	r9
    246e:	f7 cf       	rjmp	.-18     	; 0x245e <vfprintf+0x372>
    2470:	8a 94       	dec	r8
    2472:	f3 01       	movw	r30, r6
    2474:	e8 0d       	add	r30, r8
    2476:	f1 1d       	adc	r31, r1
    2478:	80 81       	ld	r24, Z
    247a:	b6 01       	movw	r22, r12
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    2482:	81 10       	cpse	r8, r1
    2484:	f5 cf       	rjmp	.-22     	; 0x2470 <vfprintf+0x384>
    2486:	22 20       	and	r2, r2
    2488:	09 f4       	brne	.+2      	; 0x248c <vfprintf+0x3a0>
    248a:	42 ce       	rjmp	.-892    	; 0x2110 <vfprintf+0x24>
    248c:	b6 01       	movw	r22, r12
    248e:	80 e2       	ldi	r24, 0x20	; 32
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 c1 13 	call	0x2782	; 0x2782 <fputc>
    2496:	2a 94       	dec	r2
    2498:	f6 cf       	rjmp	.-20     	; 0x2486 <vfprintf+0x39a>
    249a:	f6 01       	movw	r30, r12
    249c:	86 81       	ldd	r24, Z+6	; 0x06
    249e:	97 81       	ldd	r25, Z+7	; 0x07
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <vfprintf+0x3ba>
    24a2:	8f ef       	ldi	r24, 0xFF	; 255
    24a4:	9f ef       	ldi	r25, 0xFF	; 255
    24a6:	2b 96       	adiw	r28, 0x0b	; 11
    24a8:	e2 e1       	ldi	r30, 0x12	; 18
    24aa:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__>

000024ae <calloc>:
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	86 9f       	mul	r24, r22
    24b8:	80 01       	movw	r16, r0
    24ba:	87 9f       	mul	r24, r23
    24bc:	10 0d       	add	r17, r0
    24be:	96 9f       	mul	r25, r22
    24c0:	10 0d       	add	r17, r0
    24c2:	11 24       	eor	r1, r1
    24c4:	c8 01       	movw	r24, r16
    24c6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <malloc>
    24ca:	ec 01       	movw	r28, r24
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	29 f0       	breq	.+10     	; 0x24da <calloc+0x2c>
    24d0:	a8 01       	movw	r20, r16
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	0e 94 9f 13 	call	0x273e	; 0x273e <memset>
    24da:	ce 01       	movw	r24, r28
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	08 95       	ret

000024e6 <malloc>:
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	91 05       	cpc	r25, r1
    24f2:	10 f4       	brcc	.+4      	; 0x24f8 <malloc+0x12>
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <__flp>
    24fc:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <__flp+0x1>
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	a0 e0       	ldi	r26, 0x00	; 0
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	30 97       	sbiw	r30, 0x00	; 0
    250a:	19 f1       	breq	.+70     	; 0x2552 <malloc+0x6c>
    250c:	40 81       	ld	r20, Z
    250e:	51 81       	ldd	r21, Z+1	; 0x01
    2510:	02 81       	ldd	r16, Z+2	; 0x02
    2512:	13 81       	ldd	r17, Z+3	; 0x03
    2514:	48 17       	cp	r20, r24
    2516:	59 07       	cpc	r21, r25
    2518:	c8 f0       	brcs	.+50     	; 0x254c <malloc+0x66>
    251a:	84 17       	cp	r24, r20
    251c:	95 07       	cpc	r25, r21
    251e:	69 f4       	brne	.+26     	; 0x253a <malloc+0x54>
    2520:	10 97       	sbiw	r26, 0x00	; 0
    2522:	31 f0       	breq	.+12     	; 0x2530 <malloc+0x4a>
    2524:	12 96       	adiw	r26, 0x02	; 2
    2526:	0c 93       	st	X, r16
    2528:	12 97       	sbiw	r26, 0x02	; 2
    252a:	13 96       	adiw	r26, 0x03	; 3
    252c:	1c 93       	st	X, r17
    252e:	27 c0       	rjmp	.+78     	; 0x257e <malloc+0x98>
    2530:	00 93 a0 04 	sts	0x04A0, r16	; 0x8004a0 <__flp>
    2534:	10 93 a1 04 	sts	0x04A1, r17	; 0x8004a1 <__flp+0x1>
    2538:	22 c0       	rjmp	.+68     	; 0x257e <malloc+0x98>
    253a:	21 15       	cp	r18, r1
    253c:	31 05       	cpc	r19, r1
    253e:	19 f0       	breq	.+6      	; 0x2546 <malloc+0x60>
    2540:	42 17       	cp	r20, r18
    2542:	53 07       	cpc	r21, r19
    2544:	18 f4       	brcc	.+6      	; 0x254c <malloc+0x66>
    2546:	9a 01       	movw	r18, r20
    2548:	bd 01       	movw	r22, r26
    254a:	ef 01       	movw	r28, r30
    254c:	df 01       	movw	r26, r30
    254e:	f8 01       	movw	r30, r16
    2550:	db cf       	rjmp	.-74     	; 0x2508 <malloc+0x22>
    2552:	21 15       	cp	r18, r1
    2554:	31 05       	cpc	r19, r1
    2556:	f9 f0       	breq	.+62     	; 0x2596 <malloc+0xb0>
    2558:	28 1b       	sub	r18, r24
    255a:	39 0b       	sbc	r19, r25
    255c:	24 30       	cpi	r18, 0x04	; 4
    255e:	31 05       	cpc	r19, r1
    2560:	80 f4       	brcc	.+32     	; 0x2582 <malloc+0x9c>
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	9b 81       	ldd	r25, Y+3	; 0x03
    2566:	61 15       	cp	r22, r1
    2568:	71 05       	cpc	r23, r1
    256a:	21 f0       	breq	.+8      	; 0x2574 <malloc+0x8e>
    256c:	fb 01       	movw	r30, r22
    256e:	93 83       	std	Z+3, r25	; 0x03
    2570:	82 83       	std	Z+2, r24	; 0x02
    2572:	04 c0       	rjmp	.+8      	; 0x257c <malloc+0x96>
    2574:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__flp+0x1>
    2578:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__flp>
    257c:	fe 01       	movw	r30, r28
    257e:	32 96       	adiw	r30, 0x02	; 2
    2580:	44 c0       	rjmp	.+136    	; 0x260a <malloc+0x124>
    2582:	fe 01       	movw	r30, r28
    2584:	e2 0f       	add	r30, r18
    2586:	f3 1f       	adc	r31, r19
    2588:	81 93       	st	Z+, r24
    258a:	91 93       	st	Z+, r25
    258c:	22 50       	subi	r18, 0x02	; 2
    258e:	31 09       	sbc	r19, r1
    2590:	39 83       	std	Y+1, r19	; 0x01
    2592:	28 83       	st	Y, r18
    2594:	3a c0       	rjmp	.+116    	; 0x260a <malloc+0x124>
    2596:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    259a:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    259e:	23 2b       	or	r18, r19
    25a0:	41 f4       	brne	.+16     	; 0x25b2 <malloc+0xcc>
    25a2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25a6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    25aa:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <__brkval+0x1>
    25ae:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <__brkval>
    25b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    25b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    25ba:	21 15       	cp	r18, r1
    25bc:	31 05       	cpc	r19, r1
    25be:	41 f4       	brne	.+16     	; 0x25d0 <malloc+0xea>
    25c0:	2d b7       	in	r18, 0x3d	; 61
    25c2:	3e b7       	in	r19, 0x3e	; 62
    25c4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    25c8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    25cc:	24 1b       	sub	r18, r20
    25ce:	35 0b       	sbc	r19, r21
    25d0:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <__brkval>
    25d4:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <__brkval+0x1>
    25d8:	e2 17       	cp	r30, r18
    25da:	f3 07       	cpc	r31, r19
    25dc:	a0 f4       	brcc	.+40     	; 0x2606 <malloc+0x120>
    25de:	2e 1b       	sub	r18, r30
    25e0:	3f 0b       	sbc	r19, r31
    25e2:	28 17       	cp	r18, r24
    25e4:	39 07       	cpc	r19, r25
    25e6:	78 f0       	brcs	.+30     	; 0x2606 <malloc+0x120>
    25e8:	ac 01       	movw	r20, r24
    25ea:	4e 5f       	subi	r20, 0xFE	; 254
    25ec:	5f 4f       	sbci	r21, 0xFF	; 255
    25ee:	24 17       	cp	r18, r20
    25f0:	35 07       	cpc	r19, r21
    25f2:	48 f0       	brcs	.+18     	; 0x2606 <malloc+0x120>
    25f4:	4e 0f       	add	r20, r30
    25f6:	5f 1f       	adc	r21, r31
    25f8:	50 93 9f 04 	sts	0x049F, r21	; 0x80049f <__brkval+0x1>
    25fc:	40 93 9e 04 	sts	0x049E, r20	; 0x80049e <__brkval>
    2600:	81 93       	st	Z+, r24
    2602:	91 93       	st	Z+, r25
    2604:	02 c0       	rjmp	.+4      	; 0x260a <malloc+0x124>
    2606:	e0 e0       	ldi	r30, 0x00	; 0
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	cf 01       	movw	r24, r30
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	08 95       	ret

00002616 <free>:
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	09 f4       	brne	.+2      	; 0x2620 <free+0xa>
    261e:	81 c0       	rjmp	.+258    	; 0x2722 <free+0x10c>
    2620:	fc 01       	movw	r30, r24
    2622:	32 97       	sbiw	r30, 0x02	; 2
    2624:	13 82       	std	Z+3, r1	; 0x03
    2626:	12 82       	std	Z+2, r1	; 0x02
    2628:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <__flp>
    262c:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <__flp+0x1>
    2630:	10 97       	sbiw	r26, 0x00	; 0
    2632:	81 f4       	brne	.+32     	; 0x2654 <free+0x3e>
    2634:	20 81       	ld	r18, Z
    2636:	31 81       	ldd	r19, Z+1	; 0x01
    2638:	82 0f       	add	r24, r18
    263a:	93 1f       	adc	r25, r19
    263c:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    2640:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    2644:	28 17       	cp	r18, r24
    2646:	39 07       	cpc	r19, r25
    2648:	51 f5       	brne	.+84     	; 0x269e <free+0x88>
    264a:	f0 93 9f 04 	sts	0x049F, r31	; 0x80049f <__brkval+0x1>
    264e:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <__brkval>
    2652:	67 c0       	rjmp	.+206    	; 0x2722 <free+0x10c>
    2654:	ed 01       	movw	r28, r26
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	ce 17       	cp	r28, r30
    265c:	df 07       	cpc	r29, r31
    265e:	40 f4       	brcc	.+16     	; 0x2670 <free+0x5a>
    2660:	4a 81       	ldd	r20, Y+2	; 0x02
    2662:	5b 81       	ldd	r21, Y+3	; 0x03
    2664:	9e 01       	movw	r18, r28
    2666:	41 15       	cp	r20, r1
    2668:	51 05       	cpc	r21, r1
    266a:	f1 f0       	breq	.+60     	; 0x26a8 <free+0x92>
    266c:	ea 01       	movw	r28, r20
    266e:	f5 cf       	rjmp	.-22     	; 0x265a <free+0x44>
    2670:	d3 83       	std	Z+3, r29	; 0x03
    2672:	c2 83       	std	Z+2, r28	; 0x02
    2674:	40 81       	ld	r20, Z
    2676:	51 81       	ldd	r21, Z+1	; 0x01
    2678:	84 0f       	add	r24, r20
    267a:	95 1f       	adc	r25, r21
    267c:	c8 17       	cp	r28, r24
    267e:	d9 07       	cpc	r29, r25
    2680:	59 f4       	brne	.+22     	; 0x2698 <free+0x82>
    2682:	88 81       	ld	r24, Y
    2684:	99 81       	ldd	r25, Y+1	; 0x01
    2686:	84 0f       	add	r24, r20
    2688:	95 1f       	adc	r25, r21
    268a:	02 96       	adiw	r24, 0x02	; 2
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	80 83       	st	Z, r24
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	9b 81       	ldd	r25, Y+3	; 0x03
    2694:	93 83       	std	Z+3, r25	; 0x03
    2696:	82 83       	std	Z+2, r24	; 0x02
    2698:	21 15       	cp	r18, r1
    269a:	31 05       	cpc	r19, r1
    269c:	29 f4       	brne	.+10     	; 0x26a8 <free+0x92>
    269e:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <__flp+0x1>
    26a2:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <__flp>
    26a6:	3d c0       	rjmp	.+122    	; 0x2722 <free+0x10c>
    26a8:	e9 01       	movw	r28, r18
    26aa:	fb 83       	std	Y+3, r31	; 0x03
    26ac:	ea 83       	std	Y+2, r30	; 0x02
    26ae:	49 91       	ld	r20, Y+
    26b0:	59 91       	ld	r21, Y+
    26b2:	c4 0f       	add	r28, r20
    26b4:	d5 1f       	adc	r29, r21
    26b6:	ec 17       	cp	r30, r28
    26b8:	fd 07       	cpc	r31, r29
    26ba:	61 f4       	brne	.+24     	; 0x26d4 <free+0xbe>
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	84 0f       	add	r24, r20
    26c2:	95 1f       	adc	r25, r21
    26c4:	02 96       	adiw	r24, 0x02	; 2
    26c6:	e9 01       	movw	r28, r18
    26c8:	99 83       	std	Y+1, r25	; 0x01
    26ca:	88 83       	st	Y, r24
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	9b 83       	std	Y+3, r25	; 0x03
    26d2:	8a 83       	std	Y+2, r24	; 0x02
    26d4:	e0 e0       	ldi	r30, 0x00	; 0
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	12 96       	adiw	r26, 0x02	; 2
    26da:	8d 91       	ld	r24, X+
    26dc:	9c 91       	ld	r25, X
    26de:	13 97       	sbiw	r26, 0x03	; 3
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	19 f0       	breq	.+6      	; 0x26ea <free+0xd4>
    26e4:	fd 01       	movw	r30, r26
    26e6:	dc 01       	movw	r26, r24
    26e8:	f7 cf       	rjmp	.-18     	; 0x26d8 <free+0xc2>
    26ea:	8d 91       	ld	r24, X+
    26ec:	9c 91       	ld	r25, X
    26ee:	11 97       	sbiw	r26, 0x01	; 1
    26f0:	9d 01       	movw	r18, r26
    26f2:	2e 5f       	subi	r18, 0xFE	; 254
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	82 0f       	add	r24, r18
    26f8:	93 1f       	adc	r25, r19
    26fa:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    26fe:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    2702:	28 17       	cp	r18, r24
    2704:	39 07       	cpc	r19, r25
    2706:	69 f4       	brne	.+26     	; 0x2722 <free+0x10c>
    2708:	30 97       	sbiw	r30, 0x00	; 0
    270a:	29 f4       	brne	.+10     	; 0x2716 <free+0x100>
    270c:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <__flp+0x1>
    2710:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__flp>
    2714:	02 c0       	rjmp	.+4      	; 0x271a <free+0x104>
    2716:	13 82       	std	Z+3, r1	; 0x03
    2718:	12 82       	std	Z+2, r1	; 0x02
    271a:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <__brkval+0x1>
    271e:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <__brkval>
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <strnlen_P>:
    2728:	fc 01       	movw	r30, r24
    272a:	05 90       	lpm	r0, Z+
    272c:	61 50       	subi	r22, 0x01	; 1
    272e:	70 40       	sbci	r23, 0x00	; 0
    2730:	01 10       	cpse	r0, r1
    2732:	d8 f7       	brcc	.-10     	; 0x272a <strnlen_P+0x2>
    2734:	80 95       	com	r24
    2736:	90 95       	com	r25
    2738:	8e 0f       	add	r24, r30
    273a:	9f 1f       	adc	r25, r31
    273c:	08 95       	ret

0000273e <memset>:
    273e:	dc 01       	movw	r26, r24
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <memset+0x6>
    2742:	6d 93       	st	X+, r22
    2744:	41 50       	subi	r20, 0x01	; 1
    2746:	50 40       	sbci	r21, 0x00	; 0
    2748:	e0 f7       	brcc	.-8      	; 0x2742 <memset+0x4>
    274a:	08 95       	ret

0000274c <strnlen>:
    274c:	fc 01       	movw	r30, r24
    274e:	61 50       	subi	r22, 0x01	; 1
    2750:	70 40       	sbci	r23, 0x00	; 0
    2752:	01 90       	ld	r0, Z+
    2754:	01 10       	cpse	r0, r1
    2756:	d8 f7       	brcc	.-10     	; 0x274e <strnlen+0x2>
    2758:	80 95       	com	r24
    275a:	90 95       	com	r25
    275c:	8e 0f       	add	r24, r30
    275e:	9f 1f       	adc	r25, r31
    2760:	08 95       	ret

00002762 <strrev>:
    2762:	dc 01       	movw	r26, r24
    2764:	fc 01       	movw	r30, r24
    2766:	67 2f       	mov	r22, r23
    2768:	71 91       	ld	r23, Z+
    276a:	77 23       	and	r23, r23
    276c:	e1 f7       	brne	.-8      	; 0x2766 <strrev+0x4>
    276e:	32 97       	sbiw	r30, 0x02	; 2
    2770:	04 c0       	rjmp	.+8      	; 0x277a <strrev+0x18>
    2772:	7c 91       	ld	r23, X
    2774:	6d 93       	st	X+, r22
    2776:	70 83       	st	Z, r23
    2778:	62 91       	ld	r22, -Z
    277a:	ae 17       	cp	r26, r30
    277c:	bf 07       	cpc	r27, r31
    277e:	c8 f3       	brcs	.-14     	; 0x2772 <strrev+0x10>
    2780:	08 95       	ret

00002782 <fputc>:
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	fb 01       	movw	r30, r22
    278c:	23 81       	ldd	r18, Z+3	; 0x03
    278e:	21 fd       	sbrc	r18, 1
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <fputc+0x16>
    2792:	8f ef       	ldi	r24, 0xFF	; 255
    2794:	9f ef       	ldi	r25, 0xFF	; 255
    2796:	2c c0       	rjmp	.+88     	; 0x27f0 <fputc+0x6e>
    2798:	22 ff       	sbrs	r18, 2
    279a:	16 c0       	rjmp	.+44     	; 0x27c8 <fputc+0x46>
    279c:	46 81       	ldd	r20, Z+6	; 0x06
    279e:	57 81       	ldd	r21, Z+7	; 0x07
    27a0:	24 81       	ldd	r18, Z+4	; 0x04
    27a2:	35 81       	ldd	r19, Z+5	; 0x05
    27a4:	42 17       	cp	r20, r18
    27a6:	53 07       	cpc	r21, r19
    27a8:	44 f4       	brge	.+16     	; 0x27ba <fputc+0x38>
    27aa:	a0 81       	ld	r26, Z
    27ac:	b1 81       	ldd	r27, Z+1	; 0x01
    27ae:	9d 01       	movw	r18, r26
    27b0:	2f 5f       	subi	r18, 0xFF	; 255
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	31 83       	std	Z+1, r19	; 0x01
    27b6:	20 83       	st	Z, r18
    27b8:	8c 93       	st	X, r24
    27ba:	26 81       	ldd	r18, Z+6	; 0x06
    27bc:	37 81       	ldd	r19, Z+7	; 0x07
    27be:	2f 5f       	subi	r18, 0xFF	; 255
    27c0:	3f 4f       	sbci	r19, 0xFF	; 255
    27c2:	37 83       	std	Z+7, r19	; 0x07
    27c4:	26 83       	std	Z+6, r18	; 0x06
    27c6:	14 c0       	rjmp	.+40     	; 0x27f0 <fputc+0x6e>
    27c8:	8b 01       	movw	r16, r22
    27ca:	ec 01       	movw	r28, r24
    27cc:	fb 01       	movw	r30, r22
    27ce:	00 84       	ldd	r0, Z+8	; 0x08
    27d0:	f1 85       	ldd	r31, Z+9	; 0x09
    27d2:	e0 2d       	mov	r30, r0
    27d4:	09 95       	icall
    27d6:	89 2b       	or	r24, r25
    27d8:	e1 f6       	brne	.-72     	; 0x2792 <fputc+0x10>
    27da:	d8 01       	movw	r26, r16
    27dc:	16 96       	adiw	r26, 0x06	; 6
    27de:	8d 91       	ld	r24, X+
    27e0:	9c 91       	ld	r25, X
    27e2:	17 97       	sbiw	r26, 0x07	; 7
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	17 96       	adiw	r26, 0x07	; 7
    27e8:	9c 93       	st	X, r25
    27ea:	8e 93       	st	-X, r24
    27ec:	16 97       	sbiw	r26, 0x06	; 6
    27ee:	ce 01       	movw	r24, r28
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	08 95       	ret

000027fa <__ultoa_invert>:
    27fa:	fa 01       	movw	r30, r20
    27fc:	aa 27       	eor	r26, r26
    27fe:	28 30       	cpi	r18, 0x08	; 8
    2800:	51 f1       	breq	.+84     	; 0x2856 <__ultoa_invert+0x5c>
    2802:	20 31       	cpi	r18, 0x10	; 16
    2804:	81 f1       	breq	.+96     	; 0x2866 <__ultoa_invert+0x6c>
    2806:	e8 94       	clt
    2808:	6f 93       	push	r22
    280a:	6e 7f       	andi	r22, 0xFE	; 254
    280c:	6e 5f       	subi	r22, 0xFE	; 254
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	8f 4f       	sbci	r24, 0xFF	; 255
    2812:	9f 4f       	sbci	r25, 0xFF	; 255
    2814:	af 4f       	sbci	r26, 0xFF	; 255
    2816:	b1 e0       	ldi	r27, 0x01	; 1
    2818:	3e d0       	rcall	.+124    	; 0x2896 <__ultoa_invert+0x9c>
    281a:	b4 e0       	ldi	r27, 0x04	; 4
    281c:	3c d0       	rcall	.+120    	; 0x2896 <__ultoa_invert+0x9c>
    281e:	67 0f       	add	r22, r23
    2820:	78 1f       	adc	r23, r24
    2822:	89 1f       	adc	r24, r25
    2824:	9a 1f       	adc	r25, r26
    2826:	a1 1d       	adc	r26, r1
    2828:	68 0f       	add	r22, r24
    282a:	79 1f       	adc	r23, r25
    282c:	8a 1f       	adc	r24, r26
    282e:	91 1d       	adc	r25, r1
    2830:	a1 1d       	adc	r26, r1
    2832:	6a 0f       	add	r22, r26
    2834:	71 1d       	adc	r23, r1
    2836:	81 1d       	adc	r24, r1
    2838:	91 1d       	adc	r25, r1
    283a:	a1 1d       	adc	r26, r1
    283c:	20 d0       	rcall	.+64     	; 0x287e <__ultoa_invert+0x84>
    283e:	09 f4       	brne	.+2      	; 0x2842 <__ultoa_invert+0x48>
    2840:	68 94       	set
    2842:	3f 91       	pop	r19
    2844:	2a e0       	ldi	r18, 0x0A	; 10
    2846:	26 9f       	mul	r18, r22
    2848:	11 24       	eor	r1, r1
    284a:	30 19       	sub	r19, r0
    284c:	30 5d       	subi	r19, 0xD0	; 208
    284e:	31 93       	st	Z+, r19
    2850:	de f6       	brtc	.-74     	; 0x2808 <__ultoa_invert+0xe>
    2852:	cf 01       	movw	r24, r30
    2854:	08 95       	ret
    2856:	46 2f       	mov	r20, r22
    2858:	47 70       	andi	r20, 0x07	; 7
    285a:	40 5d       	subi	r20, 0xD0	; 208
    285c:	41 93       	st	Z+, r20
    285e:	b3 e0       	ldi	r27, 0x03	; 3
    2860:	0f d0       	rcall	.+30     	; 0x2880 <__ultoa_invert+0x86>
    2862:	c9 f7       	brne	.-14     	; 0x2856 <__ultoa_invert+0x5c>
    2864:	f6 cf       	rjmp	.-20     	; 0x2852 <__ultoa_invert+0x58>
    2866:	46 2f       	mov	r20, r22
    2868:	4f 70       	andi	r20, 0x0F	; 15
    286a:	40 5d       	subi	r20, 0xD0	; 208
    286c:	4a 33       	cpi	r20, 0x3A	; 58
    286e:	18 f0       	brcs	.+6      	; 0x2876 <__ultoa_invert+0x7c>
    2870:	49 5d       	subi	r20, 0xD9	; 217
    2872:	31 fd       	sbrc	r19, 1
    2874:	40 52       	subi	r20, 0x20	; 32
    2876:	41 93       	st	Z+, r20
    2878:	02 d0       	rcall	.+4      	; 0x287e <__ultoa_invert+0x84>
    287a:	a9 f7       	brne	.-22     	; 0x2866 <__ultoa_invert+0x6c>
    287c:	ea cf       	rjmp	.-44     	; 0x2852 <__ultoa_invert+0x58>
    287e:	b4 e0       	ldi	r27, 0x04	; 4
    2880:	a6 95       	lsr	r26
    2882:	97 95       	ror	r25
    2884:	87 95       	ror	r24
    2886:	77 95       	ror	r23
    2888:	67 95       	ror	r22
    288a:	ba 95       	dec	r27
    288c:	c9 f7       	brne	.-14     	; 0x2880 <__ultoa_invert+0x86>
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	61 05       	cpc	r22, r1
    2892:	71 05       	cpc	r23, r1
    2894:	08 95       	ret
    2896:	9b 01       	movw	r18, r22
    2898:	ac 01       	movw	r20, r24
    289a:	0a 2e       	mov	r0, r26
    289c:	06 94       	lsr	r0
    289e:	57 95       	ror	r21
    28a0:	47 95       	ror	r20
    28a2:	37 95       	ror	r19
    28a4:	27 95       	ror	r18
    28a6:	ba 95       	dec	r27
    28a8:	c9 f7       	brne	.-14     	; 0x289c <__ultoa_invert+0xa2>
    28aa:	62 0f       	add	r22, r18
    28ac:	73 1f       	adc	r23, r19
    28ae:	84 1f       	adc	r24, r20
    28b0:	95 1f       	adc	r25, r21
    28b2:	a0 1d       	adc	r26, r0
    28b4:	08 95       	ret

000028b6 <__prologue_saves__>:
    28b6:	2f 92       	push	r2
    28b8:	3f 92       	push	r3
    28ba:	4f 92       	push	r4
    28bc:	5f 92       	push	r5
    28be:	6f 92       	push	r6
    28c0:	7f 92       	push	r7
    28c2:	8f 92       	push	r8
    28c4:	9f 92       	push	r9
    28c6:	af 92       	push	r10
    28c8:	bf 92       	push	r11
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ef 92       	push	r14
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	ca 1b       	sub	r28, r26
    28e0:	db 0b       	sbc	r29, r27
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	09 94       	ijmp

000028ee <__epilogue_restores__>:
    28ee:	2a 88       	ldd	r2, Y+18	; 0x12
    28f0:	39 88       	ldd	r3, Y+17	; 0x11
    28f2:	48 88       	ldd	r4, Y+16	; 0x10
    28f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    28f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    28fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    28fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    28fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2900:	b9 84       	ldd	r11, Y+9	; 0x09
    2902:	c8 84       	ldd	r12, Y+8	; 0x08
    2904:	df 80       	ldd	r13, Y+7	; 0x07
    2906:	ee 80       	ldd	r14, Y+6	; 0x06
    2908:	fd 80       	ldd	r15, Y+5	; 0x05
    290a:	0c 81       	ldd	r16, Y+4	; 0x04
    290c:	1b 81       	ldd	r17, Y+3	; 0x03
    290e:	aa 81       	ldd	r26, Y+2	; 0x02
    2910:	b9 81       	ldd	r27, Y+1	; 0x01
    2912:	ce 0f       	add	r28, r30
    2914:	d1 1d       	adc	r29, r1
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	ed 01       	movw	r28, r26
    2922:	08 95       	ret

00002924 <_exit>:
    2924:	f8 94       	cli

00002926 <__stop_program>:
    2926:	ff cf       	rjmp	.-2      	; 0x2926 <__stop_program>
