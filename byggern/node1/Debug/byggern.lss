
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  0000297a  00002a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000297a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  008002d4  008002d4  00002be2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002be2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000579d  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d53  00000000  00000000  00008811  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000230f  00000000  00000000  0000a564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  0000c874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d17  00000000  00000000  0000d148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000243b  00000000  00000000  0000de5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0001029a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	12 e0       	ldi	r17, 0x02	; 2
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	ea e7       	ldi	r30, 0x7A	; 122
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 3d       	cpi	r26, 0xD4	; 212
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a4 ed       	ldi	r26, 0xD4	; 212
     548:	b2 e0       	ldi	r27, 0x02	; 2
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a3 31       	cpi	r26, 0x13	; 19
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xfed>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xfed>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "sleep.h"
#include "slider.h"
#include "joystick.h"
#include "touchButton.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 ef 0b 	call	0x17de	; 0x17de <setupInit>
	
	//Send initialize message to Node 2
	CAN_message_t message;
	message.ID = 0x10;
     5aa:	80 e1       	ldi	r24, 0x10	; 16
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 0;
     5b2:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&message);
     5b4:	ce 01       	movw	r24, r28
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	0e 94 4b 03 	call	0x696	; 0x696 <CAN_transmit_message>
	
	printf("Starting program\n\r");
     5bc:	86 ea       	ldi	r24, 0xA6	; 166
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	0e 94 89 10 	call	0x2112	; 0x2112 <printf>
	printf("---------------------------------------\n\r");
     5c8:	89 eb       	ldi	r24, 0xB9	; 185
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 89 10 	call	0x2112	; 0x2112 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	8f e7       	ldi	r24, 0x7F	; 127
     5d8:	97 e0       	ldi	r25, 0x07	; 7
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	90 40       	sbci	r25, 0x00	; 0
     5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x48>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x52>
     5e4:	00 00       	nop
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
			timerFlag=0;
			TCNT1 = 0x00;

			sei();
		}
		switch(currentMenu.currentMenuItem->nodeID){
     5ee:	02 ee       	ldi	r16, 0xE2	; 226
     5f0:	12 e0       	ldi	r17, 0x02	; 2
     5f2:	af ef       	ldi	r26, 0xFF	; 255
     5f4:	b7 e1       	ldi	r27, 0x17	; 23
     5f6:	11 97       	sbiw	r26, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <main+0x64>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0x6a>
     5fc:	00 00       	nop
	printf("---------------------------------------\n\r");
	_delay_ms(500);    
	while (1) {
		_delay_ms(5);
		
		if (timerFlag)
     5fe:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <timerFlag>
     602:	88 23       	and	r24, r24
     604:	81 f0       	breq	.+32     	; 0x626 <main+0x94>
		{
			cli();
     606:	f8 94       	cli
			TCNT1 = 0x00;
     608:	1d bc       	out	0x2d, r1	; 45
     60a:	1c bc       	out	0x2c, r1	; 44
			joystick_readPosition();
     60c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <joystick_readPosition>
			slider_readPosition(&slider_pos);
     610:	80 ef       	ldi	r24, 0xF0	; 240
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <slider_readPosition>
			touchButton_readButtons();
     618:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <touchButton_readButtons>
			
			timerFlag=0;
     61c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <timerFlag>
			TCNT1 = 0x00;
     620:	1d bc       	out	0x2d, r1	; 45
     622:	1c bc       	out	0x2c, r1	; 44

			sei();
     624:	78 94       	sei
		}
		switch(currentMenu.currentMenuItem->nodeID){
     626:	d8 01       	movw	r26, r16
     628:	ed 91       	ld	r30, X+
     62a:	fc 91       	ld	r31, X
     62c:	80 81       	ld	r24, Z
     62e:	85 30       	cpi	r24, 0x05	; 5
     630:	91 f0       	breq	.+36     	; 0x656 <main+0xc4>
     632:	28 f4       	brcc	.+10     	; 0x63e <main+0xac>
     634:	83 30       	cpi	r24, 0x03	; 3
     636:	41 f0       	breq	.+16     	; 0x648 <main+0xb6>
     638:	84 30       	cpi	r24, 0x04	; 4
     63a:	49 f0       	breq	.+18     	; 0x64e <main+0xbc>
     63c:	17 c0       	rjmp	.+46     	; 0x66c <main+0xda>
     63e:	86 30       	cpi	r24, 0x06	; 6
     640:	71 f0       	breq	.+28     	; 0x65e <main+0xcc>
     642:	87 30       	cpi	r24, 0x07	; 7
     644:	81 f0       	breq	.+32     	; 0x666 <main+0xd4>
     646:	12 c0       	rjmp	.+36     	; 0x66c <main+0xda>
			case PLAY_GAME:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     648:	0e 94 ff 07 	call	0xffe	; 0xffe <music_playRick>
				break;
     64c:	0f c0       	rjmp	.+30     	; 0x66c <main+0xda>
			case GAME_1:
				game_play(1);
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 54 07 	call	0xea8	; 0xea8 <game_play>
				break;
     654:	0b c0       	rjmp	.+22     	; 0x66c <main+0xda>
			case GAME_2:
				game_play(2);
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	0e 94 54 07 	call	0xea8	; 0xea8 <game_play>
				break;
     65c:	07 c0       	rjmp	.+14     	; 0x66c <main+0xda>
			case HS1:
				game_displayHighscores(1);
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 8c 07 	call	0xf18	; 0xf18 <game_displayHighscores>
				break;
     664:	03 c0       	rjmp	.+6      	; 0x66c <main+0xda>
			case HS2:
				game_displayHighscores(2);
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	0e 94 8c 07 	call	0xf18	; 0xf18 <game_displayHighscores>
				break;
			
		}
		//Put microcontroller to sleep until next interrupt.
		if(gameActive==0){
     66c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <gameActive>
     670:	81 11       	cpse	r24, r1
     672:	08 c0       	rjmp	.+16     	; 0x684 <main+0xf2>
			navigateMenu(&joystick_pos);
     674:	88 ed       	ldi	r24, 0xD8	; 216
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	0e 94 07 0a 	call	0x140e	; 0x140e <navigateMenu>
			menu_printCurrentMenu();
     67c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <menu_printCurrentMenu>
			TCNT1 = 0x00;
     680:	1d bc       	out	0x2d, r1	; 45
     682:	1c bc       	out	0x2c, r1	; 44
		}
		sleep_now();
     684:	0e 94 3d 09 	call	0x127a	; 0x127a <sleep_now>
		
	}
     688:	b4 cf       	rjmp	.-152    	; 0x5f2 <main+0x60>

0000068a <CAN_clearInterrupt>:


void CAN_clearInterrupt()
{
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	6c e2       	ldi	r22, 0x2C	; 44
     68e:	83 e0       	ldi	r24, 0x03	; 3
     690:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
     694:	08 95       	ret

00000696 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	8c 01       	movw	r16, r24
	
	//changing between three buffers
	static int buffer_number = 0;
	buffer_number++;
	buffer_number = buffer_number%3;
     69e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     6a2:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	63 e0       	ldi	r22, 0x03	; 3
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__divmodhi4>
     6b0:	28 2f       	mov	r18, r24
     6b2:	39 2f       	mov	r19, r25
     6b4:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <__data_end>
     6b8:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <__data_end+0x1>
	
	//Load ID in message
	switch(buffer_number) {
     6bc:	21 30       	cpi	r18, 0x01	; 1
     6be:	31 05       	cpc	r19, r1
     6c0:	e9 f0       	breq	.+58     	; 0x6fc <CAN_transmit_message+0x66>
     6c2:	22 30       	cpi	r18, 0x02	; 2
     6c4:	31 05       	cpc	r19, r1
     6c6:	89 f1       	breq	.+98     	; 0x72a <CAN_transmit_message+0x94>
     6c8:	23 2b       	or	r18, r19
     6ca:	09 f0       	breq	.+2      	; 0x6ce <CAN_transmit_message+0x38>
     6cc:	44 c0       	rjmp	.+136    	; 0x756 <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6ce:	f8 01       	movw	r30, r16
     6d0:	40 85       	ldd	r20, Z+8	; 0x08
     6d2:	51 85       	ldd	r21, Z+9	; 0x09
     6d4:	42 95       	swap	r20
     6d6:	44 0f       	add	r20, r20
     6d8:	40 7e       	andi	r20, 0xE0	; 224
     6da:	62 e3       	ldi	r22, 0x32	; 50
     6dc:	80 ee       	ldi	r24, 0xE0	; 224
     6de:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6e2:	f8 01       	movw	r30, r16
     6e4:	60 85       	ldd	r22, Z+8	; 0x08
     6e6:	71 85       	ldd	r23, Z+9	; 0x09
     6e8:	76 95       	lsr	r23
     6ea:	67 95       	ror	r22
     6ec:	76 95       	lsr	r23
     6ee:	67 95       	ror	r22
     6f0:	76 95       	lsr	r23
     6f2:	67 95       	ror	r22
     6f4:	81 e3       	ldi	r24, 0x31	; 49
     6f6:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_write>
				break;
     6fa:	2d c0       	rjmp	.+90     	; 0x756 <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6fc:	f8 01       	movw	r30, r16
     6fe:	40 85       	ldd	r20, Z+8	; 0x08
     700:	51 85       	ldd	r21, Z+9	; 0x09
     702:	42 95       	swap	r20
     704:	44 0f       	add	r20, r20
     706:	40 7e       	andi	r20, 0xE0	; 224
     708:	62 e4       	ldi	r22, 0x42	; 66
     70a:	80 ee       	ldi	r24, 0xE0	; 224
     70c:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );				
     710:	f8 01       	movw	r30, r16
     712:	60 85       	ldd	r22, Z+8	; 0x08
     714:	71 85       	ldd	r23, Z+9	; 0x09
     716:	76 95       	lsr	r23
     718:	67 95       	ror	r22
     71a:	76 95       	lsr	r23
     71c:	67 95       	ror	r22
     71e:	76 95       	lsr	r23
     720:	67 95       	ror	r22
     722:	81 e4       	ldi	r24, 0x41	; 65
     724:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_write>
				break;
     728:	16 c0       	rjmp	.+44     	; 0x756 <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     72a:	f8 01       	movw	r30, r16
     72c:	40 85       	ldd	r20, Z+8	; 0x08
     72e:	51 85       	ldd	r21, Z+9	; 0x09
     730:	42 95       	swap	r20
     732:	44 0f       	add	r20, r20
     734:	40 7e       	andi	r20, 0xE0	; 224
     736:	62 e5       	ldi	r22, 0x52	; 82
     738:	80 ee       	ldi	r24, 0xE0	; 224
     73a:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     73e:	f8 01       	movw	r30, r16
     740:	60 85       	ldd	r22, Z+8	; 0x08
     742:	71 85       	ldd	r23, Z+9	; 0x09
     744:	76 95       	lsr	r23
     746:	67 95       	ror	r22
     748:	76 95       	lsr	r23
     74a:	67 95       	ror	r22
     74c:	76 95       	lsr	r23
     74e:	67 95       	ror	r22
     750:	81 e5       	ldi	r24, 0x51	; 81
     752:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_write>
				break;
	}
		
	//Filling message with data length
	switch(buffer_number) {
     756:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     75a:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	91 05       	cpc	r25, r1
     762:	61 f0       	breq	.+24     	; 0x77c <CAN_transmit_message+0xe6>
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	91 05       	cpc	r25, r1
     768:	81 f0       	breq	.+32     	; 0x78a <CAN_transmit_message+0xf4>
     76a:	89 2b       	or	r24, r25
     76c:	a1 f4       	brne	.+40     	; 0x796 <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     76e:	f8 01       	movw	r30, r16
     770:	42 85       	ldd	r20, Z+10	; 0x0a
     772:	65 e3       	ldi	r22, 0x35	; 53
     774:	8f e0       	ldi	r24, 0x0F	; 15
     776:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
				break;
     77a:	0d c0       	rjmp	.+26     	; 0x796 <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     77c:	f8 01       	movw	r30, r16
     77e:	42 85       	ldd	r20, Z+10	; 0x0a
     780:	65 e4       	ldi	r22, 0x45	; 69
     782:	8f e0       	ldi	r24, 0x0F	; 15
     784:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
				break;
     788:	06 c0       	rjmp	.+12     	; 0x796 <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     78a:	f8 01       	movw	r30, r16
     78c:	42 85       	ldd	r20, Z+10	; 0x0a
     78e:	65 e5       	ldi	r22, 0x55	; 85
     790:	8f e0       	ldi	r24, 0x0F	; 15
     792:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
				break;
				
	}

	//Filling message with data.
	for (uint8_t i = 0; i != message->data_length; i++) {
     796:	f8 01       	movw	r30, r16
     798:	82 85       	ldd	r24, Z+10	; 0x0a
     79a:	88 23       	and	r24, r24
     79c:	61 f1       	breq	.+88     	; 0x7f6 <CAN_transmit_message+0x160>
     79e:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     7a0:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     7a4:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x1>
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	91 05       	cpc	r25, r1
     7ac:	71 f0       	breq	.+28     	; 0x7ca <CAN_transmit_message+0x134>
     7ae:	82 30       	cpi	r24, 0x02	; 2
     7b0:	91 05       	cpc	r25, r1
     7b2:	a1 f0       	breq	.+40     	; 0x7dc <CAN_transmit_message+0x146>
     7b4:	89 2b       	or	r24, r25
     7b6:	d1 f4       	brne	.+52     	; 0x7ec <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     7b8:	f8 01       	movw	r30, r16
     7ba:	ec 0f       	add	r30, r28
     7bc:	f1 1d       	adc	r31, r1
     7be:	60 81       	ld	r22, Z
     7c0:	86 e3       	ldi	r24, 0x36	; 54
     7c2:	8c 0f       	add	r24, r28
     7c4:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_write>
				break;
     7c8:	11 c0       	rjmp	.+34     	; 0x7ec <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7ca:	f8 01       	movw	r30, r16
     7cc:	ec 0f       	add	r30, r28
     7ce:	f1 1d       	adc	r31, r1
     7d0:	60 81       	ld	r22, Z
     7d2:	86 e4       	ldi	r24, 0x46	; 70
     7d4:	8c 0f       	add	r24, r28
     7d6:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_write>
				break;
     7da:	08 c0       	rjmp	.+16     	; 0x7ec <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7dc:	f8 01       	movw	r30, r16
     7de:	ec 0f       	add	r30, r28
     7e0:	f1 1d       	adc	r31, r1
     7e2:	60 81       	ld	r22, Z
     7e4:	86 e5       	ldi	r24, 0x56	; 86
     7e6:	8c 0f       	add	r24, r28
     7e8:	0e 94 85 04 	call	0x90a	; 0x90a <CAN_controller_write>
				break;
				
	}

	//Filling message with data.
	for (uint8_t i = 0; i != message->data_length; i++) {
     7ec:	cf 5f       	subi	r28, 0xFF	; 255
     7ee:	f8 01       	movw	r30, r16
     7f0:	82 85       	ldd	r24, Z+10	; 0x0a
     7f2:	8c 13       	cpse	r24, r28
     7f4:	d5 cf       	rjmp	.-86     	; 0x7a0 <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7f6:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     7fa:	0e 94 c7 04 	call	0x98e	; 0x98e <CAN_controller_RTS>
	
	//Currently no error handling	
}
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	7c 01       	movw	r14, r24
	
	//read ID
	received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     812:	82 e6       	ldi	r24, 0x62	; 98
     814:	0e 94 6f 04 	call	0x8de	; 0x8de <CAN_controller_read>
     818:	c8 2f       	mov	r28, r24
     81a:	81 e6       	ldi	r24, 0x61	; 97
     81c:	0e 94 6f 04 	call	0x8de	; 0x8de <CAN_controller_read>
     820:	c2 95       	swap	r28
     822:	c6 95       	lsr	r28
     824:	c7 70       	andi	r28, 0x07	; 7
     826:	28 e0       	ldi	r18, 0x08	; 8
     828:	82 9f       	mul	r24, r18
     82a:	c0 01       	movw	r24, r0
     82c:	11 24       	eor	r1, r1
     82e:	8c 0f       	add	r24, r28
     830:	91 1d       	adc	r25, r1
     832:	f7 01       	movw	r30, r14
     834:	91 87       	std	Z+9, r25	; 0x09
     836:	80 87       	std	Z+8, r24	; 0x08
	
	//read data length
	received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     838:	85 e6       	ldi	r24, 0x65	; 101
     83a:	0e 94 6f 04 	call	0x8de	; 0x8de <CAN_controller_read>
     83e:	8f 70       	andi	r24, 0x0F	; 15
     840:	f7 01       	movw	r30, r14
     842:	82 87       	std	Z+10, r24	; 0x0a
	
	//read data
	for (uint8_t i = 0; i != received_message->data_length; i++) {
     844:	82 85       	ldd	r24, Z+10	; 0x0a
     846:	88 23       	and	r24, r24
     848:	81 f0       	breq	.+32     	; 0x86a <CAN_receiveMessage+0x64>
     84a:	c0 e0       	ldi	r28, 0x00	; 0
		received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     84c:	0c 2f       	mov	r16, r28
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	86 e6       	ldi	r24, 0x66	; 102
     852:	8c 0f       	add	r24, r28
     854:	0e 94 6f 04 	call	0x8de	; 0x8de <CAN_controller_read>
     858:	f7 01       	movw	r30, r14
     85a:	e0 0f       	add	r30, r16
     85c:	f1 1f       	adc	r31, r17
     85e:	80 83       	st	Z, r24
	
	//read data length
	received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
	
	//read data
	for (uint8_t i = 0; i != received_message->data_length; i++) {
     860:	cf 5f       	subi	r28, 0xFF	; 255
     862:	f7 01       	movw	r30, r14
     864:	82 85       	ldd	r24, Z+10	; 0x0a
     866:	8c 13       	cpse	r24, r28
     868:	f1 cf       	rjmp	.-30     	; 0x84c <CAN_receiveMessage+0x46>
		received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
	}
	
	
}
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	08 95       	ret

00000876 <CAN_sendInputData>:

void CAN_sendInputData() {
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	2b 97       	sbiw	r28, 0x0b	; 11
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	9a 87       	std	Y+10, r25	; 0x0a
     890:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     892:	86 e0       	ldi	r24, 0x06	; 6
     894:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     896:	e0 ef       	ldi	r30, 0xF0	; 240
     898:	f2 e0       	ldi	r31, 0x02	; 2
     89a:	80 81       	ld	r24, Z
     89c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     89e:	81 81       	ldd	r24, Z+1	; 0x01
     8a0:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     8a2:	e6 ee       	ldi	r30, 0xE6	; 230
     8a4:	f2 e0       	ldi	r31, 0x02	; 2
     8a6:	80 81       	ld	r24, Z
     8a8:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     8aa:	81 81       	ldd	r24, Z+1	; 0x01
     8ac:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     8ae:	e8 ed       	ldi	r30, 0xD8	; 216
     8b0:	f2 e0       	ldi	r31, 0x02	; 2
     8b2:	80 81       	ld	r24, Z
     8b4:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     8b6:	81 81       	ldd	r24, Z+1	; 0x01
     8b8:	8e 83       	std	Y+6, r24	; 0x06
	
	CAN_transmit_message(&message);
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	0e 94 4b 03 	call	0x696	; 0x696 <CAN_transmit_message>
}
     8c2:	2b 96       	adiw	r28, 0x0b	; 11
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <CAN_init>:

void CAN_init() {
	CAN_controller_init();
     8d4:	0e 94 18 05 	call	0xa30	; 0xa30 <CAN_controller_init>

	flag=0;
     8d8:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <flag>
     8dc:	08 95       	ret

000008de <CAN_controller_read>:
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"


uint8_t CAN_controller_read(uint8_t addr) {
     8de:	cf 93       	push	r28
     8e0:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_READ);
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8f0:	8c 2f       	mov	r24, r28
     8f2:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8f6:	0e 94 94 0c 	call	0x1928	; 0x1928 <SPI_masterRead>
     8fa:	c8 2f       	mov	r28, r24
	
	SPI_setChipSelect(PB4, 1);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
	
	return data;
}
     904:	8c 2f       	mov	r24, r28
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	d8 2f       	mov	r29, r24
     910:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
	SPI_masterWrite(addr);
     920:	8d 2f       	mov	r24, r29
     922:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
	SPI_masterWrite(data);
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
	
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <CAN_controller_bitModify>:

void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	d8 2f       	mov	r29, r24
     942:	16 2f       	mov	r17, r22
     944:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     94e:	85 e0       	ldi	r24, 0x05	; 5
     950:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
		SPI_masterWrite(addr);
     954:	81 2f       	mov	r24, r17
     956:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
		SPI_masterWrite(mask);
     95a:	8d 2f       	mov	r24, r29
     95c:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
		SPI_masterWrite(data);
     960:	8c 2f       	mov	r24, r28
     962:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>

}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	08 95       	ret

00000976 <CAN_controller_reset>:

//Reset Can controller, necessary for config mode.
void CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	84 e0       	ldi	r24, 0x04	; 4
     97a:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
     97e:	80 ec       	ldi	r24, 0xC0	; 192
     980:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
     98c:	08 95       	ret

0000098e <CAN_controller_RTS>:
	//Check CANSTAT register
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);

}

void CAN_controller_RTS(uint8_t buffer) {
     98e:	cf 93       	push	r28
     990:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
	switch (buffer) {
     99a:	c1 30       	cpi	r28, 0x01	; 1
     99c:	41 f0       	breq	.+16     	; 0x9ae <CAN_controller_RTS+0x20>
     99e:	18 f0       	brcs	.+6      	; 0x9a6 <CAN_controller_RTS+0x18>
     9a0:	c2 30       	cpi	r28, 0x02	; 2
     9a2:	49 f0       	breq	.+18     	; 0x9b6 <CAN_controller_RTS+0x28>
     9a4:	0b c0       	rjmp	.+22     	; 0x9bc <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     9a6:	81 e8       	ldi	r24, 0x81	; 129
     9a8:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
			break;
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     9ae:	82 e8       	ldi	r24, 0x82	; 130
     9b0:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
			break;
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     9b6:	84 e8       	ldi	r24, 0x84	; 132
     9b8:	0e 94 90 0c 	call	0x1920	; 0x1920 <SPI_masterWrite>
			break;
		default: 
			break;			
	}
	SPI_setChipSelect(PB4, 1);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	84 e0       	ldi	r24, 0x04	; 4
     9c0:	0e 94 99 0c 	call	0x1932	; 0x1932 <SPI_setChipSelect>
}
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	1f 92       	push	r1
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	18 2f       	mov	r17, r24
	
	CAN_controller_reset();
     9d6:	0e 94 bb 04 	call	0x976	; 0x976 <CAN_controller_reset>
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9da:	8e e0       	ldi	r24, 0x0E	; 14
     9dc:	0e 94 6f 04 	call	0x8de	; 0x8de <CAN_controller_read>
     9e0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t mode_bits = (status & MODE_MASK);
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
	
	if (mode_bits != MODE_CONFIG) {
     9e4:	80 7e       	andi	r24, 0xE0	; 224
     9e6:	80 38       	cpi	r24, 0x80	; 128
     9e8:	f1 f4       	brne	.+60     	; 0xa26 <CAN_controller_setMode+0x5e>
		//printf("Not in config mode, \t %i\n\r", mode_bits);
		return;
	}
	
	//set mode
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9ea:	41 2f       	mov	r20, r17
     9ec:	4c 60       	ori	r20, 0x0C	; 12
     9ee:	6f e0       	ldi	r22, 0x0F	; 15
     9f0:	8e ee       	ldi	r24, 0xEE	; 238
     9f2:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
	
	//enable interrupts
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9f6:	41 e0       	ldi	r20, 0x01	; 1
     9f8:	6b e2       	ldi	r22, 0x2B	; 43
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
	
	//receive any type of message, no filter p. 27
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000);
     a00:	40 e6       	ldi	r20, 0x60	; 96
     a02:	60 e6       	ldi	r22, 0x60	; 96
     a04:	80 e6       	ldi	r24, 0x60	; 96
     a06:	0e 94 9d 04 	call	0x93a	; 0x93a <CAN_controller_bitModify>
     a0a:	2f ef       	ldi	r18, 0xFF	; 255
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	80 40       	sbci	r24, 0x00	; 0
     a14:	90 40       	sbci	r25, 0x00	; 0
     a16:	e1 f7       	brne	.-8      	; 0xa10 <CAN_controller_setMode+0x48>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <CAN_controller_setMode+0x52>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <CAN_controller_setMode+0x54>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a1c:	8e e0       	ldi	r24, 0x0E	; 14
     a1e:	0e 94 6f 04 	call	0x8de	; 0x8de <CAN_controller_read>
     a22:	89 83       	std	Y+1, r24	; 0x01
	mode_bits = (status & MODE_MASK);
     a24:	89 81       	ldd	r24, Y+1	; 0x01
	if (mode_bits != mode) {
			//printf("Not in correct mode: Mode: %i\n\r", mode_bits);
	}
	//printf("Mode set: %i\n\r", status & MODE_MASK);
}
     a26:	0f 90       	pop	r0
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	08 95       	ret

00000a30 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 0);
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	1f 92       	push	r1
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62

	SPI_masterInit();
     a3a:	0e 94 87 0c 	call	0x190e	; 0x190e <SPI_masterInit>

	CAN_controller_setMode(MODE_NORMAL);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a44:	8b b7       	in	r24, 0x3b	; 59
     a46:	80 64       	ori	r24, 0x40	; 64
     a48:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a4a:	85 b7       	in	r24, 0x35	; 53
     a4c:	82 60       	ori	r24, 0x02	; 2
     a4e:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a50:	85 b7       	in	r24, 0x35	; 53
     a52:	8e 7f       	andi	r24, 0xFE	; 254
     a54:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a56:	81 b3       	in	r24, 0x11	; 17
     a58:	84 70       	andi	r24, 0x04	; 4
     a5a:	81 bb       	out	0x11, r24	; 17
     a5c:	2f ef       	ldi	r18, 0xFF	; 255
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	21 50       	subi	r18, 0x01	; 1
     a64:	80 40       	sbci	r24, 0x00	; 0
     a66:	90 40       	sbci	r25, 0x00	; 0
     a68:	e1 f7       	brne	.-8      	; 0xa62 <CAN_controller_init+0x32>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <CAN_controller_init+0x3c>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <CAN_controller_init+0x3e>
	
	_delay_ms(200);
	//printf("after write to canctrl\n\r");
	
	//Check CANSTAT register
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a6e:	8e e0       	ldi	r24, 0x0E	; 14
     a70:	0e 94 6f 04 	call	0x8de	; 0x8de <CAN_controller_read>
     a74:	89 83       	std	Y+1, r24	; 0x01

}
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     a7e:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
     a82:	ec ed       	ldi	r30, 0xDC	; 220
     a84:	f2 e0       	ldi	r31, 0x02	; 2
     a86:	a8 ee       	ldi	r26, 0xE8	; 232
     a88:	b2 e0       	ldi	r27, 0x02	; 2
     a8a:	81 ee       	ldi	r24, 0xE1	; 225
     a8c:	92 e0       	ldi	r25, 0x02	; 2
     a8e:	11 92       	st	Z+, r1
     a90:	1d 92       	st	X+, r1
     a92:	e8 17       	cp	r30, r24
     a94:	f9 07       	cpc	r31, r25
     a96:	d9 f7       	brne	.-10     	; 0xa8e <game_init+0x10>
     a98:	08 95       	ret

00000a9a <game_countdown>:
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	1f 92       	push	r1
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	4a e0       	ldi	r20, 0x0A	; 10
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
     ab8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
     abc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
     ac0:	02 ee       	ldi	r16, 0xE2	; 226
     ac2:	12 e0       	ldi	r17, 0x02	; 2
     ac4:	f8 01       	movw	r30, r16
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	02 96       	adiw	r24, 0x02	; 2
     acc:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
     ad6:	ce 01       	movw	r24, r28
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     ade:	86 e0       	ldi	r24, 0x06	; 6
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 c1 08 	call	0x1182	; 0x1182 <music_playNote>
     ae6:	ff ef       	ldi	r31, 0xFF	; 255
     ae8:	2f e7       	ldi	r18, 0x7F	; 127
     aea:	87 e0       	ldi	r24, 0x07	; 7
     aec:	f1 50       	subi	r31, 0x01	; 1
     aee:	20 40       	sbci	r18, 0x00	; 0
     af0:	80 40       	sbci	r24, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <game_countdown+0x52>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <game_countdown+0x5c>
     af6:	00 00       	nop
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 c1 08 	call	0x1182	; 0x1182 <music_playNote>
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	ef e7       	ldi	r30, 0x7F	; 127
     b04:	f7 e0       	ldi	r31, 0x07	; 7
     b06:	91 50       	subi	r25, 0x01	; 1
     b08:	e0 40       	sbci	r30, 0x00	; 0
     b0a:	f0 40       	sbci	r31, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <game_countdown+0x6c>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <game_countdown+0x76>
     b10:	00 00       	nop
     b12:	4a e0       	ldi	r20, 0x0A	; 10
     b14:	be 01       	movw	r22, r28
     b16:	6f 5f       	subi	r22, 0xFF	; 255
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
     b22:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
     b26:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
     b2a:	f8 01       	movw	r30, r16
     b2c:	80 81       	ld	r24, Z
     b2e:	91 81       	ldd	r25, Z+1	; 0x01
     b30:	02 96       	adiw	r24, 0x02	; 2
     b32:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     b44:	86 e0       	ldi	r24, 0x06	; 6
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 c1 08 	call	0x1182	; 0x1182 <music_playNote>
     b4c:	ff ef       	ldi	r31, 0xFF	; 255
     b4e:	2f e7       	ldi	r18, 0x7F	; 127
     b50:	87 e0       	ldi	r24, 0x07	; 7
     b52:	f1 50       	subi	r31, 0x01	; 1
     b54:	20 40       	sbci	r18, 0x00	; 0
     b56:	80 40       	sbci	r24, 0x00	; 0
     b58:	e1 f7       	brne	.-8      	; 0xb52 <game_countdown+0xb8>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <game_countdown+0xc2>
     b5c:	00 00       	nop
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 c1 08 	call	0x1182	; 0x1182 <music_playNote>
     b66:	9f ef       	ldi	r25, 0xFF	; 255
     b68:	ef e7       	ldi	r30, 0x7F	; 127
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	91 50       	subi	r25, 0x01	; 1
     b6e:	e0 40       	sbci	r30, 0x00	; 0
     b70:	f0 40       	sbci	r31, 0x00	; 0
     b72:	e1 f7       	brne	.-8      	; 0xb6c <game_countdown+0xd2>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <game_countdown+0xdc>
     b76:	00 00       	nop
     b78:	4a e0       	ldi	r20, 0x0A	; 10
     b7a:	be 01       	movw	r22, r28
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
     b88:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
     b8c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
     b90:	f8 01       	movw	r30, r16
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	02 96       	adiw	r24, 0x02	; 2
     b98:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
     ba2:	ce 01       	movw	r24, r28
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 c1 08 	call	0x1182	; 0x1182 <music_playNote>
     bb2:	ff ef       	ldi	r31, 0xFF	; 255
     bb4:	2f e7       	ldi	r18, 0x7F	; 127
     bb6:	87 e0       	ldi	r24, 0x07	; 7
     bb8:	f1 50       	subi	r31, 0x01	; 1
     bba:	20 40       	sbci	r18, 0x00	; 0
     bbc:	80 40       	sbci	r24, 0x00	; 0
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <game_countdown+0x11e>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <game_countdown+0x128>
     bc2:	00 00       	nop
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 c1 08 	call	0x1182	; 0x1182 <music_playNote>
     bcc:	9f ef       	ldi	r25, 0xFF	; 255
     bce:	ef e7       	ldi	r30, 0x7F	; 127
     bd0:	f7 e0       	ldi	r31, 0x07	; 7
     bd2:	91 50       	subi	r25, 0x01	; 1
     bd4:	e0 40       	sbci	r30, 0x00	; 0
     bd6:	f0 40       	sbci	r31, 0x00	; 0
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <game_countdown+0x138>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <game_countdown+0x142>
     bdc:	00 00       	nop
     bde:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
     be2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
     be6:	f8 01       	movw	r30, r16
     be8:	80 81       	ld	r24, Z
     bea:	91 81       	ldd	r25, Z+1	; 0x01
     bec:	02 96       	adiw	r24, 0x02	; 2
     bee:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
     bf8:	83 ee       	ldi	r24, 0xE3	; 227
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     c00:	87 e1       	ldi	r24, 0x17	; 23
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	0e 94 c1 08 	call	0x1182	; 0x1182 <music_playNote>
     c08:	ff ef       	ldi	r31, 0xFF	; 255
     c0a:	2f e7       	ldi	r18, 0x7F	; 127
     c0c:	87 e0       	ldi	r24, 0x07	; 7
     c0e:	f1 50       	subi	r31, 0x01	; 1
     c10:	20 40       	sbci	r18, 0x00	; 0
     c12:	80 40       	sbci	r24, 0x00	; 0
     c14:	e1 f7       	brne	.-8      	; 0xc0e <game_countdown+0x174>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <game_countdown+0x17e>
     c18:	00 00       	nop
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 c1 08 	call	0x1182	; 0x1182 <music_playNote>
     c22:	9f ef       	ldi	r25, 0xFF	; 255
     c24:	ef e7       	ldi	r30, 0x7F	; 127
     c26:	f7 e0       	ldi	r31, 0x07	; 7
     c28:	91 50       	subi	r25, 0x01	; 1
     c2a:	e0 40       	sbci	r30, 0x00	; 0
     c2c:	f0 40       	sbci	r31, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <game_countdown+0x18e>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <game_countdown+0x198>
     c32:	00 00       	nop
     c34:	0f 90       	pop	r0
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	08 95       	ret

00000c40 <game_initialCANMessage>:
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	2b 97       	sbiw	r28, 0x0b	; 11
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9a 87       	std	Y+10, r25	; 0x0a
     c5a:	89 87       	std	Y+9, r24	; 0x09
     c5c:	1b 86       	std	Y+11, r1	; 0x0b
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 4b 03 	call	0x696	; 0x696 <CAN_transmit_message>
     c66:	2b 96       	adiw	r28, 0x0b	; 11
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <game_newgame>:
     c78:	f8 94       	cli
     c7a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <game_countdown>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <gameActive>
     c84:	ed ee       	ldi	r30, 0xED	; 237
     c86:	f2 e0       	ldi	r31, 0x02	; 2
     c88:	8a e0       	ldi	r24, 0x0A	; 10
     c8a:	80 83       	st	Z, r24
     c8c:	12 82       	std	Z+2, r1	; 0x02
     c8e:	83 e6       	ldi	r24, 0x63	; 99
     c90:	81 83       	std	Z+1, r24	; 0x01
     c92:	0e 94 20 06 	call	0xc40	; 0xc40 <game_initialCANMessage>
     c96:	78 94       	sei
     c98:	08 95       	ret

00000c9a <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     c9a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <flag>
     c9e:	88 23       	and	r24, r24
     ca0:	99 f0       	breq	.+38     	; 0xcc8 <game_recieveGameData+0x2e>
		//Handle the message
		cli();
     ca2:	f8 94       	cli
		//printf("Message received");
		flag=0;
     ca4:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <flag>
		CAN_receiveMessage(&received_message);
     ca8:	82 ef       	ldi	r24, 0xF2	; 242
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 03 04 	call	0x806	; 0x806 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     cb0:	0e 94 45 03 	call	0x68a	; 0x68a <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     cb4:	a2 ef       	ldi	r26, 0xF2	; 242
     cb6:	b2 e0       	ldi	r27, 0x02	; 2
     cb8:	8c 91       	ld	r24, X
     cba:	ed ee       	ldi	r30, 0xED	; 237
     cbc:	f2 e0       	ldi	r31, 0x02	; 2
     cbe:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     cc0:	11 96       	adiw	r26, 0x01	; 1
     cc2:	8c 91       	ld	r24, X
     cc4:	82 83       	std	Z+2, r24	; 0x02
		sei();
     cc6:	78 94       	sei
     cc8:	08 95       	ret

00000cca <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <game_updateOled+0xa>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <game_updateOled+0xc>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     cdc:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
	oled_home();
     ce0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     ce4:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <currentMenu>
     ce8:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <currentMenu+0x1>
     cec:	02 96       	adiw	r24, 0x02	; 2
     cee:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
	switch(gameID) {
     cf8:	11 30       	cpi	r17, 0x01	; 1
     cfa:	19 f0       	breq	.+6      	; 0xd02 <game_updateOled+0x38>
     cfc:	12 30       	cpi	r17, 0x02	; 2
     cfe:	49 f1       	breq	.+82     	; 0xd52 <game_updateOled+0x88>
     d00:	39 c0       	rjmp	.+114    	; 0xd74 <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     d02:	86 ee       	ldi	r24, 0xE6	; 230
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
			itoa(gameData.score,score_string,10);
     d0a:	0d ee       	ldi	r16, 0xED	; 237
     d0c:	12 e0       	ldi	r17, 0x02	; 2
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d0e:	f8 01       	movw	r30, r16
     d10:	80 81       	ld	r24, Z
     d12:	4a e0       	ldi	r20, 0x0A	; 10
     d14:	be 01       	movw	r22, r28
     d16:	6f 5f       	subi	r22, 0xFF	; 255
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
			oled_print(score_string);
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
			oled_gotoLine(5);
     d28:	85 e0       	ldi	r24, 0x05	; 5
     d2a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
			oled_print("Time: ");
     d2e:	8e ee       	ldi	r24, 0xEE	; 238
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     d36:	f8 01       	movw	r30, r16
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	4a e0       	ldi	r20, 0x0A	; 10
     d3c:	be 01       	movw	r22, r28
     d3e:	6d 5f       	subi	r22, 0xFD	; 253
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d48:	ce 01       	movw	r24, r28
     d4a:	03 96       	adiw	r24, 0x03	; 3
     d4c:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
			break;
     d50:	11 c0       	rjmp	.+34     	; 0xd74 <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d52:	85 ef       	ldi	r24, 0xF5	; 245
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     d5a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <gameData+0x2>
     d5e:	4a e0       	ldi	r20, 0x0A	; 10
     d60:	be 01       	movw	r22, r28
     d62:	6d 5f       	subi	r22, 0xFD	; 253
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d6c:	ce 01       	movw	r24, r28
     d6e:	03 96       	adiw	r24, 0x03	; 3
     d70:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
			break;

	}
	
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	08 95       	ret

00000d86 <game_sendStop>:

void game_sendStop() {
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	2b 97       	sbiw	r28, 0x0b	; 11
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	9a 87       	std	Y+10, r25	; 0x0a
     da0:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     da2:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     da4:	ce 01       	movw	r24, r28
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	0e 94 4b 03 	call	0x696	; 0x696 <CAN_transmit_message>
}
     dac:	2b 96       	adiw	r28, 0x0b	; 11
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <game_finished>:
void game_finished(uint8_t gameID) {
     dbe:	cf 93       	push	r28
     dc0:	c8 2f       	mov	r28, r24
	cli();
     dc2:	f8 94       	cli
	game_sendStop();
     dc4:	0e 94 c3 06 	call	0xd86	; 0xd86 <game_sendStop>
	oled_reset();
     dc8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
	oled_home();
     dcc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
	oled_gotoLine(3);
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
	oled_print("Game over");
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
	oled_gotoLine(4);
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
	oled_print("Maybe HS?");
     de4:	8a e0       	ldi	r24, 0x0A	; 10
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
	music_gameOver();
     dec:	0e 94 7f 08 	call	0x10fe	; 0x10fe <music_gameOver>
	
	gameActive=0;
     df0:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
	sei();
     df4:	78 94       	sei
	menu_init();
     df6:	0e 94 6d 0a 	call	0x14da	; 0x14da <menu_init>
	//menu_printCurrentMenu();
	switch (gameID) {
     dfa:	c1 30       	cpi	r28, 0x01	; 1
     dfc:	51 f0       	breq	.+20     	; 0xe12 <game_finished+0x54>
     dfe:	c2 30       	cpi	r28, 0x02	; 2
     e00:	09 f0       	breq	.+2      	; 0xe04 <game_finished+0x46>
     e02:	50 c0       	rjmp	.+160    	; 0xea4 <game_finished+0xe6>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e04:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <gameData+0x2>
     e08:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <highScores2>
     e0c:	83 17       	cp	r24, r19
     e0e:	48 f5       	brcc	.+82     	; 0xe62 <game_finished+0xa4>
     e10:	33 c0       	rjmp	.+102    	; 0xe78 <game_finished+0xba>
	menu_init();
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e12:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <gameData>
     e16:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <highScores>
     e1a:	83 17       	cp	r24, r19
     e1c:	58 f0       	brcs	.+22     	; 0xe34 <game_finished+0x76>
     e1e:	ed ed       	ldi	r30, 0xDD	; 221
     e20:	f2 e0       	ldi	r31, 0x02	; 2
	sei();
	menu_init();
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e26:	21 91       	ld	r18, Z+
     e28:	23 17       	cp	r18, r19
     e2a:	b0 f4       	brcc	.+44     	; 0xe58 <game_finished+0x9a>
					for (int a = 4; a>i; a--) {
     e2c:	84 30       	cpi	r24, 0x04	; 4
     e2e:	91 05       	cpc	r25, r1
     e30:	1c f0       	brlt	.+6      	; 0xe38 <game_finished+0x7a>
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <game_finished+0x90>
	menu_init();
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	e0 ee       	ldi	r30, 0xE0	; 224
     e3a:	f2 e0       	ldi	r31, 0x02	; 2
     e3c:	44 e0       	ldi	r20, 0x04	; 4
     e3e:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e40:	41 50       	subi	r20, 0x01	; 1
     e42:	51 09       	sbc	r21, r1
     e44:	22 91       	ld	r18, -Z
     e46:	21 83       	std	Z+1, r18	; 0x01
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e48:	84 17       	cp	r24, r20
     e4a:	95 07       	cpc	r25, r21
     e4c:	cc f3       	brlt	.-14     	; 0xe40 <game_finished+0x82>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e4e:	fc 01       	movw	r30, r24
     e50:	e4 52       	subi	r30, 0x24	; 36
     e52:	fd 4f       	sbci	r31, 0xFD	; 253
     e54:	30 83       	st	Z, r19
					break;
     e56:	26 c0       	rjmp	.+76     	; 0xea4 <game_finished+0xe6>
	sei();
	menu_init();
	//menu_printCurrentMenu();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	85 30       	cpi	r24, 0x05	; 5
     e5c:	91 05       	cpc	r25, r1
     e5e:	19 f7       	brne	.-58     	; 0xe26 <game_finished+0x68>
     e60:	21 c0       	rjmp	.+66     	; 0xea4 <game_finished+0xe6>
     e62:	e9 ee       	ldi	r30, 0xE9	; 233
     e64:	f2 e0       	ldi	r31, 0x02	; 2
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     e6a:	21 91       	ld	r18, Z+
     e6c:	23 17       	cp	r18, r19
     e6e:	b0 f4       	brcc	.+44     	; 0xe9c <game_finished+0xde>
					for (int a = 4; a>i; a--) {
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	91 05       	cpc	r25, r1
     e74:	1c f0       	brlt	.+6      	; 0xe7c <game_finished+0xbe>
     e76:	0d c0       	rjmp	.+26     	; 0xe92 <game_finished+0xd4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	ec ee       	ldi	r30, 0xEC	; 236
     e7e:	f2 e0       	ldi	r31, 0x02	; 2
     e80:	44 e0       	ldi	r20, 0x04	; 4
     e82:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     e84:	41 50       	subi	r20, 0x01	; 1
     e86:	51 09       	sbc	r21, r1
     e88:	22 91       	ld	r18, -Z
     e8a:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     e8c:	84 17       	cp	r24, r20
     e8e:	95 07       	cpc	r25, r21
     e90:	cc f3       	brlt	.-14     	; 0xe84 <game_finished+0xc6>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     e92:	fc 01       	movw	r30, r24
     e94:	e8 51       	subi	r30, 0x18	; 24
     e96:	fd 4f       	sbci	r31, 0xFD	; 253
     e98:	30 83       	st	Z, r19
					break;
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <game_finished+0xe6>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	85 30       	cpi	r24, 0x05	; 5
     ea0:	91 05       	cpc	r25, r1
     ea2:	19 f7       	brne	.-58     	; 0xe6a <game_finished+0xac>
		
	}
	
	
	
}
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <game_play>:
void game_play(uint8_t gameID)
{
     ea8:	cf 93       	push	r28
     eaa:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     eac:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <gameActive>
     eb0:	81 11       	cpse	r24, r1
     eb2:	0d c0       	rjmp	.+26     	; 0xece <game_play+0x26>
	{
		game_sendStop();
     eb4:	0e 94 c3 06 	call	0xd86	; 0xd86 <game_sendStop>
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	8f e7       	ldi	r24, 0x7F	; 127
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	80 40       	sbci	r24, 0x00	; 0
     ec2:	90 40       	sbci	r25, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <game_play+0x16>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <game_play+0x20>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <game_play+0x22>
		_delay_ms(100);
		game_newgame();	
     eca:	0e 94 3c 06 	call	0xc78	; 0xc78 <game_newgame>
	}
	if (buttons.right_button) {
     ece:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <buttons+0x1>
     ed2:	88 23       	and	r24, r24
     ed4:	21 f0       	breq	.+8      	; 0xede <game_play+0x36>
		gameActive = 0;
     ed6:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <gameActive>
		menu_init();
     eda:	0e 94 6d 0a 	call	0x14da	; 0x14da <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     ede:	0e 94 3b 04 	call	0x876	; 0x876 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     ee2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <game_recieveGameData>
	game_updateOled(gameID);
     ee6:	8c 2f       	mov	r24, r28
     ee8:	0e 94 65 06 	call	0xcca	; 0xcca <game_updateOled>
	switch (gameID) {
     eec:	c1 30       	cpi	r28, 0x01	; 1
     eee:	19 f0       	breq	.+6      	; 0xef6 <game_play+0x4e>
     ef0:	c2 30       	cpi	r28, 0x02	; 2
     ef2:	49 f0       	breq	.+18     	; 0xf06 <game_play+0x5e>
     ef4:	0f c0       	rjmp	.+30     	; 0xf14 <game_play+0x6c>
		case 1:
			if (gameData.playtime==10) {
     ef6:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <gameData+0x2>
     efa:	8a 30       	cpi	r24, 0x0A	; 10
     efc:	59 f4       	brne	.+22     	; 0xf14 <game_play+0x6c>
				game_finished(gameID);
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	0e 94 df 06 	call	0xdbe	; 0xdbe <game_finished>
     f04:	07 c0       	rjmp	.+14     	; 0xf14 <game_play+0x6c>
			}
			break;
		case 2:
			if (gameData.score <10) {
     f06:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <gameData>
     f0a:	8a 30       	cpi	r24, 0x0A	; 10
     f0c:	18 f4       	brcc	.+6      	; 0xf14 <game_play+0x6c>
				game_finished(gameID);
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 df 06 	call	0xdbe	; 0xdbe <game_finished>
			}
			break;
	}
	
	
}
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <game_displayHighscores+0x16>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	08 2f       	mov	r16, r24
	oled_reset();
     f34:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
	oled_home();
     f38:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f3c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <currentMenu>
     f40:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <currentMenu+0x1>
     f44:	02 96       	adiw	r24, 0x02	; 2
     f46:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     f4a:	0f 2e       	mov	r0, r31
     f4c:	fc ed       	ldi	r31, 0xDC	; 220
     f4e:	af 2e       	mov	r10, r31
     f50:	f2 e0       	ldi	r31, 0x02	; 2
     f52:	bf 2e       	mov	r11, r31
     f54:	f0 2d       	mov	r31, r0
     f56:	0f 2e       	mov	r0, r31
     f58:	f8 ee       	ldi	r31, 0xE8	; 232
     f5a:	cf 2e       	mov	r12, r31
     f5c:	f2 e0       	ldi	r31, 0x02	; 2
     f5e:	df 2e       	mov	r13, r31
     f60:	f0 2d       	mov	r31, r0
     f62:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f64:	e1 2c       	mov	r14, r1
     f66:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f68:	81 2f       	mov	r24, r17
     f6a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
		oled_print("Score ");
     f6e:	84 e1       	ldi	r24, 0x14	; 20
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
		char num[2];
		itoa(i+1,num,10);
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	e8 1a       	sub	r14, r24
     f7a:	f8 0a       	sbc	r15, r24
     f7c:	4a e0       	ldi	r20, 0x0A	; 10
     f7e:	be 01       	movw	r22, r28
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	c7 01       	movw	r24, r14
     f86:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
		oled_print(num);
     f8a:	ce 01       	movw	r24, r28
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
		oled_print(": ");
     f92:	82 ef       	ldi	r24, 0xF2	; 242
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
		switch (gameID) {
     f9a:	01 30       	cpi	r16, 0x01	; 1
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <game_displayHighscores+0x8c>
     f9e:	02 30       	cpi	r16, 0x02	; 2
     fa0:	59 f0       	breq	.+22     	; 0xfb8 <game_displayHighscores+0xa0>
     fa2:	13 c0       	rjmp	.+38     	; 0xfca <game_displayHighscores+0xb2>
     fa4:	f5 01       	movw	r30, r10
     fa6:	80 81       	ld	r24, Z
     fa8:	4a e0       	ldi	r20, 0x0A	; 10
     faa:	be 01       	movw	r22, r28
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <game_displayHighscores+0xb2>
     fb8:	f6 01       	movw	r30, r12
     fba:	80 81       	ld	r24, Z
     fbc:	4a e0       	ldi	r20, 0x0A	; 10
     fbe:	be 01       	movw	r22, r28
     fc0:	6f 5f       	subi	r22, 0xFF	; 255
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 19 10 	call	0x2032	; 0x2032 <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
     fd2:	1f 5f       	subi	r17, 0xFF	; 255
     fd4:	ff ef       	ldi	r31, 0xFF	; 255
     fd6:	af 1a       	sub	r10, r31
     fd8:	bf 0a       	sbc	r11, r31
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	c8 1a       	sub	r12, r24
     fde:	d8 0a       	sbc	r13, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
     fe0:	18 30       	cpi	r17, 0x08	; 8
     fe2:	11 f6       	brne	.-124    	; 0xf68 <game_displayHighscores+0x50>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	08 95       	ret

00000ffe <music_playRick>:
	 30, 10, 20, 20,
	 20,40, 80, 40
};


void music_playRick() {
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
	cli();
    1016:	f8 94       	cli
	oled_home();
    1018:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
	oled_reset();
    101c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
    1020:	0d ee       	ldi	r16, 0xED	; 237
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	0f 2e       	mov	r0, r31
    1026:	fe e9       	ldi	r31, 0x9E	; 158
    1028:	ef 2e       	mov	r14, r31
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	ff 2e       	mov	r15, r31
    102e:	f0 2d       	mov	r31, r0
    1030:	c6 e0       	ldi	r28, 0x06	; 6
    1032:	d1 e0       	ldi	r29, 0x01	; 1
    1034:	0f 2e       	mov	r0, r31
    1036:	f9 e2       	ldi	r31, 0x29	; 41
    1038:	cf 2e       	mov	r12, r31
    103a:	f2 e0       	ldi	r31, 0x02	; 2
    103c:	df 2e       	mov	r13, r31
    103e:	f0 2d       	mov	r31, r0
    1040:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1042:	0f 2e       	mov	r0, r31
    1044:	f4 e1       	ldi	r31, 0x14	; 20
    1046:	af 2e       	mov	r10, r31
    1048:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    104a:	b1 10       	cpse	r11, r1
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <music_playRick+0x54>
			oled_reset();
    104e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
    1052:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1054:	e8 81       	ld	r30, Y
    1056:	f9 81       	ldd	r31, Y+1	; 0x01
    1058:	80 81       	ld	r24, Z
    105a:	88 23       	and	r24, r24
    105c:	41 f0       	breq	.+16     	; 0x106e <music_playRick+0x70>
			oled_gotoLine(line);
    105e:	8b 2d       	mov	r24, r11
    1060:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
			line++;
    1064:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    1066:	88 81       	ld	r24, Y
    1068:	99 81       	ldd	r25, Y+1	; 0x01
    106a:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    106e:	d4 01       	movw	r26, r8
    1070:	ed 91       	ld	r30, X+
    1072:	fc 91       	ld	r31, X
    1074:	22 96       	adiw	r28, 0x02	; 2
    1076:	01 90       	ld	r0, Z+
    1078:	00 20       	and	r0, r0
    107a:	e9 f7       	brne	.-6      	; 0x1076 <music_playRick+0x78>
    107c:	32 97       	sbiw	r30, 0x02	; 2
    107e:	80 81       	ld	r24, Z
    1080:	8e 32       	cpi	r24, 0x2E	; 46
    1082:	09 f4       	brne	.+2      	; 0x1086 <music_playRick+0x88>
			
			line = 0;
    1084:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    1086:	f8 01       	movw	r30, r16
    1088:	65 91       	lpm	r22, Z+
    108a:	74 91       	lpm	r23, Z
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 d6 08 	call	0x11ac	; 0x11ac <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1094:	f7 01       	movw	r30, r14
    1096:	84 91       	lpm	r24, Z
    1098:	a8 9e       	mul	r10, r24
    109a:	c0 01       	movw	r24, r0
    109c:	11 24       	eor	r1, r1
    109e:	09 2e       	mov	r0, r25
    10a0:	00 0c       	add	r0, r0
    10a2:	aa 0b       	sbc	r26, r26
    10a4:	bb 0b       	sbc	r27, r27
		while (duration--) {
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	a1 05       	cpc	r26, r1
    10aa:	b1 05       	cpc	r27, r1
    10ac:	51 f0       	breq	.+20     	; 0x10c2 <music_playRick+0xc4>
    10ae:	ec ec       	ldi	r30, 0xCC	; 204
    10b0:	f4 e0       	ldi	r31, 0x04	; 4
    10b2:	31 97       	sbiw	r30, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <music_playRick+0xb4>
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <music_playRick+0xba>
    10b8:	00 00       	nop
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	a1 09       	sbc	r26, r1
    10be:	b1 09       	sbc	r27, r1
    10c0:	b1 f7       	brne	.-20     	; 0x10ae <music_playRick+0xb0>
    10c2:	0c 5f       	subi	r16, 0xFC	; 252
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	ff ef       	ldi	r31, 0xFF	; 255
    10c8:	ef 1a       	sub	r14, r31
    10ca:	ff 0a       	sbc	r15, r31
void music_playRick() {
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    10cc:	0c 15       	cp	r16, r12
    10ce:	1d 05       	cpc	r17, r13
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <music_playRick+0xd6>
    10d2:	bb cf       	rjmp	.-138    	; 0x104a <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	cb 01       	movw	r24, r22
    10da:	0e 94 d6 08 	call	0x11ac	; 0x11ac <pwm_setFreq>
	menu_init();
    10de:	0e 94 6d 0a 	call	0x14da	; 0x14da <menu_init>

	sei();
    10e2:	78 94       	sei
	

}
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	af 90       	pop	r10
    10f8:	9f 90       	pop	r9
    10fa:	8f 90       	pop	r8
    10fc:	08 95       	ret

000010fe <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    10fe:	6b e0       	ldi	r22, 0x0B	; 11
    1100:	72 e0       	ldi	r23, 0x02	; 2
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 d6 08 	call	0x11ac	; 0x11ac <pwm_setFreq>
    110a:	2f ef       	ldi	r18, 0xFF	; 255
    110c:	8f e7       	ldi	r24, 0x7F	; 127
    110e:	97 e0       	ldi	r25, 0x07	; 7
    1110:	21 50       	subi	r18, 0x01	; 1
    1112:	80 40       	sbci	r24, 0x00	; 0
    1114:	90 40       	sbci	r25, 0x00	; 0
    1116:	e1 f7       	brne	.-8      	; 0x1110 <music_gameOver+0x12>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <music_gameOver+0x1c>
    111a:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    111c:	68 e8       	ldi	r22, 0x88	; 136
    111e:	71 e0       	ldi	r23, 0x01	; 1
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 d6 08 	call	0x11ac	; 0x11ac <pwm_setFreq>
    1128:	2f ef       	ldi	r18, 0xFF	; 255
    112a:	8f e7       	ldi	r24, 0x7F	; 127
    112c:	97 e0       	ldi	r25, 0x07	; 7
    112e:	21 50       	subi	r18, 0x01	; 1
    1130:	80 40       	sbci	r24, 0x00	; 0
    1132:	90 40       	sbci	r25, 0x00	; 0
    1134:	e1 f7       	brne	.-8      	; 0x112e <music_gameOver+0x30>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <music_gameOver+0x3a>
    1138:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    113a:	67 e3       	ldi	r22, 0x37	; 55
    113c:	71 e0       	ldi	r23, 0x01	; 1
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 d6 08 	call	0x11ac	; 0x11ac <pwm_setFreq>
    1146:	2f ef       	ldi	r18, 0xFF	; 255
    1148:	8f e7       	ldi	r24, 0x7F	; 127
    114a:	97 e0       	ldi	r25, 0x07	; 7
    114c:	21 50       	subi	r18, 0x01	; 1
    114e:	80 40       	sbci	r24, 0x00	; 0
    1150:	90 40       	sbci	r25, 0x00	; 0
    1152:	e1 f7       	brne	.-8      	; 0x114c <music_gameOver+0x4e>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <music_gameOver+0x58>
    1156:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    1158:	66 e0       	ldi	r22, 0x06	; 6
    115a:	71 e0       	ldi	r23, 0x01	; 1
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 d6 08 	call	0x11ac	; 0x11ac <pwm_setFreq>
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	8f e7       	ldi	r24, 0x7F	; 127
    1168:	97 e0       	ldi	r25, 0x07	; 7
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	80 40       	sbci	r24, 0x00	; 0
    116e:	90 40       	sbci	r25, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <music_gameOver+0x6c>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <music_gameOver+0x76>
    1174:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	cb 01       	movw	r24, r22
    117c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <pwm_setFreq>
    1180:	08 95       	ret

00001182 <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    1182:	bc 01       	movw	r22, r24
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 d6 08 	call	0x11ac	; 0x11ac <pwm_setFreq>
    118c:	08 95       	ret

0000118e <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    118e:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    1194:	80 e8       	ldi	r24, 0x80	; 128
    1196:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    1198:	83 b7       	in	r24, 0x33	; 51
    119a:	88 60       	ori	r24, 0x08	; 8
    119c:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    119e:	83 b7       	in	r24, 0x33	; 51
    11a0:	80 61       	ori	r24, 0x10	; 16
    11a2:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    11a4:	83 b7       	in	r24, 0x33	; 51
    11a6:	88 7f       	andi	r24, 0xF8	; 248
    11a8:	83 bf       	out	0x33, r24	; 51
    11aa:	08 95       	ret

000011ac <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    if (freq == 0) {
    11b0:	67 2b       	or	r22, r23
    11b2:	68 2b       	or	r22, r24
    11b4:	69 2b       	or	r22, r25
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11b8:	83 b7       	in	r24, 0x33	; 51
    11ba:	88 7f       	andi	r24, 0xF8	; 248
    11bc:	83 bf       	out	0x33, r24	; 51
        return;
    11be:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	70 e8       	ldi	r23, 0x80	; 128
    11c4:	85 e2       	ldi	r24, 0x25	; 37
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
    11cc:	da 01       	movw	r26, r20
    11ce:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    11d0:	21 30       	cpi	r18, 0x01	; 1
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	36 07       	cpc	r19, r22
    11d6:	41 05       	cpc	r20, r1
    11d8:	51 05       	cpc	r21, r1
    11da:	a8 f1       	brcs	.+106    	; 0x1246 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    11dc:	68 94       	set
    11de:	12 f8       	bld	r1, 2
    11e0:	b6 95       	lsr	r27
    11e2:	a7 95       	ror	r26
    11e4:	97 95       	ror	r25
    11e6:	87 95       	ror	r24
    11e8:	16 94       	lsr	r1
    11ea:	d1 f7       	brne	.-12     	; 0x11e0 <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	96 07       	cpc	r25, r22
    11f2:	a1 05       	cpc	r26, r1
    11f4:	b1 05       	cpc	r27, r1
    11f6:	48 f1       	brcs	.+82     	; 0x124a <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    11f8:	da 01       	movw	r26, r20
    11fa:	c9 01       	movw	r24, r18
    11fc:	68 94       	set
    11fe:	15 f8       	bld	r1, 5
    1200:	b6 95       	lsr	r27
    1202:	a7 95       	ror	r26
    1204:	97 95       	ror	r25
    1206:	87 95       	ror	r24
    1208:	16 94       	lsr	r1
    120a:	d1 f7       	brne	.-12     	; 0x1200 <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	96 07       	cpc	r25, r22
    1212:	a1 05       	cpc	r26, r1
    1214:	b1 05       	cpc	r27, r1
    1216:	d8 f0       	brcs	.+54     	; 0x124e <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    1218:	bb 27       	eor	r27, r27
    121a:	a5 2f       	mov	r26, r21
    121c:	94 2f       	mov	r25, r20
    121e:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	96 07       	cpc	r25, r22
    1226:	a1 05       	cpc	r26, r1
    1228:	b1 05       	cpc	r27, r1
    122a:	98 f0       	brcs	.+38     	; 0x1252 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    122c:	da 01       	movw	r26, r20
    122e:	c9 01       	movw	r24, r18
    1230:	07 2e       	mov	r0, r23
    1232:	7a e0       	ldi	r23, 0x0A	; 10
    1234:	b6 95       	lsr	r27
    1236:	a7 95       	ror	r26
    1238:	97 95       	ror	r25
    123a:	87 95       	ror	r24
    123c:	7a 95       	dec	r23
    123e:	d1 f7       	brne	.-12     	; 0x1234 <pwm_setFreq+0x88>
    1240:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    1242:	35 e0       	ldi	r19, 0x05	; 5
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    1246:	31 e0       	ldi	r19, 0x01	; 1
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    124a:	32 e0       	ldi	r19, 0x02	; 2
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    124e:	33 e0       	ldi	r19, 0x03	; 3
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    1252:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1254:	23 b7       	in	r18, 0x33	; 51
    1256:	28 7f       	andi	r18, 0xF8	; 248
    1258:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    125a:	23 b7       	in	r18, 0x33	; 51
    125c:	23 2b       	or	r18, r19
    125e:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    1260:	81 50       	subi	r24, 0x01	; 1
    1262:	81 bf       	out	0x31, r24	; 49
    1264:	08 95       	ret

00001266 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    1266:	85 b7       	in	r24, 0x35	; 53
    1268:	8f 7e       	andi	r24, 0xEF	; 239
    126a:	85 bf       	out	0x35, r24	; 53
    126c:	84 b7       	in	r24, 0x34	; 52
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	84 bf       	out	0x34, r24	; 52
    1272:	86 b7       	in	r24, 0x36	; 54
    1274:	8f 77       	andi	r24, 0x7F	; 127
    1276:	86 bf       	out	0x36, r24	; 54
    1278:	08 95       	ret

0000127a <sleep_now>:

void sleep_now() {
	
	
	// Put the device to sleep:
	sleep_mode();
    127a:	85 b7       	in	r24, 0x35	; 53
    127c:	80 62       	ori	r24, 0x20	; 32
    127e:	85 bf       	out	0x35, r24	; 53
    1280:	88 95       	sleep
    1282:	85 b7       	in	r24, 0x35	; 53
    1284:	8f 7d       	andi	r24, 0xDF	; 223
    1286:	85 bf       	out	0x35, r24	; 53
    1288:	08 95       	ret

0000128a <joystick_init>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystick_init() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1290:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    129a:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <joystickOffsetY>
    129e:	08 95       	ret

000012a0 <joystick_readPosition>:
}
void joystick_readPosition() {
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12b2:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12ba:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    12bc:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <joystickOffsetX>
    12c0:	c6 17       	cp	r28, r22
    12c2:	80 f4       	brcc	.+32     	; 0x12e4 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	2c 2f       	mov	r18, r28
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	26 1b       	sub	r18, r22
    12cc:	37 0b       	sbc	r19, r23
    12ce:	44 e6       	ldi	r20, 0x64	; 100
    12d0:	42 9f       	mul	r20, r18
    12d2:	c0 01       	movw	r24, r0
    12d4:	43 9f       	mul	r20, r19
    12d6:	90 0d       	add	r25, r0
    12d8:	11 24       	eor	r1, r1
    12da:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__divmodhi4>
    12de:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <joystick_pos>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    12e4:	46 2f       	mov	r20, r22
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	2c 2f       	mov	r18, r28
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	24 1b       	sub	r18, r20
    12ee:	35 0b       	sbc	r19, r21
    12f0:	64 e6       	ldi	r22, 0x64	; 100
    12f2:	62 9f       	mul	r22, r18
    12f4:	c0 01       	movw	r24, r0
    12f6:	63 9f       	mul	r22, r19
    12f8:	90 0d       	add	r25, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	6f ef       	ldi	r22, 0xFF	; 255
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	64 1b       	sub	r22, r20
    1302:	75 0b       	sbc	r23, r21
    1304:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__divmodhi4>
    1308:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    130c:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <joystickOffsetY>
    1310:	e2 17       	cp	r30, r18
    1312:	88 f4       	brcc	.+34     	; 0x1336 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1314:	62 2f       	mov	r22, r18
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	4e 2f       	mov	r20, r30
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	46 1b       	sub	r20, r22
    131e:	57 0b       	sbc	r21, r23
    1320:	24 e6       	ldi	r18, 0x64	; 100
    1322:	24 9f       	mul	r18, r20
    1324:	c0 01       	movw	r24, r0
    1326:	25 9f       	mul	r18, r21
    1328:	90 0d       	add	r25, r0
    132a:	11 24       	eor	r1, r1
    132c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__divmodhi4>
    1330:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <joystick_pos+0x1>
    1334:	13 c0       	rjmp	.+38     	; 0x135c <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4e 2f       	mov	r20, r30
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	42 1b       	sub	r20, r18
    133e:	53 0b       	sbc	r21, r19
    1340:	64 e6       	ldi	r22, 0x64	; 100
    1342:	64 9f       	mul	r22, r20
    1344:	c0 01       	movw	r24, r0
    1346:	65 9f       	mul	r22, r21
    1348:	90 0d       	add	r25, r0
    134a:	11 24       	eor	r1, r1
    134c:	6f ef       	ldi	r22, 0xFF	; 255
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	62 1b       	sub	r22, r18
    1352:	73 0b       	sbc	r23, r19
    1354:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__divmodhi4>
    1358:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    135c:	c8 ed       	ldi	r28, 0xD8	; 216
    135e:	d2 e0       	ldi	r29, 0x02	; 2
    1360:	68 81       	ld	r22, Y
    1362:	06 2e       	mov	r0, r22
    1364:	00 0c       	add	r0, r0
    1366:	77 0b       	sbc	r23, r23
    1368:	88 0b       	sbc	r24, r24
    136a:	99 0b       	sbc	r25, r25
    136c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__floatsisf>
    1370:	6b 01       	movw	r12, r22
    1372:	7c 01       	movw	r14, r24
    1374:	69 81       	ldd	r22, Y+1	; 0x01
    1376:	06 2e       	mov	r0, r22
    1378:	00 0c       	add	r0, r0
    137a:	77 0b       	sbc	r23, r23
    137c:	88 0b       	sbc	r24, r24
    137e:	99 0b       	sbc	r25, r25
    1380:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__floatsisf>
    1384:	a7 01       	movw	r20, r14
    1386:	96 01       	movw	r18, r12
    1388:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <atan2>
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	44 eb       	ldi	r20, 0xB4	; 180
    1392:	53 e4       	ldi	r21, 0x43	; 67
    1394:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__mulsf3>
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	5f e3       	ldi	r21, 0x3F	; 63
    13a0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__mulsf3>
    13a4:	23 ec       	ldi	r18, 0xC3	; 195
    13a6:	35 ef       	ldi	r19, 0xF5	; 245
    13a8:	48 e4       	ldi	r20, 0x48	; 72
    13aa:	50 e4       	ldi	r21, 0x40	; 64
    13ac:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__divsf3>
    13b0:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fixsfsi>
    13b4:	7b 83       	std	Y+3, r23	; 0x03
    13b6:	6a 83       	std	Y+2, r22	; 0x02
}
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	08 95       	ret

000013c6 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    13c6:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    13c8:	80 81       	ld	r24, Z
    13ca:	94 e0       	ldi	r25, 0x04	; 4
    13cc:	98 0f       	add	r25, r24
    13ce:	99 30       	cpi	r25, 0x09	; 9
    13d0:	20 f4       	brcc	.+8      	; 0x13da <joystick_getDirection+0x14>
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	9c 5f       	subi	r25, 0xFC	; 252
    13d6:	99 30       	cpi	r25, 0x09	; 9
    13d8:	90 f0       	brcs	.+36     	; 0x13fe <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    13da:	85 30       	cpi	r24, 0x05	; 5
    13dc:	2c f0       	brlt	.+10     	; 0x13e8 <joystick_getDirection+0x22>
    13de:	81 81       	ldd	r24, Z+1	; 0x01
    13e0:	8f 5c       	subi	r24, 0xCF	; 207
    13e2:	83 36       	cpi	r24, 0x63	; 99
    13e4:	38 f4       	brcc	.+14     	; 0x13f4 <joystick_getDirection+0x2e>
    13e6:	0d c0       	rjmp	.+26     	; 0x1402 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    13e8:	8c 3f       	cpi	r24, 0xFC	; 252
    13ea:	24 f4       	brge	.+8      	; 0x13f4 <joystick_getDirection+0x2e>
    13ec:	81 81       	ldd	r24, Z+1	; 0x01
    13ee:	8f 5c       	subi	r24, 0xCF	; 207
    13f0:	83 36       	cpi	r24, 0x63	; 99
    13f2:	48 f0       	brcs	.+18     	; 0x1406 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    13f4:	81 81       	ldd	r24, Z+1	; 0x01
    13f6:	8c 3f       	cpi	r24, 0xFC	; 252
    13f8:	44 f0       	brlt	.+16     	; 0x140a <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    13fe:	84 e0       	ldi	r24, 0x04	; 4
    1400:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    140a:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    140c:	08 95       	ret

0000140e <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    140e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    1412:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <currentMenu+0x3>
    1416:	94 30       	cpi	r25, 0x04	; 4
    1418:	09 f0       	breq	.+2      	; 0x141c <navigateMenu+0xe>
    141a:	5c c0       	rjmp	.+184    	; 0x14d4 <navigateMenu+0xc6>
			switch (dir) {
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	e1 f1       	breq	.+120    	; 0x1498 <navigateMenu+0x8a>
    1420:	60 f1       	brcs	.+88     	; 0x147a <navigateMenu+0x6c>
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	c9 f0       	breq	.+50     	; 0x1458 <navigateMenu+0x4a>
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	09 f0       	breq	.+2      	; 0x142c <navigateMenu+0x1e>
    142a:	54 c0       	rjmp	.+168    	; 0x14d4 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    142c:	e2 ee       	ldi	r30, 0xE2	; 226
    142e:	f2 e0       	ldi	r31, 0x02	; 2
    1430:	92 81       	ldd	r25, Z+2	; 0x02
    1432:	49 2f       	mov	r20, r25
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	01 90       	ld	r0, Z+
    1438:	f0 81       	ld	r31, Z
    143a:	e0 2d       	mov	r30, r0
    143c:	20 a1       	ldd	r18, Z+32	; 0x20
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	21 50       	subi	r18, 0x01	; 1
    1442:	31 09       	sbc	r19, r1
    1444:	42 17       	cp	r20, r18
    1446:	53 07       	cpc	r21, r19
    1448:	24 f4       	brge	.+8      	; 0x1452 <navigateMenu+0x44>
					currentMenu.childIndex++;
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <currentMenu+0x2>
    1450:	41 c0       	rjmp	.+130    	; 0x14d4 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1452:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <currentMenu+0x2>
    1456:	3e c0       	rjmp	.+124    	; 0x14d4 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    1458:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <currentMenu+0x2>
    145c:	99 23       	and	r25, r25
    145e:	21 f0       	breq	.+8      	; 0x1468 <navigateMenu+0x5a>
					currentMenu.childIndex--;
    1460:	91 50       	subi	r25, 0x01	; 1
    1462:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <currentMenu+0x2>
    1466:	36 c0       	rjmp	.+108    	; 0x14d4 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    1468:	e2 ee       	ldi	r30, 0xE2	; 226
    146a:	f2 e0       	ldi	r31, 0x02	; 2
    146c:	a0 81       	ld	r26, Z
    146e:	b1 81       	ldd	r27, Z+1	; 0x01
    1470:	90 96       	adiw	r26, 0x20	; 32
    1472:	9c 91       	ld	r25, X
    1474:	91 50       	subi	r25, 0x01	; 1
    1476:	92 83       	std	Z+2, r25	; 0x02
    1478:	2d c0       	rjmp	.+90     	; 0x14d4 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    147a:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <currentMenu>
    147e:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <currentMenu+0x1>
    1482:	22 89       	ldd	r18, Z+18	; 0x12
    1484:	33 89       	ldd	r19, Z+19	; 0x13
    1486:	21 15       	cp	r18, r1
    1488:	31 05       	cpc	r19, r1
    148a:	21 f1       	breq	.+72     	; 0x14d4 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    148c:	e2 ee       	ldi	r30, 0xE2	; 226
    148e:	f2 e0       	ldi	r31, 0x02	; 2
    1490:	31 83       	std	Z+1, r19	; 0x01
    1492:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    1494:	12 82       	std	Z+2, r1	; 0x02
    1496:	1e c0       	rjmp	.+60     	; 0x14d4 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    1498:	a2 ee       	ldi	r26, 0xE2	; 226
    149a:	b2 e0       	ldi	r27, 0x02	; 2
    149c:	2d 91       	ld	r18, X+
    149e:	3c 91       	ld	r19, X
    14a0:	11 97       	sbiw	r26, 0x01	; 1
    14a2:	12 96       	adiw	r26, 0x02	; 2
    14a4:	9c 91       	ld	r25, X
    14a6:	e9 2f       	mov	r30, r25
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	3a 96       	adiw	r30, 0x0a	; 10
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	e2 0f       	add	r30, r18
    14b2:	f3 1f       	adc	r31, r19
    14b4:	01 90       	ld	r0, Z+
    14b6:	f0 81       	ld	r31, Z
    14b8:	e0 2d       	mov	r30, r0
    14ba:	90 a1       	ldd	r25, Z+32	; 0x20
    14bc:	91 11       	cpse	r25, r1
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <navigateMenu+0xb8>
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	99 23       	and	r25, r25
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    14c6:	a2 ee       	ldi	r26, 0xE2	; 226
    14c8:	b2 e0       	ldi	r27, 0x02	; 2
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	fc 93       	st	X, r31
    14ce:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    14d0:	12 96       	adiw	r26, 0x02	; 2
    14d2:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    14d4:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <currentMenu+0x3>
    14d8:	08 95       	ret

000014da <menu_init>:
#include <string.h>


MenuNode nodes[8];

void menu_init() {
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    14e2:	8a e0       	ldi	r24, 0x0A	; 10
    14e4:	ec e8       	ldi	r30, 0x8C	; 140
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
    14e8:	a1 e0       	ldi	r26, 0x01	; 1
    14ea:	b3 e0       	ldi	r27, 0x03	; 3
    14ec:	01 90       	ld	r0, Z+
    14ee:	0d 92       	st	X+, r0
    14f0:	8a 95       	dec	r24
    14f2:	e1 f7       	brne	.-8      	; 0x14ec <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    14f4:	8a e0       	ldi	r24, 0x0A	; 10
    14f6:	e6 e9       	ldi	r30, 0x96	; 150
    14f8:	f2 e0       	ldi	r31, 0x02	; 2
    14fa:	a2 e2       	ldi	r26, 0x22	; 34
    14fc:	b3 e0       	ldi	r27, 0x03	; 3
    14fe:	01 90       	ld	r0, Z+
    1500:	0d 92       	st	X+, r0
    1502:	8a 95       	dec	r24
    1504:	e1 f7       	brne	.-8      	; 0x14fe <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    1506:	8c e0       	ldi	r24, 0x0C	; 12
    1508:	e0 ea       	ldi	r30, 0xA0	; 160
    150a:	f2 e0       	ldi	r31, 0x02	; 2
    150c:	a3 e4       	ldi	r26, 0x43	; 67
    150e:	b3 e0       	ldi	r27, 0x03	; 3
    1510:	01 90       	ld	r0, Z+
    1512:	0d 92       	st	X+, r0
    1514:	8a 95       	dec	r24
    1516:	e1 f7       	brne	.-8      	; 0x1510 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    1518:	86 e0       	ldi	r24, 0x06	; 6
    151a:	ec ea       	ldi	r30, 0xAC	; 172
    151c:	f2 e0       	ldi	r31, 0x02	; 2
    151e:	a4 e6       	ldi	r26, 0x64	; 100
    1520:	b3 e0       	ldi	r27, 0x03	; 3
    1522:	01 90       	ld	r0, Z+
    1524:	0d 92       	st	X+, r0
    1526:	8a 95       	dec	r24
    1528:	e1 f7       	brne	.-8      	; 0x1522 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    152a:	87 e0       	ldi	r24, 0x07	; 7
    152c:	e2 eb       	ldi	r30, 0xB2	; 178
    152e:	f2 e0       	ldi	r31, 0x02	; 2
    1530:	a5 e8       	ldi	r26, 0x85	; 133
    1532:	b3 e0       	ldi	r27, 0x03	; 3
    1534:	01 90       	ld	r0, Z+
    1536:	0d 92       	st	X+, r0
    1538:	8a 95       	dec	r24
    153a:	e1 f7       	brne	.-8      	; 0x1534 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    153c:	87 e0       	ldi	r24, 0x07	; 7
    153e:	e9 eb       	ldi	r30, 0xB9	; 185
    1540:	f2 e0       	ldi	r31, 0x02	; 2
    1542:	a6 ea       	ldi	r26, 0xA6	; 166
    1544:	b3 e0       	ldi	r27, 0x03	; 3
    1546:	01 90       	ld	r0, Z+
    1548:	0d 92       	st	X+, r0
    154a:	8a 95       	dec	r24
    154c:	e1 f7       	brne	.-8      	; 0x1546 <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    154e:	8a e0       	ldi	r24, 0x0A	; 10
    1550:	e0 ec       	ldi	r30, 0xC0	; 192
    1552:	f2 e0       	ldi	r31, 0x02	; 2
    1554:	a7 ec       	ldi	r26, 0xC7	; 199
    1556:	b3 e0       	ldi	r27, 0x03	; 3
    1558:	01 90       	ld	r0, Z+
    155a:	0d 92       	st	X+, r0
    155c:	8a 95       	dec	r24
    155e:	e1 f7       	brne	.-8      	; 0x1558 <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    1560:	8a e0       	ldi	r24, 0x0A	; 10
    1562:	ea ec       	ldi	r30, 0xCA	; 202
    1564:	f2 e0       	ldi	r31, 0x02	; 2
    1566:	a8 ee       	ldi	r26, 0xE8	; 232
    1568:	b3 e0       	ldi	r27, 0x03	; 3
    156a:	01 90       	ld	r0, Z+
    156c:	0d 92       	st	X+, r0
    156e:	8a 95       	dec	r24
    1570:	e1 f7       	brne	.-8      	; 0x156a <menu_init+0x90>
    1572:	6f ef       	ldi	r22, 0xFF	; 255
    1574:	72 e0       	ldi	r23, 0x02	; 2
    1576:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    157c:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    157e:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	14 f0       	brlt	.+4      	; 0x158a <menu_init+0xb0>
			nodes[i].isAction=1;
    1586:	21 83       	std	Z+1, r18	; 0x01
    1588:	01 c0       	rjmp	.+2      	; 0x158c <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    158a:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	b1 96       	adiw	r30, 0x21	; 33
    1590:	88 30       	cpi	r24, 0x08	; 8
    1592:	91 05       	cpc	r25, r1
    1594:	a1 f7       	brne	.-24     	; 0x157e <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    1596:	ef ef       	ldi	r30, 0xFF	; 255
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <nodes+0x41>
	nodes[2].numChildren = 2;
    15a4:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <nodes+0x62>
	nodes[3].numChildren = 0;
    15a8:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <nodes+0x83>
	nodes[4].numChildren = 0;
    15ac:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <nodes+0xa4>
	nodes[5].numChildren = 0;
    15b0:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15b4:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15b8:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    15bc:	13 8a       	std	Z+19, r1	; 0x13
    15be:	12 8a       	std	Z+18, r1	; 0x12
    15c0:	07 e0       	ldi	r16, 0x07	; 7
    15c2:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    15c4:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    15c6:	51 e2       	ldi	r21, 0x21	; 33
    15c8:	18 c0       	rjmp	.+48     	; 0x15fa <menu_init+0x120>
    15ca:	54 9f       	mul	r21, r20
    15cc:	f0 01       	movw	r30, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	e1 50       	subi	r30, 0x01	; 1
    15d2:	fd 4f       	sbci	r31, 0xFD	; 253
    15d4:	e9 93       	st	Y+, r30
    15d6:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    15d8:	b3 8b       	std	Z+19, r27	; 0x13
    15da:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    15dc:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15de:	2f 5f       	subi	r18, 0xFF	; 255
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	90 96       	adiw	r26, 0x20	; 32
    15e4:	8c 91       	ld	r24, X
    15e6:	90 97       	sbiw	r26, 0x20	; 32
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	28 17       	cp	r18, r24
    15ec:	39 07       	cpc	r19, r25
    15ee:	6c f3       	brlt	.-38     	; 0x15ca <menu_init+0xf0>
    15f0:	6f 5d       	subi	r22, 0xDF	; 223
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    15f4:	60 17       	cp	r22, r16
    15f6:	71 07       	cpc	r23, r17
    15f8:	59 f0       	breq	.+22     	; 0x1610 <menu_init+0x136>
    15fa:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15fc:	90 96       	adiw	r26, 0x20	; 32
    15fe:	8c 91       	ld	r24, X
    1600:	90 97       	sbiw	r26, 0x20	; 32
    1602:	88 23       	and	r24, r24
    1604:	a9 f3       	breq	.-22     	; 0x15f0 <menu_init+0x116>
    1606:	eb 01       	movw	r28, r22
    1608:	64 96       	adiw	r28, 0x14	; 20
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	dd cf       	rjmp	.-70     	; 0x15ca <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    1610:	88 ed       	ldi	r24, 0xD8	; 216
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	0e 94 07 0a 	call	0x140e	; 0x140e <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    1618:	e2 ee       	ldi	r30, 0xE2	; 226
    161a:	f2 e0       	ldi	r31, 0x02	; 2
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	92 e0       	ldi	r25, 0x02	; 2
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1624:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    1626:	84 e0       	ldi	r24, 0x04	; 4
    1628:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
	oled_reset();
    163e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
	oled_home();
    1642:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    1646:	c2 ee       	ldi	r28, 0xE2	; 226
    1648:	d2 e0       	ldi	r29, 0x02	; 2
    164a:	88 81       	ld	r24, Y
    164c:	99 81       	ldd	r25, Y+1	; 0x01
    164e:	02 96       	adiw	r24, 0x02	; 2
    1650:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1654:	e8 81       	ld	r30, Y
    1656:	f9 81       	ldd	r31, Y+1	; 0x01
    1658:	80 a1       	ldd	r24, Z+32	; 0x20
    165a:	88 23       	and	r24, r24
    165c:	51 f1       	breq	.+84     	; 0x16b2 <menu_printCurrentMenu+0x7e>
    165e:	68 94       	set
    1660:	ff 24       	eor	r15, r15
    1662:	f1 f8       	bld	r15, 1
    1664:	c0 e0       	ldi	r28, 0x00	; 0
    1666:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1668:	02 ee       	ldi	r16, 0xE2	; 226
    166a:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    166c:	8f 2d       	mov	r24, r15
    166e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1672:	d8 01       	movw	r26, r16
    1674:	8d 91       	ld	r24, X+
    1676:	9c 91       	ld	r25, X
    1678:	fe 01       	movw	r30, r28
    167a:	3a 96       	adiw	r30, 0x0a	; 10
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	e8 0f       	add	r30, r24
    1682:	f9 1f       	adc	r31, r25
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	02 96       	adiw	r24, 0x02	; 2
    168a:	0e 94 c7 0b 	call	0x178e	; 0x178e <oled_print>
		if (currentMenu.childIndex == i) {
    168e:	f8 01       	movw	r30, r16
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	8c 17       	cp	r24, r28
    1696:	9d 07       	cpc	r25, r29
    1698:	11 f4       	brne	.+4      	; 0x169e <menu_printCurrentMenu+0x6a>
			oled_print_arrow();
    169a:	0e 94 81 0b 	call	0x1702	; 0x1702 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    169e:	21 96       	adiw	r28, 0x01	; 1
    16a0:	f3 94       	inc	r15
    16a2:	d8 01       	movw	r26, r16
    16a4:	ed 91       	ld	r30, X+
    16a6:	fc 91       	ld	r31, X
    16a8:	80 a1       	ldd	r24, Z+32	; 0x20
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	c8 17       	cp	r28, r24
    16ae:	d9 07       	cpc	r29, r25
    16b0:	ec f2       	brlt	.-70     	; 0x166c <menu_printCurrentMenu+0x38>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	08 95       	ret

000016be <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16be:	80 55       	subi	r24, 0x50	; 80
    16c0:	e0 e0       	ldi	r30, 0x00	; 0
    16c2:	f0 e1       	ldi	r31, 0x10	; 16
    16c4:	80 83       	st	Z, r24
    16c6:	86 2f       	mov	r24, r22
    16c8:	8f 70       	andi	r24, 0x0F	; 15
    16ca:	80 83       	st	Z, r24
    16cc:	62 95       	swap	r22
    16ce:	6f 70       	andi	r22, 0x0F	; 15
    16d0:	60 61       	ori	r22, 0x10	; 16
    16d2:	60 83       	st	Z, r22
    16d4:	08 95       	ret

000016d6 <oled_reset>:
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	c0 e0       	ldi	r28, 0x00	; 0
    16e0:	d2 e1       	ldi	r29, 0x12	; 18
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	81 2f       	mov	r24, r17
    16e6:	0e 94 5f 0b 	call	0x16be	; 0x16be <oled_pos>
    16ea:	80 e8       	ldi	r24, 0x80	; 128
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	18 82       	st	Y, r1
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	e9 f7       	brne	.-6      	; 0x16ee <oled_reset+0x18>
    16f4:	1f 5f       	subi	r17, 0xFF	; 255
    16f6:	18 30       	cpi	r17, 0x08	; 8
    16f8:	a1 f7       	brne	.-24     	; 0x16e2 <oled_reset+0xc>
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	08 95       	ret

00001702 <oled_print_arrow>:
    1702:	e0 e0       	ldi	r30, 0x00	; 0
    1704:	f2 e1       	ldi	r31, 0x12	; 18
    1706:	88 e1       	ldi	r24, 0x18	; 24
    1708:	80 83       	st	Z, r24
    170a:	9c e3       	ldi	r25, 0x3C	; 60
    170c:	90 83       	st	Z, r25
    170e:	9e e7       	ldi	r25, 0x7E	; 126
    1710:	90 83       	st	Z, r25
    1712:	80 83       	st	Z, r24
    1714:	80 83       	st	Z, r24
    1716:	08 95       	ret

00001718 <oled_home>:
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	0e 94 5f 0b 	call	0x16be	; 0x16be <oled_pos>
    1720:	08 95       	ret

00001722 <oled_init>:
    1722:	e0 e0       	ldi	r30, 0x00	; 0
    1724:	f0 e1       	ldi	r31, 0x10	; 16
    1726:	8e ea       	ldi	r24, 0xAE	; 174
    1728:	80 83       	st	Z, r24
    172a:	81 ea       	ldi	r24, 0xA1	; 161
    172c:	80 83       	st	Z, r24
    172e:	8a ed       	ldi	r24, 0xDA	; 218
    1730:	80 83       	st	Z, r24
    1732:	82 e1       	ldi	r24, 0x12	; 18
    1734:	80 83       	st	Z, r24
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	80 83       	st	Z, r24
    173a:	88 ea       	ldi	r24, 0xA8	; 168
    173c:	80 83       	st	Z, r24
    173e:	8f e3       	ldi	r24, 0x3F	; 63
    1740:	80 83       	st	Z, r24
    1742:	85 ed       	ldi	r24, 0xD5	; 213
    1744:	80 83       	st	Z, r24
    1746:	80 e8       	ldi	r24, 0x80	; 128
    1748:	80 83       	st	Z, r24
    174a:	81 e8       	ldi	r24, 0x81	; 129
    174c:	80 83       	st	Z, r24
    174e:	80 e5       	ldi	r24, 0x50	; 80
    1750:	80 83       	st	Z, r24
    1752:	89 ed       	ldi	r24, 0xD9	; 217
    1754:	80 83       	st	Z, r24
    1756:	81 e2       	ldi	r24, 0x21	; 33
    1758:	80 83       	st	Z, r24
    175a:	80 e2       	ldi	r24, 0x20	; 32
    175c:	80 83       	st	Z, r24
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	80 83       	st	Z, r24
    1762:	8b ed       	ldi	r24, 0xDB	; 219
    1764:	80 83       	st	Z, r24
    1766:	80 e3       	ldi	r24, 0x30	; 48
    1768:	80 83       	st	Z, r24
    176a:	8d ea       	ldi	r24, 0xAD	; 173
    176c:	80 83       	st	Z, r24
    176e:	10 82       	st	Z, r1
    1770:	84 ea       	ldi	r24, 0xA4	; 164
    1772:	80 83       	st	Z, r24
    1774:	86 ea       	ldi	r24, 0xA6	; 166
    1776:	80 83       	st	Z, r24
    1778:	8f ea       	ldi	r24, 0xAF	; 175
    177a:	80 83       	st	Z, r24
    177c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <oled_reset>
    1780:	0e 94 8c 0b 	call	0x1718	; 0x1718 <oled_home>
    1784:	08 95       	ret

00001786 <oled_gotoLine>:
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	0e 94 5f 0b 	call	0x16be	; 0x16be <oled_pos>
    178c:	08 95       	ret

0000178e <oled_print>:

void oled_print(char* character){
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	dc 01       	movw	r26, r24
	while (*character != '\0')
    1794:	8c 91       	ld	r24, X
    1796:	81 11       	cpse	r24, r1
    1798:	1a c0       	rjmp	.+52     	; 0x17ce <oled_print+0x40>
    179a:	1e c0       	rjmp	.+60     	; 0x17d8 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    179c:	ec 91       	ld	r30, X
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	b0 97       	sbiw	r30, 0x20	; 32
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	e2 0f       	add	r30, r18
    17b0:	f3 1f       	adc	r31, r19
    17b2:	e7 5d       	subi	r30, 0xD7	; 215
    17b4:	fd 4f       	sbci	r31, 0xFD	; 253
    17b6:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17b8:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17ba:	2f 5f       	subi	r18, 0xFF	; 255
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	28 30       	cpi	r18, 0x08	; 8
    17c0:	31 05       	cpc	r19, r1
    17c2:	61 f7       	brne	.-40     	; 0x179c <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17c4:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    17c6:	8c 91       	ld	r24, X
    17c8:	81 11       	cpse	r24, r1
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <oled_print+0x44>
    17cc:	05 c0       	rjmp	.+10     	; 0x17d8 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17ce:	c0 e0       	ldi	r28, 0x00	; 0
    17d0:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	e2 cf       	rjmp	.-60     	; 0x179c <oled_print+0xe>
		}
		character++;
	}
	
	
}
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	08 95       	ret

000017de <setupInit>:
#define MYUBRR FOSC/16/BAUD-1
#include <util/delay.h>


	void setupInit(void){
	cli();
    17de:	f8 94       	cli
	xmem_init();
    17e0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <xmem_init>
    17e4:	2f ef       	ldi	r18, 0xFF	; 255
    17e6:	8f e7       	ldi	r24, 0x7F	; 127
    17e8:	91 e0       	ldi	r25, 0x01	; 1
    17ea:	21 50       	subi	r18, 0x01	; 1
    17ec:	80 40       	sbci	r24, 0x00	; 0
    17ee:	90 40       	sbci	r25, 0x00	; 0
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <setupInit+0xc>
    17f2:	00 c0       	rjmp	.+0      	; 0x17f4 <setupInit+0x16>
    17f4:	00 c0       	rjmp	.+0      	; 0x17f6 <setupInit+0x18>
	_delay_ms(100);
	USART_init(MYUBRR);
    17f6:	8f e1       	ldi	r24, 0x1F	; 31
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <USART_init>
    17fe:	2f ef       	ldi	r18, 0xFF	; 255
    1800:	8f e7       	ldi	r24, 0x7F	; 127
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	21 50       	subi	r18, 0x01	; 1
    1806:	80 40       	sbci	r24, 0x00	; 0
    1808:	90 40       	sbci	r25, 0x00	; 0
    180a:	e1 f7       	brne	.-8      	; 0x1804 <setupInit+0x26>
    180c:	00 c0       	rjmp	.+0      	; 0x180e <setupInit+0x30>
    180e:	00 c0       	rjmp	.+0      	; 0x1810 <setupInit+0x32>
	_delay_ms(100);
	CAN_init();
    1810:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <CAN_init>
    1814:	2f ef       	ldi	r18, 0xFF	; 255
    1816:	8f e7       	ldi	r24, 0x7F	; 127
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	21 50       	subi	r18, 0x01	; 1
    181c:	80 40       	sbci	r24, 0x00	; 0
    181e:	90 40       	sbci	r25, 0x00	; 0
    1820:	e1 f7       	brne	.-8      	; 0x181a <setupInit+0x3c>
    1822:	00 c0       	rjmp	.+0      	; 0x1824 <setupInit+0x46>
    1824:	00 c0       	rjmp	.+0      	; 0x1826 <setupInit+0x48>
	_delay_ms(100);
	adcInit();
    1826:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
    182a:	2f ef       	ldi	r18, 0xFF	; 255
    182c:	8f e7       	ldi	r24, 0x7F	; 127
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	21 50       	subi	r18, 0x01	; 1
    1832:	80 40       	sbci	r24, 0x00	; 0
    1834:	90 40       	sbci	r25, 0x00	; 0
    1836:	e1 f7       	brne	.-8      	; 0x1830 <setupInit+0x52>
    1838:	00 c0       	rjmp	.+0      	; 0x183a <setupInit+0x5c>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <setupInit+0x5e>
	_delay_ms(100);
	joystick_init();
    183c:	0e 94 45 09 	call	0x128a	; 0x128a <joystick_init>
    1840:	2f ef       	ldi	r18, 0xFF	; 255
    1842:	8f e7       	ldi	r24, 0x7F	; 127
    1844:	91 e0       	ldi	r25, 0x01	; 1
    1846:	21 50       	subi	r18, 0x01	; 1
    1848:	80 40       	sbci	r24, 0x00	; 0
    184a:	90 40       	sbci	r25, 0x00	; 0
    184c:	e1 f7       	brne	.-8      	; 0x1846 <setupInit+0x68>
    184e:	00 c0       	rjmp	.+0      	; 0x1850 <setupInit+0x72>
    1850:	00 c0       	rjmp	.+0      	; 0x1852 <setupInit+0x74>
	_delay_ms(100);
	touchButton_init();
    1852:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <touchButton_init>
    1856:	2f ef       	ldi	r18, 0xFF	; 255
    1858:	8f e7       	ldi	r24, 0x7F	; 127
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	21 50       	subi	r18, 0x01	; 1
    185e:	80 40       	sbci	r24, 0x00	; 0
    1860:	90 40       	sbci	r25, 0x00	; 0
    1862:	e1 f7       	brne	.-8      	; 0x185c <setupInit+0x7e>
    1864:	00 c0       	rjmp	.+0      	; 0x1866 <setupInit+0x88>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <setupInit+0x8a>
	_delay_ms(100);
	oled_init();
    1868:	0e 94 91 0b 	call	0x1722	; 0x1722 <oled_init>
    186c:	2f ef       	ldi	r18, 0xFF	; 255
    186e:	8f e7       	ldi	r24, 0x7F	; 127
    1870:	91 e0       	ldi	r25, 0x01	; 1
    1872:	21 50       	subi	r18, 0x01	; 1
    1874:	80 40       	sbci	r24, 0x00	; 0
    1876:	90 40       	sbci	r25, 0x00	; 0
    1878:	e1 f7       	brne	.-8      	; 0x1872 <setupInit+0x94>
    187a:	00 c0       	rjmp	.+0      	; 0x187c <setupInit+0x9e>
    187c:	00 c0       	rjmp	.+0      	; 0x187e <setupInit+0xa0>
	_delay_ms(100);
	timer_init();
    187e:	0e 94 c5 0c 	call	0x198a	; 0x198a <timer_init>
    1882:	2f ef       	ldi	r18, 0xFF	; 255
    1884:	8f e7       	ldi	r24, 0x7F	; 127
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	21 50       	subi	r18, 0x01	; 1
    188a:	80 40       	sbci	r24, 0x00	; 0
    188c:	90 40       	sbci	r25, 0x00	; 0
    188e:	e1 f7       	brne	.-8      	; 0x1888 <setupInit+0xaa>
    1890:	00 c0       	rjmp	.+0      	; 0x1892 <setupInit+0xb4>
    1892:	00 c0       	rjmp	.+0      	; 0x1894 <setupInit+0xb6>
	_delay_ms(100);
	sleep_init();
    1894:	0e 94 33 09 	call	0x1266	; 0x1266 <sleep_init>
    1898:	2f ef       	ldi	r18, 0xFF	; 255
    189a:	8f e7       	ldi	r24, 0x7F	; 127
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	21 50       	subi	r18, 0x01	; 1
    18a0:	80 40       	sbci	r24, 0x00	; 0
    18a2:	90 40       	sbci	r25, 0x00	; 0
    18a4:	e1 f7       	brne	.-8      	; 0x189e <setupInit+0xc0>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <setupInit+0xca>
    18a8:	00 c0       	rjmp	.+0      	; 0x18aa <setupInit+0xcc>
	_delay_ms(100);
	menu_init();
    18aa:	0e 94 6d 0a 	call	0x14da	; 0x14da <menu_init>
    18ae:	2f ef       	ldi	r18, 0xFF	; 255
    18b0:	8f e7       	ldi	r24, 0x7F	; 127
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	21 50       	subi	r18, 0x01	; 1
    18b6:	80 40       	sbci	r24, 0x00	; 0
    18b8:	90 40       	sbci	r25, 0x00	; 0
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <setupInit+0xd6>
    18bc:	00 c0       	rjmp	.+0      	; 0x18be <setupInit+0xe0>
    18be:	00 c0       	rjmp	.+0      	; 0x18c0 <setupInit+0xe2>
	_delay_ms(100);
	pwm_init();
    18c0:	0e 94 c7 08 	call	0x118e	; 0x118e <pwm_init>
    18c4:	2f ef       	ldi	r18, 0xFF	; 255
    18c6:	8f e7       	ldi	r24, 0x7F	; 127
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	21 50       	subi	r18, 0x01	; 1
    18cc:	80 40       	sbci	r24, 0x00	; 0
    18ce:	90 40       	sbci	r25, 0x00	; 0
    18d0:	e1 f7       	brne	.-8      	; 0x18ca <setupInit+0xec>
    18d2:	00 c0       	rjmp	.+0      	; 0x18d4 <setupInit+0xf6>
    18d4:	00 c0       	rjmp	.+0      	; 0x18d6 <setupInit+0xf8>
	_delay_ms(100);
	game_init();
    18d6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <game_init>
    18da:	2f ef       	ldi	r18, 0xFF	; 255
    18dc:	8f e7       	ldi	r24, 0x7F	; 127
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	21 50       	subi	r18, 0x01	; 1
    18e2:	80 40       	sbci	r24, 0x00	; 0
    18e4:	90 40       	sbci	r25, 0x00	; 0
    18e6:	e1 f7       	brne	.-8      	; 0x18e0 <setupInit+0x102>
    18e8:	00 c0       	rjmp	.+0      	; 0x18ea <setupInit+0x10c>
    18ea:	00 c0       	rjmp	.+0      	; 0x18ec <setupInit+0x10e>
	_delay_ms(100);
	sei();
    18ec:	78 94       	sei
    18ee:	08 95       	ret

000018f0 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    18fa:	c0 ef       	ldi	r28, 0xF0	; 240
    18fc:	d2 e0       	ldi	r29, 0x02	; 2
    18fe:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    1900:	83 e0       	ldi	r24, 0x03	; 3
    1902:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1906:	89 83       	std	Y+1, r24	; 0x01
}
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    190e:	87 b3       	in	r24, 0x17	; 23
    1910:	80 6a       	ori	r24, 0xA0	; 160
    1912:	87 bb       	out	0x17, r24	; 23
    1914:	bc 9a       	sbi	0x17, 4	; 23
    1916:	8d b1       	in	r24, 0x0d	; 13
    1918:	81 65       	ori	r24, 0x51	; 81
    191a:	8d b9       	out	0x0d, r24	; 13
    191c:	c4 9a       	sbi	0x18, 4	; 24
    191e:	08 95       	ret

00001920 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    1920:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    1922:	77 9b       	sbis	0x0e, 7	; 14
    1924:	fe cf       	rjmp	.-4      	; 0x1922 <SPI_masterWrite+0x2>

}
    1926:	08 95       	ret

00001928 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    1928:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    192a:	77 9b       	sbis	0x0e, 7	; 14
    192c:	fe cf       	rjmp	.-4      	; 0x192a <SPI_masterRead+0x2>
	return SPDR;
    192e:	8f b1       	in	r24, 0x0f	; 15
}
    1930:	08 95       	ret

00001932 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    1932:	66 23       	and	r22, r22
    1934:	69 f0       	breq	.+26     	; 0x1950 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1936:	48 b3       	in	r20, 0x18	; 24
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	b9 01       	movw	r22, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <SPI_setChipSelect+0x12>
    1940:	66 0f       	add	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	8a 95       	dec	r24
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <SPI_setChipSelect+0xe>
    1948:	cb 01       	movw	r24, r22
    194a:	84 2b       	or	r24, r20
    194c:	88 bb       	out	0x18, r24	; 24
    194e:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    1950:	48 b3       	in	r20, 0x18	; 24
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	b9 01       	movw	r22, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <SPI_setChipSelect+0x2c>
    195a:	66 0f       	add	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	8a 95       	dec	r24
    1960:	e2 f7       	brpl	.-8      	; 0x195a <SPI_setChipSelect+0x28>
    1962:	cb 01       	movw	r24, r22
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	88 bb       	out	0x18, r24	; 24
    196a:	08 95       	ret

0000196c <__vector_14>:
#include "menu.h"
#include "game.h"
#include <avr/interrupt.h>


ISR (TIMER1_COMPB_vect) {
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	8f 93       	push	r24
	
	timerFlag=1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <timerFlag>

}
    197e:	8f 91       	pop	r24
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    198a:	89 b7       	in	r24, 0x39	; 57
    198c:	80 62       	ori	r24, 0x20	; 32
    198e:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1990:	1d bc       	out	0x2d, r1	; 45
    1992:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1994:	80 e3       	ldi	r24, 0x30	; 48
    1996:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1998:	85 e0       	ldi	r24, 0x05	; 5
    199a:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    199c:	80 ee       	ldi	r24, 0xE0	; 224
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	99 bd       	out	0x29, r25	; 41
    19a2:	88 bd       	out	0x28, r24	; 40
	timerFlag=0;
    19a4:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <timerFlag>
    19a8:	08 95       	ret

000019aa <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    19aa:	36 b3       	in	r19, 0x16	; 22
    19ac:	26 b3       	in	r18, 0x16	; 22
    19ae:	47 b3       	in	r20, 0x17	; 23
    19b0:	32 70       	andi	r19, 0x02	; 2
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	bc 01       	movw	r22, r24
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <touchButton_init+0x14>
    19ba:	66 0f       	add	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	3a 95       	dec	r19
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <touchButton_init+0x10>
    19c2:	24 70       	andi	r18, 0x04	; 4
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <touchButton_init+0x20>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	2a 95       	dec	r18
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <touchButton_init+0x1c>
    19ce:	86 2b       	or	r24, r22
    19d0:	97 2b       	or	r25, r23
    19d2:	80 95       	com	r24
    19d4:	90 95       	com	r25
    19d6:	84 23       	and	r24, r20
    19d8:	87 bb       	out	0x17, r24	; 23
    19da:	08 95       	ret

000019dc <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    19dc:	86 b3       	in	r24, 0x16	; 22
    19de:	e6 ee       	ldi	r30, 0xE6	; 230
    19e0:	f2 e0       	ldi	r31, 0x02	; 2
    19e2:	86 95       	lsr	r24
    19e4:	81 70       	andi	r24, 0x01	; 1
    19e6:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    19e8:	86 b3       	in	r24, 0x16	; 22
    19ea:	82 fb       	bst	r24, 2
    19ec:	88 27       	eor	r24, r24
    19ee:	80 f9       	bld	r24, 0
    19f0:	81 83       	std	Z+1, r24	; 0x01
    19f2:	08 95       	ret

000019f4 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    19f4:	5d 9b       	sbis	0x0b, 5	; 11
    19f6:	fe cf       	rjmp	.-4      	; 0x19f4 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    19f8:	8c b9       	out	0x0c, r24	; 12
    19fa:	08 95       	ret

000019fc <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    19fc:	5f 9b       	sbis	0x0b, 7	; 11
    19fe:	fe cf       	rjmp	.-4      	; 0x19fc <USART_receiveChar>
		;
	
	return UDR0;
    1a00:	8c b1       	in	r24, 0x0c	; 12
    1a02:	08 95       	ret

00001a04 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1a04:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    1a06:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    1a08:	88 e1       	ldi	r24, 0x18	; 24
    1a0a:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1a0c:	8e e8       	ldi	r24, 0x8E	; 142
    1a0e:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1a10:	6e ef       	ldi	r22, 0xFE	; 254
    1a12:	7c e0       	ldi	r23, 0x0C	; 12
    1a14:	8a ef       	ldi	r24, 0xFA	; 250
    1a16:	9c e0       	ldi	r25, 0x0C	; 12
    1a18:	0e 94 3e 10 	call	0x207c	; 0x207c <fdevopen>
    1a1c:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <uart+0x1>
    1a20:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <uart>
    1a24:	08 95       	ret

00001a26 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1a26:	85 b7       	in	r24, 0x35	; 53
    1a28:	80 68       	ori	r24, 0x80	; 128
    1a2a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1a2c:	80 b7       	in	r24, 0x30	; 48
    1a2e:	88 60       	ori	r24, 0x08	; 8
    1a30:	80 bf       	out	0x30, r24	; 48
    1a32:	08 95       	ret
    1a34:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscA>
    1a38:	60 f0       	brcs	.+24     	; 0x1a52 <xmem_init+0x2c>
    1a3a:	80 e8       	ldi	r24, 0x80	; 128
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <xmem_init+0x1c>
    1a40:	9e ef       	ldi	r25, 0xFE	; 254
    1a42:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_pscB>
    1a46:	28 f0       	brcs	.+10     	; 0x1a52 <xmem_init+0x2c>
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	51 e0       	ldi	r21, 0x01	; 1
    1a4c:	71 f4       	brne	.+28     	; 0x1a6a <atan2+0x10>
    1a4e:	5e ef       	ldi	r21, 0xFE	; 254
    1a50:	0c c0       	rjmp	.+24     	; 0x1a6a <atan2+0x10>
    1a52:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_nan>
    1a56:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__fp_zero>

00001a5a <atan2>:
    1a5a:	e9 2f       	mov	r30, r25
    1a5c:	e0 78       	andi	r30, 0x80	; 128
    1a5e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__fp_split3>
    1a62:	40 f3       	brcs	.-48     	; 0x1a34 <xmem_init+0xe>
    1a64:	09 2e       	mov	r0, r25
    1a66:	05 2a       	or	r0, r21
    1a68:	b1 f3       	breq	.-20     	; 0x1a56 <xmem_init+0x30>
    1a6a:	26 17       	cp	r18, r22
    1a6c:	37 07       	cpc	r19, r23
    1a6e:	48 07       	cpc	r20, r24
    1a70:	59 07       	cpc	r21, r25
    1a72:	38 f0       	brcs	.+14     	; 0x1a82 <atan2+0x28>
    1a74:	0e 2e       	mov	r0, r30
    1a76:	07 f8       	bld	r0, 7
    1a78:	e0 25       	eor	r30, r0
    1a7a:	69 f0       	breq	.+26     	; 0x1a96 <atan2+0x3c>
    1a7c:	e0 25       	eor	r30, r0
    1a7e:	e0 64       	ori	r30, 0x40	; 64
    1a80:	0a c0       	rjmp	.+20     	; 0x1a96 <atan2+0x3c>
    1a82:	ef 63       	ori	r30, 0x3F	; 63
    1a84:	07 f8       	bld	r0, 7
    1a86:	00 94       	com	r0
    1a88:	07 fa       	bst	r0, 7
    1a8a:	db 01       	movw	r26, r22
    1a8c:	b9 01       	movw	r22, r18
    1a8e:	9d 01       	movw	r18, r26
    1a90:	dc 01       	movw	r26, r24
    1a92:	ca 01       	movw	r24, r20
    1a94:	ad 01       	movw	r20, r26
    1a96:	ef 93       	push	r30
    1a98:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3_pse>
    1a9c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fp_round>
    1aa0:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <atan>
    1aa4:	5f 91       	pop	r21
    1aa6:	55 23       	and	r21, r21
    1aa8:	39 f0       	breq	.+14     	; 0x1ab8 <atan2+0x5e>
    1aaa:	2b ed       	ldi	r18, 0xDB	; 219
    1aac:	3f e0       	ldi	r19, 0x0F	; 15
    1aae:	49 e4       	ldi	r20, 0x49	; 73
    1ab0:	50 fd       	sbrc	r21, 0
    1ab2:	49 ec       	ldi	r20, 0xC9	; 201
    1ab4:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__addsf3>
    1ab8:	08 95       	ret

00001aba <atan>:
    1aba:	df 93       	push	r29
    1abc:	dd 27       	eor	r29, r29
    1abe:	b9 2f       	mov	r27, r25
    1ac0:	bf 77       	andi	r27, 0x7F	; 127
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	16 16       	cp	r1, r22
    1ac8:	17 06       	cpc	r1, r23
    1aca:	48 07       	cpc	r20, r24
    1acc:	5b 07       	cpc	r21, r27
    1ace:	18 f4       	brcc	.+6      	; 0x1ad6 <atan+0x1c>
    1ad0:	d9 2f       	mov	r29, r25
    1ad2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <inverse>
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	7f 93       	push	r23
    1adc:	6f 93       	push	r22
    1ade:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <square>
    1ae2:	e0 e7       	ldi	r30, 0x70	; 112
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__fp_powser>
    1aea:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fp_round>
    1aee:	2f 91       	pop	r18
    1af0:	3f 91       	pop	r19
    1af2:	4f 91       	pop	r20
    1af4:	5f 91       	pop	r21
    1af6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3x>
    1afa:	dd 23       	and	r29, r29
    1afc:	51 f0       	breq	.+20     	; 0x1b12 <atan+0x58>
    1afe:	90 58       	subi	r25, 0x80	; 128
    1b00:	a2 ea       	ldi	r26, 0xA2	; 162
    1b02:	2a ed       	ldi	r18, 0xDA	; 218
    1b04:	3f e0       	ldi	r19, 0x0F	; 15
    1b06:	49 ec       	ldi	r20, 0xC9	; 201
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	d0 78       	andi	r29, 0x80	; 128
    1b0c:	5d 27       	eor	r21, r29
    1b0e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__addsf3x>
    1b12:	df 91       	pop	r29
    1b14:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__fp_round>

00001b18 <__divsf3>:
    1b18:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__divsf3x>
    1b1c:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__fp_round>
    1b20:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_pscB>
    1b24:	58 f0       	brcs	.+22     	; 0x1b3c <__divsf3+0x24>
    1b26:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscA>
    1b2a:	40 f0       	brcs	.+16     	; 0x1b3c <__divsf3+0x24>
    1b2c:	29 f4       	brne	.+10     	; 0x1b38 <__divsf3+0x20>
    1b2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b30:	29 f0       	breq	.+10     	; 0x1b3c <__divsf3+0x24>
    1b32:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_inf>
    1b36:	51 11       	cpse	r21, r1
    1b38:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_szero>
    1b3c:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_nan>

00001b40 <__divsf3x>:
    1b40:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__fp_split3>
    1b44:	68 f3       	brcs	.-38     	; 0x1b20 <__divsf3+0x8>

00001b46 <__divsf3_pse>:
    1b46:	99 23       	and	r25, r25
    1b48:	b1 f3       	breq	.-20     	; 0x1b36 <__divsf3+0x1e>
    1b4a:	55 23       	and	r21, r21
    1b4c:	91 f3       	breq	.-28     	; 0x1b32 <__divsf3+0x1a>
    1b4e:	95 1b       	sub	r25, r21
    1b50:	55 0b       	sbc	r21, r21
    1b52:	bb 27       	eor	r27, r27
    1b54:	aa 27       	eor	r26, r26
    1b56:	62 17       	cp	r22, r18
    1b58:	73 07       	cpc	r23, r19
    1b5a:	84 07       	cpc	r24, r20
    1b5c:	38 f0       	brcs	.+14     	; 0x1b6c <__divsf3_pse+0x26>
    1b5e:	9f 5f       	subi	r25, 0xFF	; 255
    1b60:	5f 4f       	sbci	r21, 0xFF	; 255
    1b62:	22 0f       	add	r18, r18
    1b64:	33 1f       	adc	r19, r19
    1b66:	44 1f       	adc	r20, r20
    1b68:	aa 1f       	adc	r26, r26
    1b6a:	a9 f3       	breq	.-22     	; 0x1b56 <__divsf3_pse+0x10>
    1b6c:	35 d0       	rcall	.+106    	; 0x1bd8 <__divsf3_pse+0x92>
    1b6e:	0e 2e       	mov	r0, r30
    1b70:	3a f0       	brmi	.+14     	; 0x1b80 <__divsf3_pse+0x3a>
    1b72:	e0 e8       	ldi	r30, 0x80	; 128
    1b74:	32 d0       	rcall	.+100    	; 0x1bda <__divsf3_pse+0x94>
    1b76:	91 50       	subi	r25, 0x01	; 1
    1b78:	50 40       	sbci	r21, 0x00	; 0
    1b7a:	e6 95       	lsr	r30
    1b7c:	00 1c       	adc	r0, r0
    1b7e:	ca f7       	brpl	.-14     	; 0x1b72 <__divsf3_pse+0x2c>
    1b80:	2b d0       	rcall	.+86     	; 0x1bd8 <__divsf3_pse+0x92>
    1b82:	fe 2f       	mov	r31, r30
    1b84:	29 d0       	rcall	.+82     	; 0x1bd8 <__divsf3_pse+0x92>
    1b86:	66 0f       	add	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	26 17       	cp	r18, r22
    1b90:	37 07       	cpc	r19, r23
    1b92:	48 07       	cpc	r20, r24
    1b94:	ab 07       	cpc	r26, r27
    1b96:	b0 e8       	ldi	r27, 0x80	; 128
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <__divsf3_pse+0x56>
    1b9a:	bb 0b       	sbc	r27, r27
    1b9c:	80 2d       	mov	r24, r0
    1b9e:	bf 01       	movw	r22, r30
    1ba0:	ff 27       	eor	r31, r31
    1ba2:	93 58       	subi	r25, 0x83	; 131
    1ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba6:	3a f0       	brmi	.+14     	; 0x1bb6 <__divsf3_pse+0x70>
    1ba8:	9e 3f       	cpi	r25, 0xFE	; 254
    1baa:	51 05       	cpc	r21, r1
    1bac:	78 f0       	brcs	.+30     	; 0x1bcc <__divsf3_pse+0x86>
    1bae:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_inf>
    1bb2:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_szero>
    1bb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb8:	e4 f3       	brlt	.-8      	; 0x1bb2 <__divsf3_pse+0x6c>
    1bba:	98 3e       	cpi	r25, 0xE8	; 232
    1bbc:	d4 f3       	brlt	.-12     	; 0x1bb2 <__divsf3_pse+0x6c>
    1bbe:	86 95       	lsr	r24
    1bc0:	77 95       	ror	r23
    1bc2:	67 95       	ror	r22
    1bc4:	b7 95       	ror	r27
    1bc6:	f7 95       	ror	r31
    1bc8:	9f 5f       	subi	r25, 0xFF	; 255
    1bca:	c9 f7       	brne	.-14     	; 0x1bbe <__divsf3_pse+0x78>
    1bcc:	88 0f       	add	r24, r24
    1bce:	91 1d       	adc	r25, r1
    1bd0:	96 95       	lsr	r25
    1bd2:	87 95       	ror	r24
    1bd4:	97 f9       	bld	r25, 7
    1bd6:	08 95       	ret
    1bd8:	e1 e0       	ldi	r30, 0x01	; 1
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	bb 1f       	adc	r27, r27
    1be2:	62 17       	cp	r22, r18
    1be4:	73 07       	cpc	r23, r19
    1be6:	84 07       	cpc	r24, r20
    1be8:	ba 07       	cpc	r27, r26
    1bea:	20 f0       	brcs	.+8      	; 0x1bf4 <__divsf3_pse+0xae>
    1bec:	62 1b       	sub	r22, r18
    1bee:	73 0b       	sbc	r23, r19
    1bf0:	84 0b       	sbc	r24, r20
    1bf2:	ba 0b       	sbc	r27, r26
    1bf4:	ee 1f       	adc	r30, r30
    1bf6:	88 f7       	brcc	.-30     	; 0x1bda <__divsf3_pse+0x94>
    1bf8:	e0 95       	com	r30
    1bfa:	08 95       	ret

00001bfc <__fixsfsi>:
    1bfc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__fixunssfsi>
    1c00:	68 94       	set
    1c02:	b1 11       	cpse	r27, r1
    1c04:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_szero>
    1c08:	08 95       	ret

00001c0a <__fixunssfsi>:
    1c0a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_splitA>
    1c0e:	88 f0       	brcs	.+34     	; 0x1c32 <__fixunssfsi+0x28>
    1c10:	9f 57       	subi	r25, 0x7F	; 127
    1c12:	98 f0       	brcs	.+38     	; 0x1c3a <__fixunssfsi+0x30>
    1c14:	b9 2f       	mov	r27, r25
    1c16:	99 27       	eor	r25, r25
    1c18:	b7 51       	subi	r27, 0x17	; 23
    1c1a:	b0 f0       	brcs	.+44     	; 0x1c48 <__fixunssfsi+0x3e>
    1c1c:	e1 f0       	breq	.+56     	; 0x1c56 <__fixunssfsi+0x4c>
    1c1e:	66 0f       	add	r22, r22
    1c20:	77 1f       	adc	r23, r23
    1c22:	88 1f       	adc	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	1a f0       	brmi	.+6      	; 0x1c2e <__fixunssfsi+0x24>
    1c28:	ba 95       	dec	r27
    1c2a:	c9 f7       	brne	.-14     	; 0x1c1e <__fixunssfsi+0x14>
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <__fixunssfsi+0x4c>
    1c2e:	b1 30       	cpi	r27, 0x01	; 1
    1c30:	91 f0       	breq	.+36     	; 0x1c56 <__fixunssfsi+0x4c>
    1c32:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__fp_zero>
    1c36:	b1 e0       	ldi	r27, 0x01	; 1
    1c38:	08 95       	ret
    1c3a:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__fp_zero>
    1c3e:	67 2f       	mov	r22, r23
    1c40:	78 2f       	mov	r23, r24
    1c42:	88 27       	eor	r24, r24
    1c44:	b8 5f       	subi	r27, 0xF8	; 248
    1c46:	39 f0       	breq	.+14     	; 0x1c56 <__fixunssfsi+0x4c>
    1c48:	b9 3f       	cpi	r27, 0xF9	; 249
    1c4a:	cc f3       	brlt	.-14     	; 0x1c3e <__fixunssfsi+0x34>
    1c4c:	86 95       	lsr	r24
    1c4e:	77 95       	ror	r23
    1c50:	67 95       	ror	r22
    1c52:	b3 95       	inc	r27
    1c54:	d9 f7       	brne	.-10     	; 0x1c4c <__fixunssfsi+0x42>
    1c56:	3e f4       	brtc	.+14     	; 0x1c66 <__fixunssfsi+0x5c>
    1c58:	90 95       	com	r25
    1c5a:	80 95       	com	r24
    1c5c:	70 95       	com	r23
    1c5e:	61 95       	neg	r22
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	8f 4f       	sbci	r24, 0xFF	; 255
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	08 95       	ret

00001c68 <__floatunsisf>:
    1c68:	e8 94       	clt
    1c6a:	09 c0       	rjmp	.+18     	; 0x1c7e <__floatsisf+0x12>

00001c6c <__floatsisf>:
    1c6c:	97 fb       	bst	r25, 7
    1c6e:	3e f4       	brtc	.+14     	; 0x1c7e <__floatsisf+0x12>
    1c70:	90 95       	com	r25
    1c72:	80 95       	com	r24
    1c74:	70 95       	com	r23
    1c76:	61 95       	neg	r22
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	99 23       	and	r25, r25
    1c80:	a9 f0       	breq	.+42     	; 0x1cac <__floatsisf+0x40>
    1c82:	f9 2f       	mov	r31, r25
    1c84:	96 e9       	ldi	r25, 0x96	; 150
    1c86:	bb 27       	eor	r27, r27
    1c88:	93 95       	inc	r25
    1c8a:	f6 95       	lsr	r31
    1c8c:	87 95       	ror	r24
    1c8e:	77 95       	ror	r23
    1c90:	67 95       	ror	r22
    1c92:	b7 95       	ror	r27
    1c94:	f1 11       	cpse	r31, r1
    1c96:	f8 cf       	rjmp	.-16     	; 0x1c88 <__floatsisf+0x1c>
    1c98:	fa f4       	brpl	.+62     	; 0x1cd8 <__floatsisf+0x6c>
    1c9a:	bb 0f       	add	r27, r27
    1c9c:	11 f4       	brne	.+4      	; 0x1ca2 <__floatsisf+0x36>
    1c9e:	60 ff       	sbrs	r22, 0
    1ca0:	1b c0       	rjmp	.+54     	; 0x1cd8 <__floatsisf+0x6c>
    1ca2:	6f 5f       	subi	r22, 0xFF	; 255
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	16 c0       	rjmp	.+44     	; 0x1cd8 <__floatsisf+0x6c>
    1cac:	88 23       	and	r24, r24
    1cae:	11 f0       	breq	.+4      	; 0x1cb4 <__floatsisf+0x48>
    1cb0:	96 e9       	ldi	r25, 0x96	; 150
    1cb2:	11 c0       	rjmp	.+34     	; 0x1cd6 <__floatsisf+0x6a>
    1cb4:	77 23       	and	r23, r23
    1cb6:	21 f0       	breq	.+8      	; 0x1cc0 <__floatsisf+0x54>
    1cb8:	9e e8       	ldi	r25, 0x8E	; 142
    1cba:	87 2f       	mov	r24, r23
    1cbc:	76 2f       	mov	r23, r22
    1cbe:	05 c0       	rjmp	.+10     	; 0x1cca <__floatsisf+0x5e>
    1cc0:	66 23       	and	r22, r22
    1cc2:	71 f0       	breq	.+28     	; 0x1ce0 <__floatsisf+0x74>
    1cc4:	96 e8       	ldi	r25, 0x86	; 134
    1cc6:	86 2f       	mov	r24, r22
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	2a f0       	brmi	.+10     	; 0x1cd8 <__floatsisf+0x6c>
    1cce:	9a 95       	dec	r25
    1cd0:	66 0f       	add	r22, r22
    1cd2:	77 1f       	adc	r23, r23
    1cd4:	88 1f       	adc	r24, r24
    1cd6:	da f7       	brpl	.-10     	; 0x1cce <__floatsisf+0x62>
    1cd8:	88 0f       	add	r24, r24
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	97 f9       	bld	r25, 7
    1ce0:	08 95       	ret

00001ce2 <__fp_inf>:
    1ce2:	97 f9       	bld	r25, 7
    1ce4:	9f 67       	ori	r25, 0x7F	; 127
    1ce6:	80 e8       	ldi	r24, 0x80	; 128
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	08 95       	ret

00001cee <__fp_nan>:
    1cee:	9f ef       	ldi	r25, 0xFF	; 255
    1cf0:	80 ec       	ldi	r24, 0xC0	; 192
    1cf2:	08 95       	ret

00001cf4 <__fp_powser>:
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	1f 93       	push	r17
    1cfa:	0f 93       	push	r16
    1cfc:	ff 92       	push	r15
    1cfe:	ef 92       	push	r14
    1d00:	df 92       	push	r13
    1d02:	7b 01       	movw	r14, r22
    1d04:	8c 01       	movw	r16, r24
    1d06:	68 94       	set
    1d08:	06 c0       	rjmp	.+12     	; 0x1d16 <__fp_powser+0x22>
    1d0a:	da 2e       	mov	r13, r26
    1d0c:	ef 01       	movw	r28, r30
    1d0e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3x>
    1d12:	fe 01       	movw	r30, r28
    1d14:	e8 94       	clt
    1d16:	a5 91       	lpm	r26, Z+
    1d18:	25 91       	lpm	r18, Z+
    1d1a:	35 91       	lpm	r19, Z+
    1d1c:	45 91       	lpm	r20, Z+
    1d1e:	55 91       	lpm	r21, Z+
    1d20:	a6 f3       	brts	.-24     	; 0x1d0a <__fp_powser+0x16>
    1d22:	ef 01       	movw	r28, r30
    1d24:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__addsf3x>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	97 01       	movw	r18, r14
    1d2c:	a8 01       	movw	r20, r16
    1d2e:	da 94       	dec	r13
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <__fp_powser+0x18>
    1d32:	df 90       	pop	r13
    1d34:	ef 90       	pop	r14
    1d36:	ff 90       	pop	r15
    1d38:	0f 91       	pop	r16
    1d3a:	1f 91       	pop	r17
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <__fp_pscA>:
    1d42:	00 24       	eor	r0, r0
    1d44:	0a 94       	dec	r0
    1d46:	16 16       	cp	r1, r22
    1d48:	17 06       	cpc	r1, r23
    1d4a:	18 06       	cpc	r1, r24
    1d4c:	09 06       	cpc	r0, r25
    1d4e:	08 95       	ret

00001d50 <__fp_pscB>:
    1d50:	00 24       	eor	r0, r0
    1d52:	0a 94       	dec	r0
    1d54:	12 16       	cp	r1, r18
    1d56:	13 06       	cpc	r1, r19
    1d58:	14 06       	cpc	r1, r20
    1d5a:	05 06       	cpc	r0, r21
    1d5c:	08 95       	ret

00001d5e <__fp_round>:
    1d5e:	09 2e       	mov	r0, r25
    1d60:	03 94       	inc	r0
    1d62:	00 0c       	add	r0, r0
    1d64:	11 f4       	brne	.+4      	; 0x1d6a <__fp_round+0xc>
    1d66:	88 23       	and	r24, r24
    1d68:	52 f0       	brmi	.+20     	; 0x1d7e <__fp_round+0x20>
    1d6a:	bb 0f       	add	r27, r27
    1d6c:	40 f4       	brcc	.+16     	; 0x1d7e <__fp_round+0x20>
    1d6e:	bf 2b       	or	r27, r31
    1d70:	11 f4       	brne	.+4      	; 0x1d76 <__fp_round+0x18>
    1d72:	60 ff       	sbrs	r22, 0
    1d74:	04 c0       	rjmp	.+8      	; 0x1d7e <__fp_round+0x20>
    1d76:	6f 5f       	subi	r22, 0xFF	; 255
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7e:	08 95       	ret

00001d80 <__fp_split3>:
    1d80:	57 fd       	sbrc	r21, 7
    1d82:	90 58       	subi	r25, 0x80	; 128
    1d84:	44 0f       	add	r20, r20
    1d86:	55 1f       	adc	r21, r21
    1d88:	59 f0       	breq	.+22     	; 0x1da0 <__fp_splitA+0x10>
    1d8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8c:	71 f0       	breq	.+28     	; 0x1daa <__fp_splitA+0x1a>
    1d8e:	47 95       	ror	r20

00001d90 <__fp_splitA>:
    1d90:	88 0f       	add	r24, r24
    1d92:	97 fb       	bst	r25, 7
    1d94:	99 1f       	adc	r25, r25
    1d96:	61 f0       	breq	.+24     	; 0x1db0 <__fp_splitA+0x20>
    1d98:	9f 3f       	cpi	r25, 0xFF	; 255
    1d9a:	79 f0       	breq	.+30     	; 0x1dba <__fp_splitA+0x2a>
    1d9c:	87 95       	ror	r24
    1d9e:	08 95       	ret
    1da0:	12 16       	cp	r1, r18
    1da2:	13 06       	cpc	r1, r19
    1da4:	14 06       	cpc	r1, r20
    1da6:	55 1f       	adc	r21, r21
    1da8:	f2 cf       	rjmp	.-28     	; 0x1d8e <__fp_split3+0xe>
    1daa:	46 95       	lsr	r20
    1dac:	f1 df       	rcall	.-30     	; 0x1d90 <__fp_splitA>
    1dae:	08 c0       	rjmp	.+16     	; 0x1dc0 <__fp_splitA+0x30>
    1db0:	16 16       	cp	r1, r22
    1db2:	17 06       	cpc	r1, r23
    1db4:	18 06       	cpc	r1, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	f1 cf       	rjmp	.-30     	; 0x1d9c <__fp_splitA+0xc>
    1dba:	86 95       	lsr	r24
    1dbc:	71 05       	cpc	r23, r1
    1dbe:	61 05       	cpc	r22, r1
    1dc0:	08 94       	sec
    1dc2:	08 95       	ret

00001dc4 <__fp_zero>:
    1dc4:	e8 94       	clt

00001dc6 <__fp_szero>:
    1dc6:	bb 27       	eor	r27, r27
    1dc8:	66 27       	eor	r22, r22
    1dca:	77 27       	eor	r23, r23
    1dcc:	cb 01       	movw	r24, r22
    1dce:	97 f9       	bld	r25, 7
    1dd0:	08 95       	ret

00001dd2 <inverse>:
    1dd2:	9b 01       	movw	r18, r22
    1dd4:	ac 01       	movw	r20, r24
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	80 e8       	ldi	r24, 0x80	; 128
    1ddc:	9f e3       	ldi	r25, 0x3F	; 63
    1dde:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__divsf3>

00001de2 <__mulsf3>:
    1de2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3x>
    1de6:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__fp_round>
    1dea:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscA>
    1dee:	38 f0       	brcs	.+14     	; 0x1dfe <__mulsf3+0x1c>
    1df0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_pscB>
    1df4:	20 f0       	brcs	.+8      	; 0x1dfe <__mulsf3+0x1c>
    1df6:	95 23       	and	r25, r21
    1df8:	11 f0       	breq	.+4      	; 0x1dfe <__mulsf3+0x1c>
    1dfa:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_inf>
    1dfe:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_nan>
    1e02:	11 24       	eor	r1, r1
    1e04:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_szero>

00001e08 <__mulsf3x>:
    1e08:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__fp_split3>
    1e0c:	70 f3       	brcs	.-36     	; 0x1dea <__mulsf3+0x8>

00001e0e <__mulsf3_pse>:
    1e0e:	95 9f       	mul	r25, r21
    1e10:	c1 f3       	breq	.-16     	; 0x1e02 <__mulsf3+0x20>
    1e12:	95 0f       	add	r25, r21
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	55 1f       	adc	r21, r21
    1e18:	62 9f       	mul	r22, r18
    1e1a:	f0 01       	movw	r30, r0
    1e1c:	72 9f       	mul	r23, r18
    1e1e:	bb 27       	eor	r27, r27
    1e20:	f0 0d       	add	r31, r0
    1e22:	b1 1d       	adc	r27, r1
    1e24:	63 9f       	mul	r22, r19
    1e26:	aa 27       	eor	r26, r26
    1e28:	f0 0d       	add	r31, r0
    1e2a:	b1 1d       	adc	r27, r1
    1e2c:	aa 1f       	adc	r26, r26
    1e2e:	64 9f       	mul	r22, r20
    1e30:	66 27       	eor	r22, r22
    1e32:	b0 0d       	add	r27, r0
    1e34:	a1 1d       	adc	r26, r1
    1e36:	66 1f       	adc	r22, r22
    1e38:	82 9f       	mul	r24, r18
    1e3a:	22 27       	eor	r18, r18
    1e3c:	b0 0d       	add	r27, r0
    1e3e:	a1 1d       	adc	r26, r1
    1e40:	62 1f       	adc	r22, r18
    1e42:	73 9f       	mul	r23, r19
    1e44:	b0 0d       	add	r27, r0
    1e46:	a1 1d       	adc	r26, r1
    1e48:	62 1f       	adc	r22, r18
    1e4a:	83 9f       	mul	r24, r19
    1e4c:	a0 0d       	add	r26, r0
    1e4e:	61 1d       	adc	r22, r1
    1e50:	22 1f       	adc	r18, r18
    1e52:	74 9f       	mul	r23, r20
    1e54:	33 27       	eor	r19, r19
    1e56:	a0 0d       	add	r26, r0
    1e58:	61 1d       	adc	r22, r1
    1e5a:	23 1f       	adc	r18, r19
    1e5c:	84 9f       	mul	r24, r20
    1e5e:	60 0d       	add	r22, r0
    1e60:	21 1d       	adc	r18, r1
    1e62:	82 2f       	mov	r24, r18
    1e64:	76 2f       	mov	r23, r22
    1e66:	6a 2f       	mov	r22, r26
    1e68:	11 24       	eor	r1, r1
    1e6a:	9f 57       	subi	r25, 0x7F	; 127
    1e6c:	50 40       	sbci	r21, 0x00	; 0
    1e6e:	9a f0       	brmi	.+38     	; 0x1e96 <__mulsf3_pse+0x88>
    1e70:	f1 f0       	breq	.+60     	; 0x1eae <__mulsf3_pse+0xa0>
    1e72:	88 23       	and	r24, r24
    1e74:	4a f0       	brmi	.+18     	; 0x1e88 <__mulsf3_pse+0x7a>
    1e76:	ee 0f       	add	r30, r30
    1e78:	ff 1f       	adc	r31, r31
    1e7a:	bb 1f       	adc	r27, r27
    1e7c:	66 1f       	adc	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	88 1f       	adc	r24, r24
    1e82:	91 50       	subi	r25, 0x01	; 1
    1e84:	50 40       	sbci	r21, 0x00	; 0
    1e86:	a9 f7       	brne	.-22     	; 0x1e72 <__mulsf3_pse+0x64>
    1e88:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8a:	51 05       	cpc	r21, r1
    1e8c:	80 f0       	brcs	.+32     	; 0x1eae <__mulsf3_pse+0xa0>
    1e8e:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_inf>
    1e92:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_szero>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	e4 f3       	brlt	.-8      	; 0x1e92 <__mulsf3_pse+0x84>
    1e9a:	98 3e       	cpi	r25, 0xE8	; 232
    1e9c:	d4 f3       	brlt	.-12     	; 0x1e92 <__mulsf3_pse+0x84>
    1e9e:	86 95       	lsr	r24
    1ea0:	77 95       	ror	r23
    1ea2:	67 95       	ror	r22
    1ea4:	b7 95       	ror	r27
    1ea6:	f7 95       	ror	r31
    1ea8:	e7 95       	ror	r30
    1eaa:	9f 5f       	subi	r25, 0xFF	; 255
    1eac:	c1 f7       	brne	.-16     	; 0x1e9e <__mulsf3_pse+0x90>
    1eae:	fe 2b       	or	r31, r30
    1eb0:	88 0f       	add	r24, r24
    1eb2:	91 1d       	adc	r25, r1
    1eb4:	96 95       	lsr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	97 f9       	bld	r25, 7
    1eba:	08 95       	ret

00001ebc <square>:
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__mulsf3>

00001ec4 <__subsf3>:
    1ec4:	50 58       	subi	r21, 0x80	; 128

00001ec6 <__addsf3>:
    1ec6:	bb 27       	eor	r27, r27
    1ec8:	aa 27       	eor	r26, r26
    1eca:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__addsf3x>
    1ece:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__fp_round>
    1ed2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscA>
    1ed6:	38 f0       	brcs	.+14     	; 0x1ee6 <__addsf3+0x20>
    1ed8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_pscB>
    1edc:	20 f0       	brcs	.+8      	; 0x1ee6 <__addsf3+0x20>
    1ede:	39 f4       	brne	.+14     	; 0x1eee <__addsf3+0x28>
    1ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee2:	19 f4       	brne	.+6      	; 0x1eea <__addsf3+0x24>
    1ee4:	26 f4       	brtc	.+8      	; 0x1eee <__addsf3+0x28>
    1ee6:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_nan>
    1eea:	0e f4       	brtc	.+2      	; 0x1eee <__addsf3+0x28>
    1eec:	e0 95       	com	r30
    1eee:	e7 fb       	bst	r30, 7
    1ef0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_inf>

00001ef4 <__addsf3x>:
    1ef4:	e9 2f       	mov	r30, r25
    1ef6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__fp_split3>
    1efa:	58 f3       	brcs	.-42     	; 0x1ed2 <__addsf3+0xc>
    1efc:	ba 17       	cp	r27, r26
    1efe:	62 07       	cpc	r22, r18
    1f00:	73 07       	cpc	r23, r19
    1f02:	84 07       	cpc	r24, r20
    1f04:	95 07       	cpc	r25, r21
    1f06:	20 f0       	brcs	.+8      	; 0x1f10 <__addsf3x+0x1c>
    1f08:	79 f4       	brne	.+30     	; 0x1f28 <__addsf3x+0x34>
    1f0a:	a6 f5       	brtc	.+104    	; 0x1f74 <__addsf3x+0x80>
    1f0c:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__fp_zero>
    1f10:	0e f4       	brtc	.+2      	; 0x1f14 <__addsf3x+0x20>
    1f12:	e0 95       	com	r30
    1f14:	0b 2e       	mov	r0, r27
    1f16:	ba 2f       	mov	r27, r26
    1f18:	a0 2d       	mov	r26, r0
    1f1a:	0b 01       	movw	r0, r22
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	90 01       	movw	r18, r0
    1f20:	0c 01       	movw	r0, r24
    1f22:	ca 01       	movw	r24, r20
    1f24:	a0 01       	movw	r20, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	ff 27       	eor	r31, r31
    1f2a:	59 1b       	sub	r21, r25
    1f2c:	99 f0       	breq	.+38     	; 0x1f54 <__addsf3x+0x60>
    1f2e:	59 3f       	cpi	r21, 0xF9	; 249
    1f30:	50 f4       	brcc	.+20     	; 0x1f46 <__addsf3x+0x52>
    1f32:	50 3e       	cpi	r21, 0xE0	; 224
    1f34:	68 f1       	brcs	.+90     	; 0x1f90 <__addsf3x+0x9c>
    1f36:	1a 16       	cp	r1, r26
    1f38:	f0 40       	sbci	r31, 0x00	; 0
    1f3a:	a2 2f       	mov	r26, r18
    1f3c:	23 2f       	mov	r18, r19
    1f3e:	34 2f       	mov	r19, r20
    1f40:	44 27       	eor	r20, r20
    1f42:	58 5f       	subi	r21, 0xF8	; 248
    1f44:	f3 cf       	rjmp	.-26     	; 0x1f2c <__addsf3x+0x38>
    1f46:	46 95       	lsr	r20
    1f48:	37 95       	ror	r19
    1f4a:	27 95       	ror	r18
    1f4c:	a7 95       	ror	r26
    1f4e:	f0 40       	sbci	r31, 0x00	; 0
    1f50:	53 95       	inc	r21
    1f52:	c9 f7       	brne	.-14     	; 0x1f46 <__addsf3x+0x52>
    1f54:	7e f4       	brtc	.+30     	; 0x1f74 <__addsf3x+0x80>
    1f56:	1f 16       	cp	r1, r31
    1f58:	ba 0b       	sbc	r27, r26
    1f5a:	62 0b       	sbc	r22, r18
    1f5c:	73 0b       	sbc	r23, r19
    1f5e:	84 0b       	sbc	r24, r20
    1f60:	ba f0       	brmi	.+46     	; 0x1f90 <__addsf3x+0x9c>
    1f62:	91 50       	subi	r25, 0x01	; 1
    1f64:	a1 f0       	breq	.+40     	; 0x1f8e <__addsf3x+0x9a>
    1f66:	ff 0f       	add	r31, r31
    1f68:	bb 1f       	adc	r27, r27
    1f6a:	66 1f       	adc	r22, r22
    1f6c:	77 1f       	adc	r23, r23
    1f6e:	88 1f       	adc	r24, r24
    1f70:	c2 f7       	brpl	.-16     	; 0x1f62 <__addsf3x+0x6e>
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <__addsf3x+0x9c>
    1f74:	ba 0f       	add	r27, r26
    1f76:	62 1f       	adc	r22, r18
    1f78:	73 1f       	adc	r23, r19
    1f7a:	84 1f       	adc	r24, r20
    1f7c:	48 f4       	brcc	.+18     	; 0x1f90 <__addsf3x+0x9c>
    1f7e:	87 95       	ror	r24
    1f80:	77 95       	ror	r23
    1f82:	67 95       	ror	r22
    1f84:	b7 95       	ror	r27
    1f86:	f7 95       	ror	r31
    1f88:	9e 3f       	cpi	r25, 0xFE	; 254
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <__addsf3x+0x9a>
    1f8c:	b0 cf       	rjmp	.-160    	; 0x1eee <__addsf3+0x28>
    1f8e:	93 95       	inc	r25
    1f90:	88 0f       	add	r24, r24
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <__addsf3x+0xa2>
    1f94:	99 27       	eor	r25, r25
    1f96:	ee 0f       	add	r30, r30
    1f98:	97 95       	ror	r25
    1f9a:	87 95       	ror	r24
    1f9c:	08 95       	ret

00001f9e <__divmodhi4>:
    1f9e:	97 fb       	bst	r25, 7
    1fa0:	07 2e       	mov	r0, r23
    1fa2:	16 f4       	brtc	.+4      	; 0x1fa8 <__divmodhi4+0xa>
    1fa4:	00 94       	com	r0
    1fa6:	07 d0       	rcall	.+14     	; 0x1fb6 <__divmodhi4_neg1>
    1fa8:	77 fd       	sbrc	r23, 7
    1faa:	09 d0       	rcall	.+18     	; 0x1fbe <__divmodhi4_neg2>
    1fac:	0e 94 05 10 	call	0x200a	; 0x200a <__udivmodhi4>
    1fb0:	07 fc       	sbrc	r0, 7
    1fb2:	05 d0       	rcall	.+10     	; 0x1fbe <__divmodhi4_neg2>
    1fb4:	3e f4       	brtc	.+14     	; 0x1fc4 <__divmodhi4_exit>

00001fb6 <__divmodhi4_neg1>:
    1fb6:	90 95       	com	r25
    1fb8:	81 95       	neg	r24
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	08 95       	ret

00001fbe <__divmodhi4_neg2>:
    1fbe:	70 95       	com	r23
    1fc0:	61 95       	neg	r22
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255

00001fc4 <__divmodhi4_exit>:
    1fc4:	08 95       	ret

00001fc6 <__udivmodsi4>:
    1fc6:	a1 e2       	ldi	r26, 0x21	; 33
    1fc8:	1a 2e       	mov	r1, r26
    1fca:	aa 1b       	sub	r26, r26
    1fcc:	bb 1b       	sub	r27, r27
    1fce:	fd 01       	movw	r30, r26
    1fd0:	0d c0       	rjmp	.+26     	; 0x1fec <__udivmodsi4_ep>

00001fd2 <__udivmodsi4_loop>:
    1fd2:	aa 1f       	adc	r26, r26
    1fd4:	bb 1f       	adc	r27, r27
    1fd6:	ee 1f       	adc	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	a2 17       	cp	r26, r18
    1fdc:	b3 07       	cpc	r27, r19
    1fde:	e4 07       	cpc	r30, r20
    1fe0:	f5 07       	cpc	r31, r21
    1fe2:	20 f0       	brcs	.+8      	; 0x1fec <__udivmodsi4_ep>
    1fe4:	a2 1b       	sub	r26, r18
    1fe6:	b3 0b       	sbc	r27, r19
    1fe8:	e4 0b       	sbc	r30, r20
    1fea:	f5 0b       	sbc	r31, r21

00001fec <__udivmodsi4_ep>:
    1fec:	66 1f       	adc	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	1a 94       	dec	r1
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <__udivmodsi4_loop>
    1ff8:	60 95       	com	r22
    1ffa:	70 95       	com	r23
    1ffc:	80 95       	com	r24
    1ffe:	90 95       	com	r25
    2000:	9b 01       	movw	r18, r22
    2002:	ac 01       	movw	r20, r24
    2004:	bd 01       	movw	r22, r26
    2006:	cf 01       	movw	r24, r30
    2008:	08 95       	ret

0000200a <__udivmodhi4>:
    200a:	aa 1b       	sub	r26, r26
    200c:	bb 1b       	sub	r27, r27
    200e:	51 e1       	ldi	r21, 0x11	; 17
    2010:	07 c0       	rjmp	.+14     	; 0x2020 <__udivmodhi4_ep>

00002012 <__udivmodhi4_loop>:
    2012:	aa 1f       	adc	r26, r26
    2014:	bb 1f       	adc	r27, r27
    2016:	a6 17       	cp	r26, r22
    2018:	b7 07       	cpc	r27, r23
    201a:	10 f0       	brcs	.+4      	; 0x2020 <__udivmodhi4_ep>
    201c:	a6 1b       	sub	r26, r22
    201e:	b7 0b       	sbc	r27, r23

00002020 <__udivmodhi4_ep>:
    2020:	88 1f       	adc	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	5a 95       	dec	r21
    2026:	a9 f7       	brne	.-22     	; 0x2012 <__udivmodhi4_loop>
    2028:	80 95       	com	r24
    202a:	90 95       	com	r25
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	08 95       	ret

00002032 <__itoa_ncheck>:
    2032:	bb 27       	eor	r27, r27
    2034:	4a 30       	cpi	r20, 0x0A	; 10
    2036:	31 f4       	brne	.+12     	; 0x2044 <__itoa_ncheck+0x12>
    2038:	99 23       	and	r25, r25
    203a:	22 f4       	brpl	.+8      	; 0x2044 <__itoa_ncheck+0x12>
    203c:	bd e2       	ldi	r27, 0x2D	; 45
    203e:	90 95       	com	r25
    2040:	81 95       	neg	r24
    2042:	9f 4f       	sbci	r25, 0xFF	; 255
    2044:	0c 94 25 10 	jmp	0x204a	; 0x204a <__utoa_common>

00002048 <__utoa_ncheck>:
    2048:	bb 27       	eor	r27, r27

0000204a <__utoa_common>:
    204a:	fb 01       	movw	r30, r22
    204c:	55 27       	eor	r21, r21
    204e:	aa 27       	eor	r26, r26
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	aa 1f       	adc	r26, r26
    2056:	a4 17       	cp	r26, r20
    2058:	10 f0       	brcs	.+4      	; 0x205e <__utoa_common+0x14>
    205a:	a4 1b       	sub	r26, r20
    205c:	83 95       	inc	r24
    205e:	50 51       	subi	r21, 0x10	; 16
    2060:	b9 f7       	brne	.-18     	; 0x2050 <__utoa_common+0x6>
    2062:	a0 5d       	subi	r26, 0xD0	; 208
    2064:	aa 33       	cpi	r26, 0x3A	; 58
    2066:	08 f0       	brcs	.+2      	; 0x206a <__utoa_common+0x20>
    2068:	a9 5d       	subi	r26, 0xD9	; 217
    206a:	a1 93       	st	Z+, r26
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	79 f7       	brne	.-34     	; 0x204e <__utoa_common+0x4>
    2070:	b1 11       	cpse	r27, r1
    2072:	b1 93       	st	Z+, r27
    2074:	11 92       	st	Z+, r1
    2076:	cb 01       	movw	r24, r22
    2078:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <strrev>

0000207c <fdevopen>:
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	31 f4       	brne	.+12     	; 0x2094 <fdevopen+0x18>
    2088:	61 15       	cp	r22, r1
    208a:	71 05       	cpc	r23, r1
    208c:	19 f4       	brne	.+6      	; 0x2094 <fdevopen+0x18>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	3a c0       	rjmp	.+116    	; 0x2108 <fdevopen+0x8c>
    2094:	8b 01       	movw	r16, r22
    2096:	ec 01       	movw	r28, r24
    2098:	6e e0       	ldi	r22, 0x0E	; 14
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 80 12 	call	0x2500	; 0x2500 <calloc>
    20a4:	fc 01       	movw	r30, r24
    20a6:	89 2b       	or	r24, r25
    20a8:	91 f3       	breq	.-28     	; 0x208e <fdevopen+0x12>
    20aa:	80 e8       	ldi	r24, 0x80	; 128
    20ac:	83 83       	std	Z+3, r24	; 0x03
    20ae:	01 15       	cp	r16, r1
    20b0:	11 05       	cpc	r17, r1
    20b2:	71 f0       	breq	.+28     	; 0x20d0 <fdevopen+0x54>
    20b4:	13 87       	std	Z+11, r17	; 0x0b
    20b6:	02 87       	std	Z+10, r16	; 0x0a
    20b8:	81 e8       	ldi	r24, 0x81	; 129
    20ba:	83 83       	std	Z+3, r24	; 0x03
    20bc:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__iob>
    20c0:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <__iob+0x1>
    20c4:	89 2b       	or	r24, r25
    20c6:	21 f4       	brne	.+8      	; 0x20d0 <fdevopen+0x54>
    20c8:	f0 93 0a 04 	sts	0x040A, r31	; 0x80040a <__iob+0x1>
    20cc:	e0 93 09 04 	sts	0x0409, r30	; 0x800409 <__iob>
    20d0:	20 97       	sbiw	r28, 0x00	; 0
    20d2:	c9 f0       	breq	.+50     	; 0x2106 <fdevopen+0x8a>
    20d4:	d1 87       	std	Z+9, r29	; 0x09
    20d6:	c0 87       	std	Z+8, r28	; 0x08
    20d8:	83 81       	ldd	r24, Z+3	; 0x03
    20da:	82 60       	ori	r24, 0x02	; 2
    20dc:	83 83       	std	Z+3, r24	; 0x03
    20de:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <__iob+0x2>
    20e2:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <__iob+0x3>
    20e6:	89 2b       	or	r24, r25
    20e8:	71 f4       	brne	.+28     	; 0x2106 <fdevopen+0x8a>
    20ea:	f0 93 0c 04 	sts	0x040C, r31	; 0x80040c <__iob+0x3>
    20ee:	e0 93 0b 04 	sts	0x040B, r30	; 0x80040b <__iob+0x2>
    20f2:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <__iob+0x4>
    20f6:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <__iob+0x5>
    20fa:	89 2b       	or	r24, r25
    20fc:	21 f4       	brne	.+8      	; 0x2106 <fdevopen+0x8a>
    20fe:	f0 93 0e 04 	sts	0x040E, r31	; 0x80040e <__iob+0x5>
    2102:	e0 93 0d 04 	sts	0x040D, r30	; 0x80040d <__iob+0x4>
    2106:	cf 01       	movw	r24, r30
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <printf>:
    2112:	a0 e0       	ldi	r26, 0x00	; 0
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ef e8       	ldi	r30, 0x8F	; 143
    2118:	f0 e1       	ldi	r31, 0x10	; 16
    211a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x20>
    211e:	ae 01       	movw	r20, r28
    2120:	4b 5f       	subi	r20, 0xFB	; 251
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	fa 01       	movw	r30, r20
    2126:	61 91       	ld	r22, Z+
    2128:	71 91       	ld	r23, Z+
    212a:	af 01       	movw	r20, r30
    212c:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <__iob+0x2>
    2130:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <__iob+0x3>
    2134:	0e 94 9f 10 	call	0x213e	; 0x213e <vfprintf>
    2138:	e2 e0       	ldi	r30, 0x02	; 2
    213a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x20>

0000213e <vfprintf>:
    213e:	ab e0       	ldi	r26, 0x0B	; 11
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 ea       	ldi	r30, 0xA5	; 165
    2144:	f0 e1       	ldi	r31, 0x10	; 16
    2146:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__>
    214a:	6c 01       	movw	r12, r24
    214c:	7b 01       	movw	r14, r22
    214e:	8a 01       	movw	r16, r20
    2150:	fc 01       	movw	r30, r24
    2152:	17 82       	std	Z+7, r1	; 0x07
    2154:	16 82       	std	Z+6, r1	; 0x06
    2156:	83 81       	ldd	r24, Z+3	; 0x03
    2158:	81 ff       	sbrs	r24, 1
    215a:	cc c1       	rjmp	.+920    	; 0x24f4 <vfprintf+0x3b6>
    215c:	ce 01       	movw	r24, r28
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	3c 01       	movw	r6, r24
    2162:	f6 01       	movw	r30, r12
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	f7 01       	movw	r30, r14
    2168:	93 fd       	sbrc	r25, 3
    216a:	85 91       	lpm	r24, Z+
    216c:	93 ff       	sbrs	r25, 3
    216e:	81 91       	ld	r24, Z+
    2170:	7f 01       	movw	r14, r30
    2172:	88 23       	and	r24, r24
    2174:	09 f4       	brne	.+2      	; 0x2178 <vfprintf+0x3a>
    2176:	ba c1       	rjmp	.+884    	; 0x24ec <vfprintf+0x3ae>
    2178:	85 32       	cpi	r24, 0x25	; 37
    217a:	39 f4       	brne	.+14     	; 0x218a <vfprintf+0x4c>
    217c:	93 fd       	sbrc	r25, 3
    217e:	85 91       	lpm	r24, Z+
    2180:	93 ff       	sbrs	r25, 3
    2182:	81 91       	ld	r24, Z+
    2184:	7f 01       	movw	r14, r30
    2186:	85 32       	cpi	r24, 0x25	; 37
    2188:	29 f4       	brne	.+10     	; 0x2194 <vfprintf+0x56>
    218a:	b6 01       	movw	r22, r12
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    2192:	e7 cf       	rjmp	.-50     	; 0x2162 <vfprintf+0x24>
    2194:	91 2c       	mov	r9, r1
    2196:	21 2c       	mov	r2, r1
    2198:	31 2c       	mov	r3, r1
    219a:	ff e1       	ldi	r31, 0x1F	; 31
    219c:	f3 15       	cp	r31, r3
    219e:	d8 f0       	brcs	.+54     	; 0x21d6 <vfprintf+0x98>
    21a0:	8b 32       	cpi	r24, 0x2B	; 43
    21a2:	79 f0       	breq	.+30     	; 0x21c2 <vfprintf+0x84>
    21a4:	38 f4       	brcc	.+14     	; 0x21b4 <vfprintf+0x76>
    21a6:	80 32       	cpi	r24, 0x20	; 32
    21a8:	79 f0       	breq	.+30     	; 0x21c8 <vfprintf+0x8a>
    21aa:	83 32       	cpi	r24, 0x23	; 35
    21ac:	a1 f4       	brne	.+40     	; 0x21d6 <vfprintf+0x98>
    21ae:	23 2d       	mov	r18, r3
    21b0:	20 61       	ori	r18, 0x10	; 16
    21b2:	1d c0       	rjmp	.+58     	; 0x21ee <vfprintf+0xb0>
    21b4:	8d 32       	cpi	r24, 0x2D	; 45
    21b6:	61 f0       	breq	.+24     	; 0x21d0 <vfprintf+0x92>
    21b8:	80 33       	cpi	r24, 0x30	; 48
    21ba:	69 f4       	brne	.+26     	; 0x21d6 <vfprintf+0x98>
    21bc:	23 2d       	mov	r18, r3
    21be:	21 60       	ori	r18, 0x01	; 1
    21c0:	16 c0       	rjmp	.+44     	; 0x21ee <vfprintf+0xb0>
    21c2:	83 2d       	mov	r24, r3
    21c4:	82 60       	ori	r24, 0x02	; 2
    21c6:	38 2e       	mov	r3, r24
    21c8:	e3 2d       	mov	r30, r3
    21ca:	e4 60       	ori	r30, 0x04	; 4
    21cc:	3e 2e       	mov	r3, r30
    21ce:	2a c0       	rjmp	.+84     	; 0x2224 <vfprintf+0xe6>
    21d0:	f3 2d       	mov	r31, r3
    21d2:	f8 60       	ori	r31, 0x08	; 8
    21d4:	1d c0       	rjmp	.+58     	; 0x2210 <vfprintf+0xd2>
    21d6:	37 fc       	sbrc	r3, 7
    21d8:	2d c0       	rjmp	.+90     	; 0x2234 <vfprintf+0xf6>
    21da:	20 ed       	ldi	r18, 0xD0	; 208
    21dc:	28 0f       	add	r18, r24
    21de:	2a 30       	cpi	r18, 0x0A	; 10
    21e0:	40 f0       	brcs	.+16     	; 0x21f2 <vfprintf+0xb4>
    21e2:	8e 32       	cpi	r24, 0x2E	; 46
    21e4:	b9 f4       	brne	.+46     	; 0x2214 <vfprintf+0xd6>
    21e6:	36 fc       	sbrc	r3, 6
    21e8:	81 c1       	rjmp	.+770    	; 0x24ec <vfprintf+0x3ae>
    21ea:	23 2d       	mov	r18, r3
    21ec:	20 64       	ori	r18, 0x40	; 64
    21ee:	32 2e       	mov	r3, r18
    21f0:	19 c0       	rjmp	.+50     	; 0x2224 <vfprintf+0xe6>
    21f2:	36 fe       	sbrs	r3, 6
    21f4:	06 c0       	rjmp	.+12     	; 0x2202 <vfprintf+0xc4>
    21f6:	8a e0       	ldi	r24, 0x0A	; 10
    21f8:	98 9e       	mul	r9, r24
    21fa:	20 0d       	add	r18, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	92 2e       	mov	r9, r18
    2200:	11 c0       	rjmp	.+34     	; 0x2224 <vfprintf+0xe6>
    2202:	ea e0       	ldi	r30, 0x0A	; 10
    2204:	2e 9e       	mul	r2, r30
    2206:	20 0d       	add	r18, r0
    2208:	11 24       	eor	r1, r1
    220a:	22 2e       	mov	r2, r18
    220c:	f3 2d       	mov	r31, r3
    220e:	f0 62       	ori	r31, 0x20	; 32
    2210:	3f 2e       	mov	r3, r31
    2212:	08 c0       	rjmp	.+16     	; 0x2224 <vfprintf+0xe6>
    2214:	8c 36       	cpi	r24, 0x6C	; 108
    2216:	21 f4       	brne	.+8      	; 0x2220 <vfprintf+0xe2>
    2218:	83 2d       	mov	r24, r3
    221a:	80 68       	ori	r24, 0x80	; 128
    221c:	38 2e       	mov	r3, r24
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <vfprintf+0xe6>
    2220:	88 36       	cpi	r24, 0x68	; 104
    2222:	41 f4       	brne	.+16     	; 0x2234 <vfprintf+0xf6>
    2224:	f7 01       	movw	r30, r14
    2226:	93 fd       	sbrc	r25, 3
    2228:	85 91       	lpm	r24, Z+
    222a:	93 ff       	sbrs	r25, 3
    222c:	81 91       	ld	r24, Z+
    222e:	7f 01       	movw	r14, r30
    2230:	81 11       	cpse	r24, r1
    2232:	b3 cf       	rjmp	.-154    	; 0x219a <vfprintf+0x5c>
    2234:	98 2f       	mov	r25, r24
    2236:	9f 7d       	andi	r25, 0xDF	; 223
    2238:	95 54       	subi	r25, 0x45	; 69
    223a:	93 30       	cpi	r25, 0x03	; 3
    223c:	28 f4       	brcc	.+10     	; 0x2248 <vfprintf+0x10a>
    223e:	0c 5f       	subi	r16, 0xFC	; 252
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	9f e3       	ldi	r25, 0x3F	; 63
    2244:	99 83       	std	Y+1, r25	; 0x01
    2246:	0d c0       	rjmp	.+26     	; 0x2262 <vfprintf+0x124>
    2248:	83 36       	cpi	r24, 0x63	; 99
    224a:	31 f0       	breq	.+12     	; 0x2258 <vfprintf+0x11a>
    224c:	83 37       	cpi	r24, 0x73	; 115
    224e:	71 f0       	breq	.+28     	; 0x226c <vfprintf+0x12e>
    2250:	83 35       	cpi	r24, 0x53	; 83
    2252:	09 f0       	breq	.+2      	; 0x2256 <vfprintf+0x118>
    2254:	59 c0       	rjmp	.+178    	; 0x2308 <vfprintf+0x1ca>
    2256:	21 c0       	rjmp	.+66     	; 0x229a <vfprintf+0x15c>
    2258:	f8 01       	movw	r30, r16
    225a:	80 81       	ld	r24, Z
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	0e 5f       	subi	r16, 0xFE	; 254
    2260:	1f 4f       	sbci	r17, 0xFF	; 255
    2262:	88 24       	eor	r8, r8
    2264:	83 94       	inc	r8
    2266:	91 2c       	mov	r9, r1
    2268:	53 01       	movw	r10, r6
    226a:	13 c0       	rjmp	.+38     	; 0x2292 <vfprintf+0x154>
    226c:	28 01       	movw	r4, r16
    226e:	f2 e0       	ldi	r31, 0x02	; 2
    2270:	4f 0e       	add	r4, r31
    2272:	51 1c       	adc	r5, r1
    2274:	f8 01       	movw	r30, r16
    2276:	a0 80       	ld	r10, Z
    2278:	b1 80       	ldd	r11, Z+1	; 0x01
    227a:	36 fe       	sbrs	r3, 6
    227c:	03 c0       	rjmp	.+6      	; 0x2284 <vfprintf+0x146>
    227e:	69 2d       	mov	r22, r9
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <vfprintf+0x14a>
    2284:	6f ef       	ldi	r22, 0xFF	; 255
    2286:	7f ef       	ldi	r23, 0xFF	; 255
    2288:	c5 01       	movw	r24, r10
    228a:	0e 94 cf 13 	call	0x279e	; 0x279e <strnlen>
    228e:	4c 01       	movw	r8, r24
    2290:	82 01       	movw	r16, r4
    2292:	f3 2d       	mov	r31, r3
    2294:	ff 77       	andi	r31, 0x7F	; 127
    2296:	3f 2e       	mov	r3, r31
    2298:	16 c0       	rjmp	.+44     	; 0x22c6 <vfprintf+0x188>
    229a:	28 01       	movw	r4, r16
    229c:	22 e0       	ldi	r18, 0x02	; 2
    229e:	42 0e       	add	r4, r18
    22a0:	51 1c       	adc	r5, r1
    22a2:	f8 01       	movw	r30, r16
    22a4:	a0 80       	ld	r10, Z
    22a6:	b1 80       	ldd	r11, Z+1	; 0x01
    22a8:	36 fe       	sbrs	r3, 6
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <vfprintf+0x174>
    22ac:	69 2d       	mov	r22, r9
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <vfprintf+0x178>
    22b2:	6f ef       	ldi	r22, 0xFF	; 255
    22b4:	7f ef       	ldi	r23, 0xFF	; 255
    22b6:	c5 01       	movw	r24, r10
    22b8:	0e 94 bd 13 	call	0x277a	; 0x277a <strnlen_P>
    22bc:	4c 01       	movw	r8, r24
    22be:	f3 2d       	mov	r31, r3
    22c0:	f0 68       	ori	r31, 0x80	; 128
    22c2:	3f 2e       	mov	r3, r31
    22c4:	82 01       	movw	r16, r4
    22c6:	33 fc       	sbrc	r3, 3
    22c8:	1b c0       	rjmp	.+54     	; 0x2300 <vfprintf+0x1c2>
    22ca:	82 2d       	mov	r24, r2
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	88 16       	cp	r8, r24
    22d0:	99 06       	cpc	r9, r25
    22d2:	b0 f4       	brcc	.+44     	; 0x2300 <vfprintf+0x1c2>
    22d4:	b6 01       	movw	r22, r12
    22d6:	80 e2       	ldi	r24, 0x20	; 32
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    22de:	2a 94       	dec	r2
    22e0:	f4 cf       	rjmp	.-24     	; 0x22ca <vfprintf+0x18c>
    22e2:	f5 01       	movw	r30, r10
    22e4:	37 fc       	sbrc	r3, 7
    22e6:	85 91       	lpm	r24, Z+
    22e8:	37 fe       	sbrs	r3, 7
    22ea:	81 91       	ld	r24, Z+
    22ec:	5f 01       	movw	r10, r30
    22ee:	b6 01       	movw	r22, r12
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    22f6:	21 10       	cpse	r2, r1
    22f8:	2a 94       	dec	r2
    22fa:	21 e0       	ldi	r18, 0x01	; 1
    22fc:	82 1a       	sub	r8, r18
    22fe:	91 08       	sbc	r9, r1
    2300:	81 14       	cp	r8, r1
    2302:	91 04       	cpc	r9, r1
    2304:	71 f7       	brne	.-36     	; 0x22e2 <vfprintf+0x1a4>
    2306:	e8 c0       	rjmp	.+464    	; 0x24d8 <vfprintf+0x39a>
    2308:	84 36       	cpi	r24, 0x64	; 100
    230a:	11 f0       	breq	.+4      	; 0x2310 <vfprintf+0x1d2>
    230c:	89 36       	cpi	r24, 0x69	; 105
    230e:	41 f5       	brne	.+80     	; 0x2360 <vfprintf+0x222>
    2310:	f8 01       	movw	r30, r16
    2312:	37 fe       	sbrs	r3, 7
    2314:	07 c0       	rjmp	.+14     	; 0x2324 <vfprintf+0x1e6>
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	0c 5f       	subi	r16, 0xFC	; 252
    2320:	1f 4f       	sbci	r17, 0xFF	; 255
    2322:	08 c0       	rjmp	.+16     	; 0x2334 <vfprintf+0x1f6>
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	07 2e       	mov	r0, r23
    232a:	00 0c       	add	r0, r0
    232c:	88 0b       	sbc	r24, r24
    232e:	99 0b       	sbc	r25, r25
    2330:	0e 5f       	subi	r16, 0xFE	; 254
    2332:	1f 4f       	sbci	r17, 0xFF	; 255
    2334:	f3 2d       	mov	r31, r3
    2336:	ff 76       	andi	r31, 0x6F	; 111
    2338:	3f 2e       	mov	r3, r31
    233a:	97 ff       	sbrs	r25, 7
    233c:	09 c0       	rjmp	.+18     	; 0x2350 <vfprintf+0x212>
    233e:	90 95       	com	r25
    2340:	80 95       	com	r24
    2342:	70 95       	com	r23
    2344:	61 95       	neg	r22
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	8f 4f       	sbci	r24, 0xFF	; 255
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	f0 68       	ori	r31, 0x80	; 128
    234e:	3f 2e       	mov	r3, r31
    2350:	2a e0       	ldi	r18, 0x0A	; 10
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	a3 01       	movw	r20, r6
    2356:	0e 94 26 14 	call	0x284c	; 0x284c <__ultoa_invert>
    235a:	88 2e       	mov	r8, r24
    235c:	86 18       	sub	r8, r6
    235e:	45 c0       	rjmp	.+138    	; 0x23ea <vfprintf+0x2ac>
    2360:	85 37       	cpi	r24, 0x75	; 117
    2362:	31 f4       	brne	.+12     	; 0x2370 <vfprintf+0x232>
    2364:	23 2d       	mov	r18, r3
    2366:	2f 7e       	andi	r18, 0xEF	; 239
    2368:	b2 2e       	mov	r11, r18
    236a:	2a e0       	ldi	r18, 0x0A	; 10
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	25 c0       	rjmp	.+74     	; 0x23ba <vfprintf+0x27c>
    2370:	93 2d       	mov	r25, r3
    2372:	99 7f       	andi	r25, 0xF9	; 249
    2374:	b9 2e       	mov	r11, r25
    2376:	8f 36       	cpi	r24, 0x6F	; 111
    2378:	c1 f0       	breq	.+48     	; 0x23aa <vfprintf+0x26c>
    237a:	18 f4       	brcc	.+6      	; 0x2382 <vfprintf+0x244>
    237c:	88 35       	cpi	r24, 0x58	; 88
    237e:	79 f0       	breq	.+30     	; 0x239e <vfprintf+0x260>
    2380:	b5 c0       	rjmp	.+362    	; 0x24ec <vfprintf+0x3ae>
    2382:	80 37       	cpi	r24, 0x70	; 112
    2384:	19 f0       	breq	.+6      	; 0x238c <vfprintf+0x24e>
    2386:	88 37       	cpi	r24, 0x78	; 120
    2388:	21 f0       	breq	.+8      	; 0x2392 <vfprintf+0x254>
    238a:	b0 c0       	rjmp	.+352    	; 0x24ec <vfprintf+0x3ae>
    238c:	e9 2f       	mov	r30, r25
    238e:	e0 61       	ori	r30, 0x10	; 16
    2390:	be 2e       	mov	r11, r30
    2392:	b4 fe       	sbrs	r11, 4
    2394:	0d c0       	rjmp	.+26     	; 0x23b0 <vfprintf+0x272>
    2396:	fb 2d       	mov	r31, r11
    2398:	f4 60       	ori	r31, 0x04	; 4
    239a:	bf 2e       	mov	r11, r31
    239c:	09 c0       	rjmp	.+18     	; 0x23b0 <vfprintf+0x272>
    239e:	34 fe       	sbrs	r3, 4
    23a0:	0a c0       	rjmp	.+20     	; 0x23b6 <vfprintf+0x278>
    23a2:	29 2f       	mov	r18, r25
    23a4:	26 60       	ori	r18, 0x06	; 6
    23a6:	b2 2e       	mov	r11, r18
    23a8:	06 c0       	rjmp	.+12     	; 0x23b6 <vfprintf+0x278>
    23aa:	28 e0       	ldi	r18, 0x08	; 8
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <vfprintf+0x27c>
    23b0:	20 e1       	ldi	r18, 0x10	; 16
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <vfprintf+0x27c>
    23b6:	20 e1       	ldi	r18, 0x10	; 16
    23b8:	32 e0       	ldi	r19, 0x02	; 2
    23ba:	f8 01       	movw	r30, r16
    23bc:	b7 fe       	sbrs	r11, 7
    23be:	07 c0       	rjmp	.+14     	; 0x23ce <vfprintf+0x290>
    23c0:	60 81       	ld	r22, Z
    23c2:	71 81       	ldd	r23, Z+1	; 0x01
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	0c 5f       	subi	r16, 0xFC	; 252
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	06 c0       	rjmp	.+12     	; 0x23da <vfprintf+0x29c>
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 5f       	subi	r16, 0xFE	; 254
    23d8:	1f 4f       	sbci	r17, 0xFF	; 255
    23da:	a3 01       	movw	r20, r6
    23dc:	0e 94 26 14 	call	0x284c	; 0x284c <__ultoa_invert>
    23e0:	88 2e       	mov	r8, r24
    23e2:	86 18       	sub	r8, r6
    23e4:	fb 2d       	mov	r31, r11
    23e6:	ff 77       	andi	r31, 0x7F	; 127
    23e8:	3f 2e       	mov	r3, r31
    23ea:	36 fe       	sbrs	r3, 6
    23ec:	0d c0       	rjmp	.+26     	; 0x2408 <vfprintf+0x2ca>
    23ee:	23 2d       	mov	r18, r3
    23f0:	2e 7f       	andi	r18, 0xFE	; 254
    23f2:	a2 2e       	mov	r10, r18
    23f4:	89 14       	cp	r8, r9
    23f6:	58 f4       	brcc	.+22     	; 0x240e <vfprintf+0x2d0>
    23f8:	34 fe       	sbrs	r3, 4
    23fa:	0b c0       	rjmp	.+22     	; 0x2412 <vfprintf+0x2d4>
    23fc:	32 fc       	sbrc	r3, 2
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <vfprintf+0x2d4>
    2400:	83 2d       	mov	r24, r3
    2402:	8e 7e       	andi	r24, 0xEE	; 238
    2404:	a8 2e       	mov	r10, r24
    2406:	05 c0       	rjmp	.+10     	; 0x2412 <vfprintf+0x2d4>
    2408:	b8 2c       	mov	r11, r8
    240a:	a3 2c       	mov	r10, r3
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <vfprintf+0x2d6>
    240e:	b8 2c       	mov	r11, r8
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <vfprintf+0x2d6>
    2412:	b9 2c       	mov	r11, r9
    2414:	a4 fe       	sbrs	r10, 4
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <vfprintf+0x2f8>
    2418:	fe 01       	movw	r30, r28
    241a:	e8 0d       	add	r30, r8
    241c:	f1 1d       	adc	r31, r1
    241e:	80 81       	ld	r24, Z
    2420:	80 33       	cpi	r24, 0x30	; 48
    2422:	21 f4       	brne	.+8      	; 0x242c <vfprintf+0x2ee>
    2424:	9a 2d       	mov	r25, r10
    2426:	99 7e       	andi	r25, 0xE9	; 233
    2428:	a9 2e       	mov	r10, r25
    242a:	09 c0       	rjmp	.+18     	; 0x243e <vfprintf+0x300>
    242c:	a2 fe       	sbrs	r10, 2
    242e:	06 c0       	rjmp	.+12     	; 0x243c <vfprintf+0x2fe>
    2430:	b3 94       	inc	r11
    2432:	b3 94       	inc	r11
    2434:	04 c0       	rjmp	.+8      	; 0x243e <vfprintf+0x300>
    2436:	8a 2d       	mov	r24, r10
    2438:	86 78       	andi	r24, 0x86	; 134
    243a:	09 f0       	breq	.+2      	; 0x243e <vfprintf+0x300>
    243c:	b3 94       	inc	r11
    243e:	a3 fc       	sbrc	r10, 3
    2440:	11 c0       	rjmp	.+34     	; 0x2464 <vfprintf+0x326>
    2442:	a0 fe       	sbrs	r10, 0
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <vfprintf+0x314>
    2446:	b2 14       	cp	r11, r2
    2448:	88 f4       	brcc	.+34     	; 0x246c <vfprintf+0x32e>
    244a:	28 0c       	add	r2, r8
    244c:	92 2c       	mov	r9, r2
    244e:	9b 18       	sub	r9, r11
    2450:	0e c0       	rjmp	.+28     	; 0x246e <vfprintf+0x330>
    2452:	b2 14       	cp	r11, r2
    2454:	60 f4       	brcc	.+24     	; 0x246e <vfprintf+0x330>
    2456:	b6 01       	movw	r22, r12
    2458:	80 e2       	ldi	r24, 0x20	; 32
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    2460:	b3 94       	inc	r11
    2462:	f7 cf       	rjmp	.-18     	; 0x2452 <vfprintf+0x314>
    2464:	b2 14       	cp	r11, r2
    2466:	18 f4       	brcc	.+6      	; 0x246e <vfprintf+0x330>
    2468:	2b 18       	sub	r2, r11
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <vfprintf+0x332>
    246c:	98 2c       	mov	r9, r8
    246e:	21 2c       	mov	r2, r1
    2470:	a4 fe       	sbrs	r10, 4
    2472:	10 c0       	rjmp	.+32     	; 0x2494 <vfprintf+0x356>
    2474:	b6 01       	movw	r22, r12
    2476:	80 e3       	ldi	r24, 0x30	; 48
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    247e:	a2 fe       	sbrs	r10, 2
    2480:	17 c0       	rjmp	.+46     	; 0x24b0 <vfprintf+0x372>
    2482:	a1 fc       	sbrc	r10, 1
    2484:	03 c0       	rjmp	.+6      	; 0x248c <vfprintf+0x34e>
    2486:	88 e7       	ldi	r24, 0x78	; 120
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <vfprintf+0x352>
    248c:	88 e5       	ldi	r24, 0x58	; 88
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	b6 01       	movw	r22, r12
    2492:	0c c0       	rjmp	.+24     	; 0x24ac <vfprintf+0x36e>
    2494:	8a 2d       	mov	r24, r10
    2496:	86 78       	andi	r24, 0x86	; 134
    2498:	59 f0       	breq	.+22     	; 0x24b0 <vfprintf+0x372>
    249a:	a1 fe       	sbrs	r10, 1
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <vfprintf+0x364>
    249e:	8b e2       	ldi	r24, 0x2B	; 43
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <vfprintf+0x366>
    24a2:	80 e2       	ldi	r24, 0x20	; 32
    24a4:	a7 fc       	sbrc	r10, 7
    24a6:	8d e2       	ldi	r24, 0x2D	; 45
    24a8:	b6 01       	movw	r22, r12
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    24b0:	89 14       	cp	r8, r9
    24b2:	38 f4       	brcc	.+14     	; 0x24c2 <vfprintf+0x384>
    24b4:	b6 01       	movw	r22, r12
    24b6:	80 e3       	ldi	r24, 0x30	; 48
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    24be:	9a 94       	dec	r9
    24c0:	f7 cf       	rjmp	.-18     	; 0x24b0 <vfprintf+0x372>
    24c2:	8a 94       	dec	r8
    24c4:	f3 01       	movw	r30, r6
    24c6:	e8 0d       	add	r30, r8
    24c8:	f1 1d       	adc	r31, r1
    24ca:	80 81       	ld	r24, Z
    24cc:	b6 01       	movw	r22, r12
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    24d4:	81 10       	cpse	r8, r1
    24d6:	f5 cf       	rjmp	.-22     	; 0x24c2 <vfprintf+0x384>
    24d8:	22 20       	and	r2, r2
    24da:	09 f4       	brne	.+2      	; 0x24de <vfprintf+0x3a0>
    24dc:	42 ce       	rjmp	.-892    	; 0x2162 <vfprintf+0x24>
    24de:	b6 01       	movw	r22, r12
    24e0:	80 e2       	ldi	r24, 0x20	; 32
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <fputc>
    24e8:	2a 94       	dec	r2
    24ea:	f6 cf       	rjmp	.-20     	; 0x24d8 <vfprintf+0x39a>
    24ec:	f6 01       	movw	r30, r12
    24ee:	86 81       	ldd	r24, Z+6	; 0x06
    24f0:	97 81       	ldd	r25, Z+7	; 0x07
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <vfprintf+0x3ba>
    24f4:	8f ef       	ldi	r24, 0xFF	; 255
    24f6:	9f ef       	ldi	r25, 0xFF	; 255
    24f8:	2b 96       	adiw	r28, 0x0b	; 11
    24fa:	e2 e1       	ldi	r30, 0x12	; 18
    24fc:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__>

00002500 <calloc>:
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	86 9f       	mul	r24, r22
    250a:	80 01       	movw	r16, r0
    250c:	87 9f       	mul	r24, r23
    250e:	10 0d       	add	r17, r0
    2510:	96 9f       	mul	r25, r22
    2512:	10 0d       	add	r17, r0
    2514:	11 24       	eor	r1, r1
    2516:	c8 01       	movw	r24, r16
    2518:	0e 94 9c 12 	call	0x2538	; 0x2538 <malloc>
    251c:	ec 01       	movw	r28, r24
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	29 f0       	breq	.+10     	; 0x252c <calloc+0x2c>
    2522:	a8 01       	movw	r20, r16
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	0e 94 c8 13 	call	0x2790	; 0x2790 <memset>
    252c:	ce 01       	movw	r24, r28
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	08 95       	ret

00002538 <malloc>:
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	82 30       	cpi	r24, 0x02	; 2
    2542:	91 05       	cpc	r25, r1
    2544:	10 f4       	brcc	.+4      	; 0x254a <malloc+0x12>
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <__flp>
    254e:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <__flp+0x1>
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	30 97       	sbiw	r30, 0x00	; 0
    255c:	19 f1       	breq	.+70     	; 0x25a4 <malloc+0x6c>
    255e:	40 81       	ld	r20, Z
    2560:	51 81       	ldd	r21, Z+1	; 0x01
    2562:	02 81       	ldd	r16, Z+2	; 0x02
    2564:	13 81       	ldd	r17, Z+3	; 0x03
    2566:	48 17       	cp	r20, r24
    2568:	59 07       	cpc	r21, r25
    256a:	c8 f0       	brcs	.+50     	; 0x259e <malloc+0x66>
    256c:	84 17       	cp	r24, r20
    256e:	95 07       	cpc	r25, r21
    2570:	69 f4       	brne	.+26     	; 0x258c <malloc+0x54>
    2572:	10 97       	sbiw	r26, 0x00	; 0
    2574:	31 f0       	breq	.+12     	; 0x2582 <malloc+0x4a>
    2576:	12 96       	adiw	r26, 0x02	; 2
    2578:	0c 93       	st	X, r16
    257a:	12 97       	sbiw	r26, 0x02	; 2
    257c:	13 96       	adiw	r26, 0x03	; 3
    257e:	1c 93       	st	X, r17
    2580:	27 c0       	rjmp	.+78     	; 0x25d0 <malloc+0x98>
    2582:	00 93 11 04 	sts	0x0411, r16	; 0x800411 <__flp>
    2586:	10 93 12 04 	sts	0x0412, r17	; 0x800412 <__flp+0x1>
    258a:	22 c0       	rjmp	.+68     	; 0x25d0 <malloc+0x98>
    258c:	21 15       	cp	r18, r1
    258e:	31 05       	cpc	r19, r1
    2590:	19 f0       	breq	.+6      	; 0x2598 <malloc+0x60>
    2592:	42 17       	cp	r20, r18
    2594:	53 07       	cpc	r21, r19
    2596:	18 f4       	brcc	.+6      	; 0x259e <malloc+0x66>
    2598:	9a 01       	movw	r18, r20
    259a:	bd 01       	movw	r22, r26
    259c:	ef 01       	movw	r28, r30
    259e:	df 01       	movw	r26, r30
    25a0:	f8 01       	movw	r30, r16
    25a2:	db cf       	rjmp	.-74     	; 0x255a <malloc+0x22>
    25a4:	21 15       	cp	r18, r1
    25a6:	31 05       	cpc	r19, r1
    25a8:	f9 f0       	breq	.+62     	; 0x25e8 <malloc+0xb0>
    25aa:	28 1b       	sub	r18, r24
    25ac:	39 0b       	sbc	r19, r25
    25ae:	24 30       	cpi	r18, 0x04	; 4
    25b0:	31 05       	cpc	r19, r1
    25b2:	80 f4       	brcc	.+32     	; 0x25d4 <malloc+0x9c>
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	61 15       	cp	r22, r1
    25ba:	71 05       	cpc	r23, r1
    25bc:	21 f0       	breq	.+8      	; 0x25c6 <malloc+0x8e>
    25be:	fb 01       	movw	r30, r22
    25c0:	93 83       	std	Z+3, r25	; 0x03
    25c2:	82 83       	std	Z+2, r24	; 0x02
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <malloc+0x96>
    25c6:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <__flp+0x1>
    25ca:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <__flp>
    25ce:	fe 01       	movw	r30, r28
    25d0:	32 96       	adiw	r30, 0x02	; 2
    25d2:	44 c0       	rjmp	.+136    	; 0x265c <malloc+0x124>
    25d4:	fe 01       	movw	r30, r28
    25d6:	e2 0f       	add	r30, r18
    25d8:	f3 1f       	adc	r31, r19
    25da:	81 93       	st	Z+, r24
    25dc:	91 93       	st	Z+, r25
    25de:	22 50       	subi	r18, 0x02	; 2
    25e0:	31 09       	sbc	r19, r1
    25e2:	39 83       	std	Y+1, r19	; 0x01
    25e4:	28 83       	st	Y, r18
    25e6:	3a c0       	rjmp	.+116    	; 0x265c <malloc+0x124>
    25e8:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <__brkval>
    25ec:	30 91 10 04 	lds	r19, 0x0410	; 0x800410 <__brkval+0x1>
    25f0:	23 2b       	or	r18, r19
    25f2:	41 f4       	brne	.+16     	; 0x2604 <malloc+0xcc>
    25f4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25f8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    25fc:	30 93 10 04 	sts	0x0410, r19	; 0x800410 <__brkval+0x1>
    2600:	20 93 0f 04 	sts	0x040F, r18	; 0x80040f <__brkval>
    2604:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2608:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    260c:	21 15       	cp	r18, r1
    260e:	31 05       	cpc	r19, r1
    2610:	41 f4       	brne	.+16     	; 0x2622 <malloc+0xea>
    2612:	2d b7       	in	r18, 0x3d	; 61
    2614:	3e b7       	in	r19, 0x3e	; 62
    2616:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    261a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    261e:	24 1b       	sub	r18, r20
    2620:	35 0b       	sbc	r19, r21
    2622:	e0 91 0f 04 	lds	r30, 0x040F	; 0x80040f <__brkval>
    2626:	f0 91 10 04 	lds	r31, 0x0410	; 0x800410 <__brkval+0x1>
    262a:	e2 17       	cp	r30, r18
    262c:	f3 07       	cpc	r31, r19
    262e:	a0 f4       	brcc	.+40     	; 0x2658 <malloc+0x120>
    2630:	2e 1b       	sub	r18, r30
    2632:	3f 0b       	sbc	r19, r31
    2634:	28 17       	cp	r18, r24
    2636:	39 07       	cpc	r19, r25
    2638:	78 f0       	brcs	.+30     	; 0x2658 <malloc+0x120>
    263a:	ac 01       	movw	r20, r24
    263c:	4e 5f       	subi	r20, 0xFE	; 254
    263e:	5f 4f       	sbci	r21, 0xFF	; 255
    2640:	24 17       	cp	r18, r20
    2642:	35 07       	cpc	r19, r21
    2644:	48 f0       	brcs	.+18     	; 0x2658 <malloc+0x120>
    2646:	4e 0f       	add	r20, r30
    2648:	5f 1f       	adc	r21, r31
    264a:	50 93 10 04 	sts	0x0410, r21	; 0x800410 <__brkval+0x1>
    264e:	40 93 0f 04 	sts	0x040F, r20	; 0x80040f <__brkval>
    2652:	81 93       	st	Z+, r24
    2654:	91 93       	st	Z+, r25
    2656:	02 c0       	rjmp	.+4      	; 0x265c <malloc+0x124>
    2658:	e0 e0       	ldi	r30, 0x00	; 0
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	cf 01       	movw	r24, r30
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	08 95       	ret

00002668 <free>:
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	09 f4       	brne	.+2      	; 0x2672 <free+0xa>
    2670:	81 c0       	rjmp	.+258    	; 0x2774 <free+0x10c>
    2672:	fc 01       	movw	r30, r24
    2674:	32 97       	sbiw	r30, 0x02	; 2
    2676:	13 82       	std	Z+3, r1	; 0x03
    2678:	12 82       	std	Z+2, r1	; 0x02
    267a:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <__flp>
    267e:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <__flp+0x1>
    2682:	10 97       	sbiw	r26, 0x00	; 0
    2684:	81 f4       	brne	.+32     	; 0x26a6 <free+0x3e>
    2686:	20 81       	ld	r18, Z
    2688:	31 81       	ldd	r19, Z+1	; 0x01
    268a:	82 0f       	add	r24, r18
    268c:	93 1f       	adc	r25, r19
    268e:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <__brkval>
    2692:	30 91 10 04 	lds	r19, 0x0410	; 0x800410 <__brkval+0x1>
    2696:	28 17       	cp	r18, r24
    2698:	39 07       	cpc	r19, r25
    269a:	51 f5       	brne	.+84     	; 0x26f0 <free+0x88>
    269c:	f0 93 10 04 	sts	0x0410, r31	; 0x800410 <__brkval+0x1>
    26a0:	e0 93 0f 04 	sts	0x040F, r30	; 0x80040f <__brkval>
    26a4:	67 c0       	rjmp	.+206    	; 0x2774 <free+0x10c>
    26a6:	ed 01       	movw	r28, r26
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	ce 17       	cp	r28, r30
    26ae:	df 07       	cpc	r29, r31
    26b0:	40 f4       	brcc	.+16     	; 0x26c2 <free+0x5a>
    26b2:	4a 81       	ldd	r20, Y+2	; 0x02
    26b4:	5b 81       	ldd	r21, Y+3	; 0x03
    26b6:	9e 01       	movw	r18, r28
    26b8:	41 15       	cp	r20, r1
    26ba:	51 05       	cpc	r21, r1
    26bc:	f1 f0       	breq	.+60     	; 0x26fa <free+0x92>
    26be:	ea 01       	movw	r28, r20
    26c0:	f5 cf       	rjmp	.-22     	; 0x26ac <free+0x44>
    26c2:	d3 83       	std	Z+3, r29	; 0x03
    26c4:	c2 83       	std	Z+2, r28	; 0x02
    26c6:	40 81       	ld	r20, Z
    26c8:	51 81       	ldd	r21, Z+1	; 0x01
    26ca:	84 0f       	add	r24, r20
    26cc:	95 1f       	adc	r25, r21
    26ce:	c8 17       	cp	r28, r24
    26d0:	d9 07       	cpc	r29, r25
    26d2:	59 f4       	brne	.+22     	; 0x26ea <free+0x82>
    26d4:	88 81       	ld	r24, Y
    26d6:	99 81       	ldd	r25, Y+1	; 0x01
    26d8:	84 0f       	add	r24, r20
    26da:	95 1f       	adc	r25, r21
    26dc:	02 96       	adiw	r24, 0x02	; 2
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	93 83       	std	Z+3, r25	; 0x03
    26e8:	82 83       	std	Z+2, r24	; 0x02
    26ea:	21 15       	cp	r18, r1
    26ec:	31 05       	cpc	r19, r1
    26ee:	29 f4       	brne	.+10     	; 0x26fa <free+0x92>
    26f0:	f0 93 12 04 	sts	0x0412, r31	; 0x800412 <__flp+0x1>
    26f4:	e0 93 11 04 	sts	0x0411, r30	; 0x800411 <__flp>
    26f8:	3d c0       	rjmp	.+122    	; 0x2774 <free+0x10c>
    26fa:	e9 01       	movw	r28, r18
    26fc:	fb 83       	std	Y+3, r31	; 0x03
    26fe:	ea 83       	std	Y+2, r30	; 0x02
    2700:	49 91       	ld	r20, Y+
    2702:	59 91       	ld	r21, Y+
    2704:	c4 0f       	add	r28, r20
    2706:	d5 1f       	adc	r29, r21
    2708:	ec 17       	cp	r30, r28
    270a:	fd 07       	cpc	r31, r29
    270c:	61 f4       	brne	.+24     	; 0x2726 <free+0xbe>
    270e:	80 81       	ld	r24, Z
    2710:	91 81       	ldd	r25, Z+1	; 0x01
    2712:	84 0f       	add	r24, r20
    2714:	95 1f       	adc	r25, r21
    2716:	02 96       	adiw	r24, 0x02	; 2
    2718:	e9 01       	movw	r28, r18
    271a:	99 83       	std	Y+1, r25	; 0x01
    271c:	88 83       	st	Y, r24
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	9b 83       	std	Y+3, r25	; 0x03
    2724:	8a 83       	std	Y+2, r24	; 0x02
    2726:	e0 e0       	ldi	r30, 0x00	; 0
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	12 96       	adiw	r26, 0x02	; 2
    272c:	8d 91       	ld	r24, X+
    272e:	9c 91       	ld	r25, X
    2730:	13 97       	sbiw	r26, 0x03	; 3
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	19 f0       	breq	.+6      	; 0x273c <free+0xd4>
    2736:	fd 01       	movw	r30, r26
    2738:	dc 01       	movw	r26, r24
    273a:	f7 cf       	rjmp	.-18     	; 0x272a <free+0xc2>
    273c:	8d 91       	ld	r24, X+
    273e:	9c 91       	ld	r25, X
    2740:	11 97       	sbiw	r26, 0x01	; 1
    2742:	9d 01       	movw	r18, r26
    2744:	2e 5f       	subi	r18, 0xFE	; 254
    2746:	3f 4f       	sbci	r19, 0xFF	; 255
    2748:	82 0f       	add	r24, r18
    274a:	93 1f       	adc	r25, r19
    274c:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <__brkval>
    2750:	30 91 10 04 	lds	r19, 0x0410	; 0x800410 <__brkval+0x1>
    2754:	28 17       	cp	r18, r24
    2756:	39 07       	cpc	r19, r25
    2758:	69 f4       	brne	.+26     	; 0x2774 <free+0x10c>
    275a:	30 97       	sbiw	r30, 0x00	; 0
    275c:	29 f4       	brne	.+10     	; 0x2768 <free+0x100>
    275e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__flp+0x1>
    2762:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__flp>
    2766:	02 c0       	rjmp	.+4      	; 0x276c <free+0x104>
    2768:	13 82       	std	Z+3, r1	; 0x03
    276a:	12 82       	std	Z+2, r1	; 0x02
    276c:	b0 93 10 04 	sts	0x0410, r27	; 0x800410 <__brkval+0x1>
    2770:	a0 93 0f 04 	sts	0x040F, r26	; 0x80040f <__brkval>
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <strnlen_P>:
    277a:	fc 01       	movw	r30, r24
    277c:	05 90       	lpm	r0, Z+
    277e:	61 50       	subi	r22, 0x01	; 1
    2780:	70 40       	sbci	r23, 0x00	; 0
    2782:	01 10       	cpse	r0, r1
    2784:	d8 f7       	brcc	.-10     	; 0x277c <strnlen_P+0x2>
    2786:	80 95       	com	r24
    2788:	90 95       	com	r25
    278a:	8e 0f       	add	r24, r30
    278c:	9f 1f       	adc	r25, r31
    278e:	08 95       	ret

00002790 <memset>:
    2790:	dc 01       	movw	r26, r24
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <memset+0x6>
    2794:	6d 93       	st	X+, r22
    2796:	41 50       	subi	r20, 0x01	; 1
    2798:	50 40       	sbci	r21, 0x00	; 0
    279a:	e0 f7       	brcc	.-8      	; 0x2794 <memset+0x4>
    279c:	08 95       	ret

0000279e <strnlen>:
    279e:	fc 01       	movw	r30, r24
    27a0:	61 50       	subi	r22, 0x01	; 1
    27a2:	70 40       	sbci	r23, 0x00	; 0
    27a4:	01 90       	ld	r0, Z+
    27a6:	01 10       	cpse	r0, r1
    27a8:	d8 f7       	brcc	.-10     	; 0x27a0 <strnlen+0x2>
    27aa:	80 95       	com	r24
    27ac:	90 95       	com	r25
    27ae:	8e 0f       	add	r24, r30
    27b0:	9f 1f       	adc	r25, r31
    27b2:	08 95       	ret

000027b4 <strrev>:
    27b4:	dc 01       	movw	r26, r24
    27b6:	fc 01       	movw	r30, r24
    27b8:	67 2f       	mov	r22, r23
    27ba:	71 91       	ld	r23, Z+
    27bc:	77 23       	and	r23, r23
    27be:	e1 f7       	brne	.-8      	; 0x27b8 <strrev+0x4>
    27c0:	32 97       	sbiw	r30, 0x02	; 2
    27c2:	04 c0       	rjmp	.+8      	; 0x27cc <strrev+0x18>
    27c4:	7c 91       	ld	r23, X
    27c6:	6d 93       	st	X+, r22
    27c8:	70 83       	st	Z, r23
    27ca:	62 91       	ld	r22, -Z
    27cc:	ae 17       	cp	r26, r30
    27ce:	bf 07       	cpc	r27, r31
    27d0:	c8 f3       	brcs	.-14     	; 0x27c4 <strrev+0x10>
    27d2:	08 95       	ret

000027d4 <fputc>:
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	fb 01       	movw	r30, r22
    27de:	23 81       	ldd	r18, Z+3	; 0x03
    27e0:	21 fd       	sbrc	r18, 1
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <fputc+0x16>
    27e4:	8f ef       	ldi	r24, 0xFF	; 255
    27e6:	9f ef       	ldi	r25, 0xFF	; 255
    27e8:	2c c0       	rjmp	.+88     	; 0x2842 <fputc+0x6e>
    27ea:	22 ff       	sbrs	r18, 2
    27ec:	16 c0       	rjmp	.+44     	; 0x281a <fputc+0x46>
    27ee:	46 81       	ldd	r20, Z+6	; 0x06
    27f0:	57 81       	ldd	r21, Z+7	; 0x07
    27f2:	24 81       	ldd	r18, Z+4	; 0x04
    27f4:	35 81       	ldd	r19, Z+5	; 0x05
    27f6:	42 17       	cp	r20, r18
    27f8:	53 07       	cpc	r21, r19
    27fa:	44 f4       	brge	.+16     	; 0x280c <fputc+0x38>
    27fc:	a0 81       	ld	r26, Z
    27fe:	b1 81       	ldd	r27, Z+1	; 0x01
    2800:	9d 01       	movw	r18, r26
    2802:	2f 5f       	subi	r18, 0xFF	; 255
    2804:	3f 4f       	sbci	r19, 0xFF	; 255
    2806:	31 83       	std	Z+1, r19	; 0x01
    2808:	20 83       	st	Z, r18
    280a:	8c 93       	st	X, r24
    280c:	26 81       	ldd	r18, Z+6	; 0x06
    280e:	37 81       	ldd	r19, Z+7	; 0x07
    2810:	2f 5f       	subi	r18, 0xFF	; 255
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	37 83       	std	Z+7, r19	; 0x07
    2816:	26 83       	std	Z+6, r18	; 0x06
    2818:	14 c0       	rjmp	.+40     	; 0x2842 <fputc+0x6e>
    281a:	8b 01       	movw	r16, r22
    281c:	ec 01       	movw	r28, r24
    281e:	fb 01       	movw	r30, r22
    2820:	00 84       	ldd	r0, Z+8	; 0x08
    2822:	f1 85       	ldd	r31, Z+9	; 0x09
    2824:	e0 2d       	mov	r30, r0
    2826:	09 95       	icall
    2828:	89 2b       	or	r24, r25
    282a:	e1 f6       	brne	.-72     	; 0x27e4 <fputc+0x10>
    282c:	d8 01       	movw	r26, r16
    282e:	16 96       	adiw	r26, 0x06	; 6
    2830:	8d 91       	ld	r24, X+
    2832:	9c 91       	ld	r25, X
    2834:	17 97       	sbiw	r26, 0x07	; 7
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	17 96       	adiw	r26, 0x07	; 7
    283a:	9c 93       	st	X, r25
    283c:	8e 93       	st	-X, r24
    283e:	16 97       	sbiw	r26, 0x06	; 6
    2840:	ce 01       	movw	r24, r28
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	08 95       	ret

0000284c <__ultoa_invert>:
    284c:	fa 01       	movw	r30, r20
    284e:	aa 27       	eor	r26, r26
    2850:	28 30       	cpi	r18, 0x08	; 8
    2852:	51 f1       	breq	.+84     	; 0x28a8 <__ultoa_invert+0x5c>
    2854:	20 31       	cpi	r18, 0x10	; 16
    2856:	81 f1       	breq	.+96     	; 0x28b8 <__ultoa_invert+0x6c>
    2858:	e8 94       	clt
    285a:	6f 93       	push	r22
    285c:	6e 7f       	andi	r22, 0xFE	; 254
    285e:	6e 5f       	subi	r22, 0xFE	; 254
    2860:	7f 4f       	sbci	r23, 0xFF	; 255
    2862:	8f 4f       	sbci	r24, 0xFF	; 255
    2864:	9f 4f       	sbci	r25, 0xFF	; 255
    2866:	af 4f       	sbci	r26, 0xFF	; 255
    2868:	b1 e0       	ldi	r27, 0x01	; 1
    286a:	3e d0       	rcall	.+124    	; 0x28e8 <__ultoa_invert+0x9c>
    286c:	b4 e0       	ldi	r27, 0x04	; 4
    286e:	3c d0       	rcall	.+120    	; 0x28e8 <__ultoa_invert+0x9c>
    2870:	67 0f       	add	r22, r23
    2872:	78 1f       	adc	r23, r24
    2874:	89 1f       	adc	r24, r25
    2876:	9a 1f       	adc	r25, r26
    2878:	a1 1d       	adc	r26, r1
    287a:	68 0f       	add	r22, r24
    287c:	79 1f       	adc	r23, r25
    287e:	8a 1f       	adc	r24, r26
    2880:	91 1d       	adc	r25, r1
    2882:	a1 1d       	adc	r26, r1
    2884:	6a 0f       	add	r22, r26
    2886:	71 1d       	adc	r23, r1
    2888:	81 1d       	adc	r24, r1
    288a:	91 1d       	adc	r25, r1
    288c:	a1 1d       	adc	r26, r1
    288e:	20 d0       	rcall	.+64     	; 0x28d0 <__ultoa_invert+0x84>
    2890:	09 f4       	brne	.+2      	; 0x2894 <__ultoa_invert+0x48>
    2892:	68 94       	set
    2894:	3f 91       	pop	r19
    2896:	2a e0       	ldi	r18, 0x0A	; 10
    2898:	26 9f       	mul	r18, r22
    289a:	11 24       	eor	r1, r1
    289c:	30 19       	sub	r19, r0
    289e:	30 5d       	subi	r19, 0xD0	; 208
    28a0:	31 93       	st	Z+, r19
    28a2:	de f6       	brtc	.-74     	; 0x285a <__ultoa_invert+0xe>
    28a4:	cf 01       	movw	r24, r30
    28a6:	08 95       	ret
    28a8:	46 2f       	mov	r20, r22
    28aa:	47 70       	andi	r20, 0x07	; 7
    28ac:	40 5d       	subi	r20, 0xD0	; 208
    28ae:	41 93       	st	Z+, r20
    28b0:	b3 e0       	ldi	r27, 0x03	; 3
    28b2:	0f d0       	rcall	.+30     	; 0x28d2 <__ultoa_invert+0x86>
    28b4:	c9 f7       	brne	.-14     	; 0x28a8 <__ultoa_invert+0x5c>
    28b6:	f6 cf       	rjmp	.-20     	; 0x28a4 <__ultoa_invert+0x58>
    28b8:	46 2f       	mov	r20, r22
    28ba:	4f 70       	andi	r20, 0x0F	; 15
    28bc:	40 5d       	subi	r20, 0xD0	; 208
    28be:	4a 33       	cpi	r20, 0x3A	; 58
    28c0:	18 f0       	brcs	.+6      	; 0x28c8 <__ultoa_invert+0x7c>
    28c2:	49 5d       	subi	r20, 0xD9	; 217
    28c4:	31 fd       	sbrc	r19, 1
    28c6:	40 52       	subi	r20, 0x20	; 32
    28c8:	41 93       	st	Z+, r20
    28ca:	02 d0       	rcall	.+4      	; 0x28d0 <__ultoa_invert+0x84>
    28cc:	a9 f7       	brne	.-22     	; 0x28b8 <__ultoa_invert+0x6c>
    28ce:	ea cf       	rjmp	.-44     	; 0x28a4 <__ultoa_invert+0x58>
    28d0:	b4 e0       	ldi	r27, 0x04	; 4
    28d2:	a6 95       	lsr	r26
    28d4:	97 95       	ror	r25
    28d6:	87 95       	ror	r24
    28d8:	77 95       	ror	r23
    28da:	67 95       	ror	r22
    28dc:	ba 95       	dec	r27
    28de:	c9 f7       	brne	.-14     	; 0x28d2 <__ultoa_invert+0x86>
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	61 05       	cpc	r22, r1
    28e4:	71 05       	cpc	r23, r1
    28e6:	08 95       	ret
    28e8:	9b 01       	movw	r18, r22
    28ea:	ac 01       	movw	r20, r24
    28ec:	0a 2e       	mov	r0, r26
    28ee:	06 94       	lsr	r0
    28f0:	57 95       	ror	r21
    28f2:	47 95       	ror	r20
    28f4:	37 95       	ror	r19
    28f6:	27 95       	ror	r18
    28f8:	ba 95       	dec	r27
    28fa:	c9 f7       	brne	.-14     	; 0x28ee <__ultoa_invert+0xa2>
    28fc:	62 0f       	add	r22, r18
    28fe:	73 1f       	adc	r23, r19
    2900:	84 1f       	adc	r24, r20
    2902:	95 1f       	adc	r25, r21
    2904:	a0 1d       	adc	r26, r0
    2906:	08 95       	ret

00002908 <__prologue_saves__>:
    2908:	2f 92       	push	r2
    290a:	3f 92       	push	r3
    290c:	4f 92       	push	r4
    290e:	5f 92       	push	r5
    2910:	6f 92       	push	r6
    2912:	7f 92       	push	r7
    2914:	8f 92       	push	r8
    2916:	9f 92       	push	r9
    2918:	af 92       	push	r10
    291a:	bf 92       	push	r11
    291c:	cf 92       	push	r12
    291e:	df 92       	push	r13
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	ca 1b       	sub	r28, r26
    2932:	db 0b       	sbc	r29, r27
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	09 94       	ijmp

00002940 <__epilogue_restores__>:
    2940:	2a 88       	ldd	r2, Y+18	; 0x12
    2942:	39 88       	ldd	r3, Y+17	; 0x11
    2944:	48 88       	ldd	r4, Y+16	; 0x10
    2946:	5f 84       	ldd	r5, Y+15	; 0x0f
    2948:	6e 84       	ldd	r6, Y+14	; 0x0e
    294a:	7d 84       	ldd	r7, Y+13	; 0x0d
    294c:	8c 84       	ldd	r8, Y+12	; 0x0c
    294e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2950:	aa 84       	ldd	r10, Y+10	; 0x0a
    2952:	b9 84       	ldd	r11, Y+9	; 0x09
    2954:	c8 84       	ldd	r12, Y+8	; 0x08
    2956:	df 80       	ldd	r13, Y+7	; 0x07
    2958:	ee 80       	ldd	r14, Y+6	; 0x06
    295a:	fd 80       	ldd	r15, Y+5	; 0x05
    295c:	0c 81       	ldd	r16, Y+4	; 0x04
    295e:	1b 81       	ldd	r17, Y+3	; 0x03
    2960:	aa 81       	ldd	r26, Y+2	; 0x02
    2962:	b9 81       	ldd	r27, Y+1	; 0x01
    2964:	ce 0f       	add	r28, r30
    2966:	d1 1d       	adc	r29, r1
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	ed 01       	movw	r28, r26
    2974:	08 95       	ret

00002976 <_exit>:
    2976:	f8 94       	cli

00002978 <__stop_program>:
    2978:	ff cf       	rjmp	.-2      	; 0x2978 <__stop_program>
