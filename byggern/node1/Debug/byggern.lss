
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  0000297e  00002a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000297e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  008002e6  008002e6  00002bf8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000577e  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d41  00000000  00000000  00008806  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002314  00000000  00000000  0000a547  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e0  00000000  00000000  0000c85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d17  00000000  00000000  0000d13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002431  00000000  00000000  0000de53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  00010284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	12 e0       	ldi	r17, 0x02	; 2
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	ee e7       	ldi	r30, 0x7E	; 126
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a6 3e       	cpi	r26, 0xE6	; 230
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a6 ee       	ldi	r26, 0xE6	; 230
     548:	b2 e0       	ldi	r27, 0x02	; 2
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a5 32       	cpi	r26, 0x25	; 37
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 bd 14 	jmp	0x297a	; 0x297a <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xfdb>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xfdb>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "sleep.h"
#include "slider.h"
#include "joystick.h"
#include "touchButton.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
//p.23 for can read instructions
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <setupInit>
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     5aa:	87 e5       	ldi	r24, 0x57	; 87
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 8b 10 	call	0x2116	; 0x2116 <printf>
	printf("---------------------------------------\n\r");
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 8b 10 	call	0x2116	; 0x2116 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x4e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x58>
     5ea:	00 00       	nop
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
				menu_printCurrentMenu();
			}
			timerFlag=0;
			sei();
		}
		switch(currentMenu.currentMenuItem->nodeID){
     5f4:	04 ef       	ldi	r16, 0xF4	; 244
     5f6:	12 e0       	ldi	r17, 0x02	; 2
	_delay_ms(500);    
	while (1) {
		
		 
		
		if (timerFlag)
     5f8:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <timerFlag>
     5fc:	88 23       	and	r24, r24
     5fe:	c1 f0       	breq	.+48     	; 0x630 <main+0x9e>
		{
			cli();
     600:	f8 94       	cli
			TCNT1 = 0x00;
     602:	1d bc       	out	0x2d, r1	; 45
     604:	1c bc       	out	0x2c, r1	; 44
			joystick_readPosition();
     606:	0e 94 52 09 	call	0x12a4	; 0x12a4 <joystick_readPosition>
			slider_readPosition(&slider_pos);
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <slider_readPosition>
			touchButton_readButtons();
     612:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <touchButton_readButtons>
			if(gameActive==0){
     616:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <gameActive>
     61a:	81 11       	cpse	r24, r1
     61c:	06 c0       	rjmp	.+12     	; 0x62a <main+0x98>
				navigateMenu(&joystick_pos);
     61e:	8a ee       	ldi	r24, 0xEA	; 234
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	0e 94 09 0a 	call	0x1412	; 0x1412 <navigateMenu>
				menu_printCurrentMenu();
     626:	0e 94 1c 0b 	call	0x1638	; 0x1638 <menu_printCurrentMenu>
			}
			timerFlag=0;
     62a:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <timerFlag>
			sei();
     62e:	78 94       	sei
		}
		switch(currentMenu.currentMenuItem->nodeID){
     630:	d8 01       	movw	r26, r16
     632:	ed 91       	ld	r30, X+
     634:	fc 91       	ld	r31, X
     636:	80 81       	ld	r24, Z
     638:	85 30       	cpi	r24, 0x05	; 5
     63a:	91 f0       	breq	.+36     	; 0x660 <main+0xce>
     63c:	28 f4       	brcc	.+10     	; 0x648 <main+0xb6>
     63e:	83 30       	cpi	r24, 0x03	; 3
     640:	41 f0       	breq	.+16     	; 0x652 <main+0xc0>
     642:	84 30       	cpi	r24, 0x04	; 4
     644:	49 f0       	breq	.+18     	; 0x658 <main+0xc6>
     646:	17 c0       	rjmp	.+46     	; 0x676 <main+0xe4>
     648:	86 30       	cpi	r24, 0x06	; 6
     64a:	71 f0       	breq	.+28     	; 0x668 <main+0xd6>
     64c:	87 30       	cpi	r24, 0x07	; 7
     64e:	81 f0       	breq	.+32     	; 0x670 <main+0xde>
     650:	12 c0       	rjmp	.+36     	; 0x676 <main+0xe4>
			case PLAY_GAME:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     652:	0e 94 fe 07 	call	0xffc	; 0xffc <music_playRick>
				break;
     656:	0f c0       	rjmp	.+30     	; 0x676 <main+0xe4>
			case GAME_1:
				game_play(1);
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	0e 94 53 07 	call	0xea6	; 0xea6 <game_play>
				break;
     65e:	0b c0       	rjmp	.+22     	; 0x676 <main+0xe4>
			case GAME_2:
				game_play(2);
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 53 07 	call	0xea6	; 0xea6 <game_play>
				break;
     666:	07 c0       	rjmp	.+14     	; 0x676 <main+0xe4>
			case HS1:
				game_displayHighscores(1);
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 8b 07 	call	0xf16	; 0xf16 <game_displayHighscores>
				break;
     66e:	03 c0       	rjmp	.+6      	; 0x676 <main+0xe4>
			case HS2:
				game_displayHighscores(2);
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	0e 94 8b 07 	call	0xf16	; 0xf16 <game_displayHighscores>
				break;
			
		}
		//Put microcontroller to sleep until next interrupt.
		sleep_now();
     676:	0e 94 3c 09 	call	0x1278	; 0x1278 <sleep_now>
	}
     67a:	be cf       	rjmp	.-132    	; 0x5f8 <main+0x66>

0000067c <CAN_clearInterrupt>:


void CAN_clearInterrupt()
{
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	6c e2       	ldi	r22, 0x2C	; 44
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
     686:	08 95       	ret

00000688 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	8c 01       	movw	r16, r24
	
	//changing between three buffers
	static int buffer_number = 0;
	buffer_number++;
	buffer_number = buffer_number%3;
     690:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__data_end>
     694:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <__data_end+0x1>
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	63 e0       	ldi	r22, 0x03	; 3
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divmodhi4>
     6a2:	28 2f       	mov	r18, r24
     6a4:	39 2f       	mov	r19, r25
     6a6:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <__data_end>
     6aa:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <__data_end+0x1>
	
	//Load ID in message
	switch(buffer_number) {
     6ae:	21 30       	cpi	r18, 0x01	; 1
     6b0:	31 05       	cpc	r19, r1
     6b2:	e9 f0       	breq	.+58     	; 0x6ee <CAN_transmit_message+0x66>
     6b4:	22 30       	cpi	r18, 0x02	; 2
     6b6:	31 05       	cpc	r19, r1
     6b8:	89 f1       	breq	.+98     	; 0x71c <CAN_transmit_message+0x94>
     6ba:	23 2b       	or	r18, r19
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <CAN_transmit_message+0x38>
     6be:	44 c0       	rjmp	.+136    	; 0x748 <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6c0:	f8 01       	movw	r30, r16
     6c2:	40 85       	ldd	r20, Z+8	; 0x08
     6c4:	51 85       	ldd	r21, Z+9	; 0x09
     6c6:	42 95       	swap	r20
     6c8:	44 0f       	add	r20, r20
     6ca:	40 7e       	andi	r20, 0xE0	; 224
     6cc:	62 e3       	ldi	r22, 0x32	; 50
     6ce:	80 ee       	ldi	r24, 0xE0	; 224
     6d0:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6d4:	f8 01       	movw	r30, r16
     6d6:	60 85       	ldd	r22, Z+8	; 0x08
     6d8:	71 85       	ldd	r23, Z+9	; 0x09
     6da:	76 95       	lsr	r23
     6dc:	67 95       	ror	r22
     6de:	76 95       	lsr	r23
     6e0:	67 95       	ror	r22
     6e2:	76 95       	lsr	r23
     6e4:	67 95       	ror	r22
     6e6:	81 e3       	ldi	r24, 0x31	; 49
     6e8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				break;
     6ec:	2d c0       	rjmp	.+90     	; 0x748 <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6ee:	f8 01       	movw	r30, r16
     6f0:	40 85       	ldd	r20, Z+8	; 0x08
     6f2:	51 85       	ldd	r21, Z+9	; 0x09
     6f4:	42 95       	swap	r20
     6f6:	44 0f       	add	r20, r20
     6f8:	40 7e       	andi	r20, 0xE0	; 224
     6fa:	62 e4       	ldi	r22, 0x42	; 66
     6fc:	80 ee       	ldi	r24, 0xE0	; 224
     6fe:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );				
     702:	f8 01       	movw	r30, r16
     704:	60 85       	ldd	r22, Z+8	; 0x08
     706:	71 85       	ldd	r23, Z+9	; 0x09
     708:	76 95       	lsr	r23
     70a:	67 95       	ror	r22
     70c:	76 95       	lsr	r23
     70e:	67 95       	ror	r22
     710:	76 95       	lsr	r23
     712:	67 95       	ror	r22
     714:	81 e4       	ldi	r24, 0x41	; 65
     716:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				break;
     71a:	16 c0       	rjmp	.+44     	; 0x748 <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     71c:	f8 01       	movw	r30, r16
     71e:	40 85       	ldd	r20, Z+8	; 0x08
     720:	51 85       	ldd	r21, Z+9	; 0x09
     722:	42 95       	swap	r20
     724:	44 0f       	add	r20, r20
     726:	40 7e       	andi	r20, 0xE0	; 224
     728:	62 e5       	ldi	r22, 0x52	; 82
     72a:	80 ee       	ldi	r24, 0xE0	; 224
     72c:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     730:	f8 01       	movw	r30, r16
     732:	60 85       	ldd	r22, Z+8	; 0x08
     734:	71 85       	ldd	r23, Z+9	; 0x09
     736:	76 95       	lsr	r23
     738:	67 95       	ror	r22
     73a:	76 95       	lsr	r23
     73c:	67 95       	ror	r22
     73e:	76 95       	lsr	r23
     740:	67 95       	ror	r22
     742:	81 e5       	ldi	r24, 0x51	; 81
     744:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				break;
	}
		
	//Filling message with data length
	switch(buffer_number) {
     748:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__data_end>
     74c:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <__data_end+0x1>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	91 05       	cpc	r25, r1
     754:	61 f0       	breq	.+24     	; 0x76e <CAN_transmit_message+0xe6>
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	91 05       	cpc	r25, r1
     75a:	81 f0       	breq	.+32     	; 0x77c <CAN_transmit_message+0xf4>
     75c:	89 2b       	or	r24, r25
     75e:	a1 f4       	brne	.+40     	; 0x788 <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     760:	f8 01       	movw	r30, r16
     762:	42 85       	ldd	r20, Z+10	; 0x0a
     764:	65 e3       	ldi	r22, 0x35	; 53
     766:	8f e0       	ldi	r24, 0x0F	; 15
     768:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				break;
     76c:	0d c0       	rjmp	.+26     	; 0x788 <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     76e:	f8 01       	movw	r30, r16
     770:	42 85       	ldd	r20, Z+10	; 0x0a
     772:	65 e4       	ldi	r22, 0x45	; 69
     774:	8f e0       	ldi	r24, 0x0F	; 15
     776:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				break;
     77a:	06 c0       	rjmp	.+12     	; 0x788 <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     77c:	f8 01       	movw	r30, r16
     77e:	42 85       	ldd	r20, Z+10	; 0x0a
     780:	65 e5       	ldi	r22, 0x55	; 85
     782:	8f e0       	ldi	r24, 0x0F	; 15
     784:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				break;
				
	}

	//Filling message with data.
	for (uint8_t i = 0; i != message->data_length; i++) {
     788:	f8 01       	movw	r30, r16
     78a:	82 85       	ldd	r24, Z+10	; 0x0a
     78c:	88 23       	and	r24, r24
     78e:	61 f1       	breq	.+88     	; 0x7e8 <CAN_transmit_message+0x160>
     790:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     792:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__data_end>
     796:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <__data_end+0x1>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	71 f0       	breq	.+28     	; 0x7bc <CAN_transmit_message+0x134>
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	91 05       	cpc	r25, r1
     7a4:	a1 f0       	breq	.+40     	; 0x7ce <CAN_transmit_message+0x146>
     7a6:	89 2b       	or	r24, r25
     7a8:	d1 f4       	brne	.+52     	; 0x7de <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     7aa:	f8 01       	movw	r30, r16
     7ac:	ec 0f       	add	r30, r28
     7ae:	f1 1d       	adc	r31, r1
     7b0:	60 81       	ld	r22, Z
     7b2:	86 e3       	ldi	r24, 0x36	; 54
     7b4:	8c 0f       	add	r24, r28
     7b6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				break;
     7ba:	11 c0       	rjmp	.+34     	; 0x7de <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7bc:	f8 01       	movw	r30, r16
     7be:	ec 0f       	add	r30, r28
     7c0:	f1 1d       	adc	r31, r1
     7c2:	60 81       	ld	r22, Z
     7c4:	86 e4       	ldi	r24, 0x46	; 70
     7c6:	8c 0f       	add	r24, r28
     7c8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				break;
     7cc:	08 c0       	rjmp	.+16     	; 0x7de <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7ce:	f8 01       	movw	r30, r16
     7d0:	ec 0f       	add	r30, r28
     7d2:	f1 1d       	adc	r31, r1
     7d4:	60 81       	ld	r22, Z
     7d6:	86 e5       	ldi	r24, 0x56	; 86
     7d8:	8c 0f       	add	r24, r28
     7da:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				break;
				
	}

	//Filling message with data.
	for (uint8_t i = 0; i != message->data_length; i++) {
     7de:	cf 5f       	subi	r28, 0xFF	; 255
     7e0:	f8 01       	movw	r30, r16
     7e2:	82 85       	ldd	r24, Z+10	; 0x0a
     7e4:	8c 13       	cpse	r24, r28
     7e6:	d5 cf       	rjmp	.-86     	; 0x792 <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7e8:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__data_end>
     7ec:	0e 94 be 04 	call	0x97c	; 0x97c <CAN_controller_RTS>
	
	//Currently no error handling	
}
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	08 95       	ret

000007f8 <CAN_receiveMessage>:

void CAN_receiveMessage(volatile CAN_message_t * received_message) {
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	7c 01       	movw	r14, r24
	
	//read ID
	received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     804:	82 e6       	ldi	r24, 0x62	; 98
     806:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     80a:	c8 2f       	mov	r28, r24
     80c:	81 e6       	ldi	r24, 0x61	; 97
     80e:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     812:	c2 95       	swap	r28
     814:	c6 95       	lsr	r28
     816:	c7 70       	andi	r28, 0x07	; 7
     818:	28 e0       	ldi	r18, 0x08	; 8
     81a:	82 9f       	mul	r24, r18
     81c:	c0 01       	movw	r24, r0
     81e:	11 24       	eor	r1, r1
     820:	8c 0f       	add	r24, r28
     822:	91 1d       	adc	r25, r1
     824:	f7 01       	movw	r30, r14
     826:	91 87       	std	Z+9, r25	; 0x09
     828:	80 87       	std	Z+8, r24	; 0x08
	
	//read data length
	received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     82a:	85 e6       	ldi	r24, 0x65	; 101
     82c:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     830:	8f 70       	andi	r24, 0x0F	; 15
     832:	f7 01       	movw	r30, r14
     834:	82 87       	std	Z+10, r24	; 0x0a
	
	//read data
	for (uint8_t i = 0; i != received_message->data_length; i++) {
     836:	82 85       	ldd	r24, Z+10	; 0x0a
     838:	88 23       	and	r24, r24
     83a:	81 f0       	breq	.+32     	; 0x85c <CAN_receiveMessage+0x64>
     83c:	c0 e0       	ldi	r28, 0x00	; 0
		received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     83e:	0c 2f       	mov	r16, r28
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	86 e6       	ldi	r24, 0x66	; 102
     844:	8c 0f       	add	r24, r28
     846:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     84a:	f7 01       	movw	r30, r14
     84c:	e0 0f       	add	r30, r16
     84e:	f1 1f       	adc	r31, r17
     850:	80 83       	st	Z, r24
	
	//read data length
	received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
	
	//read data
	for (uint8_t i = 0; i != received_message->data_length; i++) {
     852:	cf 5f       	subi	r28, 0xFF	; 255
     854:	f7 01       	movw	r30, r14
     856:	82 85       	ldd	r24, Z+10	; 0x0a
     858:	8c 13       	cpse	r24, r28
     85a:	f1 cf       	rjmp	.-30     	; 0x83e <CAN_receiveMessage+0x46>
		received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
	}
	
	
}
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	08 95       	ret

00000868 <CAN_sendInputData>:

void CAN_sendInputData() {
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2b 97       	sbiw	r28, 0x0b	; 11
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9a 87       	std	Y+10, r25	; 0x0a
     882:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     884:	86 e0       	ldi	r24, 0x06	; 6
     886:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     888:	e2 e0       	ldi	r30, 0x02	; 2
     88a:	f3 e0       	ldi	r31, 0x03	; 3
     88c:	80 81       	ld	r24, Z
     88e:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     890:	81 81       	ldd	r24, Z+1	; 0x01
     892:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     894:	e8 ef       	ldi	r30, 0xF8	; 248
     896:	f2 e0       	ldi	r31, 0x02	; 2
     898:	80 81       	ld	r24, Z
     89a:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     89c:	81 81       	ldd	r24, Z+1	; 0x01
     89e:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     8a0:	ea ee       	ldi	r30, 0xEA	; 234
     8a2:	f2 e0       	ldi	r31, 0x02	; 2
     8a4:	80 81       	ld	r24, Z
     8a6:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     8a8:	81 81       	ldd	r24, Z+1	; 0x01
     8aa:	8e 83       	std	Y+6, r24	; 0x06
	
	CAN_transmit_message(&message);
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 44 03 	call	0x688	; 0x688 <CAN_transmit_message>
}
     8b4:	2b 96       	adiw	r28, 0x0b	; 11
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <CAN_init>:

void CAN_init() {
	CAN_controller_init();
     8c6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <CAN_controller_init>
     8ca:	08 95       	ret

000008cc <CAN_controller_read>:
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"


uint8_t CAN_controller_read(uint8_t addr) {
     8cc:	cf 93       	push	r28
     8ce:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_READ);
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
	SPI_masterWrite(addr);
     8de:	8c 2f       	mov	r24, r28
     8e0:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8e4:	0e 94 96 0c 	call	0x192c	; 0x192c <SPI_masterRead>
     8e8:	c8 2f       	mov	r28, r24
	
	SPI_setChipSelect(PB4, 1);
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
	
	return data;
}
     8f2:	8c 2f       	mov	r24, r28
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	d8 2f       	mov	r29, r24
     8fe:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	84 e0       	ldi	r24, 0x04	; 4
     904:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
	SPI_masterWrite(addr);
     90e:	8d 2f       	mov	r24, r29
     910:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
	SPI_masterWrite(data);
     914:	8c 2f       	mov	r24, r28
     916:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
	
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <CAN_controller_bitModify>:

void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	d8 2f       	mov	r29, r24
     930:	16 2f       	mov	r17, r22
     932:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     93c:	85 e0       	ldi	r24, 0x05	; 5
     93e:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
		SPI_masterWrite(addr);
     942:	81 2f       	mov	r24, r17
     944:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
		SPI_masterWrite(mask);
     948:	8d 2f       	mov	r24, r29
     94a:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
		SPI_masterWrite(data);
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>

}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	08 95       	ret

00000964 <CAN_controller_reset>:

//Reset Can controller, necessary for config mode.
void CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
     96c:	80 ec       	ldi	r24, 0xC0	; 192
     96e:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
     97a:	08 95       	ret

0000097c <CAN_controller_RTS>:
	//Check CANSTAT register
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);

}

void CAN_controller_RTS(uint8_t buffer) {
     97c:	cf 93       	push	r28
     97e:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
	switch (buffer) {
     988:	c1 30       	cpi	r28, 0x01	; 1
     98a:	41 f0       	breq	.+16     	; 0x99c <CAN_controller_RTS+0x20>
     98c:	18 f0       	brcs	.+6      	; 0x994 <CAN_controller_RTS+0x18>
     98e:	c2 30       	cpi	r28, 0x02	; 2
     990:	49 f0       	breq	.+18     	; 0x9a4 <CAN_controller_RTS+0x28>
     992:	0b c0       	rjmp	.+22     	; 0x9aa <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     994:	81 e8       	ldi	r24, 0x81	; 129
     996:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
			break;
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     99c:	82 e8       	ldi	r24, 0x82	; 130
     99e:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
			break;
     9a2:	03 c0       	rjmp	.+6      	; 0x9aa <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     9a4:	84 e8       	ldi	r24, 0x84	; 132
     9a6:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterWrite>
			break;
		default: 
			break;			
	}
	SPI_setChipSelect(PB4, 1);
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	0e 94 9b 0c 	call	0x1936	; 0x1936 <SPI_setChipSelect>
}
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	1f 92       	push	r1
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	18 2f       	mov	r17, r24
	
	CAN_controller_reset();
     9c4:	0e 94 b2 04 	call	0x964	; 0x964 <CAN_controller_reset>
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9c8:	8e e0       	ldi	r24, 0x0E	; 14
     9ca:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     9ce:	89 83       	std	Y+1, r24	; 0x01
	uint8_t mode_bits = (status & MODE_MASK);
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
	
	if (mode_bits != MODE_CONFIG) {
     9d2:	80 7e       	andi	r24, 0xE0	; 224
     9d4:	80 38       	cpi	r24, 0x80	; 128
     9d6:	f1 f4       	brne	.+60     	; 0xa14 <CAN_controller_setMode+0x5e>
		//printf("Not in config mode, \t %i\n\r", mode_bits);
		return;
	}
	
	//set mode
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9d8:	41 2f       	mov	r20, r17
     9da:	4c 60       	ori	r20, 0x0C	; 12
     9dc:	6f e0       	ldi	r22, 0x0F	; 15
     9de:	8e ee       	ldi	r24, 0xEE	; 238
     9e0:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
	
	//enable interrupts
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	6b e2       	ldi	r22, 0x2B	; 43
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
	
	//receive any type of message, no filter p. 27
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000);
     9ee:	40 e6       	ldi	r20, 0x60	; 96
     9f0:	60 e6       	ldi	r22, 0x60	; 96
     9f2:	80 e6       	ldi	r24, 0x60	; 96
     9f4:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <CAN_controller_setMode+0x48>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <CAN_controller_setMode+0x52>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <CAN_controller_setMode+0x54>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a0a:	8e e0       	ldi	r24, 0x0E	; 14
     a0c:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     a10:	89 83       	std	Y+1, r24	; 0x01
	mode_bits = (status & MODE_MASK);
     a12:	89 81       	ldd	r24, Y+1	; 0x01
	if (mode_bits != mode) {
			//printf("Not in correct mode: Mode: %i\n\r", mode_bits);
	}
	//printf("Mode set: %i\n\r", status & MODE_MASK);
}
     a14:	0f 90       	pop	r0
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	08 95       	ret

00000a1e <CAN_controller_init>:
	SPI_setChipSelect(PB4, 0);
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	1f 92       	push	r1
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62

	SPI_masterInit();
     a28:	0e 94 89 0c 	call	0x1912	; 0x1912 <SPI_masterInit>

	CAN_controller_setMode(MODE_NORMAL);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a32:	8b b7       	in	r24, 0x3b	; 59
     a34:	80 64       	ori	r24, 0x40	; 64
     a36:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a38:	85 b7       	in	r24, 0x35	; 53
     a3a:	82 60       	ori	r24, 0x02	; 2
     a3c:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a3e:	85 b7       	in	r24, 0x35	; 53
     a40:	8e 7f       	andi	r24, 0xFE	; 254
     a42:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a44:	81 b3       	in	r24, 0x11	; 17
     a46:	84 70       	andi	r24, 0x04	; 4
     a48:	81 bb       	out	0x11, r24	; 17
     a4a:	2f ef       	ldi	r18, 0xFF	; 255
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	80 40       	sbci	r24, 0x00	; 0
     a54:	90 40       	sbci	r25, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <CAN_controller_init+0x32>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <CAN_controller_init+0x3c>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <CAN_controller_init+0x3e>
	
	_delay_ms(200);
	//printf("after write to canctrl\n\r");
	
	//Check CANSTAT register
	volatile uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a5c:	8e e0       	ldi	r24, 0x0E	; 14
     a5e:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     a62:	89 83       	std	Y+1, r24	; 0x01

}
     a64:	0f 90       	pop	r0
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     a6c:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <gameActive>
     a70:	ee ee       	ldi	r30, 0xEE	; 238
     a72:	f2 e0       	ldi	r31, 0x02	; 2
     a74:	aa ef       	ldi	r26, 0xFA	; 250
     a76:	b2 e0       	ldi	r27, 0x02	; 2
     a78:	83 ef       	ldi	r24, 0xF3	; 243
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	11 92       	st	Z+, r1
     a7e:	1d 92       	st	X+, r1
     a80:	e8 17       	cp	r30, r24
     a82:	f9 07       	cpc	r31, r25
     a84:	d9 f7       	brne	.-10     	; 0xa7c <game_init+0x10>
     a86:	08 95       	ret

00000a88 <game_countdown>:
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	1f 92       	push	r1
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	4a e0       	ldi	r20, 0x0A	; 10
     a98:	be 01       	movw	r22, r28
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
     aa6:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
     aaa:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
     aae:	04 ef       	ldi	r16, 0xF4	; 244
     ab0:	12 e0       	ldi	r17, 0x02	; 2
     ab2:	f8 01       	movw	r30, r16
     ab4:	80 81       	ld	r24, Z
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	02 96       	adiw	r24, 0x02	; 2
     aba:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     acc:	86 e0       	ldi	r24, 0x06	; 6
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 c0 08 	call	0x1180	; 0x1180 <music_playNote>
     ad4:	ff ef       	ldi	r31, 0xFF	; 255
     ad6:	2f e7       	ldi	r18, 0x7F	; 127
     ad8:	87 e0       	ldi	r24, 0x07	; 7
     ada:	f1 50       	subi	r31, 0x01	; 1
     adc:	20 40       	sbci	r18, 0x00	; 0
     ade:	80 40       	sbci	r24, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <game_countdown+0x52>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <game_countdown+0x5c>
     ae4:	00 00       	nop
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 c0 08 	call	0x1180	; 0x1180 <music_playNote>
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	ef e7       	ldi	r30, 0x7F	; 127
     af2:	f7 e0       	ldi	r31, 0x07	; 7
     af4:	91 50       	subi	r25, 0x01	; 1
     af6:	e0 40       	sbci	r30, 0x00	; 0
     af8:	f0 40       	sbci	r31, 0x00	; 0
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <game_countdown+0x6c>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <game_countdown+0x76>
     afe:	00 00       	nop
     b00:	4a e0       	ldi	r20, 0x0A	; 10
     b02:	be 01       	movw	r22, r28
     b04:	6f 5f       	subi	r22, 0xFF	; 255
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
     b10:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
     b14:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
     b18:	f8 01       	movw	r30, r16
     b1a:	80 81       	ld	r24, Z
     b1c:	91 81       	ldd	r25, Z+1	; 0x01
     b1e:	02 96       	adiw	r24, 0x02	; 2
     b20:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     b32:	86 e0       	ldi	r24, 0x06	; 6
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 c0 08 	call	0x1180	; 0x1180 <music_playNote>
     b3a:	ff ef       	ldi	r31, 0xFF	; 255
     b3c:	2f e7       	ldi	r18, 0x7F	; 127
     b3e:	87 e0       	ldi	r24, 0x07	; 7
     b40:	f1 50       	subi	r31, 0x01	; 1
     b42:	20 40       	sbci	r18, 0x00	; 0
     b44:	80 40       	sbci	r24, 0x00	; 0
     b46:	e1 f7       	brne	.-8      	; 0xb40 <game_countdown+0xb8>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <game_countdown+0xc2>
     b4a:	00 00       	nop
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 c0 08 	call	0x1180	; 0x1180 <music_playNote>
     b54:	9f ef       	ldi	r25, 0xFF	; 255
     b56:	ef e7       	ldi	r30, 0x7F	; 127
     b58:	f7 e0       	ldi	r31, 0x07	; 7
     b5a:	91 50       	subi	r25, 0x01	; 1
     b5c:	e0 40       	sbci	r30, 0x00	; 0
     b5e:	f0 40       	sbci	r31, 0x00	; 0
     b60:	e1 f7       	brne	.-8      	; 0xb5a <game_countdown+0xd2>
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <game_countdown+0xdc>
     b64:	00 00       	nop
     b66:	4a e0       	ldi	r20, 0x0A	; 10
     b68:	be 01       	movw	r22, r28
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
     b76:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
     b7a:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
     b7e:	f8 01       	movw	r30, r16
     b80:	80 81       	ld	r24, Z
     b82:	91 81       	ldd	r25, Z+1	; 0x01
     b84:	02 96       	adiw	r24, 0x02	; 2
     b86:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
     b90:	ce 01       	movw	r24, r28
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     b98:	86 e0       	ldi	r24, 0x06	; 6
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 c0 08 	call	0x1180	; 0x1180 <music_playNote>
     ba0:	ff ef       	ldi	r31, 0xFF	; 255
     ba2:	2f e7       	ldi	r18, 0x7F	; 127
     ba4:	87 e0       	ldi	r24, 0x07	; 7
     ba6:	f1 50       	subi	r31, 0x01	; 1
     ba8:	20 40       	sbci	r18, 0x00	; 0
     baa:	80 40       	sbci	r24, 0x00	; 0
     bac:	e1 f7       	brne	.-8      	; 0xba6 <game_countdown+0x11e>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <game_countdown+0x128>
     bb0:	00 00       	nop
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 c0 08 	call	0x1180	; 0x1180 <music_playNote>
     bba:	9f ef       	ldi	r25, 0xFF	; 255
     bbc:	ef e7       	ldi	r30, 0x7F	; 127
     bbe:	f7 e0       	ldi	r31, 0x07	; 7
     bc0:	91 50       	subi	r25, 0x01	; 1
     bc2:	e0 40       	sbci	r30, 0x00	; 0
     bc4:	f0 40       	sbci	r31, 0x00	; 0
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <game_countdown+0x138>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <game_countdown+0x142>
     bca:	00 00       	nop
     bcc:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
     bd0:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
     bd4:	f8 01       	movw	r30, r16
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	02 96       	adiw	r24, 0x02	; 2
     bdc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
     be6:	83 ee       	ldi	r24, 0xE3	; 227
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     bee:	87 e1       	ldi	r24, 0x17	; 23
     bf0:	94 e0       	ldi	r25, 0x04	; 4
     bf2:	0e 94 c0 08 	call	0x1180	; 0x1180 <music_playNote>
     bf6:	ff ef       	ldi	r31, 0xFF	; 255
     bf8:	2f e7       	ldi	r18, 0x7F	; 127
     bfa:	87 e0       	ldi	r24, 0x07	; 7
     bfc:	f1 50       	subi	r31, 0x01	; 1
     bfe:	20 40       	sbci	r18, 0x00	; 0
     c00:	80 40       	sbci	r24, 0x00	; 0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <game_countdown+0x174>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <game_countdown+0x17e>
     c06:	00 00       	nop
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 c0 08 	call	0x1180	; 0x1180 <music_playNote>
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	ef e7       	ldi	r30, 0x7F	; 127
     c14:	f7 e0       	ldi	r31, 0x07	; 7
     c16:	91 50       	subi	r25, 0x01	; 1
     c18:	e0 40       	sbci	r30, 0x00	; 0
     c1a:	f0 40       	sbci	r31, 0x00	; 0
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <game_countdown+0x18e>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <game_countdown+0x198>
     c20:	00 00       	nop
     c22:	0f 90       	pop	r0
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	08 95       	ret

00000c2e <game_initialCANMessage>:
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	2b 97       	sbiw	r28, 0x0b	; 11
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9a 87       	std	Y+10, r25	; 0x0a
     c48:	89 87       	std	Y+9, r24	; 0x09
     c4a:	1b 86       	std	Y+11, r1	; 0x0b
     c4c:	ce 01       	movw	r24, r28
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	0e 94 44 03 	call	0x688	; 0x688 <CAN_transmit_message>
     c54:	2b 96       	adiw	r28, 0x0b	; 11
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <game_newgame>:
     c66:	f8 94       	cli
     c68:	0e 94 44 05 	call	0xa88	; 0xa88 <game_countdown>
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <gameActive>
     c72:	ef ef       	ldi	r30, 0xFF	; 255
     c74:	f2 e0       	ldi	r31, 0x02	; 2
     c76:	8a e0       	ldi	r24, 0x0A	; 10
     c78:	80 83       	st	Z, r24
     c7a:	12 82       	std	Z+2, r1	; 0x02
     c7c:	83 e6       	ldi	r24, 0x63	; 99
     c7e:	81 83       	std	Z+1, r24	; 0x01
     c80:	0e 94 17 06 	call	0xc2e	; 0xc2e <game_initialCANMessage>
     c84:	78 94       	sei
     c86:	08 95       	ret

00000c88 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     c88:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <flag>
     c8c:	88 23       	and	r24, r24
     c8e:	d9 f0       	breq	.+54     	; 0xcc6 <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     c90:	f8 94       	cli
		printf("Message received");
     c92:	86 ee       	ldi	r24, 0xE6	; 230
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	0e 94 8b 10 	call	0x2116	; 0x2116 <printf>
		flag=0;
     c9e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <flag>
		CAN_receiveMessage(&received_message);
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     caa:	0e 94 3e 03 	call	0x67c	; 0x67c <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     cae:	a4 e0       	ldi	r26, 0x04	; 4
     cb0:	b3 e0       	ldi	r27, 0x03	; 3
     cb2:	8c 91       	ld	r24, X
     cb4:	ef ef       	ldi	r30, 0xFF	; 255
     cb6:	f2 e0       	ldi	r31, 0x02	; 2
     cb8:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     cba:	11 96       	adiw	r26, 0x01	; 1
     cbc:	8c 91       	ld	r24, X
     cbe:	82 83       	std	Z+2, r24	; 0x02
		sei();
     cc0:	78 94       	sei
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	08 95       	ret

00000cc8 <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <game_updateOled+0xa>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <game_updateOled+0xc>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     cda:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
	oled_home();
     cde:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     ce2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <currentMenu>
     ce6:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <currentMenu+0x1>
     cea:	02 96       	adiw	r24, 0x02	; 2
     cec:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
	switch(gameID) {
     cf6:	11 30       	cpi	r17, 0x01	; 1
     cf8:	19 f0       	breq	.+6      	; 0xd00 <game_updateOled+0x38>
     cfa:	12 30       	cpi	r17, 0x02	; 2
     cfc:	49 f1       	breq	.+82     	; 0xd50 <game_updateOled+0x88>
     cfe:	39 c0       	rjmp	.+114    	; 0xd72 <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     d00:	87 ef       	ldi	r24, 0xF7	; 247
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
			itoa(gameData.score,score_string,10);
     d08:	0f ef       	ldi	r16, 0xFF	; 255
     d0a:	12 e0       	ldi	r17, 0x02	; 2
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d0c:	f8 01       	movw	r30, r16
     d0e:	80 81       	ld	r24, Z
     d10:	4a e0       	ldi	r20, 0x0A	; 10
     d12:	be 01       	movw	r22, r28
     d14:	6f 5f       	subi	r22, 0xFF	; 255
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
			oled_print(score_string);
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
			oled_gotoLine(5);
     d26:	85 e0       	ldi	r24, 0x05	; 5
     d28:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
			oled_print("Time: ");
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     d34:	f8 01       	movw	r30, r16
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	4a e0       	ldi	r20, 0x0A	; 10
     d3a:	be 01       	movw	r22, r28
     d3c:	6d 5f       	subi	r22, 0xFD	; 253
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d46:	ce 01       	movw	r24, r28
     d48:	03 96       	adiw	r24, 0x03	; 3
     d4a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
			break;
     d4e:	11 c0       	rjmp	.+34     	; 0xd72 <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d50:	86 e0       	ldi	r24, 0x06	; 6
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     d58:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <gameData+0x2>
     d5c:	4a e0       	ldi	r20, 0x0A	; 10
     d5e:	be 01       	movw	r22, r28
     d60:	6d 5f       	subi	r22, 0xFD	; 253
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d6a:	ce 01       	movw	r24, r28
     d6c:	03 96       	adiw	r24, 0x03	; 3
     d6e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
			break;

	}
	
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <game_sendStop>:

void game_sendStop() {
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	2b 97       	sbiw	r28, 0x0b	; 11
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9a 87       	std	Y+10, r25	; 0x0a
     d9e:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     da0:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	0e 94 44 03 	call	0x688	; 0x688 <CAN_transmit_message>
}
     daa:	2b 96       	adiw	r28, 0x0b	; 11
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <game_finished>:
void game_finished(uint8_t gameID) {
     dbc:	cf 93       	push	r28
     dbe:	c8 2f       	mov	r28, r24
	cli();
     dc0:	f8 94       	cli
	game_sendStop();
     dc2:	0e 94 c2 06 	call	0xd84	; 0xd84 <game_sendStop>
	oled_reset();
     dc6:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
	oled_home();
     dca:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
	oled_gotoLine(3);
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
	oled_print("Game over");
     dd4:	81 e1       	ldi	r24, 0x11	; 17
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
	oled_gotoLine(4);
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
	oled_print("Maybe HS?");
     de2:	8b e1       	ldi	r24, 0x1B	; 27
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
	music_gameOver();
     dea:	0e 94 7e 08 	call	0x10fc	; 0x10fc <music_gameOver>
	gameActive=0;
     dee:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <gameActive>
	
	menu_init();
     df2:	0e 94 6f 0a 	call	0x14de	; 0x14de <menu_init>
	switch (gameID) {
     df6:	c1 30       	cpi	r28, 0x01	; 1
     df8:	51 f0       	breq	.+20     	; 0xe0e <game_finished+0x52>
     dfa:	c2 30       	cpi	r28, 0x02	; 2
     dfc:	09 f0       	breq	.+2      	; 0xe00 <game_finished+0x44>
     dfe:	50 c0       	rjmp	.+160    	; 0xea0 <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e00:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <gameData+0x2>
     e04:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <highScores2>
     e08:	83 17       	cp	r24, r19
     e0a:	48 f5       	brcc	.+82     	; 0xe5e <game_finished+0xa2>
     e0c:	33 c0       	rjmp	.+102    	; 0xe74 <game_finished+0xb8>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e0e:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <gameData>
     e12:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <highScores>
     e16:	83 17       	cp	r24, r19
     e18:	58 f0       	brcs	.+22     	; 0xe30 <game_finished+0x74>
     e1a:	ef ee       	ldi	r30, 0xEF	; 239
     e1c:	f2 e0       	ldi	r31, 0x02	; 2
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e22:	21 91       	ld	r18, Z+
     e24:	23 17       	cp	r18, r19
     e26:	b0 f4       	brcc	.+44     	; 0xe54 <game_finished+0x98>
					for (int a = 4; a>i; a--) {
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	91 05       	cpc	r25, r1
     e2c:	1c f0       	brlt	.+6      	; 0xe34 <game_finished+0x78>
     e2e:	0d c0       	rjmp	.+26     	; 0xe4a <game_finished+0x8e>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	e2 ef       	ldi	r30, 0xF2	; 242
     e36:	f2 e0       	ldi	r31, 0x02	; 2
     e38:	44 e0       	ldi	r20, 0x04	; 4
     e3a:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e3c:	41 50       	subi	r20, 0x01	; 1
     e3e:	51 09       	sbc	r21, r1
     e40:	22 91       	ld	r18, -Z
     e42:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e44:	84 17       	cp	r24, r20
     e46:	95 07       	cpc	r25, r21
     e48:	cc f3       	brlt	.-14     	; 0xe3c <game_finished+0x80>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e4a:	fc 01       	movw	r30, r24
     e4c:	e2 51       	subi	r30, 0x12	; 18
     e4e:	fd 4f       	sbci	r31, 0xFD	; 253
     e50:	30 83       	st	Z, r19
					break;
     e52:	26 c0       	rjmp	.+76     	; 0xea0 <game_finished+0xe4>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	85 30       	cpi	r24, 0x05	; 5
     e58:	91 05       	cpc	r25, r1
     e5a:	19 f7       	brne	.-58     	; 0xe22 <game_finished+0x66>
     e5c:	21 c0       	rjmp	.+66     	; 0xea0 <game_finished+0xe4>
     e5e:	eb ef       	ldi	r30, 0xFB	; 251
     e60:	f2 e0       	ldi	r31, 0x02	; 2
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     e66:	21 91       	ld	r18, Z+
     e68:	23 17       	cp	r18, r19
     e6a:	b0 f4       	brcc	.+44     	; 0xe98 <game_finished+0xdc>
					for (int a = 4; a>i; a--) {
     e6c:	84 30       	cpi	r24, 0x04	; 4
     e6e:	91 05       	cpc	r25, r1
     e70:	1c f0       	brlt	.+6      	; 0xe78 <game_finished+0xbc>
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <game_finished+0xd2>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	ee ef       	ldi	r30, 0xFE	; 254
     e7a:	f2 e0       	ldi	r31, 0x02	; 2
     e7c:	44 e0       	ldi	r20, 0x04	; 4
     e7e:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     e80:	41 50       	subi	r20, 0x01	; 1
     e82:	51 09       	sbc	r21, r1
     e84:	22 91       	ld	r18, -Z
     e86:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     e88:	84 17       	cp	r24, r20
     e8a:	95 07       	cpc	r25, r21
     e8c:	cc f3       	brlt	.-14     	; 0xe80 <game_finished+0xc4>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     e8e:	fc 01       	movw	r30, r24
     e90:	e6 50       	subi	r30, 0x06	; 6
     e92:	fd 4f       	sbci	r31, 0xFD	; 253
     e94:	30 83       	st	Z, r19
					break;
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <game_finished+0xe4>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	91 05       	cpc	r25, r1
     e9e:	19 f7       	brne	.-58     	; 0xe66 <game_finished+0xaa>
			break;
		
	}
	
	
	sei();
     ea0:	78 94       	sei
}
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <game_play>:
void game_play(uint8_t gameID)
{
     ea6:	cf 93       	push	r28
     ea8:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     eaa:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <gameActive>
     eae:	81 11       	cpse	r24, r1
     eb0:	0d c0       	rjmp	.+26     	; 0xecc <game_play+0x26>
	{
		game_sendStop();
     eb2:	0e 94 c2 06 	call	0xd84	; 0xd84 <game_sendStop>
     eb6:	2f ef       	ldi	r18, 0xFF	; 255
     eb8:	8f e7       	ldi	r24, 0x7F	; 127
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	21 50       	subi	r18, 0x01	; 1
     ebe:	80 40       	sbci	r24, 0x00	; 0
     ec0:	90 40       	sbci	r25, 0x00	; 0
     ec2:	e1 f7       	brne	.-8      	; 0xebc <game_play+0x16>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <game_play+0x20>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <game_play+0x22>
		_delay_ms(100);
		game_newgame();	
     ec8:	0e 94 33 06 	call	0xc66	; 0xc66 <game_newgame>
	}
	if (buttons.right_button) {
     ecc:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <buttons+0x1>
     ed0:	88 23       	and	r24, r24
     ed2:	21 f0       	breq	.+8      	; 0xedc <game_play+0x36>
		gameActive = 0;
     ed4:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <gameActive>
		menu_init();
     ed8:	0e 94 6f 0a 	call	0x14de	; 0x14de <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     edc:	0e 94 34 04 	call	0x868	; 0x868 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     ee0:	0e 94 44 06 	call	0xc88	; 0xc88 <game_recieveGameData>
	game_updateOled(gameID);
     ee4:	8c 2f       	mov	r24, r28
     ee6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <game_updateOled>
	switch (gameID) {
     eea:	c1 30       	cpi	r28, 0x01	; 1
     eec:	19 f0       	breq	.+6      	; 0xef4 <game_play+0x4e>
     eee:	c2 30       	cpi	r28, 0x02	; 2
     ef0:	49 f0       	breq	.+18     	; 0xf04 <game_play+0x5e>
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <game_play+0x6c>
		case 1:
			if (gameData.playtime==10) {
     ef4:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <gameData+0x2>
     ef8:	8a 30       	cpi	r24, 0x0A	; 10
     efa:	59 f4       	brne	.+22     	; 0xf12 <game_play+0x6c>
				game_finished(gameID);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	0e 94 de 06 	call	0xdbc	; 0xdbc <game_finished>
     f02:	07 c0       	rjmp	.+14     	; 0xf12 <game_play+0x6c>
			}
			break;
		case 2:
			if (gameData.score <10) {
     f04:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <gameData>
     f08:	8a 30       	cpi	r24, 0x0A	; 10
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <game_play+0x6c>
				game_finished(gameID);
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	0e 94 de 06 	call	0xdbc	; 0xdbc <game_finished>
			}
			break;
	}
	
	
}
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <game_displayHighscores+0x16>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	08 2f       	mov	r16, r24
	oled_reset();
     f32:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
	oled_home();
     f36:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f3a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <currentMenu>
     f3e:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <currentMenu+0x1>
     f42:	02 96       	adiw	r24, 0x02	; 2
     f44:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     f48:	0f 2e       	mov	r0, r31
     f4a:	fe ee       	ldi	r31, 0xEE	; 238
     f4c:	af 2e       	mov	r10, r31
     f4e:	f2 e0       	ldi	r31, 0x02	; 2
     f50:	bf 2e       	mov	r11, r31
     f52:	f0 2d       	mov	r31, r0
     f54:	0f 2e       	mov	r0, r31
     f56:	fa ef       	ldi	r31, 0xFA	; 250
     f58:	cf 2e       	mov	r12, r31
     f5a:	f2 e0       	ldi	r31, 0x02	; 2
     f5c:	df 2e       	mov	r13, r31
     f5e:	f0 2d       	mov	r31, r0
     f60:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f62:	e1 2c       	mov	r14, r1
     f64:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f66:	81 2f       	mov	r24, r17
     f68:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
		oled_print("Score ");
     f6c:	85 e2       	ldi	r24, 0x25	; 37
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	e8 1a       	sub	r14, r24
     f78:	f8 0a       	sbc	r15, r24
     f7a:	4a e0       	ldi	r20, 0x0A	; 10
     f7c:	be 01       	movw	r22, r28
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	c7 01       	movw	r24, r14
     f84:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
		oled_print(num);
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
		oled_print(": ");
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	92 e0       	ldi	r25, 0x02	; 2
     f94:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
		switch (gameID) {
     f98:	01 30       	cpi	r16, 0x01	; 1
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <game_displayHighscores+0x8c>
     f9c:	02 30       	cpi	r16, 0x02	; 2
     f9e:	59 f0       	breq	.+22     	; 0xfb6 <game_displayHighscores+0xa0>
     fa0:	13 c0       	rjmp	.+38     	; 0xfc8 <game_displayHighscores+0xb2>
     fa2:	f5 01       	movw	r30, r10
     fa4:	80 81       	ld	r24, Z
     fa6:	4a e0       	ldi	r20, 0x0A	; 10
     fa8:	be 01       	movw	r22, r28
     faa:	6f 5f       	subi	r22, 0xFF	; 255
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <game_displayHighscores+0xb2>
     fb6:	f6 01       	movw	r30, r12
     fb8:	80 81       	ld	r24, Z
     fba:	4a e0       	ldi	r20, 0x0A	; 10
     fbc:	be 01       	movw	r22, r28
     fbe:	6f 5f       	subi	r22, 0xFF	; 255
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 1b 10 	call	0x2036	; 0x2036 <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     fc8:	ce 01       	movw	r24, r28
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
     fd2:	ff ef       	ldi	r31, 0xFF	; 255
     fd4:	af 1a       	sub	r10, r31
     fd6:	bf 0a       	sbc	r11, r31
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	c8 1a       	sub	r12, r24
     fdc:	d8 0a       	sbc	r13, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
     fde:	18 30       	cpi	r17, 0x08	; 8
     fe0:	11 f6       	brne	.-124    	; 0xf66 <game_displayHighscores+0x50>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	08 95       	ret

00000ffc <music_playRick>:
	 30, 10, 20, 20,
	 20,40, 80, 40
};


void music_playRick() {
     ffc:	8f 92       	push	r8
     ffe:	9f 92       	push	r9
    1000:	af 92       	push	r10
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
	cli();
    1014:	f8 94       	cli
	oled_home();
    1016:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
	oled_reset();
    101a:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
    101e:	0d ee       	ldi	r16, 0xED	; 237
    1020:	10 e0       	ldi	r17, 0x00	; 0
    1022:	0f 2e       	mov	r0, r31
    1024:	fe e9       	ldi	r31, 0x9E	; 158
    1026:	ef 2e       	mov	r14, r31
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	ff 2e       	mov	r15, r31
    102c:	f0 2d       	mov	r31, r0
    102e:	c6 e0       	ldi	r28, 0x06	; 6
    1030:	d1 e0       	ldi	r29, 0x01	; 1
    1032:	0f 2e       	mov	r0, r31
    1034:	f9 e2       	ldi	r31, 0x29	; 41
    1036:	cf 2e       	mov	r12, r31
    1038:	f2 e0       	ldi	r31, 0x02	; 2
    103a:	df 2e       	mov	r13, r31
    103c:	f0 2d       	mov	r31, r0
    103e:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1040:	0f 2e       	mov	r0, r31
    1042:	f4 e1       	ldi	r31, 0x14	; 20
    1044:	af 2e       	mov	r10, r31
    1046:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1048:	b1 10       	cpse	r11, r1
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <music_playRick+0x54>
			oled_reset();
    104c:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
    1050:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1052:	e8 81       	ld	r30, Y
    1054:	f9 81       	ldd	r31, Y+1	; 0x01
    1056:	80 81       	ld	r24, Z
    1058:	88 23       	and	r24, r24
    105a:	41 f0       	breq	.+16     	; 0x106c <music_playRick+0x70>
			oled_gotoLine(line);
    105c:	8b 2d       	mov	r24, r11
    105e:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
			line++;
    1062:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    1064:	88 81       	ld	r24, Y
    1066:	99 81       	ldd	r25, Y+1	; 0x01
    1068:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    106c:	d4 01       	movw	r26, r8
    106e:	ed 91       	ld	r30, X+
    1070:	fc 91       	ld	r31, X
    1072:	22 96       	adiw	r28, 0x02	; 2
    1074:	01 90       	ld	r0, Z+
    1076:	00 20       	and	r0, r0
    1078:	e9 f7       	brne	.-6      	; 0x1074 <music_playRick+0x78>
    107a:	32 97       	sbiw	r30, 0x02	; 2
    107c:	80 81       	ld	r24, Z
    107e:	8e 32       	cpi	r24, 0x2E	; 46
    1080:	09 f4       	brne	.+2      	; 0x1084 <music_playRick+0x88>
			
			line = 0;
    1082:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    1084:	f8 01       	movw	r30, r16
    1086:	65 91       	lpm	r22, Z+
    1088:	74 91       	lpm	r23, Z
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1092:	f7 01       	movw	r30, r14
    1094:	84 91       	lpm	r24, Z
    1096:	a8 9e       	mul	r10, r24
    1098:	c0 01       	movw	r24, r0
    109a:	11 24       	eor	r1, r1
    109c:	09 2e       	mov	r0, r25
    109e:	00 0c       	add	r0, r0
    10a0:	aa 0b       	sbc	r26, r26
    10a2:	bb 0b       	sbc	r27, r27
		while (duration--) {
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	a1 05       	cpc	r26, r1
    10a8:	b1 05       	cpc	r27, r1
    10aa:	51 f0       	breq	.+20     	; 0x10c0 <music_playRick+0xc4>
    10ac:	ec ec       	ldi	r30, 0xCC	; 204
    10ae:	f4 e0       	ldi	r31, 0x04	; 4
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <music_playRick+0xb4>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <music_playRick+0xba>
    10b6:	00 00       	nop
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	a1 09       	sbc	r26, r1
    10bc:	b1 09       	sbc	r27, r1
    10be:	b1 f7       	brne	.-20     	; 0x10ac <music_playRick+0xb0>
    10c0:	0c 5f       	subi	r16, 0xFC	; 252
    10c2:	1f 4f       	sbci	r17, 0xFF	; 255
    10c4:	ff ef       	ldi	r31, 0xFF	; 255
    10c6:	ef 1a       	sub	r14, r31
    10c8:	ff 0a       	sbc	r15, r31
void music_playRick() {
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    10ca:	0c 15       	cp	r16, r12
    10cc:	1d 05       	cpc	r17, r13
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <music_playRick+0xd6>
    10d0:	bb cf       	rjmp	.-138    	; 0x1048 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	cb 01       	movw	r24, r22
    10d8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pwm_setFreq>
	menu_init();
    10dc:	0e 94 6f 0a 	call	0x14de	; 0x14de <menu_init>

	sei();
    10e0:	78 94       	sei
	

}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	bf 90       	pop	r11
    10f4:	af 90       	pop	r10
    10f6:	9f 90       	pop	r9
    10f8:	8f 90       	pop	r8
    10fa:	08 95       	ret

000010fc <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    10fc:	6b e0       	ldi	r22, 0x0B	; 11
    10fe:	72 e0       	ldi	r23, 0x02	; 2
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pwm_setFreq>
    1108:	2f ef       	ldi	r18, 0xFF	; 255
    110a:	8f e7       	ldi	r24, 0x7F	; 127
    110c:	97 e0       	ldi	r25, 0x07	; 7
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	80 40       	sbci	r24, 0x00	; 0
    1112:	90 40       	sbci	r25, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <music_gameOver+0x12>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <music_gameOver+0x1c>
    1118:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    111a:	68 e8       	ldi	r22, 0x88	; 136
    111c:	71 e0       	ldi	r23, 0x01	; 1
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pwm_setFreq>
    1126:	2f ef       	ldi	r18, 0xFF	; 255
    1128:	8f e7       	ldi	r24, 0x7F	; 127
    112a:	97 e0       	ldi	r25, 0x07	; 7
    112c:	21 50       	subi	r18, 0x01	; 1
    112e:	80 40       	sbci	r24, 0x00	; 0
    1130:	90 40       	sbci	r25, 0x00	; 0
    1132:	e1 f7       	brne	.-8      	; 0x112c <music_gameOver+0x30>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <music_gameOver+0x3a>
    1136:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    1138:	67 e3       	ldi	r22, 0x37	; 55
    113a:	71 e0       	ldi	r23, 0x01	; 1
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pwm_setFreq>
    1144:	2f ef       	ldi	r18, 0xFF	; 255
    1146:	8f e7       	ldi	r24, 0x7F	; 127
    1148:	97 e0       	ldi	r25, 0x07	; 7
    114a:	21 50       	subi	r18, 0x01	; 1
    114c:	80 40       	sbci	r24, 0x00	; 0
    114e:	90 40       	sbci	r25, 0x00	; 0
    1150:	e1 f7       	brne	.-8      	; 0x114a <music_gameOver+0x4e>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <music_gameOver+0x58>
    1154:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    1156:	66 e0       	ldi	r22, 0x06	; 6
    1158:	71 e0       	ldi	r23, 0x01	; 1
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pwm_setFreq>
    1162:	2f ef       	ldi	r18, 0xFF	; 255
    1164:	8f e7       	ldi	r24, 0x7F	; 127
    1166:	97 e0       	ldi	r25, 0x07	; 7
    1168:	21 50       	subi	r18, 0x01	; 1
    116a:	80 40       	sbci	r24, 0x00	; 0
    116c:	90 40       	sbci	r25, 0x00	; 0
    116e:	e1 f7       	brne	.-8      	; 0x1168 <music_gameOver+0x6c>
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <music_gameOver+0x76>
    1172:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	cb 01       	movw	r24, r22
    117a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pwm_setFreq>
    117e:	08 95       	ret

00001180 <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    1180:	bc 01       	movw	r22, r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pwm_setFreq>
    118a:	08 95       	ret

0000118c <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    118c:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    1192:	80 e8       	ldi	r24, 0x80	; 128
    1194:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    1196:	83 b7       	in	r24, 0x33	; 51
    1198:	88 60       	ori	r24, 0x08	; 8
    119a:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    119c:	83 b7       	in	r24, 0x33	; 51
    119e:	80 61       	ori	r24, 0x10	; 16
    11a0:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    11a2:	83 b7       	in	r24, 0x33	; 51
    11a4:	88 7f       	andi	r24, 0xF8	; 248
    11a6:	83 bf       	out	0x33, r24	; 51
    11a8:	08 95       	ret

000011aa <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    if (freq == 0) {
    11ae:	67 2b       	or	r22, r23
    11b0:	68 2b       	or	r22, r24
    11b2:	69 2b       	or	r22, r25
    11b4:	21 f4       	brne	.+8      	; 0x11be <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11b6:	83 b7       	in	r24, 0x33	; 51
    11b8:	88 7f       	andi	r24, 0xF8	; 248
    11ba:	83 bf       	out	0x33, r24	; 51
        return;
    11bc:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	70 e8       	ldi	r23, 0x80	; 128
    11c2:	85 e2       	ldi	r24, 0x25	; 37
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__udivmodsi4>
    11ca:	da 01       	movw	r26, r20
    11cc:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    11ce:	21 30       	cpi	r18, 0x01	; 1
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	36 07       	cpc	r19, r22
    11d4:	41 05       	cpc	r20, r1
    11d6:	51 05       	cpc	r21, r1
    11d8:	a8 f1       	brcs	.+106    	; 0x1244 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    11da:	68 94       	set
    11dc:	12 f8       	bld	r1, 2
    11de:	b6 95       	lsr	r27
    11e0:	a7 95       	ror	r26
    11e2:	97 95       	ror	r25
    11e4:	87 95       	ror	r24
    11e6:	16 94       	lsr	r1
    11e8:	d1 f7       	brne	.-12     	; 0x11de <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	96 07       	cpc	r25, r22
    11f0:	a1 05       	cpc	r26, r1
    11f2:	b1 05       	cpc	r27, r1
    11f4:	48 f1       	brcs	.+82     	; 0x1248 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    11f6:	da 01       	movw	r26, r20
    11f8:	c9 01       	movw	r24, r18
    11fa:	68 94       	set
    11fc:	15 f8       	bld	r1, 5
    11fe:	b6 95       	lsr	r27
    1200:	a7 95       	ror	r26
    1202:	97 95       	ror	r25
    1204:	87 95       	ror	r24
    1206:	16 94       	lsr	r1
    1208:	d1 f7       	brne	.-12     	; 0x11fe <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	96 07       	cpc	r25, r22
    1210:	a1 05       	cpc	r26, r1
    1212:	b1 05       	cpc	r27, r1
    1214:	d8 f0       	brcs	.+54     	; 0x124c <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    1216:	bb 27       	eor	r27, r27
    1218:	a5 2f       	mov	r26, r21
    121a:	94 2f       	mov	r25, r20
    121c:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	96 07       	cpc	r25, r22
    1224:	a1 05       	cpc	r26, r1
    1226:	b1 05       	cpc	r27, r1
    1228:	98 f0       	brcs	.+38     	; 0x1250 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    122a:	da 01       	movw	r26, r20
    122c:	c9 01       	movw	r24, r18
    122e:	07 2e       	mov	r0, r23
    1230:	7a e0       	ldi	r23, 0x0A	; 10
    1232:	b6 95       	lsr	r27
    1234:	a7 95       	ror	r26
    1236:	97 95       	ror	r25
    1238:	87 95       	ror	r24
    123a:	7a 95       	dec	r23
    123c:	d1 f7       	brne	.-12     	; 0x1232 <pwm_setFreq+0x88>
    123e:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    1240:	35 e0       	ldi	r19, 0x05	; 5
    1242:	07 c0       	rjmp	.+14     	; 0x1252 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    1244:	31 e0       	ldi	r19, 0x01	; 1
    1246:	05 c0       	rjmp	.+10     	; 0x1252 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    1248:	32 e0       	ldi	r19, 0x02	; 2
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    124c:	33 e0       	ldi	r19, 0x03	; 3
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    1250:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1252:	23 b7       	in	r18, 0x33	; 51
    1254:	28 7f       	andi	r18, 0xF8	; 248
    1256:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    1258:	23 b7       	in	r18, 0x33	; 51
    125a:	23 2b       	or	r18, r19
    125c:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    125e:	81 50       	subi	r24, 0x01	; 1
    1260:	81 bf       	out	0x31, r24	; 49
    1262:	08 95       	ret

00001264 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    1264:	85 b7       	in	r24, 0x35	; 53
    1266:	8f 7e       	andi	r24, 0xEF	; 239
    1268:	85 bf       	out	0x35, r24	; 53
    126a:	84 b7       	in	r24, 0x34	; 52
    126c:	8f 7d       	andi	r24, 0xDF	; 223
    126e:	84 bf       	out	0x34, r24	; 52
    1270:	86 b7       	in	r24, 0x36	; 54
    1272:	8f 77       	andi	r24, 0x7F	; 127
    1274:	86 bf       	out	0x36, r24	; 54
    1276:	08 95       	ret

00001278 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    1278:	88 b1       	in	r24, 0x08	; 8
    127a:	88 68       	ori	r24, 0x88	; 136
    127c:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    127e:	85 b7       	in	r24, 0x35	; 53
    1280:	80 62       	ori	r24, 0x20	; 32
    1282:	85 bf       	out	0x35, r24	; 53
    1284:	88 95       	sleep
    1286:	85 b7       	in	r24, 0x35	; 53
    1288:	8f 7d       	andi	r24, 0xDF	; 223
    128a:	85 bf       	out	0x35, r24	; 53
    128c:	08 95       	ret

0000128e <joystick_init>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystick_init() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1294:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    129e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <joystickOffsetY>
    12a2:	08 95       	ret

000012a4 <joystick_readPosition>:
}
void joystick_readPosition() {
    12a4:	cf 92       	push	r12
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12b6:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12be:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    12c0:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <joystickOffsetX>
    12c4:	c6 17       	cp	r28, r22
    12c6:	80 f4       	brcc	.+32     	; 0x12e8 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	2c 2f       	mov	r18, r28
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	26 1b       	sub	r18, r22
    12d0:	37 0b       	sbc	r19, r23
    12d2:	44 e6       	ldi	r20, 0x64	; 100
    12d4:	42 9f       	mul	r20, r18
    12d6:	c0 01       	movw	r24, r0
    12d8:	43 9f       	mul	r20, r19
    12da:	90 0d       	add	r25, r0
    12dc:	11 24       	eor	r1, r1
    12de:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divmodhi4>
    12e2:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <joystick_pos>
    12e6:	14 c0       	rjmp	.+40     	; 0x1310 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    12e8:	46 2f       	mov	r20, r22
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	2c 2f       	mov	r18, r28
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	24 1b       	sub	r18, r20
    12f2:	35 0b       	sbc	r19, r21
    12f4:	64 e6       	ldi	r22, 0x64	; 100
    12f6:	62 9f       	mul	r22, r18
    12f8:	c0 01       	movw	r24, r0
    12fa:	63 9f       	mul	r22, r19
    12fc:	90 0d       	add	r25, r0
    12fe:	11 24       	eor	r1, r1
    1300:	6f ef       	ldi	r22, 0xFF	; 255
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	64 1b       	sub	r22, r20
    1306:	75 0b       	sbc	r23, r21
    1308:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divmodhi4>
    130c:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    1310:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <joystickOffsetY>
    1314:	e2 17       	cp	r30, r18
    1316:	88 f4       	brcc	.+34     	; 0x133a <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1318:	62 2f       	mov	r22, r18
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	4e 2f       	mov	r20, r30
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	46 1b       	sub	r20, r22
    1322:	57 0b       	sbc	r21, r23
    1324:	24 e6       	ldi	r18, 0x64	; 100
    1326:	24 9f       	mul	r18, r20
    1328:	c0 01       	movw	r24, r0
    132a:	25 9f       	mul	r18, r21
    132c:	90 0d       	add	r25, r0
    132e:	11 24       	eor	r1, r1
    1330:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divmodhi4>
    1334:	60 93 eb 02 	sts	0x02EB, r22	; 0x8002eb <joystick_pos+0x1>
    1338:	13 c0       	rjmp	.+38     	; 0x1360 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4e 2f       	mov	r20, r30
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	42 1b       	sub	r20, r18
    1342:	53 0b       	sbc	r21, r19
    1344:	64 e6       	ldi	r22, 0x64	; 100
    1346:	64 9f       	mul	r22, r20
    1348:	c0 01       	movw	r24, r0
    134a:	65 9f       	mul	r22, r21
    134c:	90 0d       	add	r25, r0
    134e:	11 24       	eor	r1, r1
    1350:	6f ef       	ldi	r22, 0xFF	; 255
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	62 1b       	sub	r22, r18
    1356:	73 0b       	sbc	r23, r19
    1358:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divmodhi4>
    135c:	60 93 eb 02 	sts	0x02EB, r22	; 0x8002eb <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    1360:	ca ee       	ldi	r28, 0xEA	; 234
    1362:	d2 e0       	ldi	r29, 0x02	; 2
    1364:	68 81       	ld	r22, Y
    1366:	06 2e       	mov	r0, r22
    1368:	00 0c       	add	r0, r0
    136a:	77 0b       	sbc	r23, r23
    136c:	88 0b       	sbc	r24, r24
    136e:	99 0b       	sbc	r25, r25
    1370:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__floatsisf>
    1374:	6b 01       	movw	r12, r22
    1376:	7c 01       	movw	r14, r24
    1378:	69 81       	ldd	r22, Y+1	; 0x01
    137a:	06 2e       	mov	r0, r22
    137c:	00 0c       	add	r0, r0
    137e:	77 0b       	sbc	r23, r23
    1380:	88 0b       	sbc	r24, r24
    1382:	99 0b       	sbc	r25, r25
    1384:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__floatsisf>
    1388:	a7 01       	movw	r20, r14
    138a:	96 01       	movw	r18, r12
    138c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <atan2>
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	44 eb       	ldi	r20, 0xB4	; 180
    1396:	53 e4       	ldi	r21, 0x43	; 67
    1398:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	5f e3       	ldi	r21, 0x3F	; 63
    13a4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    13a8:	23 ec       	ldi	r18, 0xC3	; 195
    13aa:	35 ef       	ldi	r19, 0xF5	; 245
    13ac:	48 e4       	ldi	r20, 0x48	; 72
    13ae:	50 e4       	ldi	r21, 0x40	; 64
    13b0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divsf3>
    13b4:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fixsfsi>
    13b8:	7b 83       	std	Y+3, r23	; 0x03
    13ba:	6a 83       	std	Y+2, r22	; 0x02
}
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	08 95       	ret

000013ca <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    13ca:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    13cc:	80 81       	ld	r24, Z
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	98 0f       	add	r25, r24
    13d2:	99 30       	cpi	r25, 0x09	; 9
    13d4:	20 f4       	brcc	.+8      	; 0x13de <joystick_getDirection+0x14>
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	9c 5f       	subi	r25, 0xFC	; 252
    13da:	99 30       	cpi	r25, 0x09	; 9
    13dc:	90 f0       	brcs	.+36     	; 0x1402 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    13de:	85 30       	cpi	r24, 0x05	; 5
    13e0:	2c f0       	brlt	.+10     	; 0x13ec <joystick_getDirection+0x22>
    13e2:	81 81       	ldd	r24, Z+1	; 0x01
    13e4:	8f 5c       	subi	r24, 0xCF	; 207
    13e6:	83 36       	cpi	r24, 0x63	; 99
    13e8:	38 f4       	brcc	.+14     	; 0x13f8 <joystick_getDirection+0x2e>
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    13ec:	8c 3f       	cpi	r24, 0xFC	; 252
    13ee:	24 f4       	brge	.+8      	; 0x13f8 <joystick_getDirection+0x2e>
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
    13f2:	8f 5c       	subi	r24, 0xCF	; 207
    13f4:	83 36       	cpi	r24, 0x63	; 99
    13f6:	48 f0       	brcs	.+18     	; 0x140a <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    13f8:	81 81       	ldd	r24, Z+1	; 0x01
    13fa:	8c 3f       	cpi	r24, 0xFC	; 252
    13fc:	44 f0       	brlt	.+16     	; 0x140e <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    1402:	84 e0       	ldi	r24, 0x04	; 4
    1404:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    140e:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    1410:	08 95       	ret

00001412 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    1412:	0e 94 e5 09 	call	0x13ca	; 0x13ca <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    1416:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <currentMenu+0x3>
    141a:	94 30       	cpi	r25, 0x04	; 4
    141c:	09 f0       	breq	.+2      	; 0x1420 <navigateMenu+0xe>
    141e:	5c c0       	rjmp	.+184    	; 0x14d8 <navigateMenu+0xc6>
			switch (dir) {
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	e1 f1       	breq	.+120    	; 0x149c <navigateMenu+0x8a>
    1424:	60 f1       	brcs	.+88     	; 0x147e <navigateMenu+0x6c>
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	c9 f0       	breq	.+50     	; 0x145c <navigateMenu+0x4a>
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	09 f0       	breq	.+2      	; 0x1430 <navigateMenu+0x1e>
    142e:	54 c0       	rjmp	.+168    	; 0x14d8 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    1430:	e4 ef       	ldi	r30, 0xF4	; 244
    1432:	f2 e0       	ldi	r31, 0x02	; 2
    1434:	92 81       	ldd	r25, Z+2	; 0x02
    1436:	49 2f       	mov	r20, r25
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	01 90       	ld	r0, Z+
    143c:	f0 81       	ld	r31, Z
    143e:	e0 2d       	mov	r30, r0
    1440:	20 a1       	ldd	r18, Z+32	; 0x20
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	21 50       	subi	r18, 0x01	; 1
    1446:	31 09       	sbc	r19, r1
    1448:	42 17       	cp	r20, r18
    144a:	53 07       	cpc	r21, r19
    144c:	24 f4       	brge	.+8      	; 0x1456 <navigateMenu+0x44>
					currentMenu.childIndex++;
    144e:	9f 5f       	subi	r25, 0xFF	; 255
    1450:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <currentMenu+0x2>
    1454:	41 c0       	rjmp	.+130    	; 0x14d8 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1456:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <currentMenu+0x2>
    145a:	3e c0       	rjmp	.+124    	; 0x14d8 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    145c:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <currentMenu+0x2>
    1460:	99 23       	and	r25, r25
    1462:	21 f0       	breq	.+8      	; 0x146c <navigateMenu+0x5a>
					currentMenu.childIndex--;
    1464:	91 50       	subi	r25, 0x01	; 1
    1466:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <currentMenu+0x2>
    146a:	36 c0       	rjmp	.+108    	; 0x14d8 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    146c:	e4 ef       	ldi	r30, 0xF4	; 244
    146e:	f2 e0       	ldi	r31, 0x02	; 2
    1470:	a0 81       	ld	r26, Z
    1472:	b1 81       	ldd	r27, Z+1	; 0x01
    1474:	90 96       	adiw	r26, 0x20	; 32
    1476:	9c 91       	ld	r25, X
    1478:	91 50       	subi	r25, 0x01	; 1
    147a:	92 83       	std	Z+2, r25	; 0x02
    147c:	2d c0       	rjmp	.+90     	; 0x14d8 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    147e:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <currentMenu>
    1482:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <currentMenu+0x1>
    1486:	22 89       	ldd	r18, Z+18	; 0x12
    1488:	33 89       	ldd	r19, Z+19	; 0x13
    148a:	21 15       	cp	r18, r1
    148c:	31 05       	cpc	r19, r1
    148e:	21 f1       	breq	.+72     	; 0x14d8 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    1490:	e4 ef       	ldi	r30, 0xF4	; 244
    1492:	f2 e0       	ldi	r31, 0x02	; 2
    1494:	31 83       	std	Z+1, r19	; 0x01
    1496:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    1498:	12 82       	std	Z+2, r1	; 0x02
    149a:	1e c0       	rjmp	.+60     	; 0x14d8 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    149c:	a4 ef       	ldi	r26, 0xF4	; 244
    149e:	b2 e0       	ldi	r27, 0x02	; 2
    14a0:	2d 91       	ld	r18, X+
    14a2:	3c 91       	ld	r19, X
    14a4:	11 97       	sbiw	r26, 0x01	; 1
    14a6:	12 96       	adiw	r26, 0x02	; 2
    14a8:	9c 91       	ld	r25, X
    14aa:	e9 2f       	mov	r30, r25
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	3a 96       	adiw	r30, 0x0a	; 10
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	e2 0f       	add	r30, r18
    14b6:	f3 1f       	adc	r31, r19
    14b8:	01 90       	ld	r0, Z+
    14ba:	f0 81       	ld	r31, Z
    14bc:	e0 2d       	mov	r30, r0
    14be:	90 a1       	ldd	r25, Z+32	; 0x20
    14c0:	91 11       	cpse	r25, r1
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <navigateMenu+0xb8>
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	99 23       	and	r25, r25
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    14ca:	a4 ef       	ldi	r26, 0xF4	; 244
    14cc:	b2 e0       	ldi	r27, 0x02	; 2
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	fc 93       	st	X, r31
    14d2:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    14d8:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <currentMenu+0x3>
    14dc:	08 95       	ret

000014de <menu_init>:
#include <string.h>


MenuNode nodes[8];

void menu_init() {
    14de:	0f 93       	push	r16
    14e0:	1f 93       	push	r17
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    14e6:	8a e0       	ldi	r24, 0x0A	; 10
    14e8:	ed e9       	ldi	r30, 0x9D	; 157
    14ea:	f2 e0       	ldi	r31, 0x02	; 2
    14ec:	a3 e1       	ldi	r26, 0x13	; 19
    14ee:	b3 e0       	ldi	r27, 0x03	; 3
    14f0:	01 90       	ld	r0, Z+
    14f2:	0d 92       	st	X+, r0
    14f4:	8a 95       	dec	r24
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    14f8:	8a e0       	ldi	r24, 0x0A	; 10
    14fa:	e7 ea       	ldi	r30, 0xA7	; 167
    14fc:	f2 e0       	ldi	r31, 0x02	; 2
    14fe:	a4 e3       	ldi	r26, 0x34	; 52
    1500:	b3 e0       	ldi	r27, 0x03	; 3
    1502:	01 90       	ld	r0, Z+
    1504:	0d 92       	st	X+, r0
    1506:	8a 95       	dec	r24
    1508:	e1 f7       	brne	.-8      	; 0x1502 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    150a:	8c e0       	ldi	r24, 0x0C	; 12
    150c:	e1 eb       	ldi	r30, 0xB1	; 177
    150e:	f2 e0       	ldi	r31, 0x02	; 2
    1510:	a5 e5       	ldi	r26, 0x55	; 85
    1512:	b3 e0       	ldi	r27, 0x03	; 3
    1514:	01 90       	ld	r0, Z+
    1516:	0d 92       	st	X+, r0
    1518:	8a 95       	dec	r24
    151a:	e1 f7       	brne	.-8      	; 0x1514 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    151c:	86 e0       	ldi	r24, 0x06	; 6
    151e:	ed eb       	ldi	r30, 0xBD	; 189
    1520:	f2 e0       	ldi	r31, 0x02	; 2
    1522:	a6 e7       	ldi	r26, 0x76	; 118
    1524:	b3 e0       	ldi	r27, 0x03	; 3
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	8a 95       	dec	r24
    152c:	e1 f7       	brne	.-8      	; 0x1526 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    152e:	87 e0       	ldi	r24, 0x07	; 7
    1530:	e3 ec       	ldi	r30, 0xC3	; 195
    1532:	f2 e0       	ldi	r31, 0x02	; 2
    1534:	a7 e9       	ldi	r26, 0x97	; 151
    1536:	b3 e0       	ldi	r27, 0x03	; 3
    1538:	01 90       	ld	r0, Z+
    153a:	0d 92       	st	X+, r0
    153c:	8a 95       	dec	r24
    153e:	e1 f7       	brne	.-8      	; 0x1538 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    1540:	87 e0       	ldi	r24, 0x07	; 7
    1542:	ea ec       	ldi	r30, 0xCA	; 202
    1544:	f2 e0       	ldi	r31, 0x02	; 2
    1546:	a8 eb       	ldi	r26, 0xB8	; 184
    1548:	b3 e0       	ldi	r27, 0x03	; 3
    154a:	01 90       	ld	r0, Z+
    154c:	0d 92       	st	X+, r0
    154e:	8a 95       	dec	r24
    1550:	e1 f7       	brne	.-8      	; 0x154a <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    1552:	8a e0       	ldi	r24, 0x0A	; 10
    1554:	e1 ed       	ldi	r30, 0xD1	; 209
    1556:	f2 e0       	ldi	r31, 0x02	; 2
    1558:	a9 ed       	ldi	r26, 0xD9	; 217
    155a:	b3 e0       	ldi	r27, 0x03	; 3
    155c:	01 90       	ld	r0, Z+
    155e:	0d 92       	st	X+, r0
    1560:	8a 95       	dec	r24
    1562:	e1 f7       	brne	.-8      	; 0x155c <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    1564:	8a e0       	ldi	r24, 0x0A	; 10
    1566:	eb ed       	ldi	r30, 0xDB	; 219
    1568:	f2 e0       	ldi	r31, 0x02	; 2
    156a:	aa ef       	ldi	r26, 0xFA	; 250
    156c:	b3 e0       	ldi	r27, 0x03	; 3
    156e:	01 90       	ld	r0, Z+
    1570:	0d 92       	st	X+, r0
    1572:	8a 95       	dec	r24
    1574:	e1 f7       	brne	.-8      	; 0x156e <menu_init+0x90>
    1576:	61 e1       	ldi	r22, 0x11	; 17
    1578:	73 e0       	ldi	r23, 0x03	; 3
    157a:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    1580:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    1582:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	14 f0       	brlt	.+4      	; 0x158e <menu_init+0xb0>
			nodes[i].isAction=1;
    158a:	21 83       	std	Z+1, r18	; 0x01
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    158e:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	b1 96       	adiw	r30, 0x21	; 33
    1594:	88 30       	cpi	r24, 0x08	; 8
    1596:	91 05       	cpc	r25, r1
    1598:	a1 f7       	brne	.-24     	; 0x1582 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    159a:	e1 e1       	ldi	r30, 0x11	; 17
    159c:	f3 e0       	ldi	r31, 0x03	; 3
    159e:	83 e0       	ldi	r24, 0x03	; 3
    15a0:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <nodes+0x41>
	nodes[2].numChildren = 2;
    15a8:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <nodes+0x62>
	nodes[3].numChildren = 0;
    15ac:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <nodes+0x83>
	nodes[4].numChildren = 0;
    15b0:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <nodes+0xa4>
	nodes[5].numChildren = 0;
    15b4:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15b8:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15bc:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    15c0:	13 8a       	std	Z+19, r1	; 0x13
    15c2:	12 8a       	std	Z+18, r1	; 0x12
    15c4:	09 e1       	ldi	r16, 0x19	; 25
    15c6:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    15c8:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    15ca:	51 e2       	ldi	r21, 0x21	; 33
    15cc:	18 c0       	rjmp	.+48     	; 0x15fe <menu_init+0x120>
    15ce:	54 9f       	mul	r21, r20
    15d0:	f0 01       	movw	r30, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	ef 5e       	subi	r30, 0xEF	; 239
    15d6:	fc 4f       	sbci	r31, 0xFC	; 252
    15d8:	e9 93       	st	Y+, r30
    15da:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    15dc:	b3 8b       	std	Z+19, r27	; 0x13
    15de:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    15e0:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15e2:	2f 5f       	subi	r18, 0xFF	; 255
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	90 96       	adiw	r26, 0x20	; 32
    15e8:	8c 91       	ld	r24, X
    15ea:	90 97       	sbiw	r26, 0x20	; 32
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	28 17       	cp	r18, r24
    15f0:	39 07       	cpc	r19, r25
    15f2:	6c f3       	brlt	.-38     	; 0x15ce <menu_init+0xf0>
    15f4:	6f 5d       	subi	r22, 0xDF	; 223
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    15f8:	60 17       	cp	r22, r16
    15fa:	71 07       	cpc	r23, r17
    15fc:	59 f0       	breq	.+22     	; 0x1614 <menu_init+0x136>
    15fe:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1600:	90 96       	adiw	r26, 0x20	; 32
    1602:	8c 91       	ld	r24, X
    1604:	90 97       	sbiw	r26, 0x20	; 32
    1606:	88 23       	and	r24, r24
    1608:	a9 f3       	breq	.-22     	; 0x15f4 <menu_init+0x116>
    160a:	eb 01       	movw	r28, r22
    160c:	64 96       	adiw	r28, 0x14	; 20
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	dd cf       	rjmp	.-70     	; 0x15ce <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    1614:	8a ee       	ldi	r24, 0xEA	; 234
    1616:	92 e0       	ldi	r25, 0x02	; 2
    1618:	0e 94 09 0a 	call	0x1412	; 0x1412 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    161c:	e4 ef       	ldi	r30, 0xF4	; 244
    161e:	f2 e0       	ldi	r31, 0x02	; 2
    1620:	81 e1       	ldi	r24, 0x11	; 17
    1622:	93 e0       	ldi	r25, 0x03	; 3
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1628:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    162a:	84 e0       	ldi	r24, 0x04	; 4
    162c:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
	oled_reset();
    1642:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
	oled_home();
    1646:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    164a:	c4 ef       	ldi	r28, 0xF4	; 244
    164c:	d2 e0       	ldi	r29, 0x02	; 2
    164e:	88 81       	ld	r24, Y
    1650:	99 81       	ldd	r25, Y+1	; 0x01
    1652:	02 96       	adiw	r24, 0x02	; 2
    1654:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1658:	e8 81       	ld	r30, Y
    165a:	f9 81       	ldd	r31, Y+1	; 0x01
    165c:	80 a1       	ldd	r24, Z+32	; 0x20
    165e:	88 23       	and	r24, r24
    1660:	51 f1       	breq	.+84     	; 0x16b6 <menu_printCurrentMenu+0x7e>
    1662:	68 94       	set
    1664:	ff 24       	eor	r15, r15
    1666:	f1 f8       	bld	r15, 1
    1668:	c0 e0       	ldi	r28, 0x00	; 0
    166a:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    166c:	04 ef       	ldi	r16, 0xF4	; 244
    166e:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    1670:	8f 2d       	mov	r24, r15
    1672:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1676:	d8 01       	movw	r26, r16
    1678:	8d 91       	ld	r24, X+
    167a:	9c 91       	ld	r25, X
    167c:	fe 01       	movw	r30, r28
    167e:	3a 96       	adiw	r30, 0x0a	; 10
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	e8 0f       	add	r30, r24
    1686:	f9 1f       	adc	r31, r25
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	02 96       	adiw	r24, 0x02	; 2
    168e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_print>
		if (currentMenu.childIndex == i) {
    1692:	f8 01       	movw	r30, r16
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	8c 17       	cp	r24, r28
    169a:	9d 07       	cpc	r25, r29
    169c:	11 f4       	brne	.+4      	; 0x16a2 <menu_printCurrentMenu+0x6a>
			oled_print_arrow();
    169e:	0e 94 83 0b 	call	0x1706	; 0x1706 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    16a2:	21 96       	adiw	r28, 0x01	; 1
    16a4:	f3 94       	inc	r15
    16a6:	d8 01       	movw	r26, r16
    16a8:	ed 91       	ld	r30, X+
    16aa:	fc 91       	ld	r31, X
    16ac:	80 a1       	ldd	r24, Z+32	; 0x20
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	c8 17       	cp	r28, r24
    16b2:	d9 07       	cpc	r29, r25
    16b4:	ec f2       	brlt	.-70     	; 0x1670 <menu_printCurrentMenu+0x38>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	08 95       	ret

000016c2 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16c2:	80 55       	subi	r24, 0x50	; 80
    16c4:	e0 e0       	ldi	r30, 0x00	; 0
    16c6:	f0 e1       	ldi	r31, 0x10	; 16
    16c8:	80 83       	st	Z, r24
    16ca:	86 2f       	mov	r24, r22
    16cc:	8f 70       	andi	r24, 0x0F	; 15
    16ce:	80 83       	st	Z, r24
    16d0:	62 95       	swap	r22
    16d2:	6f 70       	andi	r22, 0x0F	; 15
    16d4:	60 61       	ori	r22, 0x10	; 16
    16d6:	60 83       	st	Z, r22
    16d8:	08 95       	ret

000016da <oled_reset>:
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	10 e0       	ldi	r17, 0x00	; 0
    16e2:	c0 e0       	ldi	r28, 0x00	; 0
    16e4:	d2 e1       	ldi	r29, 0x12	; 18
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	81 2f       	mov	r24, r17
    16ea:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <oled_pos>
    16ee:	80 e8       	ldi	r24, 0x80	; 128
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	18 82       	st	Y, r1
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	e9 f7       	brne	.-6      	; 0x16f2 <oled_reset+0x18>
    16f8:	1f 5f       	subi	r17, 0xFF	; 255
    16fa:	18 30       	cpi	r17, 0x08	; 8
    16fc:	a1 f7       	brne	.-24     	; 0x16e6 <oled_reset+0xc>
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	08 95       	ret

00001706 <oled_print_arrow>:
    1706:	e0 e0       	ldi	r30, 0x00	; 0
    1708:	f2 e1       	ldi	r31, 0x12	; 18
    170a:	88 e1       	ldi	r24, 0x18	; 24
    170c:	80 83       	st	Z, r24
    170e:	9c e3       	ldi	r25, 0x3C	; 60
    1710:	90 83       	st	Z, r25
    1712:	9e e7       	ldi	r25, 0x7E	; 126
    1714:	90 83       	st	Z, r25
    1716:	80 83       	st	Z, r24
    1718:	80 83       	st	Z, r24
    171a:	08 95       	ret

0000171c <oled_home>:
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <oled_pos>
    1724:	08 95       	ret

00001726 <oled_init>:
    1726:	e0 e0       	ldi	r30, 0x00	; 0
    1728:	f0 e1       	ldi	r31, 0x10	; 16
    172a:	8e ea       	ldi	r24, 0xAE	; 174
    172c:	80 83       	st	Z, r24
    172e:	81 ea       	ldi	r24, 0xA1	; 161
    1730:	80 83       	st	Z, r24
    1732:	8a ed       	ldi	r24, 0xDA	; 218
    1734:	80 83       	st	Z, r24
    1736:	82 e1       	ldi	r24, 0x12	; 18
    1738:	80 83       	st	Z, r24
    173a:	88 ec       	ldi	r24, 0xC8	; 200
    173c:	80 83       	st	Z, r24
    173e:	88 ea       	ldi	r24, 0xA8	; 168
    1740:	80 83       	st	Z, r24
    1742:	8f e3       	ldi	r24, 0x3F	; 63
    1744:	80 83       	st	Z, r24
    1746:	85 ed       	ldi	r24, 0xD5	; 213
    1748:	80 83       	st	Z, r24
    174a:	80 e8       	ldi	r24, 0x80	; 128
    174c:	80 83       	st	Z, r24
    174e:	81 e8       	ldi	r24, 0x81	; 129
    1750:	80 83       	st	Z, r24
    1752:	80 e5       	ldi	r24, 0x50	; 80
    1754:	80 83       	st	Z, r24
    1756:	89 ed       	ldi	r24, 0xD9	; 217
    1758:	80 83       	st	Z, r24
    175a:	81 e2       	ldi	r24, 0x21	; 33
    175c:	80 83       	st	Z, r24
    175e:	80 e2       	ldi	r24, 0x20	; 32
    1760:	80 83       	st	Z, r24
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	80 83       	st	Z, r24
    1766:	8b ed       	ldi	r24, 0xDB	; 219
    1768:	80 83       	st	Z, r24
    176a:	80 e3       	ldi	r24, 0x30	; 48
    176c:	80 83       	st	Z, r24
    176e:	8d ea       	ldi	r24, 0xAD	; 173
    1770:	80 83       	st	Z, r24
    1772:	10 82       	st	Z, r1
    1774:	84 ea       	ldi	r24, 0xA4	; 164
    1776:	80 83       	st	Z, r24
    1778:	86 ea       	ldi	r24, 0xA6	; 166
    177a:	80 83       	st	Z, r24
    177c:	8f ea       	ldi	r24, 0xAF	; 175
    177e:	80 83       	st	Z, r24
    1780:	0e 94 6d 0b 	call	0x16da	; 0x16da <oled_reset>
    1784:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_home>
    1788:	08 95       	ret

0000178a <oled_gotoLine>:
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <oled_pos>
    1790:	08 95       	ret

00001792 <oled_print>:

void oled_print(char* character){
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	dc 01       	movw	r26, r24
	while (*character != '\0')
    1798:	8c 91       	ld	r24, X
    179a:	81 11       	cpse	r24, r1
    179c:	1a c0       	rjmp	.+52     	; 0x17d2 <oled_print+0x40>
    179e:	1e c0       	rjmp	.+60     	; 0x17dc <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    17a0:	ec 91       	ld	r30, X
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	b0 97       	sbiw	r30, 0x20	; 32
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	e2 0f       	add	r30, r18
    17b4:	f3 1f       	adc	r31, r19
    17b6:	e7 5d       	subi	r30, 0xD7	; 215
    17b8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ba:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17bc:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17be:	2f 5f       	subi	r18, 0xFF	; 255
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	28 30       	cpi	r18, 0x08	; 8
    17c4:	31 05       	cpc	r19, r1
    17c6:	61 f7       	brne	.-40     	; 0x17a0 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17c8:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    17ca:	8c 91       	ld	r24, X
    17cc:	81 11       	cpse	r24, r1
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <oled_print+0x44>
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17d2:	c0 e0       	ldi	r28, 0x00	; 0
    17d4:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	e2 cf       	rjmp	.-60     	; 0x17a0 <oled_print+0xe>
		}
		character++;
	}
	
	
}
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	08 95       	ret

000017e2 <setupInit>:
#define MYUBRR FOSC/16/BAUD-1
#include <util/delay.h>


	void setupInit(void){
	cli();
    17e2:	f8 94       	cli
	xmem_init();
    17e4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <xmem_init>
    17e8:	2f ef       	ldi	r18, 0xFF	; 255
    17ea:	8f e7       	ldi	r24, 0x7F	; 127
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	21 50       	subi	r18, 0x01	; 1
    17f0:	80 40       	sbci	r24, 0x00	; 0
    17f2:	90 40       	sbci	r25, 0x00	; 0
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <setupInit+0xc>
    17f6:	00 c0       	rjmp	.+0      	; 0x17f8 <setupInit+0x16>
    17f8:	00 c0       	rjmp	.+0      	; 0x17fa <setupInit+0x18>
	_delay_ms(100);
	USART_init(MYUBRR);
    17fa:	8f e1       	ldi	r24, 0x1F	; 31
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <USART_init>
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	8f e7       	ldi	r24, 0x7F	; 127
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	21 50       	subi	r18, 0x01	; 1
    180a:	80 40       	sbci	r24, 0x00	; 0
    180c:	90 40       	sbci	r25, 0x00	; 0
    180e:	e1 f7       	brne	.-8      	; 0x1808 <setupInit+0x26>
    1810:	00 c0       	rjmp	.+0      	; 0x1812 <setupInit+0x30>
    1812:	00 c0       	rjmp	.+0      	; 0x1814 <setupInit+0x32>
	_delay_ms(100);
	adcInit();
    1814:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
    1818:	2f ef       	ldi	r18, 0xFF	; 255
    181a:	8f e7       	ldi	r24, 0x7F	; 127
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	21 50       	subi	r18, 0x01	; 1
    1820:	80 40       	sbci	r24, 0x00	; 0
    1822:	90 40       	sbci	r25, 0x00	; 0
    1824:	e1 f7       	brne	.-8      	; 0x181e <setupInit+0x3c>
    1826:	00 c0       	rjmp	.+0      	; 0x1828 <setupInit+0x46>
    1828:	00 c0       	rjmp	.+0      	; 0x182a <setupInit+0x48>
	_delay_ms(100);
	joystick_init();
    182a:	0e 94 47 09 	call	0x128e	; 0x128e <joystick_init>
    182e:	2f ef       	ldi	r18, 0xFF	; 255
    1830:	8f e7       	ldi	r24, 0x7F	; 127
    1832:	91 e0       	ldi	r25, 0x01	; 1
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	80 40       	sbci	r24, 0x00	; 0
    1838:	90 40       	sbci	r25, 0x00	; 0
    183a:	e1 f7       	brne	.-8      	; 0x1834 <setupInit+0x52>
    183c:	00 c0       	rjmp	.+0      	; 0x183e <setupInit+0x5c>
    183e:	00 c0       	rjmp	.+0      	; 0x1840 <setupInit+0x5e>
	_delay_ms(100);
	touchButton_init();
    1840:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <touchButton_init>
    1844:	2f ef       	ldi	r18, 0xFF	; 255
    1846:	8f e7       	ldi	r24, 0x7F	; 127
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	21 50       	subi	r18, 0x01	; 1
    184c:	80 40       	sbci	r24, 0x00	; 0
    184e:	90 40       	sbci	r25, 0x00	; 0
    1850:	e1 f7       	brne	.-8      	; 0x184a <setupInit+0x68>
    1852:	00 c0       	rjmp	.+0      	; 0x1854 <setupInit+0x72>
    1854:	00 c0       	rjmp	.+0      	; 0x1856 <setupInit+0x74>
	_delay_ms(100);
	oled_init();
    1856:	0e 94 93 0b 	call	0x1726	; 0x1726 <oled_init>
    185a:	2f ef       	ldi	r18, 0xFF	; 255
    185c:	8f e7       	ldi	r24, 0x7F	; 127
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	21 50       	subi	r18, 0x01	; 1
    1862:	80 40       	sbci	r24, 0x00	; 0
    1864:	90 40       	sbci	r25, 0x00	; 0
    1866:	e1 f7       	brne	.-8      	; 0x1860 <setupInit+0x7e>
    1868:	00 c0       	rjmp	.+0      	; 0x186a <setupInit+0x88>
    186a:	00 c0       	rjmp	.+0      	; 0x186c <setupInit+0x8a>
	_delay_ms(100);
	timer_init();
    186c:	0e 94 c7 0c 	call	0x198e	; 0x198e <timer_init>
    1870:	2f ef       	ldi	r18, 0xFF	; 255
    1872:	8f e7       	ldi	r24, 0x7F	; 127
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	21 50       	subi	r18, 0x01	; 1
    1878:	80 40       	sbci	r24, 0x00	; 0
    187a:	90 40       	sbci	r25, 0x00	; 0
    187c:	e1 f7       	brne	.-8      	; 0x1876 <setupInit+0x94>
    187e:	00 c0       	rjmp	.+0      	; 0x1880 <setupInit+0x9e>
    1880:	00 c0       	rjmp	.+0      	; 0x1882 <setupInit+0xa0>
	_delay_ms(100);
	sleep_init();
    1882:	0e 94 32 09 	call	0x1264	; 0x1264 <sleep_init>
    1886:	2f ef       	ldi	r18, 0xFF	; 255
    1888:	8f e7       	ldi	r24, 0x7F	; 127
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	21 50       	subi	r18, 0x01	; 1
    188e:	80 40       	sbci	r24, 0x00	; 0
    1890:	90 40       	sbci	r25, 0x00	; 0
    1892:	e1 f7       	brne	.-8      	; 0x188c <setupInit+0xaa>
    1894:	00 c0       	rjmp	.+0      	; 0x1896 <setupInit+0xb4>
    1896:	00 c0       	rjmp	.+0      	; 0x1898 <setupInit+0xb6>
	_delay_ms(100);
	menu_init();
    1898:	0e 94 6f 0a 	call	0x14de	; 0x14de <menu_init>
    189c:	2f ef       	ldi	r18, 0xFF	; 255
    189e:	8f e7       	ldi	r24, 0x7F	; 127
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	21 50       	subi	r18, 0x01	; 1
    18a4:	80 40       	sbci	r24, 0x00	; 0
    18a6:	90 40       	sbci	r25, 0x00	; 0
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <setupInit+0xc0>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <setupInit+0xca>
    18ac:	00 c0       	rjmp	.+0      	; 0x18ae <setupInit+0xcc>
	_delay_ms(100);
	CAN_init();
    18ae:	0e 94 63 04 	call	0x8c6	; 0x8c6 <CAN_init>
    18b2:	2f ef       	ldi	r18, 0xFF	; 255
    18b4:	8f e7       	ldi	r24, 0x7F	; 127
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	21 50       	subi	r18, 0x01	; 1
    18ba:	80 40       	sbci	r24, 0x00	; 0
    18bc:	90 40       	sbci	r25, 0x00	; 0
    18be:	e1 f7       	brne	.-8      	; 0x18b8 <setupInit+0xd6>
    18c0:	00 c0       	rjmp	.+0      	; 0x18c2 <setupInit+0xe0>
    18c2:	00 c0       	rjmp	.+0      	; 0x18c4 <setupInit+0xe2>
	_delay_ms(100);
	pwm_init();
    18c4:	0e 94 c6 08 	call	0x118c	; 0x118c <pwm_init>
    18c8:	2f ef       	ldi	r18, 0xFF	; 255
    18ca:	8f e7       	ldi	r24, 0x7F	; 127
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	21 50       	subi	r18, 0x01	; 1
    18d0:	80 40       	sbci	r24, 0x00	; 0
    18d2:	90 40       	sbci	r25, 0x00	; 0
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <setupInit+0xec>
    18d6:	00 c0       	rjmp	.+0      	; 0x18d8 <setupInit+0xf6>
    18d8:	00 c0       	rjmp	.+0      	; 0x18da <setupInit+0xf8>
	_delay_ms(100);
	game_init();
    18da:	0e 94 36 05 	call	0xa6c	; 0xa6c <game_init>
    18de:	2f ef       	ldi	r18, 0xFF	; 255
    18e0:	8f e7       	ldi	r24, 0x7F	; 127
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	21 50       	subi	r18, 0x01	; 1
    18e6:	80 40       	sbci	r24, 0x00	; 0
    18e8:	90 40       	sbci	r25, 0x00	; 0
    18ea:	e1 f7       	brne	.-8      	; 0x18e4 <setupInit+0x102>
    18ec:	00 c0       	rjmp	.+0      	; 0x18ee <setupInit+0x10c>
    18ee:	00 c0       	rjmp	.+0      	; 0x18f0 <setupInit+0x10e>
	_delay_ms(100);
	sei();
    18f0:	78 94       	sei
    18f2:	08 95       	ret

000018f4 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    18fe:	c2 e0       	ldi	r28, 0x02	; 2
    1900:	d3 e0       	ldi	r29, 0x03	; 3
    1902:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    190a:	89 83       	std	Y+1, r24	; 0x01
}
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    1912:	87 b3       	in	r24, 0x17	; 23
    1914:	80 6a       	ori	r24, 0xA0	; 160
    1916:	87 bb       	out	0x17, r24	; 23
    1918:	bc 9a       	sbi	0x17, 4	; 23
    191a:	8d b1       	in	r24, 0x0d	; 13
    191c:	81 65       	ori	r24, 0x51	; 81
    191e:	8d b9       	out	0x0d, r24	; 13
    1920:	c4 9a       	sbi	0x18, 4	; 24
    1922:	08 95       	ret

00001924 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    1924:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    1926:	77 9b       	sbis	0x0e, 7	; 14
    1928:	fe cf       	rjmp	.-4      	; 0x1926 <SPI_masterWrite+0x2>

}
    192a:	08 95       	ret

0000192c <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    192c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    192e:	77 9b       	sbis	0x0e, 7	; 14
    1930:	fe cf       	rjmp	.-4      	; 0x192e <SPI_masterRead+0x2>
	return SPDR;
    1932:	8f b1       	in	r24, 0x0f	; 15
}
    1934:	08 95       	ret

00001936 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    1936:	66 23       	and	r22, r22
    1938:	69 f0       	breq	.+26     	; 0x1954 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    193a:	48 b3       	in	r20, 0x18	; 24
    193c:	21 e0       	ldi	r18, 0x01	; 1
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	b9 01       	movw	r22, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <SPI_setChipSelect+0x12>
    1944:	66 0f       	add	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	8a 95       	dec	r24
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <SPI_setChipSelect+0xe>
    194c:	cb 01       	movw	r24, r22
    194e:	84 2b       	or	r24, r20
    1950:	88 bb       	out	0x18, r24	; 24
    1952:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    1954:	48 b3       	in	r20, 0x18	; 24
    1956:	21 e0       	ldi	r18, 0x01	; 1
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	b9 01       	movw	r22, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <SPI_setChipSelect+0x2c>
    195e:	66 0f       	add	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <SPI_setChipSelect+0x28>
    1966:	cb 01       	movw	r24, r22
    1968:	80 95       	com	r24
    196a:	84 23       	and	r24, r20
    196c:	88 bb       	out	0x18, r24	; 24
    196e:	08 95       	ret

00001970 <__vector_14>:
#include "menu.h"
#include "game.h"
#include <avr/interrupt.h>


ISR (TIMER1_COMPB_vect) {
    1970:	1f 92       	push	r1
    1972:	0f 92       	push	r0
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	0f 92       	push	r0
    1978:	11 24       	eor	r1, r1
    197a:	8f 93       	push	r24
	
	timerFlag=1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <timerFlag>

}
    1982:	8f 91       	pop	r24
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    198e:	89 b7       	in	r24, 0x39	; 57
    1990:	80 62       	ori	r24, 0x20	; 32
    1992:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1994:	1d bc       	out	0x2d, r1	; 45
    1996:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1998:	80 e3       	ldi	r24, 0x30	; 48
    199a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    199c:	85 e0       	ldi	r24, 0x05	; 5
    199e:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    19a0:	80 ee       	ldi	r24, 0xE0	; 224
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	99 bd       	out	0x29, r25	; 41
    19a6:	88 bd       	out	0x28, r24	; 40
	timerFlag=0;
    19a8:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <timerFlag>
    19ac:	08 95       	ret

000019ae <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    19ae:	36 b3       	in	r19, 0x16	; 22
    19b0:	26 b3       	in	r18, 0x16	; 22
    19b2:	47 b3       	in	r20, 0x17	; 23
    19b4:	32 70       	andi	r19, 0x02	; 2
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	bc 01       	movw	r22, r24
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <touchButton_init+0x14>
    19be:	66 0f       	add	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	3a 95       	dec	r19
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <touchButton_init+0x10>
    19c6:	24 70       	andi	r18, 0x04	; 4
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <touchButton_init+0x20>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	2a 95       	dec	r18
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <touchButton_init+0x1c>
    19d2:	86 2b       	or	r24, r22
    19d4:	97 2b       	or	r25, r23
    19d6:	80 95       	com	r24
    19d8:	90 95       	com	r25
    19da:	84 23       	and	r24, r20
    19dc:	87 bb       	out	0x17, r24	; 23
    19de:	08 95       	ret

000019e0 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    19e0:	86 b3       	in	r24, 0x16	; 22
    19e2:	e8 ef       	ldi	r30, 0xF8	; 248
    19e4:	f2 e0       	ldi	r31, 0x02	; 2
    19e6:	86 95       	lsr	r24
    19e8:	81 70       	andi	r24, 0x01	; 1
    19ea:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    19ec:	86 b3       	in	r24, 0x16	; 22
    19ee:	82 fb       	bst	r24, 2
    19f0:	88 27       	eor	r24, r24
    19f2:	80 f9       	bld	r24, 0
    19f4:	81 83       	std	Z+1, r24	; 0x01
    19f6:	08 95       	ret

000019f8 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    19f8:	5d 9b       	sbis	0x0b, 5	; 11
    19fa:	fe cf       	rjmp	.-4      	; 0x19f8 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    19fc:	8c b9       	out	0x0c, r24	; 12
    19fe:	08 95       	ret

00001a00 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    1a00:	5f 9b       	sbis	0x0b, 7	; 11
    1a02:	fe cf       	rjmp	.-4      	; 0x1a00 <USART_receiveChar>
		;
	
	return UDR0;
    1a04:	8c b1       	in	r24, 0x0c	; 12
    1a06:	08 95       	ret

00001a08 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1a08:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    1a0a:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    1a0c:	88 e1       	ldi	r24, 0x18	; 24
    1a0e:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1a10:	8e e8       	ldi	r24, 0x8E	; 142
    1a12:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	7d e0       	ldi	r23, 0x0D	; 13
    1a18:	8c ef       	ldi	r24, 0xFC	; 252
    1a1a:	9c e0       	ldi	r25, 0x0C	; 12
    1a1c:	0e 94 40 10 	call	0x2080	; 0x2080 <fdevopen>
    1a20:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <uart+0x1>
    1a24:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <uart>
    1a28:	08 95       	ret

00001a2a <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1a2a:	85 b7       	in	r24, 0x35	; 53
    1a2c:	80 68       	ori	r24, 0x80	; 128
    1a2e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1a30:	80 b7       	in	r24, 0x30	; 48
    1a32:	88 60       	ori	r24, 0x08	; 8
    1a34:	80 bf       	out	0x30, r24	; 48
    1a36:	08 95       	ret
    1a38:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_pscA>
    1a3c:	60 f0       	brcs	.+24     	; 0x1a56 <xmem_init+0x2c>
    1a3e:	80 e8       	ldi	r24, 0x80	; 128
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <xmem_init+0x1c>
    1a44:	9e ef       	ldi	r25, 0xFE	; 254
    1a46:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_pscB>
    1a4a:	28 f0       	brcs	.+10     	; 0x1a56 <xmem_init+0x2c>
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	51 e0       	ldi	r21, 0x01	; 1
    1a50:	71 f4       	brne	.+28     	; 0x1a6e <atan2+0x10>
    1a52:	5e ef       	ldi	r21, 0xFE	; 254
    1a54:	0c c0       	rjmp	.+24     	; 0x1a6e <atan2+0x10>
    1a56:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_nan>
    1a5a:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__fp_zero>

00001a5e <atan2>:
    1a5e:	e9 2f       	mov	r30, r25
    1a60:	e0 78       	andi	r30, 0x80	; 128
    1a62:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_split3>
    1a66:	40 f3       	brcs	.-48     	; 0x1a38 <xmem_init+0xe>
    1a68:	09 2e       	mov	r0, r25
    1a6a:	05 2a       	or	r0, r21
    1a6c:	b1 f3       	breq	.-20     	; 0x1a5a <xmem_init+0x30>
    1a6e:	26 17       	cp	r18, r22
    1a70:	37 07       	cpc	r19, r23
    1a72:	48 07       	cpc	r20, r24
    1a74:	59 07       	cpc	r21, r25
    1a76:	38 f0       	brcs	.+14     	; 0x1a86 <atan2+0x28>
    1a78:	0e 2e       	mov	r0, r30
    1a7a:	07 f8       	bld	r0, 7
    1a7c:	e0 25       	eor	r30, r0
    1a7e:	69 f0       	breq	.+26     	; 0x1a9a <atan2+0x3c>
    1a80:	e0 25       	eor	r30, r0
    1a82:	e0 64       	ori	r30, 0x40	; 64
    1a84:	0a c0       	rjmp	.+20     	; 0x1a9a <atan2+0x3c>
    1a86:	ef 63       	ori	r30, 0x3F	; 63
    1a88:	07 f8       	bld	r0, 7
    1a8a:	00 94       	com	r0
    1a8c:	07 fa       	bst	r0, 7
    1a8e:	db 01       	movw	r26, r22
    1a90:	b9 01       	movw	r22, r18
    1a92:	9d 01       	movw	r18, r26
    1a94:	dc 01       	movw	r26, r24
    1a96:	ca 01       	movw	r24, r20
    1a98:	ad 01       	movw	r20, r26
    1a9a:	ef 93       	push	r30
    1a9c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__divsf3_pse>
    1aa0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fp_round>
    1aa4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <atan>
    1aa8:	5f 91       	pop	r21
    1aaa:	55 23       	and	r21, r21
    1aac:	39 f0       	breq	.+14     	; 0x1abc <atan2+0x5e>
    1aae:	2b ed       	ldi	r18, 0xDB	; 219
    1ab0:	3f e0       	ldi	r19, 0x0F	; 15
    1ab2:	49 e4       	ldi	r20, 0x49	; 73
    1ab4:	50 fd       	sbrc	r21, 0
    1ab6:	49 ec       	ldi	r20, 0xC9	; 201
    1ab8:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__addsf3>
    1abc:	08 95       	ret

00001abe <atan>:
    1abe:	df 93       	push	r29
    1ac0:	dd 27       	eor	r29, r29
    1ac2:	b9 2f       	mov	r27, r25
    1ac4:	bf 77       	andi	r27, 0x7F	; 127
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	16 16       	cp	r1, r22
    1acc:	17 06       	cpc	r1, r23
    1ace:	48 07       	cpc	r20, r24
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	18 f4       	brcc	.+6      	; 0x1ada <atan+0x1c>
    1ad4:	d9 2f       	mov	r29, r25
    1ad6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <inverse>
    1ada:	9f 93       	push	r25
    1adc:	8f 93       	push	r24
    1ade:	7f 93       	push	r23
    1ae0:	6f 93       	push	r22
    1ae2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <square>
    1ae6:	e0 e7       	ldi	r30, 0x70	; 112
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__fp_powser>
    1aee:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fp_round>
    1af2:	2f 91       	pop	r18
    1af4:	3f 91       	pop	r19
    1af6:	4f 91       	pop	r20
    1af8:	5f 91       	pop	r21
    1afa:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__mulsf3x>
    1afe:	dd 23       	and	r29, r29
    1b00:	51 f0       	breq	.+20     	; 0x1b16 <atan+0x58>
    1b02:	90 58       	subi	r25, 0x80	; 128
    1b04:	a2 ea       	ldi	r26, 0xA2	; 162
    1b06:	2a ed       	ldi	r18, 0xDA	; 218
    1b08:	3f e0       	ldi	r19, 0x0F	; 15
    1b0a:	49 ec       	ldi	r20, 0xC9	; 201
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	d0 78       	andi	r29, 0x80	; 128
    1b10:	5d 27       	eor	r21, r29
    1b12:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3x>
    1b16:	df 91       	pop	r29
    1b18:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_round>

00001b1c <__divsf3>:
    1b1c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__divsf3x>
    1b20:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_round>
    1b24:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_pscB>
    1b28:	58 f0       	brcs	.+22     	; 0x1b40 <__divsf3+0x24>
    1b2a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_pscA>
    1b2e:	40 f0       	brcs	.+16     	; 0x1b40 <__divsf3+0x24>
    1b30:	29 f4       	brne	.+10     	; 0x1b3c <__divsf3+0x20>
    1b32:	5f 3f       	cpi	r21, 0xFF	; 255
    1b34:	29 f0       	breq	.+10     	; 0x1b40 <__divsf3+0x24>
    1b36:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__fp_inf>
    1b3a:	51 11       	cpse	r21, r1
    1b3c:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>
    1b40:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_nan>

00001b44 <__divsf3x>:
    1b44:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_split3>
    1b48:	68 f3       	brcs	.-38     	; 0x1b24 <__divsf3+0x8>

00001b4a <__divsf3_pse>:
    1b4a:	99 23       	and	r25, r25
    1b4c:	b1 f3       	breq	.-20     	; 0x1b3a <__divsf3+0x1e>
    1b4e:	55 23       	and	r21, r21
    1b50:	91 f3       	breq	.-28     	; 0x1b36 <__divsf3+0x1a>
    1b52:	95 1b       	sub	r25, r21
    1b54:	55 0b       	sbc	r21, r21
    1b56:	bb 27       	eor	r27, r27
    1b58:	aa 27       	eor	r26, r26
    1b5a:	62 17       	cp	r22, r18
    1b5c:	73 07       	cpc	r23, r19
    1b5e:	84 07       	cpc	r24, r20
    1b60:	38 f0       	brcs	.+14     	; 0x1b70 <__divsf3_pse+0x26>
    1b62:	9f 5f       	subi	r25, 0xFF	; 255
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	22 0f       	add	r18, r18
    1b68:	33 1f       	adc	r19, r19
    1b6a:	44 1f       	adc	r20, r20
    1b6c:	aa 1f       	adc	r26, r26
    1b6e:	a9 f3       	breq	.-22     	; 0x1b5a <__divsf3_pse+0x10>
    1b70:	35 d0       	rcall	.+106    	; 0x1bdc <__divsf3_pse+0x92>
    1b72:	0e 2e       	mov	r0, r30
    1b74:	3a f0       	brmi	.+14     	; 0x1b84 <__divsf3_pse+0x3a>
    1b76:	e0 e8       	ldi	r30, 0x80	; 128
    1b78:	32 d0       	rcall	.+100    	; 0x1bde <__divsf3_pse+0x94>
    1b7a:	91 50       	subi	r25, 0x01	; 1
    1b7c:	50 40       	sbci	r21, 0x00	; 0
    1b7e:	e6 95       	lsr	r30
    1b80:	00 1c       	adc	r0, r0
    1b82:	ca f7       	brpl	.-14     	; 0x1b76 <__divsf3_pse+0x2c>
    1b84:	2b d0       	rcall	.+86     	; 0x1bdc <__divsf3_pse+0x92>
    1b86:	fe 2f       	mov	r31, r30
    1b88:	29 d0       	rcall	.+82     	; 0x1bdc <__divsf3_pse+0x92>
    1b8a:	66 0f       	add	r22, r22
    1b8c:	77 1f       	adc	r23, r23
    1b8e:	88 1f       	adc	r24, r24
    1b90:	bb 1f       	adc	r27, r27
    1b92:	26 17       	cp	r18, r22
    1b94:	37 07       	cpc	r19, r23
    1b96:	48 07       	cpc	r20, r24
    1b98:	ab 07       	cpc	r26, r27
    1b9a:	b0 e8       	ldi	r27, 0x80	; 128
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <__divsf3_pse+0x56>
    1b9e:	bb 0b       	sbc	r27, r27
    1ba0:	80 2d       	mov	r24, r0
    1ba2:	bf 01       	movw	r22, r30
    1ba4:	ff 27       	eor	r31, r31
    1ba6:	93 58       	subi	r25, 0x83	; 131
    1ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    1baa:	3a f0       	brmi	.+14     	; 0x1bba <__divsf3_pse+0x70>
    1bac:	9e 3f       	cpi	r25, 0xFE	; 254
    1bae:	51 05       	cpc	r21, r1
    1bb0:	78 f0       	brcs	.+30     	; 0x1bd0 <__divsf3_pse+0x86>
    1bb2:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__fp_inf>
    1bb6:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>
    1bba:	5f 3f       	cpi	r21, 0xFF	; 255
    1bbc:	e4 f3       	brlt	.-8      	; 0x1bb6 <__divsf3_pse+0x6c>
    1bbe:	98 3e       	cpi	r25, 0xE8	; 232
    1bc0:	d4 f3       	brlt	.-12     	; 0x1bb6 <__divsf3_pse+0x6c>
    1bc2:	86 95       	lsr	r24
    1bc4:	77 95       	ror	r23
    1bc6:	67 95       	ror	r22
    1bc8:	b7 95       	ror	r27
    1bca:	f7 95       	ror	r31
    1bcc:	9f 5f       	subi	r25, 0xFF	; 255
    1bce:	c9 f7       	brne	.-14     	; 0x1bc2 <__divsf3_pse+0x78>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	96 95       	lsr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	97 f9       	bld	r25, 7
    1bda:	08 95       	ret
    1bdc:	e1 e0       	ldi	r30, 0x01	; 1
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	bb 1f       	adc	r27, r27
    1be6:	62 17       	cp	r22, r18
    1be8:	73 07       	cpc	r23, r19
    1bea:	84 07       	cpc	r24, r20
    1bec:	ba 07       	cpc	r27, r26
    1bee:	20 f0       	brcs	.+8      	; 0x1bf8 <__divsf3_pse+0xae>
    1bf0:	62 1b       	sub	r22, r18
    1bf2:	73 0b       	sbc	r23, r19
    1bf4:	84 0b       	sbc	r24, r20
    1bf6:	ba 0b       	sbc	r27, r26
    1bf8:	ee 1f       	adc	r30, r30
    1bfa:	88 f7       	brcc	.-30     	; 0x1bde <__divsf3_pse+0x94>
    1bfc:	e0 95       	com	r30
    1bfe:	08 95       	ret

00001c00 <__fixsfsi>:
    1c00:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__fixunssfsi>
    1c04:	68 94       	set
    1c06:	b1 11       	cpse	r27, r1
    1c08:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>
    1c0c:	08 95       	ret

00001c0e <__fixunssfsi>:
    1c0e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_splitA>
    1c12:	88 f0       	brcs	.+34     	; 0x1c36 <__fixunssfsi+0x28>
    1c14:	9f 57       	subi	r25, 0x7F	; 127
    1c16:	98 f0       	brcs	.+38     	; 0x1c3e <__fixunssfsi+0x30>
    1c18:	b9 2f       	mov	r27, r25
    1c1a:	99 27       	eor	r25, r25
    1c1c:	b7 51       	subi	r27, 0x17	; 23
    1c1e:	b0 f0       	brcs	.+44     	; 0x1c4c <__fixunssfsi+0x3e>
    1c20:	e1 f0       	breq	.+56     	; 0x1c5a <__fixunssfsi+0x4c>
    1c22:	66 0f       	add	r22, r22
    1c24:	77 1f       	adc	r23, r23
    1c26:	88 1f       	adc	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	1a f0       	brmi	.+6      	; 0x1c32 <__fixunssfsi+0x24>
    1c2c:	ba 95       	dec	r27
    1c2e:	c9 f7       	brne	.-14     	; 0x1c22 <__fixunssfsi+0x14>
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <__fixunssfsi+0x4c>
    1c32:	b1 30       	cpi	r27, 0x01	; 1
    1c34:	91 f0       	breq	.+36     	; 0x1c5a <__fixunssfsi+0x4c>
    1c36:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fp_zero>
    1c3a:	b1 e0       	ldi	r27, 0x01	; 1
    1c3c:	08 95       	ret
    1c3e:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__fp_zero>
    1c42:	67 2f       	mov	r22, r23
    1c44:	78 2f       	mov	r23, r24
    1c46:	88 27       	eor	r24, r24
    1c48:	b8 5f       	subi	r27, 0xF8	; 248
    1c4a:	39 f0       	breq	.+14     	; 0x1c5a <__fixunssfsi+0x4c>
    1c4c:	b9 3f       	cpi	r27, 0xF9	; 249
    1c4e:	cc f3       	brlt	.-14     	; 0x1c42 <__fixunssfsi+0x34>
    1c50:	86 95       	lsr	r24
    1c52:	77 95       	ror	r23
    1c54:	67 95       	ror	r22
    1c56:	b3 95       	inc	r27
    1c58:	d9 f7       	brne	.-10     	; 0x1c50 <__fixunssfsi+0x42>
    1c5a:	3e f4       	brtc	.+14     	; 0x1c6a <__fixunssfsi+0x5c>
    1c5c:	90 95       	com	r25
    1c5e:	80 95       	com	r24
    1c60:	70 95       	com	r23
    1c62:	61 95       	neg	r22
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	8f 4f       	sbci	r24, 0xFF	; 255
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	08 95       	ret

00001c6c <__floatunsisf>:
    1c6c:	e8 94       	clt
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <__floatsisf+0x12>

00001c70 <__floatsisf>:
    1c70:	97 fb       	bst	r25, 7
    1c72:	3e f4       	brtc	.+14     	; 0x1c82 <__floatsisf+0x12>
    1c74:	90 95       	com	r25
    1c76:	80 95       	com	r24
    1c78:	70 95       	com	r23
    1c7a:	61 95       	neg	r22
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	99 23       	and	r25, r25
    1c84:	a9 f0       	breq	.+42     	; 0x1cb0 <__floatsisf+0x40>
    1c86:	f9 2f       	mov	r31, r25
    1c88:	96 e9       	ldi	r25, 0x96	; 150
    1c8a:	bb 27       	eor	r27, r27
    1c8c:	93 95       	inc	r25
    1c8e:	f6 95       	lsr	r31
    1c90:	87 95       	ror	r24
    1c92:	77 95       	ror	r23
    1c94:	67 95       	ror	r22
    1c96:	b7 95       	ror	r27
    1c98:	f1 11       	cpse	r31, r1
    1c9a:	f8 cf       	rjmp	.-16     	; 0x1c8c <__floatsisf+0x1c>
    1c9c:	fa f4       	brpl	.+62     	; 0x1cdc <__floatsisf+0x6c>
    1c9e:	bb 0f       	add	r27, r27
    1ca0:	11 f4       	brne	.+4      	; 0x1ca6 <__floatsisf+0x36>
    1ca2:	60 ff       	sbrs	r22, 0
    1ca4:	1b c0       	rjmp	.+54     	; 0x1cdc <__floatsisf+0x6c>
    1ca6:	6f 5f       	subi	r22, 0xFF	; 255
    1ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    1caa:	8f 4f       	sbci	r24, 0xFF	; 255
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	16 c0       	rjmp	.+44     	; 0x1cdc <__floatsisf+0x6c>
    1cb0:	88 23       	and	r24, r24
    1cb2:	11 f0       	breq	.+4      	; 0x1cb8 <__floatsisf+0x48>
    1cb4:	96 e9       	ldi	r25, 0x96	; 150
    1cb6:	11 c0       	rjmp	.+34     	; 0x1cda <__floatsisf+0x6a>
    1cb8:	77 23       	and	r23, r23
    1cba:	21 f0       	breq	.+8      	; 0x1cc4 <__floatsisf+0x54>
    1cbc:	9e e8       	ldi	r25, 0x8E	; 142
    1cbe:	87 2f       	mov	r24, r23
    1cc0:	76 2f       	mov	r23, r22
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <__floatsisf+0x5e>
    1cc4:	66 23       	and	r22, r22
    1cc6:	71 f0       	breq	.+28     	; 0x1ce4 <__floatsisf+0x74>
    1cc8:	96 e8       	ldi	r25, 0x86	; 134
    1cca:	86 2f       	mov	r24, r22
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	2a f0       	brmi	.+10     	; 0x1cdc <__floatsisf+0x6c>
    1cd2:	9a 95       	dec	r25
    1cd4:	66 0f       	add	r22, r22
    1cd6:	77 1f       	adc	r23, r23
    1cd8:	88 1f       	adc	r24, r24
    1cda:	da f7       	brpl	.-10     	; 0x1cd2 <__floatsisf+0x62>
    1cdc:	88 0f       	add	r24, r24
    1cde:	96 95       	lsr	r25
    1ce0:	87 95       	ror	r24
    1ce2:	97 f9       	bld	r25, 7
    1ce4:	08 95       	ret

00001ce6 <__fp_inf>:
    1ce6:	97 f9       	bld	r25, 7
    1ce8:	9f 67       	ori	r25, 0x7F	; 127
    1cea:	80 e8       	ldi	r24, 0x80	; 128
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	08 95       	ret

00001cf2 <__fp_nan>:
    1cf2:	9f ef       	ldi	r25, 0xFF	; 255
    1cf4:	80 ec       	ldi	r24, 0xC0	; 192
    1cf6:	08 95       	ret

00001cf8 <__fp_powser>:
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	1f 93       	push	r17
    1cfe:	0f 93       	push	r16
    1d00:	ff 92       	push	r15
    1d02:	ef 92       	push	r14
    1d04:	df 92       	push	r13
    1d06:	7b 01       	movw	r14, r22
    1d08:	8c 01       	movw	r16, r24
    1d0a:	68 94       	set
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <__fp_powser+0x22>
    1d0e:	da 2e       	mov	r13, r26
    1d10:	ef 01       	movw	r28, r30
    1d12:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__mulsf3x>
    1d16:	fe 01       	movw	r30, r28
    1d18:	e8 94       	clt
    1d1a:	a5 91       	lpm	r26, Z+
    1d1c:	25 91       	lpm	r18, Z+
    1d1e:	35 91       	lpm	r19, Z+
    1d20:	45 91       	lpm	r20, Z+
    1d22:	55 91       	lpm	r21, Z+
    1d24:	a6 f3       	brts	.-24     	; 0x1d0e <__fp_powser+0x16>
    1d26:	ef 01       	movw	r28, r30
    1d28:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3x>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	97 01       	movw	r18, r14
    1d30:	a8 01       	movw	r20, r16
    1d32:	da 94       	dec	r13
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <__fp_powser+0x18>
    1d36:	df 90       	pop	r13
    1d38:	ef 90       	pop	r14
    1d3a:	ff 90       	pop	r15
    1d3c:	0f 91       	pop	r16
    1d3e:	1f 91       	pop	r17
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <__fp_pscA>:
    1d46:	00 24       	eor	r0, r0
    1d48:	0a 94       	dec	r0
    1d4a:	16 16       	cp	r1, r22
    1d4c:	17 06       	cpc	r1, r23
    1d4e:	18 06       	cpc	r1, r24
    1d50:	09 06       	cpc	r0, r25
    1d52:	08 95       	ret

00001d54 <__fp_pscB>:
    1d54:	00 24       	eor	r0, r0
    1d56:	0a 94       	dec	r0
    1d58:	12 16       	cp	r1, r18
    1d5a:	13 06       	cpc	r1, r19
    1d5c:	14 06       	cpc	r1, r20
    1d5e:	05 06       	cpc	r0, r21
    1d60:	08 95       	ret

00001d62 <__fp_round>:
    1d62:	09 2e       	mov	r0, r25
    1d64:	03 94       	inc	r0
    1d66:	00 0c       	add	r0, r0
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <__fp_round+0xc>
    1d6a:	88 23       	and	r24, r24
    1d6c:	52 f0       	brmi	.+20     	; 0x1d82 <__fp_round+0x20>
    1d6e:	bb 0f       	add	r27, r27
    1d70:	40 f4       	brcc	.+16     	; 0x1d82 <__fp_round+0x20>
    1d72:	bf 2b       	or	r27, r31
    1d74:	11 f4       	brne	.+4      	; 0x1d7a <__fp_round+0x18>
    1d76:	60 ff       	sbrs	r22, 0
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <__fp_round+0x20>
    1d7a:	6f 5f       	subi	r22, 0xFF	; 255
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	08 95       	ret

00001d84 <__fp_split3>:
    1d84:	57 fd       	sbrc	r21, 7
    1d86:	90 58       	subi	r25, 0x80	; 128
    1d88:	44 0f       	add	r20, r20
    1d8a:	55 1f       	adc	r21, r21
    1d8c:	59 f0       	breq	.+22     	; 0x1da4 <__fp_splitA+0x10>
    1d8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d90:	71 f0       	breq	.+28     	; 0x1dae <__fp_splitA+0x1a>
    1d92:	47 95       	ror	r20

00001d94 <__fp_splitA>:
    1d94:	88 0f       	add	r24, r24
    1d96:	97 fb       	bst	r25, 7
    1d98:	99 1f       	adc	r25, r25
    1d9a:	61 f0       	breq	.+24     	; 0x1db4 <__fp_splitA+0x20>
    1d9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d9e:	79 f0       	breq	.+30     	; 0x1dbe <__fp_splitA+0x2a>
    1da0:	87 95       	ror	r24
    1da2:	08 95       	ret
    1da4:	12 16       	cp	r1, r18
    1da6:	13 06       	cpc	r1, r19
    1da8:	14 06       	cpc	r1, r20
    1daa:	55 1f       	adc	r21, r21
    1dac:	f2 cf       	rjmp	.-28     	; 0x1d92 <__fp_split3+0xe>
    1dae:	46 95       	lsr	r20
    1db0:	f1 df       	rcall	.-30     	; 0x1d94 <__fp_splitA>
    1db2:	08 c0       	rjmp	.+16     	; 0x1dc4 <__fp_splitA+0x30>
    1db4:	16 16       	cp	r1, r22
    1db6:	17 06       	cpc	r1, r23
    1db8:	18 06       	cpc	r1, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	f1 cf       	rjmp	.-30     	; 0x1da0 <__fp_splitA+0xc>
    1dbe:	86 95       	lsr	r24
    1dc0:	71 05       	cpc	r23, r1
    1dc2:	61 05       	cpc	r22, r1
    1dc4:	08 94       	sec
    1dc6:	08 95       	ret

00001dc8 <__fp_zero>:
    1dc8:	e8 94       	clt

00001dca <__fp_szero>:
    1dca:	bb 27       	eor	r27, r27
    1dcc:	66 27       	eor	r22, r22
    1dce:	77 27       	eor	r23, r23
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	97 f9       	bld	r25, 7
    1dd4:	08 95       	ret

00001dd6 <inverse>:
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	ac 01       	movw	r20, r24
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	80 e8       	ldi	r24, 0x80	; 128
    1de0:	9f e3       	ldi	r25, 0x3F	; 63
    1de2:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__divsf3>

00001de6 <__mulsf3>:
    1de6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__mulsf3x>
    1dea:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_round>
    1dee:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_pscA>
    1df2:	38 f0       	brcs	.+14     	; 0x1e02 <__mulsf3+0x1c>
    1df4:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_pscB>
    1df8:	20 f0       	brcs	.+8      	; 0x1e02 <__mulsf3+0x1c>
    1dfa:	95 23       	and	r25, r21
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <__mulsf3+0x1c>
    1dfe:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__fp_inf>
    1e02:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_nan>
    1e06:	11 24       	eor	r1, r1
    1e08:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>

00001e0c <__mulsf3x>:
    1e0c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_split3>
    1e10:	70 f3       	brcs	.-36     	; 0x1dee <__mulsf3+0x8>

00001e12 <__mulsf3_pse>:
    1e12:	95 9f       	mul	r25, r21
    1e14:	c1 f3       	breq	.-16     	; 0x1e06 <__mulsf3+0x20>
    1e16:	95 0f       	add	r25, r21
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	55 1f       	adc	r21, r21
    1e1c:	62 9f       	mul	r22, r18
    1e1e:	f0 01       	movw	r30, r0
    1e20:	72 9f       	mul	r23, r18
    1e22:	bb 27       	eor	r27, r27
    1e24:	f0 0d       	add	r31, r0
    1e26:	b1 1d       	adc	r27, r1
    1e28:	63 9f       	mul	r22, r19
    1e2a:	aa 27       	eor	r26, r26
    1e2c:	f0 0d       	add	r31, r0
    1e2e:	b1 1d       	adc	r27, r1
    1e30:	aa 1f       	adc	r26, r26
    1e32:	64 9f       	mul	r22, r20
    1e34:	66 27       	eor	r22, r22
    1e36:	b0 0d       	add	r27, r0
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	82 9f       	mul	r24, r18
    1e3e:	22 27       	eor	r18, r18
    1e40:	b0 0d       	add	r27, r0
    1e42:	a1 1d       	adc	r26, r1
    1e44:	62 1f       	adc	r22, r18
    1e46:	73 9f       	mul	r23, r19
    1e48:	b0 0d       	add	r27, r0
    1e4a:	a1 1d       	adc	r26, r1
    1e4c:	62 1f       	adc	r22, r18
    1e4e:	83 9f       	mul	r24, r19
    1e50:	a0 0d       	add	r26, r0
    1e52:	61 1d       	adc	r22, r1
    1e54:	22 1f       	adc	r18, r18
    1e56:	74 9f       	mul	r23, r20
    1e58:	33 27       	eor	r19, r19
    1e5a:	a0 0d       	add	r26, r0
    1e5c:	61 1d       	adc	r22, r1
    1e5e:	23 1f       	adc	r18, r19
    1e60:	84 9f       	mul	r24, r20
    1e62:	60 0d       	add	r22, r0
    1e64:	21 1d       	adc	r18, r1
    1e66:	82 2f       	mov	r24, r18
    1e68:	76 2f       	mov	r23, r22
    1e6a:	6a 2f       	mov	r22, r26
    1e6c:	11 24       	eor	r1, r1
    1e6e:	9f 57       	subi	r25, 0x7F	; 127
    1e70:	50 40       	sbci	r21, 0x00	; 0
    1e72:	9a f0       	brmi	.+38     	; 0x1e9a <__mulsf3_pse+0x88>
    1e74:	f1 f0       	breq	.+60     	; 0x1eb2 <__mulsf3_pse+0xa0>
    1e76:	88 23       	and	r24, r24
    1e78:	4a f0       	brmi	.+18     	; 0x1e8c <__mulsf3_pse+0x7a>
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	66 1f       	adc	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	91 50       	subi	r25, 0x01	; 1
    1e88:	50 40       	sbci	r21, 0x00	; 0
    1e8a:	a9 f7       	brne	.-22     	; 0x1e76 <__mulsf3_pse+0x64>
    1e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8e:	51 05       	cpc	r21, r1
    1e90:	80 f0       	brcs	.+32     	; 0x1eb2 <__mulsf3_pse+0xa0>
    1e92:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__fp_inf>
    1e96:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>
    1e9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9c:	e4 f3       	brlt	.-8      	; 0x1e96 <__mulsf3_pse+0x84>
    1e9e:	98 3e       	cpi	r25, 0xE8	; 232
    1ea0:	d4 f3       	brlt	.-12     	; 0x1e96 <__mulsf3_pse+0x84>
    1ea2:	86 95       	lsr	r24
    1ea4:	77 95       	ror	r23
    1ea6:	67 95       	ror	r22
    1ea8:	b7 95       	ror	r27
    1eaa:	f7 95       	ror	r31
    1eac:	e7 95       	ror	r30
    1eae:	9f 5f       	subi	r25, 0xFF	; 255
    1eb0:	c1 f7       	brne	.-16     	; 0x1ea2 <__mulsf3_pse+0x90>
    1eb2:	fe 2b       	or	r31, r30
    1eb4:	88 0f       	add	r24, r24
    1eb6:	91 1d       	adc	r25, r1
    1eb8:	96 95       	lsr	r25
    1eba:	87 95       	ror	r24
    1ebc:	97 f9       	bld	r25, 7
    1ebe:	08 95       	ret

00001ec0 <square>:
    1ec0:	9b 01       	movw	r18, r22
    1ec2:	ac 01       	movw	r20, r24
    1ec4:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__mulsf3>

00001ec8 <__subsf3>:
    1ec8:	50 58       	subi	r21, 0x80	; 128

00001eca <__addsf3>:
    1eca:	bb 27       	eor	r27, r27
    1ecc:	aa 27       	eor	r26, r26
    1ece:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3x>
    1ed2:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_round>
    1ed6:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_pscA>
    1eda:	38 f0       	brcs	.+14     	; 0x1eea <__addsf3+0x20>
    1edc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_pscB>
    1ee0:	20 f0       	brcs	.+8      	; 0x1eea <__addsf3+0x20>
    1ee2:	39 f4       	brne	.+14     	; 0x1ef2 <__addsf3+0x28>
    1ee4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee6:	19 f4       	brne	.+6      	; 0x1eee <__addsf3+0x24>
    1ee8:	26 f4       	brtc	.+8      	; 0x1ef2 <__addsf3+0x28>
    1eea:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_nan>
    1eee:	0e f4       	brtc	.+2      	; 0x1ef2 <__addsf3+0x28>
    1ef0:	e0 95       	com	r30
    1ef2:	e7 fb       	bst	r30, 7
    1ef4:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__fp_inf>

00001ef8 <__addsf3x>:
    1ef8:	e9 2f       	mov	r30, r25
    1efa:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_split3>
    1efe:	58 f3       	brcs	.-42     	; 0x1ed6 <__addsf3+0xc>
    1f00:	ba 17       	cp	r27, r26
    1f02:	62 07       	cpc	r22, r18
    1f04:	73 07       	cpc	r23, r19
    1f06:	84 07       	cpc	r24, r20
    1f08:	95 07       	cpc	r25, r21
    1f0a:	20 f0       	brcs	.+8      	; 0x1f14 <__addsf3x+0x1c>
    1f0c:	79 f4       	brne	.+30     	; 0x1f2c <__addsf3x+0x34>
    1f0e:	a6 f5       	brtc	.+104    	; 0x1f78 <__addsf3x+0x80>
    1f10:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__fp_zero>
    1f14:	0e f4       	brtc	.+2      	; 0x1f18 <__addsf3x+0x20>
    1f16:	e0 95       	com	r30
    1f18:	0b 2e       	mov	r0, r27
    1f1a:	ba 2f       	mov	r27, r26
    1f1c:	a0 2d       	mov	r26, r0
    1f1e:	0b 01       	movw	r0, r22
    1f20:	b9 01       	movw	r22, r18
    1f22:	90 01       	movw	r18, r0
    1f24:	0c 01       	movw	r0, r24
    1f26:	ca 01       	movw	r24, r20
    1f28:	a0 01       	movw	r20, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	ff 27       	eor	r31, r31
    1f2e:	59 1b       	sub	r21, r25
    1f30:	99 f0       	breq	.+38     	; 0x1f58 <__addsf3x+0x60>
    1f32:	59 3f       	cpi	r21, 0xF9	; 249
    1f34:	50 f4       	brcc	.+20     	; 0x1f4a <__addsf3x+0x52>
    1f36:	50 3e       	cpi	r21, 0xE0	; 224
    1f38:	68 f1       	brcs	.+90     	; 0x1f94 <__addsf3x+0x9c>
    1f3a:	1a 16       	cp	r1, r26
    1f3c:	f0 40       	sbci	r31, 0x00	; 0
    1f3e:	a2 2f       	mov	r26, r18
    1f40:	23 2f       	mov	r18, r19
    1f42:	34 2f       	mov	r19, r20
    1f44:	44 27       	eor	r20, r20
    1f46:	58 5f       	subi	r21, 0xF8	; 248
    1f48:	f3 cf       	rjmp	.-26     	; 0x1f30 <__addsf3x+0x38>
    1f4a:	46 95       	lsr	r20
    1f4c:	37 95       	ror	r19
    1f4e:	27 95       	ror	r18
    1f50:	a7 95       	ror	r26
    1f52:	f0 40       	sbci	r31, 0x00	; 0
    1f54:	53 95       	inc	r21
    1f56:	c9 f7       	brne	.-14     	; 0x1f4a <__addsf3x+0x52>
    1f58:	7e f4       	brtc	.+30     	; 0x1f78 <__addsf3x+0x80>
    1f5a:	1f 16       	cp	r1, r31
    1f5c:	ba 0b       	sbc	r27, r26
    1f5e:	62 0b       	sbc	r22, r18
    1f60:	73 0b       	sbc	r23, r19
    1f62:	84 0b       	sbc	r24, r20
    1f64:	ba f0       	brmi	.+46     	; 0x1f94 <__addsf3x+0x9c>
    1f66:	91 50       	subi	r25, 0x01	; 1
    1f68:	a1 f0       	breq	.+40     	; 0x1f92 <__addsf3x+0x9a>
    1f6a:	ff 0f       	add	r31, r31
    1f6c:	bb 1f       	adc	r27, r27
    1f6e:	66 1f       	adc	r22, r22
    1f70:	77 1f       	adc	r23, r23
    1f72:	88 1f       	adc	r24, r24
    1f74:	c2 f7       	brpl	.-16     	; 0x1f66 <__addsf3x+0x6e>
    1f76:	0e c0       	rjmp	.+28     	; 0x1f94 <__addsf3x+0x9c>
    1f78:	ba 0f       	add	r27, r26
    1f7a:	62 1f       	adc	r22, r18
    1f7c:	73 1f       	adc	r23, r19
    1f7e:	84 1f       	adc	r24, r20
    1f80:	48 f4       	brcc	.+18     	; 0x1f94 <__addsf3x+0x9c>
    1f82:	87 95       	ror	r24
    1f84:	77 95       	ror	r23
    1f86:	67 95       	ror	r22
    1f88:	b7 95       	ror	r27
    1f8a:	f7 95       	ror	r31
    1f8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f8e:	08 f0       	brcs	.+2      	; 0x1f92 <__addsf3x+0x9a>
    1f90:	b0 cf       	rjmp	.-160    	; 0x1ef2 <__addsf3+0x28>
    1f92:	93 95       	inc	r25
    1f94:	88 0f       	add	r24, r24
    1f96:	08 f0       	brcs	.+2      	; 0x1f9a <__addsf3x+0xa2>
    1f98:	99 27       	eor	r25, r25
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	97 95       	ror	r25
    1f9e:	87 95       	ror	r24
    1fa0:	08 95       	ret

00001fa2 <__divmodhi4>:
    1fa2:	97 fb       	bst	r25, 7
    1fa4:	07 2e       	mov	r0, r23
    1fa6:	16 f4       	brtc	.+4      	; 0x1fac <__divmodhi4+0xa>
    1fa8:	00 94       	com	r0
    1faa:	07 d0       	rcall	.+14     	; 0x1fba <__divmodhi4_neg1>
    1fac:	77 fd       	sbrc	r23, 7
    1fae:	09 d0       	rcall	.+18     	; 0x1fc2 <__divmodhi4_neg2>
    1fb0:	0e 94 07 10 	call	0x200e	; 0x200e <__udivmodhi4>
    1fb4:	07 fc       	sbrc	r0, 7
    1fb6:	05 d0       	rcall	.+10     	; 0x1fc2 <__divmodhi4_neg2>
    1fb8:	3e f4       	brtc	.+14     	; 0x1fc8 <__divmodhi4_exit>

00001fba <__divmodhi4_neg1>:
    1fba:	90 95       	com	r25
    1fbc:	81 95       	neg	r24
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	08 95       	ret

00001fc2 <__divmodhi4_neg2>:
    1fc2:	70 95       	com	r23
    1fc4:	61 95       	neg	r22
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255

00001fc8 <__divmodhi4_exit>:
    1fc8:	08 95       	ret

00001fca <__udivmodsi4>:
    1fca:	a1 e2       	ldi	r26, 0x21	; 33
    1fcc:	1a 2e       	mov	r1, r26
    1fce:	aa 1b       	sub	r26, r26
    1fd0:	bb 1b       	sub	r27, r27
    1fd2:	fd 01       	movw	r30, r26
    1fd4:	0d c0       	rjmp	.+26     	; 0x1ff0 <__udivmodsi4_ep>

00001fd6 <__udivmodsi4_loop>:
    1fd6:	aa 1f       	adc	r26, r26
    1fd8:	bb 1f       	adc	r27, r27
    1fda:	ee 1f       	adc	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	a2 17       	cp	r26, r18
    1fe0:	b3 07       	cpc	r27, r19
    1fe2:	e4 07       	cpc	r30, r20
    1fe4:	f5 07       	cpc	r31, r21
    1fe6:	20 f0       	brcs	.+8      	; 0x1ff0 <__udivmodsi4_ep>
    1fe8:	a2 1b       	sub	r26, r18
    1fea:	b3 0b       	sbc	r27, r19
    1fec:	e4 0b       	sbc	r30, r20
    1fee:	f5 0b       	sbc	r31, r21

00001ff0 <__udivmodsi4_ep>:
    1ff0:	66 1f       	adc	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	1a 94       	dec	r1
    1ffa:	69 f7       	brne	.-38     	; 0x1fd6 <__udivmodsi4_loop>
    1ffc:	60 95       	com	r22
    1ffe:	70 95       	com	r23
    2000:	80 95       	com	r24
    2002:	90 95       	com	r25
    2004:	9b 01       	movw	r18, r22
    2006:	ac 01       	movw	r20, r24
    2008:	bd 01       	movw	r22, r26
    200a:	cf 01       	movw	r24, r30
    200c:	08 95       	ret

0000200e <__udivmodhi4>:
    200e:	aa 1b       	sub	r26, r26
    2010:	bb 1b       	sub	r27, r27
    2012:	51 e1       	ldi	r21, 0x11	; 17
    2014:	07 c0       	rjmp	.+14     	; 0x2024 <__udivmodhi4_ep>

00002016 <__udivmodhi4_loop>:
    2016:	aa 1f       	adc	r26, r26
    2018:	bb 1f       	adc	r27, r27
    201a:	a6 17       	cp	r26, r22
    201c:	b7 07       	cpc	r27, r23
    201e:	10 f0       	brcs	.+4      	; 0x2024 <__udivmodhi4_ep>
    2020:	a6 1b       	sub	r26, r22
    2022:	b7 0b       	sbc	r27, r23

00002024 <__udivmodhi4_ep>:
    2024:	88 1f       	adc	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	5a 95       	dec	r21
    202a:	a9 f7       	brne	.-22     	; 0x2016 <__udivmodhi4_loop>
    202c:	80 95       	com	r24
    202e:	90 95       	com	r25
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	08 95       	ret

00002036 <__itoa_ncheck>:
    2036:	bb 27       	eor	r27, r27
    2038:	4a 30       	cpi	r20, 0x0A	; 10
    203a:	31 f4       	brne	.+12     	; 0x2048 <__itoa_ncheck+0x12>
    203c:	99 23       	and	r25, r25
    203e:	22 f4       	brpl	.+8      	; 0x2048 <__itoa_ncheck+0x12>
    2040:	bd e2       	ldi	r27, 0x2D	; 45
    2042:	90 95       	com	r25
    2044:	81 95       	neg	r24
    2046:	9f 4f       	sbci	r25, 0xFF	; 255
    2048:	0c 94 27 10 	jmp	0x204e	; 0x204e <__utoa_common>

0000204c <__utoa_ncheck>:
    204c:	bb 27       	eor	r27, r27

0000204e <__utoa_common>:
    204e:	fb 01       	movw	r30, r22
    2050:	55 27       	eor	r21, r21
    2052:	aa 27       	eor	r26, r26
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	aa 1f       	adc	r26, r26
    205a:	a4 17       	cp	r26, r20
    205c:	10 f0       	brcs	.+4      	; 0x2062 <__utoa_common+0x14>
    205e:	a4 1b       	sub	r26, r20
    2060:	83 95       	inc	r24
    2062:	50 51       	subi	r21, 0x10	; 16
    2064:	b9 f7       	brne	.-18     	; 0x2054 <__utoa_common+0x6>
    2066:	a0 5d       	subi	r26, 0xD0	; 208
    2068:	aa 33       	cpi	r26, 0x3A	; 58
    206a:	08 f0       	brcs	.+2      	; 0x206e <__utoa_common+0x20>
    206c:	a9 5d       	subi	r26, 0xD9	; 217
    206e:	a1 93       	st	Z+, r26
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	79 f7       	brne	.-34     	; 0x2052 <__utoa_common+0x4>
    2074:	b1 11       	cpse	r27, r1
    2076:	b1 93       	st	Z+, r27
    2078:	11 92       	st	Z+, r1
    207a:	cb 01       	movw	r24, r22
    207c:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <strrev>

00002080 <fdevopen>:
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	31 f4       	brne	.+12     	; 0x2098 <fdevopen+0x18>
    208c:	61 15       	cp	r22, r1
    208e:	71 05       	cpc	r23, r1
    2090:	19 f4       	brne	.+6      	; 0x2098 <fdevopen+0x18>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	3a c0       	rjmp	.+116    	; 0x210c <fdevopen+0x8c>
    2098:	8b 01       	movw	r16, r22
    209a:	ec 01       	movw	r28, r24
    209c:	6e e0       	ldi	r22, 0x0E	; 14
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 82 12 	call	0x2504	; 0x2504 <calloc>
    20a8:	fc 01       	movw	r30, r24
    20aa:	89 2b       	or	r24, r25
    20ac:	91 f3       	breq	.-28     	; 0x2092 <fdevopen+0x12>
    20ae:	80 e8       	ldi	r24, 0x80	; 128
    20b0:	83 83       	std	Z+3, r24	; 0x03
    20b2:	01 15       	cp	r16, r1
    20b4:	11 05       	cpc	r17, r1
    20b6:	71 f0       	breq	.+28     	; 0x20d4 <fdevopen+0x54>
    20b8:	13 87       	std	Z+11, r17	; 0x0b
    20ba:	02 87       	std	Z+10, r16	; 0x0a
    20bc:	81 e8       	ldi	r24, 0x81	; 129
    20be:	83 83       	std	Z+3, r24	; 0x03
    20c0:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <__iob>
    20c4:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <__iob+0x1>
    20c8:	89 2b       	or	r24, r25
    20ca:	21 f4       	brne	.+8      	; 0x20d4 <fdevopen+0x54>
    20cc:	f0 93 1c 04 	sts	0x041C, r31	; 0x80041c <__iob+0x1>
    20d0:	e0 93 1b 04 	sts	0x041B, r30	; 0x80041b <__iob>
    20d4:	20 97       	sbiw	r28, 0x00	; 0
    20d6:	c9 f0       	breq	.+50     	; 0x210a <fdevopen+0x8a>
    20d8:	d1 87       	std	Z+9, r29	; 0x09
    20da:	c0 87       	std	Z+8, r28	; 0x08
    20dc:	83 81       	ldd	r24, Z+3	; 0x03
    20de:	82 60       	ori	r24, 0x02	; 2
    20e0:	83 83       	std	Z+3, r24	; 0x03
    20e2:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <__iob+0x2>
    20e6:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <__iob+0x3>
    20ea:	89 2b       	or	r24, r25
    20ec:	71 f4       	brne	.+28     	; 0x210a <fdevopen+0x8a>
    20ee:	f0 93 1e 04 	sts	0x041E, r31	; 0x80041e <__iob+0x3>
    20f2:	e0 93 1d 04 	sts	0x041D, r30	; 0x80041d <__iob+0x2>
    20f6:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <__iob+0x4>
    20fa:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <__iob+0x5>
    20fe:	89 2b       	or	r24, r25
    2100:	21 f4       	brne	.+8      	; 0x210a <fdevopen+0x8a>
    2102:	f0 93 20 04 	sts	0x0420, r31	; 0x800420 <__iob+0x5>
    2106:	e0 93 1f 04 	sts	0x041F, r30	; 0x80041f <__iob+0x4>
    210a:	cf 01       	movw	r24, r30
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <printf>:
    2116:	a0 e0       	ldi	r26, 0x00	; 0
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e1 e9       	ldi	r30, 0x91	; 145
    211c:	f0 e1       	ldi	r31, 0x10	; 16
    211e:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x20>
    2122:	ae 01       	movw	r20, r28
    2124:	4b 5f       	subi	r20, 0xFB	; 251
    2126:	5f 4f       	sbci	r21, 0xFF	; 255
    2128:	fa 01       	movw	r30, r20
    212a:	61 91       	ld	r22, Z+
    212c:	71 91       	ld	r23, Z+
    212e:	af 01       	movw	r20, r30
    2130:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <__iob+0x2>
    2134:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <__iob+0x3>
    2138:	0e 94 a1 10 	call	0x2142	; 0x2142 <vfprintf>
    213c:	e2 e0       	ldi	r30, 0x02	; 2
    213e:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x20>

00002142 <vfprintf>:
    2142:	ab e0       	ldi	r26, 0x0B	; 11
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e7 ea       	ldi	r30, 0xA7	; 167
    2148:	f0 e1       	ldi	r31, 0x10	; 16
    214a:	0c 94 86 14 	jmp	0x290c	; 0x290c <__prologue_saves__>
    214e:	6c 01       	movw	r12, r24
    2150:	7b 01       	movw	r14, r22
    2152:	8a 01       	movw	r16, r20
    2154:	fc 01       	movw	r30, r24
    2156:	17 82       	std	Z+7, r1	; 0x07
    2158:	16 82       	std	Z+6, r1	; 0x06
    215a:	83 81       	ldd	r24, Z+3	; 0x03
    215c:	81 ff       	sbrs	r24, 1
    215e:	cc c1       	rjmp	.+920    	; 0x24f8 <vfprintf+0x3b6>
    2160:	ce 01       	movw	r24, r28
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	3c 01       	movw	r6, r24
    2166:	f6 01       	movw	r30, r12
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	f7 01       	movw	r30, r14
    216c:	93 fd       	sbrc	r25, 3
    216e:	85 91       	lpm	r24, Z+
    2170:	93 ff       	sbrs	r25, 3
    2172:	81 91       	ld	r24, Z+
    2174:	7f 01       	movw	r14, r30
    2176:	88 23       	and	r24, r24
    2178:	09 f4       	brne	.+2      	; 0x217c <vfprintf+0x3a>
    217a:	ba c1       	rjmp	.+884    	; 0x24f0 <vfprintf+0x3ae>
    217c:	85 32       	cpi	r24, 0x25	; 37
    217e:	39 f4       	brne	.+14     	; 0x218e <vfprintf+0x4c>
    2180:	93 fd       	sbrc	r25, 3
    2182:	85 91       	lpm	r24, Z+
    2184:	93 ff       	sbrs	r25, 3
    2186:	81 91       	ld	r24, Z+
    2188:	7f 01       	movw	r14, r30
    218a:	85 32       	cpi	r24, 0x25	; 37
    218c:	29 f4       	brne	.+10     	; 0x2198 <vfprintf+0x56>
    218e:	b6 01       	movw	r22, r12
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    2196:	e7 cf       	rjmp	.-50     	; 0x2166 <vfprintf+0x24>
    2198:	91 2c       	mov	r9, r1
    219a:	21 2c       	mov	r2, r1
    219c:	31 2c       	mov	r3, r1
    219e:	ff e1       	ldi	r31, 0x1F	; 31
    21a0:	f3 15       	cp	r31, r3
    21a2:	d8 f0       	brcs	.+54     	; 0x21da <vfprintf+0x98>
    21a4:	8b 32       	cpi	r24, 0x2B	; 43
    21a6:	79 f0       	breq	.+30     	; 0x21c6 <vfprintf+0x84>
    21a8:	38 f4       	brcc	.+14     	; 0x21b8 <vfprintf+0x76>
    21aa:	80 32       	cpi	r24, 0x20	; 32
    21ac:	79 f0       	breq	.+30     	; 0x21cc <vfprintf+0x8a>
    21ae:	83 32       	cpi	r24, 0x23	; 35
    21b0:	a1 f4       	brne	.+40     	; 0x21da <vfprintf+0x98>
    21b2:	23 2d       	mov	r18, r3
    21b4:	20 61       	ori	r18, 0x10	; 16
    21b6:	1d c0       	rjmp	.+58     	; 0x21f2 <vfprintf+0xb0>
    21b8:	8d 32       	cpi	r24, 0x2D	; 45
    21ba:	61 f0       	breq	.+24     	; 0x21d4 <vfprintf+0x92>
    21bc:	80 33       	cpi	r24, 0x30	; 48
    21be:	69 f4       	brne	.+26     	; 0x21da <vfprintf+0x98>
    21c0:	23 2d       	mov	r18, r3
    21c2:	21 60       	ori	r18, 0x01	; 1
    21c4:	16 c0       	rjmp	.+44     	; 0x21f2 <vfprintf+0xb0>
    21c6:	83 2d       	mov	r24, r3
    21c8:	82 60       	ori	r24, 0x02	; 2
    21ca:	38 2e       	mov	r3, r24
    21cc:	e3 2d       	mov	r30, r3
    21ce:	e4 60       	ori	r30, 0x04	; 4
    21d0:	3e 2e       	mov	r3, r30
    21d2:	2a c0       	rjmp	.+84     	; 0x2228 <vfprintf+0xe6>
    21d4:	f3 2d       	mov	r31, r3
    21d6:	f8 60       	ori	r31, 0x08	; 8
    21d8:	1d c0       	rjmp	.+58     	; 0x2214 <vfprintf+0xd2>
    21da:	37 fc       	sbrc	r3, 7
    21dc:	2d c0       	rjmp	.+90     	; 0x2238 <vfprintf+0xf6>
    21de:	20 ed       	ldi	r18, 0xD0	; 208
    21e0:	28 0f       	add	r18, r24
    21e2:	2a 30       	cpi	r18, 0x0A	; 10
    21e4:	40 f0       	brcs	.+16     	; 0x21f6 <vfprintf+0xb4>
    21e6:	8e 32       	cpi	r24, 0x2E	; 46
    21e8:	b9 f4       	brne	.+46     	; 0x2218 <vfprintf+0xd6>
    21ea:	36 fc       	sbrc	r3, 6
    21ec:	81 c1       	rjmp	.+770    	; 0x24f0 <vfprintf+0x3ae>
    21ee:	23 2d       	mov	r18, r3
    21f0:	20 64       	ori	r18, 0x40	; 64
    21f2:	32 2e       	mov	r3, r18
    21f4:	19 c0       	rjmp	.+50     	; 0x2228 <vfprintf+0xe6>
    21f6:	36 fe       	sbrs	r3, 6
    21f8:	06 c0       	rjmp	.+12     	; 0x2206 <vfprintf+0xc4>
    21fa:	8a e0       	ldi	r24, 0x0A	; 10
    21fc:	98 9e       	mul	r9, r24
    21fe:	20 0d       	add	r18, r0
    2200:	11 24       	eor	r1, r1
    2202:	92 2e       	mov	r9, r18
    2204:	11 c0       	rjmp	.+34     	; 0x2228 <vfprintf+0xe6>
    2206:	ea e0       	ldi	r30, 0x0A	; 10
    2208:	2e 9e       	mul	r2, r30
    220a:	20 0d       	add	r18, r0
    220c:	11 24       	eor	r1, r1
    220e:	22 2e       	mov	r2, r18
    2210:	f3 2d       	mov	r31, r3
    2212:	f0 62       	ori	r31, 0x20	; 32
    2214:	3f 2e       	mov	r3, r31
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <vfprintf+0xe6>
    2218:	8c 36       	cpi	r24, 0x6C	; 108
    221a:	21 f4       	brne	.+8      	; 0x2224 <vfprintf+0xe2>
    221c:	83 2d       	mov	r24, r3
    221e:	80 68       	ori	r24, 0x80	; 128
    2220:	38 2e       	mov	r3, r24
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <vfprintf+0xe6>
    2224:	88 36       	cpi	r24, 0x68	; 104
    2226:	41 f4       	brne	.+16     	; 0x2238 <vfprintf+0xf6>
    2228:	f7 01       	movw	r30, r14
    222a:	93 fd       	sbrc	r25, 3
    222c:	85 91       	lpm	r24, Z+
    222e:	93 ff       	sbrs	r25, 3
    2230:	81 91       	ld	r24, Z+
    2232:	7f 01       	movw	r14, r30
    2234:	81 11       	cpse	r24, r1
    2236:	b3 cf       	rjmp	.-154    	; 0x219e <vfprintf+0x5c>
    2238:	98 2f       	mov	r25, r24
    223a:	9f 7d       	andi	r25, 0xDF	; 223
    223c:	95 54       	subi	r25, 0x45	; 69
    223e:	93 30       	cpi	r25, 0x03	; 3
    2240:	28 f4       	brcc	.+10     	; 0x224c <vfprintf+0x10a>
    2242:	0c 5f       	subi	r16, 0xFC	; 252
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	9f e3       	ldi	r25, 0x3F	; 63
    2248:	99 83       	std	Y+1, r25	; 0x01
    224a:	0d c0       	rjmp	.+26     	; 0x2266 <vfprintf+0x124>
    224c:	83 36       	cpi	r24, 0x63	; 99
    224e:	31 f0       	breq	.+12     	; 0x225c <vfprintf+0x11a>
    2250:	83 37       	cpi	r24, 0x73	; 115
    2252:	71 f0       	breq	.+28     	; 0x2270 <vfprintf+0x12e>
    2254:	83 35       	cpi	r24, 0x53	; 83
    2256:	09 f0       	breq	.+2      	; 0x225a <vfprintf+0x118>
    2258:	59 c0       	rjmp	.+178    	; 0x230c <vfprintf+0x1ca>
    225a:	21 c0       	rjmp	.+66     	; 0x229e <vfprintf+0x15c>
    225c:	f8 01       	movw	r30, r16
    225e:	80 81       	ld	r24, Z
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	0e 5f       	subi	r16, 0xFE	; 254
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	88 24       	eor	r8, r8
    2268:	83 94       	inc	r8
    226a:	91 2c       	mov	r9, r1
    226c:	53 01       	movw	r10, r6
    226e:	13 c0       	rjmp	.+38     	; 0x2296 <vfprintf+0x154>
    2270:	28 01       	movw	r4, r16
    2272:	f2 e0       	ldi	r31, 0x02	; 2
    2274:	4f 0e       	add	r4, r31
    2276:	51 1c       	adc	r5, r1
    2278:	f8 01       	movw	r30, r16
    227a:	a0 80       	ld	r10, Z
    227c:	b1 80       	ldd	r11, Z+1	; 0x01
    227e:	36 fe       	sbrs	r3, 6
    2280:	03 c0       	rjmp	.+6      	; 0x2288 <vfprintf+0x146>
    2282:	69 2d       	mov	r22, r9
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	02 c0       	rjmp	.+4      	; 0x228c <vfprintf+0x14a>
    2288:	6f ef       	ldi	r22, 0xFF	; 255
    228a:	7f ef       	ldi	r23, 0xFF	; 255
    228c:	c5 01       	movw	r24, r10
    228e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <strnlen>
    2292:	4c 01       	movw	r8, r24
    2294:	82 01       	movw	r16, r4
    2296:	f3 2d       	mov	r31, r3
    2298:	ff 77       	andi	r31, 0x7F	; 127
    229a:	3f 2e       	mov	r3, r31
    229c:	16 c0       	rjmp	.+44     	; 0x22ca <vfprintf+0x188>
    229e:	28 01       	movw	r4, r16
    22a0:	22 e0       	ldi	r18, 0x02	; 2
    22a2:	42 0e       	add	r4, r18
    22a4:	51 1c       	adc	r5, r1
    22a6:	f8 01       	movw	r30, r16
    22a8:	a0 80       	ld	r10, Z
    22aa:	b1 80       	ldd	r11, Z+1	; 0x01
    22ac:	36 fe       	sbrs	r3, 6
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <vfprintf+0x174>
    22b0:	69 2d       	mov	r22, r9
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <vfprintf+0x178>
    22b6:	6f ef       	ldi	r22, 0xFF	; 255
    22b8:	7f ef       	ldi	r23, 0xFF	; 255
    22ba:	c5 01       	movw	r24, r10
    22bc:	0e 94 bf 13 	call	0x277e	; 0x277e <strnlen_P>
    22c0:	4c 01       	movw	r8, r24
    22c2:	f3 2d       	mov	r31, r3
    22c4:	f0 68       	ori	r31, 0x80	; 128
    22c6:	3f 2e       	mov	r3, r31
    22c8:	82 01       	movw	r16, r4
    22ca:	33 fc       	sbrc	r3, 3
    22cc:	1b c0       	rjmp	.+54     	; 0x2304 <vfprintf+0x1c2>
    22ce:	82 2d       	mov	r24, r2
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	88 16       	cp	r8, r24
    22d4:	99 06       	cpc	r9, r25
    22d6:	b0 f4       	brcc	.+44     	; 0x2304 <vfprintf+0x1c2>
    22d8:	b6 01       	movw	r22, r12
    22da:	80 e2       	ldi	r24, 0x20	; 32
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    22e2:	2a 94       	dec	r2
    22e4:	f4 cf       	rjmp	.-24     	; 0x22ce <vfprintf+0x18c>
    22e6:	f5 01       	movw	r30, r10
    22e8:	37 fc       	sbrc	r3, 7
    22ea:	85 91       	lpm	r24, Z+
    22ec:	37 fe       	sbrs	r3, 7
    22ee:	81 91       	ld	r24, Z+
    22f0:	5f 01       	movw	r10, r30
    22f2:	b6 01       	movw	r22, r12
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    22fa:	21 10       	cpse	r2, r1
    22fc:	2a 94       	dec	r2
    22fe:	21 e0       	ldi	r18, 0x01	; 1
    2300:	82 1a       	sub	r8, r18
    2302:	91 08       	sbc	r9, r1
    2304:	81 14       	cp	r8, r1
    2306:	91 04       	cpc	r9, r1
    2308:	71 f7       	brne	.-36     	; 0x22e6 <vfprintf+0x1a4>
    230a:	e8 c0       	rjmp	.+464    	; 0x24dc <vfprintf+0x39a>
    230c:	84 36       	cpi	r24, 0x64	; 100
    230e:	11 f0       	breq	.+4      	; 0x2314 <vfprintf+0x1d2>
    2310:	89 36       	cpi	r24, 0x69	; 105
    2312:	41 f5       	brne	.+80     	; 0x2364 <vfprintf+0x222>
    2314:	f8 01       	movw	r30, r16
    2316:	37 fe       	sbrs	r3, 7
    2318:	07 c0       	rjmp	.+14     	; 0x2328 <vfprintf+0x1e6>
    231a:	60 81       	ld	r22, Z
    231c:	71 81       	ldd	r23, Z+1	; 0x01
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	0c 5f       	subi	r16, 0xFC	; 252
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	08 c0       	rjmp	.+16     	; 0x2338 <vfprintf+0x1f6>
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	07 2e       	mov	r0, r23
    232e:	00 0c       	add	r0, r0
    2330:	88 0b       	sbc	r24, r24
    2332:	99 0b       	sbc	r25, r25
    2334:	0e 5f       	subi	r16, 0xFE	; 254
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	f3 2d       	mov	r31, r3
    233a:	ff 76       	andi	r31, 0x6F	; 111
    233c:	3f 2e       	mov	r3, r31
    233e:	97 ff       	sbrs	r25, 7
    2340:	09 c0       	rjmp	.+18     	; 0x2354 <vfprintf+0x212>
    2342:	90 95       	com	r25
    2344:	80 95       	com	r24
    2346:	70 95       	com	r23
    2348:	61 95       	neg	r22
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	8f 4f       	sbci	r24, 0xFF	; 255
    234e:	9f 4f       	sbci	r25, 0xFF	; 255
    2350:	f0 68       	ori	r31, 0x80	; 128
    2352:	3f 2e       	mov	r3, r31
    2354:	2a e0       	ldi	r18, 0x0A	; 10
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	a3 01       	movw	r20, r6
    235a:	0e 94 28 14 	call	0x2850	; 0x2850 <__ultoa_invert>
    235e:	88 2e       	mov	r8, r24
    2360:	86 18       	sub	r8, r6
    2362:	45 c0       	rjmp	.+138    	; 0x23ee <vfprintf+0x2ac>
    2364:	85 37       	cpi	r24, 0x75	; 117
    2366:	31 f4       	brne	.+12     	; 0x2374 <vfprintf+0x232>
    2368:	23 2d       	mov	r18, r3
    236a:	2f 7e       	andi	r18, 0xEF	; 239
    236c:	b2 2e       	mov	r11, r18
    236e:	2a e0       	ldi	r18, 0x0A	; 10
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	25 c0       	rjmp	.+74     	; 0x23be <vfprintf+0x27c>
    2374:	93 2d       	mov	r25, r3
    2376:	99 7f       	andi	r25, 0xF9	; 249
    2378:	b9 2e       	mov	r11, r25
    237a:	8f 36       	cpi	r24, 0x6F	; 111
    237c:	c1 f0       	breq	.+48     	; 0x23ae <vfprintf+0x26c>
    237e:	18 f4       	brcc	.+6      	; 0x2386 <vfprintf+0x244>
    2380:	88 35       	cpi	r24, 0x58	; 88
    2382:	79 f0       	breq	.+30     	; 0x23a2 <vfprintf+0x260>
    2384:	b5 c0       	rjmp	.+362    	; 0x24f0 <vfprintf+0x3ae>
    2386:	80 37       	cpi	r24, 0x70	; 112
    2388:	19 f0       	breq	.+6      	; 0x2390 <vfprintf+0x24e>
    238a:	88 37       	cpi	r24, 0x78	; 120
    238c:	21 f0       	breq	.+8      	; 0x2396 <vfprintf+0x254>
    238e:	b0 c0       	rjmp	.+352    	; 0x24f0 <vfprintf+0x3ae>
    2390:	e9 2f       	mov	r30, r25
    2392:	e0 61       	ori	r30, 0x10	; 16
    2394:	be 2e       	mov	r11, r30
    2396:	b4 fe       	sbrs	r11, 4
    2398:	0d c0       	rjmp	.+26     	; 0x23b4 <vfprintf+0x272>
    239a:	fb 2d       	mov	r31, r11
    239c:	f4 60       	ori	r31, 0x04	; 4
    239e:	bf 2e       	mov	r11, r31
    23a0:	09 c0       	rjmp	.+18     	; 0x23b4 <vfprintf+0x272>
    23a2:	34 fe       	sbrs	r3, 4
    23a4:	0a c0       	rjmp	.+20     	; 0x23ba <vfprintf+0x278>
    23a6:	29 2f       	mov	r18, r25
    23a8:	26 60       	ori	r18, 0x06	; 6
    23aa:	b2 2e       	mov	r11, r18
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <vfprintf+0x278>
    23ae:	28 e0       	ldi	r18, 0x08	; 8
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <vfprintf+0x27c>
    23b4:	20 e1       	ldi	r18, 0x10	; 16
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <vfprintf+0x27c>
    23ba:	20 e1       	ldi	r18, 0x10	; 16
    23bc:	32 e0       	ldi	r19, 0x02	; 2
    23be:	f8 01       	movw	r30, r16
    23c0:	b7 fe       	sbrs	r11, 7
    23c2:	07 c0       	rjmp	.+14     	; 0x23d2 <vfprintf+0x290>
    23c4:	60 81       	ld	r22, Z
    23c6:	71 81       	ldd	r23, Z+1	; 0x01
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	0c 5f       	subi	r16, 0xFC	; 252
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <vfprintf+0x29c>
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 5f       	subi	r16, 0xFE	; 254
    23dc:	1f 4f       	sbci	r17, 0xFF	; 255
    23de:	a3 01       	movw	r20, r6
    23e0:	0e 94 28 14 	call	0x2850	; 0x2850 <__ultoa_invert>
    23e4:	88 2e       	mov	r8, r24
    23e6:	86 18       	sub	r8, r6
    23e8:	fb 2d       	mov	r31, r11
    23ea:	ff 77       	andi	r31, 0x7F	; 127
    23ec:	3f 2e       	mov	r3, r31
    23ee:	36 fe       	sbrs	r3, 6
    23f0:	0d c0       	rjmp	.+26     	; 0x240c <vfprintf+0x2ca>
    23f2:	23 2d       	mov	r18, r3
    23f4:	2e 7f       	andi	r18, 0xFE	; 254
    23f6:	a2 2e       	mov	r10, r18
    23f8:	89 14       	cp	r8, r9
    23fa:	58 f4       	brcc	.+22     	; 0x2412 <vfprintf+0x2d0>
    23fc:	34 fe       	sbrs	r3, 4
    23fe:	0b c0       	rjmp	.+22     	; 0x2416 <vfprintf+0x2d4>
    2400:	32 fc       	sbrc	r3, 2
    2402:	09 c0       	rjmp	.+18     	; 0x2416 <vfprintf+0x2d4>
    2404:	83 2d       	mov	r24, r3
    2406:	8e 7e       	andi	r24, 0xEE	; 238
    2408:	a8 2e       	mov	r10, r24
    240a:	05 c0       	rjmp	.+10     	; 0x2416 <vfprintf+0x2d4>
    240c:	b8 2c       	mov	r11, r8
    240e:	a3 2c       	mov	r10, r3
    2410:	03 c0       	rjmp	.+6      	; 0x2418 <vfprintf+0x2d6>
    2412:	b8 2c       	mov	r11, r8
    2414:	01 c0       	rjmp	.+2      	; 0x2418 <vfprintf+0x2d6>
    2416:	b9 2c       	mov	r11, r9
    2418:	a4 fe       	sbrs	r10, 4
    241a:	0f c0       	rjmp	.+30     	; 0x243a <vfprintf+0x2f8>
    241c:	fe 01       	movw	r30, r28
    241e:	e8 0d       	add	r30, r8
    2420:	f1 1d       	adc	r31, r1
    2422:	80 81       	ld	r24, Z
    2424:	80 33       	cpi	r24, 0x30	; 48
    2426:	21 f4       	brne	.+8      	; 0x2430 <vfprintf+0x2ee>
    2428:	9a 2d       	mov	r25, r10
    242a:	99 7e       	andi	r25, 0xE9	; 233
    242c:	a9 2e       	mov	r10, r25
    242e:	09 c0       	rjmp	.+18     	; 0x2442 <vfprintf+0x300>
    2430:	a2 fe       	sbrs	r10, 2
    2432:	06 c0       	rjmp	.+12     	; 0x2440 <vfprintf+0x2fe>
    2434:	b3 94       	inc	r11
    2436:	b3 94       	inc	r11
    2438:	04 c0       	rjmp	.+8      	; 0x2442 <vfprintf+0x300>
    243a:	8a 2d       	mov	r24, r10
    243c:	86 78       	andi	r24, 0x86	; 134
    243e:	09 f0       	breq	.+2      	; 0x2442 <vfprintf+0x300>
    2440:	b3 94       	inc	r11
    2442:	a3 fc       	sbrc	r10, 3
    2444:	11 c0       	rjmp	.+34     	; 0x2468 <vfprintf+0x326>
    2446:	a0 fe       	sbrs	r10, 0
    2448:	06 c0       	rjmp	.+12     	; 0x2456 <vfprintf+0x314>
    244a:	b2 14       	cp	r11, r2
    244c:	88 f4       	brcc	.+34     	; 0x2470 <vfprintf+0x32e>
    244e:	28 0c       	add	r2, r8
    2450:	92 2c       	mov	r9, r2
    2452:	9b 18       	sub	r9, r11
    2454:	0e c0       	rjmp	.+28     	; 0x2472 <vfprintf+0x330>
    2456:	b2 14       	cp	r11, r2
    2458:	60 f4       	brcc	.+24     	; 0x2472 <vfprintf+0x330>
    245a:	b6 01       	movw	r22, r12
    245c:	80 e2       	ldi	r24, 0x20	; 32
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    2464:	b3 94       	inc	r11
    2466:	f7 cf       	rjmp	.-18     	; 0x2456 <vfprintf+0x314>
    2468:	b2 14       	cp	r11, r2
    246a:	18 f4       	brcc	.+6      	; 0x2472 <vfprintf+0x330>
    246c:	2b 18       	sub	r2, r11
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <vfprintf+0x332>
    2470:	98 2c       	mov	r9, r8
    2472:	21 2c       	mov	r2, r1
    2474:	a4 fe       	sbrs	r10, 4
    2476:	10 c0       	rjmp	.+32     	; 0x2498 <vfprintf+0x356>
    2478:	b6 01       	movw	r22, r12
    247a:	80 e3       	ldi	r24, 0x30	; 48
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    2482:	a2 fe       	sbrs	r10, 2
    2484:	17 c0       	rjmp	.+46     	; 0x24b4 <vfprintf+0x372>
    2486:	a1 fc       	sbrc	r10, 1
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <vfprintf+0x34e>
    248a:	88 e7       	ldi	r24, 0x78	; 120
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <vfprintf+0x352>
    2490:	88 e5       	ldi	r24, 0x58	; 88
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	b6 01       	movw	r22, r12
    2496:	0c c0       	rjmp	.+24     	; 0x24b0 <vfprintf+0x36e>
    2498:	8a 2d       	mov	r24, r10
    249a:	86 78       	andi	r24, 0x86	; 134
    249c:	59 f0       	breq	.+22     	; 0x24b4 <vfprintf+0x372>
    249e:	a1 fe       	sbrs	r10, 1
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <vfprintf+0x364>
    24a2:	8b e2       	ldi	r24, 0x2B	; 43
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <vfprintf+0x366>
    24a6:	80 e2       	ldi	r24, 0x20	; 32
    24a8:	a7 fc       	sbrc	r10, 7
    24aa:	8d e2       	ldi	r24, 0x2D	; 45
    24ac:	b6 01       	movw	r22, r12
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    24b4:	89 14       	cp	r8, r9
    24b6:	38 f4       	brcc	.+14     	; 0x24c6 <vfprintf+0x384>
    24b8:	b6 01       	movw	r22, r12
    24ba:	80 e3       	ldi	r24, 0x30	; 48
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    24c2:	9a 94       	dec	r9
    24c4:	f7 cf       	rjmp	.-18     	; 0x24b4 <vfprintf+0x372>
    24c6:	8a 94       	dec	r8
    24c8:	f3 01       	movw	r30, r6
    24ca:	e8 0d       	add	r30, r8
    24cc:	f1 1d       	adc	r31, r1
    24ce:	80 81       	ld	r24, Z
    24d0:	b6 01       	movw	r22, r12
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    24d8:	81 10       	cpse	r8, r1
    24da:	f5 cf       	rjmp	.-22     	; 0x24c6 <vfprintf+0x384>
    24dc:	22 20       	and	r2, r2
    24de:	09 f4       	brne	.+2      	; 0x24e2 <vfprintf+0x3a0>
    24e0:	42 ce       	rjmp	.-892    	; 0x2166 <vfprintf+0x24>
    24e2:	b6 01       	movw	r22, r12
    24e4:	80 e2       	ldi	r24, 0x20	; 32
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fputc>
    24ec:	2a 94       	dec	r2
    24ee:	f6 cf       	rjmp	.-20     	; 0x24dc <vfprintf+0x39a>
    24f0:	f6 01       	movw	r30, r12
    24f2:	86 81       	ldd	r24, Z+6	; 0x06
    24f4:	97 81       	ldd	r25, Z+7	; 0x07
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <vfprintf+0x3ba>
    24f8:	8f ef       	ldi	r24, 0xFF	; 255
    24fa:	9f ef       	ldi	r25, 0xFF	; 255
    24fc:	2b 96       	adiw	r28, 0x0b	; 11
    24fe:	e2 e1       	ldi	r30, 0x12	; 18
    2500:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__epilogue_restores__>

00002504 <calloc>:
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	86 9f       	mul	r24, r22
    250e:	80 01       	movw	r16, r0
    2510:	87 9f       	mul	r24, r23
    2512:	10 0d       	add	r17, r0
    2514:	96 9f       	mul	r25, r22
    2516:	10 0d       	add	r17, r0
    2518:	11 24       	eor	r1, r1
    251a:	c8 01       	movw	r24, r16
    251c:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
    2520:	ec 01       	movw	r28, r24
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	29 f0       	breq	.+10     	; 0x2530 <calloc+0x2c>
    2526:	a8 01       	movw	r20, r16
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	0e 94 ca 13 	call	0x2794	; 0x2794 <memset>
    2530:	ce 01       	movw	r24, r28
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	08 95       	ret

0000253c <malloc>:
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	82 30       	cpi	r24, 0x02	; 2
    2546:	91 05       	cpc	r25, r1
    2548:	10 f4       	brcc	.+4      	; 0x254e <malloc+0x12>
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <__flp>
    2552:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <__flp+0x1>
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	a0 e0       	ldi	r26, 0x00	; 0
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	30 97       	sbiw	r30, 0x00	; 0
    2560:	19 f1       	breq	.+70     	; 0x25a8 <malloc+0x6c>
    2562:	40 81       	ld	r20, Z
    2564:	51 81       	ldd	r21, Z+1	; 0x01
    2566:	02 81       	ldd	r16, Z+2	; 0x02
    2568:	13 81       	ldd	r17, Z+3	; 0x03
    256a:	48 17       	cp	r20, r24
    256c:	59 07       	cpc	r21, r25
    256e:	c8 f0       	brcs	.+50     	; 0x25a2 <malloc+0x66>
    2570:	84 17       	cp	r24, r20
    2572:	95 07       	cpc	r25, r21
    2574:	69 f4       	brne	.+26     	; 0x2590 <malloc+0x54>
    2576:	10 97       	sbiw	r26, 0x00	; 0
    2578:	31 f0       	breq	.+12     	; 0x2586 <malloc+0x4a>
    257a:	12 96       	adiw	r26, 0x02	; 2
    257c:	0c 93       	st	X, r16
    257e:	12 97       	sbiw	r26, 0x02	; 2
    2580:	13 96       	adiw	r26, 0x03	; 3
    2582:	1c 93       	st	X, r17
    2584:	27 c0       	rjmp	.+78     	; 0x25d4 <malloc+0x98>
    2586:	00 93 23 04 	sts	0x0423, r16	; 0x800423 <__flp>
    258a:	10 93 24 04 	sts	0x0424, r17	; 0x800424 <__flp+0x1>
    258e:	22 c0       	rjmp	.+68     	; 0x25d4 <malloc+0x98>
    2590:	21 15       	cp	r18, r1
    2592:	31 05       	cpc	r19, r1
    2594:	19 f0       	breq	.+6      	; 0x259c <malloc+0x60>
    2596:	42 17       	cp	r20, r18
    2598:	53 07       	cpc	r21, r19
    259a:	18 f4       	brcc	.+6      	; 0x25a2 <malloc+0x66>
    259c:	9a 01       	movw	r18, r20
    259e:	bd 01       	movw	r22, r26
    25a0:	ef 01       	movw	r28, r30
    25a2:	df 01       	movw	r26, r30
    25a4:	f8 01       	movw	r30, r16
    25a6:	db cf       	rjmp	.-74     	; 0x255e <malloc+0x22>
    25a8:	21 15       	cp	r18, r1
    25aa:	31 05       	cpc	r19, r1
    25ac:	f9 f0       	breq	.+62     	; 0x25ec <malloc+0xb0>
    25ae:	28 1b       	sub	r18, r24
    25b0:	39 0b       	sbc	r19, r25
    25b2:	24 30       	cpi	r18, 0x04	; 4
    25b4:	31 05       	cpc	r19, r1
    25b6:	80 f4       	brcc	.+32     	; 0x25d8 <malloc+0x9c>
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	61 15       	cp	r22, r1
    25be:	71 05       	cpc	r23, r1
    25c0:	21 f0       	breq	.+8      	; 0x25ca <malloc+0x8e>
    25c2:	fb 01       	movw	r30, r22
    25c4:	93 83       	std	Z+3, r25	; 0x03
    25c6:	82 83       	std	Z+2, r24	; 0x02
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <malloc+0x96>
    25ca:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <__flp+0x1>
    25ce:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <__flp>
    25d2:	fe 01       	movw	r30, r28
    25d4:	32 96       	adiw	r30, 0x02	; 2
    25d6:	44 c0       	rjmp	.+136    	; 0x2660 <malloc+0x124>
    25d8:	fe 01       	movw	r30, r28
    25da:	e2 0f       	add	r30, r18
    25dc:	f3 1f       	adc	r31, r19
    25de:	81 93       	st	Z+, r24
    25e0:	91 93       	st	Z+, r25
    25e2:	22 50       	subi	r18, 0x02	; 2
    25e4:	31 09       	sbc	r19, r1
    25e6:	39 83       	std	Y+1, r19	; 0x01
    25e8:	28 83       	st	Y, r18
    25ea:	3a c0       	rjmp	.+116    	; 0x2660 <malloc+0x124>
    25ec:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <__brkval>
    25f0:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <__brkval+0x1>
    25f4:	23 2b       	or	r18, r19
    25f6:	41 f4       	brne	.+16     	; 0x2608 <malloc+0xcc>
    25f8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25fc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2600:	30 93 22 04 	sts	0x0422, r19	; 0x800422 <__brkval+0x1>
    2604:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__brkval>
    2608:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    260c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2610:	21 15       	cp	r18, r1
    2612:	31 05       	cpc	r19, r1
    2614:	41 f4       	brne	.+16     	; 0x2626 <malloc+0xea>
    2616:	2d b7       	in	r18, 0x3d	; 61
    2618:	3e b7       	in	r19, 0x3e	; 62
    261a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    261e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2622:	24 1b       	sub	r18, r20
    2624:	35 0b       	sbc	r19, r21
    2626:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <__brkval>
    262a:	f0 91 22 04 	lds	r31, 0x0422	; 0x800422 <__brkval+0x1>
    262e:	e2 17       	cp	r30, r18
    2630:	f3 07       	cpc	r31, r19
    2632:	a0 f4       	brcc	.+40     	; 0x265c <malloc+0x120>
    2634:	2e 1b       	sub	r18, r30
    2636:	3f 0b       	sbc	r19, r31
    2638:	28 17       	cp	r18, r24
    263a:	39 07       	cpc	r19, r25
    263c:	78 f0       	brcs	.+30     	; 0x265c <malloc+0x120>
    263e:	ac 01       	movw	r20, r24
    2640:	4e 5f       	subi	r20, 0xFE	; 254
    2642:	5f 4f       	sbci	r21, 0xFF	; 255
    2644:	24 17       	cp	r18, r20
    2646:	35 07       	cpc	r19, r21
    2648:	48 f0       	brcs	.+18     	; 0x265c <malloc+0x120>
    264a:	4e 0f       	add	r20, r30
    264c:	5f 1f       	adc	r21, r31
    264e:	50 93 22 04 	sts	0x0422, r21	; 0x800422 <__brkval+0x1>
    2652:	40 93 21 04 	sts	0x0421, r20	; 0x800421 <__brkval>
    2656:	81 93       	st	Z+, r24
    2658:	91 93       	st	Z+, r25
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <malloc+0x124>
    265c:	e0 e0       	ldi	r30, 0x00	; 0
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	cf 01       	movw	r24, r30
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	08 95       	ret

0000266c <free>:
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	09 f4       	brne	.+2      	; 0x2676 <free+0xa>
    2674:	81 c0       	rjmp	.+258    	; 0x2778 <free+0x10c>
    2676:	fc 01       	movw	r30, r24
    2678:	32 97       	sbiw	r30, 0x02	; 2
    267a:	13 82       	std	Z+3, r1	; 0x03
    267c:	12 82       	std	Z+2, r1	; 0x02
    267e:	a0 91 23 04 	lds	r26, 0x0423	; 0x800423 <__flp>
    2682:	b0 91 24 04 	lds	r27, 0x0424	; 0x800424 <__flp+0x1>
    2686:	10 97       	sbiw	r26, 0x00	; 0
    2688:	81 f4       	brne	.+32     	; 0x26aa <free+0x3e>
    268a:	20 81       	ld	r18, Z
    268c:	31 81       	ldd	r19, Z+1	; 0x01
    268e:	82 0f       	add	r24, r18
    2690:	93 1f       	adc	r25, r19
    2692:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <__brkval>
    2696:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <__brkval+0x1>
    269a:	28 17       	cp	r18, r24
    269c:	39 07       	cpc	r19, r25
    269e:	51 f5       	brne	.+84     	; 0x26f4 <free+0x88>
    26a0:	f0 93 22 04 	sts	0x0422, r31	; 0x800422 <__brkval+0x1>
    26a4:	e0 93 21 04 	sts	0x0421, r30	; 0x800421 <__brkval>
    26a8:	67 c0       	rjmp	.+206    	; 0x2778 <free+0x10c>
    26aa:	ed 01       	movw	r28, r26
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	ce 17       	cp	r28, r30
    26b2:	df 07       	cpc	r29, r31
    26b4:	40 f4       	brcc	.+16     	; 0x26c6 <free+0x5a>
    26b6:	4a 81       	ldd	r20, Y+2	; 0x02
    26b8:	5b 81       	ldd	r21, Y+3	; 0x03
    26ba:	9e 01       	movw	r18, r28
    26bc:	41 15       	cp	r20, r1
    26be:	51 05       	cpc	r21, r1
    26c0:	f1 f0       	breq	.+60     	; 0x26fe <free+0x92>
    26c2:	ea 01       	movw	r28, r20
    26c4:	f5 cf       	rjmp	.-22     	; 0x26b0 <free+0x44>
    26c6:	d3 83       	std	Z+3, r29	; 0x03
    26c8:	c2 83       	std	Z+2, r28	; 0x02
    26ca:	40 81       	ld	r20, Z
    26cc:	51 81       	ldd	r21, Z+1	; 0x01
    26ce:	84 0f       	add	r24, r20
    26d0:	95 1f       	adc	r25, r21
    26d2:	c8 17       	cp	r28, r24
    26d4:	d9 07       	cpc	r29, r25
    26d6:	59 f4       	brne	.+22     	; 0x26ee <free+0x82>
    26d8:	88 81       	ld	r24, Y
    26da:	99 81       	ldd	r25, Y+1	; 0x01
    26dc:	84 0f       	add	r24, r20
    26de:	95 1f       	adc	r25, r21
    26e0:	02 96       	adiw	r24, 0x02	; 2
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	80 83       	st	Z, r24
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ea:	93 83       	std	Z+3, r25	; 0x03
    26ec:	82 83       	std	Z+2, r24	; 0x02
    26ee:	21 15       	cp	r18, r1
    26f0:	31 05       	cpc	r19, r1
    26f2:	29 f4       	brne	.+10     	; 0x26fe <free+0x92>
    26f4:	f0 93 24 04 	sts	0x0424, r31	; 0x800424 <__flp+0x1>
    26f8:	e0 93 23 04 	sts	0x0423, r30	; 0x800423 <__flp>
    26fc:	3d c0       	rjmp	.+122    	; 0x2778 <free+0x10c>
    26fe:	e9 01       	movw	r28, r18
    2700:	fb 83       	std	Y+3, r31	; 0x03
    2702:	ea 83       	std	Y+2, r30	; 0x02
    2704:	49 91       	ld	r20, Y+
    2706:	59 91       	ld	r21, Y+
    2708:	c4 0f       	add	r28, r20
    270a:	d5 1f       	adc	r29, r21
    270c:	ec 17       	cp	r30, r28
    270e:	fd 07       	cpc	r31, r29
    2710:	61 f4       	brne	.+24     	; 0x272a <free+0xbe>
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	84 0f       	add	r24, r20
    2718:	95 1f       	adc	r25, r21
    271a:	02 96       	adiw	r24, 0x02	; 2
    271c:	e9 01       	movw	r28, r18
    271e:	99 83       	std	Y+1, r25	; 0x01
    2720:	88 83       	st	Y, r24
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	9b 83       	std	Y+3, r25	; 0x03
    2728:	8a 83       	std	Y+2, r24	; 0x02
    272a:	e0 e0       	ldi	r30, 0x00	; 0
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	12 96       	adiw	r26, 0x02	; 2
    2730:	8d 91       	ld	r24, X+
    2732:	9c 91       	ld	r25, X
    2734:	13 97       	sbiw	r26, 0x03	; 3
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	19 f0       	breq	.+6      	; 0x2740 <free+0xd4>
    273a:	fd 01       	movw	r30, r26
    273c:	dc 01       	movw	r26, r24
    273e:	f7 cf       	rjmp	.-18     	; 0x272e <free+0xc2>
    2740:	8d 91       	ld	r24, X+
    2742:	9c 91       	ld	r25, X
    2744:	11 97       	sbiw	r26, 0x01	; 1
    2746:	9d 01       	movw	r18, r26
    2748:	2e 5f       	subi	r18, 0xFE	; 254
    274a:	3f 4f       	sbci	r19, 0xFF	; 255
    274c:	82 0f       	add	r24, r18
    274e:	93 1f       	adc	r25, r19
    2750:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <__brkval>
    2754:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <__brkval+0x1>
    2758:	28 17       	cp	r18, r24
    275a:	39 07       	cpc	r19, r25
    275c:	69 f4       	brne	.+26     	; 0x2778 <free+0x10c>
    275e:	30 97       	sbiw	r30, 0x00	; 0
    2760:	29 f4       	brne	.+10     	; 0x276c <free+0x100>
    2762:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <__flp+0x1>
    2766:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <__flp>
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <free+0x104>
    276c:	13 82       	std	Z+3, r1	; 0x03
    276e:	12 82       	std	Z+2, r1	; 0x02
    2770:	b0 93 22 04 	sts	0x0422, r27	; 0x800422 <__brkval+0x1>
    2774:	a0 93 21 04 	sts	0x0421, r26	; 0x800421 <__brkval>
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	08 95       	ret

0000277e <strnlen_P>:
    277e:	fc 01       	movw	r30, r24
    2780:	05 90       	lpm	r0, Z+
    2782:	61 50       	subi	r22, 0x01	; 1
    2784:	70 40       	sbci	r23, 0x00	; 0
    2786:	01 10       	cpse	r0, r1
    2788:	d8 f7       	brcc	.-10     	; 0x2780 <strnlen_P+0x2>
    278a:	80 95       	com	r24
    278c:	90 95       	com	r25
    278e:	8e 0f       	add	r24, r30
    2790:	9f 1f       	adc	r25, r31
    2792:	08 95       	ret

00002794 <memset>:
    2794:	dc 01       	movw	r26, r24
    2796:	01 c0       	rjmp	.+2      	; 0x279a <memset+0x6>
    2798:	6d 93       	st	X+, r22
    279a:	41 50       	subi	r20, 0x01	; 1
    279c:	50 40       	sbci	r21, 0x00	; 0
    279e:	e0 f7       	brcc	.-8      	; 0x2798 <memset+0x4>
    27a0:	08 95       	ret

000027a2 <strnlen>:
    27a2:	fc 01       	movw	r30, r24
    27a4:	61 50       	subi	r22, 0x01	; 1
    27a6:	70 40       	sbci	r23, 0x00	; 0
    27a8:	01 90       	ld	r0, Z+
    27aa:	01 10       	cpse	r0, r1
    27ac:	d8 f7       	brcc	.-10     	; 0x27a4 <strnlen+0x2>
    27ae:	80 95       	com	r24
    27b0:	90 95       	com	r25
    27b2:	8e 0f       	add	r24, r30
    27b4:	9f 1f       	adc	r25, r31
    27b6:	08 95       	ret

000027b8 <strrev>:
    27b8:	dc 01       	movw	r26, r24
    27ba:	fc 01       	movw	r30, r24
    27bc:	67 2f       	mov	r22, r23
    27be:	71 91       	ld	r23, Z+
    27c0:	77 23       	and	r23, r23
    27c2:	e1 f7       	brne	.-8      	; 0x27bc <strrev+0x4>
    27c4:	32 97       	sbiw	r30, 0x02	; 2
    27c6:	04 c0       	rjmp	.+8      	; 0x27d0 <strrev+0x18>
    27c8:	7c 91       	ld	r23, X
    27ca:	6d 93       	st	X+, r22
    27cc:	70 83       	st	Z, r23
    27ce:	62 91       	ld	r22, -Z
    27d0:	ae 17       	cp	r26, r30
    27d2:	bf 07       	cpc	r27, r31
    27d4:	c8 f3       	brcs	.-14     	; 0x27c8 <strrev+0x10>
    27d6:	08 95       	ret

000027d8 <fputc>:
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	fb 01       	movw	r30, r22
    27e2:	23 81       	ldd	r18, Z+3	; 0x03
    27e4:	21 fd       	sbrc	r18, 1
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <fputc+0x16>
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	9f ef       	ldi	r25, 0xFF	; 255
    27ec:	2c c0       	rjmp	.+88     	; 0x2846 <fputc+0x6e>
    27ee:	22 ff       	sbrs	r18, 2
    27f0:	16 c0       	rjmp	.+44     	; 0x281e <fputc+0x46>
    27f2:	46 81       	ldd	r20, Z+6	; 0x06
    27f4:	57 81       	ldd	r21, Z+7	; 0x07
    27f6:	24 81       	ldd	r18, Z+4	; 0x04
    27f8:	35 81       	ldd	r19, Z+5	; 0x05
    27fa:	42 17       	cp	r20, r18
    27fc:	53 07       	cpc	r21, r19
    27fe:	44 f4       	brge	.+16     	; 0x2810 <fputc+0x38>
    2800:	a0 81       	ld	r26, Z
    2802:	b1 81       	ldd	r27, Z+1	; 0x01
    2804:	9d 01       	movw	r18, r26
    2806:	2f 5f       	subi	r18, 0xFF	; 255
    2808:	3f 4f       	sbci	r19, 0xFF	; 255
    280a:	31 83       	std	Z+1, r19	; 0x01
    280c:	20 83       	st	Z, r18
    280e:	8c 93       	st	X, r24
    2810:	26 81       	ldd	r18, Z+6	; 0x06
    2812:	37 81       	ldd	r19, Z+7	; 0x07
    2814:	2f 5f       	subi	r18, 0xFF	; 255
    2816:	3f 4f       	sbci	r19, 0xFF	; 255
    2818:	37 83       	std	Z+7, r19	; 0x07
    281a:	26 83       	std	Z+6, r18	; 0x06
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <fputc+0x6e>
    281e:	8b 01       	movw	r16, r22
    2820:	ec 01       	movw	r28, r24
    2822:	fb 01       	movw	r30, r22
    2824:	00 84       	ldd	r0, Z+8	; 0x08
    2826:	f1 85       	ldd	r31, Z+9	; 0x09
    2828:	e0 2d       	mov	r30, r0
    282a:	09 95       	icall
    282c:	89 2b       	or	r24, r25
    282e:	e1 f6       	brne	.-72     	; 0x27e8 <fputc+0x10>
    2830:	d8 01       	movw	r26, r16
    2832:	16 96       	adiw	r26, 0x06	; 6
    2834:	8d 91       	ld	r24, X+
    2836:	9c 91       	ld	r25, X
    2838:	17 97       	sbiw	r26, 0x07	; 7
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	17 96       	adiw	r26, 0x07	; 7
    283e:	9c 93       	st	X, r25
    2840:	8e 93       	st	-X, r24
    2842:	16 97       	sbiw	r26, 0x06	; 6
    2844:	ce 01       	movw	r24, r28
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	08 95       	ret

00002850 <__ultoa_invert>:
    2850:	fa 01       	movw	r30, r20
    2852:	aa 27       	eor	r26, r26
    2854:	28 30       	cpi	r18, 0x08	; 8
    2856:	51 f1       	breq	.+84     	; 0x28ac <__ultoa_invert+0x5c>
    2858:	20 31       	cpi	r18, 0x10	; 16
    285a:	81 f1       	breq	.+96     	; 0x28bc <__ultoa_invert+0x6c>
    285c:	e8 94       	clt
    285e:	6f 93       	push	r22
    2860:	6e 7f       	andi	r22, 0xFE	; 254
    2862:	6e 5f       	subi	r22, 0xFE	; 254
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	8f 4f       	sbci	r24, 0xFF	; 255
    2868:	9f 4f       	sbci	r25, 0xFF	; 255
    286a:	af 4f       	sbci	r26, 0xFF	; 255
    286c:	b1 e0       	ldi	r27, 0x01	; 1
    286e:	3e d0       	rcall	.+124    	; 0x28ec <__ultoa_invert+0x9c>
    2870:	b4 e0       	ldi	r27, 0x04	; 4
    2872:	3c d0       	rcall	.+120    	; 0x28ec <__ultoa_invert+0x9c>
    2874:	67 0f       	add	r22, r23
    2876:	78 1f       	adc	r23, r24
    2878:	89 1f       	adc	r24, r25
    287a:	9a 1f       	adc	r25, r26
    287c:	a1 1d       	adc	r26, r1
    287e:	68 0f       	add	r22, r24
    2880:	79 1f       	adc	r23, r25
    2882:	8a 1f       	adc	r24, r26
    2884:	91 1d       	adc	r25, r1
    2886:	a1 1d       	adc	r26, r1
    2888:	6a 0f       	add	r22, r26
    288a:	71 1d       	adc	r23, r1
    288c:	81 1d       	adc	r24, r1
    288e:	91 1d       	adc	r25, r1
    2890:	a1 1d       	adc	r26, r1
    2892:	20 d0       	rcall	.+64     	; 0x28d4 <__ultoa_invert+0x84>
    2894:	09 f4       	brne	.+2      	; 0x2898 <__ultoa_invert+0x48>
    2896:	68 94       	set
    2898:	3f 91       	pop	r19
    289a:	2a e0       	ldi	r18, 0x0A	; 10
    289c:	26 9f       	mul	r18, r22
    289e:	11 24       	eor	r1, r1
    28a0:	30 19       	sub	r19, r0
    28a2:	30 5d       	subi	r19, 0xD0	; 208
    28a4:	31 93       	st	Z+, r19
    28a6:	de f6       	brtc	.-74     	; 0x285e <__ultoa_invert+0xe>
    28a8:	cf 01       	movw	r24, r30
    28aa:	08 95       	ret
    28ac:	46 2f       	mov	r20, r22
    28ae:	47 70       	andi	r20, 0x07	; 7
    28b0:	40 5d       	subi	r20, 0xD0	; 208
    28b2:	41 93       	st	Z+, r20
    28b4:	b3 e0       	ldi	r27, 0x03	; 3
    28b6:	0f d0       	rcall	.+30     	; 0x28d6 <__ultoa_invert+0x86>
    28b8:	c9 f7       	brne	.-14     	; 0x28ac <__ultoa_invert+0x5c>
    28ba:	f6 cf       	rjmp	.-20     	; 0x28a8 <__ultoa_invert+0x58>
    28bc:	46 2f       	mov	r20, r22
    28be:	4f 70       	andi	r20, 0x0F	; 15
    28c0:	40 5d       	subi	r20, 0xD0	; 208
    28c2:	4a 33       	cpi	r20, 0x3A	; 58
    28c4:	18 f0       	brcs	.+6      	; 0x28cc <__ultoa_invert+0x7c>
    28c6:	49 5d       	subi	r20, 0xD9	; 217
    28c8:	31 fd       	sbrc	r19, 1
    28ca:	40 52       	subi	r20, 0x20	; 32
    28cc:	41 93       	st	Z+, r20
    28ce:	02 d0       	rcall	.+4      	; 0x28d4 <__ultoa_invert+0x84>
    28d0:	a9 f7       	brne	.-22     	; 0x28bc <__ultoa_invert+0x6c>
    28d2:	ea cf       	rjmp	.-44     	; 0x28a8 <__ultoa_invert+0x58>
    28d4:	b4 e0       	ldi	r27, 0x04	; 4
    28d6:	a6 95       	lsr	r26
    28d8:	97 95       	ror	r25
    28da:	87 95       	ror	r24
    28dc:	77 95       	ror	r23
    28de:	67 95       	ror	r22
    28e0:	ba 95       	dec	r27
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <__ultoa_invert+0x86>
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	61 05       	cpc	r22, r1
    28e8:	71 05       	cpc	r23, r1
    28ea:	08 95       	ret
    28ec:	9b 01       	movw	r18, r22
    28ee:	ac 01       	movw	r20, r24
    28f0:	0a 2e       	mov	r0, r26
    28f2:	06 94       	lsr	r0
    28f4:	57 95       	ror	r21
    28f6:	47 95       	ror	r20
    28f8:	37 95       	ror	r19
    28fa:	27 95       	ror	r18
    28fc:	ba 95       	dec	r27
    28fe:	c9 f7       	brne	.-14     	; 0x28f2 <__ultoa_invert+0xa2>
    2900:	62 0f       	add	r22, r18
    2902:	73 1f       	adc	r23, r19
    2904:	84 1f       	adc	r24, r20
    2906:	95 1f       	adc	r25, r21
    2908:	a0 1d       	adc	r26, r0
    290a:	08 95       	ret

0000290c <__prologue_saves__>:
    290c:	2f 92       	push	r2
    290e:	3f 92       	push	r3
    2910:	4f 92       	push	r4
    2912:	5f 92       	push	r5
    2914:	6f 92       	push	r6
    2916:	7f 92       	push	r7
    2918:	8f 92       	push	r8
    291a:	9f 92       	push	r9
    291c:	af 92       	push	r10
    291e:	bf 92       	push	r11
    2920:	cf 92       	push	r12
    2922:	df 92       	push	r13
    2924:	ef 92       	push	r14
    2926:	ff 92       	push	r15
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	ca 1b       	sub	r28, r26
    2936:	db 0b       	sbc	r29, r27
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	09 94       	ijmp

00002944 <__epilogue_restores__>:
    2944:	2a 88       	ldd	r2, Y+18	; 0x12
    2946:	39 88       	ldd	r3, Y+17	; 0x11
    2948:	48 88       	ldd	r4, Y+16	; 0x10
    294a:	5f 84       	ldd	r5, Y+15	; 0x0f
    294c:	6e 84       	ldd	r6, Y+14	; 0x0e
    294e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2950:	8c 84       	ldd	r8, Y+12	; 0x0c
    2952:	9b 84       	ldd	r9, Y+11	; 0x0b
    2954:	aa 84       	ldd	r10, Y+10	; 0x0a
    2956:	b9 84       	ldd	r11, Y+9	; 0x09
    2958:	c8 84       	ldd	r12, Y+8	; 0x08
    295a:	df 80       	ldd	r13, Y+7	; 0x07
    295c:	ee 80       	ldd	r14, Y+6	; 0x06
    295e:	fd 80       	ldd	r15, Y+5	; 0x05
    2960:	0c 81       	ldd	r16, Y+4	; 0x04
    2962:	1b 81       	ldd	r17, Y+3	; 0x03
    2964:	aa 81       	ldd	r26, Y+2	; 0x02
    2966:	b9 81       	ldd	r27, Y+1	; 0x01
    2968:	ce 0f       	add	r28, r30
    296a:	d1 1d       	adc	r29, r1
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	ed 01       	movw	r28, r26
    2978:	08 95       	ret

0000297a <_exit>:
    297a:	f8 94       	cli

0000297c <__stop_program>:
    297c:	ff cf       	rjmp	.-2      	; 0x297c <__stop_program>
