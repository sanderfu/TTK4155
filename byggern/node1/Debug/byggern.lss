
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00002328  000023bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  00800242  00800242  000024fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000255c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004963  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ad7  00000000  00000000  00007283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001db5  00000000  00000000  00008d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e0  00000000  00000000  0000ab10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bc1  00000000  00000000  0000b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018ff  00000000  00000000  0000beb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <game_updateOled+0x8c>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e8 e2       	ldi	r30, 0x28	; 40
     3aa:	f3 e2       	ldi	r31, 0x23	; 35
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a2 34       	cpi	r26, 0x42	; 66
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	a2 e4       	ldi	r26, 0x42	; 66
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a9 33       	cpi	r26, 0x39	; 57
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 92 11 	jmp	0x2324	; 0x2324 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x10c7>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x10c7>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "MCP2515.h"
#include "pwm.h"
#include "music.h"
#include "CAN.h"

ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <flag>
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:

int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     41a:	0e 94 20 09 	call	0x1240	; 0x1240 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     41e:	87 e5       	ldi	r24, 0x57	; 87
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	9a 87       	std	Y+10, r25	; 0x0a
     424:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     42a:	8d e0       	ldi	r24, 0x0D	; 13
     42c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     42e:	86 e1       	ldi	r24, 0x16	; 22
     430:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     432:	81 e2       	ldi	r24, 0x21	; 33
     434:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
	printf("---------------------------------------\n\r");
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	97 e0       	ldi	r25, 0x07	; 7
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x4e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x58>
     45e:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 03 04 	call	0x806	; 0x806 <CAN_controller_setMode>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     46e:	09 e4       	ldi	r16, 0x49	; 73
     470:	12 e0       	ldi	r17, 0x02	; 2

	//test_SRAM();            
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     472:	0e 94 83 06 	call	0xd06	; 0xd06 <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     476:	d8 01       	movw	r26, r16
     478:	ed 91       	ld	r30, X+
     47a:	fc 91       	ld	r31, X
     47c:	80 81       	ld	r24, Z
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	19 f0       	breq	.+6      	; 0x488 <main+0x82>
     482:	84 30       	cpi	r24, 0x04	; 4
     484:	21 f0       	breq	.+8      	; 0x48e <main+0x88>
     486:	f5 cf       	rjmp	.-22     	; 0x472 <main+0x6c>
			case MAIN_MENU:
				break;
			case HIGH_SCORE:
				game_displayHighscores();
     488:	0e 94 2a 06 	call	0xc54	; 0xc54 <game_displayHighscores>
     48c:	f2 cf       	rjmp	.-28     	; 0x472 <main+0x6c>
			case MUSIC:
				break;
			case GAME_1:
				game_play(1);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 c8 05 	call	0xb90	; 0xb90 <game_play>
				break;
     496:	ed cf       	rjmp	.-38     	; 0x472 <main+0x6c>

00000498 <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	6c e2       	ldi	r22, 0x2C	; 44
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
     4a8:	08 95       	ret

000004aa <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     4b2:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     4b6:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <__data_end+0x1>
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	63 e0       	ldi	r22, 0x03	; 3
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodhi4>
     4c4:	28 2f       	mov	r18, r24
     4c6:	39 2f       	mov	r19, r25
     4c8:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
     4cc:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__data_end+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     4d0:	21 30       	cpi	r18, 0x01	; 1
     4d2:	31 05       	cpc	r19, r1
     4d4:	01 f1       	breq	.+64     	; 0x516 <__stack+0x17>
     4d6:	22 30       	cpi	r18, 0x02	; 2
     4d8:	31 05       	cpc	r19, r1
     4da:	b9 f1       	breq	.+110    	; 0x54a <__stack+0x4b>
     4dc:	23 2b       	or	r18, r19
     4de:	09 f0       	breq	.+2      	; 0x4e2 <CAN_transmit_message+0x38>
     4e0:	4d c0       	rjmp	.+154    	; 0x57c <__stack+0x7d>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     4e2:	f8 01       	movw	r30, r16
     4e4:	40 85       	ldd	r20, Z+8	; 0x08
     4e6:	51 85       	ldd	r21, Z+9	; 0x09
     4e8:	42 95       	swap	r20
     4ea:	44 0f       	add	r20, r20
     4ec:	40 7e       	andi	r20, 0xE0	; 224
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	62 e3       	ldi	r22, 0x32	; 50
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 ee       	ldi	r24, 0xE0	; 224
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     4fc:	f8 01       	movw	r30, r16
     4fe:	60 85       	ldd	r22, Z+8	; 0x08
     500:	71 85       	ldd	r23, Z+9	; 0x09
     502:	76 95       	lsr	r23
     504:	67 95       	ror	r22
     506:	76 95       	lsr	r23
     508:	67 95       	ror	r22
     50a:	76 95       	lsr	r23
     50c:	67 95       	ror	r22
     50e:	81 e3       	ldi	r24, 0x31	; 49
     510:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     514:	33 c0       	rjmp	.+102    	; 0x57c <__stack+0x7d>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     516:	f8 01       	movw	r30, r16
     518:	40 85       	ldd	r20, Z+8	; 0x08
     51a:	51 85       	ldd	r21, Z+9	; 0x09
     51c:	42 95       	swap	r20
     51e:	44 0f       	add	r20, r20
     520:	40 7e       	andi	r20, 0xE0	; 224
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	62 e4       	ldi	r22, 0x42	; 66
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	80 ee       	ldi	r24, 0xE0	; 224
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     530:	f8 01       	movw	r30, r16
     532:	60 85       	ldd	r22, Z+8	; 0x08
     534:	71 85       	ldd	r23, Z+9	; 0x09
     536:	76 95       	lsr	r23
     538:	67 95       	ror	r22
     53a:	76 95       	lsr	r23
     53c:	67 95       	ror	r22
     53e:	76 95       	lsr	r23
     540:	67 95       	ror	r22
     542:	81 e4       	ldi	r24, 0x41	; 65
     544:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_write>
				
				break;
     548:	19 c0       	rjmp	.+50     	; 0x57c <__stack+0x7d>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     54a:	f8 01       	movw	r30, r16
     54c:	40 85       	ldd	r20, Z+8	; 0x08
     54e:	51 85       	ldd	r21, Z+9	; 0x09
     550:	42 95       	swap	r20
     552:	44 0f       	add	r20, r20
     554:	40 7e       	andi	r20, 0xE0	; 224
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	62 e5       	ldi	r22, 0x52	; 82
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 ee       	ldi	r24, 0xE0	; 224
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     564:	f8 01       	movw	r30, r16
     566:	60 85       	ldd	r22, Z+8	; 0x08
     568:	71 85       	ldd	r23, Z+9	; 0x09
     56a:	76 95       	lsr	r23
     56c:	67 95       	ror	r22
     56e:	76 95       	lsr	r23
     570:	67 95       	ror	r22
     572:	76 95       	lsr	r23
     574:	67 95       	ror	r22
     576:	81 e5       	ldi	r24, 0x51	; 81
     578:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     57c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     580:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <__data_end+0x1>
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	91 05       	cpc	r25, r1
     588:	79 f0       	breq	.+30     	; 0x5a8 <__stack+0xa9>
     58a:	82 30       	cpi	r24, 0x02	; 2
     58c:	91 05       	cpc	r25, r1
     58e:	b1 f0       	breq	.+44     	; 0x5bc <__stack+0xbd>
     590:	89 2b       	or	r24, r25
     592:	e9 f4       	brne	.+58     	; 0x5ce <__stack+0xcf>
			case 0:
				//printf("\n\rtransmitting data length: %i\n\r", message->data_length);
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     594:	f8 01       	movw	r30, r16
     596:	42 85       	ldd	r20, Z+10	; 0x0a
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	65 e3       	ldi	r22, 0x35	; 53
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	8f e0       	ldi	r24, 0x0F	; 15
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
				break;
     5a6:	13 c0       	rjmp	.+38     	; 0x5ce <__stack+0xcf>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     5a8:	f8 01       	movw	r30, r16
     5aa:	42 85       	ldd	r20, Z+10	; 0x0a
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	65 e4       	ldi	r22, 0x45	; 69
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	8f e0       	ldi	r24, 0x0F	; 15
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
				break;
     5ba:	09 c0       	rjmp	.+18     	; 0x5ce <__stack+0xcf>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     5bc:	f8 01       	movw	r30, r16
     5be:	42 85       	ldd	r20, Z+10	; 0x0a
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	65 e5       	ldi	r22, 0x55	; 85
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	8f e0       	ldi	r24, 0x0F	; 15
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     5ce:	f8 01       	movw	r30, r16
     5d0:	82 85       	ldd	r24, Z+10	; 0x0a
     5d2:	88 23       	and	r24, r24
     5d4:	61 f1       	breq	.+88     	; 0x62e <__stack+0x12f>
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     5d8:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     5dc:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <__data_end+0x1>
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	91 05       	cpc	r25, r1
     5e4:	71 f0       	breq	.+28     	; 0x602 <__stack+0x103>
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	91 05       	cpc	r25, r1
     5ea:	a1 f0       	breq	.+40     	; 0x614 <__stack+0x115>
     5ec:	89 2b       	or	r24, r25
     5ee:	d1 f4       	brne	.+52     	; 0x624 <__stack+0x125>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     5f0:	f8 01       	movw	r30, r16
     5f2:	ec 0f       	add	r30, r28
     5f4:	f1 1d       	adc	r31, r1
     5f6:	60 81       	ld	r22, Z
     5f8:	86 e3       	ldi	r24, 0x36	; 54
     5fa:	8c 0f       	add	r24, r28
     5fc:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_write>
				break;
     600:	11 c0       	rjmp	.+34     	; 0x624 <__stack+0x125>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     602:	f8 01       	movw	r30, r16
     604:	ec 0f       	add	r30, r28
     606:	f1 1d       	adc	r31, r1
     608:	60 81       	ld	r22, Z
     60a:	86 e4       	ldi	r24, 0x46	; 70
     60c:	8c 0f       	add	r24, r28
     60e:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_write>
				break;
     612:	08 c0       	rjmp	.+16     	; 0x624 <__stack+0x125>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     614:	f8 01       	movw	r30, r16
     616:	ec 0f       	add	r30, r28
     618:	f1 1d       	adc	r31, r1
     61a:	60 81       	ld	r22, Z
     61c:	86 e5       	ldi	r24, 0x56	; 86
     61e:	8c 0f       	add	r24, r28
     620:	0e 94 9c 03 	call	0x738	; 0x738 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     624:	cf 5f       	subi	r28, 0xFF	; 255
     626:	f8 01       	movw	r30, r16
     628:	82 85       	ldd	r24, Z+10	; 0x0a
     62a:	8c 13       	cpse	r24, r28
     62c:	d5 cf       	rjmp	.-86     	; 0x5d8 <__stack+0xd9>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     62e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     632:	0e 94 e6 03 	call	0x7cc	; 0x7cc <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	08 95       	ret

0000063e <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     64a:	82 e6       	ldi	r24, 0x62	; 98
     64c:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_controller_read>
     650:	c8 2f       	mov	r28, r24
     652:	81 e6       	ldi	r24, 0x61	; 97
     654:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_controller_read>
     658:	c2 95       	swap	r28
     65a:	c6 95       	lsr	r28
     65c:	c7 70       	andi	r28, 0x07	; 7
     65e:	28 e0       	ldi	r18, 0x08	; 8
     660:	82 9f       	mul	r24, r18
     662:	c0 01       	movw	r24, r0
     664:	11 24       	eor	r1, r1
     666:	8c 0f       	add	r24, r28
     668:	91 1d       	adc	r25, r1
     66a:	f7 01       	movw	r30, r14
     66c:	91 87       	std	Z+9, r25	; 0x09
     66e:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     670:	85 e6       	ldi	r24, 0x65	; 101
     672:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_controller_read>
     676:	8f 70       	andi	r24, 0x0F	; 15
     678:	f7 01       	movw	r30, r14
     67a:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     67c:	82 85       	ldd	r24, Z+10	; 0x0a
     67e:	88 23       	and	r24, r24
     680:	81 f0       	breq	.+32     	; 0x6a2 <CAN_receiveMessage+0x64>
     682:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     684:	0c 2f       	mov	r16, r28
     686:	10 e0       	ldi	r17, 0x00	; 0
     688:	86 e6       	ldi	r24, 0x66	; 102
     68a:	8c 0f       	add	r24, r28
     68c:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_controller_read>
     690:	f7 01       	movw	r30, r14
     692:	e0 0f       	add	r30, r16
     694:	f1 1f       	adc	r31, r17
     696:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     698:	cf 5f       	subi	r28, 0xFF	; 255
     69a:	f7 01       	movw	r30, r14
     69c:	82 85       	ldd	r24, Z+10	; 0x0a
     69e:	8c 13       	cpse	r24, r28
     6a0:	f1 cf       	rjmp	.-30     	; 0x684 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	08 95       	ret

000006ae <CAN_sendInputData>:

void CAN_sendInputData() {
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	2b 97       	sbiw	r28, 0x0b	; 11
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	9a 87       	std	Y+10, r25	; 0x0a
     6c8:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     6ca:	86 e0       	ldi	r24, 0x06	; 6
     6cc:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     6ce:	ef e4       	ldi	r30, 0x4F	; 79
     6d0:	f2 e0       	ldi	r31, 0x02	; 2
     6d2:	80 81       	ld	r24, Z
     6d4:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     6d6:	81 81       	ldd	r24, Z+1	; 0x01
     6d8:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     6da:	ed e4       	ldi	r30, 0x4D	; 77
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	80 81       	ld	r24, Z
     6e0:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     6e6:	e5 e4       	ldi	r30, 0x45	; 69
     6e8:	f2 e0       	ldi	r31, 0x02	; 2
     6ea:	80 81       	ld	r24, Z
     6ec:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     6ee:	81 81       	ldd	r24, Z+1	; 0x01
     6f0:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     6f2:	ce 01       	movw	r24, r28
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	0e 94 55 02 	call	0x4aa	; 0x4aa <CAN_transmit_message>
     6fa:	2b 96       	adiw	r28, 0x0b	; 11
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     70c:	cf 93       	push	r28
     70e:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	84 e0       	ldi	r24, 0x04	; 4
     714:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
	SPI_masterWrite(addr);
     71e:	8c 2f       	mov	r24, r28
     720:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     724:	0e 94 57 09 	call	0x12ae	; 0x12ae <SPI_masterRead>
     728:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
	
	return data;
}
     732:	8c 2f       	mov	r24, r28
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	d8 2f       	mov	r29, r24
     73e:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	84 e0       	ldi	r24, 0x04	; 4
     744:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
	SPI_masterWrite(addr);
     74e:	8d 2f       	mov	r24, r29
     750:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
	SPI_masterWrite(data);
     754:	8c 2f       	mov	r24, r28
     756:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	84 e0       	ldi	r24, 0x04	; 4
     75e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
	
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	d8 2f       	mov	r29, r24
     770:	16 2f       	mov	r17, r22
     772:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	84 e0       	ldi	r24, 0x04	; 4
     778:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     77c:	85 e0       	ldi	r24, 0x05	; 5
     77e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
		SPI_masterWrite(addr);
     782:	81 2f       	mov	r24, r17
     784:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
		SPI_masterWrite(mask);
     788:	8d 2f       	mov	r24, r29
     78a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
		SPI_masterWrite(data);
     78e:	8c 2f       	mov	r24, r28
     790:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	84 e0       	ldi	r24, 0x04	; 4
     798:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>

}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	08 95       	ret

000007a4 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	84 e0       	ldi	r24, 0x04	; 4
     7a8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
	printf("Before spi write");
     7ac:	83 e4       	ldi	r24, 0x43	; 67
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
	SPI_masterWrite(MCP_RESET);
     7b8:	80 ec       	ldi	r24, 0xC0	; 192
     7ba:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	84 e0       	ldi	r24, 0x04	; 4
     7c2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
}
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	08 95       	ret

000007cc <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     7cc:	cf 93       	push	r28
     7ce:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
	switch (buffer) {
     7d8:	c1 30       	cpi	r28, 0x01	; 1
     7da:	41 f0       	breq	.+16     	; 0x7ec <CAN_controller_RTS+0x20>
     7dc:	18 f0       	brcs	.+6      	; 0x7e4 <CAN_controller_RTS+0x18>
     7de:	c2 30       	cpi	r28, 0x02	; 2
     7e0:	49 f0       	breq	.+18     	; 0x7f4 <CAN_controller_RTS+0x28>
     7e2:	0b c0       	rjmp	.+22     	; 0x7fa <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     7e4:	81 e8       	ldi	r24, 0x81	; 129
     7e6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
			break;
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     7ec:	82 e8       	ldi	r24, 0x82	; 130
     7ee:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
			break;
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     7f4:	84 e8       	ldi	r24, 0x84	; 132
     7f6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <SPI_setChipSelect>
}
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     80c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     810:	8e e0       	ldi	r24, 0x0E	; 14
     812:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     816:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     818:	80 38       	cpi	r24, 0x80	; 128
     81a:	69 f0       	breq	.+26     	; 0x836 <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     81c:	1f 92       	push	r1
     81e:	8f 93       	push	r24
     820:	84 e5       	ldi	r24, 0x54	; 84
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
		return;
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	38 c0       	rjmp	.+112    	; 0x8a6 <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     836:	4c 2f       	mov	r20, r28
     838:	4c 60       	ori	r20, 0x0C	; 12
     83a:	6f e0       	ldi	r22, 0x0F	; 15
     83c:	8e ee       	ldi	r24, 0xEE	; 238
     83e:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	6b e2       	ldi	r22, 0x2B	; 43
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     84c:	40 e6       	ldi	r20, 0x60	; 96
     84e:	60 e6       	ldi	r22, 0x60	; 96
     850:	80 e6       	ldi	r24, 0x60	; 96
     852:	0e 94 b4 03 	call	0x768	; 0x768 <CAN_controller_bitModify>
     856:	2f ef       	ldi	r18, 0xFF	; 255
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	21 50       	subi	r18, 0x01	; 1
     85e:	80 40       	sbci	r24, 0x00	; 0
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	e1 f7       	brne	.-8      	; 0x85c <CAN_controller_setMode+0x56>
     864:	00 c0       	rjmp	.+0      	; 0x866 <CAN_controller_setMode+0x60>
     866:	00 c0       	rjmp	.+0      	; 0x868 <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     868:	8e e0       	ldi	r24, 0x0E	; 14
     86a:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     86e:	d8 2f       	mov	r29, r24
     870:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     872:	cd 17       	cp	r28, r29
     874:	61 f0       	breq	.+24     	; 0x88e <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     876:	1f 92       	push	r1
     878:	df 93       	push	r29
     87a:	8f e6       	ldi	r24, 0x6F	; 111
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     88e:	1f 92       	push	r1
     890:	df 93       	push	r29
     892:	8f e8       	ldi	r24, 0x8F	; 143
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	9f 93       	push	r25
     898:	8f 93       	push	r24
     89a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     8ac:	0e 94 4a 09 	call	0x1294	; 0x1294 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     8b0:	80 e4       	ldi	r24, 0x40	; 64
     8b2:	0e 94 03 04 	call	0x806	; 0x806 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     8b6:	8b b7       	in	r24, 0x3b	; 59
     8b8:	80 64       	ori	r24, 0x40	; 64
     8ba:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     8bc:	85 b7       	in	r24, 0x35	; 53
     8be:	82 60       	ori	r24, 0x02	; 2
     8c0:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     8c2:	85 b7       	in	r24, 0x35	; 53
     8c4:	8e 7f       	andi	r24, 0xFE	; 254
     8c6:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     8c8:	81 b3       	in	r24, 0x11	; 17
     8ca:	84 70       	andi	r24, 0x04	; 4
     8cc:	81 bb       	out	0x11, r24	; 17
     8ce:	2f ef       	ldi	r18, 0xFF	; 255
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	21 50       	subi	r18, 0x01	; 1
     8d6:	80 40       	sbci	r24, 0x00	; 0
     8d8:	90 40       	sbci	r25, 0x00	; 0
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <CAN_controller_init+0x28>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <CAN_controller_init+0x32>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     8e0:	8e e9       	ldi	r24, 0x9E	; 158
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     8ec:	8e e0       	ldi	r24, 0x0E	; 14
     8ee:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_controller_read>
	printf("Data: %i\n\r", status);
     8f2:	1f 92       	push	r1
     8f4:	8f 93       	push	r24
     8f6:	87 eb       	ldi	r24, 0xB7	; 183
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	9f 93       	push	r25
     8fc:	8f 93       	push	r24
     8fe:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>

}
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	08 95       	ret

00000910 <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     910:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <gameActive>
     914:	ed e5       	ldi	r30, 0x5D	; 93
     916:	f2 e0       	ldi	r31, 0x02	; 2
     918:	10 82       	st	Z, r1
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	12 82       	std	Z+2, r1	; 0x02
     91e:	13 82       	std	Z+3, r1	; 0x03
     920:	14 82       	std	Z+4, r1	; 0x04
     922:	08 95       	ret

00000924 <game_countdown>:
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	1f 92       	push	r1
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	4a e0       	ldi	r20, 0x0A	; 10
     934:	be 01       	movw	r22, r28
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__itoa_ncheck>
     942:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
     946:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
     94a:	09 e4       	ldi	r16, 0x49	; 73
     94c:	12 e0       	ldi	r17, 0x02	; 2
     94e:	f8 01       	movw	r30, r16
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	02 96       	adiw	r24, 0x02	; 2
     956:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     96a:	ff ef       	ldi	r31, 0xFF	; 255
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	8e e0       	ldi	r24, 0x0E	; 14
     970:	f1 50       	subi	r31, 0x01	; 1
     972:	20 40       	sbci	r18, 0x00	; 0
     974:	80 40       	sbci	r24, 0x00	; 0
     976:	e1 f7       	brne	.-8      	; 0x970 <game_countdown+0x4c>
     978:	00 c0       	rjmp	.+0      	; 0x97a <game_countdown+0x56>
     97a:	00 00       	nop
     97c:	4a e0       	ldi	r20, 0x0A	; 10
     97e:	be 01       	movw	r22, r28
     980:	6f 5f       	subi	r22, 0xFF	; 255
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__itoa_ncheck>
     98c:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
     990:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
     994:	f8 01       	movw	r30, r16
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	02 96       	adiw	r24, 0x02	; 2
     99c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     9b0:	ff ef       	ldi	r31, 0xFF	; 255
     9b2:	2f ef       	ldi	r18, 0xFF	; 255
     9b4:	8e e0       	ldi	r24, 0x0E	; 14
     9b6:	f1 50       	subi	r31, 0x01	; 1
     9b8:	20 40       	sbci	r18, 0x00	; 0
     9ba:	80 40       	sbci	r24, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <game_countdown+0x92>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <game_countdown+0x9c>
     9c0:	00 00       	nop
     9c2:	4a e0       	ldi	r20, 0x0A	; 10
     9c4:	be 01       	movw	r22, r28
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__itoa_ncheck>
     9d2:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
     9d6:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
     9da:	f8 01       	movw	r30, r16
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	02 96       	adiw	r24, 0x02	; 2
     9e2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
     9ee:	ce 01       	movw	r24, r28
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     9f6:	ff ef       	ldi	r31, 0xFF	; 255
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	8e e0       	ldi	r24, 0x0E	; 14
     9fc:	f1 50       	subi	r31, 0x01	; 1
     9fe:	20 40       	sbci	r18, 0x00	; 0
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <game_countdown+0xd8>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <game_countdown+0xe2>
     a06:	00 00       	nop
     a08:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
     a0c:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
     a10:	f8 01       	movw	r30, r16
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	02 96       	adiw	r24, 0x02	; 2
     a18:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
     a24:	82 ec       	ldi	r24, 0xC2	; 194
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     a2c:	ff ef       	ldi	r31, 0xFF	; 255
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	8e e0       	ldi	r24, 0x0E	; 14
     a32:	f1 50       	subi	r31, 0x01	; 1
     a34:	20 40       	sbci	r18, 0x00	; 0
     a36:	80 40       	sbci	r24, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <game_countdown+0x10e>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <game_countdown+0x118>
     a3c:	00 00       	nop
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <game_initialCANMessage>:
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	2b 97       	sbiw	r28, 0x0b	; 11
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	9a 87       	std	Y+10, r25	; 0x0a
     a64:	89 87       	std	Y+9, r24	; 0x09
     a66:	1b 86       	std	Y+11, r1	; 0x0b
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	0e 94 55 02 	call	0x4aa	; 0x4aa <CAN_transmit_message>
     a70:	2b 96       	adiw	r28, 0x0b	; 11
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <game_newgame>:
     a82:	f8 94       	cli
     a84:	0e 94 92 04 	call	0x924	; 0x924 <game_countdown>
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <gameActive>
     a8e:	e2 e6       	ldi	r30, 0x62	; 98
     a90:	f2 e0       	ldi	r31, 0x02	; 2
     a92:	8a e0       	ldi	r24, 0x0A	; 10
     a94:	80 83       	st	Z, r24
     a96:	12 82       	std	Z+2, r1	; 0x02
     a98:	83 e6       	ldi	r24, 0x63	; 99
     a9a:	81 83       	std	Z+1, r24	; 0x01
     a9c:	0e 94 25 05 	call	0xa4a	; 0xa4a <game_initialCANMessage>
     aa0:	78 94       	sei
     aa2:	08 95       	ret

00000aa4 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     aa4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <flag>
     aa8:	88 23       	and	r24, r24
     aaa:	d9 f0       	breq	.+54     	; 0xae2 <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     aac:	f8 94       	cli
		printf("Message received");
     aae:	85 ec       	ldi	r24, 0xC5	; 197
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
		flag=0;
     aba:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <flag>
		CAN_receiveMessage(&received_message);
     abe:	81 e5       	ldi	r24, 0x51	; 81
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 1f 03 	call	0x63e	; 0x63e <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     ac6:	0e 94 4c 02 	call	0x498	; 0x498 <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     aca:	a1 e5       	ldi	r26, 0x51	; 81
     acc:	b2 e0       	ldi	r27, 0x02	; 2
     ace:	8c 91       	ld	r24, X
     ad0:	e2 e6       	ldi	r30, 0x62	; 98
     ad2:	f2 e0       	ldi	r31, 0x02	; 2
     ad4:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	8c 91       	ld	r24, X
     ada:	82 83       	std	Z+2, r24	; 0x02
		sei();
     adc:	78 94       	sei
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	08 95       	ret

00000ae4 <game_updateOled>:
	}
	
}

void game_updateOled()
{
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <game_updateOled+0xe>
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <game_updateOled+0x10>
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
	//Print the game name
	oled_reset();
     af8:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
	oled_home();
     afc:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     b00:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <currentMenu>
     b04:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <currentMenu+0x1>
     b08:	02 96       	adiw	r24, 0x02	; 2
     b0a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
	oled_gotoLine(3);
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
	oled_print("Score: ");
     b16:	86 ed       	ldi	r24, 0xD6	; 214
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
	char score_string[2];
	itoa(gameData.score,score_string,10);
     b1e:	0f 2e       	mov	r0, r31
     b20:	f2 e6       	ldi	r31, 0x62	; 98
     b22:	ef 2e       	mov	r14, r31
     b24:	f2 e0       	ldi	r31, 0x02	; 2
     b26:	ff 2e       	mov	r15, r31
     b28:	f0 2d       	mov	r31, r0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b2a:	f7 01       	movw	r30, r14
     b2c:	80 81       	ld	r24, Z
     b2e:	4a e0       	ldi	r20, 0x0A	; 10
     b30:	be 01       	movw	r22, r28
     b32:	6f 5f       	subi	r22, 0xFF	; 255
     b34:	7f 4f       	sbci	r23, 0xFF	; 255
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__itoa_ncheck>
	oled_print(score_string);
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
	oled_gotoLine(5);
     b44:	85 e0       	ldi	r24, 0x05	; 5
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
	oled_print("Time: ");
     b4c:	8e ed       	ldi	r24, 0xDE	; 222
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     b54:	8e 01       	movw	r16, r28
     b56:	0d 5f       	subi	r16, 0xFD	; 253
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
     b5a:	f7 01       	movw	r30, r14
     b5c:	82 81       	ldd	r24, Z+2	; 0x02
     b5e:	4a e0       	ldi	r20, 0x0A	; 10
     b60:	b8 01       	movw	r22, r16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__itoa_ncheck>
	char time_string[2];
	itoa(gameData.playtime,time_string,10);
	printf(time_string);
     b68:	1f 93       	push	r17
     b6a:	0f 93       	push	r16
     b6c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
	oled_print(time_string);
     b70:	c8 01       	movw	r24, r16
     b72:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	08 95       	ret

00000b90 <game_play>:

void game_play(uint8_t gameID)
{
	if(gameActive==0)
     b90:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <gameActive>
     b94:	81 11       	cpse	r24, r1
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <game_play+0xc>
	{
		game_newgame();	
     b98:	0e 94 41 05 	call	0xa82	; 0xa82 <game_newgame>
	}
	if (buttons.right_button) {
     b9c:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <buttons+0x1>
     ba0:	88 23       	and	r24, r24
     ba2:	21 f0       	breq	.+8      	; 0xbac <game_play+0x1c>
		gameActive = 0;
     ba4:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <gameActive>
		menu_init();
     ba8:	0e 94 b6 07 	call	0xf6c	; 0xf6c <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     bac:	0e 94 57 03 	call	0x6ae	; 0x6ae <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     bb0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <game_recieveGameData>
	
	if (gameData.playtime==10) {
     bb4:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <gameData+0x2>
     bb8:	8a 30       	cpi	r24, 0x0A	; 10
     bba:	09 f0       	breq	.+2      	; 0xbbe <game_play+0x2e>
     bbc:	4a c0       	rjmp	.+148    	; 0xc52 <game_play+0xc2>
		cli();
     bbe:	f8 94       	cli
		oled_reset();
     bc0:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
		oled_home();
     bc4:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
		oled_gotoLine(3);
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
		oled_print("time up");
     bd0:	85 ee       	ldi	r24, 0xE5	; 229
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
		oled_gotoLine(4);
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
		oled_print("Maybe HS?");
     be0:	8d ee       	ldi	r24, 0xED	; 237
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	8f ef       	ldi	r24, 0xFF	; 255
     bec:	9c e2       	ldi	r25, 0x2C	; 44
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <game_play+0x5e>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <game_play+0x68>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <game_play+0x6a>
		_delay_ms(3000);
		gameActive=0;
     bfa:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <gameActive>
		
		menu_init();
     bfe:	0e 94 b6 07 	call	0xf6c	; 0xf6c <menu_init>
		
		for (int i = 0; i<5; i++) {
			if (gameData.score > highScores[i]) {
     c02:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <gameData>
     c06:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <highScores>
     c0a:	83 17       	cp	r24, r19
     c0c:	58 f0       	brcs	.+22     	; 0xc24 <game_play+0x94>
     c0e:	ee e5       	ldi	r30, 0x5E	; 94
     c10:	f2 e0       	ldi	r31, 0x02	; 2
		_delay_ms(3000);
		gameActive=0;
		
		menu_init();
		
		for (int i = 0; i<5; i++) {
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
			if (gameData.score > highScores[i]) {
     c16:	21 91       	ld	r18, Z+
     c18:	23 17       	cp	r18, r19
     c1a:	b0 f4       	brcc	.+44     	; 0xc48 <game_play+0xb8>
				for (int a = 4; a>i; a--) {
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	91 05       	cpc	r25, r1
     c20:	1c f0       	brlt	.+6      	; 0xc28 <game_play+0x98>
     c22:	0d c0       	rjmp	.+26     	; 0xc3e <game_play+0xae>
		_delay_ms(3000);
		gameActive=0;
		
		menu_init();
		
		for (int i = 0; i<5; i++) {
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	e1 e6       	ldi	r30, 0x61	; 97
     c2a:	f2 e0       	ldi	r31, 0x02	; 2
     c2c:	44 e0       	ldi	r20, 0x04	; 4
     c2e:	50 e0       	ldi	r21, 0x00	; 0
			if (gameData.score > highScores[i]) {
				for (int a = 4; a>i; a--) {
					highScores[a] = highScores[a-1];
     c30:	41 50       	subi	r20, 0x01	; 1
     c32:	51 09       	sbc	r21, r1
     c34:	22 91       	ld	r18, -Z
     c36:	21 83       	std	Z+1, r18	; 0x01
		
		menu_init();
		
		for (int i = 0; i<5; i++) {
			if (gameData.score > highScores[i]) {
				for (int a = 4; a>i; a--) {
     c38:	84 17       	cp	r24, r20
     c3a:	95 07       	cpc	r25, r21
     c3c:	cc f3       	brlt	.-14     	; 0xc30 <game_play+0xa0>
					highScores[a] = highScores[a-1];
				}
				highScores[i] = gameData.score;
     c3e:	fc 01       	movw	r30, r24
     c40:	e3 5a       	subi	r30, 0xA3	; 163
     c42:	fd 4f       	sbci	r31, 0xFD	; 253
     c44:	30 83       	st	Z, r19
				break;
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <game_play+0xc0>
		_delay_ms(3000);
		gameActive=0;
		
		menu_init();
		
		for (int i = 0; i<5; i++) {
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	85 30       	cpi	r24, 0x05	; 5
     c4c:	91 05       	cpc	r25, r1
     c4e:	19 f7       	brne	.-58     	; 0xc16 <game_play+0x86>
				}
				highScores[i] = gameData.score;
				break;
			}
		}
		sei();
     c50:	78 94       	sei
     c52:	08 95       	ret

00000c54 <game_displayHighscores>:
	}
	
}

void game_displayHighscores() {
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	00 d0       	rcall	.+0      	; 0xc62 <game_displayHighscores+0xe>
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	oled_reset();
     c66:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
	oled_home();
     c6a:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     c6e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <currentMenu>
     c72:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <currentMenu+0x1>
     c76:	02 96       	adiw	r24, 0x02	; 2
     c78:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
     c7c:	0f 2e       	mov	r0, r31
     c7e:	fd e5       	ldi	r31, 0x5D	; 93
     c80:	ef 2e       	mov	r14, r31
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	ff 2e       	mov	r15, r31
     c86:	f0 2d       	mov	r31, r0
	
	for (int i=0;i<5;i++)
     c88:	00 e0       	ldi	r16, 0x00	; 0
     c8a:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_gotoLine(3+i);
     c8c:	c8 01       	movw	r24, r16
     c8e:	03 96       	adiw	r24, 0x03	; 3
     c90:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
		oled_print("Score ");
     c94:	87 ef       	ldi	r24, 0xF7	; 247
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     c9c:	0f 5f       	subi	r16, 0xFF	; 255
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	4a e0       	ldi	r20, 0x0A	; 10
     ca2:	be 01       	movw	r22, r28
     ca4:	6f 5f       	subi	r22, 0xFF	; 255
     ca6:	7f 4f       	sbci	r23, 0xFF	; 255
     ca8:	c8 01       	movw	r24, r16
     caa:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__itoa_ncheck>
		oled_print(num);
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
		oled_print(": ");
     cb6:	82 ee       	ldi	r24, 0xE2	; 226
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
		itoa(highScores[i],num,10);
     cbe:	f7 01       	movw	r30, r14
     cc0:	81 91       	ld	r24, Z+
     cc2:	7f 01       	movw	r14, r30
     cc4:	4a e0       	ldi	r20, 0x0A	; 10
     cc6:	be 01       	movw	r22, r28
     cc8:	6f 5f       	subi	r22, 0xFF	; 255
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__itoa_ncheck>
		oled_print(num);
     cd2:	ce 01       	movw	r24, r28
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
void game_displayHighscores() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
     cda:	05 30       	cpi	r16, 0x05	; 5
     cdc:	11 05       	cpc	r17, r1
     cde:	b1 f6       	brne	.-84     	; 0xc8c <game_displayHighscores+0x38>
		oled_print(num);
		oled_print(": ");
		itoa(highScores[i],num,10);
		oled_print(num);
	}
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	08 95       	ret

00000cf2 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     cf2:	85 b7       	in	r24, 0x35	; 53
     cf4:	8f 7e       	andi	r24, 0xEF	; 239
     cf6:	85 bf       	out	0x35, r24	; 53
     cf8:	84 b7       	in	r24, 0x34	; 52
     cfa:	8f 7d       	andi	r24, 0xDF	; 223
     cfc:	84 bf       	out	0x34, r24	; 52
     cfe:	86 b7       	in	r24, 0x36	; 54
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	86 bf       	out	0x36, r24	; 54
     d04:	08 95       	ret

00000d06 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     d06:	88 b1       	in	r24, 0x08	; 8
     d08:	88 68       	ori	r24, 0x88	; 136
     d0a:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
     d0c:	85 b7       	in	r24, 0x35	; 53
     d0e:	80 62       	ori	r24, 0x20	; 32
     d10:	85 bf       	out	0x35, r24	; 53
     d12:	88 95       	sleep
     d14:	85 b7       	in	r24, 0x35	; 53
     d16:	8f 7d       	andi	r24, 0xDF	; 223
     d18:	85 bf       	out	0x35, r24	; 53
     d1a:	08 95       	ret

00000d1c <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     d22:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     d2c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <joystickOffsetY>
     d30:	08 95       	ret

00000d32 <joystick_readPosition>:
}
void joystick_readPosition() {
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     d44:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     d4c:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     d4e:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <joystickOffsetX>
     d52:	c6 17       	cp	r28, r22
     d54:	80 f4       	brcc	.+32     	; 0xd76 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	2c 2f       	mov	r18, r28
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	26 1b       	sub	r18, r22
     d5e:	37 0b       	sbc	r19, r23
     d60:	44 e6       	ldi	r20, 0x64	; 100
     d62:	42 9f       	mul	r20, r18
     d64:	c0 01       	movw	r24, r0
     d66:	43 9f       	mul	r20, r19
     d68:	90 0d       	add	r25, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodhi4>
     d70:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <joystick_pos>
     d74:	14 c0       	rjmp	.+40     	; 0xd9e <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     d76:	46 2f       	mov	r20, r22
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	2c 2f       	mov	r18, r28
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	24 1b       	sub	r18, r20
     d80:	35 0b       	sbc	r19, r21
     d82:	64 e6       	ldi	r22, 0x64	; 100
     d84:	62 9f       	mul	r22, r18
     d86:	c0 01       	movw	r24, r0
     d88:	63 9f       	mul	r22, r19
     d8a:	90 0d       	add	r25, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	6f ef       	ldi	r22, 0xFF	; 255
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	64 1b       	sub	r22, r20
     d94:	75 0b       	sbc	r23, r21
     d96:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodhi4>
     d9a:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
     d9e:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <joystickOffsetY>
     da2:	e2 17       	cp	r30, r18
     da4:	88 f4       	brcc	.+34     	; 0xdc8 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     da6:	62 2f       	mov	r22, r18
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	4e 2f       	mov	r20, r30
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	46 1b       	sub	r20, r22
     db0:	57 0b       	sbc	r21, r23
     db2:	24 e6       	ldi	r18, 0x64	; 100
     db4:	24 9f       	mul	r18, r20
     db6:	c0 01       	movw	r24, r0
     db8:	25 9f       	mul	r18, r21
     dba:	90 0d       	add	r25, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodhi4>
     dc2:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <joystick_pos+0x1>
     dc6:	13 c0       	rjmp	.+38     	; 0xdee <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	4e 2f       	mov	r20, r30
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	42 1b       	sub	r20, r18
     dd0:	53 0b       	sbc	r21, r19
     dd2:	64 e6       	ldi	r22, 0x64	; 100
     dd4:	64 9f       	mul	r22, r20
     dd6:	c0 01       	movw	r24, r0
     dd8:	65 9f       	mul	r22, r21
     dda:	90 0d       	add	r25, r0
     ddc:	11 24       	eor	r1, r1
     dde:	6f ef       	ldi	r22, 0xFF	; 255
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	62 1b       	sub	r22, r18
     de4:	73 0b       	sbc	r23, r19
     de6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodhi4>
     dea:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     dee:	c5 e4       	ldi	r28, 0x45	; 69
     df0:	d2 e0       	ldi	r29, 0x02	; 2
     df2:	68 81       	ld	r22, Y
     df4:	06 2e       	mov	r0, r22
     df6:	00 0c       	add	r0, r0
     df8:	77 0b       	sbc	r23, r23
     dfa:	88 0b       	sbc	r24, r24
     dfc:	99 0b       	sbc	r25, r25
     dfe:	0e 94 2f 0b 	call	0x165e	; 0x165e <__floatsisf>
     e02:	6b 01       	movw	r12, r22
     e04:	7c 01       	movw	r14, r24
     e06:	69 81       	ldd	r22, Y+1	; 0x01
     e08:	06 2e       	mov	r0, r22
     e0a:	00 0c       	add	r0, r0
     e0c:	77 0b       	sbc	r23, r23
     e0e:	88 0b       	sbc	r24, r24
     e10:	99 0b       	sbc	r25, r25
     e12:	0e 94 2f 0b 	call	0x165e	; 0x165e <__floatsisf>
     e16:	a7 01       	movw	r20, r14
     e18:	96 01       	movw	r18, r12
     e1a:	0e 94 26 0a 	call	0x144c	; 0x144c <atan2>
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	44 eb       	ldi	r20, 0xB4	; 180
     e24:	53 e4       	ldi	r21, 0x43	; 67
     e26:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__mulsf3>
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	5f e3       	ldi	r21, 0x3F	; 63
     e32:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__mulsf3>
     e36:	23 ec       	ldi	r18, 0xC3	; 195
     e38:	35 ef       	ldi	r19, 0xF5	; 245
     e3a:	48 e4       	ldi	r20, 0x48	; 72
     e3c:	50 e4       	ldi	r21, 0x40	; 64
     e3e:	0e 94 85 0a 	call	0x150a	; 0x150a <__divsf3>
     e42:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fixsfsi>
     e46:	7b 83       	std	Y+3, r23	; 0x03
     e48:	6a 83       	std	Y+2, r22	; 0x02
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	08 95       	ret

00000e58 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     e58:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     e5a:	80 81       	ld	r24, Z
     e5c:	94 e0       	ldi	r25, 0x04	; 4
     e5e:	98 0f       	add	r25, r24
     e60:	99 30       	cpi	r25, 0x09	; 9
     e62:	20 f4       	brcc	.+8      	; 0xe6c <joystick_getDirection+0x14>
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	9c 5f       	subi	r25, 0xFC	; 252
     e68:	99 30       	cpi	r25, 0x09	; 9
     e6a:	90 f0       	brcs	.+36     	; 0xe90 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     e6c:	85 30       	cpi	r24, 0x05	; 5
     e6e:	2c f0       	brlt	.+10     	; 0xe7a <joystick_getDirection+0x22>
     e70:	81 81       	ldd	r24, Z+1	; 0x01
     e72:	8f 5c       	subi	r24, 0xCF	; 207
     e74:	83 36       	cpi	r24, 0x63	; 99
     e76:	38 f4       	brcc	.+14     	; 0xe86 <joystick_getDirection+0x2e>
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     e7a:	8c 3f       	cpi	r24, 0xFC	; 252
     e7c:	24 f4       	brge	.+8      	; 0xe86 <joystick_getDirection+0x2e>
     e7e:	81 81       	ldd	r24, Z+1	; 0x01
     e80:	8f 5c       	subi	r24, 0xCF	; 207
     e82:	83 36       	cpi	r24, 0x63	; 99
     e84:	48 f0       	brcs	.+18     	; 0xe98 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     e86:	81 81       	ldd	r24, Z+1	; 0x01
     e88:	8c 3f       	cpi	r24, 0xFC	; 252
     e8a:	44 f0       	brlt	.+16     	; 0xe9c <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     e90:	84 e0       	ldi	r24, 0x04	; 4
     e92:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     e9c:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     e9e:	08 95       	ret

00000ea0 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     ea0:	0e 94 2c 07 	call	0xe58	; 0xe58 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     ea4:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <currentMenu+0x3>
     ea8:	94 30       	cpi	r25, 0x04	; 4
     eaa:	09 f0       	breq	.+2      	; 0xeae <navigateMenu+0xe>
     eac:	5c c0       	rjmp	.+184    	; 0xf66 <navigateMenu+0xc6>
			switch (dir) {
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	e1 f1       	breq	.+120    	; 0xf2a <navigateMenu+0x8a>
     eb2:	60 f1       	brcs	.+88     	; 0xf0c <navigateMenu+0x6c>
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	c9 f0       	breq	.+50     	; 0xeea <navigateMenu+0x4a>
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	09 f0       	breq	.+2      	; 0xebe <navigateMenu+0x1e>
     ebc:	54 c0       	rjmp	.+168    	; 0xf66 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     ebe:	e9 e4       	ldi	r30, 0x49	; 73
     ec0:	f2 e0       	ldi	r31, 0x02	; 2
     ec2:	92 81       	ldd	r25, Z+2	; 0x02
     ec4:	49 2f       	mov	r20, r25
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	01 90       	ld	r0, Z+
     eca:	f0 81       	ld	r31, Z
     ecc:	e0 2d       	mov	r30, r0
     ece:	20 a1       	ldd	r18, Z+32	; 0x20
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	21 50       	subi	r18, 0x01	; 1
     ed4:	31 09       	sbc	r19, r1
     ed6:	42 17       	cp	r20, r18
     ed8:	53 07       	cpc	r21, r19
     eda:	24 f4       	brge	.+8      	; 0xee4 <navigateMenu+0x44>
					currentMenu.childIndex++;
     edc:	9f 5f       	subi	r25, 0xFF	; 255
     ede:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <currentMenu+0x2>
     ee2:	41 c0       	rjmp	.+130    	; 0xf66 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
     ee4:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <currentMenu+0x2>
     ee8:	3e c0       	rjmp	.+124    	; 0xf66 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     eea:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <currentMenu+0x2>
     eee:	99 23       	and	r25, r25
     ef0:	21 f0       	breq	.+8      	; 0xefa <navigateMenu+0x5a>
					currentMenu.childIndex--;
     ef2:	91 50       	subi	r25, 0x01	; 1
     ef4:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <currentMenu+0x2>
     ef8:	36 c0       	rjmp	.+108    	; 0xf66 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     efa:	e9 e4       	ldi	r30, 0x49	; 73
     efc:	f2 e0       	ldi	r31, 0x02	; 2
     efe:	a0 81       	ld	r26, Z
     f00:	b1 81       	ldd	r27, Z+1	; 0x01
     f02:	90 96       	adiw	r26, 0x20	; 32
     f04:	9c 91       	ld	r25, X
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	92 83       	std	Z+2, r25	; 0x02
     f0a:	2d c0       	rjmp	.+90     	; 0xf66 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     f0c:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <currentMenu>
     f10:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <currentMenu+0x1>
     f14:	22 89       	ldd	r18, Z+18	; 0x12
     f16:	33 89       	ldd	r19, Z+19	; 0x13
     f18:	21 15       	cp	r18, r1
     f1a:	31 05       	cpc	r19, r1
     f1c:	21 f1       	breq	.+72     	; 0xf66 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     f1e:	e9 e4       	ldi	r30, 0x49	; 73
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	31 83       	std	Z+1, r19	; 0x01
     f24:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     f26:	12 82       	std	Z+2, r1	; 0x02
     f28:	1e c0       	rjmp	.+60     	; 0xf66 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
     f2a:	a9 e4       	ldi	r26, 0x49	; 73
     f2c:	b2 e0       	ldi	r27, 0x02	; 2
     f2e:	2d 91       	ld	r18, X+
     f30:	3c 91       	ld	r19, X
     f32:	11 97       	sbiw	r26, 0x01	; 1
     f34:	12 96       	adiw	r26, 0x02	; 2
     f36:	9c 91       	ld	r25, X
     f38:	e9 2f       	mov	r30, r25
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	3a 96       	adiw	r30, 0x0a	; 10
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	e2 0f       	add	r30, r18
     f44:	f3 1f       	adc	r31, r19
     f46:	01 90       	ld	r0, Z+
     f48:	f0 81       	ld	r31, Z
     f4a:	e0 2d       	mov	r30, r0
     f4c:	90 a1       	ldd	r25, Z+32	; 0x20
     f4e:	91 11       	cpse	r25, r1
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <navigateMenu+0xb8>
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	99 23       	and	r25, r25
     f56:	39 f0       	breq	.+14     	; 0xf66 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     f58:	a9 e4       	ldi	r26, 0x49	; 73
     f5a:	b2 e0       	ldi	r27, 0x02	; 2
     f5c:	11 96       	adiw	r26, 0x01	; 1
     f5e:	fc 93       	st	X, r31
     f60:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     f62:	12 96       	adiw	r26, 0x02	; 2
     f64:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     f66:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <currentMenu+0x3>
     f6a:	08 95       	ret

00000f6c <menu_init>:



MenuNode nodes[6];

void menu_init() {
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
     f74:	8a e0       	ldi	r24, 0x0A	; 10
     f76:	ee ef       	ldi	r30, 0xFE	; 254
     f78:	f1 e0       	ldi	r31, 0x01	; 1
     f7a:	a9 e6       	ldi	r26, 0x69	; 105
     f7c:	b2 e0       	ldi	r27, 0x02	; 2
     f7e:	01 90       	ld	r0, Z+
     f80:	0d 92       	st	X+, r0
     f82:	8a 95       	dec	r24
     f84:	e1 f7       	brne	.-8      	; 0xf7e <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
     f86:	8a e0       	ldi	r24, 0x0A	; 10
     f88:	e8 e0       	ldi	r30, 0x08	; 8
     f8a:	f2 e0       	ldi	r31, 0x02	; 2
     f8c:	aa e8       	ldi	r26, 0x8A	; 138
     f8e:	b2 e0       	ldi	r27, 0x02	; 2
     f90:	01 90       	ld	r0, Z+
     f92:	0d 92       	st	X+, r0
     f94:	8a 95       	dec	r24
     f96:	e1 f7       	brne	.-8      	; 0xf90 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
     f98:	8c e0       	ldi	r24, 0x0C	; 12
     f9a:	e2 e1       	ldi	r30, 0x12	; 18
     f9c:	f2 e0       	ldi	r31, 0x02	; 2
     f9e:	ab ea       	ldi	r26, 0xAB	; 171
     fa0:	b2 e0       	ldi	r27, 0x02	; 2
     fa2:	01 90       	ld	r0, Z+
     fa4:	0d 92       	st	X+, r0
     fa6:	8a 95       	dec	r24
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
     faa:	86 e0       	ldi	r24, 0x06	; 6
     fac:	ee e1       	ldi	r30, 0x1E	; 30
     fae:	f2 e0       	ldi	r31, 0x02	; 2
     fb0:	ac ec       	ldi	r26, 0xCC	; 204
     fb2:	b2 e0       	ldi	r27, 0x02	; 2
     fb4:	01 90       	ld	r0, Z+
     fb6:	0d 92       	st	X+, r0
     fb8:	8a 95       	dec	r24
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
     fbc:	87 e0       	ldi	r24, 0x07	; 7
     fbe:	e4 e2       	ldi	r30, 0x24	; 36
     fc0:	f2 e0       	ldi	r31, 0x02	; 2
     fc2:	ad ee       	ldi	r26, 0xED	; 237
     fc4:	b2 e0       	ldi	r27, 0x02	; 2
     fc6:	01 90       	ld	r0, Z+
     fc8:	0d 92       	st	X+, r0
     fca:	8a 95       	dec	r24
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
     fce:	87 e0       	ldi	r24, 0x07	; 7
     fd0:	eb e2       	ldi	r30, 0x2B	; 43
     fd2:	f2 e0       	ldi	r31, 0x02	; 2
     fd4:	ae e0       	ldi	r26, 0x0E	; 14
     fd6:	b3 e0       	ldi	r27, 0x03	; 3
     fd8:	01 90       	ld	r0, Z+
     fda:	0d 92       	st	X+, r0
     fdc:	8a 95       	dec	r24
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <menu_init+0x6c>
     fe0:	67 e6       	ldi	r22, 0x67	; 103
     fe2:	72 e0       	ldi	r23, 0x02	; 2
     fe4:	fb 01       	movw	r30, r22
	
	//Set games to be actions
	for(int i = 0;i<11; i++)
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=4){
			nodes[i].isAction=1;
     fea:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games to be actions
	for(int i = 0;i<11; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
     fec:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=4){
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	91 05       	cpc	r25, r1
     ff2:	14 f0       	brlt	.+4      	; 0xff8 <menu_init+0x8c>
			nodes[i].isAction=1;
     ff4:	21 83       	std	Z+1, r18	; 0x01
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <menu_init+0x8e>
		}
		else{
			nodes[i].isAction=0;
     ff8:	11 82       	std	Z+1, r1	; 0x01
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
	strcpy(nodes[5].name, "Game 2");
	
	//Set games to be actions
	for(int i = 0;i<11; i++)
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	b1 96       	adiw	r30, 0x21	; 33
     ffe:	8b 30       	cpi	r24, 0x0B	; 11
    1000:	91 05       	cpc	r25, r1
    1002:	a1 f7       	brne	.-24     	; 0xfec <menu_init+0x80>
		else{
			nodes[i].isAction=0;
		}
	}
	
	nodes[2].isAction=1;
    1004:	e7 e6       	ldi	r30, 0x67	; 103
    1006:	f2 e0       	ldi	r31, 0x02	; 2
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <nodes+0x43>
	
	
	nodes[0].numChildren = 3;
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <nodes+0x41>
	nodes[2].numChildren = 0;
    1018:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <nodes+0x62>
	nodes[3].numChildren = 0;
    101c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <nodes+0x83>
	nodes[4].numChildren = 0;
    1020:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <nodes+0xa4>
	nodes[5].numChildren = 0;
    1024:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <nodes+0xc5>
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    1028:	13 8a       	std	Z+19, r1	; 0x13
    102a:	12 8a       	std	Z+18, r1	; 0x12
    102c:	02 ed       	ldi	r16, 0xD2	; 210
    102e:	13 e0       	ldi	r17, 0x03	; 3
	nodes[2].numChildren = 0;
	nodes[3].numChildren = 0;
	nodes[4].numChildren = 0;
	nodes[5].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
    1030:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    1032:	51 e2       	ldi	r21, 0x21	; 33
    1034:	18 c0       	rjmp	.+48     	; 0x1066 <menu_init+0xfa>
    1036:	54 9f       	mul	r21, r20
    1038:	f0 01       	movw	r30, r0
    103a:	11 24       	eor	r1, r1
    103c:	e9 59       	subi	r30, 0x99	; 153
    103e:	fd 4f       	sbci	r31, 0xFD	; 253
    1040:	e9 93       	st	Y+, r30
    1042:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    1044:	b3 8b       	std	Z+19, r27	; 0x13
    1046:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    1048:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	90 96       	adiw	r26, 0x20	; 32
    1050:	8c 91       	ld	r24, X
    1052:	90 97       	sbiw	r26, 0x20	; 32
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	28 17       	cp	r18, r24
    1058:	39 07       	cpc	r19, r25
    105a:	6c f3       	brlt	.-38     	; 0x1036 <menu_init+0xca>
    105c:	6f 5d       	subi	r22, 0xDF	; 223
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
	nodes[5].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
    1060:	60 17       	cp	r22, r16
    1062:	71 07       	cpc	r23, r17
    1064:	59 f0       	breq	.+22     	; 0x107c <menu_init+0x110>
    1066:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1068:	90 96       	adiw	r26, 0x20	; 32
    106a:	8c 91       	ld	r24, X
    106c:	90 97       	sbiw	r26, 0x20	; 32
    106e:	88 23       	and	r24, r24
    1070:	a9 f3       	breq	.-22     	; 0x105c <menu_init+0xf0>
    1072:	eb 01       	movw	r28, r22
    1074:	64 96       	adiw	r28, 0x14	; 20
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	dd cf       	rjmp	.-70     	; 0x1036 <menu_init+0xca>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    107c:	85 e4       	ldi	r24, 0x45	; 69
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	0e 94 50 07 	call	0xea0	; 0xea0 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    1084:	e9 e4       	ldi	r30, 0x49	; 73
    1086:	f2 e0       	ldi	r31, 0x02	; 2
    1088:	87 e6       	ldi	r24, 0x67	; 103
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1090:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
	oled_reset();
    10a8:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
	oled_home();
    10ac:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    10b0:	c9 e4       	ldi	r28, 0x49	; 73
    10b2:	d2 e0       	ldi	r29, 0x02	; 2
    10b4:	88 81       	ld	r24, Y
    10b6:	99 81       	ldd	r25, Y+1	; 0x01
    10b8:	02 96       	adiw	r24, 0x02	; 2
    10ba:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    10be:	e8 81       	ld	r30, Y
    10c0:	f9 81       	ldd	r31, Y+1	; 0x01
    10c2:	80 a1       	ldd	r24, Z+32	; 0x20
    10c4:	88 23       	and	r24, r24
    10c6:	39 f1       	breq	.+78     	; 0x1116 <menu_printCurrentMenu+0x76>
    10c8:	c0 e0       	ldi	r28, 0x00	; 0
    10ca:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    10cc:	09 e4       	ldi	r16, 0x49	; 73
    10ce:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    10d0:	ce 01       	movw	r24, r28
    10d2:	02 96       	adiw	r24, 0x02	; 2
    10d4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    10d8:	d8 01       	movw	r26, r16
    10da:	8d 91       	ld	r24, X+
    10dc:	9c 91       	ld	r25, X
    10de:	fe 01       	movw	r30, r28
    10e0:	3a 96       	adiw	r30, 0x0a	; 10
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	e8 0f       	add	r30, r24
    10e8:	f9 1f       	adc	r31, r25
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	02 96       	adiw	r24, 0x02	; 2
    10f0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <oled_print>
		if (currentMenu.childIndex == i) {
    10f4:	f8 01       	movw	r30, r16
    10f6:	82 81       	ldd	r24, Z+2	; 0x02
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	8c 17       	cp	r24, r28
    10fc:	9d 07       	cpc	r25, r29
    10fe:	11 f4       	brne	.+4      	; 0x1104 <menu_printCurrentMenu+0x64>
			oled_print_arrow();
    1100:	0e 94 b2 08 	call	0x1164	; 0x1164 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1104:	21 96       	adiw	r28, 0x01	; 1
    1106:	d8 01       	movw	r26, r16
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	80 a1       	ldd	r24, Z+32	; 0x20
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	c8 17       	cp	r28, r24
    1112:	d9 07       	cpc	r29, r25
    1114:	ec f2       	brlt	.-70     	; 0x10d0 <menu_printCurrentMenu+0x30>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    1120:	80 55       	subi	r24, 0x50	; 80
    1122:	e0 e0       	ldi	r30, 0x00	; 0
    1124:	f0 e1       	ldi	r31, 0x10	; 16
    1126:	80 83       	st	Z, r24
    1128:	86 2f       	mov	r24, r22
    112a:	8f 70       	andi	r24, 0x0F	; 15
    112c:	80 83       	st	Z, r24
    112e:	62 95       	swap	r22
    1130:	6f 70       	andi	r22, 0x0F	; 15
    1132:	60 61       	ori	r22, 0x10	; 16
    1134:	60 83       	st	Z, r22
    1136:	08 95       	ret

00001138 <oled_reset>:
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	10 e0       	ldi	r17, 0x00	; 0
    1140:	c0 e0       	ldi	r28, 0x00	; 0
    1142:	d2 e1       	ldi	r29, 0x12	; 18
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	81 2f       	mov	r24, r17
    1148:	0e 94 90 08 	call	0x1120	; 0x1120 <oled_pos>
    114c:	80 e8       	ldi	r24, 0x80	; 128
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	18 82       	st	Y, r1
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	e9 f7       	brne	.-6      	; 0x1150 <oled_reset+0x18>
    1156:	1f 5f       	subi	r17, 0xFF	; 255
    1158:	18 30       	cpi	r17, 0x08	; 8
    115a:	a1 f7       	brne	.-24     	; 0x1144 <oled_reset+0xc>
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	08 95       	ret

00001164 <oled_print_arrow>:
    1164:	e0 e0       	ldi	r30, 0x00	; 0
    1166:	f2 e1       	ldi	r31, 0x12	; 18
    1168:	88 e1       	ldi	r24, 0x18	; 24
    116a:	80 83       	st	Z, r24
    116c:	9c e3       	ldi	r25, 0x3C	; 60
    116e:	90 83       	st	Z, r25
    1170:	9e e7       	ldi	r25, 0x7E	; 126
    1172:	90 83       	st	Z, r25
    1174:	80 83       	st	Z, r24
    1176:	80 83       	st	Z, r24
    1178:	08 95       	ret

0000117a <oled_home>:
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	0e 94 90 08 	call	0x1120	; 0x1120 <oled_pos>
    1182:	08 95       	ret

00001184 <oled_init>:
    1184:	e0 e0       	ldi	r30, 0x00	; 0
    1186:	f0 e1       	ldi	r31, 0x10	; 16
    1188:	8e ea       	ldi	r24, 0xAE	; 174
    118a:	80 83       	st	Z, r24
    118c:	81 ea       	ldi	r24, 0xA1	; 161
    118e:	80 83       	st	Z, r24
    1190:	8a ed       	ldi	r24, 0xDA	; 218
    1192:	80 83       	st	Z, r24
    1194:	82 e1       	ldi	r24, 0x12	; 18
    1196:	80 83       	st	Z, r24
    1198:	88 ec       	ldi	r24, 0xC8	; 200
    119a:	80 83       	st	Z, r24
    119c:	88 ea       	ldi	r24, 0xA8	; 168
    119e:	80 83       	st	Z, r24
    11a0:	8f e3       	ldi	r24, 0x3F	; 63
    11a2:	80 83       	st	Z, r24
    11a4:	85 ed       	ldi	r24, 0xD5	; 213
    11a6:	80 83       	st	Z, r24
    11a8:	80 e8       	ldi	r24, 0x80	; 128
    11aa:	80 83       	st	Z, r24
    11ac:	81 e8       	ldi	r24, 0x81	; 129
    11ae:	80 83       	st	Z, r24
    11b0:	80 e5       	ldi	r24, 0x50	; 80
    11b2:	80 83       	st	Z, r24
    11b4:	89 ed       	ldi	r24, 0xD9	; 217
    11b6:	80 83       	st	Z, r24
    11b8:	81 e2       	ldi	r24, 0x21	; 33
    11ba:	80 83       	st	Z, r24
    11bc:	80 e2       	ldi	r24, 0x20	; 32
    11be:	80 83       	st	Z, r24
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	80 83       	st	Z, r24
    11c4:	8b ed       	ldi	r24, 0xDB	; 219
    11c6:	80 83       	st	Z, r24
    11c8:	80 e3       	ldi	r24, 0x30	; 48
    11ca:	80 83       	st	Z, r24
    11cc:	8d ea       	ldi	r24, 0xAD	; 173
    11ce:	80 83       	st	Z, r24
    11d0:	10 82       	st	Z, r1
    11d2:	84 ea       	ldi	r24, 0xA4	; 164
    11d4:	80 83       	st	Z, r24
    11d6:	86 ea       	ldi	r24, 0xA6	; 166
    11d8:	80 83       	st	Z, r24
    11da:	8f ea       	ldi	r24, 0xAF	; 175
    11dc:	80 83       	st	Z, r24
    11de:	0e 94 9c 08 	call	0x1138	; 0x1138 <oled_reset>
    11e2:	0e 94 bd 08 	call	0x117a	; 0x117a <oled_home>
    11e6:	08 95       	ret

000011e8 <oled_gotoLine>:
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	0e 94 90 08 	call	0x1120	; 0x1120 <oled_pos>
    11ee:	08 95       	ret

000011f0 <oled_print>:

void oled_print(char* character){
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	dc 01       	movw	r26, r24
	while (*character != '\0')
    11f6:	8c 91       	ld	r24, X
    11f8:	81 11       	cpse	r24, r1
    11fa:	1a c0       	rjmp	.+52     	; 0x1230 <oled_print+0x40>
    11fc:	1e c0       	rjmp	.+60     	; 0x123a <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    11fe:	ec 91       	ld	r30, X
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	b0 97       	sbiw	r30, 0x20	; 32
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	e2 0f       	add	r30, r18
    1212:	f3 1f       	adc	r31, r19
    1214:	e2 56       	subi	r30, 0x62	; 98
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    121a:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    121c:	2f 5f       	subi	r18, 0xFF	; 255
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	28 30       	cpi	r18, 0x08	; 8
    1222:	31 05       	cpc	r19, r1
    1224:	61 f7       	brne	.-40     	; 0x11fe <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    1226:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    1228:	8c 91       	ld	r24, X
    122a:	81 11       	cpse	r24, r1
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <oled_print+0x44>
    122e:	05 c0       	rjmp	.+10     	; 0x123a <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1230:	c0 e0       	ldi	r28, 0x00	; 0
    1232:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	e2 cf       	rjmp	.-60     	; 0x11fe <oled_print+0xe>
		}
		character++;
	}
	
	
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "game.h"

	void setupInit(void){
	cli();
    1240:	f8 94       	cli
	xmem_init();
    1242:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xmem_init>
	USART_init(MYUBRR);
    1246:	8f e1       	ldi	r24, 0x1F	; 31
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <USART_init>
	adcInit();
    124e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
    1252:	0e 94 8e 06 	call	0xd1c	; 0xd1c <joystickInit>
	touchButton_init();
    1256:	0e 94 ce 09 	call	0x139c	; 0x139c <touchButton_init>
	oled_init();
    125a:	0e 94 c2 08 	call	0x1184	; 0x1184 <oled_init>
	timer_init();
    125e:	0e 94 c0 09 	call	0x1380	; 0x1380 <timer_init>
	sleep_init();
    1262:	0e 94 79 06 	call	0xcf2	; 0xcf2 <sleep_init>
	menu_init();
    1266:	0e 94 b6 07 	call	0xf6c	; 0xf6c <menu_init>
	CAN_controller_init();
    126a:	0e 94 56 04 	call	0x8ac	; 0x8ac <CAN_controller_init>
	//pwm_init(); uncommenting this breaks can on node 2.
	game_init();
    126e:	0e 94 88 04 	call	0x910	; 0x910 <game_init>
	sei();
    1272:	78 94       	sei
    1274:	08 95       	ret

00001276 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
    1280:	cf e4       	ldi	r28, 0x4F	; 79
    1282:	d2 e0       	ldi	r29, 0x02	; 2
    1284:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
    128c:	89 83       	std	Y+1, r24	; 0x01
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    1294:	87 b3       	in	r24, 0x17	; 23
    1296:	80 6a       	ori	r24, 0xA0	; 160
    1298:	87 bb       	out	0x17, r24	; 23
    129a:	bc 9a       	sbi	0x17, 4	; 23
    129c:	8d b1       	in	r24, 0x0d	; 13
    129e:	81 65       	ori	r24, 0x51	; 81
    12a0:	8d b9       	out	0x0d, r24	; 13
    12a2:	c4 9a       	sbi	0x18, 4	; 24
    12a4:	08 95       	ret

000012a6 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    12a6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    12a8:	77 9b       	sbis	0x0e, 7	; 14
    12aa:	fe cf       	rjmp	.-4      	; 0x12a8 <SPI_masterWrite+0x2>

}
    12ac:	08 95       	ret

000012ae <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    12ae:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    12b0:	77 9b       	sbis	0x0e, 7	; 14
    12b2:	fe cf       	rjmp	.-4      	; 0x12b0 <SPI_masterRead+0x2>
	return SPDR;
    12b4:	8f b1       	in	r24, 0x0f	; 15
}
    12b6:	08 95       	ret

000012b8 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    12b8:	66 23       	and	r22, r22
    12ba:	69 f0       	breq	.+26     	; 0x12d6 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    12bc:	48 b3       	in	r20, 0x18	; 24
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	b9 01       	movw	r22, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <SPI_setChipSelect+0x12>
    12c6:	66 0f       	add	r22, r22
    12c8:	77 1f       	adc	r23, r23
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <SPI_setChipSelect+0xe>
    12ce:	cb 01       	movw	r24, r22
    12d0:	84 2b       	or	r24, r20
    12d2:	88 bb       	out	0x18, r24	; 24
    12d4:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    12d6:	48 b3       	in	r20, 0x18	; 24
    12d8:	21 e0       	ldi	r18, 0x01	; 1
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	b9 01       	movw	r22, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <SPI_setChipSelect+0x2c>
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <SPI_setChipSelect+0x28>
    12e8:	cb 01       	movw	r24, r22
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	88 bb       	out	0x18, r24	; 24
    12f0:	08 95       	ret

000012f2 <__vector_14>:
#include "touchButton.h"
#include "menu.h"
#include "game.h"


ISR (TIMER1_COMPB_vect) {
    12f2:	1f 92       	push	r1
    12f4:	0f 92       	push	r0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	0f 92       	push	r0
    12fa:	11 24       	eor	r1, r1
    12fc:	2f 93       	push	r18
    12fe:	3f 93       	push	r19
    1300:	4f 93       	push	r20
    1302:	5f 93       	push	r21
    1304:	6f 93       	push	r22
    1306:	7f 93       	push	r23
    1308:	8f 93       	push	r24
    130a:	9f 93       	push	r25
    130c:	af 93       	push	r26
    130e:	bf 93       	push	r27
    1310:	ef 93       	push	r30
    1312:	ff 93       	push	r31
	cli();
    1314:	f8 94       	cli
	TCNT1 = 0x00;
    1316:	1d bc       	out	0x2d, r1	; 45
    1318:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    131a:	85 e4       	ldi	r24, 0x45	; 69
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	0e 94 99 06 	call	0xd32	; 0xd32 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    1322:	8f e4       	ldi	r24, 0x4F	; 79
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	0e 94 3b 09 	call	0x1276	; 0x1276 <slider_readPosition>
	touchButton_readButtons(&buttons);
    132a:	8d e4       	ldi	r24, 0x4D	; 77
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <touchButton_readButtons>
	if(gameActive==0){
    1332:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <gameActive>
    1336:	81 11       	cpse	r24, r1
    1338:	0f c0       	rjmp	.+30     	; 0x1358 <__vector_14+0x66>
		printf("Game not active");
    133a:	82 e3       	ldi	r24, 0x32	; 50
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	9f 93       	push	r25
    1340:	8f 93       	push	r24
    1342:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf>
		navigateMenu(&joystick_pos);
    1346:	85 e4       	ldi	r24, 0x45	; 69
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	0e 94 50 07 	call	0xea0	; 0xea0 <navigateMenu>
		menu_printCurrentMenu();
    134e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <menu_printCurrentMenu>
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <__vector_14+0x6a>
	}
	else{
		game_updateOled();
    1358:	0e 94 72 05 	call	0xae4	; 0xae4 <game_updateOled>
	}
	sei();
    135c:	78 94       	sei
}
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1380:	89 b7       	in	r24, 0x39	; 57
    1382:	80 62       	ori	r24, 0x20	; 32
    1384:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1386:	1d bc       	out	0x2d, r1	; 45
    1388:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    138a:	80 e3       	ldi	r24, 0x30	; 48
    138c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    138e:	85 e0       	ldi	r24, 0x05	; 5
    1390:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1392:	80 ee       	ldi	r24, 0xE0	; 224
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	99 bd       	out	0x29, r25	; 41
    1398:	88 bd       	out	0x28, r24	; 40
    139a:	08 95       	ret

0000139c <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    139c:	36 b3       	in	r19, 0x16	; 22
    139e:	26 b3       	in	r18, 0x16	; 22
    13a0:	47 b3       	in	r20, 0x17	; 23
    13a2:	32 70       	andi	r19, 0x02	; 2
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	bc 01       	movw	r22, r24
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <touchButton_init+0x14>
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	3a 95       	dec	r19
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <touchButton_init+0x10>
    13b4:	24 70       	andi	r18, 0x04	; 4
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <touchButton_init+0x20>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	2a 95       	dec	r18
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <touchButton_init+0x1c>
    13c0:	86 2b       	or	r24, r22
    13c2:	97 2b       	or	r25, r23
    13c4:	80 95       	com	r24
    13c6:	90 95       	com	r25
    13c8:	84 23       	and	r24, r20
    13ca:	87 bb       	out	0x17, r24	; 23
    13cc:	08 95       	ret

000013ce <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    13ce:	86 b3       	in	r24, 0x16	; 22
    13d0:	ed e4       	ldi	r30, 0x4D	; 77
    13d2:	f2 e0       	ldi	r31, 0x02	; 2
    13d4:	86 95       	lsr	r24
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    13da:	86 b3       	in	r24, 0x16	; 22
    13dc:	82 fb       	bst	r24, 2
    13de:	88 27       	eor	r24, r24
    13e0:	80 f9       	bld	r24, 0
    13e2:	81 83       	std	Z+1, r24	; 0x01
    13e4:	08 95       	ret

000013e6 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    13e6:	5d 9b       	sbis	0x0b, 5	; 11
    13e8:	fe cf       	rjmp	.-4      	; 0x13e6 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    13ea:	8c b9       	out	0x0c, r24	; 12
    13ec:	08 95       	ret

000013ee <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    13ee:	5f 9b       	sbis	0x0b, 7	; 11
    13f0:	fe cf       	rjmp	.-4      	; 0x13ee <USART_receiveChar>
		;
	
	return UDR0;
    13f2:	8c b1       	in	r24, 0x0c	; 12
    13f4:	08 95       	ret

000013f6 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    13f6:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    13f8:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    13fa:	88 e1       	ldi	r24, 0x18	; 24
    13fc:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    13fe:	8e e8       	ldi	r24, 0x8E	; 142
    1400:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1402:	67 ef       	ldi	r22, 0xF7	; 247
    1404:	79 e0       	ldi	r23, 0x09	; 9
    1406:	83 ef       	ldi	r24, 0xF3	; 243
    1408:	99 e0       	ldi	r25, 0x09	; 9
    140a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <fdevopen>
    140e:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <uart+0x1>
    1412:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <uart>
    1416:	08 95       	ret

00001418 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1418:	85 b7       	in	r24, 0x35	; 53
    141a:	80 68       	ori	r24, 0x80	; 128
    141c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    141e:	80 b7       	in	r24, 0x30	; 48
    1420:	88 60       	ori	r24, 0x08	; 8
    1422:	80 bf       	out	0x30, r24	; 48
    1424:	08 95       	ret
    1426:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__fp_pscA>
    142a:	60 f0       	brcs	.+24     	; 0x1444 <xmem_init+0x2c>
    142c:	80 e8       	ldi	r24, 0x80	; 128
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	09 f4       	brne	.+2      	; 0x1434 <xmem_init+0x1c>
    1432:	9e ef       	ldi	r25, 0xFE	; 254
    1434:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fp_pscB>
    1438:	28 f0       	brcs	.+10     	; 0x1444 <xmem_init+0x2c>
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	51 e0       	ldi	r21, 0x01	; 1
    143e:	71 f4       	brne	.+28     	; 0x145c <atan2+0x10>
    1440:	5e ef       	ldi	r21, 0xFE	; 254
    1442:	0c c0       	rjmp	.+24     	; 0x145c <atan2+0x10>
    1444:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_nan>
    1448:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__fp_zero>

0000144c <atan2>:
    144c:	e9 2f       	mov	r30, r25
    144e:	e0 78       	andi	r30, 0x80	; 128
    1450:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fp_split3>
    1454:	40 f3       	brcs	.-48     	; 0x1426 <xmem_init+0xe>
    1456:	09 2e       	mov	r0, r25
    1458:	05 2a       	or	r0, r21
    145a:	b1 f3       	breq	.-20     	; 0x1448 <xmem_init+0x30>
    145c:	26 17       	cp	r18, r22
    145e:	37 07       	cpc	r19, r23
    1460:	48 07       	cpc	r20, r24
    1462:	59 07       	cpc	r21, r25
    1464:	38 f0       	brcs	.+14     	; 0x1474 <atan2+0x28>
    1466:	0e 2e       	mov	r0, r30
    1468:	07 f8       	bld	r0, 7
    146a:	e0 25       	eor	r30, r0
    146c:	69 f0       	breq	.+26     	; 0x1488 <atan2+0x3c>
    146e:	e0 25       	eor	r30, r0
    1470:	e0 64       	ori	r30, 0x40	; 64
    1472:	0a c0       	rjmp	.+20     	; 0x1488 <atan2+0x3c>
    1474:	ef 63       	ori	r30, 0x3F	; 63
    1476:	07 f8       	bld	r0, 7
    1478:	00 94       	com	r0
    147a:	07 fa       	bst	r0, 7
    147c:	db 01       	movw	r26, r22
    147e:	b9 01       	movw	r22, r18
    1480:	9d 01       	movw	r18, r26
    1482:	dc 01       	movw	r26, r24
    1484:	ca 01       	movw	r24, r20
    1486:	ad 01       	movw	r20, r26
    1488:	ef 93       	push	r30
    148a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__divsf3_pse>
    148e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__fp_round>
    1492:	0e 94 56 0a 	call	0x14ac	; 0x14ac <atan>
    1496:	5f 91       	pop	r21
    1498:	55 23       	and	r21, r21
    149a:	39 f0       	breq	.+14     	; 0x14aa <atan2+0x5e>
    149c:	2b ed       	ldi	r18, 0xDB	; 219
    149e:	3f e0       	ldi	r19, 0x0F	; 15
    14a0:	49 e4       	ldi	r20, 0x49	; 73
    14a2:	50 fd       	sbrc	r21, 0
    14a4:	49 ec       	ldi	r20, 0xC9	; 201
    14a6:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__addsf3>
    14aa:	08 95       	ret

000014ac <atan>:
    14ac:	df 93       	push	r29
    14ae:	dd 27       	eor	r29, r29
    14b0:	b9 2f       	mov	r27, r25
    14b2:	bf 77       	andi	r27, 0x7F	; 127
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	16 16       	cp	r1, r22
    14ba:	17 06       	cpc	r1, r23
    14bc:	48 07       	cpc	r20, r24
    14be:	5b 07       	cpc	r21, r27
    14c0:	18 f4       	brcc	.+6      	; 0x14c8 <atan+0x1c>
    14c2:	d9 2f       	mov	r29, r25
    14c4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <inverse>
    14c8:	9f 93       	push	r25
    14ca:	8f 93       	push	r24
    14cc:	7f 93       	push	r23
    14ce:	6f 93       	push	r22
    14d0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <square>
    14d4:	e0 e7       	ldi	r30, 0x70	; 112
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__fp_powser>
    14dc:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__fp_round>
    14e0:	2f 91       	pop	r18
    14e2:	3f 91       	pop	r19
    14e4:	4f 91       	pop	r20
    14e6:	5f 91       	pop	r21
    14e8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__mulsf3x>
    14ec:	dd 23       	and	r29, r29
    14ee:	51 f0       	breq	.+20     	; 0x1504 <atan+0x58>
    14f0:	90 58       	subi	r25, 0x80	; 128
    14f2:	a2 ea       	ldi	r26, 0xA2	; 162
    14f4:	2a ed       	ldi	r18, 0xDA	; 218
    14f6:	3f e0       	ldi	r19, 0x0F	; 15
    14f8:	49 ec       	ldi	r20, 0xC9	; 201
    14fa:	5f e3       	ldi	r21, 0x3F	; 63
    14fc:	d0 78       	andi	r29, 0x80	; 128
    14fe:	5d 27       	eor	r21, r29
    1500:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3x>
    1504:	df 91       	pop	r29
    1506:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_round>

0000150a <__divsf3>:
    150a:	0e 94 99 0a 	call	0x1532	; 0x1532 <__divsf3x>
    150e:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_round>
    1512:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fp_pscB>
    1516:	58 f0       	brcs	.+22     	; 0x152e <__divsf3+0x24>
    1518:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__fp_pscA>
    151c:	40 f0       	brcs	.+16     	; 0x152e <__divsf3+0x24>
    151e:	29 f4       	brne	.+10     	; 0x152a <__divsf3+0x20>
    1520:	5f 3f       	cpi	r21, 0xFF	; 255
    1522:	29 f0       	breq	.+10     	; 0x152e <__divsf3+0x24>
    1524:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_inf>
    1528:	51 11       	cpse	r21, r1
    152a:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_szero>
    152e:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_nan>

00001532 <__divsf3x>:
    1532:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fp_split3>
    1536:	68 f3       	brcs	.-38     	; 0x1512 <__divsf3+0x8>

00001538 <__divsf3_pse>:
    1538:	99 23       	and	r25, r25
    153a:	b1 f3       	breq	.-20     	; 0x1528 <__divsf3+0x1e>
    153c:	55 23       	and	r21, r21
    153e:	91 f3       	breq	.-28     	; 0x1524 <__divsf3+0x1a>
    1540:	95 1b       	sub	r25, r21
    1542:	55 0b       	sbc	r21, r21
    1544:	bb 27       	eor	r27, r27
    1546:	aa 27       	eor	r26, r26
    1548:	62 17       	cp	r22, r18
    154a:	73 07       	cpc	r23, r19
    154c:	84 07       	cpc	r24, r20
    154e:	38 f0       	brcs	.+14     	; 0x155e <__divsf3_pse+0x26>
    1550:	9f 5f       	subi	r25, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	44 1f       	adc	r20, r20
    155a:	aa 1f       	adc	r26, r26
    155c:	a9 f3       	breq	.-22     	; 0x1548 <__divsf3_pse+0x10>
    155e:	35 d0       	rcall	.+106    	; 0x15ca <__divsf3_pse+0x92>
    1560:	0e 2e       	mov	r0, r30
    1562:	3a f0       	brmi	.+14     	; 0x1572 <__divsf3_pse+0x3a>
    1564:	e0 e8       	ldi	r30, 0x80	; 128
    1566:	32 d0       	rcall	.+100    	; 0x15cc <__divsf3_pse+0x94>
    1568:	91 50       	subi	r25, 0x01	; 1
    156a:	50 40       	sbci	r21, 0x00	; 0
    156c:	e6 95       	lsr	r30
    156e:	00 1c       	adc	r0, r0
    1570:	ca f7       	brpl	.-14     	; 0x1564 <__divsf3_pse+0x2c>
    1572:	2b d0       	rcall	.+86     	; 0x15ca <__divsf3_pse+0x92>
    1574:	fe 2f       	mov	r31, r30
    1576:	29 d0       	rcall	.+82     	; 0x15ca <__divsf3_pse+0x92>
    1578:	66 0f       	add	r22, r22
    157a:	77 1f       	adc	r23, r23
    157c:	88 1f       	adc	r24, r24
    157e:	bb 1f       	adc	r27, r27
    1580:	26 17       	cp	r18, r22
    1582:	37 07       	cpc	r19, r23
    1584:	48 07       	cpc	r20, r24
    1586:	ab 07       	cpc	r26, r27
    1588:	b0 e8       	ldi	r27, 0x80	; 128
    158a:	09 f0       	breq	.+2      	; 0x158e <__divsf3_pse+0x56>
    158c:	bb 0b       	sbc	r27, r27
    158e:	80 2d       	mov	r24, r0
    1590:	bf 01       	movw	r22, r30
    1592:	ff 27       	eor	r31, r31
    1594:	93 58       	subi	r25, 0x83	; 131
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	3a f0       	brmi	.+14     	; 0x15a8 <__divsf3_pse+0x70>
    159a:	9e 3f       	cpi	r25, 0xFE	; 254
    159c:	51 05       	cpc	r21, r1
    159e:	78 f0       	brcs	.+30     	; 0x15be <__divsf3_pse+0x86>
    15a0:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_inf>
    15a4:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_szero>
    15a8:	5f 3f       	cpi	r21, 0xFF	; 255
    15aa:	e4 f3       	brlt	.-8      	; 0x15a4 <__divsf3_pse+0x6c>
    15ac:	98 3e       	cpi	r25, 0xE8	; 232
    15ae:	d4 f3       	brlt	.-12     	; 0x15a4 <__divsf3_pse+0x6c>
    15b0:	86 95       	lsr	r24
    15b2:	77 95       	ror	r23
    15b4:	67 95       	ror	r22
    15b6:	b7 95       	ror	r27
    15b8:	f7 95       	ror	r31
    15ba:	9f 5f       	subi	r25, 0xFF	; 255
    15bc:	c9 f7       	brne	.-14     	; 0x15b0 <__divsf3_pse+0x78>
    15be:	88 0f       	add	r24, r24
    15c0:	91 1d       	adc	r25, r1
    15c2:	96 95       	lsr	r25
    15c4:	87 95       	ror	r24
    15c6:	97 f9       	bld	r25, 7
    15c8:	08 95       	ret
    15ca:	e1 e0       	ldi	r30, 0x01	; 1
    15cc:	66 0f       	add	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	bb 1f       	adc	r27, r27
    15d4:	62 17       	cp	r22, r18
    15d6:	73 07       	cpc	r23, r19
    15d8:	84 07       	cpc	r24, r20
    15da:	ba 07       	cpc	r27, r26
    15dc:	20 f0       	brcs	.+8      	; 0x15e6 <__divsf3_pse+0xae>
    15de:	62 1b       	sub	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	84 0b       	sbc	r24, r20
    15e4:	ba 0b       	sbc	r27, r26
    15e6:	ee 1f       	adc	r30, r30
    15e8:	88 f7       	brcc	.-30     	; 0x15cc <__divsf3_pse+0x94>
    15ea:	e0 95       	com	r30
    15ec:	08 95       	ret

000015ee <__fixsfsi>:
    15ee:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__fixunssfsi>
    15f2:	68 94       	set
    15f4:	b1 11       	cpse	r27, r1
    15f6:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_szero>
    15fa:	08 95       	ret

000015fc <__fixunssfsi>:
    15fc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fp_splitA>
    1600:	88 f0       	brcs	.+34     	; 0x1624 <__fixunssfsi+0x28>
    1602:	9f 57       	subi	r25, 0x7F	; 127
    1604:	98 f0       	brcs	.+38     	; 0x162c <__fixunssfsi+0x30>
    1606:	b9 2f       	mov	r27, r25
    1608:	99 27       	eor	r25, r25
    160a:	b7 51       	subi	r27, 0x17	; 23
    160c:	b0 f0       	brcs	.+44     	; 0x163a <__fixunssfsi+0x3e>
    160e:	e1 f0       	breq	.+56     	; 0x1648 <__fixunssfsi+0x4c>
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	1a f0       	brmi	.+6      	; 0x1620 <__fixunssfsi+0x24>
    161a:	ba 95       	dec	r27
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__fixunssfsi+0x14>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <__fixunssfsi+0x4c>
    1620:	b1 30       	cpi	r27, 0x01	; 1
    1622:	91 f0       	breq	.+36     	; 0x1648 <__fixunssfsi+0x4c>
    1624:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fp_zero>
    1628:	b1 e0       	ldi	r27, 0x01	; 1
    162a:	08 95       	ret
    162c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__fp_zero>
    1630:	67 2f       	mov	r22, r23
    1632:	78 2f       	mov	r23, r24
    1634:	88 27       	eor	r24, r24
    1636:	b8 5f       	subi	r27, 0xF8	; 248
    1638:	39 f0       	breq	.+14     	; 0x1648 <__fixunssfsi+0x4c>
    163a:	b9 3f       	cpi	r27, 0xF9	; 249
    163c:	cc f3       	brlt	.-14     	; 0x1630 <__fixunssfsi+0x34>
    163e:	86 95       	lsr	r24
    1640:	77 95       	ror	r23
    1642:	67 95       	ror	r22
    1644:	b3 95       	inc	r27
    1646:	d9 f7       	brne	.-10     	; 0x163e <__fixunssfsi+0x42>
    1648:	3e f4       	brtc	.+14     	; 0x1658 <__fixunssfsi+0x5c>
    164a:	90 95       	com	r25
    164c:	80 95       	com	r24
    164e:	70 95       	com	r23
    1650:	61 95       	neg	r22
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	8f 4f       	sbci	r24, 0xFF	; 255
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	08 95       	ret

0000165a <__floatunsisf>:
    165a:	e8 94       	clt
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <__floatsisf+0x12>

0000165e <__floatsisf>:
    165e:	97 fb       	bst	r25, 7
    1660:	3e f4       	brtc	.+14     	; 0x1670 <__floatsisf+0x12>
    1662:	90 95       	com	r25
    1664:	80 95       	com	r24
    1666:	70 95       	com	r23
    1668:	61 95       	neg	r22
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	8f 4f       	sbci	r24, 0xFF	; 255
    166e:	9f 4f       	sbci	r25, 0xFF	; 255
    1670:	99 23       	and	r25, r25
    1672:	a9 f0       	breq	.+42     	; 0x169e <__floatsisf+0x40>
    1674:	f9 2f       	mov	r31, r25
    1676:	96 e9       	ldi	r25, 0x96	; 150
    1678:	bb 27       	eor	r27, r27
    167a:	93 95       	inc	r25
    167c:	f6 95       	lsr	r31
    167e:	87 95       	ror	r24
    1680:	77 95       	ror	r23
    1682:	67 95       	ror	r22
    1684:	b7 95       	ror	r27
    1686:	f1 11       	cpse	r31, r1
    1688:	f8 cf       	rjmp	.-16     	; 0x167a <__floatsisf+0x1c>
    168a:	fa f4       	brpl	.+62     	; 0x16ca <__floatsisf+0x6c>
    168c:	bb 0f       	add	r27, r27
    168e:	11 f4       	brne	.+4      	; 0x1694 <__floatsisf+0x36>
    1690:	60 ff       	sbrs	r22, 0
    1692:	1b c0       	rjmp	.+54     	; 0x16ca <__floatsisf+0x6c>
    1694:	6f 5f       	subi	r22, 0xFF	; 255
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	8f 4f       	sbci	r24, 0xFF	; 255
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	16 c0       	rjmp	.+44     	; 0x16ca <__floatsisf+0x6c>
    169e:	88 23       	and	r24, r24
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <__floatsisf+0x48>
    16a2:	96 e9       	ldi	r25, 0x96	; 150
    16a4:	11 c0       	rjmp	.+34     	; 0x16c8 <__floatsisf+0x6a>
    16a6:	77 23       	and	r23, r23
    16a8:	21 f0       	breq	.+8      	; 0x16b2 <__floatsisf+0x54>
    16aa:	9e e8       	ldi	r25, 0x8E	; 142
    16ac:	87 2f       	mov	r24, r23
    16ae:	76 2f       	mov	r23, r22
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <__floatsisf+0x5e>
    16b2:	66 23       	and	r22, r22
    16b4:	71 f0       	breq	.+28     	; 0x16d2 <__floatsisf+0x74>
    16b6:	96 e8       	ldi	r25, 0x86	; 134
    16b8:	86 2f       	mov	r24, r22
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	2a f0       	brmi	.+10     	; 0x16ca <__floatsisf+0x6c>
    16c0:	9a 95       	dec	r25
    16c2:	66 0f       	add	r22, r22
    16c4:	77 1f       	adc	r23, r23
    16c6:	88 1f       	adc	r24, r24
    16c8:	da f7       	brpl	.-10     	; 0x16c0 <__floatsisf+0x62>
    16ca:	88 0f       	add	r24, r24
    16cc:	96 95       	lsr	r25
    16ce:	87 95       	ror	r24
    16d0:	97 f9       	bld	r25, 7
    16d2:	08 95       	ret

000016d4 <__fp_inf>:
    16d4:	97 f9       	bld	r25, 7
    16d6:	9f 67       	ori	r25, 0x7F	; 127
    16d8:	80 e8       	ldi	r24, 0x80	; 128
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	08 95       	ret

000016e0 <__fp_nan>:
    16e0:	9f ef       	ldi	r25, 0xFF	; 255
    16e2:	80 ec       	ldi	r24, 0xC0	; 192
    16e4:	08 95       	ret

000016e6 <__fp_powser>:
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	1f 93       	push	r17
    16ec:	0f 93       	push	r16
    16ee:	ff 92       	push	r15
    16f0:	ef 92       	push	r14
    16f2:	df 92       	push	r13
    16f4:	7b 01       	movw	r14, r22
    16f6:	8c 01       	movw	r16, r24
    16f8:	68 94       	set
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <__fp_powser+0x22>
    16fc:	da 2e       	mov	r13, r26
    16fe:	ef 01       	movw	r28, r30
    1700:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__mulsf3x>
    1704:	fe 01       	movw	r30, r28
    1706:	e8 94       	clt
    1708:	a5 91       	lpm	r26, Z+
    170a:	25 91       	lpm	r18, Z+
    170c:	35 91       	lpm	r19, Z+
    170e:	45 91       	lpm	r20, Z+
    1710:	55 91       	lpm	r21, Z+
    1712:	a6 f3       	brts	.-24     	; 0x16fc <__fp_powser+0x16>
    1714:	ef 01       	movw	r28, r30
    1716:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3x>
    171a:	fe 01       	movw	r30, r28
    171c:	97 01       	movw	r18, r14
    171e:	a8 01       	movw	r20, r16
    1720:	da 94       	dec	r13
    1722:	69 f7       	brne	.-38     	; 0x16fe <__fp_powser+0x18>
    1724:	df 90       	pop	r13
    1726:	ef 90       	pop	r14
    1728:	ff 90       	pop	r15
    172a:	0f 91       	pop	r16
    172c:	1f 91       	pop	r17
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <__fp_pscA>:
    1734:	00 24       	eor	r0, r0
    1736:	0a 94       	dec	r0
    1738:	16 16       	cp	r1, r22
    173a:	17 06       	cpc	r1, r23
    173c:	18 06       	cpc	r1, r24
    173e:	09 06       	cpc	r0, r25
    1740:	08 95       	ret

00001742 <__fp_pscB>:
    1742:	00 24       	eor	r0, r0
    1744:	0a 94       	dec	r0
    1746:	12 16       	cp	r1, r18
    1748:	13 06       	cpc	r1, r19
    174a:	14 06       	cpc	r1, r20
    174c:	05 06       	cpc	r0, r21
    174e:	08 95       	ret

00001750 <__fp_round>:
    1750:	09 2e       	mov	r0, r25
    1752:	03 94       	inc	r0
    1754:	00 0c       	add	r0, r0
    1756:	11 f4       	brne	.+4      	; 0x175c <__fp_round+0xc>
    1758:	88 23       	and	r24, r24
    175a:	52 f0       	brmi	.+20     	; 0x1770 <__fp_round+0x20>
    175c:	bb 0f       	add	r27, r27
    175e:	40 f4       	brcc	.+16     	; 0x1770 <__fp_round+0x20>
    1760:	bf 2b       	or	r27, r31
    1762:	11 f4       	brne	.+4      	; 0x1768 <__fp_round+0x18>
    1764:	60 ff       	sbrs	r22, 0
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <__fp_round+0x20>
    1768:	6f 5f       	subi	r22, 0xFF	; 255
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	8f 4f       	sbci	r24, 0xFF	; 255
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	08 95       	ret

00001772 <__fp_split3>:
    1772:	57 fd       	sbrc	r21, 7
    1774:	90 58       	subi	r25, 0x80	; 128
    1776:	44 0f       	add	r20, r20
    1778:	55 1f       	adc	r21, r21
    177a:	59 f0       	breq	.+22     	; 0x1792 <__fp_splitA+0x10>
    177c:	5f 3f       	cpi	r21, 0xFF	; 255
    177e:	71 f0       	breq	.+28     	; 0x179c <__fp_splitA+0x1a>
    1780:	47 95       	ror	r20

00001782 <__fp_splitA>:
    1782:	88 0f       	add	r24, r24
    1784:	97 fb       	bst	r25, 7
    1786:	99 1f       	adc	r25, r25
    1788:	61 f0       	breq	.+24     	; 0x17a2 <__fp_splitA+0x20>
    178a:	9f 3f       	cpi	r25, 0xFF	; 255
    178c:	79 f0       	breq	.+30     	; 0x17ac <__fp_splitA+0x2a>
    178e:	87 95       	ror	r24
    1790:	08 95       	ret
    1792:	12 16       	cp	r1, r18
    1794:	13 06       	cpc	r1, r19
    1796:	14 06       	cpc	r1, r20
    1798:	55 1f       	adc	r21, r21
    179a:	f2 cf       	rjmp	.-28     	; 0x1780 <__fp_split3+0xe>
    179c:	46 95       	lsr	r20
    179e:	f1 df       	rcall	.-30     	; 0x1782 <__fp_splitA>
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <__fp_splitA+0x30>
    17a2:	16 16       	cp	r1, r22
    17a4:	17 06       	cpc	r1, r23
    17a6:	18 06       	cpc	r1, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	f1 cf       	rjmp	.-30     	; 0x178e <__fp_splitA+0xc>
    17ac:	86 95       	lsr	r24
    17ae:	71 05       	cpc	r23, r1
    17b0:	61 05       	cpc	r22, r1
    17b2:	08 94       	sec
    17b4:	08 95       	ret

000017b6 <__fp_zero>:
    17b6:	e8 94       	clt

000017b8 <__fp_szero>:
    17b8:	bb 27       	eor	r27, r27
    17ba:	66 27       	eor	r22, r22
    17bc:	77 27       	eor	r23, r23
    17be:	cb 01       	movw	r24, r22
    17c0:	97 f9       	bld	r25, 7
    17c2:	08 95       	ret

000017c4 <inverse>:
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	80 e8       	ldi	r24, 0x80	; 128
    17ce:	9f e3       	ldi	r25, 0x3F	; 63
    17d0:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__divsf3>

000017d4 <__mulsf3>:
    17d4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__mulsf3x>
    17d8:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_round>
    17dc:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__fp_pscA>
    17e0:	38 f0       	brcs	.+14     	; 0x17f0 <__mulsf3+0x1c>
    17e2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fp_pscB>
    17e6:	20 f0       	brcs	.+8      	; 0x17f0 <__mulsf3+0x1c>
    17e8:	95 23       	and	r25, r21
    17ea:	11 f0       	breq	.+4      	; 0x17f0 <__mulsf3+0x1c>
    17ec:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_inf>
    17f0:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_nan>
    17f4:	11 24       	eor	r1, r1
    17f6:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_szero>

000017fa <__mulsf3x>:
    17fa:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fp_split3>
    17fe:	70 f3       	brcs	.-36     	; 0x17dc <__mulsf3+0x8>

00001800 <__mulsf3_pse>:
    1800:	95 9f       	mul	r25, r21
    1802:	c1 f3       	breq	.-16     	; 0x17f4 <__mulsf3+0x20>
    1804:	95 0f       	add	r25, r21
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	55 1f       	adc	r21, r21
    180a:	62 9f       	mul	r22, r18
    180c:	f0 01       	movw	r30, r0
    180e:	72 9f       	mul	r23, r18
    1810:	bb 27       	eor	r27, r27
    1812:	f0 0d       	add	r31, r0
    1814:	b1 1d       	adc	r27, r1
    1816:	63 9f       	mul	r22, r19
    1818:	aa 27       	eor	r26, r26
    181a:	f0 0d       	add	r31, r0
    181c:	b1 1d       	adc	r27, r1
    181e:	aa 1f       	adc	r26, r26
    1820:	64 9f       	mul	r22, r20
    1822:	66 27       	eor	r22, r22
    1824:	b0 0d       	add	r27, r0
    1826:	a1 1d       	adc	r26, r1
    1828:	66 1f       	adc	r22, r22
    182a:	82 9f       	mul	r24, r18
    182c:	22 27       	eor	r18, r18
    182e:	b0 0d       	add	r27, r0
    1830:	a1 1d       	adc	r26, r1
    1832:	62 1f       	adc	r22, r18
    1834:	73 9f       	mul	r23, r19
    1836:	b0 0d       	add	r27, r0
    1838:	a1 1d       	adc	r26, r1
    183a:	62 1f       	adc	r22, r18
    183c:	83 9f       	mul	r24, r19
    183e:	a0 0d       	add	r26, r0
    1840:	61 1d       	adc	r22, r1
    1842:	22 1f       	adc	r18, r18
    1844:	74 9f       	mul	r23, r20
    1846:	33 27       	eor	r19, r19
    1848:	a0 0d       	add	r26, r0
    184a:	61 1d       	adc	r22, r1
    184c:	23 1f       	adc	r18, r19
    184e:	84 9f       	mul	r24, r20
    1850:	60 0d       	add	r22, r0
    1852:	21 1d       	adc	r18, r1
    1854:	82 2f       	mov	r24, r18
    1856:	76 2f       	mov	r23, r22
    1858:	6a 2f       	mov	r22, r26
    185a:	11 24       	eor	r1, r1
    185c:	9f 57       	subi	r25, 0x7F	; 127
    185e:	50 40       	sbci	r21, 0x00	; 0
    1860:	9a f0       	brmi	.+38     	; 0x1888 <__mulsf3_pse+0x88>
    1862:	f1 f0       	breq	.+60     	; 0x18a0 <__mulsf3_pse+0xa0>
    1864:	88 23       	and	r24, r24
    1866:	4a f0       	brmi	.+18     	; 0x187a <__mulsf3_pse+0x7a>
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	bb 1f       	adc	r27, r27
    186e:	66 1f       	adc	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	91 50       	subi	r25, 0x01	; 1
    1876:	50 40       	sbci	r21, 0x00	; 0
    1878:	a9 f7       	brne	.-22     	; 0x1864 <__mulsf3_pse+0x64>
    187a:	9e 3f       	cpi	r25, 0xFE	; 254
    187c:	51 05       	cpc	r21, r1
    187e:	80 f0       	brcs	.+32     	; 0x18a0 <__mulsf3_pse+0xa0>
    1880:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_inf>
    1884:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_szero>
    1888:	5f 3f       	cpi	r21, 0xFF	; 255
    188a:	e4 f3       	brlt	.-8      	; 0x1884 <__mulsf3_pse+0x84>
    188c:	98 3e       	cpi	r25, 0xE8	; 232
    188e:	d4 f3       	brlt	.-12     	; 0x1884 <__mulsf3_pse+0x84>
    1890:	86 95       	lsr	r24
    1892:	77 95       	ror	r23
    1894:	67 95       	ror	r22
    1896:	b7 95       	ror	r27
    1898:	f7 95       	ror	r31
    189a:	e7 95       	ror	r30
    189c:	9f 5f       	subi	r25, 0xFF	; 255
    189e:	c1 f7       	brne	.-16     	; 0x1890 <__mulsf3_pse+0x90>
    18a0:	fe 2b       	or	r31, r30
    18a2:	88 0f       	add	r24, r24
    18a4:	91 1d       	adc	r25, r1
    18a6:	96 95       	lsr	r25
    18a8:	87 95       	ror	r24
    18aa:	97 f9       	bld	r25, 7
    18ac:	08 95       	ret

000018ae <square>:
    18ae:	9b 01       	movw	r18, r22
    18b0:	ac 01       	movw	r20, r24
    18b2:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__mulsf3>

000018b6 <__subsf3>:
    18b6:	50 58       	subi	r21, 0x80	; 128

000018b8 <__addsf3>:
    18b8:	bb 27       	eor	r27, r27
    18ba:	aa 27       	eor	r26, r26
    18bc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3x>
    18c0:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_round>
    18c4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__fp_pscA>
    18c8:	38 f0       	brcs	.+14     	; 0x18d8 <__addsf3+0x20>
    18ca:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fp_pscB>
    18ce:	20 f0       	brcs	.+8      	; 0x18d8 <__addsf3+0x20>
    18d0:	39 f4       	brne	.+14     	; 0x18e0 <__addsf3+0x28>
    18d2:	9f 3f       	cpi	r25, 0xFF	; 255
    18d4:	19 f4       	brne	.+6      	; 0x18dc <__addsf3+0x24>
    18d6:	26 f4       	brtc	.+8      	; 0x18e0 <__addsf3+0x28>
    18d8:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_nan>
    18dc:	0e f4       	brtc	.+2      	; 0x18e0 <__addsf3+0x28>
    18de:	e0 95       	com	r30
    18e0:	e7 fb       	bst	r30, 7
    18e2:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_inf>

000018e6 <__addsf3x>:
    18e6:	e9 2f       	mov	r30, r25
    18e8:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fp_split3>
    18ec:	58 f3       	brcs	.-42     	; 0x18c4 <__addsf3+0xc>
    18ee:	ba 17       	cp	r27, r26
    18f0:	62 07       	cpc	r22, r18
    18f2:	73 07       	cpc	r23, r19
    18f4:	84 07       	cpc	r24, r20
    18f6:	95 07       	cpc	r25, r21
    18f8:	20 f0       	brcs	.+8      	; 0x1902 <__addsf3x+0x1c>
    18fa:	79 f4       	brne	.+30     	; 0x191a <__addsf3x+0x34>
    18fc:	a6 f5       	brtc	.+104    	; 0x1966 <__addsf3x+0x80>
    18fe:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__fp_zero>
    1902:	0e f4       	brtc	.+2      	; 0x1906 <__addsf3x+0x20>
    1904:	e0 95       	com	r30
    1906:	0b 2e       	mov	r0, r27
    1908:	ba 2f       	mov	r27, r26
    190a:	a0 2d       	mov	r26, r0
    190c:	0b 01       	movw	r0, r22
    190e:	b9 01       	movw	r22, r18
    1910:	90 01       	movw	r18, r0
    1912:	0c 01       	movw	r0, r24
    1914:	ca 01       	movw	r24, r20
    1916:	a0 01       	movw	r20, r0
    1918:	11 24       	eor	r1, r1
    191a:	ff 27       	eor	r31, r31
    191c:	59 1b       	sub	r21, r25
    191e:	99 f0       	breq	.+38     	; 0x1946 <__addsf3x+0x60>
    1920:	59 3f       	cpi	r21, 0xF9	; 249
    1922:	50 f4       	brcc	.+20     	; 0x1938 <__addsf3x+0x52>
    1924:	50 3e       	cpi	r21, 0xE0	; 224
    1926:	68 f1       	brcs	.+90     	; 0x1982 <__addsf3x+0x9c>
    1928:	1a 16       	cp	r1, r26
    192a:	f0 40       	sbci	r31, 0x00	; 0
    192c:	a2 2f       	mov	r26, r18
    192e:	23 2f       	mov	r18, r19
    1930:	34 2f       	mov	r19, r20
    1932:	44 27       	eor	r20, r20
    1934:	58 5f       	subi	r21, 0xF8	; 248
    1936:	f3 cf       	rjmp	.-26     	; 0x191e <__addsf3x+0x38>
    1938:	46 95       	lsr	r20
    193a:	37 95       	ror	r19
    193c:	27 95       	ror	r18
    193e:	a7 95       	ror	r26
    1940:	f0 40       	sbci	r31, 0x00	; 0
    1942:	53 95       	inc	r21
    1944:	c9 f7       	brne	.-14     	; 0x1938 <__addsf3x+0x52>
    1946:	7e f4       	brtc	.+30     	; 0x1966 <__addsf3x+0x80>
    1948:	1f 16       	cp	r1, r31
    194a:	ba 0b       	sbc	r27, r26
    194c:	62 0b       	sbc	r22, r18
    194e:	73 0b       	sbc	r23, r19
    1950:	84 0b       	sbc	r24, r20
    1952:	ba f0       	brmi	.+46     	; 0x1982 <__addsf3x+0x9c>
    1954:	91 50       	subi	r25, 0x01	; 1
    1956:	a1 f0       	breq	.+40     	; 0x1980 <__addsf3x+0x9a>
    1958:	ff 0f       	add	r31, r31
    195a:	bb 1f       	adc	r27, r27
    195c:	66 1f       	adc	r22, r22
    195e:	77 1f       	adc	r23, r23
    1960:	88 1f       	adc	r24, r24
    1962:	c2 f7       	brpl	.-16     	; 0x1954 <__addsf3x+0x6e>
    1964:	0e c0       	rjmp	.+28     	; 0x1982 <__addsf3x+0x9c>
    1966:	ba 0f       	add	r27, r26
    1968:	62 1f       	adc	r22, r18
    196a:	73 1f       	adc	r23, r19
    196c:	84 1f       	adc	r24, r20
    196e:	48 f4       	brcc	.+18     	; 0x1982 <__addsf3x+0x9c>
    1970:	87 95       	ror	r24
    1972:	77 95       	ror	r23
    1974:	67 95       	ror	r22
    1976:	b7 95       	ror	r27
    1978:	f7 95       	ror	r31
    197a:	9e 3f       	cpi	r25, 0xFE	; 254
    197c:	08 f0       	brcs	.+2      	; 0x1980 <__addsf3x+0x9a>
    197e:	b0 cf       	rjmp	.-160    	; 0x18e0 <__addsf3+0x28>
    1980:	93 95       	inc	r25
    1982:	88 0f       	add	r24, r24
    1984:	08 f0       	brcs	.+2      	; 0x1988 <__addsf3x+0xa2>
    1986:	99 27       	eor	r25, r25
    1988:	ee 0f       	add	r30, r30
    198a:	97 95       	ror	r25
    198c:	87 95       	ror	r24
    198e:	08 95       	ret

00001990 <__divmodhi4>:
    1990:	97 fb       	bst	r25, 7
    1992:	07 2e       	mov	r0, r23
    1994:	16 f4       	brtc	.+4      	; 0x199a <__divmodhi4+0xa>
    1996:	00 94       	com	r0
    1998:	07 d0       	rcall	.+14     	; 0x19a8 <__divmodhi4_neg1>
    199a:	77 fd       	sbrc	r23, 7
    199c:	09 d0       	rcall	.+18     	; 0x19b0 <__divmodhi4_neg2>
    199e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__udivmodhi4>
    19a2:	07 fc       	sbrc	r0, 7
    19a4:	05 d0       	rcall	.+10     	; 0x19b0 <__divmodhi4_neg2>
    19a6:	3e f4       	brtc	.+14     	; 0x19b6 <__divmodhi4_exit>

000019a8 <__divmodhi4_neg1>:
    19a8:	90 95       	com	r25
    19aa:	81 95       	neg	r24
    19ac:	9f 4f       	sbci	r25, 0xFF	; 255
    19ae:	08 95       	ret

000019b0 <__divmodhi4_neg2>:
    19b0:	70 95       	com	r23
    19b2:	61 95       	neg	r22
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255

000019b6 <__divmodhi4_exit>:
    19b6:	08 95       	ret

000019b8 <__udivmodhi4>:
    19b8:	aa 1b       	sub	r26, r26
    19ba:	bb 1b       	sub	r27, r27
    19bc:	51 e1       	ldi	r21, 0x11	; 17
    19be:	07 c0       	rjmp	.+14     	; 0x19ce <__udivmodhi4_ep>

000019c0 <__udivmodhi4_loop>:
    19c0:	aa 1f       	adc	r26, r26
    19c2:	bb 1f       	adc	r27, r27
    19c4:	a6 17       	cp	r26, r22
    19c6:	b7 07       	cpc	r27, r23
    19c8:	10 f0       	brcs	.+4      	; 0x19ce <__udivmodhi4_ep>
    19ca:	a6 1b       	sub	r26, r22
    19cc:	b7 0b       	sbc	r27, r23

000019ce <__udivmodhi4_ep>:
    19ce:	88 1f       	adc	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	5a 95       	dec	r21
    19d4:	a9 f7       	brne	.-22     	; 0x19c0 <__udivmodhi4_loop>
    19d6:	80 95       	com	r24
    19d8:	90 95       	com	r25
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	08 95       	ret

000019e0 <__itoa_ncheck>:
    19e0:	bb 27       	eor	r27, r27
    19e2:	4a 30       	cpi	r20, 0x0A	; 10
    19e4:	31 f4       	brne	.+12     	; 0x19f2 <__itoa_ncheck+0x12>
    19e6:	99 23       	and	r25, r25
    19e8:	22 f4       	brpl	.+8      	; 0x19f2 <__itoa_ncheck+0x12>
    19ea:	bd e2       	ldi	r27, 0x2D	; 45
    19ec:	90 95       	com	r25
    19ee:	81 95       	neg	r24
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__utoa_common>

000019f6 <__utoa_ncheck>:
    19f6:	bb 27       	eor	r27, r27

000019f8 <__utoa_common>:
    19f8:	fb 01       	movw	r30, r22
    19fa:	55 27       	eor	r21, r21
    19fc:	aa 27       	eor	r26, r26
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	aa 1f       	adc	r26, r26
    1a04:	a4 17       	cp	r26, r20
    1a06:	10 f0       	brcs	.+4      	; 0x1a0c <__utoa_common+0x14>
    1a08:	a4 1b       	sub	r26, r20
    1a0a:	83 95       	inc	r24
    1a0c:	50 51       	subi	r21, 0x10	; 16
    1a0e:	b9 f7       	brne	.-18     	; 0x19fe <__utoa_common+0x6>
    1a10:	a0 5d       	subi	r26, 0xD0	; 208
    1a12:	aa 33       	cpi	r26, 0x3A	; 58
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <__utoa_common+0x20>
    1a16:	a9 5d       	subi	r26, 0xD9	; 217
    1a18:	a1 93       	st	Z+, r26
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	79 f7       	brne	.-34     	; 0x19fc <__utoa_common+0x4>
    1a1e:	b1 11       	cpse	r27, r1
    1a20:	b1 93       	st	Z+, r27
    1a22:	11 92       	st	Z+, r1
    1a24:	cb 01       	movw	r24, r22
    1a26:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <strrev>

00001a2a <fdevopen>:
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	31 f4       	brne	.+12     	; 0x1a42 <fdevopen+0x18>
    1a36:	61 15       	cp	r22, r1
    1a38:	71 05       	cpc	r23, r1
    1a3a:	19 f4       	brne	.+6      	; 0x1a42 <fdevopen+0x18>
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	3a c0       	rjmp	.+116    	; 0x1ab6 <fdevopen+0x8c>
    1a42:	8b 01       	movw	r16, r22
    1a44:	ec 01       	movw	r28, r24
    1a46:	6e e0       	ldi	r22, 0x0E	; 14
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <calloc>
    1a52:	fc 01       	movw	r30, r24
    1a54:	89 2b       	or	r24, r25
    1a56:	91 f3       	breq	.-28     	; 0x1a3c <fdevopen+0x12>
    1a58:	80 e8       	ldi	r24, 0x80	; 128
    1a5a:	83 83       	std	Z+3, r24	; 0x03
    1a5c:	01 15       	cp	r16, r1
    1a5e:	11 05       	cpc	r17, r1
    1a60:	71 f0       	breq	.+28     	; 0x1a7e <fdevopen+0x54>
    1a62:	13 87       	std	Z+11, r17	; 0x0b
    1a64:	02 87       	std	Z+10, r16	; 0x0a
    1a66:	81 e8       	ldi	r24, 0x81	; 129
    1a68:	83 83       	std	Z+3, r24	; 0x03
    1a6a:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <__iob>
    1a6e:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <__iob+0x1>
    1a72:	89 2b       	or	r24, r25
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <fdevopen+0x54>
    1a76:	f0 93 30 03 	sts	0x0330, r31	; 0x800330 <__iob+0x1>
    1a7a:	e0 93 2f 03 	sts	0x032F, r30	; 0x80032f <__iob>
    1a7e:	20 97       	sbiw	r28, 0x00	; 0
    1a80:	c9 f0       	breq	.+50     	; 0x1ab4 <fdevopen+0x8a>
    1a82:	d1 87       	std	Z+9, r29	; 0x09
    1a84:	c0 87       	std	Z+8, r28	; 0x08
    1a86:	83 81       	ldd	r24, Z+3	; 0x03
    1a88:	82 60       	ori	r24, 0x02	; 2
    1a8a:	83 83       	std	Z+3, r24	; 0x03
    1a8c:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <__iob+0x2>
    1a90:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <__iob+0x3>
    1a94:	89 2b       	or	r24, r25
    1a96:	71 f4       	brne	.+28     	; 0x1ab4 <fdevopen+0x8a>
    1a98:	f0 93 32 03 	sts	0x0332, r31	; 0x800332 <__iob+0x3>
    1a9c:	e0 93 31 03 	sts	0x0331, r30	; 0x800331 <__iob+0x2>
    1aa0:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <__iob+0x4>
    1aa4:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <__iob+0x5>
    1aa8:	89 2b       	or	r24, r25
    1aaa:	21 f4       	brne	.+8      	; 0x1ab4 <fdevopen+0x8a>
    1aac:	f0 93 34 03 	sts	0x0334, r31	; 0x800334 <__iob+0x5>
    1ab0:	e0 93 33 03 	sts	0x0333, r30	; 0x800333 <__iob+0x4>
    1ab4:	cf 01       	movw	r24, r30
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	08 95       	ret

00001ac0 <printf>:
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e6 e6       	ldi	r30, 0x66	; 102
    1ac6:	fd e0       	ldi	r31, 0x0D	; 13
    1ac8:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__prologue_saves__+0x20>
    1acc:	ae 01       	movw	r20, r28
    1ace:	4b 5f       	subi	r20, 0xFB	; 251
    1ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	61 91       	ld	r22, Z+
    1ad6:	71 91       	ld	r23, Z+
    1ad8:	af 01       	movw	r20, r30
    1ada:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <__iob+0x2>
    1ade:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <__iob+0x3>
    1ae2:	0e 94 76 0d 	call	0x1aec	; 0x1aec <vfprintf>
    1ae6:	e2 e0       	ldi	r30, 0x02	; 2
    1ae8:	0c 94 87 11 	jmp	0x230e	; 0x230e <__epilogue_restores__+0x20>

00001aec <vfprintf>:
    1aec:	ab e0       	ldi	r26, 0x0B	; 11
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ec e7       	ldi	r30, 0x7C	; 124
    1af2:	fd e0       	ldi	r31, 0x0D	; 13
    1af4:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__>
    1af8:	6c 01       	movw	r12, r24
    1afa:	7b 01       	movw	r14, r22
    1afc:	8a 01       	movw	r16, r20
    1afe:	fc 01       	movw	r30, r24
    1b00:	17 82       	std	Z+7, r1	; 0x07
    1b02:	16 82       	std	Z+6, r1	; 0x06
    1b04:	83 81       	ldd	r24, Z+3	; 0x03
    1b06:	81 ff       	sbrs	r24, 1
    1b08:	cc c1       	rjmp	.+920    	; 0x1ea2 <vfprintf+0x3b6>
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	3c 01       	movw	r6, r24
    1b10:	f6 01       	movw	r30, r12
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	f7 01       	movw	r30, r14
    1b16:	93 fd       	sbrc	r25, 3
    1b18:	85 91       	lpm	r24, Z+
    1b1a:	93 ff       	sbrs	r25, 3
    1b1c:	81 91       	ld	r24, Z+
    1b1e:	7f 01       	movw	r14, r30
    1b20:	88 23       	and	r24, r24
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <vfprintf+0x3a>
    1b24:	ba c1       	rjmp	.+884    	; 0x1e9a <vfprintf+0x3ae>
    1b26:	85 32       	cpi	r24, 0x25	; 37
    1b28:	39 f4       	brne	.+14     	; 0x1b38 <vfprintf+0x4c>
    1b2a:	93 fd       	sbrc	r25, 3
    1b2c:	85 91       	lpm	r24, Z+
    1b2e:	93 ff       	sbrs	r25, 3
    1b30:	81 91       	ld	r24, Z+
    1b32:	7f 01       	movw	r14, r30
    1b34:	85 32       	cpi	r24, 0x25	; 37
    1b36:	29 f4       	brne	.+10     	; 0x1b42 <vfprintf+0x56>
    1b38:	b6 01       	movw	r22, r12
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1b40:	e7 cf       	rjmp	.-50     	; 0x1b10 <vfprintf+0x24>
    1b42:	91 2c       	mov	r9, r1
    1b44:	21 2c       	mov	r2, r1
    1b46:	31 2c       	mov	r3, r1
    1b48:	ff e1       	ldi	r31, 0x1F	; 31
    1b4a:	f3 15       	cp	r31, r3
    1b4c:	d8 f0       	brcs	.+54     	; 0x1b84 <vfprintf+0x98>
    1b4e:	8b 32       	cpi	r24, 0x2B	; 43
    1b50:	79 f0       	breq	.+30     	; 0x1b70 <vfprintf+0x84>
    1b52:	38 f4       	brcc	.+14     	; 0x1b62 <vfprintf+0x76>
    1b54:	80 32       	cpi	r24, 0x20	; 32
    1b56:	79 f0       	breq	.+30     	; 0x1b76 <vfprintf+0x8a>
    1b58:	83 32       	cpi	r24, 0x23	; 35
    1b5a:	a1 f4       	brne	.+40     	; 0x1b84 <vfprintf+0x98>
    1b5c:	23 2d       	mov	r18, r3
    1b5e:	20 61       	ori	r18, 0x10	; 16
    1b60:	1d c0       	rjmp	.+58     	; 0x1b9c <vfprintf+0xb0>
    1b62:	8d 32       	cpi	r24, 0x2D	; 45
    1b64:	61 f0       	breq	.+24     	; 0x1b7e <vfprintf+0x92>
    1b66:	80 33       	cpi	r24, 0x30	; 48
    1b68:	69 f4       	brne	.+26     	; 0x1b84 <vfprintf+0x98>
    1b6a:	23 2d       	mov	r18, r3
    1b6c:	21 60       	ori	r18, 0x01	; 1
    1b6e:	16 c0       	rjmp	.+44     	; 0x1b9c <vfprintf+0xb0>
    1b70:	83 2d       	mov	r24, r3
    1b72:	82 60       	ori	r24, 0x02	; 2
    1b74:	38 2e       	mov	r3, r24
    1b76:	e3 2d       	mov	r30, r3
    1b78:	e4 60       	ori	r30, 0x04	; 4
    1b7a:	3e 2e       	mov	r3, r30
    1b7c:	2a c0       	rjmp	.+84     	; 0x1bd2 <vfprintf+0xe6>
    1b7e:	f3 2d       	mov	r31, r3
    1b80:	f8 60       	ori	r31, 0x08	; 8
    1b82:	1d c0       	rjmp	.+58     	; 0x1bbe <vfprintf+0xd2>
    1b84:	37 fc       	sbrc	r3, 7
    1b86:	2d c0       	rjmp	.+90     	; 0x1be2 <vfprintf+0xf6>
    1b88:	20 ed       	ldi	r18, 0xD0	; 208
    1b8a:	28 0f       	add	r18, r24
    1b8c:	2a 30       	cpi	r18, 0x0A	; 10
    1b8e:	40 f0       	brcs	.+16     	; 0x1ba0 <vfprintf+0xb4>
    1b90:	8e 32       	cpi	r24, 0x2E	; 46
    1b92:	b9 f4       	brne	.+46     	; 0x1bc2 <vfprintf+0xd6>
    1b94:	36 fc       	sbrc	r3, 6
    1b96:	81 c1       	rjmp	.+770    	; 0x1e9a <vfprintf+0x3ae>
    1b98:	23 2d       	mov	r18, r3
    1b9a:	20 64       	ori	r18, 0x40	; 64
    1b9c:	32 2e       	mov	r3, r18
    1b9e:	19 c0       	rjmp	.+50     	; 0x1bd2 <vfprintf+0xe6>
    1ba0:	36 fe       	sbrs	r3, 6
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <vfprintf+0xc4>
    1ba4:	8a e0       	ldi	r24, 0x0A	; 10
    1ba6:	98 9e       	mul	r9, r24
    1ba8:	20 0d       	add	r18, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	92 2e       	mov	r9, r18
    1bae:	11 c0       	rjmp	.+34     	; 0x1bd2 <vfprintf+0xe6>
    1bb0:	ea e0       	ldi	r30, 0x0A	; 10
    1bb2:	2e 9e       	mul	r2, r30
    1bb4:	20 0d       	add	r18, r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	22 2e       	mov	r2, r18
    1bba:	f3 2d       	mov	r31, r3
    1bbc:	f0 62       	ori	r31, 0x20	; 32
    1bbe:	3f 2e       	mov	r3, r31
    1bc0:	08 c0       	rjmp	.+16     	; 0x1bd2 <vfprintf+0xe6>
    1bc2:	8c 36       	cpi	r24, 0x6C	; 108
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <vfprintf+0xe2>
    1bc6:	83 2d       	mov	r24, r3
    1bc8:	80 68       	ori	r24, 0x80	; 128
    1bca:	38 2e       	mov	r3, r24
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <vfprintf+0xe6>
    1bce:	88 36       	cpi	r24, 0x68	; 104
    1bd0:	41 f4       	brne	.+16     	; 0x1be2 <vfprintf+0xf6>
    1bd2:	f7 01       	movw	r30, r14
    1bd4:	93 fd       	sbrc	r25, 3
    1bd6:	85 91       	lpm	r24, Z+
    1bd8:	93 ff       	sbrs	r25, 3
    1bda:	81 91       	ld	r24, Z+
    1bdc:	7f 01       	movw	r14, r30
    1bde:	81 11       	cpse	r24, r1
    1be0:	b3 cf       	rjmp	.-154    	; 0x1b48 <vfprintf+0x5c>
    1be2:	98 2f       	mov	r25, r24
    1be4:	9f 7d       	andi	r25, 0xDF	; 223
    1be6:	95 54       	subi	r25, 0x45	; 69
    1be8:	93 30       	cpi	r25, 0x03	; 3
    1bea:	28 f4       	brcc	.+10     	; 0x1bf6 <vfprintf+0x10a>
    1bec:	0c 5f       	subi	r16, 0xFC	; 252
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	9f e3       	ldi	r25, 0x3F	; 63
    1bf2:	99 83       	std	Y+1, r25	; 0x01
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <vfprintf+0x124>
    1bf6:	83 36       	cpi	r24, 0x63	; 99
    1bf8:	31 f0       	breq	.+12     	; 0x1c06 <vfprintf+0x11a>
    1bfa:	83 37       	cpi	r24, 0x73	; 115
    1bfc:	71 f0       	breq	.+28     	; 0x1c1a <vfprintf+0x12e>
    1bfe:	83 35       	cpi	r24, 0x53	; 83
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <vfprintf+0x118>
    1c02:	59 c0       	rjmp	.+178    	; 0x1cb6 <vfprintf+0x1ca>
    1c04:	21 c0       	rjmp	.+66     	; 0x1c48 <vfprintf+0x15c>
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 81       	ld	r24, Z
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	0e 5f       	subi	r16, 0xFE	; 254
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	88 24       	eor	r8, r8
    1c12:	83 94       	inc	r8
    1c14:	91 2c       	mov	r9, r1
    1c16:	53 01       	movw	r10, r6
    1c18:	13 c0       	rjmp	.+38     	; 0x1c40 <vfprintf+0x154>
    1c1a:	28 01       	movw	r4, r16
    1c1c:	f2 e0       	ldi	r31, 0x02	; 2
    1c1e:	4f 0e       	add	r4, r31
    1c20:	51 1c       	adc	r5, r1
    1c22:	f8 01       	movw	r30, r16
    1c24:	a0 80       	ld	r10, Z
    1c26:	b1 80       	ldd	r11, Z+1	; 0x01
    1c28:	36 fe       	sbrs	r3, 6
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <vfprintf+0x146>
    1c2c:	69 2d       	mov	r22, r9
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <vfprintf+0x14a>
    1c32:	6f ef       	ldi	r22, 0xFF	; 255
    1c34:	7f ef       	ldi	r23, 0xFF	; 255
    1c36:	c5 01       	movw	r24, r10
    1c38:	0e 94 a6 10 	call	0x214c	; 0x214c <strnlen>
    1c3c:	4c 01       	movw	r8, r24
    1c3e:	82 01       	movw	r16, r4
    1c40:	f3 2d       	mov	r31, r3
    1c42:	ff 77       	andi	r31, 0x7F	; 127
    1c44:	3f 2e       	mov	r3, r31
    1c46:	16 c0       	rjmp	.+44     	; 0x1c74 <vfprintf+0x188>
    1c48:	28 01       	movw	r4, r16
    1c4a:	22 e0       	ldi	r18, 0x02	; 2
    1c4c:	42 0e       	add	r4, r18
    1c4e:	51 1c       	adc	r5, r1
    1c50:	f8 01       	movw	r30, r16
    1c52:	a0 80       	ld	r10, Z
    1c54:	b1 80       	ldd	r11, Z+1	; 0x01
    1c56:	36 fe       	sbrs	r3, 6
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <vfprintf+0x174>
    1c5a:	69 2d       	mov	r22, r9
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <vfprintf+0x178>
    1c60:	6f ef       	ldi	r22, 0xFF	; 255
    1c62:	7f ef       	ldi	r23, 0xFF	; 255
    1c64:	c5 01       	movw	r24, r10
    1c66:	0e 94 94 10 	call	0x2128	; 0x2128 <strnlen_P>
    1c6a:	4c 01       	movw	r8, r24
    1c6c:	f3 2d       	mov	r31, r3
    1c6e:	f0 68       	ori	r31, 0x80	; 128
    1c70:	3f 2e       	mov	r3, r31
    1c72:	82 01       	movw	r16, r4
    1c74:	33 fc       	sbrc	r3, 3
    1c76:	1b c0       	rjmp	.+54     	; 0x1cae <vfprintf+0x1c2>
    1c78:	82 2d       	mov	r24, r2
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	88 16       	cp	r8, r24
    1c7e:	99 06       	cpc	r9, r25
    1c80:	b0 f4       	brcc	.+44     	; 0x1cae <vfprintf+0x1c2>
    1c82:	b6 01       	movw	r22, r12
    1c84:	80 e2       	ldi	r24, 0x20	; 32
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1c8c:	2a 94       	dec	r2
    1c8e:	f4 cf       	rjmp	.-24     	; 0x1c78 <vfprintf+0x18c>
    1c90:	f5 01       	movw	r30, r10
    1c92:	37 fc       	sbrc	r3, 7
    1c94:	85 91       	lpm	r24, Z+
    1c96:	37 fe       	sbrs	r3, 7
    1c98:	81 91       	ld	r24, Z+
    1c9a:	5f 01       	movw	r10, r30
    1c9c:	b6 01       	movw	r22, r12
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1ca4:	21 10       	cpse	r2, r1
    1ca6:	2a 94       	dec	r2
    1ca8:	21 e0       	ldi	r18, 0x01	; 1
    1caa:	82 1a       	sub	r8, r18
    1cac:	91 08       	sbc	r9, r1
    1cae:	81 14       	cp	r8, r1
    1cb0:	91 04       	cpc	r9, r1
    1cb2:	71 f7       	brne	.-36     	; 0x1c90 <vfprintf+0x1a4>
    1cb4:	e8 c0       	rjmp	.+464    	; 0x1e86 <vfprintf+0x39a>
    1cb6:	84 36       	cpi	r24, 0x64	; 100
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <vfprintf+0x1d2>
    1cba:	89 36       	cpi	r24, 0x69	; 105
    1cbc:	41 f5       	brne	.+80     	; 0x1d0e <vfprintf+0x222>
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	37 fe       	sbrs	r3, 7
    1cc2:	07 c0       	rjmp	.+14     	; 0x1cd2 <vfprintf+0x1e6>
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	0c 5f       	subi	r16, 0xFC	; 252
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <vfprintf+0x1f6>
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	07 2e       	mov	r0, r23
    1cd8:	00 0c       	add	r0, r0
    1cda:	88 0b       	sbc	r24, r24
    1cdc:	99 0b       	sbc	r25, r25
    1cde:	0e 5f       	subi	r16, 0xFE	; 254
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	f3 2d       	mov	r31, r3
    1ce4:	ff 76       	andi	r31, 0x6F	; 111
    1ce6:	3f 2e       	mov	r3, r31
    1ce8:	97 ff       	sbrs	r25, 7
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <vfprintf+0x212>
    1cec:	90 95       	com	r25
    1cee:	80 95       	com	r24
    1cf0:	70 95       	com	r23
    1cf2:	61 95       	neg	r22
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	f0 68       	ori	r31, 0x80	; 128
    1cfc:	3f 2e       	mov	r3, r31
    1cfe:	2a e0       	ldi	r18, 0x0A	; 10
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	a3 01       	movw	r20, r6
    1d04:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__ultoa_invert>
    1d08:	88 2e       	mov	r8, r24
    1d0a:	86 18       	sub	r8, r6
    1d0c:	45 c0       	rjmp	.+138    	; 0x1d98 <vfprintf+0x2ac>
    1d0e:	85 37       	cpi	r24, 0x75	; 117
    1d10:	31 f4       	brne	.+12     	; 0x1d1e <vfprintf+0x232>
    1d12:	23 2d       	mov	r18, r3
    1d14:	2f 7e       	andi	r18, 0xEF	; 239
    1d16:	b2 2e       	mov	r11, r18
    1d18:	2a e0       	ldi	r18, 0x0A	; 10
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	25 c0       	rjmp	.+74     	; 0x1d68 <vfprintf+0x27c>
    1d1e:	93 2d       	mov	r25, r3
    1d20:	99 7f       	andi	r25, 0xF9	; 249
    1d22:	b9 2e       	mov	r11, r25
    1d24:	8f 36       	cpi	r24, 0x6F	; 111
    1d26:	c1 f0       	breq	.+48     	; 0x1d58 <vfprintf+0x26c>
    1d28:	18 f4       	brcc	.+6      	; 0x1d30 <vfprintf+0x244>
    1d2a:	88 35       	cpi	r24, 0x58	; 88
    1d2c:	79 f0       	breq	.+30     	; 0x1d4c <vfprintf+0x260>
    1d2e:	b5 c0       	rjmp	.+362    	; 0x1e9a <vfprintf+0x3ae>
    1d30:	80 37       	cpi	r24, 0x70	; 112
    1d32:	19 f0       	breq	.+6      	; 0x1d3a <vfprintf+0x24e>
    1d34:	88 37       	cpi	r24, 0x78	; 120
    1d36:	21 f0       	breq	.+8      	; 0x1d40 <vfprintf+0x254>
    1d38:	b0 c0       	rjmp	.+352    	; 0x1e9a <vfprintf+0x3ae>
    1d3a:	e9 2f       	mov	r30, r25
    1d3c:	e0 61       	ori	r30, 0x10	; 16
    1d3e:	be 2e       	mov	r11, r30
    1d40:	b4 fe       	sbrs	r11, 4
    1d42:	0d c0       	rjmp	.+26     	; 0x1d5e <vfprintf+0x272>
    1d44:	fb 2d       	mov	r31, r11
    1d46:	f4 60       	ori	r31, 0x04	; 4
    1d48:	bf 2e       	mov	r11, r31
    1d4a:	09 c0       	rjmp	.+18     	; 0x1d5e <vfprintf+0x272>
    1d4c:	34 fe       	sbrs	r3, 4
    1d4e:	0a c0       	rjmp	.+20     	; 0x1d64 <vfprintf+0x278>
    1d50:	29 2f       	mov	r18, r25
    1d52:	26 60       	ori	r18, 0x06	; 6
    1d54:	b2 2e       	mov	r11, r18
    1d56:	06 c0       	rjmp	.+12     	; 0x1d64 <vfprintf+0x278>
    1d58:	28 e0       	ldi	r18, 0x08	; 8
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	05 c0       	rjmp	.+10     	; 0x1d68 <vfprintf+0x27c>
    1d5e:	20 e1       	ldi	r18, 0x10	; 16
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <vfprintf+0x27c>
    1d64:	20 e1       	ldi	r18, 0x10	; 16
    1d66:	32 e0       	ldi	r19, 0x02	; 2
    1d68:	f8 01       	movw	r30, r16
    1d6a:	b7 fe       	sbrs	r11, 7
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <vfprintf+0x290>
    1d6e:	60 81       	ld	r22, Z
    1d70:	71 81       	ldd	r23, Z+1	; 0x01
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	93 81       	ldd	r25, Z+3	; 0x03
    1d76:	0c 5f       	subi	r16, 0xFC	; 252
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	06 c0       	rjmp	.+12     	; 0x1d88 <vfprintf+0x29c>
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 5f       	subi	r16, 0xFE	; 254
    1d86:	1f 4f       	sbci	r17, 0xFF	; 255
    1d88:	a3 01       	movw	r20, r6
    1d8a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__ultoa_invert>
    1d8e:	88 2e       	mov	r8, r24
    1d90:	86 18       	sub	r8, r6
    1d92:	fb 2d       	mov	r31, r11
    1d94:	ff 77       	andi	r31, 0x7F	; 127
    1d96:	3f 2e       	mov	r3, r31
    1d98:	36 fe       	sbrs	r3, 6
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <vfprintf+0x2ca>
    1d9c:	23 2d       	mov	r18, r3
    1d9e:	2e 7f       	andi	r18, 0xFE	; 254
    1da0:	a2 2e       	mov	r10, r18
    1da2:	89 14       	cp	r8, r9
    1da4:	58 f4       	brcc	.+22     	; 0x1dbc <vfprintf+0x2d0>
    1da6:	34 fe       	sbrs	r3, 4
    1da8:	0b c0       	rjmp	.+22     	; 0x1dc0 <vfprintf+0x2d4>
    1daa:	32 fc       	sbrc	r3, 2
    1dac:	09 c0       	rjmp	.+18     	; 0x1dc0 <vfprintf+0x2d4>
    1dae:	83 2d       	mov	r24, r3
    1db0:	8e 7e       	andi	r24, 0xEE	; 238
    1db2:	a8 2e       	mov	r10, r24
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <vfprintf+0x2d4>
    1db6:	b8 2c       	mov	r11, r8
    1db8:	a3 2c       	mov	r10, r3
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <vfprintf+0x2d6>
    1dbc:	b8 2c       	mov	r11, r8
    1dbe:	01 c0       	rjmp	.+2      	; 0x1dc2 <vfprintf+0x2d6>
    1dc0:	b9 2c       	mov	r11, r9
    1dc2:	a4 fe       	sbrs	r10, 4
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <vfprintf+0x2f8>
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e8 0d       	add	r30, r8
    1dca:	f1 1d       	adc	r31, r1
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 33       	cpi	r24, 0x30	; 48
    1dd0:	21 f4       	brne	.+8      	; 0x1dda <vfprintf+0x2ee>
    1dd2:	9a 2d       	mov	r25, r10
    1dd4:	99 7e       	andi	r25, 0xE9	; 233
    1dd6:	a9 2e       	mov	r10, r25
    1dd8:	09 c0       	rjmp	.+18     	; 0x1dec <vfprintf+0x300>
    1dda:	a2 fe       	sbrs	r10, 2
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <vfprintf+0x2fe>
    1dde:	b3 94       	inc	r11
    1de0:	b3 94       	inc	r11
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <vfprintf+0x300>
    1de4:	8a 2d       	mov	r24, r10
    1de6:	86 78       	andi	r24, 0x86	; 134
    1de8:	09 f0       	breq	.+2      	; 0x1dec <vfprintf+0x300>
    1dea:	b3 94       	inc	r11
    1dec:	a3 fc       	sbrc	r10, 3
    1dee:	11 c0       	rjmp	.+34     	; 0x1e12 <vfprintf+0x326>
    1df0:	a0 fe       	sbrs	r10, 0
    1df2:	06 c0       	rjmp	.+12     	; 0x1e00 <vfprintf+0x314>
    1df4:	b2 14       	cp	r11, r2
    1df6:	88 f4       	brcc	.+34     	; 0x1e1a <vfprintf+0x32e>
    1df8:	28 0c       	add	r2, r8
    1dfa:	92 2c       	mov	r9, r2
    1dfc:	9b 18       	sub	r9, r11
    1dfe:	0e c0       	rjmp	.+28     	; 0x1e1c <vfprintf+0x330>
    1e00:	b2 14       	cp	r11, r2
    1e02:	60 f4       	brcc	.+24     	; 0x1e1c <vfprintf+0x330>
    1e04:	b6 01       	movw	r22, r12
    1e06:	80 e2       	ldi	r24, 0x20	; 32
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1e0e:	b3 94       	inc	r11
    1e10:	f7 cf       	rjmp	.-18     	; 0x1e00 <vfprintf+0x314>
    1e12:	b2 14       	cp	r11, r2
    1e14:	18 f4       	brcc	.+6      	; 0x1e1c <vfprintf+0x330>
    1e16:	2b 18       	sub	r2, r11
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <vfprintf+0x332>
    1e1a:	98 2c       	mov	r9, r8
    1e1c:	21 2c       	mov	r2, r1
    1e1e:	a4 fe       	sbrs	r10, 4
    1e20:	10 c0       	rjmp	.+32     	; 0x1e42 <vfprintf+0x356>
    1e22:	b6 01       	movw	r22, r12
    1e24:	80 e3       	ldi	r24, 0x30	; 48
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1e2c:	a2 fe       	sbrs	r10, 2
    1e2e:	17 c0       	rjmp	.+46     	; 0x1e5e <vfprintf+0x372>
    1e30:	a1 fc       	sbrc	r10, 1
    1e32:	03 c0       	rjmp	.+6      	; 0x1e3a <vfprintf+0x34e>
    1e34:	88 e7       	ldi	r24, 0x78	; 120
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <vfprintf+0x352>
    1e3a:	88 e5       	ldi	r24, 0x58	; 88
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	b6 01       	movw	r22, r12
    1e40:	0c c0       	rjmp	.+24     	; 0x1e5a <vfprintf+0x36e>
    1e42:	8a 2d       	mov	r24, r10
    1e44:	86 78       	andi	r24, 0x86	; 134
    1e46:	59 f0       	breq	.+22     	; 0x1e5e <vfprintf+0x372>
    1e48:	a1 fe       	sbrs	r10, 1
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <vfprintf+0x364>
    1e4c:	8b e2       	ldi	r24, 0x2B	; 43
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <vfprintf+0x366>
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	a7 fc       	sbrc	r10, 7
    1e54:	8d e2       	ldi	r24, 0x2D	; 45
    1e56:	b6 01       	movw	r22, r12
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1e5e:	89 14       	cp	r8, r9
    1e60:	38 f4       	brcc	.+14     	; 0x1e70 <vfprintf+0x384>
    1e62:	b6 01       	movw	r22, r12
    1e64:	80 e3       	ldi	r24, 0x30	; 48
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1e6c:	9a 94       	dec	r9
    1e6e:	f7 cf       	rjmp	.-18     	; 0x1e5e <vfprintf+0x372>
    1e70:	8a 94       	dec	r8
    1e72:	f3 01       	movw	r30, r6
    1e74:	e8 0d       	add	r30, r8
    1e76:	f1 1d       	adc	r31, r1
    1e78:	80 81       	ld	r24, Z
    1e7a:	b6 01       	movw	r22, r12
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1e82:	81 10       	cpse	r8, r1
    1e84:	f5 cf       	rjmp	.-22     	; 0x1e70 <vfprintf+0x384>
    1e86:	22 20       	and	r2, r2
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <vfprintf+0x3a0>
    1e8a:	42 ce       	rjmp	.-892    	; 0x1b10 <vfprintf+0x24>
    1e8c:	b6 01       	movw	r22, r12
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1e96:	2a 94       	dec	r2
    1e98:	f6 cf       	rjmp	.-20     	; 0x1e86 <vfprintf+0x39a>
    1e9a:	f6 01       	movw	r30, r12
    1e9c:	86 81       	ldd	r24, Z+6	; 0x06
    1e9e:	97 81       	ldd	r25, Z+7	; 0x07
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <vfprintf+0x3ba>
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	9f ef       	ldi	r25, 0xFF	; 255
    1ea6:	2b 96       	adiw	r28, 0x0b	; 11
    1ea8:	e2 e1       	ldi	r30, 0x12	; 18
    1eaa:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__>

00001eae <calloc>:
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	86 9f       	mul	r24, r22
    1eb8:	80 01       	movw	r16, r0
    1eba:	87 9f       	mul	r24, r23
    1ebc:	10 0d       	add	r17, r0
    1ebe:	96 9f       	mul	r25, r22
    1ec0:	10 0d       	add	r17, r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	c8 01       	movw	r24, r16
    1ec6:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <malloc>
    1eca:	ec 01       	movw	r28, r24
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	29 f0       	breq	.+10     	; 0x1eda <calloc+0x2c>
    1ed0:	a8 01       	movw	r20, r16
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	0e 94 9f 10 	call	0x213e	; 0x213e <memset>
    1eda:	ce 01       	movw	r24, r28
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	08 95       	ret

00001ee6 <malloc>:
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	82 30       	cpi	r24, 0x02	; 2
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	10 f4       	brcc	.+4      	; 0x1ef8 <malloc+0x12>
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <__flp>
    1efc:	f0 91 38 03 	lds	r31, 0x0338	; 0x800338 <__flp+0x1>
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	a0 e0       	ldi	r26, 0x00	; 0
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	30 97       	sbiw	r30, 0x00	; 0
    1f0a:	19 f1       	breq	.+70     	; 0x1f52 <malloc+0x6c>
    1f0c:	40 81       	ld	r20, Z
    1f0e:	51 81       	ldd	r21, Z+1	; 0x01
    1f10:	02 81       	ldd	r16, Z+2	; 0x02
    1f12:	13 81       	ldd	r17, Z+3	; 0x03
    1f14:	48 17       	cp	r20, r24
    1f16:	59 07       	cpc	r21, r25
    1f18:	c8 f0       	brcs	.+50     	; 0x1f4c <malloc+0x66>
    1f1a:	84 17       	cp	r24, r20
    1f1c:	95 07       	cpc	r25, r21
    1f1e:	69 f4       	brne	.+26     	; 0x1f3a <malloc+0x54>
    1f20:	10 97       	sbiw	r26, 0x00	; 0
    1f22:	31 f0       	breq	.+12     	; 0x1f30 <malloc+0x4a>
    1f24:	12 96       	adiw	r26, 0x02	; 2
    1f26:	0c 93       	st	X, r16
    1f28:	12 97       	sbiw	r26, 0x02	; 2
    1f2a:	13 96       	adiw	r26, 0x03	; 3
    1f2c:	1c 93       	st	X, r17
    1f2e:	27 c0       	rjmp	.+78     	; 0x1f7e <malloc+0x98>
    1f30:	00 93 37 03 	sts	0x0337, r16	; 0x800337 <__flp>
    1f34:	10 93 38 03 	sts	0x0338, r17	; 0x800338 <__flp+0x1>
    1f38:	22 c0       	rjmp	.+68     	; 0x1f7e <malloc+0x98>
    1f3a:	21 15       	cp	r18, r1
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	19 f0       	breq	.+6      	; 0x1f46 <malloc+0x60>
    1f40:	42 17       	cp	r20, r18
    1f42:	53 07       	cpc	r21, r19
    1f44:	18 f4       	brcc	.+6      	; 0x1f4c <malloc+0x66>
    1f46:	9a 01       	movw	r18, r20
    1f48:	bd 01       	movw	r22, r26
    1f4a:	ef 01       	movw	r28, r30
    1f4c:	df 01       	movw	r26, r30
    1f4e:	f8 01       	movw	r30, r16
    1f50:	db cf       	rjmp	.-74     	; 0x1f08 <malloc+0x22>
    1f52:	21 15       	cp	r18, r1
    1f54:	31 05       	cpc	r19, r1
    1f56:	f9 f0       	breq	.+62     	; 0x1f96 <malloc+0xb0>
    1f58:	28 1b       	sub	r18, r24
    1f5a:	39 0b       	sbc	r19, r25
    1f5c:	24 30       	cpi	r18, 0x04	; 4
    1f5e:	31 05       	cpc	r19, r1
    1f60:	80 f4       	brcc	.+32     	; 0x1f82 <malloc+0x9c>
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	9b 81       	ldd	r25, Y+3	; 0x03
    1f66:	61 15       	cp	r22, r1
    1f68:	71 05       	cpc	r23, r1
    1f6a:	21 f0       	breq	.+8      	; 0x1f74 <malloc+0x8e>
    1f6c:	fb 01       	movw	r30, r22
    1f6e:	93 83       	std	Z+3, r25	; 0x03
    1f70:	82 83       	std	Z+2, r24	; 0x02
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <malloc+0x96>
    1f74:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <__flp+0x1>
    1f78:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <__flp>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	32 96       	adiw	r30, 0x02	; 2
    1f80:	44 c0       	rjmp	.+136    	; 0x200a <malloc+0x124>
    1f82:	fe 01       	movw	r30, r28
    1f84:	e2 0f       	add	r30, r18
    1f86:	f3 1f       	adc	r31, r19
    1f88:	81 93       	st	Z+, r24
    1f8a:	91 93       	st	Z+, r25
    1f8c:	22 50       	subi	r18, 0x02	; 2
    1f8e:	31 09       	sbc	r19, r1
    1f90:	39 83       	std	Y+1, r19	; 0x01
    1f92:	28 83       	st	Y, r18
    1f94:	3a c0       	rjmp	.+116    	; 0x200a <malloc+0x124>
    1f96:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <__brkval>
    1f9a:	30 91 36 03 	lds	r19, 0x0336	; 0x800336 <__brkval+0x1>
    1f9e:	23 2b       	or	r18, r19
    1fa0:	41 f4       	brne	.+16     	; 0x1fb2 <malloc+0xcc>
    1fa2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1fa6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1faa:	30 93 36 03 	sts	0x0336, r19	; 0x800336 <__brkval+0x1>
    1fae:	20 93 35 03 	sts	0x0335, r18	; 0x800335 <__brkval>
    1fb2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1fb6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1fba:	21 15       	cp	r18, r1
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	41 f4       	brne	.+16     	; 0x1fd0 <malloc+0xea>
    1fc0:	2d b7       	in	r18, 0x3d	; 61
    1fc2:	3e b7       	in	r19, 0x3e	; 62
    1fc4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1fc8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1fcc:	24 1b       	sub	r18, r20
    1fce:	35 0b       	sbc	r19, r21
    1fd0:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <__brkval>
    1fd4:	f0 91 36 03 	lds	r31, 0x0336	; 0x800336 <__brkval+0x1>
    1fd8:	e2 17       	cp	r30, r18
    1fda:	f3 07       	cpc	r31, r19
    1fdc:	a0 f4       	brcc	.+40     	; 0x2006 <malloc+0x120>
    1fde:	2e 1b       	sub	r18, r30
    1fe0:	3f 0b       	sbc	r19, r31
    1fe2:	28 17       	cp	r18, r24
    1fe4:	39 07       	cpc	r19, r25
    1fe6:	78 f0       	brcs	.+30     	; 0x2006 <malloc+0x120>
    1fe8:	ac 01       	movw	r20, r24
    1fea:	4e 5f       	subi	r20, 0xFE	; 254
    1fec:	5f 4f       	sbci	r21, 0xFF	; 255
    1fee:	24 17       	cp	r18, r20
    1ff0:	35 07       	cpc	r19, r21
    1ff2:	48 f0       	brcs	.+18     	; 0x2006 <malloc+0x120>
    1ff4:	4e 0f       	add	r20, r30
    1ff6:	5f 1f       	adc	r21, r31
    1ff8:	50 93 36 03 	sts	0x0336, r21	; 0x800336 <__brkval+0x1>
    1ffc:	40 93 35 03 	sts	0x0335, r20	; 0x800335 <__brkval>
    2000:	81 93       	st	Z+, r24
    2002:	91 93       	st	Z+, r25
    2004:	02 c0       	rjmp	.+4      	; 0x200a <malloc+0x124>
    2006:	e0 e0       	ldi	r30, 0x00	; 0
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	cf 01       	movw	r24, r30
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <free>:
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	09 f4       	brne	.+2      	; 0x2020 <free+0xa>
    201e:	81 c0       	rjmp	.+258    	; 0x2122 <free+0x10c>
    2020:	fc 01       	movw	r30, r24
    2022:	32 97       	sbiw	r30, 0x02	; 2
    2024:	13 82       	std	Z+3, r1	; 0x03
    2026:	12 82       	std	Z+2, r1	; 0x02
    2028:	a0 91 37 03 	lds	r26, 0x0337	; 0x800337 <__flp>
    202c:	b0 91 38 03 	lds	r27, 0x0338	; 0x800338 <__flp+0x1>
    2030:	10 97       	sbiw	r26, 0x00	; 0
    2032:	81 f4       	brne	.+32     	; 0x2054 <free+0x3e>
    2034:	20 81       	ld	r18, Z
    2036:	31 81       	ldd	r19, Z+1	; 0x01
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <__brkval>
    2040:	30 91 36 03 	lds	r19, 0x0336	; 0x800336 <__brkval+0x1>
    2044:	28 17       	cp	r18, r24
    2046:	39 07       	cpc	r19, r25
    2048:	51 f5       	brne	.+84     	; 0x209e <free+0x88>
    204a:	f0 93 36 03 	sts	0x0336, r31	; 0x800336 <__brkval+0x1>
    204e:	e0 93 35 03 	sts	0x0335, r30	; 0x800335 <__brkval>
    2052:	67 c0       	rjmp	.+206    	; 0x2122 <free+0x10c>
    2054:	ed 01       	movw	r28, r26
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	ce 17       	cp	r28, r30
    205c:	df 07       	cpc	r29, r31
    205e:	40 f4       	brcc	.+16     	; 0x2070 <free+0x5a>
    2060:	4a 81       	ldd	r20, Y+2	; 0x02
    2062:	5b 81       	ldd	r21, Y+3	; 0x03
    2064:	9e 01       	movw	r18, r28
    2066:	41 15       	cp	r20, r1
    2068:	51 05       	cpc	r21, r1
    206a:	f1 f0       	breq	.+60     	; 0x20a8 <free+0x92>
    206c:	ea 01       	movw	r28, r20
    206e:	f5 cf       	rjmp	.-22     	; 0x205a <free+0x44>
    2070:	d3 83       	std	Z+3, r29	; 0x03
    2072:	c2 83       	std	Z+2, r28	; 0x02
    2074:	40 81       	ld	r20, Z
    2076:	51 81       	ldd	r21, Z+1	; 0x01
    2078:	84 0f       	add	r24, r20
    207a:	95 1f       	adc	r25, r21
    207c:	c8 17       	cp	r28, r24
    207e:	d9 07       	cpc	r29, r25
    2080:	59 f4       	brne	.+22     	; 0x2098 <free+0x82>
    2082:	88 81       	ld	r24, Y
    2084:	99 81       	ldd	r25, Y+1	; 0x01
    2086:	84 0f       	add	r24, r20
    2088:	95 1f       	adc	r25, r21
    208a:	02 96       	adiw	r24, 0x02	; 2
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	9b 81       	ldd	r25, Y+3	; 0x03
    2094:	93 83       	std	Z+3, r25	; 0x03
    2096:	82 83       	std	Z+2, r24	; 0x02
    2098:	21 15       	cp	r18, r1
    209a:	31 05       	cpc	r19, r1
    209c:	29 f4       	brne	.+10     	; 0x20a8 <free+0x92>
    209e:	f0 93 38 03 	sts	0x0338, r31	; 0x800338 <__flp+0x1>
    20a2:	e0 93 37 03 	sts	0x0337, r30	; 0x800337 <__flp>
    20a6:	3d c0       	rjmp	.+122    	; 0x2122 <free+0x10c>
    20a8:	e9 01       	movw	r28, r18
    20aa:	fb 83       	std	Y+3, r31	; 0x03
    20ac:	ea 83       	std	Y+2, r30	; 0x02
    20ae:	49 91       	ld	r20, Y+
    20b0:	59 91       	ld	r21, Y+
    20b2:	c4 0f       	add	r28, r20
    20b4:	d5 1f       	adc	r29, r21
    20b6:	ec 17       	cp	r30, r28
    20b8:	fd 07       	cpc	r31, r29
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <free+0xbe>
    20bc:	80 81       	ld	r24, Z
    20be:	91 81       	ldd	r25, Z+1	; 0x01
    20c0:	84 0f       	add	r24, r20
    20c2:	95 1f       	adc	r25, r21
    20c4:	02 96       	adiw	r24, 0x02	; 2
    20c6:	e9 01       	movw	r28, r18
    20c8:	99 83       	std	Y+1, r25	; 0x01
    20ca:	88 83       	st	Y, r24
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	9b 83       	std	Y+3, r25	; 0x03
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	e0 e0       	ldi	r30, 0x00	; 0
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	12 96       	adiw	r26, 0x02	; 2
    20da:	8d 91       	ld	r24, X+
    20dc:	9c 91       	ld	r25, X
    20de:	13 97       	sbiw	r26, 0x03	; 3
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	19 f0       	breq	.+6      	; 0x20ea <free+0xd4>
    20e4:	fd 01       	movw	r30, r26
    20e6:	dc 01       	movw	r26, r24
    20e8:	f7 cf       	rjmp	.-18     	; 0x20d8 <free+0xc2>
    20ea:	8d 91       	ld	r24, X+
    20ec:	9c 91       	ld	r25, X
    20ee:	11 97       	sbiw	r26, 0x01	; 1
    20f0:	9d 01       	movw	r18, r26
    20f2:	2e 5f       	subi	r18, 0xFE	; 254
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	82 0f       	add	r24, r18
    20f8:	93 1f       	adc	r25, r19
    20fa:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <__brkval>
    20fe:	30 91 36 03 	lds	r19, 0x0336	; 0x800336 <__brkval+0x1>
    2102:	28 17       	cp	r18, r24
    2104:	39 07       	cpc	r19, r25
    2106:	69 f4       	brne	.+26     	; 0x2122 <free+0x10c>
    2108:	30 97       	sbiw	r30, 0x00	; 0
    210a:	29 f4       	brne	.+10     	; 0x2116 <free+0x100>
    210c:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <__flp+0x1>
    2110:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <__flp>
    2114:	02 c0       	rjmp	.+4      	; 0x211a <free+0x104>
    2116:	13 82       	std	Z+3, r1	; 0x03
    2118:	12 82       	std	Z+2, r1	; 0x02
    211a:	b0 93 36 03 	sts	0x0336, r27	; 0x800336 <__brkval+0x1>
    211e:	a0 93 35 03 	sts	0x0335, r26	; 0x800335 <__brkval>
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	08 95       	ret

00002128 <strnlen_P>:
    2128:	fc 01       	movw	r30, r24
    212a:	05 90       	lpm	r0, Z+
    212c:	61 50       	subi	r22, 0x01	; 1
    212e:	70 40       	sbci	r23, 0x00	; 0
    2130:	01 10       	cpse	r0, r1
    2132:	d8 f7       	brcc	.-10     	; 0x212a <strnlen_P+0x2>
    2134:	80 95       	com	r24
    2136:	90 95       	com	r25
    2138:	8e 0f       	add	r24, r30
    213a:	9f 1f       	adc	r25, r31
    213c:	08 95       	ret

0000213e <memset>:
    213e:	dc 01       	movw	r26, r24
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <memset+0x6>
    2142:	6d 93       	st	X+, r22
    2144:	41 50       	subi	r20, 0x01	; 1
    2146:	50 40       	sbci	r21, 0x00	; 0
    2148:	e0 f7       	brcc	.-8      	; 0x2142 <memset+0x4>
    214a:	08 95       	ret

0000214c <strnlen>:
    214c:	fc 01       	movw	r30, r24
    214e:	61 50       	subi	r22, 0x01	; 1
    2150:	70 40       	sbci	r23, 0x00	; 0
    2152:	01 90       	ld	r0, Z+
    2154:	01 10       	cpse	r0, r1
    2156:	d8 f7       	brcc	.-10     	; 0x214e <strnlen+0x2>
    2158:	80 95       	com	r24
    215a:	90 95       	com	r25
    215c:	8e 0f       	add	r24, r30
    215e:	9f 1f       	adc	r25, r31
    2160:	08 95       	ret

00002162 <strrev>:
    2162:	dc 01       	movw	r26, r24
    2164:	fc 01       	movw	r30, r24
    2166:	67 2f       	mov	r22, r23
    2168:	71 91       	ld	r23, Z+
    216a:	77 23       	and	r23, r23
    216c:	e1 f7       	brne	.-8      	; 0x2166 <strrev+0x4>
    216e:	32 97       	sbiw	r30, 0x02	; 2
    2170:	04 c0       	rjmp	.+8      	; 0x217a <strrev+0x18>
    2172:	7c 91       	ld	r23, X
    2174:	6d 93       	st	X+, r22
    2176:	70 83       	st	Z, r23
    2178:	62 91       	ld	r22, -Z
    217a:	ae 17       	cp	r26, r30
    217c:	bf 07       	cpc	r27, r31
    217e:	c8 f3       	brcs	.-14     	; 0x2172 <strrev+0x10>
    2180:	08 95       	ret

00002182 <fputc>:
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	fb 01       	movw	r30, r22
    218c:	23 81       	ldd	r18, Z+3	; 0x03
    218e:	21 fd       	sbrc	r18, 1
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <fputc+0x16>
    2192:	8f ef       	ldi	r24, 0xFF	; 255
    2194:	9f ef       	ldi	r25, 0xFF	; 255
    2196:	2c c0       	rjmp	.+88     	; 0x21f0 <fputc+0x6e>
    2198:	22 ff       	sbrs	r18, 2
    219a:	16 c0       	rjmp	.+44     	; 0x21c8 <fputc+0x46>
    219c:	46 81       	ldd	r20, Z+6	; 0x06
    219e:	57 81       	ldd	r21, Z+7	; 0x07
    21a0:	24 81       	ldd	r18, Z+4	; 0x04
    21a2:	35 81       	ldd	r19, Z+5	; 0x05
    21a4:	42 17       	cp	r20, r18
    21a6:	53 07       	cpc	r21, r19
    21a8:	44 f4       	brge	.+16     	; 0x21ba <fputc+0x38>
    21aa:	a0 81       	ld	r26, Z
    21ac:	b1 81       	ldd	r27, Z+1	; 0x01
    21ae:	9d 01       	movw	r18, r26
    21b0:	2f 5f       	subi	r18, 0xFF	; 255
    21b2:	3f 4f       	sbci	r19, 0xFF	; 255
    21b4:	31 83       	std	Z+1, r19	; 0x01
    21b6:	20 83       	st	Z, r18
    21b8:	8c 93       	st	X, r24
    21ba:	26 81       	ldd	r18, Z+6	; 0x06
    21bc:	37 81       	ldd	r19, Z+7	; 0x07
    21be:	2f 5f       	subi	r18, 0xFF	; 255
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	37 83       	std	Z+7, r19	; 0x07
    21c4:	26 83       	std	Z+6, r18	; 0x06
    21c6:	14 c0       	rjmp	.+40     	; 0x21f0 <fputc+0x6e>
    21c8:	8b 01       	movw	r16, r22
    21ca:	ec 01       	movw	r28, r24
    21cc:	fb 01       	movw	r30, r22
    21ce:	00 84       	ldd	r0, Z+8	; 0x08
    21d0:	f1 85       	ldd	r31, Z+9	; 0x09
    21d2:	e0 2d       	mov	r30, r0
    21d4:	09 95       	icall
    21d6:	89 2b       	or	r24, r25
    21d8:	e1 f6       	brne	.-72     	; 0x2192 <fputc+0x10>
    21da:	d8 01       	movw	r26, r16
    21dc:	16 96       	adiw	r26, 0x06	; 6
    21de:	8d 91       	ld	r24, X+
    21e0:	9c 91       	ld	r25, X
    21e2:	17 97       	sbiw	r26, 0x07	; 7
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	17 96       	adiw	r26, 0x07	; 7
    21e8:	9c 93       	st	X, r25
    21ea:	8e 93       	st	-X, r24
    21ec:	16 97       	sbiw	r26, 0x06	; 6
    21ee:	ce 01       	movw	r24, r28
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	08 95       	ret

000021fa <__ultoa_invert>:
    21fa:	fa 01       	movw	r30, r20
    21fc:	aa 27       	eor	r26, r26
    21fe:	28 30       	cpi	r18, 0x08	; 8
    2200:	51 f1       	breq	.+84     	; 0x2256 <__ultoa_invert+0x5c>
    2202:	20 31       	cpi	r18, 0x10	; 16
    2204:	81 f1       	breq	.+96     	; 0x2266 <__ultoa_invert+0x6c>
    2206:	e8 94       	clt
    2208:	6f 93       	push	r22
    220a:	6e 7f       	andi	r22, 0xFE	; 254
    220c:	6e 5f       	subi	r22, 0xFE	; 254
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	8f 4f       	sbci	r24, 0xFF	; 255
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	af 4f       	sbci	r26, 0xFF	; 255
    2216:	b1 e0       	ldi	r27, 0x01	; 1
    2218:	3e d0       	rcall	.+124    	; 0x2296 <__ultoa_invert+0x9c>
    221a:	b4 e0       	ldi	r27, 0x04	; 4
    221c:	3c d0       	rcall	.+120    	; 0x2296 <__ultoa_invert+0x9c>
    221e:	67 0f       	add	r22, r23
    2220:	78 1f       	adc	r23, r24
    2222:	89 1f       	adc	r24, r25
    2224:	9a 1f       	adc	r25, r26
    2226:	a1 1d       	adc	r26, r1
    2228:	68 0f       	add	r22, r24
    222a:	79 1f       	adc	r23, r25
    222c:	8a 1f       	adc	r24, r26
    222e:	91 1d       	adc	r25, r1
    2230:	a1 1d       	adc	r26, r1
    2232:	6a 0f       	add	r22, r26
    2234:	71 1d       	adc	r23, r1
    2236:	81 1d       	adc	r24, r1
    2238:	91 1d       	adc	r25, r1
    223a:	a1 1d       	adc	r26, r1
    223c:	20 d0       	rcall	.+64     	; 0x227e <__ultoa_invert+0x84>
    223e:	09 f4       	brne	.+2      	; 0x2242 <__ultoa_invert+0x48>
    2240:	68 94       	set
    2242:	3f 91       	pop	r19
    2244:	2a e0       	ldi	r18, 0x0A	; 10
    2246:	26 9f       	mul	r18, r22
    2248:	11 24       	eor	r1, r1
    224a:	30 19       	sub	r19, r0
    224c:	30 5d       	subi	r19, 0xD0	; 208
    224e:	31 93       	st	Z+, r19
    2250:	de f6       	brtc	.-74     	; 0x2208 <__ultoa_invert+0xe>
    2252:	cf 01       	movw	r24, r30
    2254:	08 95       	ret
    2256:	46 2f       	mov	r20, r22
    2258:	47 70       	andi	r20, 0x07	; 7
    225a:	40 5d       	subi	r20, 0xD0	; 208
    225c:	41 93       	st	Z+, r20
    225e:	b3 e0       	ldi	r27, 0x03	; 3
    2260:	0f d0       	rcall	.+30     	; 0x2280 <__ultoa_invert+0x86>
    2262:	c9 f7       	brne	.-14     	; 0x2256 <__ultoa_invert+0x5c>
    2264:	f6 cf       	rjmp	.-20     	; 0x2252 <__ultoa_invert+0x58>
    2266:	46 2f       	mov	r20, r22
    2268:	4f 70       	andi	r20, 0x0F	; 15
    226a:	40 5d       	subi	r20, 0xD0	; 208
    226c:	4a 33       	cpi	r20, 0x3A	; 58
    226e:	18 f0       	brcs	.+6      	; 0x2276 <__ultoa_invert+0x7c>
    2270:	49 5d       	subi	r20, 0xD9	; 217
    2272:	31 fd       	sbrc	r19, 1
    2274:	40 52       	subi	r20, 0x20	; 32
    2276:	41 93       	st	Z+, r20
    2278:	02 d0       	rcall	.+4      	; 0x227e <__ultoa_invert+0x84>
    227a:	a9 f7       	brne	.-22     	; 0x2266 <__ultoa_invert+0x6c>
    227c:	ea cf       	rjmp	.-44     	; 0x2252 <__ultoa_invert+0x58>
    227e:	b4 e0       	ldi	r27, 0x04	; 4
    2280:	a6 95       	lsr	r26
    2282:	97 95       	ror	r25
    2284:	87 95       	ror	r24
    2286:	77 95       	ror	r23
    2288:	67 95       	ror	r22
    228a:	ba 95       	dec	r27
    228c:	c9 f7       	brne	.-14     	; 0x2280 <__ultoa_invert+0x86>
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	61 05       	cpc	r22, r1
    2292:	71 05       	cpc	r23, r1
    2294:	08 95       	ret
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	0a 2e       	mov	r0, r26
    229c:	06 94       	lsr	r0
    229e:	57 95       	ror	r21
    22a0:	47 95       	ror	r20
    22a2:	37 95       	ror	r19
    22a4:	27 95       	ror	r18
    22a6:	ba 95       	dec	r27
    22a8:	c9 f7       	brne	.-14     	; 0x229c <__ultoa_invert+0xa2>
    22aa:	62 0f       	add	r22, r18
    22ac:	73 1f       	adc	r23, r19
    22ae:	84 1f       	adc	r24, r20
    22b0:	95 1f       	adc	r25, r21
    22b2:	a0 1d       	adc	r26, r0
    22b4:	08 95       	ret

000022b6 <__prologue_saves__>:
    22b6:	2f 92       	push	r2
    22b8:	3f 92       	push	r3
    22ba:	4f 92       	push	r4
    22bc:	5f 92       	push	r5
    22be:	6f 92       	push	r6
    22c0:	7f 92       	push	r7
    22c2:	8f 92       	push	r8
    22c4:	9f 92       	push	r9
    22c6:	af 92       	push	r10
    22c8:	bf 92       	push	r11
    22ca:	cf 92       	push	r12
    22cc:	df 92       	push	r13
    22ce:	ef 92       	push	r14
    22d0:	ff 92       	push	r15
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	ca 1b       	sub	r28, r26
    22e0:	db 0b       	sbc	r29, r27
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	09 94       	ijmp

000022ee <__epilogue_restores__>:
    22ee:	2a 88       	ldd	r2, Y+18	; 0x12
    22f0:	39 88       	ldd	r3, Y+17	; 0x11
    22f2:	48 88       	ldd	r4, Y+16	; 0x10
    22f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    22f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    22f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    22fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    22fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    22fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2300:	b9 84       	ldd	r11, Y+9	; 0x09
    2302:	c8 84       	ldd	r12, Y+8	; 0x08
    2304:	df 80       	ldd	r13, Y+7	; 0x07
    2306:	ee 80       	ldd	r14, Y+6	; 0x06
    2308:	fd 80       	ldd	r15, Y+5	; 0x05
    230a:	0c 81       	ldd	r16, Y+4	; 0x04
    230c:	1b 81       	ldd	r17, Y+3	; 0x03
    230e:	aa 81       	ldd	r26, Y+2	; 0x02
    2310:	b9 81       	ldd	r27, Y+1	; 0x01
    2312:	ce 0f       	add	r28, r30
    2314:	d1 1d       	adc	r29, r1
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	ed 01       	movw	r28, r26
    2322:	08 95       	ret

00002324 <_exit>:
    2324:	f8 94       	cli

00002326 <__stop_program>:
    2326:	ff cf       	rjmp	.-2      	; 0x2326 <__stop_program>
