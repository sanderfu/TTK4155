
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  0000249a  0000252e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000249a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800264  00800264  00002692  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002692  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b7a  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ada  00000000  00000000  0000763e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ecd  00000000  00000000  00009118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000828  00000000  00000000  0000afe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bee  00000000  00000000  0000b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b33  00000000  00000000  0000c3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000df31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <game_updateOled+0x60>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	ea e9       	ldi	r30, 0x9A	; 154
     3aa:	f4 e2       	ldi	r31, 0x24	; 36
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a4 36       	cpi	r26, 0x64	; 100
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	a4 e6       	ldi	r26, 0x64	; 100
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a2 3a       	cpi	r26, 0xA2	; 162
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x105e>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x105e>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "MCP2515.h"
#include "pwm.h"
#include "music.h"
#include "CAN.h"

ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <flag>
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:

int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     41a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     41e:	87 e5       	ldi	r24, 0x57	; 87
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	9a 87       	std	Y+10, r25	; 0x0a
     424:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     42a:	8d e0       	ldi	r24, 0x0D	; 13
     42c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     42e:	86 e1       	ldi	r24, 0x16	; 22
     430:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     432:	81 e2       	ldi	r24, 0x21	; 33
     434:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
	printf("---------------------------------------\n\r");
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	97 e0       	ldi	r25, 0x07	; 7
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x4e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x58>
     45e:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 15 04 	call	0x82a	; 0x82a <CAN_controller_setMode>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     46e:	0b e6       	ldi	r16, 0x6B	; 107
     470:	12 e0       	ldi	r17, 0x02	; 2

	//test_SRAM();            
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     472:	0e 94 2c 07 	call	0xe58	; 0xe58 <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     476:	d8 01       	movw	r26, r16
     478:	ed 91       	ld	r30, X+
     47a:	fc 91       	ld	r31, X
     47c:	80 81       	ld	r24, Z
     47e:	85 30       	cpi	r24, 0x05	; 5
     480:	71 f0       	breq	.+28     	; 0x49e <main+0x98>
     482:	18 f4       	brcc	.+6      	; 0x48a <main+0x84>
     484:	84 30       	cpi	r24, 0x04	; 4
     486:	31 f0       	breq	.+12     	; 0x494 <main+0x8e>
     488:	f4 cf       	rjmp	.-24     	; 0x472 <main+0x6c>
     48a:	86 30       	cpi	r24, 0x06	; 6
     48c:	69 f0       	breq	.+26     	; 0x4a8 <main+0xa2>
     48e:	87 30       	cpi	r24, 0x07	; 7
     490:	81 f0       	breq	.+32     	; 0x4b2 <main+0xac>
     492:	ef cf       	rjmp	.-34     	; 0x472 <main+0x6c>
			case HIGH_SCORE:
				break;
			case MUSIC:
				break;
			case GAME_1:
				game_play(1);
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 82 06 	call	0xd04	; 0xd04 <game_play>
				break;
     49c:	ea cf       	rjmp	.-44     	; 0x472 <main+0x6c>
			case GAME_2:
				game_play(2);
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 82 06 	call	0xd04	; 0xd04 <game_play>
				break;
     4a6:	e5 cf       	rjmp	.-54     	; 0x472 <main+0x6c>
			case HS1:
				game_displayHighscores(1);
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 af 06 	call	0xd5e	; 0xd5e <game_displayHighscores>
				break;
     4b0:	e0 cf       	rjmp	.-64     	; 0x472 <main+0x6c>
			case HS2:
				game_displayHighscores(2);
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 af 06 	call	0xd5e	; 0xd5e <game_displayHighscores>
				break;
     4ba:	db cf       	rjmp	.-74     	; 0x472 <main+0x6c>

000004bc <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	6c e2       	ldi	r22, 0x2C	; 44
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
     4cc:	08 95       	ret

000004ce <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     4d6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     4da:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	63 e0       	ldi	r22, 0x03	; 3
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__divmodhi4>
     4e8:	28 2f       	mov	r18, r24
     4ea:	39 2f       	mov	r19, r25
     4ec:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__data_end>
     4f0:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <__data_end+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     4f4:	21 30       	cpi	r18, 0x01	; 1
     4f6:	31 05       	cpc	r19, r1
     4f8:	01 f1       	breq	.+64     	; 0x53a <__stack+0x3b>
     4fa:	22 30       	cpi	r18, 0x02	; 2
     4fc:	31 05       	cpc	r19, r1
     4fe:	b9 f1       	breq	.+110    	; 0x56e <__stack+0x6f>
     500:	23 2b       	or	r18, r19
     502:	09 f0       	breq	.+2      	; 0x506 <__stack+0x7>
     504:	4d c0       	rjmp	.+154    	; 0x5a0 <__stack+0xa1>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     506:	f8 01       	movw	r30, r16
     508:	40 85       	ldd	r20, Z+8	; 0x08
     50a:	51 85       	ldd	r21, Z+9	; 0x09
     50c:	42 95       	swap	r20
     50e:	44 0f       	add	r20, r20
     510:	40 7e       	andi	r20, 0xE0	; 224
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	62 e3       	ldi	r22, 0x32	; 50
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 ee       	ldi	r24, 0xE0	; 224
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     520:	f8 01       	movw	r30, r16
     522:	60 85       	ldd	r22, Z+8	; 0x08
     524:	71 85       	ldd	r23, Z+9	; 0x09
     526:	76 95       	lsr	r23
     528:	67 95       	ror	r22
     52a:	76 95       	lsr	r23
     52c:	67 95       	ror	r22
     52e:	76 95       	lsr	r23
     530:	67 95       	ror	r22
     532:	81 e3       	ldi	r24, 0x31	; 49
     534:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     538:	33 c0       	rjmp	.+102    	; 0x5a0 <__stack+0xa1>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     53a:	f8 01       	movw	r30, r16
     53c:	40 85       	ldd	r20, Z+8	; 0x08
     53e:	51 85       	ldd	r21, Z+9	; 0x09
     540:	42 95       	swap	r20
     542:	44 0f       	add	r20, r20
     544:	40 7e       	andi	r20, 0xE0	; 224
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	62 e4       	ldi	r22, 0x42	; 66
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	80 ee       	ldi	r24, 0xE0	; 224
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     554:	f8 01       	movw	r30, r16
     556:	60 85       	ldd	r22, Z+8	; 0x08
     558:	71 85       	ldd	r23, Z+9	; 0x09
     55a:	76 95       	lsr	r23
     55c:	67 95       	ror	r22
     55e:	76 95       	lsr	r23
     560:	67 95       	ror	r22
     562:	76 95       	lsr	r23
     564:	67 95       	ror	r22
     566:	81 e4       	ldi	r24, 0x41	; 65
     568:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_controller_write>
				
				break;
     56c:	19 c0       	rjmp	.+50     	; 0x5a0 <__stack+0xa1>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     56e:	f8 01       	movw	r30, r16
     570:	40 85       	ldd	r20, Z+8	; 0x08
     572:	51 85       	ldd	r21, Z+9	; 0x09
     574:	42 95       	swap	r20
     576:	44 0f       	add	r20, r20
     578:	40 7e       	andi	r20, 0xE0	; 224
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	62 e5       	ldi	r22, 0x52	; 82
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	80 ee       	ldi	r24, 0xE0	; 224
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     588:	f8 01       	movw	r30, r16
     58a:	60 85       	ldd	r22, Z+8	; 0x08
     58c:	71 85       	ldd	r23, Z+9	; 0x09
     58e:	76 95       	lsr	r23
     590:	67 95       	ror	r22
     592:	76 95       	lsr	r23
     594:	67 95       	ror	r22
     596:	76 95       	lsr	r23
     598:	67 95       	ror	r22
     59a:	81 e5       	ldi	r24, 0x51	; 81
     59c:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     5a0:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     5a4:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	91 05       	cpc	r25, r1
     5ac:	79 f0       	breq	.+30     	; 0x5cc <__stack+0xcd>
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	91 05       	cpc	r25, r1
     5b2:	b1 f0       	breq	.+44     	; 0x5e0 <__stack+0xe1>
     5b4:	89 2b       	or	r24, r25
     5b6:	e9 f4       	brne	.+58     	; 0x5f2 <__stack+0xf3>
			case 0:
				//printf("\n\rtransmitting data length: %i\n\r", message->data_length);
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     5b8:	f8 01       	movw	r30, r16
     5ba:	42 85       	ldd	r20, Z+10	; 0x0a
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	65 e3       	ldi	r22, 0x35	; 53
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	8f e0       	ldi	r24, 0x0F	; 15
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
				break;
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <__stack+0xf3>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     5cc:	f8 01       	movw	r30, r16
     5ce:	42 85       	ldd	r20, Z+10	; 0x0a
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	65 e4       	ldi	r22, 0x45	; 69
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	8f e0       	ldi	r24, 0x0F	; 15
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
				break;
     5de:	09 c0       	rjmp	.+18     	; 0x5f2 <__stack+0xf3>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     5e0:	f8 01       	movw	r30, r16
     5e2:	42 85       	ldd	r20, Z+10	; 0x0a
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	65 e5       	ldi	r22, 0x55	; 85
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	8f e0       	ldi	r24, 0x0F	; 15
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     5f2:	f8 01       	movw	r30, r16
     5f4:	82 85       	ldd	r24, Z+10	; 0x0a
     5f6:	88 23       	and	r24, r24
     5f8:	61 f1       	breq	.+88     	; 0x652 <__stack+0x153>
     5fa:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     5fc:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     600:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	91 05       	cpc	r25, r1
     608:	71 f0       	breq	.+28     	; 0x626 <__stack+0x127>
     60a:	82 30       	cpi	r24, 0x02	; 2
     60c:	91 05       	cpc	r25, r1
     60e:	a1 f0       	breq	.+40     	; 0x638 <__stack+0x139>
     610:	89 2b       	or	r24, r25
     612:	d1 f4       	brne	.+52     	; 0x648 <__stack+0x149>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     614:	f8 01       	movw	r30, r16
     616:	ec 0f       	add	r30, r28
     618:	f1 1d       	adc	r31, r1
     61a:	60 81       	ld	r22, Z
     61c:	86 e3       	ldi	r24, 0x36	; 54
     61e:	8c 0f       	add	r24, r28
     620:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_controller_write>
				break;
     624:	11 c0       	rjmp	.+34     	; 0x648 <__stack+0x149>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     626:	f8 01       	movw	r30, r16
     628:	ec 0f       	add	r30, r28
     62a:	f1 1d       	adc	r31, r1
     62c:	60 81       	ld	r22, Z
     62e:	86 e4       	ldi	r24, 0x46	; 70
     630:	8c 0f       	add	r24, r28
     632:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_controller_write>
				break;
     636:	08 c0       	rjmp	.+16     	; 0x648 <__stack+0x149>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     638:	f8 01       	movw	r30, r16
     63a:	ec 0f       	add	r30, r28
     63c:	f1 1d       	adc	r31, r1
     63e:	60 81       	ld	r22, Z
     640:	86 e5       	ldi	r24, 0x56	; 86
     642:	8c 0f       	add	r24, r28
     644:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     648:	cf 5f       	subi	r28, 0xFF	; 255
     64a:	f8 01       	movw	r30, r16
     64c:	82 85       	ldd	r24, Z+10	; 0x0a
     64e:	8c 13       	cpse	r24, r28
     650:	d5 cf       	rjmp	.-86     	; 0x5fc <__stack+0xfd>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     652:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     656:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     66e:	82 e6       	ldi	r24, 0x62	; 98
     670:	0e 94 98 03 	call	0x730	; 0x730 <CAN_controller_read>
     674:	c8 2f       	mov	r28, r24
     676:	81 e6       	ldi	r24, 0x61	; 97
     678:	0e 94 98 03 	call	0x730	; 0x730 <CAN_controller_read>
     67c:	c2 95       	swap	r28
     67e:	c6 95       	lsr	r28
     680:	c7 70       	andi	r28, 0x07	; 7
     682:	28 e0       	ldi	r18, 0x08	; 8
     684:	82 9f       	mul	r24, r18
     686:	c0 01       	movw	r24, r0
     688:	11 24       	eor	r1, r1
     68a:	8c 0f       	add	r24, r28
     68c:	91 1d       	adc	r25, r1
     68e:	f7 01       	movw	r30, r14
     690:	91 87       	std	Z+9, r25	; 0x09
     692:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     694:	85 e6       	ldi	r24, 0x65	; 101
     696:	0e 94 98 03 	call	0x730	; 0x730 <CAN_controller_read>
     69a:	8f 70       	andi	r24, 0x0F	; 15
     69c:	f7 01       	movw	r30, r14
     69e:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     6a0:	82 85       	ldd	r24, Z+10	; 0x0a
     6a2:	88 23       	and	r24, r24
     6a4:	81 f0       	breq	.+32     	; 0x6c6 <CAN_receiveMessage+0x64>
     6a6:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     6a8:	0c 2f       	mov	r16, r28
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	86 e6       	ldi	r24, 0x66	; 102
     6ae:	8c 0f       	add	r24, r28
     6b0:	0e 94 98 03 	call	0x730	; 0x730 <CAN_controller_read>
     6b4:	f7 01       	movw	r30, r14
     6b6:	e0 0f       	add	r30, r16
     6b8:	f1 1f       	adc	r31, r17
     6ba:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     6bc:	cf 5f       	subi	r28, 0xFF	; 255
     6be:	f7 01       	movw	r30, r14
     6c0:	82 85       	ldd	r24, Z+10	; 0x0a
     6c2:	8c 13       	cpse	r24, r28
     6c4:	f1 cf       	rjmp	.-30     	; 0x6a8 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	08 95       	ret

000006d2 <CAN_sendInputData>:

void CAN_sendInputData() {
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	2b 97       	sbiw	r28, 0x0b	; 11
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	9a 87       	std	Y+10, r25	; 0x0a
     6ec:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     6ee:	86 e0       	ldi	r24, 0x06	; 6
     6f0:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     6f2:	e1 e7       	ldi	r30, 0x71	; 113
     6f4:	f2 e0       	ldi	r31, 0x02	; 2
     6f6:	80 81       	ld	r24, Z
     6f8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     6fa:	81 81       	ldd	r24, Z+1	; 0x01
     6fc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     6fe:	ef e6       	ldi	r30, 0x6F	; 111
     700:	f2 e0       	ldi	r31, 0x02	; 2
     702:	80 81       	ld	r24, Z
     704:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     706:	81 81       	ldd	r24, Z+1	; 0x01
     708:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     70a:	e7 e6       	ldi	r30, 0x67	; 103
     70c:	f2 e0       	ldi	r31, 0x02	; 2
     70e:	80 81       	ld	r24, Z
     710:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     712:	81 81       	ldd	r24, Z+1	; 0x01
     714:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     716:	ce 01       	movw	r24, r28
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	0e 94 67 02 	call	0x4ce	; 0x4ce <CAN_transmit_message>
     71e:	2b 96       	adiw	r28, 0x0b	; 11
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     730:	cf 93       	push	r28
     732:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
	SPI_masterWrite(addr);
     742:	8c 2f       	mov	r24, r28
     744:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     748:	0e 94 13 0a 	call	0x1426	; 0x1426 <SPI_masterRead>
     74c:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	84 e0       	ldi	r24, 0x04	; 4
     752:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
	
	return data;
}
     756:	8c 2f       	mov	r24, r28
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	d8 2f       	mov	r29, r24
     762:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	84 e0       	ldi	r24, 0x04	; 4
     768:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
	SPI_masterWrite(addr);
     772:	8d 2f       	mov	r24, r29
     774:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
	SPI_masterWrite(data);
     778:	8c 2f       	mov	r24, r28
     77a:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
	
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	d8 2f       	mov	r29, r24
     794:	16 2f       	mov	r17, r22
     796:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     7a0:	85 e0       	ldi	r24, 0x05	; 5
     7a2:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
		SPI_masterWrite(addr);
     7a6:	81 2f       	mov	r24, r17
     7a8:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
		SPI_masterWrite(mask);
     7ac:	8d 2f       	mov	r24, r29
     7ae:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
		SPI_masterWrite(data);
     7b2:	8c 2f       	mov	r24, r28
     7b4:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	84 e0       	ldi	r24, 0x04	; 4
     7bc:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>

}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	08 95       	ret

000007c8 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	84 e0       	ldi	r24, 0x04	; 4
     7cc:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
	printf("Before spi write");
     7d0:	83 e4       	ldi	r24, 0x43	; 67
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
	SPI_masterWrite(MCP_RESET);
     7dc:	80 ec       	ldi	r24, 0xC0	; 192
     7de:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
}
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	08 95       	ret

000007f0 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     7f0:	cf 93       	push	r28
     7f2:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	84 e0       	ldi	r24, 0x04	; 4
     7f8:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
	switch (buffer) {
     7fc:	c1 30       	cpi	r28, 0x01	; 1
     7fe:	41 f0       	breq	.+16     	; 0x810 <CAN_controller_RTS+0x20>
     800:	18 f0       	brcs	.+6      	; 0x808 <CAN_controller_RTS+0x18>
     802:	c2 30       	cpi	r28, 0x02	; 2
     804:	49 f0       	breq	.+18     	; 0x818 <CAN_controller_RTS+0x28>
     806:	0b c0       	rjmp	.+22     	; 0x81e <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     808:	81 e8       	ldi	r24, 0x81	; 129
     80a:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
			break;
     80e:	07 c0       	rjmp	.+14     	; 0x81e <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     810:	82 e8       	ldi	r24, 0x82	; 130
     812:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
			break;
     816:	03 c0       	rjmp	.+6      	; 0x81e <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     818:	84 e8       	ldi	r24, 0x84	; 132
     81a:	0e 94 0f 0a 	call	0x141e	; 0x141e <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	0e 94 18 0a 	call	0x1430	; 0x1430 <SPI_setChipSelect>
}
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     830:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     834:	8e e0       	ldi	r24, 0x0E	; 14
     836:	0e 94 98 03 	call	0x730	; 0x730 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     83a:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     83c:	80 38       	cpi	r24, 0x80	; 128
     83e:	69 f0       	breq	.+26     	; 0x85a <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     840:	1f 92       	push	r1
     842:	8f 93       	push	r24
     844:	84 e5       	ldi	r24, 0x54	; 84
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	9f 93       	push	r25
     84a:	8f 93       	push	r24
     84c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
		return;
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	38 c0       	rjmp	.+112    	; 0x8ca <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     85a:	4c 2f       	mov	r20, r28
     85c:	4c 60       	ori	r20, 0x0C	; 12
     85e:	6f e0       	ldi	r22, 0x0F	; 15
     860:	8e ee       	ldi	r24, 0xEE	; 238
     862:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	6b e2       	ldi	r22, 0x2B	; 43
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     870:	40 e6       	ldi	r20, 0x60	; 96
     872:	60 e6       	ldi	r22, 0x60	; 96
     874:	80 e6       	ldi	r24, 0x60	; 96
     876:	0e 94 c6 03 	call	0x78c	; 0x78c <CAN_controller_bitModify>
     87a:	2f ef       	ldi	r18, 0xFF	; 255
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	21 50       	subi	r18, 0x01	; 1
     882:	80 40       	sbci	r24, 0x00	; 0
     884:	90 40       	sbci	r25, 0x00	; 0
     886:	e1 f7       	brne	.-8      	; 0x880 <CAN_controller_setMode+0x56>
     888:	00 c0       	rjmp	.+0      	; 0x88a <CAN_controller_setMode+0x60>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     88c:	8e e0       	ldi	r24, 0x0E	; 14
     88e:	0e 94 98 03 	call	0x730	; 0x730 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     892:	d8 2f       	mov	r29, r24
     894:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     896:	cd 17       	cp	r28, r29
     898:	61 f0       	breq	.+24     	; 0x8b2 <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     89a:	1f 92       	push	r1
     89c:	df 93       	push	r29
     89e:	8f e6       	ldi	r24, 0x6F	; 111
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	9f 93       	push	r25
     8a4:	8f 93       	push	r24
     8a6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     8b2:	1f 92       	push	r1
     8b4:	df 93       	push	r29
     8b6:	8f e8       	ldi	r24, 0x8F	; 143
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	9f 93       	push	r25
     8bc:	8f 93       	push	r24
     8be:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     8d0:	0e 94 06 0a 	call	0x140c	; 0x140c <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     8d4:	80 e4       	ldi	r24, 0x40	; 64
     8d6:	0e 94 15 04 	call	0x82a	; 0x82a <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     8da:	8b b7       	in	r24, 0x3b	; 59
     8dc:	80 64       	ori	r24, 0x40	; 64
     8de:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     8e0:	85 b7       	in	r24, 0x35	; 53
     8e2:	82 60       	ori	r24, 0x02	; 2
     8e4:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     8e6:	85 b7       	in	r24, 0x35	; 53
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     8ec:	81 b3       	in	r24, 0x11	; 17
     8ee:	84 70       	andi	r24, 0x04	; 4
     8f0:	81 bb       	out	0x11, r24	; 17
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <CAN_controller_init+0x28>
     900:	00 c0       	rjmp	.+0      	; 0x902 <CAN_controller_init+0x32>
     902:	00 c0       	rjmp	.+0      	; 0x904 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     904:	8e e9       	ldi	r24, 0x9E	; 158
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	9f 93       	push	r25
     90a:	8f 93       	push	r24
     90c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     910:	8e e0       	ldi	r24, 0x0E	; 14
     912:	0e 94 98 03 	call	0x730	; 0x730 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     916:	1f 92       	push	r1
     918:	8f 93       	push	r24
     91a:	87 eb       	ldi	r24, 0xB7	; 183
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	9f 93       	push	r25
     920:	8f 93       	push	r24
     922:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>

}
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	08 95       	ret

00000934 <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     934:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <gameActive>
     938:	ef e7       	ldi	r30, 0x7F	; 127
     93a:	f2 e0       	ldi	r31, 0x02	; 2
     93c:	a4 e8       	ldi	r26, 0x84	; 132
     93e:	b2 e0       	ldi	r27, 0x02	; 2
     940:	84 e8       	ldi	r24, 0x84	; 132
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	11 92       	st	Z+, r1
     946:	1d 92       	st	X+, r1
     948:	e8 17       	cp	r30, r24
     94a:	f9 07       	cpc	r31, r25
     94c:	d9 f7       	brne	.-10     	; 0x944 <game_init+0x10>
     94e:	08 95       	ret

00000950 <game_countdown>:
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	1f 92       	push	r1
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	4a e0       	ldi	r20, 0x0A	; 10
     960:	be 01       	movw	r22, r28
     962:	6f 5f       	subi	r22, 0xFF	; 255
     964:	7f 4f       	sbci	r23, 0xFF	; 255
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
     96e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
     972:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
     976:	0b e6       	ldi	r16, 0x6B	; 107
     978:	12 e0       	ldi	r17, 0x02	; 2
     97a:	f8 01       	movw	r30, r16
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	02 96       	adiw	r24, 0x02	; 2
     982:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     996:	ff ef       	ldi	r31, 0xFF	; 255
     998:	2f ef       	ldi	r18, 0xFF	; 255
     99a:	8e e0       	ldi	r24, 0x0E	; 14
     99c:	f1 50       	subi	r31, 0x01	; 1
     99e:	20 40       	sbci	r18, 0x00	; 0
     9a0:	80 40       	sbci	r24, 0x00	; 0
     9a2:	e1 f7       	brne	.-8      	; 0x99c <game_countdown+0x4c>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <game_countdown+0x56>
     9a6:	00 00       	nop
     9a8:	4a e0       	ldi	r20, 0x0A	; 10
     9aa:	be 01       	movw	r22, r28
     9ac:	6f 5f       	subi	r22, 0xFF	; 255
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
     9b8:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
     9bc:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
     9c0:	f8 01       	movw	r30, r16
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	02 96       	adiw	r24, 0x02	; 2
     9c8:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     9dc:	ff ef       	ldi	r31, 0xFF	; 255
     9de:	2f ef       	ldi	r18, 0xFF	; 255
     9e0:	8e e0       	ldi	r24, 0x0E	; 14
     9e2:	f1 50       	subi	r31, 0x01	; 1
     9e4:	20 40       	sbci	r18, 0x00	; 0
     9e6:	80 40       	sbci	r24, 0x00	; 0
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <game_countdown+0x92>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <game_countdown+0x9c>
     9ec:	00 00       	nop
     9ee:	4a e0       	ldi	r20, 0x0A	; 10
     9f0:	be 01       	movw	r22, r28
     9f2:	6f 5f       	subi	r22, 0xFF	; 255
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
     9fe:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
     a02:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
     a06:	f8 01       	movw	r30, r16
     a08:	80 81       	ld	r24, Z
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	02 96       	adiw	r24, 0x02	; 2
     a0e:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
     a1a:	ce 01       	movw	r24, r28
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     a22:	ff ef       	ldi	r31, 0xFF	; 255
     a24:	2f ef       	ldi	r18, 0xFF	; 255
     a26:	8e e0       	ldi	r24, 0x0E	; 14
     a28:	f1 50       	subi	r31, 0x01	; 1
     a2a:	20 40       	sbci	r18, 0x00	; 0
     a2c:	80 40       	sbci	r24, 0x00	; 0
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <game_countdown+0xd8>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <game_countdown+0xe2>
     a32:	00 00       	nop
     a34:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
     a38:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
     a3c:	f8 01       	movw	r30, r16
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	02 96       	adiw	r24, 0x02	; 2
     a44:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
     a50:	82 ec       	ldi	r24, 0xC2	; 194
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     a58:	ff ef       	ldi	r31, 0xFF	; 255
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	8e e0       	ldi	r24, 0x0E	; 14
     a5e:	f1 50       	subi	r31, 0x01	; 1
     a60:	20 40       	sbci	r18, 0x00	; 0
     a62:	80 40       	sbci	r24, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <game_countdown+0x10e>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <game_countdown+0x118>
     a68:	00 00       	nop
     a6a:	0f 90       	pop	r0
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	08 95       	ret

00000a76 <game_initialCANMessage>:
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	2b 97       	sbiw	r28, 0x0b	; 11
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	9a 87       	std	Y+10, r25	; 0x0a
     a90:	89 87       	std	Y+9, r24	; 0x09
     a92:	1b 86       	std	Y+11, r1	; 0x0b
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 67 02 	call	0x4ce	; 0x4ce <CAN_transmit_message>
     a9c:	2b 96       	adiw	r28, 0x0b	; 11
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <game_newgame>:
     aae:	f8 94       	cli
     ab0:	0e 94 a8 04 	call	0x950	; 0x950 <game_countdown>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <gameActive>
     aba:	e9 e8       	ldi	r30, 0x89	; 137
     abc:	f2 e0       	ldi	r31, 0x02	; 2
     abe:	8a e0       	ldi	r24, 0x0A	; 10
     ac0:	80 83       	st	Z, r24
     ac2:	12 82       	std	Z+2, r1	; 0x02
     ac4:	83 e6       	ldi	r24, 0x63	; 99
     ac6:	81 83       	std	Z+1, r24	; 0x01
     ac8:	0e 94 3b 05 	call	0xa76	; 0xa76 <game_initialCANMessage>
     acc:	78 94       	sei
     ace:	08 95       	ret

00000ad0 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     ad0:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <flag>
     ad4:	88 23       	and	r24, r24
     ad6:	d9 f0       	breq	.+54     	; 0xb0e <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     ad8:	f8 94       	cli
		printf("Message received");
     ada:	85 ec       	ldi	r24, 0xC5	; 197
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	9f 93       	push	r25
     ae0:	8f 93       	push	r24
     ae2:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
		flag=0;
     ae6:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <flag>
		CAN_receiveMessage(&received_message);
     aea:	83 e7       	ldi	r24, 0x73	; 115
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 31 03 	call	0x662	; 0x662 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     af2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     af6:	a3 e7       	ldi	r26, 0x73	; 115
     af8:	b2 e0       	ldi	r27, 0x02	; 2
     afa:	8c 91       	ld	r24, X
     afc:	e9 e8       	ldi	r30, 0x89	; 137
     afe:	f2 e0       	ldi	r31, 0x02	; 2
     b00:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     b02:	11 96       	adiw	r26, 0x01	; 1
     b04:	8c 91       	ld	r24, X
     b06:	82 83       	std	Z+2, r24	; 0x02
		sei();
     b08:	78 94       	sei
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	08 95       	ret

00000b10 <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <game_updateOled+0xa>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <game_updateOled+0xc>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     b22:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
	oled_home();
     b26:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     b2a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <currentMenu>
     b2e:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <currentMenu+0x1>
     b32:	02 96       	adiw	r24, 0x02	; 2
     b34:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
	switch(gameID) {
     b40:	11 30       	cpi	r17, 0x01	; 1
     b42:	19 f0       	breq	.+6      	; 0xb4a <game_updateOled+0x3a>
     b44:	12 30       	cpi	r17, 0x02	; 2
     b46:	51 f1       	breq	.+84     	; 0xb9c <game_updateOled+0x8c>
     b48:	3a c0       	rjmp	.+116    	; 0xbbe <game_updateOled+0xae>
		case 1:
			oled_print("Score: ");
     b4a:	86 ed       	ldi	r24, 0xD6	; 214
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
			itoa(gameData.score,score_string,10);
     b52:	09 e8       	ldi	r16, 0x89	; 137
     b54:	12 e0       	ldi	r17, 0x02	; 2
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b56:	f8 01       	movw	r30, r16
     b58:	80 81       	ld	r24, Z
     b5a:	4a e0       	ldi	r20, 0x0A	; 10
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
			oled_print(score_string);
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
			oled_gotoLine(5);
     b70:	85 e0       	ldi	r24, 0x05	; 5
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
			oled_print("Time: ");
     b78:	8e ed       	ldi	r24, 0xDE	; 222
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     b80:	f8 01       	movw	r30, r16
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	4a e0       	ldi	r20, 0x0A	; 10
     b86:	be 01       	movw	r22, r28
     b88:	6d 5f       	subi	r22, 0xFD	; 253
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     b92:	ce 01       	movw	r24, r28
     b94:	03 96       	adiw	r24, 0x03	; 3
     b96:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
			break;
     b9a:	11 c0       	rjmp	.+34     	; 0xbbe <game_updateOled+0xae>
		case 2:
			oled_print("Air time: ");
     b9c:	85 ee       	ldi	r24, 0xE5	; 229
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     ba4:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <gameData+0x2>
     ba8:	4a e0       	ldi	r20, 0x0A	; 10
     baa:	be 01       	movw	r22, r28
     bac:	6d 5f       	subi	r22, 0xFD	; 253
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     bb6:	ce 01       	movw	r24, r28
     bb8:	03 96       	adiw	r24, 0x03	; 3
     bba:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
			break;

	}
	
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <game_sendStop>:

void game_sendStop() {
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	2b 97       	sbiw	r28, 0x0b	; 11
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9a 87       	std	Y+10, r25	; 0x0a
     bea:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     bec:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 67 02 	call	0x4ce	; 0x4ce <CAN_transmit_message>
}
     bf6:	2b 96       	adiw	r28, 0x0b	; 11
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <game_finished>:
void game_finished(uint8_t gameID) {
     c08:	cf 93       	push	r28
     c0a:	c8 2f       	mov	r28, r24
	cli();
     c0c:	f8 94       	cli
	game_sendStop();
     c0e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <game_sendStop>
	oled_reset();
     c12:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
	oled_home();
     c16:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
	oled_gotoLine(3);
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
	oled_print("Game over");
     c22:	80 ef       	ldi	r24, 0xF0	; 240
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
	oled_gotoLine(4);
     c2a:	84 e0       	ldi	r24, 0x04	; 4
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
	oled_print("Maybe HS?");
     c32:	8a ef       	ldi	r24, 0xFA	; 250
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     c3a:	2f ef       	ldi	r18, 0xFF	; 255
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	9c e2       	ldi	r25, 0x2C	; 44
     c40:	21 50       	subi	r18, 0x01	; 1
     c42:	80 40       	sbci	r24, 0x00	; 0
     c44:	90 40       	sbci	r25, 0x00	; 0
     c46:	e1 f7       	brne	.-8      	; 0xc40 <game_finished+0x38>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <game_finished+0x42>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <game_finished+0x44>
	_delay_ms(3000);
	gameActive=0;
     c4c:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <gameActive>
	
	menu_init();
     c50:	0e 94 5f 08 	call	0x10be	; 0x10be <menu_init>
	switch (gameID) {
     c54:	c1 30       	cpi	r28, 0x01	; 1
     c56:	51 f0       	breq	.+20     	; 0xc6c <game_finished+0x64>
     c58:	c2 30       	cpi	r28, 0x02	; 2
     c5a:	09 f0       	breq	.+2      	; 0xc5e <game_finished+0x56>
     c5c:	50 c0       	rjmp	.+160    	; 0xcfe <game_finished+0xf6>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     c5e:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <gameData+0x2>
     c62:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <highScores2>
     c66:	83 17       	cp	r24, r19
     c68:	48 f5       	brcc	.+82     	; 0xcbc <game_finished+0xb4>
     c6a:	33 c0       	rjmp	.+102    	; 0xcd2 <game_finished+0xca>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     c6c:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <gameData>
     c70:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <highScores>
     c74:	83 17       	cp	r24, r19
     c76:	58 f0       	brcs	.+22     	; 0xc8e <game_finished+0x86>
     c78:	e0 e8       	ldi	r30, 0x80	; 128
     c7a:	f2 e0       	ldi	r31, 0x02	; 2
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     c80:	21 91       	ld	r18, Z+
     c82:	23 17       	cp	r18, r19
     c84:	b0 f4       	brcc	.+44     	; 0xcb2 <game_finished+0xaa>
					for (int a = 4; a>i; a--) {
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	91 05       	cpc	r25, r1
     c8a:	1c f0       	brlt	.+6      	; 0xc92 <game_finished+0x8a>
     c8c:	0d c0       	rjmp	.+26     	; 0xca8 <game_finished+0xa0>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	e3 e8       	ldi	r30, 0x83	; 131
     c94:	f2 e0       	ldi	r31, 0x02	; 2
     c96:	44 e0       	ldi	r20, 0x04	; 4
     c98:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     c9a:	41 50       	subi	r20, 0x01	; 1
     c9c:	51 09       	sbc	r21, r1
     c9e:	22 91       	ld	r18, -Z
     ca0:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     ca2:	84 17       	cp	r24, r20
     ca4:	95 07       	cpc	r25, r21
     ca6:	cc f3       	brlt	.-14     	; 0xc9a <game_finished+0x92>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     ca8:	fc 01       	movw	r30, r24
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	fd 4f       	sbci	r31, 0xFD	; 253
     cae:	30 83       	st	Z, r19
					break;
     cb0:	26 c0       	rjmp	.+76     	; 0xcfe <game_finished+0xf6>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	85 30       	cpi	r24, 0x05	; 5
     cb6:	91 05       	cpc	r25, r1
     cb8:	19 f7       	brne	.-58     	; 0xc80 <game_finished+0x78>
     cba:	21 c0       	rjmp	.+66     	; 0xcfe <game_finished+0xf6>
     cbc:	e5 e8       	ldi	r30, 0x85	; 133
     cbe:	f2 e0       	ldi	r31, 0x02	; 2
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     cc4:	21 91       	ld	r18, Z+
     cc6:	23 17       	cp	r18, r19
     cc8:	b0 f4       	brcc	.+44     	; 0xcf6 <game_finished+0xee>
					for (int a = 4; a>i; a--) {
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	91 05       	cpc	r25, r1
     cce:	1c f0       	brlt	.+6      	; 0xcd6 <game_finished+0xce>
     cd0:	0d c0       	rjmp	.+26     	; 0xcec <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	e8 e8       	ldi	r30, 0x88	; 136
     cd8:	f2 e0       	ldi	r31, 0x02	; 2
     cda:	44 e0       	ldi	r20, 0x04	; 4
     cdc:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     cde:	41 50       	subi	r20, 0x01	; 1
     ce0:	51 09       	sbc	r21, r1
     ce2:	22 91       	ld	r18, -Z
     ce4:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     ce6:	84 17       	cp	r24, r20
     ce8:	95 07       	cpc	r25, r21
     cea:	cc f3       	brlt	.-14     	; 0xcde <game_finished+0xd6>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     cec:	fc 01       	movw	r30, r24
     cee:	ec 57       	subi	r30, 0x7C	; 124
     cf0:	fd 4f       	sbci	r31, 0xFD	; 253
     cf2:	30 83       	st	Z, r19
					break;
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <game_finished+0xf6>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	91 05       	cpc	r25, r1
     cfc:	19 f7       	brne	.-58     	; 0xcc4 <game_finished+0xbc>
			break;
		
	}
	
	
	sei();
     cfe:	78 94       	sei
}
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <game_play>:
void game_play(uint8_t gameID)
{
     d04:	cf 93       	push	r28
     d06:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     d08:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <gameActive>
     d0c:	81 11       	cpse	r24, r1
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <game_play+0x10>
	{
		game_newgame();	
     d10:	0e 94 57 05 	call	0xaae	; 0xaae <game_newgame>
	}
	if (buttons.right_button) {
     d14:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <buttons+0x1>
     d18:	88 23       	and	r24, r24
     d1a:	21 f0       	breq	.+8      	; 0xd24 <game_play+0x20>
		gameActive = 0;
     d1c:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <gameActive>
		menu_init();
     d20:	0e 94 5f 08 	call	0x10be	; 0x10be <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     d24:	0e 94 69 03 	call	0x6d2	; 0x6d2 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     d28:	0e 94 68 05 	call	0xad0	; 0xad0 <game_recieveGameData>
	game_updateOled(gameID);
     d2c:	8c 2f       	mov	r24, r28
     d2e:	0e 94 88 05 	call	0xb10	; 0xb10 <game_updateOled>
	switch (gameID) {
     d32:	c1 30       	cpi	r28, 0x01	; 1
     d34:	19 f0       	breq	.+6      	; 0xd3c <game_play+0x38>
     d36:	c2 30       	cpi	r28, 0x02	; 2
     d38:	49 f0       	breq	.+18     	; 0xd4c <game_play+0x48>
     d3a:	0f c0       	rjmp	.+30     	; 0xd5a <game_play+0x56>
		case 1:
			if (gameData.playtime==10) {
     d3c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <gameData+0x2>
     d40:	8a 30       	cpi	r24, 0x0A	; 10
     d42:	59 f4       	brne	.+22     	; 0xd5a <game_play+0x56>
				game_finished(gameID);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	0e 94 04 06 	call	0xc08	; 0xc08 <game_finished>
     d4a:	07 c0       	rjmp	.+14     	; 0xd5a <game_play+0x56>
			}
			break;
		case 2:
			if (gameData.score <10) {
     d4c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <gameData>
     d50:	8a 30       	cpi	r24, 0x0A	; 10
     d52:	18 f4       	brcc	.+6      	; 0xd5a <game_play+0x56>
				game_finished(gameID);
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	0e 94 04 06 	call	0xc08	; 0xc08 <game_finished>
			}
			break;
	}
	
	
}
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     d5e:	bf 92       	push	r11
     d60:	cf 92       	push	r12
     d62:	df 92       	push	r13
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	00 d0       	rcall	.+0      	; 0xd72 <game_displayHighscores+0x14>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	b8 2e       	mov	r11, r24
	oled_reset();
     d78:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
	oled_home();
     d7c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d80:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <currentMenu>
     d84:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <currentMenu+0x1>
     d88:	02 96       	adiw	r24, 0x02	; 2
     d8a:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     d8e:	0f 2e       	mov	r0, r31
     d90:	ff e7       	ldi	r31, 0x7F	; 127
     d92:	cf 2e       	mov	r12, r31
     d94:	f2 e0       	ldi	r31, 0x02	; 2
     d96:	df 2e       	mov	r13, r31
     d98:	f0 2d       	mov	r31, r0
     d9a:	0f 2e       	mov	r0, r31
     d9c:	f4 e8       	ldi	r31, 0x84	; 132
     d9e:	ef 2e       	mov	r14, r31
     da0:	f2 e0       	ldi	r31, 0x02	; 2
     da2:	ff 2e       	mov	r15, r31
     da4:	f0 2d       	mov	r31, r0
	
	for (int i=0;i<5;i++)
     da6:	00 e0       	ldi	r16, 0x00	; 0
     da8:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_gotoLine(3+i);
     daa:	c8 01       	movw	r24, r16
     dac:	03 96       	adiw	r24, 0x03	; 3
     dae:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
		oled_print("Score ");
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     dba:	0f 5f       	subi	r16, 0xFF	; 255
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	4a e0       	ldi	r20, 0x0A	; 10
     dc0:	be 01       	movw	r22, r28
     dc2:	6f 5f       	subi	r22, 0xFF	; 255
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	c8 01       	movw	r24, r16
     dc8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
		oled_print(num);
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
		oled_print(": ");
     dd4:	82 ee       	ldi	r24, 0xE2	; 226
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
		switch (gameID) {
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	b8 16       	cp	r11, r24
     de0:	21 f0       	breq	.+8      	; 0xdea <game_displayHighscores+0x8c>
     de2:	e2 e0       	ldi	r30, 0x02	; 2
     de4:	be 16       	cp	r11, r30
     de6:	59 f0       	breq	.+22     	; 0xdfe <game_displayHighscores+0xa0>
     de8:	13 c0       	rjmp	.+38     	; 0xe10 <game_displayHighscores+0xb2>
     dea:	f6 01       	movw	r30, r12
     dec:	80 81       	ld	r24, Z
     dee:	4a e0       	ldi	r20, 0x0A	; 10
     df0:	be 01       	movw	r22, r28
     df2:	6f 5f       	subi	r22, 0xFF	; 255
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <game_displayHighscores+0xb2>
     dfe:	f7 01       	movw	r30, r14
     e00:	80 81       	ld	r24, Z
     e02:	4a e0       	ldi	r20, 0x0A	; 10
     e04:	be 01       	movw	r22, r28
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
     e18:	ff ef       	ldi	r31, 0xFF	; 255
     e1a:	cf 1a       	sub	r12, r31
     e1c:	df 0a       	sbc	r13, r31
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	e8 1a       	sub	r14, r24
     e22:	f8 0a       	sbc	r15, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
     e24:	05 30       	cpi	r16, 0x05	; 5
     e26:	11 05       	cpc	r17, r1
     e28:	09 f0       	breq	.+2      	; 0xe2c <game_displayHighscores+0xce>
     e2a:	bf cf       	rjmp	.-130    	; 0xdaa <game_displayHighscores+0x4c>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	08 95       	ret

00000e44 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     e44:	85 b7       	in	r24, 0x35	; 53
     e46:	8f 7e       	andi	r24, 0xEF	; 239
     e48:	85 bf       	out	0x35, r24	; 53
     e4a:	84 b7       	in	r24, 0x34	; 52
     e4c:	8f 7d       	andi	r24, 0xDF	; 223
     e4e:	84 bf       	out	0x34, r24	; 52
     e50:	86 b7       	in	r24, 0x36	; 54
     e52:	8f 77       	andi	r24, 0x7F	; 127
     e54:	86 bf       	out	0x36, r24	; 54
     e56:	08 95       	ret

00000e58 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     e58:	88 b1       	in	r24, 0x08	; 8
     e5a:	88 68       	ori	r24, 0x88	; 136
     e5c:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
     e5e:	85 b7       	in	r24, 0x35	; 53
     e60:	80 62       	ori	r24, 0x20	; 32
     e62:	85 bf       	out	0x35, r24	; 53
     e64:	88 95       	sleep
     e66:	85 b7       	in	r24, 0x35	; 53
     e68:	8f 7d       	andi	r24, 0xDF	; 223
     e6a:	85 bf       	out	0x35, r24	; 53
     e6c:	08 95       	ret

00000e6e <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     e74:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     e7e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <joystickOffsetY>
     e82:	08 95       	ret

00000e84 <joystick_readPosition>:
}
void joystick_readPosition() {
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     e96:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     e9e:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     ea0:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <joystickOffsetX>
     ea4:	c6 17       	cp	r28, r22
     ea6:	80 f4       	brcc	.+32     	; 0xec8 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	2c 2f       	mov	r18, r28
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	26 1b       	sub	r18, r22
     eb0:	37 0b       	sbc	r19, r23
     eb2:	44 e6       	ldi	r20, 0x64	; 100
     eb4:	42 9f       	mul	r20, r18
     eb6:	c0 01       	movw	r24, r0
     eb8:	43 9f       	mul	r20, r19
     eba:	90 0d       	add	r25, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__divmodhi4>
     ec2:	60 93 67 02 	sts	0x0267, r22	; 0x800267 <joystick_pos>
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     ec8:	46 2f       	mov	r20, r22
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	2c 2f       	mov	r18, r28
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	24 1b       	sub	r18, r20
     ed2:	35 0b       	sbc	r19, r21
     ed4:	64 e6       	ldi	r22, 0x64	; 100
     ed6:	62 9f       	mul	r22, r18
     ed8:	c0 01       	movw	r24, r0
     eda:	63 9f       	mul	r22, r19
     edc:	90 0d       	add	r25, r0
     ede:	11 24       	eor	r1, r1
     ee0:	6f ef       	ldi	r22, 0xFF	; 255
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	64 1b       	sub	r22, r20
     ee6:	75 0b       	sbc	r23, r21
     ee8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__divmodhi4>
     eec:	60 93 67 02 	sts	0x0267, r22	; 0x800267 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
     ef0:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <joystickOffsetY>
     ef4:	e2 17       	cp	r30, r18
     ef6:	88 f4       	brcc	.+34     	; 0xf1a <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     ef8:	62 2f       	mov	r22, r18
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	4e 2f       	mov	r20, r30
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	46 1b       	sub	r20, r22
     f02:	57 0b       	sbc	r21, r23
     f04:	24 e6       	ldi	r18, 0x64	; 100
     f06:	24 9f       	mul	r18, r20
     f08:	c0 01       	movw	r24, r0
     f0a:	25 9f       	mul	r18, r21
     f0c:	90 0d       	add	r25, r0
     f0e:	11 24       	eor	r1, r1
     f10:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__divmodhi4>
     f14:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <joystick_pos+0x1>
     f18:	13 c0       	rjmp	.+38     	; 0xf40 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	4e 2f       	mov	r20, r30
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	42 1b       	sub	r20, r18
     f22:	53 0b       	sbc	r21, r19
     f24:	64 e6       	ldi	r22, 0x64	; 100
     f26:	64 9f       	mul	r22, r20
     f28:	c0 01       	movw	r24, r0
     f2a:	65 9f       	mul	r22, r21
     f2c:	90 0d       	add	r25, r0
     f2e:	11 24       	eor	r1, r1
     f30:	6f ef       	ldi	r22, 0xFF	; 255
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	62 1b       	sub	r22, r18
     f36:	73 0b       	sbc	r23, r19
     f38:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__divmodhi4>
     f3c:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     f40:	c7 e6       	ldi	r28, 0x67	; 103
     f42:	d2 e0       	ldi	r29, 0x02	; 2
     f44:	68 81       	ld	r22, Y
     f46:	06 2e       	mov	r0, r22
     f48:	00 0c       	add	r0, r0
     f4a:	77 0b       	sbc	r23, r23
     f4c:	88 0b       	sbc	r24, r24
     f4e:	99 0b       	sbc	r25, r25
     f50:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__floatsisf>
     f54:	6b 01       	movw	r12, r22
     f56:	7c 01       	movw	r14, r24
     f58:	69 81       	ldd	r22, Y+1	; 0x01
     f5a:	06 2e       	mov	r0, r22
     f5c:	00 0c       	add	r0, r0
     f5e:	77 0b       	sbc	r23, r23
     f60:	88 0b       	sbc	r24, r24
     f62:	99 0b       	sbc	r25, r25
     f64:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__floatsisf>
     f68:	a7 01       	movw	r20, r14
     f6a:	96 01       	movw	r18, r12
     f6c:	0e 94 df 0a 	call	0x15be	; 0x15be <atan2>
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	44 eb       	ldi	r20, 0xB4	; 180
     f76:	53 e4       	ldi	r21, 0x43	; 67
     f78:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     f88:	23 ec       	ldi	r18, 0xC3	; 195
     f8a:	35 ef       	ldi	r19, 0xF5	; 245
     f8c:	48 e4       	ldi	r20, 0x48	; 72
     f8e:	50 e4       	ldi	r21, 0x40	; 64
     f90:	0e 94 3e 0b 	call	0x167c	; 0x167c <__divsf3>
     f94:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fixsfsi>
     f98:	7b 83       	std	Y+3, r23	; 0x03
     f9a:	6a 83       	std	Y+2, r22	; 0x02
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	08 95       	ret

00000faa <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     faa:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     fac:	80 81       	ld	r24, Z
     fae:	94 e0       	ldi	r25, 0x04	; 4
     fb0:	98 0f       	add	r25, r24
     fb2:	99 30       	cpi	r25, 0x09	; 9
     fb4:	20 f4       	brcc	.+8      	; 0xfbe <joystick_getDirection+0x14>
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	9c 5f       	subi	r25, 0xFC	; 252
     fba:	99 30       	cpi	r25, 0x09	; 9
     fbc:	90 f0       	brcs	.+36     	; 0xfe2 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     fbe:	85 30       	cpi	r24, 0x05	; 5
     fc0:	2c f0       	brlt	.+10     	; 0xfcc <joystick_getDirection+0x22>
     fc2:	81 81       	ldd	r24, Z+1	; 0x01
     fc4:	8f 5c       	subi	r24, 0xCF	; 207
     fc6:	83 36       	cpi	r24, 0x63	; 99
     fc8:	38 f4       	brcc	.+14     	; 0xfd8 <joystick_getDirection+0x2e>
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     fcc:	8c 3f       	cpi	r24, 0xFC	; 252
     fce:	24 f4       	brge	.+8      	; 0xfd8 <joystick_getDirection+0x2e>
     fd0:	81 81       	ldd	r24, Z+1	; 0x01
     fd2:	8f 5c       	subi	r24, 0xCF	; 207
     fd4:	83 36       	cpi	r24, 0x63	; 99
     fd6:	48 f0       	brcs	.+18     	; 0xfea <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     fd8:	81 81       	ldd	r24, Z+1	; 0x01
     fda:	8c 3f       	cpi	r24, 0xFC	; 252
     fdc:	44 f0       	brlt	.+16     	; 0xfee <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     fee:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     ff0:	08 95       	ret

00000ff2 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     ff2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     ff6:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <currentMenu+0x3>
     ffa:	94 30       	cpi	r25, 0x04	; 4
     ffc:	09 f0       	breq	.+2      	; 0x1000 <navigateMenu+0xe>
     ffe:	5c c0       	rjmp	.+184    	; 0x10b8 <navigateMenu+0xc6>
			switch (dir) {
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	e1 f1       	breq	.+120    	; 0x107c <navigateMenu+0x8a>
    1004:	60 f1       	brcs	.+88     	; 0x105e <navigateMenu+0x6c>
    1006:	82 30       	cpi	r24, 0x02	; 2
    1008:	c9 f0       	breq	.+50     	; 0x103c <navigateMenu+0x4a>
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	09 f0       	breq	.+2      	; 0x1010 <navigateMenu+0x1e>
    100e:	54 c0       	rjmp	.+168    	; 0x10b8 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    1010:	eb e6       	ldi	r30, 0x6B	; 107
    1012:	f2 e0       	ldi	r31, 0x02	; 2
    1014:	92 81       	ldd	r25, Z+2	; 0x02
    1016:	49 2f       	mov	r20, r25
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	01 90       	ld	r0, Z+
    101c:	f0 81       	ld	r31, Z
    101e:	e0 2d       	mov	r30, r0
    1020:	20 a1       	ldd	r18, Z+32	; 0x20
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	21 50       	subi	r18, 0x01	; 1
    1026:	31 09       	sbc	r19, r1
    1028:	42 17       	cp	r20, r18
    102a:	53 07       	cpc	r21, r19
    102c:	24 f4       	brge	.+8      	; 0x1036 <navigateMenu+0x44>
					currentMenu.childIndex++;
    102e:	9f 5f       	subi	r25, 0xFF	; 255
    1030:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <currentMenu+0x2>
    1034:	41 c0       	rjmp	.+130    	; 0x10b8 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1036:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <currentMenu+0x2>
    103a:	3e c0       	rjmp	.+124    	; 0x10b8 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    103c:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <currentMenu+0x2>
    1040:	99 23       	and	r25, r25
    1042:	21 f0       	breq	.+8      	; 0x104c <navigateMenu+0x5a>
					currentMenu.childIndex--;
    1044:	91 50       	subi	r25, 0x01	; 1
    1046:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <currentMenu+0x2>
    104a:	36 c0       	rjmp	.+108    	; 0x10b8 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    104c:	eb e6       	ldi	r30, 0x6B	; 107
    104e:	f2 e0       	ldi	r31, 0x02	; 2
    1050:	a0 81       	ld	r26, Z
    1052:	b1 81       	ldd	r27, Z+1	; 0x01
    1054:	90 96       	adiw	r26, 0x20	; 32
    1056:	9c 91       	ld	r25, X
    1058:	91 50       	subi	r25, 0x01	; 1
    105a:	92 83       	std	Z+2, r25	; 0x02
    105c:	2d c0       	rjmp	.+90     	; 0x10b8 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    105e:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <currentMenu>
    1062:	f0 91 6c 02 	lds	r31, 0x026C	; 0x80026c <currentMenu+0x1>
    1066:	22 89       	ldd	r18, Z+18	; 0x12
    1068:	33 89       	ldd	r19, Z+19	; 0x13
    106a:	21 15       	cp	r18, r1
    106c:	31 05       	cpc	r19, r1
    106e:	21 f1       	breq	.+72     	; 0x10b8 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    1070:	eb e6       	ldi	r30, 0x6B	; 107
    1072:	f2 e0       	ldi	r31, 0x02	; 2
    1074:	31 83       	std	Z+1, r19	; 0x01
    1076:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    1078:	12 82       	std	Z+2, r1	; 0x02
    107a:	1e c0       	rjmp	.+60     	; 0x10b8 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    107c:	ab e6       	ldi	r26, 0x6B	; 107
    107e:	b2 e0       	ldi	r27, 0x02	; 2
    1080:	2d 91       	ld	r18, X+
    1082:	3c 91       	ld	r19, X
    1084:	11 97       	sbiw	r26, 0x01	; 1
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	9c 91       	ld	r25, X
    108a:	e9 2f       	mov	r30, r25
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	3a 96       	adiw	r30, 0x0a	; 10
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	e2 0f       	add	r30, r18
    1096:	f3 1f       	adc	r31, r19
    1098:	01 90       	ld	r0, Z+
    109a:	f0 81       	ld	r31, Z
    109c:	e0 2d       	mov	r30, r0
    109e:	90 a1       	ldd	r25, Z+32	; 0x20
    10a0:	91 11       	cpse	r25, r1
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <navigateMenu+0xb8>
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	99 23       	and	r25, r25
    10a8:	39 f0       	breq	.+14     	; 0x10b8 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    10aa:	ab e6       	ldi	r26, 0x6B	; 107
    10ac:	b2 e0       	ldi	r27, 0x02	; 2
    10ae:	11 96       	adiw	r26, 0x01	; 1
    10b0:	fc 93       	st	X, r31
    10b2:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    10b4:	12 96       	adiw	r26, 0x02	; 2
    10b6:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    10b8:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <currentMenu+0x3>
    10bc:	08 95       	ret

000010be <menu_init>:



MenuNode nodes[8];

void menu_init() {
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    10c6:	8a e0       	ldi	r24, 0x0A	; 10
    10c8:	eb e0       	ldi	r30, 0x0B	; 11
    10ca:	f2 e0       	ldi	r31, 0x02	; 2
    10cc:	a0 e9       	ldi	r26, 0x90	; 144
    10ce:	b2 e0       	ldi	r27, 0x02	; 2
    10d0:	01 90       	ld	r0, Z+
    10d2:	0d 92       	st	X+, r0
    10d4:	8a 95       	dec	r24
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    10d8:	8a e0       	ldi	r24, 0x0A	; 10
    10da:	e5 e1       	ldi	r30, 0x15	; 21
    10dc:	f2 e0       	ldi	r31, 0x02	; 2
    10de:	a1 eb       	ldi	r26, 0xB1	; 177
    10e0:	b2 e0       	ldi	r27, 0x02	; 2
    10e2:	01 90       	ld	r0, Z+
    10e4:	0d 92       	st	X+, r0
    10e6:	8a 95       	dec	r24
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    10ea:	8c e0       	ldi	r24, 0x0C	; 12
    10ec:	ef e1       	ldi	r30, 0x1F	; 31
    10ee:	f2 e0       	ldi	r31, 0x02	; 2
    10f0:	a2 ed       	ldi	r26, 0xD2	; 210
    10f2:	b2 e0       	ldi	r27, 0x02	; 2
    10f4:	01 90       	ld	r0, Z+
    10f6:	0d 92       	st	X+, r0
    10f8:	8a 95       	dec	r24
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    10fc:	86 e0       	ldi	r24, 0x06	; 6
    10fe:	eb e2       	ldi	r30, 0x2B	; 43
    1100:	f2 e0       	ldi	r31, 0x02	; 2
    1102:	a3 ef       	ldi	r26, 0xF3	; 243
    1104:	b2 e0       	ldi	r27, 0x02	; 2
    1106:	01 90       	ld	r0, Z+
    1108:	0d 92       	st	X+, r0
    110a:	8a 95       	dec	r24
    110c:	e1 f7       	brne	.-8      	; 0x1106 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    110e:	87 e0       	ldi	r24, 0x07	; 7
    1110:	e1 e3       	ldi	r30, 0x31	; 49
    1112:	f2 e0       	ldi	r31, 0x02	; 2
    1114:	a4 e1       	ldi	r26, 0x14	; 20
    1116:	b3 e0       	ldi	r27, 0x03	; 3
    1118:	01 90       	ld	r0, Z+
    111a:	0d 92       	st	X+, r0
    111c:	8a 95       	dec	r24
    111e:	e1 f7       	brne	.-8      	; 0x1118 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    1120:	87 e0       	ldi	r24, 0x07	; 7
    1122:	e8 e3       	ldi	r30, 0x38	; 56
    1124:	f2 e0       	ldi	r31, 0x02	; 2
    1126:	a5 e3       	ldi	r26, 0x35	; 53
    1128:	b3 e0       	ldi	r27, 0x03	; 3
    112a:	01 90       	ld	r0, Z+
    112c:	0d 92       	st	X+, r0
    112e:	8a 95       	dec	r24
    1130:	e1 f7       	brne	.-8      	; 0x112a <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    1132:	8a e0       	ldi	r24, 0x0A	; 10
    1134:	ef e3       	ldi	r30, 0x3F	; 63
    1136:	f2 e0       	ldi	r31, 0x02	; 2
    1138:	a6 e5       	ldi	r26, 0x56	; 86
    113a:	b3 e0       	ldi	r27, 0x03	; 3
    113c:	01 90       	ld	r0, Z+
    113e:	0d 92       	st	X+, r0
    1140:	8a 95       	dec	r24
    1142:	e1 f7       	brne	.-8      	; 0x113c <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    1144:	8a e0       	ldi	r24, 0x0A	; 10
    1146:	e9 e4       	ldi	r30, 0x49	; 73
    1148:	f2 e0       	ldi	r31, 0x02	; 2
    114a:	a7 e7       	ldi	r26, 0x77	; 119
    114c:	b3 e0       	ldi	r27, 0x03	; 3
    114e:	01 90       	ld	r0, Z+
    1150:	0d 92       	st	X+, r0
    1152:	8a 95       	dec	r24
    1154:	e1 f7       	brne	.-8      	; 0x114e <menu_init+0x90>
    1156:	6e e8       	ldi	r22, 0x8E	; 142
    1158:	72 e0       	ldi	r23, 0x02	; 2
    115a:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=4){
			nodes[i].isAction=1;
    1160:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    1162:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=4){
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	91 05       	cpc	r25, r1
    1168:	14 f0       	brlt	.+4      	; 0x116e <menu_init+0xb0>
			nodes[i].isAction=1;
    116a:	21 83       	std	Z+1, r18	; 0x01
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    116e:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	b1 96       	adiw	r30, 0x21	; 33
    1174:	88 30       	cpi	r24, 0x08	; 8
    1176:	91 05       	cpc	r25, r1
    1178:	a1 f7       	brne	.-24     	; 0x1162 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    117a:	ee e8       	ldi	r30, 0x8E	; 142
    117c:	f2 e0       	ldi	r31, 0x02	; 2
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <nodes+0x41>
	nodes[2].numChildren = 2;
    1188:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <nodes+0x62>
	nodes[3].numChildren = 0;
    118c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <nodes+0x83>
	nodes[4].numChildren = 0;
    1190:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <nodes+0xa4>
	nodes[5].numChildren = 0;
    1194:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <nodes+0xc5>
	nodes[6].numChildren = 0;
    1198:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <nodes+0xe6>
	nodes[7].numChildren = 0;
    119c:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    11a0:	13 8a       	std	Z+19, r1	; 0x13
    11a2:	12 8a       	std	Z+18, r1	; 0x12
    11a4:	06 e9       	ldi	r16, 0x96	; 150
    11a6:	13 e0       	ldi	r17, 0x03	; 3
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    11a8:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    11aa:	51 e2       	ldi	r21, 0x21	; 33
    11ac:	18 c0       	rjmp	.+48     	; 0x11de <menu_init+0x120>
    11ae:	54 9f       	mul	r21, r20
    11b0:	f0 01       	movw	r30, r0
    11b2:	11 24       	eor	r1, r1
    11b4:	e2 57       	subi	r30, 0x72	; 114
    11b6:	fd 4f       	sbci	r31, 0xFD	; 253
    11b8:	e9 93       	st	Y+, r30
    11ba:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    11bc:	b3 8b       	std	Z+19, r27	; 0x13
    11be:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    11c0:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    11c2:	2f 5f       	subi	r18, 0xFF	; 255
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	90 96       	adiw	r26, 0x20	; 32
    11c8:	8c 91       	ld	r24, X
    11ca:	90 97       	sbiw	r26, 0x20	; 32
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	28 17       	cp	r18, r24
    11d0:	39 07       	cpc	r19, r25
    11d2:	6c f3       	brlt	.-38     	; 0x11ae <menu_init+0xf0>
    11d4:	6f 5d       	subi	r22, 0xDF	; 223
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    11d8:	60 17       	cp	r22, r16
    11da:	71 07       	cpc	r23, r17
    11dc:	59 f0       	breq	.+22     	; 0x11f4 <menu_init+0x136>
    11de:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    11e0:	90 96       	adiw	r26, 0x20	; 32
    11e2:	8c 91       	ld	r24, X
    11e4:	90 97       	sbiw	r26, 0x20	; 32
    11e6:	88 23       	and	r24, r24
    11e8:	a9 f3       	breq	.-22     	; 0x11d4 <menu_init+0x116>
    11ea:	eb 01       	movw	r28, r22
    11ec:	64 96       	adiw	r28, 0x14	; 20
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	dd cf       	rjmp	.-70     	; 0x11ae <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    11f4:	87 e6       	ldi	r24, 0x67	; 103
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	0e 94 f9 07 	call	0xff2	; 0xff2 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    11fc:	eb e6       	ldi	r30, 0x6B	; 107
    11fe:	f2 e0       	ldi	r31, 0x02	; 2
    1200:	8e e8       	ldi	r24, 0x8E	; 142
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1208:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
	oled_reset();
    1220:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
	oled_home();
    1224:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    1228:	cb e6       	ldi	r28, 0x6B	; 107
    122a:	d2 e0       	ldi	r29, 0x02	; 2
    122c:	88 81       	ld	r24, Y
    122e:	99 81       	ldd	r25, Y+1	; 0x01
    1230:	02 96       	adiw	r24, 0x02	; 2
    1232:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1236:	e8 81       	ld	r30, Y
    1238:	f9 81       	ldd	r31, Y+1	; 0x01
    123a:	80 a1       	ldd	r24, Z+32	; 0x20
    123c:	88 23       	and	r24, r24
    123e:	39 f1       	breq	.+78     	; 0x128e <menu_printCurrentMenu+0x76>
    1240:	c0 e0       	ldi	r28, 0x00	; 0
    1242:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1244:	0b e6       	ldi	r16, 0x6B	; 107
    1246:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    1248:	ce 01       	movw	r24, r28
    124a:	02 96       	adiw	r24, 0x02	; 2
    124c:	0e 94 b0 09 	call	0x1360	; 0x1360 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1250:	d8 01       	movw	r26, r16
    1252:	8d 91       	ld	r24, X+
    1254:	9c 91       	ld	r25, X
    1256:	fe 01       	movw	r30, r28
    1258:	3a 96       	adiw	r30, 0x0a	; 10
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	e8 0f       	add	r30, r24
    1260:	f9 1f       	adc	r31, r25
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	02 96       	adiw	r24, 0x02	; 2
    1268:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_print>
		if (currentMenu.childIndex == i) {
    126c:	f8 01       	movw	r30, r16
    126e:	82 81       	ldd	r24, Z+2	; 0x02
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	8c 17       	cp	r24, r28
    1274:	9d 07       	cpc	r25, r29
    1276:	11 f4       	brne	.+4      	; 0x127c <menu_printCurrentMenu+0x64>
			oled_print_arrow();
    1278:	0e 94 6e 09 	call	0x12dc	; 0x12dc <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    127c:	21 96       	adiw	r28, 0x01	; 1
    127e:	d8 01       	movw	r26, r16
    1280:	ed 91       	ld	r30, X+
    1282:	fc 91       	ld	r31, X
    1284:	80 a1       	ldd	r24, Z+32	; 0x20
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	c8 17       	cp	r28, r24
    128a:	d9 07       	cpc	r29, r25
    128c:	ec f2       	brlt	.-70     	; 0x1248 <menu_printCurrentMenu+0x30>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    1298:	80 55       	subi	r24, 0x50	; 80
    129a:	e0 e0       	ldi	r30, 0x00	; 0
    129c:	f0 e1       	ldi	r31, 0x10	; 16
    129e:	80 83       	st	Z, r24
    12a0:	86 2f       	mov	r24, r22
    12a2:	8f 70       	andi	r24, 0x0F	; 15
    12a4:	80 83       	st	Z, r24
    12a6:	62 95       	swap	r22
    12a8:	6f 70       	andi	r22, 0x0F	; 15
    12aa:	60 61       	ori	r22, 0x10	; 16
    12ac:	60 83       	st	Z, r22
    12ae:	08 95       	ret

000012b0 <oled_reset>:
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	c0 e0       	ldi	r28, 0x00	; 0
    12ba:	d2 e1       	ldi	r29, 0x12	; 18
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	81 2f       	mov	r24, r17
    12c0:	0e 94 4c 09 	call	0x1298	; 0x1298 <oled_pos>
    12c4:	80 e8       	ldi	r24, 0x80	; 128
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	18 82       	st	Y, r1
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <oled_reset+0x18>
    12ce:	1f 5f       	subi	r17, 0xFF	; 255
    12d0:	18 30       	cpi	r17, 0x08	; 8
    12d2:	a1 f7       	brne	.-24     	; 0x12bc <oled_reset+0xc>
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	08 95       	ret

000012dc <oled_print_arrow>:
    12dc:	e0 e0       	ldi	r30, 0x00	; 0
    12de:	f2 e1       	ldi	r31, 0x12	; 18
    12e0:	88 e1       	ldi	r24, 0x18	; 24
    12e2:	80 83       	st	Z, r24
    12e4:	9c e3       	ldi	r25, 0x3C	; 60
    12e6:	90 83       	st	Z, r25
    12e8:	9e e7       	ldi	r25, 0x7E	; 126
    12ea:	90 83       	st	Z, r25
    12ec:	80 83       	st	Z, r24
    12ee:	80 83       	st	Z, r24
    12f0:	08 95       	ret

000012f2 <oled_home>:
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 4c 09 	call	0x1298	; 0x1298 <oled_pos>
    12fa:	08 95       	ret

000012fc <oled_init>:
    12fc:	e0 e0       	ldi	r30, 0x00	; 0
    12fe:	f0 e1       	ldi	r31, 0x10	; 16
    1300:	8e ea       	ldi	r24, 0xAE	; 174
    1302:	80 83       	st	Z, r24
    1304:	81 ea       	ldi	r24, 0xA1	; 161
    1306:	80 83       	st	Z, r24
    1308:	8a ed       	ldi	r24, 0xDA	; 218
    130a:	80 83       	st	Z, r24
    130c:	82 e1       	ldi	r24, 0x12	; 18
    130e:	80 83       	st	Z, r24
    1310:	88 ec       	ldi	r24, 0xC8	; 200
    1312:	80 83       	st	Z, r24
    1314:	88 ea       	ldi	r24, 0xA8	; 168
    1316:	80 83       	st	Z, r24
    1318:	8f e3       	ldi	r24, 0x3F	; 63
    131a:	80 83       	st	Z, r24
    131c:	85 ed       	ldi	r24, 0xD5	; 213
    131e:	80 83       	st	Z, r24
    1320:	80 e8       	ldi	r24, 0x80	; 128
    1322:	80 83       	st	Z, r24
    1324:	81 e8       	ldi	r24, 0x81	; 129
    1326:	80 83       	st	Z, r24
    1328:	80 e5       	ldi	r24, 0x50	; 80
    132a:	80 83       	st	Z, r24
    132c:	89 ed       	ldi	r24, 0xD9	; 217
    132e:	80 83       	st	Z, r24
    1330:	81 e2       	ldi	r24, 0x21	; 33
    1332:	80 83       	st	Z, r24
    1334:	80 e2       	ldi	r24, 0x20	; 32
    1336:	80 83       	st	Z, r24
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	80 83       	st	Z, r24
    133c:	8b ed       	ldi	r24, 0xDB	; 219
    133e:	80 83       	st	Z, r24
    1340:	80 e3       	ldi	r24, 0x30	; 48
    1342:	80 83       	st	Z, r24
    1344:	8d ea       	ldi	r24, 0xAD	; 173
    1346:	80 83       	st	Z, r24
    1348:	10 82       	st	Z, r1
    134a:	84 ea       	ldi	r24, 0xA4	; 164
    134c:	80 83       	st	Z, r24
    134e:	86 ea       	ldi	r24, 0xA6	; 166
    1350:	80 83       	st	Z, r24
    1352:	8f ea       	ldi	r24, 0xAF	; 175
    1354:	80 83       	st	Z, r24
    1356:	0e 94 58 09 	call	0x12b0	; 0x12b0 <oled_reset>
    135a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <oled_home>
    135e:	08 95       	ret

00001360 <oled_gotoLine>:
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	0e 94 4c 09 	call	0x1298	; 0x1298 <oled_pos>
    1366:	08 95       	ret

00001368 <oled_print>:

void oled_print(char* character){
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	dc 01       	movw	r26, r24
	while (*character != '\0')
    136e:	8c 91       	ld	r24, X
    1370:	81 11       	cpse	r24, r1
    1372:	1a c0       	rjmp	.+52     	; 0x13a8 <oled_print+0x40>
    1374:	1e c0       	rjmp	.+60     	; 0x13b2 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    1376:	ec 91       	ld	r30, X
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	b0 97       	sbiw	r30, 0x20	; 32
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	e2 0f       	add	r30, r18
    138a:	f3 1f       	adc	r31, r19
    138c:	e2 56       	subi	r30, 0x62	; 98
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1392:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    1394:	2f 5f       	subi	r18, 0xFF	; 255
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	28 30       	cpi	r18, 0x08	; 8
    139a:	31 05       	cpc	r19, r1
    139c:	61 f7       	brne	.-40     	; 0x1376 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    139e:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    13a0:	8c 91       	ld	r24, X
    13a2:	81 11       	cpse	r24, r1
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <oled_print+0x44>
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    13a8:	c0 e0       	ldi	r28, 0x00	; 0
    13aa:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	e2 cf       	rjmp	.-60     	; 0x1376 <oled_print+0xe>
		}
		character++;
	}
	
	
}
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "game.h"

	void setupInit(void){
	cli();
    13b8:	f8 94       	cli
	xmem_init();
    13ba:	0e 94 c5 0a 	call	0x158a	; 0x158a <xmem_init>
	USART_init(MYUBRR);
    13be:	8f e1       	ldi	r24, 0x1F	; 31
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <USART_init>
	adcInit();
    13c6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
    13ca:	0e 94 37 07 	call	0xe6e	; 0xe6e <joystickInit>
	touchButton_init();
    13ce:	0e 94 87 0a 	call	0x150e	; 0x150e <touchButton_init>
	oled_init();
    13d2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <oled_init>
	timer_init();
    13d6:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <timer_init>
	sleep_init();
    13da:	0e 94 22 07 	call	0xe44	; 0xe44 <sleep_init>
	menu_init();
    13de:	0e 94 5f 08 	call	0x10be	; 0x10be <menu_init>
	CAN_controller_init();
    13e2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <CAN_controller_init>
	//pwm_init(); uncommenting this breaks can on node 2.
	game_init();
    13e6:	0e 94 9a 04 	call	0x934	; 0x934 <game_init>
	sei();
    13ea:	78 94       	sei
    13ec:	08 95       	ret

000013ee <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
    13f8:	c1 e7       	ldi	r28, 0x71	; 113
    13fa:	d2 e0       	ldi	r29, 0x02	; 2
    13fc:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
    1404:	89 83       	std	Y+1, r24	; 0x01
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    140c:	87 b3       	in	r24, 0x17	; 23
    140e:	80 6a       	ori	r24, 0xA0	; 160
    1410:	87 bb       	out	0x17, r24	; 23
    1412:	bc 9a       	sbi	0x17, 4	; 23
    1414:	8d b1       	in	r24, 0x0d	; 13
    1416:	81 65       	ori	r24, 0x51	; 81
    1418:	8d b9       	out	0x0d, r24	; 13
    141a:	c4 9a       	sbi	0x18, 4	; 24
    141c:	08 95       	ret

0000141e <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    141e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    1420:	77 9b       	sbis	0x0e, 7	; 14
    1422:	fe cf       	rjmp	.-4      	; 0x1420 <SPI_masterWrite+0x2>

}
    1424:	08 95       	ret

00001426 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    1426:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    1428:	77 9b       	sbis	0x0e, 7	; 14
    142a:	fe cf       	rjmp	.-4      	; 0x1428 <SPI_masterRead+0x2>
	return SPDR;
    142c:	8f b1       	in	r24, 0x0f	; 15
}
    142e:	08 95       	ret

00001430 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    1430:	66 23       	and	r22, r22
    1432:	69 f0       	breq	.+26     	; 0x144e <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1434:	48 b3       	in	r20, 0x18	; 24
    1436:	21 e0       	ldi	r18, 0x01	; 1
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	b9 01       	movw	r22, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <SPI_setChipSelect+0x12>
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <SPI_setChipSelect+0xe>
    1446:	cb 01       	movw	r24, r22
    1448:	84 2b       	or	r24, r20
    144a:	88 bb       	out	0x18, r24	; 24
    144c:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    144e:	48 b3       	in	r20, 0x18	; 24
    1450:	21 e0       	ldi	r18, 0x01	; 1
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	b9 01       	movw	r22, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <SPI_setChipSelect+0x2c>
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <SPI_setChipSelect+0x28>
    1460:	cb 01       	movw	r24, r22
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	88 bb       	out	0x18, r24	; 24
    1468:	08 95       	ret

0000146a <__vector_14>:
#include "touchButton.h"
#include "menu.h"
#include "game.h"


ISR (TIMER1_COMPB_vect) {
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
	cli();
    148c:	f8 94       	cli
	TCNT1 = 0x00;
    148e:	1d bc       	out	0x2d, r1	; 45
    1490:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    1492:	87 e6       	ldi	r24, 0x67	; 103
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	0e 94 42 07 	call	0xe84	; 0xe84 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    149a:	81 e7       	ldi	r24, 0x71	; 113
    149c:	92 e0       	ldi	r25, 0x02	; 2
    149e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <slider_readPosition>
	touchButton_readButtons(&buttons);
    14a2:	8f e6       	ldi	r24, 0x6F	; 111
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <touchButton_readButtons>
	if(gameActive==0){
    14aa:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <gameActive>
    14ae:	81 11       	cpse	r24, r1
    14b0:	0e c0       	rjmp	.+28     	; 0x14ce <__vector_14+0x64>
		printf("Game not active");
    14b2:	83 e5       	ldi	r24, 0x53	; 83
    14b4:	92 e0       	ldi	r25, 0x02	; 2
    14b6:	9f 93       	push	r25
    14b8:	8f 93       	push	r24
    14ba:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <printf>
		navigateMenu(&joystick_pos);
    14be:	87 e6       	ldi	r24, 0x67	; 103
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	0e 94 f9 07 	call	0xff2	; 0xff2 <navigateMenu>
		menu_printCurrentMenu();
    14c6:	0e 94 0c 09 	call	0x1218	; 0x1218 <menu_printCurrentMenu>
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
	}
	else{
		//game_updateOled();
	}
	sei();
    14ce:	78 94       	sei
}
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    14f2:	89 b7       	in	r24, 0x39	; 57
    14f4:	80 62       	ori	r24, 0x20	; 32
    14f6:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    14f8:	1d bc       	out	0x2d, r1	; 45
    14fa:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    14fc:	80 e3       	ldi	r24, 0x30	; 48
    14fe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1500:	85 e0       	ldi	r24, 0x05	; 5
    1502:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1504:	80 ee       	ldi	r24, 0xE0	; 224
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	99 bd       	out	0x29, r25	; 41
    150a:	88 bd       	out	0x28, r24	; 40
    150c:	08 95       	ret

0000150e <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    150e:	36 b3       	in	r19, 0x16	; 22
    1510:	26 b3       	in	r18, 0x16	; 22
    1512:	47 b3       	in	r20, 0x17	; 23
    1514:	32 70       	andi	r19, 0x02	; 2
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	bc 01       	movw	r22, r24
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <touchButton_init+0x14>
    151e:	66 0f       	add	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	3a 95       	dec	r19
    1524:	e2 f7       	brpl	.-8      	; 0x151e <touchButton_init+0x10>
    1526:	24 70       	andi	r18, 0x04	; 4
    1528:	02 c0       	rjmp	.+4      	; 0x152e <touchButton_init+0x20>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	2a 95       	dec	r18
    1530:	e2 f7       	brpl	.-8      	; 0x152a <touchButton_init+0x1c>
    1532:	86 2b       	or	r24, r22
    1534:	97 2b       	or	r25, r23
    1536:	80 95       	com	r24
    1538:	90 95       	com	r25
    153a:	84 23       	and	r24, r20
    153c:	87 bb       	out	0x17, r24	; 23
    153e:	08 95       	ret

00001540 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1540:	86 b3       	in	r24, 0x16	; 22
    1542:	ef e6       	ldi	r30, 0x6F	; 111
    1544:	f2 e0       	ldi	r31, 0x02	; 2
    1546:	86 95       	lsr	r24
    1548:	81 70       	andi	r24, 0x01	; 1
    154a:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    154c:	86 b3       	in	r24, 0x16	; 22
    154e:	82 fb       	bst	r24, 2
    1550:	88 27       	eor	r24, r24
    1552:	80 f9       	bld	r24, 0
    1554:	81 83       	std	Z+1, r24	; 0x01
    1556:	08 95       	ret

00001558 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    1558:	5d 9b       	sbis	0x0b, 5	; 11
    155a:	fe cf       	rjmp	.-4      	; 0x1558 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    155c:	8c b9       	out	0x0c, r24	; 12
    155e:	08 95       	ret

00001560 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    1560:	5f 9b       	sbis	0x0b, 7	; 11
    1562:	fe cf       	rjmp	.-4      	; 0x1560 <USART_receiveChar>
		;
	
	return UDR0;
    1564:	8c b1       	in	r24, 0x0c	; 12
    1566:	08 95       	ret

00001568 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1568:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    156a:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    156c:	88 e1       	ldi	r24, 0x18	; 24
    156e:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1570:	8e e8       	ldi	r24, 0x8E	; 142
    1572:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1574:	60 eb       	ldi	r22, 0xB0	; 176
    1576:	7a e0       	ldi	r23, 0x0A	; 10
    1578:	8c ea       	ldi	r24, 0xAC	; 172
    157a:	9a e0       	ldi	r25, 0x0A	; 10
    157c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <fdevopen>
    1580:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <uart+0x1>
    1584:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <uart>
    1588:	08 95       	ret

0000158a <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    158a:	85 b7       	in	r24, 0x35	; 53
    158c:	80 68       	ori	r24, 0x80	; 128
    158e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1590:	80 b7       	in	r24, 0x30	; 48
    1592:	88 60       	ori	r24, 0x08	; 8
    1594:	80 bf       	out	0x30, r24	; 48
    1596:	08 95       	ret
    1598:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_pscA>
    159c:	60 f0       	brcs	.+24     	; 0x15b6 <xmem_init+0x2c>
    159e:	80 e8       	ldi	r24, 0x80	; 128
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <xmem_init+0x1c>
    15a4:	9e ef       	ldi	r25, 0xFE	; 254
    15a6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__fp_pscB>
    15aa:	28 f0       	brcs	.+10     	; 0x15b6 <xmem_init+0x2c>
    15ac:	40 e8       	ldi	r20, 0x80	; 128
    15ae:	51 e0       	ldi	r21, 0x01	; 1
    15b0:	71 f4       	brne	.+28     	; 0x15ce <atan2+0x10>
    15b2:	5e ef       	ldi	r21, 0xFE	; 254
    15b4:	0c c0       	rjmp	.+24     	; 0x15ce <atan2+0x10>
    15b6:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__fp_nan>
    15ba:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_zero>

000015be <atan2>:
    15be:	e9 2f       	mov	r30, r25
    15c0:	e0 78       	andi	r30, 0x80	; 128
    15c2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fp_split3>
    15c6:	40 f3       	brcs	.-48     	; 0x1598 <xmem_init+0xe>
    15c8:	09 2e       	mov	r0, r25
    15ca:	05 2a       	or	r0, r21
    15cc:	b1 f3       	breq	.-20     	; 0x15ba <xmem_init+0x30>
    15ce:	26 17       	cp	r18, r22
    15d0:	37 07       	cpc	r19, r23
    15d2:	48 07       	cpc	r20, r24
    15d4:	59 07       	cpc	r21, r25
    15d6:	38 f0       	brcs	.+14     	; 0x15e6 <atan2+0x28>
    15d8:	0e 2e       	mov	r0, r30
    15da:	07 f8       	bld	r0, 7
    15dc:	e0 25       	eor	r30, r0
    15de:	69 f0       	breq	.+26     	; 0x15fa <atan2+0x3c>
    15e0:	e0 25       	eor	r30, r0
    15e2:	e0 64       	ori	r30, 0x40	; 64
    15e4:	0a c0       	rjmp	.+20     	; 0x15fa <atan2+0x3c>
    15e6:	ef 63       	ori	r30, 0x3F	; 63
    15e8:	07 f8       	bld	r0, 7
    15ea:	00 94       	com	r0
    15ec:	07 fa       	bst	r0, 7
    15ee:	db 01       	movw	r26, r22
    15f0:	b9 01       	movw	r22, r18
    15f2:	9d 01       	movw	r18, r26
    15f4:	dc 01       	movw	r26, r24
    15f6:	ca 01       	movw	r24, r20
    15f8:	ad 01       	movw	r20, r26
    15fa:	ef 93       	push	r30
    15fc:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__divsf3_pse>
    1600:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fp_round>
    1604:	0e 94 0f 0b 	call	0x161e	; 0x161e <atan>
    1608:	5f 91       	pop	r21
    160a:	55 23       	and	r21, r21
    160c:	39 f0       	breq	.+14     	; 0x161c <atan2+0x5e>
    160e:	2b ed       	ldi	r18, 0xDB	; 219
    1610:	3f e0       	ldi	r19, 0x0F	; 15
    1612:	49 e4       	ldi	r20, 0x49	; 73
    1614:	50 fd       	sbrc	r21, 0
    1616:	49 ec       	ldi	r20, 0xC9	; 201
    1618:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__addsf3>
    161c:	08 95       	ret

0000161e <atan>:
    161e:	df 93       	push	r29
    1620:	dd 27       	eor	r29, r29
    1622:	b9 2f       	mov	r27, r25
    1624:	bf 77       	andi	r27, 0x7F	; 127
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	16 16       	cp	r1, r22
    162c:	17 06       	cpc	r1, r23
    162e:	48 07       	cpc	r20, r24
    1630:	5b 07       	cpc	r21, r27
    1632:	18 f4       	brcc	.+6      	; 0x163a <atan+0x1c>
    1634:	d9 2f       	mov	r29, r25
    1636:	0e 94 9b 0c 	call	0x1936	; 0x1936 <inverse>
    163a:	9f 93       	push	r25
    163c:	8f 93       	push	r24
    163e:	7f 93       	push	r23
    1640:	6f 93       	push	r22
    1642:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <square>
    1646:	e0 e7       	ldi	r30, 0x70	; 112
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_powser>
    164e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fp_round>
    1652:	2f 91       	pop	r18
    1654:	3f 91       	pop	r19
    1656:	4f 91       	pop	r20
    1658:	5f 91       	pop	r21
    165a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3x>
    165e:	dd 23       	and	r29, r29
    1660:	51 f0       	breq	.+20     	; 0x1676 <atan+0x58>
    1662:	90 58       	subi	r25, 0x80	; 128
    1664:	a2 ea       	ldi	r26, 0xA2	; 162
    1666:	2a ed       	ldi	r18, 0xDA	; 218
    1668:	3f e0       	ldi	r19, 0x0F	; 15
    166a:	49 ec       	ldi	r20, 0xC9	; 201
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	d0 78       	andi	r29, 0x80	; 128
    1670:	5d 27       	eor	r21, r29
    1672:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__addsf3x>
    1676:	df 91       	pop	r29
    1678:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__fp_round>

0000167c <__divsf3>:
    167c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__divsf3x>
    1680:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__fp_round>
    1684:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__fp_pscB>
    1688:	58 f0       	brcs	.+22     	; 0x16a0 <__divsf3+0x24>
    168a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_pscA>
    168e:	40 f0       	brcs	.+16     	; 0x16a0 <__divsf3+0x24>
    1690:	29 f4       	brne	.+10     	; 0x169c <__divsf3+0x20>
    1692:	5f 3f       	cpi	r21, 0xFF	; 255
    1694:	29 f0       	breq	.+10     	; 0x16a0 <__divsf3+0x24>
    1696:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>
    169a:	51 11       	cpse	r21, r1
    169c:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__fp_szero>
    16a0:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__fp_nan>

000016a4 <__divsf3x>:
    16a4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fp_split3>
    16a8:	68 f3       	brcs	.-38     	; 0x1684 <__divsf3+0x8>

000016aa <__divsf3_pse>:
    16aa:	99 23       	and	r25, r25
    16ac:	b1 f3       	breq	.-20     	; 0x169a <__divsf3+0x1e>
    16ae:	55 23       	and	r21, r21
    16b0:	91 f3       	breq	.-28     	; 0x1696 <__divsf3+0x1a>
    16b2:	95 1b       	sub	r25, r21
    16b4:	55 0b       	sbc	r21, r21
    16b6:	bb 27       	eor	r27, r27
    16b8:	aa 27       	eor	r26, r26
    16ba:	62 17       	cp	r22, r18
    16bc:	73 07       	cpc	r23, r19
    16be:	84 07       	cpc	r24, r20
    16c0:	38 f0       	brcs	.+14     	; 0x16d0 <__divsf3_pse+0x26>
    16c2:	9f 5f       	subi	r25, 0xFF	; 255
    16c4:	5f 4f       	sbci	r21, 0xFF	; 255
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	44 1f       	adc	r20, r20
    16cc:	aa 1f       	adc	r26, r26
    16ce:	a9 f3       	breq	.-22     	; 0x16ba <__divsf3_pse+0x10>
    16d0:	35 d0       	rcall	.+106    	; 0x173c <__divsf3_pse+0x92>
    16d2:	0e 2e       	mov	r0, r30
    16d4:	3a f0       	brmi	.+14     	; 0x16e4 <__divsf3_pse+0x3a>
    16d6:	e0 e8       	ldi	r30, 0x80	; 128
    16d8:	32 d0       	rcall	.+100    	; 0x173e <__divsf3_pse+0x94>
    16da:	91 50       	subi	r25, 0x01	; 1
    16dc:	50 40       	sbci	r21, 0x00	; 0
    16de:	e6 95       	lsr	r30
    16e0:	00 1c       	adc	r0, r0
    16e2:	ca f7       	brpl	.-14     	; 0x16d6 <__divsf3_pse+0x2c>
    16e4:	2b d0       	rcall	.+86     	; 0x173c <__divsf3_pse+0x92>
    16e6:	fe 2f       	mov	r31, r30
    16e8:	29 d0       	rcall	.+82     	; 0x173c <__divsf3_pse+0x92>
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	88 1f       	adc	r24, r24
    16f0:	bb 1f       	adc	r27, r27
    16f2:	26 17       	cp	r18, r22
    16f4:	37 07       	cpc	r19, r23
    16f6:	48 07       	cpc	r20, r24
    16f8:	ab 07       	cpc	r26, r27
    16fa:	b0 e8       	ldi	r27, 0x80	; 128
    16fc:	09 f0       	breq	.+2      	; 0x1700 <__divsf3_pse+0x56>
    16fe:	bb 0b       	sbc	r27, r27
    1700:	80 2d       	mov	r24, r0
    1702:	bf 01       	movw	r22, r30
    1704:	ff 27       	eor	r31, r31
    1706:	93 58       	subi	r25, 0x83	; 131
    1708:	5f 4f       	sbci	r21, 0xFF	; 255
    170a:	3a f0       	brmi	.+14     	; 0x171a <__divsf3_pse+0x70>
    170c:	9e 3f       	cpi	r25, 0xFE	; 254
    170e:	51 05       	cpc	r21, r1
    1710:	78 f0       	brcs	.+30     	; 0x1730 <__divsf3_pse+0x86>
    1712:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>
    1716:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__fp_szero>
    171a:	5f 3f       	cpi	r21, 0xFF	; 255
    171c:	e4 f3       	brlt	.-8      	; 0x1716 <__divsf3_pse+0x6c>
    171e:	98 3e       	cpi	r25, 0xE8	; 232
    1720:	d4 f3       	brlt	.-12     	; 0x1716 <__divsf3_pse+0x6c>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b7 95       	ror	r27
    172a:	f7 95       	ror	r31
    172c:	9f 5f       	subi	r25, 0xFF	; 255
    172e:	c9 f7       	brne	.-14     	; 0x1722 <__divsf3_pse+0x78>
    1730:	88 0f       	add	r24, r24
    1732:	91 1d       	adc	r25, r1
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	97 f9       	bld	r25, 7
    173a:	08 95       	ret
    173c:	e1 e0       	ldi	r30, 0x01	; 1
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	88 1f       	adc	r24, r24
    1744:	bb 1f       	adc	r27, r27
    1746:	62 17       	cp	r22, r18
    1748:	73 07       	cpc	r23, r19
    174a:	84 07       	cpc	r24, r20
    174c:	ba 07       	cpc	r27, r26
    174e:	20 f0       	brcs	.+8      	; 0x1758 <__divsf3_pse+0xae>
    1750:	62 1b       	sub	r22, r18
    1752:	73 0b       	sbc	r23, r19
    1754:	84 0b       	sbc	r24, r20
    1756:	ba 0b       	sbc	r27, r26
    1758:	ee 1f       	adc	r30, r30
    175a:	88 f7       	brcc	.-30     	; 0x173e <__divsf3_pse+0x94>
    175c:	e0 95       	com	r30
    175e:	08 95       	ret

00001760 <__fixsfsi>:
    1760:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fixunssfsi>
    1764:	68 94       	set
    1766:	b1 11       	cpse	r27, r1
    1768:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__fp_szero>
    176c:	08 95       	ret

0000176e <__fixunssfsi>:
    176e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fp_splitA>
    1772:	88 f0       	brcs	.+34     	; 0x1796 <__fixunssfsi+0x28>
    1774:	9f 57       	subi	r25, 0x7F	; 127
    1776:	98 f0       	brcs	.+38     	; 0x179e <__fixunssfsi+0x30>
    1778:	b9 2f       	mov	r27, r25
    177a:	99 27       	eor	r25, r25
    177c:	b7 51       	subi	r27, 0x17	; 23
    177e:	b0 f0       	brcs	.+44     	; 0x17ac <__fixunssfsi+0x3e>
    1780:	e1 f0       	breq	.+56     	; 0x17ba <__fixunssfsi+0x4c>
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	1a f0       	brmi	.+6      	; 0x1792 <__fixunssfsi+0x24>
    178c:	ba 95       	dec	r27
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__fixunssfsi+0x14>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <__fixunssfsi+0x4c>
    1792:	b1 30       	cpi	r27, 0x01	; 1
    1794:	91 f0       	breq	.+36     	; 0x17ba <__fixunssfsi+0x4c>
    1796:	0e 94 94 0c 	call	0x1928	; 0x1928 <__fp_zero>
    179a:	b1 e0       	ldi	r27, 0x01	; 1
    179c:	08 95       	ret
    179e:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_zero>
    17a2:	67 2f       	mov	r22, r23
    17a4:	78 2f       	mov	r23, r24
    17a6:	88 27       	eor	r24, r24
    17a8:	b8 5f       	subi	r27, 0xF8	; 248
    17aa:	39 f0       	breq	.+14     	; 0x17ba <__fixunssfsi+0x4c>
    17ac:	b9 3f       	cpi	r27, 0xF9	; 249
    17ae:	cc f3       	brlt	.-14     	; 0x17a2 <__fixunssfsi+0x34>
    17b0:	86 95       	lsr	r24
    17b2:	77 95       	ror	r23
    17b4:	67 95       	ror	r22
    17b6:	b3 95       	inc	r27
    17b8:	d9 f7       	brne	.-10     	; 0x17b0 <__fixunssfsi+0x42>
    17ba:	3e f4       	brtc	.+14     	; 0x17ca <__fixunssfsi+0x5c>
    17bc:	90 95       	com	r25
    17be:	80 95       	com	r24
    17c0:	70 95       	com	r23
    17c2:	61 95       	neg	r22
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	08 95       	ret

000017cc <__floatunsisf>:
    17cc:	e8 94       	clt
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <__floatsisf+0x12>

000017d0 <__floatsisf>:
    17d0:	97 fb       	bst	r25, 7
    17d2:	3e f4       	brtc	.+14     	; 0x17e2 <__floatsisf+0x12>
    17d4:	90 95       	com	r25
    17d6:	80 95       	com	r24
    17d8:	70 95       	com	r23
    17da:	61 95       	neg	r22
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	99 23       	and	r25, r25
    17e4:	a9 f0       	breq	.+42     	; 0x1810 <__floatsisf+0x40>
    17e6:	f9 2f       	mov	r31, r25
    17e8:	96 e9       	ldi	r25, 0x96	; 150
    17ea:	bb 27       	eor	r27, r27
    17ec:	93 95       	inc	r25
    17ee:	f6 95       	lsr	r31
    17f0:	87 95       	ror	r24
    17f2:	77 95       	ror	r23
    17f4:	67 95       	ror	r22
    17f6:	b7 95       	ror	r27
    17f8:	f1 11       	cpse	r31, r1
    17fa:	f8 cf       	rjmp	.-16     	; 0x17ec <__floatsisf+0x1c>
    17fc:	fa f4       	brpl	.+62     	; 0x183c <__floatsisf+0x6c>
    17fe:	bb 0f       	add	r27, r27
    1800:	11 f4       	brne	.+4      	; 0x1806 <__floatsisf+0x36>
    1802:	60 ff       	sbrs	r22, 0
    1804:	1b c0       	rjmp	.+54     	; 0x183c <__floatsisf+0x6c>
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	8f 4f       	sbci	r24, 0xFF	; 255
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	16 c0       	rjmp	.+44     	; 0x183c <__floatsisf+0x6c>
    1810:	88 23       	and	r24, r24
    1812:	11 f0       	breq	.+4      	; 0x1818 <__floatsisf+0x48>
    1814:	96 e9       	ldi	r25, 0x96	; 150
    1816:	11 c0       	rjmp	.+34     	; 0x183a <__floatsisf+0x6a>
    1818:	77 23       	and	r23, r23
    181a:	21 f0       	breq	.+8      	; 0x1824 <__floatsisf+0x54>
    181c:	9e e8       	ldi	r25, 0x8E	; 142
    181e:	87 2f       	mov	r24, r23
    1820:	76 2f       	mov	r23, r22
    1822:	05 c0       	rjmp	.+10     	; 0x182e <__floatsisf+0x5e>
    1824:	66 23       	and	r22, r22
    1826:	71 f0       	breq	.+28     	; 0x1844 <__floatsisf+0x74>
    1828:	96 e8       	ldi	r25, 0x86	; 134
    182a:	86 2f       	mov	r24, r22
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	2a f0       	brmi	.+10     	; 0x183c <__floatsisf+0x6c>
    1832:	9a 95       	dec	r25
    1834:	66 0f       	add	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	88 1f       	adc	r24, r24
    183a:	da f7       	brpl	.-10     	; 0x1832 <__floatsisf+0x62>
    183c:	88 0f       	add	r24, r24
    183e:	96 95       	lsr	r25
    1840:	87 95       	ror	r24
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret

00001846 <__fp_inf>:
    1846:	97 f9       	bld	r25, 7
    1848:	9f 67       	ori	r25, 0x7F	; 127
    184a:	80 e8       	ldi	r24, 0x80	; 128
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	08 95       	ret

00001852 <__fp_nan>:
    1852:	9f ef       	ldi	r25, 0xFF	; 255
    1854:	80 ec       	ldi	r24, 0xC0	; 192
    1856:	08 95       	ret

00001858 <__fp_powser>:
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	1f 93       	push	r17
    185e:	0f 93       	push	r16
    1860:	ff 92       	push	r15
    1862:	ef 92       	push	r14
    1864:	df 92       	push	r13
    1866:	7b 01       	movw	r14, r22
    1868:	8c 01       	movw	r16, r24
    186a:	68 94       	set
    186c:	06 c0       	rjmp	.+12     	; 0x187a <__fp_powser+0x22>
    186e:	da 2e       	mov	r13, r26
    1870:	ef 01       	movw	r28, r30
    1872:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3x>
    1876:	fe 01       	movw	r30, r28
    1878:	e8 94       	clt
    187a:	a5 91       	lpm	r26, Z+
    187c:	25 91       	lpm	r18, Z+
    187e:	35 91       	lpm	r19, Z+
    1880:	45 91       	lpm	r20, Z+
    1882:	55 91       	lpm	r21, Z+
    1884:	a6 f3       	brts	.-24     	; 0x186e <__fp_powser+0x16>
    1886:	ef 01       	movw	r28, r30
    1888:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__addsf3x>
    188c:	fe 01       	movw	r30, r28
    188e:	97 01       	movw	r18, r14
    1890:	a8 01       	movw	r20, r16
    1892:	da 94       	dec	r13
    1894:	69 f7       	brne	.-38     	; 0x1870 <__fp_powser+0x18>
    1896:	df 90       	pop	r13
    1898:	ef 90       	pop	r14
    189a:	ff 90       	pop	r15
    189c:	0f 91       	pop	r16
    189e:	1f 91       	pop	r17
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <__fp_pscA>:
    18a6:	00 24       	eor	r0, r0
    18a8:	0a 94       	dec	r0
    18aa:	16 16       	cp	r1, r22
    18ac:	17 06       	cpc	r1, r23
    18ae:	18 06       	cpc	r1, r24
    18b0:	09 06       	cpc	r0, r25
    18b2:	08 95       	ret

000018b4 <__fp_pscB>:
    18b4:	00 24       	eor	r0, r0
    18b6:	0a 94       	dec	r0
    18b8:	12 16       	cp	r1, r18
    18ba:	13 06       	cpc	r1, r19
    18bc:	14 06       	cpc	r1, r20
    18be:	05 06       	cpc	r0, r21
    18c0:	08 95       	ret

000018c2 <__fp_round>:
    18c2:	09 2e       	mov	r0, r25
    18c4:	03 94       	inc	r0
    18c6:	00 0c       	add	r0, r0
    18c8:	11 f4       	brne	.+4      	; 0x18ce <__fp_round+0xc>
    18ca:	88 23       	and	r24, r24
    18cc:	52 f0       	brmi	.+20     	; 0x18e2 <__fp_round+0x20>
    18ce:	bb 0f       	add	r27, r27
    18d0:	40 f4       	brcc	.+16     	; 0x18e2 <__fp_round+0x20>
    18d2:	bf 2b       	or	r27, r31
    18d4:	11 f4       	brne	.+4      	; 0x18da <__fp_round+0x18>
    18d6:	60 ff       	sbrs	r22, 0
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <__fp_round+0x20>
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	08 95       	ret

000018e4 <__fp_split3>:
    18e4:	57 fd       	sbrc	r21, 7
    18e6:	90 58       	subi	r25, 0x80	; 128
    18e8:	44 0f       	add	r20, r20
    18ea:	55 1f       	adc	r21, r21
    18ec:	59 f0       	breq	.+22     	; 0x1904 <__fp_splitA+0x10>
    18ee:	5f 3f       	cpi	r21, 0xFF	; 255
    18f0:	71 f0       	breq	.+28     	; 0x190e <__fp_splitA+0x1a>
    18f2:	47 95       	ror	r20

000018f4 <__fp_splitA>:
    18f4:	88 0f       	add	r24, r24
    18f6:	97 fb       	bst	r25, 7
    18f8:	99 1f       	adc	r25, r25
    18fa:	61 f0       	breq	.+24     	; 0x1914 <__fp_splitA+0x20>
    18fc:	9f 3f       	cpi	r25, 0xFF	; 255
    18fe:	79 f0       	breq	.+30     	; 0x191e <__fp_splitA+0x2a>
    1900:	87 95       	ror	r24
    1902:	08 95       	ret
    1904:	12 16       	cp	r1, r18
    1906:	13 06       	cpc	r1, r19
    1908:	14 06       	cpc	r1, r20
    190a:	55 1f       	adc	r21, r21
    190c:	f2 cf       	rjmp	.-28     	; 0x18f2 <__fp_split3+0xe>
    190e:	46 95       	lsr	r20
    1910:	f1 df       	rcall	.-30     	; 0x18f4 <__fp_splitA>
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <__fp_splitA+0x30>
    1914:	16 16       	cp	r1, r22
    1916:	17 06       	cpc	r1, r23
    1918:	18 06       	cpc	r1, r24
    191a:	99 1f       	adc	r25, r25
    191c:	f1 cf       	rjmp	.-30     	; 0x1900 <__fp_splitA+0xc>
    191e:	86 95       	lsr	r24
    1920:	71 05       	cpc	r23, r1
    1922:	61 05       	cpc	r22, r1
    1924:	08 94       	sec
    1926:	08 95       	ret

00001928 <__fp_zero>:
    1928:	e8 94       	clt

0000192a <__fp_szero>:
    192a:	bb 27       	eor	r27, r27
    192c:	66 27       	eor	r22, r22
    192e:	77 27       	eor	r23, r23
    1930:	cb 01       	movw	r24, r22
    1932:	97 f9       	bld	r25, 7
    1934:	08 95       	ret

00001936 <inverse>:
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	80 e8       	ldi	r24, 0x80	; 128
    1940:	9f e3       	ldi	r25, 0x3F	; 63
    1942:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__divsf3>

00001946 <__mulsf3>:
    1946:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3x>
    194a:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__fp_round>
    194e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_pscA>
    1952:	38 f0       	brcs	.+14     	; 0x1962 <__mulsf3+0x1c>
    1954:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__fp_pscB>
    1958:	20 f0       	brcs	.+8      	; 0x1962 <__mulsf3+0x1c>
    195a:	95 23       	and	r25, r21
    195c:	11 f0       	breq	.+4      	; 0x1962 <__mulsf3+0x1c>
    195e:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>
    1962:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__fp_nan>
    1966:	11 24       	eor	r1, r1
    1968:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__fp_szero>

0000196c <__mulsf3x>:
    196c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fp_split3>
    1970:	70 f3       	brcs	.-36     	; 0x194e <__mulsf3+0x8>

00001972 <__mulsf3_pse>:
    1972:	95 9f       	mul	r25, r21
    1974:	c1 f3       	breq	.-16     	; 0x1966 <__mulsf3+0x20>
    1976:	95 0f       	add	r25, r21
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	55 1f       	adc	r21, r21
    197c:	62 9f       	mul	r22, r18
    197e:	f0 01       	movw	r30, r0
    1980:	72 9f       	mul	r23, r18
    1982:	bb 27       	eor	r27, r27
    1984:	f0 0d       	add	r31, r0
    1986:	b1 1d       	adc	r27, r1
    1988:	63 9f       	mul	r22, r19
    198a:	aa 27       	eor	r26, r26
    198c:	f0 0d       	add	r31, r0
    198e:	b1 1d       	adc	r27, r1
    1990:	aa 1f       	adc	r26, r26
    1992:	64 9f       	mul	r22, r20
    1994:	66 27       	eor	r22, r22
    1996:	b0 0d       	add	r27, r0
    1998:	a1 1d       	adc	r26, r1
    199a:	66 1f       	adc	r22, r22
    199c:	82 9f       	mul	r24, r18
    199e:	22 27       	eor	r18, r18
    19a0:	b0 0d       	add	r27, r0
    19a2:	a1 1d       	adc	r26, r1
    19a4:	62 1f       	adc	r22, r18
    19a6:	73 9f       	mul	r23, r19
    19a8:	b0 0d       	add	r27, r0
    19aa:	a1 1d       	adc	r26, r1
    19ac:	62 1f       	adc	r22, r18
    19ae:	83 9f       	mul	r24, r19
    19b0:	a0 0d       	add	r26, r0
    19b2:	61 1d       	adc	r22, r1
    19b4:	22 1f       	adc	r18, r18
    19b6:	74 9f       	mul	r23, r20
    19b8:	33 27       	eor	r19, r19
    19ba:	a0 0d       	add	r26, r0
    19bc:	61 1d       	adc	r22, r1
    19be:	23 1f       	adc	r18, r19
    19c0:	84 9f       	mul	r24, r20
    19c2:	60 0d       	add	r22, r0
    19c4:	21 1d       	adc	r18, r1
    19c6:	82 2f       	mov	r24, r18
    19c8:	76 2f       	mov	r23, r22
    19ca:	6a 2f       	mov	r22, r26
    19cc:	11 24       	eor	r1, r1
    19ce:	9f 57       	subi	r25, 0x7F	; 127
    19d0:	50 40       	sbci	r21, 0x00	; 0
    19d2:	9a f0       	brmi	.+38     	; 0x19fa <__mulsf3_pse+0x88>
    19d4:	f1 f0       	breq	.+60     	; 0x1a12 <__mulsf3_pse+0xa0>
    19d6:	88 23       	and	r24, r24
    19d8:	4a f0       	brmi	.+18     	; 0x19ec <__mulsf3_pse+0x7a>
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	bb 1f       	adc	r27, r27
    19e0:	66 1f       	adc	r22, r22
    19e2:	77 1f       	adc	r23, r23
    19e4:	88 1f       	adc	r24, r24
    19e6:	91 50       	subi	r25, 0x01	; 1
    19e8:	50 40       	sbci	r21, 0x00	; 0
    19ea:	a9 f7       	brne	.-22     	; 0x19d6 <__mulsf3_pse+0x64>
    19ec:	9e 3f       	cpi	r25, 0xFE	; 254
    19ee:	51 05       	cpc	r21, r1
    19f0:	80 f0       	brcs	.+32     	; 0x1a12 <__mulsf3_pse+0xa0>
    19f2:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>
    19f6:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__fp_szero>
    19fa:	5f 3f       	cpi	r21, 0xFF	; 255
    19fc:	e4 f3       	brlt	.-8      	; 0x19f6 <__mulsf3_pse+0x84>
    19fe:	98 3e       	cpi	r25, 0xE8	; 232
    1a00:	d4 f3       	brlt	.-12     	; 0x19f6 <__mulsf3_pse+0x84>
    1a02:	86 95       	lsr	r24
    1a04:	77 95       	ror	r23
    1a06:	67 95       	ror	r22
    1a08:	b7 95       	ror	r27
    1a0a:	f7 95       	ror	r31
    1a0c:	e7 95       	ror	r30
    1a0e:	9f 5f       	subi	r25, 0xFF	; 255
    1a10:	c1 f7       	brne	.-16     	; 0x1a02 <__mulsf3_pse+0x90>
    1a12:	fe 2b       	or	r31, r30
    1a14:	88 0f       	add	r24, r24
    1a16:	91 1d       	adc	r25, r1
    1a18:	96 95       	lsr	r25
    1a1a:	87 95       	ror	r24
    1a1c:	97 f9       	bld	r25, 7
    1a1e:	08 95       	ret

00001a20 <square>:
    1a20:	9b 01       	movw	r18, r22
    1a22:	ac 01       	movw	r20, r24
    1a24:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__mulsf3>

00001a28 <__subsf3>:
    1a28:	50 58       	subi	r21, 0x80	; 128

00001a2a <__addsf3>:
    1a2a:	bb 27       	eor	r27, r27
    1a2c:	aa 27       	eor	r26, r26
    1a2e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__addsf3x>
    1a32:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__fp_round>
    1a36:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_pscA>
    1a3a:	38 f0       	brcs	.+14     	; 0x1a4a <__addsf3+0x20>
    1a3c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__fp_pscB>
    1a40:	20 f0       	brcs	.+8      	; 0x1a4a <__addsf3+0x20>
    1a42:	39 f4       	brne	.+14     	; 0x1a52 <__addsf3+0x28>
    1a44:	9f 3f       	cpi	r25, 0xFF	; 255
    1a46:	19 f4       	brne	.+6      	; 0x1a4e <__addsf3+0x24>
    1a48:	26 f4       	brtc	.+8      	; 0x1a52 <__addsf3+0x28>
    1a4a:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__fp_nan>
    1a4e:	0e f4       	brtc	.+2      	; 0x1a52 <__addsf3+0x28>
    1a50:	e0 95       	com	r30
    1a52:	e7 fb       	bst	r30, 7
    1a54:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>

00001a58 <__addsf3x>:
    1a58:	e9 2f       	mov	r30, r25
    1a5a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fp_split3>
    1a5e:	58 f3       	brcs	.-42     	; 0x1a36 <__addsf3+0xc>
    1a60:	ba 17       	cp	r27, r26
    1a62:	62 07       	cpc	r22, r18
    1a64:	73 07       	cpc	r23, r19
    1a66:	84 07       	cpc	r24, r20
    1a68:	95 07       	cpc	r25, r21
    1a6a:	20 f0       	brcs	.+8      	; 0x1a74 <__addsf3x+0x1c>
    1a6c:	79 f4       	brne	.+30     	; 0x1a8c <__addsf3x+0x34>
    1a6e:	a6 f5       	brtc	.+104    	; 0x1ad8 <__addsf3x+0x80>
    1a70:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_zero>
    1a74:	0e f4       	brtc	.+2      	; 0x1a78 <__addsf3x+0x20>
    1a76:	e0 95       	com	r30
    1a78:	0b 2e       	mov	r0, r27
    1a7a:	ba 2f       	mov	r27, r26
    1a7c:	a0 2d       	mov	r26, r0
    1a7e:	0b 01       	movw	r0, r22
    1a80:	b9 01       	movw	r22, r18
    1a82:	90 01       	movw	r18, r0
    1a84:	0c 01       	movw	r0, r24
    1a86:	ca 01       	movw	r24, r20
    1a88:	a0 01       	movw	r20, r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	ff 27       	eor	r31, r31
    1a8e:	59 1b       	sub	r21, r25
    1a90:	99 f0       	breq	.+38     	; 0x1ab8 <__addsf3x+0x60>
    1a92:	59 3f       	cpi	r21, 0xF9	; 249
    1a94:	50 f4       	brcc	.+20     	; 0x1aaa <__addsf3x+0x52>
    1a96:	50 3e       	cpi	r21, 0xE0	; 224
    1a98:	68 f1       	brcs	.+90     	; 0x1af4 <__addsf3x+0x9c>
    1a9a:	1a 16       	cp	r1, r26
    1a9c:	f0 40       	sbci	r31, 0x00	; 0
    1a9e:	a2 2f       	mov	r26, r18
    1aa0:	23 2f       	mov	r18, r19
    1aa2:	34 2f       	mov	r19, r20
    1aa4:	44 27       	eor	r20, r20
    1aa6:	58 5f       	subi	r21, 0xF8	; 248
    1aa8:	f3 cf       	rjmp	.-26     	; 0x1a90 <__addsf3x+0x38>
    1aaa:	46 95       	lsr	r20
    1aac:	37 95       	ror	r19
    1aae:	27 95       	ror	r18
    1ab0:	a7 95       	ror	r26
    1ab2:	f0 40       	sbci	r31, 0x00	; 0
    1ab4:	53 95       	inc	r21
    1ab6:	c9 f7       	brne	.-14     	; 0x1aaa <__addsf3x+0x52>
    1ab8:	7e f4       	brtc	.+30     	; 0x1ad8 <__addsf3x+0x80>
    1aba:	1f 16       	cp	r1, r31
    1abc:	ba 0b       	sbc	r27, r26
    1abe:	62 0b       	sbc	r22, r18
    1ac0:	73 0b       	sbc	r23, r19
    1ac2:	84 0b       	sbc	r24, r20
    1ac4:	ba f0       	brmi	.+46     	; 0x1af4 <__addsf3x+0x9c>
    1ac6:	91 50       	subi	r25, 0x01	; 1
    1ac8:	a1 f0       	breq	.+40     	; 0x1af2 <__addsf3x+0x9a>
    1aca:	ff 0f       	add	r31, r31
    1acc:	bb 1f       	adc	r27, r27
    1ace:	66 1f       	adc	r22, r22
    1ad0:	77 1f       	adc	r23, r23
    1ad2:	88 1f       	adc	r24, r24
    1ad4:	c2 f7       	brpl	.-16     	; 0x1ac6 <__addsf3x+0x6e>
    1ad6:	0e c0       	rjmp	.+28     	; 0x1af4 <__addsf3x+0x9c>
    1ad8:	ba 0f       	add	r27, r26
    1ada:	62 1f       	adc	r22, r18
    1adc:	73 1f       	adc	r23, r19
    1ade:	84 1f       	adc	r24, r20
    1ae0:	48 f4       	brcc	.+18     	; 0x1af4 <__addsf3x+0x9c>
    1ae2:	87 95       	ror	r24
    1ae4:	77 95       	ror	r23
    1ae6:	67 95       	ror	r22
    1ae8:	b7 95       	ror	r27
    1aea:	f7 95       	ror	r31
    1aec:	9e 3f       	cpi	r25, 0xFE	; 254
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <__addsf3x+0x9a>
    1af0:	b0 cf       	rjmp	.-160    	; 0x1a52 <__addsf3+0x28>
    1af2:	93 95       	inc	r25
    1af4:	88 0f       	add	r24, r24
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <__addsf3x+0xa2>
    1af8:	99 27       	eor	r25, r25
    1afa:	ee 0f       	add	r30, r30
    1afc:	97 95       	ror	r25
    1afe:	87 95       	ror	r24
    1b00:	08 95       	ret

00001b02 <__divmodhi4>:
    1b02:	97 fb       	bst	r25, 7
    1b04:	07 2e       	mov	r0, r23
    1b06:	16 f4       	brtc	.+4      	; 0x1b0c <__divmodhi4+0xa>
    1b08:	00 94       	com	r0
    1b0a:	07 d0       	rcall	.+14     	; 0x1b1a <__divmodhi4_neg1>
    1b0c:	77 fd       	sbrc	r23, 7
    1b0e:	09 d0       	rcall	.+18     	; 0x1b22 <__divmodhi4_neg2>
    1b10:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__udivmodhi4>
    1b14:	07 fc       	sbrc	r0, 7
    1b16:	05 d0       	rcall	.+10     	; 0x1b22 <__divmodhi4_neg2>
    1b18:	3e f4       	brtc	.+14     	; 0x1b28 <__divmodhi4_exit>

00001b1a <__divmodhi4_neg1>:
    1b1a:	90 95       	com	r25
    1b1c:	81 95       	neg	r24
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	08 95       	ret

00001b22 <__divmodhi4_neg2>:
    1b22:	70 95       	com	r23
    1b24:	61 95       	neg	r22
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255

00001b28 <__divmodhi4_exit>:
    1b28:	08 95       	ret

00001b2a <__udivmodhi4>:
    1b2a:	aa 1b       	sub	r26, r26
    1b2c:	bb 1b       	sub	r27, r27
    1b2e:	51 e1       	ldi	r21, 0x11	; 17
    1b30:	07 c0       	rjmp	.+14     	; 0x1b40 <__udivmodhi4_ep>

00001b32 <__udivmodhi4_loop>:
    1b32:	aa 1f       	adc	r26, r26
    1b34:	bb 1f       	adc	r27, r27
    1b36:	a6 17       	cp	r26, r22
    1b38:	b7 07       	cpc	r27, r23
    1b3a:	10 f0       	brcs	.+4      	; 0x1b40 <__udivmodhi4_ep>
    1b3c:	a6 1b       	sub	r26, r22
    1b3e:	b7 0b       	sbc	r27, r23

00001b40 <__udivmodhi4_ep>:
    1b40:	88 1f       	adc	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	5a 95       	dec	r21
    1b46:	a9 f7       	brne	.-22     	; 0x1b32 <__udivmodhi4_loop>
    1b48:	80 95       	com	r24
    1b4a:	90 95       	com	r25
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	08 95       	ret

00001b52 <__itoa_ncheck>:
    1b52:	bb 27       	eor	r27, r27
    1b54:	4a 30       	cpi	r20, 0x0A	; 10
    1b56:	31 f4       	brne	.+12     	; 0x1b64 <__itoa_ncheck+0x12>
    1b58:	99 23       	and	r25, r25
    1b5a:	22 f4       	brpl	.+8      	; 0x1b64 <__itoa_ncheck+0x12>
    1b5c:	bd e2       	ldi	r27, 0x2D	; 45
    1b5e:	90 95       	com	r25
    1b60:	81 95       	neg	r24
    1b62:	9f 4f       	sbci	r25, 0xFF	; 255
    1b64:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__utoa_common>

00001b68 <__utoa_ncheck>:
    1b68:	bb 27       	eor	r27, r27

00001b6a <__utoa_common>:
    1b6a:	fb 01       	movw	r30, r22
    1b6c:	55 27       	eor	r21, r21
    1b6e:	aa 27       	eor	r26, r26
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	aa 1f       	adc	r26, r26
    1b76:	a4 17       	cp	r26, r20
    1b78:	10 f0       	brcs	.+4      	; 0x1b7e <__utoa_common+0x14>
    1b7a:	a4 1b       	sub	r26, r20
    1b7c:	83 95       	inc	r24
    1b7e:	50 51       	subi	r21, 0x10	; 16
    1b80:	b9 f7       	brne	.-18     	; 0x1b70 <__utoa_common+0x6>
    1b82:	a0 5d       	subi	r26, 0xD0	; 208
    1b84:	aa 33       	cpi	r26, 0x3A	; 58
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <__utoa_common+0x20>
    1b88:	a9 5d       	subi	r26, 0xD9	; 217
    1b8a:	a1 93       	st	Z+, r26
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	79 f7       	brne	.-34     	; 0x1b6e <__utoa_common+0x4>
    1b90:	b1 11       	cpse	r27, r1
    1b92:	b1 93       	st	Z+, r27
    1b94:	11 92       	st	Z+, r1
    1b96:	cb 01       	movw	r24, r22
    1b98:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <strrev>

00001b9c <fdevopen>:
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	31 f4       	brne	.+12     	; 0x1bb4 <fdevopen+0x18>
    1ba8:	61 15       	cp	r22, r1
    1baa:	71 05       	cpc	r23, r1
    1bac:	19 f4       	brne	.+6      	; 0x1bb4 <fdevopen+0x18>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	3a c0       	rjmp	.+116    	; 0x1c28 <fdevopen+0x8c>
    1bb4:	8b 01       	movw	r16, r22
    1bb6:	ec 01       	movw	r28, r24
    1bb8:	6e e0       	ldi	r22, 0x0E	; 14
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 10 10 	call	0x2020	; 0x2020 <calloc>
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	89 2b       	or	r24, r25
    1bc8:	91 f3       	breq	.-28     	; 0x1bae <fdevopen+0x12>
    1bca:	80 e8       	ldi	r24, 0x80	; 128
    1bcc:	83 83       	std	Z+3, r24	; 0x03
    1bce:	01 15       	cp	r16, r1
    1bd0:	11 05       	cpc	r17, r1
    1bd2:	71 f0       	breq	.+28     	; 0x1bf0 <fdevopen+0x54>
    1bd4:	13 87       	std	Z+11, r17	; 0x0b
    1bd6:	02 87       	std	Z+10, r16	; 0x0a
    1bd8:	81 e8       	ldi	r24, 0x81	; 129
    1bda:	83 83       	std	Z+3, r24	; 0x03
    1bdc:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__iob>
    1be0:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <__iob+0x1>
    1be4:	89 2b       	or	r24, r25
    1be6:	21 f4       	brne	.+8      	; 0x1bf0 <fdevopen+0x54>
    1be8:	f0 93 99 03 	sts	0x0399, r31	; 0x800399 <__iob+0x1>
    1bec:	e0 93 98 03 	sts	0x0398, r30	; 0x800398 <__iob>
    1bf0:	20 97       	sbiw	r28, 0x00	; 0
    1bf2:	c9 f0       	breq	.+50     	; 0x1c26 <fdevopen+0x8a>
    1bf4:	d1 87       	std	Z+9, r29	; 0x09
    1bf6:	c0 87       	std	Z+8, r28	; 0x08
    1bf8:	83 81       	ldd	r24, Z+3	; 0x03
    1bfa:	82 60       	ori	r24, 0x02	; 2
    1bfc:	83 83       	std	Z+3, r24	; 0x03
    1bfe:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__iob+0x2>
    1c02:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <__iob+0x3>
    1c06:	89 2b       	or	r24, r25
    1c08:	71 f4       	brne	.+28     	; 0x1c26 <fdevopen+0x8a>
    1c0a:	f0 93 9b 03 	sts	0x039B, r31	; 0x80039b <__iob+0x3>
    1c0e:	e0 93 9a 03 	sts	0x039A, r30	; 0x80039a <__iob+0x2>
    1c12:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <__iob+0x4>
    1c16:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <__iob+0x5>
    1c1a:	89 2b       	or	r24, r25
    1c1c:	21 f4       	brne	.+8      	; 0x1c26 <fdevopen+0x8a>
    1c1e:	f0 93 9d 03 	sts	0x039D, r31	; 0x80039d <__iob+0x5>
    1c22:	e0 93 9c 03 	sts	0x039C, r30	; 0x80039c <__iob+0x4>
    1c26:	cf 01       	movw	r24, r30
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	08 95       	ret

00001c32 <printf>:
    1c32:	a0 e0       	ldi	r26, 0x00	; 0
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ef e1       	ldi	r30, 0x1F	; 31
    1c38:	fe e0       	ldi	r31, 0x0E	; 14
    1c3a:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__prologue_saves__+0x20>
    1c3e:	ae 01       	movw	r20, r28
    1c40:	4b 5f       	subi	r20, 0xFB	; 251
    1c42:	5f 4f       	sbci	r21, 0xFF	; 255
    1c44:	fa 01       	movw	r30, r20
    1c46:	61 91       	ld	r22, Z+
    1c48:	71 91       	ld	r23, Z+
    1c4a:	af 01       	movw	r20, r30
    1c4c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__iob+0x2>
    1c50:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <__iob+0x3>
    1c54:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vfprintf>
    1c58:	e2 e0       	ldi	r30, 0x02	; 2
    1c5a:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__epilogue_restores__+0x20>

00001c5e <vfprintf>:
    1c5e:	ab e0       	ldi	r26, 0x0B	; 11
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e5 e3       	ldi	r30, 0x35	; 53
    1c64:	fe e0       	ldi	r31, 0x0E	; 14
    1c66:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__prologue_saves__>
    1c6a:	6c 01       	movw	r12, r24
    1c6c:	7b 01       	movw	r14, r22
    1c6e:	8a 01       	movw	r16, r20
    1c70:	fc 01       	movw	r30, r24
    1c72:	17 82       	std	Z+7, r1	; 0x07
    1c74:	16 82       	std	Z+6, r1	; 0x06
    1c76:	83 81       	ldd	r24, Z+3	; 0x03
    1c78:	81 ff       	sbrs	r24, 1
    1c7a:	cc c1       	rjmp	.+920    	; 0x2014 <vfprintf+0x3b6>
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	3c 01       	movw	r6, r24
    1c82:	f6 01       	movw	r30, r12
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	f7 01       	movw	r30, r14
    1c88:	93 fd       	sbrc	r25, 3
    1c8a:	85 91       	lpm	r24, Z+
    1c8c:	93 ff       	sbrs	r25, 3
    1c8e:	81 91       	ld	r24, Z+
    1c90:	7f 01       	movw	r14, r30
    1c92:	88 23       	and	r24, r24
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <vfprintf+0x3a>
    1c96:	ba c1       	rjmp	.+884    	; 0x200c <vfprintf+0x3ae>
    1c98:	85 32       	cpi	r24, 0x25	; 37
    1c9a:	39 f4       	brne	.+14     	; 0x1caa <vfprintf+0x4c>
    1c9c:	93 fd       	sbrc	r25, 3
    1c9e:	85 91       	lpm	r24, Z+
    1ca0:	93 ff       	sbrs	r25, 3
    1ca2:	81 91       	ld	r24, Z+
    1ca4:	7f 01       	movw	r14, r30
    1ca6:	85 32       	cpi	r24, 0x25	; 37
    1ca8:	29 f4       	brne	.+10     	; 0x1cb4 <vfprintf+0x56>
    1caa:	b6 01       	movw	r22, r12
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    1cb2:	e7 cf       	rjmp	.-50     	; 0x1c82 <vfprintf+0x24>
    1cb4:	91 2c       	mov	r9, r1
    1cb6:	21 2c       	mov	r2, r1
    1cb8:	31 2c       	mov	r3, r1
    1cba:	ff e1       	ldi	r31, 0x1F	; 31
    1cbc:	f3 15       	cp	r31, r3
    1cbe:	d8 f0       	brcs	.+54     	; 0x1cf6 <vfprintf+0x98>
    1cc0:	8b 32       	cpi	r24, 0x2B	; 43
    1cc2:	79 f0       	breq	.+30     	; 0x1ce2 <vfprintf+0x84>
    1cc4:	38 f4       	brcc	.+14     	; 0x1cd4 <vfprintf+0x76>
    1cc6:	80 32       	cpi	r24, 0x20	; 32
    1cc8:	79 f0       	breq	.+30     	; 0x1ce8 <vfprintf+0x8a>
    1cca:	83 32       	cpi	r24, 0x23	; 35
    1ccc:	a1 f4       	brne	.+40     	; 0x1cf6 <vfprintf+0x98>
    1cce:	23 2d       	mov	r18, r3
    1cd0:	20 61       	ori	r18, 0x10	; 16
    1cd2:	1d c0       	rjmp	.+58     	; 0x1d0e <vfprintf+0xb0>
    1cd4:	8d 32       	cpi	r24, 0x2D	; 45
    1cd6:	61 f0       	breq	.+24     	; 0x1cf0 <vfprintf+0x92>
    1cd8:	80 33       	cpi	r24, 0x30	; 48
    1cda:	69 f4       	brne	.+26     	; 0x1cf6 <vfprintf+0x98>
    1cdc:	23 2d       	mov	r18, r3
    1cde:	21 60       	ori	r18, 0x01	; 1
    1ce0:	16 c0       	rjmp	.+44     	; 0x1d0e <vfprintf+0xb0>
    1ce2:	83 2d       	mov	r24, r3
    1ce4:	82 60       	ori	r24, 0x02	; 2
    1ce6:	38 2e       	mov	r3, r24
    1ce8:	e3 2d       	mov	r30, r3
    1cea:	e4 60       	ori	r30, 0x04	; 4
    1cec:	3e 2e       	mov	r3, r30
    1cee:	2a c0       	rjmp	.+84     	; 0x1d44 <vfprintf+0xe6>
    1cf0:	f3 2d       	mov	r31, r3
    1cf2:	f8 60       	ori	r31, 0x08	; 8
    1cf4:	1d c0       	rjmp	.+58     	; 0x1d30 <vfprintf+0xd2>
    1cf6:	37 fc       	sbrc	r3, 7
    1cf8:	2d c0       	rjmp	.+90     	; 0x1d54 <vfprintf+0xf6>
    1cfa:	20 ed       	ldi	r18, 0xD0	; 208
    1cfc:	28 0f       	add	r18, r24
    1cfe:	2a 30       	cpi	r18, 0x0A	; 10
    1d00:	40 f0       	brcs	.+16     	; 0x1d12 <vfprintf+0xb4>
    1d02:	8e 32       	cpi	r24, 0x2E	; 46
    1d04:	b9 f4       	brne	.+46     	; 0x1d34 <vfprintf+0xd6>
    1d06:	36 fc       	sbrc	r3, 6
    1d08:	81 c1       	rjmp	.+770    	; 0x200c <vfprintf+0x3ae>
    1d0a:	23 2d       	mov	r18, r3
    1d0c:	20 64       	ori	r18, 0x40	; 64
    1d0e:	32 2e       	mov	r3, r18
    1d10:	19 c0       	rjmp	.+50     	; 0x1d44 <vfprintf+0xe6>
    1d12:	36 fe       	sbrs	r3, 6
    1d14:	06 c0       	rjmp	.+12     	; 0x1d22 <vfprintf+0xc4>
    1d16:	8a e0       	ldi	r24, 0x0A	; 10
    1d18:	98 9e       	mul	r9, r24
    1d1a:	20 0d       	add	r18, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	92 2e       	mov	r9, r18
    1d20:	11 c0       	rjmp	.+34     	; 0x1d44 <vfprintf+0xe6>
    1d22:	ea e0       	ldi	r30, 0x0A	; 10
    1d24:	2e 9e       	mul	r2, r30
    1d26:	20 0d       	add	r18, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	22 2e       	mov	r2, r18
    1d2c:	f3 2d       	mov	r31, r3
    1d2e:	f0 62       	ori	r31, 0x20	; 32
    1d30:	3f 2e       	mov	r3, r31
    1d32:	08 c0       	rjmp	.+16     	; 0x1d44 <vfprintf+0xe6>
    1d34:	8c 36       	cpi	r24, 0x6C	; 108
    1d36:	21 f4       	brne	.+8      	; 0x1d40 <vfprintf+0xe2>
    1d38:	83 2d       	mov	r24, r3
    1d3a:	80 68       	ori	r24, 0x80	; 128
    1d3c:	38 2e       	mov	r3, r24
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <vfprintf+0xe6>
    1d40:	88 36       	cpi	r24, 0x68	; 104
    1d42:	41 f4       	brne	.+16     	; 0x1d54 <vfprintf+0xf6>
    1d44:	f7 01       	movw	r30, r14
    1d46:	93 fd       	sbrc	r25, 3
    1d48:	85 91       	lpm	r24, Z+
    1d4a:	93 ff       	sbrs	r25, 3
    1d4c:	81 91       	ld	r24, Z+
    1d4e:	7f 01       	movw	r14, r30
    1d50:	81 11       	cpse	r24, r1
    1d52:	b3 cf       	rjmp	.-154    	; 0x1cba <vfprintf+0x5c>
    1d54:	98 2f       	mov	r25, r24
    1d56:	9f 7d       	andi	r25, 0xDF	; 223
    1d58:	95 54       	subi	r25, 0x45	; 69
    1d5a:	93 30       	cpi	r25, 0x03	; 3
    1d5c:	28 f4       	brcc	.+10     	; 0x1d68 <vfprintf+0x10a>
    1d5e:	0c 5f       	subi	r16, 0xFC	; 252
    1d60:	1f 4f       	sbci	r17, 0xFF	; 255
    1d62:	9f e3       	ldi	r25, 0x3F	; 63
    1d64:	99 83       	std	Y+1, r25	; 0x01
    1d66:	0d c0       	rjmp	.+26     	; 0x1d82 <vfprintf+0x124>
    1d68:	83 36       	cpi	r24, 0x63	; 99
    1d6a:	31 f0       	breq	.+12     	; 0x1d78 <vfprintf+0x11a>
    1d6c:	83 37       	cpi	r24, 0x73	; 115
    1d6e:	71 f0       	breq	.+28     	; 0x1d8c <vfprintf+0x12e>
    1d70:	83 35       	cpi	r24, 0x53	; 83
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <vfprintf+0x118>
    1d74:	59 c0       	rjmp	.+178    	; 0x1e28 <vfprintf+0x1ca>
    1d76:	21 c0       	rjmp	.+66     	; 0x1dba <vfprintf+0x15c>
    1d78:	f8 01       	movw	r30, r16
    1d7a:	80 81       	ld	r24, Z
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	0e 5f       	subi	r16, 0xFE	; 254
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	88 24       	eor	r8, r8
    1d84:	83 94       	inc	r8
    1d86:	91 2c       	mov	r9, r1
    1d88:	53 01       	movw	r10, r6
    1d8a:	13 c0       	rjmp	.+38     	; 0x1db2 <vfprintf+0x154>
    1d8c:	28 01       	movw	r4, r16
    1d8e:	f2 e0       	ldi	r31, 0x02	; 2
    1d90:	4f 0e       	add	r4, r31
    1d92:	51 1c       	adc	r5, r1
    1d94:	f8 01       	movw	r30, r16
    1d96:	a0 80       	ld	r10, Z
    1d98:	b1 80       	ldd	r11, Z+1	; 0x01
    1d9a:	36 fe       	sbrs	r3, 6
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <vfprintf+0x146>
    1d9e:	69 2d       	mov	r22, r9
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <vfprintf+0x14a>
    1da4:	6f ef       	ldi	r22, 0xFF	; 255
    1da6:	7f ef       	ldi	r23, 0xFF	; 255
    1da8:	c5 01       	movw	r24, r10
    1daa:	0e 94 5f 11 	call	0x22be	; 0x22be <strnlen>
    1dae:	4c 01       	movw	r8, r24
    1db0:	82 01       	movw	r16, r4
    1db2:	f3 2d       	mov	r31, r3
    1db4:	ff 77       	andi	r31, 0x7F	; 127
    1db6:	3f 2e       	mov	r3, r31
    1db8:	16 c0       	rjmp	.+44     	; 0x1de6 <vfprintf+0x188>
    1dba:	28 01       	movw	r4, r16
    1dbc:	22 e0       	ldi	r18, 0x02	; 2
    1dbe:	42 0e       	add	r4, r18
    1dc0:	51 1c       	adc	r5, r1
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	a0 80       	ld	r10, Z
    1dc6:	b1 80       	ldd	r11, Z+1	; 0x01
    1dc8:	36 fe       	sbrs	r3, 6
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <vfprintf+0x174>
    1dcc:	69 2d       	mov	r22, r9
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x178>
    1dd2:	6f ef       	ldi	r22, 0xFF	; 255
    1dd4:	7f ef       	ldi	r23, 0xFF	; 255
    1dd6:	c5 01       	movw	r24, r10
    1dd8:	0e 94 4d 11 	call	0x229a	; 0x229a <strnlen_P>
    1ddc:	4c 01       	movw	r8, r24
    1dde:	f3 2d       	mov	r31, r3
    1de0:	f0 68       	ori	r31, 0x80	; 128
    1de2:	3f 2e       	mov	r3, r31
    1de4:	82 01       	movw	r16, r4
    1de6:	33 fc       	sbrc	r3, 3
    1de8:	1b c0       	rjmp	.+54     	; 0x1e20 <vfprintf+0x1c2>
    1dea:	82 2d       	mov	r24, r2
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	88 16       	cp	r8, r24
    1df0:	99 06       	cpc	r9, r25
    1df2:	b0 f4       	brcc	.+44     	; 0x1e20 <vfprintf+0x1c2>
    1df4:	b6 01       	movw	r22, r12
    1df6:	80 e2       	ldi	r24, 0x20	; 32
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    1dfe:	2a 94       	dec	r2
    1e00:	f4 cf       	rjmp	.-24     	; 0x1dea <vfprintf+0x18c>
    1e02:	f5 01       	movw	r30, r10
    1e04:	37 fc       	sbrc	r3, 7
    1e06:	85 91       	lpm	r24, Z+
    1e08:	37 fe       	sbrs	r3, 7
    1e0a:	81 91       	ld	r24, Z+
    1e0c:	5f 01       	movw	r10, r30
    1e0e:	b6 01       	movw	r22, r12
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    1e16:	21 10       	cpse	r2, r1
    1e18:	2a 94       	dec	r2
    1e1a:	21 e0       	ldi	r18, 0x01	; 1
    1e1c:	82 1a       	sub	r8, r18
    1e1e:	91 08       	sbc	r9, r1
    1e20:	81 14       	cp	r8, r1
    1e22:	91 04       	cpc	r9, r1
    1e24:	71 f7       	brne	.-36     	; 0x1e02 <vfprintf+0x1a4>
    1e26:	e8 c0       	rjmp	.+464    	; 0x1ff8 <vfprintf+0x39a>
    1e28:	84 36       	cpi	r24, 0x64	; 100
    1e2a:	11 f0       	breq	.+4      	; 0x1e30 <vfprintf+0x1d2>
    1e2c:	89 36       	cpi	r24, 0x69	; 105
    1e2e:	41 f5       	brne	.+80     	; 0x1e80 <vfprintf+0x222>
    1e30:	f8 01       	movw	r30, r16
    1e32:	37 fe       	sbrs	r3, 7
    1e34:	07 c0       	rjmp	.+14     	; 0x1e44 <vfprintf+0x1e6>
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	0c 5f       	subi	r16, 0xFC	; 252
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	08 c0       	rjmp	.+16     	; 0x1e54 <vfprintf+0x1f6>
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	07 2e       	mov	r0, r23
    1e4a:	00 0c       	add	r0, r0
    1e4c:	88 0b       	sbc	r24, r24
    1e4e:	99 0b       	sbc	r25, r25
    1e50:	0e 5f       	subi	r16, 0xFE	; 254
    1e52:	1f 4f       	sbci	r17, 0xFF	; 255
    1e54:	f3 2d       	mov	r31, r3
    1e56:	ff 76       	andi	r31, 0x6F	; 111
    1e58:	3f 2e       	mov	r3, r31
    1e5a:	97 ff       	sbrs	r25, 7
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <vfprintf+0x212>
    1e5e:	90 95       	com	r25
    1e60:	80 95       	com	r24
    1e62:	70 95       	com	r23
    1e64:	61 95       	neg	r22
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6c:	f0 68       	ori	r31, 0x80	; 128
    1e6e:	3f 2e       	mov	r3, r31
    1e70:	2a e0       	ldi	r18, 0x0A	; 10
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	a3 01       	movw	r20, r6
    1e76:	0e 94 b6 11 	call	0x236c	; 0x236c <__ultoa_invert>
    1e7a:	88 2e       	mov	r8, r24
    1e7c:	86 18       	sub	r8, r6
    1e7e:	45 c0       	rjmp	.+138    	; 0x1f0a <vfprintf+0x2ac>
    1e80:	85 37       	cpi	r24, 0x75	; 117
    1e82:	31 f4       	brne	.+12     	; 0x1e90 <vfprintf+0x232>
    1e84:	23 2d       	mov	r18, r3
    1e86:	2f 7e       	andi	r18, 0xEF	; 239
    1e88:	b2 2e       	mov	r11, r18
    1e8a:	2a e0       	ldi	r18, 0x0A	; 10
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	25 c0       	rjmp	.+74     	; 0x1eda <vfprintf+0x27c>
    1e90:	93 2d       	mov	r25, r3
    1e92:	99 7f       	andi	r25, 0xF9	; 249
    1e94:	b9 2e       	mov	r11, r25
    1e96:	8f 36       	cpi	r24, 0x6F	; 111
    1e98:	c1 f0       	breq	.+48     	; 0x1eca <vfprintf+0x26c>
    1e9a:	18 f4       	brcc	.+6      	; 0x1ea2 <vfprintf+0x244>
    1e9c:	88 35       	cpi	r24, 0x58	; 88
    1e9e:	79 f0       	breq	.+30     	; 0x1ebe <vfprintf+0x260>
    1ea0:	b5 c0       	rjmp	.+362    	; 0x200c <vfprintf+0x3ae>
    1ea2:	80 37       	cpi	r24, 0x70	; 112
    1ea4:	19 f0       	breq	.+6      	; 0x1eac <vfprintf+0x24e>
    1ea6:	88 37       	cpi	r24, 0x78	; 120
    1ea8:	21 f0       	breq	.+8      	; 0x1eb2 <vfprintf+0x254>
    1eaa:	b0 c0       	rjmp	.+352    	; 0x200c <vfprintf+0x3ae>
    1eac:	e9 2f       	mov	r30, r25
    1eae:	e0 61       	ori	r30, 0x10	; 16
    1eb0:	be 2e       	mov	r11, r30
    1eb2:	b4 fe       	sbrs	r11, 4
    1eb4:	0d c0       	rjmp	.+26     	; 0x1ed0 <vfprintf+0x272>
    1eb6:	fb 2d       	mov	r31, r11
    1eb8:	f4 60       	ori	r31, 0x04	; 4
    1eba:	bf 2e       	mov	r11, r31
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <vfprintf+0x272>
    1ebe:	34 fe       	sbrs	r3, 4
    1ec0:	0a c0       	rjmp	.+20     	; 0x1ed6 <vfprintf+0x278>
    1ec2:	29 2f       	mov	r18, r25
    1ec4:	26 60       	ori	r18, 0x06	; 6
    1ec6:	b2 2e       	mov	r11, r18
    1ec8:	06 c0       	rjmp	.+12     	; 0x1ed6 <vfprintf+0x278>
    1eca:	28 e0       	ldi	r18, 0x08	; 8
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	05 c0       	rjmp	.+10     	; 0x1eda <vfprintf+0x27c>
    1ed0:	20 e1       	ldi	r18, 0x10	; 16
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <vfprintf+0x27c>
    1ed6:	20 e1       	ldi	r18, 0x10	; 16
    1ed8:	32 e0       	ldi	r19, 0x02	; 2
    1eda:	f8 01       	movw	r30, r16
    1edc:	b7 fe       	sbrs	r11, 7
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <vfprintf+0x290>
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	0c 5f       	subi	r16, 0xFC	; 252
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0x29c>
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 5f       	subi	r16, 0xFE	; 254
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	a3 01       	movw	r20, r6
    1efc:	0e 94 b6 11 	call	0x236c	; 0x236c <__ultoa_invert>
    1f00:	88 2e       	mov	r8, r24
    1f02:	86 18       	sub	r8, r6
    1f04:	fb 2d       	mov	r31, r11
    1f06:	ff 77       	andi	r31, 0x7F	; 127
    1f08:	3f 2e       	mov	r3, r31
    1f0a:	36 fe       	sbrs	r3, 6
    1f0c:	0d c0       	rjmp	.+26     	; 0x1f28 <vfprintf+0x2ca>
    1f0e:	23 2d       	mov	r18, r3
    1f10:	2e 7f       	andi	r18, 0xFE	; 254
    1f12:	a2 2e       	mov	r10, r18
    1f14:	89 14       	cp	r8, r9
    1f16:	58 f4       	brcc	.+22     	; 0x1f2e <vfprintf+0x2d0>
    1f18:	34 fe       	sbrs	r3, 4
    1f1a:	0b c0       	rjmp	.+22     	; 0x1f32 <vfprintf+0x2d4>
    1f1c:	32 fc       	sbrc	r3, 2
    1f1e:	09 c0       	rjmp	.+18     	; 0x1f32 <vfprintf+0x2d4>
    1f20:	83 2d       	mov	r24, r3
    1f22:	8e 7e       	andi	r24, 0xEE	; 238
    1f24:	a8 2e       	mov	r10, r24
    1f26:	05 c0       	rjmp	.+10     	; 0x1f32 <vfprintf+0x2d4>
    1f28:	b8 2c       	mov	r11, r8
    1f2a:	a3 2c       	mov	r10, r3
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <vfprintf+0x2d6>
    1f2e:	b8 2c       	mov	r11, r8
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <vfprintf+0x2d6>
    1f32:	b9 2c       	mov	r11, r9
    1f34:	a4 fe       	sbrs	r10, 4
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <vfprintf+0x2f8>
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e8 0d       	add	r30, r8
    1f3c:	f1 1d       	adc	r31, r1
    1f3e:	80 81       	ld	r24, Z
    1f40:	80 33       	cpi	r24, 0x30	; 48
    1f42:	21 f4       	brne	.+8      	; 0x1f4c <vfprintf+0x2ee>
    1f44:	9a 2d       	mov	r25, r10
    1f46:	99 7e       	andi	r25, 0xE9	; 233
    1f48:	a9 2e       	mov	r10, r25
    1f4a:	09 c0       	rjmp	.+18     	; 0x1f5e <vfprintf+0x300>
    1f4c:	a2 fe       	sbrs	r10, 2
    1f4e:	06 c0       	rjmp	.+12     	; 0x1f5c <vfprintf+0x2fe>
    1f50:	b3 94       	inc	r11
    1f52:	b3 94       	inc	r11
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <vfprintf+0x300>
    1f56:	8a 2d       	mov	r24, r10
    1f58:	86 78       	andi	r24, 0x86	; 134
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <vfprintf+0x300>
    1f5c:	b3 94       	inc	r11
    1f5e:	a3 fc       	sbrc	r10, 3
    1f60:	11 c0       	rjmp	.+34     	; 0x1f84 <vfprintf+0x326>
    1f62:	a0 fe       	sbrs	r10, 0
    1f64:	06 c0       	rjmp	.+12     	; 0x1f72 <vfprintf+0x314>
    1f66:	b2 14       	cp	r11, r2
    1f68:	88 f4       	brcc	.+34     	; 0x1f8c <vfprintf+0x32e>
    1f6a:	28 0c       	add	r2, r8
    1f6c:	92 2c       	mov	r9, r2
    1f6e:	9b 18       	sub	r9, r11
    1f70:	0e c0       	rjmp	.+28     	; 0x1f8e <vfprintf+0x330>
    1f72:	b2 14       	cp	r11, r2
    1f74:	60 f4       	brcc	.+24     	; 0x1f8e <vfprintf+0x330>
    1f76:	b6 01       	movw	r22, r12
    1f78:	80 e2       	ldi	r24, 0x20	; 32
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    1f80:	b3 94       	inc	r11
    1f82:	f7 cf       	rjmp	.-18     	; 0x1f72 <vfprintf+0x314>
    1f84:	b2 14       	cp	r11, r2
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <vfprintf+0x330>
    1f88:	2b 18       	sub	r2, r11
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <vfprintf+0x332>
    1f8c:	98 2c       	mov	r9, r8
    1f8e:	21 2c       	mov	r2, r1
    1f90:	a4 fe       	sbrs	r10, 4
    1f92:	10 c0       	rjmp	.+32     	; 0x1fb4 <vfprintf+0x356>
    1f94:	b6 01       	movw	r22, r12
    1f96:	80 e3       	ldi	r24, 0x30	; 48
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    1f9e:	a2 fe       	sbrs	r10, 2
    1fa0:	17 c0       	rjmp	.+46     	; 0x1fd0 <vfprintf+0x372>
    1fa2:	a1 fc       	sbrc	r10, 1
    1fa4:	03 c0       	rjmp	.+6      	; 0x1fac <vfprintf+0x34e>
    1fa6:	88 e7       	ldi	r24, 0x78	; 120
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <vfprintf+0x352>
    1fac:	88 e5       	ldi	r24, 0x58	; 88
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	0c c0       	rjmp	.+24     	; 0x1fcc <vfprintf+0x36e>
    1fb4:	8a 2d       	mov	r24, r10
    1fb6:	86 78       	andi	r24, 0x86	; 134
    1fb8:	59 f0       	breq	.+22     	; 0x1fd0 <vfprintf+0x372>
    1fba:	a1 fe       	sbrs	r10, 1
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <vfprintf+0x364>
    1fbe:	8b e2       	ldi	r24, 0x2B	; 43
    1fc0:	01 c0       	rjmp	.+2      	; 0x1fc4 <vfprintf+0x366>
    1fc2:	80 e2       	ldi	r24, 0x20	; 32
    1fc4:	a7 fc       	sbrc	r10, 7
    1fc6:	8d e2       	ldi	r24, 0x2D	; 45
    1fc8:	b6 01       	movw	r22, r12
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    1fd0:	89 14       	cp	r8, r9
    1fd2:	38 f4       	brcc	.+14     	; 0x1fe2 <vfprintf+0x384>
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	80 e3       	ldi	r24, 0x30	; 48
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    1fde:	9a 94       	dec	r9
    1fe0:	f7 cf       	rjmp	.-18     	; 0x1fd0 <vfprintf+0x372>
    1fe2:	8a 94       	dec	r8
    1fe4:	f3 01       	movw	r30, r6
    1fe6:	e8 0d       	add	r30, r8
    1fe8:	f1 1d       	adc	r31, r1
    1fea:	80 81       	ld	r24, Z
    1fec:	b6 01       	movw	r22, r12
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    1ff4:	81 10       	cpse	r8, r1
    1ff6:	f5 cf       	rjmp	.-22     	; 0x1fe2 <vfprintf+0x384>
    1ff8:	22 20       	and	r2, r2
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <vfprintf+0x3a0>
    1ffc:	42 ce       	rjmp	.-892    	; 0x1c82 <vfprintf+0x24>
    1ffe:	b6 01       	movw	r22, r12
    2000:	80 e2       	ldi	r24, 0x20	; 32
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <fputc>
    2008:	2a 94       	dec	r2
    200a:	f6 cf       	rjmp	.-20     	; 0x1ff8 <vfprintf+0x39a>
    200c:	f6 01       	movw	r30, r12
    200e:	86 81       	ldd	r24, Z+6	; 0x06
    2010:	97 81       	ldd	r25, Z+7	; 0x07
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <vfprintf+0x3ba>
    2014:	8f ef       	ldi	r24, 0xFF	; 255
    2016:	9f ef       	ldi	r25, 0xFF	; 255
    2018:	2b 96       	adiw	r28, 0x0b	; 11
    201a:	e2 e1       	ldi	r30, 0x12	; 18
    201c:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__epilogue_restores__>

00002020 <calloc>:
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	86 9f       	mul	r24, r22
    202a:	80 01       	movw	r16, r0
    202c:	87 9f       	mul	r24, r23
    202e:	10 0d       	add	r17, r0
    2030:	96 9f       	mul	r25, r22
    2032:	10 0d       	add	r17, r0
    2034:	11 24       	eor	r1, r1
    2036:	c8 01       	movw	r24, r16
    2038:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
    203c:	ec 01       	movw	r28, r24
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	29 f0       	breq	.+10     	; 0x204c <calloc+0x2c>
    2042:	a8 01       	movw	r20, r16
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 58 11 	call	0x22b0	; 0x22b0 <memset>
    204c:	ce 01       	movw	r24, r28
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	08 95       	ret

00002058 <malloc>:
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	82 30       	cpi	r24, 0x02	; 2
    2062:	91 05       	cpc	r25, r1
    2064:	10 f4       	brcc	.+4      	; 0x206a <malloc+0x12>
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <__flp>
    206e:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <__flp+0x1>
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	30 97       	sbiw	r30, 0x00	; 0
    207c:	19 f1       	breq	.+70     	; 0x20c4 <malloc+0x6c>
    207e:	40 81       	ld	r20, Z
    2080:	51 81       	ldd	r21, Z+1	; 0x01
    2082:	02 81       	ldd	r16, Z+2	; 0x02
    2084:	13 81       	ldd	r17, Z+3	; 0x03
    2086:	48 17       	cp	r20, r24
    2088:	59 07       	cpc	r21, r25
    208a:	c8 f0       	brcs	.+50     	; 0x20be <malloc+0x66>
    208c:	84 17       	cp	r24, r20
    208e:	95 07       	cpc	r25, r21
    2090:	69 f4       	brne	.+26     	; 0x20ac <malloc+0x54>
    2092:	10 97       	sbiw	r26, 0x00	; 0
    2094:	31 f0       	breq	.+12     	; 0x20a2 <malloc+0x4a>
    2096:	12 96       	adiw	r26, 0x02	; 2
    2098:	0c 93       	st	X, r16
    209a:	12 97       	sbiw	r26, 0x02	; 2
    209c:	13 96       	adiw	r26, 0x03	; 3
    209e:	1c 93       	st	X, r17
    20a0:	27 c0       	rjmp	.+78     	; 0x20f0 <malloc+0x98>
    20a2:	00 93 a0 03 	sts	0x03A0, r16	; 0x8003a0 <__flp>
    20a6:	10 93 a1 03 	sts	0x03A1, r17	; 0x8003a1 <__flp+0x1>
    20aa:	22 c0       	rjmp	.+68     	; 0x20f0 <malloc+0x98>
    20ac:	21 15       	cp	r18, r1
    20ae:	31 05       	cpc	r19, r1
    20b0:	19 f0       	breq	.+6      	; 0x20b8 <malloc+0x60>
    20b2:	42 17       	cp	r20, r18
    20b4:	53 07       	cpc	r21, r19
    20b6:	18 f4       	brcc	.+6      	; 0x20be <malloc+0x66>
    20b8:	9a 01       	movw	r18, r20
    20ba:	bd 01       	movw	r22, r26
    20bc:	ef 01       	movw	r28, r30
    20be:	df 01       	movw	r26, r30
    20c0:	f8 01       	movw	r30, r16
    20c2:	db cf       	rjmp	.-74     	; 0x207a <malloc+0x22>
    20c4:	21 15       	cp	r18, r1
    20c6:	31 05       	cpc	r19, r1
    20c8:	f9 f0       	breq	.+62     	; 0x2108 <malloc+0xb0>
    20ca:	28 1b       	sub	r18, r24
    20cc:	39 0b       	sbc	r19, r25
    20ce:	24 30       	cpi	r18, 0x04	; 4
    20d0:	31 05       	cpc	r19, r1
    20d2:	80 f4       	brcc	.+32     	; 0x20f4 <malloc+0x9c>
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	61 15       	cp	r22, r1
    20da:	71 05       	cpc	r23, r1
    20dc:	21 f0       	breq	.+8      	; 0x20e6 <malloc+0x8e>
    20de:	fb 01       	movw	r30, r22
    20e0:	93 83       	std	Z+3, r25	; 0x03
    20e2:	82 83       	std	Z+2, r24	; 0x02
    20e4:	04 c0       	rjmp	.+8      	; 0x20ee <malloc+0x96>
    20e6:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <__flp+0x1>
    20ea:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <__flp>
    20ee:	fe 01       	movw	r30, r28
    20f0:	32 96       	adiw	r30, 0x02	; 2
    20f2:	44 c0       	rjmp	.+136    	; 0x217c <malloc+0x124>
    20f4:	fe 01       	movw	r30, r28
    20f6:	e2 0f       	add	r30, r18
    20f8:	f3 1f       	adc	r31, r19
    20fa:	81 93       	st	Z+, r24
    20fc:	91 93       	st	Z+, r25
    20fe:	22 50       	subi	r18, 0x02	; 2
    2100:	31 09       	sbc	r19, r1
    2102:	39 83       	std	Y+1, r19	; 0x01
    2104:	28 83       	st	Y, r18
    2106:	3a c0       	rjmp	.+116    	; 0x217c <malloc+0x124>
    2108:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <__brkval>
    210c:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <__brkval+0x1>
    2110:	23 2b       	or	r18, r19
    2112:	41 f4       	brne	.+16     	; 0x2124 <malloc+0xcc>
    2114:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2118:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    211c:	30 93 9f 03 	sts	0x039F, r19	; 0x80039f <__brkval+0x1>
    2120:	20 93 9e 03 	sts	0x039E, r18	; 0x80039e <__brkval>
    2124:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2128:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    212c:	21 15       	cp	r18, r1
    212e:	31 05       	cpc	r19, r1
    2130:	41 f4       	brne	.+16     	; 0x2142 <malloc+0xea>
    2132:	2d b7       	in	r18, 0x3d	; 61
    2134:	3e b7       	in	r19, 0x3e	; 62
    2136:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    213a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    213e:	24 1b       	sub	r18, r20
    2140:	35 0b       	sbc	r19, r21
    2142:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <__brkval>
    2146:	f0 91 9f 03 	lds	r31, 0x039F	; 0x80039f <__brkval+0x1>
    214a:	e2 17       	cp	r30, r18
    214c:	f3 07       	cpc	r31, r19
    214e:	a0 f4       	brcc	.+40     	; 0x2178 <malloc+0x120>
    2150:	2e 1b       	sub	r18, r30
    2152:	3f 0b       	sbc	r19, r31
    2154:	28 17       	cp	r18, r24
    2156:	39 07       	cpc	r19, r25
    2158:	78 f0       	brcs	.+30     	; 0x2178 <malloc+0x120>
    215a:	ac 01       	movw	r20, r24
    215c:	4e 5f       	subi	r20, 0xFE	; 254
    215e:	5f 4f       	sbci	r21, 0xFF	; 255
    2160:	24 17       	cp	r18, r20
    2162:	35 07       	cpc	r19, r21
    2164:	48 f0       	brcs	.+18     	; 0x2178 <malloc+0x120>
    2166:	4e 0f       	add	r20, r30
    2168:	5f 1f       	adc	r21, r31
    216a:	50 93 9f 03 	sts	0x039F, r21	; 0x80039f <__brkval+0x1>
    216e:	40 93 9e 03 	sts	0x039E, r20	; 0x80039e <__brkval>
    2172:	81 93       	st	Z+, r24
    2174:	91 93       	st	Z+, r25
    2176:	02 c0       	rjmp	.+4      	; 0x217c <malloc+0x124>
    2178:	e0 e0       	ldi	r30, 0x00	; 0
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	cf 01       	movw	r24, r30
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	08 95       	ret

00002188 <free>:
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	09 f4       	brne	.+2      	; 0x2192 <free+0xa>
    2190:	81 c0       	rjmp	.+258    	; 0x2294 <free+0x10c>
    2192:	fc 01       	movw	r30, r24
    2194:	32 97       	sbiw	r30, 0x02	; 2
    2196:	13 82       	std	Z+3, r1	; 0x03
    2198:	12 82       	std	Z+2, r1	; 0x02
    219a:	a0 91 a0 03 	lds	r26, 0x03A0	; 0x8003a0 <__flp>
    219e:	b0 91 a1 03 	lds	r27, 0x03A1	; 0x8003a1 <__flp+0x1>
    21a2:	10 97       	sbiw	r26, 0x00	; 0
    21a4:	81 f4       	brne	.+32     	; 0x21c6 <free+0x3e>
    21a6:	20 81       	ld	r18, Z
    21a8:	31 81       	ldd	r19, Z+1	; 0x01
    21aa:	82 0f       	add	r24, r18
    21ac:	93 1f       	adc	r25, r19
    21ae:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <__brkval>
    21b2:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <__brkval+0x1>
    21b6:	28 17       	cp	r18, r24
    21b8:	39 07       	cpc	r19, r25
    21ba:	51 f5       	brne	.+84     	; 0x2210 <free+0x88>
    21bc:	f0 93 9f 03 	sts	0x039F, r31	; 0x80039f <__brkval+0x1>
    21c0:	e0 93 9e 03 	sts	0x039E, r30	; 0x80039e <__brkval>
    21c4:	67 c0       	rjmp	.+206    	; 0x2294 <free+0x10c>
    21c6:	ed 01       	movw	r28, r26
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	ce 17       	cp	r28, r30
    21ce:	df 07       	cpc	r29, r31
    21d0:	40 f4       	brcc	.+16     	; 0x21e2 <free+0x5a>
    21d2:	4a 81       	ldd	r20, Y+2	; 0x02
    21d4:	5b 81       	ldd	r21, Y+3	; 0x03
    21d6:	9e 01       	movw	r18, r28
    21d8:	41 15       	cp	r20, r1
    21da:	51 05       	cpc	r21, r1
    21dc:	f1 f0       	breq	.+60     	; 0x221a <free+0x92>
    21de:	ea 01       	movw	r28, r20
    21e0:	f5 cf       	rjmp	.-22     	; 0x21cc <free+0x44>
    21e2:	d3 83       	std	Z+3, r29	; 0x03
    21e4:	c2 83       	std	Z+2, r28	; 0x02
    21e6:	40 81       	ld	r20, Z
    21e8:	51 81       	ldd	r21, Z+1	; 0x01
    21ea:	84 0f       	add	r24, r20
    21ec:	95 1f       	adc	r25, r21
    21ee:	c8 17       	cp	r28, r24
    21f0:	d9 07       	cpc	r29, r25
    21f2:	59 f4       	brne	.+22     	; 0x220a <free+0x82>
    21f4:	88 81       	ld	r24, Y
    21f6:	99 81       	ldd	r25, Y+1	; 0x01
    21f8:	84 0f       	add	r24, r20
    21fa:	95 1f       	adc	r25, r21
    21fc:	02 96       	adiw	r24, 0x02	; 2
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	9b 81       	ldd	r25, Y+3	; 0x03
    2206:	93 83       	std	Z+3, r25	; 0x03
    2208:	82 83       	std	Z+2, r24	; 0x02
    220a:	21 15       	cp	r18, r1
    220c:	31 05       	cpc	r19, r1
    220e:	29 f4       	brne	.+10     	; 0x221a <free+0x92>
    2210:	f0 93 a1 03 	sts	0x03A1, r31	; 0x8003a1 <__flp+0x1>
    2214:	e0 93 a0 03 	sts	0x03A0, r30	; 0x8003a0 <__flp>
    2218:	3d c0       	rjmp	.+122    	; 0x2294 <free+0x10c>
    221a:	e9 01       	movw	r28, r18
    221c:	fb 83       	std	Y+3, r31	; 0x03
    221e:	ea 83       	std	Y+2, r30	; 0x02
    2220:	49 91       	ld	r20, Y+
    2222:	59 91       	ld	r21, Y+
    2224:	c4 0f       	add	r28, r20
    2226:	d5 1f       	adc	r29, r21
    2228:	ec 17       	cp	r30, r28
    222a:	fd 07       	cpc	r31, r29
    222c:	61 f4       	brne	.+24     	; 0x2246 <free+0xbe>
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	84 0f       	add	r24, r20
    2234:	95 1f       	adc	r25, r21
    2236:	02 96       	adiw	r24, 0x02	; 2
    2238:	e9 01       	movw	r28, r18
    223a:	99 83       	std	Y+1, r25	; 0x01
    223c:	88 83       	st	Y, r24
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	9b 83       	std	Y+3, r25	; 0x03
    2244:	8a 83       	std	Y+2, r24	; 0x02
    2246:	e0 e0       	ldi	r30, 0x00	; 0
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	12 96       	adiw	r26, 0x02	; 2
    224c:	8d 91       	ld	r24, X+
    224e:	9c 91       	ld	r25, X
    2250:	13 97       	sbiw	r26, 0x03	; 3
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	19 f0       	breq	.+6      	; 0x225c <free+0xd4>
    2256:	fd 01       	movw	r30, r26
    2258:	dc 01       	movw	r26, r24
    225a:	f7 cf       	rjmp	.-18     	; 0x224a <free+0xc2>
    225c:	8d 91       	ld	r24, X+
    225e:	9c 91       	ld	r25, X
    2260:	11 97       	sbiw	r26, 0x01	; 1
    2262:	9d 01       	movw	r18, r26
    2264:	2e 5f       	subi	r18, 0xFE	; 254
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	82 0f       	add	r24, r18
    226a:	93 1f       	adc	r25, r19
    226c:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <__brkval>
    2270:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <__brkval+0x1>
    2274:	28 17       	cp	r18, r24
    2276:	39 07       	cpc	r19, r25
    2278:	69 f4       	brne	.+26     	; 0x2294 <free+0x10c>
    227a:	30 97       	sbiw	r30, 0x00	; 0
    227c:	29 f4       	brne	.+10     	; 0x2288 <free+0x100>
    227e:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <__flp+0x1>
    2282:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <__flp>
    2286:	02 c0       	rjmp	.+4      	; 0x228c <free+0x104>
    2288:	13 82       	std	Z+3, r1	; 0x03
    228a:	12 82       	std	Z+2, r1	; 0x02
    228c:	b0 93 9f 03 	sts	0x039F, r27	; 0x80039f <__brkval+0x1>
    2290:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <__brkval>
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	08 95       	ret

0000229a <strnlen_P>:
    229a:	fc 01       	movw	r30, r24
    229c:	05 90       	lpm	r0, Z+
    229e:	61 50       	subi	r22, 0x01	; 1
    22a0:	70 40       	sbci	r23, 0x00	; 0
    22a2:	01 10       	cpse	r0, r1
    22a4:	d8 f7       	brcc	.-10     	; 0x229c <strnlen_P+0x2>
    22a6:	80 95       	com	r24
    22a8:	90 95       	com	r25
    22aa:	8e 0f       	add	r24, r30
    22ac:	9f 1f       	adc	r25, r31
    22ae:	08 95       	ret

000022b0 <memset>:
    22b0:	dc 01       	movw	r26, r24
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <memset+0x6>
    22b4:	6d 93       	st	X+, r22
    22b6:	41 50       	subi	r20, 0x01	; 1
    22b8:	50 40       	sbci	r21, 0x00	; 0
    22ba:	e0 f7       	brcc	.-8      	; 0x22b4 <memset+0x4>
    22bc:	08 95       	ret

000022be <strnlen>:
    22be:	fc 01       	movw	r30, r24
    22c0:	61 50       	subi	r22, 0x01	; 1
    22c2:	70 40       	sbci	r23, 0x00	; 0
    22c4:	01 90       	ld	r0, Z+
    22c6:	01 10       	cpse	r0, r1
    22c8:	d8 f7       	brcc	.-10     	; 0x22c0 <strnlen+0x2>
    22ca:	80 95       	com	r24
    22cc:	90 95       	com	r25
    22ce:	8e 0f       	add	r24, r30
    22d0:	9f 1f       	adc	r25, r31
    22d2:	08 95       	ret

000022d4 <strrev>:
    22d4:	dc 01       	movw	r26, r24
    22d6:	fc 01       	movw	r30, r24
    22d8:	67 2f       	mov	r22, r23
    22da:	71 91       	ld	r23, Z+
    22dc:	77 23       	and	r23, r23
    22de:	e1 f7       	brne	.-8      	; 0x22d8 <strrev+0x4>
    22e0:	32 97       	sbiw	r30, 0x02	; 2
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <strrev+0x18>
    22e4:	7c 91       	ld	r23, X
    22e6:	6d 93       	st	X+, r22
    22e8:	70 83       	st	Z, r23
    22ea:	62 91       	ld	r22, -Z
    22ec:	ae 17       	cp	r26, r30
    22ee:	bf 07       	cpc	r27, r31
    22f0:	c8 f3       	brcs	.-14     	; 0x22e4 <strrev+0x10>
    22f2:	08 95       	ret

000022f4 <fputc>:
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	fb 01       	movw	r30, r22
    22fe:	23 81       	ldd	r18, Z+3	; 0x03
    2300:	21 fd       	sbrc	r18, 1
    2302:	03 c0       	rjmp	.+6      	; 0x230a <fputc+0x16>
    2304:	8f ef       	ldi	r24, 0xFF	; 255
    2306:	9f ef       	ldi	r25, 0xFF	; 255
    2308:	2c c0       	rjmp	.+88     	; 0x2362 <fputc+0x6e>
    230a:	22 ff       	sbrs	r18, 2
    230c:	16 c0       	rjmp	.+44     	; 0x233a <fputc+0x46>
    230e:	46 81       	ldd	r20, Z+6	; 0x06
    2310:	57 81       	ldd	r21, Z+7	; 0x07
    2312:	24 81       	ldd	r18, Z+4	; 0x04
    2314:	35 81       	ldd	r19, Z+5	; 0x05
    2316:	42 17       	cp	r20, r18
    2318:	53 07       	cpc	r21, r19
    231a:	44 f4       	brge	.+16     	; 0x232c <fputc+0x38>
    231c:	a0 81       	ld	r26, Z
    231e:	b1 81       	ldd	r27, Z+1	; 0x01
    2320:	9d 01       	movw	r18, r26
    2322:	2f 5f       	subi	r18, 0xFF	; 255
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	31 83       	std	Z+1, r19	; 0x01
    2328:	20 83       	st	Z, r18
    232a:	8c 93       	st	X, r24
    232c:	26 81       	ldd	r18, Z+6	; 0x06
    232e:	37 81       	ldd	r19, Z+7	; 0x07
    2330:	2f 5f       	subi	r18, 0xFF	; 255
    2332:	3f 4f       	sbci	r19, 0xFF	; 255
    2334:	37 83       	std	Z+7, r19	; 0x07
    2336:	26 83       	std	Z+6, r18	; 0x06
    2338:	14 c0       	rjmp	.+40     	; 0x2362 <fputc+0x6e>
    233a:	8b 01       	movw	r16, r22
    233c:	ec 01       	movw	r28, r24
    233e:	fb 01       	movw	r30, r22
    2340:	00 84       	ldd	r0, Z+8	; 0x08
    2342:	f1 85       	ldd	r31, Z+9	; 0x09
    2344:	e0 2d       	mov	r30, r0
    2346:	09 95       	icall
    2348:	89 2b       	or	r24, r25
    234a:	e1 f6       	brne	.-72     	; 0x2304 <fputc+0x10>
    234c:	d8 01       	movw	r26, r16
    234e:	16 96       	adiw	r26, 0x06	; 6
    2350:	8d 91       	ld	r24, X+
    2352:	9c 91       	ld	r25, X
    2354:	17 97       	sbiw	r26, 0x07	; 7
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	17 96       	adiw	r26, 0x07	; 7
    235a:	9c 93       	st	X, r25
    235c:	8e 93       	st	-X, r24
    235e:	16 97       	sbiw	r26, 0x06	; 6
    2360:	ce 01       	movw	r24, r28
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	08 95       	ret

0000236c <__ultoa_invert>:
    236c:	fa 01       	movw	r30, r20
    236e:	aa 27       	eor	r26, r26
    2370:	28 30       	cpi	r18, 0x08	; 8
    2372:	51 f1       	breq	.+84     	; 0x23c8 <__ultoa_invert+0x5c>
    2374:	20 31       	cpi	r18, 0x10	; 16
    2376:	81 f1       	breq	.+96     	; 0x23d8 <__ultoa_invert+0x6c>
    2378:	e8 94       	clt
    237a:	6f 93       	push	r22
    237c:	6e 7f       	andi	r22, 0xFE	; 254
    237e:	6e 5f       	subi	r22, 0xFE	; 254
    2380:	7f 4f       	sbci	r23, 0xFF	; 255
    2382:	8f 4f       	sbci	r24, 0xFF	; 255
    2384:	9f 4f       	sbci	r25, 0xFF	; 255
    2386:	af 4f       	sbci	r26, 0xFF	; 255
    2388:	b1 e0       	ldi	r27, 0x01	; 1
    238a:	3e d0       	rcall	.+124    	; 0x2408 <__ultoa_invert+0x9c>
    238c:	b4 e0       	ldi	r27, 0x04	; 4
    238e:	3c d0       	rcall	.+120    	; 0x2408 <__ultoa_invert+0x9c>
    2390:	67 0f       	add	r22, r23
    2392:	78 1f       	adc	r23, r24
    2394:	89 1f       	adc	r24, r25
    2396:	9a 1f       	adc	r25, r26
    2398:	a1 1d       	adc	r26, r1
    239a:	68 0f       	add	r22, r24
    239c:	79 1f       	adc	r23, r25
    239e:	8a 1f       	adc	r24, r26
    23a0:	91 1d       	adc	r25, r1
    23a2:	a1 1d       	adc	r26, r1
    23a4:	6a 0f       	add	r22, r26
    23a6:	71 1d       	adc	r23, r1
    23a8:	81 1d       	adc	r24, r1
    23aa:	91 1d       	adc	r25, r1
    23ac:	a1 1d       	adc	r26, r1
    23ae:	20 d0       	rcall	.+64     	; 0x23f0 <__ultoa_invert+0x84>
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <__ultoa_invert+0x48>
    23b2:	68 94       	set
    23b4:	3f 91       	pop	r19
    23b6:	2a e0       	ldi	r18, 0x0A	; 10
    23b8:	26 9f       	mul	r18, r22
    23ba:	11 24       	eor	r1, r1
    23bc:	30 19       	sub	r19, r0
    23be:	30 5d       	subi	r19, 0xD0	; 208
    23c0:	31 93       	st	Z+, r19
    23c2:	de f6       	brtc	.-74     	; 0x237a <__ultoa_invert+0xe>
    23c4:	cf 01       	movw	r24, r30
    23c6:	08 95       	ret
    23c8:	46 2f       	mov	r20, r22
    23ca:	47 70       	andi	r20, 0x07	; 7
    23cc:	40 5d       	subi	r20, 0xD0	; 208
    23ce:	41 93       	st	Z+, r20
    23d0:	b3 e0       	ldi	r27, 0x03	; 3
    23d2:	0f d0       	rcall	.+30     	; 0x23f2 <__ultoa_invert+0x86>
    23d4:	c9 f7       	brne	.-14     	; 0x23c8 <__ultoa_invert+0x5c>
    23d6:	f6 cf       	rjmp	.-20     	; 0x23c4 <__ultoa_invert+0x58>
    23d8:	46 2f       	mov	r20, r22
    23da:	4f 70       	andi	r20, 0x0F	; 15
    23dc:	40 5d       	subi	r20, 0xD0	; 208
    23de:	4a 33       	cpi	r20, 0x3A	; 58
    23e0:	18 f0       	brcs	.+6      	; 0x23e8 <__ultoa_invert+0x7c>
    23e2:	49 5d       	subi	r20, 0xD9	; 217
    23e4:	31 fd       	sbrc	r19, 1
    23e6:	40 52       	subi	r20, 0x20	; 32
    23e8:	41 93       	st	Z+, r20
    23ea:	02 d0       	rcall	.+4      	; 0x23f0 <__ultoa_invert+0x84>
    23ec:	a9 f7       	brne	.-22     	; 0x23d8 <__ultoa_invert+0x6c>
    23ee:	ea cf       	rjmp	.-44     	; 0x23c4 <__ultoa_invert+0x58>
    23f0:	b4 e0       	ldi	r27, 0x04	; 4
    23f2:	a6 95       	lsr	r26
    23f4:	97 95       	ror	r25
    23f6:	87 95       	ror	r24
    23f8:	77 95       	ror	r23
    23fa:	67 95       	ror	r22
    23fc:	ba 95       	dec	r27
    23fe:	c9 f7       	brne	.-14     	; 0x23f2 <__ultoa_invert+0x86>
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	61 05       	cpc	r22, r1
    2404:	71 05       	cpc	r23, r1
    2406:	08 95       	ret
    2408:	9b 01       	movw	r18, r22
    240a:	ac 01       	movw	r20, r24
    240c:	0a 2e       	mov	r0, r26
    240e:	06 94       	lsr	r0
    2410:	57 95       	ror	r21
    2412:	47 95       	ror	r20
    2414:	37 95       	ror	r19
    2416:	27 95       	ror	r18
    2418:	ba 95       	dec	r27
    241a:	c9 f7       	brne	.-14     	; 0x240e <__ultoa_invert+0xa2>
    241c:	62 0f       	add	r22, r18
    241e:	73 1f       	adc	r23, r19
    2420:	84 1f       	adc	r24, r20
    2422:	95 1f       	adc	r25, r21
    2424:	a0 1d       	adc	r26, r0
    2426:	08 95       	ret

00002428 <__prologue_saves__>:
    2428:	2f 92       	push	r2
    242a:	3f 92       	push	r3
    242c:	4f 92       	push	r4
    242e:	5f 92       	push	r5
    2430:	6f 92       	push	r6
    2432:	7f 92       	push	r7
    2434:	8f 92       	push	r8
    2436:	9f 92       	push	r9
    2438:	af 92       	push	r10
    243a:	bf 92       	push	r11
    243c:	cf 92       	push	r12
    243e:	df 92       	push	r13
    2440:	ef 92       	push	r14
    2442:	ff 92       	push	r15
    2444:	0f 93       	push	r16
    2446:	1f 93       	push	r17
    2448:	cf 93       	push	r28
    244a:	df 93       	push	r29
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	ca 1b       	sub	r28, r26
    2452:	db 0b       	sbc	r29, r27
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	09 94       	ijmp

00002460 <__epilogue_restores__>:
    2460:	2a 88       	ldd	r2, Y+18	; 0x12
    2462:	39 88       	ldd	r3, Y+17	; 0x11
    2464:	48 88       	ldd	r4, Y+16	; 0x10
    2466:	5f 84       	ldd	r5, Y+15	; 0x0f
    2468:	6e 84       	ldd	r6, Y+14	; 0x0e
    246a:	7d 84       	ldd	r7, Y+13	; 0x0d
    246c:	8c 84       	ldd	r8, Y+12	; 0x0c
    246e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2470:	aa 84       	ldd	r10, Y+10	; 0x0a
    2472:	b9 84       	ldd	r11, Y+9	; 0x09
    2474:	c8 84       	ldd	r12, Y+8	; 0x08
    2476:	df 80       	ldd	r13, Y+7	; 0x07
    2478:	ee 80       	ldd	r14, Y+6	; 0x06
    247a:	fd 80       	ldd	r15, Y+5	; 0x05
    247c:	0c 81       	ldd	r16, Y+4	; 0x04
    247e:	1b 81       	ldd	r17, Y+3	; 0x03
    2480:	aa 81       	ldd	r26, Y+2	; 0x02
    2482:	b9 81       	ldd	r27, Y+1	; 0x01
    2484:	ce 0f       	add	r28, r30
    2486:	d1 1d       	adc	r29, r1
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	ed 01       	movw	r28, r26
    2494:	08 95       	ret

00002496 <_exit>:
    2496:	f8 94       	cli

00002498 <__stop_program>:
    2498:	ff cf       	rjmp	.-2      	; 0x2498 <__stop_program>
