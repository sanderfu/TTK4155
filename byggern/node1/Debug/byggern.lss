
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000264  00800100  0000292a  000029be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000292a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800364  00800364  00002c22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005473  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d2e  00000000  00000000  00008527  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000221f  00000000  00000000  0000a255  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000094c  00000000  00000000  0000c474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf9  00000000  00000000  0000cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022af  00000000  00000000  0000dab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000fd68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	13 e0       	ldi	r17, 0x03	; 3
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	ea e2       	ldi	r30, 0x2A	; 42
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 36       	cpi	r26, 0x64	; 100
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a4 e6       	ldi	r26, 0x64	; 100
     548:	b3 e0       	ldi	r27, 0x03	; 3
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a2 3a       	cpi	r26, 0xA2	; 162
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 93 14 	jmp	0x2926	; 0x2926 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xf5e>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xf5e>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "CAN.h"
#include "game.h"
#include "music.h"
#include "sleep.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
//p.23 for can read instructions
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 08 0c 	call	0x1810	; 0x1810 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     5aa:	87 e5       	ldi	r24, 0x57	; 87
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>
	printf("---------------------------------------\n\r");
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x4e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x58>
     5ea:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <CAN_controller_setMode>
     5f2:	af ef       	ldi	r26, 0xFF	; 255
     5f4:	bf e7       	ldi	r27, 0x7F	; 127
     5f6:	27 e0       	ldi	r18, 0x07	; 7
     5f8:	a1 50       	subi	r26, 0x01	; 1
     5fa:	b0 40       	sbci	r27, 0x00	; 0
     5fc:	20 40       	sbci	r18, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x66>
     600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x70>
     602:	00 00       	nop
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     60c:	01 e7       	ldi	r16, 0x71	; 113
     60e:	13 e0       	ldi	r17, 0x03	; 3
	_delay_ms(500);
	//test_SRAM();            
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     610:	0e 94 53 09 	call	0x12a6	; 0x12a6 <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     614:	d8 01       	movw	r26, r16
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	80 81       	ld	r24, Z
     61c:	85 30       	cpi	r24, 0x05	; 5
     61e:	91 f0       	breq	.+36     	; 0x644 <main+0xb2>
     620:	28 f4       	brcc	.+10     	; 0x62c <main+0x9a>
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	41 f0       	breq	.+16     	; 0x636 <main+0xa4>
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	49 f0       	breq	.+18     	; 0x63c <main+0xaa>
     62a:	f2 cf       	rjmp	.-28     	; 0x610 <main+0x7e>
     62c:	86 30       	cpi	r24, 0x06	; 6
     62e:	71 f0       	breq	.+28     	; 0x64c <main+0xba>
     630:	87 30       	cpi	r24, 0x07	; 7
     632:	81 f0       	breq	.+32     	; 0x654 <main+0xc2>
     634:	ed cf       	rjmp	.-38     	; 0x610 <main+0x7e>
			case PLAY_GAME:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     636:	0e 94 15 08 	call	0x102a	; 0x102a <music_playRick>
				break;
     63a:	ea cf       	rjmp	.-44     	; 0x610 <main+0x7e>
			case GAME_1:
				game_play(1);
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	0e 94 75 07 	call	0xeea	; 0xeea <game_play>
				break;
     642:	e6 cf       	rjmp	.-52     	; 0x610 <main+0x7e>
			case GAME_2:
				game_play(2);
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	0e 94 75 07 	call	0xeea	; 0xeea <game_play>
				break;
     64a:	e2 cf       	rjmp	.-60     	; 0x610 <main+0x7e>
			case HS1:
				game_displayHighscores(1);
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	0e 94 a2 07 	call	0xf44	; 0xf44 <game_displayHighscores>
				break;
     652:	de cf       	rjmp	.-68     	; 0x610 <main+0x7e>
			case HS2:
				game_displayHighscores(2);
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 a2 07 	call	0xf44	; 0xf44 <game_displayHighscores>
				break;
     65a:	da cf       	rjmp	.-76     	; 0x610 <main+0x7e>

0000065c <CAN_init>:
#define F_CPU 4915200
#include <util/delay.h>


void CAN_init() {
	CAN_controller_init();
     65c:	0e 94 26 05 	call	0xa4c	; 0xa4c <CAN_controller_init>
     660:	08 95       	ret

00000662 <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	6c e2       	ldi	r22, 0x2C	; 44
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
     66c:	08 95       	ret

0000066e <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     676:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     67a:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	63 e0       	ldi	r22, 0x03	; 3
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__divmodhi4>
     688:	28 2f       	mov	r18, r24
     68a:	39 2f       	mov	r19, r25
     68c:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <__data_end>
     690:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <__data_end+0x1>
	
	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     694:	21 30       	cpi	r18, 0x01	; 1
     696:	31 05       	cpc	r19, r1
     698:	e9 f0       	breq	.+58     	; 0x6d4 <CAN_transmit_message+0x66>
     69a:	22 30       	cpi	r18, 0x02	; 2
     69c:	31 05       	cpc	r19, r1
     69e:	89 f1       	breq	.+98     	; 0x702 <CAN_transmit_message+0x94>
     6a0:	23 2b       	or	r18, r19
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <CAN_transmit_message+0x38>
     6a4:	44 c0       	rjmp	.+136    	; 0x72e <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6a6:	f8 01       	movw	r30, r16
     6a8:	40 85       	ldd	r20, Z+8	; 0x08
     6aa:	51 85       	ldd	r21, Z+9	; 0x09
     6ac:	42 95       	swap	r20
     6ae:	44 0f       	add	r20, r20
     6b0:	40 7e       	andi	r20, 0xE0	; 224
     6b2:	62 e3       	ldi	r22, 0x32	; 50
     6b4:	80 ee       	ldi	r24, 0xE0	; 224
     6b6:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6ba:	f8 01       	movw	r30, r16
     6bc:	60 85       	ldd	r22, Z+8	; 0x08
     6be:	71 85       	ldd	r23, Z+9	; 0x09
     6c0:	76 95       	lsr	r23
     6c2:	67 95       	ror	r22
     6c4:	76 95       	lsr	r23
     6c6:	67 95       	ror	r22
     6c8:	76 95       	lsr	r23
     6ca:	67 95       	ror	r22
     6cc:	81 e3       	ldi	r24, 0x31	; 49
     6ce:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     6d2:	2d c0       	rjmp	.+90     	; 0x72e <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6d4:	f8 01       	movw	r30, r16
     6d6:	40 85       	ldd	r20, Z+8	; 0x08
     6d8:	51 85       	ldd	r21, Z+9	; 0x09
     6da:	42 95       	swap	r20
     6dc:	44 0f       	add	r20, r20
     6de:	40 7e       	andi	r20, 0xE0	; 224
     6e0:	62 e4       	ldi	r22, 0x42	; 66
     6e2:	80 ee       	ldi	r24, 0xE0	; 224
     6e4:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     6e8:	f8 01       	movw	r30, r16
     6ea:	60 85       	ldd	r22, Z+8	; 0x08
     6ec:	71 85       	ldd	r23, Z+9	; 0x09
     6ee:	76 95       	lsr	r23
     6f0:	67 95       	ror	r22
     6f2:	76 95       	lsr	r23
     6f4:	67 95       	ror	r22
     6f6:	76 95       	lsr	r23
     6f8:	67 95       	ror	r22
     6fa:	81 e4       	ldi	r24, 0x41	; 65
     6fc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_write>
				
				break;
     700:	16 c0       	rjmp	.+44     	; 0x72e <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     702:	f8 01       	movw	r30, r16
     704:	40 85       	ldd	r20, Z+8	; 0x08
     706:	51 85       	ldd	r21, Z+9	; 0x09
     708:	42 95       	swap	r20
     70a:	44 0f       	add	r20, r20
     70c:	40 7e       	andi	r20, 0xE0	; 224
     70e:	62 e5       	ldi	r22, 0x52	; 82
     710:	80 ee       	ldi	r24, 0xE0	; 224
     712:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     716:	f8 01       	movw	r30, r16
     718:	60 85       	ldd	r22, Z+8	; 0x08
     71a:	71 85       	ldd	r23, Z+9	; 0x09
     71c:	76 95       	lsr	r23
     71e:	67 95       	ror	r22
     720:	76 95       	lsr	r23
     722:	67 95       	ror	r22
     724:	76 95       	lsr	r23
     726:	67 95       	ror	r22
     728:	81 e5       	ldi	r24, 0x51	; 81
     72a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     72e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     732:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	91 05       	cpc	r25, r1
     73a:	61 f0       	breq	.+24     	; 0x754 <CAN_transmit_message+0xe6>
     73c:	82 30       	cpi	r24, 0x02	; 2
     73e:	91 05       	cpc	r25, r1
     740:	81 f0       	breq	.+32     	; 0x762 <CAN_transmit_message+0xf4>
     742:	89 2b       	or	r24, r25
     744:	a1 f4       	brne	.+40     	; 0x76e <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     746:	f8 01       	movw	r30, r16
     748:	42 85       	ldd	r20, Z+10	; 0x0a
     74a:	65 e3       	ldi	r22, 0x35	; 53
     74c:	8f e0       	ldi	r24, 0x0F	; 15
     74e:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
				break;
     752:	0d c0       	rjmp	.+26     	; 0x76e <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     754:	f8 01       	movw	r30, r16
     756:	42 85       	ldd	r20, Z+10	; 0x0a
     758:	65 e4       	ldi	r22, 0x45	; 69
     75a:	8f e0       	ldi	r24, 0x0F	; 15
     75c:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
				break;
     760:	06 c0       	rjmp	.+12     	; 0x76e <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     762:	f8 01       	movw	r30, r16
     764:	42 85       	ldd	r20, Z+10	; 0x0a
     766:	65 e5       	ldi	r22, 0x55	; 85
     768:	8f e0       	ldi	r24, 0x0F	; 15
     76a:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     76e:	f8 01       	movw	r30, r16
     770:	82 85       	ldd	r24, Z+10	; 0x0a
     772:	88 23       	and	r24, r24
     774:	61 f1       	breq	.+88     	; 0x7ce <CAN_transmit_message+0x160>
     776:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     778:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     77c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <__data_end+0x1>
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	91 05       	cpc	r25, r1
     784:	71 f0       	breq	.+28     	; 0x7a2 <CAN_transmit_message+0x134>
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	91 05       	cpc	r25, r1
     78a:	a1 f0       	breq	.+40     	; 0x7b4 <CAN_transmit_message+0x146>
     78c:	89 2b       	or	r24, r25
     78e:	d1 f4       	brne	.+52     	; 0x7c4 <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     790:	f8 01       	movw	r30, r16
     792:	ec 0f       	add	r30, r28
     794:	f1 1d       	adc	r31, r1
     796:	60 81       	ld	r22, Z
     798:	86 e3       	ldi	r24, 0x36	; 54
     79a:	8c 0f       	add	r24, r28
     79c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_write>
				break;
     7a0:	11 c0       	rjmp	.+34     	; 0x7c4 <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7a2:	f8 01       	movw	r30, r16
     7a4:	ec 0f       	add	r30, r28
     7a6:	f1 1d       	adc	r31, r1
     7a8:	60 81       	ld	r22, Z
     7aa:	86 e4       	ldi	r24, 0x46	; 70
     7ac:	8c 0f       	add	r24, r28
     7ae:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_write>
				break;
     7b2:	08 c0       	rjmp	.+16     	; 0x7c4 <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7b4:	f8 01       	movw	r30, r16
     7b6:	ec 0f       	add	r30, r28
     7b8:	f1 1d       	adc	r31, r1
     7ba:	60 81       	ld	r22, Z
     7bc:	86 e5       	ldi	r24, 0x56	; 86
     7be:	8c 0f       	add	r24, r28
     7c0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     7c4:	cf 5f       	subi	r28, 0xFF	; 255
     7c6:	f8 01       	movw	r30, r16
     7c8:	82 85       	ldd	r24, Z+10	; 0x0a
     7ca:	8c 13       	cpse	r24, r28
     7cc:	d5 cf       	rjmp	.-86     	; 0x778 <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7ce:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     7d2:	0e 94 b6 04 	call	0x96c	; 0x96c <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     7ea:	82 e6       	ldi	r24, 0x62	; 98
     7ec:	0e 94 56 04 	call	0x8ac	; 0x8ac <CAN_controller_read>
     7f0:	c8 2f       	mov	r28, r24
     7f2:	81 e6       	ldi	r24, 0x61	; 97
     7f4:	0e 94 56 04 	call	0x8ac	; 0x8ac <CAN_controller_read>
     7f8:	c2 95       	swap	r28
     7fa:	c6 95       	lsr	r28
     7fc:	c7 70       	andi	r28, 0x07	; 7
     7fe:	28 e0       	ldi	r18, 0x08	; 8
     800:	82 9f       	mul	r24, r18
     802:	c0 01       	movw	r24, r0
     804:	11 24       	eor	r1, r1
     806:	8c 0f       	add	r24, r28
     808:	91 1d       	adc	r25, r1
     80a:	f7 01       	movw	r30, r14
     80c:	91 87       	std	Z+9, r25	; 0x09
     80e:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     810:	85 e6       	ldi	r24, 0x65	; 101
     812:	0e 94 56 04 	call	0x8ac	; 0x8ac <CAN_controller_read>
     816:	8f 70       	andi	r24, 0x0F	; 15
     818:	f7 01       	movw	r30, r14
     81a:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     81c:	82 85       	ldd	r24, Z+10	; 0x0a
     81e:	88 23       	and	r24, r24
     820:	81 f0       	breq	.+32     	; 0x842 <CAN_receiveMessage+0x64>
     822:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     824:	0c 2f       	mov	r16, r28
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	86 e6       	ldi	r24, 0x66	; 102
     82a:	8c 0f       	add	r24, r28
     82c:	0e 94 56 04 	call	0x8ac	; 0x8ac <CAN_controller_read>
     830:	f7 01       	movw	r30, r14
     832:	e0 0f       	add	r30, r16
     834:	f1 1f       	adc	r31, r17
     836:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     838:	cf 5f       	subi	r28, 0xFF	; 255
     83a:	f7 01       	movw	r30, r14
     83c:	82 85       	ldd	r24, Z+10	; 0x0a
     83e:	8c 13       	cpse	r24, r28
     840:	f1 cf       	rjmp	.-30     	; 0x824 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	08 95       	ret

0000084e <CAN_sendInputData>:

void CAN_sendInputData() {
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	2b 97       	sbiw	r28, 0x0b	; 11
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	9a 87       	std	Y+10, r25	; 0x0a
     868:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     86a:	86 e0       	ldi	r24, 0x06	; 6
     86c:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     86e:	ea e8       	ldi	r30, 0x8A	; 138
     870:	f3 e0       	ldi	r31, 0x03	; 3
     872:	80 81       	ld	r24, Z
     874:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     876:	81 81       	ldd	r24, Z+1	; 0x01
     878:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     87a:	e8 e8       	ldi	r30, 0x88	; 136
     87c:	f3 e0       	ldi	r31, 0x03	; 3
     87e:	80 81       	ld	r24, Z
     880:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     882:	81 81       	ldd	r24, Z+1	; 0x01
     884:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     886:	e8 e6       	ldi	r30, 0x68	; 104
     888:	f3 e0       	ldi	r31, 0x03	; 3
     88a:	80 81       	ld	r24, Z
     88c:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     88e:	81 81       	ldd	r24, Z+1	; 0x01
     890:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     892:	ce 01       	movw	r24, r28
     894:	01 96       	adiw	r24, 0x01	; 1
     896:	0e 94 37 03 	call	0x66e	; 0x66e <CAN_transmit_message>
     89a:	2b 96       	adiw	r28, 0x0b	; 11
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <CAN_controller_read>:
#include <stdio.h>
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"

uint8_t CAN_controller_read(uint8_t addr) {
     8ac:	cf 93       	push	r28
     8ae:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
	SPI_masterWrite(addr);
     8be:	8c 2f       	mov	r24, r28
     8c0:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8c4:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_masterRead>
     8c8:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	84 e0       	ldi	r24, 0x04	; 4
     8ce:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
	
	return data;
}
     8d2:	8c 2f       	mov	r24, r28
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	d8 2f       	mov	r29, r24
     8de:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	84 e0       	ldi	r24, 0x04	; 4
     8e4:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
	SPI_masterWrite(addr);
     8ee:	8d 2f       	mov	r24, r29
     8f0:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
	SPI_masterWrite(data);
     8f4:	8c 2f       	mov	r24, r28
     8f6:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	84 e0       	ldi	r24, 0x04	; 4
     8fe:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
	
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	d8 2f       	mov	r29, r24
     910:	16 2f       	mov	r17, r22
     912:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
		SPI_masterWrite(addr);
     922:	81 2f       	mov	r24, r17
     924:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
		SPI_masterWrite(mask);
     928:	8d 2f       	mov	r24, r29
     92a:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
		SPI_masterWrite(data);
     92e:	8c 2f       	mov	r24, r28
     930:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>

}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	08 95       	ret

00000944 <CAN_controller_reset>:
void CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	84 e0       	ldi	r24, 0x04	; 4
     948:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
	printf("Before spi write");
     94c:	83 ee       	ldi	r24, 0xE3	; 227
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	9f 93       	push	r25
     952:	8f 93       	push	r24
     954:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>
	SPI_masterWrite(MCP_RESET);
     958:	80 ec       	ldi	r24, 0xC0	; 192
     95a:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
}
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	08 95       	ret

0000096c <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     96c:	cf 93       	push	r28
     96e:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
	switch (buffer) {
     978:	c1 30       	cpi	r28, 0x01	; 1
     97a:	41 f0       	breq	.+16     	; 0x98c <CAN_controller_RTS+0x20>
     97c:	18 f0       	brcs	.+6      	; 0x984 <CAN_controller_RTS+0x18>
     97e:	c2 30       	cpi	r28, 0x02	; 2
     980:	49 f0       	breq	.+18     	; 0x994 <CAN_controller_RTS+0x28>
     982:	0b c0       	rjmp	.+22     	; 0x99a <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     984:	81 e8       	ldi	r24, 0x81	; 129
     986:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
			break;
     98a:	07 c0       	rjmp	.+14     	; 0x99a <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     98c:	82 e8       	ldi	r24, 0x82	; 130
     98e:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
			break;
     992:	03 c0       	rjmp	.+6      	; 0x99a <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     994:	84 e8       	ldi	r24, 0x84	; 132
     996:	0e 94 3d 0c 	call	0x187a	; 0x187a <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	0e 94 46 0c 	call	0x188c	; 0x188c <SPI_setChipSelect>
}
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     9ac:	0e 94 a2 04 	call	0x944	; 0x944 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9b0:	8e e0       	ldi	r24, 0x0E	; 14
     9b2:	0e 94 56 04 	call	0x8ac	; 0x8ac <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     9b6:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     9b8:	80 38       	cpi	r24, 0x80	; 128
     9ba:	69 f0       	breq	.+26     	; 0x9d6 <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     9bc:	1f 92       	push	r1
     9be:	8f 93       	push	r24
     9c0:	84 ef       	ldi	r24, 0xF4	; 244
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>
		return;
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	38 c0       	rjmp	.+112    	; 0xa46 <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9d6:	4c 2f       	mov	r20, r28
     9d8:	4c 60       	ori	r20, 0x0C	; 12
     9da:	6f e0       	ldi	r22, 0x0F	; 15
     9dc:	8e ee       	ldi	r24, 0xEE	; 238
     9de:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9e2:	41 e0       	ldi	r20, 0x01	; 1
     9e4:	6b e2       	ldi	r22, 0x2B	; 43
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     9ec:	40 e6       	ldi	r20, 0x60	; 96
     9ee:	60 e6       	ldi	r22, 0x60	; 96
     9f0:	80 e6       	ldi	r24, 0x60	; 96
     9f2:	0e 94 84 04 	call	0x908	; 0x908 <CAN_controller_bitModify>
     9f6:	2f ef       	ldi	r18, 0xFF	; 255
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	21 50       	subi	r18, 0x01	; 1
     9fe:	80 40       	sbci	r24, 0x00	; 0
     a00:	90 40       	sbci	r25, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <CAN_controller_setMode+0x56>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <CAN_controller_setMode+0x60>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a08:	8e e0       	ldi	r24, 0x0E	; 14
     a0a:	0e 94 56 04 	call	0x8ac	; 0x8ac <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     a0e:	d8 2f       	mov	r29, r24
     a10:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     a12:	cd 17       	cp	r28, r29
     a14:	61 f0       	breq	.+24     	; 0xa2e <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     a16:	1f 92       	push	r1
     a18:	df 93       	push	r29
     a1a:	8f e0       	ldi	r24, 0x0F	; 15
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     a2e:	1f 92       	push	r1
     a30:	df 93       	push	r29
     a32:	8f e2       	ldi	r24, 0x2F	; 47
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     a4c:	0e 94 34 0c 	call	0x1868	; 0x1868 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     a50:	80 e4       	ldi	r24, 0x40	; 64
     a52:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a56:	8b b7       	in	r24, 0x3b	; 59
     a58:	80 64       	ori	r24, 0x40	; 64
     a5a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a5c:	85 b7       	in	r24, 0x35	; 53
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a62:	85 b7       	in	r24, 0x35	; 53
     a64:	8e 7f       	andi	r24, 0xFE	; 254
     a66:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a68:	81 b3       	in	r24, 0x11	; 17
     a6a:	84 70       	andi	r24, 0x04	; 4
     a6c:	81 bb       	out	0x11, r24	; 17
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	80 40       	sbci	r24, 0x00	; 0
     a78:	90 40       	sbci	r25, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <CAN_controller_init+0x28>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <CAN_controller_init+0x32>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     a80:	8e e3       	ldi	r24, 0x3E	; 62
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	9f 93       	push	r25
     a86:	8f 93       	push	r24
     a88:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a8c:	8e e0       	ldi	r24, 0x0E	; 14
     a8e:	0e 94 56 04 	call	0x8ac	; 0x8ac <CAN_controller_read>
	printf("Data: %i\n\r", status);
     a92:	1f 92       	push	r1
     a94:	8f 93       	push	r24
     a96:	87 e5       	ldi	r24, 0x57	; 87
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>

}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	08 95       	ret

00000ab0 <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     ab0:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <gameActive>
     ab4:	ec e6       	ldi	r30, 0x6C	; 108
     ab6:	f3 e0       	ldi	r31, 0x03	; 3
     ab8:	a5 e7       	ldi	r26, 0x75	; 117
     aba:	b3 e0       	ldi	r27, 0x03	; 3
     abc:	81 e7       	ldi	r24, 0x71	; 113
     abe:	93 e0       	ldi	r25, 0x03	; 3
     ac0:	11 92       	st	Z+, r1
     ac2:	1d 92       	st	X+, r1
     ac4:	e8 17       	cp	r30, r24
     ac6:	f9 07       	cpc	r31, r25
     ac8:	d9 f7       	brne	.-10     	; 0xac0 <game_init+0x10>
     aca:	08 95       	ret

00000acc <game_countdown>:
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	1f 92       	push	r1
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	4a e0       	ldi	r20, 0x0A	; 10
     adc:	be 01       	movw	r22, r28
     ade:	6f 5f       	subi	r22, 0xFF	; 255
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
     aea:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
     aee:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
     af2:	01 e7       	ldi	r16, 0x71	; 113
     af4:	13 e0       	ldi	r17, 0x03	; 3
     af6:	f8 01       	movw	r30, r16
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	02 96       	adiw	r24, 0x02	; 2
     afe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     b10:	86 e0       	ldi	r24, 0x06	; 6
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	0e 94 d7 08 	call	0x11ae	; 0x11ae <music_playNote>
     b18:	ff ef       	ldi	r31, 0xFF	; 255
     b1a:	2f e7       	ldi	r18, 0x7F	; 127
     b1c:	87 e0       	ldi	r24, 0x07	; 7
     b1e:	f1 50       	subi	r31, 0x01	; 1
     b20:	20 40       	sbci	r18, 0x00	; 0
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	e1 f7       	brne	.-8      	; 0xb1e <game_countdown+0x52>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <game_countdown+0x5c>
     b28:	00 00       	nop
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <music_playNote>
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	ef e7       	ldi	r30, 0x7F	; 127
     b36:	f7 e0       	ldi	r31, 0x07	; 7
     b38:	91 50       	subi	r25, 0x01	; 1
     b3a:	e0 40       	sbci	r30, 0x00	; 0
     b3c:	f0 40       	sbci	r31, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <game_countdown+0x6c>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <game_countdown+0x76>
     b42:	00 00       	nop
     b44:	4a e0       	ldi	r20, 0x0A	; 10
     b46:	be 01       	movw	r22, r28
     b48:	6f 5f       	subi	r22, 0xFF	; 255
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
     b54:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
     b58:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
     b5c:	f8 01       	movw	r30, r16
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	02 96       	adiw	r24, 0x02	; 2
     b64:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     b76:	86 e0       	ldi	r24, 0x06	; 6
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <music_playNote>
     b7e:	ff ef       	ldi	r31, 0xFF	; 255
     b80:	2f e7       	ldi	r18, 0x7F	; 127
     b82:	87 e0       	ldi	r24, 0x07	; 7
     b84:	f1 50       	subi	r31, 0x01	; 1
     b86:	20 40       	sbci	r18, 0x00	; 0
     b88:	80 40       	sbci	r24, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <game_countdown+0xb8>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <game_countdown+0xc2>
     b8e:	00 00       	nop
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 d7 08 	call	0x11ae	; 0x11ae <music_playNote>
     b98:	9f ef       	ldi	r25, 0xFF	; 255
     b9a:	ef e7       	ldi	r30, 0x7F	; 127
     b9c:	f7 e0       	ldi	r31, 0x07	; 7
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	e0 40       	sbci	r30, 0x00	; 0
     ba2:	f0 40       	sbci	r31, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <game_countdown+0xd2>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <game_countdown+0xdc>
     ba8:	00 00       	nop
     baa:	4a e0       	ldi	r20, 0x0A	; 10
     bac:	be 01       	movw	r22, r28
     bae:	6f 5f       	subi	r22, 0xFF	; 255
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
     bba:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
     bbe:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
     bc2:	f8 01       	movw	r30, r16
     bc4:	80 81       	ld	r24, Z
     bc6:	91 81       	ldd	r25, Z+1	; 0x01
     bc8:	02 96       	adiw	r24, 0x02	; 2
     bca:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     bdc:	86 e0       	ldi	r24, 0x06	; 6
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <music_playNote>
     be4:	ff ef       	ldi	r31, 0xFF	; 255
     be6:	2f e7       	ldi	r18, 0x7F	; 127
     be8:	87 e0       	ldi	r24, 0x07	; 7
     bea:	f1 50       	subi	r31, 0x01	; 1
     bec:	20 40       	sbci	r18, 0x00	; 0
     bee:	80 40       	sbci	r24, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <game_countdown+0x11e>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <game_countdown+0x128>
     bf4:	00 00       	nop
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 d7 08 	call	0x11ae	; 0x11ae <music_playNote>
     bfe:	9f ef       	ldi	r25, 0xFF	; 255
     c00:	ef e7       	ldi	r30, 0x7F	; 127
     c02:	f7 e0       	ldi	r31, 0x07	; 7
     c04:	91 50       	subi	r25, 0x01	; 1
     c06:	e0 40       	sbci	r30, 0x00	; 0
     c08:	f0 40       	sbci	r31, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <game_countdown+0x138>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <game_countdown+0x142>
     c0e:	00 00       	nop
     c10:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
     c14:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
     c18:	f8 01       	movw	r30, r16
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	02 96       	adiw	r24, 0x02	; 2
     c20:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
     c2a:	82 e6       	ldi	r24, 0x62	; 98
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     c32:	87 e1       	ldi	r24, 0x17	; 23
     c34:	94 e0       	ldi	r25, 0x04	; 4
     c36:	0e 94 d7 08 	call	0x11ae	; 0x11ae <music_playNote>
     c3a:	ff ef       	ldi	r31, 0xFF	; 255
     c3c:	2f e7       	ldi	r18, 0x7F	; 127
     c3e:	87 e0       	ldi	r24, 0x07	; 7
     c40:	f1 50       	subi	r31, 0x01	; 1
     c42:	20 40       	sbci	r18, 0x00	; 0
     c44:	80 40       	sbci	r24, 0x00	; 0
     c46:	e1 f7       	brne	.-8      	; 0xc40 <game_countdown+0x174>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <game_countdown+0x17e>
     c4a:	00 00       	nop
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 d7 08 	call	0x11ae	; 0x11ae <music_playNote>
     c54:	9f ef       	ldi	r25, 0xFF	; 255
     c56:	ef e7       	ldi	r30, 0x7F	; 127
     c58:	f7 e0       	ldi	r31, 0x07	; 7
     c5a:	91 50       	subi	r25, 0x01	; 1
     c5c:	e0 40       	sbci	r30, 0x00	; 0
     c5e:	f0 40       	sbci	r31, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <game_countdown+0x18e>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <game_countdown+0x198>
     c64:	00 00       	nop
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <game_initialCANMessage>:
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2b 97       	sbiw	r28, 0x0b	; 11
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9a 87       	std	Y+10, r25	; 0x0a
     c8c:	89 87       	std	Y+9, r24	; 0x09
     c8e:	1b 86       	std	Y+11, r1	; 0x0b
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	0e 94 37 03 	call	0x66e	; 0x66e <CAN_transmit_message>
     c98:	2b 96       	adiw	r28, 0x0b	; 11
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <game_newgame>:
     caa:	f8 94       	cli
     cac:	0e 94 66 05 	call	0xacc	; 0xacc <game_countdown>
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <gameActive>
     cb6:	ea e7       	ldi	r30, 0x7A	; 122
     cb8:	f3 e0       	ldi	r31, 0x03	; 3
     cba:	8a e0       	ldi	r24, 0x0A	; 10
     cbc:	80 83       	st	Z, r24
     cbe:	12 82       	std	Z+2, r1	; 0x02
     cc0:	83 e6       	ldi	r24, 0x63	; 99
     cc2:	81 83       	std	Z+1, r24	; 0x01
     cc4:	0e 94 39 06 	call	0xc72	; 0xc72 <game_initialCANMessage>
     cc8:	78 94       	sei
     cca:	08 95       	ret

00000ccc <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     ccc:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <flag>
     cd0:	88 23       	and	r24, r24
     cd2:	d9 f0       	breq	.+54     	; 0xd0a <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     cd4:	f8 94       	cli
		printf("Message received");
     cd6:	85 e6       	ldi	r24, 0x65	; 101
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	0e 94 61 10 	call	0x20c2	; 0x20c2 <printf>
		flag=0;
     ce2:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <flag>
		CAN_receiveMessage(&received_message);
     ce6:	8d e7       	ldi	r24, 0x7D	; 125
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	0e 94 ef 03 	call	0x7de	; 0x7de <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     cee:	0e 94 31 03 	call	0x662	; 0x662 <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     cf2:	ad e7       	ldi	r26, 0x7D	; 125
     cf4:	b3 e0       	ldi	r27, 0x03	; 3
     cf6:	8c 91       	ld	r24, X
     cf8:	ea e7       	ldi	r30, 0x7A	; 122
     cfa:	f3 e0       	ldi	r31, 0x03	; 3
     cfc:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	8c 91       	ld	r24, X
     d02:	82 83       	std	Z+2, r24	; 0x02
		sei();
     d04:	78 94       	sei
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	08 95       	ret

00000d0c <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	00 d0       	rcall	.+0      	; 0xd16 <game_updateOled+0xa>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <game_updateOled+0xc>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     d1e:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
	oled_home();
     d22:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d26:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <currentMenu>
     d2a:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <currentMenu+0x1>
     d2e:	02 96       	adiw	r24, 0x02	; 2
     d30:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
	switch(gameID) {
     d3a:	11 30       	cpi	r17, 0x01	; 1
     d3c:	19 f0       	breq	.+6      	; 0xd44 <game_updateOled+0x38>
     d3e:	12 30       	cpi	r17, 0x02	; 2
     d40:	49 f1       	breq	.+82     	; 0xd94 <game_updateOled+0x88>
     d42:	39 c0       	rjmp	.+114    	; 0xdb6 <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     d44:	86 e7       	ldi	r24, 0x76	; 118
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
			itoa(gameData.score,score_string,10);
     d4c:	0a e7       	ldi	r16, 0x7A	; 122
     d4e:	13 e0       	ldi	r17, 0x03	; 3
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d50:	f8 01       	movw	r30, r16
     d52:	80 81       	ld	r24, Z
     d54:	4a e0       	ldi	r20, 0x0A	; 10
     d56:	be 01       	movw	r22, r28
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
			oled_print(score_string);
     d62:	ce 01       	movw	r24, r28
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
			oled_gotoLine(5);
     d6a:	85 e0       	ldi	r24, 0x05	; 5
     d6c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
			oled_print("Time: ");
     d70:	8e e7       	ldi	r24, 0x7E	; 126
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     d78:	f8 01       	movw	r30, r16
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	4a e0       	ldi	r20, 0x0A	; 10
     d7e:	be 01       	movw	r22, r28
     d80:	6d 5f       	subi	r22, 0xFD	; 253
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d8a:	ce 01       	movw	r24, r28
     d8c:	03 96       	adiw	r24, 0x03	; 3
     d8e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
			break;
     d92:	11 c0       	rjmp	.+34     	; 0xdb6 <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d94:	85 e8       	ldi	r24, 0x85	; 133
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     d9c:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <gameData+0x2>
     da0:	4a e0       	ldi	r20, 0x0A	; 10
     da2:	be 01       	movw	r22, r28
     da4:	6d 5f       	subi	r22, 0xFD	; 253
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     dae:	ce 01       	movw	r24, r28
     db0:	03 96       	adiw	r24, 0x03	; 3
     db2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
			break;

	}
	
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <game_sendStop>:

void game_sendStop() {
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	2b 97       	sbiw	r28, 0x0b	; 11
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9a 87       	std	Y+10, r25	; 0x0a
     de2:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     de4:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 37 03 	call	0x66e	; 0x66e <CAN_transmit_message>
}
     dee:	2b 96       	adiw	r28, 0x0b	; 11
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <game_finished>:
void game_finished(uint8_t gameID) {
     e00:	cf 93       	push	r28
     e02:	c8 2f       	mov	r28, r24
	cli();
     e04:	f8 94       	cli
	game_sendStop();
     e06:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <game_sendStop>
	oled_reset();
     e0a:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
	oled_home();
     e0e:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
	oled_gotoLine(3);
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
	oled_print("Game over");
     e18:	80 e9       	ldi	r24, 0x90	; 144
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
	oled_gotoLine(4);
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
	oled_print("Maybe HS?");
     e26:	8a e9       	ldi	r24, 0x9A	; 154
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
	music_gameOver();
     e2e:	0e 94 95 08 	call	0x112a	; 0x112a <music_gameOver>
	gameActive=0;
     e32:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <gameActive>
	
	menu_init();
     e36:	0e 94 86 0a 	call	0x150c	; 0x150c <menu_init>
	switch (gameID) {
     e3a:	c1 30       	cpi	r28, 0x01	; 1
     e3c:	51 f0       	breq	.+20     	; 0xe52 <game_finished+0x52>
     e3e:	c2 30       	cpi	r28, 0x02	; 2
     e40:	09 f0       	breq	.+2      	; 0xe44 <game_finished+0x44>
     e42:	50 c0       	rjmp	.+160    	; 0xee4 <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e44:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <gameData+0x2>
     e48:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <highScores2>
     e4c:	83 17       	cp	r24, r19
     e4e:	48 f5       	brcc	.+82     	; 0xea2 <game_finished+0xa2>
     e50:	33 c0       	rjmp	.+102    	; 0xeb8 <game_finished+0xb8>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e52:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <gameData>
     e56:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <highScores>
     e5a:	83 17       	cp	r24, r19
     e5c:	58 f0       	brcs	.+22     	; 0xe74 <game_finished+0x74>
     e5e:	ed e6       	ldi	r30, 0x6D	; 109
     e60:	f3 e0       	ldi	r31, 0x03	; 3
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e66:	21 91       	ld	r18, Z+
     e68:	23 17       	cp	r18, r19
     e6a:	b0 f4       	brcc	.+44     	; 0xe98 <game_finished+0x98>
					for (int a = 4; a>i; a--) {
     e6c:	84 30       	cpi	r24, 0x04	; 4
     e6e:	91 05       	cpc	r25, r1
     e70:	1c f0       	brlt	.+6      	; 0xe78 <game_finished+0x78>
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <game_finished+0x8e>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	e0 e7       	ldi	r30, 0x70	; 112
     e7a:	f3 e0       	ldi	r31, 0x03	; 3
     e7c:	44 e0       	ldi	r20, 0x04	; 4
     e7e:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e80:	41 50       	subi	r20, 0x01	; 1
     e82:	51 09       	sbc	r21, r1
     e84:	22 91       	ld	r18, -Z
     e86:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e88:	84 17       	cp	r24, r20
     e8a:	95 07       	cpc	r25, r21
     e8c:	cc f3       	brlt	.-14     	; 0xe80 <game_finished+0x80>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e8e:	fc 01       	movw	r30, r24
     e90:	e4 59       	subi	r30, 0x94	; 148
     e92:	fc 4f       	sbci	r31, 0xFC	; 252
     e94:	30 83       	st	Z, r19
					break;
     e96:	26 c0       	rjmp	.+76     	; 0xee4 <game_finished+0xe4>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	91 05       	cpc	r25, r1
     e9e:	19 f7       	brne	.-58     	; 0xe66 <game_finished+0x66>
     ea0:	21 c0       	rjmp	.+66     	; 0xee4 <game_finished+0xe4>
     ea2:	e6 e7       	ldi	r30, 0x76	; 118
     ea4:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     eaa:	21 91       	ld	r18, Z+
     eac:	23 17       	cp	r18, r19
     eae:	b0 f4       	brcc	.+44     	; 0xedc <game_finished+0xdc>
					for (int a = 4; a>i; a--) {
     eb0:	84 30       	cpi	r24, 0x04	; 4
     eb2:	91 05       	cpc	r25, r1
     eb4:	1c f0       	brlt	.+6      	; 0xebc <game_finished+0xbc>
     eb6:	0d c0       	rjmp	.+26     	; 0xed2 <game_finished+0xd2>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	e9 e7       	ldi	r30, 0x79	; 121
     ebe:	f3 e0       	ldi	r31, 0x03	; 3
     ec0:	44 e0       	ldi	r20, 0x04	; 4
     ec2:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     ec4:	41 50       	subi	r20, 0x01	; 1
     ec6:	51 09       	sbc	r21, r1
     ec8:	22 91       	ld	r18, -Z
     eca:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     ecc:	84 17       	cp	r24, r20
     ece:	95 07       	cpc	r25, r21
     ed0:	cc f3       	brlt	.-14     	; 0xec4 <game_finished+0xc4>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     ed2:	fc 01       	movw	r30, r24
     ed4:	eb 58       	subi	r30, 0x8B	; 139
     ed6:	fc 4f       	sbci	r31, 0xFC	; 252
     ed8:	30 83       	st	Z, r19
					break;
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <game_finished+0xe4>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	85 30       	cpi	r24, 0x05	; 5
     ee0:	91 05       	cpc	r25, r1
     ee2:	19 f7       	brne	.-58     	; 0xeaa <game_finished+0xaa>
			break;
		
	}
	
	
	sei();
     ee4:	78 94       	sei
}
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <game_play>:
void game_play(uint8_t gameID)
{
     eea:	cf 93       	push	r28
     eec:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     eee:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <gameActive>
     ef2:	81 11       	cpse	r24, r1
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <game_play+0x10>
	{
		game_newgame();	
     ef6:	0e 94 55 06 	call	0xcaa	; 0xcaa <game_newgame>
	}
	if (buttons.right_button) {
     efa:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <buttons+0x1>
     efe:	88 23       	and	r24, r24
     f00:	21 f0       	breq	.+8      	; 0xf0a <game_play+0x20>
		gameActive = 0;
     f02:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <gameActive>
		menu_init();
     f06:	0e 94 86 0a 	call	0x150c	; 0x150c <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     f0a:	0e 94 27 04 	call	0x84e	; 0x84e <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     f0e:	0e 94 66 06 	call	0xccc	; 0xccc <game_recieveGameData>
	game_updateOled(gameID);
     f12:	8c 2f       	mov	r24, r28
     f14:	0e 94 86 06 	call	0xd0c	; 0xd0c <game_updateOled>
	switch (gameID) {
     f18:	c1 30       	cpi	r28, 0x01	; 1
     f1a:	19 f0       	breq	.+6      	; 0xf22 <game_play+0x38>
     f1c:	c2 30       	cpi	r28, 0x02	; 2
     f1e:	49 f0       	breq	.+18     	; 0xf32 <game_play+0x48>
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <game_play+0x56>
		case 1:
			if (gameData.playtime==10) {
     f22:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <gameData+0x2>
     f26:	8a 30       	cpi	r24, 0x0A	; 10
     f28:	59 f4       	brne	.+22     	; 0xf40 <game_play+0x56>
				game_finished(gameID);
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	0e 94 00 07 	call	0xe00	; 0xe00 <game_finished>
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <game_play+0x56>
			}
			break;
		case 2:
			if (gameData.score <10) {
     f32:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <gameData>
     f36:	8a 30       	cpi	r24, 0x0A	; 10
     f38:	18 f4       	brcc	.+6      	; 0xf40 <game_play+0x56>
				game_finished(gameID);
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	0e 94 00 07 	call	0xe00	; 0xe00 <game_finished>
			}
			break;
	}
	
	
}
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	00 d0       	rcall	.+0      	; 0xf5a <game_displayHighscores+0x16>
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	08 2f       	mov	r16, r24
	oled_reset();
     f60:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
	oled_home();
     f64:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f68:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <currentMenu>
     f6c:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <currentMenu+0x1>
     f70:	02 96       	adiw	r24, 0x02	; 2
     f72:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     f76:	0f 2e       	mov	r0, r31
     f78:	fc e6       	ldi	r31, 0x6C	; 108
     f7a:	af 2e       	mov	r10, r31
     f7c:	f3 e0       	ldi	r31, 0x03	; 3
     f7e:	bf 2e       	mov	r11, r31
     f80:	f0 2d       	mov	r31, r0
     f82:	0f 2e       	mov	r0, r31
     f84:	f5 e7       	ldi	r31, 0x75	; 117
     f86:	cf 2e       	mov	r12, r31
     f88:	f3 e0       	ldi	r31, 0x03	; 3
     f8a:	df 2e       	mov	r13, r31
     f8c:	f0 2d       	mov	r31, r0
     f8e:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f90:	e1 2c       	mov	r14, r1
     f92:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f94:	81 2f       	mov	r24, r17
     f96:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
		oled_print("Score ");
     f9a:	84 ea       	ldi	r24, 0xA4	; 164
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
		char num[2];
		itoa(i+1,num,10);
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	e8 1a       	sub	r14, r24
     fa6:	f8 0a       	sbc	r15, r24
     fa8:	4a e0       	ldi	r20, 0x0A	; 10
     faa:	be 01       	movw	r22, r28
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	c7 01       	movw	r24, r14
     fb2:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
		oled_print(num);
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
		oled_print(": ");
     fbe:	82 e8       	ldi	r24, 0x82	; 130
     fc0:	92 e0       	ldi	r25, 0x02	; 2
     fc2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
		switch (gameID) {
     fc6:	01 30       	cpi	r16, 0x01	; 1
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <game_displayHighscores+0x8c>
     fca:	02 30       	cpi	r16, 0x02	; 2
     fcc:	59 f0       	breq	.+22     	; 0xfe4 <game_displayHighscores+0xa0>
     fce:	13 c0       	rjmp	.+38     	; 0xff6 <game_displayHighscores+0xb2>
     fd0:	f5 01       	movw	r30, r10
     fd2:	80 81       	ld	r24, Z
     fd4:	4a e0       	ldi	r20, 0x0A	; 10
     fd6:	be 01       	movw	r22, r28
     fd8:	6f 5f       	subi	r22, 0xFF	; 255
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
     fe2:	09 c0       	rjmp	.+18     	; 0xff6 <game_displayHighscores+0xb2>
     fe4:	f6 01       	movw	r30, r12
     fe6:	80 81       	ld	r24, Z
     fe8:	4a e0       	ldi	r20, 0x0A	; 10
     fea:	be 01       	movw	r22, r28
     fec:	6f 5f       	subi	r22, 0xFF	; 255
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
     ffe:	1f 5f       	subi	r17, 0xFF	; 255
    1000:	ff ef       	ldi	r31, 0xFF	; 255
    1002:	af 1a       	sub	r10, r31
    1004:	bf 0a       	sbc	r11, r31
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	c8 1a       	sub	r12, r24
    100a:	d8 0a       	sbc	r13, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
    100c:	18 30       	cpi	r17, 0x08	; 8
    100e:	11 f6       	brne	.-124    	; 0xf94 <game_displayHighscores+0x50>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	08 95       	ret

0000102a <music_playRick>:
	 30, 10, 20, 20,
	 20,40, 80, 40
};


void music_playRick() {
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
	cli();
    1042:	f8 94       	cli
	oled_home();
    1044:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
	oled_reset();
    1048:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
    104c:	0d ee       	ldi	r16, 0xED	; 237
    104e:	10 e0       	ldi	r17, 0x00	; 0
    1050:	0f 2e       	mov	r0, r31
    1052:	fe e9       	ldi	r31, 0x9E	; 158
    1054:	ef 2e       	mov	r14, r31
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	ff 2e       	mov	r15, r31
    105a:	f0 2d       	mov	r31, r0
    105c:	c6 e0       	ldi	r28, 0x06	; 6
    105e:	d1 e0       	ldi	r29, 0x01	; 1
    1060:	0f 2e       	mov	r0, r31
    1062:	f9 e2       	ldi	r31, 0x29	; 41
    1064:	cf 2e       	mov	r12, r31
    1066:	f2 e0       	ldi	r31, 0x02	; 2
    1068:	df 2e       	mov	r13, r31
    106a:	f0 2d       	mov	r31, r0
    106c:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    106e:	0f 2e       	mov	r0, r31
    1070:	f4 e1       	ldi	r31, 0x14	; 20
    1072:	af 2e       	mov	r10, r31
    1074:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1076:	b1 10       	cpse	r11, r1
    1078:	02 c0       	rjmp	.+4      	; 0x107e <music_playRick+0x54>
			oled_reset();
    107a:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
    107e:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    1080:	e8 81       	ld	r30, Y
    1082:	f9 81       	ldd	r31, Y+1	; 0x01
    1084:	80 81       	ld	r24, Z
    1086:	88 23       	and	r24, r24
    1088:	41 f0       	breq	.+16     	; 0x109a <music_playRick+0x70>
			oled_gotoLine(line);
    108a:	8b 2d       	mov	r24, r11
    108c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
			line++;
    1090:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    1092:	88 81       	ld	r24, Y
    1094:	99 81       	ldd	r25, Y+1	; 0x01
    1096:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    109a:	d4 01       	movw	r26, r8
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	22 96       	adiw	r28, 0x02	; 2
    10a2:	01 90       	ld	r0, Z+
    10a4:	00 20       	and	r0, r0
    10a6:	e9 f7       	brne	.-6      	; 0x10a2 <music_playRick+0x78>
    10a8:	32 97       	sbiw	r30, 0x02	; 2
    10aa:	80 81       	ld	r24, Z
    10ac:	8e 32       	cpi	r24, 0x2E	; 46
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <music_playRick+0x88>
			
			line = 0;
    10b0:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    10b2:	f8 01       	movw	r30, r16
    10b4:	65 91       	lpm	r22, Z+
    10b6:	74 91       	lpm	r23, Z
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    10c0:	f7 01       	movw	r30, r14
    10c2:	84 91       	lpm	r24, Z
    10c4:	a8 9e       	mul	r10, r24
    10c6:	c0 01       	movw	r24, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	09 2e       	mov	r0, r25
    10cc:	00 0c       	add	r0, r0
    10ce:	aa 0b       	sbc	r26, r26
    10d0:	bb 0b       	sbc	r27, r27
		while (duration--) {
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	a1 05       	cpc	r26, r1
    10d6:	b1 05       	cpc	r27, r1
    10d8:	51 f0       	breq	.+20     	; 0x10ee <music_playRick+0xc4>
    10da:	ec ec       	ldi	r30, 0xCC	; 204
    10dc:	f4 e0       	ldi	r31, 0x04	; 4
    10de:	31 97       	sbiw	r30, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <music_playRick+0xb4>
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <music_playRick+0xba>
    10e4:	00 00       	nop
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	a1 09       	sbc	r26, r1
    10ea:	b1 09       	sbc	r27, r1
    10ec:	b1 f7       	brne	.-20     	; 0x10da <music_playRick+0xb0>
    10ee:	0c 5f       	subi	r16, 0xFC	; 252
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
    10f2:	ff ef       	ldi	r31, 0xFF	; 255
    10f4:	ef 1a       	sub	r14, r31
    10f6:	ff 0a       	sbc	r15, r31
void music_playRick() {
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    10f8:	0c 15       	cp	r16, r12
    10fa:	1d 05       	cpc	r17, r13
    10fc:	09 f0       	breq	.+2      	; 0x1100 <music_playRick+0xd6>
    10fe:	bb cf       	rjmp	.-138    	; 0x1076 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	cb 01       	movw	r24, r22
    1106:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pwm_setFreq>
	menu_init();
    110a:	0e 94 86 0a 	call	0x150c	; 0x150c <menu_init>

	sei();
    110e:	78 94       	sei
	

}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	df 90       	pop	r13
    111e:	cf 90       	pop	r12
    1120:	bf 90       	pop	r11
    1122:	af 90       	pop	r10
    1124:	9f 90       	pop	r9
    1126:	8f 90       	pop	r8
    1128:	08 95       	ret

0000112a <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    112a:	6b e0       	ldi	r22, 0x0B	; 11
    112c:	72 e0       	ldi	r23, 0x02	; 2
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pwm_setFreq>
    1136:	2f ef       	ldi	r18, 0xFF	; 255
    1138:	8f e7       	ldi	r24, 0x7F	; 127
    113a:	97 e0       	ldi	r25, 0x07	; 7
    113c:	21 50       	subi	r18, 0x01	; 1
    113e:	80 40       	sbci	r24, 0x00	; 0
    1140:	90 40       	sbci	r25, 0x00	; 0
    1142:	e1 f7       	brne	.-8      	; 0x113c <music_gameOver+0x12>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <music_gameOver+0x1c>
    1146:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    1148:	68 e8       	ldi	r22, 0x88	; 136
    114a:	71 e0       	ldi	r23, 0x01	; 1
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pwm_setFreq>
    1154:	2f ef       	ldi	r18, 0xFF	; 255
    1156:	8f e7       	ldi	r24, 0x7F	; 127
    1158:	97 e0       	ldi	r25, 0x07	; 7
    115a:	21 50       	subi	r18, 0x01	; 1
    115c:	80 40       	sbci	r24, 0x00	; 0
    115e:	90 40       	sbci	r25, 0x00	; 0
    1160:	e1 f7       	brne	.-8      	; 0x115a <music_gameOver+0x30>
    1162:	00 c0       	rjmp	.+0      	; 0x1164 <music_gameOver+0x3a>
    1164:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    1166:	67 e3       	ldi	r22, 0x37	; 55
    1168:	71 e0       	ldi	r23, 0x01	; 1
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pwm_setFreq>
    1172:	2f ef       	ldi	r18, 0xFF	; 255
    1174:	8f e7       	ldi	r24, 0x7F	; 127
    1176:	97 e0       	ldi	r25, 0x07	; 7
    1178:	21 50       	subi	r18, 0x01	; 1
    117a:	80 40       	sbci	r24, 0x00	; 0
    117c:	90 40       	sbci	r25, 0x00	; 0
    117e:	e1 f7       	brne	.-8      	; 0x1178 <music_gameOver+0x4e>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <music_gameOver+0x58>
    1182:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    1184:	66 e0       	ldi	r22, 0x06	; 6
    1186:	71 e0       	ldi	r23, 0x01	; 1
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pwm_setFreq>
    1190:	2f ef       	ldi	r18, 0xFF	; 255
    1192:	8f e7       	ldi	r24, 0x7F	; 127
    1194:	97 e0       	ldi	r25, 0x07	; 7
    1196:	21 50       	subi	r18, 0x01	; 1
    1198:	80 40       	sbci	r24, 0x00	; 0
    119a:	90 40       	sbci	r25, 0x00	; 0
    119c:	e1 f7       	brne	.-8      	; 0x1196 <music_gameOver+0x6c>
    119e:	00 c0       	rjmp	.+0      	; 0x11a0 <music_gameOver+0x76>
    11a0:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	cb 01       	movw	r24, r22
    11a8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pwm_setFreq>
    11ac:	08 95       	ret

000011ae <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    11ae:	bc 01       	movw	r22, r24
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pwm_setFreq>
    11b8:	08 95       	ret

000011ba <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    11ba:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    11c4:	83 b7       	in	r24, 0x33	; 51
    11c6:	88 60       	ori	r24, 0x08	; 8
    11c8:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    11ca:	83 b7       	in	r24, 0x33	; 51
    11cc:	80 61       	ori	r24, 0x10	; 16
    11ce:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    11d0:	83 b7       	in	r24, 0x33	; 51
    11d2:	88 7f       	andi	r24, 0xF8	; 248
    11d4:	83 bf       	out	0x33, r24	; 51
    11d6:	08 95       	ret

000011d8 <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    if (freq == 0) {
    11dc:	67 2b       	or	r22, r23
    11de:	68 2b       	or	r22, r24
    11e0:	69 2b       	or	r22, r25
    11e2:	21 f4       	brne	.+8      	; 0x11ec <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11e4:	83 b7       	in	r24, 0x33	; 51
    11e6:	88 7f       	andi	r24, 0xF8	; 248
    11e8:	83 bf       	out	0x33, r24	; 51
        return;
    11ea:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e8       	ldi	r23, 0x80	; 128
    11f0:	85 e2       	ldi	r24, 0x25	; 37
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__udivmodsi4>
    11f8:	da 01       	movw	r26, r20
    11fa:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    11fc:	21 30       	cpi	r18, 0x01	; 1
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	36 07       	cpc	r19, r22
    1202:	41 05       	cpc	r20, r1
    1204:	51 05       	cpc	r21, r1
    1206:	a8 f1       	brcs	.+106    	; 0x1272 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    1208:	68 94       	set
    120a:	12 f8       	bld	r1, 2
    120c:	b6 95       	lsr	r27
    120e:	a7 95       	ror	r26
    1210:	97 95       	ror	r25
    1212:	87 95       	ror	r24
    1214:	16 94       	lsr	r1
    1216:	d1 f7       	brne	.-12     	; 0x120c <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	96 07       	cpc	r25, r22
    121e:	a1 05       	cpc	r26, r1
    1220:	b1 05       	cpc	r27, r1
    1222:	48 f1       	brcs	.+82     	; 0x1276 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    1224:	da 01       	movw	r26, r20
    1226:	c9 01       	movw	r24, r18
    1228:	68 94       	set
    122a:	15 f8       	bld	r1, 5
    122c:	b6 95       	lsr	r27
    122e:	a7 95       	ror	r26
    1230:	97 95       	ror	r25
    1232:	87 95       	ror	r24
    1234:	16 94       	lsr	r1
    1236:	d1 f7       	brne	.-12     	; 0x122c <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	96 07       	cpc	r25, r22
    123e:	a1 05       	cpc	r26, r1
    1240:	b1 05       	cpc	r27, r1
    1242:	d8 f0       	brcs	.+54     	; 0x127a <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    1244:	bb 27       	eor	r27, r27
    1246:	a5 2f       	mov	r26, r21
    1248:	94 2f       	mov	r25, r20
    124a:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	96 07       	cpc	r25, r22
    1252:	a1 05       	cpc	r26, r1
    1254:	b1 05       	cpc	r27, r1
    1256:	98 f0       	brcs	.+38     	; 0x127e <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    1258:	da 01       	movw	r26, r20
    125a:	c9 01       	movw	r24, r18
    125c:	07 2e       	mov	r0, r23
    125e:	7a e0       	ldi	r23, 0x0A	; 10
    1260:	b6 95       	lsr	r27
    1262:	a7 95       	ror	r26
    1264:	97 95       	ror	r25
    1266:	87 95       	ror	r24
    1268:	7a 95       	dec	r23
    126a:	d1 f7       	brne	.-12     	; 0x1260 <pwm_setFreq+0x88>
    126c:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    126e:	35 e0       	ldi	r19, 0x05	; 5
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    1272:	31 e0       	ldi	r19, 0x01	; 1
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    1276:	32 e0       	ldi	r19, 0x02	; 2
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    127a:	33 e0       	ldi	r19, 0x03	; 3
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    127e:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    1280:	23 b7       	in	r18, 0x33	; 51
    1282:	28 7f       	andi	r18, 0xF8	; 248
    1284:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    1286:	23 b7       	in	r18, 0x33	; 51
    1288:	23 2b       	or	r18, r19
    128a:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    128c:	81 50       	subi	r24, 0x01	; 1
    128e:	81 bf       	out	0x31, r24	; 49
    1290:	08 95       	ret

00001292 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    1292:	85 b7       	in	r24, 0x35	; 53
    1294:	8f 7e       	andi	r24, 0xEF	; 239
    1296:	85 bf       	out	0x35, r24	; 53
    1298:	84 b7       	in	r24, 0x34	; 52
    129a:	8f 7d       	andi	r24, 0xDF	; 223
    129c:	84 bf       	out	0x34, r24	; 52
    129e:	86 b7       	in	r24, 0x36	; 54
    12a0:	8f 77       	andi	r24, 0x7F	; 127
    12a2:	86 bf       	out	0x36, r24	; 54
    12a4:	08 95       	ret

000012a6 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    12a6:	88 b1       	in	r24, 0x08	; 8
    12a8:	88 68       	ori	r24, 0x88	; 136
    12aa:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    12ac:	85 b7       	in	r24, 0x35	; 53
    12ae:	80 62       	ori	r24, 0x20	; 32
    12b0:	85 bf       	out	0x35, r24	; 53
    12b2:	88 95       	sleep
    12b4:	85 b7       	in	r24, 0x35	; 53
    12b6:	8f 7d       	andi	r24, 0xDF	; 223
    12b8:	85 bf       	out	0x35, r24	; 53
    12ba:	08 95       	ret

000012bc <joystick_init>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystick_init() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12c2:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12cc:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <joystickOffsetY>
    12d0:	08 95       	ret

000012d2 <joystick_readPosition>:
}
void joystick_readPosition() {
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12e4:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12ec:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    12ee:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <joystickOffsetX>
    12f2:	c6 17       	cp	r28, r22
    12f4:	80 f4       	brcc	.+32     	; 0x1316 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	2c 2f       	mov	r18, r28
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	26 1b       	sub	r18, r22
    12fe:	37 0b       	sbc	r19, r23
    1300:	44 e6       	ldi	r20, 0x64	; 100
    1302:	42 9f       	mul	r20, r18
    1304:	c0 01       	movw	r24, r0
    1306:	43 9f       	mul	r20, r19
    1308:	90 0d       	add	r25, r0
    130a:	11 24       	eor	r1, r1
    130c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__divmodhi4>
    1310:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos>
    1314:	14 c0       	rjmp	.+40     	; 0x133e <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    1316:	46 2f       	mov	r20, r22
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	2c 2f       	mov	r18, r28
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	24 1b       	sub	r18, r20
    1320:	35 0b       	sbc	r19, r21
    1322:	64 e6       	ldi	r22, 0x64	; 100
    1324:	62 9f       	mul	r22, r18
    1326:	c0 01       	movw	r24, r0
    1328:	63 9f       	mul	r22, r19
    132a:	90 0d       	add	r25, r0
    132c:	11 24       	eor	r1, r1
    132e:	6f ef       	ldi	r22, 0xFF	; 255
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	64 1b       	sub	r22, r20
    1334:	75 0b       	sbc	r23, r21
    1336:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__divmodhi4>
    133a:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    133e:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <joystickOffsetY>
    1342:	e2 17       	cp	r30, r18
    1344:	88 f4       	brcc	.+34     	; 0x1368 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1346:	62 2f       	mov	r22, r18
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	4e 2f       	mov	r20, r30
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	46 1b       	sub	r20, r22
    1350:	57 0b       	sbc	r21, r23
    1352:	24 e6       	ldi	r18, 0x64	; 100
    1354:	24 9f       	mul	r18, r20
    1356:	c0 01       	movw	r24, r0
    1358:	25 9f       	mul	r18, r21
    135a:	90 0d       	add	r25, r0
    135c:	11 24       	eor	r1, r1
    135e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__divmodhi4>
    1362:	60 93 69 03 	sts	0x0369, r22	; 0x800369 <joystick_pos+0x1>
    1366:	13 c0       	rjmp	.+38     	; 0x138e <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4e 2f       	mov	r20, r30
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	42 1b       	sub	r20, r18
    1370:	53 0b       	sbc	r21, r19
    1372:	64 e6       	ldi	r22, 0x64	; 100
    1374:	64 9f       	mul	r22, r20
    1376:	c0 01       	movw	r24, r0
    1378:	65 9f       	mul	r22, r21
    137a:	90 0d       	add	r25, r0
    137c:	11 24       	eor	r1, r1
    137e:	6f ef       	ldi	r22, 0xFF	; 255
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	62 1b       	sub	r22, r18
    1384:	73 0b       	sbc	r23, r19
    1386:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__divmodhi4>
    138a:	60 93 69 03 	sts	0x0369, r22	; 0x800369 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    138e:	c8 e6       	ldi	r28, 0x68	; 104
    1390:	d3 e0       	ldi	r29, 0x03	; 3
    1392:	68 81       	ld	r22, Y
    1394:	06 2e       	mov	r0, r22
    1396:	00 0c       	add	r0, r0
    1398:	77 0b       	sbc	r23, r23
    139a:	88 0b       	sbc	r24, r24
    139c:	99 0b       	sbc	r25, r25
    139e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__floatsisf>
    13a2:	6b 01       	movw	r12, r22
    13a4:	7c 01       	movw	r14, r24
    13a6:	69 81       	ldd	r22, Y+1	; 0x01
    13a8:	06 2e       	mov	r0, r22
    13aa:	00 0c       	add	r0, r0
    13ac:	77 0b       	sbc	r23, r23
    13ae:	88 0b       	sbc	r24, r24
    13b0:	99 0b       	sbc	r25, r25
    13b2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__floatsisf>
    13b6:	a7 01       	movw	r20, r14
    13b8:	96 01       	movw	r18, r12
    13ba:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <atan2>
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	44 eb       	ldi	r20, 0xB4	; 180
    13c4:	53 e4       	ldi	r21, 0x43	; 67
    13c6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__mulsf3>
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__mulsf3>
    13d6:	23 ec       	ldi	r18, 0xC3	; 195
    13d8:	35 ef       	ldi	r19, 0xF5	; 245
    13da:	48 e4       	ldi	r20, 0x48	; 72
    13dc:	50 e4       	ldi	r21, 0x40	; 64
    13de:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divsf3>
    13e2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixsfsi>
    13e6:	7b 83       	std	Y+3, r23	; 0x03
    13e8:	6a 83       	std	Y+2, r22	; 0x02
}
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	cf 90       	pop	r12
    13f6:	08 95       	ret

000013f8 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    13f8:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    13fa:	80 81       	ld	r24, Z
    13fc:	94 e0       	ldi	r25, 0x04	; 4
    13fe:	98 0f       	add	r25, r24
    1400:	99 30       	cpi	r25, 0x09	; 9
    1402:	20 f4       	brcc	.+8      	; 0x140c <joystick_getDirection+0x14>
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	9c 5f       	subi	r25, 0xFC	; 252
    1408:	99 30       	cpi	r25, 0x09	; 9
    140a:	90 f0       	brcs	.+36     	; 0x1430 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    140c:	85 30       	cpi	r24, 0x05	; 5
    140e:	2c f0       	brlt	.+10     	; 0x141a <joystick_getDirection+0x22>
    1410:	81 81       	ldd	r24, Z+1	; 0x01
    1412:	8f 5c       	subi	r24, 0xCF	; 207
    1414:	83 36       	cpi	r24, 0x63	; 99
    1416:	38 f4       	brcc	.+14     	; 0x1426 <joystick_getDirection+0x2e>
    1418:	0d c0       	rjmp	.+26     	; 0x1434 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    141a:	8c 3f       	cpi	r24, 0xFC	; 252
    141c:	24 f4       	brge	.+8      	; 0x1426 <joystick_getDirection+0x2e>
    141e:	81 81       	ldd	r24, Z+1	; 0x01
    1420:	8f 5c       	subi	r24, 0xCF	; 207
    1422:	83 36       	cpi	r24, 0x63	; 99
    1424:	48 f0       	brcs	.+18     	; 0x1438 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    1426:	81 81       	ldd	r24, Z+1	; 0x01
    1428:	8c 3f       	cpi	r24, 0xFC	; 252
    142a:	44 f0       	brlt	.+16     	; 0x143c <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    1430:	84 e0       	ldi	r24, 0x04	; 4
    1432:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    143c:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    143e:	08 95       	ret

00001440 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    1440:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    1444:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <currentMenu+0x3>
    1448:	94 30       	cpi	r25, 0x04	; 4
    144a:	09 f0       	breq	.+2      	; 0x144e <navigateMenu+0xe>
    144c:	5c c0       	rjmp	.+184    	; 0x1506 <navigateMenu+0xc6>
			switch (dir) {
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	e1 f1       	breq	.+120    	; 0x14ca <navigateMenu+0x8a>
    1452:	60 f1       	brcs	.+88     	; 0x14ac <navigateMenu+0x6c>
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	c9 f0       	breq	.+50     	; 0x148a <navigateMenu+0x4a>
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	09 f0       	breq	.+2      	; 0x145e <navigateMenu+0x1e>
    145c:	54 c0       	rjmp	.+168    	; 0x1506 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    145e:	e1 e7       	ldi	r30, 0x71	; 113
    1460:	f3 e0       	ldi	r31, 0x03	; 3
    1462:	92 81       	ldd	r25, Z+2	; 0x02
    1464:	49 2f       	mov	r20, r25
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	01 90       	ld	r0, Z+
    146a:	f0 81       	ld	r31, Z
    146c:	e0 2d       	mov	r30, r0
    146e:	20 a1       	ldd	r18, Z+32	; 0x20
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	21 50       	subi	r18, 0x01	; 1
    1474:	31 09       	sbc	r19, r1
    1476:	42 17       	cp	r20, r18
    1478:	53 07       	cpc	r21, r19
    147a:	24 f4       	brge	.+8      	; 0x1484 <navigateMenu+0x44>
					currentMenu.childIndex++;
    147c:	9f 5f       	subi	r25, 0xFF	; 255
    147e:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <currentMenu+0x2>
    1482:	41 c0       	rjmp	.+130    	; 0x1506 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    1484:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <currentMenu+0x2>
    1488:	3e c0       	rjmp	.+124    	; 0x1506 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    148a:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <currentMenu+0x2>
    148e:	99 23       	and	r25, r25
    1490:	21 f0       	breq	.+8      	; 0x149a <navigateMenu+0x5a>
					currentMenu.childIndex--;
    1492:	91 50       	subi	r25, 0x01	; 1
    1494:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <currentMenu+0x2>
    1498:	36 c0       	rjmp	.+108    	; 0x1506 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    149a:	e1 e7       	ldi	r30, 0x71	; 113
    149c:	f3 e0       	ldi	r31, 0x03	; 3
    149e:	a0 81       	ld	r26, Z
    14a0:	b1 81       	ldd	r27, Z+1	; 0x01
    14a2:	90 96       	adiw	r26, 0x20	; 32
    14a4:	9c 91       	ld	r25, X
    14a6:	91 50       	subi	r25, 0x01	; 1
    14a8:	92 83       	std	Z+2, r25	; 0x02
    14aa:	2d c0       	rjmp	.+90     	; 0x1506 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    14ac:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <currentMenu>
    14b0:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <currentMenu+0x1>
    14b4:	22 89       	ldd	r18, Z+18	; 0x12
    14b6:	33 89       	ldd	r19, Z+19	; 0x13
    14b8:	21 15       	cp	r18, r1
    14ba:	31 05       	cpc	r19, r1
    14bc:	21 f1       	breq	.+72     	; 0x1506 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    14be:	e1 e7       	ldi	r30, 0x71	; 113
    14c0:	f3 e0       	ldi	r31, 0x03	; 3
    14c2:	31 83       	std	Z+1, r19	; 0x01
    14c4:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    14c6:	12 82       	std	Z+2, r1	; 0x02
    14c8:	1e c0       	rjmp	.+60     	; 0x1506 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    14ca:	a1 e7       	ldi	r26, 0x71	; 113
    14cc:	b3 e0       	ldi	r27, 0x03	; 3
    14ce:	2d 91       	ld	r18, X+
    14d0:	3c 91       	ld	r19, X
    14d2:	11 97       	sbiw	r26, 0x01	; 1
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	9c 91       	ld	r25, X
    14d8:	e9 2f       	mov	r30, r25
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	3a 96       	adiw	r30, 0x0a	; 10
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	e2 0f       	add	r30, r18
    14e4:	f3 1f       	adc	r31, r19
    14e6:	01 90       	ld	r0, Z+
    14e8:	f0 81       	ld	r31, Z
    14ea:	e0 2d       	mov	r30, r0
    14ec:	90 a1       	ldd	r25, Z+32	; 0x20
    14ee:	91 11       	cpse	r25, r1
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <navigateMenu+0xb8>
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	99 23       	and	r25, r25
    14f6:	39 f0       	breq	.+14     	; 0x1506 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    14f8:	a1 e7       	ldi	r26, 0x71	; 113
    14fa:	b3 e0       	ldi	r27, 0x03	; 3
    14fc:	11 96       	adiw	r26, 0x01	; 1
    14fe:	fc 93       	st	X, r31
    1500:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    1502:	12 96       	adiw	r26, 0x02	; 2
    1504:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    1506:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <currentMenu+0x3>
    150a:	08 95       	ret

0000150c <menu_init>:
#include <string.h>


MenuNode nodes[8];

void menu_init() {
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    1514:	8a e0       	ldi	r24, 0x0A	; 10
    1516:	ec e1       	ldi	r30, 0x1C	; 28
    1518:	f3 e0       	ldi	r31, 0x03	; 3
    151a:	a0 e9       	ldi	r26, 0x90	; 144
    151c:	b3 e0       	ldi	r27, 0x03	; 3
    151e:	01 90       	ld	r0, Z+
    1520:	0d 92       	st	X+, r0
    1522:	8a 95       	dec	r24
    1524:	e1 f7       	brne	.-8      	; 0x151e <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    1526:	8a e0       	ldi	r24, 0x0A	; 10
    1528:	e6 e2       	ldi	r30, 0x26	; 38
    152a:	f3 e0       	ldi	r31, 0x03	; 3
    152c:	a1 eb       	ldi	r26, 0xB1	; 177
    152e:	b3 e0       	ldi	r27, 0x03	; 3
    1530:	01 90       	ld	r0, Z+
    1532:	0d 92       	st	X+, r0
    1534:	8a 95       	dec	r24
    1536:	e1 f7       	brne	.-8      	; 0x1530 <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    1538:	8c e0       	ldi	r24, 0x0C	; 12
    153a:	e0 e3       	ldi	r30, 0x30	; 48
    153c:	f3 e0       	ldi	r31, 0x03	; 3
    153e:	a2 ed       	ldi	r26, 0xD2	; 210
    1540:	b3 e0       	ldi	r27, 0x03	; 3
    1542:	01 90       	ld	r0, Z+
    1544:	0d 92       	st	X+, r0
    1546:	8a 95       	dec	r24
    1548:	e1 f7       	brne	.-8      	; 0x1542 <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    154a:	86 e0       	ldi	r24, 0x06	; 6
    154c:	ec e3       	ldi	r30, 0x3C	; 60
    154e:	f3 e0       	ldi	r31, 0x03	; 3
    1550:	a3 ef       	ldi	r26, 0xF3	; 243
    1552:	b3 e0       	ldi	r27, 0x03	; 3
    1554:	01 90       	ld	r0, Z+
    1556:	0d 92       	st	X+, r0
    1558:	8a 95       	dec	r24
    155a:	e1 f7       	brne	.-8      	; 0x1554 <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    155c:	87 e0       	ldi	r24, 0x07	; 7
    155e:	e2 e4       	ldi	r30, 0x42	; 66
    1560:	f3 e0       	ldi	r31, 0x03	; 3
    1562:	a4 e1       	ldi	r26, 0x14	; 20
    1564:	b4 e0       	ldi	r27, 0x04	; 4
    1566:	01 90       	ld	r0, Z+
    1568:	0d 92       	st	X+, r0
    156a:	8a 95       	dec	r24
    156c:	e1 f7       	brne	.-8      	; 0x1566 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    156e:	87 e0       	ldi	r24, 0x07	; 7
    1570:	e9 e4       	ldi	r30, 0x49	; 73
    1572:	f3 e0       	ldi	r31, 0x03	; 3
    1574:	a5 e3       	ldi	r26, 0x35	; 53
    1576:	b4 e0       	ldi	r27, 0x04	; 4
    1578:	01 90       	ld	r0, Z+
    157a:	0d 92       	st	X+, r0
    157c:	8a 95       	dec	r24
    157e:	e1 f7       	brne	.-8      	; 0x1578 <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    1580:	8a e0       	ldi	r24, 0x0A	; 10
    1582:	e0 e5       	ldi	r30, 0x50	; 80
    1584:	f3 e0       	ldi	r31, 0x03	; 3
    1586:	a6 e5       	ldi	r26, 0x56	; 86
    1588:	b4 e0       	ldi	r27, 0x04	; 4
    158a:	01 90       	ld	r0, Z+
    158c:	0d 92       	st	X+, r0
    158e:	8a 95       	dec	r24
    1590:	e1 f7       	brne	.-8      	; 0x158a <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    1592:	8a e0       	ldi	r24, 0x0A	; 10
    1594:	ea e5       	ldi	r30, 0x5A	; 90
    1596:	f3 e0       	ldi	r31, 0x03	; 3
    1598:	a7 e7       	ldi	r26, 0x77	; 119
    159a:	b4 e0       	ldi	r27, 0x04	; 4
    159c:	01 90       	ld	r0, Z+
    159e:	0d 92       	st	X+, r0
    15a0:	8a 95       	dec	r24
    15a2:	e1 f7       	brne	.-8      	; 0x159c <menu_init+0x90>
    15a4:	6e e8       	ldi	r22, 0x8E	; 142
    15a6:	73 e0       	ldi	r23, 0x03	; 3
    15a8:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    15ae:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    15b0:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	91 05       	cpc	r25, r1
    15b6:	14 f0       	brlt	.+4      	; 0x15bc <menu_init+0xb0>
			nodes[i].isAction=1;
    15b8:	21 83       	std	Z+1, r18	; 0x01
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    15bc:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	b1 96       	adiw	r30, 0x21	; 33
    15c2:	88 30       	cpi	r24, 0x08	; 8
    15c4:	91 05       	cpc	r25, r1
    15c6:	a1 f7       	brne	.-24     	; 0x15b0 <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    15c8:	ee e8       	ldi	r30, 0x8E	; 142
    15ca:	f3 e0       	ldi	r31, 0x03	; 3
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <nodes+0x41>
	nodes[2].numChildren = 2;
    15d6:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <nodes+0x62>
	nodes[3].numChildren = 0;
    15da:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <nodes+0x83>
	nodes[4].numChildren = 0;
    15de:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <nodes+0xa4>
	nodes[5].numChildren = 0;
    15e2:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15e6:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15ea:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    15ee:	13 8a       	std	Z+19, r1	; 0x13
    15f0:	12 8a       	std	Z+18, r1	; 0x12
    15f2:	06 e9       	ldi	r16, 0x96	; 150
    15f4:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    15f6:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    15f8:	51 e2       	ldi	r21, 0x21	; 33
    15fa:	18 c0       	rjmp	.+48     	; 0x162c <menu_init+0x120>
    15fc:	54 9f       	mul	r21, r20
    15fe:	f0 01       	movw	r30, r0
    1600:	11 24       	eor	r1, r1
    1602:	e2 57       	subi	r30, 0x72	; 114
    1604:	fc 4f       	sbci	r31, 0xFC	; 252
    1606:	e9 93       	st	Y+, r30
    1608:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    160a:	b3 8b       	std	Z+19, r27	; 0x13
    160c:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    160e:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    1610:	2f 5f       	subi	r18, 0xFF	; 255
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	90 96       	adiw	r26, 0x20	; 32
    1616:	8c 91       	ld	r24, X
    1618:	90 97       	sbiw	r26, 0x20	; 32
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	28 17       	cp	r18, r24
    161e:	39 07       	cpc	r19, r25
    1620:	6c f3       	brlt	.-38     	; 0x15fc <menu_init+0xf0>
    1622:	6f 5d       	subi	r22, 0xDF	; 223
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    1626:	60 17       	cp	r22, r16
    1628:	71 07       	cpc	r23, r17
    162a:	59 f0       	breq	.+22     	; 0x1642 <menu_init+0x136>
    162c:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    162e:	90 96       	adiw	r26, 0x20	; 32
    1630:	8c 91       	ld	r24, X
    1632:	90 97       	sbiw	r26, 0x20	; 32
    1634:	88 23       	and	r24, r24
    1636:	a9 f3       	breq	.-22     	; 0x1622 <menu_init+0x116>
    1638:	eb 01       	movw	r28, r22
    163a:	64 96       	adiw	r28, 0x14	; 20
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	dd cf       	rjmp	.-70     	; 0x15fc <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    1642:	88 e6       	ldi	r24, 0x68	; 104
    1644:	93 e0       	ldi	r25, 0x03	; 3
    1646:	0e 94 20 0a 	call	0x1440	; 0x1440 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    164a:	e1 e7       	ldi	r30, 0x71	; 113
    164c:	f3 e0       	ldi	r31, 0x03	; 3
    164e:	8e e8       	ldi	r24, 0x8E	; 142
    1650:	93 e0       	ldi	r25, 0x03	; 3
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1656:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    1658:	84 e0       	ldi	r24, 0x04	; 4
    165a:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	08 95       	ret

00001666 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
	oled_reset();
    1670:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
	oled_home();
    1674:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    1678:	c1 e7       	ldi	r28, 0x71	; 113
    167a:	d3 e0       	ldi	r29, 0x03	; 3
    167c:	88 81       	ld	r24, Y
    167e:	99 81       	ldd	r25, Y+1	; 0x01
    1680:	02 96       	adiw	r24, 0x02	; 2
    1682:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1686:	e8 81       	ld	r30, Y
    1688:	f9 81       	ldd	r31, Y+1	; 0x01
    168a:	80 a1       	ldd	r24, Z+32	; 0x20
    168c:	88 23       	and	r24, r24
    168e:	51 f1       	breq	.+84     	; 0x16e4 <menu_printCurrentMenu+0x7e>
    1690:	68 94       	set
    1692:	ff 24       	eor	r15, r15
    1694:	f1 f8       	bld	r15, 1
    1696:	c0 e0       	ldi	r28, 0x00	; 0
    1698:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    169a:	01 e7       	ldi	r16, 0x71	; 113
    169c:	13 e0       	ldi	r17, 0x03	; 3
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    169e:	8f 2d       	mov	r24, r15
    16a0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    16a4:	d8 01       	movw	r26, r16
    16a6:	8d 91       	ld	r24, X+
    16a8:	9c 91       	ld	r25, X
    16aa:	fe 01       	movw	r30, r28
    16ac:	3a 96       	adiw	r30, 0x0a	; 10
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	e8 0f       	add	r30, r24
    16b4:	f9 1f       	adc	r31, r25
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	02 96       	adiw	r24, 0x02	; 2
    16bc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_print>
		if (currentMenu.childIndex == i) {
    16c0:	f8 01       	movw	r30, r16
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	8c 17       	cp	r24, r28
    16c8:	9d 07       	cpc	r25, r29
    16ca:	11 f4       	brne	.+4      	; 0x16d0 <menu_printCurrentMenu+0x6a>
			oled_print_arrow();
    16cc:	0e 94 9a 0b 	call	0x1734	; 0x1734 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    16d0:	21 96       	adiw	r28, 0x01	; 1
    16d2:	f3 94       	inc	r15
    16d4:	d8 01       	movw	r26, r16
    16d6:	ed 91       	ld	r30, X+
    16d8:	fc 91       	ld	r31, X
    16da:	80 a1       	ldd	r24, Z+32	; 0x20
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	c8 17       	cp	r28, r24
    16e0:	d9 07       	cpc	r29, r25
    16e2:	ec f2       	brlt	.-70     	; 0x169e <menu_printCurrentMenu+0x38>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	08 95       	ret

000016f0 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16f0:	80 55       	subi	r24, 0x50	; 80
    16f2:	e0 e0       	ldi	r30, 0x00	; 0
    16f4:	f0 e1       	ldi	r31, 0x10	; 16
    16f6:	80 83       	st	Z, r24
    16f8:	86 2f       	mov	r24, r22
    16fa:	8f 70       	andi	r24, 0x0F	; 15
    16fc:	80 83       	st	Z, r24
    16fe:	62 95       	swap	r22
    1700:	6f 70       	andi	r22, 0x0F	; 15
    1702:	60 61       	ori	r22, 0x10	; 16
    1704:	60 83       	st	Z, r22
    1706:	08 95       	ret

00001708 <oled_reset>:
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	c0 e0       	ldi	r28, 0x00	; 0
    1712:	d2 e1       	ldi	r29, 0x12	; 18
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	81 2f       	mov	r24, r17
    1718:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <oled_pos>
    171c:	80 e8       	ldi	r24, 0x80	; 128
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	18 82       	st	Y, r1
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	e9 f7       	brne	.-6      	; 0x1720 <oled_reset+0x18>
    1726:	1f 5f       	subi	r17, 0xFF	; 255
    1728:	18 30       	cpi	r17, 0x08	; 8
    172a:	a1 f7       	brne	.-24     	; 0x1714 <oled_reset+0xc>
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	08 95       	ret

00001734 <oled_print_arrow>:
    1734:	e0 e0       	ldi	r30, 0x00	; 0
    1736:	f2 e1       	ldi	r31, 0x12	; 18
    1738:	88 e1       	ldi	r24, 0x18	; 24
    173a:	80 83       	st	Z, r24
    173c:	9c e3       	ldi	r25, 0x3C	; 60
    173e:	90 83       	st	Z, r25
    1740:	9e e7       	ldi	r25, 0x7E	; 126
    1742:	90 83       	st	Z, r25
    1744:	80 83       	st	Z, r24
    1746:	80 83       	st	Z, r24
    1748:	08 95       	ret

0000174a <oled_home>:
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <oled_pos>
    1752:	08 95       	ret

00001754 <oled_init>:
    1754:	e0 e0       	ldi	r30, 0x00	; 0
    1756:	f0 e1       	ldi	r31, 0x10	; 16
    1758:	8e ea       	ldi	r24, 0xAE	; 174
    175a:	80 83       	st	Z, r24
    175c:	81 ea       	ldi	r24, 0xA1	; 161
    175e:	80 83       	st	Z, r24
    1760:	8a ed       	ldi	r24, 0xDA	; 218
    1762:	80 83       	st	Z, r24
    1764:	82 e1       	ldi	r24, 0x12	; 18
    1766:	80 83       	st	Z, r24
    1768:	88 ec       	ldi	r24, 0xC8	; 200
    176a:	80 83       	st	Z, r24
    176c:	88 ea       	ldi	r24, 0xA8	; 168
    176e:	80 83       	st	Z, r24
    1770:	8f e3       	ldi	r24, 0x3F	; 63
    1772:	80 83       	st	Z, r24
    1774:	85 ed       	ldi	r24, 0xD5	; 213
    1776:	80 83       	st	Z, r24
    1778:	80 e8       	ldi	r24, 0x80	; 128
    177a:	80 83       	st	Z, r24
    177c:	81 e8       	ldi	r24, 0x81	; 129
    177e:	80 83       	st	Z, r24
    1780:	80 e5       	ldi	r24, 0x50	; 80
    1782:	80 83       	st	Z, r24
    1784:	89 ed       	ldi	r24, 0xD9	; 217
    1786:	80 83       	st	Z, r24
    1788:	81 e2       	ldi	r24, 0x21	; 33
    178a:	80 83       	st	Z, r24
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	80 83       	st	Z, r24
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	80 83       	st	Z, r24
    1794:	8b ed       	ldi	r24, 0xDB	; 219
    1796:	80 83       	st	Z, r24
    1798:	80 e3       	ldi	r24, 0x30	; 48
    179a:	80 83       	st	Z, r24
    179c:	8d ea       	ldi	r24, 0xAD	; 173
    179e:	80 83       	st	Z, r24
    17a0:	10 82       	st	Z, r1
    17a2:	84 ea       	ldi	r24, 0xA4	; 164
    17a4:	80 83       	st	Z, r24
    17a6:	86 ea       	ldi	r24, 0xA6	; 166
    17a8:	80 83       	st	Z, r24
    17aa:	8f ea       	ldi	r24, 0xAF	; 175
    17ac:	80 83       	st	Z, r24
    17ae:	0e 94 84 0b 	call	0x1708	; 0x1708 <oled_reset>
    17b2:	0e 94 a5 0b 	call	0x174a	; 0x174a <oled_home>
    17b6:	08 95       	ret

000017b8 <oled_gotoLine>:
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <oled_pos>
    17be:	08 95       	ret

000017c0 <oled_print>:

void oled_print(char* character){
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	dc 01       	movw	r26, r24
	while (*character != '\0')
    17c6:	8c 91       	ld	r24, X
    17c8:	81 11       	cpse	r24, r1
    17ca:	1a c0       	rjmp	.+52     	; 0x1800 <oled_print+0x40>
    17cc:	1e c0       	rjmp	.+60     	; 0x180a <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    17ce:	ec 91       	ld	r30, X
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	b0 97       	sbiw	r30, 0x20	; 32
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	e2 0f       	add	r30, r18
    17e2:	f3 1f       	adc	r31, r19
    17e4:	e7 5d       	subi	r30, 0xD7	; 215
    17e6:	fd 4f       	sbci	r31, 0xFD	; 253
    17e8:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17ea:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	28 30       	cpi	r18, 0x08	; 8
    17f2:	31 05       	cpc	r19, r1
    17f4:	61 f7       	brne	.-40     	; 0x17ce <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17f6:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    17f8:	8c 91       	ld	r24, X
    17fa:	81 11       	cpse	r24, r1
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <oled_print+0x44>
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1800:	c0 e0       	ldi	r28, 0x00	; 0
    1802:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	e2 cf       	rjmp	.-60     	; 0x17ce <oled_print+0xe>
		}
		character++;
	}
	
	
}
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <setupInit>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1


	void setupInit(void){
	cli();
    1810:	f8 94       	cli
	xmem_init();
    1812:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xmem_init>
	USART_init(MYUBRR);
    1816:	8f e1       	ldi	r24, 0x1F	; 31
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <USART_init>
	adcInit();
    181e:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
	joystick_init();
    1822:	0e 94 5e 09 	call	0x12bc	; 0x12bc <joystick_init>
	touchButton_init();
    1826:	0e 94 ad 0c 	call	0x195a	; 0x195a <touchButton_init>
	oled_init();
    182a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <oled_init>
	timer_init();
    182e:	0e 94 9f 0c 	call	0x193e	; 0x193e <timer_init>
	sleep_init();
    1832:	0e 94 49 09 	call	0x1292	; 0x1292 <sleep_init>
	menu_init();
    1836:	0e 94 86 0a 	call	0x150c	; 0x150c <menu_init>
	CAN_init();
    183a:	0e 94 2e 03 	call	0x65c	; 0x65c <CAN_init>
	pwm_init();
    183e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <pwm_init>
	game_init();
    1842:	0e 94 58 05 	call	0xab0	; 0xab0 <game_init>
	sei();
    1846:	78 94       	sei
    1848:	08 95       	ret

0000184a <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1854:	ca e8       	ldi	r28, 0x8A	; 138
    1856:	d3 e0       	ldi	r29, 0x03	; 3
    1858:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1860:	89 83       	std	Y+1, r24	; 0x01
}
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    1868:	87 b3       	in	r24, 0x17	; 23
    186a:	80 6a       	ori	r24, 0xA0	; 160
    186c:	87 bb       	out	0x17, r24	; 23
    186e:	bc 9a       	sbi	0x17, 4	; 23
    1870:	8d b1       	in	r24, 0x0d	; 13
    1872:	81 65       	ori	r24, 0x51	; 81
    1874:	8d b9       	out	0x0d, r24	; 13
    1876:	c4 9a       	sbi	0x18, 4	; 24
    1878:	08 95       	ret

0000187a <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    187a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    187c:	77 9b       	sbis	0x0e, 7	; 14
    187e:	fe cf       	rjmp	.-4      	; 0x187c <SPI_masterWrite+0x2>

}
    1880:	08 95       	ret

00001882 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    1882:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    1884:	77 9b       	sbis	0x0e, 7	; 14
    1886:	fe cf       	rjmp	.-4      	; 0x1884 <SPI_masterRead+0x2>
	return SPDR;
    1888:	8f b1       	in	r24, 0x0f	; 15
}
    188a:	08 95       	ret

0000188c <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    188c:	66 23       	and	r22, r22
    188e:	69 f0       	breq	.+26     	; 0x18aa <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1890:	48 b3       	in	r20, 0x18	; 24
    1892:	21 e0       	ldi	r18, 0x01	; 1
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	b9 01       	movw	r22, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <SPI_setChipSelect+0x12>
    189a:	66 0f       	add	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	8a 95       	dec	r24
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <SPI_setChipSelect+0xe>
    18a2:	cb 01       	movw	r24, r22
    18a4:	84 2b       	or	r24, r20
    18a6:	88 bb       	out	0x18, r24	; 24
    18a8:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    18aa:	48 b3       	in	r20, 0x18	; 24
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	b9 01       	movw	r22, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <SPI_setChipSelect+0x2c>
    18b4:	66 0f       	add	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	8a 95       	dec	r24
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <SPI_setChipSelect+0x28>
    18bc:	cb 01       	movw	r24, r22
    18be:	80 95       	com	r24
    18c0:	84 23       	and	r24, r20
    18c2:	88 bb       	out	0x18, r24	; 24
    18c4:	08 95       	ret

000018c6 <__vector_14>:
#include "menu.h"
#include "game.h"
#include <avr/interrupt.h>


ISR (TIMER1_COMPB_vect) {
    18c6:	1f 92       	push	r1
    18c8:	0f 92       	push	r0
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	0f 92       	push	r0
    18ce:	11 24       	eor	r1, r1
    18d0:	2f 93       	push	r18
    18d2:	3f 93       	push	r19
    18d4:	4f 93       	push	r20
    18d6:	5f 93       	push	r21
    18d8:	6f 93       	push	r22
    18da:	7f 93       	push	r23
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
	cli();
    18e8:	f8 94       	cli
	TCNT1 = 0x00;
    18ea:	1d bc       	out	0x2d, r1	; 45
    18ec:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    18ee:	88 e6       	ldi	r24, 0x68	; 104
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    18f6:	8a e8       	ldi	r24, 0x8A	; 138
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	0e 94 25 0c 	call	0x184a	; 0x184a <slider_readPosition>
	touchButton_readButtons(&buttons);
    18fe:	88 e8       	ldi	r24, 0x88	; 136
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	0e 94 c6 0c 	call	0x198c	; 0x198c <touchButton_readButtons>
	if(gameActive==0){
    1906:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <gameActive>
    190a:	81 11       	cpse	r24, r1
    190c:	06 c0       	rjmp	.+12     	; 0x191a <__vector_14+0x54>
		navigateMenu(&joystick_pos);
    190e:	88 e6       	ldi	r24, 0x68	; 104
    1910:	93 e0       	ldi	r25, 0x03	; 3
    1912:	0e 94 20 0a 	call	0x1440	; 0x1440 <navigateMenu>
		menu_printCurrentMenu();
    1916:	0e 94 33 0b 	call	0x1666	; 0x1666 <menu_printCurrentMenu>
	}
	else{
		//game_updateOled();
	}
	sei();
    191a:	78 94       	sei
}
    191c:	ff 91       	pop	r31
    191e:	ef 91       	pop	r30
    1920:	bf 91       	pop	r27
    1922:	af 91       	pop	r26
    1924:	9f 91       	pop	r25
    1926:	8f 91       	pop	r24
    1928:	7f 91       	pop	r23
    192a:	6f 91       	pop	r22
    192c:	5f 91       	pop	r21
    192e:	4f 91       	pop	r20
    1930:	3f 91       	pop	r19
    1932:	2f 91       	pop	r18
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    193e:	89 b7       	in	r24, 0x39	; 57
    1940:	80 62       	ori	r24, 0x20	; 32
    1942:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1944:	1d bc       	out	0x2d, r1	; 45
    1946:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1948:	80 e3       	ldi	r24, 0x30	; 48
    194a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    194c:	85 e0       	ldi	r24, 0x05	; 5
    194e:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1950:	80 ee       	ldi	r24, 0xE0	; 224
    1952:	91 e0       	ldi	r25, 0x01	; 1
    1954:	99 bd       	out	0x29, r25	; 41
    1956:	88 bd       	out	0x28, r24	; 40
    1958:	08 95       	ret

0000195a <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    195a:	36 b3       	in	r19, 0x16	; 22
    195c:	26 b3       	in	r18, 0x16	; 22
    195e:	47 b3       	in	r20, 0x17	; 23
    1960:	32 70       	andi	r19, 0x02	; 2
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	bc 01       	movw	r22, r24
    1968:	02 c0       	rjmp	.+4      	; 0x196e <touchButton_init+0x14>
    196a:	66 0f       	add	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	3a 95       	dec	r19
    1970:	e2 f7       	brpl	.-8      	; 0x196a <touchButton_init+0x10>
    1972:	24 70       	andi	r18, 0x04	; 4
    1974:	02 c0       	rjmp	.+4      	; 0x197a <touchButton_init+0x20>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	2a 95       	dec	r18
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <touchButton_init+0x1c>
    197e:	86 2b       	or	r24, r22
    1980:	97 2b       	or	r25, r23
    1982:	80 95       	com	r24
    1984:	90 95       	com	r25
    1986:	84 23       	and	r24, r20
    1988:	87 bb       	out	0x17, r24	; 23
    198a:	08 95       	ret

0000198c <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    198c:	86 b3       	in	r24, 0x16	; 22
    198e:	e8 e8       	ldi	r30, 0x88	; 136
    1990:	f3 e0       	ldi	r31, 0x03	; 3
    1992:	86 95       	lsr	r24
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    1998:	86 b3       	in	r24, 0x16	; 22
    199a:	82 fb       	bst	r24, 2
    199c:	88 27       	eor	r24, r24
    199e:	80 f9       	bld	r24, 0
    19a0:	81 83       	std	Z+1, r24	; 0x01
    19a2:	08 95       	ret

000019a4 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    19a4:	5d 9b       	sbis	0x0b, 5	; 11
    19a6:	fe cf       	rjmp	.-4      	; 0x19a4 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    19a8:	8c b9       	out	0x0c, r24	; 12
    19aa:	08 95       	ret

000019ac <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    19ac:	5f 9b       	sbis	0x0b, 7	; 11
    19ae:	fe cf       	rjmp	.-4      	; 0x19ac <USART_receiveChar>
		;
	
	return UDR0;
    19b0:	8c b1       	in	r24, 0x0c	; 12
    19b2:	08 95       	ret

000019b4 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    19b4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    19b6:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    19b8:	88 e1       	ldi	r24, 0x18	; 24
    19ba:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    19bc:	8e e8       	ldi	r24, 0x8E	; 142
    19be:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    19c0:	66 ed       	ldi	r22, 0xD6	; 214
    19c2:	7c e0       	ldi	r23, 0x0C	; 12
    19c4:	82 ed       	ldi	r24, 0xD2	; 210
    19c6:	9c e0       	ldi	r25, 0x0C	; 12
    19c8:	0e 94 16 10 	call	0x202c	; 0x202c <fdevopen>
    19cc:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <uart+0x1>
    19d0:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <uart>
    19d4:	08 95       	ret

000019d6 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    19d6:	85 b7       	in	r24, 0x35	; 53
    19d8:	80 68       	ori	r24, 0x80	; 128
    19da:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    19dc:	80 b7       	in	r24, 0x30	; 48
    19de:	88 60       	ori	r24, 0x08	; 8
    19e0:	80 bf       	out	0x30, r24	; 48
    19e2:	08 95       	ret
    19e4:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__fp_pscA>
    19e8:	60 f0       	brcs	.+24     	; 0x1a02 <xmem_init+0x2c>
    19ea:	80 e8       	ldi	r24, 0x80	; 128
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <xmem_init+0x1c>
    19f0:	9e ef       	ldi	r25, 0xFE	; 254
    19f2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fp_pscB>
    19f6:	28 f0       	brcs	.+10     	; 0x1a02 <xmem_init+0x2c>
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	51 e0       	ldi	r21, 0x01	; 1
    19fc:	71 f4       	brne	.+28     	; 0x1a1a <atan2+0x10>
    19fe:	5e ef       	ldi	r21, 0xFE	; 254
    1a00:	0c c0       	rjmp	.+24     	; 0x1a1a <atan2+0x10>
    1a02:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_nan>
    1a06:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__fp_zero>

00001a0a <atan2>:
    1a0a:	e9 2f       	mov	r30, r25
    1a0c:	e0 78       	andi	r30, 0x80	; 128
    1a0e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_split3>
    1a12:	40 f3       	brcs	.-48     	; 0x19e4 <xmem_init+0xe>
    1a14:	09 2e       	mov	r0, r25
    1a16:	05 2a       	or	r0, r21
    1a18:	b1 f3       	breq	.-20     	; 0x1a06 <xmem_init+0x30>
    1a1a:	26 17       	cp	r18, r22
    1a1c:	37 07       	cpc	r19, r23
    1a1e:	48 07       	cpc	r20, r24
    1a20:	59 07       	cpc	r21, r25
    1a22:	38 f0       	brcs	.+14     	; 0x1a32 <atan2+0x28>
    1a24:	0e 2e       	mov	r0, r30
    1a26:	07 f8       	bld	r0, 7
    1a28:	e0 25       	eor	r30, r0
    1a2a:	69 f0       	breq	.+26     	; 0x1a46 <atan2+0x3c>
    1a2c:	e0 25       	eor	r30, r0
    1a2e:	e0 64       	ori	r30, 0x40	; 64
    1a30:	0a c0       	rjmp	.+20     	; 0x1a46 <atan2+0x3c>
    1a32:	ef 63       	ori	r30, 0x3F	; 63
    1a34:	07 f8       	bld	r0, 7
    1a36:	00 94       	com	r0
    1a38:	07 fa       	bst	r0, 7
    1a3a:	db 01       	movw	r26, r22
    1a3c:	b9 01       	movw	r22, r18
    1a3e:	9d 01       	movw	r18, r26
    1a40:	dc 01       	movw	r26, r24
    1a42:	ca 01       	movw	r24, r20
    1a44:	ad 01       	movw	r20, r26
    1a46:	ef 93       	push	r30
    1a48:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divsf3_pse>
    1a4c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_round>
    1a50:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <atan>
    1a54:	5f 91       	pop	r21
    1a56:	55 23       	and	r21, r21
    1a58:	39 f0       	breq	.+14     	; 0x1a68 <atan2+0x5e>
    1a5a:	2b ed       	ldi	r18, 0xDB	; 219
    1a5c:	3f e0       	ldi	r19, 0x0F	; 15
    1a5e:	49 e4       	ldi	r20, 0x49	; 73
    1a60:	50 fd       	sbrc	r21, 0
    1a62:	49 ec       	ldi	r20, 0xC9	; 201
    1a64:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__addsf3>
    1a68:	08 95       	ret

00001a6a <atan>:
    1a6a:	df 93       	push	r29
    1a6c:	dd 27       	eor	r29, r29
    1a6e:	b9 2f       	mov	r27, r25
    1a70:	bf 77       	andi	r27, 0x7F	; 127
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	16 16       	cp	r1, r22
    1a78:	17 06       	cpc	r1, r23
    1a7a:	48 07       	cpc	r20, r24
    1a7c:	5b 07       	cpc	r21, r27
    1a7e:	18 f4       	brcc	.+6      	; 0x1a86 <atan+0x1c>
    1a80:	d9 2f       	mov	r29, r25
    1a82:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <inverse>
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	7f 93       	push	r23
    1a8c:	6f 93       	push	r22
    1a8e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <square>
    1a92:	e0 e7       	ldi	r30, 0x70	; 112
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__fp_powser>
    1a9a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_round>
    1a9e:	2f 91       	pop	r18
    1aa0:	3f 91       	pop	r19
    1aa2:	4f 91       	pop	r20
    1aa4:	5f 91       	pop	r21
    1aa6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__mulsf3x>
    1aaa:	dd 23       	and	r29, r29
    1aac:	51 f0       	breq	.+20     	; 0x1ac2 <atan+0x58>
    1aae:	90 58       	subi	r25, 0x80	; 128
    1ab0:	a2 ea       	ldi	r26, 0xA2	; 162
    1ab2:	2a ed       	ldi	r18, 0xDA	; 218
    1ab4:	3f e0       	ldi	r19, 0x0F	; 15
    1ab6:	49 ec       	ldi	r20, 0xC9	; 201
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	d0 78       	andi	r29, 0x80	; 128
    1abc:	5d 27       	eor	r21, r29
    1abe:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__addsf3x>
    1ac2:	df 91       	pop	r29
    1ac4:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__fp_round>

00001ac8 <__divsf3>:
    1ac8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__divsf3x>
    1acc:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__fp_round>
    1ad0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fp_pscB>
    1ad4:	58 f0       	brcs	.+22     	; 0x1aec <__divsf3+0x24>
    1ad6:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__fp_pscA>
    1ada:	40 f0       	brcs	.+16     	; 0x1aec <__divsf3+0x24>
    1adc:	29 f4       	brne	.+10     	; 0x1ae8 <__divsf3+0x20>
    1ade:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae0:	29 f0       	breq	.+10     	; 0x1aec <__divsf3+0x24>
    1ae2:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_inf>
    1ae6:	51 11       	cpse	r21, r1
    1ae8:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__fp_szero>
    1aec:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_nan>

00001af0 <__divsf3x>:
    1af0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_split3>
    1af4:	68 f3       	brcs	.-38     	; 0x1ad0 <__divsf3+0x8>

00001af6 <__divsf3_pse>:
    1af6:	99 23       	and	r25, r25
    1af8:	b1 f3       	breq	.-20     	; 0x1ae6 <__divsf3+0x1e>
    1afa:	55 23       	and	r21, r21
    1afc:	91 f3       	breq	.-28     	; 0x1ae2 <__divsf3+0x1a>
    1afe:	95 1b       	sub	r25, r21
    1b00:	55 0b       	sbc	r21, r21
    1b02:	bb 27       	eor	r27, r27
    1b04:	aa 27       	eor	r26, r26
    1b06:	62 17       	cp	r22, r18
    1b08:	73 07       	cpc	r23, r19
    1b0a:	84 07       	cpc	r24, r20
    1b0c:	38 f0       	brcs	.+14     	; 0x1b1c <__divsf3_pse+0x26>
    1b0e:	9f 5f       	subi	r25, 0xFF	; 255
    1b10:	5f 4f       	sbci	r21, 0xFF	; 255
    1b12:	22 0f       	add	r18, r18
    1b14:	33 1f       	adc	r19, r19
    1b16:	44 1f       	adc	r20, r20
    1b18:	aa 1f       	adc	r26, r26
    1b1a:	a9 f3       	breq	.-22     	; 0x1b06 <__divsf3_pse+0x10>
    1b1c:	35 d0       	rcall	.+106    	; 0x1b88 <__divsf3_pse+0x92>
    1b1e:	0e 2e       	mov	r0, r30
    1b20:	3a f0       	brmi	.+14     	; 0x1b30 <__divsf3_pse+0x3a>
    1b22:	e0 e8       	ldi	r30, 0x80	; 128
    1b24:	32 d0       	rcall	.+100    	; 0x1b8a <__divsf3_pse+0x94>
    1b26:	91 50       	subi	r25, 0x01	; 1
    1b28:	50 40       	sbci	r21, 0x00	; 0
    1b2a:	e6 95       	lsr	r30
    1b2c:	00 1c       	adc	r0, r0
    1b2e:	ca f7       	brpl	.-14     	; 0x1b22 <__divsf3_pse+0x2c>
    1b30:	2b d0       	rcall	.+86     	; 0x1b88 <__divsf3_pse+0x92>
    1b32:	fe 2f       	mov	r31, r30
    1b34:	29 d0       	rcall	.+82     	; 0x1b88 <__divsf3_pse+0x92>
    1b36:	66 0f       	add	r22, r22
    1b38:	77 1f       	adc	r23, r23
    1b3a:	88 1f       	adc	r24, r24
    1b3c:	bb 1f       	adc	r27, r27
    1b3e:	26 17       	cp	r18, r22
    1b40:	37 07       	cpc	r19, r23
    1b42:	48 07       	cpc	r20, r24
    1b44:	ab 07       	cpc	r26, r27
    1b46:	b0 e8       	ldi	r27, 0x80	; 128
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <__divsf3_pse+0x56>
    1b4a:	bb 0b       	sbc	r27, r27
    1b4c:	80 2d       	mov	r24, r0
    1b4e:	bf 01       	movw	r22, r30
    1b50:	ff 27       	eor	r31, r31
    1b52:	93 58       	subi	r25, 0x83	; 131
    1b54:	5f 4f       	sbci	r21, 0xFF	; 255
    1b56:	3a f0       	brmi	.+14     	; 0x1b66 <__divsf3_pse+0x70>
    1b58:	9e 3f       	cpi	r25, 0xFE	; 254
    1b5a:	51 05       	cpc	r21, r1
    1b5c:	78 f0       	brcs	.+30     	; 0x1b7c <__divsf3_pse+0x86>
    1b5e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_inf>
    1b62:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__fp_szero>
    1b66:	5f 3f       	cpi	r21, 0xFF	; 255
    1b68:	e4 f3       	brlt	.-8      	; 0x1b62 <__divsf3_pse+0x6c>
    1b6a:	98 3e       	cpi	r25, 0xE8	; 232
    1b6c:	d4 f3       	brlt	.-12     	; 0x1b62 <__divsf3_pse+0x6c>
    1b6e:	86 95       	lsr	r24
    1b70:	77 95       	ror	r23
    1b72:	67 95       	ror	r22
    1b74:	b7 95       	ror	r27
    1b76:	f7 95       	ror	r31
    1b78:	9f 5f       	subi	r25, 0xFF	; 255
    1b7a:	c9 f7       	brne	.-14     	; 0x1b6e <__divsf3_pse+0x78>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	91 1d       	adc	r25, r1
    1b80:	96 95       	lsr	r25
    1b82:	87 95       	ror	r24
    1b84:	97 f9       	bld	r25, 7
    1b86:	08 95       	ret
    1b88:	e1 e0       	ldi	r30, 0x01	; 1
    1b8a:	66 0f       	add	r22, r22
    1b8c:	77 1f       	adc	r23, r23
    1b8e:	88 1f       	adc	r24, r24
    1b90:	bb 1f       	adc	r27, r27
    1b92:	62 17       	cp	r22, r18
    1b94:	73 07       	cpc	r23, r19
    1b96:	84 07       	cpc	r24, r20
    1b98:	ba 07       	cpc	r27, r26
    1b9a:	20 f0       	brcs	.+8      	; 0x1ba4 <__divsf3_pse+0xae>
    1b9c:	62 1b       	sub	r22, r18
    1b9e:	73 0b       	sbc	r23, r19
    1ba0:	84 0b       	sbc	r24, r20
    1ba2:	ba 0b       	sbc	r27, r26
    1ba4:	ee 1f       	adc	r30, r30
    1ba6:	88 f7       	brcc	.-30     	; 0x1b8a <__divsf3_pse+0x94>
    1ba8:	e0 95       	com	r30
    1baa:	08 95       	ret

00001bac <__fixsfsi>:
    1bac:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__fixunssfsi>
    1bb0:	68 94       	set
    1bb2:	b1 11       	cpse	r27, r1
    1bb4:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__fp_szero>
    1bb8:	08 95       	ret

00001bba <__fixunssfsi>:
    1bba:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fp_splitA>
    1bbe:	88 f0       	brcs	.+34     	; 0x1be2 <__fixunssfsi+0x28>
    1bc0:	9f 57       	subi	r25, 0x7F	; 127
    1bc2:	98 f0       	brcs	.+38     	; 0x1bea <__fixunssfsi+0x30>
    1bc4:	b9 2f       	mov	r27, r25
    1bc6:	99 27       	eor	r25, r25
    1bc8:	b7 51       	subi	r27, 0x17	; 23
    1bca:	b0 f0       	brcs	.+44     	; 0x1bf8 <__fixunssfsi+0x3e>
    1bcc:	e1 f0       	breq	.+56     	; 0x1c06 <__fixunssfsi+0x4c>
    1bce:	66 0f       	add	r22, r22
    1bd0:	77 1f       	adc	r23, r23
    1bd2:	88 1f       	adc	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	1a f0       	brmi	.+6      	; 0x1bde <__fixunssfsi+0x24>
    1bd8:	ba 95       	dec	r27
    1bda:	c9 f7       	brne	.-14     	; 0x1bce <__fixunssfsi+0x14>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <__fixunssfsi+0x4c>
    1bde:	b1 30       	cpi	r27, 0x01	; 1
    1be0:	91 f0       	breq	.+36     	; 0x1c06 <__fixunssfsi+0x4c>
    1be2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_zero>
    1be6:	b1 e0       	ldi	r27, 0x01	; 1
    1be8:	08 95       	ret
    1bea:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__fp_zero>
    1bee:	67 2f       	mov	r22, r23
    1bf0:	78 2f       	mov	r23, r24
    1bf2:	88 27       	eor	r24, r24
    1bf4:	b8 5f       	subi	r27, 0xF8	; 248
    1bf6:	39 f0       	breq	.+14     	; 0x1c06 <__fixunssfsi+0x4c>
    1bf8:	b9 3f       	cpi	r27, 0xF9	; 249
    1bfa:	cc f3       	brlt	.-14     	; 0x1bee <__fixunssfsi+0x34>
    1bfc:	86 95       	lsr	r24
    1bfe:	77 95       	ror	r23
    1c00:	67 95       	ror	r22
    1c02:	b3 95       	inc	r27
    1c04:	d9 f7       	brne	.-10     	; 0x1bfc <__fixunssfsi+0x42>
    1c06:	3e f4       	brtc	.+14     	; 0x1c16 <__fixunssfsi+0x5c>
    1c08:	90 95       	com	r25
    1c0a:	80 95       	com	r24
    1c0c:	70 95       	com	r23
    1c0e:	61 95       	neg	r22
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	8f 4f       	sbci	r24, 0xFF	; 255
    1c14:	9f 4f       	sbci	r25, 0xFF	; 255
    1c16:	08 95       	ret

00001c18 <__floatunsisf>:
    1c18:	e8 94       	clt
    1c1a:	09 c0       	rjmp	.+18     	; 0x1c2e <__floatsisf+0x12>

00001c1c <__floatsisf>:
    1c1c:	97 fb       	bst	r25, 7
    1c1e:	3e f4       	brtc	.+14     	; 0x1c2e <__floatsisf+0x12>
    1c20:	90 95       	com	r25
    1c22:	80 95       	com	r24
    1c24:	70 95       	com	r23
    1c26:	61 95       	neg	r22
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	99 23       	and	r25, r25
    1c30:	a9 f0       	breq	.+42     	; 0x1c5c <__floatsisf+0x40>
    1c32:	f9 2f       	mov	r31, r25
    1c34:	96 e9       	ldi	r25, 0x96	; 150
    1c36:	bb 27       	eor	r27, r27
    1c38:	93 95       	inc	r25
    1c3a:	f6 95       	lsr	r31
    1c3c:	87 95       	ror	r24
    1c3e:	77 95       	ror	r23
    1c40:	67 95       	ror	r22
    1c42:	b7 95       	ror	r27
    1c44:	f1 11       	cpse	r31, r1
    1c46:	f8 cf       	rjmp	.-16     	; 0x1c38 <__floatsisf+0x1c>
    1c48:	fa f4       	brpl	.+62     	; 0x1c88 <__floatsisf+0x6c>
    1c4a:	bb 0f       	add	r27, r27
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <__floatsisf+0x36>
    1c4e:	60 ff       	sbrs	r22, 0
    1c50:	1b c0       	rjmp	.+54     	; 0x1c88 <__floatsisf+0x6c>
    1c52:	6f 5f       	subi	r22, 0xFF	; 255
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	8f 4f       	sbci	r24, 0xFF	; 255
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	16 c0       	rjmp	.+44     	; 0x1c88 <__floatsisf+0x6c>
    1c5c:	88 23       	and	r24, r24
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <__floatsisf+0x48>
    1c60:	96 e9       	ldi	r25, 0x96	; 150
    1c62:	11 c0       	rjmp	.+34     	; 0x1c86 <__floatsisf+0x6a>
    1c64:	77 23       	and	r23, r23
    1c66:	21 f0       	breq	.+8      	; 0x1c70 <__floatsisf+0x54>
    1c68:	9e e8       	ldi	r25, 0x8E	; 142
    1c6a:	87 2f       	mov	r24, r23
    1c6c:	76 2f       	mov	r23, r22
    1c6e:	05 c0       	rjmp	.+10     	; 0x1c7a <__floatsisf+0x5e>
    1c70:	66 23       	and	r22, r22
    1c72:	71 f0       	breq	.+28     	; 0x1c90 <__floatsisf+0x74>
    1c74:	96 e8       	ldi	r25, 0x86	; 134
    1c76:	86 2f       	mov	r24, r22
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	2a f0       	brmi	.+10     	; 0x1c88 <__floatsisf+0x6c>
    1c7e:	9a 95       	dec	r25
    1c80:	66 0f       	add	r22, r22
    1c82:	77 1f       	adc	r23, r23
    1c84:	88 1f       	adc	r24, r24
    1c86:	da f7       	brpl	.-10     	; 0x1c7e <__floatsisf+0x62>
    1c88:	88 0f       	add	r24, r24
    1c8a:	96 95       	lsr	r25
    1c8c:	87 95       	ror	r24
    1c8e:	97 f9       	bld	r25, 7
    1c90:	08 95       	ret

00001c92 <__fp_inf>:
    1c92:	97 f9       	bld	r25, 7
    1c94:	9f 67       	ori	r25, 0x7F	; 127
    1c96:	80 e8       	ldi	r24, 0x80	; 128
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	08 95       	ret

00001c9e <__fp_nan>:
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	80 ec       	ldi	r24, 0xC0	; 192
    1ca2:	08 95       	ret

00001ca4 <__fp_powser>:
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	1f 93       	push	r17
    1caa:	0f 93       	push	r16
    1cac:	ff 92       	push	r15
    1cae:	ef 92       	push	r14
    1cb0:	df 92       	push	r13
    1cb2:	7b 01       	movw	r14, r22
    1cb4:	8c 01       	movw	r16, r24
    1cb6:	68 94       	set
    1cb8:	06 c0       	rjmp	.+12     	; 0x1cc6 <__fp_powser+0x22>
    1cba:	da 2e       	mov	r13, r26
    1cbc:	ef 01       	movw	r28, r30
    1cbe:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__mulsf3x>
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e8 94       	clt
    1cc6:	a5 91       	lpm	r26, Z+
    1cc8:	25 91       	lpm	r18, Z+
    1cca:	35 91       	lpm	r19, Z+
    1ccc:	45 91       	lpm	r20, Z+
    1cce:	55 91       	lpm	r21, Z+
    1cd0:	a6 f3       	brts	.-24     	; 0x1cba <__fp_powser+0x16>
    1cd2:	ef 01       	movw	r28, r30
    1cd4:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__addsf3x>
    1cd8:	fe 01       	movw	r30, r28
    1cda:	97 01       	movw	r18, r14
    1cdc:	a8 01       	movw	r20, r16
    1cde:	da 94       	dec	r13
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <__fp_powser+0x18>
    1ce2:	df 90       	pop	r13
    1ce4:	ef 90       	pop	r14
    1ce6:	ff 90       	pop	r15
    1ce8:	0f 91       	pop	r16
    1cea:	1f 91       	pop	r17
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <__fp_pscA>:
    1cf2:	00 24       	eor	r0, r0
    1cf4:	0a 94       	dec	r0
    1cf6:	16 16       	cp	r1, r22
    1cf8:	17 06       	cpc	r1, r23
    1cfa:	18 06       	cpc	r1, r24
    1cfc:	09 06       	cpc	r0, r25
    1cfe:	08 95       	ret

00001d00 <__fp_pscB>:
    1d00:	00 24       	eor	r0, r0
    1d02:	0a 94       	dec	r0
    1d04:	12 16       	cp	r1, r18
    1d06:	13 06       	cpc	r1, r19
    1d08:	14 06       	cpc	r1, r20
    1d0a:	05 06       	cpc	r0, r21
    1d0c:	08 95       	ret

00001d0e <__fp_round>:
    1d0e:	09 2e       	mov	r0, r25
    1d10:	03 94       	inc	r0
    1d12:	00 0c       	add	r0, r0
    1d14:	11 f4       	brne	.+4      	; 0x1d1a <__fp_round+0xc>
    1d16:	88 23       	and	r24, r24
    1d18:	52 f0       	brmi	.+20     	; 0x1d2e <__fp_round+0x20>
    1d1a:	bb 0f       	add	r27, r27
    1d1c:	40 f4       	brcc	.+16     	; 0x1d2e <__fp_round+0x20>
    1d1e:	bf 2b       	or	r27, r31
    1d20:	11 f4       	brne	.+4      	; 0x1d26 <__fp_round+0x18>
    1d22:	60 ff       	sbrs	r22, 0
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <__fp_round+0x20>
    1d26:	6f 5f       	subi	r22, 0xFF	; 255
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	08 95       	ret

00001d30 <__fp_split3>:
    1d30:	57 fd       	sbrc	r21, 7
    1d32:	90 58       	subi	r25, 0x80	; 128
    1d34:	44 0f       	add	r20, r20
    1d36:	55 1f       	adc	r21, r21
    1d38:	59 f0       	breq	.+22     	; 0x1d50 <__fp_splitA+0x10>
    1d3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d3c:	71 f0       	breq	.+28     	; 0x1d5a <__fp_splitA+0x1a>
    1d3e:	47 95       	ror	r20

00001d40 <__fp_splitA>:
    1d40:	88 0f       	add	r24, r24
    1d42:	97 fb       	bst	r25, 7
    1d44:	99 1f       	adc	r25, r25
    1d46:	61 f0       	breq	.+24     	; 0x1d60 <__fp_splitA+0x20>
    1d48:	9f 3f       	cpi	r25, 0xFF	; 255
    1d4a:	79 f0       	breq	.+30     	; 0x1d6a <__fp_splitA+0x2a>
    1d4c:	87 95       	ror	r24
    1d4e:	08 95       	ret
    1d50:	12 16       	cp	r1, r18
    1d52:	13 06       	cpc	r1, r19
    1d54:	14 06       	cpc	r1, r20
    1d56:	55 1f       	adc	r21, r21
    1d58:	f2 cf       	rjmp	.-28     	; 0x1d3e <__fp_split3+0xe>
    1d5a:	46 95       	lsr	r20
    1d5c:	f1 df       	rcall	.-30     	; 0x1d40 <__fp_splitA>
    1d5e:	08 c0       	rjmp	.+16     	; 0x1d70 <__fp_splitA+0x30>
    1d60:	16 16       	cp	r1, r22
    1d62:	17 06       	cpc	r1, r23
    1d64:	18 06       	cpc	r1, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	f1 cf       	rjmp	.-30     	; 0x1d4c <__fp_splitA+0xc>
    1d6a:	86 95       	lsr	r24
    1d6c:	71 05       	cpc	r23, r1
    1d6e:	61 05       	cpc	r22, r1
    1d70:	08 94       	sec
    1d72:	08 95       	ret

00001d74 <__fp_zero>:
    1d74:	e8 94       	clt

00001d76 <__fp_szero>:
    1d76:	bb 27       	eor	r27, r27
    1d78:	66 27       	eor	r22, r22
    1d7a:	77 27       	eor	r23, r23
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	97 f9       	bld	r25, 7
    1d80:	08 95       	ret

00001d82 <inverse>:
    1d82:	9b 01       	movw	r18, r22
    1d84:	ac 01       	movw	r20, r24
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	80 e8       	ldi	r24, 0x80	; 128
    1d8c:	9f e3       	ldi	r25, 0x3F	; 63
    1d8e:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__divsf3>

00001d92 <__mulsf3>:
    1d92:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__mulsf3x>
    1d96:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__fp_round>
    1d9a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__fp_pscA>
    1d9e:	38 f0       	brcs	.+14     	; 0x1dae <__mulsf3+0x1c>
    1da0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fp_pscB>
    1da4:	20 f0       	brcs	.+8      	; 0x1dae <__mulsf3+0x1c>
    1da6:	95 23       	and	r25, r21
    1da8:	11 f0       	breq	.+4      	; 0x1dae <__mulsf3+0x1c>
    1daa:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_inf>
    1dae:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_nan>
    1db2:	11 24       	eor	r1, r1
    1db4:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__fp_szero>

00001db8 <__mulsf3x>:
    1db8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_split3>
    1dbc:	70 f3       	brcs	.-36     	; 0x1d9a <__mulsf3+0x8>

00001dbe <__mulsf3_pse>:
    1dbe:	95 9f       	mul	r25, r21
    1dc0:	c1 f3       	breq	.-16     	; 0x1db2 <__mulsf3+0x20>
    1dc2:	95 0f       	add	r25, r21
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	55 1f       	adc	r21, r21
    1dc8:	62 9f       	mul	r22, r18
    1dca:	f0 01       	movw	r30, r0
    1dcc:	72 9f       	mul	r23, r18
    1dce:	bb 27       	eor	r27, r27
    1dd0:	f0 0d       	add	r31, r0
    1dd2:	b1 1d       	adc	r27, r1
    1dd4:	63 9f       	mul	r22, r19
    1dd6:	aa 27       	eor	r26, r26
    1dd8:	f0 0d       	add	r31, r0
    1dda:	b1 1d       	adc	r27, r1
    1ddc:	aa 1f       	adc	r26, r26
    1dde:	64 9f       	mul	r22, r20
    1de0:	66 27       	eor	r22, r22
    1de2:	b0 0d       	add	r27, r0
    1de4:	a1 1d       	adc	r26, r1
    1de6:	66 1f       	adc	r22, r22
    1de8:	82 9f       	mul	r24, r18
    1dea:	22 27       	eor	r18, r18
    1dec:	b0 0d       	add	r27, r0
    1dee:	a1 1d       	adc	r26, r1
    1df0:	62 1f       	adc	r22, r18
    1df2:	73 9f       	mul	r23, r19
    1df4:	b0 0d       	add	r27, r0
    1df6:	a1 1d       	adc	r26, r1
    1df8:	62 1f       	adc	r22, r18
    1dfa:	83 9f       	mul	r24, r19
    1dfc:	a0 0d       	add	r26, r0
    1dfe:	61 1d       	adc	r22, r1
    1e00:	22 1f       	adc	r18, r18
    1e02:	74 9f       	mul	r23, r20
    1e04:	33 27       	eor	r19, r19
    1e06:	a0 0d       	add	r26, r0
    1e08:	61 1d       	adc	r22, r1
    1e0a:	23 1f       	adc	r18, r19
    1e0c:	84 9f       	mul	r24, r20
    1e0e:	60 0d       	add	r22, r0
    1e10:	21 1d       	adc	r18, r1
    1e12:	82 2f       	mov	r24, r18
    1e14:	76 2f       	mov	r23, r22
    1e16:	6a 2f       	mov	r22, r26
    1e18:	11 24       	eor	r1, r1
    1e1a:	9f 57       	subi	r25, 0x7F	; 127
    1e1c:	50 40       	sbci	r21, 0x00	; 0
    1e1e:	9a f0       	brmi	.+38     	; 0x1e46 <__mulsf3_pse+0x88>
    1e20:	f1 f0       	breq	.+60     	; 0x1e5e <__mulsf3_pse+0xa0>
    1e22:	88 23       	and	r24, r24
    1e24:	4a f0       	brmi	.+18     	; 0x1e38 <__mulsf3_pse+0x7a>
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	bb 1f       	adc	r27, r27
    1e2c:	66 1f       	adc	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	91 50       	subi	r25, 0x01	; 1
    1e34:	50 40       	sbci	r21, 0x00	; 0
    1e36:	a9 f7       	brne	.-22     	; 0x1e22 <__mulsf3_pse+0x64>
    1e38:	9e 3f       	cpi	r25, 0xFE	; 254
    1e3a:	51 05       	cpc	r21, r1
    1e3c:	80 f0       	brcs	.+32     	; 0x1e5e <__mulsf3_pse+0xa0>
    1e3e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_inf>
    1e42:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__fp_szero>
    1e46:	5f 3f       	cpi	r21, 0xFF	; 255
    1e48:	e4 f3       	brlt	.-8      	; 0x1e42 <__mulsf3_pse+0x84>
    1e4a:	98 3e       	cpi	r25, 0xE8	; 232
    1e4c:	d4 f3       	brlt	.-12     	; 0x1e42 <__mulsf3_pse+0x84>
    1e4e:	86 95       	lsr	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	b7 95       	ror	r27
    1e56:	f7 95       	ror	r31
    1e58:	e7 95       	ror	r30
    1e5a:	9f 5f       	subi	r25, 0xFF	; 255
    1e5c:	c1 f7       	brne	.-16     	; 0x1e4e <__mulsf3_pse+0x90>
    1e5e:	fe 2b       	or	r31, r30
    1e60:	88 0f       	add	r24, r24
    1e62:	91 1d       	adc	r25, r1
    1e64:	96 95       	lsr	r25
    1e66:	87 95       	ror	r24
    1e68:	97 f9       	bld	r25, 7
    1e6a:	08 95       	ret

00001e6c <square>:
    1e6c:	9b 01       	movw	r18, r22
    1e6e:	ac 01       	movw	r20, r24
    1e70:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__mulsf3>

00001e74 <__subsf3>:
    1e74:	50 58       	subi	r21, 0x80	; 128

00001e76 <__addsf3>:
    1e76:	bb 27       	eor	r27, r27
    1e78:	aa 27       	eor	r26, r26
    1e7a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__addsf3x>
    1e7e:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__fp_round>
    1e82:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__fp_pscA>
    1e86:	38 f0       	brcs	.+14     	; 0x1e96 <__addsf3+0x20>
    1e88:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fp_pscB>
    1e8c:	20 f0       	brcs	.+8      	; 0x1e96 <__addsf3+0x20>
    1e8e:	39 f4       	brne	.+14     	; 0x1e9e <__addsf3+0x28>
    1e90:	9f 3f       	cpi	r25, 0xFF	; 255
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <__addsf3+0x24>
    1e94:	26 f4       	brtc	.+8      	; 0x1e9e <__addsf3+0x28>
    1e96:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_nan>
    1e9a:	0e f4       	brtc	.+2      	; 0x1e9e <__addsf3+0x28>
    1e9c:	e0 95       	com	r30
    1e9e:	e7 fb       	bst	r30, 7
    1ea0:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_inf>

00001ea4 <__addsf3x>:
    1ea4:	e9 2f       	mov	r30, r25
    1ea6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_split3>
    1eaa:	58 f3       	brcs	.-42     	; 0x1e82 <__addsf3+0xc>
    1eac:	ba 17       	cp	r27, r26
    1eae:	62 07       	cpc	r22, r18
    1eb0:	73 07       	cpc	r23, r19
    1eb2:	84 07       	cpc	r24, r20
    1eb4:	95 07       	cpc	r25, r21
    1eb6:	20 f0       	brcs	.+8      	; 0x1ec0 <__addsf3x+0x1c>
    1eb8:	79 f4       	brne	.+30     	; 0x1ed8 <__addsf3x+0x34>
    1eba:	a6 f5       	brtc	.+104    	; 0x1f24 <__addsf3x+0x80>
    1ebc:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__fp_zero>
    1ec0:	0e f4       	brtc	.+2      	; 0x1ec4 <__addsf3x+0x20>
    1ec2:	e0 95       	com	r30
    1ec4:	0b 2e       	mov	r0, r27
    1ec6:	ba 2f       	mov	r27, r26
    1ec8:	a0 2d       	mov	r26, r0
    1eca:	0b 01       	movw	r0, r22
    1ecc:	b9 01       	movw	r22, r18
    1ece:	90 01       	movw	r18, r0
    1ed0:	0c 01       	movw	r0, r24
    1ed2:	ca 01       	movw	r24, r20
    1ed4:	a0 01       	movw	r20, r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	ff 27       	eor	r31, r31
    1eda:	59 1b       	sub	r21, r25
    1edc:	99 f0       	breq	.+38     	; 0x1f04 <__addsf3x+0x60>
    1ede:	59 3f       	cpi	r21, 0xF9	; 249
    1ee0:	50 f4       	brcc	.+20     	; 0x1ef6 <__addsf3x+0x52>
    1ee2:	50 3e       	cpi	r21, 0xE0	; 224
    1ee4:	68 f1       	brcs	.+90     	; 0x1f40 <__addsf3x+0x9c>
    1ee6:	1a 16       	cp	r1, r26
    1ee8:	f0 40       	sbci	r31, 0x00	; 0
    1eea:	a2 2f       	mov	r26, r18
    1eec:	23 2f       	mov	r18, r19
    1eee:	34 2f       	mov	r19, r20
    1ef0:	44 27       	eor	r20, r20
    1ef2:	58 5f       	subi	r21, 0xF8	; 248
    1ef4:	f3 cf       	rjmp	.-26     	; 0x1edc <__addsf3x+0x38>
    1ef6:	46 95       	lsr	r20
    1ef8:	37 95       	ror	r19
    1efa:	27 95       	ror	r18
    1efc:	a7 95       	ror	r26
    1efe:	f0 40       	sbci	r31, 0x00	; 0
    1f00:	53 95       	inc	r21
    1f02:	c9 f7       	brne	.-14     	; 0x1ef6 <__addsf3x+0x52>
    1f04:	7e f4       	brtc	.+30     	; 0x1f24 <__addsf3x+0x80>
    1f06:	1f 16       	cp	r1, r31
    1f08:	ba 0b       	sbc	r27, r26
    1f0a:	62 0b       	sbc	r22, r18
    1f0c:	73 0b       	sbc	r23, r19
    1f0e:	84 0b       	sbc	r24, r20
    1f10:	ba f0       	brmi	.+46     	; 0x1f40 <__addsf3x+0x9c>
    1f12:	91 50       	subi	r25, 0x01	; 1
    1f14:	a1 f0       	breq	.+40     	; 0x1f3e <__addsf3x+0x9a>
    1f16:	ff 0f       	add	r31, r31
    1f18:	bb 1f       	adc	r27, r27
    1f1a:	66 1f       	adc	r22, r22
    1f1c:	77 1f       	adc	r23, r23
    1f1e:	88 1f       	adc	r24, r24
    1f20:	c2 f7       	brpl	.-16     	; 0x1f12 <__addsf3x+0x6e>
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <__addsf3x+0x9c>
    1f24:	ba 0f       	add	r27, r26
    1f26:	62 1f       	adc	r22, r18
    1f28:	73 1f       	adc	r23, r19
    1f2a:	84 1f       	adc	r24, r20
    1f2c:	48 f4       	brcc	.+18     	; 0x1f40 <__addsf3x+0x9c>
    1f2e:	87 95       	ror	r24
    1f30:	77 95       	ror	r23
    1f32:	67 95       	ror	r22
    1f34:	b7 95       	ror	r27
    1f36:	f7 95       	ror	r31
    1f38:	9e 3f       	cpi	r25, 0xFE	; 254
    1f3a:	08 f0       	brcs	.+2      	; 0x1f3e <__addsf3x+0x9a>
    1f3c:	b0 cf       	rjmp	.-160    	; 0x1e9e <__addsf3+0x28>
    1f3e:	93 95       	inc	r25
    1f40:	88 0f       	add	r24, r24
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <__addsf3x+0xa2>
    1f44:	99 27       	eor	r25, r25
    1f46:	ee 0f       	add	r30, r30
    1f48:	97 95       	ror	r25
    1f4a:	87 95       	ror	r24
    1f4c:	08 95       	ret

00001f4e <__divmodhi4>:
    1f4e:	97 fb       	bst	r25, 7
    1f50:	07 2e       	mov	r0, r23
    1f52:	16 f4       	brtc	.+4      	; 0x1f58 <__divmodhi4+0xa>
    1f54:	00 94       	com	r0
    1f56:	07 d0       	rcall	.+14     	; 0x1f66 <__divmodhi4_neg1>
    1f58:	77 fd       	sbrc	r23, 7
    1f5a:	09 d0       	rcall	.+18     	; 0x1f6e <__divmodhi4_neg2>
    1f5c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__udivmodhi4>
    1f60:	07 fc       	sbrc	r0, 7
    1f62:	05 d0       	rcall	.+10     	; 0x1f6e <__divmodhi4_neg2>
    1f64:	3e f4       	brtc	.+14     	; 0x1f74 <__divmodhi4_exit>

00001f66 <__divmodhi4_neg1>:
    1f66:	90 95       	com	r25
    1f68:	81 95       	neg	r24
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	08 95       	ret

00001f6e <__divmodhi4_neg2>:
    1f6e:	70 95       	com	r23
    1f70:	61 95       	neg	r22
    1f72:	7f 4f       	sbci	r23, 0xFF	; 255

00001f74 <__divmodhi4_exit>:
    1f74:	08 95       	ret

00001f76 <__udivmodsi4>:
    1f76:	a1 e2       	ldi	r26, 0x21	; 33
    1f78:	1a 2e       	mov	r1, r26
    1f7a:	aa 1b       	sub	r26, r26
    1f7c:	bb 1b       	sub	r27, r27
    1f7e:	fd 01       	movw	r30, r26
    1f80:	0d c0       	rjmp	.+26     	; 0x1f9c <__udivmodsi4_ep>

00001f82 <__udivmodsi4_loop>:
    1f82:	aa 1f       	adc	r26, r26
    1f84:	bb 1f       	adc	r27, r27
    1f86:	ee 1f       	adc	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	a2 17       	cp	r26, r18
    1f8c:	b3 07       	cpc	r27, r19
    1f8e:	e4 07       	cpc	r30, r20
    1f90:	f5 07       	cpc	r31, r21
    1f92:	20 f0       	brcs	.+8      	; 0x1f9c <__udivmodsi4_ep>
    1f94:	a2 1b       	sub	r26, r18
    1f96:	b3 0b       	sbc	r27, r19
    1f98:	e4 0b       	sbc	r30, r20
    1f9a:	f5 0b       	sbc	r31, r21

00001f9c <__udivmodsi4_ep>:
    1f9c:	66 1f       	adc	r22, r22
    1f9e:	77 1f       	adc	r23, r23
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	1a 94       	dec	r1
    1fa6:	69 f7       	brne	.-38     	; 0x1f82 <__udivmodsi4_loop>
    1fa8:	60 95       	com	r22
    1faa:	70 95       	com	r23
    1fac:	80 95       	com	r24
    1fae:	90 95       	com	r25
    1fb0:	9b 01       	movw	r18, r22
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	bd 01       	movw	r22, r26
    1fb6:	cf 01       	movw	r24, r30
    1fb8:	08 95       	ret

00001fba <__udivmodhi4>:
    1fba:	aa 1b       	sub	r26, r26
    1fbc:	bb 1b       	sub	r27, r27
    1fbe:	51 e1       	ldi	r21, 0x11	; 17
    1fc0:	07 c0       	rjmp	.+14     	; 0x1fd0 <__udivmodhi4_ep>

00001fc2 <__udivmodhi4_loop>:
    1fc2:	aa 1f       	adc	r26, r26
    1fc4:	bb 1f       	adc	r27, r27
    1fc6:	a6 17       	cp	r26, r22
    1fc8:	b7 07       	cpc	r27, r23
    1fca:	10 f0       	brcs	.+4      	; 0x1fd0 <__udivmodhi4_ep>
    1fcc:	a6 1b       	sub	r26, r22
    1fce:	b7 0b       	sbc	r27, r23

00001fd0 <__udivmodhi4_ep>:
    1fd0:	88 1f       	adc	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	5a 95       	dec	r21
    1fd6:	a9 f7       	brne	.-22     	; 0x1fc2 <__udivmodhi4_loop>
    1fd8:	80 95       	com	r24
    1fda:	90 95       	com	r25
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	08 95       	ret

00001fe2 <__itoa_ncheck>:
    1fe2:	bb 27       	eor	r27, r27
    1fe4:	4a 30       	cpi	r20, 0x0A	; 10
    1fe6:	31 f4       	brne	.+12     	; 0x1ff4 <__itoa_ncheck+0x12>
    1fe8:	99 23       	and	r25, r25
    1fea:	22 f4       	brpl	.+8      	; 0x1ff4 <__itoa_ncheck+0x12>
    1fec:	bd e2       	ldi	r27, 0x2D	; 45
    1fee:	90 95       	com	r25
    1ff0:	81 95       	neg	r24
    1ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff4:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__utoa_common>

00001ff8 <__utoa_ncheck>:
    1ff8:	bb 27       	eor	r27, r27

00001ffa <__utoa_common>:
    1ffa:	fb 01       	movw	r30, r22
    1ffc:	55 27       	eor	r21, r21
    1ffe:	aa 27       	eor	r26, r26
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	aa 1f       	adc	r26, r26
    2006:	a4 17       	cp	r26, r20
    2008:	10 f0       	brcs	.+4      	; 0x200e <__utoa_common+0x14>
    200a:	a4 1b       	sub	r26, r20
    200c:	83 95       	inc	r24
    200e:	50 51       	subi	r21, 0x10	; 16
    2010:	b9 f7       	brne	.-18     	; 0x2000 <__utoa_common+0x6>
    2012:	a0 5d       	subi	r26, 0xD0	; 208
    2014:	aa 33       	cpi	r26, 0x3A	; 58
    2016:	08 f0       	brcs	.+2      	; 0x201a <__utoa_common+0x20>
    2018:	a9 5d       	subi	r26, 0xD9	; 217
    201a:	a1 93       	st	Z+, r26
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	79 f7       	brne	.-34     	; 0x1ffe <__utoa_common+0x4>
    2020:	b1 11       	cpse	r27, r1
    2022:	b1 93       	st	Z+, r27
    2024:	11 92       	st	Z+, r1
    2026:	cb 01       	movw	r24, r22
    2028:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <strrev>

0000202c <fdevopen>:
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	31 f4       	brne	.+12     	; 0x2044 <fdevopen+0x18>
    2038:	61 15       	cp	r22, r1
    203a:	71 05       	cpc	r23, r1
    203c:	19 f4       	brne	.+6      	; 0x2044 <fdevopen+0x18>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	3a c0       	rjmp	.+116    	; 0x20b8 <fdevopen+0x8c>
    2044:	8b 01       	movw	r16, r22
    2046:	ec 01       	movw	r28, r24
    2048:	6e e0       	ldi	r22, 0x0E	; 14
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 58 12 	call	0x24b0	; 0x24b0 <calloc>
    2054:	fc 01       	movw	r30, r24
    2056:	89 2b       	or	r24, r25
    2058:	91 f3       	breq	.-28     	; 0x203e <fdevopen+0x12>
    205a:	80 e8       	ldi	r24, 0x80	; 128
    205c:	83 83       	std	Z+3, r24	; 0x03
    205e:	01 15       	cp	r16, r1
    2060:	11 05       	cpc	r17, r1
    2062:	71 f0       	breq	.+28     	; 0x2080 <fdevopen+0x54>
    2064:	13 87       	std	Z+11, r17	; 0x0b
    2066:	02 87       	std	Z+10, r16	; 0x0a
    2068:	81 e8       	ldi	r24, 0x81	; 129
    206a:	83 83       	std	Z+3, r24	; 0x03
    206c:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <__iob>
    2070:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <__iob+0x1>
    2074:	89 2b       	or	r24, r25
    2076:	21 f4       	brne	.+8      	; 0x2080 <fdevopen+0x54>
    2078:	f0 93 99 04 	sts	0x0499, r31	; 0x800499 <__iob+0x1>
    207c:	e0 93 98 04 	sts	0x0498, r30	; 0x800498 <__iob>
    2080:	20 97       	sbiw	r28, 0x00	; 0
    2082:	c9 f0       	breq	.+50     	; 0x20b6 <fdevopen+0x8a>
    2084:	d1 87       	std	Z+9, r29	; 0x09
    2086:	c0 87       	std	Z+8, r28	; 0x08
    2088:	83 81       	ldd	r24, Z+3	; 0x03
    208a:	82 60       	ori	r24, 0x02	; 2
    208c:	83 83       	std	Z+3, r24	; 0x03
    208e:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    2092:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    2096:	89 2b       	or	r24, r25
    2098:	71 f4       	brne	.+28     	; 0x20b6 <fdevopen+0x8a>
    209a:	f0 93 9b 04 	sts	0x049B, r31	; 0x80049b <__iob+0x3>
    209e:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <__iob+0x2>
    20a2:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <__iob+0x4>
    20a6:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <__iob+0x5>
    20aa:	89 2b       	or	r24, r25
    20ac:	21 f4       	brne	.+8      	; 0x20b6 <fdevopen+0x8a>
    20ae:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <__iob+0x5>
    20b2:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <__iob+0x4>
    20b6:	cf 01       	movw	r24, r30
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	08 95       	ret

000020c2 <printf>:
    20c2:	a0 e0       	ldi	r26, 0x00	; 0
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e6       	ldi	r30, 0x67	; 103
    20c8:	f0 e1       	ldi	r31, 0x10	; 16
    20ca:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__prologue_saves__+0x20>
    20ce:	ae 01       	movw	r20, r28
    20d0:	4b 5f       	subi	r20, 0xFB	; 251
    20d2:	5f 4f       	sbci	r21, 0xFF	; 255
    20d4:	fa 01       	movw	r30, r20
    20d6:	61 91       	ld	r22, Z+
    20d8:	71 91       	ld	r23, Z+
    20da:	af 01       	movw	r20, r30
    20dc:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__iob+0x2>
    20e0:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__iob+0x3>
    20e4:	0e 94 77 10 	call	0x20ee	; 0x20ee <vfprintf>
    20e8:	e2 e0       	ldi	r30, 0x02	; 2
    20ea:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__epilogue_restores__+0x20>

000020ee <vfprintf>:
    20ee:	ab e0       	ldi	r26, 0x0B	; 11
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	ed e7       	ldi	r30, 0x7D	; 125
    20f4:	f0 e1       	ldi	r31, 0x10	; 16
    20f6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__>
    20fa:	6c 01       	movw	r12, r24
    20fc:	7b 01       	movw	r14, r22
    20fe:	8a 01       	movw	r16, r20
    2100:	fc 01       	movw	r30, r24
    2102:	17 82       	std	Z+7, r1	; 0x07
    2104:	16 82       	std	Z+6, r1	; 0x06
    2106:	83 81       	ldd	r24, Z+3	; 0x03
    2108:	81 ff       	sbrs	r24, 1
    210a:	cc c1       	rjmp	.+920    	; 0x24a4 <vfprintf+0x3b6>
    210c:	ce 01       	movw	r24, r28
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	3c 01       	movw	r6, r24
    2112:	f6 01       	movw	r30, r12
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	f7 01       	movw	r30, r14
    2118:	93 fd       	sbrc	r25, 3
    211a:	85 91       	lpm	r24, Z+
    211c:	93 ff       	sbrs	r25, 3
    211e:	81 91       	ld	r24, Z+
    2120:	7f 01       	movw	r14, r30
    2122:	88 23       	and	r24, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <vfprintf+0x3a>
    2126:	ba c1       	rjmp	.+884    	; 0x249c <vfprintf+0x3ae>
    2128:	85 32       	cpi	r24, 0x25	; 37
    212a:	39 f4       	brne	.+14     	; 0x213a <vfprintf+0x4c>
    212c:	93 fd       	sbrc	r25, 3
    212e:	85 91       	lpm	r24, Z+
    2130:	93 ff       	sbrs	r25, 3
    2132:	81 91       	ld	r24, Z+
    2134:	7f 01       	movw	r14, r30
    2136:	85 32       	cpi	r24, 0x25	; 37
    2138:	29 f4       	brne	.+10     	; 0x2144 <vfprintf+0x56>
    213a:	b6 01       	movw	r22, r12
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    2142:	e7 cf       	rjmp	.-50     	; 0x2112 <vfprintf+0x24>
    2144:	91 2c       	mov	r9, r1
    2146:	21 2c       	mov	r2, r1
    2148:	31 2c       	mov	r3, r1
    214a:	ff e1       	ldi	r31, 0x1F	; 31
    214c:	f3 15       	cp	r31, r3
    214e:	d8 f0       	brcs	.+54     	; 0x2186 <vfprintf+0x98>
    2150:	8b 32       	cpi	r24, 0x2B	; 43
    2152:	79 f0       	breq	.+30     	; 0x2172 <vfprintf+0x84>
    2154:	38 f4       	brcc	.+14     	; 0x2164 <vfprintf+0x76>
    2156:	80 32       	cpi	r24, 0x20	; 32
    2158:	79 f0       	breq	.+30     	; 0x2178 <vfprintf+0x8a>
    215a:	83 32       	cpi	r24, 0x23	; 35
    215c:	a1 f4       	brne	.+40     	; 0x2186 <vfprintf+0x98>
    215e:	23 2d       	mov	r18, r3
    2160:	20 61       	ori	r18, 0x10	; 16
    2162:	1d c0       	rjmp	.+58     	; 0x219e <vfprintf+0xb0>
    2164:	8d 32       	cpi	r24, 0x2D	; 45
    2166:	61 f0       	breq	.+24     	; 0x2180 <vfprintf+0x92>
    2168:	80 33       	cpi	r24, 0x30	; 48
    216a:	69 f4       	brne	.+26     	; 0x2186 <vfprintf+0x98>
    216c:	23 2d       	mov	r18, r3
    216e:	21 60       	ori	r18, 0x01	; 1
    2170:	16 c0       	rjmp	.+44     	; 0x219e <vfprintf+0xb0>
    2172:	83 2d       	mov	r24, r3
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	38 2e       	mov	r3, r24
    2178:	e3 2d       	mov	r30, r3
    217a:	e4 60       	ori	r30, 0x04	; 4
    217c:	3e 2e       	mov	r3, r30
    217e:	2a c0       	rjmp	.+84     	; 0x21d4 <vfprintf+0xe6>
    2180:	f3 2d       	mov	r31, r3
    2182:	f8 60       	ori	r31, 0x08	; 8
    2184:	1d c0       	rjmp	.+58     	; 0x21c0 <vfprintf+0xd2>
    2186:	37 fc       	sbrc	r3, 7
    2188:	2d c0       	rjmp	.+90     	; 0x21e4 <vfprintf+0xf6>
    218a:	20 ed       	ldi	r18, 0xD0	; 208
    218c:	28 0f       	add	r18, r24
    218e:	2a 30       	cpi	r18, 0x0A	; 10
    2190:	40 f0       	brcs	.+16     	; 0x21a2 <vfprintf+0xb4>
    2192:	8e 32       	cpi	r24, 0x2E	; 46
    2194:	b9 f4       	brne	.+46     	; 0x21c4 <vfprintf+0xd6>
    2196:	36 fc       	sbrc	r3, 6
    2198:	81 c1       	rjmp	.+770    	; 0x249c <vfprintf+0x3ae>
    219a:	23 2d       	mov	r18, r3
    219c:	20 64       	ori	r18, 0x40	; 64
    219e:	32 2e       	mov	r3, r18
    21a0:	19 c0       	rjmp	.+50     	; 0x21d4 <vfprintf+0xe6>
    21a2:	36 fe       	sbrs	r3, 6
    21a4:	06 c0       	rjmp	.+12     	; 0x21b2 <vfprintf+0xc4>
    21a6:	8a e0       	ldi	r24, 0x0A	; 10
    21a8:	98 9e       	mul	r9, r24
    21aa:	20 0d       	add	r18, r0
    21ac:	11 24       	eor	r1, r1
    21ae:	92 2e       	mov	r9, r18
    21b0:	11 c0       	rjmp	.+34     	; 0x21d4 <vfprintf+0xe6>
    21b2:	ea e0       	ldi	r30, 0x0A	; 10
    21b4:	2e 9e       	mul	r2, r30
    21b6:	20 0d       	add	r18, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	22 2e       	mov	r2, r18
    21bc:	f3 2d       	mov	r31, r3
    21be:	f0 62       	ori	r31, 0x20	; 32
    21c0:	3f 2e       	mov	r3, r31
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <vfprintf+0xe6>
    21c4:	8c 36       	cpi	r24, 0x6C	; 108
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <vfprintf+0xe2>
    21c8:	83 2d       	mov	r24, r3
    21ca:	80 68       	ori	r24, 0x80	; 128
    21cc:	38 2e       	mov	r3, r24
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <vfprintf+0xe6>
    21d0:	88 36       	cpi	r24, 0x68	; 104
    21d2:	41 f4       	brne	.+16     	; 0x21e4 <vfprintf+0xf6>
    21d4:	f7 01       	movw	r30, r14
    21d6:	93 fd       	sbrc	r25, 3
    21d8:	85 91       	lpm	r24, Z+
    21da:	93 ff       	sbrs	r25, 3
    21dc:	81 91       	ld	r24, Z+
    21de:	7f 01       	movw	r14, r30
    21e0:	81 11       	cpse	r24, r1
    21e2:	b3 cf       	rjmp	.-154    	; 0x214a <vfprintf+0x5c>
    21e4:	98 2f       	mov	r25, r24
    21e6:	9f 7d       	andi	r25, 0xDF	; 223
    21e8:	95 54       	subi	r25, 0x45	; 69
    21ea:	93 30       	cpi	r25, 0x03	; 3
    21ec:	28 f4       	brcc	.+10     	; 0x21f8 <vfprintf+0x10a>
    21ee:	0c 5f       	subi	r16, 0xFC	; 252
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	9f e3       	ldi	r25, 0x3F	; 63
    21f4:	99 83       	std	Y+1, r25	; 0x01
    21f6:	0d c0       	rjmp	.+26     	; 0x2212 <vfprintf+0x124>
    21f8:	83 36       	cpi	r24, 0x63	; 99
    21fa:	31 f0       	breq	.+12     	; 0x2208 <vfprintf+0x11a>
    21fc:	83 37       	cpi	r24, 0x73	; 115
    21fe:	71 f0       	breq	.+28     	; 0x221c <vfprintf+0x12e>
    2200:	83 35       	cpi	r24, 0x53	; 83
    2202:	09 f0       	breq	.+2      	; 0x2206 <vfprintf+0x118>
    2204:	59 c0       	rjmp	.+178    	; 0x22b8 <vfprintf+0x1ca>
    2206:	21 c0       	rjmp	.+66     	; 0x224a <vfprintf+0x15c>
    2208:	f8 01       	movw	r30, r16
    220a:	80 81       	ld	r24, Z
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	0e 5f       	subi	r16, 0xFE	; 254
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	88 24       	eor	r8, r8
    2214:	83 94       	inc	r8
    2216:	91 2c       	mov	r9, r1
    2218:	53 01       	movw	r10, r6
    221a:	13 c0       	rjmp	.+38     	; 0x2242 <vfprintf+0x154>
    221c:	28 01       	movw	r4, r16
    221e:	f2 e0       	ldi	r31, 0x02	; 2
    2220:	4f 0e       	add	r4, r31
    2222:	51 1c       	adc	r5, r1
    2224:	f8 01       	movw	r30, r16
    2226:	a0 80       	ld	r10, Z
    2228:	b1 80       	ldd	r11, Z+1	; 0x01
    222a:	36 fe       	sbrs	r3, 6
    222c:	03 c0       	rjmp	.+6      	; 0x2234 <vfprintf+0x146>
    222e:	69 2d       	mov	r22, r9
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <vfprintf+0x14a>
    2234:	6f ef       	ldi	r22, 0xFF	; 255
    2236:	7f ef       	ldi	r23, 0xFF	; 255
    2238:	c5 01       	movw	r24, r10
    223a:	0e 94 a7 13 	call	0x274e	; 0x274e <strnlen>
    223e:	4c 01       	movw	r8, r24
    2240:	82 01       	movw	r16, r4
    2242:	f3 2d       	mov	r31, r3
    2244:	ff 77       	andi	r31, 0x7F	; 127
    2246:	3f 2e       	mov	r3, r31
    2248:	16 c0       	rjmp	.+44     	; 0x2276 <vfprintf+0x188>
    224a:	28 01       	movw	r4, r16
    224c:	22 e0       	ldi	r18, 0x02	; 2
    224e:	42 0e       	add	r4, r18
    2250:	51 1c       	adc	r5, r1
    2252:	f8 01       	movw	r30, r16
    2254:	a0 80       	ld	r10, Z
    2256:	b1 80       	ldd	r11, Z+1	; 0x01
    2258:	36 fe       	sbrs	r3, 6
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <vfprintf+0x174>
    225c:	69 2d       	mov	r22, r9
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <vfprintf+0x178>
    2262:	6f ef       	ldi	r22, 0xFF	; 255
    2264:	7f ef       	ldi	r23, 0xFF	; 255
    2266:	c5 01       	movw	r24, r10
    2268:	0e 94 95 13 	call	0x272a	; 0x272a <strnlen_P>
    226c:	4c 01       	movw	r8, r24
    226e:	f3 2d       	mov	r31, r3
    2270:	f0 68       	ori	r31, 0x80	; 128
    2272:	3f 2e       	mov	r3, r31
    2274:	82 01       	movw	r16, r4
    2276:	33 fc       	sbrc	r3, 3
    2278:	1b c0       	rjmp	.+54     	; 0x22b0 <vfprintf+0x1c2>
    227a:	82 2d       	mov	r24, r2
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	88 16       	cp	r8, r24
    2280:	99 06       	cpc	r9, r25
    2282:	b0 f4       	brcc	.+44     	; 0x22b0 <vfprintf+0x1c2>
    2284:	b6 01       	movw	r22, r12
    2286:	80 e2       	ldi	r24, 0x20	; 32
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    228e:	2a 94       	dec	r2
    2290:	f4 cf       	rjmp	.-24     	; 0x227a <vfprintf+0x18c>
    2292:	f5 01       	movw	r30, r10
    2294:	37 fc       	sbrc	r3, 7
    2296:	85 91       	lpm	r24, Z+
    2298:	37 fe       	sbrs	r3, 7
    229a:	81 91       	ld	r24, Z+
    229c:	5f 01       	movw	r10, r30
    229e:	b6 01       	movw	r22, r12
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    22a6:	21 10       	cpse	r2, r1
    22a8:	2a 94       	dec	r2
    22aa:	21 e0       	ldi	r18, 0x01	; 1
    22ac:	82 1a       	sub	r8, r18
    22ae:	91 08       	sbc	r9, r1
    22b0:	81 14       	cp	r8, r1
    22b2:	91 04       	cpc	r9, r1
    22b4:	71 f7       	brne	.-36     	; 0x2292 <vfprintf+0x1a4>
    22b6:	e8 c0       	rjmp	.+464    	; 0x2488 <vfprintf+0x39a>
    22b8:	84 36       	cpi	r24, 0x64	; 100
    22ba:	11 f0       	breq	.+4      	; 0x22c0 <vfprintf+0x1d2>
    22bc:	89 36       	cpi	r24, 0x69	; 105
    22be:	41 f5       	brne	.+80     	; 0x2310 <vfprintf+0x222>
    22c0:	f8 01       	movw	r30, r16
    22c2:	37 fe       	sbrs	r3, 7
    22c4:	07 c0       	rjmp	.+14     	; 0x22d4 <vfprintf+0x1e6>
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	0c 5f       	subi	r16, 0xFC	; 252
    22d0:	1f 4f       	sbci	r17, 0xFF	; 255
    22d2:	08 c0       	rjmp	.+16     	; 0x22e4 <vfprintf+0x1f6>
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	07 2e       	mov	r0, r23
    22da:	00 0c       	add	r0, r0
    22dc:	88 0b       	sbc	r24, r24
    22de:	99 0b       	sbc	r25, r25
    22e0:	0e 5f       	subi	r16, 0xFE	; 254
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	f3 2d       	mov	r31, r3
    22e6:	ff 76       	andi	r31, 0x6F	; 111
    22e8:	3f 2e       	mov	r3, r31
    22ea:	97 ff       	sbrs	r25, 7
    22ec:	09 c0       	rjmp	.+18     	; 0x2300 <vfprintf+0x212>
    22ee:	90 95       	com	r25
    22f0:	80 95       	com	r24
    22f2:	70 95       	com	r23
    22f4:	61 95       	neg	r22
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	8f 4f       	sbci	r24, 0xFF	; 255
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	f0 68       	ori	r31, 0x80	; 128
    22fe:	3f 2e       	mov	r3, r31
    2300:	2a e0       	ldi	r18, 0x0A	; 10
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	a3 01       	movw	r20, r6
    2306:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__ultoa_invert>
    230a:	88 2e       	mov	r8, r24
    230c:	86 18       	sub	r8, r6
    230e:	45 c0       	rjmp	.+138    	; 0x239a <vfprintf+0x2ac>
    2310:	85 37       	cpi	r24, 0x75	; 117
    2312:	31 f4       	brne	.+12     	; 0x2320 <vfprintf+0x232>
    2314:	23 2d       	mov	r18, r3
    2316:	2f 7e       	andi	r18, 0xEF	; 239
    2318:	b2 2e       	mov	r11, r18
    231a:	2a e0       	ldi	r18, 0x0A	; 10
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	25 c0       	rjmp	.+74     	; 0x236a <vfprintf+0x27c>
    2320:	93 2d       	mov	r25, r3
    2322:	99 7f       	andi	r25, 0xF9	; 249
    2324:	b9 2e       	mov	r11, r25
    2326:	8f 36       	cpi	r24, 0x6F	; 111
    2328:	c1 f0       	breq	.+48     	; 0x235a <vfprintf+0x26c>
    232a:	18 f4       	brcc	.+6      	; 0x2332 <vfprintf+0x244>
    232c:	88 35       	cpi	r24, 0x58	; 88
    232e:	79 f0       	breq	.+30     	; 0x234e <vfprintf+0x260>
    2330:	b5 c0       	rjmp	.+362    	; 0x249c <vfprintf+0x3ae>
    2332:	80 37       	cpi	r24, 0x70	; 112
    2334:	19 f0       	breq	.+6      	; 0x233c <vfprintf+0x24e>
    2336:	88 37       	cpi	r24, 0x78	; 120
    2338:	21 f0       	breq	.+8      	; 0x2342 <vfprintf+0x254>
    233a:	b0 c0       	rjmp	.+352    	; 0x249c <vfprintf+0x3ae>
    233c:	e9 2f       	mov	r30, r25
    233e:	e0 61       	ori	r30, 0x10	; 16
    2340:	be 2e       	mov	r11, r30
    2342:	b4 fe       	sbrs	r11, 4
    2344:	0d c0       	rjmp	.+26     	; 0x2360 <vfprintf+0x272>
    2346:	fb 2d       	mov	r31, r11
    2348:	f4 60       	ori	r31, 0x04	; 4
    234a:	bf 2e       	mov	r11, r31
    234c:	09 c0       	rjmp	.+18     	; 0x2360 <vfprintf+0x272>
    234e:	34 fe       	sbrs	r3, 4
    2350:	0a c0       	rjmp	.+20     	; 0x2366 <vfprintf+0x278>
    2352:	29 2f       	mov	r18, r25
    2354:	26 60       	ori	r18, 0x06	; 6
    2356:	b2 2e       	mov	r11, r18
    2358:	06 c0       	rjmp	.+12     	; 0x2366 <vfprintf+0x278>
    235a:	28 e0       	ldi	r18, 0x08	; 8
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	05 c0       	rjmp	.+10     	; 0x236a <vfprintf+0x27c>
    2360:	20 e1       	ldi	r18, 0x10	; 16
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	02 c0       	rjmp	.+4      	; 0x236a <vfprintf+0x27c>
    2366:	20 e1       	ldi	r18, 0x10	; 16
    2368:	32 e0       	ldi	r19, 0x02	; 2
    236a:	f8 01       	movw	r30, r16
    236c:	b7 fe       	sbrs	r11, 7
    236e:	07 c0       	rjmp	.+14     	; 0x237e <vfprintf+0x290>
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	0c 5f       	subi	r16, 0xFC	; 252
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	06 c0       	rjmp	.+12     	; 0x238a <vfprintf+0x29c>
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 5f       	subi	r16, 0xFE	; 254
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	a3 01       	movw	r20, r6
    238c:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__ultoa_invert>
    2390:	88 2e       	mov	r8, r24
    2392:	86 18       	sub	r8, r6
    2394:	fb 2d       	mov	r31, r11
    2396:	ff 77       	andi	r31, 0x7F	; 127
    2398:	3f 2e       	mov	r3, r31
    239a:	36 fe       	sbrs	r3, 6
    239c:	0d c0       	rjmp	.+26     	; 0x23b8 <vfprintf+0x2ca>
    239e:	23 2d       	mov	r18, r3
    23a0:	2e 7f       	andi	r18, 0xFE	; 254
    23a2:	a2 2e       	mov	r10, r18
    23a4:	89 14       	cp	r8, r9
    23a6:	58 f4       	brcc	.+22     	; 0x23be <vfprintf+0x2d0>
    23a8:	34 fe       	sbrs	r3, 4
    23aa:	0b c0       	rjmp	.+22     	; 0x23c2 <vfprintf+0x2d4>
    23ac:	32 fc       	sbrc	r3, 2
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <vfprintf+0x2d4>
    23b0:	83 2d       	mov	r24, r3
    23b2:	8e 7e       	andi	r24, 0xEE	; 238
    23b4:	a8 2e       	mov	r10, r24
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <vfprintf+0x2d4>
    23b8:	b8 2c       	mov	r11, r8
    23ba:	a3 2c       	mov	r10, r3
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <vfprintf+0x2d6>
    23be:	b8 2c       	mov	r11, r8
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <vfprintf+0x2d6>
    23c2:	b9 2c       	mov	r11, r9
    23c4:	a4 fe       	sbrs	r10, 4
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <vfprintf+0x2f8>
    23c8:	fe 01       	movw	r30, r28
    23ca:	e8 0d       	add	r30, r8
    23cc:	f1 1d       	adc	r31, r1
    23ce:	80 81       	ld	r24, Z
    23d0:	80 33       	cpi	r24, 0x30	; 48
    23d2:	21 f4       	brne	.+8      	; 0x23dc <vfprintf+0x2ee>
    23d4:	9a 2d       	mov	r25, r10
    23d6:	99 7e       	andi	r25, 0xE9	; 233
    23d8:	a9 2e       	mov	r10, r25
    23da:	09 c0       	rjmp	.+18     	; 0x23ee <vfprintf+0x300>
    23dc:	a2 fe       	sbrs	r10, 2
    23de:	06 c0       	rjmp	.+12     	; 0x23ec <vfprintf+0x2fe>
    23e0:	b3 94       	inc	r11
    23e2:	b3 94       	inc	r11
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <vfprintf+0x300>
    23e6:	8a 2d       	mov	r24, r10
    23e8:	86 78       	andi	r24, 0x86	; 134
    23ea:	09 f0       	breq	.+2      	; 0x23ee <vfprintf+0x300>
    23ec:	b3 94       	inc	r11
    23ee:	a3 fc       	sbrc	r10, 3
    23f0:	11 c0       	rjmp	.+34     	; 0x2414 <vfprintf+0x326>
    23f2:	a0 fe       	sbrs	r10, 0
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <vfprintf+0x314>
    23f6:	b2 14       	cp	r11, r2
    23f8:	88 f4       	brcc	.+34     	; 0x241c <vfprintf+0x32e>
    23fa:	28 0c       	add	r2, r8
    23fc:	92 2c       	mov	r9, r2
    23fe:	9b 18       	sub	r9, r11
    2400:	0e c0       	rjmp	.+28     	; 0x241e <vfprintf+0x330>
    2402:	b2 14       	cp	r11, r2
    2404:	60 f4       	brcc	.+24     	; 0x241e <vfprintf+0x330>
    2406:	b6 01       	movw	r22, r12
    2408:	80 e2       	ldi	r24, 0x20	; 32
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    2410:	b3 94       	inc	r11
    2412:	f7 cf       	rjmp	.-18     	; 0x2402 <vfprintf+0x314>
    2414:	b2 14       	cp	r11, r2
    2416:	18 f4       	brcc	.+6      	; 0x241e <vfprintf+0x330>
    2418:	2b 18       	sub	r2, r11
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <vfprintf+0x332>
    241c:	98 2c       	mov	r9, r8
    241e:	21 2c       	mov	r2, r1
    2420:	a4 fe       	sbrs	r10, 4
    2422:	10 c0       	rjmp	.+32     	; 0x2444 <vfprintf+0x356>
    2424:	b6 01       	movw	r22, r12
    2426:	80 e3       	ldi	r24, 0x30	; 48
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    242e:	a2 fe       	sbrs	r10, 2
    2430:	17 c0       	rjmp	.+46     	; 0x2460 <vfprintf+0x372>
    2432:	a1 fc       	sbrc	r10, 1
    2434:	03 c0       	rjmp	.+6      	; 0x243c <vfprintf+0x34e>
    2436:	88 e7       	ldi	r24, 0x78	; 120
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <vfprintf+0x352>
    243c:	88 e5       	ldi	r24, 0x58	; 88
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	b6 01       	movw	r22, r12
    2442:	0c c0       	rjmp	.+24     	; 0x245c <vfprintf+0x36e>
    2444:	8a 2d       	mov	r24, r10
    2446:	86 78       	andi	r24, 0x86	; 134
    2448:	59 f0       	breq	.+22     	; 0x2460 <vfprintf+0x372>
    244a:	a1 fe       	sbrs	r10, 1
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <vfprintf+0x364>
    244e:	8b e2       	ldi	r24, 0x2B	; 43
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <vfprintf+0x366>
    2452:	80 e2       	ldi	r24, 0x20	; 32
    2454:	a7 fc       	sbrc	r10, 7
    2456:	8d e2       	ldi	r24, 0x2D	; 45
    2458:	b6 01       	movw	r22, r12
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    2460:	89 14       	cp	r8, r9
    2462:	38 f4       	brcc	.+14     	; 0x2472 <vfprintf+0x384>
    2464:	b6 01       	movw	r22, r12
    2466:	80 e3       	ldi	r24, 0x30	; 48
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    246e:	9a 94       	dec	r9
    2470:	f7 cf       	rjmp	.-18     	; 0x2460 <vfprintf+0x372>
    2472:	8a 94       	dec	r8
    2474:	f3 01       	movw	r30, r6
    2476:	e8 0d       	add	r30, r8
    2478:	f1 1d       	adc	r31, r1
    247a:	80 81       	ld	r24, Z
    247c:	b6 01       	movw	r22, r12
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    2484:	81 10       	cpse	r8, r1
    2486:	f5 cf       	rjmp	.-22     	; 0x2472 <vfprintf+0x384>
    2488:	22 20       	and	r2, r2
    248a:	09 f4       	brne	.+2      	; 0x248e <vfprintf+0x3a0>
    248c:	42 ce       	rjmp	.-892    	; 0x2112 <vfprintf+0x24>
    248e:	b6 01       	movw	r22, r12
    2490:	80 e2       	ldi	r24, 0x20	; 32
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0e 94 c2 13 	call	0x2784	; 0x2784 <fputc>
    2498:	2a 94       	dec	r2
    249a:	f6 cf       	rjmp	.-20     	; 0x2488 <vfprintf+0x39a>
    249c:	f6 01       	movw	r30, r12
    249e:	86 81       	ldd	r24, Z+6	; 0x06
    24a0:	97 81       	ldd	r25, Z+7	; 0x07
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <vfprintf+0x3ba>
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	9f ef       	ldi	r25, 0xFF	; 255
    24a8:	2b 96       	adiw	r28, 0x0b	; 11
    24aa:	e2 e1       	ldi	r30, 0x12	; 18
    24ac:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__>

000024b0 <calloc>:
    24b0:	0f 93       	push	r16
    24b2:	1f 93       	push	r17
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	86 9f       	mul	r24, r22
    24ba:	80 01       	movw	r16, r0
    24bc:	87 9f       	mul	r24, r23
    24be:	10 0d       	add	r17, r0
    24c0:	96 9f       	mul	r25, r22
    24c2:	10 0d       	add	r17, r0
    24c4:	11 24       	eor	r1, r1
    24c6:	c8 01       	movw	r24, r16
    24c8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <malloc>
    24cc:	ec 01       	movw	r28, r24
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	29 f0       	breq	.+10     	; 0x24dc <calloc+0x2c>
    24d2:	a8 01       	movw	r20, r16
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	0e 94 a0 13 	call	0x2740	; 0x2740 <memset>
    24dc:	ce 01       	movw	r24, r28
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	08 95       	ret

000024e8 <malloc>:
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	91 05       	cpc	r25, r1
    24f4:	10 f4       	brcc	.+4      	; 0x24fa <malloc+0x12>
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <__flp>
    24fe:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <__flp+0x1>
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	a0 e0       	ldi	r26, 0x00	; 0
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	30 97       	sbiw	r30, 0x00	; 0
    250c:	19 f1       	breq	.+70     	; 0x2554 <malloc+0x6c>
    250e:	40 81       	ld	r20, Z
    2510:	51 81       	ldd	r21, Z+1	; 0x01
    2512:	02 81       	ldd	r16, Z+2	; 0x02
    2514:	13 81       	ldd	r17, Z+3	; 0x03
    2516:	48 17       	cp	r20, r24
    2518:	59 07       	cpc	r21, r25
    251a:	c8 f0       	brcs	.+50     	; 0x254e <malloc+0x66>
    251c:	84 17       	cp	r24, r20
    251e:	95 07       	cpc	r25, r21
    2520:	69 f4       	brne	.+26     	; 0x253c <malloc+0x54>
    2522:	10 97       	sbiw	r26, 0x00	; 0
    2524:	31 f0       	breq	.+12     	; 0x2532 <malloc+0x4a>
    2526:	12 96       	adiw	r26, 0x02	; 2
    2528:	0c 93       	st	X, r16
    252a:	12 97       	sbiw	r26, 0x02	; 2
    252c:	13 96       	adiw	r26, 0x03	; 3
    252e:	1c 93       	st	X, r17
    2530:	27 c0       	rjmp	.+78     	; 0x2580 <malloc+0x98>
    2532:	00 93 a0 04 	sts	0x04A0, r16	; 0x8004a0 <__flp>
    2536:	10 93 a1 04 	sts	0x04A1, r17	; 0x8004a1 <__flp+0x1>
    253a:	22 c0       	rjmp	.+68     	; 0x2580 <malloc+0x98>
    253c:	21 15       	cp	r18, r1
    253e:	31 05       	cpc	r19, r1
    2540:	19 f0       	breq	.+6      	; 0x2548 <malloc+0x60>
    2542:	42 17       	cp	r20, r18
    2544:	53 07       	cpc	r21, r19
    2546:	18 f4       	brcc	.+6      	; 0x254e <malloc+0x66>
    2548:	9a 01       	movw	r18, r20
    254a:	bd 01       	movw	r22, r26
    254c:	ef 01       	movw	r28, r30
    254e:	df 01       	movw	r26, r30
    2550:	f8 01       	movw	r30, r16
    2552:	db cf       	rjmp	.-74     	; 0x250a <malloc+0x22>
    2554:	21 15       	cp	r18, r1
    2556:	31 05       	cpc	r19, r1
    2558:	f9 f0       	breq	.+62     	; 0x2598 <malloc+0xb0>
    255a:	28 1b       	sub	r18, r24
    255c:	39 0b       	sbc	r19, r25
    255e:	24 30       	cpi	r18, 0x04	; 4
    2560:	31 05       	cpc	r19, r1
    2562:	80 f4       	brcc	.+32     	; 0x2584 <malloc+0x9c>
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	61 15       	cp	r22, r1
    256a:	71 05       	cpc	r23, r1
    256c:	21 f0       	breq	.+8      	; 0x2576 <malloc+0x8e>
    256e:	fb 01       	movw	r30, r22
    2570:	93 83       	std	Z+3, r25	; 0x03
    2572:	82 83       	std	Z+2, r24	; 0x02
    2574:	04 c0       	rjmp	.+8      	; 0x257e <malloc+0x96>
    2576:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__flp+0x1>
    257a:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__flp>
    257e:	fe 01       	movw	r30, r28
    2580:	32 96       	adiw	r30, 0x02	; 2
    2582:	44 c0       	rjmp	.+136    	; 0x260c <malloc+0x124>
    2584:	fe 01       	movw	r30, r28
    2586:	e2 0f       	add	r30, r18
    2588:	f3 1f       	adc	r31, r19
    258a:	81 93       	st	Z+, r24
    258c:	91 93       	st	Z+, r25
    258e:	22 50       	subi	r18, 0x02	; 2
    2590:	31 09       	sbc	r19, r1
    2592:	39 83       	std	Y+1, r19	; 0x01
    2594:	28 83       	st	Y, r18
    2596:	3a c0       	rjmp	.+116    	; 0x260c <malloc+0x124>
    2598:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    259c:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    25a0:	23 2b       	or	r18, r19
    25a2:	41 f4       	brne	.+16     	; 0x25b4 <malloc+0xcc>
    25a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    25ac:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <__brkval+0x1>
    25b0:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <__brkval>
    25b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    25b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    25bc:	21 15       	cp	r18, r1
    25be:	31 05       	cpc	r19, r1
    25c0:	41 f4       	brne	.+16     	; 0x25d2 <malloc+0xea>
    25c2:	2d b7       	in	r18, 0x3d	; 61
    25c4:	3e b7       	in	r19, 0x3e	; 62
    25c6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    25ca:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    25ce:	24 1b       	sub	r18, r20
    25d0:	35 0b       	sbc	r19, r21
    25d2:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <__brkval>
    25d6:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <__brkval+0x1>
    25da:	e2 17       	cp	r30, r18
    25dc:	f3 07       	cpc	r31, r19
    25de:	a0 f4       	brcc	.+40     	; 0x2608 <malloc+0x120>
    25e0:	2e 1b       	sub	r18, r30
    25e2:	3f 0b       	sbc	r19, r31
    25e4:	28 17       	cp	r18, r24
    25e6:	39 07       	cpc	r19, r25
    25e8:	78 f0       	brcs	.+30     	; 0x2608 <malloc+0x120>
    25ea:	ac 01       	movw	r20, r24
    25ec:	4e 5f       	subi	r20, 0xFE	; 254
    25ee:	5f 4f       	sbci	r21, 0xFF	; 255
    25f0:	24 17       	cp	r18, r20
    25f2:	35 07       	cpc	r19, r21
    25f4:	48 f0       	brcs	.+18     	; 0x2608 <malloc+0x120>
    25f6:	4e 0f       	add	r20, r30
    25f8:	5f 1f       	adc	r21, r31
    25fa:	50 93 9f 04 	sts	0x049F, r21	; 0x80049f <__brkval+0x1>
    25fe:	40 93 9e 04 	sts	0x049E, r20	; 0x80049e <__brkval>
    2602:	81 93       	st	Z+, r24
    2604:	91 93       	st	Z+, r25
    2606:	02 c0       	rjmp	.+4      	; 0x260c <malloc+0x124>
    2608:	e0 e0       	ldi	r30, 0x00	; 0
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	cf 01       	movw	r24, r30
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	08 95       	ret

00002618 <free>:
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	09 f4       	brne	.+2      	; 0x2622 <free+0xa>
    2620:	81 c0       	rjmp	.+258    	; 0x2724 <free+0x10c>
    2622:	fc 01       	movw	r30, r24
    2624:	32 97       	sbiw	r30, 0x02	; 2
    2626:	13 82       	std	Z+3, r1	; 0x03
    2628:	12 82       	std	Z+2, r1	; 0x02
    262a:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <__flp>
    262e:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <__flp+0x1>
    2632:	10 97       	sbiw	r26, 0x00	; 0
    2634:	81 f4       	brne	.+32     	; 0x2656 <free+0x3e>
    2636:	20 81       	ld	r18, Z
    2638:	31 81       	ldd	r19, Z+1	; 0x01
    263a:	82 0f       	add	r24, r18
    263c:	93 1f       	adc	r25, r19
    263e:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    2642:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    2646:	28 17       	cp	r18, r24
    2648:	39 07       	cpc	r19, r25
    264a:	51 f5       	brne	.+84     	; 0x26a0 <free+0x88>
    264c:	f0 93 9f 04 	sts	0x049F, r31	; 0x80049f <__brkval+0x1>
    2650:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <__brkval>
    2654:	67 c0       	rjmp	.+206    	; 0x2724 <free+0x10c>
    2656:	ed 01       	movw	r28, r26
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	ce 17       	cp	r28, r30
    265e:	df 07       	cpc	r29, r31
    2660:	40 f4       	brcc	.+16     	; 0x2672 <free+0x5a>
    2662:	4a 81       	ldd	r20, Y+2	; 0x02
    2664:	5b 81       	ldd	r21, Y+3	; 0x03
    2666:	9e 01       	movw	r18, r28
    2668:	41 15       	cp	r20, r1
    266a:	51 05       	cpc	r21, r1
    266c:	f1 f0       	breq	.+60     	; 0x26aa <free+0x92>
    266e:	ea 01       	movw	r28, r20
    2670:	f5 cf       	rjmp	.-22     	; 0x265c <free+0x44>
    2672:	d3 83       	std	Z+3, r29	; 0x03
    2674:	c2 83       	std	Z+2, r28	; 0x02
    2676:	40 81       	ld	r20, Z
    2678:	51 81       	ldd	r21, Z+1	; 0x01
    267a:	84 0f       	add	r24, r20
    267c:	95 1f       	adc	r25, r21
    267e:	c8 17       	cp	r28, r24
    2680:	d9 07       	cpc	r29, r25
    2682:	59 f4       	brne	.+22     	; 0x269a <free+0x82>
    2684:	88 81       	ld	r24, Y
    2686:	99 81       	ldd	r25, Y+1	; 0x01
    2688:	84 0f       	add	r24, r20
    268a:	95 1f       	adc	r25, r21
    268c:	02 96       	adiw	r24, 0x02	; 2
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	9b 81       	ldd	r25, Y+3	; 0x03
    2696:	93 83       	std	Z+3, r25	; 0x03
    2698:	82 83       	std	Z+2, r24	; 0x02
    269a:	21 15       	cp	r18, r1
    269c:	31 05       	cpc	r19, r1
    269e:	29 f4       	brne	.+10     	; 0x26aa <free+0x92>
    26a0:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <__flp+0x1>
    26a4:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <__flp>
    26a8:	3d c0       	rjmp	.+122    	; 0x2724 <free+0x10c>
    26aa:	e9 01       	movw	r28, r18
    26ac:	fb 83       	std	Y+3, r31	; 0x03
    26ae:	ea 83       	std	Y+2, r30	; 0x02
    26b0:	49 91       	ld	r20, Y+
    26b2:	59 91       	ld	r21, Y+
    26b4:	c4 0f       	add	r28, r20
    26b6:	d5 1f       	adc	r29, r21
    26b8:	ec 17       	cp	r30, r28
    26ba:	fd 07       	cpc	r31, r29
    26bc:	61 f4       	brne	.+24     	; 0x26d6 <free+0xbe>
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	84 0f       	add	r24, r20
    26c4:	95 1f       	adc	r25, r21
    26c6:	02 96       	adiw	r24, 0x02	; 2
    26c8:	e9 01       	movw	r28, r18
    26ca:	99 83       	std	Y+1, r25	; 0x01
    26cc:	88 83       	st	Y, r24
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	9b 83       	std	Y+3, r25	; 0x03
    26d4:	8a 83       	std	Y+2, r24	; 0x02
    26d6:	e0 e0       	ldi	r30, 0x00	; 0
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	12 96       	adiw	r26, 0x02	; 2
    26dc:	8d 91       	ld	r24, X+
    26de:	9c 91       	ld	r25, X
    26e0:	13 97       	sbiw	r26, 0x03	; 3
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	19 f0       	breq	.+6      	; 0x26ec <free+0xd4>
    26e6:	fd 01       	movw	r30, r26
    26e8:	dc 01       	movw	r26, r24
    26ea:	f7 cf       	rjmp	.-18     	; 0x26da <free+0xc2>
    26ec:	8d 91       	ld	r24, X+
    26ee:	9c 91       	ld	r25, X
    26f0:	11 97       	sbiw	r26, 0x01	; 1
    26f2:	9d 01       	movw	r18, r26
    26f4:	2e 5f       	subi	r18, 0xFE	; 254
    26f6:	3f 4f       	sbci	r19, 0xFF	; 255
    26f8:	82 0f       	add	r24, r18
    26fa:	93 1f       	adc	r25, r19
    26fc:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    2700:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    2704:	28 17       	cp	r18, r24
    2706:	39 07       	cpc	r19, r25
    2708:	69 f4       	brne	.+26     	; 0x2724 <free+0x10c>
    270a:	30 97       	sbiw	r30, 0x00	; 0
    270c:	29 f4       	brne	.+10     	; 0x2718 <free+0x100>
    270e:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <__flp+0x1>
    2712:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__flp>
    2716:	02 c0       	rjmp	.+4      	; 0x271c <free+0x104>
    2718:	13 82       	std	Z+3, r1	; 0x03
    271a:	12 82       	std	Z+2, r1	; 0x02
    271c:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <__brkval+0x1>
    2720:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <__brkval>
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <strnlen_P>:
    272a:	fc 01       	movw	r30, r24
    272c:	05 90       	lpm	r0, Z+
    272e:	61 50       	subi	r22, 0x01	; 1
    2730:	70 40       	sbci	r23, 0x00	; 0
    2732:	01 10       	cpse	r0, r1
    2734:	d8 f7       	brcc	.-10     	; 0x272c <strnlen_P+0x2>
    2736:	80 95       	com	r24
    2738:	90 95       	com	r25
    273a:	8e 0f       	add	r24, r30
    273c:	9f 1f       	adc	r25, r31
    273e:	08 95       	ret

00002740 <memset>:
    2740:	dc 01       	movw	r26, r24
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <memset+0x6>
    2744:	6d 93       	st	X+, r22
    2746:	41 50       	subi	r20, 0x01	; 1
    2748:	50 40       	sbci	r21, 0x00	; 0
    274a:	e0 f7       	brcc	.-8      	; 0x2744 <memset+0x4>
    274c:	08 95       	ret

0000274e <strnlen>:
    274e:	fc 01       	movw	r30, r24
    2750:	61 50       	subi	r22, 0x01	; 1
    2752:	70 40       	sbci	r23, 0x00	; 0
    2754:	01 90       	ld	r0, Z+
    2756:	01 10       	cpse	r0, r1
    2758:	d8 f7       	brcc	.-10     	; 0x2750 <strnlen+0x2>
    275a:	80 95       	com	r24
    275c:	90 95       	com	r25
    275e:	8e 0f       	add	r24, r30
    2760:	9f 1f       	adc	r25, r31
    2762:	08 95       	ret

00002764 <strrev>:
    2764:	dc 01       	movw	r26, r24
    2766:	fc 01       	movw	r30, r24
    2768:	67 2f       	mov	r22, r23
    276a:	71 91       	ld	r23, Z+
    276c:	77 23       	and	r23, r23
    276e:	e1 f7       	brne	.-8      	; 0x2768 <strrev+0x4>
    2770:	32 97       	sbiw	r30, 0x02	; 2
    2772:	04 c0       	rjmp	.+8      	; 0x277c <strrev+0x18>
    2774:	7c 91       	ld	r23, X
    2776:	6d 93       	st	X+, r22
    2778:	70 83       	st	Z, r23
    277a:	62 91       	ld	r22, -Z
    277c:	ae 17       	cp	r26, r30
    277e:	bf 07       	cpc	r27, r31
    2780:	c8 f3       	brcs	.-14     	; 0x2774 <strrev+0x10>
    2782:	08 95       	ret

00002784 <fputc>:
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	fb 01       	movw	r30, r22
    278e:	23 81       	ldd	r18, Z+3	; 0x03
    2790:	21 fd       	sbrc	r18, 1
    2792:	03 c0       	rjmp	.+6      	; 0x279a <fputc+0x16>
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	9f ef       	ldi	r25, 0xFF	; 255
    2798:	2c c0       	rjmp	.+88     	; 0x27f2 <fputc+0x6e>
    279a:	22 ff       	sbrs	r18, 2
    279c:	16 c0       	rjmp	.+44     	; 0x27ca <fputc+0x46>
    279e:	46 81       	ldd	r20, Z+6	; 0x06
    27a0:	57 81       	ldd	r21, Z+7	; 0x07
    27a2:	24 81       	ldd	r18, Z+4	; 0x04
    27a4:	35 81       	ldd	r19, Z+5	; 0x05
    27a6:	42 17       	cp	r20, r18
    27a8:	53 07       	cpc	r21, r19
    27aa:	44 f4       	brge	.+16     	; 0x27bc <fputc+0x38>
    27ac:	a0 81       	ld	r26, Z
    27ae:	b1 81       	ldd	r27, Z+1	; 0x01
    27b0:	9d 01       	movw	r18, r26
    27b2:	2f 5f       	subi	r18, 0xFF	; 255
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	31 83       	std	Z+1, r19	; 0x01
    27b8:	20 83       	st	Z, r18
    27ba:	8c 93       	st	X, r24
    27bc:	26 81       	ldd	r18, Z+6	; 0x06
    27be:	37 81       	ldd	r19, Z+7	; 0x07
    27c0:	2f 5f       	subi	r18, 0xFF	; 255
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	37 83       	std	Z+7, r19	; 0x07
    27c6:	26 83       	std	Z+6, r18	; 0x06
    27c8:	14 c0       	rjmp	.+40     	; 0x27f2 <fputc+0x6e>
    27ca:	8b 01       	movw	r16, r22
    27cc:	ec 01       	movw	r28, r24
    27ce:	fb 01       	movw	r30, r22
    27d0:	00 84       	ldd	r0, Z+8	; 0x08
    27d2:	f1 85       	ldd	r31, Z+9	; 0x09
    27d4:	e0 2d       	mov	r30, r0
    27d6:	09 95       	icall
    27d8:	89 2b       	or	r24, r25
    27da:	e1 f6       	brne	.-72     	; 0x2794 <fputc+0x10>
    27dc:	d8 01       	movw	r26, r16
    27de:	16 96       	adiw	r26, 0x06	; 6
    27e0:	8d 91       	ld	r24, X+
    27e2:	9c 91       	ld	r25, X
    27e4:	17 97       	sbiw	r26, 0x07	; 7
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	17 96       	adiw	r26, 0x07	; 7
    27ea:	9c 93       	st	X, r25
    27ec:	8e 93       	st	-X, r24
    27ee:	16 97       	sbiw	r26, 0x06	; 6
    27f0:	ce 01       	movw	r24, r28
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	08 95       	ret

000027fc <__ultoa_invert>:
    27fc:	fa 01       	movw	r30, r20
    27fe:	aa 27       	eor	r26, r26
    2800:	28 30       	cpi	r18, 0x08	; 8
    2802:	51 f1       	breq	.+84     	; 0x2858 <__ultoa_invert+0x5c>
    2804:	20 31       	cpi	r18, 0x10	; 16
    2806:	81 f1       	breq	.+96     	; 0x2868 <__ultoa_invert+0x6c>
    2808:	e8 94       	clt
    280a:	6f 93       	push	r22
    280c:	6e 7f       	andi	r22, 0xFE	; 254
    280e:	6e 5f       	subi	r22, 0xFE	; 254
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	8f 4f       	sbci	r24, 0xFF	; 255
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	af 4f       	sbci	r26, 0xFF	; 255
    2818:	b1 e0       	ldi	r27, 0x01	; 1
    281a:	3e d0       	rcall	.+124    	; 0x2898 <__ultoa_invert+0x9c>
    281c:	b4 e0       	ldi	r27, 0x04	; 4
    281e:	3c d0       	rcall	.+120    	; 0x2898 <__ultoa_invert+0x9c>
    2820:	67 0f       	add	r22, r23
    2822:	78 1f       	adc	r23, r24
    2824:	89 1f       	adc	r24, r25
    2826:	9a 1f       	adc	r25, r26
    2828:	a1 1d       	adc	r26, r1
    282a:	68 0f       	add	r22, r24
    282c:	79 1f       	adc	r23, r25
    282e:	8a 1f       	adc	r24, r26
    2830:	91 1d       	adc	r25, r1
    2832:	a1 1d       	adc	r26, r1
    2834:	6a 0f       	add	r22, r26
    2836:	71 1d       	adc	r23, r1
    2838:	81 1d       	adc	r24, r1
    283a:	91 1d       	adc	r25, r1
    283c:	a1 1d       	adc	r26, r1
    283e:	20 d0       	rcall	.+64     	; 0x2880 <__ultoa_invert+0x84>
    2840:	09 f4       	brne	.+2      	; 0x2844 <__ultoa_invert+0x48>
    2842:	68 94       	set
    2844:	3f 91       	pop	r19
    2846:	2a e0       	ldi	r18, 0x0A	; 10
    2848:	26 9f       	mul	r18, r22
    284a:	11 24       	eor	r1, r1
    284c:	30 19       	sub	r19, r0
    284e:	30 5d       	subi	r19, 0xD0	; 208
    2850:	31 93       	st	Z+, r19
    2852:	de f6       	brtc	.-74     	; 0x280a <__ultoa_invert+0xe>
    2854:	cf 01       	movw	r24, r30
    2856:	08 95       	ret
    2858:	46 2f       	mov	r20, r22
    285a:	47 70       	andi	r20, 0x07	; 7
    285c:	40 5d       	subi	r20, 0xD0	; 208
    285e:	41 93       	st	Z+, r20
    2860:	b3 e0       	ldi	r27, 0x03	; 3
    2862:	0f d0       	rcall	.+30     	; 0x2882 <__ultoa_invert+0x86>
    2864:	c9 f7       	brne	.-14     	; 0x2858 <__ultoa_invert+0x5c>
    2866:	f6 cf       	rjmp	.-20     	; 0x2854 <__ultoa_invert+0x58>
    2868:	46 2f       	mov	r20, r22
    286a:	4f 70       	andi	r20, 0x0F	; 15
    286c:	40 5d       	subi	r20, 0xD0	; 208
    286e:	4a 33       	cpi	r20, 0x3A	; 58
    2870:	18 f0       	brcs	.+6      	; 0x2878 <__ultoa_invert+0x7c>
    2872:	49 5d       	subi	r20, 0xD9	; 217
    2874:	31 fd       	sbrc	r19, 1
    2876:	40 52       	subi	r20, 0x20	; 32
    2878:	41 93       	st	Z+, r20
    287a:	02 d0       	rcall	.+4      	; 0x2880 <__ultoa_invert+0x84>
    287c:	a9 f7       	brne	.-22     	; 0x2868 <__ultoa_invert+0x6c>
    287e:	ea cf       	rjmp	.-44     	; 0x2854 <__ultoa_invert+0x58>
    2880:	b4 e0       	ldi	r27, 0x04	; 4
    2882:	a6 95       	lsr	r26
    2884:	97 95       	ror	r25
    2886:	87 95       	ror	r24
    2888:	77 95       	ror	r23
    288a:	67 95       	ror	r22
    288c:	ba 95       	dec	r27
    288e:	c9 f7       	brne	.-14     	; 0x2882 <__ultoa_invert+0x86>
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	61 05       	cpc	r22, r1
    2894:	71 05       	cpc	r23, r1
    2896:	08 95       	ret
    2898:	9b 01       	movw	r18, r22
    289a:	ac 01       	movw	r20, r24
    289c:	0a 2e       	mov	r0, r26
    289e:	06 94       	lsr	r0
    28a0:	57 95       	ror	r21
    28a2:	47 95       	ror	r20
    28a4:	37 95       	ror	r19
    28a6:	27 95       	ror	r18
    28a8:	ba 95       	dec	r27
    28aa:	c9 f7       	brne	.-14     	; 0x289e <__ultoa_invert+0xa2>
    28ac:	62 0f       	add	r22, r18
    28ae:	73 1f       	adc	r23, r19
    28b0:	84 1f       	adc	r24, r20
    28b2:	95 1f       	adc	r25, r21
    28b4:	a0 1d       	adc	r26, r0
    28b6:	08 95       	ret

000028b8 <__prologue_saves__>:
    28b8:	2f 92       	push	r2
    28ba:	3f 92       	push	r3
    28bc:	4f 92       	push	r4
    28be:	5f 92       	push	r5
    28c0:	6f 92       	push	r6
    28c2:	7f 92       	push	r7
    28c4:	8f 92       	push	r8
    28c6:	9f 92       	push	r9
    28c8:	af 92       	push	r10
    28ca:	bf 92       	push	r11
    28cc:	cf 92       	push	r12
    28ce:	df 92       	push	r13
    28d0:	ef 92       	push	r14
    28d2:	ff 92       	push	r15
    28d4:	0f 93       	push	r16
    28d6:	1f 93       	push	r17
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	ca 1b       	sub	r28, r26
    28e2:	db 0b       	sbc	r29, r27
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	09 94       	ijmp

000028f0 <__epilogue_restores__>:
    28f0:	2a 88       	ldd	r2, Y+18	; 0x12
    28f2:	39 88       	ldd	r3, Y+17	; 0x11
    28f4:	48 88       	ldd	r4, Y+16	; 0x10
    28f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    28fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    28fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2900:	aa 84       	ldd	r10, Y+10	; 0x0a
    2902:	b9 84       	ldd	r11, Y+9	; 0x09
    2904:	c8 84       	ldd	r12, Y+8	; 0x08
    2906:	df 80       	ldd	r13, Y+7	; 0x07
    2908:	ee 80       	ldd	r14, Y+6	; 0x06
    290a:	fd 80       	ldd	r15, Y+5	; 0x05
    290c:	0c 81       	ldd	r16, Y+4	; 0x04
    290e:	1b 81       	ldd	r17, Y+3	; 0x03
    2910:	aa 81       	ldd	r26, Y+2	; 0x02
    2912:	b9 81       	ldd	r27, Y+1	; 0x01
    2914:	ce 0f       	add	r28, r30
    2916:	d1 1d       	adc	r29, r1
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	ed 01       	movw	r28, r26
    2924:	08 95       	ret

00002926 <_exit>:
    2926:	f8 94       	cli

00002928 <__stop_program>:
    2928:	ff cf       	rjmp	.-2      	; 0x2928 <__stop_program>
