
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  00002130  000021c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002130  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000197  0080027a  0080027a  0000233e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000233e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044e8  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ace  00000000  00000000  00006c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c7a  00000000  00000000  00008706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000784  00000000  00000000  0000a380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b7c  00000000  00000000  0000ab04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a4  00000000  00000000  0000b680  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000cd24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <joystick_readPosition+0xc0>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e0 e3       	ldi	r30, 0x30	; 48
     3aa:	f1 e2       	ldi	r31, 0x21	; 33
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	aa 37       	cpi	r26, 0x7A	; 122
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	24 e0       	ldi	r18, 0x04	; 4
     3ba:	aa e7       	ldi	r26, 0x7A	; 122
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a1 31       	cpi	r26, 0x11	; 17
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
     3cc:	0c 94 96 10 	jmp	0x212c	; 0x212c <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xfef>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xfef>
     3e6:	08 95       	ret

000003e8 <main>:



int main(void)
//p.23 for can read instructions
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	2b 97       	sbiw	r28, 0x0b	; 11
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     3fc:	0e 94 14 08 	call	0x1028	; 0x1028 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     400:	87 e5       	ldi	r24, 0x57	; 87
     402:	95 e0       	ldi	r25, 0x05	; 5
     404:	9a 87       	std	Y+10, r25	; 0x0a
     406:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     40c:	8d e0       	ldi	r24, 0x0D	; 13
     40e:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     410:	86 e1       	ldi	r24, 0x16	; 22
     412:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     414:	81 e2       	ldi	r24, 0x21	; 33
     416:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     418:	86 e0       	ldi	r24, 0x06	; 6
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	9f 93       	push	r25
     41e:	8f 93       	push	r24
     420:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	printf("---------------------------------------\n\r");
     424:	89 e1       	ldi	r24, 0x19	; 25
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	9f 93       	push	r25
     42a:	8f 93       	push	r24
     42c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     430:	2f ef       	ldi	r18, 0xFF	; 255
     432:	8f e7       	ldi	r24, 0x7F	; 127
     434:	97 e0       	ldi	r25, 0x07	; 7
     436:	21 50       	subi	r18, 0x01	; 1
     438:	80 40       	sbci	r24, 0x00	; 0
     43a:	90 40       	sbci	r25, 0x00	; 0
     43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     440:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 ad 03 	call	0x75a	; 0x75a <CAN_controller_setMode>
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     450:	01 e8       	ldi	r16, 0x81	; 129
     452:	12 e0       	ldi	r17, 0x02	; 2

	//test_SRAM();            
	while (1) {
		
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     454:	0e 94 42 05 	call	0xa84	; 0xa84 <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     458:	d8 01       	movw	r26, r16
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	80 81       	ld	r24, Z
     460:	84 30       	cpi	r24, 0x04	; 4
     462:	c1 f7       	brne	.-16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			case HIGH_SCORE:
				break;
			case MUSIC:
				break;
			case GAME_1:
				game_play(1);
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 27 05 	call	0xa4e	; 0xa4e <game_play>
				break;
     46c:	f3 cf       	rjmp	.-26     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

0000046e <CAN_transmit_message>:
	}
	
	
	
	
}
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	8c 01       	movw	r16, r24
     476:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
     47a:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <__data_end+0x1>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	63 e0       	ldi	r22, 0x03	; 3
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__divmodhi4>
     488:	28 2f       	mov	r18, r24
     48a:	39 2f       	mov	r19, r25
     48c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <__data_end>
     490:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <__data_end+0x1>
     494:	21 30       	cpi	r18, 0x01	; 1
     496:	31 05       	cpc	r19, r1
     498:	01 f1       	breq	.+64     	; 0x4da <CAN_transmit_message+0x6c>
     49a:	22 30       	cpi	r18, 0x02	; 2
     49c:	31 05       	cpc	r19, r1
     49e:	b9 f1       	breq	.+110    	; 0x50e <__stack+0xf>
     4a0:	23 2b       	or	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <CAN_transmit_message+0x38>
     4a4:	4d c0       	rjmp	.+154    	; 0x540 <__stack+0x41>
     4a6:	f8 01       	movw	r30, r16
     4a8:	40 85       	ldd	r20, Z+8	; 0x08
     4aa:	51 85       	ldd	r21, Z+9	; 0x09
     4ac:	42 95       	swap	r20
     4ae:	44 0f       	add	r20, r20
     4b0:	40 7e       	andi	r20, 0xE0	; 224
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	62 e3       	ldi	r22, 0x32	; 50
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	80 ee       	ldi	r24, 0xE0	; 224
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     4c0:	f8 01       	movw	r30, r16
     4c2:	60 85       	ldd	r22, Z+8	; 0x08
     4c4:	71 85       	ldd	r23, Z+9	; 0x09
     4c6:	76 95       	lsr	r23
     4c8:	67 95       	ror	r22
     4ca:	76 95       	lsr	r23
     4cc:	67 95       	ror	r22
     4ce:	76 95       	lsr	r23
     4d0:	67 95       	ror	r22
     4d2:	81 e3       	ldi	r24, 0x31	; 49
     4d4:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     4d8:	33 c0       	rjmp	.+102    	; 0x540 <__stack+0x41>
     4da:	f8 01       	movw	r30, r16
     4dc:	40 85       	ldd	r20, Z+8	; 0x08
     4de:	51 85       	ldd	r21, Z+9	; 0x09
     4e0:	42 95       	swap	r20
     4e2:	44 0f       	add	r20, r20
     4e4:	40 7e       	andi	r20, 0xE0	; 224
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	62 e4       	ldi	r22, 0x42	; 66
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 ee       	ldi	r24, 0xE0	; 224
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     4f4:	f8 01       	movw	r30, r16
     4f6:	60 85       	ldd	r22, Z+8	; 0x08
     4f8:	71 85       	ldd	r23, Z+9	; 0x09
     4fa:	76 95       	lsr	r23
     4fc:	67 95       	ror	r22
     4fe:	76 95       	lsr	r23
     500:	67 95       	ror	r22
     502:	76 95       	lsr	r23
     504:	67 95       	ror	r22
     506:	81 e4       	ldi	r24, 0x41	; 65
     508:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     50c:	19 c0       	rjmp	.+50     	; 0x540 <__stack+0x41>
     50e:	f8 01       	movw	r30, r16
     510:	40 85       	ldd	r20, Z+8	; 0x08
     512:	51 85       	ldd	r21, Z+9	; 0x09
     514:	42 95       	swap	r20
     516:	44 0f       	add	r20, r20
     518:	40 7e       	andi	r20, 0xE0	; 224
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	62 e5       	ldi	r22, 0x52	; 82
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 ee       	ldi	r24, 0xE0	; 224
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     528:	f8 01       	movw	r30, r16
     52a:	60 85       	ldd	r22, Z+8	; 0x08
     52c:	71 85       	ldd	r23, Z+9	; 0x09
     52e:	76 95       	lsr	r23
     530:	67 95       	ror	r22
     532:	76 95       	lsr	r23
     534:	67 95       	ror	r22
     536:	76 95       	lsr	r23
     538:	67 95       	ror	r22
     53a:	81 e5       	ldi	r24, 0x51	; 81
     53c:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     540:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
     544:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <__data_end+0x1>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	91 05       	cpc	r25, r1
     54c:	79 f0       	breq	.+30     	; 0x56c <__stack+0x6d>
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	91 05       	cpc	r25, r1
     552:	b1 f0       	breq	.+44     	; 0x580 <__stack+0x81>
     554:	89 2b       	or	r24, r25
     556:	e9 f4       	brne	.+58     	; 0x592 <__stack+0x93>
     558:	f8 01       	movw	r30, r16
     55a:	42 85       	ldd	r20, Z+10	; 0x0a
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	65 e3       	ldi	r22, 0x35	; 53
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	8f e0       	ldi	r24, 0x0F	; 15
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     56a:	13 c0       	rjmp	.+38     	; 0x592 <__stack+0x93>
     56c:	f8 01       	movw	r30, r16
     56e:	42 85       	ldd	r20, Z+10	; 0x0a
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	65 e4       	ldi	r22, 0x45	; 69
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8f e0       	ldi	r24, 0x0F	; 15
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     57e:	09 c0       	rjmp	.+18     	; 0x592 <__stack+0x93>
     580:	f8 01       	movw	r30, r16
     582:	42 85       	ldd	r20, Z+10	; 0x0a
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	65 e5       	ldi	r22, 0x55	; 85
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	8f e0       	ldi	r24, 0x0F	; 15
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     592:	f8 01       	movw	r30, r16
     594:	82 85       	ldd	r24, Z+10	; 0x0a
     596:	88 23       	and	r24, r24
     598:	61 f1       	breq	.+88     	; 0x5f2 <__stack+0xf3>
     59a:	c0 e0       	ldi	r28, 0x00	; 0
     59c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
     5a0:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <__data_end+0x1>
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	91 05       	cpc	r25, r1
     5a8:	71 f0       	breq	.+28     	; 0x5c6 <__stack+0xc7>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	91 05       	cpc	r25, r1
     5ae:	a1 f0       	breq	.+40     	; 0x5d8 <__stack+0xd9>
     5b0:	89 2b       	or	r24, r25
     5b2:	d1 f4       	brne	.+52     	; 0x5e8 <__stack+0xe9>
     5b4:	f8 01       	movw	r30, r16
     5b6:	ec 0f       	add	r30, r28
     5b8:	f1 1d       	adc	r31, r1
     5ba:	60 81       	ld	r22, Z
     5bc:	86 e3       	ldi	r24, 0x36	; 54
     5be:	8c 0f       	add	r24, r28
     5c0:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <__stack+0xe9>
     5c6:	f8 01       	movw	r30, r16
     5c8:	ec 0f       	add	r30, r28
     5ca:	f1 1d       	adc	r31, r1
     5cc:	60 81       	ld	r22, Z
     5ce:	86 e4       	ldi	r24, 0x46	; 70
     5d0:	8c 0f       	add	r24, r28
     5d2:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <__stack+0xe9>
     5d8:	f8 01       	movw	r30, r16
     5da:	ec 0f       	add	r30, r28
     5dc:	f1 1d       	adc	r31, r1
     5de:	60 81       	ld	r22, Z
     5e0:	86 e5       	ldi	r24, 0x56	; 86
     5e2:	8c 0f       	add	r24, r28
     5e4:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     5e8:	cf 5f       	subi	r28, 0xFF	; 255
     5ea:	f8 01       	movw	r30, r16
     5ec:	82 85       	ldd	r24, Z+10	; 0x0a
     5ee:	8c 13       	cpse	r24, r28
     5f0:	d5 cf       	rjmp	.-86     	; 0x59c <__stack+0x9d>
     5f2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
     5f6:	0e 94 90 03 	call	0x720	; 0x720 <CAN_controller_RTS>
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	08 95       	ret

00000602 <CAN_sendInputData>:

void CAN_sendInputData() {
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	2b 97       	sbiw	r28, 0x0b	; 11
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	9a 87       	std	Y+10, r25	; 0x0a
     61c:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     61e:	86 e0       	ldi	r24, 0x06	; 6
     620:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     622:	e7 e8       	ldi	r30, 0x87	; 135
     624:	f2 e0       	ldi	r31, 0x02	; 2
     626:	80 81       	ld	r24, Z
     628:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     62a:	81 81       	ldd	r24, Z+1	; 0x01
     62c:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     62e:	e5 e8       	ldi	r30, 0x85	; 133
     630:	f2 e0       	ldi	r31, 0x02	; 2
     632:	80 81       	ld	r24, Z
     634:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     636:	81 81       	ldd	r24, Z+1	; 0x01
     638:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     63a:	ed e7       	ldi	r30, 0x7D	; 125
     63c:	f2 e0       	ldi	r31, 0x02	; 2
     63e:	80 81       	ld	r24, Z
     640:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     642:	81 81       	ldd	r24, Z+1	; 0x01
     644:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 37 02 	call	0x46e	; 0x46e <CAN_transmit_message>
     64e:	2b 96       	adiw	r28, 0x0b	; 11
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     660:	cf 93       	push	r28
     662:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
	SPI_masterWrite(addr);
     672:	8c 2f       	mov	r24, r28
     674:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     678:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <SPI_masterRead>
     67c:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	84 e0       	ldi	r24, 0x04	; 4
     682:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
	
	return data;
}
     686:	8c 2f       	mov	r24, r28
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	d8 2f       	mov	r29, r24
     692:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	84 e0       	ldi	r24, 0x04	; 4
     698:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
	SPI_masterWrite(addr);
     6a2:	8d 2f       	mov	r24, r29
     6a4:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
	SPI_masterWrite(data);
     6a8:	8c 2f       	mov	r24, r28
     6aa:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
	
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	d8 2f       	mov	r29, r24
     6c4:	16 2f       	mov	r17, r22
     6c6:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     6d0:	85 e0       	ldi	r24, 0x05	; 5
     6d2:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
		SPI_masterWrite(addr);
     6d6:	81 2f       	mov	r24, r17
     6d8:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
		SPI_masterWrite(mask);
     6dc:	8d 2f       	mov	r24, r29
     6de:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
		SPI_masterWrite(data);
     6e2:	8c 2f       	mov	r24, r28
     6e4:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>

}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	08 95       	ret

000006f8 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
	printf("Before spi write");
     700:	83 e4       	ldi	r24, 0x43	; 67
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	SPI_masterWrite(MCP_RESET);
     70c:	80 ec       	ldi	r24, 0xC0	; 192
     70e:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
}
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	08 95       	ret

00000720 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     720:	cf 93       	push	r28
     722:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
	switch (buffer) {
     72c:	c1 30       	cpi	r28, 0x01	; 1
     72e:	41 f0       	breq	.+16     	; 0x740 <CAN_controller_RTS+0x20>
     730:	18 f0       	brcs	.+6      	; 0x738 <CAN_controller_RTS+0x18>
     732:	c2 30       	cpi	r28, 0x02	; 2
     734:	49 f0       	breq	.+18     	; 0x748 <CAN_controller_RTS+0x28>
     736:	0b c0       	rjmp	.+22     	; 0x74e <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     738:	81 e8       	ldi	r24, 0x81	; 129
     73a:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
			break;
     73e:	07 c0       	rjmp	.+14     	; 0x74e <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     740:	82 e8       	ldi	r24, 0x82	; 130
     742:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
			break;
     746:	03 c0       	rjmp	.+6      	; 0x74e <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     748:	84 e8       	ldi	r24, 0x84	; 132
     74a:	0e 94 57 08 	call	0x10ae	; 0x10ae <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	84 e0       	ldi	r24, 0x04	; 4
     752:	0e 94 60 08 	call	0x10c0	; 0x10c0 <SPI_setChipSelect>
}
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     760:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     764:	8e e0       	ldi	r24, 0x0E	; 14
     766:	0e 94 30 03 	call	0x660	; 0x660 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     76a:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     76c:	80 38       	cpi	r24, 0x80	; 128
     76e:	69 f0       	breq	.+26     	; 0x78a <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     770:	1f 92       	push	r1
     772:	8f 93       	push	r24
     774:	84 e5       	ldi	r24, 0x54	; 84
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
		return;
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	38 c0       	rjmp	.+112    	; 0x7fa <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     78a:	4c 2f       	mov	r20, r28
     78c:	4c 60       	ori	r20, 0x0C	; 12
     78e:	6f e0       	ldi	r22, 0x0F	; 15
     790:	8e ee       	ldi	r24, 0xEE	; 238
     792:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	6b e2       	ldi	r22, 0x2B	; 43
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     7a0:	40 e6       	ldi	r20, 0x60	; 96
     7a2:	60 e6       	ldi	r22, 0x60	; 96
     7a4:	80 e6       	ldi	r24, 0x60	; 96
     7a6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     7aa:	2f ef       	ldi	r18, 0xFF	; 255
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	21 50       	subi	r18, 0x01	; 1
     7b2:	80 40       	sbci	r24, 0x00	; 0
     7b4:	90 40       	sbci	r25, 0x00	; 0
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <CAN_controller_setMode+0x56>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <CAN_controller_setMode+0x60>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     7bc:	8e e0       	ldi	r24, 0x0E	; 14
     7be:	0e 94 30 03 	call	0x660	; 0x660 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     7c2:	d8 2f       	mov	r29, r24
     7c4:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     7c6:	cd 17       	cp	r28, r29
     7c8:	61 f0       	breq	.+24     	; 0x7e2 <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     7ca:	1f 92       	push	r1
     7cc:	df 93       	push	r29
     7ce:	8f e6       	ldi	r24, 0x6F	; 111
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     7e2:	1f 92       	push	r1
     7e4:	df 93       	push	r29
     7e6:	8f e8       	ldi	r24, 0x8F	; 143
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     800:	0e 94 4e 08 	call	0x109c	; 0x109c <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     804:	80 e4       	ldi	r24, 0x40	; 64
     806:	0e 94 ad 03 	call	0x75a	; 0x75a <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     80a:	8b b7       	in	r24, 0x3b	; 59
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     810:	85 b7       	in	r24, 0x35	; 53
     812:	82 60       	ori	r24, 0x02	; 2
     814:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     816:	85 b7       	in	r24, 0x35	; 53
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     81c:	81 b3       	in	r24, 0x11	; 17
     81e:	84 70       	andi	r24, 0x04	; 4
     820:	81 bb       	out	0x11, r24	; 17
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	21 50       	subi	r18, 0x01	; 1
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	90 40       	sbci	r25, 0x00	; 0
     82e:	e1 f7       	brne	.-8      	; 0x828 <CAN_controller_init+0x28>
     830:	00 c0       	rjmp	.+0      	; 0x832 <CAN_controller_init+0x32>
     832:	00 c0       	rjmp	.+0      	; 0x834 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     834:	8e e9       	ldi	r24, 0x9E	; 158
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     840:	8e e0       	ldi	r24, 0x0E	; 14
     842:	0e 94 30 03 	call	0x660	; 0x660 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     846:	1f 92       	push	r1
     848:	8f 93       	push	r24
     84a:	87 eb       	ldi	r24, 0xB7	; 183
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>

}
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	08 95       	ret

00000864 <game_init>:
		//Clear interrupt
		CAN_clearInterrupt();
		//Update gamedata
		gameData.score = received_message.data[0];
		gameData.playtime = received_message.data[1];
		sei();
     864:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <gameActive>
     868:	08 95       	ret

0000086a <game_countdown>:
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	4a e0       	ldi	r20, 0x0A	; 10
     87a:	be 01       	movw	r22, r28
     87c:	6f 5f       	subi	r22, 0xFF	; 255
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__itoa_ncheck>
     888:	0e 94 90 07 	call	0xf20	; 0xf20 <oled_reset>
     88c:	0e 94 b1 07 	call	0xf62	; 0xf62 <oled_home>
     890:	01 e8       	ldi	r16, 0x81	; 129
     892:	12 e0       	ldi	r17, 0x02	; 2
     894:	f8 01       	movw	r30, r16
     896:	80 81       	ld	r24, Z
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	02 96       	adiw	r24, 0x02	; 2
     89c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <oled_gotoLine>
     8a8:	ce 01       	movw	r24, r28
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     8b0:	ff ef       	ldi	r31, 0xFF	; 255
     8b2:	2f ef       	ldi	r18, 0xFF	; 255
     8b4:	8e e0       	ldi	r24, 0x0E	; 14
     8b6:	f1 50       	subi	r31, 0x01	; 1
     8b8:	20 40       	sbci	r18, 0x00	; 0
     8ba:	80 40       	sbci	r24, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <game_countdown+0x4c>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <game_countdown+0x56>
     8c0:	00 00       	nop
     8c2:	4a e0       	ldi	r20, 0x0A	; 10
     8c4:	be 01       	movw	r22, r28
     8c6:	6f 5f       	subi	r22, 0xFF	; 255
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__itoa_ncheck>
     8d2:	0e 94 90 07 	call	0xf20	; 0xf20 <oled_reset>
     8d6:	0e 94 b1 07 	call	0xf62	; 0xf62 <oled_home>
     8da:	f8 01       	movw	r30, r16
     8dc:	80 81       	ld	r24, Z
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	02 96       	adiw	r24, 0x02	; 2
     8e2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <oled_gotoLine>
     8ee:	ce 01       	movw	r24, r28
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     8f6:	ff ef       	ldi	r31, 0xFF	; 255
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	8e e0       	ldi	r24, 0x0E	; 14
     8fc:	f1 50       	subi	r31, 0x01	; 1
     8fe:	20 40       	sbci	r18, 0x00	; 0
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <game_countdown+0x92>
     904:	00 c0       	rjmp	.+0      	; 0x906 <game_countdown+0x9c>
     906:	00 00       	nop
     908:	4a e0       	ldi	r20, 0x0A	; 10
     90a:	be 01       	movw	r22, r28
     90c:	6f 5f       	subi	r22, 0xFF	; 255
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__itoa_ncheck>
     918:	0e 94 90 07 	call	0xf20	; 0xf20 <oled_reset>
     91c:	0e 94 b1 07 	call	0xf62	; 0xf62 <oled_home>
     920:	f8 01       	movw	r30, r16
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	02 96       	adiw	r24, 0x02	; 2
     928:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <oled_gotoLine>
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     93c:	ff ef       	ldi	r31, 0xFF	; 255
     93e:	2f ef       	ldi	r18, 0xFF	; 255
     940:	8e e0       	ldi	r24, 0x0E	; 14
     942:	f1 50       	subi	r31, 0x01	; 1
     944:	20 40       	sbci	r18, 0x00	; 0
     946:	80 40       	sbci	r24, 0x00	; 0
     948:	e1 f7       	brne	.-8      	; 0x942 <game_countdown+0xd8>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <game_countdown+0xe2>
     94c:	00 00       	nop
     94e:	0e 94 90 07 	call	0xf20	; 0xf20 <oled_reset>
     952:	0e 94 b1 07 	call	0xf62	; 0xf62 <oled_home>
     956:	f8 01       	movw	r30, r16
     958:	80 81       	ld	r24, Z
     95a:	91 81       	ldd	r25, Z+1	; 0x01
     95c:	02 96       	adiw	r24, 0x02	; 2
     95e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <oled_gotoLine>
     96a:	82 ec       	ldi	r24, 0xC2	; 194
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     972:	ff ef       	ldi	r31, 0xFF	; 255
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	8e e0       	ldi	r24, 0x0E	; 14
     978:	f1 50       	subi	r31, 0x01	; 1
     97a:	20 40       	sbci	r18, 0x00	; 0
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <game_countdown+0x10e>
     980:	00 c0       	rjmp	.+0      	; 0x982 <game_countdown+0x118>
     982:	00 00       	nop
     984:	0f 90       	pop	r0
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	08 95       	ret

00000990 <game_newgame>:
     990:	f8 94       	cli
     992:	0e 94 35 04 	call	0x86a	; 0x86a <game_countdown>
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <gameActive>
     99c:	e5 e9       	ldi	r30, 0x95	; 149
     99e:	f2 e0       	ldi	r31, 0x02	; 2
     9a0:	8a e0       	ldi	r24, 0x0A	; 10
     9a2:	80 83       	st	Z, r24
     9a4:	12 82       	std	Z+2, r1	; 0x02
     9a6:	88 e7       	ldi	r24, 0x78	; 120
     9a8:	81 83       	std	Z+1, r24	; 0x01
     9aa:	78 94       	sei
     9ac:	08 95       	ret

000009ae <game_updateOled>:
	}
	
}

void game_updateOled()
{
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <game_updateOled+0xa>
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <game_updateOled+0xc>
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
	//Print the game name
	printf("Game oled");
     9be:	86 ed       	ldi	r24, 0xD6	; 214
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	oled_reset();
     9ca:	0e 94 90 07 	call	0xf20	; 0xf20 <oled_reset>
	oled_home();
     9ce:	0e 94 b1 07 	call	0xf62	; 0xf62 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     9d2:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <currentMenu>
     9d6:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <currentMenu+0x1>
     9da:	02 96       	adiw	r24, 0x02	; 2
     9dc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
	oled_gotoLine(3);
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <oled_gotoLine>
	oled_print("Score: ");
     9e8:	80 ee       	ldi	r24, 0xE0	; 224
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
	char score_string[2];
	itoa(gameData.score,score_string,10);
     9f0:	05 e9       	ldi	r16, 0x95	; 149
     9f2:	12 e0       	ldi	r17, 0x02	; 2
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9f4:	f8 01       	movw	r30, r16
     9f6:	80 81       	ld	r24, Z
     9f8:	4a e0       	ldi	r20, 0x0A	; 10
     9fa:	be 01       	movw	r22, r28
     9fc:	6f 5f       	subi	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__itoa_ncheck>
	oled_print(score_string);
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
	oled_gotoLine(5);
     a0e:	85 e0       	ldi	r24, 0x05	; 5
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <oled_gotoLine>
	oled_print("Time: ");
     a16:	88 ee       	ldi	r24, 0xE8	; 232
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
     a1e:	f8 01       	movw	r30, r16
     a20:	82 81       	ldd	r24, Z+2	; 0x02
     a22:	4a e0       	ldi	r20, 0x0A	; 10
     a24:	be 01       	movw	r22, r28
     a26:	6d 5f       	subi	r22, 0xFD	; 253
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__itoa_ncheck>
	char time_string[2];
	itoa(gameData.playtime,time_string,10);

	oled_print(time_string);
     a30:	ce 01       	movw	r24, r28
     a32:	03 96       	adiw	r24, 0x03	; 3
     a34:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
}
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	08 95       	ret

00000a4e <game_play>:

void game_play(uint8_t gameID)
{
	if(gameActive==0)
     a4e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <gameActive>
     a52:	81 11       	cpse	r24, r1
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <game_play+0xc>
	{
		game_newgame();	
     a56:	0e 94 c8 04 	call	0x990	; 0x990 <game_newgame>
	}
	if (buttons.right_button) {
     a5a:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <buttons+0x1>
     a5e:	88 23       	and	r24, r24
     a60:	21 f0       	breq	.+8      	; 0xa6a <game_play+0x1c>
		gameActive = 0;
     a62:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <gameActive>
		this_init();
     a66:	0e 94 75 06 	call	0xcea	; 0xcea <this_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     a6a:	0e 94 01 03 	call	0x602	; 0x602 <CAN_sendInputData>
     a6e:	08 95       	ret

00000a70 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     a70:	85 b7       	in	r24, 0x35	; 53
     a72:	8f 7e       	andi	r24, 0xEF	; 239
     a74:	85 bf       	out	0x35, r24	; 53
     a76:	84 b7       	in	r24, 0x34	; 52
     a78:	8f 7d       	andi	r24, 0xDF	; 223
     a7a:	84 bf       	out	0x34, r24	; 52
     a7c:	86 b7       	in	r24, 0x36	; 54
     a7e:	8f 77       	andi	r24, 0x7F	; 127
     a80:	86 bf       	out	0x36, r24	; 54
     a82:	08 95       	ret

00000a84 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     a84:	88 b1       	in	r24, 0x08	; 8
     a86:	88 68       	ori	r24, 0x88	; 136
     a88:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
     a8a:	85 b7       	in	r24, 0x35	; 53
     a8c:	80 62       	ori	r24, 0x20	; 32
     a8e:	85 bf       	out	0x35, r24	; 53
     a90:	88 95       	sleep
     a92:	85 b7       	in	r24, 0x35	; 53
     a94:	8f 7d       	andi	r24, 0xDF	; 223
     a96:	85 bf       	out	0x35, r24	; 53
     a98:	08 95       	ret

00000a9a <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     aa0:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     aaa:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <joystickOffsetY>
     aae:	08 95       	ret

00000ab0 <joystick_readPosition>:
}
void joystick_readPosition() {
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     ac2:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     aca:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     acc:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <joystickOffsetX>
     ad0:	c6 17       	cp	r28, r22
     ad2:	80 f4       	brcc	.+32     	; 0xaf4 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	2c 2f       	mov	r18, r28
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	26 1b       	sub	r18, r22
     adc:	37 0b       	sbc	r19, r23
     ade:	44 e6       	ldi	r20, 0x64	; 100
     ae0:	42 9f       	mul	r20, r18
     ae2:	c0 01       	movw	r24, r0
     ae4:	43 9f       	mul	r20, r19
     ae6:	90 0d       	add	r25, r0
     ae8:	11 24       	eor	r1, r1
     aea:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__divmodhi4>
     aee:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <joystick_pos>
     af2:	14 c0       	rjmp	.+40     	; 0xb1c <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     af4:	46 2f       	mov	r20, r22
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	2c 2f       	mov	r18, r28
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	24 1b       	sub	r18, r20
     afe:	35 0b       	sbc	r19, r21
     b00:	64 e6       	ldi	r22, 0x64	; 100
     b02:	62 9f       	mul	r22, r18
     b04:	c0 01       	movw	r24, r0
     b06:	63 9f       	mul	r22, r19
     b08:	90 0d       	add	r25, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	6f ef       	ldi	r22, 0xFF	; 255
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	64 1b       	sub	r22, r20
     b12:	75 0b       	sbc	r23, r21
     b14:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__divmodhi4>
     b18:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
     b1c:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <joystickOffsetY>
     b20:	e2 17       	cp	r30, r18
     b22:	88 f4       	brcc	.+34     	; 0xb46 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     b24:	62 2f       	mov	r22, r18
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	4e 2f       	mov	r20, r30
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	46 1b       	sub	r20, r22
     b2e:	57 0b       	sbc	r21, r23
     b30:	24 e6       	ldi	r18, 0x64	; 100
     b32:	24 9f       	mul	r18, r20
     b34:	c0 01       	movw	r24, r0
     b36:	25 9f       	mul	r18, r21
     b38:	90 0d       	add	r25, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__divmodhi4>
     b40:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <joystick_pos+0x1>
     b44:	13 c0       	rjmp	.+38     	; 0xb6c <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	4e 2f       	mov	r20, r30
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	42 1b       	sub	r20, r18
     b4e:	53 0b       	sbc	r21, r19
     b50:	64 e6       	ldi	r22, 0x64	; 100
     b52:	64 9f       	mul	r22, r20
     b54:	c0 01       	movw	r24, r0
     b56:	65 9f       	mul	r22, r21
     b58:	90 0d       	add	r25, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	62 1b       	sub	r22, r18
     b62:	73 0b       	sbc	r23, r19
     b64:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__divmodhi4>
     b68:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     b6c:	cd e7       	ldi	r28, 0x7D	; 125
     b6e:	d2 e0       	ldi	r29, 0x02	; 2
     b70:	68 81       	ld	r22, Y
     b72:	06 2e       	mov	r0, r22
     b74:	00 0c       	add	r0, r0
     b76:	77 0b       	sbc	r23, r23
     b78:	88 0b       	sbc	r24, r24
     b7a:	99 0b       	sbc	r25, r25
     b7c:	0e 94 33 0a 	call	0x1466	; 0x1466 <__floatsisf>
     b80:	6b 01       	movw	r12, r22
     b82:	7c 01       	movw	r14, r24
     b84:	69 81       	ldd	r22, Y+1	; 0x01
     b86:	06 2e       	mov	r0, r22
     b88:	00 0c       	add	r0, r0
     b8a:	77 0b       	sbc	r23, r23
     b8c:	88 0b       	sbc	r24, r24
     b8e:	99 0b       	sbc	r25, r25
     b90:	0e 94 33 0a 	call	0x1466	; 0x1466 <__floatsisf>
     b94:	a7 01       	movw	r20, r14
     b96:	96 01       	movw	r18, r12
     b98:	0e 94 2a 09 	call	0x1254	; 0x1254 <atan2>
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	44 eb       	ldi	r20, 0xB4	; 180
     ba2:	53 e4       	ldi	r21, 0x43	; 67
     ba4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     bb4:	23 ec       	ldi	r18, 0xC3	; 195
     bb6:	35 ef       	ldi	r19, 0xF5	; 245
     bb8:	48 e4       	ldi	r20, 0x48	; 72
     bba:	50 e4       	ldi	r21, 0x40	; 64
     bbc:	0e 94 89 09 	call	0x1312	; 0x1312 <__divsf3>
     bc0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fixsfsi>
     bc4:	7b 83       	std	Y+3, r23	; 0x03
     bc6:	6a 83       	std	Y+2, r22	; 0x02
}
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	08 95       	ret

00000bd6 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     bd6:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     bd8:	80 81       	ld	r24, Z
     bda:	94 e0       	ldi	r25, 0x04	; 4
     bdc:	98 0f       	add	r25, r24
     bde:	99 30       	cpi	r25, 0x09	; 9
     be0:	20 f4       	brcc	.+8      	; 0xbea <joystick_getDirection+0x14>
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	9c 5f       	subi	r25, 0xFC	; 252
     be6:	99 30       	cpi	r25, 0x09	; 9
     be8:	90 f0       	brcs	.+36     	; 0xc0e <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     bea:	85 30       	cpi	r24, 0x05	; 5
     bec:	2c f0       	brlt	.+10     	; 0xbf8 <joystick_getDirection+0x22>
     bee:	81 81       	ldd	r24, Z+1	; 0x01
     bf0:	8f 5c       	subi	r24, 0xCF	; 207
     bf2:	83 36       	cpi	r24, 0x63	; 99
     bf4:	38 f4       	brcc	.+14     	; 0xc04 <joystick_getDirection+0x2e>
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     bf8:	8c 3f       	cpi	r24, 0xFC	; 252
     bfa:	24 f4       	brge	.+8      	; 0xc04 <joystick_getDirection+0x2e>
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	8f 5c       	subi	r24, 0xCF	; 207
     c00:	83 36       	cpi	r24, 0x63	; 99
     c02:	48 f0       	brcs	.+18     	; 0xc16 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     c04:	81 81       	ldd	r24, Z+1	; 0x01
     c06:	8c 3f       	cpi	r24, 0xFC	; 252
     c08:	44 f0       	brlt	.+16     	; 0xc1a <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     c0e:	84 e0       	ldi	r24, 0x04	; 4
     c10:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     c1a:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     c1c:	08 95       	ret

00000c1e <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     c1e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     c22:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <currentMenu+0x3>
     c26:	94 30       	cpi	r25, 0x04	; 4
     c28:	09 f0       	breq	.+2      	; 0xc2c <navigateMenu+0xe>
     c2a:	5c c0       	rjmp	.+184    	; 0xce4 <navigateMenu+0xc6>
			switch (dir) {
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	e1 f1       	breq	.+120    	; 0xca8 <navigateMenu+0x8a>
     c30:	60 f1       	brcs	.+88     	; 0xc8a <navigateMenu+0x6c>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	c9 f0       	breq	.+50     	; 0xc68 <navigateMenu+0x4a>
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	09 f0       	breq	.+2      	; 0xc3c <navigateMenu+0x1e>
     c3a:	54 c0       	rjmp	.+168    	; 0xce4 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     c3c:	e1 e8       	ldi	r30, 0x81	; 129
     c3e:	f2 e0       	ldi	r31, 0x02	; 2
     c40:	92 81       	ldd	r25, Z+2	; 0x02
     c42:	49 2f       	mov	r20, r25
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	01 90       	ld	r0, Z+
     c48:	f0 81       	ld	r31, Z
     c4a:	e0 2d       	mov	r30, r0
     c4c:	20 a1       	ldd	r18, Z+32	; 0x20
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	21 50       	subi	r18, 0x01	; 1
     c52:	31 09       	sbc	r19, r1
     c54:	42 17       	cp	r20, r18
     c56:	53 07       	cpc	r21, r19
     c58:	24 f4       	brge	.+8      	; 0xc62 <navigateMenu+0x44>
					currentMenu.childIndex++;
     c5a:	9f 5f       	subi	r25, 0xFF	; 255
     c5c:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <currentMenu+0x2>
     c60:	41 c0       	rjmp	.+130    	; 0xce4 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
     c62:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <currentMenu+0x2>
     c66:	3e c0       	rjmp	.+124    	; 0xce4 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     c68:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <currentMenu+0x2>
     c6c:	99 23       	and	r25, r25
     c6e:	21 f0       	breq	.+8      	; 0xc78 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     c70:	91 50       	subi	r25, 0x01	; 1
     c72:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <currentMenu+0x2>
     c76:	36 c0       	rjmp	.+108    	; 0xce4 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     c78:	e1 e8       	ldi	r30, 0x81	; 129
     c7a:	f2 e0       	ldi	r31, 0x02	; 2
     c7c:	a0 81       	ld	r26, Z
     c7e:	b1 81       	ldd	r27, Z+1	; 0x01
     c80:	90 96       	adiw	r26, 0x20	; 32
     c82:	9c 91       	ld	r25, X
     c84:	91 50       	subi	r25, 0x01	; 1
     c86:	92 83       	std	Z+2, r25	; 0x02
     c88:	2d c0       	rjmp	.+90     	; 0xce4 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     c8a:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <currentMenu>
     c8e:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <currentMenu+0x1>
     c92:	22 89       	ldd	r18, Z+18	; 0x12
     c94:	33 89       	ldd	r19, Z+19	; 0x13
     c96:	21 15       	cp	r18, r1
     c98:	31 05       	cpc	r19, r1
     c9a:	21 f1       	breq	.+72     	; 0xce4 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     c9c:	e1 e8       	ldi	r30, 0x81	; 129
     c9e:	f2 e0       	ldi	r31, 0x02	; 2
     ca0:	31 83       	std	Z+1, r19	; 0x01
     ca2:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     ca4:	12 82       	std	Z+2, r1	; 0x02
     ca6:	1e c0       	rjmp	.+60     	; 0xce4 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
     ca8:	a1 e8       	ldi	r26, 0x81	; 129
     caa:	b2 e0       	ldi	r27, 0x02	; 2
     cac:	2d 91       	ld	r18, X+
     cae:	3c 91       	ld	r19, X
     cb0:	11 97       	sbiw	r26, 0x01	; 1
     cb2:	12 96       	adiw	r26, 0x02	; 2
     cb4:	9c 91       	ld	r25, X
     cb6:	e9 2f       	mov	r30, r25
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	3a 96       	adiw	r30, 0x0a	; 10
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	e2 0f       	add	r30, r18
     cc2:	f3 1f       	adc	r31, r19
     cc4:	01 90       	ld	r0, Z+
     cc6:	f0 81       	ld	r31, Z
     cc8:	e0 2d       	mov	r30, r0
     cca:	90 a1       	ldd	r25, Z+32	; 0x20
     ccc:	91 11       	cpse	r25, r1
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <navigateMenu+0xb8>
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	99 23       	and	r25, r25
     cd4:	39 f0       	breq	.+14     	; 0xce4 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     cd6:	a1 e8       	ldi	r26, 0x81	; 129
     cd8:	b2 e0       	ldi	r27, 0x02	; 2
     cda:	11 96       	adiw	r26, 0x01	; 1
     cdc:	fc 93       	st	X, r31
     cde:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     ce0:	12 96       	adiw	r26, 0x02	; 2
     ce2:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     ce4:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <currentMenu+0x3>
     ce8:	08 95       	ret

00000cea <this_init>:



MenuNode nodes[11];

void this_init() {
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
     cf2:	8a e0       	ldi	r24, 0x0A	; 10
     cf4:	ef ee       	ldi	r30, 0xEF	; 239
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	ac e9       	ldi	r26, 0x9C	; 156
     cfa:	b2 e0       	ldi	r27, 0x02	; 2
     cfc:	01 90       	ld	r0, Z+
     cfe:	0d 92       	st	X+, r0
     d00:	8a 95       	dec	r24
     d02:	e1 f7       	brne	.-8      	; 0xcfc <this_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
     d04:	8a e0       	ldi	r24, 0x0A	; 10
     d06:	e9 ef       	ldi	r30, 0xF9	; 249
     d08:	f1 e0       	ldi	r31, 0x01	; 1
     d0a:	ad eb       	ldi	r26, 0xBD	; 189
     d0c:	b2 e0       	ldi	r27, 0x02	; 2
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	8a 95       	dec	r24
     d14:	e1 f7       	brne	.-8      	; 0xd0e <this_init+0x24>
	strcpy(nodes[2].name, "High scores");
     d16:	8c e0       	ldi	r24, 0x0C	; 12
     d18:	e3 e0       	ldi	r30, 0x03	; 3
     d1a:	f2 e0       	ldi	r31, 0x02	; 2
     d1c:	ae ed       	ldi	r26, 0xDE	; 222
     d1e:	b2 e0       	ldi	r27, 0x02	; 2
     d20:	01 90       	ld	r0, Z+
     d22:	0d 92       	st	X+, r0
     d24:	8a 95       	dec	r24
     d26:	e1 f7       	brne	.-8      	; 0xd20 <this_init+0x36>
	strcpy(nodes[3].name, "Music");
     d28:	86 e0       	ldi	r24, 0x06	; 6
     d2a:	ef e0       	ldi	r30, 0x0F	; 15
     d2c:	f2 e0       	ldi	r31, 0x02	; 2
     d2e:	af ef       	ldi	r26, 0xFF	; 255
     d30:	b2 e0       	ldi	r27, 0x02	; 2
     d32:	01 90       	ld	r0, Z+
     d34:	0d 92       	st	X+, r0
     d36:	8a 95       	dec	r24
     d38:	e1 f7       	brne	.-8      	; 0xd32 <this_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
     d3a:	87 e0       	ldi	r24, 0x07	; 7
     d3c:	e5 e1       	ldi	r30, 0x15	; 21
     d3e:	f2 e0       	ldi	r31, 0x02	; 2
     d40:	a0 e2       	ldi	r26, 0x20	; 32
     d42:	b3 e0       	ldi	r27, 0x03	; 3
     d44:	01 90       	ld	r0, Z+
     d46:	0d 92       	st	X+, r0
     d48:	8a 95       	dec	r24
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <this_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
     d4c:	87 e0       	ldi	r24, 0x07	; 7
     d4e:	ec e1       	ldi	r30, 0x1C	; 28
     d50:	f2 e0       	ldi	r31, 0x02	; 2
     d52:	a1 e4       	ldi	r26, 0x41	; 65
     d54:	b3 e0       	ldi	r27, 0x03	; 3
     d56:	01 90       	ld	r0, Z+
     d58:	0d 92       	st	X+, r0
     d5a:	8a 95       	dec	r24
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <this_init+0x6c>
	strcpy(nodes[6].name, "Score 1");
     d5e:	88 e0       	ldi	r24, 0x08	; 8
     d60:	e3 e2       	ldi	r30, 0x23	; 35
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	a2 e6       	ldi	r26, 0x62	; 98
     d66:	b3 e0       	ldi	r27, 0x03	; 3
     d68:	01 90       	ld	r0, Z+
     d6a:	0d 92       	st	X+, r0
     d6c:	8a 95       	dec	r24
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <this_init+0x7e>
	strcpy(nodes[7].name, "Score 2");
     d70:	88 e0       	ldi	r24, 0x08	; 8
     d72:	eb e2       	ldi	r30, 0x2B	; 43
     d74:	f2 e0       	ldi	r31, 0x02	; 2
     d76:	a3 e8       	ldi	r26, 0x83	; 131
     d78:	b3 e0       	ldi	r27, 0x03	; 3
     d7a:	01 90       	ld	r0, Z+
     d7c:	0d 92       	st	X+, r0
     d7e:	8a 95       	dec	r24
     d80:	e1 f7       	brne	.-8      	; 0xd7a <this_init+0x90>
	strcpy(nodes[8].name, "Score 3");
     d82:	88 e0       	ldi	r24, 0x08	; 8
     d84:	e3 e3       	ldi	r30, 0x33	; 51
     d86:	f2 e0       	ldi	r31, 0x02	; 2
     d88:	a4 ea       	ldi	r26, 0xA4	; 164
     d8a:	b3 e0       	ldi	r27, 0x03	; 3
     d8c:	01 90       	ld	r0, Z+
     d8e:	0d 92       	st	X+, r0
     d90:	8a 95       	dec	r24
     d92:	e1 f7       	brne	.-8      	; 0xd8c <this_init+0xa2>
	strcpy(nodes[9].name, "Score 4");
     d94:	88 e0       	ldi	r24, 0x08	; 8
     d96:	eb e3       	ldi	r30, 0x3B	; 59
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	a5 ec       	ldi	r26, 0xC5	; 197
     d9c:	b3 e0       	ldi	r27, 0x03	; 3
     d9e:	01 90       	ld	r0, Z+
     da0:	0d 92       	st	X+, r0
     da2:	8a 95       	dec	r24
     da4:	e1 f7       	brne	.-8      	; 0xd9e <this_init+0xb4>
	strcpy(nodes[10].name, "Score 5");
     da6:	88 e0       	ldi	r24, 0x08	; 8
     da8:	e3 e4       	ldi	r30, 0x43	; 67
     daa:	f2 e0       	ldi	r31, 0x02	; 2
     dac:	a6 ee       	ldi	r26, 0xE6	; 230
     dae:	b3 e0       	ldi	r27, 0x03	; 3
     db0:	01 90       	ld	r0, Z+
     db2:	0d 92       	st	X+, r0
     db4:	8a 95       	dec	r24
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <this_init+0xc6>
     db8:	6a e9       	ldi	r22, 0x9A	; 154
     dba:	72 e0       	ldi	r23, 0x02	; 2
     dbc:	fb 01       	movw	r30, r22
	
	for(int i = 0;i<11; i++)
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=4){
			nodes[i].isAction=1;
     dc2:	21 e0       	ldi	r18, 0x01	; 1
	strcpy(nodes[10].name, "Score 5");
	
	for(int i = 0;i<11; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
     dc4:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=4){
     dc6:	84 30       	cpi	r24, 0x04	; 4
     dc8:	91 05       	cpc	r25, r1
     dca:	14 f0       	brlt	.+4      	; 0xdd0 <this_init+0xe6>
			nodes[i].isAction=1;
     dcc:	21 83       	std	Z+1, r18	; 0x01
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <this_init+0xe8>
		}
		else{
			nodes[i].isAction=0;
     dd0:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[7].name, "Score 2");
	strcpy(nodes[8].name, "Score 3");
	strcpy(nodes[9].name, "Score 4");
	strcpy(nodes[10].name, "Score 5");
	
	for(int i = 0;i<11; i++)
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	b1 96       	adiw	r30, 0x21	; 33
     dd6:	8b 30       	cpi	r24, 0x0B	; 11
     dd8:	91 05       	cpc	r25, r1
     dda:	a1 f7       	brne	.-24     	; 0xdc4 <this_init+0xda>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
     ddc:	ea e9       	ldi	r30, 0x9A	; 154
     dde:	f2 e0       	ldi	r31, 0x02	; 2
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <nodes+0x41>
	nodes[2].numChildren = 5;
     dea:	85 e0       	ldi	r24, 0x05	; 5
     dec:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <nodes+0x62>
	nodes[3].numChildren = 0;
     df0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <nodes+0x83>
	nodes[4].numChildren = 0;
     df4:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <nodes+0xa4>
	nodes[5].numChildren = 0;
     df8:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <nodes+0xc5>
	nodes[6].numChildren = 0;
     dfc:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <nodes+0xe6>
	nodes[7].numChildren = 0;
     e00:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <nodes+0x107>
	nodes[8].numChildren = 0;
     e04:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <nodes+0x128>
	nodes[9].numChildren = 0;
     e08:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <nodes+0x149>
	nodes[10].numChildren = 0;
     e0c:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <nodes+0x16a>
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
     e10:	13 8a       	std	Z+19, r1	; 0x13
     e12:	12 8a       	std	Z+18, r1	; 0x12
     e14:	05 e0       	ldi	r16, 0x05	; 5
     e16:	14 e0       	ldi	r17, 0x04	; 4
	nodes[7].numChildren = 0;
	nodes[8].numChildren = 0;
	nodes[9].numChildren = 0;
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
     e18:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
     e1a:	51 e2       	ldi	r21, 0x21	; 33
     e1c:	18 c0       	rjmp	.+48     	; 0xe4e <this_init+0x164>
     e1e:	54 9f       	mul	r21, r20
     e20:	f0 01       	movw	r30, r0
     e22:	11 24       	eor	r1, r1
     e24:	e6 56       	subi	r30, 0x66	; 102
     e26:	fd 4f       	sbci	r31, 0xFD	; 253
     e28:	e9 93       	st	Y+, r30
     e2a:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
     e2c:	b3 8b       	std	Z+19, r27	; 0x13
     e2e:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
     e30:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	90 96       	adiw	r26, 0x20	; 32
     e38:	8c 91       	ld	r24, X
     e3a:	90 97       	sbiw	r26, 0x20	; 32
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	28 17       	cp	r18, r24
     e40:	39 07       	cpc	r19, r25
     e42:	6c f3       	brlt	.-38     	; 0xe1e <this_init+0x134>
     e44:	6f 5d       	subi	r22, 0xDF	; 223
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
     e48:	60 17       	cp	r22, r16
     e4a:	71 07       	cpc	r23, r17
     e4c:	59 f0       	breq	.+22     	; 0xe64 <this_init+0x17a>
     e4e:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     e50:	90 96       	adiw	r26, 0x20	; 32
     e52:	8c 91       	ld	r24, X
     e54:	90 97       	sbiw	r26, 0x20	; 32
     e56:	88 23       	and	r24, r24
     e58:	a9 f3       	breq	.-22     	; 0xe44 <this_init+0x15a>
     e5a:	eb 01       	movw	r28, r22
     e5c:	64 96       	adiw	r28, 0x14	; 20
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	dd cf       	rjmp	.-70     	; 0xe1e <this_init+0x134>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
     e64:	8d e7       	ldi	r24, 0x7D	; 125
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	0e 94 0f 06 	call	0xc1e	; 0xc1e <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
     e6c:	e1 e8       	ldi	r30, 0x81	; 129
     e6e:	f2 e0       	ldi	r31, 0x02	; 2
     e70:	8a e9       	ldi	r24, 0x9A	; 154
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
     e78:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     e7a:	84 e0       	ldi	r24, 0x04	; 4
     e7c:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
	oled_reset();
     e90:	0e 94 90 07 	call	0xf20	; 0xf20 <oled_reset>
	oled_home();
     e94:	0e 94 b1 07 	call	0xf62	; 0xf62 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     e98:	c1 e8       	ldi	r28, 0x81	; 129
     e9a:	d2 e0       	ldi	r29, 0x02	; 2
     e9c:	88 81       	ld	r24, Y
     e9e:	99 81       	ldd	r25, Y+1	; 0x01
     ea0:	02 96       	adiw	r24, 0x02	; 2
     ea2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     ea6:	e8 81       	ld	r30, Y
     ea8:	f9 81       	ldd	r31, Y+1	; 0x01
     eaa:	80 a1       	ldd	r24, Z+32	; 0x20
     eac:	88 23       	and	r24, r24
     eae:	39 f1       	breq	.+78     	; 0xefe <menu_printCurrentMenu+0x76>
     eb0:	c0 e0       	ldi	r28, 0x00	; 0
     eb2:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     eb4:	01 e8       	ldi	r16, 0x81	; 129
     eb6:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     eb8:	ce 01       	movw	r24, r28
     eba:	02 96       	adiw	r24, 0x02	; 2
     ebc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     ec0:	d8 01       	movw	r26, r16
     ec2:	8d 91       	ld	r24, X+
     ec4:	9c 91       	ld	r25, X
     ec6:	fe 01       	movw	r30, r28
     ec8:	3a 96       	adiw	r30, 0x0a	; 10
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	e8 0f       	add	r30, r24
     ed0:	f9 1f       	adc	r31, r25
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	02 96       	adiw	r24, 0x02	; 2
     ed8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <oled_print>
		if (currentMenu.childIndex == i) {
     edc:	f8 01       	movw	r30, r16
     ede:	82 81       	ldd	r24, Z+2	; 0x02
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	8c 17       	cp	r24, r28
     ee4:	9d 07       	cpc	r25, r29
     ee6:	11 f4       	brne	.+4      	; 0xeec <menu_printCurrentMenu+0x64>
			oled_print_arrow();
     ee8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     eec:	21 96       	adiw	r28, 0x01	; 1
     eee:	d8 01       	movw	r26, r16
     ef0:	ed 91       	ld	r30, X+
     ef2:	fc 91       	ld	r31, X
     ef4:	80 a1       	ldd	r24, Z+32	; 0x20
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	c8 17       	cp	r28, r24
     efa:	d9 07       	cpc	r29, r25
     efc:	ec f2       	brlt	.-70     	; 0xeb8 <menu_printCurrentMenu+0x30>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	08 95       	ret

00000f08 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     f08:	80 55       	subi	r24, 0x50	; 80
     f0a:	e0 e0       	ldi	r30, 0x00	; 0
     f0c:	f0 e1       	ldi	r31, 0x10	; 16
     f0e:	80 83       	st	Z, r24
     f10:	86 2f       	mov	r24, r22
     f12:	8f 70       	andi	r24, 0x0F	; 15
     f14:	80 83       	st	Z, r24
     f16:	62 95       	swap	r22
     f18:	6f 70       	andi	r22, 0x0F	; 15
     f1a:	60 61       	ori	r22, 0x10	; 16
     f1c:	60 83       	st	Z, r22
     f1e:	08 95       	ret

00000f20 <oled_reset>:
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	10 e0       	ldi	r17, 0x00	; 0
     f28:	c0 e0       	ldi	r28, 0x00	; 0
     f2a:	d2 e1       	ldi	r29, 0x12	; 18
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	81 2f       	mov	r24, r17
     f30:	0e 94 84 07 	call	0xf08	; 0xf08 <oled_pos>
     f34:	80 e8       	ldi	r24, 0x80	; 128
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	18 82       	st	Y, r1
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	e9 f7       	brne	.-6      	; 0xf38 <oled_reset+0x18>
     f3e:	1f 5f       	subi	r17, 0xFF	; 255
     f40:	18 30       	cpi	r17, 0x08	; 8
     f42:	a1 f7       	brne	.-24     	; 0xf2c <oled_reset+0xc>
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	08 95       	ret

00000f4c <oled_print_arrow>:
     f4c:	e0 e0       	ldi	r30, 0x00	; 0
     f4e:	f2 e1       	ldi	r31, 0x12	; 18
     f50:	88 e1       	ldi	r24, 0x18	; 24
     f52:	80 83       	st	Z, r24
     f54:	9c e3       	ldi	r25, 0x3C	; 60
     f56:	90 83       	st	Z, r25
     f58:	9e e7       	ldi	r25, 0x7E	; 126
     f5a:	90 83       	st	Z, r25
     f5c:	80 83       	st	Z, r24
     f5e:	80 83       	st	Z, r24
     f60:	08 95       	ret

00000f62 <oled_home>:
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	0e 94 84 07 	call	0xf08	; 0xf08 <oled_pos>
     f6a:	08 95       	ret

00000f6c <oled_init>:
     f6c:	e0 e0       	ldi	r30, 0x00	; 0
     f6e:	f0 e1       	ldi	r31, 0x10	; 16
     f70:	8e ea       	ldi	r24, 0xAE	; 174
     f72:	80 83       	st	Z, r24
     f74:	81 ea       	ldi	r24, 0xA1	; 161
     f76:	80 83       	st	Z, r24
     f78:	8a ed       	ldi	r24, 0xDA	; 218
     f7a:	80 83       	st	Z, r24
     f7c:	82 e1       	ldi	r24, 0x12	; 18
     f7e:	80 83       	st	Z, r24
     f80:	88 ec       	ldi	r24, 0xC8	; 200
     f82:	80 83       	st	Z, r24
     f84:	88 ea       	ldi	r24, 0xA8	; 168
     f86:	80 83       	st	Z, r24
     f88:	8f e3       	ldi	r24, 0x3F	; 63
     f8a:	80 83       	st	Z, r24
     f8c:	85 ed       	ldi	r24, 0xD5	; 213
     f8e:	80 83       	st	Z, r24
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	80 83       	st	Z, r24
     f94:	81 e8       	ldi	r24, 0x81	; 129
     f96:	80 83       	st	Z, r24
     f98:	80 e5       	ldi	r24, 0x50	; 80
     f9a:	80 83       	st	Z, r24
     f9c:	89 ed       	ldi	r24, 0xD9	; 217
     f9e:	80 83       	st	Z, r24
     fa0:	81 e2       	ldi	r24, 0x21	; 33
     fa2:	80 83       	st	Z, r24
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	80 83       	st	Z, r24
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	80 83       	st	Z, r24
     fac:	8b ed       	ldi	r24, 0xDB	; 219
     fae:	80 83       	st	Z, r24
     fb0:	80 e3       	ldi	r24, 0x30	; 48
     fb2:	80 83       	st	Z, r24
     fb4:	8d ea       	ldi	r24, 0xAD	; 173
     fb6:	80 83       	st	Z, r24
     fb8:	10 82       	st	Z, r1
     fba:	84 ea       	ldi	r24, 0xA4	; 164
     fbc:	80 83       	st	Z, r24
     fbe:	86 ea       	ldi	r24, 0xA6	; 166
     fc0:	80 83       	st	Z, r24
     fc2:	8f ea       	ldi	r24, 0xAF	; 175
     fc4:	80 83       	st	Z, r24
     fc6:	0e 94 90 07 	call	0xf20	; 0xf20 <oled_reset>
     fca:	0e 94 b1 07 	call	0xf62	; 0xf62 <oled_home>
     fce:	08 95       	ret

00000fd0 <oled_gotoLine>:
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	0e 94 84 07 	call	0xf08	; 0xf08 <oled_pos>
     fd6:	08 95       	ret

00000fd8 <oled_print>:

void oled_print(char* character){
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	dc 01       	movw	r26, r24
	while (*character != '\0')
     fde:	8c 91       	ld	r24, X
     fe0:	81 11       	cpse	r24, r1
     fe2:	1a c0       	rjmp	.+52     	; 0x1018 <oled_print+0x40>
     fe4:	1e c0       	rjmp	.+60     	; 0x1022 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     fe6:	ec 91       	ld	r30, X
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	b0 97       	sbiw	r30, 0x20	; 32
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	e2 56       	subi	r30, 0x62	; 98
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1002:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    1004:	2f 5f       	subi	r18, 0xFF	; 255
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
    1008:	28 30       	cpi	r18, 0x08	; 8
    100a:	31 05       	cpc	r19, r1
    100c:	61 f7       	brne	.-40     	; 0xfe6 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    100e:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    1010:	8c 91       	ld	r24, X
    1012:	81 11       	cpse	r24, r1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <oled_print+0x44>
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    1018:	c0 e0       	ldi	r28, 0x00	; 0
    101a:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	e2 cf       	rjmp	.-60     	; 0xfe6 <oled_print+0xe>
		}
		character++;
	}
	
	
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "game.h"

	void setupInit(void){
	cli();
    1028:	f8 94       	cli
	xmem_init();
    102a:	0e 94 10 09 	call	0x1220	; 0x1220 <xmem_init>
	USART_init(MYUBRR);
    102e:	8f e1       	ldi	r24, 0x1F	; 31
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 ff 08 	call	0x11fe	; 0x11fe <USART_init>
	adcInit();
    1036:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
    103a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <joystickInit>
	touchButton_init();
    103e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <touchButton_init>
	oled_init();
    1042:	0e 94 b6 07 	call	0xf6c	; 0xf6c <oled_init>
	printf("After oledinit\n\r");
    1046:	8b e4       	ldi	r24, 0x4B	; 75
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	9f 93       	push	r25
    104c:	8f 93       	push	r24
    104e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	timer_init();
    1052:	0e 94 c4 08 	call	0x1188	; 0x1188 <timer_init>
	sleep_init();
    1056:	0e 94 38 05 	call	0xa70	; 0xa70 <sleep_init>
	//menuInit();
	this_init();
    105a:	0e 94 75 06 	call	0xcea	; 0xcea <this_init>
	printf("Finished this");
    105e:	8c e5       	ldi	r24, 0x5C	; 92
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	9f 93       	push	r25
    1064:	8f 93       	push	r24
    1066:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	CAN_controller_init();
    106a:	0e 94 00 04 	call	0x800	; 0x800 <CAN_controller_init>
	//pwm_init(); uncommenting this breaks can on node 2.
	game_init();
    106e:	0e 94 32 04 	call	0x864	; 0x864 <game_init>
	sei();
    1072:	78 94       	sei
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	08 95       	ret

0000107e <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
    1088:	c7 e8       	ldi	r28, 0x87	; 135
    108a:	d2 e0       	ldi	r29, 0x02	; 2
    108c:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
    1094:	89 83       	std	Y+1, r24	; 0x01
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    109c:	87 b3       	in	r24, 0x17	; 23
    109e:	80 6a       	ori	r24, 0xA0	; 160
    10a0:	87 bb       	out	0x17, r24	; 23
    10a2:	bc 9a       	sbi	0x17, 4	; 23
    10a4:	8d b1       	in	r24, 0x0d	; 13
    10a6:	81 65       	ori	r24, 0x51	; 81
    10a8:	8d b9       	out	0x0d, r24	; 13
    10aa:	c4 9a       	sbi	0x18, 4	; 24
    10ac:	08 95       	ret

000010ae <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    10ae:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    10b0:	77 9b       	sbis	0x0e, 7	; 14
    10b2:	fe cf       	rjmp	.-4      	; 0x10b0 <SPI_masterWrite+0x2>

}
    10b4:	08 95       	ret

000010b6 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    10b6:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    10b8:	77 9b       	sbis	0x0e, 7	; 14
    10ba:	fe cf       	rjmp	.-4      	; 0x10b8 <SPI_masterRead+0x2>
	return SPDR;
    10bc:	8f b1       	in	r24, 0x0f	; 15
}
    10be:	08 95       	ret

000010c0 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    10c0:	66 23       	and	r22, r22
    10c2:	69 f0       	breq	.+26     	; 0x10de <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    10c4:	48 b3       	in	r20, 0x18	; 24
    10c6:	21 e0       	ldi	r18, 0x01	; 1
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	b9 01       	movw	r22, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <SPI_setChipSelect+0x12>
    10ce:	66 0f       	add	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	8a 95       	dec	r24
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <SPI_setChipSelect+0xe>
    10d6:	cb 01       	movw	r24, r22
    10d8:	84 2b       	or	r24, r20
    10da:	88 bb       	out	0x18, r24	; 24
    10dc:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    10de:	48 b3       	in	r20, 0x18	; 24
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	b9 01       	movw	r22, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <SPI_setChipSelect+0x2c>
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	8a 95       	dec	r24
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <SPI_setChipSelect+0x28>
    10f0:	cb 01       	movw	r24, r22
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	88 bb       	out	0x18, r24	; 24
    10f8:	08 95       	ret

000010fa <__vector_14>:
#include "touchButton.h"
#include "menu.h"
#include "game.h"


ISR (TIMER1_COMPB_vect) {
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	2f 93       	push	r18
    1106:	3f 93       	push	r19
    1108:	4f 93       	push	r20
    110a:	5f 93       	push	r21
    110c:	6f 93       	push	r22
    110e:	7f 93       	push	r23
    1110:	8f 93       	push	r24
    1112:	9f 93       	push	r25
    1114:	af 93       	push	r26
    1116:	bf 93       	push	r27
    1118:	ef 93       	push	r30
    111a:	ff 93       	push	r31
	cli();
    111c:	f8 94       	cli
	TCNT1 = 0x00;
    111e:	1d bc       	out	0x2d, r1	; 45
    1120:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    1122:	8d e7       	ldi	r24, 0x7D	; 125
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 58 05 	call	0xab0	; 0xab0 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    112a:	87 e8       	ldi	r24, 0x87	; 135
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	0e 94 3f 08 	call	0x107e	; 0x107e <slider_readPosition>
	touchButton_readButtons(&buttons);
    1132:	85 e8       	ldi	r24, 0x85	; 133
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <touchButton_readButtons>
	if(gameActive==0){
    113a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <gameActive>
    113e:	81 11       	cpse	r24, r1
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <__vector_14+0x66>
		printf("Game not active");
    1142:	8a e6       	ldi	r24, 0x6A	; 106
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
		navigateMenu(&joystick_pos);
    114e:	8d e7       	ldi	r24, 0x7D	; 125
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	0e 94 0f 06 	call	0xc1e	; 0xc1e <navigateMenu>
		menu_printCurrentMenu();
    1156:	0e 94 44 07 	call	0xe88	; 0xe88 <menu_printCurrentMenu>
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <__vector_14+0x6a>
	}
	else{
		game_updateOled();
    1160:	0e 94 d7 04 	call	0x9ae	; 0x9ae <game_updateOled>
	}
	sei();
    1164:	78 94       	sei
}
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1188:	89 b7       	in	r24, 0x39	; 57
    118a:	80 62       	ori	r24, 0x20	; 32
    118c:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    118e:	1d bc       	out	0x2d, r1	; 45
    1190:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1192:	80 e3       	ldi	r24, 0x30	; 48
    1194:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1196:	85 e0       	ldi	r24, 0x05	; 5
    1198:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    119a:	80 ee       	ldi	r24, 0xE0	; 224
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	99 bd       	out	0x29, r25	; 41
    11a0:	88 bd       	out	0x28, r24	; 40
    11a2:	08 95       	ret

000011a4 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    11a4:	36 b3       	in	r19, 0x16	; 22
    11a6:	26 b3       	in	r18, 0x16	; 22
    11a8:	47 b3       	in	r20, 0x17	; 23
    11aa:	32 70       	andi	r19, 0x02	; 2
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	bc 01       	movw	r22, r24
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <touchButton_init+0x14>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	3a 95       	dec	r19
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <touchButton_init+0x10>
    11bc:	24 70       	andi	r18, 0x04	; 4
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <touchButton_init+0x20>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	2a 95       	dec	r18
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <touchButton_init+0x1c>
    11c8:	86 2b       	or	r24, r22
    11ca:	97 2b       	or	r25, r23
    11cc:	80 95       	com	r24
    11ce:	90 95       	com	r25
    11d0:	84 23       	and	r24, r20
    11d2:	87 bb       	out	0x17, r24	; 23
    11d4:	08 95       	ret

000011d6 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    11d6:	86 b3       	in	r24, 0x16	; 22
    11d8:	e5 e8       	ldi	r30, 0x85	; 133
    11da:	f2 e0       	ldi	r31, 0x02	; 2
    11dc:	86 95       	lsr	r24
    11de:	81 70       	andi	r24, 0x01	; 1
    11e0:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    11e2:	86 b3       	in	r24, 0x16	; 22
    11e4:	82 fb       	bst	r24, 2
    11e6:	88 27       	eor	r24, r24
    11e8:	80 f9       	bld	r24, 0
    11ea:	81 83       	std	Z+1, r24	; 0x01
    11ec:	08 95       	ret

000011ee <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    11ee:	5d 9b       	sbis	0x0b, 5	; 11
    11f0:	fe cf       	rjmp	.-4      	; 0x11ee <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    11f2:	8c b9       	out	0x0c, r24	; 12
    11f4:	08 95       	ret

000011f6 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    11f6:	5f 9b       	sbis	0x0b, 7	; 11
    11f8:	fe cf       	rjmp	.-4      	; 0x11f6 <USART_receiveChar>
		;
	
	return UDR0;
    11fa:	8c b1       	in	r24, 0x0c	; 12
    11fc:	08 95       	ret

000011fe <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    11fe:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    1200:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    1202:	88 e1       	ldi	r24, 0x18	; 24
    1204:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1206:	8e e8       	ldi	r24, 0x8E	; 142
    1208:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    120a:	6b ef       	ldi	r22, 0xFB	; 251
    120c:	78 e0       	ldi	r23, 0x08	; 8
    120e:	87 ef       	ldi	r24, 0xF7	; 247
    1210:	98 e0       	ldi	r25, 0x08	; 8
    1212:	0e 94 19 0c 	call	0x1832	; 0x1832 <fdevopen>
    1216:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <uart+0x1>
    121a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <uart>
    121e:	08 95       	ret

00001220 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1220:	85 b7       	in	r24, 0x35	; 53
    1222:	80 68       	ori	r24, 0x80	; 128
    1224:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1226:	80 b7       	in	r24, 0x30	; 48
    1228:	88 60       	ori	r24, 0x08	; 8
    122a:	80 bf       	out	0x30, r24	; 48
    122c:	08 95       	ret
    122e:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscA>
    1232:	60 f0       	brcs	.+24     	; 0x124c <xmem_init+0x2c>
    1234:	80 e8       	ldi	r24, 0x80	; 128
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	09 f4       	brne	.+2      	; 0x123c <xmem_init+0x1c>
    123a:	9e ef       	ldi	r25, 0xFE	; 254
    123c:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_pscB>
    1240:	28 f0       	brcs	.+10     	; 0x124c <xmem_init+0x2c>
    1242:	40 e8       	ldi	r20, 0x80	; 128
    1244:	51 e0       	ldi	r21, 0x01	; 1
    1246:	71 f4       	brne	.+28     	; 0x1264 <atan2+0x10>
    1248:	5e ef       	ldi	r21, 0xFE	; 254
    124a:	0c c0       	rjmp	.+24     	; 0x1264 <atan2+0x10>
    124c:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_nan>
    1250:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_zero>

00001254 <atan2>:
    1254:	e9 2f       	mov	r30, r25
    1256:	e0 78       	andi	r30, 0x80	; 128
    1258:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_split3>
    125c:	40 f3       	brcs	.-48     	; 0x122e <xmem_init+0xe>
    125e:	09 2e       	mov	r0, r25
    1260:	05 2a       	or	r0, r21
    1262:	b1 f3       	breq	.-20     	; 0x1250 <xmem_init+0x30>
    1264:	26 17       	cp	r18, r22
    1266:	37 07       	cpc	r19, r23
    1268:	48 07       	cpc	r20, r24
    126a:	59 07       	cpc	r21, r25
    126c:	38 f0       	brcs	.+14     	; 0x127c <atan2+0x28>
    126e:	0e 2e       	mov	r0, r30
    1270:	07 f8       	bld	r0, 7
    1272:	e0 25       	eor	r30, r0
    1274:	69 f0       	breq	.+26     	; 0x1290 <atan2+0x3c>
    1276:	e0 25       	eor	r30, r0
    1278:	e0 64       	ori	r30, 0x40	; 64
    127a:	0a c0       	rjmp	.+20     	; 0x1290 <atan2+0x3c>
    127c:	ef 63       	ori	r30, 0x3F	; 63
    127e:	07 f8       	bld	r0, 7
    1280:	00 94       	com	r0
    1282:	07 fa       	bst	r0, 7
    1284:	db 01       	movw	r26, r22
    1286:	b9 01       	movw	r22, r18
    1288:	9d 01       	movw	r18, r26
    128a:	dc 01       	movw	r26, r24
    128c:	ca 01       	movw	r24, r20
    128e:	ad 01       	movw	r20, r26
    1290:	ef 93       	push	r30
    1292:	0e 94 a0 09 	call	0x1340	; 0x1340 <__divsf3_pse>
    1296:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_round>
    129a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <atan>
    129e:	5f 91       	pop	r21
    12a0:	55 23       	and	r21, r21
    12a2:	39 f0       	breq	.+14     	; 0x12b2 <atan2+0x5e>
    12a4:	2b ed       	ldi	r18, 0xDB	; 219
    12a6:	3f e0       	ldi	r19, 0x0F	; 15
    12a8:	49 e4       	ldi	r20, 0x49	; 73
    12aa:	50 fd       	sbrc	r21, 0
    12ac:	49 ec       	ldi	r20, 0xC9	; 201
    12ae:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__addsf3>
    12b2:	08 95       	ret

000012b4 <atan>:
    12b4:	df 93       	push	r29
    12b6:	dd 27       	eor	r29, r29
    12b8:	b9 2f       	mov	r27, r25
    12ba:	bf 77       	andi	r27, 0x7F	; 127
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	5f e3       	ldi	r21, 0x3F	; 63
    12c0:	16 16       	cp	r1, r22
    12c2:	17 06       	cpc	r1, r23
    12c4:	48 07       	cpc	r20, r24
    12c6:	5b 07       	cpc	r21, r27
    12c8:	18 f4       	brcc	.+6      	; 0x12d0 <atan+0x1c>
    12ca:	d9 2f       	mov	r29, r25
    12cc:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <inverse>
    12d0:	9f 93       	push	r25
    12d2:	8f 93       	push	r24
    12d4:	7f 93       	push	r23
    12d6:	6f 93       	push	r22
    12d8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <square>
    12dc:	e0 e7       	ldi	r30, 0x70	; 112
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__fp_powser>
    12e4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_round>
    12e8:	2f 91       	pop	r18
    12ea:	3f 91       	pop	r19
    12ec:	4f 91       	pop	r20
    12ee:	5f 91       	pop	r21
    12f0:	0e 94 01 0b 	call	0x1602	; 0x1602 <__mulsf3x>
    12f4:	dd 23       	and	r29, r29
    12f6:	51 f0       	breq	.+20     	; 0x130c <atan+0x58>
    12f8:	90 58       	subi	r25, 0x80	; 128
    12fa:	a2 ea       	ldi	r26, 0xA2	; 162
    12fc:	2a ed       	ldi	r18, 0xDA	; 218
    12fe:	3f e0       	ldi	r19, 0x0F	; 15
    1300:	49 ec       	ldi	r20, 0xC9	; 201
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	d0 78       	andi	r29, 0x80	; 128
    1306:	5d 27       	eor	r21, r29
    1308:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__addsf3x>
    130c:	df 91       	pop	r29
    130e:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_round>

00001312 <__divsf3>:
    1312:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3x>
    1316:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_round>
    131a:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_pscB>
    131e:	58 f0       	brcs	.+22     	; 0x1336 <__divsf3+0x24>
    1320:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscA>
    1324:	40 f0       	brcs	.+16     	; 0x1336 <__divsf3+0x24>
    1326:	29 f4       	brne	.+10     	; 0x1332 <__divsf3+0x20>
    1328:	5f 3f       	cpi	r21, 0xFF	; 255
    132a:	29 f0       	breq	.+10     	; 0x1336 <__divsf3+0x24>
    132c:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_inf>
    1330:	51 11       	cpse	r21, r1
    1332:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>
    1336:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_nan>

0000133a <__divsf3x>:
    133a:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_split3>
    133e:	68 f3       	brcs	.-38     	; 0x131a <__divsf3+0x8>

00001340 <__divsf3_pse>:
    1340:	99 23       	and	r25, r25
    1342:	b1 f3       	breq	.-20     	; 0x1330 <__divsf3+0x1e>
    1344:	55 23       	and	r21, r21
    1346:	91 f3       	breq	.-28     	; 0x132c <__divsf3+0x1a>
    1348:	95 1b       	sub	r25, r21
    134a:	55 0b       	sbc	r21, r21
    134c:	bb 27       	eor	r27, r27
    134e:	aa 27       	eor	r26, r26
    1350:	62 17       	cp	r22, r18
    1352:	73 07       	cpc	r23, r19
    1354:	84 07       	cpc	r24, r20
    1356:	38 f0       	brcs	.+14     	; 0x1366 <__divsf3_pse+0x26>
    1358:	9f 5f       	subi	r25, 0xFF	; 255
    135a:	5f 4f       	sbci	r21, 0xFF	; 255
    135c:	22 0f       	add	r18, r18
    135e:	33 1f       	adc	r19, r19
    1360:	44 1f       	adc	r20, r20
    1362:	aa 1f       	adc	r26, r26
    1364:	a9 f3       	breq	.-22     	; 0x1350 <__divsf3_pse+0x10>
    1366:	35 d0       	rcall	.+106    	; 0x13d2 <__divsf3_pse+0x92>
    1368:	0e 2e       	mov	r0, r30
    136a:	3a f0       	brmi	.+14     	; 0x137a <__divsf3_pse+0x3a>
    136c:	e0 e8       	ldi	r30, 0x80	; 128
    136e:	32 d0       	rcall	.+100    	; 0x13d4 <__divsf3_pse+0x94>
    1370:	91 50       	subi	r25, 0x01	; 1
    1372:	50 40       	sbci	r21, 0x00	; 0
    1374:	e6 95       	lsr	r30
    1376:	00 1c       	adc	r0, r0
    1378:	ca f7       	brpl	.-14     	; 0x136c <__divsf3_pse+0x2c>
    137a:	2b d0       	rcall	.+86     	; 0x13d2 <__divsf3_pse+0x92>
    137c:	fe 2f       	mov	r31, r30
    137e:	29 d0       	rcall	.+82     	; 0x13d2 <__divsf3_pse+0x92>
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	bb 1f       	adc	r27, r27
    1388:	26 17       	cp	r18, r22
    138a:	37 07       	cpc	r19, r23
    138c:	48 07       	cpc	r20, r24
    138e:	ab 07       	cpc	r26, r27
    1390:	b0 e8       	ldi	r27, 0x80	; 128
    1392:	09 f0       	breq	.+2      	; 0x1396 <__divsf3_pse+0x56>
    1394:	bb 0b       	sbc	r27, r27
    1396:	80 2d       	mov	r24, r0
    1398:	bf 01       	movw	r22, r30
    139a:	ff 27       	eor	r31, r31
    139c:	93 58       	subi	r25, 0x83	; 131
    139e:	5f 4f       	sbci	r21, 0xFF	; 255
    13a0:	3a f0       	brmi	.+14     	; 0x13b0 <__divsf3_pse+0x70>
    13a2:	9e 3f       	cpi	r25, 0xFE	; 254
    13a4:	51 05       	cpc	r21, r1
    13a6:	78 f0       	brcs	.+30     	; 0x13c6 <__divsf3_pse+0x86>
    13a8:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_inf>
    13ac:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>
    13b0:	5f 3f       	cpi	r21, 0xFF	; 255
    13b2:	e4 f3       	brlt	.-8      	; 0x13ac <__divsf3_pse+0x6c>
    13b4:	98 3e       	cpi	r25, 0xE8	; 232
    13b6:	d4 f3       	brlt	.-12     	; 0x13ac <__divsf3_pse+0x6c>
    13b8:	86 95       	lsr	r24
    13ba:	77 95       	ror	r23
    13bc:	67 95       	ror	r22
    13be:	b7 95       	ror	r27
    13c0:	f7 95       	ror	r31
    13c2:	9f 5f       	subi	r25, 0xFF	; 255
    13c4:	c9 f7       	brne	.-14     	; 0x13b8 <__divsf3_pse+0x78>
    13c6:	88 0f       	add	r24, r24
    13c8:	91 1d       	adc	r25, r1
    13ca:	96 95       	lsr	r25
    13cc:	87 95       	ror	r24
    13ce:	97 f9       	bld	r25, 7
    13d0:	08 95       	ret
    13d2:	e1 e0       	ldi	r30, 0x01	; 1
    13d4:	66 0f       	add	r22, r22
    13d6:	77 1f       	adc	r23, r23
    13d8:	88 1f       	adc	r24, r24
    13da:	bb 1f       	adc	r27, r27
    13dc:	62 17       	cp	r22, r18
    13de:	73 07       	cpc	r23, r19
    13e0:	84 07       	cpc	r24, r20
    13e2:	ba 07       	cpc	r27, r26
    13e4:	20 f0       	brcs	.+8      	; 0x13ee <__divsf3_pse+0xae>
    13e6:	62 1b       	sub	r22, r18
    13e8:	73 0b       	sbc	r23, r19
    13ea:	84 0b       	sbc	r24, r20
    13ec:	ba 0b       	sbc	r27, r26
    13ee:	ee 1f       	adc	r30, r30
    13f0:	88 f7       	brcc	.-30     	; 0x13d4 <__divsf3_pse+0x94>
    13f2:	e0 95       	com	r30
    13f4:	08 95       	ret

000013f6 <__fixsfsi>:
    13f6:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fixunssfsi>
    13fa:	68 94       	set
    13fc:	b1 11       	cpse	r27, r1
    13fe:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>
    1402:	08 95       	ret

00001404 <__fixunssfsi>:
    1404:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_splitA>
    1408:	88 f0       	brcs	.+34     	; 0x142c <__fixunssfsi+0x28>
    140a:	9f 57       	subi	r25, 0x7F	; 127
    140c:	98 f0       	brcs	.+38     	; 0x1434 <__fixunssfsi+0x30>
    140e:	b9 2f       	mov	r27, r25
    1410:	99 27       	eor	r25, r25
    1412:	b7 51       	subi	r27, 0x17	; 23
    1414:	b0 f0       	brcs	.+44     	; 0x1442 <__fixunssfsi+0x3e>
    1416:	e1 f0       	breq	.+56     	; 0x1450 <__fixunssfsi+0x4c>
    1418:	66 0f       	add	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	1a f0       	brmi	.+6      	; 0x1428 <__fixunssfsi+0x24>
    1422:	ba 95       	dec	r27
    1424:	c9 f7       	brne	.-14     	; 0x1418 <__fixunssfsi+0x14>
    1426:	14 c0       	rjmp	.+40     	; 0x1450 <__fixunssfsi+0x4c>
    1428:	b1 30       	cpi	r27, 0x01	; 1
    142a:	91 f0       	breq	.+36     	; 0x1450 <__fixunssfsi+0x4c>
    142c:	0e 94 df 0a 	call	0x15be	; 0x15be <__fp_zero>
    1430:	b1 e0       	ldi	r27, 0x01	; 1
    1432:	08 95       	ret
    1434:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_zero>
    1438:	67 2f       	mov	r22, r23
    143a:	78 2f       	mov	r23, r24
    143c:	88 27       	eor	r24, r24
    143e:	b8 5f       	subi	r27, 0xF8	; 248
    1440:	39 f0       	breq	.+14     	; 0x1450 <__fixunssfsi+0x4c>
    1442:	b9 3f       	cpi	r27, 0xF9	; 249
    1444:	cc f3       	brlt	.-14     	; 0x1438 <__fixunssfsi+0x34>
    1446:	86 95       	lsr	r24
    1448:	77 95       	ror	r23
    144a:	67 95       	ror	r22
    144c:	b3 95       	inc	r27
    144e:	d9 f7       	brne	.-10     	; 0x1446 <__fixunssfsi+0x42>
    1450:	3e f4       	brtc	.+14     	; 0x1460 <__fixunssfsi+0x5c>
    1452:	90 95       	com	r25
    1454:	80 95       	com	r24
    1456:	70 95       	com	r23
    1458:	61 95       	neg	r22
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	8f 4f       	sbci	r24, 0xFF	; 255
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	08 95       	ret

00001462 <__floatunsisf>:
    1462:	e8 94       	clt
    1464:	09 c0       	rjmp	.+18     	; 0x1478 <__floatsisf+0x12>

00001466 <__floatsisf>:
    1466:	97 fb       	bst	r25, 7
    1468:	3e f4       	brtc	.+14     	; 0x1478 <__floatsisf+0x12>
    146a:	90 95       	com	r25
    146c:	80 95       	com	r24
    146e:	70 95       	com	r23
    1470:	61 95       	neg	r22
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	8f 4f       	sbci	r24, 0xFF	; 255
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	99 23       	and	r25, r25
    147a:	a9 f0       	breq	.+42     	; 0x14a6 <__floatsisf+0x40>
    147c:	f9 2f       	mov	r31, r25
    147e:	96 e9       	ldi	r25, 0x96	; 150
    1480:	bb 27       	eor	r27, r27
    1482:	93 95       	inc	r25
    1484:	f6 95       	lsr	r31
    1486:	87 95       	ror	r24
    1488:	77 95       	ror	r23
    148a:	67 95       	ror	r22
    148c:	b7 95       	ror	r27
    148e:	f1 11       	cpse	r31, r1
    1490:	f8 cf       	rjmp	.-16     	; 0x1482 <__floatsisf+0x1c>
    1492:	fa f4       	brpl	.+62     	; 0x14d2 <__floatsisf+0x6c>
    1494:	bb 0f       	add	r27, r27
    1496:	11 f4       	brne	.+4      	; 0x149c <__floatsisf+0x36>
    1498:	60 ff       	sbrs	r22, 0
    149a:	1b c0       	rjmp	.+54     	; 0x14d2 <__floatsisf+0x6c>
    149c:	6f 5f       	subi	r22, 0xFF	; 255
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	8f 4f       	sbci	r24, 0xFF	; 255
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	16 c0       	rjmp	.+44     	; 0x14d2 <__floatsisf+0x6c>
    14a6:	88 23       	and	r24, r24
    14a8:	11 f0       	breq	.+4      	; 0x14ae <__floatsisf+0x48>
    14aa:	96 e9       	ldi	r25, 0x96	; 150
    14ac:	11 c0       	rjmp	.+34     	; 0x14d0 <__floatsisf+0x6a>
    14ae:	77 23       	and	r23, r23
    14b0:	21 f0       	breq	.+8      	; 0x14ba <__floatsisf+0x54>
    14b2:	9e e8       	ldi	r25, 0x8E	; 142
    14b4:	87 2f       	mov	r24, r23
    14b6:	76 2f       	mov	r23, r22
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <__floatsisf+0x5e>
    14ba:	66 23       	and	r22, r22
    14bc:	71 f0       	breq	.+28     	; 0x14da <__floatsisf+0x74>
    14be:	96 e8       	ldi	r25, 0x86	; 134
    14c0:	86 2f       	mov	r24, r22
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	2a f0       	brmi	.+10     	; 0x14d2 <__floatsisf+0x6c>
    14c8:	9a 95       	dec	r25
    14ca:	66 0f       	add	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	da f7       	brpl	.-10     	; 0x14c8 <__floatsisf+0x62>
    14d2:	88 0f       	add	r24, r24
    14d4:	96 95       	lsr	r25
    14d6:	87 95       	ror	r24
    14d8:	97 f9       	bld	r25, 7
    14da:	08 95       	ret

000014dc <__fp_inf>:
    14dc:	97 f9       	bld	r25, 7
    14de:	9f 67       	ori	r25, 0x7F	; 127
    14e0:	80 e8       	ldi	r24, 0x80	; 128
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	08 95       	ret

000014e8 <__fp_nan>:
    14e8:	9f ef       	ldi	r25, 0xFF	; 255
    14ea:	80 ec       	ldi	r24, 0xC0	; 192
    14ec:	08 95       	ret

000014ee <__fp_powser>:
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	1f 93       	push	r17
    14f4:	0f 93       	push	r16
    14f6:	ff 92       	push	r15
    14f8:	ef 92       	push	r14
    14fa:	df 92       	push	r13
    14fc:	7b 01       	movw	r14, r22
    14fe:	8c 01       	movw	r16, r24
    1500:	68 94       	set
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <__fp_powser+0x22>
    1504:	da 2e       	mov	r13, r26
    1506:	ef 01       	movw	r28, r30
    1508:	0e 94 01 0b 	call	0x1602	; 0x1602 <__mulsf3x>
    150c:	fe 01       	movw	r30, r28
    150e:	e8 94       	clt
    1510:	a5 91       	lpm	r26, Z+
    1512:	25 91       	lpm	r18, Z+
    1514:	35 91       	lpm	r19, Z+
    1516:	45 91       	lpm	r20, Z+
    1518:	55 91       	lpm	r21, Z+
    151a:	a6 f3       	brts	.-24     	; 0x1504 <__fp_powser+0x16>
    151c:	ef 01       	movw	r28, r30
    151e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__addsf3x>
    1522:	fe 01       	movw	r30, r28
    1524:	97 01       	movw	r18, r14
    1526:	a8 01       	movw	r20, r16
    1528:	da 94       	dec	r13
    152a:	69 f7       	brne	.-38     	; 0x1506 <__fp_powser+0x18>
    152c:	df 90       	pop	r13
    152e:	ef 90       	pop	r14
    1530:	ff 90       	pop	r15
    1532:	0f 91       	pop	r16
    1534:	1f 91       	pop	r17
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <__fp_pscA>:
    153c:	00 24       	eor	r0, r0
    153e:	0a 94       	dec	r0
    1540:	16 16       	cp	r1, r22
    1542:	17 06       	cpc	r1, r23
    1544:	18 06       	cpc	r1, r24
    1546:	09 06       	cpc	r0, r25
    1548:	08 95       	ret

0000154a <__fp_pscB>:
    154a:	00 24       	eor	r0, r0
    154c:	0a 94       	dec	r0
    154e:	12 16       	cp	r1, r18
    1550:	13 06       	cpc	r1, r19
    1552:	14 06       	cpc	r1, r20
    1554:	05 06       	cpc	r0, r21
    1556:	08 95       	ret

00001558 <__fp_round>:
    1558:	09 2e       	mov	r0, r25
    155a:	03 94       	inc	r0
    155c:	00 0c       	add	r0, r0
    155e:	11 f4       	brne	.+4      	; 0x1564 <__fp_round+0xc>
    1560:	88 23       	and	r24, r24
    1562:	52 f0       	brmi	.+20     	; 0x1578 <__fp_round+0x20>
    1564:	bb 0f       	add	r27, r27
    1566:	40 f4       	brcc	.+16     	; 0x1578 <__fp_round+0x20>
    1568:	bf 2b       	or	r27, r31
    156a:	11 f4       	brne	.+4      	; 0x1570 <__fp_round+0x18>
    156c:	60 ff       	sbrs	r22, 0
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <__fp_round+0x20>
    1570:	6f 5f       	subi	r22, 0xFF	; 255
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	08 95       	ret

0000157a <__fp_split3>:
    157a:	57 fd       	sbrc	r21, 7
    157c:	90 58       	subi	r25, 0x80	; 128
    157e:	44 0f       	add	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	59 f0       	breq	.+22     	; 0x159a <__fp_splitA+0x10>
    1584:	5f 3f       	cpi	r21, 0xFF	; 255
    1586:	71 f0       	breq	.+28     	; 0x15a4 <__fp_splitA+0x1a>
    1588:	47 95       	ror	r20

0000158a <__fp_splitA>:
    158a:	88 0f       	add	r24, r24
    158c:	97 fb       	bst	r25, 7
    158e:	99 1f       	adc	r25, r25
    1590:	61 f0       	breq	.+24     	; 0x15aa <__fp_splitA+0x20>
    1592:	9f 3f       	cpi	r25, 0xFF	; 255
    1594:	79 f0       	breq	.+30     	; 0x15b4 <__fp_splitA+0x2a>
    1596:	87 95       	ror	r24
    1598:	08 95       	ret
    159a:	12 16       	cp	r1, r18
    159c:	13 06       	cpc	r1, r19
    159e:	14 06       	cpc	r1, r20
    15a0:	55 1f       	adc	r21, r21
    15a2:	f2 cf       	rjmp	.-28     	; 0x1588 <__fp_split3+0xe>
    15a4:	46 95       	lsr	r20
    15a6:	f1 df       	rcall	.-30     	; 0x158a <__fp_splitA>
    15a8:	08 c0       	rjmp	.+16     	; 0x15ba <__fp_splitA+0x30>
    15aa:	16 16       	cp	r1, r22
    15ac:	17 06       	cpc	r1, r23
    15ae:	18 06       	cpc	r1, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	f1 cf       	rjmp	.-30     	; 0x1596 <__fp_splitA+0xc>
    15b4:	86 95       	lsr	r24
    15b6:	71 05       	cpc	r23, r1
    15b8:	61 05       	cpc	r22, r1
    15ba:	08 94       	sec
    15bc:	08 95       	ret

000015be <__fp_zero>:
    15be:	e8 94       	clt

000015c0 <__fp_szero>:
    15c0:	bb 27       	eor	r27, r27
    15c2:	66 27       	eor	r22, r22
    15c4:	77 27       	eor	r23, r23
    15c6:	cb 01       	movw	r24, r22
    15c8:	97 f9       	bld	r25, 7
    15ca:	08 95       	ret

000015cc <inverse>:
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	80 e8       	ldi	r24, 0x80	; 128
    15d6:	9f e3       	ldi	r25, 0x3F	; 63
    15d8:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__divsf3>

000015dc <__mulsf3>:
    15dc:	0e 94 01 0b 	call	0x1602	; 0x1602 <__mulsf3x>
    15e0:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_round>
    15e4:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscA>
    15e8:	38 f0       	brcs	.+14     	; 0x15f8 <__mulsf3+0x1c>
    15ea:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_pscB>
    15ee:	20 f0       	brcs	.+8      	; 0x15f8 <__mulsf3+0x1c>
    15f0:	95 23       	and	r25, r21
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <__mulsf3+0x1c>
    15f4:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_inf>
    15f8:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_nan>
    15fc:	11 24       	eor	r1, r1
    15fe:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>

00001602 <__mulsf3x>:
    1602:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_split3>
    1606:	70 f3       	brcs	.-36     	; 0x15e4 <__mulsf3+0x8>

00001608 <__mulsf3_pse>:
    1608:	95 9f       	mul	r25, r21
    160a:	c1 f3       	breq	.-16     	; 0x15fc <__mulsf3+0x20>
    160c:	95 0f       	add	r25, r21
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	55 1f       	adc	r21, r21
    1612:	62 9f       	mul	r22, r18
    1614:	f0 01       	movw	r30, r0
    1616:	72 9f       	mul	r23, r18
    1618:	bb 27       	eor	r27, r27
    161a:	f0 0d       	add	r31, r0
    161c:	b1 1d       	adc	r27, r1
    161e:	63 9f       	mul	r22, r19
    1620:	aa 27       	eor	r26, r26
    1622:	f0 0d       	add	r31, r0
    1624:	b1 1d       	adc	r27, r1
    1626:	aa 1f       	adc	r26, r26
    1628:	64 9f       	mul	r22, r20
    162a:	66 27       	eor	r22, r22
    162c:	b0 0d       	add	r27, r0
    162e:	a1 1d       	adc	r26, r1
    1630:	66 1f       	adc	r22, r22
    1632:	82 9f       	mul	r24, r18
    1634:	22 27       	eor	r18, r18
    1636:	b0 0d       	add	r27, r0
    1638:	a1 1d       	adc	r26, r1
    163a:	62 1f       	adc	r22, r18
    163c:	73 9f       	mul	r23, r19
    163e:	b0 0d       	add	r27, r0
    1640:	a1 1d       	adc	r26, r1
    1642:	62 1f       	adc	r22, r18
    1644:	83 9f       	mul	r24, r19
    1646:	a0 0d       	add	r26, r0
    1648:	61 1d       	adc	r22, r1
    164a:	22 1f       	adc	r18, r18
    164c:	74 9f       	mul	r23, r20
    164e:	33 27       	eor	r19, r19
    1650:	a0 0d       	add	r26, r0
    1652:	61 1d       	adc	r22, r1
    1654:	23 1f       	adc	r18, r19
    1656:	84 9f       	mul	r24, r20
    1658:	60 0d       	add	r22, r0
    165a:	21 1d       	adc	r18, r1
    165c:	82 2f       	mov	r24, r18
    165e:	76 2f       	mov	r23, r22
    1660:	6a 2f       	mov	r22, r26
    1662:	11 24       	eor	r1, r1
    1664:	9f 57       	subi	r25, 0x7F	; 127
    1666:	50 40       	sbci	r21, 0x00	; 0
    1668:	9a f0       	brmi	.+38     	; 0x1690 <__mulsf3_pse+0x88>
    166a:	f1 f0       	breq	.+60     	; 0x16a8 <__mulsf3_pse+0xa0>
    166c:	88 23       	and	r24, r24
    166e:	4a f0       	brmi	.+18     	; 0x1682 <__mulsf3_pse+0x7a>
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	bb 1f       	adc	r27, r27
    1676:	66 1f       	adc	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	88 1f       	adc	r24, r24
    167c:	91 50       	subi	r25, 0x01	; 1
    167e:	50 40       	sbci	r21, 0x00	; 0
    1680:	a9 f7       	brne	.-22     	; 0x166c <__mulsf3_pse+0x64>
    1682:	9e 3f       	cpi	r25, 0xFE	; 254
    1684:	51 05       	cpc	r21, r1
    1686:	80 f0       	brcs	.+32     	; 0x16a8 <__mulsf3_pse+0xa0>
    1688:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_inf>
    168c:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>
    1690:	5f 3f       	cpi	r21, 0xFF	; 255
    1692:	e4 f3       	brlt	.-8      	; 0x168c <__mulsf3_pse+0x84>
    1694:	98 3e       	cpi	r25, 0xE8	; 232
    1696:	d4 f3       	brlt	.-12     	; 0x168c <__mulsf3_pse+0x84>
    1698:	86 95       	lsr	r24
    169a:	77 95       	ror	r23
    169c:	67 95       	ror	r22
    169e:	b7 95       	ror	r27
    16a0:	f7 95       	ror	r31
    16a2:	e7 95       	ror	r30
    16a4:	9f 5f       	subi	r25, 0xFF	; 255
    16a6:	c1 f7       	brne	.-16     	; 0x1698 <__mulsf3_pse+0x90>
    16a8:	fe 2b       	or	r31, r30
    16aa:	88 0f       	add	r24, r24
    16ac:	91 1d       	adc	r25, r1
    16ae:	96 95       	lsr	r25
    16b0:	87 95       	ror	r24
    16b2:	97 f9       	bld	r25, 7
    16b4:	08 95       	ret

000016b6 <square>:
    16b6:	9b 01       	movw	r18, r22
    16b8:	ac 01       	movw	r20, r24
    16ba:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__mulsf3>

000016be <__subsf3>:
    16be:	50 58       	subi	r21, 0x80	; 128

000016c0 <__addsf3>:
    16c0:	bb 27       	eor	r27, r27
    16c2:	aa 27       	eor	r26, r26
    16c4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__addsf3x>
    16c8:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_round>
    16cc:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscA>
    16d0:	38 f0       	brcs	.+14     	; 0x16e0 <__addsf3+0x20>
    16d2:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_pscB>
    16d6:	20 f0       	brcs	.+8      	; 0x16e0 <__addsf3+0x20>
    16d8:	39 f4       	brne	.+14     	; 0x16e8 <__addsf3+0x28>
    16da:	9f 3f       	cpi	r25, 0xFF	; 255
    16dc:	19 f4       	brne	.+6      	; 0x16e4 <__addsf3+0x24>
    16de:	26 f4       	brtc	.+8      	; 0x16e8 <__addsf3+0x28>
    16e0:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_nan>
    16e4:	0e f4       	brtc	.+2      	; 0x16e8 <__addsf3+0x28>
    16e6:	e0 95       	com	r30
    16e8:	e7 fb       	bst	r30, 7
    16ea:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_inf>

000016ee <__addsf3x>:
    16ee:	e9 2f       	mov	r30, r25
    16f0:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_split3>
    16f4:	58 f3       	brcs	.-42     	; 0x16cc <__addsf3+0xc>
    16f6:	ba 17       	cp	r27, r26
    16f8:	62 07       	cpc	r22, r18
    16fa:	73 07       	cpc	r23, r19
    16fc:	84 07       	cpc	r24, r20
    16fe:	95 07       	cpc	r25, r21
    1700:	20 f0       	brcs	.+8      	; 0x170a <__addsf3x+0x1c>
    1702:	79 f4       	brne	.+30     	; 0x1722 <__addsf3x+0x34>
    1704:	a6 f5       	brtc	.+104    	; 0x176e <__addsf3x+0x80>
    1706:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_zero>
    170a:	0e f4       	brtc	.+2      	; 0x170e <__addsf3x+0x20>
    170c:	e0 95       	com	r30
    170e:	0b 2e       	mov	r0, r27
    1710:	ba 2f       	mov	r27, r26
    1712:	a0 2d       	mov	r26, r0
    1714:	0b 01       	movw	r0, r22
    1716:	b9 01       	movw	r22, r18
    1718:	90 01       	movw	r18, r0
    171a:	0c 01       	movw	r0, r24
    171c:	ca 01       	movw	r24, r20
    171e:	a0 01       	movw	r20, r0
    1720:	11 24       	eor	r1, r1
    1722:	ff 27       	eor	r31, r31
    1724:	59 1b       	sub	r21, r25
    1726:	99 f0       	breq	.+38     	; 0x174e <__addsf3x+0x60>
    1728:	59 3f       	cpi	r21, 0xF9	; 249
    172a:	50 f4       	brcc	.+20     	; 0x1740 <__addsf3x+0x52>
    172c:	50 3e       	cpi	r21, 0xE0	; 224
    172e:	68 f1       	brcs	.+90     	; 0x178a <__addsf3x+0x9c>
    1730:	1a 16       	cp	r1, r26
    1732:	f0 40       	sbci	r31, 0x00	; 0
    1734:	a2 2f       	mov	r26, r18
    1736:	23 2f       	mov	r18, r19
    1738:	34 2f       	mov	r19, r20
    173a:	44 27       	eor	r20, r20
    173c:	58 5f       	subi	r21, 0xF8	; 248
    173e:	f3 cf       	rjmp	.-26     	; 0x1726 <__addsf3x+0x38>
    1740:	46 95       	lsr	r20
    1742:	37 95       	ror	r19
    1744:	27 95       	ror	r18
    1746:	a7 95       	ror	r26
    1748:	f0 40       	sbci	r31, 0x00	; 0
    174a:	53 95       	inc	r21
    174c:	c9 f7       	brne	.-14     	; 0x1740 <__addsf3x+0x52>
    174e:	7e f4       	brtc	.+30     	; 0x176e <__addsf3x+0x80>
    1750:	1f 16       	cp	r1, r31
    1752:	ba 0b       	sbc	r27, r26
    1754:	62 0b       	sbc	r22, r18
    1756:	73 0b       	sbc	r23, r19
    1758:	84 0b       	sbc	r24, r20
    175a:	ba f0       	brmi	.+46     	; 0x178a <__addsf3x+0x9c>
    175c:	91 50       	subi	r25, 0x01	; 1
    175e:	a1 f0       	breq	.+40     	; 0x1788 <__addsf3x+0x9a>
    1760:	ff 0f       	add	r31, r31
    1762:	bb 1f       	adc	r27, r27
    1764:	66 1f       	adc	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	c2 f7       	brpl	.-16     	; 0x175c <__addsf3x+0x6e>
    176c:	0e c0       	rjmp	.+28     	; 0x178a <__addsf3x+0x9c>
    176e:	ba 0f       	add	r27, r26
    1770:	62 1f       	adc	r22, r18
    1772:	73 1f       	adc	r23, r19
    1774:	84 1f       	adc	r24, r20
    1776:	48 f4       	brcc	.+18     	; 0x178a <__addsf3x+0x9c>
    1778:	87 95       	ror	r24
    177a:	77 95       	ror	r23
    177c:	67 95       	ror	r22
    177e:	b7 95       	ror	r27
    1780:	f7 95       	ror	r31
    1782:	9e 3f       	cpi	r25, 0xFE	; 254
    1784:	08 f0       	brcs	.+2      	; 0x1788 <__addsf3x+0x9a>
    1786:	b0 cf       	rjmp	.-160    	; 0x16e8 <__addsf3+0x28>
    1788:	93 95       	inc	r25
    178a:	88 0f       	add	r24, r24
    178c:	08 f0       	brcs	.+2      	; 0x1790 <__addsf3x+0xa2>
    178e:	99 27       	eor	r25, r25
    1790:	ee 0f       	add	r30, r30
    1792:	97 95       	ror	r25
    1794:	87 95       	ror	r24
    1796:	08 95       	ret

00001798 <__divmodhi4>:
    1798:	97 fb       	bst	r25, 7
    179a:	07 2e       	mov	r0, r23
    179c:	16 f4       	brtc	.+4      	; 0x17a2 <__divmodhi4+0xa>
    179e:	00 94       	com	r0
    17a0:	07 d0       	rcall	.+14     	; 0x17b0 <__divmodhi4_neg1>
    17a2:	77 fd       	sbrc	r23, 7
    17a4:	09 d0       	rcall	.+18     	; 0x17b8 <__divmodhi4_neg2>
    17a6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__udivmodhi4>
    17aa:	07 fc       	sbrc	r0, 7
    17ac:	05 d0       	rcall	.+10     	; 0x17b8 <__divmodhi4_neg2>
    17ae:	3e f4       	brtc	.+14     	; 0x17be <__divmodhi4_exit>

000017b0 <__divmodhi4_neg1>:
    17b0:	90 95       	com	r25
    17b2:	81 95       	neg	r24
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	08 95       	ret

000017b8 <__divmodhi4_neg2>:
    17b8:	70 95       	com	r23
    17ba:	61 95       	neg	r22
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255

000017be <__divmodhi4_exit>:
    17be:	08 95       	ret

000017c0 <__udivmodhi4>:
    17c0:	aa 1b       	sub	r26, r26
    17c2:	bb 1b       	sub	r27, r27
    17c4:	51 e1       	ldi	r21, 0x11	; 17
    17c6:	07 c0       	rjmp	.+14     	; 0x17d6 <__udivmodhi4_ep>

000017c8 <__udivmodhi4_loop>:
    17c8:	aa 1f       	adc	r26, r26
    17ca:	bb 1f       	adc	r27, r27
    17cc:	a6 17       	cp	r26, r22
    17ce:	b7 07       	cpc	r27, r23
    17d0:	10 f0       	brcs	.+4      	; 0x17d6 <__udivmodhi4_ep>
    17d2:	a6 1b       	sub	r26, r22
    17d4:	b7 0b       	sbc	r27, r23

000017d6 <__udivmodhi4_ep>:
    17d6:	88 1f       	adc	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	5a 95       	dec	r21
    17dc:	a9 f7       	brne	.-22     	; 0x17c8 <__udivmodhi4_loop>
    17de:	80 95       	com	r24
    17e0:	90 95       	com	r25
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	08 95       	ret

000017e8 <__itoa_ncheck>:
    17e8:	bb 27       	eor	r27, r27
    17ea:	4a 30       	cpi	r20, 0x0A	; 10
    17ec:	31 f4       	brne	.+12     	; 0x17fa <__itoa_ncheck+0x12>
    17ee:	99 23       	and	r25, r25
    17f0:	22 f4       	brpl	.+8      	; 0x17fa <__itoa_ncheck+0x12>
    17f2:	bd e2       	ldi	r27, 0x2D	; 45
    17f4:	90 95       	com	r25
    17f6:	81 95       	neg	r24
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__utoa_common>

000017fe <__utoa_ncheck>:
    17fe:	bb 27       	eor	r27, r27

00001800 <__utoa_common>:
    1800:	fb 01       	movw	r30, r22
    1802:	55 27       	eor	r21, r21
    1804:	aa 27       	eor	r26, r26
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	aa 1f       	adc	r26, r26
    180c:	a4 17       	cp	r26, r20
    180e:	10 f0       	brcs	.+4      	; 0x1814 <__utoa_common+0x14>
    1810:	a4 1b       	sub	r26, r20
    1812:	83 95       	inc	r24
    1814:	50 51       	subi	r21, 0x10	; 16
    1816:	b9 f7       	brne	.-18     	; 0x1806 <__utoa_common+0x6>
    1818:	a0 5d       	subi	r26, 0xD0	; 208
    181a:	aa 33       	cpi	r26, 0x3A	; 58
    181c:	08 f0       	brcs	.+2      	; 0x1820 <__utoa_common+0x20>
    181e:	a9 5d       	subi	r26, 0xD9	; 217
    1820:	a1 93       	st	Z+, r26
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	79 f7       	brne	.-34     	; 0x1804 <__utoa_common+0x4>
    1826:	b1 11       	cpse	r27, r1
    1828:	b1 93       	st	Z+, r27
    182a:	11 92       	st	Z+, r1
    182c:	cb 01       	movw	r24, r22
    182e:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <strrev>

00001832 <fdevopen>:
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	31 f4       	brne	.+12     	; 0x184a <fdevopen+0x18>
    183e:	61 15       	cp	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	19 f4       	brne	.+6      	; 0x184a <fdevopen+0x18>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	3a c0       	rjmp	.+116    	; 0x18be <fdevopen+0x8c>
    184a:	8b 01       	movw	r16, r22
    184c:	ec 01       	movw	r28, r24
    184e:	6e e0       	ldi	r22, 0x0E	; 14
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <calloc>
    185a:	fc 01       	movw	r30, r24
    185c:	89 2b       	or	r24, r25
    185e:	91 f3       	breq	.-28     	; 0x1844 <fdevopen+0x12>
    1860:	80 e8       	ldi	r24, 0x80	; 128
    1862:	83 83       	std	Z+3, r24	; 0x03
    1864:	01 15       	cp	r16, r1
    1866:	11 05       	cpc	r17, r1
    1868:	71 f0       	breq	.+28     	; 0x1886 <fdevopen+0x54>
    186a:	13 87       	std	Z+11, r17	; 0x0b
    186c:	02 87       	std	Z+10, r16	; 0x0a
    186e:	81 e8       	ldi	r24, 0x81	; 129
    1870:	83 83       	std	Z+3, r24	; 0x03
    1872:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <__iob>
    1876:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <__iob+0x1>
    187a:	89 2b       	or	r24, r25
    187c:	21 f4       	brne	.+8      	; 0x1886 <fdevopen+0x54>
    187e:	f0 93 08 04 	sts	0x0408, r31	; 0x800408 <__iob+0x1>
    1882:	e0 93 07 04 	sts	0x0407, r30	; 0x800407 <__iob>
    1886:	20 97       	sbiw	r28, 0x00	; 0
    1888:	c9 f0       	breq	.+50     	; 0x18bc <fdevopen+0x8a>
    188a:	d1 87       	std	Z+9, r29	; 0x09
    188c:	c0 87       	std	Z+8, r28	; 0x08
    188e:	83 81       	ldd	r24, Z+3	; 0x03
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	83 83       	std	Z+3, r24	; 0x03
    1894:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__iob+0x2>
    1898:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <__iob+0x3>
    189c:	89 2b       	or	r24, r25
    189e:	71 f4       	brne	.+28     	; 0x18bc <fdevopen+0x8a>
    18a0:	f0 93 0a 04 	sts	0x040A, r31	; 0x80040a <__iob+0x3>
    18a4:	e0 93 09 04 	sts	0x0409, r30	; 0x800409 <__iob+0x2>
    18a8:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <__iob+0x4>
    18ac:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <__iob+0x5>
    18b0:	89 2b       	or	r24, r25
    18b2:	21 f4       	brne	.+8      	; 0x18bc <fdevopen+0x8a>
    18b4:	f0 93 0c 04 	sts	0x040C, r31	; 0x80040c <__iob+0x5>
    18b8:	e0 93 0b 04 	sts	0x040B, r30	; 0x80040b <__iob+0x4>
    18bc:	cf 01       	movw	r24, r30
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <printf>:
    18c8:	a0 e0       	ldi	r26, 0x00	; 0
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e6       	ldi	r30, 0x6A	; 106
    18ce:	fc e0       	ldi	r31, 0x0C	; 12
    18d0:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__prologue_saves__+0x20>
    18d4:	ae 01       	movw	r20, r28
    18d6:	4b 5f       	subi	r20, 0xFB	; 251
    18d8:	5f 4f       	sbci	r21, 0xFF	; 255
    18da:	fa 01       	movw	r30, r20
    18dc:	61 91       	ld	r22, Z+
    18de:	71 91       	ld	r23, Z+
    18e0:	af 01       	movw	r20, r30
    18e2:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__iob+0x2>
    18e6:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <__iob+0x3>
    18ea:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <vfprintf>
    18ee:	e2 e0       	ldi	r30, 0x02	; 2
    18f0:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__epilogue_restores__+0x20>

000018f4 <vfprintf>:
    18f4:	ab e0       	ldi	r26, 0x0B	; 11
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e0 e8       	ldi	r30, 0x80	; 128
    18fa:	fc e0       	ldi	r31, 0x0C	; 12
    18fc:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__prologue_saves__>
    1900:	6c 01       	movw	r12, r24
    1902:	7b 01       	movw	r14, r22
    1904:	8a 01       	movw	r16, r20
    1906:	fc 01       	movw	r30, r24
    1908:	17 82       	std	Z+7, r1	; 0x07
    190a:	16 82       	std	Z+6, r1	; 0x06
    190c:	83 81       	ldd	r24, Z+3	; 0x03
    190e:	81 ff       	sbrs	r24, 1
    1910:	cc c1       	rjmp	.+920    	; 0x1caa <vfprintf+0x3b6>
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	3c 01       	movw	r6, r24
    1918:	f6 01       	movw	r30, r12
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	f7 01       	movw	r30, r14
    191e:	93 fd       	sbrc	r25, 3
    1920:	85 91       	lpm	r24, Z+
    1922:	93 ff       	sbrs	r25, 3
    1924:	81 91       	ld	r24, Z+
    1926:	7f 01       	movw	r14, r30
    1928:	88 23       	and	r24, r24
    192a:	09 f4       	brne	.+2      	; 0x192e <vfprintf+0x3a>
    192c:	ba c1       	rjmp	.+884    	; 0x1ca2 <vfprintf+0x3ae>
    192e:	85 32       	cpi	r24, 0x25	; 37
    1930:	39 f4       	brne	.+14     	; 0x1940 <vfprintf+0x4c>
    1932:	93 fd       	sbrc	r25, 3
    1934:	85 91       	lpm	r24, Z+
    1936:	93 ff       	sbrs	r25, 3
    1938:	81 91       	ld	r24, Z+
    193a:	7f 01       	movw	r14, r30
    193c:	85 32       	cpi	r24, 0x25	; 37
    193e:	29 f4       	brne	.+10     	; 0x194a <vfprintf+0x56>
    1940:	b6 01       	movw	r22, r12
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1948:	e7 cf       	rjmp	.-50     	; 0x1918 <vfprintf+0x24>
    194a:	91 2c       	mov	r9, r1
    194c:	21 2c       	mov	r2, r1
    194e:	31 2c       	mov	r3, r1
    1950:	ff e1       	ldi	r31, 0x1F	; 31
    1952:	f3 15       	cp	r31, r3
    1954:	d8 f0       	brcs	.+54     	; 0x198c <vfprintf+0x98>
    1956:	8b 32       	cpi	r24, 0x2B	; 43
    1958:	79 f0       	breq	.+30     	; 0x1978 <vfprintf+0x84>
    195a:	38 f4       	brcc	.+14     	; 0x196a <vfprintf+0x76>
    195c:	80 32       	cpi	r24, 0x20	; 32
    195e:	79 f0       	breq	.+30     	; 0x197e <vfprintf+0x8a>
    1960:	83 32       	cpi	r24, 0x23	; 35
    1962:	a1 f4       	brne	.+40     	; 0x198c <vfprintf+0x98>
    1964:	23 2d       	mov	r18, r3
    1966:	20 61       	ori	r18, 0x10	; 16
    1968:	1d c0       	rjmp	.+58     	; 0x19a4 <vfprintf+0xb0>
    196a:	8d 32       	cpi	r24, 0x2D	; 45
    196c:	61 f0       	breq	.+24     	; 0x1986 <vfprintf+0x92>
    196e:	80 33       	cpi	r24, 0x30	; 48
    1970:	69 f4       	brne	.+26     	; 0x198c <vfprintf+0x98>
    1972:	23 2d       	mov	r18, r3
    1974:	21 60       	ori	r18, 0x01	; 1
    1976:	16 c0       	rjmp	.+44     	; 0x19a4 <vfprintf+0xb0>
    1978:	83 2d       	mov	r24, r3
    197a:	82 60       	ori	r24, 0x02	; 2
    197c:	38 2e       	mov	r3, r24
    197e:	e3 2d       	mov	r30, r3
    1980:	e4 60       	ori	r30, 0x04	; 4
    1982:	3e 2e       	mov	r3, r30
    1984:	2a c0       	rjmp	.+84     	; 0x19da <vfprintf+0xe6>
    1986:	f3 2d       	mov	r31, r3
    1988:	f8 60       	ori	r31, 0x08	; 8
    198a:	1d c0       	rjmp	.+58     	; 0x19c6 <vfprintf+0xd2>
    198c:	37 fc       	sbrc	r3, 7
    198e:	2d c0       	rjmp	.+90     	; 0x19ea <vfprintf+0xf6>
    1990:	20 ed       	ldi	r18, 0xD0	; 208
    1992:	28 0f       	add	r18, r24
    1994:	2a 30       	cpi	r18, 0x0A	; 10
    1996:	40 f0       	brcs	.+16     	; 0x19a8 <vfprintf+0xb4>
    1998:	8e 32       	cpi	r24, 0x2E	; 46
    199a:	b9 f4       	brne	.+46     	; 0x19ca <vfprintf+0xd6>
    199c:	36 fc       	sbrc	r3, 6
    199e:	81 c1       	rjmp	.+770    	; 0x1ca2 <vfprintf+0x3ae>
    19a0:	23 2d       	mov	r18, r3
    19a2:	20 64       	ori	r18, 0x40	; 64
    19a4:	32 2e       	mov	r3, r18
    19a6:	19 c0       	rjmp	.+50     	; 0x19da <vfprintf+0xe6>
    19a8:	36 fe       	sbrs	r3, 6
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <vfprintf+0xc4>
    19ac:	8a e0       	ldi	r24, 0x0A	; 10
    19ae:	98 9e       	mul	r9, r24
    19b0:	20 0d       	add	r18, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	92 2e       	mov	r9, r18
    19b6:	11 c0       	rjmp	.+34     	; 0x19da <vfprintf+0xe6>
    19b8:	ea e0       	ldi	r30, 0x0A	; 10
    19ba:	2e 9e       	mul	r2, r30
    19bc:	20 0d       	add	r18, r0
    19be:	11 24       	eor	r1, r1
    19c0:	22 2e       	mov	r2, r18
    19c2:	f3 2d       	mov	r31, r3
    19c4:	f0 62       	ori	r31, 0x20	; 32
    19c6:	3f 2e       	mov	r3, r31
    19c8:	08 c0       	rjmp	.+16     	; 0x19da <vfprintf+0xe6>
    19ca:	8c 36       	cpi	r24, 0x6C	; 108
    19cc:	21 f4       	brne	.+8      	; 0x19d6 <vfprintf+0xe2>
    19ce:	83 2d       	mov	r24, r3
    19d0:	80 68       	ori	r24, 0x80	; 128
    19d2:	38 2e       	mov	r3, r24
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <vfprintf+0xe6>
    19d6:	88 36       	cpi	r24, 0x68	; 104
    19d8:	41 f4       	brne	.+16     	; 0x19ea <vfprintf+0xf6>
    19da:	f7 01       	movw	r30, r14
    19dc:	93 fd       	sbrc	r25, 3
    19de:	85 91       	lpm	r24, Z+
    19e0:	93 ff       	sbrs	r25, 3
    19e2:	81 91       	ld	r24, Z+
    19e4:	7f 01       	movw	r14, r30
    19e6:	81 11       	cpse	r24, r1
    19e8:	b3 cf       	rjmp	.-154    	; 0x1950 <vfprintf+0x5c>
    19ea:	98 2f       	mov	r25, r24
    19ec:	9f 7d       	andi	r25, 0xDF	; 223
    19ee:	95 54       	subi	r25, 0x45	; 69
    19f0:	93 30       	cpi	r25, 0x03	; 3
    19f2:	28 f4       	brcc	.+10     	; 0x19fe <vfprintf+0x10a>
    19f4:	0c 5f       	subi	r16, 0xFC	; 252
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	9f e3       	ldi	r25, 0x3F	; 63
    19fa:	99 83       	std	Y+1, r25	; 0x01
    19fc:	0d c0       	rjmp	.+26     	; 0x1a18 <vfprintf+0x124>
    19fe:	83 36       	cpi	r24, 0x63	; 99
    1a00:	31 f0       	breq	.+12     	; 0x1a0e <vfprintf+0x11a>
    1a02:	83 37       	cpi	r24, 0x73	; 115
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <vfprintf+0x12e>
    1a06:	83 35       	cpi	r24, 0x53	; 83
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <vfprintf+0x118>
    1a0a:	59 c0       	rjmp	.+178    	; 0x1abe <vfprintf+0x1ca>
    1a0c:	21 c0       	rjmp	.+66     	; 0x1a50 <vfprintf+0x15c>
    1a0e:	f8 01       	movw	r30, r16
    1a10:	80 81       	ld	r24, Z
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	0e 5f       	subi	r16, 0xFE	; 254
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	88 24       	eor	r8, r8
    1a1a:	83 94       	inc	r8
    1a1c:	91 2c       	mov	r9, r1
    1a1e:	53 01       	movw	r10, r6
    1a20:	13 c0       	rjmp	.+38     	; 0x1a48 <vfprintf+0x154>
    1a22:	28 01       	movw	r4, r16
    1a24:	f2 e0       	ldi	r31, 0x02	; 2
    1a26:	4f 0e       	add	r4, r31
    1a28:	51 1c       	adc	r5, r1
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	a0 80       	ld	r10, Z
    1a2e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a30:	36 fe       	sbrs	r3, 6
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <vfprintf+0x146>
    1a34:	69 2d       	mov	r22, r9
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <vfprintf+0x14a>
    1a3a:	6f ef       	ldi	r22, 0xFF	; 255
    1a3c:	7f ef       	ldi	r23, 0xFF	; 255
    1a3e:	c5 01       	movw	r24, r10
    1a40:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <strnlen>
    1a44:	4c 01       	movw	r8, r24
    1a46:	82 01       	movw	r16, r4
    1a48:	f3 2d       	mov	r31, r3
    1a4a:	ff 77       	andi	r31, 0x7F	; 127
    1a4c:	3f 2e       	mov	r3, r31
    1a4e:	16 c0       	rjmp	.+44     	; 0x1a7c <vfprintf+0x188>
    1a50:	28 01       	movw	r4, r16
    1a52:	22 e0       	ldi	r18, 0x02	; 2
    1a54:	42 0e       	add	r4, r18
    1a56:	51 1c       	adc	r5, r1
    1a58:	f8 01       	movw	r30, r16
    1a5a:	a0 80       	ld	r10, Z
    1a5c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a5e:	36 fe       	sbrs	r3, 6
    1a60:	03 c0       	rjmp	.+6      	; 0x1a68 <vfprintf+0x174>
    1a62:	69 2d       	mov	r22, r9
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <vfprintf+0x178>
    1a68:	6f ef       	ldi	r22, 0xFF	; 255
    1a6a:	7f ef       	ldi	r23, 0xFF	; 255
    1a6c:	c5 01       	movw	r24, r10
    1a6e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <strnlen_P>
    1a72:	4c 01       	movw	r8, r24
    1a74:	f3 2d       	mov	r31, r3
    1a76:	f0 68       	ori	r31, 0x80	; 128
    1a78:	3f 2e       	mov	r3, r31
    1a7a:	82 01       	movw	r16, r4
    1a7c:	33 fc       	sbrc	r3, 3
    1a7e:	1b c0       	rjmp	.+54     	; 0x1ab6 <vfprintf+0x1c2>
    1a80:	82 2d       	mov	r24, r2
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	88 16       	cp	r8, r24
    1a86:	99 06       	cpc	r9, r25
    1a88:	b0 f4       	brcc	.+44     	; 0x1ab6 <vfprintf+0x1c2>
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	80 e2       	ldi	r24, 0x20	; 32
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1a94:	2a 94       	dec	r2
    1a96:	f4 cf       	rjmp	.-24     	; 0x1a80 <vfprintf+0x18c>
    1a98:	f5 01       	movw	r30, r10
    1a9a:	37 fc       	sbrc	r3, 7
    1a9c:	85 91       	lpm	r24, Z+
    1a9e:	37 fe       	sbrs	r3, 7
    1aa0:	81 91       	ld	r24, Z+
    1aa2:	5f 01       	movw	r10, r30
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1aac:	21 10       	cpse	r2, r1
    1aae:	2a 94       	dec	r2
    1ab0:	21 e0       	ldi	r18, 0x01	; 1
    1ab2:	82 1a       	sub	r8, r18
    1ab4:	91 08       	sbc	r9, r1
    1ab6:	81 14       	cp	r8, r1
    1ab8:	91 04       	cpc	r9, r1
    1aba:	71 f7       	brne	.-36     	; 0x1a98 <vfprintf+0x1a4>
    1abc:	e8 c0       	rjmp	.+464    	; 0x1c8e <vfprintf+0x39a>
    1abe:	84 36       	cpi	r24, 0x64	; 100
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <vfprintf+0x1d2>
    1ac2:	89 36       	cpi	r24, 0x69	; 105
    1ac4:	41 f5       	brne	.+80     	; 0x1b16 <vfprintf+0x222>
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	37 fe       	sbrs	r3, 7
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <vfprintf+0x1e6>
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	0c 5f       	subi	r16, 0xFC	; 252
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <vfprintf+0x1f6>
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	07 2e       	mov	r0, r23
    1ae0:	00 0c       	add	r0, r0
    1ae2:	88 0b       	sbc	r24, r24
    1ae4:	99 0b       	sbc	r25, r25
    1ae6:	0e 5f       	subi	r16, 0xFE	; 254
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	f3 2d       	mov	r31, r3
    1aec:	ff 76       	andi	r31, 0x6F	; 111
    1aee:	3f 2e       	mov	r3, r31
    1af0:	97 ff       	sbrs	r25, 7
    1af2:	09 c0       	rjmp	.+18     	; 0x1b06 <vfprintf+0x212>
    1af4:	90 95       	com	r25
    1af6:	80 95       	com	r24
    1af8:	70 95       	com	r23
    1afa:	61 95       	neg	r22
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	8f 4f       	sbci	r24, 0xFF	; 255
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	f0 68       	ori	r31, 0x80	; 128
    1b04:	3f 2e       	mov	r3, r31
    1b06:	2a e0       	ldi	r18, 0x0A	; 10
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	a3 01       	movw	r20, r6
    1b0c:	0e 94 01 10 	call	0x2002	; 0x2002 <__ultoa_invert>
    1b10:	88 2e       	mov	r8, r24
    1b12:	86 18       	sub	r8, r6
    1b14:	45 c0       	rjmp	.+138    	; 0x1ba0 <vfprintf+0x2ac>
    1b16:	85 37       	cpi	r24, 0x75	; 117
    1b18:	31 f4       	brne	.+12     	; 0x1b26 <vfprintf+0x232>
    1b1a:	23 2d       	mov	r18, r3
    1b1c:	2f 7e       	andi	r18, 0xEF	; 239
    1b1e:	b2 2e       	mov	r11, r18
    1b20:	2a e0       	ldi	r18, 0x0A	; 10
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	25 c0       	rjmp	.+74     	; 0x1b70 <vfprintf+0x27c>
    1b26:	93 2d       	mov	r25, r3
    1b28:	99 7f       	andi	r25, 0xF9	; 249
    1b2a:	b9 2e       	mov	r11, r25
    1b2c:	8f 36       	cpi	r24, 0x6F	; 111
    1b2e:	c1 f0       	breq	.+48     	; 0x1b60 <vfprintf+0x26c>
    1b30:	18 f4       	brcc	.+6      	; 0x1b38 <vfprintf+0x244>
    1b32:	88 35       	cpi	r24, 0x58	; 88
    1b34:	79 f0       	breq	.+30     	; 0x1b54 <vfprintf+0x260>
    1b36:	b5 c0       	rjmp	.+362    	; 0x1ca2 <vfprintf+0x3ae>
    1b38:	80 37       	cpi	r24, 0x70	; 112
    1b3a:	19 f0       	breq	.+6      	; 0x1b42 <vfprintf+0x24e>
    1b3c:	88 37       	cpi	r24, 0x78	; 120
    1b3e:	21 f0       	breq	.+8      	; 0x1b48 <vfprintf+0x254>
    1b40:	b0 c0       	rjmp	.+352    	; 0x1ca2 <vfprintf+0x3ae>
    1b42:	e9 2f       	mov	r30, r25
    1b44:	e0 61       	ori	r30, 0x10	; 16
    1b46:	be 2e       	mov	r11, r30
    1b48:	b4 fe       	sbrs	r11, 4
    1b4a:	0d c0       	rjmp	.+26     	; 0x1b66 <vfprintf+0x272>
    1b4c:	fb 2d       	mov	r31, r11
    1b4e:	f4 60       	ori	r31, 0x04	; 4
    1b50:	bf 2e       	mov	r11, r31
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <vfprintf+0x272>
    1b54:	34 fe       	sbrs	r3, 4
    1b56:	0a c0       	rjmp	.+20     	; 0x1b6c <vfprintf+0x278>
    1b58:	29 2f       	mov	r18, r25
    1b5a:	26 60       	ori	r18, 0x06	; 6
    1b5c:	b2 2e       	mov	r11, r18
    1b5e:	06 c0       	rjmp	.+12     	; 0x1b6c <vfprintf+0x278>
    1b60:	28 e0       	ldi	r18, 0x08	; 8
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	05 c0       	rjmp	.+10     	; 0x1b70 <vfprintf+0x27c>
    1b66:	20 e1       	ldi	r18, 0x10	; 16
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <vfprintf+0x27c>
    1b6c:	20 e1       	ldi	r18, 0x10	; 16
    1b6e:	32 e0       	ldi	r19, 0x02	; 2
    1b70:	f8 01       	movw	r30, r16
    1b72:	b7 fe       	sbrs	r11, 7
    1b74:	07 c0       	rjmp	.+14     	; 0x1b84 <vfprintf+0x290>
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	0c 5f       	subi	r16, 0xFC	; 252
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	06 c0       	rjmp	.+12     	; 0x1b90 <vfprintf+0x29c>
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 5f       	subi	r16, 0xFE	; 254
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	a3 01       	movw	r20, r6
    1b92:	0e 94 01 10 	call	0x2002	; 0x2002 <__ultoa_invert>
    1b96:	88 2e       	mov	r8, r24
    1b98:	86 18       	sub	r8, r6
    1b9a:	fb 2d       	mov	r31, r11
    1b9c:	ff 77       	andi	r31, 0x7F	; 127
    1b9e:	3f 2e       	mov	r3, r31
    1ba0:	36 fe       	sbrs	r3, 6
    1ba2:	0d c0       	rjmp	.+26     	; 0x1bbe <vfprintf+0x2ca>
    1ba4:	23 2d       	mov	r18, r3
    1ba6:	2e 7f       	andi	r18, 0xFE	; 254
    1ba8:	a2 2e       	mov	r10, r18
    1baa:	89 14       	cp	r8, r9
    1bac:	58 f4       	brcc	.+22     	; 0x1bc4 <vfprintf+0x2d0>
    1bae:	34 fe       	sbrs	r3, 4
    1bb0:	0b c0       	rjmp	.+22     	; 0x1bc8 <vfprintf+0x2d4>
    1bb2:	32 fc       	sbrc	r3, 2
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <vfprintf+0x2d4>
    1bb6:	83 2d       	mov	r24, r3
    1bb8:	8e 7e       	andi	r24, 0xEE	; 238
    1bba:	a8 2e       	mov	r10, r24
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <vfprintf+0x2d4>
    1bbe:	b8 2c       	mov	r11, r8
    1bc0:	a3 2c       	mov	r10, r3
    1bc2:	03 c0       	rjmp	.+6      	; 0x1bca <vfprintf+0x2d6>
    1bc4:	b8 2c       	mov	r11, r8
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <vfprintf+0x2d6>
    1bc8:	b9 2c       	mov	r11, r9
    1bca:	a4 fe       	sbrs	r10, 4
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <vfprintf+0x2f8>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e8 0d       	add	r30, r8
    1bd2:	f1 1d       	adc	r31, r1
    1bd4:	80 81       	ld	r24, Z
    1bd6:	80 33       	cpi	r24, 0x30	; 48
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <vfprintf+0x2ee>
    1bda:	9a 2d       	mov	r25, r10
    1bdc:	99 7e       	andi	r25, 0xE9	; 233
    1bde:	a9 2e       	mov	r10, r25
    1be0:	09 c0       	rjmp	.+18     	; 0x1bf4 <vfprintf+0x300>
    1be2:	a2 fe       	sbrs	r10, 2
    1be4:	06 c0       	rjmp	.+12     	; 0x1bf2 <vfprintf+0x2fe>
    1be6:	b3 94       	inc	r11
    1be8:	b3 94       	inc	r11
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <vfprintf+0x300>
    1bec:	8a 2d       	mov	r24, r10
    1bee:	86 78       	andi	r24, 0x86	; 134
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <vfprintf+0x300>
    1bf2:	b3 94       	inc	r11
    1bf4:	a3 fc       	sbrc	r10, 3
    1bf6:	11 c0       	rjmp	.+34     	; 0x1c1a <vfprintf+0x326>
    1bf8:	a0 fe       	sbrs	r10, 0
    1bfa:	06 c0       	rjmp	.+12     	; 0x1c08 <vfprintf+0x314>
    1bfc:	b2 14       	cp	r11, r2
    1bfe:	88 f4       	brcc	.+34     	; 0x1c22 <vfprintf+0x32e>
    1c00:	28 0c       	add	r2, r8
    1c02:	92 2c       	mov	r9, r2
    1c04:	9b 18       	sub	r9, r11
    1c06:	0e c0       	rjmp	.+28     	; 0x1c24 <vfprintf+0x330>
    1c08:	b2 14       	cp	r11, r2
    1c0a:	60 f4       	brcc	.+24     	; 0x1c24 <vfprintf+0x330>
    1c0c:	b6 01       	movw	r22, r12
    1c0e:	80 e2       	ldi	r24, 0x20	; 32
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1c16:	b3 94       	inc	r11
    1c18:	f7 cf       	rjmp	.-18     	; 0x1c08 <vfprintf+0x314>
    1c1a:	b2 14       	cp	r11, r2
    1c1c:	18 f4       	brcc	.+6      	; 0x1c24 <vfprintf+0x330>
    1c1e:	2b 18       	sub	r2, r11
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <vfprintf+0x332>
    1c22:	98 2c       	mov	r9, r8
    1c24:	21 2c       	mov	r2, r1
    1c26:	a4 fe       	sbrs	r10, 4
    1c28:	10 c0       	rjmp	.+32     	; 0x1c4a <vfprintf+0x356>
    1c2a:	b6 01       	movw	r22, r12
    1c2c:	80 e3       	ldi	r24, 0x30	; 48
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1c34:	a2 fe       	sbrs	r10, 2
    1c36:	17 c0       	rjmp	.+46     	; 0x1c66 <vfprintf+0x372>
    1c38:	a1 fc       	sbrc	r10, 1
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <vfprintf+0x34e>
    1c3c:	88 e7       	ldi	r24, 0x78	; 120
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <vfprintf+0x352>
    1c42:	88 e5       	ldi	r24, 0x58	; 88
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b6 01       	movw	r22, r12
    1c48:	0c c0       	rjmp	.+24     	; 0x1c62 <vfprintf+0x36e>
    1c4a:	8a 2d       	mov	r24, r10
    1c4c:	86 78       	andi	r24, 0x86	; 134
    1c4e:	59 f0       	breq	.+22     	; 0x1c66 <vfprintf+0x372>
    1c50:	a1 fe       	sbrs	r10, 1
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <vfprintf+0x364>
    1c54:	8b e2       	ldi	r24, 0x2B	; 43
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <vfprintf+0x366>
    1c58:	80 e2       	ldi	r24, 0x20	; 32
    1c5a:	a7 fc       	sbrc	r10, 7
    1c5c:	8d e2       	ldi	r24, 0x2D	; 45
    1c5e:	b6 01       	movw	r22, r12
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1c66:	89 14       	cp	r8, r9
    1c68:	38 f4       	brcc	.+14     	; 0x1c78 <vfprintf+0x384>
    1c6a:	b6 01       	movw	r22, r12
    1c6c:	80 e3       	ldi	r24, 0x30	; 48
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1c74:	9a 94       	dec	r9
    1c76:	f7 cf       	rjmp	.-18     	; 0x1c66 <vfprintf+0x372>
    1c78:	8a 94       	dec	r8
    1c7a:	f3 01       	movw	r30, r6
    1c7c:	e8 0d       	add	r30, r8
    1c7e:	f1 1d       	adc	r31, r1
    1c80:	80 81       	ld	r24, Z
    1c82:	b6 01       	movw	r22, r12
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1c8a:	81 10       	cpse	r8, r1
    1c8c:	f5 cf       	rjmp	.-22     	; 0x1c78 <vfprintf+0x384>
    1c8e:	22 20       	and	r2, r2
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <vfprintf+0x3a0>
    1c92:	42 ce       	rjmp	.-892    	; 0x1918 <vfprintf+0x24>
    1c94:	b6 01       	movw	r22, r12
    1c96:	80 e2       	ldi	r24, 0x20	; 32
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
    1c9e:	2a 94       	dec	r2
    1ca0:	f6 cf       	rjmp	.-20     	; 0x1c8e <vfprintf+0x39a>
    1ca2:	f6 01       	movw	r30, r12
    1ca4:	86 81       	ldd	r24, Z+6	; 0x06
    1ca6:	97 81       	ldd	r25, Z+7	; 0x07
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <vfprintf+0x3ba>
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	9f ef       	ldi	r25, 0xFF	; 255
    1cae:	2b 96       	adiw	r28, 0x0b	; 11
    1cb0:	e2 e1       	ldi	r30, 0x12	; 18
    1cb2:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__epilogue_restores__>

00001cb6 <calloc>:
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	86 9f       	mul	r24, r22
    1cc0:	80 01       	movw	r16, r0
    1cc2:	87 9f       	mul	r24, r23
    1cc4:	10 0d       	add	r17, r0
    1cc6:	96 9f       	mul	r25, r22
    1cc8:	10 0d       	add	r17, r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	c8 01       	movw	r24, r16
    1cce:	0e 94 77 0e 	call	0x1cee	; 0x1cee <malloc>
    1cd2:	ec 01       	movw	r28, r24
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <calloc+0x2c>
    1cd8:	a8 01       	movw	r20, r16
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <memset>
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	08 95       	ret

00001cee <malloc>:
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	82 30       	cpi	r24, 0x02	; 2
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	10 f4       	brcc	.+4      	; 0x1d00 <malloc+0x12>
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	e0 91 0f 04 	lds	r30, 0x040F	; 0x80040f <__flp>
    1d04:	f0 91 10 04 	lds	r31, 0x0410	; 0x800410 <__flp+0x1>
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	a0 e0       	ldi	r26, 0x00	; 0
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	30 97       	sbiw	r30, 0x00	; 0
    1d12:	19 f1       	breq	.+70     	; 0x1d5a <malloc+0x6c>
    1d14:	40 81       	ld	r20, Z
    1d16:	51 81       	ldd	r21, Z+1	; 0x01
    1d18:	02 81       	ldd	r16, Z+2	; 0x02
    1d1a:	13 81       	ldd	r17, Z+3	; 0x03
    1d1c:	48 17       	cp	r20, r24
    1d1e:	59 07       	cpc	r21, r25
    1d20:	c8 f0       	brcs	.+50     	; 0x1d54 <malloc+0x66>
    1d22:	84 17       	cp	r24, r20
    1d24:	95 07       	cpc	r25, r21
    1d26:	69 f4       	brne	.+26     	; 0x1d42 <malloc+0x54>
    1d28:	10 97       	sbiw	r26, 0x00	; 0
    1d2a:	31 f0       	breq	.+12     	; 0x1d38 <malloc+0x4a>
    1d2c:	12 96       	adiw	r26, 0x02	; 2
    1d2e:	0c 93       	st	X, r16
    1d30:	12 97       	sbiw	r26, 0x02	; 2
    1d32:	13 96       	adiw	r26, 0x03	; 3
    1d34:	1c 93       	st	X, r17
    1d36:	27 c0       	rjmp	.+78     	; 0x1d86 <malloc+0x98>
    1d38:	00 93 0f 04 	sts	0x040F, r16	; 0x80040f <__flp>
    1d3c:	10 93 10 04 	sts	0x0410, r17	; 0x800410 <__flp+0x1>
    1d40:	22 c0       	rjmp	.+68     	; 0x1d86 <malloc+0x98>
    1d42:	21 15       	cp	r18, r1
    1d44:	31 05       	cpc	r19, r1
    1d46:	19 f0       	breq	.+6      	; 0x1d4e <malloc+0x60>
    1d48:	42 17       	cp	r20, r18
    1d4a:	53 07       	cpc	r21, r19
    1d4c:	18 f4       	brcc	.+6      	; 0x1d54 <malloc+0x66>
    1d4e:	9a 01       	movw	r18, r20
    1d50:	bd 01       	movw	r22, r26
    1d52:	ef 01       	movw	r28, r30
    1d54:	df 01       	movw	r26, r30
    1d56:	f8 01       	movw	r30, r16
    1d58:	db cf       	rjmp	.-74     	; 0x1d10 <malloc+0x22>
    1d5a:	21 15       	cp	r18, r1
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	f9 f0       	breq	.+62     	; 0x1d9e <malloc+0xb0>
    1d60:	28 1b       	sub	r18, r24
    1d62:	39 0b       	sbc	r19, r25
    1d64:	24 30       	cpi	r18, 0x04	; 4
    1d66:	31 05       	cpc	r19, r1
    1d68:	80 f4       	brcc	.+32     	; 0x1d8a <malloc+0x9c>
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6e:	61 15       	cp	r22, r1
    1d70:	71 05       	cpc	r23, r1
    1d72:	21 f0       	breq	.+8      	; 0x1d7c <malloc+0x8e>
    1d74:	fb 01       	movw	r30, r22
    1d76:	93 83       	std	Z+3, r25	; 0x03
    1d78:	82 83       	std	Z+2, r24	; 0x02
    1d7a:	04 c0       	rjmp	.+8      	; 0x1d84 <malloc+0x96>
    1d7c:	90 93 10 04 	sts	0x0410, r25	; 0x800410 <__flp+0x1>
    1d80:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <__flp>
    1d84:	fe 01       	movw	r30, r28
    1d86:	32 96       	adiw	r30, 0x02	; 2
    1d88:	44 c0       	rjmp	.+136    	; 0x1e12 <malloc+0x124>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e2 0f       	add	r30, r18
    1d8e:	f3 1f       	adc	r31, r19
    1d90:	81 93       	st	Z+, r24
    1d92:	91 93       	st	Z+, r25
    1d94:	22 50       	subi	r18, 0x02	; 2
    1d96:	31 09       	sbc	r19, r1
    1d98:	39 83       	std	Y+1, r19	; 0x01
    1d9a:	28 83       	st	Y, r18
    1d9c:	3a c0       	rjmp	.+116    	; 0x1e12 <malloc+0x124>
    1d9e:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <__brkval>
    1da2:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <__brkval+0x1>
    1da6:	23 2b       	or	r18, r19
    1da8:	41 f4       	brne	.+16     	; 0x1dba <malloc+0xcc>
    1daa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1dae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1db2:	30 93 0e 04 	sts	0x040E, r19	; 0x80040e <__brkval+0x1>
    1db6:	20 93 0d 04 	sts	0x040D, r18	; 0x80040d <__brkval>
    1dba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1dbe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1dc2:	21 15       	cp	r18, r1
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	41 f4       	brne	.+16     	; 0x1dd8 <malloc+0xea>
    1dc8:	2d b7       	in	r18, 0x3d	; 61
    1dca:	3e b7       	in	r19, 0x3e	; 62
    1dcc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1dd0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1dd4:	24 1b       	sub	r18, r20
    1dd6:	35 0b       	sbc	r19, r21
    1dd8:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <__brkval>
    1ddc:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <__brkval+0x1>
    1de0:	e2 17       	cp	r30, r18
    1de2:	f3 07       	cpc	r31, r19
    1de4:	a0 f4       	brcc	.+40     	; 0x1e0e <malloc+0x120>
    1de6:	2e 1b       	sub	r18, r30
    1de8:	3f 0b       	sbc	r19, r31
    1dea:	28 17       	cp	r18, r24
    1dec:	39 07       	cpc	r19, r25
    1dee:	78 f0       	brcs	.+30     	; 0x1e0e <malloc+0x120>
    1df0:	ac 01       	movw	r20, r24
    1df2:	4e 5f       	subi	r20, 0xFE	; 254
    1df4:	5f 4f       	sbci	r21, 0xFF	; 255
    1df6:	24 17       	cp	r18, r20
    1df8:	35 07       	cpc	r19, r21
    1dfa:	48 f0       	brcs	.+18     	; 0x1e0e <malloc+0x120>
    1dfc:	4e 0f       	add	r20, r30
    1dfe:	5f 1f       	adc	r21, r31
    1e00:	50 93 0e 04 	sts	0x040E, r21	; 0x80040e <__brkval+0x1>
    1e04:	40 93 0d 04 	sts	0x040D, r20	; 0x80040d <__brkval>
    1e08:	81 93       	st	Z+, r24
    1e0a:	91 93       	st	Z+, r25
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <malloc+0x124>
    1e0e:	e0 e0       	ldi	r30, 0x00	; 0
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	cf 01       	movw	r24, r30
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <free>:
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <free+0xa>
    1e26:	81 c0       	rjmp	.+258    	; 0x1f2a <free+0x10c>
    1e28:	fc 01       	movw	r30, r24
    1e2a:	32 97       	sbiw	r30, 0x02	; 2
    1e2c:	13 82       	std	Z+3, r1	; 0x03
    1e2e:	12 82       	std	Z+2, r1	; 0x02
    1e30:	a0 91 0f 04 	lds	r26, 0x040F	; 0x80040f <__flp>
    1e34:	b0 91 10 04 	lds	r27, 0x0410	; 0x800410 <__flp+0x1>
    1e38:	10 97       	sbiw	r26, 0x00	; 0
    1e3a:	81 f4       	brne	.+32     	; 0x1e5c <free+0x3e>
    1e3c:	20 81       	ld	r18, Z
    1e3e:	31 81       	ldd	r19, Z+1	; 0x01
    1e40:	82 0f       	add	r24, r18
    1e42:	93 1f       	adc	r25, r19
    1e44:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <__brkval>
    1e48:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <__brkval+0x1>
    1e4c:	28 17       	cp	r18, r24
    1e4e:	39 07       	cpc	r19, r25
    1e50:	51 f5       	brne	.+84     	; 0x1ea6 <free+0x88>
    1e52:	f0 93 0e 04 	sts	0x040E, r31	; 0x80040e <__brkval+0x1>
    1e56:	e0 93 0d 04 	sts	0x040D, r30	; 0x80040d <__brkval>
    1e5a:	67 c0       	rjmp	.+206    	; 0x1f2a <free+0x10c>
    1e5c:	ed 01       	movw	r28, r26
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	ce 17       	cp	r28, r30
    1e64:	df 07       	cpc	r29, r31
    1e66:	40 f4       	brcc	.+16     	; 0x1e78 <free+0x5a>
    1e68:	4a 81       	ldd	r20, Y+2	; 0x02
    1e6a:	5b 81       	ldd	r21, Y+3	; 0x03
    1e6c:	9e 01       	movw	r18, r28
    1e6e:	41 15       	cp	r20, r1
    1e70:	51 05       	cpc	r21, r1
    1e72:	f1 f0       	breq	.+60     	; 0x1eb0 <free+0x92>
    1e74:	ea 01       	movw	r28, r20
    1e76:	f5 cf       	rjmp	.-22     	; 0x1e62 <free+0x44>
    1e78:	d3 83       	std	Z+3, r29	; 0x03
    1e7a:	c2 83       	std	Z+2, r28	; 0x02
    1e7c:	40 81       	ld	r20, Z
    1e7e:	51 81       	ldd	r21, Z+1	; 0x01
    1e80:	84 0f       	add	r24, r20
    1e82:	95 1f       	adc	r25, r21
    1e84:	c8 17       	cp	r28, r24
    1e86:	d9 07       	cpc	r29, r25
    1e88:	59 f4       	brne	.+22     	; 0x1ea0 <free+0x82>
    1e8a:	88 81       	ld	r24, Y
    1e8c:	99 81       	ldd	r25, Y+1	; 0x01
    1e8e:	84 0f       	add	r24, r20
    1e90:	95 1f       	adc	r25, r21
    1e92:	02 96       	adiw	r24, 0x02	; 2
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	93 83       	std	Z+3, r25	; 0x03
    1e9e:	82 83       	std	Z+2, r24	; 0x02
    1ea0:	21 15       	cp	r18, r1
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	29 f4       	brne	.+10     	; 0x1eb0 <free+0x92>
    1ea6:	f0 93 10 04 	sts	0x0410, r31	; 0x800410 <__flp+0x1>
    1eaa:	e0 93 0f 04 	sts	0x040F, r30	; 0x80040f <__flp>
    1eae:	3d c0       	rjmp	.+122    	; 0x1f2a <free+0x10c>
    1eb0:	e9 01       	movw	r28, r18
    1eb2:	fb 83       	std	Y+3, r31	; 0x03
    1eb4:	ea 83       	std	Y+2, r30	; 0x02
    1eb6:	49 91       	ld	r20, Y+
    1eb8:	59 91       	ld	r21, Y+
    1eba:	c4 0f       	add	r28, r20
    1ebc:	d5 1f       	adc	r29, r21
    1ebe:	ec 17       	cp	r30, r28
    1ec0:	fd 07       	cpc	r31, r29
    1ec2:	61 f4       	brne	.+24     	; 0x1edc <free+0xbe>
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	84 0f       	add	r24, r20
    1eca:	95 1f       	adc	r25, r21
    1ecc:	02 96       	adiw	r24, 0x02	; 2
    1ece:	e9 01       	movw	r28, r18
    1ed0:	99 83       	std	Y+1, r25	; 0x01
    1ed2:	88 83       	st	Y, r24
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	9b 83       	std	Y+3, r25	; 0x03
    1eda:	8a 83       	std	Y+2, r24	; 0x02
    1edc:	e0 e0       	ldi	r30, 0x00	; 0
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	12 96       	adiw	r26, 0x02	; 2
    1ee2:	8d 91       	ld	r24, X+
    1ee4:	9c 91       	ld	r25, X
    1ee6:	13 97       	sbiw	r26, 0x03	; 3
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	19 f0       	breq	.+6      	; 0x1ef2 <free+0xd4>
    1eec:	fd 01       	movw	r30, r26
    1eee:	dc 01       	movw	r26, r24
    1ef0:	f7 cf       	rjmp	.-18     	; 0x1ee0 <free+0xc2>
    1ef2:	8d 91       	ld	r24, X+
    1ef4:	9c 91       	ld	r25, X
    1ef6:	11 97       	sbiw	r26, 0x01	; 1
    1ef8:	9d 01       	movw	r18, r26
    1efa:	2e 5f       	subi	r18, 0xFE	; 254
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	82 0f       	add	r24, r18
    1f00:	93 1f       	adc	r25, r19
    1f02:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <__brkval>
    1f06:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <__brkval+0x1>
    1f0a:	28 17       	cp	r18, r24
    1f0c:	39 07       	cpc	r19, r25
    1f0e:	69 f4       	brne	.+26     	; 0x1f2a <free+0x10c>
    1f10:	30 97       	sbiw	r30, 0x00	; 0
    1f12:	29 f4       	brne	.+10     	; 0x1f1e <free+0x100>
    1f14:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <__flp+0x1>
    1f18:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <__flp>
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <free+0x104>
    1f1e:	13 82       	std	Z+3, r1	; 0x03
    1f20:	12 82       	std	Z+2, r1	; 0x02
    1f22:	b0 93 0e 04 	sts	0x040E, r27	; 0x80040e <__brkval+0x1>
    1f26:	a0 93 0d 04 	sts	0x040D, r26	; 0x80040d <__brkval>
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	08 95       	ret

00001f30 <strnlen_P>:
    1f30:	fc 01       	movw	r30, r24
    1f32:	05 90       	lpm	r0, Z+
    1f34:	61 50       	subi	r22, 0x01	; 1
    1f36:	70 40       	sbci	r23, 0x00	; 0
    1f38:	01 10       	cpse	r0, r1
    1f3a:	d8 f7       	brcc	.-10     	; 0x1f32 <strnlen_P+0x2>
    1f3c:	80 95       	com	r24
    1f3e:	90 95       	com	r25
    1f40:	8e 0f       	add	r24, r30
    1f42:	9f 1f       	adc	r25, r31
    1f44:	08 95       	ret

00001f46 <memset>:
    1f46:	dc 01       	movw	r26, r24
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <memset+0x6>
    1f4a:	6d 93       	st	X+, r22
    1f4c:	41 50       	subi	r20, 0x01	; 1
    1f4e:	50 40       	sbci	r21, 0x00	; 0
    1f50:	e0 f7       	brcc	.-8      	; 0x1f4a <memset+0x4>
    1f52:	08 95       	ret

00001f54 <strnlen>:
    1f54:	fc 01       	movw	r30, r24
    1f56:	61 50       	subi	r22, 0x01	; 1
    1f58:	70 40       	sbci	r23, 0x00	; 0
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	01 10       	cpse	r0, r1
    1f5e:	d8 f7       	brcc	.-10     	; 0x1f56 <strnlen+0x2>
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	8e 0f       	add	r24, r30
    1f66:	9f 1f       	adc	r25, r31
    1f68:	08 95       	ret

00001f6a <strrev>:
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	67 2f       	mov	r22, r23
    1f70:	71 91       	ld	r23, Z+
    1f72:	77 23       	and	r23, r23
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <strrev+0x4>
    1f76:	32 97       	sbiw	r30, 0x02	; 2
    1f78:	04 c0       	rjmp	.+8      	; 0x1f82 <strrev+0x18>
    1f7a:	7c 91       	ld	r23, X
    1f7c:	6d 93       	st	X+, r22
    1f7e:	70 83       	st	Z, r23
    1f80:	62 91       	ld	r22, -Z
    1f82:	ae 17       	cp	r26, r30
    1f84:	bf 07       	cpc	r27, r31
    1f86:	c8 f3       	brcs	.-14     	; 0x1f7a <strrev+0x10>
    1f88:	08 95       	ret

00001f8a <fputc>:
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	fb 01       	movw	r30, r22
    1f94:	23 81       	ldd	r18, Z+3	; 0x03
    1f96:	21 fd       	sbrc	r18, 1
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <fputc+0x16>
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	9f ef       	ldi	r25, 0xFF	; 255
    1f9e:	2c c0       	rjmp	.+88     	; 0x1ff8 <fputc+0x6e>
    1fa0:	22 ff       	sbrs	r18, 2
    1fa2:	16 c0       	rjmp	.+44     	; 0x1fd0 <fputc+0x46>
    1fa4:	46 81       	ldd	r20, Z+6	; 0x06
    1fa6:	57 81       	ldd	r21, Z+7	; 0x07
    1fa8:	24 81       	ldd	r18, Z+4	; 0x04
    1faa:	35 81       	ldd	r19, Z+5	; 0x05
    1fac:	42 17       	cp	r20, r18
    1fae:	53 07       	cpc	r21, r19
    1fb0:	44 f4       	brge	.+16     	; 0x1fc2 <fputc+0x38>
    1fb2:	a0 81       	ld	r26, Z
    1fb4:	b1 81       	ldd	r27, Z+1	; 0x01
    1fb6:	9d 01       	movw	r18, r26
    1fb8:	2f 5f       	subi	r18, 0xFF	; 255
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	31 83       	std	Z+1, r19	; 0x01
    1fbe:	20 83       	st	Z, r18
    1fc0:	8c 93       	st	X, r24
    1fc2:	26 81       	ldd	r18, Z+6	; 0x06
    1fc4:	37 81       	ldd	r19, Z+7	; 0x07
    1fc6:	2f 5f       	subi	r18, 0xFF	; 255
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	37 83       	std	Z+7, r19	; 0x07
    1fcc:	26 83       	std	Z+6, r18	; 0x06
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <fputc+0x6e>
    1fd0:	8b 01       	movw	r16, r22
    1fd2:	ec 01       	movw	r28, r24
    1fd4:	fb 01       	movw	r30, r22
    1fd6:	00 84       	ldd	r0, Z+8	; 0x08
    1fd8:	f1 85       	ldd	r31, Z+9	; 0x09
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	09 95       	icall
    1fde:	89 2b       	or	r24, r25
    1fe0:	e1 f6       	brne	.-72     	; 0x1f9a <fputc+0x10>
    1fe2:	d8 01       	movw	r26, r16
    1fe4:	16 96       	adiw	r26, 0x06	; 6
    1fe6:	8d 91       	ld	r24, X+
    1fe8:	9c 91       	ld	r25, X
    1fea:	17 97       	sbiw	r26, 0x07	; 7
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	17 96       	adiw	r26, 0x07	; 7
    1ff0:	9c 93       	st	X, r25
    1ff2:	8e 93       	st	-X, r24
    1ff4:	16 97       	sbiw	r26, 0x06	; 6
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	08 95       	ret

00002002 <__ultoa_invert>:
    2002:	fa 01       	movw	r30, r20
    2004:	aa 27       	eor	r26, r26
    2006:	28 30       	cpi	r18, 0x08	; 8
    2008:	51 f1       	breq	.+84     	; 0x205e <__ultoa_invert+0x5c>
    200a:	20 31       	cpi	r18, 0x10	; 16
    200c:	81 f1       	breq	.+96     	; 0x206e <__ultoa_invert+0x6c>
    200e:	e8 94       	clt
    2010:	6f 93       	push	r22
    2012:	6e 7f       	andi	r22, 0xFE	; 254
    2014:	6e 5f       	subi	r22, 0xFE	; 254
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	8f 4f       	sbci	r24, 0xFF	; 255
    201a:	9f 4f       	sbci	r25, 0xFF	; 255
    201c:	af 4f       	sbci	r26, 0xFF	; 255
    201e:	b1 e0       	ldi	r27, 0x01	; 1
    2020:	3e d0       	rcall	.+124    	; 0x209e <__ultoa_invert+0x9c>
    2022:	b4 e0       	ldi	r27, 0x04	; 4
    2024:	3c d0       	rcall	.+120    	; 0x209e <__ultoa_invert+0x9c>
    2026:	67 0f       	add	r22, r23
    2028:	78 1f       	adc	r23, r24
    202a:	89 1f       	adc	r24, r25
    202c:	9a 1f       	adc	r25, r26
    202e:	a1 1d       	adc	r26, r1
    2030:	68 0f       	add	r22, r24
    2032:	79 1f       	adc	r23, r25
    2034:	8a 1f       	adc	r24, r26
    2036:	91 1d       	adc	r25, r1
    2038:	a1 1d       	adc	r26, r1
    203a:	6a 0f       	add	r22, r26
    203c:	71 1d       	adc	r23, r1
    203e:	81 1d       	adc	r24, r1
    2040:	91 1d       	adc	r25, r1
    2042:	a1 1d       	adc	r26, r1
    2044:	20 d0       	rcall	.+64     	; 0x2086 <__ultoa_invert+0x84>
    2046:	09 f4       	brne	.+2      	; 0x204a <__ultoa_invert+0x48>
    2048:	68 94       	set
    204a:	3f 91       	pop	r19
    204c:	2a e0       	ldi	r18, 0x0A	; 10
    204e:	26 9f       	mul	r18, r22
    2050:	11 24       	eor	r1, r1
    2052:	30 19       	sub	r19, r0
    2054:	30 5d       	subi	r19, 0xD0	; 208
    2056:	31 93       	st	Z+, r19
    2058:	de f6       	brtc	.-74     	; 0x2010 <__ultoa_invert+0xe>
    205a:	cf 01       	movw	r24, r30
    205c:	08 95       	ret
    205e:	46 2f       	mov	r20, r22
    2060:	47 70       	andi	r20, 0x07	; 7
    2062:	40 5d       	subi	r20, 0xD0	; 208
    2064:	41 93       	st	Z+, r20
    2066:	b3 e0       	ldi	r27, 0x03	; 3
    2068:	0f d0       	rcall	.+30     	; 0x2088 <__ultoa_invert+0x86>
    206a:	c9 f7       	brne	.-14     	; 0x205e <__ultoa_invert+0x5c>
    206c:	f6 cf       	rjmp	.-20     	; 0x205a <__ultoa_invert+0x58>
    206e:	46 2f       	mov	r20, r22
    2070:	4f 70       	andi	r20, 0x0F	; 15
    2072:	40 5d       	subi	r20, 0xD0	; 208
    2074:	4a 33       	cpi	r20, 0x3A	; 58
    2076:	18 f0       	brcs	.+6      	; 0x207e <__ultoa_invert+0x7c>
    2078:	49 5d       	subi	r20, 0xD9	; 217
    207a:	31 fd       	sbrc	r19, 1
    207c:	40 52       	subi	r20, 0x20	; 32
    207e:	41 93       	st	Z+, r20
    2080:	02 d0       	rcall	.+4      	; 0x2086 <__ultoa_invert+0x84>
    2082:	a9 f7       	brne	.-22     	; 0x206e <__ultoa_invert+0x6c>
    2084:	ea cf       	rjmp	.-44     	; 0x205a <__ultoa_invert+0x58>
    2086:	b4 e0       	ldi	r27, 0x04	; 4
    2088:	a6 95       	lsr	r26
    208a:	97 95       	ror	r25
    208c:	87 95       	ror	r24
    208e:	77 95       	ror	r23
    2090:	67 95       	ror	r22
    2092:	ba 95       	dec	r27
    2094:	c9 f7       	brne	.-14     	; 0x2088 <__ultoa_invert+0x86>
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	61 05       	cpc	r22, r1
    209a:	71 05       	cpc	r23, r1
    209c:	08 95       	ret
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	0a 2e       	mov	r0, r26
    20a4:	06 94       	lsr	r0
    20a6:	57 95       	ror	r21
    20a8:	47 95       	ror	r20
    20aa:	37 95       	ror	r19
    20ac:	27 95       	ror	r18
    20ae:	ba 95       	dec	r27
    20b0:	c9 f7       	brne	.-14     	; 0x20a4 <__ultoa_invert+0xa2>
    20b2:	62 0f       	add	r22, r18
    20b4:	73 1f       	adc	r23, r19
    20b6:	84 1f       	adc	r24, r20
    20b8:	95 1f       	adc	r25, r21
    20ba:	a0 1d       	adc	r26, r0
    20bc:	08 95       	ret

000020be <__prologue_saves__>:
    20be:	2f 92       	push	r2
    20c0:	3f 92       	push	r3
    20c2:	4f 92       	push	r4
    20c4:	5f 92       	push	r5
    20c6:	6f 92       	push	r6
    20c8:	7f 92       	push	r7
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	ca 1b       	sub	r28, r26
    20e8:	db 0b       	sbc	r29, r27
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	09 94       	ijmp

000020f6 <__epilogue_restores__>:
    20f6:	2a 88       	ldd	r2, Y+18	; 0x12
    20f8:	39 88       	ldd	r3, Y+17	; 0x11
    20fa:	48 88       	ldd	r4, Y+16	; 0x10
    20fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    20fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2100:	7d 84       	ldd	r7, Y+13	; 0x0d
    2102:	8c 84       	ldd	r8, Y+12	; 0x0c
    2104:	9b 84       	ldd	r9, Y+11	; 0x0b
    2106:	aa 84       	ldd	r10, Y+10	; 0x0a
    2108:	b9 84       	ldd	r11, Y+9	; 0x09
    210a:	c8 84       	ldd	r12, Y+8	; 0x08
    210c:	df 80       	ldd	r13, Y+7	; 0x07
    210e:	ee 80       	ldd	r14, Y+6	; 0x06
    2110:	fd 80       	ldd	r15, Y+5	; 0x05
    2112:	0c 81       	ldd	r16, Y+4	; 0x04
    2114:	1b 81       	ldd	r17, Y+3	; 0x03
    2116:	aa 81       	ldd	r26, Y+2	; 0x02
    2118:	b9 81       	ldd	r27, Y+1	; 0x01
    211a:	ce 0f       	add	r28, r30
    211c:	d1 1d       	adc	r29, r1
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	ed 01       	movw	r28, r26
    212a:	08 95       	ret

0000212c <_exit>:
    212c:	f8 94       	cli

0000212e <__stop_program>:
    212e:	ff cf       	rjmp	.-2      	; 0x212e <__stop_program>
