
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c6  00801800  00001fee  00002082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017d  008019c6  008019c6  00002248  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036e5  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001869  00000000  00000000  00005d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b5  00000000  00000000  0000756e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  00008f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8e  00000000  00000000  00009690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016da  00000000  00000000  0000a11e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <this_init+0x26>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	19 e1       	ldi	r17, 0x19	; 25
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b8 e1       	ldi	r27, 0x18	; 24
     3a8:	ee ee       	ldi	r30, 0xEE	; 238
     3aa:	ff e1       	ldi	r31, 0x1F	; 31
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a6 3c       	cpi	r26, 0xC6	; 198
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	2b e1       	ldi	r18, 0x1B	; 27
     3ba:	a6 ec       	ldi	r26, 0xC6	; 198
     3bc:	b9 e1       	ldi	r27, 0x19	; 25
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a3 34       	cpi	r26, 0x43	; 67
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__TEXT_REGION_LENGTH__+0x7e1400>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x7e1400>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "pwm.h"
#include "music.h"
#include "CAN.h"
volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	//cli();
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 c6 19 	sts	0x19C6, r24	; 0x8019c6 <__data_end>
	
	
	//sei();
	
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:


int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     41a:	0e 94 95 07 	call	0xf2a	; 0xf2a <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     41e:	87 e5       	ldi	r24, 0x57	; 87
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	9a 87       	std	Y+10, r25	; 0x0a
     424:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     42a:	8d e0       	ldi	r24, 0x0D	; 13
     42c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     42e:	86 e1       	ldi	r24, 0x16	; 22
     430:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     432:	81 e2       	ldi	r24, 0x21	; 33
     434:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	98 e1       	ldi	r25, 0x18	; 24
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
	printf("---------------------------------------\n\r");
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	98 e1       	ldi	r25, 0x18	; 24
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	97 e0       	ldi	r25, 0x07	; 7
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x4e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x58>
     45e:	00 00       	nop
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
		
		if (flag) {
			printf("Message received");
     468:	03 e4       	ldi	r16, 0x43	; 67
     46a:	18 e1       	ldi	r17, 0x18	; 24
	//music_playLisaGikk();                 
	while (1) {
		//
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     46c:	0e 94 b5 04 	call	0x96a	; 0x96a <sleep_now>
		
		if (flag) {
     470:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <__data_end>
     474:	88 23       	and	r24, r24
     476:	a1 f0       	breq	.+40     	; 0x4a0 <main+0x9a>
			printf("Message received");
     478:	1f 93       	push	r17
     47a:	0f 93       	push	r16
     47c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
			flag=0;
     480:	10 92 c6 19 	sts	0x19C6, r1	; 0x8019c6 <__data_end>
			CAN_receiveMessage(&received_message);
     484:	85 ed       	ldi	r24, 0xD5	; 213
     486:	99 e1       	ldi	r25, 0x19	; 25
     488:	0e 94 61 03 	call	0x6c2	; 0x6c2 <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	6c e2       	ldi	r22, 0x2C	; 44
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
			
		}
		
		joystick_sendPositionOverCAN();
     4a0:	0e 94 82 05 	call	0xb04	; 0xb04 <joystick_sendPositionOverCAN>
		slider_sendPositionOverCAN();
     4a4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <slider_sendPositionOverCAN>
	}
     4a8:	e1 cf       	rjmp	.-62     	; 0x46c <main+0x66>

000004aa <CAN_transmit_message>:
	
	
	
	
}
void CAN_transmit_message(CAN_message_t *message) {
     4aa:	cf 92       	push	r12
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	8c 01       	movw	r16, r24
	printf("Transmitting message");
     4ba:	84 e5       	ldi	r24, 0x54	; 84
     4bc:	98 e1       	ldi	r25, 0x18	; 24
     4be:	9f 93       	push	r25
     4c0:	8f 93       	push	r24
     4c2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     4c6:	80 91 c7 19 	lds	r24, 0x19C7	; 0x8019c7 <buffer_number.2114>
     4ca:	90 91 c8 19 	lds	r25, 0x19C8	; 0x8019c8 <buffer_number.2114+0x1>
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	63 e0       	ldi	r22, 0x03	; 3
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__divmodhi4>
     4d8:	28 2f       	mov	r18, r24
     4da:	39 2f       	mov	r19, r25
     4dc:	80 93 c7 19 	sts	0x19C7, r24	; 0x8019c7 <buffer_number.2114>
     4e0:	90 93 c8 19 	sts	0x19C8, r25	; 0x8019c8 <buffer_number.2114+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	21 30       	cpi	r18, 0x01	; 1
     4ea:	31 05       	cpc	r19, r1
     4ec:	81 f1       	breq	.+96     	; 0x54e <__stack+0x4f>
     4ee:	22 30       	cpi	r18, 0x02	; 2
     4f0:	31 05       	cpc	r19, r1
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <CAN_transmit_message+0x4c>
     4f4:	46 c0       	rjmp	.+140    	; 0x582 <__stack+0x83>
     4f6:	23 2b       	or	r18, r19
     4f8:	09 f0       	breq	.+2      	; 0x4fc <CAN_transmit_message+0x52>
     4fa:	5c c0       	rjmp	.+184    	; 0x5b4 <__stack+0xb5>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     4fc:	f8 01       	movw	r30, r16
     4fe:	40 85       	ldd	r20, Z+8	; 0x08
     500:	51 85       	ldd	r21, Z+9	; 0x09
     502:	42 95       	swap	r20
     504:	44 0f       	add	r20, r20
     506:	40 7e       	andi	r20, 0xE0	; 224
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	62 e3       	ldi	r22, 0x32	; 50
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 ee       	ldi	r24, 0xE0	; 224
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     516:	f8 01       	movw	r30, r16
     518:	60 85       	ldd	r22, Z+8	; 0x08
     51a:	71 85       	ldd	r23, Z+9	; 0x09
     51c:	76 95       	lsr	r23
     51e:	67 95       	ror	r22
     520:	76 95       	lsr	r23
     522:	67 95       	ror	r22
     524:	76 95       	lsr	r23
     526:	67 95       	ror	r22
     528:	81 e3       	ldi	r24, 0x31	; 49
     52a:	0e 94 af 03 	call	0x75e	; 0x75e <CAN_controller_write>
				
				printf("Sending whole id: %i", message->ID );
     52e:	f8 01       	movw	r30, r16
     530:	80 85       	ldd	r24, Z+8	; 0x08
     532:	91 85       	ldd	r25, Z+9	; 0x09
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	89 e6       	ldi	r24, 0x69	; 105
     53a:	98 e1       	ldi	r25, 0x18	; 24
     53c:	9f 93       	push	r25
     53e:	8f 93       	push	r24
     540:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>


				break;
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	33 c0       	rjmp	.+102    	; 0x5b4 <__stack+0xb5>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     54e:	f8 01       	movw	r30, r16
     550:	40 85       	ldd	r20, Z+8	; 0x08
     552:	51 85       	ldd	r21, Z+9	; 0x09
     554:	42 95       	swap	r20
     556:	44 0f       	add	r20, r20
     558:	40 7e       	andi	r20, 0xE0	; 224
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	62 e4       	ldi	r22, 0x42	; 66
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 ee       	ldi	r24, 0xE0	; 224
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     568:	f8 01       	movw	r30, r16
     56a:	60 85       	ldd	r22, Z+8	; 0x08
     56c:	71 85       	ldd	r23, Z+9	; 0x09
     56e:	76 95       	lsr	r23
     570:	67 95       	ror	r22
     572:	76 95       	lsr	r23
     574:	67 95       	ror	r22
     576:	76 95       	lsr	r23
     578:	67 95       	ror	r22
     57a:	81 e4       	ldi	r24, 0x41	; 65
     57c:	0e 94 af 03 	call	0x75e	; 0x75e <CAN_controller_write>
				
				break;
     580:	19 c0       	rjmp	.+50     	; 0x5b4 <__stack+0xb5>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     582:	f8 01       	movw	r30, r16
     584:	40 85       	ldd	r20, Z+8	; 0x08
     586:	51 85       	ldd	r21, Z+9	; 0x09
     588:	42 95       	swap	r20
     58a:	44 0f       	add	r20, r20
     58c:	40 7e       	andi	r20, 0xE0	; 224
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	62 e5       	ldi	r22, 0x52	; 82
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	80 ee       	ldi	r24, 0xE0	; 224
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     59c:	f8 01       	movw	r30, r16
     59e:	60 85       	ldd	r22, Z+8	; 0x08
     5a0:	71 85       	ldd	r23, Z+9	; 0x09
     5a2:	76 95       	lsr	r23
     5a4:	67 95       	ror	r22
     5a6:	76 95       	lsr	r23
     5a8:	67 95       	ror	r22
     5aa:	76 95       	lsr	r23
     5ac:	67 95       	ror	r22
     5ae:	81 e5       	ldi	r24, 0x51	; 81
     5b0:	0e 94 af 03 	call	0x75e	; 0x75e <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     5b4:	80 91 c7 19 	lds	r24, 0x19C7	; 0x8019c7 <buffer_number.2114>
     5b8:	90 91 c8 19 	lds	r25, 0x19C8	; 0x8019c8 <buffer_number.2114+0x1>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	91 05       	cpc	r25, r1
     5c0:	e9 f0       	breq	.+58     	; 0x5fc <__stack+0xfd>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	91 05       	cpc	r25, r1
     5c6:	21 f1       	breq	.+72     	; 0x610 <__stack+0x111>
     5c8:	89 2b       	or	r24, r25
     5ca:	59 f5       	brne	.+86     	; 0x622 <__stack+0x123>
			case 0:
				printf("\n\rtransmitting data length: %i\n\r", message->data_length);
     5cc:	f8 01       	movw	r30, r16
     5ce:	82 85       	ldd	r24, Z+10	; 0x0a
     5d0:	1f 92       	push	r1
     5d2:	8f 93       	push	r24
     5d4:	8e e7       	ldi	r24, 0x7E	; 126
     5d6:	98 e1       	ldi	r25, 0x18	; 24
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     5e0:	f8 01       	movw	r30, r16
     5e2:	42 85       	ldd	r20, Z+10	; 0x0a
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	65 e3       	ldi	r22, 0x35	; 53
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	8f e0       	ldi	r24, 0x0F	; 15
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
				break;
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	13 c0       	rjmp	.+38     	; 0x622 <__stack+0x123>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     5fc:	f8 01       	movw	r30, r16
     5fe:	42 85       	ldd	r20, Z+10	; 0x0a
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	65 e4       	ldi	r22, 0x45	; 69
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	8f e0       	ldi	r24, 0x0F	; 15
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
				break;
     60e:	09 c0       	rjmp	.+18     	; 0x622 <__stack+0x123>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     610:	f8 01       	movw	r30, r16
     612:	42 85       	ldd	r20, Z+10	; 0x0a
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	65 e5       	ldi	r22, 0x55	; 85
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	8f e0       	ldi	r24, 0x0F	; 15
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     622:	f8 01       	movw	r30, r16
     624:	82 85       	ldd	r24, Z+10	; 0x0a
     626:	88 23       	and	r24, r24
     628:	09 f4       	brne	.+2      	; 0x62c <__stack+0x12d>
     62a:	3f c0       	rjmp	.+126    	; 0x6aa <__stack+0x1ab>
     62c:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     62e:	0f 2e       	mov	r0, r31
     630:	ff e9       	ldi	r31, 0x9F	; 159
     632:	cf 2e       	mov	r12, r31
     634:	f8 e1       	ldi	r31, 0x18	; 24
     636:	df 2e       	mov	r13, r31
     638:	f0 2d       	mov	r31, r0
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
		switch(buffer_number) {
     63a:	80 91 c7 19 	lds	r24, 0x19C7	; 0x8019c7 <buffer_number.2114>
     63e:	90 91 c8 19 	lds	r25, 0x19C8	; 0x8019c8 <buffer_number.2114+0x1>
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	91 05       	cpc	r25, r1
     646:	d9 f0       	breq	.+54     	; 0x67e <__stack+0x17f>
     648:	82 30       	cpi	r24, 0x02	; 2
     64a:	91 05       	cpc	r25, r1
     64c:	09 f1       	breq	.+66     	; 0x690 <__stack+0x191>
     64e:	89 2b       	or	r24, r25
     650:	39 f5       	brne	.+78     	; 0x6a0 <__stack+0x1a1>
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     652:	78 01       	movw	r14, r16
     654:	ec 0e       	add	r14, r28
     656:	f1 1c       	adc	r15, r1
     658:	f7 01       	movw	r30, r14
     65a:	80 81       	ld	r24, Z
     65c:	1f 92       	push	r1
     65e:	8f 93       	push	r24
     660:	df 92       	push	r13
     662:	cf 92       	push	r12
     664:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     668:	f7 01       	movw	r30, r14
     66a:	60 81       	ld	r22, Z
     66c:	86 e3       	ldi	r24, 0x36	; 54
     66e:	8c 0f       	add	r24, r28
     670:	0e 94 af 03 	call	0x75e	; 0x75e <CAN_controller_write>
				break;
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	11 c0       	rjmp	.+34     	; 0x6a0 <__stack+0x1a1>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     67e:	f8 01       	movw	r30, r16
     680:	ec 0f       	add	r30, r28
     682:	f1 1d       	adc	r31, r1
     684:	60 81       	ld	r22, Z
     686:	86 e4       	ldi	r24, 0x46	; 70
     688:	8c 0f       	add	r24, r28
     68a:	0e 94 af 03 	call	0x75e	; 0x75e <CAN_controller_write>
				break;
     68e:	08 c0       	rjmp	.+16     	; 0x6a0 <__stack+0x1a1>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     690:	f8 01       	movw	r30, r16
     692:	ec 0f       	add	r30, r28
     694:	f1 1d       	adc	r31, r1
     696:	60 81       	ld	r22, Z
     698:	86 e5       	ldi	r24, 0x56	; 86
     69a:	8c 0f       	add	r24, r28
     69c:	0e 94 af 03 	call	0x75e	; 0x75e <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     6a0:	cf 5f       	subi	r28, 0xFF	; 255
     6a2:	f8 01       	movw	r30, r16
     6a4:	82 85       	ldd	r24, Z+10	; 0x0a
     6a6:	8c 13       	cpse	r24, r28
     6a8:	c8 cf       	rjmp	.-112    	; 0x63a <__stack+0x13b>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     6aa:	80 91 c7 19 	lds	r24, 0x19C7	; 0x8019c7 <buffer_number.2114>
     6ae:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	08 95       	ret

000006c2 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     6ce:	82 e6       	ldi	r24, 0x62	; 98
     6d0:	0e 94 99 03 	call	0x732	; 0x732 <CAN_controller_read>
     6d4:	c8 2f       	mov	r28, r24
     6d6:	81 e6       	ldi	r24, 0x61	; 97
     6d8:	0e 94 99 03 	call	0x732	; 0x732 <CAN_controller_read>
     6dc:	c2 95       	swap	r28
     6de:	c6 95       	lsr	r28
     6e0:	c7 70       	andi	r28, 0x07	; 7
     6e2:	28 e0       	ldi	r18, 0x08	; 8
     6e4:	82 9f       	mul	r24, r18
     6e6:	c0 01       	movw	r24, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	8c 0f       	add	r24, r28
     6ec:	91 1d       	adc	r25, r1
     6ee:	f7 01       	movw	r30, r14
     6f0:	91 87       	std	Z+9, r25	; 0x09
     6f2:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     6f4:	85 e6       	ldi	r24, 0x65	; 101
     6f6:	0e 94 99 03 	call	0x732	; 0x732 <CAN_controller_read>
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	f7 01       	movw	r30, r14
     6fe:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     700:	82 85       	ldd	r24, Z+10	; 0x0a
     702:	88 23       	and	r24, r24
     704:	81 f0       	breq	.+32     	; 0x726 <CAN_receiveMessage+0x64>
     706:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     708:	0c 2f       	mov	r16, r28
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	86 e6       	ldi	r24, 0x66	; 102
     70e:	8c 0f       	add	r24, r28
     710:	0e 94 99 03 	call	0x732	; 0x732 <CAN_controller_read>
     714:	f7 01       	movw	r30, r14
     716:	e0 0f       	add	r30, r16
     718:	f1 1f       	adc	r31, r17
     71a:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     71c:	cf 5f       	subi	r28, 0xFF	; 255
     71e:	f7 01       	movw	r30, r14
     720:	82 85       	ldd	r24, Z+10	; 0x0a
     722:	8c 13       	cpse	r24, r28
     724:	f1 cf       	rjmp	.-30     	; 0x708 <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	08 95       	ret

00000732 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     732:	cf 93       	push	r28
     734:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	84 e0       	ldi	r24, 0x04	; 4
     73a:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
	SPI_masterWrite(addr);
     744:	8c 2f       	mov	r24, r28
     746:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     74a:	0e 94 fe 07 	call	0xffc	; 0xffc <SPI_masterRead>
     74e:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
	
	return data;
}
     758:	8c 2f       	mov	r24, r28
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	d8 2f       	mov	r29, r24
     764:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	84 e0       	ldi	r24, 0x04	; 4
     76a:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
	SPI_masterWrite(addr);
     774:	8d 2f       	mov	r24, r29
     776:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
	SPI_masterWrite(data);
     77a:	8c 2f       	mov	r24, r28
     77c:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	84 e0       	ldi	r24, 0x04	; 4
     784:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
	
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	d8 2f       	mov	r29, r24
     796:	16 2f       	mov	r17, r22
     798:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	84 e0       	ldi	r24, 0x04	; 4
     79e:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     7a2:	85 e0       	ldi	r24, 0x05	; 5
     7a4:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
		SPI_masterWrite(addr);
     7a8:	81 2f       	mov	r24, r17
     7aa:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
		SPI_masterWrite(mask);
     7ae:	8d 2f       	mov	r24, r29
     7b0:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
		SPI_masterWrite(data);
     7b4:	8c 2f       	mov	r24, r28
     7b6:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>

}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	08 95       	ret

000007ca <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
	printf("Before spi write");
     7d2:	86 eb       	ldi	r24, 0xB6	; 182
     7d4:	98 e1       	ldi	r25, 0x18	; 24
     7d6:	9f 93       	push	r25
     7d8:	8f 93       	push	r24
     7da:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
	SPI_masterWrite(MCP_RESET);
     7de:	80 ec       	ldi	r24, 0xC0	; 192
     7e0:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	84 e0       	ldi	r24, 0x04	; 4
     7e8:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
}
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	08 95       	ret

000007f2 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     7f2:	cf 93       	push	r28
     7f4:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	84 e0       	ldi	r24, 0x04	; 4
     7fa:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
	switch (buffer) {
     7fe:	c1 30       	cpi	r28, 0x01	; 1
     800:	41 f0       	breq	.+16     	; 0x812 <CAN_controller_RTS+0x20>
     802:	18 f0       	brcs	.+6      	; 0x80a <CAN_controller_RTS+0x18>
     804:	c2 30       	cpi	r28, 0x02	; 2
     806:	49 f0       	breq	.+18     	; 0x81a <CAN_controller_RTS+0x28>
     808:	0b c0       	rjmp	.+22     	; 0x820 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     80a:	81 e8       	ldi	r24, 0x81	; 129
     80c:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
			break;
     810:	07 c0       	rjmp	.+14     	; 0x820 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     812:	82 e8       	ldi	r24, 0x82	; 130
     814:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
			break;
     818:	03 c0       	rjmp	.+6      	; 0x820 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     81a:	84 e8       	ldi	r24, 0x84	; 132
     81c:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_setChipSelect>
}
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     832:	0e 94 e5 03 	call	0x7ca	; 0x7ca <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     836:	8e e0       	ldi	r24, 0x0E	; 14
     838:	0e 94 99 03 	call	0x732	; 0x732 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     83c:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     83e:	80 38       	cpi	r24, 0x80	; 128
     840:	69 f0       	breq	.+26     	; 0x85c <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     842:	1f 92       	push	r1
     844:	8f 93       	push	r24
     846:	87 ec       	ldi	r24, 0xC7	; 199
     848:	98 e1       	ldi	r25, 0x18	; 24
     84a:	9f 93       	push	r25
     84c:	8f 93       	push	r24
     84e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
		return;
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	38 c0       	rjmp	.+112    	; 0x8cc <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     85c:	4c 2f       	mov	r20, r28
     85e:	4c 60       	ori	r20, 0x0C	; 12
     860:	6f e0       	ldi	r22, 0x0F	; 15
     862:	8e ee       	ldi	r24, 0xEE	; 238
     864:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	6b e2       	ldi	r22, 0x2B	; 43
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     872:	40 e6       	ldi	r20, 0x60	; 96
     874:	60 e6       	ldi	r22, 0x60	; 96
     876:	80 e6       	ldi	r24, 0x60	; 96
     878:	0e 94 c7 03 	call	0x78e	; 0x78e <CAN_controller_bitModify>
     87c:	2f ef       	ldi	r18, 0xFF	; 255
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	21 50       	subi	r18, 0x01	; 1
     884:	80 40       	sbci	r24, 0x00	; 0
     886:	90 40       	sbci	r25, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <CAN_controller_setMode+0x56>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <CAN_controller_setMode+0x60>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     88e:	8e e0       	ldi	r24, 0x0E	; 14
     890:	0e 94 99 03 	call	0x732	; 0x732 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     894:	d8 2f       	mov	r29, r24
     896:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     898:	cd 17       	cp	r28, r29
     89a:	61 f0       	breq	.+24     	; 0x8b4 <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     89c:	1f 92       	push	r1
     89e:	df 93       	push	r29
     8a0:	82 ee       	ldi	r24, 0xE2	; 226
     8a2:	98 e1       	ldi	r25, 0x18	; 24
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     8b4:	1f 92       	push	r1
     8b6:	df 93       	push	r29
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	99 e1       	ldi	r25, 0x19	; 25
     8bc:	9f 93       	push	r25
     8be:	8f 93       	push	r24
     8c0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     8d2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <SPI_masterInit>

	CAN_controller_setMode(MODE_NORMAL);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	0e 94 16 04 	call	0x82c	; 0x82c <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     8dc:	8b b7       	in	r24, 0x3b	; 59
     8de:	80 64       	ori	r24, 0x40	; 64
     8e0:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     8e2:	85 b7       	in	r24, 0x35	; 53
     8e4:	82 60       	ori	r24, 0x02	; 2
     8e6:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     8e8:	85 b7       	in	r24, 0x35	; 53
     8ea:	8e 7f       	andi	r24, 0xFE	; 254
     8ec:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     8ee:	81 b3       	in	r24, 0x11	; 17
     8f0:	84 70       	andi	r24, 0x04	; 4
     8f2:	81 bb       	out	0x11, r24	; 17
     8f4:	2f ef       	ldi	r18, 0xFF	; 255
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	21 50       	subi	r18, 0x01	; 1
     8fc:	80 40       	sbci	r24, 0x00	; 0
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	e1 f7       	brne	.-8      	; 0x8fa <CAN_controller_init+0x28>
     902:	00 c0       	rjmp	.+0      	; 0x904 <CAN_controller_init+0x32>
     904:	00 c0       	rjmp	.+0      	; 0x906 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     906:	81 e1       	ldi	r24, 0x11	; 17
     908:	99 e1       	ldi	r25, 0x19	; 25
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     912:	8e e0       	ldi	r24, 0x0E	; 14
     914:	0e 94 99 03 	call	0x732	; 0x732 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     918:	1f 92       	push	r1
     91a:	8f 93       	push	r24
     91c:	8a e2       	ldi	r24, 0x2A	; 42
     91e:	99 e1       	ldi	r25, 0x19	; 25
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>

}
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	08 95       	ret

00000936 <pwm_init>:
    PRESC_1024 =   (1 << CS02)  |               (1 << CS00)
} prescaling;

void pwm_init() {
    //set output pin
    DDRB = (1 << PB0); 
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	87 bb       	out	0x17, r24	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	81 bf       	out	0x31, r24	; 49
    
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
     942:	83 b7       	in	r24, 0x33	; 51
     944:	88 60       	ori	r24, 0x08	; 8
     946:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
     948:	83 b7       	in	r24, 0x33	; 51
     94a:	80 61       	ori	r24, 0x10	; 16
     94c:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
     94e:	83 b7       	in	r24, 0x33	; 51
     950:	88 7f       	andi	r24, 0xF8	; 248
     952:	83 bf       	out	0x33, r24	; 51
     954:	08 95       	ret

00000956 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     956:	85 b7       	in	r24, 0x35	; 53
     958:	8f 7e       	andi	r24, 0xEF	; 239
     95a:	85 bf       	out	0x35, r24	; 53
     95c:	84 b7       	in	r24, 0x34	; 52
     95e:	8f 7d       	andi	r24, 0xDF	; 223
     960:	84 bf       	out	0x34, r24	; 52
     962:	86 b7       	in	r24, 0x36	; 54
     964:	8f 77       	andi	r24, 0x7F	; 127
     966:	86 bf       	out	0x36, r24	; 54
     968:	08 95       	ret

0000096a <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     96a:	88 b1       	in	r24, 0x08	; 8
     96c:	88 68       	ori	r24, 0x88	; 136
     96e:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
     970:	85 b7       	in	r24, 0x35	; 53
     972:	80 62       	ori	r24, 0x20	; 32
     974:	85 bf       	out	0x35, r24	; 53
     976:	88 95       	sleep
     978:	85 b7       	in	r24, 0x35	; 53
     97a:	8f 7d       	andi	r24, 0xDF	; 223
     97c:	85 bf       	out	0x35, r24	; 53
     97e:	08 95       	ret

00000980 <joystickInit>:
		case DOWN:
			printf("Down\n\r");
			return;
		
	}
}
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     986:	80 93 e1 19 	sts	0x19E1, r24	; 0x8019e1 <joystickOffsetX>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     990:	80 93 e0 19 	sts	0x19E0, r24	; 0x8019e0 <joystickOffsetY>
     994:	08 95       	ret

00000996 <joystick_readPosition>:
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     9a8:	c8 2f       	mov	r28, r24
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     9b0:	e8 2f       	mov	r30, r24
     9b2:	60 91 e1 19 	lds	r22, 0x19E1	; 0x8019e1 <joystickOffsetX>
     9b6:	c6 17       	cp	r28, r22
     9b8:	80 f4       	brcc	.+32     	; 0x9da <joystick_readPosition+0x44>
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	2c 2f       	mov	r18, r28
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	26 1b       	sub	r18, r22
     9c2:	37 0b       	sbc	r19, r23
     9c4:	44 e6       	ldi	r20, 0x64	; 100
     9c6:	42 9f       	mul	r20, r18
     9c8:	c0 01       	movw	r24, r0
     9ca:	43 9f       	mul	r20, r19
     9cc:	90 0d       	add	r25, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__divmodhi4>
     9d4:	60 93 c9 19 	sts	0x19C9, r22	; 0x8019c9 <joystick_pos>
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <joystick_readPosition+0x6c>
     9da:	46 2f       	mov	r20, r22
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	2c 2f       	mov	r18, r28
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	24 1b       	sub	r18, r20
     9e4:	35 0b       	sbc	r19, r21
     9e6:	64 e6       	ldi	r22, 0x64	; 100
     9e8:	62 9f       	mul	r22, r18
     9ea:	c0 01       	movw	r24, r0
     9ec:	63 9f       	mul	r22, r19
     9ee:	90 0d       	add	r25, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	6f ef       	ldi	r22, 0xFF	; 255
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	64 1b       	sub	r22, r20
     9f8:	75 0b       	sbc	r23, r21
     9fa:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__divmodhi4>
     9fe:	60 93 c9 19 	sts	0x19C9, r22	; 0x8019c9 <joystick_pos>
     a02:	20 91 e0 19 	lds	r18, 0x19E0	; 0x8019e0 <joystickOffsetY>
     a06:	e2 17       	cp	r30, r18
     a08:	88 f4       	brcc	.+34     	; 0xa2c <joystick_readPosition+0x96>
     a0a:	62 2f       	mov	r22, r18
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	4e 2f       	mov	r20, r30
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	46 1b       	sub	r20, r22
     a14:	57 0b       	sbc	r21, r23
     a16:	24 e6       	ldi	r18, 0x64	; 100
     a18:	24 9f       	mul	r18, r20
     a1a:	c0 01       	movw	r24, r0
     a1c:	25 9f       	mul	r18, r21
     a1e:	90 0d       	add	r25, r0
     a20:	11 24       	eor	r1, r1
     a22:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__divmodhi4>
     a26:	60 93 ca 19 	sts	0x19CA, r22	; 0x8019ca <joystick_pos+0x1>
     a2a:	13 c0       	rjmp	.+38     	; 0xa52 <joystick_readPosition+0xbc>
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	4e 2f       	mov	r20, r30
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	42 1b       	sub	r20, r18
     a34:	53 0b       	sbc	r21, r19
     a36:	64 e6       	ldi	r22, 0x64	; 100
     a38:	64 9f       	mul	r22, r20
     a3a:	c0 01       	movw	r24, r0
     a3c:	65 9f       	mul	r22, r21
     a3e:	90 0d       	add	r25, r0
     a40:	11 24       	eor	r1, r1
     a42:	6f ef       	ldi	r22, 0xFF	; 255
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	62 1b       	sub	r22, r18
     a48:	73 0b       	sbc	r23, r19
     a4a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__divmodhi4>
     a4e:	60 93 ca 19 	sts	0x19CA, r22	; 0x8019ca <joystick_pos+0x1>
     a52:	c9 ec       	ldi	r28, 0xC9	; 201
     a54:	d9 e1       	ldi	r29, 0x19	; 25
     a56:	68 81       	ld	r22, Y
     a58:	06 2e       	mov	r0, r22
     a5a:	00 0c       	add	r0, r0
     a5c:	77 0b       	sbc	r23, r23
     a5e:	88 0b       	sbc	r24, r24
     a60:	99 0b       	sbc	r25, r25
     a62:	0e 94 c7 09 	call	0x138e	; 0x138e <__floatsisf>
     a66:	6b 01       	movw	r12, r22
     a68:	7c 01       	movw	r14, r24
     a6a:	69 81       	ldd	r22, Y+1	; 0x01
     a6c:	06 2e       	mov	r0, r22
     a6e:	00 0c       	add	r0, r0
     a70:	77 0b       	sbc	r23, r23
     a72:	88 0b       	sbc	r24, r24
     a74:	99 0b       	sbc	r25, r25
     a76:	0e 94 c7 09 	call	0x138e	; 0x138e <__floatsisf>
     a7a:	a7 01       	movw	r20, r14
     a7c:	96 01       	movw	r18, r12
     a7e:	0e 94 be 08 	call	0x117c	; 0x117c <atan2>
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	44 eb       	ldi	r20, 0xB4	; 180
     a88:	53 e4       	ldi	r21, 0x43	; 67
     a8a:	0e 94 82 0a 	call	0x1504	; 0x1504 <__mulsf3>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	5f e3       	ldi	r21, 0x3F	; 63
     a96:	0e 94 82 0a 	call	0x1504	; 0x1504 <__mulsf3>
     a9a:	23 ec       	ldi	r18, 0xC3	; 195
     a9c:	35 ef       	ldi	r19, 0xF5	; 245
     a9e:	48 e4       	ldi	r20, 0x48	; 72
     aa0:	50 e4       	ldi	r21, 0x40	; 64
     aa2:	0e 94 1d 09 	call	0x123a	; 0x123a <__divsf3>
     aa6:	0e 94 8f 09 	call	0x131e	; 0x131e <__fixsfsi>
     aaa:	7b 83       	std	Y+3, r23	; 0x03
     aac:	6a 83       	std	Y+2, r22	; 0x02
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	08 95       	ret

00000abc <joystick_getDirection>:
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	94 e0       	ldi	r25, 0x04	; 4
     ac2:	98 0f       	add	r25, r24
     ac4:	99 30       	cpi	r25, 0x09	; 9
     ac6:	20 f4       	brcc	.+8      	; 0xad0 <joystick_getDirection+0x14>
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	9c 5f       	subi	r25, 0xFC	; 252
     acc:	99 30       	cpi	r25, 0x09	; 9
     ace:	90 f0       	brcs	.+36     	; 0xaf4 <joystick_getDirection+0x38>
     ad0:	85 30       	cpi	r24, 0x05	; 5
     ad2:	2c f0       	brlt	.+10     	; 0xade <joystick_getDirection+0x22>
     ad4:	81 81       	ldd	r24, Z+1	; 0x01
     ad6:	8f 5c       	subi	r24, 0xCF	; 207
     ad8:	83 36       	cpi	r24, 0x63	; 99
     ada:	38 f4       	brcc	.+14     	; 0xaea <joystick_getDirection+0x2e>
     adc:	0d c0       	rjmp	.+26     	; 0xaf8 <joystick_getDirection+0x3c>
     ade:	8c 3f       	cpi	r24, 0xFC	; 252
     ae0:	24 f4       	brge	.+8      	; 0xaea <joystick_getDirection+0x2e>
     ae2:	81 81       	ldd	r24, Z+1	; 0x01
     ae4:	8f 5c       	subi	r24, 0xCF	; 207
     ae6:	83 36       	cpi	r24, 0x63	; 99
     ae8:	48 f0       	brcs	.+18     	; 0xafc <joystick_getDirection+0x40>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	8c 3f       	cpi	r24, 0xFC	; 252
     aee:	44 f0       	brlt	.+16     	; 0xb00 <joystick_getDirection+0x44>
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	08 95       	ret
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	08 95       	ret
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	08 95       	ret
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	08 95       	ret
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	08 95       	ret

00000b04 <joystick_sendPositionOverCAN>:

void joystick_sendPositionOverCAN() {
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	2b 97       	sbiw	r28, 0x0b	; 11
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
		//printf("sending");

	CAN_message_t message;
	
	message.ID = 0x01;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	9a 87       	std	Y+10, r25	; 0x0a
     b1e:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 2;
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = joystick_pos.x_pos;
     b24:	e9 ec       	ldi	r30, 0xC9	; 201
     b26:	f9 e1       	ldi	r31, 0x19	; 25
     b28:	80 81       	ld	r24, Z
     b2a:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = joystick_pos.y_pos;
     b2c:	81 81       	ldd	r24, Z+1	; 0x01
     b2e:	8a 83       	std	Y+2, r24	; 0x02

	
	CAN_transmit_message(&message);
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 55 02 	call	0x4aa	; 0x4aa <CAN_transmit_message>
     b38:	2b 96       	adiw	r28, 0x0b	; 11
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <this_init>:



MenuNode nodes[11];

void this_init() {
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
	
	printf("this_init initiating");
     b52:	85 e3       	ldi	r24, 0x35	; 53
     b54:	99 e1       	ldi	r25, 0x19	; 25
     b56:	9f 93       	push	r25
     b58:	8f 93       	push	r24
     b5a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
	
	strcpy(nodes[0].name, "Main menu");
     b5e:	c2 ee       	ldi	r28, 0xE2	; 226
     b60:	d9 e1       	ldi	r29, 0x19	; 25
     b62:	8a e0       	ldi	r24, 0x0A	; 10
     b64:	ea e4       	ldi	r30, 0x4A	; 74
     b66:	f9 e1       	ldi	r31, 0x19	; 25
     b68:	de 01       	movw	r26, r28
     b6a:	01 90       	ld	r0, Z+
     b6c:	0d 92       	st	X+, r0
     b6e:	8a 95       	dec	r24
     b70:	e1 f7       	brne	.-8      	; 0xb6a <this_init+0x20>
	strcpy(nodes[1].name, "Play game");
     b72:	8a e0       	ldi	r24, 0x0A	; 10
     b74:	e4 e5       	ldi	r30, 0x54	; 84
     b76:	f9 e1       	ldi	r31, 0x19	; 25
     b78:	a1 e0       	ldi	r26, 0x01	; 1
     b7a:	ba e1       	ldi	r27, 0x1A	; 26
     b7c:	01 90       	ld	r0, Z+
     b7e:	0d 92       	st	X+, r0
     b80:	8a 95       	dec	r24
     b82:	e1 f7       	brne	.-8      	; 0xb7c <this_init+0x32>
	strcpy(nodes[2].name, "High scores");
     b84:	8c e0       	ldi	r24, 0x0C	; 12
     b86:	ee e5       	ldi	r30, 0x5E	; 94
     b88:	f9 e1       	ldi	r31, 0x19	; 25
     b8a:	a0 e2       	ldi	r26, 0x20	; 32
     b8c:	ba e1       	ldi	r27, 0x1A	; 26
     b8e:	01 90       	ld	r0, Z+
     b90:	0d 92       	st	X+, r0
     b92:	8a 95       	dec	r24
     b94:	e1 f7       	brne	.-8      	; 0xb8e <this_init+0x44>
	strcpy(nodes[3].name, "Music");
     b96:	86 e0       	ldi	r24, 0x06	; 6
     b98:	ea e6       	ldi	r30, 0x6A	; 106
     b9a:	f9 e1       	ldi	r31, 0x19	; 25
     b9c:	af e3       	ldi	r26, 0x3F	; 63
     b9e:	ba e1       	ldi	r27, 0x1A	; 26
     ba0:	01 90       	ld	r0, Z+
     ba2:	0d 92       	st	X+, r0
     ba4:	8a 95       	dec	r24
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <this_init+0x56>
	strcpy(nodes[4].name, "Game 1");
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	e0 e7       	ldi	r30, 0x70	; 112
     bac:	f9 e1       	ldi	r31, 0x19	; 25
     bae:	ae e5       	ldi	r26, 0x5E	; 94
     bb0:	ba e1       	ldi	r27, 0x1A	; 26
     bb2:	01 90       	ld	r0, Z+
     bb4:	0d 92       	st	X+, r0
     bb6:	8a 95       	dec	r24
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <this_init+0x68>
	strcpy(nodes[5].name, "Game 2");
     bba:	87 e0       	ldi	r24, 0x07	; 7
     bbc:	e7 e7       	ldi	r30, 0x77	; 119
     bbe:	f9 e1       	ldi	r31, 0x19	; 25
     bc0:	ad e7       	ldi	r26, 0x7D	; 125
     bc2:	ba e1       	ldi	r27, 0x1A	; 26
     bc4:	01 90       	ld	r0, Z+
     bc6:	0d 92       	st	X+, r0
     bc8:	8a 95       	dec	r24
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <this_init+0x7a>
	strcpy(nodes[6].name, "Score 1");
     bcc:	88 e0       	ldi	r24, 0x08	; 8
     bce:	ee e7       	ldi	r30, 0x7E	; 126
     bd0:	f9 e1       	ldi	r31, 0x19	; 25
     bd2:	ac e9       	ldi	r26, 0x9C	; 156
     bd4:	ba e1       	ldi	r27, 0x1A	; 26
     bd6:	01 90       	ld	r0, Z+
     bd8:	0d 92       	st	X+, r0
     bda:	8a 95       	dec	r24
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <this_init+0x8c>
	strcpy(nodes[7].name, "Score 2");
     bde:	88 e0       	ldi	r24, 0x08	; 8
     be0:	e6 e8       	ldi	r30, 0x86	; 134
     be2:	f9 e1       	ldi	r31, 0x19	; 25
     be4:	ab eb       	ldi	r26, 0xBB	; 187
     be6:	ba e1       	ldi	r27, 0x1A	; 26
     be8:	01 90       	ld	r0, Z+
     bea:	0d 92       	st	X+, r0
     bec:	8a 95       	dec	r24
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <this_init+0x9e>
	strcpy(nodes[8].name, "Score 3");
     bf0:	88 e0       	ldi	r24, 0x08	; 8
     bf2:	ee e8       	ldi	r30, 0x8E	; 142
     bf4:	f9 e1       	ldi	r31, 0x19	; 25
     bf6:	aa ed       	ldi	r26, 0xDA	; 218
     bf8:	ba e1       	ldi	r27, 0x1A	; 26
     bfa:	01 90       	ld	r0, Z+
     bfc:	0d 92       	st	X+, r0
     bfe:	8a 95       	dec	r24
     c00:	e1 f7       	brne	.-8      	; 0xbfa <this_init+0xb0>
	strcpy(nodes[9].name, "Score 4");
     c02:	88 e0       	ldi	r24, 0x08	; 8
     c04:	e6 e9       	ldi	r30, 0x96	; 150
     c06:	f9 e1       	ldi	r31, 0x19	; 25
     c08:	a9 ef       	ldi	r26, 0xF9	; 249
     c0a:	ba e1       	ldi	r27, 0x1A	; 26
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	8a 95       	dec	r24
     c12:	e1 f7       	brne	.-8      	; 0xc0c <this_init+0xc2>
	strcpy(nodes[10].name, "Score 5");
     c14:	88 e0       	ldi	r24, 0x08	; 8
     c16:	ee e9       	ldi	r30, 0x9E	; 158
     c18:	f9 e1       	ldi	r31, 0x19	; 25
     c1a:	a8 e1       	ldi	r26, 0x18	; 24
     c1c:	bb e1       	ldi	r27, 0x1B	; 27
     c1e:	01 90       	ld	r0, Z+
     c20:	0d 92       	st	X+, r0
     c22:	8a 95       	dec	r24
     c24:	e1 f7       	brne	.-8      	; 0xc1e <this_init+0xd4>

	
	
	nodes[0].numChildren = 3;
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	8e 8f       	std	Y+30, r24	; 0x1e
	nodes[1].numChildren = 2;
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	8d af       	std	Y+61, r24	; 0x3d
	nodes[2].numChildren = 5;
     c2e:	85 e0       	ldi	r24, 0x05	; 5
     c30:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <nodes+0x5c>
	nodes[3].numChildren = 0;
     c34:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <nodes+0x7b>
	nodes[4].numChildren = 0;
     c38:	10 92 7c 1a 	sts	0x1A7C, r1	; 0x801a7c <nodes+0x9a>
	nodes[5].numChildren = 0;
     c3c:	10 92 9b 1a 	sts	0x1A9B, r1	; 0x801a9b <nodes+0xb9>
	nodes[6].numChildren = 0;
     c40:	10 92 ba 1a 	sts	0x1ABA, r1	; 0x801aba <nodes+0xd8>
	nodes[7].numChildren = 0;
     c44:	10 92 d9 1a 	sts	0x1AD9, r1	; 0x801ad9 <nodes+0xf7>
	nodes[8].numChildren = 0;
     c48:	10 92 f8 1a 	sts	0x1AF8, r1	; 0x801af8 <nodes+0x116>
	nodes[9].numChildren = 0;
     c4c:	10 92 17 1b 	sts	0x1B17, r1	; 0x801b17 <nodes+0x135>
	nodes[10].numChildren = 0;
     c50:	10 92 36 1b 	sts	0x1B36, r1	; 0x801b36 <nodes+0x154>
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
     c54:	19 8a       	std	Y+17, r1	; 0x11
     c56:	18 8a       	std	Y+16, r1	; 0x10
     c58:	be 01       	movw	r22, r28
     c5a:	07 e3       	ldi	r16, 0x37	; 55
     c5c:	1b e1       	ldi	r17, 0x1B	; 27
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
	nodes[7].numChildren = 0;
	nodes[8].numChildren = 0;
	nodes[9].numChildren = 0;
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
     c62:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
     c64:	5f e1       	ldi	r21, 0x1F	; 31
     c66:	18 c0       	rjmp	.+48     	; 0xc98 <this_init+0x14e>
     c68:	54 9f       	mul	r21, r20
     c6a:	f0 01       	movw	r30, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	ee 51       	subi	r30, 0x1E	; 30
     c70:	f6 4e       	sbci	r31, 0xE6	; 230
     c72:	e9 93       	st	Y+, r30
     c74:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
     c76:	b1 8b       	std	Z+17, r27	; 0x11
     c78:	a0 8b       	std	Z+16, r26	; 0x10
			currentChildIdx++;
     c7a:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     c7c:	2f 5f       	subi	r18, 0xFF	; 255
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	5e 96       	adiw	r26, 0x1e	; 30
     c82:	8c 91       	ld	r24, X
     c84:	5e 97       	sbiw	r26, 0x1e	; 30
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	6c f3       	brlt	.-38     	; 0xc68 <this_init+0x11e>
     c8e:	61 5e       	subi	r22, 0xE1	; 225
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
     c92:	60 17       	cp	r22, r16
     c94:	71 07       	cpc	r23, r17
     c96:	59 f0       	breq	.+22     	; 0xcae <this_init+0x164>
     c98:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     c9a:	5e 96       	adiw	r26, 0x1e	; 30
     c9c:	8c 91       	ld	r24, X
     c9e:	5e 97       	sbiw	r26, 0x1e	; 30
     ca0:	88 23       	and	r24, r24
     ca2:	a9 f3       	breq	.-22     	; 0xc8e <this_init+0x144>
     ca4:	eb 01       	movw	r28, r22
     ca6:	62 96       	adiw	r28, 0x12	; 18
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	dd cf       	rjmp	.-70     	; 0xc68 <this_init+0x11e>

		}
		
	}
	*/
	currentMenu.currentMenuItem = nodes; //set main menu as current
     cae:	ed ec       	ldi	r30, 0xCD	; 205
     cb0:	f9 e1       	ldi	r31, 0x19	; 25
     cb2:	82 ee       	ldi	r24, 0xE2	; 226
     cb4:	99 e1       	ldi	r25, 0x19	; 25
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
     cba:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <navigateMenu>:
	
	return mainMenu;
}
*/
void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     cca:	0e 94 5e 05 	call	0xabc	; 0xabc <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     cce:	90 91 d0 19 	lds	r25, 0x19D0	; 0x8019d0 <currentMenu+0x3>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <navigateMenu+0xe>
     cd6:	58 c0       	rjmp	.+176    	; 0xd88 <navigateMenu+0xbe>
			switch (dir) {
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	e1 f1       	breq	.+120    	; 0xd54 <navigateMenu+0x8a>
     cdc:	60 f1       	brcs	.+88     	; 0xd36 <navigateMenu+0x6c>
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	c9 f0       	breq	.+50     	; 0xd14 <navigateMenu+0x4a>
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	09 f0       	breq	.+2      	; 0xce8 <navigateMenu+0x1e>
     ce6:	50 c0       	rjmp	.+160    	; 0xd88 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     ce8:	ed ec       	ldi	r30, 0xCD	; 205
     cea:	f9 e1       	ldi	r31, 0x19	; 25
     cec:	92 81       	ldd	r25, Z+2	; 0x02
     cee:	49 2f       	mov	r20, r25
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	01 90       	ld	r0, Z+
     cf4:	f0 81       	ld	r31, Z
     cf6:	e0 2d       	mov	r30, r0
     cf8:	26 8d       	ldd	r18, Z+30	; 0x1e
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	21 50       	subi	r18, 0x01	; 1
     cfe:	31 09       	sbc	r19, r1
     d00:	42 17       	cp	r20, r18
     d02:	53 07       	cpc	r21, r19
     d04:	24 f4       	brge	.+8      	; 0xd0e <navigateMenu+0x44>
					currentMenu.childIndex++;
     d06:	9f 5f       	subi	r25, 0xFF	; 255
     d08:	90 93 cf 19 	sts	0x19CF, r25	; 0x8019cf <currentMenu+0x2>
     d0c:	3d c0       	rjmp	.+122    	; 0xd88 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     d0e:	10 92 cf 19 	sts	0x19CF, r1	; 0x8019cf <currentMenu+0x2>
     d12:	3a c0       	rjmp	.+116    	; 0xd88 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     d14:	90 91 cf 19 	lds	r25, 0x19CF	; 0x8019cf <currentMenu+0x2>
     d18:	99 23       	and	r25, r25
     d1a:	21 f0       	breq	.+8      	; 0xd24 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     d1c:	91 50       	subi	r25, 0x01	; 1
     d1e:	90 93 cf 19 	sts	0x19CF, r25	; 0x8019cf <currentMenu+0x2>
     d22:	32 c0       	rjmp	.+100    	; 0xd88 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     d24:	ed ec       	ldi	r30, 0xCD	; 205
     d26:	f9 e1       	ldi	r31, 0x19	; 25
     d28:	a0 81       	ld	r26, Z
     d2a:	b1 81       	ldd	r27, Z+1	; 0x01
     d2c:	5e 96       	adiw	r26, 0x1e	; 30
     d2e:	9c 91       	ld	r25, X
     d30:	91 50       	subi	r25, 0x01	; 1
     d32:	92 83       	std	Z+2, r25	; 0x02
     d34:	29 c0       	rjmp	.+82     	; 0xd88 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     d36:	e0 91 cd 19 	lds	r30, 0x19CD	; 0x8019cd <currentMenu>
     d3a:	f0 91 ce 19 	lds	r31, 0x19CE	; 0x8019ce <currentMenu+0x1>
     d3e:	20 89       	ldd	r18, Z+16	; 0x10
     d40:	31 89       	ldd	r19, Z+17	; 0x11
     d42:	21 15       	cp	r18, r1
     d44:	31 05       	cpc	r19, r1
     d46:	01 f1       	breq	.+64     	; 0xd88 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     d48:	ed ec       	ldi	r30, 0xCD	; 205
     d4a:	f9 e1       	ldi	r31, 0x19	; 25
     d4c:	31 83       	std	Z+1, r19	; 0x01
     d4e:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     d50:	12 82       	std	Z+2, r1	; 0x02
     d52:	1a c0       	rjmp	.+52     	; 0xd88 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     d54:	ad ec       	ldi	r26, 0xCD	; 205
     d56:	b9 e1       	ldi	r27, 0x19	; 25
     d58:	2d 91       	ld	r18, X+
     d5a:	3c 91       	ld	r19, X
     d5c:	11 97       	sbiw	r26, 0x01	; 1
     d5e:	12 96       	adiw	r26, 0x02	; 2
     d60:	9c 91       	ld	r25, X
     d62:	12 97       	sbiw	r26, 0x02	; 2
     d64:	e9 2f       	mov	r30, r25
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	39 96       	adiw	r30, 0x09	; 9
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	e2 0f       	add	r30, r18
     d70:	f3 1f       	adc	r31, r19
     d72:	01 90       	ld	r0, Z+
     d74:	f0 81       	ld	r31, Z
     d76:	e0 2d       	mov	r30, r0
     d78:	96 8d       	ldd	r25, Z+30	; 0x1e
     d7a:	99 23       	and	r25, r25
     d7c:	29 f0       	breq	.+10     	; 0xd88 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     d7e:	11 96       	adiw	r26, 0x01	; 1
     d80:	fc 93       	st	X, r31
     d82:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     d84:	12 96       	adiw	r26, 0x02	; 2
     d86:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     d88:	80 93 d0 19 	sts	0x19D0, r24	; 0x8019d0 <currentMenu+0x3>
     d8c:	08 95       	ret

00000d8e <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
	oled_reset();
     d96:	0e 94 11 07 	call	0xe22	; 0xe22 <oled_reset>
	oled_home();
     d9a:	0e 94 32 07 	call	0xe64	; 0xe64 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d9e:	cd ec       	ldi	r28, 0xCD	; 205
     da0:	d9 e1       	ldi	r29, 0x19	; 25
     da2:	88 81       	ld	r24, Y
     da4:	99 81       	ldd	r25, Y+1	; 0x01
     da6:	0e 94 6d 07 	call	0xeda	; 0xeda <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     daa:	e8 81       	ld	r30, Y
     dac:	f9 81       	ldd	r31, Y+1	; 0x01
     dae:	86 8d       	ldd	r24, Z+30	; 0x1e
     db0:	88 23       	and	r24, r24
     db2:	31 f1       	breq	.+76     	; 0xe00 <menu_printCurrentMenu+0x72>
     db4:	c0 e0       	ldi	r28, 0x00	; 0
     db6:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     db8:	0d ec       	ldi	r16, 0xCD	; 205
     dba:	19 e1       	ldi	r17, 0x19	; 25
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     dbc:	ce 01       	movw	r24, r28
     dbe:	02 96       	adiw	r24, 0x02	; 2
     dc0:	0e 94 69 07 	call	0xed2	; 0xed2 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     dc4:	d8 01       	movw	r26, r16
     dc6:	8d 91       	ld	r24, X+
     dc8:	9c 91       	ld	r25, X
     dca:	fe 01       	movw	r30, r28
     dcc:	39 96       	adiw	r30, 0x09	; 9
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	e8 0f       	add	r30, r24
     dd4:	f9 1f       	adc	r31, r25
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	0e 94 6d 07 	call	0xeda	; 0xeda <oled_print>
		if (currentMenu.childIndex == i) {
     dde:	f8 01       	movw	r30, r16
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	8c 17       	cp	r24, r28
     de6:	9d 07       	cpc	r25, r29
     de8:	11 f4       	brne	.+4      	; 0xdee <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     dea:	0e 94 27 07 	call	0xe4e	; 0xe4e <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     dee:	21 96       	adiw	r28, 0x01	; 1
     df0:	d8 01       	movw	r26, r16
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	86 8d       	ldd	r24, Z+30	; 0x1e
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	c8 17       	cp	r28, r24
     dfc:	d9 07       	cpc	r29, r25
     dfe:	f4 f2       	brlt	.-68     	; 0xdbc <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     e0a:	80 55       	subi	r24, 0x50	; 80
     e0c:	e0 e0       	ldi	r30, 0x00	; 0
     e0e:	f0 e1       	ldi	r31, 0x10	; 16
     e10:	80 83       	st	Z, r24
     e12:	86 2f       	mov	r24, r22
     e14:	8f 70       	andi	r24, 0x0F	; 15
     e16:	80 83       	st	Z, r24
     e18:	62 95       	swap	r22
     e1a:	6f 70       	andi	r22, 0x0F	; 15
     e1c:	60 61       	ori	r22, 0x10	; 16
     e1e:	60 83       	st	Z, r22
     e20:	08 95       	ret

00000e22 <oled_reset>:
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	c0 e0       	ldi	r28, 0x00	; 0
     e2c:	d2 e1       	ldi	r29, 0x12	; 18
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	81 2f       	mov	r24, r17
     e32:	0e 94 05 07 	call	0xe0a	; 0xe0a <oled_pos>
     e36:	80 e8       	ldi	r24, 0x80	; 128
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	18 82       	st	Y, r1
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	e9 f7       	brne	.-6      	; 0xe3a <oled_reset+0x18>
     e40:	1f 5f       	subi	r17, 0xFF	; 255
     e42:	18 30       	cpi	r17, 0x08	; 8
     e44:	a1 f7       	brne	.-24     	; 0xe2e <oled_reset+0xc>
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	08 95       	ret

00000e4e <oled_print_arrow>:
     e4e:	e0 e0       	ldi	r30, 0x00	; 0
     e50:	f2 e1       	ldi	r31, 0x12	; 18
     e52:	88 e1       	ldi	r24, 0x18	; 24
     e54:	80 83       	st	Z, r24
     e56:	9c e3       	ldi	r25, 0x3C	; 60
     e58:	90 83       	st	Z, r25
     e5a:	9e e7       	ldi	r25, 0x7E	; 126
     e5c:	90 83       	st	Z, r25
     e5e:	80 83       	st	Z, r24
     e60:	80 83       	st	Z, r24
     e62:	08 95       	ret

00000e64 <oled_home>:
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 05 07 	call	0xe0a	; 0xe0a <oled_pos>
     e6c:	08 95       	ret

00000e6e <oled_init>:
     e6e:	e0 e0       	ldi	r30, 0x00	; 0
     e70:	f0 e1       	ldi	r31, 0x10	; 16
     e72:	8e ea       	ldi	r24, 0xAE	; 174
     e74:	80 83       	st	Z, r24
     e76:	81 ea       	ldi	r24, 0xA1	; 161
     e78:	80 83       	st	Z, r24
     e7a:	8a ed       	ldi	r24, 0xDA	; 218
     e7c:	80 83       	st	Z, r24
     e7e:	82 e1       	ldi	r24, 0x12	; 18
     e80:	80 83       	st	Z, r24
     e82:	88 ec       	ldi	r24, 0xC8	; 200
     e84:	80 83       	st	Z, r24
     e86:	88 ea       	ldi	r24, 0xA8	; 168
     e88:	80 83       	st	Z, r24
     e8a:	8f e3       	ldi	r24, 0x3F	; 63
     e8c:	80 83       	st	Z, r24
     e8e:	85 ed       	ldi	r24, 0xD5	; 213
     e90:	80 83       	st	Z, r24
     e92:	80 e8       	ldi	r24, 0x80	; 128
     e94:	80 83       	st	Z, r24
     e96:	81 e8       	ldi	r24, 0x81	; 129
     e98:	80 83       	st	Z, r24
     e9a:	80 e5       	ldi	r24, 0x50	; 80
     e9c:	80 83       	st	Z, r24
     e9e:	89 ed       	ldi	r24, 0xD9	; 217
     ea0:	80 83       	st	Z, r24
     ea2:	81 e2       	ldi	r24, 0x21	; 33
     ea4:	80 83       	st	Z, r24
     ea6:	80 e2       	ldi	r24, 0x20	; 32
     ea8:	80 83       	st	Z, r24
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	80 83       	st	Z, r24
     eae:	8b ed       	ldi	r24, 0xDB	; 219
     eb0:	80 83       	st	Z, r24
     eb2:	80 e3       	ldi	r24, 0x30	; 48
     eb4:	80 83       	st	Z, r24
     eb6:	8d ea       	ldi	r24, 0xAD	; 173
     eb8:	80 83       	st	Z, r24
     eba:	10 82       	st	Z, r1
     ebc:	84 ea       	ldi	r24, 0xA4	; 164
     ebe:	80 83       	st	Z, r24
     ec0:	86 ea       	ldi	r24, 0xA6	; 166
     ec2:	80 83       	st	Z, r24
     ec4:	8f ea       	ldi	r24, 0xAF	; 175
     ec6:	80 83       	st	Z, r24
     ec8:	0e 94 11 07 	call	0xe22	; 0xe22 <oled_reset>
     ecc:	0e 94 32 07 	call	0xe64	; 0xe64 <oled_home>
     ed0:	08 95       	ret

00000ed2 <oled_gotoLine>:
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	0e 94 05 07 	call	0xe0a	; 0xe0a <oled_pos>
     ed8:	08 95       	ret

00000eda <oled_print>:

void oled_print(char* character){
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	dc 01       	movw	r26, r24
	while (*character != '\0')
     ee0:	8c 91       	ld	r24, X
     ee2:	81 11       	cpse	r24, r1
     ee4:	1a c0       	rjmp	.+52     	; 0xf1a <oled_print+0x40>
     ee6:	1e c0       	rjmp	.+60     	; 0xf24 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     ee8:	ec 91       	ld	r30, X
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	b0 97       	sbiw	r30, 0x20	; 32
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	e2 56       	subi	r30, 0x62	; 98
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     f04:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	28 30       	cpi	r18, 0x08	; 8
     f0c:	31 05       	cpc	r19, r1
     f0e:	61 f7       	brne	.-40     	; 0xee8 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     f10:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     f12:	8c 91       	ld	r24, X
     f14:	81 11       	cpse	r24, r1
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <oled_print+0x44>
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     f1a:	c0 e0       	ldi	r28, 0x00	; 0
     f1c:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	e2 cf       	rjmp	.-60     	; 0xee8 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <setupInit>:
#include "oled.h"
#include "timer.h"
#include "sleep.h"

	void setupInit(void){
	cli();
     f2a:	f8 94       	cli
	xmem_init();
     f2c:	0e 94 a4 08 	call	0x1148	; 0x1148 <xmem_init>
	USART_init(MYUBRR);
     f30:	8f e1       	ldi	r24, 0x1F	; 31
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 93 08 	call	0x1126	; 0x1126 <USART_init>
	adcInit();
     f38:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     f3c:	0e 94 c0 04 	call	0x980	; 0x980 <joystickInit>
	touchButton_init();
     f40:	0e 94 66 08 	call	0x10cc	; 0x10cc <touchButton_init>
	oled_init();
     f44:	0e 94 37 07 	call	0xe6e	; 0xe6e <oled_init>
	printf("After oledinit\n\r");
     f48:	86 ea       	ldi	r24, 0xA6	; 166
     f4a:	99 e1       	ldi	r25, 0x19	; 25
     f4c:	9f 93       	push	r25
     f4e:	8f 93       	push	r24
     f50:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
	timer_init();
     f54:	0e 94 58 08 	call	0x10b0	; 0x10b0 <timer_init>
	sleep_init();
     f58:	0e 94 ab 04 	call	0x956	; 0x956 <sleep_init>
	//menuInit();
	this_init();
     f5c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <this_init>
	printf("Finished this");
     f60:	87 eb       	ldi	r24, 0xB7	; 183
     f62:	99 e1       	ldi	r25, 0x19	; 25
     f64:	9f 93       	push	r25
     f66:	8f 93       	push	r24
     f68:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <printf>
	CAN_controller_init();
     f6c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <CAN_controller_init>
	pwm_init();
     f70:	0e 94 9b 04 	call	0x936	; 0x936 <pwm_init>
	sei();
     f74:	78 94       	sei
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	08 95       	ret

00000f80 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f8a:	c3 ed       	ldi	r28, 0xD3	; 211
     f8c:	d9 e1       	ldi	r29, 0x19	; 25
     f8e:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f96:	89 83       	std	Y+1, r24	; 0x01
}
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <slider_sendPositionOverCAN>:

void slider_sendPositionOverCAN() {
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	2b 97       	sbiw	r28, 0x0b	; 11
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
	//printf("sending");

	CAN_message_t message;
	
	message.ID = 0x02;
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	9a 87       	std	Y+10, r25	; 0x0a
     fb8:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 2;
     fba:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     fbc:	e3 ed       	ldi	r30, 0xD3	; 211
     fbe:	f9 e1       	ldi	r31, 0x19	; 25
     fc0:	80 81       	ld	r24, Z
     fc2:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     fc4:	81 81       	ldd	r24, Z+1	; 0x01
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	
	
	CAN_transmit_message(&message);
     fc8:	ce 01       	movw	r24, r28
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	0e 94 55 02 	call	0x4aa	; 0x4aa <CAN_transmit_message>
     fd0:	2b 96       	adiw	r28, 0x0b	; 11
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     fe2:	87 b3       	in	r24, 0x17	; 23
     fe4:	80 6a       	ori	r24, 0xA0	; 160
     fe6:	87 bb       	out	0x17, r24	; 23
     fe8:	bc 9a       	sbi	0x17, 4	; 23
     fea:	8d b1       	in	r24, 0x0d	; 13
     fec:	81 65       	ori	r24, 0x51	; 81
     fee:	8d b9       	out	0x0d, r24	; 13
     ff0:	c4 9a       	sbi	0x18, 4	; 24
     ff2:	08 95       	ret

00000ff4 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     ff4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     ff6:	77 9b       	sbis	0x0e, 7	; 14
     ff8:	fe cf       	rjmp	.-4      	; 0xff6 <SPI_masterWrite+0x2>

}
     ffa:	08 95       	ret

00000ffc <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     ffc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     ffe:	77 9b       	sbis	0x0e, 7	; 14
    1000:	fe cf       	rjmp	.-4      	; 0xffe <SPI_masterRead+0x2>
	return SPDR;
    1002:	8f b1       	in	r24, 0x0f	; 15
}
    1004:	08 95       	ret

00001006 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    1006:	66 23       	and	r22, r22
    1008:	69 f0       	breq	.+26     	; 0x1024 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    100a:	48 b3       	in	r20, 0x18	; 24
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	b9 01       	movw	r22, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <SPI_setChipSelect+0x12>
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	8a 95       	dec	r24
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <SPI_setChipSelect+0xe>
    101c:	cb 01       	movw	r24, r22
    101e:	84 2b       	or	r24, r20
    1020:	88 bb       	out	0x18, r24	; 24
    1022:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    1024:	48 b3       	in	r20, 0x18	; 24
    1026:	21 e0       	ldi	r18, 0x01	; 1
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	b9 01       	movw	r22, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <SPI_setChipSelect+0x2c>
    102e:	66 0f       	add	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	8a 95       	dec	r24
    1034:	e2 f7       	brpl	.-8      	; 0x102e <SPI_setChipSelect+0x28>
    1036:	cb 01       	movw	r24, r22
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	88 bb       	out	0x18, r24	; 24
    103e:	08 95       	ret

00001040 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	2f 93       	push	r18
    104c:	3f 93       	push	r19
    104e:	4f 93       	push	r20
    1050:	5f 93       	push	r21
    1052:	6f 93       	push	r22
    1054:	7f 93       	push	r23
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	af 93       	push	r26
    105c:	bf 93       	push	r27
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
	cli();
    1062:	f8 94       	cli
	TCNT1 = 0x00;
    1064:	1d bc       	out	0x2d, r1	; 45
    1066:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
    1068:	89 ec       	ldi	r24, 0xC9	; 201
    106a:	99 e1       	ldi	r25, 0x19	; 25
    106c:	0e 94 cb 04 	call	0x996	; 0x996 <joystick_readPosition>
	slider_readPosition(&slider_pos);
    1070:	83 ed       	ldi	r24, 0xD3	; 211
    1072:	99 e1       	ldi	r25, 0x19	; 25
    1074:	0e 94 c0 07 	call	0xf80	; 0xf80 <slider_readPosition>
	touchButton_readButtons(&buttons);
    1078:	81 ed       	ldi	r24, 0xD1	; 209
    107a:	99 e1       	ldi	r25, 0x19	; 25
    107c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <touchButton_readButtons>
	navigateMenu(&joystick_pos);
    1080:	89 ec       	ldi	r24, 0xC9	; 201
    1082:	99 e1       	ldi	r25, 0x19	; 25
    1084:	0e 94 65 06 	call	0xcca	; 0xcca <navigateMenu>
	menu_printCurrentMenu();
    1088:	0e 94 c7 06 	call	0xd8e	; 0xd8e <menu_printCurrentMenu>
	sei();
    108c:	78 94       	sei
}
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	0f 90       	pop	r0
    10ac:	1f 90       	pop	r1
    10ae:	18 95       	reti

000010b0 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    10b0:	89 b7       	in	r24, 0x39	; 57
    10b2:	80 62       	ori	r24, 0x20	; 32
    10b4:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    10b6:	1d bc       	out	0x2d, r1	; 45
    10b8:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    10ba:	80 e3       	ldi	r24, 0x30	; 48
    10bc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    10be:	85 e0       	ldi	r24, 0x05	; 5
    10c0:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    10c2:	80 ef       	ldi	r24, 0xF0	; 240
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	99 bd       	out	0x29, r25	; 41
    10c8:	88 bd       	out	0x28, r24	; 40
    10ca:	08 95       	ret

000010cc <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    10cc:	36 b3       	in	r19, 0x16	; 22
    10ce:	26 b3       	in	r18, 0x16	; 22
    10d0:	47 b3       	in	r20, 0x17	; 23
    10d2:	32 70       	andi	r19, 0x02	; 2
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	bc 01       	movw	r22, r24
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <touchButton_init+0x14>
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	3a 95       	dec	r19
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <touchButton_init+0x10>
    10e4:	24 70       	andi	r18, 0x04	; 4
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <touchButton_init+0x20>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	2a 95       	dec	r18
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <touchButton_init+0x1c>
    10f0:	86 2b       	or	r24, r22
    10f2:	97 2b       	or	r25, r23
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	84 23       	and	r24, r20
    10fa:	87 bb       	out	0x17, r24	; 23
    10fc:	08 95       	ret

000010fe <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    10fe:	86 b3       	in	r24, 0x16	; 22
    1100:	e1 ed       	ldi	r30, 0xD1	; 209
    1102:	f9 e1       	ldi	r31, 0x19	; 25
    1104:	86 95       	lsr	r24
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    110a:	86 b3       	in	r24, 0x16	; 22
    110c:	82 fb       	bst	r24, 2
    110e:	88 27       	eor	r24, r24
    1110:	80 f9       	bld	r24, 0
    1112:	81 83       	std	Z+1, r24	; 0x01
    1114:	08 95       	ret

00001116 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    1116:	5d 9b       	sbis	0x0b, 5	; 11
    1118:	fe cf       	rjmp	.-4      	; 0x1116 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    111a:	8c b9       	out	0x0c, r24	; 12
    111c:	08 95       	ret

0000111e <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    111e:	5f 9b       	sbis	0x0b, 7	; 11
    1120:	fe cf       	rjmp	.-4      	; 0x111e <USART_receiveChar>
		;
	
	return UDR0;
    1122:	8c b1       	in	r24, 0x0c	; 12
    1124:	08 95       	ret

00001126 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1126:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    1128:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    112a:	88 e1       	ldi	r24, 0x18	; 24
    112c:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    112e:	8e e8       	ldi	r24, 0x8E	; 142
    1130:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1132:	6f e8       	ldi	r22, 0x8F	; 143
    1134:	78 e0       	ldi	r23, 0x08	; 8
    1136:	8b e8       	ldi	r24, 0x8B	; 139
    1138:	98 e0       	ldi	r25, 0x08	; 8
    113a:	0e 94 88 0b 	call	0x1710	; 0x1710 <fdevopen>
    113e:	90 93 38 1b 	sts	0x1B38, r25	; 0x801b38 <uart+0x1>
    1142:	80 93 37 1b 	sts	0x1B37, r24	; 0x801b37 <uart>
    1146:	08 95       	ret

00001148 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1148:	85 b7       	in	r24, 0x35	; 53
    114a:	80 68       	ori	r24, 0x80	; 128
    114c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    114e:	80 b7       	in	r24, 0x30	; 48
    1150:	88 60       	ori	r24, 0x08	; 8
    1152:	80 bf       	out	0x30, r24	; 48
    1154:	08 95       	ret
    1156:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscA>
    115a:	60 f0       	brcs	.+24     	; 0x1174 <xmem_init+0x2c>
    115c:	80 e8       	ldi	r24, 0x80	; 128
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	09 f4       	brne	.+2      	; 0x1164 <xmem_init+0x1c>
    1162:	9e ef       	ldi	r25, 0xFE	; 254
    1164:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_pscB>
    1168:	28 f0       	brcs	.+10     	; 0x1174 <xmem_init+0x2c>
    116a:	40 e8       	ldi	r20, 0x80	; 128
    116c:	51 e0       	ldi	r21, 0x01	; 1
    116e:	71 f4       	brne	.+28     	; 0x118c <atan2+0x10>
    1170:	5e ef       	ldi	r21, 0xFE	; 254
    1172:	0c c0       	rjmp	.+24     	; 0x118c <atan2+0x10>
    1174:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_nan>
    1178:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_zero>

0000117c <atan2>:
    117c:	e9 2f       	mov	r30, r25
    117e:	e0 78       	andi	r30, 0x80	; 128
    1180:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_split3>
    1184:	40 f3       	brcs	.-48     	; 0x1156 <xmem_init+0xe>
    1186:	09 2e       	mov	r0, r25
    1188:	05 2a       	or	r0, r21
    118a:	b1 f3       	breq	.-20     	; 0x1178 <xmem_init+0x30>
    118c:	26 17       	cp	r18, r22
    118e:	37 07       	cpc	r19, r23
    1190:	48 07       	cpc	r20, r24
    1192:	59 07       	cpc	r21, r25
    1194:	38 f0       	brcs	.+14     	; 0x11a4 <atan2+0x28>
    1196:	0e 2e       	mov	r0, r30
    1198:	07 f8       	bld	r0, 7
    119a:	e0 25       	eor	r30, r0
    119c:	69 f0       	breq	.+26     	; 0x11b8 <atan2+0x3c>
    119e:	e0 25       	eor	r30, r0
    11a0:	e0 64       	ori	r30, 0x40	; 64
    11a2:	0a c0       	rjmp	.+20     	; 0x11b8 <atan2+0x3c>
    11a4:	ef 63       	ori	r30, 0x3F	; 63
    11a6:	07 f8       	bld	r0, 7
    11a8:	00 94       	com	r0
    11aa:	07 fa       	bst	r0, 7
    11ac:	db 01       	movw	r26, r22
    11ae:	b9 01       	movw	r22, r18
    11b0:	9d 01       	movw	r18, r26
    11b2:	dc 01       	movw	r26, r24
    11b4:	ca 01       	movw	r24, r20
    11b6:	ad 01       	movw	r20, r26
    11b8:	ef 93       	push	r30
    11ba:	0e 94 34 09 	call	0x1268	; 0x1268 <__divsf3_pse>
    11be:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fp_round>
    11c2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <atan>
    11c6:	5f 91       	pop	r21
    11c8:	55 23       	and	r21, r21
    11ca:	39 f0       	breq	.+14     	; 0x11da <atan2+0x5e>
    11cc:	2b ed       	ldi	r18, 0xDB	; 219
    11ce:	3f e0       	ldi	r19, 0x0F	; 15
    11d0:	49 e4       	ldi	r20, 0x49	; 73
    11d2:	50 fd       	sbrc	r21, 0
    11d4:	49 ec       	ldi	r20, 0xC9	; 201
    11d6:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__addsf3>
    11da:	08 95       	ret

000011dc <atan>:
    11dc:	df 93       	push	r29
    11de:	dd 27       	eor	r29, r29
    11e0:	b9 2f       	mov	r27, r25
    11e2:	bf 77       	andi	r27, 0x7F	; 127
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	16 16       	cp	r1, r22
    11ea:	17 06       	cpc	r1, r23
    11ec:	48 07       	cpc	r20, r24
    11ee:	5b 07       	cpc	r21, r27
    11f0:	18 f4       	brcc	.+6      	; 0x11f8 <atan+0x1c>
    11f2:	d9 2f       	mov	r29, r25
    11f4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <inverse>
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	7f 93       	push	r23
    11fe:	6f 93       	push	r22
    1200:	0e 94 ef 0a 	call	0x15de	; 0x15de <square>
    1204:	e0 e7       	ldi	r30, 0x70	; 112
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fp_powser>
    120c:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fp_round>
    1210:	2f 91       	pop	r18
    1212:	3f 91       	pop	r19
    1214:	4f 91       	pop	r20
    1216:	5f 91       	pop	r21
    1218:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3x>
    121c:	dd 23       	and	r29, r29
    121e:	51 f0       	breq	.+20     	; 0x1234 <atan+0x58>
    1220:	90 58       	subi	r25, 0x80	; 128
    1222:	a2 ea       	ldi	r26, 0xA2	; 162
    1224:	2a ed       	ldi	r18, 0xDA	; 218
    1226:	3f e0       	ldi	r19, 0x0F	; 15
    1228:	49 ec       	ldi	r20, 0xC9	; 201
    122a:	5f e3       	ldi	r21, 0x3F	; 63
    122c:	d0 78       	andi	r29, 0x80	; 128
    122e:	5d 27       	eor	r21, r29
    1230:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__addsf3x>
    1234:	df 91       	pop	r29
    1236:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_round>

0000123a <__divsf3>:
    123a:	0e 94 31 09 	call	0x1262	; 0x1262 <__divsf3x>
    123e:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_round>
    1242:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_pscB>
    1246:	58 f0       	brcs	.+22     	; 0x125e <__divsf3+0x24>
    1248:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscA>
    124c:	40 f0       	brcs	.+16     	; 0x125e <__divsf3+0x24>
    124e:	29 f4       	brne	.+10     	; 0x125a <__divsf3+0x20>
    1250:	5f 3f       	cpi	r21, 0xFF	; 255
    1252:	29 f0       	breq	.+10     	; 0x125e <__divsf3+0x24>
    1254:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_inf>
    1258:	51 11       	cpse	r21, r1
    125a:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_szero>
    125e:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_nan>

00001262 <__divsf3x>:
    1262:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_split3>
    1266:	68 f3       	brcs	.-38     	; 0x1242 <__divsf3+0x8>

00001268 <__divsf3_pse>:
    1268:	99 23       	and	r25, r25
    126a:	b1 f3       	breq	.-20     	; 0x1258 <__divsf3+0x1e>
    126c:	55 23       	and	r21, r21
    126e:	91 f3       	breq	.-28     	; 0x1254 <__divsf3+0x1a>
    1270:	95 1b       	sub	r25, r21
    1272:	55 0b       	sbc	r21, r21
    1274:	bb 27       	eor	r27, r27
    1276:	aa 27       	eor	r26, r26
    1278:	62 17       	cp	r22, r18
    127a:	73 07       	cpc	r23, r19
    127c:	84 07       	cpc	r24, r20
    127e:	38 f0       	brcs	.+14     	; 0x128e <__divsf3_pse+0x26>
    1280:	9f 5f       	subi	r25, 0xFF	; 255
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	44 1f       	adc	r20, r20
    128a:	aa 1f       	adc	r26, r26
    128c:	a9 f3       	breq	.-22     	; 0x1278 <__divsf3_pse+0x10>
    128e:	35 d0       	rcall	.+106    	; 0x12fa <__divsf3_pse+0x92>
    1290:	0e 2e       	mov	r0, r30
    1292:	3a f0       	brmi	.+14     	; 0x12a2 <__divsf3_pse+0x3a>
    1294:	e0 e8       	ldi	r30, 0x80	; 128
    1296:	32 d0       	rcall	.+100    	; 0x12fc <__divsf3_pse+0x94>
    1298:	91 50       	subi	r25, 0x01	; 1
    129a:	50 40       	sbci	r21, 0x00	; 0
    129c:	e6 95       	lsr	r30
    129e:	00 1c       	adc	r0, r0
    12a0:	ca f7       	brpl	.-14     	; 0x1294 <__divsf3_pse+0x2c>
    12a2:	2b d0       	rcall	.+86     	; 0x12fa <__divsf3_pse+0x92>
    12a4:	fe 2f       	mov	r31, r30
    12a6:	29 d0       	rcall	.+82     	; 0x12fa <__divsf3_pse+0x92>
    12a8:	66 0f       	add	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	bb 1f       	adc	r27, r27
    12b0:	26 17       	cp	r18, r22
    12b2:	37 07       	cpc	r19, r23
    12b4:	48 07       	cpc	r20, r24
    12b6:	ab 07       	cpc	r26, r27
    12b8:	b0 e8       	ldi	r27, 0x80	; 128
    12ba:	09 f0       	breq	.+2      	; 0x12be <__divsf3_pse+0x56>
    12bc:	bb 0b       	sbc	r27, r27
    12be:	80 2d       	mov	r24, r0
    12c0:	bf 01       	movw	r22, r30
    12c2:	ff 27       	eor	r31, r31
    12c4:	93 58       	subi	r25, 0x83	; 131
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	3a f0       	brmi	.+14     	; 0x12d8 <__divsf3_pse+0x70>
    12ca:	9e 3f       	cpi	r25, 0xFE	; 254
    12cc:	51 05       	cpc	r21, r1
    12ce:	78 f0       	brcs	.+30     	; 0x12ee <__divsf3_pse+0x86>
    12d0:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_inf>
    12d4:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_szero>
    12d8:	5f 3f       	cpi	r21, 0xFF	; 255
    12da:	e4 f3       	brlt	.-8      	; 0x12d4 <__divsf3_pse+0x6c>
    12dc:	98 3e       	cpi	r25, 0xE8	; 232
    12de:	d4 f3       	brlt	.-12     	; 0x12d4 <__divsf3_pse+0x6c>
    12e0:	86 95       	lsr	r24
    12e2:	77 95       	ror	r23
    12e4:	67 95       	ror	r22
    12e6:	b7 95       	ror	r27
    12e8:	f7 95       	ror	r31
    12ea:	9f 5f       	subi	r25, 0xFF	; 255
    12ec:	c9 f7       	brne	.-14     	; 0x12e0 <__divsf3_pse+0x78>
    12ee:	88 0f       	add	r24, r24
    12f0:	91 1d       	adc	r25, r1
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	97 f9       	bld	r25, 7
    12f8:	08 95       	ret
    12fa:	e1 e0       	ldi	r30, 0x01	; 1
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	88 1f       	adc	r24, r24
    1302:	bb 1f       	adc	r27, r27
    1304:	62 17       	cp	r22, r18
    1306:	73 07       	cpc	r23, r19
    1308:	84 07       	cpc	r24, r20
    130a:	ba 07       	cpc	r27, r26
    130c:	20 f0       	brcs	.+8      	; 0x1316 <__divsf3_pse+0xae>
    130e:	62 1b       	sub	r22, r18
    1310:	73 0b       	sbc	r23, r19
    1312:	84 0b       	sbc	r24, r20
    1314:	ba 0b       	sbc	r27, r26
    1316:	ee 1f       	adc	r30, r30
    1318:	88 f7       	brcc	.-30     	; 0x12fc <__divsf3_pse+0x94>
    131a:	e0 95       	com	r30
    131c:	08 95       	ret

0000131e <__fixsfsi>:
    131e:	0e 94 96 09 	call	0x132c	; 0x132c <__fixunssfsi>
    1322:	68 94       	set
    1324:	b1 11       	cpse	r27, r1
    1326:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_szero>
    132a:	08 95       	ret

0000132c <__fixunssfsi>:
    132c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__fp_splitA>
    1330:	88 f0       	brcs	.+34     	; 0x1354 <__fixunssfsi+0x28>
    1332:	9f 57       	subi	r25, 0x7F	; 127
    1334:	98 f0       	brcs	.+38     	; 0x135c <__fixunssfsi+0x30>
    1336:	b9 2f       	mov	r27, r25
    1338:	99 27       	eor	r25, r25
    133a:	b7 51       	subi	r27, 0x17	; 23
    133c:	b0 f0       	brcs	.+44     	; 0x136a <__fixunssfsi+0x3e>
    133e:	e1 f0       	breq	.+56     	; 0x1378 <__fixunssfsi+0x4c>
    1340:	66 0f       	add	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	1a f0       	brmi	.+6      	; 0x1350 <__fixunssfsi+0x24>
    134a:	ba 95       	dec	r27
    134c:	c9 f7       	brne	.-14     	; 0x1340 <__fixunssfsi+0x14>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <__fixunssfsi+0x4c>
    1350:	b1 30       	cpi	r27, 0x01	; 1
    1352:	91 f0       	breq	.+36     	; 0x1378 <__fixunssfsi+0x4c>
    1354:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fp_zero>
    1358:	b1 e0       	ldi	r27, 0x01	; 1
    135a:	08 95       	ret
    135c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_zero>
    1360:	67 2f       	mov	r22, r23
    1362:	78 2f       	mov	r23, r24
    1364:	88 27       	eor	r24, r24
    1366:	b8 5f       	subi	r27, 0xF8	; 248
    1368:	39 f0       	breq	.+14     	; 0x1378 <__fixunssfsi+0x4c>
    136a:	b9 3f       	cpi	r27, 0xF9	; 249
    136c:	cc f3       	brlt	.-14     	; 0x1360 <__fixunssfsi+0x34>
    136e:	86 95       	lsr	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b3 95       	inc	r27
    1376:	d9 f7       	brne	.-10     	; 0x136e <__fixunssfsi+0x42>
    1378:	3e f4       	brtc	.+14     	; 0x1388 <__fixunssfsi+0x5c>
    137a:	90 95       	com	r25
    137c:	80 95       	com	r24
    137e:	70 95       	com	r23
    1380:	61 95       	neg	r22
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	8f 4f       	sbci	r24, 0xFF	; 255
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	08 95       	ret

0000138a <__floatunsisf>:
    138a:	e8 94       	clt
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <__floatsisf+0x12>

0000138e <__floatsisf>:
    138e:	97 fb       	bst	r25, 7
    1390:	3e f4       	brtc	.+14     	; 0x13a0 <__floatsisf+0x12>
    1392:	90 95       	com	r25
    1394:	80 95       	com	r24
    1396:	70 95       	com	r23
    1398:	61 95       	neg	r22
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	8f 4f       	sbci	r24, 0xFF	; 255
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	99 23       	and	r25, r25
    13a2:	a9 f0       	breq	.+42     	; 0x13ce <__floatsisf+0x40>
    13a4:	f9 2f       	mov	r31, r25
    13a6:	96 e9       	ldi	r25, 0x96	; 150
    13a8:	bb 27       	eor	r27, r27
    13aa:	93 95       	inc	r25
    13ac:	f6 95       	lsr	r31
    13ae:	87 95       	ror	r24
    13b0:	77 95       	ror	r23
    13b2:	67 95       	ror	r22
    13b4:	b7 95       	ror	r27
    13b6:	f1 11       	cpse	r31, r1
    13b8:	f8 cf       	rjmp	.-16     	; 0x13aa <__floatsisf+0x1c>
    13ba:	fa f4       	brpl	.+62     	; 0x13fa <__floatsisf+0x6c>
    13bc:	bb 0f       	add	r27, r27
    13be:	11 f4       	brne	.+4      	; 0x13c4 <__floatsisf+0x36>
    13c0:	60 ff       	sbrs	r22, 0
    13c2:	1b c0       	rjmp	.+54     	; 0x13fa <__floatsisf+0x6c>
    13c4:	6f 5f       	subi	r22, 0xFF	; 255
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	16 c0       	rjmp	.+44     	; 0x13fa <__floatsisf+0x6c>
    13ce:	88 23       	and	r24, r24
    13d0:	11 f0       	breq	.+4      	; 0x13d6 <__floatsisf+0x48>
    13d2:	96 e9       	ldi	r25, 0x96	; 150
    13d4:	11 c0       	rjmp	.+34     	; 0x13f8 <__floatsisf+0x6a>
    13d6:	77 23       	and	r23, r23
    13d8:	21 f0       	breq	.+8      	; 0x13e2 <__floatsisf+0x54>
    13da:	9e e8       	ldi	r25, 0x8E	; 142
    13dc:	87 2f       	mov	r24, r23
    13de:	76 2f       	mov	r23, r22
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <__floatsisf+0x5e>
    13e2:	66 23       	and	r22, r22
    13e4:	71 f0       	breq	.+28     	; 0x1402 <__floatsisf+0x74>
    13e6:	96 e8       	ldi	r25, 0x86	; 134
    13e8:	86 2f       	mov	r24, r22
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	2a f0       	brmi	.+10     	; 0x13fa <__floatsisf+0x6c>
    13f0:	9a 95       	dec	r25
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	da f7       	brpl	.-10     	; 0x13f0 <__floatsisf+0x62>
    13fa:	88 0f       	add	r24, r24
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret

00001404 <__fp_inf>:
    1404:	97 f9       	bld	r25, 7
    1406:	9f 67       	ori	r25, 0x7F	; 127
    1408:	80 e8       	ldi	r24, 0x80	; 128
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	08 95       	ret

00001410 <__fp_nan>:
    1410:	9f ef       	ldi	r25, 0xFF	; 255
    1412:	80 ec       	ldi	r24, 0xC0	; 192
    1414:	08 95       	ret

00001416 <__fp_powser>:
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	1f 93       	push	r17
    141c:	0f 93       	push	r16
    141e:	ff 92       	push	r15
    1420:	ef 92       	push	r14
    1422:	df 92       	push	r13
    1424:	7b 01       	movw	r14, r22
    1426:	8c 01       	movw	r16, r24
    1428:	68 94       	set
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <__fp_powser+0x22>
    142c:	da 2e       	mov	r13, r26
    142e:	ef 01       	movw	r28, r30
    1430:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3x>
    1434:	fe 01       	movw	r30, r28
    1436:	e8 94       	clt
    1438:	a5 91       	lpm	r26, Z+
    143a:	25 91       	lpm	r18, Z+
    143c:	35 91       	lpm	r19, Z+
    143e:	45 91       	lpm	r20, Z+
    1440:	55 91       	lpm	r21, Z+
    1442:	a6 f3       	brts	.-24     	; 0x142c <__fp_powser+0x16>
    1444:	ef 01       	movw	r28, r30
    1446:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__addsf3x>
    144a:	fe 01       	movw	r30, r28
    144c:	97 01       	movw	r18, r14
    144e:	a8 01       	movw	r20, r16
    1450:	da 94       	dec	r13
    1452:	69 f7       	brne	.-38     	; 0x142e <__fp_powser+0x18>
    1454:	df 90       	pop	r13
    1456:	ef 90       	pop	r14
    1458:	ff 90       	pop	r15
    145a:	0f 91       	pop	r16
    145c:	1f 91       	pop	r17
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <__fp_pscA>:
    1464:	00 24       	eor	r0, r0
    1466:	0a 94       	dec	r0
    1468:	16 16       	cp	r1, r22
    146a:	17 06       	cpc	r1, r23
    146c:	18 06       	cpc	r1, r24
    146e:	09 06       	cpc	r0, r25
    1470:	08 95       	ret

00001472 <__fp_pscB>:
    1472:	00 24       	eor	r0, r0
    1474:	0a 94       	dec	r0
    1476:	12 16       	cp	r1, r18
    1478:	13 06       	cpc	r1, r19
    147a:	14 06       	cpc	r1, r20
    147c:	05 06       	cpc	r0, r21
    147e:	08 95       	ret

00001480 <__fp_round>:
    1480:	09 2e       	mov	r0, r25
    1482:	03 94       	inc	r0
    1484:	00 0c       	add	r0, r0
    1486:	11 f4       	brne	.+4      	; 0x148c <__fp_round+0xc>
    1488:	88 23       	and	r24, r24
    148a:	52 f0       	brmi	.+20     	; 0x14a0 <__fp_round+0x20>
    148c:	bb 0f       	add	r27, r27
    148e:	40 f4       	brcc	.+16     	; 0x14a0 <__fp_round+0x20>
    1490:	bf 2b       	or	r27, r31
    1492:	11 f4       	brne	.+4      	; 0x1498 <__fp_round+0x18>
    1494:	60 ff       	sbrs	r22, 0
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <__fp_round+0x20>
    1498:	6f 5f       	subi	r22, 0xFF	; 255
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	8f 4f       	sbci	r24, 0xFF	; 255
    149e:	9f 4f       	sbci	r25, 0xFF	; 255
    14a0:	08 95       	ret

000014a2 <__fp_split3>:
    14a2:	57 fd       	sbrc	r21, 7
    14a4:	90 58       	subi	r25, 0x80	; 128
    14a6:	44 0f       	add	r20, r20
    14a8:	55 1f       	adc	r21, r21
    14aa:	59 f0       	breq	.+22     	; 0x14c2 <__fp_splitA+0x10>
    14ac:	5f 3f       	cpi	r21, 0xFF	; 255
    14ae:	71 f0       	breq	.+28     	; 0x14cc <__fp_splitA+0x1a>
    14b0:	47 95       	ror	r20

000014b2 <__fp_splitA>:
    14b2:	88 0f       	add	r24, r24
    14b4:	97 fb       	bst	r25, 7
    14b6:	99 1f       	adc	r25, r25
    14b8:	61 f0       	breq	.+24     	; 0x14d2 <__fp_splitA+0x20>
    14ba:	9f 3f       	cpi	r25, 0xFF	; 255
    14bc:	79 f0       	breq	.+30     	; 0x14dc <__fp_splitA+0x2a>
    14be:	87 95       	ror	r24
    14c0:	08 95       	ret
    14c2:	12 16       	cp	r1, r18
    14c4:	13 06       	cpc	r1, r19
    14c6:	14 06       	cpc	r1, r20
    14c8:	55 1f       	adc	r21, r21
    14ca:	f2 cf       	rjmp	.-28     	; 0x14b0 <__fp_split3+0xe>
    14cc:	46 95       	lsr	r20
    14ce:	f1 df       	rcall	.-30     	; 0x14b2 <__fp_splitA>
    14d0:	08 c0       	rjmp	.+16     	; 0x14e2 <__fp_splitA+0x30>
    14d2:	16 16       	cp	r1, r22
    14d4:	17 06       	cpc	r1, r23
    14d6:	18 06       	cpc	r1, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	f1 cf       	rjmp	.-30     	; 0x14be <__fp_splitA+0xc>
    14dc:	86 95       	lsr	r24
    14de:	71 05       	cpc	r23, r1
    14e0:	61 05       	cpc	r22, r1
    14e2:	08 94       	sec
    14e4:	08 95       	ret

000014e6 <__fp_zero>:
    14e6:	e8 94       	clt

000014e8 <__fp_szero>:
    14e8:	bb 27       	eor	r27, r27
    14ea:	66 27       	eor	r22, r22
    14ec:	77 27       	eor	r23, r23
    14ee:	cb 01       	movw	r24, r22
    14f0:	97 f9       	bld	r25, 7
    14f2:	08 95       	ret

000014f4 <inverse>:
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	80 e8       	ldi	r24, 0x80	; 128
    14fe:	9f e3       	ldi	r25, 0x3F	; 63
    1500:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__divsf3>

00001504 <__mulsf3>:
    1504:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3x>
    1508:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_round>
    150c:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscA>
    1510:	38 f0       	brcs	.+14     	; 0x1520 <__mulsf3+0x1c>
    1512:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_pscB>
    1516:	20 f0       	brcs	.+8      	; 0x1520 <__mulsf3+0x1c>
    1518:	95 23       	and	r25, r21
    151a:	11 f0       	breq	.+4      	; 0x1520 <__mulsf3+0x1c>
    151c:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_inf>
    1520:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_nan>
    1524:	11 24       	eor	r1, r1
    1526:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_szero>

0000152a <__mulsf3x>:
    152a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_split3>
    152e:	70 f3       	brcs	.-36     	; 0x150c <__mulsf3+0x8>

00001530 <__mulsf3_pse>:
    1530:	95 9f       	mul	r25, r21
    1532:	c1 f3       	breq	.-16     	; 0x1524 <__mulsf3+0x20>
    1534:	95 0f       	add	r25, r21
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	55 1f       	adc	r21, r21
    153a:	62 9f       	mul	r22, r18
    153c:	f0 01       	movw	r30, r0
    153e:	72 9f       	mul	r23, r18
    1540:	bb 27       	eor	r27, r27
    1542:	f0 0d       	add	r31, r0
    1544:	b1 1d       	adc	r27, r1
    1546:	63 9f       	mul	r22, r19
    1548:	aa 27       	eor	r26, r26
    154a:	f0 0d       	add	r31, r0
    154c:	b1 1d       	adc	r27, r1
    154e:	aa 1f       	adc	r26, r26
    1550:	64 9f       	mul	r22, r20
    1552:	66 27       	eor	r22, r22
    1554:	b0 0d       	add	r27, r0
    1556:	a1 1d       	adc	r26, r1
    1558:	66 1f       	adc	r22, r22
    155a:	82 9f       	mul	r24, r18
    155c:	22 27       	eor	r18, r18
    155e:	b0 0d       	add	r27, r0
    1560:	a1 1d       	adc	r26, r1
    1562:	62 1f       	adc	r22, r18
    1564:	73 9f       	mul	r23, r19
    1566:	b0 0d       	add	r27, r0
    1568:	a1 1d       	adc	r26, r1
    156a:	62 1f       	adc	r22, r18
    156c:	83 9f       	mul	r24, r19
    156e:	a0 0d       	add	r26, r0
    1570:	61 1d       	adc	r22, r1
    1572:	22 1f       	adc	r18, r18
    1574:	74 9f       	mul	r23, r20
    1576:	33 27       	eor	r19, r19
    1578:	a0 0d       	add	r26, r0
    157a:	61 1d       	adc	r22, r1
    157c:	23 1f       	adc	r18, r19
    157e:	84 9f       	mul	r24, r20
    1580:	60 0d       	add	r22, r0
    1582:	21 1d       	adc	r18, r1
    1584:	82 2f       	mov	r24, r18
    1586:	76 2f       	mov	r23, r22
    1588:	6a 2f       	mov	r22, r26
    158a:	11 24       	eor	r1, r1
    158c:	9f 57       	subi	r25, 0x7F	; 127
    158e:	50 40       	sbci	r21, 0x00	; 0
    1590:	9a f0       	brmi	.+38     	; 0x15b8 <__mulsf3_pse+0x88>
    1592:	f1 f0       	breq	.+60     	; 0x15d0 <__mulsf3_pse+0xa0>
    1594:	88 23       	and	r24, r24
    1596:	4a f0       	brmi	.+18     	; 0x15aa <__mulsf3_pse+0x7a>
    1598:	ee 0f       	add	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	bb 1f       	adc	r27, r27
    159e:	66 1f       	adc	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	91 50       	subi	r25, 0x01	; 1
    15a6:	50 40       	sbci	r21, 0x00	; 0
    15a8:	a9 f7       	brne	.-22     	; 0x1594 <__mulsf3_pse+0x64>
    15aa:	9e 3f       	cpi	r25, 0xFE	; 254
    15ac:	51 05       	cpc	r21, r1
    15ae:	80 f0       	brcs	.+32     	; 0x15d0 <__mulsf3_pse+0xa0>
    15b0:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_inf>
    15b4:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_szero>
    15b8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ba:	e4 f3       	brlt	.-8      	; 0x15b4 <__mulsf3_pse+0x84>
    15bc:	98 3e       	cpi	r25, 0xE8	; 232
    15be:	d4 f3       	brlt	.-12     	; 0x15b4 <__mulsf3_pse+0x84>
    15c0:	86 95       	lsr	r24
    15c2:	77 95       	ror	r23
    15c4:	67 95       	ror	r22
    15c6:	b7 95       	ror	r27
    15c8:	f7 95       	ror	r31
    15ca:	e7 95       	ror	r30
    15cc:	9f 5f       	subi	r25, 0xFF	; 255
    15ce:	c1 f7       	brne	.-16     	; 0x15c0 <__mulsf3_pse+0x90>
    15d0:	fe 2b       	or	r31, r30
    15d2:	88 0f       	add	r24, r24
    15d4:	91 1d       	adc	r25, r1
    15d6:	96 95       	lsr	r25
    15d8:	87 95       	ror	r24
    15da:	97 f9       	bld	r25, 7
    15dc:	08 95       	ret

000015de <square>:
    15de:	9b 01       	movw	r18, r22
    15e0:	ac 01       	movw	r20, r24
    15e2:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__mulsf3>

000015e6 <__subsf3>:
    15e6:	50 58       	subi	r21, 0x80	; 128

000015e8 <__addsf3>:
    15e8:	bb 27       	eor	r27, r27
    15ea:	aa 27       	eor	r26, r26
    15ec:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__addsf3x>
    15f0:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_round>
    15f4:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscA>
    15f8:	38 f0       	brcs	.+14     	; 0x1608 <__addsf3+0x20>
    15fa:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_pscB>
    15fe:	20 f0       	brcs	.+8      	; 0x1608 <__addsf3+0x20>
    1600:	39 f4       	brne	.+14     	; 0x1610 <__addsf3+0x28>
    1602:	9f 3f       	cpi	r25, 0xFF	; 255
    1604:	19 f4       	brne	.+6      	; 0x160c <__addsf3+0x24>
    1606:	26 f4       	brtc	.+8      	; 0x1610 <__addsf3+0x28>
    1608:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_nan>
    160c:	0e f4       	brtc	.+2      	; 0x1610 <__addsf3+0x28>
    160e:	e0 95       	com	r30
    1610:	e7 fb       	bst	r30, 7
    1612:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_inf>

00001616 <__addsf3x>:
    1616:	e9 2f       	mov	r30, r25
    1618:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_split3>
    161c:	58 f3       	brcs	.-42     	; 0x15f4 <__addsf3+0xc>
    161e:	ba 17       	cp	r27, r26
    1620:	62 07       	cpc	r22, r18
    1622:	73 07       	cpc	r23, r19
    1624:	84 07       	cpc	r24, r20
    1626:	95 07       	cpc	r25, r21
    1628:	20 f0       	brcs	.+8      	; 0x1632 <__addsf3x+0x1c>
    162a:	79 f4       	brne	.+30     	; 0x164a <__addsf3x+0x34>
    162c:	a6 f5       	brtc	.+104    	; 0x1696 <__addsf3x+0x80>
    162e:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_zero>
    1632:	0e f4       	brtc	.+2      	; 0x1636 <__addsf3x+0x20>
    1634:	e0 95       	com	r30
    1636:	0b 2e       	mov	r0, r27
    1638:	ba 2f       	mov	r27, r26
    163a:	a0 2d       	mov	r26, r0
    163c:	0b 01       	movw	r0, r22
    163e:	b9 01       	movw	r22, r18
    1640:	90 01       	movw	r18, r0
    1642:	0c 01       	movw	r0, r24
    1644:	ca 01       	movw	r24, r20
    1646:	a0 01       	movw	r20, r0
    1648:	11 24       	eor	r1, r1
    164a:	ff 27       	eor	r31, r31
    164c:	59 1b       	sub	r21, r25
    164e:	99 f0       	breq	.+38     	; 0x1676 <__addsf3x+0x60>
    1650:	59 3f       	cpi	r21, 0xF9	; 249
    1652:	50 f4       	brcc	.+20     	; 0x1668 <__addsf3x+0x52>
    1654:	50 3e       	cpi	r21, 0xE0	; 224
    1656:	68 f1       	brcs	.+90     	; 0x16b2 <__addsf3x+0x9c>
    1658:	1a 16       	cp	r1, r26
    165a:	f0 40       	sbci	r31, 0x00	; 0
    165c:	a2 2f       	mov	r26, r18
    165e:	23 2f       	mov	r18, r19
    1660:	34 2f       	mov	r19, r20
    1662:	44 27       	eor	r20, r20
    1664:	58 5f       	subi	r21, 0xF8	; 248
    1666:	f3 cf       	rjmp	.-26     	; 0x164e <__addsf3x+0x38>
    1668:	46 95       	lsr	r20
    166a:	37 95       	ror	r19
    166c:	27 95       	ror	r18
    166e:	a7 95       	ror	r26
    1670:	f0 40       	sbci	r31, 0x00	; 0
    1672:	53 95       	inc	r21
    1674:	c9 f7       	brne	.-14     	; 0x1668 <__addsf3x+0x52>
    1676:	7e f4       	brtc	.+30     	; 0x1696 <__addsf3x+0x80>
    1678:	1f 16       	cp	r1, r31
    167a:	ba 0b       	sbc	r27, r26
    167c:	62 0b       	sbc	r22, r18
    167e:	73 0b       	sbc	r23, r19
    1680:	84 0b       	sbc	r24, r20
    1682:	ba f0       	brmi	.+46     	; 0x16b2 <__addsf3x+0x9c>
    1684:	91 50       	subi	r25, 0x01	; 1
    1686:	a1 f0       	breq	.+40     	; 0x16b0 <__addsf3x+0x9a>
    1688:	ff 0f       	add	r31, r31
    168a:	bb 1f       	adc	r27, r27
    168c:	66 1f       	adc	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	88 1f       	adc	r24, r24
    1692:	c2 f7       	brpl	.-16     	; 0x1684 <__addsf3x+0x6e>
    1694:	0e c0       	rjmp	.+28     	; 0x16b2 <__addsf3x+0x9c>
    1696:	ba 0f       	add	r27, r26
    1698:	62 1f       	adc	r22, r18
    169a:	73 1f       	adc	r23, r19
    169c:	84 1f       	adc	r24, r20
    169e:	48 f4       	brcc	.+18     	; 0x16b2 <__addsf3x+0x9c>
    16a0:	87 95       	ror	r24
    16a2:	77 95       	ror	r23
    16a4:	67 95       	ror	r22
    16a6:	b7 95       	ror	r27
    16a8:	f7 95       	ror	r31
    16aa:	9e 3f       	cpi	r25, 0xFE	; 254
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <__addsf3x+0x9a>
    16ae:	b0 cf       	rjmp	.-160    	; 0x1610 <__addsf3+0x28>
    16b0:	93 95       	inc	r25
    16b2:	88 0f       	add	r24, r24
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <__addsf3x+0xa2>
    16b6:	99 27       	eor	r25, r25
    16b8:	ee 0f       	add	r30, r30
    16ba:	97 95       	ror	r25
    16bc:	87 95       	ror	r24
    16be:	08 95       	ret

000016c0 <__divmodhi4>:
    16c0:	97 fb       	bst	r25, 7
    16c2:	07 2e       	mov	r0, r23
    16c4:	16 f4       	brtc	.+4      	; 0x16ca <__divmodhi4+0xa>
    16c6:	00 94       	com	r0
    16c8:	07 d0       	rcall	.+14     	; 0x16d8 <__divmodhi4_neg1>
    16ca:	77 fd       	sbrc	r23, 7
    16cc:	09 d0       	rcall	.+18     	; 0x16e0 <__divmodhi4_neg2>
    16ce:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__udivmodhi4>
    16d2:	07 fc       	sbrc	r0, 7
    16d4:	05 d0       	rcall	.+10     	; 0x16e0 <__divmodhi4_neg2>
    16d6:	3e f4       	brtc	.+14     	; 0x16e6 <__divmodhi4_exit>

000016d8 <__divmodhi4_neg1>:
    16d8:	90 95       	com	r25
    16da:	81 95       	neg	r24
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <__divmodhi4_neg2>:
    16e0:	70 95       	com	r23
    16e2:	61 95       	neg	r22
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255

000016e6 <__divmodhi4_exit>:
    16e6:	08 95       	ret

000016e8 <__udivmodhi4>:
    16e8:	aa 1b       	sub	r26, r26
    16ea:	bb 1b       	sub	r27, r27
    16ec:	51 e1       	ldi	r21, 0x11	; 17
    16ee:	07 c0       	rjmp	.+14     	; 0x16fe <__udivmodhi4_ep>

000016f0 <__udivmodhi4_loop>:
    16f0:	aa 1f       	adc	r26, r26
    16f2:	bb 1f       	adc	r27, r27
    16f4:	a6 17       	cp	r26, r22
    16f6:	b7 07       	cpc	r27, r23
    16f8:	10 f0       	brcs	.+4      	; 0x16fe <__udivmodhi4_ep>
    16fa:	a6 1b       	sub	r26, r22
    16fc:	b7 0b       	sbc	r27, r23

000016fe <__udivmodhi4_ep>:
    16fe:	88 1f       	adc	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	5a 95       	dec	r21
    1704:	a9 f7       	brne	.-22     	; 0x16f0 <__udivmodhi4_loop>
    1706:	80 95       	com	r24
    1708:	90 95       	com	r25
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	08 95       	ret

00001710 <fdevopen>:
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	31 f4       	brne	.+12     	; 0x1728 <fdevopen+0x18>
    171c:	61 15       	cp	r22, r1
    171e:	71 05       	cpc	r23, r1
    1720:	19 f4       	brne	.+6      	; 0x1728 <fdevopen+0x18>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	3a c0       	rjmp	.+116    	; 0x179c <fdevopen+0x8c>
    1728:	8b 01       	movw	r16, r22
    172a:	ec 01       	movw	r28, r24
    172c:	6e e0       	ldi	r22, 0x0E	; 14
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <calloc>
    1738:	fc 01       	movw	r30, r24
    173a:	89 2b       	or	r24, r25
    173c:	91 f3       	breq	.-28     	; 0x1722 <fdevopen+0x12>
    173e:	80 e8       	ldi	r24, 0x80	; 128
    1740:	83 83       	std	Z+3, r24	; 0x03
    1742:	01 15       	cp	r16, r1
    1744:	11 05       	cpc	r17, r1
    1746:	71 f0       	breq	.+28     	; 0x1764 <fdevopen+0x54>
    1748:	13 87       	std	Z+11, r17	; 0x0b
    174a:	02 87       	std	Z+10, r16	; 0x0a
    174c:	81 e8       	ldi	r24, 0x81	; 129
    174e:	83 83       	std	Z+3, r24	; 0x03
    1750:	80 91 39 1b 	lds	r24, 0x1B39	; 0x801b39 <__iob>
    1754:	90 91 3a 1b 	lds	r25, 0x1B3A	; 0x801b3a <__iob+0x1>
    1758:	89 2b       	or	r24, r25
    175a:	21 f4       	brne	.+8      	; 0x1764 <fdevopen+0x54>
    175c:	f0 93 3a 1b 	sts	0x1B3A, r31	; 0x801b3a <__iob+0x1>
    1760:	e0 93 39 1b 	sts	0x1B39, r30	; 0x801b39 <__iob>
    1764:	20 97       	sbiw	r28, 0x00	; 0
    1766:	c9 f0       	breq	.+50     	; 0x179a <fdevopen+0x8a>
    1768:	d1 87       	std	Z+9, r29	; 0x09
    176a:	c0 87       	std	Z+8, r28	; 0x08
    176c:	83 81       	ldd	r24, Z+3	; 0x03
    176e:	82 60       	ori	r24, 0x02	; 2
    1770:	83 83       	std	Z+3, r24	; 0x03
    1772:	80 91 3b 1b 	lds	r24, 0x1B3B	; 0x801b3b <__iob+0x2>
    1776:	90 91 3c 1b 	lds	r25, 0x1B3C	; 0x801b3c <__iob+0x3>
    177a:	89 2b       	or	r24, r25
    177c:	71 f4       	brne	.+28     	; 0x179a <fdevopen+0x8a>
    177e:	f0 93 3c 1b 	sts	0x1B3C, r31	; 0x801b3c <__iob+0x3>
    1782:	e0 93 3b 1b 	sts	0x1B3B, r30	; 0x801b3b <__iob+0x2>
    1786:	80 91 3d 1b 	lds	r24, 0x1B3D	; 0x801b3d <__iob+0x4>
    178a:	90 91 3e 1b 	lds	r25, 0x1B3E	; 0x801b3e <__iob+0x5>
    178e:	89 2b       	or	r24, r25
    1790:	21 f4       	brne	.+8      	; 0x179a <fdevopen+0x8a>
    1792:	f0 93 3e 1b 	sts	0x1B3E, r31	; 0x801b3e <__iob+0x5>
    1796:	e0 93 3d 1b 	sts	0x1B3D, r30	; 0x801b3d <__iob+0x4>
    179a:	cf 01       	movw	r24, r30
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	08 95       	ret

000017a6 <printf>:
    17a6:	a0 e0       	ldi	r26, 0x00	; 0
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e9 ed       	ldi	r30, 0xD9	; 217
    17ac:	fb e0       	ldi	r31, 0x0B	; 11
    17ae:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__prologue_saves__+0x20>
    17b2:	ae 01       	movw	r20, r28
    17b4:	4b 5f       	subi	r20, 0xFB	; 251
    17b6:	5f 4f       	sbci	r21, 0xFF	; 255
    17b8:	fa 01       	movw	r30, r20
    17ba:	61 91       	ld	r22, Z+
    17bc:	71 91       	ld	r23, Z+
    17be:	af 01       	movw	r20, r30
    17c0:	80 91 3b 1b 	lds	r24, 0x1B3B	; 0x801b3b <__iob+0x2>
    17c4:	90 91 3c 1b 	lds	r25, 0x1B3C	; 0x801b3c <__iob+0x3>
    17c8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <vfprintf>
    17cc:	e2 e0       	ldi	r30, 0x02	; 2
    17ce:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__epilogue_restores__+0x20>

000017d2 <vfprintf>:
    17d2:	ab e0       	ldi	r26, 0x0B	; 11
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ef ee       	ldi	r30, 0xEF	; 239
    17d8:	fb e0       	ldi	r31, 0x0B	; 11
    17da:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__prologue_saves__>
    17de:	6c 01       	movw	r12, r24
    17e0:	7b 01       	movw	r14, r22
    17e2:	8a 01       	movw	r16, r20
    17e4:	fc 01       	movw	r30, r24
    17e6:	17 82       	std	Z+7, r1	; 0x07
    17e8:	16 82       	std	Z+6, r1	; 0x06
    17ea:	83 81       	ldd	r24, Z+3	; 0x03
    17ec:	81 ff       	sbrs	r24, 1
    17ee:	cc c1       	rjmp	.+920    	; 0x1b88 <vfprintf+0x3b6>
    17f0:	ce 01       	movw	r24, r28
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	3c 01       	movw	r6, r24
    17f6:	f6 01       	movw	r30, r12
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	f7 01       	movw	r30, r14
    17fc:	93 fd       	sbrc	r25, 3
    17fe:	85 91       	lpm	r24, Z+
    1800:	93 ff       	sbrs	r25, 3
    1802:	81 91       	ld	r24, Z+
    1804:	7f 01       	movw	r14, r30
    1806:	88 23       	and	r24, r24
    1808:	09 f4       	brne	.+2      	; 0x180c <vfprintf+0x3a>
    180a:	ba c1       	rjmp	.+884    	; 0x1b80 <vfprintf+0x3ae>
    180c:	85 32       	cpi	r24, 0x25	; 37
    180e:	39 f4       	brne	.+14     	; 0x181e <vfprintf+0x4c>
    1810:	93 fd       	sbrc	r25, 3
    1812:	85 91       	lpm	r24, Z+
    1814:	93 ff       	sbrs	r25, 3
    1816:	81 91       	ld	r24, Z+
    1818:	7f 01       	movw	r14, r30
    181a:	85 32       	cpi	r24, 0x25	; 37
    181c:	29 f4       	brne	.+10     	; 0x1828 <vfprintf+0x56>
    181e:	b6 01       	movw	r22, r12
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    1826:	e7 cf       	rjmp	.-50     	; 0x17f6 <vfprintf+0x24>
    1828:	91 2c       	mov	r9, r1
    182a:	21 2c       	mov	r2, r1
    182c:	31 2c       	mov	r3, r1
    182e:	ff e1       	ldi	r31, 0x1F	; 31
    1830:	f3 15       	cp	r31, r3
    1832:	d8 f0       	brcs	.+54     	; 0x186a <vfprintf+0x98>
    1834:	8b 32       	cpi	r24, 0x2B	; 43
    1836:	79 f0       	breq	.+30     	; 0x1856 <vfprintf+0x84>
    1838:	38 f4       	brcc	.+14     	; 0x1848 <vfprintf+0x76>
    183a:	80 32       	cpi	r24, 0x20	; 32
    183c:	79 f0       	breq	.+30     	; 0x185c <vfprintf+0x8a>
    183e:	83 32       	cpi	r24, 0x23	; 35
    1840:	a1 f4       	brne	.+40     	; 0x186a <vfprintf+0x98>
    1842:	23 2d       	mov	r18, r3
    1844:	20 61       	ori	r18, 0x10	; 16
    1846:	1d c0       	rjmp	.+58     	; 0x1882 <vfprintf+0xb0>
    1848:	8d 32       	cpi	r24, 0x2D	; 45
    184a:	61 f0       	breq	.+24     	; 0x1864 <vfprintf+0x92>
    184c:	80 33       	cpi	r24, 0x30	; 48
    184e:	69 f4       	brne	.+26     	; 0x186a <vfprintf+0x98>
    1850:	23 2d       	mov	r18, r3
    1852:	21 60       	ori	r18, 0x01	; 1
    1854:	16 c0       	rjmp	.+44     	; 0x1882 <vfprintf+0xb0>
    1856:	83 2d       	mov	r24, r3
    1858:	82 60       	ori	r24, 0x02	; 2
    185a:	38 2e       	mov	r3, r24
    185c:	e3 2d       	mov	r30, r3
    185e:	e4 60       	ori	r30, 0x04	; 4
    1860:	3e 2e       	mov	r3, r30
    1862:	2a c0       	rjmp	.+84     	; 0x18b8 <vfprintf+0xe6>
    1864:	f3 2d       	mov	r31, r3
    1866:	f8 60       	ori	r31, 0x08	; 8
    1868:	1d c0       	rjmp	.+58     	; 0x18a4 <vfprintf+0xd2>
    186a:	37 fc       	sbrc	r3, 7
    186c:	2d c0       	rjmp	.+90     	; 0x18c8 <vfprintf+0xf6>
    186e:	20 ed       	ldi	r18, 0xD0	; 208
    1870:	28 0f       	add	r18, r24
    1872:	2a 30       	cpi	r18, 0x0A	; 10
    1874:	40 f0       	brcs	.+16     	; 0x1886 <vfprintf+0xb4>
    1876:	8e 32       	cpi	r24, 0x2E	; 46
    1878:	b9 f4       	brne	.+46     	; 0x18a8 <vfprintf+0xd6>
    187a:	36 fc       	sbrc	r3, 6
    187c:	81 c1       	rjmp	.+770    	; 0x1b80 <vfprintf+0x3ae>
    187e:	23 2d       	mov	r18, r3
    1880:	20 64       	ori	r18, 0x40	; 64
    1882:	32 2e       	mov	r3, r18
    1884:	19 c0       	rjmp	.+50     	; 0x18b8 <vfprintf+0xe6>
    1886:	36 fe       	sbrs	r3, 6
    1888:	06 c0       	rjmp	.+12     	; 0x1896 <vfprintf+0xc4>
    188a:	8a e0       	ldi	r24, 0x0A	; 10
    188c:	98 9e       	mul	r9, r24
    188e:	20 0d       	add	r18, r0
    1890:	11 24       	eor	r1, r1
    1892:	92 2e       	mov	r9, r18
    1894:	11 c0       	rjmp	.+34     	; 0x18b8 <vfprintf+0xe6>
    1896:	ea e0       	ldi	r30, 0x0A	; 10
    1898:	2e 9e       	mul	r2, r30
    189a:	20 0d       	add	r18, r0
    189c:	11 24       	eor	r1, r1
    189e:	22 2e       	mov	r2, r18
    18a0:	f3 2d       	mov	r31, r3
    18a2:	f0 62       	ori	r31, 0x20	; 32
    18a4:	3f 2e       	mov	r3, r31
    18a6:	08 c0       	rjmp	.+16     	; 0x18b8 <vfprintf+0xe6>
    18a8:	8c 36       	cpi	r24, 0x6C	; 108
    18aa:	21 f4       	brne	.+8      	; 0x18b4 <vfprintf+0xe2>
    18ac:	83 2d       	mov	r24, r3
    18ae:	80 68       	ori	r24, 0x80	; 128
    18b0:	38 2e       	mov	r3, r24
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <vfprintf+0xe6>
    18b4:	88 36       	cpi	r24, 0x68	; 104
    18b6:	41 f4       	brne	.+16     	; 0x18c8 <vfprintf+0xf6>
    18b8:	f7 01       	movw	r30, r14
    18ba:	93 fd       	sbrc	r25, 3
    18bc:	85 91       	lpm	r24, Z+
    18be:	93 ff       	sbrs	r25, 3
    18c0:	81 91       	ld	r24, Z+
    18c2:	7f 01       	movw	r14, r30
    18c4:	81 11       	cpse	r24, r1
    18c6:	b3 cf       	rjmp	.-154    	; 0x182e <vfprintf+0x5c>
    18c8:	98 2f       	mov	r25, r24
    18ca:	9f 7d       	andi	r25, 0xDF	; 223
    18cc:	95 54       	subi	r25, 0x45	; 69
    18ce:	93 30       	cpi	r25, 0x03	; 3
    18d0:	28 f4       	brcc	.+10     	; 0x18dc <vfprintf+0x10a>
    18d2:	0c 5f       	subi	r16, 0xFC	; 252
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	9f e3       	ldi	r25, 0x3F	; 63
    18d8:	99 83       	std	Y+1, r25	; 0x01
    18da:	0d c0       	rjmp	.+26     	; 0x18f6 <vfprintf+0x124>
    18dc:	83 36       	cpi	r24, 0x63	; 99
    18de:	31 f0       	breq	.+12     	; 0x18ec <vfprintf+0x11a>
    18e0:	83 37       	cpi	r24, 0x73	; 115
    18e2:	71 f0       	breq	.+28     	; 0x1900 <vfprintf+0x12e>
    18e4:	83 35       	cpi	r24, 0x53	; 83
    18e6:	09 f0       	breq	.+2      	; 0x18ea <vfprintf+0x118>
    18e8:	59 c0       	rjmp	.+178    	; 0x199c <vfprintf+0x1ca>
    18ea:	21 c0       	rjmp	.+66     	; 0x192e <vfprintf+0x15c>
    18ec:	f8 01       	movw	r30, r16
    18ee:	80 81       	ld	r24, Z
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	0e 5f       	subi	r16, 0xFE	; 254
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	88 24       	eor	r8, r8
    18f8:	83 94       	inc	r8
    18fa:	91 2c       	mov	r9, r1
    18fc:	53 01       	movw	r10, r6
    18fe:	13 c0       	rjmp	.+38     	; 0x1926 <vfprintf+0x154>
    1900:	28 01       	movw	r4, r16
    1902:	f2 e0       	ldi	r31, 0x02	; 2
    1904:	4f 0e       	add	r4, r31
    1906:	51 1c       	adc	r5, r1
    1908:	f8 01       	movw	r30, r16
    190a:	a0 80       	ld	r10, Z
    190c:	b1 80       	ldd	r11, Z+1	; 0x01
    190e:	36 fe       	sbrs	r3, 6
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <vfprintf+0x146>
    1912:	69 2d       	mov	r22, r9
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x14a>
    1918:	6f ef       	ldi	r22, 0xFF	; 255
    191a:	7f ef       	ldi	r23, 0xFF	; 255
    191c:	c5 01       	movw	r24, r10
    191e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <strnlen>
    1922:	4c 01       	movw	r8, r24
    1924:	82 01       	movw	r16, r4
    1926:	f3 2d       	mov	r31, r3
    1928:	ff 77       	andi	r31, 0x7F	; 127
    192a:	3f 2e       	mov	r3, r31
    192c:	16 c0       	rjmp	.+44     	; 0x195a <vfprintf+0x188>
    192e:	28 01       	movw	r4, r16
    1930:	22 e0       	ldi	r18, 0x02	; 2
    1932:	42 0e       	add	r4, r18
    1934:	51 1c       	adc	r5, r1
    1936:	f8 01       	movw	r30, r16
    1938:	a0 80       	ld	r10, Z
    193a:	b1 80       	ldd	r11, Z+1	; 0x01
    193c:	36 fe       	sbrs	r3, 6
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <vfprintf+0x174>
    1940:	69 2d       	mov	r22, r9
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	02 c0       	rjmp	.+4      	; 0x194a <vfprintf+0x178>
    1946:	6f ef       	ldi	r22, 0xFF	; 255
    1948:	7f ef       	ldi	r23, 0xFF	; 255
    194a:	c5 01       	movw	r24, r10
    194c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <strnlen_P>
    1950:	4c 01       	movw	r8, r24
    1952:	f3 2d       	mov	r31, r3
    1954:	f0 68       	ori	r31, 0x80	; 128
    1956:	3f 2e       	mov	r3, r31
    1958:	82 01       	movw	r16, r4
    195a:	33 fc       	sbrc	r3, 3
    195c:	1b c0       	rjmp	.+54     	; 0x1994 <vfprintf+0x1c2>
    195e:	82 2d       	mov	r24, r2
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	88 16       	cp	r8, r24
    1964:	99 06       	cpc	r9, r25
    1966:	b0 f4       	brcc	.+44     	; 0x1994 <vfprintf+0x1c2>
    1968:	b6 01       	movw	r22, r12
    196a:	80 e2       	ldi	r24, 0x20	; 32
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    1972:	2a 94       	dec	r2
    1974:	f4 cf       	rjmp	.-24     	; 0x195e <vfprintf+0x18c>
    1976:	f5 01       	movw	r30, r10
    1978:	37 fc       	sbrc	r3, 7
    197a:	85 91       	lpm	r24, Z+
    197c:	37 fe       	sbrs	r3, 7
    197e:	81 91       	ld	r24, Z+
    1980:	5f 01       	movw	r10, r30
    1982:	b6 01       	movw	r22, r12
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    198a:	21 10       	cpse	r2, r1
    198c:	2a 94       	dec	r2
    198e:	21 e0       	ldi	r18, 0x01	; 1
    1990:	82 1a       	sub	r8, r18
    1992:	91 08       	sbc	r9, r1
    1994:	81 14       	cp	r8, r1
    1996:	91 04       	cpc	r9, r1
    1998:	71 f7       	brne	.-36     	; 0x1976 <vfprintf+0x1a4>
    199a:	e8 c0       	rjmp	.+464    	; 0x1b6c <vfprintf+0x39a>
    199c:	84 36       	cpi	r24, 0x64	; 100
    199e:	11 f0       	breq	.+4      	; 0x19a4 <vfprintf+0x1d2>
    19a0:	89 36       	cpi	r24, 0x69	; 105
    19a2:	41 f5       	brne	.+80     	; 0x19f4 <vfprintf+0x222>
    19a4:	f8 01       	movw	r30, r16
    19a6:	37 fe       	sbrs	r3, 7
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <vfprintf+0x1e6>
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	0c 5f       	subi	r16, 0xFC	; 252
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <vfprintf+0x1f6>
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	07 2e       	mov	r0, r23
    19be:	00 0c       	add	r0, r0
    19c0:	88 0b       	sbc	r24, r24
    19c2:	99 0b       	sbc	r25, r25
    19c4:	0e 5f       	subi	r16, 0xFE	; 254
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	f3 2d       	mov	r31, r3
    19ca:	ff 76       	andi	r31, 0x6F	; 111
    19cc:	3f 2e       	mov	r3, r31
    19ce:	97 ff       	sbrs	r25, 7
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <vfprintf+0x212>
    19d2:	90 95       	com	r25
    19d4:	80 95       	com	r24
    19d6:	70 95       	com	r23
    19d8:	61 95       	neg	r22
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	f0 68       	ori	r31, 0x80	; 128
    19e2:	3f 2e       	mov	r3, r31
    19e4:	2a e0       	ldi	r18, 0x0A	; 10
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	a3 01       	movw	r20, r6
    19ea:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__ultoa_invert>
    19ee:	88 2e       	mov	r8, r24
    19f0:	86 18       	sub	r8, r6
    19f2:	45 c0       	rjmp	.+138    	; 0x1a7e <vfprintf+0x2ac>
    19f4:	85 37       	cpi	r24, 0x75	; 117
    19f6:	31 f4       	brne	.+12     	; 0x1a04 <vfprintf+0x232>
    19f8:	23 2d       	mov	r18, r3
    19fa:	2f 7e       	andi	r18, 0xEF	; 239
    19fc:	b2 2e       	mov	r11, r18
    19fe:	2a e0       	ldi	r18, 0x0A	; 10
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	25 c0       	rjmp	.+74     	; 0x1a4e <vfprintf+0x27c>
    1a04:	93 2d       	mov	r25, r3
    1a06:	99 7f       	andi	r25, 0xF9	; 249
    1a08:	b9 2e       	mov	r11, r25
    1a0a:	8f 36       	cpi	r24, 0x6F	; 111
    1a0c:	c1 f0       	breq	.+48     	; 0x1a3e <vfprintf+0x26c>
    1a0e:	18 f4       	brcc	.+6      	; 0x1a16 <vfprintf+0x244>
    1a10:	88 35       	cpi	r24, 0x58	; 88
    1a12:	79 f0       	breq	.+30     	; 0x1a32 <vfprintf+0x260>
    1a14:	b5 c0       	rjmp	.+362    	; 0x1b80 <vfprintf+0x3ae>
    1a16:	80 37       	cpi	r24, 0x70	; 112
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <vfprintf+0x24e>
    1a1a:	88 37       	cpi	r24, 0x78	; 120
    1a1c:	21 f0       	breq	.+8      	; 0x1a26 <vfprintf+0x254>
    1a1e:	b0 c0       	rjmp	.+352    	; 0x1b80 <vfprintf+0x3ae>
    1a20:	e9 2f       	mov	r30, r25
    1a22:	e0 61       	ori	r30, 0x10	; 16
    1a24:	be 2e       	mov	r11, r30
    1a26:	b4 fe       	sbrs	r11, 4
    1a28:	0d c0       	rjmp	.+26     	; 0x1a44 <vfprintf+0x272>
    1a2a:	fb 2d       	mov	r31, r11
    1a2c:	f4 60       	ori	r31, 0x04	; 4
    1a2e:	bf 2e       	mov	r11, r31
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <vfprintf+0x272>
    1a32:	34 fe       	sbrs	r3, 4
    1a34:	0a c0       	rjmp	.+20     	; 0x1a4a <vfprintf+0x278>
    1a36:	29 2f       	mov	r18, r25
    1a38:	26 60       	ori	r18, 0x06	; 6
    1a3a:	b2 2e       	mov	r11, r18
    1a3c:	06 c0       	rjmp	.+12     	; 0x1a4a <vfprintf+0x278>
    1a3e:	28 e0       	ldi	r18, 0x08	; 8
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <vfprintf+0x27c>
    1a44:	20 e1       	ldi	r18, 0x10	; 16
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <vfprintf+0x27c>
    1a4a:	20 e1       	ldi	r18, 0x10	; 16
    1a4c:	32 e0       	ldi	r19, 0x02	; 2
    1a4e:	f8 01       	movw	r30, r16
    1a50:	b7 fe       	sbrs	r11, 7
    1a52:	07 c0       	rjmp	.+14     	; 0x1a62 <vfprintf+0x290>
    1a54:	60 81       	ld	r22, Z
    1a56:	71 81       	ldd	r23, Z+1	; 0x01
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	0c 5f       	subi	r16, 0xFC	; 252
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <vfprintf+0x29c>
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 5f       	subi	r16, 0xFE	; 254
    1a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6e:	a3 01       	movw	r20, r6
    1a70:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__ultoa_invert>
    1a74:	88 2e       	mov	r8, r24
    1a76:	86 18       	sub	r8, r6
    1a78:	fb 2d       	mov	r31, r11
    1a7a:	ff 77       	andi	r31, 0x7F	; 127
    1a7c:	3f 2e       	mov	r3, r31
    1a7e:	36 fe       	sbrs	r3, 6
    1a80:	0d c0       	rjmp	.+26     	; 0x1a9c <vfprintf+0x2ca>
    1a82:	23 2d       	mov	r18, r3
    1a84:	2e 7f       	andi	r18, 0xFE	; 254
    1a86:	a2 2e       	mov	r10, r18
    1a88:	89 14       	cp	r8, r9
    1a8a:	58 f4       	brcc	.+22     	; 0x1aa2 <vfprintf+0x2d0>
    1a8c:	34 fe       	sbrs	r3, 4
    1a8e:	0b c0       	rjmp	.+22     	; 0x1aa6 <vfprintf+0x2d4>
    1a90:	32 fc       	sbrc	r3, 2
    1a92:	09 c0       	rjmp	.+18     	; 0x1aa6 <vfprintf+0x2d4>
    1a94:	83 2d       	mov	r24, r3
    1a96:	8e 7e       	andi	r24, 0xEE	; 238
    1a98:	a8 2e       	mov	r10, r24
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <vfprintf+0x2d4>
    1a9c:	b8 2c       	mov	r11, r8
    1a9e:	a3 2c       	mov	r10, r3
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <vfprintf+0x2d6>
    1aa2:	b8 2c       	mov	r11, r8
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <vfprintf+0x2d6>
    1aa6:	b9 2c       	mov	r11, r9
    1aa8:	a4 fe       	sbrs	r10, 4
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <vfprintf+0x2f8>
    1aac:	fe 01       	movw	r30, r28
    1aae:	e8 0d       	add	r30, r8
    1ab0:	f1 1d       	adc	r31, r1
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 33       	cpi	r24, 0x30	; 48
    1ab6:	21 f4       	brne	.+8      	; 0x1ac0 <vfprintf+0x2ee>
    1ab8:	9a 2d       	mov	r25, r10
    1aba:	99 7e       	andi	r25, 0xE9	; 233
    1abc:	a9 2e       	mov	r10, r25
    1abe:	09 c0       	rjmp	.+18     	; 0x1ad2 <vfprintf+0x300>
    1ac0:	a2 fe       	sbrs	r10, 2
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <vfprintf+0x2fe>
    1ac4:	b3 94       	inc	r11
    1ac6:	b3 94       	inc	r11
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <vfprintf+0x300>
    1aca:	8a 2d       	mov	r24, r10
    1acc:	86 78       	andi	r24, 0x86	; 134
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <vfprintf+0x300>
    1ad0:	b3 94       	inc	r11
    1ad2:	a3 fc       	sbrc	r10, 3
    1ad4:	11 c0       	rjmp	.+34     	; 0x1af8 <vfprintf+0x326>
    1ad6:	a0 fe       	sbrs	r10, 0
    1ad8:	06 c0       	rjmp	.+12     	; 0x1ae6 <vfprintf+0x314>
    1ada:	b2 14       	cp	r11, r2
    1adc:	88 f4       	brcc	.+34     	; 0x1b00 <vfprintf+0x32e>
    1ade:	28 0c       	add	r2, r8
    1ae0:	92 2c       	mov	r9, r2
    1ae2:	9b 18       	sub	r9, r11
    1ae4:	0e c0       	rjmp	.+28     	; 0x1b02 <vfprintf+0x330>
    1ae6:	b2 14       	cp	r11, r2
    1ae8:	60 f4       	brcc	.+24     	; 0x1b02 <vfprintf+0x330>
    1aea:	b6 01       	movw	r22, r12
    1aec:	80 e2       	ldi	r24, 0x20	; 32
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    1af4:	b3 94       	inc	r11
    1af6:	f7 cf       	rjmp	.-18     	; 0x1ae6 <vfprintf+0x314>
    1af8:	b2 14       	cp	r11, r2
    1afa:	18 f4       	brcc	.+6      	; 0x1b02 <vfprintf+0x330>
    1afc:	2b 18       	sub	r2, r11
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <vfprintf+0x332>
    1b00:	98 2c       	mov	r9, r8
    1b02:	21 2c       	mov	r2, r1
    1b04:	a4 fe       	sbrs	r10, 4
    1b06:	10 c0       	rjmp	.+32     	; 0x1b28 <vfprintf+0x356>
    1b08:	b6 01       	movw	r22, r12
    1b0a:	80 e3       	ldi	r24, 0x30	; 48
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    1b12:	a2 fe       	sbrs	r10, 2
    1b14:	17 c0       	rjmp	.+46     	; 0x1b44 <vfprintf+0x372>
    1b16:	a1 fc       	sbrc	r10, 1
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <vfprintf+0x34e>
    1b1a:	88 e7       	ldi	r24, 0x78	; 120
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x352>
    1b20:	88 e5       	ldi	r24, 0x58	; 88
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	b6 01       	movw	r22, r12
    1b26:	0c c0       	rjmp	.+24     	; 0x1b40 <vfprintf+0x36e>
    1b28:	8a 2d       	mov	r24, r10
    1b2a:	86 78       	andi	r24, 0x86	; 134
    1b2c:	59 f0       	breq	.+22     	; 0x1b44 <vfprintf+0x372>
    1b2e:	a1 fe       	sbrs	r10, 1
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <vfprintf+0x364>
    1b32:	8b e2       	ldi	r24, 0x2B	; 43
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <vfprintf+0x366>
    1b36:	80 e2       	ldi	r24, 0x20	; 32
    1b38:	a7 fc       	sbrc	r10, 7
    1b3a:	8d e2       	ldi	r24, 0x2D	; 45
    1b3c:	b6 01       	movw	r22, r12
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    1b44:	89 14       	cp	r8, r9
    1b46:	38 f4       	brcc	.+14     	; 0x1b56 <vfprintf+0x384>
    1b48:	b6 01       	movw	r22, r12
    1b4a:	80 e3       	ldi	r24, 0x30	; 48
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    1b52:	9a 94       	dec	r9
    1b54:	f7 cf       	rjmp	.-18     	; 0x1b44 <vfprintf+0x372>
    1b56:	8a 94       	dec	r8
    1b58:	f3 01       	movw	r30, r6
    1b5a:	e8 0d       	add	r30, r8
    1b5c:	f1 1d       	adc	r31, r1
    1b5e:	80 81       	ld	r24, Z
    1b60:	b6 01       	movw	r22, r12
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    1b68:	81 10       	cpse	r8, r1
    1b6a:	f5 cf       	rjmp	.-22     	; 0x1b56 <vfprintf+0x384>
    1b6c:	22 20       	and	r2, r2
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <vfprintf+0x3a0>
    1b70:	42 ce       	rjmp	.-892    	; 0x17f6 <vfprintf+0x24>
    1b72:	b6 01       	movw	r22, r12
    1b74:	80 e2       	ldi	r24, 0x20	; 32
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <fputc>
    1b7c:	2a 94       	dec	r2
    1b7e:	f6 cf       	rjmp	.-20     	; 0x1b6c <vfprintf+0x39a>
    1b80:	f6 01       	movw	r30, r12
    1b82:	86 81       	ldd	r24, Z+6	; 0x06
    1b84:	97 81       	ldd	r25, Z+7	; 0x07
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <vfprintf+0x3ba>
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	2b 96       	adiw	r28, 0x0b	; 11
    1b8e:	e2 e1       	ldi	r30, 0x12	; 18
    1b90:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__epilogue_restores__>

00001b94 <calloc>:
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	86 9f       	mul	r24, r22
    1b9e:	80 01       	movw	r16, r0
    1ba0:	87 9f       	mul	r24, r23
    1ba2:	10 0d       	add	r17, r0
    1ba4:	96 9f       	mul	r25, r22
    1ba6:	10 0d       	add	r17, r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	c8 01       	movw	r24, r16
    1bac:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <malloc>
    1bb0:	ec 01       	movw	r28, r24
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	29 f0       	breq	.+10     	; 0x1bc0 <calloc+0x2c>
    1bb6:	a8 01       	movw	r20, r16
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <memset>
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	08 95       	ret

00001bcc <malloc>:
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	10 f4       	brcc	.+4      	; 0x1bde <malloc+0x12>
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	e0 91 41 1b 	lds	r30, 0x1B41	; 0x801b41 <__flp>
    1be2:	f0 91 42 1b 	lds	r31, 0x1B42	; 0x801b42 <__flp+0x1>
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	30 97       	sbiw	r30, 0x00	; 0
    1bf0:	19 f1       	breq	.+70     	; 0x1c38 <malloc+0x6c>
    1bf2:	40 81       	ld	r20, Z
    1bf4:	51 81       	ldd	r21, Z+1	; 0x01
    1bf6:	02 81       	ldd	r16, Z+2	; 0x02
    1bf8:	13 81       	ldd	r17, Z+3	; 0x03
    1bfa:	48 17       	cp	r20, r24
    1bfc:	59 07       	cpc	r21, r25
    1bfe:	c8 f0       	brcs	.+50     	; 0x1c32 <malloc+0x66>
    1c00:	84 17       	cp	r24, r20
    1c02:	95 07       	cpc	r25, r21
    1c04:	69 f4       	brne	.+26     	; 0x1c20 <malloc+0x54>
    1c06:	10 97       	sbiw	r26, 0x00	; 0
    1c08:	31 f0       	breq	.+12     	; 0x1c16 <malloc+0x4a>
    1c0a:	12 96       	adiw	r26, 0x02	; 2
    1c0c:	0c 93       	st	X, r16
    1c0e:	12 97       	sbiw	r26, 0x02	; 2
    1c10:	13 96       	adiw	r26, 0x03	; 3
    1c12:	1c 93       	st	X, r17
    1c14:	27 c0       	rjmp	.+78     	; 0x1c64 <malloc+0x98>
    1c16:	00 93 41 1b 	sts	0x1B41, r16	; 0x801b41 <__flp>
    1c1a:	10 93 42 1b 	sts	0x1B42, r17	; 0x801b42 <__flp+0x1>
    1c1e:	22 c0       	rjmp	.+68     	; 0x1c64 <malloc+0x98>
    1c20:	21 15       	cp	r18, r1
    1c22:	31 05       	cpc	r19, r1
    1c24:	19 f0       	breq	.+6      	; 0x1c2c <malloc+0x60>
    1c26:	42 17       	cp	r20, r18
    1c28:	53 07       	cpc	r21, r19
    1c2a:	18 f4       	brcc	.+6      	; 0x1c32 <malloc+0x66>
    1c2c:	9a 01       	movw	r18, r20
    1c2e:	bd 01       	movw	r22, r26
    1c30:	ef 01       	movw	r28, r30
    1c32:	df 01       	movw	r26, r30
    1c34:	f8 01       	movw	r30, r16
    1c36:	db cf       	rjmp	.-74     	; 0x1bee <malloc+0x22>
    1c38:	21 15       	cp	r18, r1
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	f9 f0       	breq	.+62     	; 0x1c7c <malloc+0xb0>
    1c3e:	28 1b       	sub	r18, r24
    1c40:	39 0b       	sbc	r19, r25
    1c42:	24 30       	cpi	r18, 0x04	; 4
    1c44:	31 05       	cpc	r19, r1
    1c46:	80 f4       	brcc	.+32     	; 0x1c68 <malloc+0x9c>
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4c:	61 15       	cp	r22, r1
    1c4e:	71 05       	cpc	r23, r1
    1c50:	21 f0       	breq	.+8      	; 0x1c5a <malloc+0x8e>
    1c52:	fb 01       	movw	r30, r22
    1c54:	93 83       	std	Z+3, r25	; 0x03
    1c56:	82 83       	std	Z+2, r24	; 0x02
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <malloc+0x96>
    1c5a:	90 93 42 1b 	sts	0x1B42, r25	; 0x801b42 <__flp+0x1>
    1c5e:	80 93 41 1b 	sts	0x1B41, r24	; 0x801b41 <__flp>
    1c62:	fe 01       	movw	r30, r28
    1c64:	32 96       	adiw	r30, 0x02	; 2
    1c66:	44 c0       	rjmp	.+136    	; 0x1cf0 <malloc+0x124>
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e2 0f       	add	r30, r18
    1c6c:	f3 1f       	adc	r31, r19
    1c6e:	81 93       	st	Z+, r24
    1c70:	91 93       	st	Z+, r25
    1c72:	22 50       	subi	r18, 0x02	; 2
    1c74:	31 09       	sbc	r19, r1
    1c76:	39 83       	std	Y+1, r19	; 0x01
    1c78:	28 83       	st	Y, r18
    1c7a:	3a c0       	rjmp	.+116    	; 0x1cf0 <malloc+0x124>
    1c7c:	20 91 3f 1b 	lds	r18, 0x1B3F	; 0x801b3f <__brkval>
    1c80:	30 91 40 1b 	lds	r19, 0x1B40	; 0x801b40 <__brkval+0x1>
    1c84:	23 2b       	or	r18, r19
    1c86:	41 f4       	brne	.+16     	; 0x1c98 <malloc+0xcc>
    1c88:	20 91 02 18 	lds	r18, 0x1802	; 0x801802 <__malloc_heap_start>
    1c8c:	30 91 03 18 	lds	r19, 0x1803	; 0x801803 <__malloc_heap_start+0x1>
    1c90:	30 93 40 1b 	sts	0x1B40, r19	; 0x801b40 <__brkval+0x1>
    1c94:	20 93 3f 1b 	sts	0x1B3F, r18	; 0x801b3f <__brkval>
    1c98:	20 91 00 18 	lds	r18, 0x1800	; 0x801800 <__data_start>
    1c9c:	30 91 01 18 	lds	r19, 0x1801	; 0x801801 <__data_start+0x1>
    1ca0:	21 15       	cp	r18, r1
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	41 f4       	brne	.+16     	; 0x1cb6 <malloc+0xea>
    1ca6:	2d b7       	in	r18, 0x3d	; 61
    1ca8:	3e b7       	in	r19, 0x3e	; 62
    1caa:	40 91 04 18 	lds	r20, 0x1804	; 0x801804 <__malloc_margin>
    1cae:	50 91 05 18 	lds	r21, 0x1805	; 0x801805 <__malloc_margin+0x1>
    1cb2:	24 1b       	sub	r18, r20
    1cb4:	35 0b       	sbc	r19, r21
    1cb6:	e0 91 3f 1b 	lds	r30, 0x1B3F	; 0x801b3f <__brkval>
    1cba:	f0 91 40 1b 	lds	r31, 0x1B40	; 0x801b40 <__brkval+0x1>
    1cbe:	e2 17       	cp	r30, r18
    1cc0:	f3 07       	cpc	r31, r19
    1cc2:	a0 f4       	brcc	.+40     	; 0x1cec <malloc+0x120>
    1cc4:	2e 1b       	sub	r18, r30
    1cc6:	3f 0b       	sbc	r19, r31
    1cc8:	28 17       	cp	r18, r24
    1cca:	39 07       	cpc	r19, r25
    1ccc:	78 f0       	brcs	.+30     	; 0x1cec <malloc+0x120>
    1cce:	ac 01       	movw	r20, r24
    1cd0:	4e 5f       	subi	r20, 0xFE	; 254
    1cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd4:	24 17       	cp	r18, r20
    1cd6:	35 07       	cpc	r19, r21
    1cd8:	48 f0       	brcs	.+18     	; 0x1cec <malloc+0x120>
    1cda:	4e 0f       	add	r20, r30
    1cdc:	5f 1f       	adc	r21, r31
    1cde:	50 93 40 1b 	sts	0x1B40, r21	; 0x801b40 <__brkval+0x1>
    1ce2:	40 93 3f 1b 	sts	0x1B3F, r20	; 0x801b3f <__brkval>
    1ce6:	81 93       	st	Z+, r24
    1ce8:	91 93       	st	Z+, r25
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <malloc+0x124>
    1cec:	e0 e0       	ldi	r30, 0x00	; 0
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	cf 01       	movw	r24, r30
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	08 95       	ret

00001cfc <free>:
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <free+0xa>
    1d04:	81 c0       	rjmp	.+258    	; 0x1e08 <free+0x10c>
    1d06:	fc 01       	movw	r30, r24
    1d08:	32 97       	sbiw	r30, 0x02	; 2
    1d0a:	13 82       	std	Z+3, r1	; 0x03
    1d0c:	12 82       	std	Z+2, r1	; 0x02
    1d0e:	a0 91 41 1b 	lds	r26, 0x1B41	; 0x801b41 <__flp>
    1d12:	b0 91 42 1b 	lds	r27, 0x1B42	; 0x801b42 <__flp+0x1>
    1d16:	10 97       	sbiw	r26, 0x00	; 0
    1d18:	81 f4       	brne	.+32     	; 0x1d3a <free+0x3e>
    1d1a:	20 81       	ld	r18, Z
    1d1c:	31 81       	ldd	r19, Z+1	; 0x01
    1d1e:	82 0f       	add	r24, r18
    1d20:	93 1f       	adc	r25, r19
    1d22:	20 91 3f 1b 	lds	r18, 0x1B3F	; 0x801b3f <__brkval>
    1d26:	30 91 40 1b 	lds	r19, 0x1B40	; 0x801b40 <__brkval+0x1>
    1d2a:	28 17       	cp	r18, r24
    1d2c:	39 07       	cpc	r19, r25
    1d2e:	51 f5       	brne	.+84     	; 0x1d84 <free+0x88>
    1d30:	f0 93 40 1b 	sts	0x1B40, r31	; 0x801b40 <__brkval+0x1>
    1d34:	e0 93 3f 1b 	sts	0x1B3F, r30	; 0x801b3f <__brkval>
    1d38:	67 c0       	rjmp	.+206    	; 0x1e08 <free+0x10c>
    1d3a:	ed 01       	movw	r28, r26
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	ce 17       	cp	r28, r30
    1d42:	df 07       	cpc	r29, r31
    1d44:	40 f4       	brcc	.+16     	; 0x1d56 <free+0x5a>
    1d46:	4a 81       	ldd	r20, Y+2	; 0x02
    1d48:	5b 81       	ldd	r21, Y+3	; 0x03
    1d4a:	9e 01       	movw	r18, r28
    1d4c:	41 15       	cp	r20, r1
    1d4e:	51 05       	cpc	r21, r1
    1d50:	f1 f0       	breq	.+60     	; 0x1d8e <free+0x92>
    1d52:	ea 01       	movw	r28, r20
    1d54:	f5 cf       	rjmp	.-22     	; 0x1d40 <free+0x44>
    1d56:	d3 83       	std	Z+3, r29	; 0x03
    1d58:	c2 83       	std	Z+2, r28	; 0x02
    1d5a:	40 81       	ld	r20, Z
    1d5c:	51 81       	ldd	r21, Z+1	; 0x01
    1d5e:	84 0f       	add	r24, r20
    1d60:	95 1f       	adc	r25, r21
    1d62:	c8 17       	cp	r28, r24
    1d64:	d9 07       	cpc	r29, r25
    1d66:	59 f4       	brne	.+22     	; 0x1d7e <free+0x82>
    1d68:	88 81       	ld	r24, Y
    1d6a:	99 81       	ldd	r25, Y+1	; 0x01
    1d6c:	84 0f       	add	r24, r20
    1d6e:	95 1f       	adc	r25, r21
    1d70:	02 96       	adiw	r24, 0x02	; 2
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	80 83       	st	Z, r24
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	93 83       	std	Z+3, r25	; 0x03
    1d7c:	82 83       	std	Z+2, r24	; 0x02
    1d7e:	21 15       	cp	r18, r1
    1d80:	31 05       	cpc	r19, r1
    1d82:	29 f4       	brne	.+10     	; 0x1d8e <free+0x92>
    1d84:	f0 93 42 1b 	sts	0x1B42, r31	; 0x801b42 <__flp+0x1>
    1d88:	e0 93 41 1b 	sts	0x1B41, r30	; 0x801b41 <__flp>
    1d8c:	3d c0       	rjmp	.+122    	; 0x1e08 <free+0x10c>
    1d8e:	e9 01       	movw	r28, r18
    1d90:	fb 83       	std	Y+3, r31	; 0x03
    1d92:	ea 83       	std	Y+2, r30	; 0x02
    1d94:	49 91       	ld	r20, Y+
    1d96:	59 91       	ld	r21, Y+
    1d98:	c4 0f       	add	r28, r20
    1d9a:	d5 1f       	adc	r29, r21
    1d9c:	ec 17       	cp	r30, r28
    1d9e:	fd 07       	cpc	r31, r29
    1da0:	61 f4       	brne	.+24     	; 0x1dba <free+0xbe>
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	84 0f       	add	r24, r20
    1da8:	95 1f       	adc	r25, r21
    1daa:	02 96       	adiw	r24, 0x02	; 2
    1dac:	e9 01       	movw	r28, r18
    1dae:	99 83       	std	Y+1, r25	; 0x01
    1db0:	88 83       	st	Y, r24
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	9b 83       	std	Y+3, r25	; 0x03
    1db8:	8a 83       	std	Y+2, r24	; 0x02
    1dba:	e0 e0       	ldi	r30, 0x00	; 0
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	12 96       	adiw	r26, 0x02	; 2
    1dc0:	8d 91       	ld	r24, X+
    1dc2:	9c 91       	ld	r25, X
    1dc4:	13 97       	sbiw	r26, 0x03	; 3
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	19 f0       	breq	.+6      	; 0x1dd0 <free+0xd4>
    1dca:	fd 01       	movw	r30, r26
    1dcc:	dc 01       	movw	r26, r24
    1dce:	f7 cf       	rjmp	.-18     	; 0x1dbe <free+0xc2>
    1dd0:	8d 91       	ld	r24, X+
    1dd2:	9c 91       	ld	r25, X
    1dd4:	11 97       	sbiw	r26, 0x01	; 1
    1dd6:	9d 01       	movw	r18, r26
    1dd8:	2e 5f       	subi	r18, 0xFE	; 254
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	82 0f       	add	r24, r18
    1dde:	93 1f       	adc	r25, r19
    1de0:	20 91 3f 1b 	lds	r18, 0x1B3F	; 0x801b3f <__brkval>
    1de4:	30 91 40 1b 	lds	r19, 0x1B40	; 0x801b40 <__brkval+0x1>
    1de8:	28 17       	cp	r18, r24
    1dea:	39 07       	cpc	r19, r25
    1dec:	69 f4       	brne	.+26     	; 0x1e08 <free+0x10c>
    1dee:	30 97       	sbiw	r30, 0x00	; 0
    1df0:	29 f4       	brne	.+10     	; 0x1dfc <free+0x100>
    1df2:	10 92 42 1b 	sts	0x1B42, r1	; 0x801b42 <__flp+0x1>
    1df6:	10 92 41 1b 	sts	0x1B41, r1	; 0x801b41 <__flp>
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <free+0x104>
    1dfc:	13 82       	std	Z+3, r1	; 0x03
    1dfe:	12 82       	std	Z+2, r1	; 0x02
    1e00:	b0 93 40 1b 	sts	0x1B40, r27	; 0x801b40 <__brkval+0x1>
    1e04:	a0 93 3f 1b 	sts	0x1B3F, r26	; 0x801b3f <__brkval>
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	08 95       	ret

00001e0e <strnlen_P>:
    1e0e:	fc 01       	movw	r30, r24
    1e10:	05 90       	lpm	r0, Z+
    1e12:	61 50       	subi	r22, 0x01	; 1
    1e14:	70 40       	sbci	r23, 0x00	; 0
    1e16:	01 10       	cpse	r0, r1
    1e18:	d8 f7       	brcc	.-10     	; 0x1e10 <strnlen_P+0x2>
    1e1a:	80 95       	com	r24
    1e1c:	90 95       	com	r25
    1e1e:	8e 0f       	add	r24, r30
    1e20:	9f 1f       	adc	r25, r31
    1e22:	08 95       	ret

00001e24 <memset>:
    1e24:	dc 01       	movw	r26, r24
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <memset+0x6>
    1e28:	6d 93       	st	X+, r22
    1e2a:	41 50       	subi	r20, 0x01	; 1
    1e2c:	50 40       	sbci	r21, 0x00	; 0
    1e2e:	e0 f7       	brcc	.-8      	; 0x1e28 <memset+0x4>
    1e30:	08 95       	ret

00001e32 <strnlen>:
    1e32:	fc 01       	movw	r30, r24
    1e34:	61 50       	subi	r22, 0x01	; 1
    1e36:	70 40       	sbci	r23, 0x00	; 0
    1e38:	01 90       	ld	r0, Z+
    1e3a:	01 10       	cpse	r0, r1
    1e3c:	d8 f7       	brcc	.-10     	; 0x1e34 <strnlen+0x2>
    1e3e:	80 95       	com	r24
    1e40:	90 95       	com	r25
    1e42:	8e 0f       	add	r24, r30
    1e44:	9f 1f       	adc	r25, r31
    1e46:	08 95       	ret

00001e48 <fputc>:
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	fb 01       	movw	r30, r22
    1e52:	23 81       	ldd	r18, Z+3	; 0x03
    1e54:	21 fd       	sbrc	r18, 1
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <fputc+0x16>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	2c c0       	rjmp	.+88     	; 0x1eb6 <fputc+0x6e>
    1e5e:	22 ff       	sbrs	r18, 2
    1e60:	16 c0       	rjmp	.+44     	; 0x1e8e <fputc+0x46>
    1e62:	46 81       	ldd	r20, Z+6	; 0x06
    1e64:	57 81       	ldd	r21, Z+7	; 0x07
    1e66:	24 81       	ldd	r18, Z+4	; 0x04
    1e68:	35 81       	ldd	r19, Z+5	; 0x05
    1e6a:	42 17       	cp	r20, r18
    1e6c:	53 07       	cpc	r21, r19
    1e6e:	44 f4       	brge	.+16     	; 0x1e80 <fputc+0x38>
    1e70:	a0 81       	ld	r26, Z
    1e72:	b1 81       	ldd	r27, Z+1	; 0x01
    1e74:	9d 01       	movw	r18, r26
    1e76:	2f 5f       	subi	r18, 0xFF	; 255
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	31 83       	std	Z+1, r19	; 0x01
    1e7c:	20 83       	st	Z, r18
    1e7e:	8c 93       	st	X, r24
    1e80:	26 81       	ldd	r18, Z+6	; 0x06
    1e82:	37 81       	ldd	r19, Z+7	; 0x07
    1e84:	2f 5f       	subi	r18, 0xFF	; 255
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	37 83       	std	Z+7, r19	; 0x07
    1e8a:	26 83       	std	Z+6, r18	; 0x06
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <fputc+0x6e>
    1e8e:	8b 01       	movw	r16, r22
    1e90:	ec 01       	movw	r28, r24
    1e92:	fb 01       	movw	r30, r22
    1e94:	00 84       	ldd	r0, Z+8	; 0x08
    1e96:	f1 85       	ldd	r31, Z+9	; 0x09
    1e98:	e0 2d       	mov	r30, r0
    1e9a:	09 95       	icall
    1e9c:	89 2b       	or	r24, r25
    1e9e:	e1 f6       	brne	.-72     	; 0x1e58 <fputc+0x10>
    1ea0:	d8 01       	movw	r26, r16
    1ea2:	16 96       	adiw	r26, 0x06	; 6
    1ea4:	8d 91       	ld	r24, X+
    1ea6:	9c 91       	ld	r25, X
    1ea8:	17 97       	sbiw	r26, 0x07	; 7
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	17 96       	adiw	r26, 0x07	; 7
    1eae:	9c 93       	st	X, r25
    1eb0:	8e 93       	st	-X, r24
    1eb2:	16 97       	sbiw	r26, 0x06	; 6
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	08 95       	ret

00001ec0 <__ultoa_invert>:
    1ec0:	fa 01       	movw	r30, r20
    1ec2:	aa 27       	eor	r26, r26
    1ec4:	28 30       	cpi	r18, 0x08	; 8
    1ec6:	51 f1       	breq	.+84     	; 0x1f1c <__ultoa_invert+0x5c>
    1ec8:	20 31       	cpi	r18, 0x10	; 16
    1eca:	81 f1       	breq	.+96     	; 0x1f2c <__ultoa_invert+0x6c>
    1ecc:	e8 94       	clt
    1ece:	6f 93       	push	r22
    1ed0:	6e 7f       	andi	r22, 0xFE	; 254
    1ed2:	6e 5f       	subi	r22, 0xFE	; 254
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	af 4f       	sbci	r26, 0xFF	; 255
    1edc:	b1 e0       	ldi	r27, 0x01	; 1
    1ede:	3e d0       	rcall	.+124    	; 0x1f5c <__ultoa_invert+0x9c>
    1ee0:	b4 e0       	ldi	r27, 0x04	; 4
    1ee2:	3c d0       	rcall	.+120    	; 0x1f5c <__ultoa_invert+0x9c>
    1ee4:	67 0f       	add	r22, r23
    1ee6:	78 1f       	adc	r23, r24
    1ee8:	89 1f       	adc	r24, r25
    1eea:	9a 1f       	adc	r25, r26
    1eec:	a1 1d       	adc	r26, r1
    1eee:	68 0f       	add	r22, r24
    1ef0:	79 1f       	adc	r23, r25
    1ef2:	8a 1f       	adc	r24, r26
    1ef4:	91 1d       	adc	r25, r1
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	6a 0f       	add	r22, r26
    1efa:	71 1d       	adc	r23, r1
    1efc:	81 1d       	adc	r24, r1
    1efe:	91 1d       	adc	r25, r1
    1f00:	a1 1d       	adc	r26, r1
    1f02:	20 d0       	rcall	.+64     	; 0x1f44 <__ultoa_invert+0x84>
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <__ultoa_invert+0x48>
    1f06:	68 94       	set
    1f08:	3f 91       	pop	r19
    1f0a:	2a e0       	ldi	r18, 0x0A	; 10
    1f0c:	26 9f       	mul	r18, r22
    1f0e:	11 24       	eor	r1, r1
    1f10:	30 19       	sub	r19, r0
    1f12:	30 5d       	subi	r19, 0xD0	; 208
    1f14:	31 93       	st	Z+, r19
    1f16:	de f6       	brtc	.-74     	; 0x1ece <__ultoa_invert+0xe>
    1f18:	cf 01       	movw	r24, r30
    1f1a:	08 95       	ret
    1f1c:	46 2f       	mov	r20, r22
    1f1e:	47 70       	andi	r20, 0x07	; 7
    1f20:	40 5d       	subi	r20, 0xD0	; 208
    1f22:	41 93       	st	Z+, r20
    1f24:	b3 e0       	ldi	r27, 0x03	; 3
    1f26:	0f d0       	rcall	.+30     	; 0x1f46 <__ultoa_invert+0x86>
    1f28:	c9 f7       	brne	.-14     	; 0x1f1c <__ultoa_invert+0x5c>
    1f2a:	f6 cf       	rjmp	.-20     	; 0x1f18 <__ultoa_invert+0x58>
    1f2c:	46 2f       	mov	r20, r22
    1f2e:	4f 70       	andi	r20, 0x0F	; 15
    1f30:	40 5d       	subi	r20, 0xD0	; 208
    1f32:	4a 33       	cpi	r20, 0x3A	; 58
    1f34:	18 f0       	brcs	.+6      	; 0x1f3c <__ultoa_invert+0x7c>
    1f36:	49 5d       	subi	r20, 0xD9	; 217
    1f38:	31 fd       	sbrc	r19, 1
    1f3a:	40 52       	subi	r20, 0x20	; 32
    1f3c:	41 93       	st	Z+, r20
    1f3e:	02 d0       	rcall	.+4      	; 0x1f44 <__ultoa_invert+0x84>
    1f40:	a9 f7       	brne	.-22     	; 0x1f2c <__ultoa_invert+0x6c>
    1f42:	ea cf       	rjmp	.-44     	; 0x1f18 <__ultoa_invert+0x58>
    1f44:	b4 e0       	ldi	r27, 0x04	; 4
    1f46:	a6 95       	lsr	r26
    1f48:	97 95       	ror	r25
    1f4a:	87 95       	ror	r24
    1f4c:	77 95       	ror	r23
    1f4e:	67 95       	ror	r22
    1f50:	ba 95       	dec	r27
    1f52:	c9 f7       	brne	.-14     	; 0x1f46 <__ultoa_invert+0x86>
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	61 05       	cpc	r22, r1
    1f58:	71 05       	cpc	r23, r1
    1f5a:	08 95       	ret
    1f5c:	9b 01       	movw	r18, r22
    1f5e:	ac 01       	movw	r20, r24
    1f60:	0a 2e       	mov	r0, r26
    1f62:	06 94       	lsr	r0
    1f64:	57 95       	ror	r21
    1f66:	47 95       	ror	r20
    1f68:	37 95       	ror	r19
    1f6a:	27 95       	ror	r18
    1f6c:	ba 95       	dec	r27
    1f6e:	c9 f7       	brne	.-14     	; 0x1f62 <__ultoa_invert+0xa2>
    1f70:	62 0f       	add	r22, r18
    1f72:	73 1f       	adc	r23, r19
    1f74:	84 1f       	adc	r24, r20
    1f76:	95 1f       	adc	r25, r21
    1f78:	a0 1d       	adc	r26, r0
    1f7a:	08 95       	ret

00001f7c <__prologue_saves__>:
    1f7c:	2f 92       	push	r2
    1f7e:	3f 92       	push	r3
    1f80:	4f 92       	push	r4
    1f82:	5f 92       	push	r5
    1f84:	6f 92       	push	r6
    1f86:	7f 92       	push	r7
    1f88:	8f 92       	push	r8
    1f8a:	9f 92       	push	r9
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	ca 1b       	sub	r28, r26
    1fa6:	db 0b       	sbc	r29, r27
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	09 94       	ijmp

00001fb4 <__epilogue_restores__>:
    1fb4:	2a 88       	ldd	r2, Y+18	; 0x12
    1fb6:	39 88       	ldd	r3, Y+17	; 0x11
    1fb8:	48 88       	ldd	r4, Y+16	; 0x10
    1fba:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fbc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fbe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fc0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fc2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fc4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fc6:	b9 84       	ldd	r11, Y+9	; 0x09
    1fc8:	c8 84       	ldd	r12, Y+8	; 0x08
    1fca:	df 80       	ldd	r13, Y+7	; 0x07
    1fcc:	ee 80       	ldd	r14, Y+6	; 0x06
    1fce:	fd 80       	ldd	r15, Y+5	; 0x05
    1fd0:	0c 81       	ldd	r16, Y+4	; 0x04
    1fd2:	1b 81       	ldd	r17, Y+3	; 0x03
    1fd4:	aa 81       	ldd	r26, Y+2	; 0x02
    1fd6:	b9 81       	ldd	r27, Y+1	; 0x01
    1fd8:	ce 0f       	add	r28, r30
    1fda:	d1 1d       	adc	r29, r1
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	ed 01       	movw	r28, r26
    1fe8:	08 95       	ret

00001fea <_exit>:
    1fea:	f8 94       	cli

00001fec <__stop_program>:
    1fec:	ff cf       	rjmp	.-2      	; 0x1fec <__stop_program>
