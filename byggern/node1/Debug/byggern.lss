
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00001faa  0000203e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000197  00800268  00800268  000021a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000400d  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a80  00000000  00000000  000065bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ad6  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000074c  00000000  00000000  00009b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b61  00000000  00000000  0000a260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001424  00000000  00000000  0000adc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000c1e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <this_init+0xc>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	ea ea       	ldi	r30, 0xAA	; 170
     3aa:	ff e1       	ldi	r31, 0x1F	; 31
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a8 36       	cpi	r26, 0x68	; 104
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	a8 e6       	ldi	r26, 0x68	; 104
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	af 3f       	cpi	r26, 0xFF	; 255
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
     3cc:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1001>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1001>
     3e6:	08 95       	ret

000003e8 <main>:



int main(void)
//p.23 for can read instructions
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	2b 97       	sbiw	r28, 0x0b	; 11
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     3fc:	0e 94 51 07 	call	0xea2	; 0xea2 <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     400:	87 e5       	ldi	r24, 0x57	; 87
     402:	95 e0       	ldi	r25, 0x05	; 5
     404:	9a 87       	std	Y+10, r25	; 0x0a
     406:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     40c:	8d e0       	ldi	r24, 0x0D	; 13
     40e:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     410:	86 e1       	ldi	r24, 0x16	; 22
     412:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     414:	81 e2       	ldi	r24, 0x21	; 33
     416:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     418:	86 e0       	ldi	r24, 0x06	; 6
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	9f 93       	push	r25
     41e:	8f 93       	push	r24
     420:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
	printf("---------------------------------------\n\r");
     424:	89 e1       	ldi	r24, 0x19	; 25
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	9f 93       	push	r25
     42a:	8f 93       	push	r24
     42c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     430:	2f ef       	ldi	r18, 0xFF	; 255
     432:	8f e7       	ldi	r24, 0x7F	; 127
     434:	97 e0       	ldi	r25, 0x07	; 7
     436:	21 50       	subi	r18, 0x01	; 1
     438:	80 40       	sbci	r24, 0x00	; 0
     43a:	90 40       	sbci	r25, 0x00	; 0
     43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     440:	00 00       	nop
	_delay_ms(500);
	
	CAN_controller_setMode(MODE_NORMAL);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 ad 03 	call	0x75a	; 0x75a <CAN_controller_setMode>
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
	while (1) {
		//
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		
		switch(currentMenu.currentMenuItem->nodeID){
     450:	0f e6       	ldi	r16, 0x6F	; 111
     452:	12 e0       	ldi	r17, 0x02	; 2

	//test_SRAM();            
	while (1) {
		//
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     454:	0e 94 7f 04 	call	0x8fe	; 0x8fe <sleep_now>
		
		switch(currentMenu.currentMenuItem->nodeID){
     458:	d8 01       	movw	r26, r16
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	80 81       	ld	r24, Z
     460:	84 30       	cpi	r24, 0x04	; 4
     462:	c1 f7       	brne	.-16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			case HIGH_SCORE:
				break;
			case MUSIC:
				break;
			case GAME_1:
				game_play(1);
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <game_play>
				break;
     46c:	f3 cf       	rjmp	.-26     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

0000046e <CAN_transmit_message>:
	}
	
	
	
	
}
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	8c 01       	movw	r16, r24
     476:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     47a:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	63 e0       	ldi	r22, 0x03	; 3
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	0e 94 09 0b 	call	0x1612	; 0x1612 <__divmodhi4>
     488:	28 2f       	mov	r18, r24
     48a:	39 2f       	mov	r19, r25
     48c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end>
     490:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <__data_end+0x1>
     494:	21 30       	cpi	r18, 0x01	; 1
     496:	31 05       	cpc	r19, r1
     498:	01 f1       	breq	.+64     	; 0x4da <CAN_transmit_message+0x6c>
     49a:	22 30       	cpi	r18, 0x02	; 2
     49c:	31 05       	cpc	r19, r1
     49e:	b9 f1       	breq	.+110    	; 0x50e <__stack+0xf>
     4a0:	23 2b       	or	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <CAN_transmit_message+0x38>
     4a4:	4d c0       	rjmp	.+154    	; 0x540 <__stack+0x41>
     4a6:	f8 01       	movw	r30, r16
     4a8:	40 85       	ldd	r20, Z+8	; 0x08
     4aa:	51 85       	ldd	r21, Z+9	; 0x09
     4ac:	42 95       	swap	r20
     4ae:	44 0f       	add	r20, r20
     4b0:	40 7e       	andi	r20, 0xE0	; 224
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	62 e3       	ldi	r22, 0x32	; 50
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	80 ee       	ldi	r24, 0xE0	; 224
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     4c0:	f8 01       	movw	r30, r16
     4c2:	60 85       	ldd	r22, Z+8	; 0x08
     4c4:	71 85       	ldd	r23, Z+9	; 0x09
     4c6:	76 95       	lsr	r23
     4c8:	67 95       	ror	r22
     4ca:	76 95       	lsr	r23
     4cc:	67 95       	ror	r22
     4ce:	76 95       	lsr	r23
     4d0:	67 95       	ror	r22
     4d2:	81 e3       	ldi	r24, 0x31	; 49
     4d4:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     4d8:	33 c0       	rjmp	.+102    	; 0x540 <__stack+0x41>
     4da:	f8 01       	movw	r30, r16
     4dc:	40 85       	ldd	r20, Z+8	; 0x08
     4de:	51 85       	ldd	r21, Z+9	; 0x09
     4e0:	42 95       	swap	r20
     4e2:	44 0f       	add	r20, r20
     4e4:	40 7e       	andi	r20, 0xE0	; 224
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	62 e4       	ldi	r22, 0x42	; 66
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 ee       	ldi	r24, 0xE0	; 224
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     4f4:	f8 01       	movw	r30, r16
     4f6:	60 85       	ldd	r22, Z+8	; 0x08
     4f8:	71 85       	ldd	r23, Z+9	; 0x09
     4fa:	76 95       	lsr	r23
     4fc:	67 95       	ror	r22
     4fe:	76 95       	lsr	r23
     500:	67 95       	ror	r22
     502:	76 95       	lsr	r23
     504:	67 95       	ror	r22
     506:	81 e4       	ldi	r24, 0x41	; 65
     508:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     50c:	19 c0       	rjmp	.+50     	; 0x540 <__stack+0x41>
     50e:	f8 01       	movw	r30, r16
     510:	40 85       	ldd	r20, Z+8	; 0x08
     512:	51 85       	ldd	r21, Z+9	; 0x09
     514:	42 95       	swap	r20
     516:	44 0f       	add	r20, r20
     518:	40 7e       	andi	r20, 0xE0	; 224
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	62 e5       	ldi	r22, 0x52	; 82
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 ee       	ldi	r24, 0xE0	; 224
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     528:	f8 01       	movw	r30, r16
     52a:	60 85       	ldd	r22, Z+8	; 0x08
     52c:	71 85       	ldd	r23, Z+9	; 0x09
     52e:	76 95       	lsr	r23
     530:	67 95       	ror	r22
     532:	76 95       	lsr	r23
     534:	67 95       	ror	r22
     536:	76 95       	lsr	r23
     538:	67 95       	ror	r22
     53a:	81 e5       	ldi	r24, 0x51	; 81
     53c:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     540:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     544:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	91 05       	cpc	r25, r1
     54c:	79 f0       	breq	.+30     	; 0x56c <__stack+0x6d>
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	91 05       	cpc	r25, r1
     552:	b1 f0       	breq	.+44     	; 0x580 <__stack+0x81>
     554:	89 2b       	or	r24, r25
     556:	e9 f4       	brne	.+58     	; 0x592 <__stack+0x93>
     558:	f8 01       	movw	r30, r16
     55a:	42 85       	ldd	r20, Z+10	; 0x0a
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	65 e3       	ldi	r22, 0x35	; 53
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	8f e0       	ldi	r24, 0x0F	; 15
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     56a:	13 c0       	rjmp	.+38     	; 0x592 <__stack+0x93>
     56c:	f8 01       	movw	r30, r16
     56e:	42 85       	ldd	r20, Z+10	; 0x0a
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	65 e4       	ldi	r22, 0x45	; 69
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8f e0       	ldi	r24, 0x0F	; 15
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     57e:	09 c0       	rjmp	.+18     	; 0x592 <__stack+0x93>
     580:	f8 01       	movw	r30, r16
     582:	42 85       	ldd	r20, Z+10	; 0x0a
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	65 e5       	ldi	r22, 0x55	; 85
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	8f e0       	ldi	r24, 0x0F	; 15
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     592:	f8 01       	movw	r30, r16
     594:	82 85       	ldd	r24, Z+10	; 0x0a
     596:	88 23       	and	r24, r24
     598:	61 f1       	breq	.+88     	; 0x5f2 <__stack+0xf3>
     59a:	c0 e0       	ldi	r28, 0x00	; 0
     59c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     5a0:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	91 05       	cpc	r25, r1
     5a8:	71 f0       	breq	.+28     	; 0x5c6 <__stack+0xc7>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	91 05       	cpc	r25, r1
     5ae:	a1 f0       	breq	.+40     	; 0x5d8 <__stack+0xd9>
     5b0:	89 2b       	or	r24, r25
     5b2:	d1 f4       	brne	.+52     	; 0x5e8 <__stack+0xe9>
     5b4:	f8 01       	movw	r30, r16
     5b6:	ec 0f       	add	r30, r28
     5b8:	f1 1d       	adc	r31, r1
     5ba:	60 81       	ld	r22, Z
     5bc:	86 e3       	ldi	r24, 0x36	; 54
     5be:	8c 0f       	add	r24, r28
     5c0:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <__stack+0xe9>
     5c6:	f8 01       	movw	r30, r16
     5c8:	ec 0f       	add	r30, r28
     5ca:	f1 1d       	adc	r31, r1
     5cc:	60 81       	ld	r22, Z
     5ce:	86 e4       	ldi	r24, 0x46	; 70
     5d0:	8c 0f       	add	r24, r28
     5d2:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <__stack+0xe9>
     5d8:	f8 01       	movw	r30, r16
     5da:	ec 0f       	add	r30, r28
     5dc:	f1 1d       	adc	r31, r1
     5de:	60 81       	ld	r22, Z
     5e0:	86 e5       	ldi	r24, 0x56	; 86
     5e2:	8c 0f       	add	r24, r28
     5e4:	0e 94 46 03 	call	0x68c	; 0x68c <CAN_controller_write>
     5e8:	cf 5f       	subi	r28, 0xFF	; 255
     5ea:	f8 01       	movw	r30, r16
     5ec:	82 85       	ldd	r24, Z+10	; 0x0a
     5ee:	8c 13       	cpse	r24, r28
     5f0:	d5 cf       	rjmp	.-86     	; 0x59c <__stack+0x9d>
     5f2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     5f6:	0e 94 90 03 	call	0x720	; 0x720 <CAN_controller_RTS>
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	08 95       	ret

00000602 <CAN_sendInputData>:

void CAN_sendInputData() {
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	2b 97       	sbiw	r28, 0x0b	; 11
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	9a 87       	std	Y+10, r25	; 0x0a
     61c:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     61e:	86 e0       	ldi	r24, 0x06	; 6
     620:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     622:	e5 e7       	ldi	r30, 0x75	; 117
     624:	f2 e0       	ldi	r31, 0x02	; 2
     626:	80 81       	ld	r24, Z
     628:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     62a:	81 81       	ldd	r24, Z+1	; 0x01
     62c:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     62e:	e3 e7       	ldi	r30, 0x73	; 115
     630:	f2 e0       	ldi	r31, 0x02	; 2
     632:	80 81       	ld	r24, Z
     634:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     636:	81 81       	ldd	r24, Z+1	; 0x01
     638:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     63a:	eb e6       	ldi	r30, 0x6B	; 107
     63c:	f2 e0       	ldi	r31, 0x02	; 2
     63e:	80 81       	ld	r24, Z
     640:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     642:	81 81       	ldd	r24, Z+1	; 0x01
     644:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 37 02 	call	0x46e	; 0x46e <CAN_transmit_message>
     64e:	2b 96       	adiw	r28, 0x0b	; 11
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     660:	cf 93       	push	r28
     662:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
	SPI_masterWrite(addr);
     672:	8c 2f       	mov	r24, r28
     674:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     678:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_masterRead>
     67c:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	84 e0       	ldi	r24, 0x04	; 4
     682:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
	
	return data;
}
     686:	8c 2f       	mov	r24, r28
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	d8 2f       	mov	r29, r24
     692:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	84 e0       	ldi	r24, 0x04	; 4
     698:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
	SPI_masterWrite(addr);
     6a2:	8d 2f       	mov	r24, r29
     6a4:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
	SPI_masterWrite(data);
     6a8:	8c 2f       	mov	r24, r28
     6aa:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
	
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	d8 2f       	mov	r29, r24
     6c4:	16 2f       	mov	r17, r22
     6c6:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     6d0:	85 e0       	ldi	r24, 0x05	; 5
     6d2:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
		SPI_masterWrite(addr);
     6d6:	81 2f       	mov	r24, r17
     6d8:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
		SPI_masterWrite(mask);
     6dc:	8d 2f       	mov	r24, r29
     6de:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
		SPI_masterWrite(data);
     6e2:	8c 2f       	mov	r24, r28
     6e4:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>

}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	08 95       	ret

000006f8 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
	printf("Before spi write");
     700:	83 e4       	ldi	r24, 0x43	; 67
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
	SPI_masterWrite(MCP_RESET);
     70c:	80 ec       	ldi	r24, 0xC0	; 192
     70e:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
}
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	08 95       	ret

00000720 <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     720:	cf 93       	push	r28
     722:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
	switch (buffer) {
     72c:	c1 30       	cpi	r28, 0x01	; 1
     72e:	41 f0       	breq	.+16     	; 0x740 <CAN_controller_RTS+0x20>
     730:	18 f0       	brcs	.+6      	; 0x738 <CAN_controller_RTS+0x18>
     732:	c2 30       	cpi	r28, 0x02	; 2
     734:	49 f0       	breq	.+18     	; 0x748 <CAN_controller_RTS+0x28>
     736:	0b c0       	rjmp	.+22     	; 0x74e <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     738:	81 e8       	ldi	r24, 0x81	; 129
     73a:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
			break;
     73e:	07 c0       	rjmp	.+14     	; 0x74e <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     740:	82 e8       	ldi	r24, 0x82	; 130
     742:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
			break;
     746:	03 c0       	rjmp	.+6      	; 0x74e <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     748:	84 e8       	ldi	r24, 0x84	; 132
     74a:	0e 94 94 07 	call	0xf28	; 0xf28 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	84 e0       	ldi	r24, 0x04	; 4
     752:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SPI_setChipSelect>
}
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     760:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     764:	8e e0       	ldi	r24, 0x0E	; 14
     766:	0e 94 30 03 	call	0x660	; 0x660 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     76a:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     76c:	80 38       	cpi	r24, 0x80	; 128
     76e:	69 f0       	breq	.+26     	; 0x78a <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     770:	1f 92       	push	r1
     772:	8f 93       	push	r24
     774:	84 e5       	ldi	r24, 0x54	; 84
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
		return;
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	38 c0       	rjmp	.+112    	; 0x7fa <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     78a:	4c 2f       	mov	r20, r28
     78c:	4c 60       	ori	r20, 0x0C	; 12
     78e:	6f e0       	ldi	r22, 0x0F	; 15
     790:	8e ee       	ldi	r24, 0xEE	; 238
     792:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	6b e2       	ldi	r22, 0x2B	; 43
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     7a0:	40 e6       	ldi	r20, 0x60	; 96
     7a2:	60 e6       	ldi	r22, 0x60	; 96
     7a4:	80 e6       	ldi	r24, 0x60	; 96
     7a6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CAN_controller_bitModify>
     7aa:	2f ef       	ldi	r18, 0xFF	; 255
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	21 50       	subi	r18, 0x01	; 1
     7b2:	80 40       	sbci	r24, 0x00	; 0
     7b4:	90 40       	sbci	r25, 0x00	; 0
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <CAN_controller_setMode+0x56>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <CAN_controller_setMode+0x60>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     7bc:	8e e0       	ldi	r24, 0x0E	; 14
     7be:	0e 94 30 03 	call	0x660	; 0x660 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     7c2:	d8 2f       	mov	r29, r24
     7c4:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     7c6:	cd 17       	cp	r28, r29
     7c8:	61 f0       	breq	.+24     	; 0x7e2 <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     7ca:	1f 92       	push	r1
     7cc:	df 93       	push	r29
     7ce:	8f e6       	ldi	r24, 0x6F	; 111
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     7e2:	1f 92       	push	r1
     7e4:	df 93       	push	r29
     7e6:	8f e8       	ldi	r24, 0x8F	; 143
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     800:	0e 94 8b 07 	call	0xf16	; 0xf16 <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     804:	80 e4       	ldi	r24, 0x40	; 64
     806:	0e 94 ad 03 	call	0x75a	; 0x75a <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     80a:	8b b7       	in	r24, 0x3b	; 59
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     810:	85 b7       	in	r24, 0x35	; 53
     812:	82 60       	ori	r24, 0x02	; 2
     814:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     816:	85 b7       	in	r24, 0x35	; 53
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     81c:	81 b3       	in	r24, 0x11	; 17
     81e:	84 70       	andi	r24, 0x04	; 4
     820:	81 bb       	out	0x11, r24	; 17
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	21 50       	subi	r18, 0x01	; 1
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	90 40       	sbci	r25, 0x00	; 0
     82e:	e1 f7       	brne	.-8      	; 0x828 <CAN_controller_init+0x28>
     830:	00 c0       	rjmp	.+0      	; 0x832 <CAN_controller_init+0x32>
     832:	00 c0       	rjmp	.+0      	; 0x834 <CAN_controller_init+0x34>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     834:	8e e9       	ldi	r24, 0x9E	; 158
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     840:	8e e0       	ldi	r24, 0x0E	; 14
     842:	0e 94 30 03 	call	0x660	; 0x660 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     846:	1f 92       	push	r1
     848:	8f 93       	push	r24
     84a:	87 eb       	ldi	r24, 0xB7	; 183
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>

}
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	08 95       	ret

00000864 <game_init>:
		//Clear interrupt
		CAN_clearInterrupt();
		//Update gamedata
		gameData.score = received_message.data[0];
		gameData.playtime = received_message.data[1];
		sei();
     864:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <gameActive>
     868:	08 95       	ret

0000086a <game_newgame>:
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <gameActive>
     870:	e3 e8       	ldi	r30, 0x83	; 131
     872:	f2 e0       	ldi	r31, 0x02	; 2
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	80 83       	st	Z, r24
     878:	12 82       	std	Z+2, r1	; 0x02
     87a:	88 e7       	ldi	r24, 0x78	; 120
     87c:	81 83       	std	Z+1, r24	; 0x01
     87e:	08 95       	ret

00000880 <game_updateOled>:
	}
	
}

void game_updateOled()
{
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	00 d0       	rcall	.+0      	; 0x886 <game_updateOled+0x6>
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
	//Print the game name
	printf("Game oled");
     88a:	83 ed       	ldi	r24, 0xD3	; 211
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	9f 93       	push	r25
     890:	8f 93       	push	r24
     892:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
	oled_reset();
     896:	0e 94 cd 06 	call	0xd9a	; 0xd9a <oled_reset>
	oled_home();
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     89e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <currentMenu>
     8a2:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <currentMenu+0x1>
     8a6:	02 96       	adiw	r24, 0x02	; 2
     8a8:	0e 94 29 07 	call	0xe52	; 0xe52 <oled_print>
	oled_gotoLine(3);
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 25 07 	call	0xe4a	; 0xe4a <oled_gotoLine>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8b4:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <gameData>
     8b8:	4a e0       	ldi	r20, 0x0A	; 10
     8ba:	be 01       	movw	r22, r28
     8bc:	6f 5f       	subi	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 31 0b 	call	0x1662	; 0x1662 <__itoa_ncheck>
	char score_string[2];
	itoa(gameData.score,score_string,10);
	oled_print();
     8c6:	0e 94 29 07 	call	0xe52	; 0xe52 <oled_print>
}
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <game_play>:

void game_play(uint8_t gameID)
{
	if(gameActive==0)
     8d8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <gameActive>
     8dc:	81 11       	cpse	r24, r1
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <game_play+0xc>
	{
		game_newgame();	
     8e0:	0e 94 35 04 	call	0x86a	; 0x86a <game_newgame>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     8e4:	0e 94 01 03 	call	0x602	; 0x602 <CAN_sendInputData>
     8e8:	08 95       	ret

000008ea <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     8ea:	85 b7       	in	r24, 0x35	; 53
     8ec:	8f 7e       	andi	r24, 0xEF	; 239
     8ee:	85 bf       	out	0x35, r24	; 53
     8f0:	84 b7       	in	r24, 0x34	; 52
     8f2:	8f 7d       	andi	r24, 0xDF	; 223
     8f4:	84 bf       	out	0x34, r24	; 52
     8f6:	86 b7       	in	r24, 0x36	; 54
     8f8:	8f 77       	andi	r24, 0x7F	; 127
     8fa:	86 bf       	out	0x36, r24	; 54
     8fc:	08 95       	ret

000008fe <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     8fe:	88 b1       	in	r24, 0x08	; 8
     900:	88 68       	ori	r24, 0x88	; 136
     902:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
     904:	85 b7       	in	r24, 0x35	; 53
     906:	80 62       	ori	r24, 0x20	; 32
     908:	85 bf       	out	0x35, r24	; 53
     90a:	88 95       	sleep
     90c:	85 b7       	in	r24, 0x35	; 53
     90e:	8f 7d       	andi	r24, 0xDF	; 223
     910:	85 bf       	out	0x35, r24	; 53
     912:	08 95       	ret

00000914 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     91a:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     924:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <joystickOffsetY>
     928:	08 95       	ret

0000092a <joystick_readPosition>:
}
void joystick_readPosition() {
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     93c:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     944:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     946:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <joystickOffsetX>
     94a:	c6 17       	cp	r28, r22
     94c:	80 f4       	brcc	.+32     	; 0x96e <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	2c 2f       	mov	r18, r28
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	26 1b       	sub	r18, r22
     956:	37 0b       	sbc	r19, r23
     958:	44 e6       	ldi	r20, 0x64	; 100
     95a:	42 9f       	mul	r20, r18
     95c:	c0 01       	movw	r24, r0
     95e:	43 9f       	mul	r20, r19
     960:	90 0d       	add	r25, r0
     962:	11 24       	eor	r1, r1
     964:	0e 94 09 0b 	call	0x1612	; 0x1612 <__divmodhi4>
     968:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <joystick_pos>
     96c:	14 c0       	rjmp	.+40     	; 0x996 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     96e:	46 2f       	mov	r20, r22
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	2c 2f       	mov	r18, r28
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	24 1b       	sub	r18, r20
     978:	35 0b       	sbc	r19, r21
     97a:	64 e6       	ldi	r22, 0x64	; 100
     97c:	62 9f       	mul	r22, r18
     97e:	c0 01       	movw	r24, r0
     980:	63 9f       	mul	r22, r19
     982:	90 0d       	add	r25, r0
     984:	11 24       	eor	r1, r1
     986:	6f ef       	ldi	r22, 0xFF	; 255
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	64 1b       	sub	r22, r20
     98c:	75 0b       	sbc	r23, r21
     98e:	0e 94 09 0b 	call	0x1612	; 0x1612 <__divmodhi4>
     992:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
     996:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <joystickOffsetY>
     99a:	e2 17       	cp	r30, r18
     99c:	88 f4       	brcc	.+34     	; 0x9c0 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     99e:	62 2f       	mov	r22, r18
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	4e 2f       	mov	r20, r30
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	46 1b       	sub	r20, r22
     9a8:	57 0b       	sbc	r21, r23
     9aa:	24 e6       	ldi	r18, 0x64	; 100
     9ac:	24 9f       	mul	r18, r20
     9ae:	c0 01       	movw	r24, r0
     9b0:	25 9f       	mul	r18, r21
     9b2:	90 0d       	add	r25, r0
     9b4:	11 24       	eor	r1, r1
     9b6:	0e 94 09 0b 	call	0x1612	; 0x1612 <__divmodhi4>
     9ba:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <joystick_pos+0x1>
     9be:	13 c0       	rjmp	.+38     	; 0x9e6 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	4e 2f       	mov	r20, r30
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	42 1b       	sub	r20, r18
     9c8:	53 0b       	sbc	r21, r19
     9ca:	64 e6       	ldi	r22, 0x64	; 100
     9cc:	64 9f       	mul	r22, r20
     9ce:	c0 01       	movw	r24, r0
     9d0:	65 9f       	mul	r22, r21
     9d2:	90 0d       	add	r25, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	6f ef       	ldi	r22, 0xFF	; 255
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	62 1b       	sub	r22, r18
     9dc:	73 0b       	sbc	r23, r19
     9de:	0e 94 09 0b 	call	0x1612	; 0x1612 <__divmodhi4>
     9e2:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     9e6:	cb e6       	ldi	r28, 0x6B	; 107
     9e8:	d2 e0       	ldi	r29, 0x02	; 2
     9ea:	68 81       	ld	r22, Y
     9ec:	06 2e       	mov	r0, r22
     9ee:	00 0c       	add	r0, r0
     9f0:	77 0b       	sbc	r23, r23
     9f2:	88 0b       	sbc	r24, r24
     9f4:	99 0b       	sbc	r25, r25
     9f6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__floatsisf>
     9fa:	6b 01       	movw	r12, r22
     9fc:	7c 01       	movw	r14, r24
     9fe:	69 81       	ldd	r22, Y+1	; 0x01
     a00:	06 2e       	mov	r0, r22
     a02:	00 0c       	add	r0, r0
     a04:	77 0b       	sbc	r23, r23
     a06:	88 0b       	sbc	r24, r24
     a08:	99 0b       	sbc	r25, r25
     a0a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__floatsisf>
     a0e:	a7 01       	movw	r20, r14
     a10:	96 01       	movw	r18, r12
     a12:	0e 94 67 08 	call	0x10ce	; 0x10ce <atan2>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	44 eb       	ldi	r20, 0xB4	; 180
     a1c:	53 e4       	ldi	r21, 0x43	; 67
     a1e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__mulsf3>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	5f e3       	ldi	r21, 0x3F	; 63
     a2a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__mulsf3>
     a2e:	23 ec       	ldi	r18, 0xC3	; 195
     a30:	35 ef       	ldi	r19, 0xF5	; 245
     a32:	48 e4       	ldi	r20, 0x48	; 72
     a34:	50 e4       	ldi	r21, 0x40	; 64
     a36:	0e 94 c6 08 	call	0x118c	; 0x118c <__divsf3>
     a3a:	0e 94 38 09 	call	0x1270	; 0x1270 <__fixsfsi>
     a3e:	7b 83       	std	Y+3, r23	; 0x03
     a40:	6a 83       	std	Y+2, r22	; 0x02
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     a50:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     a52:	80 81       	ld	r24, Z
     a54:	94 e0       	ldi	r25, 0x04	; 4
     a56:	98 0f       	add	r25, r24
     a58:	99 30       	cpi	r25, 0x09	; 9
     a5a:	20 f4       	brcc	.+8      	; 0xa64 <joystick_getDirection+0x14>
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	9c 5f       	subi	r25, 0xFC	; 252
     a60:	99 30       	cpi	r25, 0x09	; 9
     a62:	90 f0       	brcs	.+36     	; 0xa88 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     a64:	85 30       	cpi	r24, 0x05	; 5
     a66:	2c f0       	brlt	.+10     	; 0xa72 <joystick_getDirection+0x22>
     a68:	81 81       	ldd	r24, Z+1	; 0x01
     a6a:	8f 5c       	subi	r24, 0xCF	; 207
     a6c:	83 36       	cpi	r24, 0x63	; 99
     a6e:	38 f4       	brcc	.+14     	; 0xa7e <joystick_getDirection+0x2e>
     a70:	0d c0       	rjmp	.+26     	; 0xa8c <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     a72:	8c 3f       	cpi	r24, 0xFC	; 252
     a74:	24 f4       	brge	.+8      	; 0xa7e <joystick_getDirection+0x2e>
     a76:	81 81       	ldd	r24, Z+1	; 0x01
     a78:	8f 5c       	subi	r24, 0xCF	; 207
     a7a:	83 36       	cpi	r24, 0x63	; 99
     a7c:	48 f0       	brcs	.+18     	; 0xa90 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     a7e:	81 81       	ldd	r24, Z+1	; 0x01
     a80:	8c 3f       	cpi	r24, 0xFC	; 252
     a82:	44 f0       	brlt	.+16     	; 0xa94 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     a94:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     a96:	08 95       	ret

00000a98 <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     a98:	0e 94 28 05 	call	0xa50	; 0xa50 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     a9c:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <currentMenu+0x3>
     aa0:	94 30       	cpi	r25, 0x04	; 4
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <navigateMenu+0xe>
     aa4:	5c c0       	rjmp	.+184    	; 0xb5e <navigateMenu+0xc6>
			switch (dir) {
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	e1 f1       	breq	.+120    	; 0xb22 <navigateMenu+0x8a>
     aaa:	60 f1       	brcs	.+88     	; 0xb04 <navigateMenu+0x6c>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	c9 f0       	breq	.+50     	; 0xae2 <navigateMenu+0x4a>
     ab0:	83 30       	cpi	r24, 0x03	; 3
     ab2:	09 f0       	breq	.+2      	; 0xab6 <navigateMenu+0x1e>
     ab4:	54 c0       	rjmp	.+168    	; 0xb5e <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     ab6:	ef e6       	ldi	r30, 0x6F	; 111
     ab8:	f2 e0       	ldi	r31, 0x02	; 2
     aba:	92 81       	ldd	r25, Z+2	; 0x02
     abc:	49 2f       	mov	r20, r25
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	01 90       	ld	r0, Z+
     ac2:	f0 81       	ld	r31, Z
     ac4:	e0 2d       	mov	r30, r0
     ac6:	20 a1       	ldd	r18, Z+32	; 0x20
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	21 50       	subi	r18, 0x01	; 1
     acc:	31 09       	sbc	r19, r1
     ace:	42 17       	cp	r20, r18
     ad0:	53 07       	cpc	r21, r19
     ad2:	24 f4       	brge	.+8      	; 0xadc <navigateMenu+0x44>
					currentMenu.childIndex++;
     ad4:	9f 5f       	subi	r25, 0xFF	; 255
     ad6:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <currentMenu+0x2>
     ada:	41 c0       	rjmp	.+130    	; 0xb5e <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
     adc:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <currentMenu+0x2>
     ae0:	3e c0       	rjmp	.+124    	; 0xb5e <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     ae2:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <currentMenu+0x2>
     ae6:	99 23       	and	r25, r25
     ae8:	21 f0       	breq	.+8      	; 0xaf2 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     aea:	91 50       	subi	r25, 0x01	; 1
     aec:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <currentMenu+0x2>
     af0:	36 c0       	rjmp	.+108    	; 0xb5e <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     af2:	ef e6       	ldi	r30, 0x6F	; 111
     af4:	f2 e0       	ldi	r31, 0x02	; 2
     af6:	a0 81       	ld	r26, Z
     af8:	b1 81       	ldd	r27, Z+1	; 0x01
     afa:	90 96       	adiw	r26, 0x20	; 32
     afc:	9c 91       	ld	r25, X
     afe:	91 50       	subi	r25, 0x01	; 1
     b00:	92 83       	std	Z+2, r25	; 0x02
     b02:	2d c0       	rjmp	.+90     	; 0xb5e <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     b04:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <currentMenu>
     b08:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <currentMenu+0x1>
     b0c:	22 89       	ldd	r18, Z+18	; 0x12
     b0e:	33 89       	ldd	r19, Z+19	; 0x13
     b10:	21 15       	cp	r18, r1
     b12:	31 05       	cpc	r19, r1
     b14:	21 f1       	breq	.+72     	; 0xb5e <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     b16:	ef e6       	ldi	r30, 0x6F	; 111
     b18:	f2 e0       	ldi	r31, 0x02	; 2
     b1a:	31 83       	std	Z+1, r19	; 0x01
     b1c:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     b1e:	12 82       	std	Z+2, r1	; 0x02
     b20:	1e c0       	rjmp	.+60     	; 0xb5e <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
     b22:	af e6       	ldi	r26, 0x6F	; 111
     b24:	b2 e0       	ldi	r27, 0x02	; 2
     b26:	2d 91       	ld	r18, X+
     b28:	3c 91       	ld	r19, X
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	12 96       	adiw	r26, 0x02	; 2
     b2e:	9c 91       	ld	r25, X
     b30:	e9 2f       	mov	r30, r25
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	3a 96       	adiw	r30, 0x0a	; 10
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	e2 0f       	add	r30, r18
     b3c:	f3 1f       	adc	r31, r19
     b3e:	01 90       	ld	r0, Z+
     b40:	f0 81       	ld	r31, Z
     b42:	e0 2d       	mov	r30, r0
     b44:	90 a1       	ldd	r25, Z+32	; 0x20
     b46:	91 11       	cpse	r25, r1
     b48:	03 c0       	rjmp	.+6      	; 0xb50 <navigateMenu+0xb8>
     b4a:	91 81       	ldd	r25, Z+1	; 0x01
     b4c:	99 23       	and	r25, r25
     b4e:	39 f0       	breq	.+14     	; 0xb5e <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     b50:	af e6       	ldi	r26, 0x6F	; 111
     b52:	b2 e0       	ldi	r27, 0x02	; 2
     b54:	11 96       	adiw	r26, 0x01	; 1
     b56:	fc 93       	st	X, r31
     b58:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     b5e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <currentMenu+0x3>
     b62:	08 95       	ret

00000b64 <this_init>:



MenuNode nodes[11];

void this_init() {
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
     b6c:	8a e0       	ldi	r24, 0x0A	; 10
     b6e:	ed ed       	ldi	r30, 0xDD	; 221
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	aa e8       	ldi	r26, 0x8A	; 138
     b74:	b2 e0       	ldi	r27, 0x02	; 2
     b76:	01 90       	ld	r0, Z+
     b78:	0d 92       	st	X+, r0
     b7a:	8a 95       	dec	r24
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <this_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
     b7e:	8a e0       	ldi	r24, 0x0A	; 10
     b80:	e7 ee       	ldi	r30, 0xE7	; 231
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	ab ea       	ldi	r26, 0xAB	; 171
     b86:	b2 e0       	ldi	r27, 0x02	; 2
     b88:	01 90       	ld	r0, Z+
     b8a:	0d 92       	st	X+, r0
     b8c:	8a 95       	dec	r24
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <this_init+0x24>
	strcpy(nodes[2].name, "High scores");
     b90:	8c e0       	ldi	r24, 0x0C	; 12
     b92:	e1 ef       	ldi	r30, 0xF1	; 241
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	ac ec       	ldi	r26, 0xCC	; 204
     b98:	b2 e0       	ldi	r27, 0x02	; 2
     b9a:	01 90       	ld	r0, Z+
     b9c:	0d 92       	st	X+, r0
     b9e:	8a 95       	dec	r24
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <this_init+0x36>
	strcpy(nodes[3].name, "Music");
     ba2:	86 e0       	ldi	r24, 0x06	; 6
     ba4:	ed ef       	ldi	r30, 0xFD	; 253
     ba6:	f1 e0       	ldi	r31, 0x01	; 1
     ba8:	ad ee       	ldi	r26, 0xED	; 237
     baa:	b2 e0       	ldi	r27, 0x02	; 2
     bac:	01 90       	ld	r0, Z+
     bae:	0d 92       	st	X+, r0
     bb0:	8a 95       	dec	r24
     bb2:	e1 f7       	brne	.-8      	; 0xbac <this_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
     bb4:	87 e0       	ldi	r24, 0x07	; 7
     bb6:	e3 e0       	ldi	r30, 0x03	; 3
     bb8:	f2 e0       	ldi	r31, 0x02	; 2
     bba:	ae e0       	ldi	r26, 0x0E	; 14
     bbc:	b3 e0       	ldi	r27, 0x03	; 3
     bbe:	01 90       	ld	r0, Z+
     bc0:	0d 92       	st	X+, r0
     bc2:	8a 95       	dec	r24
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <this_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
     bc6:	87 e0       	ldi	r24, 0x07	; 7
     bc8:	ea e0       	ldi	r30, 0x0A	; 10
     bca:	f2 e0       	ldi	r31, 0x02	; 2
     bcc:	af e2       	ldi	r26, 0x2F	; 47
     bce:	b3 e0       	ldi	r27, 0x03	; 3
     bd0:	01 90       	ld	r0, Z+
     bd2:	0d 92       	st	X+, r0
     bd4:	8a 95       	dec	r24
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <this_init+0x6c>
	strcpy(nodes[6].name, "Score 1");
     bd8:	88 e0       	ldi	r24, 0x08	; 8
     bda:	e1 e1       	ldi	r30, 0x11	; 17
     bdc:	f2 e0       	ldi	r31, 0x02	; 2
     bde:	a0 e5       	ldi	r26, 0x50	; 80
     be0:	b3 e0       	ldi	r27, 0x03	; 3
     be2:	01 90       	ld	r0, Z+
     be4:	0d 92       	st	X+, r0
     be6:	8a 95       	dec	r24
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <this_init+0x7e>
	strcpy(nodes[7].name, "Score 2");
     bea:	88 e0       	ldi	r24, 0x08	; 8
     bec:	e9 e1       	ldi	r30, 0x19	; 25
     bee:	f2 e0       	ldi	r31, 0x02	; 2
     bf0:	a1 e7       	ldi	r26, 0x71	; 113
     bf2:	b3 e0       	ldi	r27, 0x03	; 3
     bf4:	01 90       	ld	r0, Z+
     bf6:	0d 92       	st	X+, r0
     bf8:	8a 95       	dec	r24
     bfa:	e1 f7       	brne	.-8      	; 0xbf4 <this_init+0x90>
	strcpy(nodes[8].name, "Score 3");
     bfc:	88 e0       	ldi	r24, 0x08	; 8
     bfe:	e1 e2       	ldi	r30, 0x21	; 33
     c00:	f2 e0       	ldi	r31, 0x02	; 2
     c02:	a2 e9       	ldi	r26, 0x92	; 146
     c04:	b3 e0       	ldi	r27, 0x03	; 3
     c06:	01 90       	ld	r0, Z+
     c08:	0d 92       	st	X+, r0
     c0a:	8a 95       	dec	r24
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <this_init+0xa2>
	strcpy(nodes[9].name, "Score 4");
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	e9 e2       	ldi	r30, 0x29	; 41
     c12:	f2 e0       	ldi	r31, 0x02	; 2
     c14:	a3 eb       	ldi	r26, 0xB3	; 179
     c16:	b3 e0       	ldi	r27, 0x03	; 3
     c18:	01 90       	ld	r0, Z+
     c1a:	0d 92       	st	X+, r0
     c1c:	8a 95       	dec	r24
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <this_init+0xb4>
	strcpy(nodes[10].name, "Score 5");
     c20:	88 e0       	ldi	r24, 0x08	; 8
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f2 e0       	ldi	r31, 0x02	; 2
     c26:	a4 ed       	ldi	r26, 0xD4	; 212
     c28:	b3 e0       	ldi	r27, 0x03	; 3
     c2a:	01 90       	ld	r0, Z+
     c2c:	0d 92       	st	X+, r0
     c2e:	8a 95       	dec	r24
     c30:	e1 f7       	brne	.-8      	; 0xc2a <this_init+0xc6>
     c32:	68 e8       	ldi	r22, 0x88	; 136
     c34:	72 e0       	ldi	r23, 0x02	; 2
     c36:	fb 01       	movw	r30, r22
	
	for(int i = 0;i<11; i++)
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=4){
			nodes[i].isAction=1;
     c3c:	21 e0       	ldi	r18, 0x01	; 1
	strcpy(nodes[10].name, "Score 5");
	
	for(int i = 0;i<11; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
     c3e:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=4){
     c40:	84 30       	cpi	r24, 0x04	; 4
     c42:	91 05       	cpc	r25, r1
     c44:	14 f0       	brlt	.+4      	; 0xc4a <this_init+0xe6>
			nodes[i].isAction=1;
     c46:	21 83       	std	Z+1, r18	; 0x01
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <this_init+0xe8>
		}
		else{
			nodes[i].isAction=0;
     c4a:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[7].name, "Score 2");
	strcpy(nodes[8].name, "Score 3");
	strcpy(nodes[9].name, "Score 4");
	strcpy(nodes[10].name, "Score 5");
	
	for(int i = 0;i<11; i++)
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	b1 96       	adiw	r30, 0x21	; 33
     c50:	8b 30       	cpi	r24, 0x0B	; 11
     c52:	91 05       	cpc	r25, r1
     c54:	a1 f7       	brne	.-24     	; 0xc3e <this_init+0xda>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
     c56:	e8 e8       	ldi	r30, 0x88	; 136
     c58:	f2 e0       	ldi	r31, 0x02	; 2
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <nodes+0x41>
	nodes[2].numChildren = 5;
     c64:	85 e0       	ldi	r24, 0x05	; 5
     c66:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <nodes+0x62>
	nodes[3].numChildren = 0;
     c6a:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <nodes+0x83>
	nodes[4].numChildren = 0;
     c6e:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <nodes+0xa4>
	nodes[5].numChildren = 0;
     c72:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <nodes+0xc5>
	nodes[6].numChildren = 0;
     c76:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <nodes+0xe6>
	nodes[7].numChildren = 0;
     c7a:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <nodes+0x107>
	nodes[8].numChildren = 0;
     c7e:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <nodes+0x128>
	nodes[9].numChildren = 0;
     c82:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <nodes+0x149>
	nodes[10].numChildren = 0;
     c86:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <nodes+0x16a>
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
     c8a:	13 8a       	std	Z+19, r1	; 0x13
     c8c:	12 8a       	std	Z+18, r1	; 0x12
     c8e:	03 ef       	ldi	r16, 0xF3	; 243
     c90:	13 e0       	ldi	r17, 0x03	; 3
	nodes[7].numChildren = 0;
	nodes[8].numChildren = 0;
	nodes[9].numChildren = 0;
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
     c92:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
     c94:	51 e2       	ldi	r21, 0x21	; 33
     c96:	18 c0       	rjmp	.+48     	; 0xcc8 <this_init+0x164>
     c98:	54 9f       	mul	r21, r20
     c9a:	f0 01       	movw	r30, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	e8 57       	subi	r30, 0x78	; 120
     ca0:	fd 4f       	sbci	r31, 0xFD	; 253
     ca2:	e9 93       	st	Y+, r30
     ca4:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
     ca6:	b3 8b       	std	Z+19, r27	; 0x13
     ca8:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
     caa:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     cac:	2f 5f       	subi	r18, 0xFF	; 255
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	90 96       	adiw	r26, 0x20	; 32
     cb2:	8c 91       	ld	r24, X
     cb4:	90 97       	sbiw	r26, 0x20	; 32
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	28 17       	cp	r18, r24
     cba:	39 07       	cpc	r19, r25
     cbc:	6c f3       	brlt	.-38     	; 0xc98 <this_init+0x134>
     cbe:	6f 5d       	subi	r22, 0xDF	; 223
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
     cc2:	60 17       	cp	r22, r16
     cc4:	71 07       	cpc	r23, r17
     cc6:	59 f0       	breq	.+22     	; 0xcde <this_init+0x17a>
     cc8:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     cca:	90 96       	adiw	r26, 0x20	; 32
     ccc:	8c 91       	ld	r24, X
     cce:	90 97       	sbiw	r26, 0x20	; 32
     cd0:	88 23       	and	r24, r24
     cd2:	a9 f3       	breq	.-22     	; 0xcbe <this_init+0x15a>
     cd4:	eb 01       	movw	r28, r22
     cd6:	64 96       	adiw	r28, 0x14	; 20
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	dd cf       	rjmp	.-70     	; 0xc98 <this_init+0x134>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
     cde:	8b e6       	ldi	r24, 0x6B	; 107
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 4c 05 	call	0xa98	; 0xa98 <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
     ce6:	ef e6       	ldi	r30, 0x6F	; 111
     ce8:	f2 e0       	ldi	r31, 0x02	; 2
     cea:	88 e8       	ldi	r24, 0x88	; 136
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
     cf2:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	08 95       	ret

00000d02 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
	oled_reset();
     d0a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <oled_reset>
	oled_home();
     d0e:	0e 94 ee 06 	call	0xddc	; 0xddc <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d12:	cf e6       	ldi	r28, 0x6F	; 111
     d14:	d2 e0       	ldi	r29, 0x02	; 2
     d16:	88 81       	ld	r24, Y
     d18:	99 81       	ldd	r25, Y+1	; 0x01
     d1a:	02 96       	adiw	r24, 0x02	; 2
     d1c:	0e 94 29 07 	call	0xe52	; 0xe52 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d20:	e8 81       	ld	r30, Y
     d22:	f9 81       	ldd	r31, Y+1	; 0x01
     d24:	80 a1       	ldd	r24, Z+32	; 0x20
     d26:	88 23       	and	r24, r24
     d28:	39 f1       	breq	.+78     	; 0xd78 <menu_printCurrentMenu+0x76>
     d2a:	c0 e0       	ldi	r28, 0x00	; 0
     d2c:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d2e:	0f e6       	ldi	r16, 0x6F	; 111
     d30:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     d32:	ce 01       	movw	r24, r28
     d34:	02 96       	adiw	r24, 0x02	; 2
     d36:	0e 94 25 07 	call	0xe4a	; 0xe4a <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d3a:	d8 01       	movw	r26, r16
     d3c:	8d 91       	ld	r24, X+
     d3e:	9c 91       	ld	r25, X
     d40:	fe 01       	movw	r30, r28
     d42:	3a 96       	adiw	r30, 0x0a	; 10
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	e8 0f       	add	r30, r24
     d4a:	f9 1f       	adc	r31, r25
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	02 96       	adiw	r24, 0x02	; 2
     d52:	0e 94 29 07 	call	0xe52	; 0xe52 <oled_print>
		if (currentMenu.childIndex == i) {
     d56:	f8 01       	movw	r30, r16
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	8c 17       	cp	r24, r28
     d5e:	9d 07       	cpc	r25, r29
     d60:	11 f4       	brne	.+4      	; 0xd66 <menu_printCurrentMenu+0x64>
			oled_print_arrow();
     d62:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d66:	21 96       	adiw	r28, 0x01	; 1
     d68:	d8 01       	movw	r26, r16
     d6a:	ed 91       	ld	r30, X+
     d6c:	fc 91       	ld	r31, X
     d6e:	80 a1       	ldd	r24, Z+32	; 0x20
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	c8 17       	cp	r28, r24
     d74:	d9 07       	cpc	r29, r25
     d76:	ec f2       	brlt	.-70     	; 0xd32 <menu_printCurrentMenu+0x30>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	08 95       	ret

00000d82 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     d82:	80 55       	subi	r24, 0x50	; 80
     d84:	e0 e0       	ldi	r30, 0x00	; 0
     d86:	f0 e1       	ldi	r31, 0x10	; 16
     d88:	80 83       	st	Z, r24
     d8a:	86 2f       	mov	r24, r22
     d8c:	8f 70       	andi	r24, 0x0F	; 15
     d8e:	80 83       	st	Z, r24
     d90:	62 95       	swap	r22
     d92:	6f 70       	andi	r22, 0x0F	; 15
     d94:	60 61       	ori	r22, 0x10	; 16
     d96:	60 83       	st	Z, r22
     d98:	08 95       	ret

00000d9a <oled_reset>:
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	10 e0       	ldi	r17, 0x00	; 0
     da2:	c0 e0       	ldi	r28, 0x00	; 0
     da4:	d2 e1       	ldi	r29, 0x12	; 18
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	81 2f       	mov	r24, r17
     daa:	0e 94 c1 06 	call	0xd82	; 0xd82 <oled_pos>
     dae:	80 e8       	ldi	r24, 0x80	; 128
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	18 82       	st	Y, r1
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	e9 f7       	brne	.-6      	; 0xdb2 <oled_reset+0x18>
     db8:	1f 5f       	subi	r17, 0xFF	; 255
     dba:	18 30       	cpi	r17, 0x08	; 8
     dbc:	a1 f7       	brne	.-24     	; 0xda6 <oled_reset+0xc>
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	08 95       	ret

00000dc6 <oled_print_arrow>:
     dc6:	e0 e0       	ldi	r30, 0x00	; 0
     dc8:	f2 e1       	ldi	r31, 0x12	; 18
     dca:	88 e1       	ldi	r24, 0x18	; 24
     dcc:	80 83       	st	Z, r24
     dce:	9c e3       	ldi	r25, 0x3C	; 60
     dd0:	90 83       	st	Z, r25
     dd2:	9e e7       	ldi	r25, 0x7E	; 126
     dd4:	90 83       	st	Z, r25
     dd6:	80 83       	st	Z, r24
     dd8:	80 83       	st	Z, r24
     dda:	08 95       	ret

00000ddc <oled_home>:
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 c1 06 	call	0xd82	; 0xd82 <oled_pos>
     de4:	08 95       	ret

00000de6 <oled_init>:
     de6:	e0 e0       	ldi	r30, 0x00	; 0
     de8:	f0 e1       	ldi	r31, 0x10	; 16
     dea:	8e ea       	ldi	r24, 0xAE	; 174
     dec:	80 83       	st	Z, r24
     dee:	81 ea       	ldi	r24, 0xA1	; 161
     df0:	80 83       	st	Z, r24
     df2:	8a ed       	ldi	r24, 0xDA	; 218
     df4:	80 83       	st	Z, r24
     df6:	82 e1       	ldi	r24, 0x12	; 18
     df8:	80 83       	st	Z, r24
     dfa:	88 ec       	ldi	r24, 0xC8	; 200
     dfc:	80 83       	st	Z, r24
     dfe:	88 ea       	ldi	r24, 0xA8	; 168
     e00:	80 83       	st	Z, r24
     e02:	8f e3       	ldi	r24, 0x3F	; 63
     e04:	80 83       	st	Z, r24
     e06:	85 ed       	ldi	r24, 0xD5	; 213
     e08:	80 83       	st	Z, r24
     e0a:	80 e8       	ldi	r24, 0x80	; 128
     e0c:	80 83       	st	Z, r24
     e0e:	81 e8       	ldi	r24, 0x81	; 129
     e10:	80 83       	st	Z, r24
     e12:	80 e5       	ldi	r24, 0x50	; 80
     e14:	80 83       	st	Z, r24
     e16:	89 ed       	ldi	r24, 0xD9	; 217
     e18:	80 83       	st	Z, r24
     e1a:	81 e2       	ldi	r24, 0x21	; 33
     e1c:	80 83       	st	Z, r24
     e1e:	80 e2       	ldi	r24, 0x20	; 32
     e20:	80 83       	st	Z, r24
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	80 83       	st	Z, r24
     e26:	8b ed       	ldi	r24, 0xDB	; 219
     e28:	80 83       	st	Z, r24
     e2a:	80 e3       	ldi	r24, 0x30	; 48
     e2c:	80 83       	st	Z, r24
     e2e:	8d ea       	ldi	r24, 0xAD	; 173
     e30:	80 83       	st	Z, r24
     e32:	10 82       	st	Z, r1
     e34:	84 ea       	ldi	r24, 0xA4	; 164
     e36:	80 83       	st	Z, r24
     e38:	86 ea       	ldi	r24, 0xA6	; 166
     e3a:	80 83       	st	Z, r24
     e3c:	8f ea       	ldi	r24, 0xAF	; 175
     e3e:	80 83       	st	Z, r24
     e40:	0e 94 cd 06 	call	0xd9a	; 0xd9a <oled_reset>
     e44:	0e 94 ee 06 	call	0xddc	; 0xddc <oled_home>
     e48:	08 95       	ret

00000e4a <oled_gotoLine>:
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	0e 94 c1 06 	call	0xd82	; 0xd82 <oled_pos>
     e50:	08 95       	ret

00000e52 <oled_print>:

void oled_print(char* character){
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	dc 01       	movw	r26, r24
	while (*character != '\0')
     e58:	8c 91       	ld	r24, X
     e5a:	81 11       	cpse	r24, r1
     e5c:	1a c0       	rjmp	.+52     	; 0xe92 <oled_print+0x40>
     e5e:	1e c0       	rjmp	.+60     	; 0xe9c <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     e60:	ec 91       	ld	r30, X
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	b0 97       	sbiw	r30, 0x20	; 32
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	ee 0f       	add	r30, r30
     e6c:	ff 1f       	adc	r31, r31
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	e2 0f       	add	r30, r18
     e74:	f3 1f       	adc	r31, r19
     e76:	e2 56       	subi	r30, 0x62	; 98
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     e7c:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     e7e:	2f 5f       	subi	r18, 0xFF	; 255
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	28 30       	cpi	r18, 0x08	; 8
     e84:	31 05       	cpc	r19, r1
     e86:	61 f7       	brne	.-40     	; 0xe60 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     e88:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     e8a:	8c 91       	ld	r24, X
     e8c:	81 11       	cpse	r24, r1
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <oled_print+0x44>
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     e92:	c0 e0       	ldi	r28, 0x00	; 0
     e94:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	e2 cf       	rjmp	.-60     	; 0xe60 <oled_print+0xe>
		}
		character++;
	}
	
	
}
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "game.h"

	void setupInit(void){
	cli();
     ea2:	f8 94       	cli
	xmem_init();
     ea4:	0e 94 4d 08 	call	0x109a	; 0x109a <xmem_init>
	USART_init(MYUBRR);
     ea8:	8f e1       	ldi	r24, 0x1F	; 31
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 3c 08 	call	0x1078	; 0x1078 <USART_init>
	adcInit();
     eb0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     eb4:	0e 94 8a 04 	call	0x914	; 0x914 <joystickInit>
	touchButton_init();
     eb8:	0e 94 0f 08 	call	0x101e	; 0x101e <touchButton_init>
	oled_init();
     ebc:	0e 94 f3 06 	call	0xde6	; 0xde6 <oled_init>
	printf("After oledinit\n\r");
     ec0:	89 e3       	ldi	r24, 0x39	; 57
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
	timer_init();
     ecc:	0e 94 01 08 	call	0x1002	; 0x1002 <timer_init>
	sleep_init();
     ed0:	0e 94 75 04 	call	0x8ea	; 0x8ea <sleep_init>
	//menuInit();
	this_init();
     ed4:	0e 94 b2 05 	call	0xb64	; 0xb64 <this_init>
	printf("Finished this");
     ed8:	8a e4       	ldi	r24, 0x4A	; 74
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
	CAN_controller_init();
     ee4:	0e 94 00 04 	call	0x800	; 0x800 <CAN_controller_init>
	//pwm_init(); uncommenting this breaks can on node 2.
	game_init();
     ee8:	0e 94 32 04 	call	0x864	; 0x864 <game_init>
	sei();
     eec:	78 94       	sei
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	08 95       	ret

00000ef8 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f02:	c5 e7       	ldi	r28, 0x75	; 117
     f04:	d2 e0       	ldi	r29, 0x02	; 2
     f06:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f0e:	89 83       	std	Y+1, r24	; 0x01
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     f16:	87 b3       	in	r24, 0x17	; 23
     f18:	80 6a       	ori	r24, 0xA0	; 160
     f1a:	87 bb       	out	0x17, r24	; 23
     f1c:	bc 9a       	sbi	0x17, 4	; 23
     f1e:	8d b1       	in	r24, 0x0d	; 13
     f20:	81 65       	ori	r24, 0x51	; 81
     f22:	8d b9       	out	0x0d, r24	; 13
     f24:	c4 9a       	sbi	0x18, 4	; 24
     f26:	08 95       	ret

00000f28 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     f28:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     f2a:	77 9b       	sbis	0x0e, 7	; 14
     f2c:	fe cf       	rjmp	.-4      	; 0xf2a <SPI_masterWrite+0x2>

}
     f2e:	08 95       	ret

00000f30 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     f30:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     f32:	77 9b       	sbis	0x0e, 7	; 14
     f34:	fe cf       	rjmp	.-4      	; 0xf32 <SPI_masterRead+0x2>
	return SPDR;
     f36:	8f b1       	in	r24, 0x0f	; 15
}
     f38:	08 95       	ret

00000f3a <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     f3a:	66 23       	and	r22, r22
     f3c:	69 f0       	breq	.+26     	; 0xf58 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     f3e:	48 b3       	in	r20, 0x18	; 24
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	b9 01       	movw	r22, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <SPI_setChipSelect+0x12>
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	8a 95       	dec	r24
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <SPI_setChipSelect+0xe>
     f50:	cb 01       	movw	r24, r22
     f52:	84 2b       	or	r24, r20
     f54:	88 bb       	out	0x18, r24	; 24
     f56:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     f58:	48 b3       	in	r20, 0x18	; 24
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	b9 01       	movw	r22, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <SPI_setChipSelect+0x2c>
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	8a 95       	dec	r24
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <SPI_setChipSelect+0x28>
     f6a:	cb 01       	movw	r24, r22
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	88 bb       	out	0x18, r24	; 24
     f72:	08 95       	ret

00000f74 <__vector_14>:
#include "touchButton.h"
#include "menu.h"
#include "game.h"


ISR (TIMER1_COMPB_vect) {
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
	cli();
     f96:	f8 94       	cli
	TCNT1 = 0x00;
     f98:	1d bc       	out	0x2d, r1	; 45
     f9a:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     f9c:	8b e6       	ldi	r24, 0x6B	; 107
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 95 04 	call	0x92a	; 0x92a <joystick_readPosition>
	slider_readPosition(&slider_pos);
     fa4:	85 e7       	ldi	r24, 0x75	; 117
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	0e 94 7c 07 	call	0xef8	; 0xef8 <slider_readPosition>
	touchButton_readButtons(&buttons);
     fac:	83 e7       	ldi	r24, 0x73	; 115
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 28 08 	call	0x1050	; 0x1050 <touchButton_readButtons>
	if(gameActive==0){
     fb4:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <gameActive>
     fb8:	81 11       	cpse	r24, r1
     fba:	0f c0       	rjmp	.+30     	; 0xfda <__vector_14+0x66>
		printf("Game not active");
     fbc:	88 e5       	ldi	r24, 0x58	; 88
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	9f 93       	push	r25
     fc2:	8f 93       	push	r24
     fc4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <printf>
		navigateMenu(&joystick_pos);
     fc8:	8b e6       	ldi	r24, 0x6B	; 107
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 4c 05 	call	0xa98	; 0xa98 <navigateMenu>
		menu_printCurrentMenu();
     fd0:	0e 94 81 06 	call	0xd02	; 0xd02 <menu_printCurrentMenu>
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__vector_14+0x6a>
	}
	else{
		game_updateOled();
     fda:	0e 94 40 04 	call	0x880	; 0x880 <game_updateOled>
	}
	sei();
     fde:	78 94       	sei
}
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1002:	89 b7       	in	r24, 0x39	; 57
    1004:	80 62       	ori	r24, 0x20	; 32
    1006:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    1008:	1d bc       	out	0x2d, r1	; 45
    100a:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    100c:	80 e3       	ldi	r24, 0x30	; 48
    100e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1014:	80 ee       	ldi	r24, 0xE0	; 224
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	99 bd       	out	0x29, r25	; 41
    101a:	88 bd       	out	0x28, r24	; 40
    101c:	08 95       	ret

0000101e <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    101e:	36 b3       	in	r19, 0x16	; 22
    1020:	26 b3       	in	r18, 0x16	; 22
    1022:	47 b3       	in	r20, 0x17	; 23
    1024:	32 70       	andi	r19, 0x02	; 2
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	bc 01       	movw	r22, r24
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <touchButton_init+0x14>
    102e:	66 0f       	add	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	3a 95       	dec	r19
    1034:	e2 f7       	brpl	.-8      	; 0x102e <touchButton_init+0x10>
    1036:	24 70       	andi	r18, 0x04	; 4
    1038:	02 c0       	rjmp	.+4      	; 0x103e <touchButton_init+0x20>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	2a 95       	dec	r18
    1040:	e2 f7       	brpl	.-8      	; 0x103a <touchButton_init+0x1c>
    1042:	86 2b       	or	r24, r22
    1044:	97 2b       	or	r25, r23
    1046:	80 95       	com	r24
    1048:	90 95       	com	r25
    104a:	84 23       	and	r24, r20
    104c:	87 bb       	out	0x17, r24	; 23
    104e:	08 95       	ret

00001050 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1050:	86 b3       	in	r24, 0x16	; 22
    1052:	e3 e7       	ldi	r30, 0x73	; 115
    1054:	f2 e0       	ldi	r31, 0x02	; 2
    1056:	86 95       	lsr	r24
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    105c:	86 b3       	in	r24, 0x16	; 22
    105e:	82 fb       	bst	r24, 2
    1060:	88 27       	eor	r24, r24
    1062:	80 f9       	bld	r24, 0
    1064:	81 83       	std	Z+1, r24	; 0x01
    1066:	08 95       	ret

00001068 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    1068:	5d 9b       	sbis	0x0b, 5	; 11
    106a:	fe cf       	rjmp	.-4      	; 0x1068 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    106c:	8c b9       	out	0x0c, r24	; 12
    106e:	08 95       	ret

00001070 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    1070:	5f 9b       	sbis	0x0b, 7	; 11
    1072:	fe cf       	rjmp	.-4      	; 0x1070 <USART_receiveChar>
		;
	
	return UDR0;
    1074:	8c b1       	in	r24, 0x0c	; 12
    1076:	08 95       	ret

00001078 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1078:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    107a:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    107c:	88 e1       	ldi	r24, 0x18	; 24
    107e:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1080:	8e e8       	ldi	r24, 0x8E	; 142
    1082:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1084:	68 e3       	ldi	r22, 0x38	; 56
    1086:	78 e0       	ldi	r23, 0x08	; 8
    1088:	84 e3       	ldi	r24, 0x34	; 52
    108a:	98 e0       	ldi	r25, 0x08	; 8
    108c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <fdevopen>
    1090:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <uart+0x1>
    1094:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <uart>
    1098:	08 95       	ret

0000109a <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    109a:	85 b7       	in	r24, 0x35	; 53
    109c:	80 68       	ori	r24, 0x80	; 128
    109e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    10a0:	80 b7       	in	r24, 0x30	; 48
    10a2:	88 60       	ori	r24, 0x08	; 8
    10a4:	80 bf       	out	0x30, r24	; 48
    10a6:	08 95       	ret
    10a8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscA>
    10ac:	60 f0       	brcs	.+24     	; 0x10c6 <xmem_init+0x2c>
    10ae:	80 e8       	ldi	r24, 0x80	; 128
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <xmem_init+0x1c>
    10b4:	9e ef       	ldi	r25, 0xFE	; 254
    10b6:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscB>
    10ba:	28 f0       	brcs	.+10     	; 0x10c6 <xmem_init+0x2c>
    10bc:	40 e8       	ldi	r20, 0x80	; 128
    10be:	51 e0       	ldi	r21, 0x01	; 1
    10c0:	71 f4       	brne	.+28     	; 0x10de <atan2+0x10>
    10c2:	5e ef       	ldi	r21, 0xFE	; 254
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <atan2+0x10>
    10c6:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_nan>
    10ca:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_zero>

000010ce <atan2>:
    10ce:	e9 2f       	mov	r30, r25
    10d0:	e0 78       	andi	r30, 0x80	; 128
    10d2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_split3>
    10d6:	40 f3       	brcs	.-48     	; 0x10a8 <xmem_init+0xe>
    10d8:	09 2e       	mov	r0, r25
    10da:	05 2a       	or	r0, r21
    10dc:	b1 f3       	breq	.-20     	; 0x10ca <xmem_init+0x30>
    10de:	26 17       	cp	r18, r22
    10e0:	37 07       	cpc	r19, r23
    10e2:	48 07       	cpc	r20, r24
    10e4:	59 07       	cpc	r21, r25
    10e6:	38 f0       	brcs	.+14     	; 0x10f6 <atan2+0x28>
    10e8:	0e 2e       	mov	r0, r30
    10ea:	07 f8       	bld	r0, 7
    10ec:	e0 25       	eor	r30, r0
    10ee:	69 f0       	breq	.+26     	; 0x110a <atan2+0x3c>
    10f0:	e0 25       	eor	r30, r0
    10f2:	e0 64       	ori	r30, 0x40	; 64
    10f4:	0a c0       	rjmp	.+20     	; 0x110a <atan2+0x3c>
    10f6:	ef 63       	ori	r30, 0x3F	; 63
    10f8:	07 f8       	bld	r0, 7
    10fa:	00 94       	com	r0
    10fc:	07 fa       	bst	r0, 7
    10fe:	db 01       	movw	r26, r22
    1100:	b9 01       	movw	r22, r18
    1102:	9d 01       	movw	r18, r26
    1104:	dc 01       	movw	r26, r24
    1106:	ca 01       	movw	r24, r20
    1108:	ad 01       	movw	r20, r26
    110a:	ef 93       	push	r30
    110c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__divsf3_pse>
    1110:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_round>
    1114:	0e 94 97 08 	call	0x112e	; 0x112e <atan>
    1118:	5f 91       	pop	r21
    111a:	55 23       	and	r21, r21
    111c:	39 f0       	breq	.+14     	; 0x112c <atan2+0x5e>
    111e:	2b ed       	ldi	r18, 0xDB	; 219
    1120:	3f e0       	ldi	r19, 0x0F	; 15
    1122:	49 e4       	ldi	r20, 0x49	; 73
    1124:	50 fd       	sbrc	r21, 0
    1126:	49 ec       	ldi	r20, 0xC9	; 201
    1128:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__addsf3>
    112c:	08 95       	ret

0000112e <atan>:
    112e:	df 93       	push	r29
    1130:	dd 27       	eor	r29, r29
    1132:	b9 2f       	mov	r27, r25
    1134:	bf 77       	andi	r27, 0x7F	; 127
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	16 16       	cp	r1, r22
    113c:	17 06       	cpc	r1, r23
    113e:	48 07       	cpc	r20, r24
    1140:	5b 07       	cpc	r21, r27
    1142:	18 f4       	brcc	.+6      	; 0x114a <atan+0x1c>
    1144:	d9 2f       	mov	r29, r25
    1146:	0e 94 23 0a 	call	0x1446	; 0x1446 <inverse>
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	7f 93       	push	r23
    1150:	6f 93       	push	r22
    1152:	0e 94 98 0a 	call	0x1530	; 0x1530 <square>
    1156:	e0 e7       	ldi	r30, 0x70	; 112
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_powser>
    115e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_round>
    1162:	2f 91       	pop	r18
    1164:	3f 91       	pop	r19
    1166:	4f 91       	pop	r20
    1168:	5f 91       	pop	r21
    116a:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3x>
    116e:	dd 23       	and	r29, r29
    1170:	51 f0       	breq	.+20     	; 0x1186 <atan+0x58>
    1172:	90 58       	subi	r25, 0x80	; 128
    1174:	a2 ea       	ldi	r26, 0xA2	; 162
    1176:	2a ed       	ldi	r18, 0xDA	; 218
    1178:	3f e0       	ldi	r19, 0x0F	; 15
    117a:	49 ec       	ldi	r20, 0xC9	; 201
    117c:	5f e3       	ldi	r21, 0x3F	; 63
    117e:	d0 78       	andi	r29, 0x80	; 128
    1180:	5d 27       	eor	r21, r29
    1182:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3x>
    1186:	df 91       	pop	r29
    1188:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_round>

0000118c <__divsf3>:
    118c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__divsf3x>
    1190:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_round>
    1194:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscB>
    1198:	58 f0       	brcs	.+22     	; 0x11b0 <__divsf3+0x24>
    119a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscA>
    119e:	40 f0       	brcs	.+16     	; 0x11b0 <__divsf3+0x24>
    11a0:	29 f4       	brne	.+10     	; 0x11ac <__divsf3+0x20>
    11a2:	5f 3f       	cpi	r21, 0xFF	; 255
    11a4:	29 f0       	breq	.+10     	; 0x11b0 <__divsf3+0x24>
    11a6:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>
    11aa:	51 11       	cpse	r21, r1
    11ac:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>
    11b0:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_nan>

000011b4 <__divsf3x>:
    11b4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_split3>
    11b8:	68 f3       	brcs	.-38     	; 0x1194 <__divsf3+0x8>

000011ba <__divsf3_pse>:
    11ba:	99 23       	and	r25, r25
    11bc:	b1 f3       	breq	.-20     	; 0x11aa <__divsf3+0x1e>
    11be:	55 23       	and	r21, r21
    11c0:	91 f3       	breq	.-28     	; 0x11a6 <__divsf3+0x1a>
    11c2:	95 1b       	sub	r25, r21
    11c4:	55 0b       	sbc	r21, r21
    11c6:	bb 27       	eor	r27, r27
    11c8:	aa 27       	eor	r26, r26
    11ca:	62 17       	cp	r22, r18
    11cc:	73 07       	cpc	r23, r19
    11ce:	84 07       	cpc	r24, r20
    11d0:	38 f0       	brcs	.+14     	; 0x11e0 <__divsf3_pse+0x26>
    11d2:	9f 5f       	subi	r25, 0xFF	; 255
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	44 1f       	adc	r20, r20
    11dc:	aa 1f       	adc	r26, r26
    11de:	a9 f3       	breq	.-22     	; 0x11ca <__divsf3_pse+0x10>
    11e0:	35 d0       	rcall	.+106    	; 0x124c <__divsf3_pse+0x92>
    11e2:	0e 2e       	mov	r0, r30
    11e4:	3a f0       	brmi	.+14     	; 0x11f4 <__divsf3_pse+0x3a>
    11e6:	e0 e8       	ldi	r30, 0x80	; 128
    11e8:	32 d0       	rcall	.+100    	; 0x124e <__divsf3_pse+0x94>
    11ea:	91 50       	subi	r25, 0x01	; 1
    11ec:	50 40       	sbci	r21, 0x00	; 0
    11ee:	e6 95       	lsr	r30
    11f0:	00 1c       	adc	r0, r0
    11f2:	ca f7       	brpl	.-14     	; 0x11e6 <__divsf3_pse+0x2c>
    11f4:	2b d0       	rcall	.+86     	; 0x124c <__divsf3_pse+0x92>
    11f6:	fe 2f       	mov	r31, r30
    11f8:	29 d0       	rcall	.+82     	; 0x124c <__divsf3_pse+0x92>
    11fa:	66 0f       	add	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	bb 1f       	adc	r27, r27
    1202:	26 17       	cp	r18, r22
    1204:	37 07       	cpc	r19, r23
    1206:	48 07       	cpc	r20, r24
    1208:	ab 07       	cpc	r26, r27
    120a:	b0 e8       	ldi	r27, 0x80	; 128
    120c:	09 f0       	breq	.+2      	; 0x1210 <__divsf3_pse+0x56>
    120e:	bb 0b       	sbc	r27, r27
    1210:	80 2d       	mov	r24, r0
    1212:	bf 01       	movw	r22, r30
    1214:	ff 27       	eor	r31, r31
    1216:	93 58       	subi	r25, 0x83	; 131
    1218:	5f 4f       	sbci	r21, 0xFF	; 255
    121a:	3a f0       	brmi	.+14     	; 0x122a <__divsf3_pse+0x70>
    121c:	9e 3f       	cpi	r25, 0xFE	; 254
    121e:	51 05       	cpc	r21, r1
    1220:	78 f0       	brcs	.+30     	; 0x1240 <__divsf3_pse+0x86>
    1222:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>
    1226:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>
    122a:	5f 3f       	cpi	r21, 0xFF	; 255
    122c:	e4 f3       	brlt	.-8      	; 0x1226 <__divsf3_pse+0x6c>
    122e:	98 3e       	cpi	r25, 0xE8	; 232
    1230:	d4 f3       	brlt	.-12     	; 0x1226 <__divsf3_pse+0x6c>
    1232:	86 95       	lsr	r24
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	b7 95       	ror	r27
    123a:	f7 95       	ror	r31
    123c:	9f 5f       	subi	r25, 0xFF	; 255
    123e:	c9 f7       	brne	.-14     	; 0x1232 <__divsf3_pse+0x78>
    1240:	88 0f       	add	r24, r24
    1242:	91 1d       	adc	r25, r1
    1244:	96 95       	lsr	r25
    1246:	87 95       	ror	r24
    1248:	97 f9       	bld	r25, 7
    124a:	08 95       	ret
    124c:	e1 e0       	ldi	r30, 0x01	; 1
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	bb 1f       	adc	r27, r27
    1256:	62 17       	cp	r22, r18
    1258:	73 07       	cpc	r23, r19
    125a:	84 07       	cpc	r24, r20
    125c:	ba 07       	cpc	r27, r26
    125e:	20 f0       	brcs	.+8      	; 0x1268 <__divsf3_pse+0xae>
    1260:	62 1b       	sub	r22, r18
    1262:	73 0b       	sbc	r23, r19
    1264:	84 0b       	sbc	r24, r20
    1266:	ba 0b       	sbc	r27, r26
    1268:	ee 1f       	adc	r30, r30
    126a:	88 f7       	brcc	.-30     	; 0x124e <__divsf3_pse+0x94>
    126c:	e0 95       	com	r30
    126e:	08 95       	ret

00001270 <__fixsfsi>:
    1270:	0e 94 3f 09 	call	0x127e	; 0x127e <__fixunssfsi>
    1274:	68 94       	set
    1276:	b1 11       	cpse	r27, r1
    1278:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>
    127c:	08 95       	ret

0000127e <__fixunssfsi>:
    127e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_splitA>
    1282:	88 f0       	brcs	.+34     	; 0x12a6 <__fixunssfsi+0x28>
    1284:	9f 57       	subi	r25, 0x7F	; 127
    1286:	98 f0       	brcs	.+38     	; 0x12ae <__fixunssfsi+0x30>
    1288:	b9 2f       	mov	r27, r25
    128a:	99 27       	eor	r25, r25
    128c:	b7 51       	subi	r27, 0x17	; 23
    128e:	b0 f0       	brcs	.+44     	; 0x12bc <__fixunssfsi+0x3e>
    1290:	e1 f0       	breq	.+56     	; 0x12ca <__fixunssfsi+0x4c>
    1292:	66 0f       	add	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	1a f0       	brmi	.+6      	; 0x12a2 <__fixunssfsi+0x24>
    129c:	ba 95       	dec	r27
    129e:	c9 f7       	brne	.-14     	; 0x1292 <__fixunssfsi+0x14>
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <__fixunssfsi+0x4c>
    12a2:	b1 30       	cpi	r27, 0x01	; 1
    12a4:	91 f0       	breq	.+36     	; 0x12ca <__fixunssfsi+0x4c>
    12a6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__fp_zero>
    12aa:	b1 e0       	ldi	r27, 0x01	; 1
    12ac:	08 95       	ret
    12ae:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_zero>
    12b2:	67 2f       	mov	r22, r23
    12b4:	78 2f       	mov	r23, r24
    12b6:	88 27       	eor	r24, r24
    12b8:	b8 5f       	subi	r27, 0xF8	; 248
    12ba:	39 f0       	breq	.+14     	; 0x12ca <__fixunssfsi+0x4c>
    12bc:	b9 3f       	cpi	r27, 0xF9	; 249
    12be:	cc f3       	brlt	.-14     	; 0x12b2 <__fixunssfsi+0x34>
    12c0:	86 95       	lsr	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b3 95       	inc	r27
    12c8:	d9 f7       	brne	.-10     	; 0x12c0 <__fixunssfsi+0x42>
    12ca:	3e f4       	brtc	.+14     	; 0x12da <__fixunssfsi+0x5c>
    12cc:	90 95       	com	r25
    12ce:	80 95       	com	r24
    12d0:	70 95       	com	r23
    12d2:	61 95       	neg	r22
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	8f 4f       	sbci	r24, 0xFF	; 255
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	08 95       	ret

000012dc <__floatunsisf>:
    12dc:	e8 94       	clt
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <__floatsisf+0x12>

000012e0 <__floatsisf>:
    12e0:	97 fb       	bst	r25, 7
    12e2:	3e f4       	brtc	.+14     	; 0x12f2 <__floatsisf+0x12>
    12e4:	90 95       	com	r25
    12e6:	80 95       	com	r24
    12e8:	70 95       	com	r23
    12ea:	61 95       	neg	r22
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	8f 4f       	sbci	r24, 0xFF	; 255
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	99 23       	and	r25, r25
    12f4:	a9 f0       	breq	.+42     	; 0x1320 <__floatsisf+0x40>
    12f6:	f9 2f       	mov	r31, r25
    12f8:	96 e9       	ldi	r25, 0x96	; 150
    12fa:	bb 27       	eor	r27, r27
    12fc:	93 95       	inc	r25
    12fe:	f6 95       	lsr	r31
    1300:	87 95       	ror	r24
    1302:	77 95       	ror	r23
    1304:	67 95       	ror	r22
    1306:	b7 95       	ror	r27
    1308:	f1 11       	cpse	r31, r1
    130a:	f8 cf       	rjmp	.-16     	; 0x12fc <__floatsisf+0x1c>
    130c:	fa f4       	brpl	.+62     	; 0x134c <__floatsisf+0x6c>
    130e:	bb 0f       	add	r27, r27
    1310:	11 f4       	brne	.+4      	; 0x1316 <__floatsisf+0x36>
    1312:	60 ff       	sbrs	r22, 0
    1314:	1b c0       	rjmp	.+54     	; 0x134c <__floatsisf+0x6c>
    1316:	6f 5f       	subi	r22, 0xFF	; 255
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	8f 4f       	sbci	r24, 0xFF	; 255
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	16 c0       	rjmp	.+44     	; 0x134c <__floatsisf+0x6c>
    1320:	88 23       	and	r24, r24
    1322:	11 f0       	breq	.+4      	; 0x1328 <__floatsisf+0x48>
    1324:	96 e9       	ldi	r25, 0x96	; 150
    1326:	11 c0       	rjmp	.+34     	; 0x134a <__floatsisf+0x6a>
    1328:	77 23       	and	r23, r23
    132a:	21 f0       	breq	.+8      	; 0x1334 <__floatsisf+0x54>
    132c:	9e e8       	ldi	r25, 0x8E	; 142
    132e:	87 2f       	mov	r24, r23
    1330:	76 2f       	mov	r23, r22
    1332:	05 c0       	rjmp	.+10     	; 0x133e <__floatsisf+0x5e>
    1334:	66 23       	and	r22, r22
    1336:	71 f0       	breq	.+28     	; 0x1354 <__floatsisf+0x74>
    1338:	96 e8       	ldi	r25, 0x86	; 134
    133a:	86 2f       	mov	r24, r22
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	2a f0       	brmi	.+10     	; 0x134c <__floatsisf+0x6c>
    1342:	9a 95       	dec	r25
    1344:	66 0f       	add	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	88 1f       	adc	r24, r24
    134a:	da f7       	brpl	.-10     	; 0x1342 <__floatsisf+0x62>
    134c:	88 0f       	add	r24, r24
    134e:	96 95       	lsr	r25
    1350:	87 95       	ror	r24
    1352:	97 f9       	bld	r25, 7
    1354:	08 95       	ret

00001356 <__fp_inf>:
    1356:	97 f9       	bld	r25, 7
    1358:	9f 67       	ori	r25, 0x7F	; 127
    135a:	80 e8       	ldi	r24, 0x80	; 128
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	08 95       	ret

00001362 <__fp_nan>:
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	80 ec       	ldi	r24, 0xC0	; 192
    1366:	08 95       	ret

00001368 <__fp_powser>:
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	1f 93       	push	r17
    136e:	0f 93       	push	r16
    1370:	ff 92       	push	r15
    1372:	ef 92       	push	r14
    1374:	df 92       	push	r13
    1376:	7b 01       	movw	r14, r22
    1378:	8c 01       	movw	r16, r24
    137a:	68 94       	set
    137c:	06 c0       	rjmp	.+12     	; 0x138a <__fp_powser+0x22>
    137e:	da 2e       	mov	r13, r26
    1380:	ef 01       	movw	r28, r30
    1382:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3x>
    1386:	fe 01       	movw	r30, r28
    1388:	e8 94       	clt
    138a:	a5 91       	lpm	r26, Z+
    138c:	25 91       	lpm	r18, Z+
    138e:	35 91       	lpm	r19, Z+
    1390:	45 91       	lpm	r20, Z+
    1392:	55 91       	lpm	r21, Z+
    1394:	a6 f3       	brts	.-24     	; 0x137e <__fp_powser+0x16>
    1396:	ef 01       	movw	r28, r30
    1398:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3x>
    139c:	fe 01       	movw	r30, r28
    139e:	97 01       	movw	r18, r14
    13a0:	a8 01       	movw	r20, r16
    13a2:	da 94       	dec	r13
    13a4:	69 f7       	brne	.-38     	; 0x1380 <__fp_powser+0x18>
    13a6:	df 90       	pop	r13
    13a8:	ef 90       	pop	r14
    13aa:	ff 90       	pop	r15
    13ac:	0f 91       	pop	r16
    13ae:	1f 91       	pop	r17
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <__fp_pscA>:
    13b6:	00 24       	eor	r0, r0
    13b8:	0a 94       	dec	r0
    13ba:	16 16       	cp	r1, r22
    13bc:	17 06       	cpc	r1, r23
    13be:	18 06       	cpc	r1, r24
    13c0:	09 06       	cpc	r0, r25
    13c2:	08 95       	ret

000013c4 <__fp_pscB>:
    13c4:	00 24       	eor	r0, r0
    13c6:	0a 94       	dec	r0
    13c8:	12 16       	cp	r1, r18
    13ca:	13 06       	cpc	r1, r19
    13cc:	14 06       	cpc	r1, r20
    13ce:	05 06       	cpc	r0, r21
    13d0:	08 95       	ret

000013d2 <__fp_round>:
    13d2:	09 2e       	mov	r0, r25
    13d4:	03 94       	inc	r0
    13d6:	00 0c       	add	r0, r0
    13d8:	11 f4       	brne	.+4      	; 0x13de <__fp_round+0xc>
    13da:	88 23       	and	r24, r24
    13dc:	52 f0       	brmi	.+20     	; 0x13f2 <__fp_round+0x20>
    13de:	bb 0f       	add	r27, r27
    13e0:	40 f4       	brcc	.+16     	; 0x13f2 <__fp_round+0x20>
    13e2:	bf 2b       	or	r27, r31
    13e4:	11 f4       	brne	.+4      	; 0x13ea <__fp_round+0x18>
    13e6:	60 ff       	sbrs	r22, 0
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <__fp_round+0x20>
    13ea:	6f 5f       	subi	r22, 0xFF	; 255
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	8f 4f       	sbci	r24, 0xFF	; 255
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	08 95       	ret

000013f4 <__fp_split3>:
    13f4:	57 fd       	sbrc	r21, 7
    13f6:	90 58       	subi	r25, 0x80	; 128
    13f8:	44 0f       	add	r20, r20
    13fa:	55 1f       	adc	r21, r21
    13fc:	59 f0       	breq	.+22     	; 0x1414 <__fp_splitA+0x10>
    13fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1400:	71 f0       	breq	.+28     	; 0x141e <__fp_splitA+0x1a>
    1402:	47 95       	ror	r20

00001404 <__fp_splitA>:
    1404:	88 0f       	add	r24, r24
    1406:	97 fb       	bst	r25, 7
    1408:	99 1f       	adc	r25, r25
    140a:	61 f0       	breq	.+24     	; 0x1424 <__fp_splitA+0x20>
    140c:	9f 3f       	cpi	r25, 0xFF	; 255
    140e:	79 f0       	breq	.+30     	; 0x142e <__fp_splitA+0x2a>
    1410:	87 95       	ror	r24
    1412:	08 95       	ret
    1414:	12 16       	cp	r1, r18
    1416:	13 06       	cpc	r1, r19
    1418:	14 06       	cpc	r1, r20
    141a:	55 1f       	adc	r21, r21
    141c:	f2 cf       	rjmp	.-28     	; 0x1402 <__fp_split3+0xe>
    141e:	46 95       	lsr	r20
    1420:	f1 df       	rcall	.-30     	; 0x1404 <__fp_splitA>
    1422:	08 c0       	rjmp	.+16     	; 0x1434 <__fp_splitA+0x30>
    1424:	16 16       	cp	r1, r22
    1426:	17 06       	cpc	r1, r23
    1428:	18 06       	cpc	r1, r24
    142a:	99 1f       	adc	r25, r25
    142c:	f1 cf       	rjmp	.-30     	; 0x1410 <__fp_splitA+0xc>
    142e:	86 95       	lsr	r24
    1430:	71 05       	cpc	r23, r1
    1432:	61 05       	cpc	r22, r1
    1434:	08 94       	sec
    1436:	08 95       	ret

00001438 <__fp_zero>:
    1438:	e8 94       	clt

0000143a <__fp_szero>:
    143a:	bb 27       	eor	r27, r27
    143c:	66 27       	eor	r22, r22
    143e:	77 27       	eor	r23, r23
    1440:	cb 01       	movw	r24, r22
    1442:	97 f9       	bld	r25, 7
    1444:	08 95       	ret

00001446 <inverse>:
    1446:	9b 01       	movw	r18, r22
    1448:	ac 01       	movw	r20, r24
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	80 e8       	ldi	r24, 0x80	; 128
    1450:	9f e3       	ldi	r25, 0x3F	; 63
    1452:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__divsf3>

00001456 <__mulsf3>:
    1456:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3x>
    145a:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_round>
    145e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscA>
    1462:	38 f0       	brcs	.+14     	; 0x1472 <__mulsf3+0x1c>
    1464:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscB>
    1468:	20 f0       	brcs	.+8      	; 0x1472 <__mulsf3+0x1c>
    146a:	95 23       	and	r25, r21
    146c:	11 f0       	breq	.+4      	; 0x1472 <__mulsf3+0x1c>
    146e:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>
    1472:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_nan>
    1476:	11 24       	eor	r1, r1
    1478:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>

0000147c <__mulsf3x>:
    147c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_split3>
    1480:	70 f3       	brcs	.-36     	; 0x145e <__mulsf3+0x8>

00001482 <__mulsf3_pse>:
    1482:	95 9f       	mul	r25, r21
    1484:	c1 f3       	breq	.-16     	; 0x1476 <__mulsf3+0x20>
    1486:	95 0f       	add	r25, r21
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	55 1f       	adc	r21, r21
    148c:	62 9f       	mul	r22, r18
    148e:	f0 01       	movw	r30, r0
    1490:	72 9f       	mul	r23, r18
    1492:	bb 27       	eor	r27, r27
    1494:	f0 0d       	add	r31, r0
    1496:	b1 1d       	adc	r27, r1
    1498:	63 9f       	mul	r22, r19
    149a:	aa 27       	eor	r26, r26
    149c:	f0 0d       	add	r31, r0
    149e:	b1 1d       	adc	r27, r1
    14a0:	aa 1f       	adc	r26, r26
    14a2:	64 9f       	mul	r22, r20
    14a4:	66 27       	eor	r22, r22
    14a6:	b0 0d       	add	r27, r0
    14a8:	a1 1d       	adc	r26, r1
    14aa:	66 1f       	adc	r22, r22
    14ac:	82 9f       	mul	r24, r18
    14ae:	22 27       	eor	r18, r18
    14b0:	b0 0d       	add	r27, r0
    14b2:	a1 1d       	adc	r26, r1
    14b4:	62 1f       	adc	r22, r18
    14b6:	73 9f       	mul	r23, r19
    14b8:	b0 0d       	add	r27, r0
    14ba:	a1 1d       	adc	r26, r1
    14bc:	62 1f       	adc	r22, r18
    14be:	83 9f       	mul	r24, r19
    14c0:	a0 0d       	add	r26, r0
    14c2:	61 1d       	adc	r22, r1
    14c4:	22 1f       	adc	r18, r18
    14c6:	74 9f       	mul	r23, r20
    14c8:	33 27       	eor	r19, r19
    14ca:	a0 0d       	add	r26, r0
    14cc:	61 1d       	adc	r22, r1
    14ce:	23 1f       	adc	r18, r19
    14d0:	84 9f       	mul	r24, r20
    14d2:	60 0d       	add	r22, r0
    14d4:	21 1d       	adc	r18, r1
    14d6:	82 2f       	mov	r24, r18
    14d8:	76 2f       	mov	r23, r22
    14da:	6a 2f       	mov	r22, r26
    14dc:	11 24       	eor	r1, r1
    14de:	9f 57       	subi	r25, 0x7F	; 127
    14e0:	50 40       	sbci	r21, 0x00	; 0
    14e2:	9a f0       	brmi	.+38     	; 0x150a <__mulsf3_pse+0x88>
    14e4:	f1 f0       	breq	.+60     	; 0x1522 <__mulsf3_pse+0xa0>
    14e6:	88 23       	and	r24, r24
    14e8:	4a f0       	brmi	.+18     	; 0x14fc <__mulsf3_pse+0x7a>
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	bb 1f       	adc	r27, r27
    14f0:	66 1f       	adc	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	91 50       	subi	r25, 0x01	; 1
    14f8:	50 40       	sbci	r21, 0x00	; 0
    14fa:	a9 f7       	brne	.-22     	; 0x14e6 <__mulsf3_pse+0x64>
    14fc:	9e 3f       	cpi	r25, 0xFE	; 254
    14fe:	51 05       	cpc	r21, r1
    1500:	80 f0       	brcs	.+32     	; 0x1522 <__mulsf3_pse+0xa0>
    1502:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>
    1506:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>
    150a:	5f 3f       	cpi	r21, 0xFF	; 255
    150c:	e4 f3       	brlt	.-8      	; 0x1506 <__mulsf3_pse+0x84>
    150e:	98 3e       	cpi	r25, 0xE8	; 232
    1510:	d4 f3       	brlt	.-12     	; 0x1506 <__mulsf3_pse+0x84>
    1512:	86 95       	lsr	r24
    1514:	77 95       	ror	r23
    1516:	67 95       	ror	r22
    1518:	b7 95       	ror	r27
    151a:	f7 95       	ror	r31
    151c:	e7 95       	ror	r30
    151e:	9f 5f       	subi	r25, 0xFF	; 255
    1520:	c1 f7       	brne	.-16     	; 0x1512 <__mulsf3_pse+0x90>
    1522:	fe 2b       	or	r31, r30
    1524:	88 0f       	add	r24, r24
    1526:	91 1d       	adc	r25, r1
    1528:	96 95       	lsr	r25
    152a:	87 95       	ror	r24
    152c:	97 f9       	bld	r25, 7
    152e:	08 95       	ret

00001530 <square>:
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__mulsf3>

00001538 <__subsf3>:
    1538:	50 58       	subi	r21, 0x80	; 128

0000153a <__addsf3>:
    153a:	bb 27       	eor	r27, r27
    153c:	aa 27       	eor	r26, r26
    153e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3x>
    1542:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_round>
    1546:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscA>
    154a:	38 f0       	brcs	.+14     	; 0x155a <__addsf3+0x20>
    154c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscB>
    1550:	20 f0       	brcs	.+8      	; 0x155a <__addsf3+0x20>
    1552:	39 f4       	brne	.+14     	; 0x1562 <__addsf3+0x28>
    1554:	9f 3f       	cpi	r25, 0xFF	; 255
    1556:	19 f4       	brne	.+6      	; 0x155e <__addsf3+0x24>
    1558:	26 f4       	brtc	.+8      	; 0x1562 <__addsf3+0x28>
    155a:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_nan>
    155e:	0e f4       	brtc	.+2      	; 0x1562 <__addsf3+0x28>
    1560:	e0 95       	com	r30
    1562:	e7 fb       	bst	r30, 7
    1564:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>

00001568 <__addsf3x>:
    1568:	e9 2f       	mov	r30, r25
    156a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_split3>
    156e:	58 f3       	brcs	.-42     	; 0x1546 <__addsf3+0xc>
    1570:	ba 17       	cp	r27, r26
    1572:	62 07       	cpc	r22, r18
    1574:	73 07       	cpc	r23, r19
    1576:	84 07       	cpc	r24, r20
    1578:	95 07       	cpc	r25, r21
    157a:	20 f0       	brcs	.+8      	; 0x1584 <__addsf3x+0x1c>
    157c:	79 f4       	brne	.+30     	; 0x159c <__addsf3x+0x34>
    157e:	a6 f5       	brtc	.+104    	; 0x15e8 <__addsf3x+0x80>
    1580:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_zero>
    1584:	0e f4       	brtc	.+2      	; 0x1588 <__addsf3x+0x20>
    1586:	e0 95       	com	r30
    1588:	0b 2e       	mov	r0, r27
    158a:	ba 2f       	mov	r27, r26
    158c:	a0 2d       	mov	r26, r0
    158e:	0b 01       	movw	r0, r22
    1590:	b9 01       	movw	r22, r18
    1592:	90 01       	movw	r18, r0
    1594:	0c 01       	movw	r0, r24
    1596:	ca 01       	movw	r24, r20
    1598:	a0 01       	movw	r20, r0
    159a:	11 24       	eor	r1, r1
    159c:	ff 27       	eor	r31, r31
    159e:	59 1b       	sub	r21, r25
    15a0:	99 f0       	breq	.+38     	; 0x15c8 <__addsf3x+0x60>
    15a2:	59 3f       	cpi	r21, 0xF9	; 249
    15a4:	50 f4       	brcc	.+20     	; 0x15ba <__addsf3x+0x52>
    15a6:	50 3e       	cpi	r21, 0xE0	; 224
    15a8:	68 f1       	brcs	.+90     	; 0x1604 <__addsf3x+0x9c>
    15aa:	1a 16       	cp	r1, r26
    15ac:	f0 40       	sbci	r31, 0x00	; 0
    15ae:	a2 2f       	mov	r26, r18
    15b0:	23 2f       	mov	r18, r19
    15b2:	34 2f       	mov	r19, r20
    15b4:	44 27       	eor	r20, r20
    15b6:	58 5f       	subi	r21, 0xF8	; 248
    15b8:	f3 cf       	rjmp	.-26     	; 0x15a0 <__addsf3x+0x38>
    15ba:	46 95       	lsr	r20
    15bc:	37 95       	ror	r19
    15be:	27 95       	ror	r18
    15c0:	a7 95       	ror	r26
    15c2:	f0 40       	sbci	r31, 0x00	; 0
    15c4:	53 95       	inc	r21
    15c6:	c9 f7       	brne	.-14     	; 0x15ba <__addsf3x+0x52>
    15c8:	7e f4       	brtc	.+30     	; 0x15e8 <__addsf3x+0x80>
    15ca:	1f 16       	cp	r1, r31
    15cc:	ba 0b       	sbc	r27, r26
    15ce:	62 0b       	sbc	r22, r18
    15d0:	73 0b       	sbc	r23, r19
    15d2:	84 0b       	sbc	r24, r20
    15d4:	ba f0       	brmi	.+46     	; 0x1604 <__addsf3x+0x9c>
    15d6:	91 50       	subi	r25, 0x01	; 1
    15d8:	a1 f0       	breq	.+40     	; 0x1602 <__addsf3x+0x9a>
    15da:	ff 0f       	add	r31, r31
    15dc:	bb 1f       	adc	r27, r27
    15de:	66 1f       	adc	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	88 1f       	adc	r24, r24
    15e4:	c2 f7       	brpl	.-16     	; 0x15d6 <__addsf3x+0x6e>
    15e6:	0e c0       	rjmp	.+28     	; 0x1604 <__addsf3x+0x9c>
    15e8:	ba 0f       	add	r27, r26
    15ea:	62 1f       	adc	r22, r18
    15ec:	73 1f       	adc	r23, r19
    15ee:	84 1f       	adc	r24, r20
    15f0:	48 f4       	brcc	.+18     	; 0x1604 <__addsf3x+0x9c>
    15f2:	87 95       	ror	r24
    15f4:	77 95       	ror	r23
    15f6:	67 95       	ror	r22
    15f8:	b7 95       	ror	r27
    15fa:	f7 95       	ror	r31
    15fc:	9e 3f       	cpi	r25, 0xFE	; 254
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <__addsf3x+0x9a>
    1600:	b0 cf       	rjmp	.-160    	; 0x1562 <__addsf3+0x28>
    1602:	93 95       	inc	r25
    1604:	88 0f       	add	r24, r24
    1606:	08 f0       	brcs	.+2      	; 0x160a <__addsf3x+0xa2>
    1608:	99 27       	eor	r25, r25
    160a:	ee 0f       	add	r30, r30
    160c:	97 95       	ror	r25
    160e:	87 95       	ror	r24
    1610:	08 95       	ret

00001612 <__divmodhi4>:
    1612:	97 fb       	bst	r25, 7
    1614:	07 2e       	mov	r0, r23
    1616:	16 f4       	brtc	.+4      	; 0x161c <__divmodhi4+0xa>
    1618:	00 94       	com	r0
    161a:	07 d0       	rcall	.+14     	; 0x162a <__divmodhi4_neg1>
    161c:	77 fd       	sbrc	r23, 7
    161e:	09 d0       	rcall	.+18     	; 0x1632 <__divmodhi4_neg2>
    1620:	0e 94 1d 0b 	call	0x163a	; 0x163a <__udivmodhi4>
    1624:	07 fc       	sbrc	r0, 7
    1626:	05 d0       	rcall	.+10     	; 0x1632 <__divmodhi4_neg2>
    1628:	3e f4       	brtc	.+14     	; 0x1638 <__divmodhi4_exit>

0000162a <__divmodhi4_neg1>:
    162a:	90 95       	com	r25
    162c:	81 95       	neg	r24
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	08 95       	ret

00001632 <__divmodhi4_neg2>:
    1632:	70 95       	com	r23
    1634:	61 95       	neg	r22
    1636:	7f 4f       	sbci	r23, 0xFF	; 255

00001638 <__divmodhi4_exit>:
    1638:	08 95       	ret

0000163a <__udivmodhi4>:
    163a:	aa 1b       	sub	r26, r26
    163c:	bb 1b       	sub	r27, r27
    163e:	51 e1       	ldi	r21, 0x11	; 17
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <__udivmodhi4_ep>

00001642 <__udivmodhi4_loop>:
    1642:	aa 1f       	adc	r26, r26
    1644:	bb 1f       	adc	r27, r27
    1646:	a6 17       	cp	r26, r22
    1648:	b7 07       	cpc	r27, r23
    164a:	10 f0       	brcs	.+4      	; 0x1650 <__udivmodhi4_ep>
    164c:	a6 1b       	sub	r26, r22
    164e:	b7 0b       	sbc	r27, r23

00001650 <__udivmodhi4_ep>:
    1650:	88 1f       	adc	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	5a 95       	dec	r21
    1656:	a9 f7       	brne	.-22     	; 0x1642 <__udivmodhi4_loop>
    1658:	80 95       	com	r24
    165a:	90 95       	com	r25
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	08 95       	ret

00001662 <__itoa_ncheck>:
    1662:	bb 27       	eor	r27, r27
    1664:	4a 30       	cpi	r20, 0x0A	; 10
    1666:	31 f4       	brne	.+12     	; 0x1674 <__itoa_ncheck+0x12>
    1668:	99 23       	and	r25, r25
    166a:	22 f4       	brpl	.+8      	; 0x1674 <__itoa_ncheck+0x12>
    166c:	bd e2       	ldi	r27, 0x2D	; 45
    166e:	90 95       	com	r25
    1670:	81 95       	neg	r24
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__utoa_common>

00001678 <__utoa_ncheck>:
    1678:	bb 27       	eor	r27, r27

0000167a <__utoa_common>:
    167a:	fb 01       	movw	r30, r22
    167c:	55 27       	eor	r21, r21
    167e:	aa 27       	eor	r26, r26
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	aa 1f       	adc	r26, r26
    1686:	a4 17       	cp	r26, r20
    1688:	10 f0       	brcs	.+4      	; 0x168e <__utoa_common+0x14>
    168a:	a4 1b       	sub	r26, r20
    168c:	83 95       	inc	r24
    168e:	50 51       	subi	r21, 0x10	; 16
    1690:	b9 f7       	brne	.-18     	; 0x1680 <__utoa_common+0x6>
    1692:	a0 5d       	subi	r26, 0xD0	; 208
    1694:	aa 33       	cpi	r26, 0x3A	; 58
    1696:	08 f0       	brcs	.+2      	; 0x169a <__utoa_common+0x20>
    1698:	a9 5d       	subi	r26, 0xD9	; 217
    169a:	a1 93       	st	Z+, r26
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	79 f7       	brne	.-34     	; 0x167e <__utoa_common+0x4>
    16a0:	b1 11       	cpse	r27, r1
    16a2:	b1 93       	st	Z+, r27
    16a4:	11 92       	st	Z+, r1
    16a6:	cb 01       	movw	r24, r22
    16a8:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <strrev>

000016ac <fdevopen>:
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	31 f4       	brne	.+12     	; 0x16c4 <fdevopen+0x18>
    16b8:	61 15       	cp	r22, r1
    16ba:	71 05       	cpc	r23, r1
    16bc:	19 f4       	brne	.+6      	; 0x16c4 <fdevopen+0x18>
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	3a c0       	rjmp	.+116    	; 0x1738 <fdevopen+0x8c>
    16c4:	8b 01       	movw	r16, r22
    16c6:	ec 01       	movw	r28, r24
    16c8:	6e e0       	ldi	r22, 0x0E	; 14
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <calloc>
    16d4:	fc 01       	movw	r30, r24
    16d6:	89 2b       	or	r24, r25
    16d8:	91 f3       	breq	.-28     	; 0x16be <fdevopen+0x12>
    16da:	80 e8       	ldi	r24, 0x80	; 128
    16dc:	83 83       	std	Z+3, r24	; 0x03
    16de:	01 15       	cp	r16, r1
    16e0:	11 05       	cpc	r17, r1
    16e2:	71 f0       	breq	.+28     	; 0x1700 <fdevopen+0x54>
    16e4:	13 87       	std	Z+11, r17	; 0x0b
    16e6:	02 87       	std	Z+10, r16	; 0x0a
    16e8:	81 e8       	ldi	r24, 0x81	; 129
    16ea:	83 83       	std	Z+3, r24	; 0x03
    16ec:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <__iob>
    16f0:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <__iob+0x1>
    16f4:	89 2b       	or	r24, r25
    16f6:	21 f4       	brne	.+8      	; 0x1700 <fdevopen+0x54>
    16f8:	f0 93 f6 03 	sts	0x03F6, r31	; 0x8003f6 <__iob+0x1>
    16fc:	e0 93 f5 03 	sts	0x03F5, r30	; 0x8003f5 <__iob>
    1700:	20 97       	sbiw	r28, 0x00	; 0
    1702:	c9 f0       	breq	.+50     	; 0x1736 <fdevopen+0x8a>
    1704:	d1 87       	std	Z+9, r29	; 0x09
    1706:	c0 87       	std	Z+8, r28	; 0x08
    1708:	83 81       	ldd	r24, Z+3	; 0x03
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	83 83       	std	Z+3, r24	; 0x03
    170e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <__iob+0x2>
    1712:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <__iob+0x3>
    1716:	89 2b       	or	r24, r25
    1718:	71 f4       	brne	.+28     	; 0x1736 <fdevopen+0x8a>
    171a:	f0 93 f8 03 	sts	0x03F8, r31	; 0x8003f8 <__iob+0x3>
    171e:	e0 93 f7 03 	sts	0x03F7, r30	; 0x8003f7 <__iob+0x2>
    1722:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <__iob+0x4>
    1726:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <__iob+0x5>
    172a:	89 2b       	or	r24, r25
    172c:	21 f4       	brne	.+8      	; 0x1736 <fdevopen+0x8a>
    172e:	f0 93 fa 03 	sts	0x03FA, r31	; 0x8003fa <__iob+0x5>
    1732:	e0 93 f9 03 	sts	0x03F9, r30	; 0x8003f9 <__iob+0x4>
    1736:	cf 01       	movw	r24, r30
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <printf>:
    1742:	a0 e0       	ldi	r26, 0x00	; 0
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 ea       	ldi	r30, 0xA7	; 167
    1748:	fb e0       	ldi	r31, 0x0B	; 11
    174a:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__prologue_saves__+0x20>
    174e:	ae 01       	movw	r20, r28
    1750:	4b 5f       	subi	r20, 0xFB	; 251
    1752:	5f 4f       	sbci	r21, 0xFF	; 255
    1754:	fa 01       	movw	r30, r20
    1756:	61 91       	ld	r22, Z+
    1758:	71 91       	ld	r23, Z+
    175a:	af 01       	movw	r20, r30
    175c:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <__iob+0x2>
    1760:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <__iob+0x3>
    1764:	0e 94 b7 0b 	call	0x176e	; 0x176e <vfprintf>
    1768:	e2 e0       	ldi	r30, 0x02	; 2
    176a:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__epilogue_restores__+0x20>

0000176e <vfprintf>:
    176e:	ab e0       	ldi	r26, 0x0B	; 11
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ed eb       	ldi	r30, 0xBD	; 189
    1774:	fb e0       	ldi	r31, 0x0B	; 11
    1776:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__prologue_saves__>
    177a:	6c 01       	movw	r12, r24
    177c:	7b 01       	movw	r14, r22
    177e:	8a 01       	movw	r16, r20
    1780:	fc 01       	movw	r30, r24
    1782:	17 82       	std	Z+7, r1	; 0x07
    1784:	16 82       	std	Z+6, r1	; 0x06
    1786:	83 81       	ldd	r24, Z+3	; 0x03
    1788:	81 ff       	sbrs	r24, 1
    178a:	cc c1       	rjmp	.+920    	; 0x1b24 <vfprintf+0x3b6>
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	3c 01       	movw	r6, r24
    1792:	f6 01       	movw	r30, r12
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	f7 01       	movw	r30, r14
    1798:	93 fd       	sbrc	r25, 3
    179a:	85 91       	lpm	r24, Z+
    179c:	93 ff       	sbrs	r25, 3
    179e:	81 91       	ld	r24, Z+
    17a0:	7f 01       	movw	r14, r30
    17a2:	88 23       	and	r24, r24
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <vfprintf+0x3a>
    17a6:	ba c1       	rjmp	.+884    	; 0x1b1c <vfprintf+0x3ae>
    17a8:	85 32       	cpi	r24, 0x25	; 37
    17aa:	39 f4       	brne	.+14     	; 0x17ba <vfprintf+0x4c>
    17ac:	93 fd       	sbrc	r25, 3
    17ae:	85 91       	lpm	r24, Z+
    17b0:	93 ff       	sbrs	r25, 3
    17b2:	81 91       	ld	r24, Z+
    17b4:	7f 01       	movw	r14, r30
    17b6:	85 32       	cpi	r24, 0x25	; 37
    17b8:	29 f4       	brne	.+10     	; 0x17c4 <vfprintf+0x56>
    17ba:	b6 01       	movw	r22, r12
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    17c2:	e7 cf       	rjmp	.-50     	; 0x1792 <vfprintf+0x24>
    17c4:	91 2c       	mov	r9, r1
    17c6:	21 2c       	mov	r2, r1
    17c8:	31 2c       	mov	r3, r1
    17ca:	ff e1       	ldi	r31, 0x1F	; 31
    17cc:	f3 15       	cp	r31, r3
    17ce:	d8 f0       	brcs	.+54     	; 0x1806 <vfprintf+0x98>
    17d0:	8b 32       	cpi	r24, 0x2B	; 43
    17d2:	79 f0       	breq	.+30     	; 0x17f2 <vfprintf+0x84>
    17d4:	38 f4       	brcc	.+14     	; 0x17e4 <vfprintf+0x76>
    17d6:	80 32       	cpi	r24, 0x20	; 32
    17d8:	79 f0       	breq	.+30     	; 0x17f8 <vfprintf+0x8a>
    17da:	83 32       	cpi	r24, 0x23	; 35
    17dc:	a1 f4       	brne	.+40     	; 0x1806 <vfprintf+0x98>
    17de:	23 2d       	mov	r18, r3
    17e0:	20 61       	ori	r18, 0x10	; 16
    17e2:	1d c0       	rjmp	.+58     	; 0x181e <vfprintf+0xb0>
    17e4:	8d 32       	cpi	r24, 0x2D	; 45
    17e6:	61 f0       	breq	.+24     	; 0x1800 <vfprintf+0x92>
    17e8:	80 33       	cpi	r24, 0x30	; 48
    17ea:	69 f4       	brne	.+26     	; 0x1806 <vfprintf+0x98>
    17ec:	23 2d       	mov	r18, r3
    17ee:	21 60       	ori	r18, 0x01	; 1
    17f0:	16 c0       	rjmp	.+44     	; 0x181e <vfprintf+0xb0>
    17f2:	83 2d       	mov	r24, r3
    17f4:	82 60       	ori	r24, 0x02	; 2
    17f6:	38 2e       	mov	r3, r24
    17f8:	e3 2d       	mov	r30, r3
    17fa:	e4 60       	ori	r30, 0x04	; 4
    17fc:	3e 2e       	mov	r3, r30
    17fe:	2a c0       	rjmp	.+84     	; 0x1854 <vfprintf+0xe6>
    1800:	f3 2d       	mov	r31, r3
    1802:	f8 60       	ori	r31, 0x08	; 8
    1804:	1d c0       	rjmp	.+58     	; 0x1840 <vfprintf+0xd2>
    1806:	37 fc       	sbrc	r3, 7
    1808:	2d c0       	rjmp	.+90     	; 0x1864 <vfprintf+0xf6>
    180a:	20 ed       	ldi	r18, 0xD0	; 208
    180c:	28 0f       	add	r18, r24
    180e:	2a 30       	cpi	r18, 0x0A	; 10
    1810:	40 f0       	brcs	.+16     	; 0x1822 <vfprintf+0xb4>
    1812:	8e 32       	cpi	r24, 0x2E	; 46
    1814:	b9 f4       	brne	.+46     	; 0x1844 <vfprintf+0xd6>
    1816:	36 fc       	sbrc	r3, 6
    1818:	81 c1       	rjmp	.+770    	; 0x1b1c <vfprintf+0x3ae>
    181a:	23 2d       	mov	r18, r3
    181c:	20 64       	ori	r18, 0x40	; 64
    181e:	32 2e       	mov	r3, r18
    1820:	19 c0       	rjmp	.+50     	; 0x1854 <vfprintf+0xe6>
    1822:	36 fe       	sbrs	r3, 6
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <vfprintf+0xc4>
    1826:	8a e0       	ldi	r24, 0x0A	; 10
    1828:	98 9e       	mul	r9, r24
    182a:	20 0d       	add	r18, r0
    182c:	11 24       	eor	r1, r1
    182e:	92 2e       	mov	r9, r18
    1830:	11 c0       	rjmp	.+34     	; 0x1854 <vfprintf+0xe6>
    1832:	ea e0       	ldi	r30, 0x0A	; 10
    1834:	2e 9e       	mul	r2, r30
    1836:	20 0d       	add	r18, r0
    1838:	11 24       	eor	r1, r1
    183a:	22 2e       	mov	r2, r18
    183c:	f3 2d       	mov	r31, r3
    183e:	f0 62       	ori	r31, 0x20	; 32
    1840:	3f 2e       	mov	r3, r31
    1842:	08 c0       	rjmp	.+16     	; 0x1854 <vfprintf+0xe6>
    1844:	8c 36       	cpi	r24, 0x6C	; 108
    1846:	21 f4       	brne	.+8      	; 0x1850 <vfprintf+0xe2>
    1848:	83 2d       	mov	r24, r3
    184a:	80 68       	ori	r24, 0x80	; 128
    184c:	38 2e       	mov	r3, r24
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <vfprintf+0xe6>
    1850:	88 36       	cpi	r24, 0x68	; 104
    1852:	41 f4       	brne	.+16     	; 0x1864 <vfprintf+0xf6>
    1854:	f7 01       	movw	r30, r14
    1856:	93 fd       	sbrc	r25, 3
    1858:	85 91       	lpm	r24, Z+
    185a:	93 ff       	sbrs	r25, 3
    185c:	81 91       	ld	r24, Z+
    185e:	7f 01       	movw	r14, r30
    1860:	81 11       	cpse	r24, r1
    1862:	b3 cf       	rjmp	.-154    	; 0x17ca <vfprintf+0x5c>
    1864:	98 2f       	mov	r25, r24
    1866:	9f 7d       	andi	r25, 0xDF	; 223
    1868:	95 54       	subi	r25, 0x45	; 69
    186a:	93 30       	cpi	r25, 0x03	; 3
    186c:	28 f4       	brcc	.+10     	; 0x1878 <vfprintf+0x10a>
    186e:	0c 5f       	subi	r16, 0xFC	; 252
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	9f e3       	ldi	r25, 0x3F	; 63
    1874:	99 83       	std	Y+1, r25	; 0x01
    1876:	0d c0       	rjmp	.+26     	; 0x1892 <vfprintf+0x124>
    1878:	83 36       	cpi	r24, 0x63	; 99
    187a:	31 f0       	breq	.+12     	; 0x1888 <vfprintf+0x11a>
    187c:	83 37       	cpi	r24, 0x73	; 115
    187e:	71 f0       	breq	.+28     	; 0x189c <vfprintf+0x12e>
    1880:	83 35       	cpi	r24, 0x53	; 83
    1882:	09 f0       	breq	.+2      	; 0x1886 <vfprintf+0x118>
    1884:	59 c0       	rjmp	.+178    	; 0x1938 <vfprintf+0x1ca>
    1886:	21 c0       	rjmp	.+66     	; 0x18ca <vfprintf+0x15c>
    1888:	f8 01       	movw	r30, r16
    188a:	80 81       	ld	r24, Z
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	0e 5f       	subi	r16, 0xFE	; 254
    1890:	1f 4f       	sbci	r17, 0xFF	; 255
    1892:	88 24       	eor	r8, r8
    1894:	83 94       	inc	r8
    1896:	91 2c       	mov	r9, r1
    1898:	53 01       	movw	r10, r6
    189a:	13 c0       	rjmp	.+38     	; 0x18c2 <vfprintf+0x154>
    189c:	28 01       	movw	r4, r16
    189e:	f2 e0       	ldi	r31, 0x02	; 2
    18a0:	4f 0e       	add	r4, r31
    18a2:	51 1c       	adc	r5, r1
    18a4:	f8 01       	movw	r30, r16
    18a6:	a0 80       	ld	r10, Z
    18a8:	b1 80       	ldd	r11, Z+1	; 0x01
    18aa:	36 fe       	sbrs	r3, 6
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <vfprintf+0x146>
    18ae:	69 2d       	mov	r22, r9
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <vfprintf+0x14a>
    18b4:	6f ef       	ldi	r22, 0xFF	; 255
    18b6:	7f ef       	ldi	r23, 0xFF	; 255
    18b8:	c5 01       	movw	r24, r10
    18ba:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <strnlen>
    18be:	4c 01       	movw	r8, r24
    18c0:	82 01       	movw	r16, r4
    18c2:	f3 2d       	mov	r31, r3
    18c4:	ff 77       	andi	r31, 0x7F	; 127
    18c6:	3f 2e       	mov	r3, r31
    18c8:	16 c0       	rjmp	.+44     	; 0x18f6 <vfprintf+0x188>
    18ca:	28 01       	movw	r4, r16
    18cc:	22 e0       	ldi	r18, 0x02	; 2
    18ce:	42 0e       	add	r4, r18
    18d0:	51 1c       	adc	r5, r1
    18d2:	f8 01       	movw	r30, r16
    18d4:	a0 80       	ld	r10, Z
    18d6:	b1 80       	ldd	r11, Z+1	; 0x01
    18d8:	36 fe       	sbrs	r3, 6
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <vfprintf+0x174>
    18dc:	69 2d       	mov	r22, r9
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <vfprintf+0x178>
    18e2:	6f ef       	ldi	r22, 0xFF	; 255
    18e4:	7f ef       	ldi	r23, 0xFF	; 255
    18e6:	c5 01       	movw	r24, r10
    18e8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strnlen_P>
    18ec:	4c 01       	movw	r8, r24
    18ee:	f3 2d       	mov	r31, r3
    18f0:	f0 68       	ori	r31, 0x80	; 128
    18f2:	3f 2e       	mov	r3, r31
    18f4:	82 01       	movw	r16, r4
    18f6:	33 fc       	sbrc	r3, 3
    18f8:	1b c0       	rjmp	.+54     	; 0x1930 <vfprintf+0x1c2>
    18fa:	82 2d       	mov	r24, r2
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	88 16       	cp	r8, r24
    1900:	99 06       	cpc	r9, r25
    1902:	b0 f4       	brcc	.+44     	; 0x1930 <vfprintf+0x1c2>
    1904:	b6 01       	movw	r22, r12
    1906:	80 e2       	ldi	r24, 0x20	; 32
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    190e:	2a 94       	dec	r2
    1910:	f4 cf       	rjmp	.-24     	; 0x18fa <vfprintf+0x18c>
    1912:	f5 01       	movw	r30, r10
    1914:	37 fc       	sbrc	r3, 7
    1916:	85 91       	lpm	r24, Z+
    1918:	37 fe       	sbrs	r3, 7
    191a:	81 91       	ld	r24, Z+
    191c:	5f 01       	movw	r10, r30
    191e:	b6 01       	movw	r22, r12
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1926:	21 10       	cpse	r2, r1
    1928:	2a 94       	dec	r2
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	82 1a       	sub	r8, r18
    192e:	91 08       	sbc	r9, r1
    1930:	81 14       	cp	r8, r1
    1932:	91 04       	cpc	r9, r1
    1934:	71 f7       	brne	.-36     	; 0x1912 <vfprintf+0x1a4>
    1936:	e8 c0       	rjmp	.+464    	; 0x1b08 <vfprintf+0x39a>
    1938:	84 36       	cpi	r24, 0x64	; 100
    193a:	11 f0       	breq	.+4      	; 0x1940 <vfprintf+0x1d2>
    193c:	89 36       	cpi	r24, 0x69	; 105
    193e:	41 f5       	brne	.+80     	; 0x1990 <vfprintf+0x222>
    1940:	f8 01       	movw	r30, r16
    1942:	37 fe       	sbrs	r3, 7
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <vfprintf+0x1e6>
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	0c 5f       	subi	r16, 0xFC	; 252
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	08 c0       	rjmp	.+16     	; 0x1964 <vfprintf+0x1f6>
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	07 2e       	mov	r0, r23
    195a:	00 0c       	add	r0, r0
    195c:	88 0b       	sbc	r24, r24
    195e:	99 0b       	sbc	r25, r25
    1960:	0e 5f       	subi	r16, 0xFE	; 254
    1962:	1f 4f       	sbci	r17, 0xFF	; 255
    1964:	f3 2d       	mov	r31, r3
    1966:	ff 76       	andi	r31, 0x6F	; 111
    1968:	3f 2e       	mov	r3, r31
    196a:	97 ff       	sbrs	r25, 7
    196c:	09 c0       	rjmp	.+18     	; 0x1980 <vfprintf+0x212>
    196e:	90 95       	com	r25
    1970:	80 95       	com	r24
    1972:	70 95       	com	r23
    1974:	61 95       	neg	r22
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	8f 4f       	sbci	r24, 0xFF	; 255
    197a:	9f 4f       	sbci	r25, 0xFF	; 255
    197c:	f0 68       	ori	r31, 0x80	; 128
    197e:	3f 2e       	mov	r3, r31
    1980:	2a e0       	ldi	r18, 0x0A	; 10
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	a3 01       	movw	r20, r6
    1986:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__ultoa_invert>
    198a:	88 2e       	mov	r8, r24
    198c:	86 18       	sub	r8, r6
    198e:	45 c0       	rjmp	.+138    	; 0x1a1a <vfprintf+0x2ac>
    1990:	85 37       	cpi	r24, 0x75	; 117
    1992:	31 f4       	brne	.+12     	; 0x19a0 <vfprintf+0x232>
    1994:	23 2d       	mov	r18, r3
    1996:	2f 7e       	andi	r18, 0xEF	; 239
    1998:	b2 2e       	mov	r11, r18
    199a:	2a e0       	ldi	r18, 0x0A	; 10
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	25 c0       	rjmp	.+74     	; 0x19ea <vfprintf+0x27c>
    19a0:	93 2d       	mov	r25, r3
    19a2:	99 7f       	andi	r25, 0xF9	; 249
    19a4:	b9 2e       	mov	r11, r25
    19a6:	8f 36       	cpi	r24, 0x6F	; 111
    19a8:	c1 f0       	breq	.+48     	; 0x19da <vfprintf+0x26c>
    19aa:	18 f4       	brcc	.+6      	; 0x19b2 <vfprintf+0x244>
    19ac:	88 35       	cpi	r24, 0x58	; 88
    19ae:	79 f0       	breq	.+30     	; 0x19ce <vfprintf+0x260>
    19b0:	b5 c0       	rjmp	.+362    	; 0x1b1c <vfprintf+0x3ae>
    19b2:	80 37       	cpi	r24, 0x70	; 112
    19b4:	19 f0       	breq	.+6      	; 0x19bc <vfprintf+0x24e>
    19b6:	88 37       	cpi	r24, 0x78	; 120
    19b8:	21 f0       	breq	.+8      	; 0x19c2 <vfprintf+0x254>
    19ba:	b0 c0       	rjmp	.+352    	; 0x1b1c <vfprintf+0x3ae>
    19bc:	e9 2f       	mov	r30, r25
    19be:	e0 61       	ori	r30, 0x10	; 16
    19c0:	be 2e       	mov	r11, r30
    19c2:	b4 fe       	sbrs	r11, 4
    19c4:	0d c0       	rjmp	.+26     	; 0x19e0 <vfprintf+0x272>
    19c6:	fb 2d       	mov	r31, r11
    19c8:	f4 60       	ori	r31, 0x04	; 4
    19ca:	bf 2e       	mov	r11, r31
    19cc:	09 c0       	rjmp	.+18     	; 0x19e0 <vfprintf+0x272>
    19ce:	34 fe       	sbrs	r3, 4
    19d0:	0a c0       	rjmp	.+20     	; 0x19e6 <vfprintf+0x278>
    19d2:	29 2f       	mov	r18, r25
    19d4:	26 60       	ori	r18, 0x06	; 6
    19d6:	b2 2e       	mov	r11, r18
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <vfprintf+0x278>
    19da:	28 e0       	ldi	r18, 0x08	; 8
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	05 c0       	rjmp	.+10     	; 0x19ea <vfprintf+0x27c>
    19e0:	20 e1       	ldi	r18, 0x10	; 16
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <vfprintf+0x27c>
    19e6:	20 e1       	ldi	r18, 0x10	; 16
    19e8:	32 e0       	ldi	r19, 0x02	; 2
    19ea:	f8 01       	movw	r30, r16
    19ec:	b7 fe       	sbrs	r11, 7
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <vfprintf+0x290>
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	0c 5f       	subi	r16, 0xFC	; 252
    19fa:	1f 4f       	sbci	r17, 0xFF	; 255
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <vfprintf+0x29c>
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 5f       	subi	r16, 0xFE	; 254
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	a3 01       	movw	r20, r6
    1a0c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__ultoa_invert>
    1a10:	88 2e       	mov	r8, r24
    1a12:	86 18       	sub	r8, r6
    1a14:	fb 2d       	mov	r31, r11
    1a16:	ff 77       	andi	r31, 0x7F	; 127
    1a18:	3f 2e       	mov	r3, r31
    1a1a:	36 fe       	sbrs	r3, 6
    1a1c:	0d c0       	rjmp	.+26     	; 0x1a38 <vfprintf+0x2ca>
    1a1e:	23 2d       	mov	r18, r3
    1a20:	2e 7f       	andi	r18, 0xFE	; 254
    1a22:	a2 2e       	mov	r10, r18
    1a24:	89 14       	cp	r8, r9
    1a26:	58 f4       	brcc	.+22     	; 0x1a3e <vfprintf+0x2d0>
    1a28:	34 fe       	sbrs	r3, 4
    1a2a:	0b c0       	rjmp	.+22     	; 0x1a42 <vfprintf+0x2d4>
    1a2c:	32 fc       	sbrc	r3, 2
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <vfprintf+0x2d4>
    1a30:	83 2d       	mov	r24, r3
    1a32:	8e 7e       	andi	r24, 0xEE	; 238
    1a34:	a8 2e       	mov	r10, r24
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <vfprintf+0x2d4>
    1a38:	b8 2c       	mov	r11, r8
    1a3a:	a3 2c       	mov	r10, r3
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <vfprintf+0x2d6>
    1a3e:	b8 2c       	mov	r11, r8
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <vfprintf+0x2d6>
    1a42:	b9 2c       	mov	r11, r9
    1a44:	a4 fe       	sbrs	r10, 4
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <vfprintf+0x2f8>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e8 0d       	add	r30, r8
    1a4c:	f1 1d       	adc	r31, r1
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 33       	cpi	r24, 0x30	; 48
    1a52:	21 f4       	brne	.+8      	; 0x1a5c <vfprintf+0x2ee>
    1a54:	9a 2d       	mov	r25, r10
    1a56:	99 7e       	andi	r25, 0xE9	; 233
    1a58:	a9 2e       	mov	r10, r25
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <vfprintf+0x300>
    1a5c:	a2 fe       	sbrs	r10, 2
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <vfprintf+0x2fe>
    1a60:	b3 94       	inc	r11
    1a62:	b3 94       	inc	r11
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <vfprintf+0x300>
    1a66:	8a 2d       	mov	r24, r10
    1a68:	86 78       	andi	r24, 0x86	; 134
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <vfprintf+0x300>
    1a6c:	b3 94       	inc	r11
    1a6e:	a3 fc       	sbrc	r10, 3
    1a70:	11 c0       	rjmp	.+34     	; 0x1a94 <vfprintf+0x326>
    1a72:	a0 fe       	sbrs	r10, 0
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <vfprintf+0x314>
    1a76:	b2 14       	cp	r11, r2
    1a78:	88 f4       	brcc	.+34     	; 0x1a9c <vfprintf+0x32e>
    1a7a:	28 0c       	add	r2, r8
    1a7c:	92 2c       	mov	r9, r2
    1a7e:	9b 18       	sub	r9, r11
    1a80:	0e c0       	rjmp	.+28     	; 0x1a9e <vfprintf+0x330>
    1a82:	b2 14       	cp	r11, r2
    1a84:	60 f4       	brcc	.+24     	; 0x1a9e <vfprintf+0x330>
    1a86:	b6 01       	movw	r22, r12
    1a88:	80 e2       	ldi	r24, 0x20	; 32
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1a90:	b3 94       	inc	r11
    1a92:	f7 cf       	rjmp	.-18     	; 0x1a82 <vfprintf+0x314>
    1a94:	b2 14       	cp	r11, r2
    1a96:	18 f4       	brcc	.+6      	; 0x1a9e <vfprintf+0x330>
    1a98:	2b 18       	sub	r2, r11
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <vfprintf+0x332>
    1a9c:	98 2c       	mov	r9, r8
    1a9e:	21 2c       	mov	r2, r1
    1aa0:	a4 fe       	sbrs	r10, 4
    1aa2:	10 c0       	rjmp	.+32     	; 0x1ac4 <vfprintf+0x356>
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	80 e3       	ldi	r24, 0x30	; 48
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1aae:	a2 fe       	sbrs	r10, 2
    1ab0:	17 c0       	rjmp	.+46     	; 0x1ae0 <vfprintf+0x372>
    1ab2:	a1 fc       	sbrc	r10, 1
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <vfprintf+0x34e>
    1ab6:	88 e7       	ldi	r24, 0x78	; 120
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <vfprintf+0x352>
    1abc:	88 e5       	ldi	r24, 0x58	; 88
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	0c c0       	rjmp	.+24     	; 0x1adc <vfprintf+0x36e>
    1ac4:	8a 2d       	mov	r24, r10
    1ac6:	86 78       	andi	r24, 0x86	; 134
    1ac8:	59 f0       	breq	.+22     	; 0x1ae0 <vfprintf+0x372>
    1aca:	a1 fe       	sbrs	r10, 1
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vfprintf+0x364>
    1ace:	8b e2       	ldi	r24, 0x2B	; 43
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <vfprintf+0x366>
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	a7 fc       	sbrc	r10, 7
    1ad6:	8d e2       	ldi	r24, 0x2D	; 45
    1ad8:	b6 01       	movw	r22, r12
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1ae0:	89 14       	cp	r8, r9
    1ae2:	38 f4       	brcc	.+14     	; 0x1af2 <vfprintf+0x384>
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	80 e3       	ldi	r24, 0x30	; 48
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1aee:	9a 94       	dec	r9
    1af0:	f7 cf       	rjmp	.-18     	; 0x1ae0 <vfprintf+0x372>
    1af2:	8a 94       	dec	r8
    1af4:	f3 01       	movw	r30, r6
    1af6:	e8 0d       	add	r30, r8
    1af8:	f1 1d       	adc	r31, r1
    1afa:	80 81       	ld	r24, Z
    1afc:	b6 01       	movw	r22, r12
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1b04:	81 10       	cpse	r8, r1
    1b06:	f5 cf       	rjmp	.-22     	; 0x1af2 <vfprintf+0x384>
    1b08:	22 20       	and	r2, r2
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <vfprintf+0x3a0>
    1b0c:	42 ce       	rjmp	.-892    	; 0x1792 <vfprintf+0x24>
    1b0e:	b6 01       	movw	r22, r12
    1b10:	80 e2       	ldi	r24, 0x20	; 32
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1b18:	2a 94       	dec	r2
    1b1a:	f6 cf       	rjmp	.-20     	; 0x1b08 <vfprintf+0x39a>
    1b1c:	f6 01       	movw	r30, r12
    1b1e:	86 81       	ldd	r24, Z+6	; 0x06
    1b20:	97 81       	ldd	r25, Z+7	; 0x07
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <vfprintf+0x3ba>
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	9f ef       	ldi	r25, 0xFF	; 255
    1b28:	2b 96       	adiw	r28, 0x0b	; 11
    1b2a:	e2 e1       	ldi	r30, 0x12	; 18
    1b2c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__epilogue_restores__>

00001b30 <calloc>:
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	86 9f       	mul	r24, r22
    1b3a:	80 01       	movw	r16, r0
    1b3c:	87 9f       	mul	r24, r23
    1b3e:	10 0d       	add	r17, r0
    1b40:	96 9f       	mul	r25, r22
    1b42:	10 0d       	add	r17, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	c8 01       	movw	r24, r16
    1b48:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <malloc>
    1b4c:	ec 01       	movw	r28, r24
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	29 f0       	breq	.+10     	; 0x1b5c <calloc+0x2c>
    1b52:	a8 01       	movw	r20, r16
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <memset>
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	08 95       	ret

00001b68 <malloc>:
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	91 05       	cpc	r25, r1
    1b74:	10 f4       	brcc	.+4      	; 0x1b7a <malloc+0x12>
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <__flp>
    1b7e:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <__flp+0x1>
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	a0 e0       	ldi	r26, 0x00	; 0
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	30 97       	sbiw	r30, 0x00	; 0
    1b8c:	19 f1       	breq	.+70     	; 0x1bd4 <malloc+0x6c>
    1b8e:	40 81       	ld	r20, Z
    1b90:	51 81       	ldd	r21, Z+1	; 0x01
    1b92:	02 81       	ldd	r16, Z+2	; 0x02
    1b94:	13 81       	ldd	r17, Z+3	; 0x03
    1b96:	48 17       	cp	r20, r24
    1b98:	59 07       	cpc	r21, r25
    1b9a:	c8 f0       	brcs	.+50     	; 0x1bce <malloc+0x66>
    1b9c:	84 17       	cp	r24, r20
    1b9e:	95 07       	cpc	r25, r21
    1ba0:	69 f4       	brne	.+26     	; 0x1bbc <malloc+0x54>
    1ba2:	10 97       	sbiw	r26, 0x00	; 0
    1ba4:	31 f0       	breq	.+12     	; 0x1bb2 <malloc+0x4a>
    1ba6:	12 96       	adiw	r26, 0x02	; 2
    1ba8:	0c 93       	st	X, r16
    1baa:	12 97       	sbiw	r26, 0x02	; 2
    1bac:	13 96       	adiw	r26, 0x03	; 3
    1bae:	1c 93       	st	X, r17
    1bb0:	27 c0       	rjmp	.+78     	; 0x1c00 <malloc+0x98>
    1bb2:	00 93 fd 03 	sts	0x03FD, r16	; 0x8003fd <__flp>
    1bb6:	10 93 fe 03 	sts	0x03FE, r17	; 0x8003fe <__flp+0x1>
    1bba:	22 c0       	rjmp	.+68     	; 0x1c00 <malloc+0x98>
    1bbc:	21 15       	cp	r18, r1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <malloc+0x60>
    1bc2:	42 17       	cp	r20, r18
    1bc4:	53 07       	cpc	r21, r19
    1bc6:	18 f4       	brcc	.+6      	; 0x1bce <malloc+0x66>
    1bc8:	9a 01       	movw	r18, r20
    1bca:	bd 01       	movw	r22, r26
    1bcc:	ef 01       	movw	r28, r30
    1bce:	df 01       	movw	r26, r30
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	db cf       	rjmp	.-74     	; 0x1b8a <malloc+0x22>
    1bd4:	21 15       	cp	r18, r1
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	f9 f0       	breq	.+62     	; 0x1c18 <malloc+0xb0>
    1bda:	28 1b       	sub	r18, r24
    1bdc:	39 0b       	sbc	r19, r25
    1bde:	24 30       	cpi	r18, 0x04	; 4
    1be0:	31 05       	cpc	r19, r1
    1be2:	80 f4       	brcc	.+32     	; 0x1c04 <malloc+0x9c>
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	9b 81       	ldd	r25, Y+3	; 0x03
    1be8:	61 15       	cp	r22, r1
    1bea:	71 05       	cpc	r23, r1
    1bec:	21 f0       	breq	.+8      	; 0x1bf6 <malloc+0x8e>
    1bee:	fb 01       	movw	r30, r22
    1bf0:	93 83       	std	Z+3, r25	; 0x03
    1bf2:	82 83       	std	Z+2, r24	; 0x02
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <malloc+0x96>
    1bf6:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <__flp+0x1>
    1bfa:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <__flp>
    1bfe:	fe 01       	movw	r30, r28
    1c00:	32 96       	adiw	r30, 0x02	; 2
    1c02:	44 c0       	rjmp	.+136    	; 0x1c8c <malloc+0x124>
    1c04:	fe 01       	movw	r30, r28
    1c06:	e2 0f       	add	r30, r18
    1c08:	f3 1f       	adc	r31, r19
    1c0a:	81 93       	st	Z+, r24
    1c0c:	91 93       	st	Z+, r25
    1c0e:	22 50       	subi	r18, 0x02	; 2
    1c10:	31 09       	sbc	r19, r1
    1c12:	39 83       	std	Y+1, r19	; 0x01
    1c14:	28 83       	st	Y, r18
    1c16:	3a c0       	rjmp	.+116    	; 0x1c8c <malloc+0x124>
    1c18:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    1c1c:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    1c20:	23 2b       	or	r18, r19
    1c22:	41 f4       	brne	.+16     	; 0x1c34 <malloc+0xcc>
    1c24:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1c28:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1c2c:	30 93 fc 03 	sts	0x03FC, r19	; 0x8003fc <__brkval+0x1>
    1c30:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <__brkval>
    1c34:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1c38:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	41 f4       	brne	.+16     	; 0x1c52 <malloc+0xea>
    1c42:	2d b7       	in	r18, 0x3d	; 61
    1c44:	3e b7       	in	r19, 0x3e	; 62
    1c46:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1c4a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1c4e:	24 1b       	sub	r18, r20
    1c50:	35 0b       	sbc	r19, r21
    1c52:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <__brkval>
    1c56:	f0 91 fc 03 	lds	r31, 0x03FC	; 0x8003fc <__brkval+0x1>
    1c5a:	e2 17       	cp	r30, r18
    1c5c:	f3 07       	cpc	r31, r19
    1c5e:	a0 f4       	brcc	.+40     	; 0x1c88 <malloc+0x120>
    1c60:	2e 1b       	sub	r18, r30
    1c62:	3f 0b       	sbc	r19, r31
    1c64:	28 17       	cp	r18, r24
    1c66:	39 07       	cpc	r19, r25
    1c68:	78 f0       	brcs	.+30     	; 0x1c88 <malloc+0x120>
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	4e 5f       	subi	r20, 0xFE	; 254
    1c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c70:	24 17       	cp	r18, r20
    1c72:	35 07       	cpc	r19, r21
    1c74:	48 f0       	brcs	.+18     	; 0x1c88 <malloc+0x120>
    1c76:	4e 0f       	add	r20, r30
    1c78:	5f 1f       	adc	r21, r31
    1c7a:	50 93 fc 03 	sts	0x03FC, r21	; 0x8003fc <__brkval+0x1>
    1c7e:	40 93 fb 03 	sts	0x03FB, r20	; 0x8003fb <__brkval>
    1c82:	81 93       	st	Z+, r24
    1c84:	91 93       	st	Z+, r25
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <malloc+0x124>
    1c88:	e0 e0       	ldi	r30, 0x00	; 0
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	cf 01       	movw	r24, r30
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <free>:
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <free+0xa>
    1ca0:	81 c0       	rjmp	.+258    	; 0x1da4 <free+0x10c>
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	32 97       	sbiw	r30, 0x02	; 2
    1ca6:	13 82       	std	Z+3, r1	; 0x03
    1ca8:	12 82       	std	Z+2, r1	; 0x02
    1caa:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <__flp>
    1cae:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <__flp+0x1>
    1cb2:	10 97       	sbiw	r26, 0x00	; 0
    1cb4:	81 f4       	brne	.+32     	; 0x1cd6 <free+0x3e>
    1cb6:	20 81       	ld	r18, Z
    1cb8:	31 81       	ldd	r19, Z+1	; 0x01
    1cba:	82 0f       	add	r24, r18
    1cbc:	93 1f       	adc	r25, r19
    1cbe:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    1cc2:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    1cc6:	28 17       	cp	r18, r24
    1cc8:	39 07       	cpc	r19, r25
    1cca:	51 f5       	brne	.+84     	; 0x1d20 <free+0x88>
    1ccc:	f0 93 fc 03 	sts	0x03FC, r31	; 0x8003fc <__brkval+0x1>
    1cd0:	e0 93 fb 03 	sts	0x03FB, r30	; 0x8003fb <__brkval>
    1cd4:	67 c0       	rjmp	.+206    	; 0x1da4 <free+0x10c>
    1cd6:	ed 01       	movw	r28, r26
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	ce 17       	cp	r28, r30
    1cde:	df 07       	cpc	r29, r31
    1ce0:	40 f4       	brcc	.+16     	; 0x1cf2 <free+0x5a>
    1ce2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ce4:	5b 81       	ldd	r21, Y+3	; 0x03
    1ce6:	9e 01       	movw	r18, r28
    1ce8:	41 15       	cp	r20, r1
    1cea:	51 05       	cpc	r21, r1
    1cec:	f1 f0       	breq	.+60     	; 0x1d2a <free+0x92>
    1cee:	ea 01       	movw	r28, r20
    1cf0:	f5 cf       	rjmp	.-22     	; 0x1cdc <free+0x44>
    1cf2:	d3 83       	std	Z+3, r29	; 0x03
    1cf4:	c2 83       	std	Z+2, r28	; 0x02
    1cf6:	40 81       	ld	r20, Z
    1cf8:	51 81       	ldd	r21, Z+1	; 0x01
    1cfa:	84 0f       	add	r24, r20
    1cfc:	95 1f       	adc	r25, r21
    1cfe:	c8 17       	cp	r28, r24
    1d00:	d9 07       	cpc	r29, r25
    1d02:	59 f4       	brne	.+22     	; 0x1d1a <free+0x82>
    1d04:	88 81       	ld	r24, Y
    1d06:	99 81       	ldd	r25, Y+1	; 0x01
    1d08:	84 0f       	add	r24, r20
    1d0a:	95 1f       	adc	r25, r21
    1d0c:	02 96       	adiw	r24, 0x02	; 2
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	80 83       	st	Z, r24
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	9b 81       	ldd	r25, Y+3	; 0x03
    1d16:	93 83       	std	Z+3, r25	; 0x03
    1d18:	82 83       	std	Z+2, r24	; 0x02
    1d1a:	21 15       	cp	r18, r1
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	29 f4       	brne	.+10     	; 0x1d2a <free+0x92>
    1d20:	f0 93 fe 03 	sts	0x03FE, r31	; 0x8003fe <__flp+0x1>
    1d24:	e0 93 fd 03 	sts	0x03FD, r30	; 0x8003fd <__flp>
    1d28:	3d c0       	rjmp	.+122    	; 0x1da4 <free+0x10c>
    1d2a:	e9 01       	movw	r28, r18
    1d2c:	fb 83       	std	Y+3, r31	; 0x03
    1d2e:	ea 83       	std	Y+2, r30	; 0x02
    1d30:	49 91       	ld	r20, Y+
    1d32:	59 91       	ld	r21, Y+
    1d34:	c4 0f       	add	r28, r20
    1d36:	d5 1f       	adc	r29, r21
    1d38:	ec 17       	cp	r30, r28
    1d3a:	fd 07       	cpc	r31, r29
    1d3c:	61 f4       	brne	.+24     	; 0x1d56 <free+0xbe>
    1d3e:	80 81       	ld	r24, Z
    1d40:	91 81       	ldd	r25, Z+1	; 0x01
    1d42:	84 0f       	add	r24, r20
    1d44:	95 1f       	adc	r25, r21
    1d46:	02 96       	adiw	r24, 0x02	; 2
    1d48:	e9 01       	movw	r28, r18
    1d4a:	99 83       	std	Y+1, r25	; 0x01
    1d4c:	88 83       	st	Y, r24
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	9b 83       	std	Y+3, r25	; 0x03
    1d54:	8a 83       	std	Y+2, r24	; 0x02
    1d56:	e0 e0       	ldi	r30, 0x00	; 0
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	12 96       	adiw	r26, 0x02	; 2
    1d5c:	8d 91       	ld	r24, X+
    1d5e:	9c 91       	ld	r25, X
    1d60:	13 97       	sbiw	r26, 0x03	; 3
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	19 f0       	breq	.+6      	; 0x1d6c <free+0xd4>
    1d66:	fd 01       	movw	r30, r26
    1d68:	dc 01       	movw	r26, r24
    1d6a:	f7 cf       	rjmp	.-18     	; 0x1d5a <free+0xc2>
    1d6c:	8d 91       	ld	r24, X+
    1d6e:	9c 91       	ld	r25, X
    1d70:	11 97       	sbiw	r26, 0x01	; 1
    1d72:	9d 01       	movw	r18, r26
    1d74:	2e 5f       	subi	r18, 0xFE	; 254
    1d76:	3f 4f       	sbci	r19, 0xFF	; 255
    1d78:	82 0f       	add	r24, r18
    1d7a:	93 1f       	adc	r25, r19
    1d7c:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    1d80:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    1d84:	28 17       	cp	r18, r24
    1d86:	39 07       	cpc	r19, r25
    1d88:	69 f4       	brne	.+26     	; 0x1da4 <free+0x10c>
    1d8a:	30 97       	sbiw	r30, 0x00	; 0
    1d8c:	29 f4       	brne	.+10     	; 0x1d98 <free+0x100>
    1d8e:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <__flp+0x1>
    1d92:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <__flp>
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <free+0x104>
    1d98:	13 82       	std	Z+3, r1	; 0x03
    1d9a:	12 82       	std	Z+2, r1	; 0x02
    1d9c:	b0 93 fc 03 	sts	0x03FC, r27	; 0x8003fc <__brkval+0x1>
    1da0:	a0 93 fb 03 	sts	0x03FB, r26	; 0x8003fb <__brkval>
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <strnlen_P>:
    1daa:	fc 01       	movw	r30, r24
    1dac:	05 90       	lpm	r0, Z+
    1dae:	61 50       	subi	r22, 0x01	; 1
    1db0:	70 40       	sbci	r23, 0x00	; 0
    1db2:	01 10       	cpse	r0, r1
    1db4:	d8 f7       	brcc	.-10     	; 0x1dac <strnlen_P+0x2>
    1db6:	80 95       	com	r24
    1db8:	90 95       	com	r25
    1dba:	8e 0f       	add	r24, r30
    1dbc:	9f 1f       	adc	r25, r31
    1dbe:	08 95       	ret

00001dc0 <memset>:
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <memset+0x6>
    1dc4:	6d 93       	st	X+, r22
    1dc6:	41 50       	subi	r20, 0x01	; 1
    1dc8:	50 40       	sbci	r21, 0x00	; 0
    1dca:	e0 f7       	brcc	.-8      	; 0x1dc4 <memset+0x4>
    1dcc:	08 95       	ret

00001dce <strnlen>:
    1dce:	fc 01       	movw	r30, r24
    1dd0:	61 50       	subi	r22, 0x01	; 1
    1dd2:	70 40       	sbci	r23, 0x00	; 0
    1dd4:	01 90       	ld	r0, Z+
    1dd6:	01 10       	cpse	r0, r1
    1dd8:	d8 f7       	brcc	.-10     	; 0x1dd0 <strnlen+0x2>
    1dda:	80 95       	com	r24
    1ddc:	90 95       	com	r25
    1dde:	8e 0f       	add	r24, r30
    1de0:	9f 1f       	adc	r25, r31
    1de2:	08 95       	ret

00001de4 <strrev>:
    1de4:	dc 01       	movw	r26, r24
    1de6:	fc 01       	movw	r30, r24
    1de8:	67 2f       	mov	r22, r23
    1dea:	71 91       	ld	r23, Z+
    1dec:	77 23       	and	r23, r23
    1dee:	e1 f7       	brne	.-8      	; 0x1de8 <strrev+0x4>
    1df0:	32 97       	sbiw	r30, 0x02	; 2
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <strrev+0x18>
    1df4:	7c 91       	ld	r23, X
    1df6:	6d 93       	st	X+, r22
    1df8:	70 83       	st	Z, r23
    1dfa:	62 91       	ld	r22, -Z
    1dfc:	ae 17       	cp	r26, r30
    1dfe:	bf 07       	cpc	r27, r31
    1e00:	c8 f3       	brcs	.-14     	; 0x1df4 <strrev+0x10>
    1e02:	08 95       	ret

00001e04 <fputc>:
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	23 81       	ldd	r18, Z+3	; 0x03
    1e10:	21 fd       	sbrc	r18, 1
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <fputc+0x16>
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	9f ef       	ldi	r25, 0xFF	; 255
    1e18:	2c c0       	rjmp	.+88     	; 0x1e72 <fputc+0x6e>
    1e1a:	22 ff       	sbrs	r18, 2
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <fputc+0x46>
    1e1e:	46 81       	ldd	r20, Z+6	; 0x06
    1e20:	57 81       	ldd	r21, Z+7	; 0x07
    1e22:	24 81       	ldd	r18, Z+4	; 0x04
    1e24:	35 81       	ldd	r19, Z+5	; 0x05
    1e26:	42 17       	cp	r20, r18
    1e28:	53 07       	cpc	r21, r19
    1e2a:	44 f4       	brge	.+16     	; 0x1e3c <fputc+0x38>
    1e2c:	a0 81       	ld	r26, Z
    1e2e:	b1 81       	ldd	r27, Z+1	; 0x01
    1e30:	9d 01       	movw	r18, r26
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	31 83       	std	Z+1, r19	; 0x01
    1e38:	20 83       	st	Z, r18
    1e3a:	8c 93       	st	X, r24
    1e3c:	26 81       	ldd	r18, Z+6	; 0x06
    1e3e:	37 81       	ldd	r19, Z+7	; 0x07
    1e40:	2f 5f       	subi	r18, 0xFF	; 255
    1e42:	3f 4f       	sbci	r19, 0xFF	; 255
    1e44:	37 83       	std	Z+7, r19	; 0x07
    1e46:	26 83       	std	Z+6, r18	; 0x06
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <fputc+0x6e>
    1e4a:	8b 01       	movw	r16, r22
    1e4c:	ec 01       	movw	r28, r24
    1e4e:	fb 01       	movw	r30, r22
    1e50:	00 84       	ldd	r0, Z+8	; 0x08
    1e52:	f1 85       	ldd	r31, Z+9	; 0x09
    1e54:	e0 2d       	mov	r30, r0
    1e56:	09 95       	icall
    1e58:	89 2b       	or	r24, r25
    1e5a:	e1 f6       	brne	.-72     	; 0x1e14 <fputc+0x10>
    1e5c:	d8 01       	movw	r26, r16
    1e5e:	16 96       	adiw	r26, 0x06	; 6
    1e60:	8d 91       	ld	r24, X+
    1e62:	9c 91       	ld	r25, X
    1e64:	17 97       	sbiw	r26, 0x07	; 7
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	17 96       	adiw	r26, 0x07	; 7
    1e6a:	9c 93       	st	X, r25
    1e6c:	8e 93       	st	-X, r24
    1e6e:	16 97       	sbiw	r26, 0x06	; 6
    1e70:	ce 01       	movw	r24, r28
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	08 95       	ret

00001e7c <__ultoa_invert>:
    1e7c:	fa 01       	movw	r30, r20
    1e7e:	aa 27       	eor	r26, r26
    1e80:	28 30       	cpi	r18, 0x08	; 8
    1e82:	51 f1       	breq	.+84     	; 0x1ed8 <__ultoa_invert+0x5c>
    1e84:	20 31       	cpi	r18, 0x10	; 16
    1e86:	81 f1       	breq	.+96     	; 0x1ee8 <__ultoa_invert+0x6c>
    1e88:	e8 94       	clt
    1e8a:	6f 93       	push	r22
    1e8c:	6e 7f       	andi	r22, 0xFE	; 254
    1e8e:	6e 5f       	subi	r22, 0xFE	; 254
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	8f 4f       	sbci	r24, 0xFF	; 255
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	af 4f       	sbci	r26, 0xFF	; 255
    1e98:	b1 e0       	ldi	r27, 0x01	; 1
    1e9a:	3e d0       	rcall	.+124    	; 0x1f18 <__ultoa_invert+0x9c>
    1e9c:	b4 e0       	ldi	r27, 0x04	; 4
    1e9e:	3c d0       	rcall	.+120    	; 0x1f18 <__ultoa_invert+0x9c>
    1ea0:	67 0f       	add	r22, r23
    1ea2:	78 1f       	adc	r23, r24
    1ea4:	89 1f       	adc	r24, r25
    1ea6:	9a 1f       	adc	r25, r26
    1ea8:	a1 1d       	adc	r26, r1
    1eaa:	68 0f       	add	r22, r24
    1eac:	79 1f       	adc	r23, r25
    1eae:	8a 1f       	adc	r24, r26
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	a1 1d       	adc	r26, r1
    1eb4:	6a 0f       	add	r22, r26
    1eb6:	71 1d       	adc	r23, r1
    1eb8:	81 1d       	adc	r24, r1
    1eba:	91 1d       	adc	r25, r1
    1ebc:	a1 1d       	adc	r26, r1
    1ebe:	20 d0       	rcall	.+64     	; 0x1f00 <__ultoa_invert+0x84>
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <__ultoa_invert+0x48>
    1ec2:	68 94       	set
    1ec4:	3f 91       	pop	r19
    1ec6:	2a e0       	ldi	r18, 0x0A	; 10
    1ec8:	26 9f       	mul	r18, r22
    1eca:	11 24       	eor	r1, r1
    1ecc:	30 19       	sub	r19, r0
    1ece:	30 5d       	subi	r19, 0xD0	; 208
    1ed0:	31 93       	st	Z+, r19
    1ed2:	de f6       	brtc	.-74     	; 0x1e8a <__ultoa_invert+0xe>
    1ed4:	cf 01       	movw	r24, r30
    1ed6:	08 95       	ret
    1ed8:	46 2f       	mov	r20, r22
    1eda:	47 70       	andi	r20, 0x07	; 7
    1edc:	40 5d       	subi	r20, 0xD0	; 208
    1ede:	41 93       	st	Z+, r20
    1ee0:	b3 e0       	ldi	r27, 0x03	; 3
    1ee2:	0f d0       	rcall	.+30     	; 0x1f02 <__ultoa_invert+0x86>
    1ee4:	c9 f7       	brne	.-14     	; 0x1ed8 <__ultoa_invert+0x5c>
    1ee6:	f6 cf       	rjmp	.-20     	; 0x1ed4 <__ultoa_invert+0x58>
    1ee8:	46 2f       	mov	r20, r22
    1eea:	4f 70       	andi	r20, 0x0F	; 15
    1eec:	40 5d       	subi	r20, 0xD0	; 208
    1eee:	4a 33       	cpi	r20, 0x3A	; 58
    1ef0:	18 f0       	brcs	.+6      	; 0x1ef8 <__ultoa_invert+0x7c>
    1ef2:	49 5d       	subi	r20, 0xD9	; 217
    1ef4:	31 fd       	sbrc	r19, 1
    1ef6:	40 52       	subi	r20, 0x20	; 32
    1ef8:	41 93       	st	Z+, r20
    1efa:	02 d0       	rcall	.+4      	; 0x1f00 <__ultoa_invert+0x84>
    1efc:	a9 f7       	brne	.-22     	; 0x1ee8 <__ultoa_invert+0x6c>
    1efe:	ea cf       	rjmp	.-44     	; 0x1ed4 <__ultoa_invert+0x58>
    1f00:	b4 e0       	ldi	r27, 0x04	; 4
    1f02:	a6 95       	lsr	r26
    1f04:	97 95       	ror	r25
    1f06:	87 95       	ror	r24
    1f08:	77 95       	ror	r23
    1f0a:	67 95       	ror	r22
    1f0c:	ba 95       	dec	r27
    1f0e:	c9 f7       	brne	.-14     	; 0x1f02 <__ultoa_invert+0x86>
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	61 05       	cpc	r22, r1
    1f14:	71 05       	cpc	r23, r1
    1f16:	08 95       	ret
    1f18:	9b 01       	movw	r18, r22
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	0a 2e       	mov	r0, r26
    1f1e:	06 94       	lsr	r0
    1f20:	57 95       	ror	r21
    1f22:	47 95       	ror	r20
    1f24:	37 95       	ror	r19
    1f26:	27 95       	ror	r18
    1f28:	ba 95       	dec	r27
    1f2a:	c9 f7       	brne	.-14     	; 0x1f1e <__ultoa_invert+0xa2>
    1f2c:	62 0f       	add	r22, r18
    1f2e:	73 1f       	adc	r23, r19
    1f30:	84 1f       	adc	r24, r20
    1f32:	95 1f       	adc	r25, r21
    1f34:	a0 1d       	adc	r26, r0
    1f36:	08 95       	ret

00001f38 <__prologue_saves__>:
    1f38:	2f 92       	push	r2
    1f3a:	3f 92       	push	r3
    1f3c:	4f 92       	push	r4
    1f3e:	5f 92       	push	r5
    1f40:	6f 92       	push	r6
    1f42:	7f 92       	push	r7
    1f44:	8f 92       	push	r8
    1f46:	9f 92       	push	r9
    1f48:	af 92       	push	r10
    1f4a:	bf 92       	push	r11
    1f4c:	cf 92       	push	r12
    1f4e:	df 92       	push	r13
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	ca 1b       	sub	r28, r26
    1f62:	db 0b       	sbc	r29, r27
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	09 94       	ijmp

00001f70 <__epilogue_restores__>:
    1f70:	2a 88       	ldd	r2, Y+18	; 0x12
    1f72:	39 88       	ldd	r3, Y+17	; 0x11
    1f74:	48 88       	ldd	r4, Y+16	; 0x10
    1f76:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f78:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f80:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f82:	b9 84       	ldd	r11, Y+9	; 0x09
    1f84:	c8 84       	ldd	r12, Y+8	; 0x08
    1f86:	df 80       	ldd	r13, Y+7	; 0x07
    1f88:	ee 80       	ldd	r14, Y+6	; 0x06
    1f8a:	fd 80       	ldd	r15, Y+5	; 0x05
    1f8c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f8e:	1b 81       	ldd	r17, Y+3	; 0x03
    1f90:	aa 81       	ldd	r26, Y+2	; 0x02
    1f92:	b9 81       	ldd	r27, Y+1	; 0x01
    1f94:	ce 0f       	add	r28, r30
    1f96:	d1 1d       	adc	r29, r1
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	ed 01       	movw	r28, r26
    1fa4:	08 95       	ret

00001fa6 <_exit>:
    1fa6:	f8 94       	cli

00001fa8 <__stop_program>:
    1fa8:	ff cf       	rjmp	.-2      	; 0x1fa8 <__stop_program>
