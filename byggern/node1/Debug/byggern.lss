
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017c  00800100  00001de6  00001e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  0080027c  0080027c  00001ff6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ff6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003456  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001719  00000000  00000000  000057ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001846  00000000  00000000  00006f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  00008750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d8  00000000  00000000  00008e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159f  00000000  00000000  00009860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000adff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <navigateMenu+0x56>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e6 ee       	ldi	r30, 0xE6	; 230
     3aa:	fd e1       	ldi	r31, 0x1D	; 29
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	ac 37       	cpi	r26, 0x7C	; 124
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	ac e7       	ldi	r26, 0x7C	; 124
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a7 3f       	cpi	r26, 0xF7	; 247
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1009>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1009>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "pwm.h"
#include "music.h"
#include "CAN.h"
volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	//cli();
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
	
	
	//sei();
	
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:


int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
	printf("---------------------------------------\n\r");
     41a:	06 e0       	ldi	r16, 0x06	; 6
     41c:	11 e0       	ldi	r17, 0x01	; 1
     41e:	1f 93       	push	r17
     420:	0f 93       	push	r16
     422:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>

	setupInit();
     426:	0e 94 bd 06 	call	0xd7a	; 0xd7a <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     42a:	87 e5       	ldi	r24, 0x57	; 87
     42c:	95 e0       	ldi	r25, 0x05	; 5
     42e:	9a 87       	std	Y+10, r25	; 0x0a
     430:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     436:	8d e0       	ldi	r24, 0x0D	; 13
     438:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     43a:	86 e1       	ldi	r24, 0x16	; 22
     43c:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     43e:	81 e2       	ldi	r24, 0x21	; 33
     440:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     442:	80 e3       	ldi	r24, 0x30	; 48
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
	printf("---------------------------------------\n\r");
     44e:	1f 93       	push	r17
     450:	0f 93       	push	r16
     452:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     456:	2f ef       	ldi	r18, 0xFF	; 255
     458:	8f e7       	ldi	r24, 0x7F	; 127
     45a:	97 e0       	ldi	r25, 0x07	; 7
     45c:	21 50       	subi	r18, 0x01	; 1
     45e:	80 40       	sbci	r24, 0x00	; 0
     460:	90 40       	sbci	r25, 0x00	; 0
     462:	e1 f7       	brne	.-8      	; 0x45c <main+0x56>
     464:	00 c0       	rjmp	.+0      	; 0x466 <main+0x60>
     466:	00 00       	nop
	_delay_ms(500);
	//CAN_transmit_message(&message);
	
	CAN_controller_setMode(MODE_NORMAL);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <CAN_controller_setMode>
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
		
		if (flag) {
			printf("Message received");
     47a:	03 e4       	ldi	r16, 0x43	; 67
     47c:	11 e0       	ldi	r17, 0x01	; 1
	//music_playLisaGikk();                 
	while (1) {
		//
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     47e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <sleep_now>
		
		if (flag) {
     482:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
     486:	88 23       	and	r24, r24
     488:	d1 f3       	breq	.-12     	; 0x47e <main+0x78>
			printf("Message received");
     48a:	1f 93       	push	r17
     48c:	0f 93       	push	r16
     48e:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
			flag=0;
     492:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__data_end>
			CAN_receiveMessage(&received_message);
     496:	89 e8       	ldi	r24, 0x89	; 137
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	6c e2       	ldi	r22, 0x2C	; 44
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 a8 02 	call	0x550	; 0x550 <CAN_controller_bitModify>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	e5 cf       	rjmp	.-54     	; 0x47e <main+0x78>

000004b4 <CAN_receiveMessage>:
	CAN_controller_RTS(buffer_number);
	
	//ERROR HANDLING?	
}

void CAN_receiveMessage(CAN_message_t * received_message) {
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     4c0:	82 e6       	ldi	r24, 0x62	; 98
     4c2:	0e 94 92 02 	call	0x524	; 0x524 <CAN_controller_read>
     4c6:	c8 2f       	mov	r28, r24
     4c8:	81 e6       	ldi	r24, 0x61	; 97
     4ca:	0e 94 92 02 	call	0x524	; 0x524 <CAN_controller_read>
     4ce:	c2 95       	swap	r28
     4d0:	c6 95       	lsr	r28
     4d2:	c7 70       	andi	r28, 0x07	; 7
     4d4:	28 e0       	ldi	r18, 0x08	; 8
     4d6:	82 9f       	mul	r24, r18
     4d8:	c0 01       	movw	r24, r0
     4da:	11 24       	eor	r1, r1
     4dc:	8c 0f       	add	r24, r28
     4de:	91 1d       	adc	r25, r1
     4e0:	f7 01       	movw	r30, r14
     4e2:	91 87       	std	Z+9, r25	; 0x09
     4e4:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     4e6:	85 e6       	ldi	r24, 0x65	; 101
     4e8:	0e 94 92 02 	call	0x524	; 0x524 <CAN_controller_read>
     4ec:	8f 70       	andi	r24, 0x0F	; 15
     4ee:	f7 01       	movw	r30, r14
     4f0:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     4f2:	82 85       	ldd	r24, Z+10	; 0x0a
     4f4:	88 23       	and	r24, r24
     4f6:	81 f0       	breq	.+32     	; 0x518 <__stack+0x19>
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     4fa:	0c 2f       	mov	r16, r28
     4fc:	10 e0       	ldi	r17, 0x00	; 0
     4fe:	86 e6       	ldi	r24, 0x66	; 102
     500:	8c 0f       	add	r24, r28
     502:	0e 94 92 02 	call	0x524	; 0x524 <CAN_controller_read>
     506:	f7 01       	movw	r30, r14
     508:	e0 0f       	add	r30, r16
     50a:	f1 1f       	adc	r31, r17
     50c:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     50e:	cf 5f       	subi	r28, 0xFF	; 255
     510:	f7 01       	movw	r30, r14
     512:	82 85       	ldd	r24, Z+10	; 0x0a
     514:	8c 13       	cpse	r24, r28
     516:	f1 cf       	rjmp	.-30     	; 0x4fa <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	08 95       	ret

00000524 <CAN_controller_read>:
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
}
     524:	cf 93       	push	r28
     526:	c8 2f       	mov	r28, r24
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <SPI_setChipSelect>
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	0e 94 f6 06 	call	0xdec	; 0xdec <SPI_masterWrite>
     536:	8c 2f       	mov	r24, r28
     538:	0e 94 f6 06 	call	0xdec	; 0xdec <SPI_masterWrite>
     53c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterRead>
     540:	c8 2f       	mov	r28, r24
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	0e 94 ff 06 	call	0xdfe	; 0xdfe <SPI_setChipSelect>
     54a:	8c 2f       	mov	r24, r28
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <CAN_controller_bitModify>:
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	d8 2f       	mov	r29, r24
     558:	16 2f       	mov	r17, r22
     55a:	c4 2f       	mov	r28, r20
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	84 e0       	ldi	r24, 0x04	; 4
     560:	0e 94 ff 06 	call	0xdfe	; 0xdfe <SPI_setChipSelect>
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	0e 94 f6 06 	call	0xdec	; 0xdec <SPI_masterWrite>
     56a:	81 2f       	mov	r24, r17
     56c:	0e 94 f6 06 	call	0xdec	; 0xdec <SPI_masterWrite>
     570:	8d 2f       	mov	r24, r29
     572:	0e 94 f6 06 	call	0xdec	; 0xdec <SPI_masterWrite>
     576:	8c 2f       	mov	r24, r28
     578:	0e 94 f6 06 	call	0xdec	; 0xdec <SPI_masterWrite>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	0e 94 ff 06 	call	0xdfe	; 0xdfe <SPI_setChipSelect>
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	08 95       	ret

0000058c <CAN_controller_reset>:
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	84 e0       	ldi	r24, 0x04	; 4
     590:	0e 94 ff 06 	call	0xdfe	; 0xdfe <SPI_setChipSelect>
     594:	84 e5       	ldi	r24, 0x54	; 84
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	9f 93       	push	r25
     59a:	8f 93       	push	r24
     59c:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
     5a0:	80 ec       	ldi	r24, 0xC0	; 192
     5a2:	0e 94 f6 06 	call	0xdec	; 0xdec <SPI_masterWrite>
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <SPI_setChipSelect>
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	08 95       	ret

000005b4 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     5ba:	0e 94 c6 02 	call	0x58c	; 0x58c <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     5be:	8e e0       	ldi	r24, 0x0E	; 14
     5c0:	0e 94 92 02 	call	0x524	; 0x524 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     5c4:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     5c6:	80 38       	cpi	r24, 0x80	; 128
     5c8:	69 f0       	breq	.+26     	; 0x5e4 <CAN_controller_setMode+0x30>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     5ca:	1f 92       	push	r1
     5cc:	8f 93       	push	r24
     5ce:	85 e6       	ldi	r24, 0x65	; 101
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
		return;
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	38 c0       	rjmp	.+112    	; 0x654 <CAN_controller_setMode+0xa0>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     5e4:	4c 2f       	mov	r20, r28
     5e6:	4c 60       	ori	r20, 0x0C	; 12
     5e8:	6f e0       	ldi	r22, 0x0F	; 15
     5ea:	8e ee       	ldi	r24, 0xEE	; 238
     5ec:	0e 94 a8 02 	call	0x550	; 0x550 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	6b e2       	ldi	r22, 0x2B	; 43
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	0e 94 a8 02 	call	0x550	; 0x550 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     5fa:	40 e6       	ldi	r20, 0x60	; 96
     5fc:	60 e6       	ldi	r22, 0x60	; 96
     5fe:	80 e6       	ldi	r24, 0x60	; 96
     600:	0e 94 a8 02 	call	0x550	; 0x550 <CAN_controller_bitModify>
     604:	2f ef       	ldi	r18, 0xFF	; 255
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	21 50       	subi	r18, 0x01	; 1
     60c:	80 40       	sbci	r24, 0x00	; 0
     60e:	90 40       	sbci	r25, 0x00	; 0
     610:	e1 f7       	brne	.-8      	; 0x60a <CAN_controller_setMode+0x56>
     612:	00 c0       	rjmp	.+0      	; 0x614 <CAN_controller_setMode+0x60>
     614:	00 c0       	rjmp	.+0      	; 0x616 <CAN_controller_setMode+0x62>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     616:	8e e0       	ldi	r24, 0x0E	; 14
     618:	0e 94 92 02 	call	0x524	; 0x524 <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     61c:	d8 2f       	mov	r29, r24
     61e:	d0 7e       	andi	r29, 0xE0	; 224
	if (mode_bits != mode) {
     620:	cd 17       	cp	r28, r29
     622:	61 f0       	breq	.+24     	; 0x63c <CAN_controller_setMode+0x88>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     624:	1f 92       	push	r1
     626:	df 93       	push	r29
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     63c:	1f 92       	push	r1
     63e:	df 93       	push	r29
     640:	80 ea       	ldi	r24, 0xA0	; 160
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
}
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     65a:	0e 94 ed 06 	call	0xdda	; 0xdda <SPI_masterInit>

	CAN_controller_setMode(MODE_LOOPBACK);
     65e:	80 e4       	ldi	r24, 0x40	; 64
     660:	0e 94 da 02 	call	0x5b4	; 0x5b4 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	cli();
     664:	f8 94       	cli
	 GICR |= (1<< INT0); //turn on interrupt 0
     666:	8b b7       	in	r24, 0x3b	; 59
     668:	80 64       	ori	r24, 0x40	; 64
     66a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     66c:	85 b7       	in	r24, 0x35	; 53
     66e:	82 60       	ori	r24, 0x02	; 2
     670:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     672:	85 b7       	in	r24, 0x35	; 53
     674:	8e 7f       	andi	r24, 0xFE	; 254
     676:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     678:	81 b3       	in	r24, 0x11	; 17
     67a:	84 70       	andi	r24, 0x04	; 4
     67c:	81 bb       	out	0x11, r24	; 17
	sei();
     67e:	78 94       	sei
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	8f ef       	ldi	r24, 0xFF	; 255
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	21 50       	subi	r18, 0x01	; 1
     688:	80 40       	sbci	r24, 0x00	; 0
     68a:	90 40       	sbci	r25, 0x00	; 0
     68c:	e1 f7       	brne	.-8      	; 0x686 <CAN_controller_init+0x2c>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <CAN_controller_init+0x36>
     690:	00 c0       	rjmp	.+0      	; 0x692 <CAN_controller_init+0x38>
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     692:	8f ea       	ldi	r24, 0xAF	; 175
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     69e:	8e e0       	ldi	r24, 0x0E	; 14
     6a0:	0e 94 92 02 	call	0x524	; 0x524 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     6a4:	1f 92       	push	r1
     6a6:	8f 93       	push	r24
     6a8:	88 ec       	ldi	r24, 0xC8	; 200
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>

}
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	08 95       	ret

000006c2 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     6c2:	85 b7       	in	r24, 0x35	; 53
     6c4:	8f 7e       	andi	r24, 0xEF	; 239
     6c6:	85 bf       	out	0x35, r24	; 53
     6c8:	84 b7       	in	r24, 0x34	; 52
     6ca:	8f 7d       	andi	r24, 0xDF	; 223
     6cc:	84 bf       	out	0x34, r24	; 52
     6ce:	86 b7       	in	r24, 0x36	; 54
     6d0:	8f 77       	andi	r24, 0x7F	; 127
     6d2:	86 bf       	out	0x36, r24	; 54
     6d4:	08 95       	ret

000006d6 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     6d6:	88 b1       	in	r24, 0x08	; 8
     6d8:	88 68       	ori	r24, 0x88	; 136
     6da:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
     6dc:	85 b7       	in	r24, 0x35	; 53
     6de:	80 62       	ori	r24, 0x20	; 32
     6e0:	85 bf       	out	0x35, r24	; 53
     6e2:	88 95       	sleep
     6e4:	85 b7       	in	r24, 0x35	; 53
     6e6:	8f 7d       	andi	r24, 0xDF	; 223
     6e8:	85 bf       	out	0x35, r24	; 53
     6ea:	08 95       	ret

000006ec <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     6f2:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     6fc:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <joystickOffsetY>
     700:	08 95       	ret

00000702 <joystick_readPosition>:
}
void joystick_readPosition() {
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     714:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     71c:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     71e:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <joystickOffsetX>
     722:	c6 17       	cp	r28, r22
     724:	80 f4       	brcc	.+32     	; 0x746 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	2c 2f       	mov	r18, r28
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	26 1b       	sub	r18, r22
     72e:	37 0b       	sbc	r19, r23
     730:	44 e6       	ldi	r20, 0x64	; 100
     732:	42 9f       	mul	r20, r18
     734:	c0 01       	movw	r24, r0
     736:	43 9f       	mul	r20, r19
     738:	90 0d       	add	r25, r0
     73a:	11 24       	eor	r1, r1
     73c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__divmodhi4>
     740:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <joystick_pos>
     744:	14 c0       	rjmp	.+40     	; 0x76e <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     746:	46 2f       	mov	r20, r22
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	2c 2f       	mov	r18, r28
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	24 1b       	sub	r18, r20
     750:	35 0b       	sbc	r19, r21
     752:	64 e6       	ldi	r22, 0x64	; 100
     754:	62 9f       	mul	r22, r18
     756:	c0 01       	movw	r24, r0
     758:	63 9f       	mul	r22, r19
     75a:	90 0d       	add	r25, r0
     75c:	11 24       	eor	r1, r1
     75e:	6f ef       	ldi	r22, 0xFF	; 255
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	64 1b       	sub	r22, r20
     764:	75 0b       	sbc	r23, r21
     766:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__divmodhi4>
     76a:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
     76e:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <joystickOffsetY>
     772:	e2 17       	cp	r30, r18
     774:	88 f4       	brcc	.+34     	; 0x798 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     776:	62 2f       	mov	r22, r18
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	4e 2f       	mov	r20, r30
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	46 1b       	sub	r20, r22
     780:	57 0b       	sbc	r21, r23
     782:	24 e6       	ldi	r18, 0x64	; 100
     784:	24 9f       	mul	r18, r20
     786:	c0 01       	movw	r24, r0
     788:	25 9f       	mul	r18, r21
     78a:	90 0d       	add	r25, r0
     78c:	11 24       	eor	r1, r1
     78e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__divmodhi4>
     792:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <joystick_pos+0x1>
     796:	13 c0       	rjmp	.+38     	; 0x7be <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	4e 2f       	mov	r20, r30
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	42 1b       	sub	r20, r18
     7a0:	53 0b       	sbc	r21, r19
     7a2:	64 e6       	ldi	r22, 0x64	; 100
     7a4:	64 9f       	mul	r22, r20
     7a6:	c0 01       	movw	r24, r0
     7a8:	65 9f       	mul	r22, r21
     7aa:	90 0d       	add	r25, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	6f ef       	ldi	r22, 0xFF	; 255
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	62 1b       	sub	r22, r18
     7b4:	73 0b       	sbc	r23, r19
     7b6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__divmodhi4>
     7ba:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     7be:	cd e7       	ldi	r28, 0x7D	; 125
     7c0:	d2 e0       	ldi	r29, 0x02	; 2
     7c2:	68 81       	ld	r22, Y
     7c4:	06 2e       	mov	r0, r22
     7c6:	00 0c       	add	r0, r0
     7c8:	77 0b       	sbc	r23, r23
     7ca:	88 0b       	sbc	r24, r24
     7cc:	99 0b       	sbc	r25, r25
     7ce:	0e 94 c3 08 	call	0x1186	; 0x1186 <__floatsisf>
     7d2:	6b 01       	movw	r12, r22
     7d4:	7c 01       	movw	r14, r24
     7d6:	69 81       	ldd	r22, Y+1	; 0x01
     7d8:	06 2e       	mov	r0, r22
     7da:	00 0c       	add	r0, r0
     7dc:	77 0b       	sbc	r23, r23
     7de:	88 0b       	sbc	r24, r24
     7e0:	99 0b       	sbc	r25, r25
     7e2:	0e 94 c3 08 	call	0x1186	; 0x1186 <__floatsisf>
     7e6:	a7 01       	movw	r20, r14
     7e8:	96 01       	movw	r18, r12
     7ea:	0e 94 ba 07 	call	0xf74	; 0xf74 <atan2>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	44 eb       	ldi	r20, 0xB4	; 180
     7f4:	53 e4       	ldi	r21, 0x43	; 67
     7f6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__mulsf3>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	5f e3       	ldi	r21, 0x3F	; 63
     802:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__mulsf3>
     806:	23 ec       	ldi	r18, 0xC3	; 195
     808:	35 ef       	ldi	r19, 0xF5	; 245
     80a:	48 e4       	ldi	r20, 0x48	; 72
     80c:	50 e4       	ldi	r21, 0x40	; 64
     80e:	0e 94 19 08 	call	0x1032	; 0x1032 <__divsf3>
     812:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fixsfsi>
     816:	7b 83       	std	Y+3, r23	; 0x03
     818:	6a 83       	std	Y+2, r22	; 0x02
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	08 95       	ret

00000828 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     828:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     82a:	80 81       	ld	r24, Z
     82c:	94 e0       	ldi	r25, 0x04	; 4
     82e:	98 0f       	add	r25, r24
     830:	99 30       	cpi	r25, 0x09	; 9
     832:	20 f4       	brcc	.+8      	; 0x83c <joystick_getDirection+0x14>
     834:	91 81       	ldd	r25, Z+1	; 0x01
     836:	9c 5f       	subi	r25, 0xFC	; 252
     838:	99 30       	cpi	r25, 0x09	; 9
     83a:	90 f0       	brcs	.+36     	; 0x860 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     83c:	85 30       	cpi	r24, 0x05	; 5
     83e:	2c f0       	brlt	.+10     	; 0x84a <joystick_getDirection+0x22>
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	8f 5c       	subi	r24, 0xCF	; 207
     844:	83 36       	cpi	r24, 0x63	; 99
     846:	38 f4       	brcc	.+14     	; 0x856 <joystick_getDirection+0x2e>
     848:	0d c0       	rjmp	.+26     	; 0x864 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     84a:	8c 3f       	cpi	r24, 0xFC	; 252
     84c:	24 f4       	brge	.+8      	; 0x856 <joystick_getDirection+0x2e>
     84e:	81 81       	ldd	r24, Z+1	; 0x01
     850:	8f 5c       	subi	r24, 0xCF	; 207
     852:	83 36       	cpi	r24, 0x63	; 99
     854:	48 f0       	brcs	.+18     	; 0x868 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     856:	81 81       	ldd	r24, Z+1	; 0x01
     858:	8c 3f       	cpi	r24, 0xFC	; 252
     85a:	44 f0       	brlt	.+16     	; 0x86c <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     86c:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     86e:	08 95       	ret

00000870 <this_init>:



MenuNode nodes[11];

void this_init() {
     870:	2f 92       	push	r2
     872:	3f 92       	push	r3
     874:	4f 92       	push	r4
     876:	5f 92       	push	r5
     878:	6f 92       	push	r6
     87a:	7f 92       	push	r7
     87c:	8f 92       	push	r8
     87e:	9f 92       	push	r9
     880:	af 92       	push	r10
     882:	bf 92       	push	r11
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
	
	printf("this_init initiating");
     894:	83 ed       	ldi	r24, 0xD3	; 211
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
	
	strcpy(nodes[0].name, "Main menu");
     8a0:	c6 e9       	ldi	r28, 0x96	; 150
     8a2:	d2 e0       	ldi	r29, 0x02	; 2
     8a4:	8a e0       	ldi	r24, 0x0A	; 10
     8a6:	e8 ee       	ldi	r30, 0xE8	; 232
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	de 01       	movw	r26, r28
     8ac:	01 90       	ld	r0, Z+
     8ae:	0d 92       	st	X+, r0
     8b0:	8a 95       	dec	r24
     8b2:	e1 f7       	brne	.-8      	; 0x8ac <this_init+0x3c>

	strcpy(nodes[1].name, "Play game");
     8b4:	8a e0       	ldi	r24, 0x0A	; 10
     8b6:	e2 ef       	ldi	r30, 0xF2	; 242
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	a5 eb       	ldi	r26, 0xB5	; 181
     8bc:	b2 e0       	ldi	r27, 0x02	; 2
     8be:	01 90       	ld	r0, Z+
     8c0:	0d 92       	st	X+, r0
     8c2:	8a 95       	dec	r24
     8c4:	e1 f7       	brne	.-8      	; 0x8be <this_init+0x4e>
	strcpy(nodes[2].name, "High scores");
     8c6:	8c e0       	ldi	r24, 0x0C	; 12
     8c8:	ec ef       	ldi	r30, 0xFC	; 252
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	a4 ed       	ldi	r26, 0xD4	; 212
     8ce:	b2 e0       	ldi	r27, 0x02	; 2
     8d0:	01 90       	ld	r0, Z+
     8d2:	0d 92       	st	X+, r0
     8d4:	8a 95       	dec	r24
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <this_init+0x60>
	strcpy(nodes[3].name, "Music");
     8d8:	86 e0       	ldi	r24, 0x06	; 6
     8da:	e8 e0       	ldi	r30, 0x08	; 8
     8dc:	f2 e0       	ldi	r31, 0x02	; 2
     8de:	a3 ef       	ldi	r26, 0xF3	; 243
     8e0:	b2 e0       	ldi	r27, 0x02	; 2
     8e2:	01 90       	ld	r0, Z+
     8e4:	0d 92       	st	X+, r0
     8e6:	8a 95       	dec	r24
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <this_init+0x72>
	strcpy(nodes[4].name, "Game 1");
     8ea:	87 e0       	ldi	r24, 0x07	; 7
     8ec:	ee e0       	ldi	r30, 0x0E	; 14
     8ee:	f2 e0       	ldi	r31, 0x02	; 2
     8f0:	a2 e1       	ldi	r26, 0x12	; 18
     8f2:	b3 e0       	ldi	r27, 0x03	; 3
     8f4:	01 90       	ld	r0, Z+
     8f6:	0d 92       	st	X+, r0
     8f8:	8a 95       	dec	r24
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <this_init+0x84>
	strcpy(nodes[5].name, "Game 2");
     8fc:	87 e0       	ldi	r24, 0x07	; 7
     8fe:	e5 e1       	ldi	r30, 0x15	; 21
     900:	f2 e0       	ldi	r31, 0x02	; 2
     902:	a1 e3       	ldi	r26, 0x31	; 49
     904:	b3 e0       	ldi	r27, 0x03	; 3
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	8a 95       	dec	r24
     90c:	e1 f7       	brne	.-8      	; 0x906 <this_init+0x96>
	strcpy(nodes[6].name, "Score 1");
     90e:	88 e0       	ldi	r24, 0x08	; 8
     910:	ec e1       	ldi	r30, 0x1C	; 28
     912:	f2 e0       	ldi	r31, 0x02	; 2
     914:	a0 e5       	ldi	r26, 0x50	; 80
     916:	b3 e0       	ldi	r27, 0x03	; 3
     918:	01 90       	ld	r0, Z+
     91a:	0d 92       	st	X+, r0
     91c:	8a 95       	dec	r24
     91e:	e1 f7       	brne	.-8      	; 0x918 <this_init+0xa8>
	strcpy(nodes[7].name, "Score 2");
     920:	88 e0       	ldi	r24, 0x08	; 8
     922:	e4 e2       	ldi	r30, 0x24	; 36
     924:	f2 e0       	ldi	r31, 0x02	; 2
     926:	af e6       	ldi	r26, 0x6F	; 111
     928:	b3 e0       	ldi	r27, 0x03	; 3
     92a:	01 90       	ld	r0, Z+
     92c:	0d 92       	st	X+, r0
     92e:	8a 95       	dec	r24
     930:	e1 f7       	brne	.-8      	; 0x92a <this_init+0xba>
	strcpy(nodes[8].name, "Score 3");
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	ec e2       	ldi	r30, 0x2C	; 44
     936:	f2 e0       	ldi	r31, 0x02	; 2
     938:	ae e8       	ldi	r26, 0x8E	; 142
     93a:	b3 e0       	ldi	r27, 0x03	; 3
     93c:	01 90       	ld	r0, Z+
     93e:	0d 92       	st	X+, r0
     940:	8a 95       	dec	r24
     942:	e1 f7       	brne	.-8      	; 0x93c <this_init+0xcc>
	strcpy(nodes[9].name, "Score 4");
     944:	88 e0       	ldi	r24, 0x08	; 8
     946:	e4 e3       	ldi	r30, 0x34	; 52
     948:	f2 e0       	ldi	r31, 0x02	; 2
     94a:	ad ea       	ldi	r26, 0xAD	; 173
     94c:	b3 e0       	ldi	r27, 0x03	; 3
     94e:	01 90       	ld	r0, Z+
     950:	0d 92       	st	X+, r0
     952:	8a 95       	dec	r24
     954:	e1 f7       	brne	.-8      	; 0x94e <this_init+0xde>
	strcpy(nodes[10].name, "Score 5");
     956:	88 e0       	ldi	r24, 0x08	; 8
     958:	ec e3       	ldi	r30, 0x3C	; 60
     95a:	f2 e0       	ldi	r31, 0x02	; 2
     95c:	ac ec       	ldi	r26, 0xCC	; 204
     95e:	b3 e0       	ldi	r27, 0x03	; 3
     960:	01 90       	ld	r0, Z+
     962:	0d 92       	st	X+, r0
     964:	8a 95       	dec	r24
     966:	e1 f7       	brne	.-8      	; 0x960 <this_init+0xf0>

	
	
	nodes[0].numChildren = 3;
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	8e 8f       	std	Y+30, r24	; 0x1e
	
	nodes[1].numChildren = 2;
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	8d af       	std	Y+61, r24	; 0x3d
	nodes[2].numChildren = 5;
     970:	85 e0       	ldi	r24, 0x05	; 5
     972:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <nodes+0x5c>
	nodes[3].numChildren = 0;
     976:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <nodes+0x7b>
	nodes[4].numChildren = 0;
     97a:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <nodes+0x9a>
	nodes[5].numChildren = 0;
     97e:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <nodes+0xb9>
	nodes[6].numChildren = 0;
     982:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <nodes+0xd8>
	nodes[7].numChildren = 0;
     986:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <nodes+0xf7>
	nodes[8].numChildren = 0;
     98a:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <nodes+0x116>
	nodes[9].numChildren = 0;
     98e:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <nodes+0x135>
	nodes[10].numChildren = 0;
     992:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <nodes+0x154>
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
     996:	19 8a       	std	Y+17, r1	; 0x11
     998:	18 8a       	std	Y+16, r1	; 0x10
     99a:	5e 01       	movw	r10, r28
     99c:	0b ee       	ldi	r16, 0xEB	; 235
     99e:	13 e0       	ldi	r17, 0x03	; 3
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	be 01       	movw	r22, r28
	nodes[7].numChildren = 0;
	nodes[8].numChildren = 0;
	nodes[9].numChildren = 0;
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
     9a6:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
     9a8:	5f e1       	ldi	r21, 0x1F	; 31
     9aa:	18 c0       	rjmp	.+48     	; 0x9dc <this_init+0x16c>
     9ac:	54 9f       	mul	r21, r20
     9ae:	f0 01       	movw	r30, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	ea 56       	subi	r30, 0x6A	; 106
     9b4:	fd 4f       	sbci	r31, 0xFD	; 253
     9b6:	e9 93       	st	Y+, r30
     9b8:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
     9ba:	b1 8b       	std	Z+17, r27	; 0x11
     9bc:	a0 8b       	std	Z+16, r26	; 0x10
			currentChildIdx++;
     9be:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     9c0:	2f 5f       	subi	r18, 0xFF	; 255
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	5e 96       	adiw	r26, 0x1e	; 30
     9c6:	8c 91       	ld	r24, X
     9c8:	5e 97       	sbiw	r26, 0x1e	; 30
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	28 17       	cp	r18, r24
     9ce:	39 07       	cpc	r19, r25
     9d0:	6c f3       	brlt	.-38     	; 0x9ac <this_init+0x13c>
     9d2:	61 5e       	subi	r22, 0xE1	; 225
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
	nodes[10].numChildren = 0;
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 11; i++) {
     9d6:	60 17       	cp	r22, r16
     9d8:	71 07       	cpc	r23, r17
     9da:	a9 f0       	breq	.+42     	; 0xa06 <this_init+0x196>
     9dc:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
     9de:	5e 96       	adiw	r26, 0x1e	; 30
     9e0:	8c 91       	ld	r24, X
     9e2:	5e 97       	sbiw	r26, 0x1e	; 30
     9e4:	88 23       	and	r24, r24
     9e6:	a9 f3       	breq	.-22     	; 0x9d2 <this_init+0x162>
     9e8:	eb 01       	movw	r28, r22
     9ea:	62 96       	adiw	r28, 0x12	; 18
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	dd cf       	rjmp	.-70     	; 0x9ac <this_init+0x13c>
     9f2:	2f ef       	ldi	r18, 0xFF	; 255
     9f4:	82 1a       	sub	r8, r18
     9f6:	92 0a       	sbc	r9, r18
     9f8:	8f e1       	ldi	r24, 0x1F	; 31
     9fa:	a8 0e       	add	r10, r24
     9fc:	b1 1c       	adc	r11, r1
     9fe:	9f ef       	ldi	r25, 0xFF	; 255
     a00:	69 1a       	sub	r6, r25
     a02:	79 0a       	sbc	r7, r25
     a04:	0d c0       	rjmp	.+26     	; 0xa20 <this_init+0x1b0>
     a06:	66 24       	eor	r6, r6
     a08:	63 94       	inc	r6
     a0a:	71 2c       	mov	r7, r1
     a0c:	81 2c       	mov	r8, r1
     a0e:	91 2c       	mov	r9, r1
	
	for (int i = 0; i<11; i++) {
		printf("Node %i\n\r", i);
		printf( nodes[i].name);
		for (int childIdx=0; childIdx<nodes[i].numChildren; childIdx++) {
			printf("child: ");
     a10:	0f 2e       	mov	r0, r31
     a12:	fe e4       	ldi	r31, 0x4E	; 78
     a14:	ef 2e       	mov	r14, r31
     a16:	f2 e0       	ldi	r31, 0x02	; 2
     a18:	ff 2e       	mov	r15, r31
     a1a:	f0 2d       	mov	r31, r0
			printf(nodes[i].children[childIdx]->name);
			printf("\n\r");
     a1c:	0d e2       	ldi	r16, 0x2D	; 45
     a1e:	11 e0       	ldi	r17, 0x01	; 1
     a20:	24 01       	movw	r4, r8
	nodes[9].parent = nodes+2;
	nodes[10].parent = nodes+2;
	*/
	
	for (int i = 0; i<11; i++) {
		printf("Node %i\n\r", i);
     a22:	9f 92       	push	r9
     a24:	8f 92       	push	r8
     a26:	e4 e4       	ldi	r30, 0x44	; 68
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	ff 93       	push	r31
     a2c:	ef 93       	push	r30
     a2e:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
		printf( nodes[i].name);
     a32:	65 01       	movw	r12, r10
     a34:	bf 92       	push	r11
     a36:	af 92       	push	r10
     a38:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
		for (int childIdx=0; childIdx<nodes[i].numChildren; childIdx++) {
     a3c:	f5 01       	movw	r30, r10
     a3e:	86 8d       	ldd	r24, Z+30	; 0x1e
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	88 23       	and	r24, r24
     a4e:	11 f1       	breq	.+68     	; 0xa94 <this_init+0x224>
     a50:	e5 01       	movw	r28, r10
     a52:	62 96       	adiw	r28, 0x12	; 18
     a54:	21 2c       	mov	r2, r1
     a56:	31 2c       	mov	r3, r1
			printf("child: ");
     a58:	ff 92       	push	r15
     a5a:	ef 92       	push	r14
     a5c:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
			printf(nodes[i].children[childIdx]->name);
     a60:	88 81       	ld	r24, Y
     a62:	99 81       	ldd	r25, Y+1	; 0x01
     a64:	22 96       	adiw	r28, 0x02	; 2
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
			printf("\n\r");
     a6e:	1f 93       	push	r17
     a70:	0f 93       	push	r16
     a72:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
	*/
	
	for (int i = 0; i<11; i++) {
		printf("Node %i\n\r", i);
		printf( nodes[i].name);
		for (int childIdx=0; childIdx<nodes[i].numChildren; childIdx++) {
     a76:	ff ef       	ldi	r31, 0xFF	; 255
     a78:	2f 1a       	sub	r2, r31
     a7a:	3f 0a       	sbc	r3, r31
     a7c:	f6 01       	movw	r30, r12
     a7e:	86 8d       	ldd	r24, Z+30	; 0x1e
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	28 16       	cp	r2, r24
     a90:	39 06       	cpc	r3, r25
     a92:	14 f3       	brlt	.-60     	; 0xa58 <this_init+0x1e8>
			printf("child: ");
			printf(nodes[i].children[childIdx]->name);
			printf("\n\r");

		}
		if (i != 0) {
     a94:	45 28       	or	r4, r5
     a96:	09 f4       	brne	.+2      	; 0xa9a <this_init+0x22a>
     a98:	ac cf       	rjmp	.-168    	; 0x9f2 <this_init+0x182>
			printf("Parent");
     a9a:	86 e5       	ldi	r24, 0x56	; 86
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
			printf(nodes[i].parent->name);
     aa6:	f6 01       	movw	r30, r12
     aa8:	81 89       	ldd	r24, Z+17	; 0x11
     aaa:	8f 93       	push	r24
     aac:	80 89       	ldd	r24, Z+16	; 0x10
     aae:	8f 93       	push	r24
     ab0:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
			printf("\n\r");
     ab4:	1f 93       	push	r17
     ab6:	0f 93       	push	r16
     ab8:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
	nodes[8].parent = nodes+2;
	nodes[9].parent = nodes+2;
	nodes[10].parent = nodes+2;
	*/
	
	for (int i = 0; i<11; i++) {
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	fb e0       	ldi	r31, 0x0B	; 11
     aca:	6f 16       	cp	r6, r31
     acc:	71 04       	cpc	r7, r1
     ace:	0c f4       	brge	.+2      	; 0xad2 <this_init+0x262>
     ad0:	90 cf       	rjmp	.-224    	; 0x9f2 <this_init+0x182>
			printf("\n\r");

		}
		
	}
	currentMenu.currentMenuItem = nodes; //set main menu as current
     ad2:	e1 e8       	ldi	r30, 0x81	; 129
     ad4:	f2 e0       	ldi	r31, 0x02	; 2
     ad6:	86 e9       	ldi	r24, 0x96	; 150
     ad8:	92 e0       	ldi	r25, 0x02	; 2
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
     ade:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     ae0:	84 e0       	ldi	r24, 0x04	; 4
     ae2:	83 83       	std	Z+3, r24	; 0x03
	printf("MENU INITIATED\n\r");
     ae4:	8d e5       	ldi	r24, 0x5D	; 93
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	9f 93       	push	r25
     aea:	8f 93       	push	r24
     aec:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
}
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	8f 90       	pop	r8
     b0c:	7f 90       	pop	r7
     b0e:	6f 90       	pop	r6
     b10:	5f 90       	pop	r5
     b12:	4f 90       	pop	r4
     b14:	3f 90       	pop	r3
     b16:	2f 90       	pop	r2
     b18:	08 95       	ret

00000b1a <navigateMenu>:
	
	return mainMenu;
}
*/
void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     b1a:	0e 94 14 04 	call	0x828	; 0x828 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     b1e:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <currentMenu+0x3>
     b22:	94 30       	cpi	r25, 0x04	; 4
     b24:	09 f0       	breq	.+2      	; 0xb28 <navigateMenu+0xe>
     b26:	58 c0       	rjmp	.+176    	; 0xbd8 <navigateMenu+0xbe>
			switch (dir) {
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	e1 f1       	breq	.+120    	; 0xba4 <navigateMenu+0x8a>
     b2c:	60 f1       	brcs	.+88     	; 0xb86 <navigateMenu+0x6c>
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	c9 f0       	breq	.+50     	; 0xb64 <navigateMenu+0x4a>
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	09 f0       	breq	.+2      	; 0xb38 <navigateMenu+0x1e>
     b36:	50 c0       	rjmp	.+160    	; 0xbd8 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     b38:	e1 e8       	ldi	r30, 0x81	; 129
     b3a:	f2 e0       	ldi	r31, 0x02	; 2
     b3c:	92 81       	ldd	r25, Z+2	; 0x02
     b3e:	49 2f       	mov	r20, r25
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	01 90       	ld	r0, Z+
     b44:	f0 81       	ld	r31, Z
     b46:	e0 2d       	mov	r30, r0
     b48:	26 8d       	ldd	r18, Z+30	; 0x1e
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	21 50       	subi	r18, 0x01	; 1
     b4e:	31 09       	sbc	r19, r1
     b50:	42 17       	cp	r20, r18
     b52:	53 07       	cpc	r21, r19
     b54:	24 f4       	brge	.+8      	; 0xb5e <navigateMenu+0x44>
					currentMenu.childIndex++;
     b56:	9f 5f       	subi	r25, 0xFF	; 255
     b58:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <currentMenu+0x2>
     b5c:	3d c0       	rjmp	.+122    	; 0xbd8 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     b5e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <currentMenu+0x2>
     b62:	3a c0       	rjmp	.+116    	; 0xbd8 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     b64:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <currentMenu+0x2>
     b68:	99 23       	and	r25, r25
     b6a:	21 f0       	breq	.+8      	; 0xb74 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     b6c:	91 50       	subi	r25, 0x01	; 1
     b6e:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <currentMenu+0x2>
     b72:	32 c0       	rjmp	.+100    	; 0xbd8 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     b74:	e1 e8       	ldi	r30, 0x81	; 129
     b76:	f2 e0       	ldi	r31, 0x02	; 2
     b78:	a0 81       	ld	r26, Z
     b7a:	b1 81       	ldd	r27, Z+1	; 0x01
     b7c:	5e 96       	adiw	r26, 0x1e	; 30
     b7e:	9c 91       	ld	r25, X
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	92 83       	std	Z+2, r25	; 0x02
     b84:	29 c0       	rjmp	.+82     	; 0xbd8 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     b86:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <currentMenu>
     b8a:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <currentMenu+0x1>
     b8e:	20 89       	ldd	r18, Z+16	; 0x10
     b90:	31 89       	ldd	r19, Z+17	; 0x11
     b92:	21 15       	cp	r18, r1
     b94:	31 05       	cpc	r19, r1
     b96:	01 f1       	breq	.+64     	; 0xbd8 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     b98:	e1 e8       	ldi	r30, 0x81	; 129
     b9a:	f2 e0       	ldi	r31, 0x02	; 2
     b9c:	31 83       	std	Z+1, r19	; 0x01
     b9e:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     ba0:	12 82       	std	Z+2, r1	; 0x02
     ba2:	1a c0       	rjmp	.+52     	; 0xbd8 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     ba4:	a1 e8       	ldi	r26, 0x81	; 129
     ba6:	b2 e0       	ldi	r27, 0x02	; 2
     ba8:	2d 91       	ld	r18, X+
     baa:	3c 91       	ld	r19, X
     bac:	11 97       	sbiw	r26, 0x01	; 1
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	9c 91       	ld	r25, X
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	e9 2f       	mov	r30, r25
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	39 96       	adiw	r30, 0x09	; 9
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	e2 0f       	add	r30, r18
     bc0:	f3 1f       	adc	r31, r19
     bc2:	01 90       	ld	r0, Z+
     bc4:	f0 81       	ld	r31, Z
     bc6:	e0 2d       	mov	r30, r0
     bc8:	96 8d       	ldd	r25, Z+30	; 0x1e
     bca:	99 23       	and	r25, r25
     bcc:	29 f0       	breq	.+10     	; 0xbd8 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     bce:	11 96       	adiw	r26, 0x01	; 1
     bd0:	fc 93       	st	X, r31
     bd2:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     bd4:	12 96       	adiw	r26, 0x02	; 2
     bd6:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     bd8:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <currentMenu+0x3>
     bdc:	08 95       	ret

00000bde <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
	oled_reset();
     be6:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_reset>
	oled_home();
     bea:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     bee:	c1 e8       	ldi	r28, 0x81	; 129
     bf0:	d2 e0       	ldi	r29, 0x02	; 2
     bf2:	88 81       	ld	r24, Y
     bf4:	99 81       	ldd	r25, Y+1	; 0x01
     bf6:	0e 94 95 06 	call	0xd2a	; 0xd2a <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     bfa:	e8 81       	ld	r30, Y
     bfc:	f9 81       	ldd	r31, Y+1	; 0x01
     bfe:	86 8d       	ldd	r24, Z+30	; 0x1e
     c00:	88 23       	and	r24, r24
     c02:	31 f1       	breq	.+76     	; 0xc50 <menu_printCurrentMenu+0x72>
     c04:	c0 e0       	ldi	r28, 0x00	; 0
     c06:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     c08:	01 e8       	ldi	r16, 0x81	; 129
     c0a:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     c0c:	ce 01       	movw	r24, r28
     c0e:	02 96       	adiw	r24, 0x02	; 2
     c10:	0e 94 91 06 	call	0xd22	; 0xd22 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     c14:	d8 01       	movw	r26, r16
     c16:	8d 91       	ld	r24, X+
     c18:	9c 91       	ld	r25, X
     c1a:	fe 01       	movw	r30, r28
     c1c:	39 96       	adiw	r30, 0x09	; 9
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	e8 0f       	add	r30, r24
     c24:	f9 1f       	adc	r31, r25
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	0e 94 95 06 	call	0xd2a	; 0xd2a <oled_print>
		if (currentMenu.childIndex == i) {
     c2e:	f8 01       	movw	r30, r16
     c30:	82 81       	ldd	r24, Z+2	; 0x02
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	8c 17       	cp	r24, r28
     c36:	9d 07       	cpc	r25, r29
     c38:	11 f4       	brne	.+4      	; 0xc3e <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     c3a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     c3e:	21 96       	adiw	r28, 0x01	; 1
     c40:	d8 01       	movw	r26, r16
     c42:	ed 91       	ld	r30, X+
     c44:	fc 91       	ld	r31, X
     c46:	86 8d       	ldd	r24, Z+30	; 0x1e
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	c8 17       	cp	r28, r24
     c4c:	d9 07       	cpc	r29, r25
     c4e:	f4 f2       	brlt	.-68     	; 0xc0c <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	08 95       	ret

00000c5a <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     c5a:	80 55       	subi	r24, 0x50	; 80
     c5c:	e0 e0       	ldi	r30, 0x00	; 0
     c5e:	f0 e1       	ldi	r31, 0x10	; 16
     c60:	80 83       	st	Z, r24
     c62:	86 2f       	mov	r24, r22
     c64:	8f 70       	andi	r24, 0x0F	; 15
     c66:	80 83       	st	Z, r24
     c68:	62 95       	swap	r22
     c6a:	6f 70       	andi	r22, 0x0F	; 15
     c6c:	60 61       	ori	r22, 0x10	; 16
     c6e:	60 83       	st	Z, r22
     c70:	08 95       	ret

00000c72 <oled_reset>:
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	10 e0       	ldi	r17, 0x00	; 0
     c7a:	c0 e0       	ldi	r28, 0x00	; 0
     c7c:	d2 e1       	ldi	r29, 0x12	; 18
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	81 2f       	mov	r24, r17
     c82:	0e 94 2d 06 	call	0xc5a	; 0xc5a <oled_pos>
     c86:	80 e8       	ldi	r24, 0x80	; 128
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	18 82       	st	Y, r1
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	e9 f7       	brne	.-6      	; 0xc8a <oled_reset+0x18>
     c90:	1f 5f       	subi	r17, 0xFF	; 255
     c92:	18 30       	cpi	r17, 0x08	; 8
     c94:	a1 f7       	brne	.-24     	; 0xc7e <oled_reset+0xc>
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <oled_print_arrow>:
     c9e:	e0 e0       	ldi	r30, 0x00	; 0
     ca0:	f2 e1       	ldi	r31, 0x12	; 18
     ca2:	88 e1       	ldi	r24, 0x18	; 24
     ca4:	80 83       	st	Z, r24
     ca6:	9c e3       	ldi	r25, 0x3C	; 60
     ca8:	90 83       	st	Z, r25
     caa:	9e e7       	ldi	r25, 0x7E	; 126
     cac:	90 83       	st	Z, r25
     cae:	80 83       	st	Z, r24
     cb0:	80 83       	st	Z, r24
     cb2:	08 95       	ret

00000cb4 <oled_home>:
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <oled_pos>
     cbc:	08 95       	ret

00000cbe <oled_init>:
     cbe:	e0 e0       	ldi	r30, 0x00	; 0
     cc0:	f0 e1       	ldi	r31, 0x10	; 16
     cc2:	8e ea       	ldi	r24, 0xAE	; 174
     cc4:	80 83       	st	Z, r24
     cc6:	81 ea       	ldi	r24, 0xA1	; 161
     cc8:	80 83       	st	Z, r24
     cca:	8a ed       	ldi	r24, 0xDA	; 218
     ccc:	80 83       	st	Z, r24
     cce:	82 e1       	ldi	r24, 0x12	; 18
     cd0:	80 83       	st	Z, r24
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	80 83       	st	Z, r24
     cd6:	88 ea       	ldi	r24, 0xA8	; 168
     cd8:	80 83       	st	Z, r24
     cda:	8f e3       	ldi	r24, 0x3F	; 63
     cdc:	80 83       	st	Z, r24
     cde:	85 ed       	ldi	r24, 0xD5	; 213
     ce0:	80 83       	st	Z, r24
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	80 83       	st	Z, r24
     ce6:	81 e8       	ldi	r24, 0x81	; 129
     ce8:	80 83       	st	Z, r24
     cea:	80 e5       	ldi	r24, 0x50	; 80
     cec:	80 83       	st	Z, r24
     cee:	89 ed       	ldi	r24, 0xD9	; 217
     cf0:	80 83       	st	Z, r24
     cf2:	81 e2       	ldi	r24, 0x21	; 33
     cf4:	80 83       	st	Z, r24
     cf6:	80 e2       	ldi	r24, 0x20	; 32
     cf8:	80 83       	st	Z, r24
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	80 83       	st	Z, r24
     cfe:	8b ed       	ldi	r24, 0xDB	; 219
     d00:	80 83       	st	Z, r24
     d02:	80 e3       	ldi	r24, 0x30	; 48
     d04:	80 83       	st	Z, r24
     d06:	8d ea       	ldi	r24, 0xAD	; 173
     d08:	80 83       	st	Z, r24
     d0a:	10 82       	st	Z, r1
     d0c:	84 ea       	ldi	r24, 0xA4	; 164
     d0e:	80 83       	st	Z, r24
     d10:	86 ea       	ldi	r24, 0xA6	; 166
     d12:	80 83       	st	Z, r24
     d14:	8f ea       	ldi	r24, 0xAF	; 175
     d16:	80 83       	st	Z, r24
     d18:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_reset>
     d1c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <oled_home>
     d20:	08 95       	ret

00000d22 <oled_gotoLine>:
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	0e 94 2d 06 	call	0xc5a	; 0xc5a <oled_pos>
     d28:	08 95       	ret

00000d2a <oled_print>:

void oled_print(char* character){
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	dc 01       	movw	r26, r24
	while (*character != '\0')
     d30:	8c 91       	ld	r24, X
     d32:	81 11       	cpse	r24, r1
     d34:	1a c0       	rjmp	.+52     	; 0xd6a <oled_print+0x40>
     d36:	1e c0       	rjmp	.+60     	; 0xd74 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     d38:	ec 91       	ld	r30, X
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	b0 97       	sbiw	r30, 0x20	; 32
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	ee 0f       	add	r30, r30
     d44:	ff 1f       	adc	r31, r31
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	e2 0f       	add	r30, r18
     d4c:	f3 1f       	adc	r31, r19
     d4e:	e2 56       	subi	r30, 0x62	; 98
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     d54:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     d56:	2f 5f       	subi	r18, 0xFF	; 255
     d58:	3f 4f       	sbci	r19, 0xFF	; 255
     d5a:	28 30       	cpi	r18, 0x08	; 8
     d5c:	31 05       	cpc	r19, r1
     d5e:	61 f7       	brne	.-40     	; 0xd38 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     d60:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     d62:	8c 91       	ld	r24, X
     d64:	81 11       	cpse	r24, r1
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <oled_print+0x44>
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     d6a:	c0 e0       	ldi	r28, 0x00	; 0
     d6c:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	e2 cf       	rjmp	.-60     	; 0xd38 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <setupInit>:
#include "oled.h"
#include "timer.h"
#include "sleep.h"

	void setupInit(void){
	cli();
     d7a:	f8 94       	cli
	xmem_init();
     d7c:	0e 94 a0 07 	call	0xf40	; 0xf40 <xmem_init>
	USART_init(MYUBRR);
     d80:	8f e1       	ldi	r24, 0x1F	; 31
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 8f 07 	call	0xf1e	; 0xf1e <USART_init>
	adcInit();
     d88:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     d8c:	0e 94 76 03 	call	0x6ec	; 0x6ec <joystickInit>
	touchButton_init();
     d90:	0e 94 62 07 	call	0xec4	; 0xec4 <touchButton_init>
	oled_init();
     d94:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_init>
	timer_init();
     d98:	0e 94 54 07 	call	0xea8	; 0xea8 <timer_init>
	sleep_init();
     d9c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <sleep_init>
	//menuInit();
	this_init();
     da0:	0e 94 38 04 	call	0x870	; 0x870 <this_init>
	printf("Finished this");
     da4:	8e e6       	ldi	r24, 0x6E	; 110
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	9f 93       	push	r25
     daa:	8f 93       	push	r24
     dac:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
	CAN_controller_init();
     db0:	0e 94 2d 03 	call	0x65a	; 0x65a <CAN_controller_init>
	sei();
     db4:	78 94       	sei
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	08 95       	ret

00000dbc <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     dc6:	c7 e8       	ldi	r28, 0x87	; 135
     dc8:	d2 e0       	ldi	r29, 0x02	; 2
     dca:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     dda:	87 b3       	in	r24, 0x17	; 23
     ddc:	80 6a       	ori	r24, 0xA0	; 160
     dde:	87 bb       	out	0x17, r24	; 23
     de0:	bc 9a       	sbi	0x17, 4	; 23
     de2:	8d b1       	in	r24, 0x0d	; 13
     de4:	81 65       	ori	r24, 0x51	; 81
     de6:	8d b9       	out	0x0d, r24	; 13
     de8:	c4 9a       	sbi	0x18, 4	; 24
     dea:	08 95       	ret

00000dec <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     dec:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     dee:	77 9b       	sbis	0x0e, 7	; 14
     df0:	fe cf       	rjmp	.-4      	; 0xdee <SPI_masterWrite+0x2>

}
     df2:	08 95       	ret

00000df4 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     df4:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     df6:	77 9b       	sbis	0x0e, 7	; 14
     df8:	fe cf       	rjmp	.-4      	; 0xdf6 <SPI_masterRead+0x2>
	return SPDR;
     dfa:	8f b1       	in	r24, 0x0f	; 15
}
     dfc:	08 95       	ret

00000dfe <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     dfe:	66 23       	and	r22, r22
     e00:	69 f0       	breq	.+26     	; 0xe1c <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     e02:	48 b3       	in	r20, 0x18	; 24
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	b9 01       	movw	r22, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <SPI_setChipSelect+0x12>
     e0c:	66 0f       	add	r22, r22
     e0e:	77 1f       	adc	r23, r23
     e10:	8a 95       	dec	r24
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <SPI_setChipSelect+0xe>
     e14:	cb 01       	movw	r24, r22
     e16:	84 2b       	or	r24, r20
     e18:	88 bb       	out	0x18, r24	; 24
     e1a:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     e1c:	48 b3       	in	r20, 0x18	; 24
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	b9 01       	movw	r22, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <SPI_setChipSelect+0x2c>
     e26:	66 0f       	add	r22, r22
     e28:	77 1f       	adc	r23, r23
     e2a:	8a 95       	dec	r24
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <SPI_setChipSelect+0x28>
     e2e:	cb 01       	movw	r24, r22
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	88 bb       	out	0x18, r24	; 24
     e36:	08 95       	ret

00000e38 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
	cli();
     e5a:	f8 94       	cli
	TCNT1 = 0x00;
     e5c:	1d bc       	out	0x2d, r1	; 45
     e5e:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     e60:	8d e7       	ldi	r24, 0x7D	; 125
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	0e 94 81 03 	call	0x702	; 0x702 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     e68:	87 e8       	ldi	r24, 0x87	; 135
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	0e 94 de 06 	call	0xdbc	; 0xdbc <slider_readPosition>
	touchButton_readButtons(&buttons);
     e70:	85 e8       	ldi	r24, 0x85	; 133
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 7b 07 	call	0xef6	; 0xef6 <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     e78:	8d e7       	ldi	r24, 0x7D	; 125
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <navigateMenu>
	menu_printCurrentMenu();
     e80:	0e 94 ef 05 	call	0xbde	; 0xbde <menu_printCurrentMenu>
	sei();
     e84:	78 94       	sei
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     ea8:	89 b7       	in	r24, 0x39	; 57
     eaa:	80 62       	ori	r24, 0x20	; 32
     eac:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     eae:	1d bc       	out	0x2d, r1	; 45
     eb0:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     eb2:	80 e3       	ldi	r24, 0x30	; 48
     eb4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     eb6:	85 e0       	ldi	r24, 0x05	; 5
     eb8:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     eba:	80 ec       	ldi	r24, 0xC0	; 192
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	99 bd       	out	0x29, r25	; 41
     ec0:	88 bd       	out	0x28, r24	; 40
     ec2:	08 95       	ret

00000ec4 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     ec4:	36 b3       	in	r19, 0x16	; 22
     ec6:	26 b3       	in	r18, 0x16	; 22
     ec8:	47 b3       	in	r20, 0x17	; 23
     eca:	32 70       	andi	r19, 0x02	; 2
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	bc 01       	movw	r22, r24
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <touchButton_init+0x14>
     ed4:	66 0f       	add	r22, r22
     ed6:	77 1f       	adc	r23, r23
     ed8:	3a 95       	dec	r19
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <touchButton_init+0x10>
     edc:	24 70       	andi	r18, 0x04	; 4
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <touchButton_init+0x20>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	2a 95       	dec	r18
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <touchButton_init+0x1c>
     ee8:	86 2b       	or	r24, r22
     eea:	97 2b       	or	r25, r23
     eec:	80 95       	com	r24
     eee:	90 95       	com	r25
     ef0:	84 23       	and	r24, r20
     ef2:	87 bb       	out	0x17, r24	; 23
     ef4:	08 95       	ret

00000ef6 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     ef6:	86 b3       	in	r24, 0x16	; 22
     ef8:	e5 e8       	ldi	r30, 0x85	; 133
     efa:	f2 e0       	ldi	r31, 0x02	; 2
     efc:	86 95       	lsr	r24
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     f02:	86 b3       	in	r24, 0x16	; 22
     f04:	82 fb       	bst	r24, 2
     f06:	88 27       	eor	r24, r24
     f08:	80 f9       	bld	r24, 0
     f0a:	81 83       	std	Z+1, r24	; 0x01
     f0c:	08 95       	ret

00000f0e <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     f0e:	5d 9b       	sbis	0x0b, 5	; 11
     f10:	fe cf       	rjmp	.-4      	; 0xf0e <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     f12:	8c b9       	out	0x0c, r24	; 12
     f14:	08 95       	ret

00000f16 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     f16:	5f 9b       	sbis	0x0b, 7	; 11
     f18:	fe cf       	rjmp	.-4      	; 0xf16 <USART_receiveChar>
		;
	
	return UDR0;
     f1a:	8c b1       	in	r24, 0x0c	; 12
     f1c:	08 95       	ret

00000f1e <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     f1e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     f20:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     f22:	88 e1       	ldi	r24, 0x18	; 24
     f24:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     f26:	8e e8       	ldi	r24, 0x8E	; 142
     f28:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     f2a:	6b e8       	ldi	r22, 0x8B	; 139
     f2c:	77 e0       	ldi	r23, 0x07	; 7
     f2e:	87 e8       	ldi	r24, 0x87	; 135
     f30:	97 e0       	ldi	r25, 0x07	; 7
     f32:	0e 94 84 0a 	call	0x1508	; 0x1508 <fdevopen>
     f36:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <uart+0x1>
     f3a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <uart>
     f3e:	08 95       	ret

00000f40 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     f40:	85 b7       	in	r24, 0x35	; 53
     f42:	80 68       	ori	r24, 0x80	; 128
     f44:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     f46:	80 b7       	in	r24, 0x30	; 48
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	80 bf       	out	0x30, r24	; 48
     f4c:	08 95       	ret
     f4e:	0e 94 2e 09 	call	0x125c	; 0x125c <__fp_pscA>
     f52:	60 f0       	brcs	.+24     	; 0xf6c <xmem_init+0x2c>
     f54:	80 e8       	ldi	r24, 0x80	; 128
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	09 f4       	brne	.+2      	; 0xf5c <xmem_init+0x1c>
     f5a:	9e ef       	ldi	r25, 0xFE	; 254
     f5c:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscB>
     f60:	28 f0       	brcs	.+10     	; 0xf6c <xmem_init+0x2c>
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	51 e0       	ldi	r21, 0x01	; 1
     f66:	71 f4       	brne	.+28     	; 0xf84 <atan2+0x10>
     f68:	5e ef       	ldi	r21, 0xFE	; 254
     f6a:	0c c0       	rjmp	.+24     	; 0xf84 <atan2+0x10>
     f6c:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_nan>
     f70:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_zero>

00000f74 <atan2>:
     f74:	e9 2f       	mov	r30, r25
     f76:	e0 78       	andi	r30, 0x80	; 128
     f78:	0e 94 4d 09 	call	0x129a	; 0x129a <__fp_split3>
     f7c:	40 f3       	brcs	.-48     	; 0xf4e <xmem_init+0xe>
     f7e:	09 2e       	mov	r0, r25
     f80:	05 2a       	or	r0, r21
     f82:	b1 f3       	breq	.-20     	; 0xf70 <xmem_init+0x30>
     f84:	26 17       	cp	r18, r22
     f86:	37 07       	cpc	r19, r23
     f88:	48 07       	cpc	r20, r24
     f8a:	59 07       	cpc	r21, r25
     f8c:	38 f0       	brcs	.+14     	; 0xf9c <atan2+0x28>
     f8e:	0e 2e       	mov	r0, r30
     f90:	07 f8       	bld	r0, 7
     f92:	e0 25       	eor	r30, r0
     f94:	69 f0       	breq	.+26     	; 0xfb0 <atan2+0x3c>
     f96:	e0 25       	eor	r30, r0
     f98:	e0 64       	ori	r30, 0x40	; 64
     f9a:	0a c0       	rjmp	.+20     	; 0xfb0 <atan2+0x3c>
     f9c:	ef 63       	ori	r30, 0x3F	; 63
     f9e:	07 f8       	bld	r0, 7
     fa0:	00 94       	com	r0
     fa2:	07 fa       	bst	r0, 7
     fa4:	db 01       	movw	r26, r22
     fa6:	b9 01       	movw	r22, r18
     fa8:	9d 01       	movw	r18, r26
     faa:	dc 01       	movw	r26, r24
     fac:	ca 01       	movw	r24, r20
     fae:	ad 01       	movw	r20, r26
     fb0:	ef 93       	push	r30
     fb2:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3_pse>
     fb6:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_round>
     fba:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <atan>
     fbe:	5f 91       	pop	r21
     fc0:	55 23       	and	r21, r21
     fc2:	39 f0       	breq	.+14     	; 0xfd2 <atan2+0x5e>
     fc4:	2b ed       	ldi	r18, 0xDB	; 219
     fc6:	3f e0       	ldi	r19, 0x0F	; 15
     fc8:	49 e4       	ldi	r20, 0x49	; 73
     fca:	50 fd       	sbrc	r21, 0
     fcc:	49 ec       	ldi	r20, 0xC9	; 201
     fce:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__addsf3>
     fd2:	08 95       	ret

00000fd4 <atan>:
     fd4:	df 93       	push	r29
     fd6:	dd 27       	eor	r29, r29
     fd8:	b9 2f       	mov	r27, r25
     fda:	bf 77       	andi	r27, 0x7F	; 127
     fdc:	40 e8       	ldi	r20, 0x80	; 128
     fde:	5f e3       	ldi	r21, 0x3F	; 63
     fe0:	16 16       	cp	r1, r22
     fe2:	17 06       	cpc	r1, r23
     fe4:	48 07       	cpc	r20, r24
     fe6:	5b 07       	cpc	r21, r27
     fe8:	18 f4       	brcc	.+6      	; 0xff0 <atan+0x1c>
     fea:	d9 2f       	mov	r29, r25
     fec:	0e 94 76 09 	call	0x12ec	; 0x12ec <inverse>
     ff0:	9f 93       	push	r25
     ff2:	8f 93       	push	r24
     ff4:	7f 93       	push	r23
     ff6:	6f 93       	push	r22
     ff8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <square>
     ffc:	e0 e7       	ldi	r30, 0x70	; 112
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	0e 94 07 09 	call	0x120e	; 0x120e <__fp_powser>
    1004:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_round>
    1008:	2f 91       	pop	r18
    100a:	3f 91       	pop	r19
    100c:	4f 91       	pop	r20
    100e:	5f 91       	pop	r21
    1010:	0e 94 91 09 	call	0x1322	; 0x1322 <__mulsf3x>
    1014:	dd 23       	and	r29, r29
    1016:	51 f0       	breq	.+20     	; 0x102c <atan+0x58>
    1018:	90 58       	subi	r25, 0x80	; 128
    101a:	a2 ea       	ldi	r26, 0xA2	; 162
    101c:	2a ed       	ldi	r18, 0xDA	; 218
    101e:	3f e0       	ldi	r19, 0x0F	; 15
    1020:	49 ec       	ldi	r20, 0xC9	; 201
    1022:	5f e3       	ldi	r21, 0x3F	; 63
    1024:	d0 78       	andi	r29, 0x80	; 128
    1026:	5d 27       	eor	r21, r29
    1028:	0e 94 07 0a 	call	0x140e	; 0x140e <__addsf3x>
    102c:	df 91       	pop	r29
    102e:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_round>

00001032 <__divsf3>:
    1032:	0e 94 2d 08 	call	0x105a	; 0x105a <__divsf3x>
    1036:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_round>
    103a:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscB>
    103e:	58 f0       	brcs	.+22     	; 0x1056 <__divsf3+0x24>
    1040:	0e 94 2e 09 	call	0x125c	; 0x125c <__fp_pscA>
    1044:	40 f0       	brcs	.+16     	; 0x1056 <__divsf3+0x24>
    1046:	29 f4       	brne	.+10     	; 0x1052 <__divsf3+0x20>
    1048:	5f 3f       	cpi	r21, 0xFF	; 255
    104a:	29 f0       	breq	.+10     	; 0x1056 <__divsf3+0x24>
    104c:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__fp_inf>
    1050:	51 11       	cpse	r21, r1
    1052:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__fp_szero>
    1056:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_nan>

0000105a <__divsf3x>:
    105a:	0e 94 4d 09 	call	0x129a	; 0x129a <__fp_split3>
    105e:	68 f3       	brcs	.-38     	; 0x103a <__divsf3+0x8>

00001060 <__divsf3_pse>:
    1060:	99 23       	and	r25, r25
    1062:	b1 f3       	breq	.-20     	; 0x1050 <__divsf3+0x1e>
    1064:	55 23       	and	r21, r21
    1066:	91 f3       	breq	.-28     	; 0x104c <__divsf3+0x1a>
    1068:	95 1b       	sub	r25, r21
    106a:	55 0b       	sbc	r21, r21
    106c:	bb 27       	eor	r27, r27
    106e:	aa 27       	eor	r26, r26
    1070:	62 17       	cp	r22, r18
    1072:	73 07       	cpc	r23, r19
    1074:	84 07       	cpc	r24, r20
    1076:	38 f0       	brcs	.+14     	; 0x1086 <__divsf3_pse+0x26>
    1078:	9f 5f       	subi	r25, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	44 1f       	adc	r20, r20
    1082:	aa 1f       	adc	r26, r26
    1084:	a9 f3       	breq	.-22     	; 0x1070 <__divsf3_pse+0x10>
    1086:	35 d0       	rcall	.+106    	; 0x10f2 <__divsf3_pse+0x92>
    1088:	0e 2e       	mov	r0, r30
    108a:	3a f0       	brmi	.+14     	; 0x109a <__divsf3_pse+0x3a>
    108c:	e0 e8       	ldi	r30, 0x80	; 128
    108e:	32 d0       	rcall	.+100    	; 0x10f4 <__divsf3_pse+0x94>
    1090:	91 50       	subi	r25, 0x01	; 1
    1092:	50 40       	sbci	r21, 0x00	; 0
    1094:	e6 95       	lsr	r30
    1096:	00 1c       	adc	r0, r0
    1098:	ca f7       	brpl	.-14     	; 0x108c <__divsf3_pse+0x2c>
    109a:	2b d0       	rcall	.+86     	; 0x10f2 <__divsf3_pse+0x92>
    109c:	fe 2f       	mov	r31, r30
    109e:	29 d0       	rcall	.+82     	; 0x10f2 <__divsf3_pse+0x92>
    10a0:	66 0f       	add	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	88 1f       	adc	r24, r24
    10a6:	bb 1f       	adc	r27, r27
    10a8:	26 17       	cp	r18, r22
    10aa:	37 07       	cpc	r19, r23
    10ac:	48 07       	cpc	r20, r24
    10ae:	ab 07       	cpc	r26, r27
    10b0:	b0 e8       	ldi	r27, 0x80	; 128
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <__divsf3_pse+0x56>
    10b4:	bb 0b       	sbc	r27, r27
    10b6:	80 2d       	mov	r24, r0
    10b8:	bf 01       	movw	r22, r30
    10ba:	ff 27       	eor	r31, r31
    10bc:	93 58       	subi	r25, 0x83	; 131
    10be:	5f 4f       	sbci	r21, 0xFF	; 255
    10c0:	3a f0       	brmi	.+14     	; 0x10d0 <__divsf3_pse+0x70>
    10c2:	9e 3f       	cpi	r25, 0xFE	; 254
    10c4:	51 05       	cpc	r21, r1
    10c6:	78 f0       	brcs	.+30     	; 0x10e6 <__divsf3_pse+0x86>
    10c8:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__fp_inf>
    10cc:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__fp_szero>
    10d0:	5f 3f       	cpi	r21, 0xFF	; 255
    10d2:	e4 f3       	brlt	.-8      	; 0x10cc <__divsf3_pse+0x6c>
    10d4:	98 3e       	cpi	r25, 0xE8	; 232
    10d6:	d4 f3       	brlt	.-12     	; 0x10cc <__divsf3_pse+0x6c>
    10d8:	86 95       	lsr	r24
    10da:	77 95       	ror	r23
    10dc:	67 95       	ror	r22
    10de:	b7 95       	ror	r27
    10e0:	f7 95       	ror	r31
    10e2:	9f 5f       	subi	r25, 0xFF	; 255
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <__divsf3_pse+0x78>
    10e6:	88 0f       	add	r24, r24
    10e8:	91 1d       	adc	r25, r1
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	97 f9       	bld	r25, 7
    10f0:	08 95       	ret
    10f2:	e1 e0       	ldi	r30, 0x01	; 1
    10f4:	66 0f       	add	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	bb 1f       	adc	r27, r27
    10fc:	62 17       	cp	r22, r18
    10fe:	73 07       	cpc	r23, r19
    1100:	84 07       	cpc	r24, r20
    1102:	ba 07       	cpc	r27, r26
    1104:	20 f0       	brcs	.+8      	; 0x110e <__divsf3_pse+0xae>
    1106:	62 1b       	sub	r22, r18
    1108:	73 0b       	sbc	r23, r19
    110a:	84 0b       	sbc	r24, r20
    110c:	ba 0b       	sbc	r27, r26
    110e:	ee 1f       	adc	r30, r30
    1110:	88 f7       	brcc	.-30     	; 0x10f4 <__divsf3_pse+0x94>
    1112:	e0 95       	com	r30
    1114:	08 95       	ret

00001116 <__fixsfsi>:
    1116:	0e 94 92 08 	call	0x1124	; 0x1124 <__fixunssfsi>
    111a:	68 94       	set
    111c:	b1 11       	cpse	r27, r1
    111e:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__fp_szero>
    1122:	08 95       	ret

00001124 <__fixunssfsi>:
    1124:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_splitA>
    1128:	88 f0       	brcs	.+34     	; 0x114c <__fixunssfsi+0x28>
    112a:	9f 57       	subi	r25, 0x7F	; 127
    112c:	98 f0       	brcs	.+38     	; 0x1154 <__fixunssfsi+0x30>
    112e:	b9 2f       	mov	r27, r25
    1130:	99 27       	eor	r25, r25
    1132:	b7 51       	subi	r27, 0x17	; 23
    1134:	b0 f0       	brcs	.+44     	; 0x1162 <__fixunssfsi+0x3e>
    1136:	e1 f0       	breq	.+56     	; 0x1170 <__fixunssfsi+0x4c>
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	1a f0       	brmi	.+6      	; 0x1148 <__fixunssfsi+0x24>
    1142:	ba 95       	dec	r27
    1144:	c9 f7       	brne	.-14     	; 0x1138 <__fixunssfsi+0x14>
    1146:	14 c0       	rjmp	.+40     	; 0x1170 <__fixunssfsi+0x4c>
    1148:	b1 30       	cpi	r27, 0x01	; 1
    114a:	91 f0       	breq	.+36     	; 0x1170 <__fixunssfsi+0x4c>
    114c:	0e 94 6f 09 	call	0x12de	; 0x12de <__fp_zero>
    1150:	b1 e0       	ldi	r27, 0x01	; 1
    1152:	08 95       	ret
    1154:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_zero>
    1158:	67 2f       	mov	r22, r23
    115a:	78 2f       	mov	r23, r24
    115c:	88 27       	eor	r24, r24
    115e:	b8 5f       	subi	r27, 0xF8	; 248
    1160:	39 f0       	breq	.+14     	; 0x1170 <__fixunssfsi+0x4c>
    1162:	b9 3f       	cpi	r27, 0xF9	; 249
    1164:	cc f3       	brlt	.-14     	; 0x1158 <__fixunssfsi+0x34>
    1166:	86 95       	lsr	r24
    1168:	77 95       	ror	r23
    116a:	67 95       	ror	r22
    116c:	b3 95       	inc	r27
    116e:	d9 f7       	brne	.-10     	; 0x1166 <__fixunssfsi+0x42>
    1170:	3e f4       	brtc	.+14     	; 0x1180 <__fixunssfsi+0x5c>
    1172:	90 95       	com	r25
    1174:	80 95       	com	r24
    1176:	70 95       	com	r23
    1178:	61 95       	neg	r22
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	08 95       	ret

00001182 <__floatunsisf>:
    1182:	e8 94       	clt
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <__floatsisf+0x12>

00001186 <__floatsisf>:
    1186:	97 fb       	bst	r25, 7
    1188:	3e f4       	brtc	.+14     	; 0x1198 <__floatsisf+0x12>
    118a:	90 95       	com	r25
    118c:	80 95       	com	r24
    118e:	70 95       	com	r23
    1190:	61 95       	neg	r22
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	8f 4f       	sbci	r24, 0xFF	; 255
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	99 23       	and	r25, r25
    119a:	a9 f0       	breq	.+42     	; 0x11c6 <__floatsisf+0x40>
    119c:	f9 2f       	mov	r31, r25
    119e:	96 e9       	ldi	r25, 0x96	; 150
    11a0:	bb 27       	eor	r27, r27
    11a2:	93 95       	inc	r25
    11a4:	f6 95       	lsr	r31
    11a6:	87 95       	ror	r24
    11a8:	77 95       	ror	r23
    11aa:	67 95       	ror	r22
    11ac:	b7 95       	ror	r27
    11ae:	f1 11       	cpse	r31, r1
    11b0:	f8 cf       	rjmp	.-16     	; 0x11a2 <__floatsisf+0x1c>
    11b2:	fa f4       	brpl	.+62     	; 0x11f2 <__floatsisf+0x6c>
    11b4:	bb 0f       	add	r27, r27
    11b6:	11 f4       	brne	.+4      	; 0x11bc <__floatsisf+0x36>
    11b8:	60 ff       	sbrs	r22, 0
    11ba:	1b c0       	rjmp	.+54     	; 0x11f2 <__floatsisf+0x6c>
    11bc:	6f 5f       	subi	r22, 0xFF	; 255
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	16 c0       	rjmp	.+44     	; 0x11f2 <__floatsisf+0x6c>
    11c6:	88 23       	and	r24, r24
    11c8:	11 f0       	breq	.+4      	; 0x11ce <__floatsisf+0x48>
    11ca:	96 e9       	ldi	r25, 0x96	; 150
    11cc:	11 c0       	rjmp	.+34     	; 0x11f0 <__floatsisf+0x6a>
    11ce:	77 23       	and	r23, r23
    11d0:	21 f0       	breq	.+8      	; 0x11da <__floatsisf+0x54>
    11d2:	9e e8       	ldi	r25, 0x8E	; 142
    11d4:	87 2f       	mov	r24, r23
    11d6:	76 2f       	mov	r23, r22
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <__floatsisf+0x5e>
    11da:	66 23       	and	r22, r22
    11dc:	71 f0       	breq	.+28     	; 0x11fa <__floatsisf+0x74>
    11de:	96 e8       	ldi	r25, 0x86	; 134
    11e0:	86 2f       	mov	r24, r22
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	2a f0       	brmi	.+10     	; 0x11f2 <__floatsisf+0x6c>
    11e8:	9a 95       	dec	r25
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	da f7       	brpl	.-10     	; 0x11e8 <__floatsisf+0x62>
    11f2:	88 0f       	add	r24, r24
    11f4:	96 95       	lsr	r25
    11f6:	87 95       	ror	r24
    11f8:	97 f9       	bld	r25, 7
    11fa:	08 95       	ret

000011fc <__fp_inf>:
    11fc:	97 f9       	bld	r25, 7
    11fe:	9f 67       	ori	r25, 0x7F	; 127
    1200:	80 e8       	ldi	r24, 0x80	; 128
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	08 95       	ret

00001208 <__fp_nan>:
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    120a:	80 ec       	ldi	r24, 0xC0	; 192
    120c:	08 95       	ret

0000120e <__fp_powser>:
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	1f 93       	push	r17
    1214:	0f 93       	push	r16
    1216:	ff 92       	push	r15
    1218:	ef 92       	push	r14
    121a:	df 92       	push	r13
    121c:	7b 01       	movw	r14, r22
    121e:	8c 01       	movw	r16, r24
    1220:	68 94       	set
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <__fp_powser+0x22>
    1224:	da 2e       	mov	r13, r26
    1226:	ef 01       	movw	r28, r30
    1228:	0e 94 91 09 	call	0x1322	; 0x1322 <__mulsf3x>
    122c:	fe 01       	movw	r30, r28
    122e:	e8 94       	clt
    1230:	a5 91       	lpm	r26, Z+
    1232:	25 91       	lpm	r18, Z+
    1234:	35 91       	lpm	r19, Z+
    1236:	45 91       	lpm	r20, Z+
    1238:	55 91       	lpm	r21, Z+
    123a:	a6 f3       	brts	.-24     	; 0x1224 <__fp_powser+0x16>
    123c:	ef 01       	movw	r28, r30
    123e:	0e 94 07 0a 	call	0x140e	; 0x140e <__addsf3x>
    1242:	fe 01       	movw	r30, r28
    1244:	97 01       	movw	r18, r14
    1246:	a8 01       	movw	r20, r16
    1248:	da 94       	dec	r13
    124a:	69 f7       	brne	.-38     	; 0x1226 <__fp_powser+0x18>
    124c:	df 90       	pop	r13
    124e:	ef 90       	pop	r14
    1250:	ff 90       	pop	r15
    1252:	0f 91       	pop	r16
    1254:	1f 91       	pop	r17
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <__fp_pscA>:
    125c:	00 24       	eor	r0, r0
    125e:	0a 94       	dec	r0
    1260:	16 16       	cp	r1, r22
    1262:	17 06       	cpc	r1, r23
    1264:	18 06       	cpc	r1, r24
    1266:	09 06       	cpc	r0, r25
    1268:	08 95       	ret

0000126a <__fp_pscB>:
    126a:	00 24       	eor	r0, r0
    126c:	0a 94       	dec	r0
    126e:	12 16       	cp	r1, r18
    1270:	13 06       	cpc	r1, r19
    1272:	14 06       	cpc	r1, r20
    1274:	05 06       	cpc	r0, r21
    1276:	08 95       	ret

00001278 <__fp_round>:
    1278:	09 2e       	mov	r0, r25
    127a:	03 94       	inc	r0
    127c:	00 0c       	add	r0, r0
    127e:	11 f4       	brne	.+4      	; 0x1284 <__fp_round+0xc>
    1280:	88 23       	and	r24, r24
    1282:	52 f0       	brmi	.+20     	; 0x1298 <__fp_round+0x20>
    1284:	bb 0f       	add	r27, r27
    1286:	40 f4       	brcc	.+16     	; 0x1298 <__fp_round+0x20>
    1288:	bf 2b       	or	r27, r31
    128a:	11 f4       	brne	.+4      	; 0x1290 <__fp_round+0x18>
    128c:	60 ff       	sbrs	r22, 0
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <__fp_round+0x20>
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	8f 4f       	sbci	r24, 0xFF	; 255
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	08 95       	ret

0000129a <__fp_split3>:
    129a:	57 fd       	sbrc	r21, 7
    129c:	90 58       	subi	r25, 0x80	; 128
    129e:	44 0f       	add	r20, r20
    12a0:	55 1f       	adc	r21, r21
    12a2:	59 f0       	breq	.+22     	; 0x12ba <__fp_splitA+0x10>
    12a4:	5f 3f       	cpi	r21, 0xFF	; 255
    12a6:	71 f0       	breq	.+28     	; 0x12c4 <__fp_splitA+0x1a>
    12a8:	47 95       	ror	r20

000012aa <__fp_splitA>:
    12aa:	88 0f       	add	r24, r24
    12ac:	97 fb       	bst	r25, 7
    12ae:	99 1f       	adc	r25, r25
    12b0:	61 f0       	breq	.+24     	; 0x12ca <__fp_splitA+0x20>
    12b2:	9f 3f       	cpi	r25, 0xFF	; 255
    12b4:	79 f0       	breq	.+30     	; 0x12d4 <__fp_splitA+0x2a>
    12b6:	87 95       	ror	r24
    12b8:	08 95       	ret
    12ba:	12 16       	cp	r1, r18
    12bc:	13 06       	cpc	r1, r19
    12be:	14 06       	cpc	r1, r20
    12c0:	55 1f       	adc	r21, r21
    12c2:	f2 cf       	rjmp	.-28     	; 0x12a8 <__fp_split3+0xe>
    12c4:	46 95       	lsr	r20
    12c6:	f1 df       	rcall	.-30     	; 0x12aa <__fp_splitA>
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <__fp_splitA+0x30>
    12ca:	16 16       	cp	r1, r22
    12cc:	17 06       	cpc	r1, r23
    12ce:	18 06       	cpc	r1, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	f1 cf       	rjmp	.-30     	; 0x12b6 <__fp_splitA+0xc>
    12d4:	86 95       	lsr	r24
    12d6:	71 05       	cpc	r23, r1
    12d8:	61 05       	cpc	r22, r1
    12da:	08 94       	sec
    12dc:	08 95       	ret

000012de <__fp_zero>:
    12de:	e8 94       	clt

000012e0 <__fp_szero>:
    12e0:	bb 27       	eor	r27, r27
    12e2:	66 27       	eor	r22, r22
    12e4:	77 27       	eor	r23, r23
    12e6:	cb 01       	movw	r24, r22
    12e8:	97 f9       	bld	r25, 7
    12ea:	08 95       	ret

000012ec <inverse>:
    12ec:	9b 01       	movw	r18, r22
    12ee:	ac 01       	movw	r20, r24
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	9f e3       	ldi	r25, 0x3F	; 63
    12f8:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__divsf3>

000012fc <__mulsf3>:
    12fc:	0e 94 91 09 	call	0x1322	; 0x1322 <__mulsf3x>
    1300:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_round>
    1304:	0e 94 2e 09 	call	0x125c	; 0x125c <__fp_pscA>
    1308:	38 f0       	brcs	.+14     	; 0x1318 <__mulsf3+0x1c>
    130a:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscB>
    130e:	20 f0       	brcs	.+8      	; 0x1318 <__mulsf3+0x1c>
    1310:	95 23       	and	r25, r21
    1312:	11 f0       	breq	.+4      	; 0x1318 <__mulsf3+0x1c>
    1314:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__fp_inf>
    1318:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_nan>
    131c:	11 24       	eor	r1, r1
    131e:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__fp_szero>

00001322 <__mulsf3x>:
    1322:	0e 94 4d 09 	call	0x129a	; 0x129a <__fp_split3>
    1326:	70 f3       	brcs	.-36     	; 0x1304 <__mulsf3+0x8>

00001328 <__mulsf3_pse>:
    1328:	95 9f       	mul	r25, r21
    132a:	c1 f3       	breq	.-16     	; 0x131c <__mulsf3+0x20>
    132c:	95 0f       	add	r25, r21
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	55 1f       	adc	r21, r21
    1332:	62 9f       	mul	r22, r18
    1334:	f0 01       	movw	r30, r0
    1336:	72 9f       	mul	r23, r18
    1338:	bb 27       	eor	r27, r27
    133a:	f0 0d       	add	r31, r0
    133c:	b1 1d       	adc	r27, r1
    133e:	63 9f       	mul	r22, r19
    1340:	aa 27       	eor	r26, r26
    1342:	f0 0d       	add	r31, r0
    1344:	b1 1d       	adc	r27, r1
    1346:	aa 1f       	adc	r26, r26
    1348:	64 9f       	mul	r22, r20
    134a:	66 27       	eor	r22, r22
    134c:	b0 0d       	add	r27, r0
    134e:	a1 1d       	adc	r26, r1
    1350:	66 1f       	adc	r22, r22
    1352:	82 9f       	mul	r24, r18
    1354:	22 27       	eor	r18, r18
    1356:	b0 0d       	add	r27, r0
    1358:	a1 1d       	adc	r26, r1
    135a:	62 1f       	adc	r22, r18
    135c:	73 9f       	mul	r23, r19
    135e:	b0 0d       	add	r27, r0
    1360:	a1 1d       	adc	r26, r1
    1362:	62 1f       	adc	r22, r18
    1364:	83 9f       	mul	r24, r19
    1366:	a0 0d       	add	r26, r0
    1368:	61 1d       	adc	r22, r1
    136a:	22 1f       	adc	r18, r18
    136c:	74 9f       	mul	r23, r20
    136e:	33 27       	eor	r19, r19
    1370:	a0 0d       	add	r26, r0
    1372:	61 1d       	adc	r22, r1
    1374:	23 1f       	adc	r18, r19
    1376:	84 9f       	mul	r24, r20
    1378:	60 0d       	add	r22, r0
    137a:	21 1d       	adc	r18, r1
    137c:	82 2f       	mov	r24, r18
    137e:	76 2f       	mov	r23, r22
    1380:	6a 2f       	mov	r22, r26
    1382:	11 24       	eor	r1, r1
    1384:	9f 57       	subi	r25, 0x7F	; 127
    1386:	50 40       	sbci	r21, 0x00	; 0
    1388:	9a f0       	brmi	.+38     	; 0x13b0 <__mulsf3_pse+0x88>
    138a:	f1 f0       	breq	.+60     	; 0x13c8 <__mulsf3_pse+0xa0>
    138c:	88 23       	and	r24, r24
    138e:	4a f0       	brmi	.+18     	; 0x13a2 <__mulsf3_pse+0x7a>
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	bb 1f       	adc	r27, r27
    1396:	66 1f       	adc	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	91 50       	subi	r25, 0x01	; 1
    139e:	50 40       	sbci	r21, 0x00	; 0
    13a0:	a9 f7       	brne	.-22     	; 0x138c <__mulsf3_pse+0x64>
    13a2:	9e 3f       	cpi	r25, 0xFE	; 254
    13a4:	51 05       	cpc	r21, r1
    13a6:	80 f0       	brcs	.+32     	; 0x13c8 <__mulsf3_pse+0xa0>
    13a8:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__fp_inf>
    13ac:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__fp_szero>
    13b0:	5f 3f       	cpi	r21, 0xFF	; 255
    13b2:	e4 f3       	brlt	.-8      	; 0x13ac <__mulsf3_pse+0x84>
    13b4:	98 3e       	cpi	r25, 0xE8	; 232
    13b6:	d4 f3       	brlt	.-12     	; 0x13ac <__mulsf3_pse+0x84>
    13b8:	86 95       	lsr	r24
    13ba:	77 95       	ror	r23
    13bc:	67 95       	ror	r22
    13be:	b7 95       	ror	r27
    13c0:	f7 95       	ror	r31
    13c2:	e7 95       	ror	r30
    13c4:	9f 5f       	subi	r25, 0xFF	; 255
    13c6:	c1 f7       	brne	.-16     	; 0x13b8 <__mulsf3_pse+0x90>
    13c8:	fe 2b       	or	r31, r30
    13ca:	88 0f       	add	r24, r24
    13cc:	91 1d       	adc	r25, r1
    13ce:	96 95       	lsr	r25
    13d0:	87 95       	ror	r24
    13d2:	97 f9       	bld	r25, 7
    13d4:	08 95       	ret

000013d6 <square>:
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__mulsf3>

000013de <__subsf3>:
    13de:	50 58       	subi	r21, 0x80	; 128

000013e0 <__addsf3>:
    13e0:	bb 27       	eor	r27, r27
    13e2:	aa 27       	eor	r26, r26
    13e4:	0e 94 07 0a 	call	0x140e	; 0x140e <__addsf3x>
    13e8:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_round>
    13ec:	0e 94 2e 09 	call	0x125c	; 0x125c <__fp_pscA>
    13f0:	38 f0       	brcs	.+14     	; 0x1400 <__addsf3+0x20>
    13f2:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscB>
    13f6:	20 f0       	brcs	.+8      	; 0x1400 <__addsf3+0x20>
    13f8:	39 f4       	brne	.+14     	; 0x1408 <__addsf3+0x28>
    13fa:	9f 3f       	cpi	r25, 0xFF	; 255
    13fc:	19 f4       	brne	.+6      	; 0x1404 <__addsf3+0x24>
    13fe:	26 f4       	brtc	.+8      	; 0x1408 <__addsf3+0x28>
    1400:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_nan>
    1404:	0e f4       	brtc	.+2      	; 0x1408 <__addsf3+0x28>
    1406:	e0 95       	com	r30
    1408:	e7 fb       	bst	r30, 7
    140a:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__fp_inf>

0000140e <__addsf3x>:
    140e:	e9 2f       	mov	r30, r25
    1410:	0e 94 4d 09 	call	0x129a	; 0x129a <__fp_split3>
    1414:	58 f3       	brcs	.-42     	; 0x13ec <__addsf3+0xc>
    1416:	ba 17       	cp	r27, r26
    1418:	62 07       	cpc	r22, r18
    141a:	73 07       	cpc	r23, r19
    141c:	84 07       	cpc	r24, r20
    141e:	95 07       	cpc	r25, r21
    1420:	20 f0       	brcs	.+8      	; 0x142a <__addsf3x+0x1c>
    1422:	79 f4       	brne	.+30     	; 0x1442 <__addsf3x+0x34>
    1424:	a6 f5       	brtc	.+104    	; 0x148e <__addsf3x+0x80>
    1426:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_zero>
    142a:	0e f4       	brtc	.+2      	; 0x142e <__addsf3x+0x20>
    142c:	e0 95       	com	r30
    142e:	0b 2e       	mov	r0, r27
    1430:	ba 2f       	mov	r27, r26
    1432:	a0 2d       	mov	r26, r0
    1434:	0b 01       	movw	r0, r22
    1436:	b9 01       	movw	r22, r18
    1438:	90 01       	movw	r18, r0
    143a:	0c 01       	movw	r0, r24
    143c:	ca 01       	movw	r24, r20
    143e:	a0 01       	movw	r20, r0
    1440:	11 24       	eor	r1, r1
    1442:	ff 27       	eor	r31, r31
    1444:	59 1b       	sub	r21, r25
    1446:	99 f0       	breq	.+38     	; 0x146e <__addsf3x+0x60>
    1448:	59 3f       	cpi	r21, 0xF9	; 249
    144a:	50 f4       	brcc	.+20     	; 0x1460 <__addsf3x+0x52>
    144c:	50 3e       	cpi	r21, 0xE0	; 224
    144e:	68 f1       	brcs	.+90     	; 0x14aa <__addsf3x+0x9c>
    1450:	1a 16       	cp	r1, r26
    1452:	f0 40       	sbci	r31, 0x00	; 0
    1454:	a2 2f       	mov	r26, r18
    1456:	23 2f       	mov	r18, r19
    1458:	34 2f       	mov	r19, r20
    145a:	44 27       	eor	r20, r20
    145c:	58 5f       	subi	r21, 0xF8	; 248
    145e:	f3 cf       	rjmp	.-26     	; 0x1446 <__addsf3x+0x38>
    1460:	46 95       	lsr	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	a7 95       	ror	r26
    1468:	f0 40       	sbci	r31, 0x00	; 0
    146a:	53 95       	inc	r21
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__addsf3x+0x52>
    146e:	7e f4       	brtc	.+30     	; 0x148e <__addsf3x+0x80>
    1470:	1f 16       	cp	r1, r31
    1472:	ba 0b       	sbc	r27, r26
    1474:	62 0b       	sbc	r22, r18
    1476:	73 0b       	sbc	r23, r19
    1478:	84 0b       	sbc	r24, r20
    147a:	ba f0       	brmi	.+46     	; 0x14aa <__addsf3x+0x9c>
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	a1 f0       	breq	.+40     	; 0x14a8 <__addsf3x+0x9a>
    1480:	ff 0f       	add	r31, r31
    1482:	bb 1f       	adc	r27, r27
    1484:	66 1f       	adc	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	c2 f7       	brpl	.-16     	; 0x147c <__addsf3x+0x6e>
    148c:	0e c0       	rjmp	.+28     	; 0x14aa <__addsf3x+0x9c>
    148e:	ba 0f       	add	r27, r26
    1490:	62 1f       	adc	r22, r18
    1492:	73 1f       	adc	r23, r19
    1494:	84 1f       	adc	r24, r20
    1496:	48 f4       	brcc	.+18     	; 0x14aa <__addsf3x+0x9c>
    1498:	87 95       	ror	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	b7 95       	ror	r27
    14a0:	f7 95       	ror	r31
    14a2:	9e 3f       	cpi	r25, 0xFE	; 254
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <__addsf3x+0x9a>
    14a6:	b0 cf       	rjmp	.-160    	; 0x1408 <__addsf3+0x28>
    14a8:	93 95       	inc	r25
    14aa:	88 0f       	add	r24, r24
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <__addsf3x+0xa2>
    14ae:	99 27       	eor	r25, r25
    14b0:	ee 0f       	add	r30, r30
    14b2:	97 95       	ror	r25
    14b4:	87 95       	ror	r24
    14b6:	08 95       	ret

000014b8 <__divmodhi4>:
    14b8:	97 fb       	bst	r25, 7
    14ba:	07 2e       	mov	r0, r23
    14bc:	16 f4       	brtc	.+4      	; 0x14c2 <__divmodhi4+0xa>
    14be:	00 94       	com	r0
    14c0:	07 d0       	rcall	.+14     	; 0x14d0 <__divmodhi4_neg1>
    14c2:	77 fd       	sbrc	r23, 7
    14c4:	09 d0       	rcall	.+18     	; 0x14d8 <__divmodhi4_neg2>
    14c6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__udivmodhi4>
    14ca:	07 fc       	sbrc	r0, 7
    14cc:	05 d0       	rcall	.+10     	; 0x14d8 <__divmodhi4_neg2>
    14ce:	3e f4       	brtc	.+14     	; 0x14de <__divmodhi4_exit>

000014d0 <__divmodhi4_neg1>:
    14d0:	90 95       	com	r25
    14d2:	81 95       	neg	r24
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	08 95       	ret

000014d8 <__divmodhi4_neg2>:
    14d8:	70 95       	com	r23
    14da:	61 95       	neg	r22
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255

000014de <__divmodhi4_exit>:
    14de:	08 95       	ret

000014e0 <__udivmodhi4>:
    14e0:	aa 1b       	sub	r26, r26
    14e2:	bb 1b       	sub	r27, r27
    14e4:	51 e1       	ldi	r21, 0x11	; 17
    14e6:	07 c0       	rjmp	.+14     	; 0x14f6 <__udivmodhi4_ep>

000014e8 <__udivmodhi4_loop>:
    14e8:	aa 1f       	adc	r26, r26
    14ea:	bb 1f       	adc	r27, r27
    14ec:	a6 17       	cp	r26, r22
    14ee:	b7 07       	cpc	r27, r23
    14f0:	10 f0       	brcs	.+4      	; 0x14f6 <__udivmodhi4_ep>
    14f2:	a6 1b       	sub	r26, r22
    14f4:	b7 0b       	sbc	r27, r23

000014f6 <__udivmodhi4_ep>:
    14f6:	88 1f       	adc	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	5a 95       	dec	r21
    14fc:	a9 f7       	brne	.-22     	; 0x14e8 <__udivmodhi4_loop>
    14fe:	80 95       	com	r24
    1500:	90 95       	com	r25
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	08 95       	ret

00001508 <fdevopen>:
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	31 f4       	brne	.+12     	; 0x1520 <fdevopen+0x18>
    1514:	61 15       	cp	r22, r1
    1516:	71 05       	cpc	r23, r1
    1518:	19 f4       	brne	.+6      	; 0x1520 <fdevopen+0x18>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	3a c0       	rjmp	.+116    	; 0x1594 <fdevopen+0x8c>
    1520:	8b 01       	movw	r16, r22
    1522:	ec 01       	movw	r28, r24
    1524:	6e e0       	ldi	r22, 0x0E	; 14
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 c6 0c 	call	0x198c	; 0x198c <calloc>
    1530:	fc 01       	movw	r30, r24
    1532:	89 2b       	or	r24, r25
    1534:	91 f3       	breq	.-28     	; 0x151a <fdevopen+0x12>
    1536:	80 e8       	ldi	r24, 0x80	; 128
    1538:	83 83       	std	Z+3, r24	; 0x03
    153a:	01 15       	cp	r16, r1
    153c:	11 05       	cpc	r17, r1
    153e:	71 f0       	breq	.+28     	; 0x155c <fdevopen+0x54>
    1540:	13 87       	std	Z+11, r17	; 0x0b
    1542:	02 87       	std	Z+10, r16	; 0x0a
    1544:	81 e8       	ldi	r24, 0x81	; 129
    1546:	83 83       	std	Z+3, r24	; 0x03
    1548:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <__iob>
    154c:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <__iob+0x1>
    1550:	89 2b       	or	r24, r25
    1552:	21 f4       	brne	.+8      	; 0x155c <fdevopen+0x54>
    1554:	f0 93 ee 03 	sts	0x03EE, r31	; 0x8003ee <__iob+0x1>
    1558:	e0 93 ed 03 	sts	0x03ED, r30	; 0x8003ed <__iob>
    155c:	20 97       	sbiw	r28, 0x00	; 0
    155e:	c9 f0       	breq	.+50     	; 0x1592 <fdevopen+0x8a>
    1560:	d1 87       	std	Z+9, r29	; 0x09
    1562:	c0 87       	std	Z+8, r28	; 0x08
    1564:	83 81       	ldd	r24, Z+3	; 0x03
    1566:	82 60       	ori	r24, 0x02	; 2
    1568:	83 83       	std	Z+3, r24	; 0x03
    156a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <__iob+0x2>
    156e:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <__iob+0x3>
    1572:	89 2b       	or	r24, r25
    1574:	71 f4       	brne	.+28     	; 0x1592 <fdevopen+0x8a>
    1576:	f0 93 f0 03 	sts	0x03F0, r31	; 0x8003f0 <__iob+0x3>
    157a:	e0 93 ef 03 	sts	0x03EF, r30	; 0x8003ef <__iob+0x2>
    157e:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <__iob+0x4>
    1582:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <__iob+0x5>
    1586:	89 2b       	or	r24, r25
    1588:	21 f4       	brne	.+8      	; 0x1592 <fdevopen+0x8a>
    158a:	f0 93 f2 03 	sts	0x03F2, r31	; 0x8003f2 <__iob+0x5>
    158e:	e0 93 f1 03 	sts	0x03F1, r30	; 0x8003f1 <__iob+0x4>
    1592:	cf 01       	movw	r24, r30
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <printf>:
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 ed       	ldi	r30, 0xD5	; 213
    15a4:	fa e0       	ldi	r31, 0x0A	; 10
    15a6:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__prologue_saves__+0x20>
    15aa:	ae 01       	movw	r20, r28
    15ac:	4b 5f       	subi	r20, 0xFB	; 251
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255
    15b0:	fa 01       	movw	r30, r20
    15b2:	61 91       	ld	r22, Z+
    15b4:	71 91       	ld	r23, Z+
    15b6:	af 01       	movw	r20, r30
    15b8:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <__iob+0x2>
    15bc:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <__iob+0x3>
    15c0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <vfprintf>
    15c4:	e2 e0       	ldi	r30, 0x02	; 2
    15c6:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__epilogue_restores__+0x20>

000015ca <vfprintf>:
    15ca:	ab e0       	ldi	r26, 0x0B	; 11
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb ee       	ldi	r30, 0xEB	; 235
    15d0:	fa e0       	ldi	r31, 0x0A	; 10
    15d2:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__prologue_saves__>
    15d6:	6c 01       	movw	r12, r24
    15d8:	7b 01       	movw	r14, r22
    15da:	8a 01       	movw	r16, r20
    15dc:	fc 01       	movw	r30, r24
    15de:	17 82       	std	Z+7, r1	; 0x07
    15e0:	16 82       	std	Z+6, r1	; 0x06
    15e2:	83 81       	ldd	r24, Z+3	; 0x03
    15e4:	81 ff       	sbrs	r24, 1
    15e6:	cc c1       	rjmp	.+920    	; 0x1980 <vfprintf+0x3b6>
    15e8:	ce 01       	movw	r24, r28
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	3c 01       	movw	r6, r24
    15ee:	f6 01       	movw	r30, r12
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	f7 01       	movw	r30, r14
    15f4:	93 fd       	sbrc	r25, 3
    15f6:	85 91       	lpm	r24, Z+
    15f8:	93 ff       	sbrs	r25, 3
    15fa:	81 91       	ld	r24, Z+
    15fc:	7f 01       	movw	r14, r30
    15fe:	88 23       	and	r24, r24
    1600:	09 f4       	brne	.+2      	; 0x1604 <vfprintf+0x3a>
    1602:	ba c1       	rjmp	.+884    	; 0x1978 <vfprintf+0x3ae>
    1604:	85 32       	cpi	r24, 0x25	; 37
    1606:	39 f4       	brne	.+14     	; 0x1616 <vfprintf+0x4c>
    1608:	93 fd       	sbrc	r25, 3
    160a:	85 91       	lpm	r24, Z+
    160c:	93 ff       	sbrs	r25, 3
    160e:	81 91       	ld	r24, Z+
    1610:	7f 01       	movw	r14, r30
    1612:	85 32       	cpi	r24, 0x25	; 37
    1614:	29 f4       	brne	.+10     	; 0x1620 <vfprintf+0x56>
    1616:	b6 01       	movw	r22, r12
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    161e:	e7 cf       	rjmp	.-50     	; 0x15ee <vfprintf+0x24>
    1620:	91 2c       	mov	r9, r1
    1622:	21 2c       	mov	r2, r1
    1624:	31 2c       	mov	r3, r1
    1626:	ff e1       	ldi	r31, 0x1F	; 31
    1628:	f3 15       	cp	r31, r3
    162a:	d8 f0       	brcs	.+54     	; 0x1662 <vfprintf+0x98>
    162c:	8b 32       	cpi	r24, 0x2B	; 43
    162e:	79 f0       	breq	.+30     	; 0x164e <vfprintf+0x84>
    1630:	38 f4       	brcc	.+14     	; 0x1640 <vfprintf+0x76>
    1632:	80 32       	cpi	r24, 0x20	; 32
    1634:	79 f0       	breq	.+30     	; 0x1654 <vfprintf+0x8a>
    1636:	83 32       	cpi	r24, 0x23	; 35
    1638:	a1 f4       	brne	.+40     	; 0x1662 <vfprintf+0x98>
    163a:	23 2d       	mov	r18, r3
    163c:	20 61       	ori	r18, 0x10	; 16
    163e:	1d c0       	rjmp	.+58     	; 0x167a <vfprintf+0xb0>
    1640:	8d 32       	cpi	r24, 0x2D	; 45
    1642:	61 f0       	breq	.+24     	; 0x165c <vfprintf+0x92>
    1644:	80 33       	cpi	r24, 0x30	; 48
    1646:	69 f4       	brne	.+26     	; 0x1662 <vfprintf+0x98>
    1648:	23 2d       	mov	r18, r3
    164a:	21 60       	ori	r18, 0x01	; 1
    164c:	16 c0       	rjmp	.+44     	; 0x167a <vfprintf+0xb0>
    164e:	83 2d       	mov	r24, r3
    1650:	82 60       	ori	r24, 0x02	; 2
    1652:	38 2e       	mov	r3, r24
    1654:	e3 2d       	mov	r30, r3
    1656:	e4 60       	ori	r30, 0x04	; 4
    1658:	3e 2e       	mov	r3, r30
    165a:	2a c0       	rjmp	.+84     	; 0x16b0 <vfprintf+0xe6>
    165c:	f3 2d       	mov	r31, r3
    165e:	f8 60       	ori	r31, 0x08	; 8
    1660:	1d c0       	rjmp	.+58     	; 0x169c <vfprintf+0xd2>
    1662:	37 fc       	sbrc	r3, 7
    1664:	2d c0       	rjmp	.+90     	; 0x16c0 <vfprintf+0xf6>
    1666:	20 ed       	ldi	r18, 0xD0	; 208
    1668:	28 0f       	add	r18, r24
    166a:	2a 30       	cpi	r18, 0x0A	; 10
    166c:	40 f0       	brcs	.+16     	; 0x167e <vfprintf+0xb4>
    166e:	8e 32       	cpi	r24, 0x2E	; 46
    1670:	b9 f4       	brne	.+46     	; 0x16a0 <vfprintf+0xd6>
    1672:	36 fc       	sbrc	r3, 6
    1674:	81 c1       	rjmp	.+770    	; 0x1978 <vfprintf+0x3ae>
    1676:	23 2d       	mov	r18, r3
    1678:	20 64       	ori	r18, 0x40	; 64
    167a:	32 2e       	mov	r3, r18
    167c:	19 c0       	rjmp	.+50     	; 0x16b0 <vfprintf+0xe6>
    167e:	36 fe       	sbrs	r3, 6
    1680:	06 c0       	rjmp	.+12     	; 0x168e <vfprintf+0xc4>
    1682:	8a e0       	ldi	r24, 0x0A	; 10
    1684:	98 9e       	mul	r9, r24
    1686:	20 0d       	add	r18, r0
    1688:	11 24       	eor	r1, r1
    168a:	92 2e       	mov	r9, r18
    168c:	11 c0       	rjmp	.+34     	; 0x16b0 <vfprintf+0xe6>
    168e:	ea e0       	ldi	r30, 0x0A	; 10
    1690:	2e 9e       	mul	r2, r30
    1692:	20 0d       	add	r18, r0
    1694:	11 24       	eor	r1, r1
    1696:	22 2e       	mov	r2, r18
    1698:	f3 2d       	mov	r31, r3
    169a:	f0 62       	ori	r31, 0x20	; 32
    169c:	3f 2e       	mov	r3, r31
    169e:	08 c0       	rjmp	.+16     	; 0x16b0 <vfprintf+0xe6>
    16a0:	8c 36       	cpi	r24, 0x6C	; 108
    16a2:	21 f4       	brne	.+8      	; 0x16ac <vfprintf+0xe2>
    16a4:	83 2d       	mov	r24, r3
    16a6:	80 68       	ori	r24, 0x80	; 128
    16a8:	38 2e       	mov	r3, r24
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0xe6>
    16ac:	88 36       	cpi	r24, 0x68	; 104
    16ae:	41 f4       	brne	.+16     	; 0x16c0 <vfprintf+0xf6>
    16b0:	f7 01       	movw	r30, r14
    16b2:	93 fd       	sbrc	r25, 3
    16b4:	85 91       	lpm	r24, Z+
    16b6:	93 ff       	sbrs	r25, 3
    16b8:	81 91       	ld	r24, Z+
    16ba:	7f 01       	movw	r14, r30
    16bc:	81 11       	cpse	r24, r1
    16be:	b3 cf       	rjmp	.-154    	; 0x1626 <vfprintf+0x5c>
    16c0:	98 2f       	mov	r25, r24
    16c2:	9f 7d       	andi	r25, 0xDF	; 223
    16c4:	95 54       	subi	r25, 0x45	; 69
    16c6:	93 30       	cpi	r25, 0x03	; 3
    16c8:	28 f4       	brcc	.+10     	; 0x16d4 <vfprintf+0x10a>
    16ca:	0c 5f       	subi	r16, 0xFC	; 252
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	9f e3       	ldi	r25, 0x3F	; 63
    16d0:	99 83       	std	Y+1, r25	; 0x01
    16d2:	0d c0       	rjmp	.+26     	; 0x16ee <vfprintf+0x124>
    16d4:	83 36       	cpi	r24, 0x63	; 99
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <vfprintf+0x11a>
    16d8:	83 37       	cpi	r24, 0x73	; 115
    16da:	71 f0       	breq	.+28     	; 0x16f8 <vfprintf+0x12e>
    16dc:	83 35       	cpi	r24, 0x53	; 83
    16de:	09 f0       	breq	.+2      	; 0x16e2 <vfprintf+0x118>
    16e0:	59 c0       	rjmp	.+178    	; 0x1794 <vfprintf+0x1ca>
    16e2:	21 c0       	rjmp	.+66     	; 0x1726 <vfprintf+0x15c>
    16e4:	f8 01       	movw	r30, r16
    16e6:	80 81       	ld	r24, Z
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	0e 5f       	subi	r16, 0xFE	; 254
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	88 24       	eor	r8, r8
    16f0:	83 94       	inc	r8
    16f2:	91 2c       	mov	r9, r1
    16f4:	53 01       	movw	r10, r6
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <vfprintf+0x154>
    16f8:	28 01       	movw	r4, r16
    16fa:	f2 e0       	ldi	r31, 0x02	; 2
    16fc:	4f 0e       	add	r4, r31
    16fe:	51 1c       	adc	r5, r1
    1700:	f8 01       	movw	r30, r16
    1702:	a0 80       	ld	r10, Z
    1704:	b1 80       	ldd	r11, Z+1	; 0x01
    1706:	36 fe       	sbrs	r3, 6
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <vfprintf+0x146>
    170a:	69 2d       	mov	r22, r9
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <vfprintf+0x14a>
    1710:	6f ef       	ldi	r22, 0xFF	; 255
    1712:	7f ef       	ldi	r23, 0xFF	; 255
    1714:	c5 01       	movw	r24, r10
    1716:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <strnlen>
    171a:	4c 01       	movw	r8, r24
    171c:	82 01       	movw	r16, r4
    171e:	f3 2d       	mov	r31, r3
    1720:	ff 77       	andi	r31, 0x7F	; 127
    1722:	3f 2e       	mov	r3, r31
    1724:	16 c0       	rjmp	.+44     	; 0x1752 <vfprintf+0x188>
    1726:	28 01       	movw	r4, r16
    1728:	22 e0       	ldi	r18, 0x02	; 2
    172a:	42 0e       	add	r4, r18
    172c:	51 1c       	adc	r5, r1
    172e:	f8 01       	movw	r30, r16
    1730:	a0 80       	ld	r10, Z
    1732:	b1 80       	ldd	r11, Z+1	; 0x01
    1734:	36 fe       	sbrs	r3, 6
    1736:	03 c0       	rjmp	.+6      	; 0x173e <vfprintf+0x174>
    1738:	69 2d       	mov	r22, r9
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x178>
    173e:	6f ef       	ldi	r22, 0xFF	; 255
    1740:	7f ef       	ldi	r23, 0xFF	; 255
    1742:	c5 01       	movw	r24, r10
    1744:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <strnlen_P>
    1748:	4c 01       	movw	r8, r24
    174a:	f3 2d       	mov	r31, r3
    174c:	f0 68       	ori	r31, 0x80	; 128
    174e:	3f 2e       	mov	r3, r31
    1750:	82 01       	movw	r16, r4
    1752:	33 fc       	sbrc	r3, 3
    1754:	1b c0       	rjmp	.+54     	; 0x178c <vfprintf+0x1c2>
    1756:	82 2d       	mov	r24, r2
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	88 16       	cp	r8, r24
    175c:	99 06       	cpc	r9, r25
    175e:	b0 f4       	brcc	.+44     	; 0x178c <vfprintf+0x1c2>
    1760:	b6 01       	movw	r22, r12
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    176a:	2a 94       	dec	r2
    176c:	f4 cf       	rjmp	.-24     	; 0x1756 <vfprintf+0x18c>
    176e:	f5 01       	movw	r30, r10
    1770:	37 fc       	sbrc	r3, 7
    1772:	85 91       	lpm	r24, Z+
    1774:	37 fe       	sbrs	r3, 7
    1776:	81 91       	ld	r24, Z+
    1778:	5f 01       	movw	r10, r30
    177a:	b6 01       	movw	r22, r12
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    1782:	21 10       	cpse	r2, r1
    1784:	2a 94       	dec	r2
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	82 1a       	sub	r8, r18
    178a:	91 08       	sbc	r9, r1
    178c:	81 14       	cp	r8, r1
    178e:	91 04       	cpc	r9, r1
    1790:	71 f7       	brne	.-36     	; 0x176e <vfprintf+0x1a4>
    1792:	e8 c0       	rjmp	.+464    	; 0x1964 <vfprintf+0x39a>
    1794:	84 36       	cpi	r24, 0x64	; 100
    1796:	11 f0       	breq	.+4      	; 0x179c <vfprintf+0x1d2>
    1798:	89 36       	cpi	r24, 0x69	; 105
    179a:	41 f5       	brne	.+80     	; 0x17ec <vfprintf+0x222>
    179c:	f8 01       	movw	r30, r16
    179e:	37 fe       	sbrs	r3, 7
    17a0:	07 c0       	rjmp	.+14     	; 0x17b0 <vfprintf+0x1e6>
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	0c 5f       	subi	r16, 0xFC	; 252
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <vfprintf+0x1f6>
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	07 2e       	mov	r0, r23
    17b6:	00 0c       	add	r0, r0
    17b8:	88 0b       	sbc	r24, r24
    17ba:	99 0b       	sbc	r25, r25
    17bc:	0e 5f       	subi	r16, 0xFE	; 254
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	f3 2d       	mov	r31, r3
    17c2:	ff 76       	andi	r31, 0x6F	; 111
    17c4:	3f 2e       	mov	r3, r31
    17c6:	97 ff       	sbrs	r25, 7
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <vfprintf+0x212>
    17ca:	90 95       	com	r25
    17cc:	80 95       	com	r24
    17ce:	70 95       	com	r23
    17d0:	61 95       	neg	r22
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	f0 68       	ori	r31, 0x80	; 128
    17da:	3f 2e       	mov	r3, r31
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	a3 01       	movw	r20, r6
    17e2:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__ultoa_invert>
    17e6:	88 2e       	mov	r8, r24
    17e8:	86 18       	sub	r8, r6
    17ea:	45 c0       	rjmp	.+138    	; 0x1876 <vfprintf+0x2ac>
    17ec:	85 37       	cpi	r24, 0x75	; 117
    17ee:	31 f4       	brne	.+12     	; 0x17fc <vfprintf+0x232>
    17f0:	23 2d       	mov	r18, r3
    17f2:	2f 7e       	andi	r18, 0xEF	; 239
    17f4:	b2 2e       	mov	r11, r18
    17f6:	2a e0       	ldi	r18, 0x0A	; 10
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	25 c0       	rjmp	.+74     	; 0x1846 <vfprintf+0x27c>
    17fc:	93 2d       	mov	r25, r3
    17fe:	99 7f       	andi	r25, 0xF9	; 249
    1800:	b9 2e       	mov	r11, r25
    1802:	8f 36       	cpi	r24, 0x6F	; 111
    1804:	c1 f0       	breq	.+48     	; 0x1836 <vfprintf+0x26c>
    1806:	18 f4       	brcc	.+6      	; 0x180e <vfprintf+0x244>
    1808:	88 35       	cpi	r24, 0x58	; 88
    180a:	79 f0       	breq	.+30     	; 0x182a <vfprintf+0x260>
    180c:	b5 c0       	rjmp	.+362    	; 0x1978 <vfprintf+0x3ae>
    180e:	80 37       	cpi	r24, 0x70	; 112
    1810:	19 f0       	breq	.+6      	; 0x1818 <vfprintf+0x24e>
    1812:	88 37       	cpi	r24, 0x78	; 120
    1814:	21 f0       	breq	.+8      	; 0x181e <vfprintf+0x254>
    1816:	b0 c0       	rjmp	.+352    	; 0x1978 <vfprintf+0x3ae>
    1818:	e9 2f       	mov	r30, r25
    181a:	e0 61       	ori	r30, 0x10	; 16
    181c:	be 2e       	mov	r11, r30
    181e:	b4 fe       	sbrs	r11, 4
    1820:	0d c0       	rjmp	.+26     	; 0x183c <vfprintf+0x272>
    1822:	fb 2d       	mov	r31, r11
    1824:	f4 60       	ori	r31, 0x04	; 4
    1826:	bf 2e       	mov	r11, r31
    1828:	09 c0       	rjmp	.+18     	; 0x183c <vfprintf+0x272>
    182a:	34 fe       	sbrs	r3, 4
    182c:	0a c0       	rjmp	.+20     	; 0x1842 <vfprintf+0x278>
    182e:	29 2f       	mov	r18, r25
    1830:	26 60       	ori	r18, 0x06	; 6
    1832:	b2 2e       	mov	r11, r18
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <vfprintf+0x278>
    1836:	28 e0       	ldi	r18, 0x08	; 8
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	05 c0       	rjmp	.+10     	; 0x1846 <vfprintf+0x27c>
    183c:	20 e1       	ldi	r18, 0x10	; 16
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x27c>
    1842:	20 e1       	ldi	r18, 0x10	; 16
    1844:	32 e0       	ldi	r19, 0x02	; 2
    1846:	f8 01       	movw	r30, r16
    1848:	b7 fe       	sbrs	r11, 7
    184a:	07 c0       	rjmp	.+14     	; 0x185a <vfprintf+0x290>
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	0c 5f       	subi	r16, 0xFC	; 252
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <vfprintf+0x29c>
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 5f       	subi	r16, 0xFE	; 254
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	a3 01       	movw	r20, r6
    1868:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__ultoa_invert>
    186c:	88 2e       	mov	r8, r24
    186e:	86 18       	sub	r8, r6
    1870:	fb 2d       	mov	r31, r11
    1872:	ff 77       	andi	r31, 0x7F	; 127
    1874:	3f 2e       	mov	r3, r31
    1876:	36 fe       	sbrs	r3, 6
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <vfprintf+0x2ca>
    187a:	23 2d       	mov	r18, r3
    187c:	2e 7f       	andi	r18, 0xFE	; 254
    187e:	a2 2e       	mov	r10, r18
    1880:	89 14       	cp	r8, r9
    1882:	58 f4       	brcc	.+22     	; 0x189a <vfprintf+0x2d0>
    1884:	34 fe       	sbrs	r3, 4
    1886:	0b c0       	rjmp	.+22     	; 0x189e <vfprintf+0x2d4>
    1888:	32 fc       	sbrc	r3, 2
    188a:	09 c0       	rjmp	.+18     	; 0x189e <vfprintf+0x2d4>
    188c:	83 2d       	mov	r24, r3
    188e:	8e 7e       	andi	r24, 0xEE	; 238
    1890:	a8 2e       	mov	r10, r24
    1892:	05 c0       	rjmp	.+10     	; 0x189e <vfprintf+0x2d4>
    1894:	b8 2c       	mov	r11, r8
    1896:	a3 2c       	mov	r10, r3
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <vfprintf+0x2d6>
    189a:	b8 2c       	mov	r11, r8
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vfprintf+0x2d6>
    189e:	b9 2c       	mov	r11, r9
    18a0:	a4 fe       	sbrs	r10, 4
    18a2:	0f c0       	rjmp	.+30     	; 0x18c2 <vfprintf+0x2f8>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e8 0d       	add	r30, r8
    18a8:	f1 1d       	adc	r31, r1
    18aa:	80 81       	ld	r24, Z
    18ac:	80 33       	cpi	r24, 0x30	; 48
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <vfprintf+0x2ee>
    18b0:	9a 2d       	mov	r25, r10
    18b2:	99 7e       	andi	r25, 0xE9	; 233
    18b4:	a9 2e       	mov	r10, r25
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <vfprintf+0x300>
    18b8:	a2 fe       	sbrs	r10, 2
    18ba:	06 c0       	rjmp	.+12     	; 0x18c8 <vfprintf+0x2fe>
    18bc:	b3 94       	inc	r11
    18be:	b3 94       	inc	r11
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <vfprintf+0x300>
    18c2:	8a 2d       	mov	r24, r10
    18c4:	86 78       	andi	r24, 0x86	; 134
    18c6:	09 f0       	breq	.+2      	; 0x18ca <vfprintf+0x300>
    18c8:	b3 94       	inc	r11
    18ca:	a3 fc       	sbrc	r10, 3
    18cc:	11 c0       	rjmp	.+34     	; 0x18f0 <vfprintf+0x326>
    18ce:	a0 fe       	sbrs	r10, 0
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0x314>
    18d2:	b2 14       	cp	r11, r2
    18d4:	88 f4       	brcc	.+34     	; 0x18f8 <vfprintf+0x32e>
    18d6:	28 0c       	add	r2, r8
    18d8:	92 2c       	mov	r9, r2
    18da:	9b 18       	sub	r9, r11
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <vfprintf+0x330>
    18de:	b2 14       	cp	r11, r2
    18e0:	60 f4       	brcc	.+24     	; 0x18fa <vfprintf+0x330>
    18e2:	b6 01       	movw	r22, r12
    18e4:	80 e2       	ldi	r24, 0x20	; 32
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    18ec:	b3 94       	inc	r11
    18ee:	f7 cf       	rjmp	.-18     	; 0x18de <vfprintf+0x314>
    18f0:	b2 14       	cp	r11, r2
    18f2:	18 f4       	brcc	.+6      	; 0x18fa <vfprintf+0x330>
    18f4:	2b 18       	sub	r2, r11
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x332>
    18f8:	98 2c       	mov	r9, r8
    18fa:	21 2c       	mov	r2, r1
    18fc:	a4 fe       	sbrs	r10, 4
    18fe:	10 c0       	rjmp	.+32     	; 0x1920 <vfprintf+0x356>
    1900:	b6 01       	movw	r22, r12
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    190a:	a2 fe       	sbrs	r10, 2
    190c:	17 c0       	rjmp	.+46     	; 0x193c <vfprintf+0x372>
    190e:	a1 fc       	sbrc	r10, 1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <vfprintf+0x34e>
    1912:	88 e7       	ldi	r24, 0x78	; 120
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x352>
    1918:	88 e5       	ldi	r24, 0x58	; 88
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	b6 01       	movw	r22, r12
    191e:	0c c0       	rjmp	.+24     	; 0x1938 <vfprintf+0x36e>
    1920:	8a 2d       	mov	r24, r10
    1922:	86 78       	andi	r24, 0x86	; 134
    1924:	59 f0       	breq	.+22     	; 0x193c <vfprintf+0x372>
    1926:	a1 fe       	sbrs	r10, 1
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x364>
    192a:	8b e2       	ldi	r24, 0x2B	; 43
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x366>
    192e:	80 e2       	ldi	r24, 0x20	; 32
    1930:	a7 fc       	sbrc	r10, 7
    1932:	8d e2       	ldi	r24, 0x2D	; 45
    1934:	b6 01       	movw	r22, r12
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    193c:	89 14       	cp	r8, r9
    193e:	38 f4       	brcc	.+14     	; 0x194e <vfprintf+0x384>
    1940:	b6 01       	movw	r22, r12
    1942:	80 e3       	ldi	r24, 0x30	; 48
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    194a:	9a 94       	dec	r9
    194c:	f7 cf       	rjmp	.-18     	; 0x193c <vfprintf+0x372>
    194e:	8a 94       	dec	r8
    1950:	f3 01       	movw	r30, r6
    1952:	e8 0d       	add	r30, r8
    1954:	f1 1d       	adc	r31, r1
    1956:	80 81       	ld	r24, Z
    1958:	b6 01       	movw	r22, r12
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    1960:	81 10       	cpse	r8, r1
    1962:	f5 cf       	rjmp	.-22     	; 0x194e <vfprintf+0x384>
    1964:	22 20       	and	r2, r2
    1966:	09 f4       	brne	.+2      	; 0x196a <vfprintf+0x3a0>
    1968:	42 ce       	rjmp	.-892    	; 0x15ee <vfprintf+0x24>
    196a:	b6 01       	movw	r22, r12
    196c:	80 e2       	ldi	r24, 0x20	; 32
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <fputc>
    1974:	2a 94       	dec	r2
    1976:	f6 cf       	rjmp	.-20     	; 0x1964 <vfprintf+0x39a>
    1978:	f6 01       	movw	r30, r12
    197a:	86 81       	ldd	r24, Z+6	; 0x06
    197c:	97 81       	ldd	r25, Z+7	; 0x07
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <vfprintf+0x3ba>
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f ef       	ldi	r25, 0xFF	; 255
    1984:	2b 96       	adiw	r28, 0x0b	; 11
    1986:	e2 e1       	ldi	r30, 0x12	; 18
    1988:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__epilogue_restores__>

0000198c <calloc>:
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	86 9f       	mul	r24, r22
    1996:	80 01       	movw	r16, r0
    1998:	87 9f       	mul	r24, r23
    199a:	10 0d       	add	r17, r0
    199c:	96 9f       	mul	r25, r22
    199e:	10 0d       	add	r17, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	c8 01       	movw	r24, r16
    19a4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <malloc>
    19a8:	ec 01       	movw	r28, r24
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	29 f0       	breq	.+10     	; 0x19b8 <calloc+0x2c>
    19ae:	a8 01       	movw	r20, r16
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <memset>
    19b8:	ce 01       	movw	r24, r28
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <malloc>:
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	91 05       	cpc	r25, r1
    19d0:	10 f4       	brcc	.+4      	; 0x19d6 <malloc+0x12>
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <__flp>
    19da:	f0 91 f6 03 	lds	r31, 0x03F6	; 0x8003f6 <__flp+0x1>
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	a0 e0       	ldi	r26, 0x00	; 0
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	30 97       	sbiw	r30, 0x00	; 0
    19e8:	19 f1       	breq	.+70     	; 0x1a30 <malloc+0x6c>
    19ea:	40 81       	ld	r20, Z
    19ec:	51 81       	ldd	r21, Z+1	; 0x01
    19ee:	02 81       	ldd	r16, Z+2	; 0x02
    19f0:	13 81       	ldd	r17, Z+3	; 0x03
    19f2:	48 17       	cp	r20, r24
    19f4:	59 07       	cpc	r21, r25
    19f6:	c8 f0       	brcs	.+50     	; 0x1a2a <malloc+0x66>
    19f8:	84 17       	cp	r24, r20
    19fa:	95 07       	cpc	r25, r21
    19fc:	69 f4       	brne	.+26     	; 0x1a18 <malloc+0x54>
    19fe:	10 97       	sbiw	r26, 0x00	; 0
    1a00:	31 f0       	breq	.+12     	; 0x1a0e <malloc+0x4a>
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	0c 93       	st	X, r16
    1a06:	12 97       	sbiw	r26, 0x02	; 2
    1a08:	13 96       	adiw	r26, 0x03	; 3
    1a0a:	1c 93       	st	X, r17
    1a0c:	27 c0       	rjmp	.+78     	; 0x1a5c <malloc+0x98>
    1a0e:	00 93 f5 03 	sts	0x03F5, r16	; 0x8003f5 <__flp>
    1a12:	10 93 f6 03 	sts	0x03F6, r17	; 0x8003f6 <__flp+0x1>
    1a16:	22 c0       	rjmp	.+68     	; 0x1a5c <malloc+0x98>
    1a18:	21 15       	cp	r18, r1
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	19 f0       	breq	.+6      	; 0x1a24 <malloc+0x60>
    1a1e:	42 17       	cp	r20, r18
    1a20:	53 07       	cpc	r21, r19
    1a22:	18 f4       	brcc	.+6      	; 0x1a2a <malloc+0x66>
    1a24:	9a 01       	movw	r18, r20
    1a26:	bd 01       	movw	r22, r26
    1a28:	ef 01       	movw	r28, r30
    1a2a:	df 01       	movw	r26, r30
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	db cf       	rjmp	.-74     	; 0x19e6 <malloc+0x22>
    1a30:	21 15       	cp	r18, r1
    1a32:	31 05       	cpc	r19, r1
    1a34:	f9 f0       	breq	.+62     	; 0x1a74 <malloc+0xb0>
    1a36:	28 1b       	sub	r18, r24
    1a38:	39 0b       	sbc	r19, r25
    1a3a:	24 30       	cpi	r18, 0x04	; 4
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	80 f4       	brcc	.+32     	; 0x1a60 <malloc+0x9c>
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	9b 81       	ldd	r25, Y+3	; 0x03
    1a44:	61 15       	cp	r22, r1
    1a46:	71 05       	cpc	r23, r1
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <malloc+0x8e>
    1a4a:	fb 01       	movw	r30, r22
    1a4c:	93 83       	std	Z+3, r25	; 0x03
    1a4e:	82 83       	std	Z+2, r24	; 0x02
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <malloc+0x96>
    1a52:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <__flp+0x1>
    1a56:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <__flp>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	32 96       	adiw	r30, 0x02	; 2
    1a5e:	44 c0       	rjmp	.+136    	; 0x1ae8 <malloc+0x124>
    1a60:	fe 01       	movw	r30, r28
    1a62:	e2 0f       	add	r30, r18
    1a64:	f3 1f       	adc	r31, r19
    1a66:	81 93       	st	Z+, r24
    1a68:	91 93       	st	Z+, r25
    1a6a:	22 50       	subi	r18, 0x02	; 2
    1a6c:	31 09       	sbc	r19, r1
    1a6e:	39 83       	std	Y+1, r19	; 0x01
    1a70:	28 83       	st	Y, r18
    1a72:	3a c0       	rjmp	.+116    	; 0x1ae8 <malloc+0x124>
    1a74:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <__brkval>
    1a78:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <__brkval+0x1>
    1a7c:	23 2b       	or	r18, r19
    1a7e:	41 f4       	brne	.+16     	; 0x1a90 <malloc+0xcc>
    1a80:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1a84:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1a88:	30 93 f4 03 	sts	0x03F4, r19	; 0x8003f4 <__brkval+0x1>
    1a8c:	20 93 f3 03 	sts	0x03F3, r18	; 0x8003f3 <__brkval>
    1a90:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1a94:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1a98:	21 15       	cp	r18, r1
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	41 f4       	brne	.+16     	; 0x1aae <malloc+0xea>
    1a9e:	2d b7       	in	r18, 0x3d	; 61
    1aa0:	3e b7       	in	r19, 0x3e	; 62
    1aa2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1aa6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1aaa:	24 1b       	sub	r18, r20
    1aac:	35 0b       	sbc	r19, r21
    1aae:	e0 91 f3 03 	lds	r30, 0x03F3	; 0x8003f3 <__brkval>
    1ab2:	f0 91 f4 03 	lds	r31, 0x03F4	; 0x8003f4 <__brkval+0x1>
    1ab6:	e2 17       	cp	r30, r18
    1ab8:	f3 07       	cpc	r31, r19
    1aba:	a0 f4       	brcc	.+40     	; 0x1ae4 <malloc+0x120>
    1abc:	2e 1b       	sub	r18, r30
    1abe:	3f 0b       	sbc	r19, r31
    1ac0:	28 17       	cp	r18, r24
    1ac2:	39 07       	cpc	r19, r25
    1ac4:	78 f0       	brcs	.+30     	; 0x1ae4 <malloc+0x120>
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	4e 5f       	subi	r20, 0xFE	; 254
    1aca:	5f 4f       	sbci	r21, 0xFF	; 255
    1acc:	24 17       	cp	r18, r20
    1ace:	35 07       	cpc	r19, r21
    1ad0:	48 f0       	brcs	.+18     	; 0x1ae4 <malloc+0x120>
    1ad2:	4e 0f       	add	r20, r30
    1ad4:	5f 1f       	adc	r21, r31
    1ad6:	50 93 f4 03 	sts	0x03F4, r21	; 0x8003f4 <__brkval+0x1>
    1ada:	40 93 f3 03 	sts	0x03F3, r20	; 0x8003f3 <__brkval>
    1ade:	81 93       	st	Z+, r24
    1ae0:	91 93       	st	Z+, r25
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <malloc+0x124>
    1ae4:	e0 e0       	ldi	r30, 0x00	; 0
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	cf 01       	movw	r24, r30
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <free>:
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	09 f4       	brne	.+2      	; 0x1afe <free+0xa>
    1afc:	81 c0       	rjmp	.+258    	; 0x1c00 <free+0x10c>
    1afe:	fc 01       	movw	r30, r24
    1b00:	32 97       	sbiw	r30, 0x02	; 2
    1b02:	13 82       	std	Z+3, r1	; 0x03
    1b04:	12 82       	std	Z+2, r1	; 0x02
    1b06:	a0 91 f5 03 	lds	r26, 0x03F5	; 0x8003f5 <__flp>
    1b0a:	b0 91 f6 03 	lds	r27, 0x03F6	; 0x8003f6 <__flp+0x1>
    1b0e:	10 97       	sbiw	r26, 0x00	; 0
    1b10:	81 f4       	brne	.+32     	; 0x1b32 <free+0x3e>
    1b12:	20 81       	ld	r18, Z
    1b14:	31 81       	ldd	r19, Z+1	; 0x01
    1b16:	82 0f       	add	r24, r18
    1b18:	93 1f       	adc	r25, r19
    1b1a:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <__brkval>
    1b1e:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <__brkval+0x1>
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	51 f5       	brne	.+84     	; 0x1b7c <free+0x88>
    1b28:	f0 93 f4 03 	sts	0x03F4, r31	; 0x8003f4 <__brkval+0x1>
    1b2c:	e0 93 f3 03 	sts	0x03F3, r30	; 0x8003f3 <__brkval>
    1b30:	67 c0       	rjmp	.+206    	; 0x1c00 <free+0x10c>
    1b32:	ed 01       	movw	r28, r26
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	ce 17       	cp	r28, r30
    1b3a:	df 07       	cpc	r29, r31
    1b3c:	40 f4       	brcc	.+16     	; 0x1b4e <free+0x5a>
    1b3e:	4a 81       	ldd	r20, Y+2	; 0x02
    1b40:	5b 81       	ldd	r21, Y+3	; 0x03
    1b42:	9e 01       	movw	r18, r28
    1b44:	41 15       	cp	r20, r1
    1b46:	51 05       	cpc	r21, r1
    1b48:	f1 f0       	breq	.+60     	; 0x1b86 <free+0x92>
    1b4a:	ea 01       	movw	r28, r20
    1b4c:	f5 cf       	rjmp	.-22     	; 0x1b38 <free+0x44>
    1b4e:	d3 83       	std	Z+3, r29	; 0x03
    1b50:	c2 83       	std	Z+2, r28	; 0x02
    1b52:	40 81       	ld	r20, Z
    1b54:	51 81       	ldd	r21, Z+1	; 0x01
    1b56:	84 0f       	add	r24, r20
    1b58:	95 1f       	adc	r25, r21
    1b5a:	c8 17       	cp	r28, r24
    1b5c:	d9 07       	cpc	r29, r25
    1b5e:	59 f4       	brne	.+22     	; 0x1b76 <free+0x82>
    1b60:	88 81       	ld	r24, Y
    1b62:	99 81       	ldd	r25, Y+1	; 0x01
    1b64:	84 0f       	add	r24, r20
    1b66:	95 1f       	adc	r25, r21
    1b68:	02 96       	adiw	r24, 0x02	; 2
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	80 83       	st	Z, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	93 83       	std	Z+3, r25	; 0x03
    1b74:	82 83       	std	Z+2, r24	; 0x02
    1b76:	21 15       	cp	r18, r1
    1b78:	31 05       	cpc	r19, r1
    1b7a:	29 f4       	brne	.+10     	; 0x1b86 <free+0x92>
    1b7c:	f0 93 f6 03 	sts	0x03F6, r31	; 0x8003f6 <__flp+0x1>
    1b80:	e0 93 f5 03 	sts	0x03F5, r30	; 0x8003f5 <__flp>
    1b84:	3d c0       	rjmp	.+122    	; 0x1c00 <free+0x10c>
    1b86:	e9 01       	movw	r28, r18
    1b88:	fb 83       	std	Y+3, r31	; 0x03
    1b8a:	ea 83       	std	Y+2, r30	; 0x02
    1b8c:	49 91       	ld	r20, Y+
    1b8e:	59 91       	ld	r21, Y+
    1b90:	c4 0f       	add	r28, r20
    1b92:	d5 1f       	adc	r29, r21
    1b94:	ec 17       	cp	r30, r28
    1b96:	fd 07       	cpc	r31, r29
    1b98:	61 f4       	brne	.+24     	; 0x1bb2 <free+0xbe>
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	84 0f       	add	r24, r20
    1ba0:	95 1f       	adc	r25, r21
    1ba2:	02 96       	adiw	r24, 0x02	; 2
    1ba4:	e9 01       	movw	r28, r18
    1ba6:	99 83       	std	Y+1, r25	; 0x01
    1ba8:	88 83       	st	Y, r24
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	9b 83       	std	Y+3, r25	; 0x03
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
    1bb2:	e0 e0       	ldi	r30, 0x00	; 0
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	12 96       	adiw	r26, 0x02	; 2
    1bb8:	8d 91       	ld	r24, X+
    1bba:	9c 91       	ld	r25, X
    1bbc:	13 97       	sbiw	r26, 0x03	; 3
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <free+0xd4>
    1bc2:	fd 01       	movw	r30, r26
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	f7 cf       	rjmp	.-18     	; 0x1bb6 <free+0xc2>
    1bc8:	8d 91       	ld	r24, X+
    1bca:	9c 91       	ld	r25, X
    1bcc:	11 97       	sbiw	r26, 0x01	; 1
    1bce:	9d 01       	movw	r18, r26
    1bd0:	2e 5f       	subi	r18, 0xFE	; 254
    1bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd4:	82 0f       	add	r24, r18
    1bd6:	93 1f       	adc	r25, r19
    1bd8:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <__brkval>
    1bdc:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <__brkval+0x1>
    1be0:	28 17       	cp	r18, r24
    1be2:	39 07       	cpc	r19, r25
    1be4:	69 f4       	brne	.+26     	; 0x1c00 <free+0x10c>
    1be6:	30 97       	sbiw	r30, 0x00	; 0
    1be8:	29 f4       	brne	.+10     	; 0x1bf4 <free+0x100>
    1bea:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <__flp+0x1>
    1bee:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <__flp>
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <free+0x104>
    1bf4:	13 82       	std	Z+3, r1	; 0x03
    1bf6:	12 82       	std	Z+2, r1	; 0x02
    1bf8:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <__brkval+0x1>
    1bfc:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <__brkval>
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <strnlen_P>:
    1c06:	fc 01       	movw	r30, r24
    1c08:	05 90       	lpm	r0, Z+
    1c0a:	61 50       	subi	r22, 0x01	; 1
    1c0c:	70 40       	sbci	r23, 0x00	; 0
    1c0e:	01 10       	cpse	r0, r1
    1c10:	d8 f7       	brcc	.-10     	; 0x1c08 <strnlen_P+0x2>
    1c12:	80 95       	com	r24
    1c14:	90 95       	com	r25
    1c16:	8e 0f       	add	r24, r30
    1c18:	9f 1f       	adc	r25, r31
    1c1a:	08 95       	ret

00001c1c <memset>:
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <memset+0x6>
    1c20:	6d 93       	st	X+, r22
    1c22:	41 50       	subi	r20, 0x01	; 1
    1c24:	50 40       	sbci	r21, 0x00	; 0
    1c26:	e0 f7       	brcc	.-8      	; 0x1c20 <memset+0x4>
    1c28:	08 95       	ret

00001c2a <strnlen>:
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	61 50       	subi	r22, 0x01	; 1
    1c2e:	70 40       	sbci	r23, 0x00	; 0
    1c30:	01 90       	ld	r0, Z+
    1c32:	01 10       	cpse	r0, r1
    1c34:	d8 f7       	brcc	.-10     	; 0x1c2c <strnlen+0x2>
    1c36:	80 95       	com	r24
    1c38:	90 95       	com	r25
    1c3a:	8e 0f       	add	r24, r30
    1c3c:	9f 1f       	adc	r25, r31
    1c3e:	08 95       	ret

00001c40 <fputc>:
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	fb 01       	movw	r30, r22
    1c4a:	23 81       	ldd	r18, Z+3	; 0x03
    1c4c:	21 fd       	sbrc	r18, 1
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <fputc+0x16>
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	9f ef       	ldi	r25, 0xFF	; 255
    1c54:	2c c0       	rjmp	.+88     	; 0x1cae <fputc+0x6e>
    1c56:	22 ff       	sbrs	r18, 2
    1c58:	16 c0       	rjmp	.+44     	; 0x1c86 <fputc+0x46>
    1c5a:	46 81       	ldd	r20, Z+6	; 0x06
    1c5c:	57 81       	ldd	r21, Z+7	; 0x07
    1c5e:	24 81       	ldd	r18, Z+4	; 0x04
    1c60:	35 81       	ldd	r19, Z+5	; 0x05
    1c62:	42 17       	cp	r20, r18
    1c64:	53 07       	cpc	r21, r19
    1c66:	44 f4       	brge	.+16     	; 0x1c78 <fputc+0x38>
    1c68:	a0 81       	ld	r26, Z
    1c6a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c6c:	9d 01       	movw	r18, r26
    1c6e:	2f 5f       	subi	r18, 0xFF	; 255
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	31 83       	std	Z+1, r19	; 0x01
    1c74:	20 83       	st	Z, r18
    1c76:	8c 93       	st	X, r24
    1c78:	26 81       	ldd	r18, Z+6	; 0x06
    1c7a:	37 81       	ldd	r19, Z+7	; 0x07
    1c7c:	2f 5f       	subi	r18, 0xFF	; 255
    1c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c80:	37 83       	std	Z+7, r19	; 0x07
    1c82:	26 83       	std	Z+6, r18	; 0x06
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <fputc+0x6e>
    1c86:	8b 01       	movw	r16, r22
    1c88:	ec 01       	movw	r28, r24
    1c8a:	fb 01       	movw	r30, r22
    1c8c:	00 84       	ldd	r0, Z+8	; 0x08
    1c8e:	f1 85       	ldd	r31, Z+9	; 0x09
    1c90:	e0 2d       	mov	r30, r0
    1c92:	09 95       	icall
    1c94:	89 2b       	or	r24, r25
    1c96:	e1 f6       	brne	.-72     	; 0x1c50 <fputc+0x10>
    1c98:	d8 01       	movw	r26, r16
    1c9a:	16 96       	adiw	r26, 0x06	; 6
    1c9c:	8d 91       	ld	r24, X+
    1c9e:	9c 91       	ld	r25, X
    1ca0:	17 97       	sbiw	r26, 0x07	; 7
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	17 96       	adiw	r26, 0x07	; 7
    1ca6:	9c 93       	st	X, r25
    1ca8:	8e 93       	st	-X, r24
    1caa:	16 97       	sbiw	r26, 0x06	; 6
    1cac:	ce 01       	movw	r24, r28
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	08 95       	ret

00001cb8 <__ultoa_invert>:
    1cb8:	fa 01       	movw	r30, r20
    1cba:	aa 27       	eor	r26, r26
    1cbc:	28 30       	cpi	r18, 0x08	; 8
    1cbe:	51 f1       	breq	.+84     	; 0x1d14 <__ultoa_invert+0x5c>
    1cc0:	20 31       	cpi	r18, 0x10	; 16
    1cc2:	81 f1       	breq	.+96     	; 0x1d24 <__ultoa_invert+0x6c>
    1cc4:	e8 94       	clt
    1cc6:	6f 93       	push	r22
    1cc8:	6e 7f       	andi	r22, 0xFE	; 254
    1cca:	6e 5f       	subi	r22, 0xFE	; 254
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	af 4f       	sbci	r26, 0xFF	; 255
    1cd4:	b1 e0       	ldi	r27, 0x01	; 1
    1cd6:	3e d0       	rcall	.+124    	; 0x1d54 <__ultoa_invert+0x9c>
    1cd8:	b4 e0       	ldi	r27, 0x04	; 4
    1cda:	3c d0       	rcall	.+120    	; 0x1d54 <__ultoa_invert+0x9c>
    1cdc:	67 0f       	add	r22, r23
    1cde:	78 1f       	adc	r23, r24
    1ce0:	89 1f       	adc	r24, r25
    1ce2:	9a 1f       	adc	r25, r26
    1ce4:	a1 1d       	adc	r26, r1
    1ce6:	68 0f       	add	r22, r24
    1ce8:	79 1f       	adc	r23, r25
    1cea:	8a 1f       	adc	r24, r26
    1cec:	91 1d       	adc	r25, r1
    1cee:	a1 1d       	adc	r26, r1
    1cf0:	6a 0f       	add	r22, r26
    1cf2:	71 1d       	adc	r23, r1
    1cf4:	81 1d       	adc	r24, r1
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	a1 1d       	adc	r26, r1
    1cfa:	20 d0       	rcall	.+64     	; 0x1d3c <__ultoa_invert+0x84>
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <__ultoa_invert+0x48>
    1cfe:	68 94       	set
    1d00:	3f 91       	pop	r19
    1d02:	2a e0       	ldi	r18, 0x0A	; 10
    1d04:	26 9f       	mul	r18, r22
    1d06:	11 24       	eor	r1, r1
    1d08:	30 19       	sub	r19, r0
    1d0a:	30 5d       	subi	r19, 0xD0	; 208
    1d0c:	31 93       	st	Z+, r19
    1d0e:	de f6       	brtc	.-74     	; 0x1cc6 <__ultoa_invert+0xe>
    1d10:	cf 01       	movw	r24, r30
    1d12:	08 95       	ret
    1d14:	46 2f       	mov	r20, r22
    1d16:	47 70       	andi	r20, 0x07	; 7
    1d18:	40 5d       	subi	r20, 0xD0	; 208
    1d1a:	41 93       	st	Z+, r20
    1d1c:	b3 e0       	ldi	r27, 0x03	; 3
    1d1e:	0f d0       	rcall	.+30     	; 0x1d3e <__ultoa_invert+0x86>
    1d20:	c9 f7       	brne	.-14     	; 0x1d14 <__ultoa_invert+0x5c>
    1d22:	f6 cf       	rjmp	.-20     	; 0x1d10 <__ultoa_invert+0x58>
    1d24:	46 2f       	mov	r20, r22
    1d26:	4f 70       	andi	r20, 0x0F	; 15
    1d28:	40 5d       	subi	r20, 0xD0	; 208
    1d2a:	4a 33       	cpi	r20, 0x3A	; 58
    1d2c:	18 f0       	brcs	.+6      	; 0x1d34 <__ultoa_invert+0x7c>
    1d2e:	49 5d       	subi	r20, 0xD9	; 217
    1d30:	31 fd       	sbrc	r19, 1
    1d32:	40 52       	subi	r20, 0x20	; 32
    1d34:	41 93       	st	Z+, r20
    1d36:	02 d0       	rcall	.+4      	; 0x1d3c <__ultoa_invert+0x84>
    1d38:	a9 f7       	brne	.-22     	; 0x1d24 <__ultoa_invert+0x6c>
    1d3a:	ea cf       	rjmp	.-44     	; 0x1d10 <__ultoa_invert+0x58>
    1d3c:	b4 e0       	ldi	r27, 0x04	; 4
    1d3e:	a6 95       	lsr	r26
    1d40:	97 95       	ror	r25
    1d42:	87 95       	ror	r24
    1d44:	77 95       	ror	r23
    1d46:	67 95       	ror	r22
    1d48:	ba 95       	dec	r27
    1d4a:	c9 f7       	brne	.-14     	; 0x1d3e <__ultoa_invert+0x86>
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	61 05       	cpc	r22, r1
    1d50:	71 05       	cpc	r23, r1
    1d52:	08 95       	ret
    1d54:	9b 01       	movw	r18, r22
    1d56:	ac 01       	movw	r20, r24
    1d58:	0a 2e       	mov	r0, r26
    1d5a:	06 94       	lsr	r0
    1d5c:	57 95       	ror	r21
    1d5e:	47 95       	ror	r20
    1d60:	37 95       	ror	r19
    1d62:	27 95       	ror	r18
    1d64:	ba 95       	dec	r27
    1d66:	c9 f7       	brne	.-14     	; 0x1d5a <__ultoa_invert+0xa2>
    1d68:	62 0f       	add	r22, r18
    1d6a:	73 1f       	adc	r23, r19
    1d6c:	84 1f       	adc	r24, r20
    1d6e:	95 1f       	adc	r25, r21
    1d70:	a0 1d       	adc	r26, r0
    1d72:	08 95       	ret

00001d74 <__prologue_saves__>:
    1d74:	2f 92       	push	r2
    1d76:	3f 92       	push	r3
    1d78:	4f 92       	push	r4
    1d7a:	5f 92       	push	r5
    1d7c:	6f 92       	push	r6
    1d7e:	7f 92       	push	r7
    1d80:	8f 92       	push	r8
    1d82:	9f 92       	push	r9
    1d84:	af 92       	push	r10
    1d86:	bf 92       	push	r11
    1d88:	cf 92       	push	r12
    1d8a:	df 92       	push	r13
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	ca 1b       	sub	r28, r26
    1d9e:	db 0b       	sbc	r29, r27
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	09 94       	ijmp

00001dac <__epilogue_restores__>:
    1dac:	2a 88       	ldd	r2, Y+18	; 0x12
    1dae:	39 88       	ldd	r3, Y+17	; 0x11
    1db0:	48 88       	ldd	r4, Y+16	; 0x10
    1db2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1db4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1db6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1db8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dba:	9b 84       	ldd	r9, Y+11	; 0x0b
    1dbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dbe:	b9 84       	ldd	r11, Y+9	; 0x09
    1dc0:	c8 84       	ldd	r12, Y+8	; 0x08
    1dc2:	df 80       	ldd	r13, Y+7	; 0x07
    1dc4:	ee 80       	ldd	r14, Y+6	; 0x06
    1dc6:	fd 80       	ldd	r15, Y+5	; 0x05
    1dc8:	0c 81       	ldd	r16, Y+4	; 0x04
    1dca:	1b 81       	ldd	r17, Y+3	; 0x03
    1dcc:	aa 81       	ldd	r26, Y+2	; 0x02
    1dce:	b9 81       	ldd	r27, Y+1	; 0x01
    1dd0:	ce 0f       	add	r28, r30
    1dd2:	d1 1d       	adc	r29, r1
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	ed 01       	movw	r28, r26
    1de0:	08 95       	ret

00001de2 <_exit>:
    1de2:	f8 94       	cli

00001de4 <__stop_program>:
    1de4:	ff cf       	rjmp	.-2      	; 0x1de4 <__stop_program>
