
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800100  00002976  00002a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  00800320  00800320  00002c2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005765  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d25  00000000  00000000  00008821  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002322  00000000  00000000  0000a546  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008dc  00000000  00000000  0000c868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d03  00000000  00000000  0000d144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000242c  00000000  00000000  0000de47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  00010273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_1>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	13 e0       	ldi	r17, 0x03	; 3
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	e6 e7       	ldi	r30, 0x76	; 118
     536:	f9 e2       	ldi	r31, 0x29	; 41
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a0 32       	cpi	r26, 0x20	; 32
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	a0 e2       	ldi	r26, 0x20	; 32
     548:	b3 e0       	ldi	r27, 0x03	; 3
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	af 35       	cpi	r26, 0x5F	; 95
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     558:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xfa1>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0xfa1>
     572:	08 95       	ret

00000574 <__vector_1>:
#include "sleep.h"
#include "slider.h"
#include "joystick.h"
#include "touchButton.h"

ISR (INT0_vect) {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	flag= 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <flag>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <main>:

int main(void)
//p.23 for can read instructions
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61

	setupInit();
     5a6:	0e 94 ed 0b 	call	0x17da	; 0x17da <setupInit>
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     5aa:	87 e5       	ldi	r24, 0x57	; 87
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\r");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 87 10 	call	0x210e	; 0x210e <printf>
	printf("---------------------------------------\n\r");
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 87 10 	call	0x210e	; 0x210e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x4e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x58>
     5ea:	00 00       	nop
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
				menu_printCurrentMenu();
			}
			timerFlag=0;
			sei();
		}
		switch(currentMenu.currentMenuItem->nodeID){
     5f4:	0e e2       	ldi	r16, 0x2E	; 46
     5f6:	13 e0       	ldi	r17, 0x03	; 3
	_delay_ms(500);    
	while (1) {
		
		 
		
		if (timerFlag)
     5f8:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <timerFlag>
     5fc:	88 23       	and	r24, r24
     5fe:	c1 f0       	breq	.+48     	; 0x630 <main+0x9e>
		{
			cli();
     600:	f8 94       	cli
			TCNT1 = 0x00;
     602:	1d bc       	out	0x2d, r1	; 45
     604:	1c bc       	out	0x2c, r1	; 44
			joystick_readPosition();
     606:	0e 94 4e 09 	call	0x129c	; 0x129c <joystick_readPosition>
			slider_readPosition(&slider_pos);
     60a:	8c e3       	ldi	r24, 0x3C	; 60
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <slider_readPosition>
			touchButton_readButtons();
     612:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <touchButton_readButtons>
			if(gameActive==0){
     616:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <gameActive>
     61a:	81 11       	cpse	r24, r1
     61c:	06 c0       	rjmp	.+12     	; 0x62a <main+0x98>
				navigateMenu(&joystick_pos);
     61e:	84 e2       	ldi	r24, 0x24	; 36
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	0e 94 05 0a 	call	0x140a	; 0x140a <navigateMenu>
				menu_printCurrentMenu();
     626:	0e 94 18 0b 	call	0x1630	; 0x1630 <menu_printCurrentMenu>
			}
			timerFlag=0;
     62a:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <timerFlag>
			sei();
     62e:	78 94       	sei
		}
		switch(currentMenu.currentMenuItem->nodeID){
     630:	d8 01       	movw	r26, r16
     632:	ed 91       	ld	r30, X+
     634:	fc 91       	ld	r31, X
     636:	80 81       	ld	r24, Z
     638:	85 30       	cpi	r24, 0x05	; 5
     63a:	91 f0       	breq	.+36     	; 0x660 <main+0xce>
     63c:	28 f4       	brcc	.+10     	; 0x648 <main+0xb6>
     63e:	83 30       	cpi	r24, 0x03	; 3
     640:	41 f0       	breq	.+16     	; 0x652 <main+0xc0>
     642:	84 30       	cpi	r24, 0x04	; 4
     644:	49 f0       	breq	.+18     	; 0x658 <main+0xc6>
     646:	17 c0       	rjmp	.+46     	; 0x676 <main+0xe4>
     648:	86 30       	cpi	r24, 0x06	; 6
     64a:	71 f0       	breq	.+28     	; 0x668 <main+0xd6>
     64c:	87 30       	cpi	r24, 0x07	; 7
     64e:	81 f0       	breq	.+32     	; 0x670 <main+0xde>
     650:	12 c0       	rjmp	.+36     	; 0x676 <main+0xe4>
			case PLAY_GAME:
				break;
			case HIGH_SCORE:
				break;
			case MUSIC:
				music_playRick();
     652:	0e 94 fa 07 	call	0xff4	; 0xff4 <music_playRick>
				break;
     656:	0f c0       	rjmp	.+30     	; 0x676 <main+0xe4>
			case GAME_1:
				game_play(1);
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <game_play>
				break;
     65e:	0b c0       	rjmp	.+22     	; 0x676 <main+0xe4>
			case GAME_2:
				game_play(2);
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <game_play>
				break;
     666:	07 c0       	rjmp	.+14     	; 0x676 <main+0xe4>
			case HS1:
				game_displayHighscores(1);
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 87 07 	call	0xf0e	; 0xf0e <game_displayHighscores>
				break;
     66e:	03 c0       	rjmp	.+6      	; 0x676 <main+0xe4>
			case HS2:
				game_displayHighscores(2);
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	0e 94 87 07 	call	0xf0e	; 0xf0e <game_displayHighscores>
				break;
			
		}
		//Put microcontroller to sleep until next interrupt.
		sleep_now();
     676:	0e 94 38 09 	call	0x1270	; 0x1270 <sleep_now>
	}
     67a:	be cf       	rjmp	.-132    	; 0x5f8 <main+0x66>

0000067c <CAN_clearInterrupt>:

void CAN_clearInterrupt()
{
	//CLearing interrupt
	uint8_t mask = 0b11;
	CAN_controller_bitModify(mask, CANINTF, 0b00);
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	6c e2       	ldi	r22, 0x2C	; 44
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
     686:	08 95       	ret

00000688 <CAN_transmit_message>:
}
void CAN_transmit_message(CAN_message_t *message) {
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	8c 01       	movw	r16, r24
	//printf("Transmitting message");
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     690:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     694:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	63 e0       	ldi	r22, 0x03	; 3
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divmodhi4>
     6a2:	28 2f       	mov	r18, r24
     6a4:	39 2f       	mov	r19, r25
     6a6:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
     6aa:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
	
	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     6ae:	21 30       	cpi	r18, 0x01	; 1
     6b0:	31 05       	cpc	r19, r1
     6b2:	e9 f0       	breq	.+58     	; 0x6ee <CAN_transmit_message+0x66>
     6b4:	22 30       	cpi	r18, 0x02	; 2
     6b6:	31 05       	cpc	r19, r1
     6b8:	89 f1       	breq	.+98     	; 0x71c <CAN_transmit_message+0x94>
     6ba:	23 2b       	or	r18, r19
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <CAN_transmit_message+0x38>
     6be:	44 c0       	rjmp	.+136    	; 0x748 <CAN_transmit_message+0xc0>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6c0:	f8 01       	movw	r30, r16
     6c2:	40 85       	ldd	r20, Z+8	; 0x08
     6c4:	51 85       	ldd	r21, Z+9	; 0x09
     6c6:	42 95       	swap	r20
     6c8:	44 0f       	add	r20, r20
     6ca:	40 7e       	andi	r20, 0xE0	; 224
     6cc:	62 e3       	ldi	r22, 0x32	; 50
     6ce:	80 ee       	ldi	r24, 0xE0	; 224
     6d0:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     6d4:	f8 01       	movw	r30, r16
     6d6:	60 85       	ldd	r22, Z+8	; 0x08
     6d8:	71 85       	ldd	r23, Z+9	; 0x09
     6da:	76 95       	lsr	r23
     6dc:	67 95       	ror	r22
     6de:	76 95       	lsr	r23
     6e0:	67 95       	ror	r22
     6e2:	76 95       	lsr	r23
     6e4:	67 95       	ror	r22
     6e6:	81 e3       	ldi	r24, 0x31	; 49
     6e8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				
				//printf("Sending whole id: %i", message->ID );


				break;
     6ec:	2d c0       	rjmp	.+90     	; 0x748 <CAN_transmit_message+0xc0>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     6ee:	f8 01       	movw	r30, r16
     6f0:	40 85       	ldd	r20, Z+8	; 0x08
     6f2:	51 85       	ldd	r21, Z+9	; 0x09
     6f4:	42 95       	swap	r20
     6f6:	44 0f       	add	r20, r20
     6f8:	40 7e       	andi	r20, 0xE0	; 224
     6fa:	62 e4       	ldi	r22, 0x42	; 66
     6fc:	80 ee       	ldi	r24, 0xE0	; 224
     6fe:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     702:	f8 01       	movw	r30, r16
     704:	60 85       	ldd	r22, Z+8	; 0x08
     706:	71 85       	ldd	r23, Z+9	; 0x09
     708:	76 95       	lsr	r23
     70a:	67 95       	ror	r22
     70c:	76 95       	lsr	r23
     70e:	67 95       	ror	r22
     710:	76 95       	lsr	r23
     712:	67 95       	ror	r22
     714:	81 e4       	ldi	r24, 0x41	; 65
     716:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				
				break;
     71a:	16 c0       	rjmp	.+44     	; 0x748 <CAN_transmit_message+0xc0>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     71c:	f8 01       	movw	r30, r16
     71e:	40 85       	ldd	r20, Z+8	; 0x08
     720:	51 85       	ldd	r21, Z+9	; 0x09
     722:	42 95       	swap	r20
     724:	44 0f       	add	r20, r20
     726:	40 7e       	andi	r20, 0xE0	; 224
     728:	62 e5       	ldi	r22, 0x52	; 82
     72a:	80 ee       	ldi	r24, 0xE0	; 224
     72c:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     730:	f8 01       	movw	r30, r16
     732:	60 85       	ldd	r22, Z+8	; 0x08
     734:	71 85       	ldd	r23, Z+9	; 0x09
     736:	76 95       	lsr	r23
     738:	67 95       	ror	r22
     73a:	76 95       	lsr	r23
     73c:	67 95       	ror	r22
     73e:	76 95       	lsr	r23
     740:	67 95       	ror	r22
     742:	81 e5       	ldi	r24, 0x51	; 81
     744:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     748:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     74c:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	91 05       	cpc	r25, r1
     754:	61 f0       	breq	.+24     	; 0x76e <CAN_transmit_message+0xe6>
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	91 05       	cpc	r25, r1
     75a:	81 f0       	breq	.+32     	; 0x77c <CAN_transmit_message+0xf4>
     75c:	89 2b       	or	r24, r25
     75e:	a1 f4       	brne	.+40     	; 0x788 <CAN_transmit_message+0x100>
			case 0:
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     760:	f8 01       	movw	r30, r16
     762:	42 85       	ldd	r20, Z+10	; 0x0a
     764:	65 e3       	ldi	r22, 0x35	; 53
     766:	8f e0       	ldi	r24, 0x0F	; 15
     768:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				break;
     76c:	0d c0       	rjmp	.+26     	; 0x788 <CAN_transmit_message+0x100>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     76e:	f8 01       	movw	r30, r16
     770:	42 85       	ldd	r20, Z+10	; 0x0a
     772:	65 e4       	ldi	r22, 0x45	; 69
     774:	8f e0       	ldi	r24, 0x0F	; 15
     776:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
				break;
     77a:	06 c0       	rjmp	.+12     	; 0x788 <CAN_transmit_message+0x100>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     77c:	f8 01       	movw	r30, r16
     77e:	42 85       	ldd	r20, Z+10	; 0x0a
     780:	65 e5       	ldi	r22, 0x55	; 85
     782:	8f e0       	ldi	r24, 0x0F	; 15
     784:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     788:	f8 01       	movw	r30, r16
     78a:	82 85       	ldd	r24, Z+10	; 0x0a
     78c:	88 23       	and	r24, r24
     78e:	61 f1       	breq	.+88     	; 0x7e8 <CAN_transmit_message+0x160>
     790:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
     792:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     796:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	71 f0       	breq	.+28     	; 0x7bc <CAN_transmit_message+0x134>
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	91 05       	cpc	r25, r1
     7a4:	a1 f0       	breq	.+40     	; 0x7ce <CAN_transmit_message+0x146>
     7a6:	89 2b       	or	r24, r25
     7a8:	d1 f4       	brne	.+52     	; 0x7de <CAN_transmit_message+0x156>
			case 0:
				//printf("transmitting data: %i\t", message->data[i]);
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     7aa:	f8 01       	movw	r30, r16
     7ac:	ec 0f       	add	r30, r28
     7ae:	f1 1d       	adc	r31, r1
     7b0:	60 81       	ld	r22, Z
     7b2:	86 e3       	ldi	r24, 0x36	; 54
     7b4:	8c 0f       	add	r24, r28
     7b6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				break;
     7ba:	11 c0       	rjmp	.+34     	; 0x7de <CAN_transmit_message+0x156>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     7bc:	f8 01       	movw	r30, r16
     7be:	ec 0f       	add	r30, r28
     7c0:	f1 1d       	adc	r31, r1
     7c2:	60 81       	ld	r22, Z
     7c4:	86 e4       	ldi	r24, 0x46	; 70
     7c6:	8c 0f       	add	r24, r28
     7c8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
				break;
     7cc:	08 c0       	rjmp	.+16     	; 0x7de <CAN_transmit_message+0x156>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     7ce:	f8 01       	movw	r30, r16
     7d0:	ec 0f       	add	r30, r28
     7d2:	f1 1d       	adc	r31, r1
     7d4:	60 81       	ld	r22, Z
     7d6:	86 e5       	ldi	r24, 0x56	; 86
     7d8:	8c 0f       	add	r24, r28
     7da:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     7de:	cf 5f       	subi	r28, 0xFF	; 255
     7e0:	f8 01       	movw	r30, r16
     7e2:	82 85       	ldd	r24, Z+10	; 0x0a
     7e4:	8c 13       	cpse	r24, r28
     7e6:	d5 cf       	rjmp	.-86     	; 0x792 <CAN_transmit_message+0x10a>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     7e8:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     7ec:	0e 94 be 04 	call	0x97c	; 0x97c <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	08 95       	ret

000007f8 <CAN_receiveMessage>:

void CAN_receiveMessage(volatile CAN_message_t * received_message) {
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     804:	82 e6       	ldi	r24, 0x62	; 98
     806:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     80a:	c8 2f       	mov	r28, r24
     80c:	81 e6       	ldi	r24, 0x61	; 97
     80e:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     812:	c2 95       	swap	r28
     814:	c6 95       	lsr	r28
     816:	c7 70       	andi	r28, 0x07	; 7
     818:	28 e0       	ldi	r18, 0x08	; 8
     81a:	82 9f       	mul	r24, r18
     81c:	c0 01       	movw	r24, r0
     81e:	11 24       	eor	r1, r1
     820:	8c 0f       	add	r24, r28
     822:	91 1d       	adc	r25, r1
     824:	f7 01       	movw	r30, r14
     826:	91 87       	std	Z+9, r25	; 0x09
     828:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     82a:	85 e6       	ldi	r24, 0x65	; 101
     82c:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     830:	8f 70       	andi	r24, 0x0F	; 15
     832:	f7 01       	movw	r30, r14
     834:	82 87       	std	Z+10, r24	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     836:	82 85       	ldd	r24, Z+10	; 0x0a
     838:	88 23       	and	r24, r24
     83a:	81 f0       	breq	.+32     	; 0x85c <CAN_receiveMessage+0x64>
     83c:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     83e:	0c 2f       	mov	r16, r28
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	86 e6       	ldi	r24, 0x66	; 102
     844:	8c 0f       	add	r24, r28
     846:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     84a:	f7 01       	movw	r30, r14
     84c:	e0 0f       	add	r30, r16
     84e:	f1 1f       	adc	r31, r17
     850:	80 83       	st	Z, r24
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     852:	cf 5f       	subi	r28, 0xFF	; 255
     854:	f7 01       	movw	r30, r14
     856:	82 85       	ldd	r24, Z+10	; 0x0a
     858:	8c 13       	cpse	r24, r28
     85a:	f1 cf       	rjmp	.-30     	; 0x83e <CAN_receiveMessage+0x46>
	}
	
	
	
	
}
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	08 95       	ret

00000868 <CAN_sendInputData>:

void CAN_sendInputData() {
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2b 97       	sbiw	r28, 0x0b	; 11
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t message;
	
	message.ID = 0x01;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9a 87       	std	Y+10, r25	; 0x0a
     882:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 6;
     884:	86 e0       	ldi	r24, 0x06	; 6
     886:	8b 87       	std	Y+11, r24	; 0x0b
	
	message.data[0] = slider_pos.left_pos;
     888:	ec e3       	ldi	r30, 0x3C	; 60
     88a:	f3 e0       	ldi	r31, 0x03	; 3
     88c:	80 81       	ld	r24, Z
     88e:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = slider_pos.right_pos;
     890:	81 81       	ldd	r24, Z+1	; 0x01
     892:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = buttons.left_button;
     894:	e2 e3       	ldi	r30, 0x32	; 50
     896:	f3 e0       	ldi	r31, 0x03	; 3
     898:	80 81       	ld	r24, Z
     89a:	8b 83       	std	Y+3, r24	; 0x03
	message.data[3] = buttons.right_button;
     89c:	81 81       	ldd	r24, Z+1	; 0x01
     89e:	8c 83       	std	Y+4, r24	; 0x04
	message.data[4] = joystick_pos.x_pos;
     8a0:	e4 e2       	ldi	r30, 0x24	; 36
     8a2:	f3 e0       	ldi	r31, 0x03	; 3
     8a4:	80 81       	ld	r24, Z
     8a6:	8d 83       	std	Y+5, r24	; 0x05
	message.data[5] = joystick_pos.y_pos;
     8a8:	81 81       	ldd	r24, Z+1	; 0x01
     8aa:	8e 83       	std	Y+6, r24	; 0x06
	CAN_transmit_message(&message);
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 44 03 	call	0x688	; 0x688 <CAN_transmit_message>
}
     8b4:	2b 96       	adiw	r28, 0x0b	; 11
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <CAN_init>:

void CAN_init() {
	CAN_controller_init();
     8c6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <CAN_controller_init>
     8ca:	08 95       	ret

000008cc <CAN_controller_read>:
#include <stdio.h>
#include <util/delay.h>
#include "MCP2515.h"
#include "SPI.h"

uint8_t CAN_controller_read(uint8_t addr) {
     8cc:	cf 93       	push	r28
     8ce:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
	SPI_masterWrite(addr);
     8de:	8c 2f       	mov	r24, r28
     8e0:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     8e4:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_masterRead>
     8e8:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
	
	return data;
}
     8f2:	8c 2f       	mov	r24, r28
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	d8 2f       	mov	r29, r24
     8fe:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	84 e0       	ldi	r24, 0x04	; 4
     904:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
	SPI_masterWrite(addr);
     90e:	8d 2f       	mov	r24, r29
     910:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
	SPI_masterWrite(data);
     914:	8c 2f       	mov	r24, r28
     916:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
	
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	d8 2f       	mov	r29, r24
     930:	16 2f       	mov	r17, r22
     932:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     93c:	85 e0       	ldi	r24, 0x05	; 5
     93e:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
		SPI_masterWrite(addr);
     942:	81 2f       	mov	r24, r17
     944:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
		SPI_masterWrite(mask);
     948:	8d 2f       	mov	r24, r29
     94a:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
		SPI_masterWrite(data);
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>

}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	08 95       	ret

00000964 <CAN_controller_reset>:
void CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
	//printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
     96c:	80 ec       	ldi	r24, 0xC0	; 192
     96e:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
     97a:	08 95       	ret

0000097c <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	//printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     97c:	cf 93       	push	r28
     97e:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
	switch (buffer) {
     988:	c1 30       	cpi	r28, 0x01	; 1
     98a:	41 f0       	breq	.+16     	; 0x99c <CAN_controller_RTS+0x20>
     98c:	18 f0       	brcs	.+6      	; 0x994 <CAN_controller_RTS+0x18>
     98e:	c2 30       	cpi	r28, 0x02	; 2
     990:	49 f0       	breq	.+18     	; 0x9a4 <CAN_controller_RTS+0x28>
     992:	0b c0       	rjmp	.+22     	; 0x9aa <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     994:	81 e8       	ldi	r24, 0x81	; 129
     996:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
			break;
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     99c:	82 e8       	ldi	r24, 0x82	; 130
     99e:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
			break;
     9a2:	03 c0       	rjmp	.+6      	; 0x9aa <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     9a4:	84 e8       	ldi	r24, 0x84	; 132
     9a6:	0e 94 8e 0c 	call	0x191c	; 0x191c <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	0e 94 97 0c 	call	0x192e	; 0x192e <SPI_setChipSelect>
}
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     9b6:	cf 93       	push	r28
     9b8:	c8 2f       	mov	r28, r24
	
	CAN_controller_reset();
     9ba:	0e 94 b2 04 	call	0x964	; 0x964 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     9be:	8e e0       	ldi	r24, 0x0E	; 14
     9c0:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     9c4:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     9c6:	80 38       	cpi	r24, 0x80	; 128
     9c8:	69 f0       	breq	.+26     	; 0x9e4 <CAN_controller_setMode+0x2e>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     9ca:	1f 92       	push	r1
     9cc:	8f 93       	push	r24
     9ce:	83 ee       	ldi	r24, 0xE3	; 227
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	9f 93       	push	r25
     9d4:	8f 93       	push	r24
     9d6:	0e 94 87 10 	call	0x210e	; 0x210e <printf>
		return;
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	2b c0       	rjmp	.+86     	; 0xa3a <CAN_controller_setMode+0x84>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     9e4:	4c 2f       	mov	r20, r28
     9e6:	4c 60       	ori	r20, 0x0C	; 12
     9e8:	6f e0       	ldi	r22, 0x0F	; 15
     9ea:	8e ee       	ldi	r24, 0xEE	; 238
     9ec:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	6b e2       	ldi	r22, 0x2B	; 43
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     9fa:	40 e6       	ldi	r20, 0x60	; 96
     9fc:	60 e6       	ldi	r22, 0x60	; 96
     9fe:	80 e6       	ldi	r24, 0x60	; 96
     a00:	0e 94 94 04 	call	0x928	; 0x928 <CAN_controller_bitModify>
     a04:	2f ef       	ldi	r18, 0xFF	; 255
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	21 50       	subi	r18, 0x01	; 1
     a0c:	80 40       	sbci	r24, 0x00	; 0
     a0e:	90 40       	sbci	r25, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <CAN_controller_setMode+0x54>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <CAN_controller_setMode+0x5e>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <CAN_controller_setMode+0x60>

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     a16:	8e e0       	ldi	r24, 0x0E	; 14
     a18:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
	mode_bits = (status & MODE_MASK);
     a1c:	80 7e       	andi	r24, 0xE0	; 224
	if (mode_bits != mode) {
     a1e:	c8 17       	cp	r28, r24
     a20:	61 f0       	breq	.+24     	; 0xa3a <CAN_controller_setMode+0x84>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     a22:	1f 92       	push	r1
     a24:	8f 93       	push	r24
     a26:	8e ef       	ldi	r24, 0xFE	; 254
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	0e 94 87 10 	call	0x210e	; 0x210e <printf>
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0

	}
	//printf("Mode set: %i\n\r", status & MODE_MASK);
}
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <CAN_controller_init>:
	SPI_setChipSelect(PB4, 1);
}
void CAN_controller_init() {
	
	
	SPI_masterInit();
     a3e:	0e 94 85 0c 	call	0x190a	; 0x190a <SPI_masterInit>

	CAN_controller_setMode(MODE_NORMAL);
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	0e 94 db 04 	call	0x9b6	; 0x9b6 <CAN_controller_setMode>
	
	
	//set interrupt on atm162
	
	
	 GICR |= (1<< INT0); //turn on interrupt 0
     a48:	8b b7       	in	r24, 0x3b	; 59
     a4a:	80 64       	ori	r24, 0x40	; 64
     a4c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     a4e:	85 b7       	in	r24, 0x35	; 53
     a50:	82 60       	ori	r24, 0x02	; 2
     a52:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     a54:	85 b7       	in	r24, 0x35	; 53
     a56:	8e 7f       	andi	r24, 0xFE	; 254
     a58:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     a5a:	81 b3       	in	r24, 0x11	; 17
     a5c:	84 70       	andi	r24, 0x04	; 4
     a5e:	81 bb       	out	0x11, r24	; 17
     a60:	2f ef       	ldi	r18, 0xFF	; 255
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	80 40       	sbci	r24, 0x00	; 0
     a6a:	90 40       	sbci	r25, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <CAN_controller_init+0x28>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <CAN_controller_init+0x32>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <CAN_controller_init+0x34>
	
	_delay_ms(200);
	//printf("after write to canctrl\n\r");
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     a72:	8e e0       	ldi	r24, 0x0E	; 14
     a74:	0e 94 66 04 	call	0x8cc	; 0x8cc <CAN_controller_read>
     a78:	08 95       	ret

00000a7a <game_init>:
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     a7a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <gameActive>
     a7e:	e8 e2       	ldi	r30, 0x28	; 40
     a80:	f3 e0       	ldi	r31, 0x03	; 3
     a82:	a4 e3       	ldi	r26, 0x34	; 52
     a84:	b3 e0       	ldi	r27, 0x03	; 3
     a86:	8d e2       	ldi	r24, 0x2D	; 45
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	11 92       	st	Z+, r1
     a8c:	1d 92       	st	X+, r1
     a8e:	e8 17       	cp	r30, r24
     a90:	f9 07       	cpc	r31, r25
     a92:	d9 f7       	brne	.-10     	; 0xa8a <game_init+0x10>
     a94:	08 95       	ret

00000a96 <game_countdown>:
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	1f 92       	push	r1
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	4a e0       	ldi	r20, 0x0A	; 10
     aa6:	be 01       	movw	r22, r28
     aa8:	6f 5f       	subi	r22, 0xFF	; 255
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
     ab4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
     ab8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
     abc:	0e e2       	ldi	r16, 0x2E	; 46
     abe:	13 e0       	ldi	r17, 0x03	; 3
     ac0:	f8 01       	movw	r30, r16
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	02 96       	adiw	r24, 0x02	; 2
     ac8:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
     ad2:	ce 01       	movw	r24, r28
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     ada:	86 e0       	ldi	r24, 0x06	; 6
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 bc 08 	call	0x1178	; 0x1178 <music_playNote>
     ae2:	ff ef       	ldi	r31, 0xFF	; 255
     ae4:	2f e7       	ldi	r18, 0x7F	; 127
     ae6:	87 e0       	ldi	r24, 0x07	; 7
     ae8:	f1 50       	subi	r31, 0x01	; 1
     aea:	20 40       	sbci	r18, 0x00	; 0
     aec:	80 40       	sbci	r24, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <game_countdown+0x52>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <game_countdown+0x5c>
     af2:	00 00       	nop
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 bc 08 	call	0x1178	; 0x1178 <music_playNote>
     afc:	9f ef       	ldi	r25, 0xFF	; 255
     afe:	ef e7       	ldi	r30, 0x7F	; 127
     b00:	f7 e0       	ldi	r31, 0x07	; 7
     b02:	91 50       	subi	r25, 0x01	; 1
     b04:	e0 40       	sbci	r30, 0x00	; 0
     b06:	f0 40       	sbci	r31, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <game_countdown+0x6c>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <game_countdown+0x76>
     b0c:	00 00       	nop
     b0e:	4a e0       	ldi	r20, 0x0A	; 10
     b10:	be 01       	movw	r22, r28
     b12:	6f 5f       	subi	r22, 0xFF	; 255
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
     b1e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
     b22:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
     b26:	f8 01       	movw	r30, r16
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	02 96       	adiw	r24, 0x02	; 2
     b2e:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 bc 08 	call	0x1178	; 0x1178 <music_playNote>
     b48:	ff ef       	ldi	r31, 0xFF	; 255
     b4a:	2f e7       	ldi	r18, 0x7F	; 127
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	f1 50       	subi	r31, 0x01	; 1
     b50:	20 40       	sbci	r18, 0x00	; 0
     b52:	80 40       	sbci	r24, 0x00	; 0
     b54:	e1 f7       	brne	.-8      	; 0xb4e <game_countdown+0xb8>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <game_countdown+0xc2>
     b58:	00 00       	nop
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 bc 08 	call	0x1178	; 0x1178 <music_playNote>
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	ef e7       	ldi	r30, 0x7F	; 127
     b66:	f7 e0       	ldi	r31, 0x07	; 7
     b68:	91 50       	subi	r25, 0x01	; 1
     b6a:	e0 40       	sbci	r30, 0x00	; 0
     b6c:	f0 40       	sbci	r31, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <game_countdown+0xd2>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <game_countdown+0xdc>
     b72:	00 00       	nop
     b74:	4a e0       	ldi	r20, 0x0A	; 10
     b76:	be 01       	movw	r22, r28
     b78:	6f 5f       	subi	r22, 0xFF	; 255
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
     b84:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
     b88:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
     b8c:	f8 01       	movw	r30, r16
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	02 96       	adiw	r24, 0x02	; 2
     b94:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     ba6:	86 e0       	ldi	r24, 0x06	; 6
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	0e 94 bc 08 	call	0x1178	; 0x1178 <music_playNote>
     bae:	ff ef       	ldi	r31, 0xFF	; 255
     bb0:	2f e7       	ldi	r18, 0x7F	; 127
     bb2:	87 e0       	ldi	r24, 0x07	; 7
     bb4:	f1 50       	subi	r31, 0x01	; 1
     bb6:	20 40       	sbci	r18, 0x00	; 0
     bb8:	80 40       	sbci	r24, 0x00	; 0
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <game_countdown+0x11e>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <game_countdown+0x128>
     bbe:	00 00       	nop
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 bc 08 	call	0x1178	; 0x1178 <music_playNote>
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
     bca:	ef e7       	ldi	r30, 0x7F	; 127
     bcc:	f7 e0       	ldi	r31, 0x07	; 7
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	e0 40       	sbci	r30, 0x00	; 0
     bd2:	f0 40       	sbci	r31, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <game_countdown+0x138>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <game_countdown+0x142>
     bd8:	00 00       	nop
     bda:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
     bde:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
     be2:	f8 01       	movw	r30, r16
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	02 96       	adiw	r24, 0x02	; 2
     bea:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
     bf4:	8e e1       	ldi	r24, 0x1E	; 30
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     bfc:	87 e1       	ldi	r24, 0x17	; 23
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	0e 94 bc 08 	call	0x1178	; 0x1178 <music_playNote>
     c04:	ff ef       	ldi	r31, 0xFF	; 255
     c06:	2f e7       	ldi	r18, 0x7F	; 127
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	f1 50       	subi	r31, 0x01	; 1
     c0c:	20 40       	sbci	r18, 0x00	; 0
     c0e:	80 40       	sbci	r24, 0x00	; 0
     c10:	e1 f7       	brne	.-8      	; 0xc0a <game_countdown+0x174>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <game_countdown+0x17e>
     c14:	00 00       	nop
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 bc 08 	call	0x1178	; 0x1178 <music_playNote>
     c1e:	9f ef       	ldi	r25, 0xFF	; 255
     c20:	ef e7       	ldi	r30, 0x7F	; 127
     c22:	f7 e0       	ldi	r31, 0x07	; 7
     c24:	91 50       	subi	r25, 0x01	; 1
     c26:	e0 40       	sbci	r30, 0x00	; 0
     c28:	f0 40       	sbci	r31, 0x00	; 0
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <game_countdown+0x18e>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <game_countdown+0x198>
     c2e:	00 00       	nop
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <game_initialCANMessage>:
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	2b 97       	sbiw	r28, 0x0b	; 11
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9a 87       	std	Y+10, r25	; 0x0a
     c56:	89 87       	std	Y+9, r24	; 0x09
     c58:	1b 86       	std	Y+11, r1	; 0x0b
     c5a:	ce 01       	movw	r24, r28
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	0e 94 44 03 	call	0x688	; 0x688 <CAN_transmit_message>
     c62:	2b 96       	adiw	r28, 0x0b	; 11
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <game_newgame>:
     c74:	f8 94       	cli
     c76:	0e 94 4b 05 	call	0xa96	; 0xa96 <game_countdown>
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <gameActive>
     c80:	e9 e3       	ldi	r30, 0x39	; 57
     c82:	f3 e0       	ldi	r31, 0x03	; 3
     c84:	8a e0       	ldi	r24, 0x0A	; 10
     c86:	80 83       	st	Z, r24
     c88:	12 82       	std	Z+2, r1	; 0x02
     c8a:	83 e6       	ldi	r24, 0x63	; 99
     c8c:	81 83       	std	Z+1, r24	; 0x01
     c8e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <game_initialCANMessage>
     c92:	78 94       	sei
     c94:	08 95       	ret

00000c96 <game_recieveGameData>:
}

void game_recieveGameData()
{
	//Recieve score and time data over CAN
	if (flag) {
     c96:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <flag>
     c9a:	88 23       	and	r24, r24
     c9c:	d9 f0       	breq	.+54     	; 0xcd4 <game_recieveGameData+0x3e>
		//Handle the message
		cli();
     c9e:	f8 94       	cli
		printf("Message received");
     ca0:	81 e2       	ldi	r24, 0x21	; 33
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	9f 93       	push	r25
     ca6:	8f 93       	push	r24
     ca8:	0e 94 87 10 	call	0x210e	; 0x210e <printf>
		flag=0;
     cac:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <flag>
		CAN_receiveMessage(&received_message);
     cb0:	8e e3       	ldi	r24, 0x3E	; 62
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_receiveMessage>
		//Clear interrupt
		CAN_clearInterrupt();
     cb8:	0e 94 3e 03 	call	0x67c	; 0x67c <CAN_clearInterrupt>
		//Update gamedata
		gameData.score = received_message.data[0];
     cbc:	ae e3       	ldi	r26, 0x3E	; 62
     cbe:	b3 e0       	ldi	r27, 0x03	; 3
     cc0:	8c 91       	ld	r24, X
     cc2:	e9 e3       	ldi	r30, 0x39	; 57
     cc4:	f3 e0       	ldi	r31, 0x03	; 3
     cc6:	80 83       	st	Z, r24
		gameData.playtime = received_message.data[1];
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	8c 91       	ld	r24, X
     ccc:	82 83       	std	Z+2, r24	; 0x02
		sei();
     cce:	78 94       	sei
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	08 95       	ret

00000cd6 <game_updateOled>:
	}
	
}

void game_updateOled(uint8_t gameID)
{
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	00 d0       	rcall	.+0      	; 0xce0 <game_updateOled+0xa>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <game_updateOled+0xc>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	18 2f       	mov	r17, r24
	//Print the game name
	oled_reset();
     ce8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
	oled_home();
     cec:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     cf0:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <currentMenu>
     cf4:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <currentMenu+0x1>
     cf8:	02 96       	adiw	r24, 0x02	; 2
     cfa:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
	char score_string[2];
	char time_string[2];
	
	oled_gotoLine(3);
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
	switch(gameID) {
     d04:	11 30       	cpi	r17, 0x01	; 1
     d06:	19 f0       	breq	.+6      	; 0xd0e <game_updateOled+0x38>
     d08:	12 30       	cpi	r17, 0x02	; 2
     d0a:	49 f1       	breq	.+82     	; 0xd5e <game_updateOled+0x88>
     d0c:	39 c0       	rjmp	.+114    	; 0xd80 <game_updateOled+0xaa>
		case 1:
			oled_print("Score: ");
     d0e:	82 e3       	ldi	r24, 0x32	; 50
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
			itoa(gameData.score,score_string,10);
     d16:	09 e3       	ldi	r16, 0x39	; 57
     d18:	13 e0       	ldi	r17, 0x03	; 3
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 81       	ld	r24, Z
     d1e:	4a e0       	ldi	r20, 0x0A	; 10
     d20:	be 01       	movw	r22, r28
     d22:	6f 5f       	subi	r22, 0xFF	; 255
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
			oled_print(score_string);
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
			oled_gotoLine(5);
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
			oled_print("Time: ");
     d3a:	8a e3       	ldi	r24, 0x3A	; 58
     d3c:	92 e0       	ldi	r25, 0x02	; 2
     d3e:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     d42:	f8 01       	movw	r30, r16
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	4a e0       	ldi	r20, 0x0A	; 10
     d48:	be 01       	movw	r22, r28
     d4a:	6d 5f       	subi	r22, 0xFD	; 253
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d54:	ce 01       	movw	r24, r28
     d56:	03 96       	adiw	r24, 0x03	; 3
     d58:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
			break;
     d5c:	11 c0       	rjmp	.+34     	; 0xd80 <game_updateOled+0xaa>
		case 2:
			oled_print("Air time: ");
     d5e:	81 e4       	ldi	r24, 0x41	; 65
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     d66:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <gameData+0x2>
     d6a:	4a e0       	ldi	r20, 0x0A	; 10
     d6c:	be 01       	movw	r22, r28
     d6e:	6d 5f       	subi	r22, 0xFD	; 253
     d70:	7f 4f       	sbci	r23, 0xFF	; 255
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
			itoa(gameData.playtime,time_string,10);
			oled_print(time_string);
     d78:	ce 01       	movw	r24, r28
     d7a:	03 96       	adiw	r24, 0x03	; 3
     d7c:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
			break;

	}
	
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <game_sendStop>:

void game_sendStop() {
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	2b 97       	sbiw	r28, 0x0b	; 11
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	mess.ID = 0x3;
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9a 87       	std	Y+10, r25	; 0x0a
     dac:	89 87       	std	Y+9, r24	; 0x09
	mess.data_length=0;
     dae:	1b 86       	std	Y+11, r1	; 0x0b
	CAN_transmit_message(&mess);
     db0:	ce 01       	movw	r24, r28
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	0e 94 44 03 	call	0x688	; 0x688 <CAN_transmit_message>
}
     db8:	2b 96       	adiw	r28, 0x0b	; 11
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <game_finished>:
void game_finished(uint8_t gameID) {
     dca:	cf 93       	push	r28
     dcc:	c8 2f       	mov	r28, r24
	cli();
     dce:	f8 94       	cli
	game_sendStop();
     dd0:	0e 94 c9 06 	call	0xd92	; 0xd92 <game_sendStop>
	oled_reset();
     dd4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
	oled_home();
     dd8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
	oled_gotoLine(3);
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
	oled_print("Game over");
     de2:	8c e4       	ldi	r24, 0x4C	; 76
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
	oled_gotoLine(4);
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
	oled_print("Maybe HS?");
     df0:	86 e5       	ldi	r24, 0x56	; 86
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
	music_gameOver();
     df8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <music_gameOver>
	gameActive=0;
     dfc:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <gameActive>
	
	menu_init();
     e00:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <menu_init>
	switch (gameID) {
     e04:	c1 30       	cpi	r28, 0x01	; 1
     e06:	51 f0       	breq	.+20     	; 0xe1c <game_finished+0x52>
     e08:	c2 30       	cpi	r28, 0x02	; 2
     e0a:	09 f0       	breq	.+2      	; 0xe0e <game_finished+0x44>
     e0c:	50 c0       	rjmp	.+160    	; 0xeae <game_finished+0xe4>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e0e:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <gameData+0x2>
     e12:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <highScores2>
     e16:	83 17       	cp	r24, r19
     e18:	48 f5       	brcc	.+82     	; 0xe6c <game_finished+0xa2>
     e1a:	33 c0       	rjmp	.+102    	; 0xe82 <game_finished+0xb8>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e1c:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <gameData>
     e20:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <highScores>
     e24:	83 17       	cp	r24, r19
     e26:	58 f0       	brcs	.+22     	; 0xe3e <game_finished+0x74>
     e28:	e9 e2       	ldi	r30, 0x29	; 41
     e2a:	f3 e0       	ldi	r31, 0x03	; 3
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.score > highScores[i]) {
     e30:	21 91       	ld	r18, Z+
     e32:	23 17       	cp	r18, r19
     e34:	b0 f4       	brcc	.+44     	; 0xe62 <game_finished+0x98>
					for (int a = 4; a>i; a--) {
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	91 05       	cpc	r25, r1
     e3a:	1c f0       	brlt	.+6      	; 0xe42 <game_finished+0x78>
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <game_finished+0x8e>
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	ec e2       	ldi	r30, 0x2C	; 44
     e44:	f3 e0       	ldi	r31, 0x03	; 3
     e46:	44 e0       	ldi	r20, 0x04	; 4
     e48:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores[a] = highScores[a-1];
     e4a:	41 50       	subi	r20, 0x01	; 1
     e4c:	51 09       	sbc	r21, r1
     e4e:	22 91       	ld	r18, -Z
     e50:	21 83       	std	Z+1, r18	; 0x01
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
				if (gameData.score > highScores[i]) {
					for (int a = 4; a>i; a--) {
     e52:	84 17       	cp	r24, r20
     e54:	95 07       	cpc	r25, r21
     e56:	cc f3       	brlt	.-14     	; 0xe4a <game_finished+0x80>
						highScores[a] = highScores[a-1];
					}
					highScores[i] = gameData.score;
     e58:	fc 01       	movw	r30, r24
     e5a:	e8 5d       	subi	r30, 0xD8	; 216
     e5c:	fc 4f       	sbci	r31, 0xFC	; 252
     e5e:	30 83       	st	Z, r19
					break;
     e60:	26 c0       	rjmp	.+76     	; 0xeae <game_finished+0xe4>
	gameActive=0;
	
	menu_init();
	switch (gameID) {
		case 1:
			for (int i = 0; i<5; i++) {
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	85 30       	cpi	r24, 0x05	; 5
     e66:	91 05       	cpc	r25, r1
     e68:	19 f7       	brne	.-58     	; 0xe30 <game_finished+0x66>
     e6a:	21 c0       	rjmp	.+66     	; 0xeae <game_finished+0xe4>
     e6c:	e5 e3       	ldi	r30, 0x35	; 53
     e6e:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
				if (gameData.playtime > highScores2[i]) {
     e74:	21 91       	ld	r18, Z+
     e76:	23 17       	cp	r18, r19
     e78:	b0 f4       	brcc	.+44     	; 0xea6 <game_finished+0xdc>
					for (int a = 4; a>i; a--) {
     e7a:	84 30       	cpi	r24, 0x04	; 4
     e7c:	91 05       	cpc	r25, r1
     e7e:	1c f0       	brlt	.+6      	; 0xe86 <game_finished+0xbc>
     e80:	0d c0       	rjmp	.+26     	; 0xe9c <game_finished+0xd2>
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	e8 e3       	ldi	r30, 0x38	; 56
     e88:	f3 e0       	ldi	r31, 0x03	; 3
     e8a:	44 e0       	ldi	r20, 0x04	; 4
     e8c:	50 e0       	ldi	r21, 0x00	; 0
					for (int a = 4; a>i; a--) {
						highScores2[a] = highScores2[a-1];
     e8e:	41 50       	subi	r20, 0x01	; 1
     e90:	51 09       	sbc	r21, r1
     e92:	22 91       	ld	r18, -Z
     e94:	21 83       	std	Z+1, r18	; 0x01
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
				if (gameData.playtime > highScores2[i]) {
					for (int a = 4; a>i; a--) {
     e96:	84 17       	cp	r24, r20
     e98:	95 07       	cpc	r25, r21
     e9a:	cc f3       	brlt	.-14     	; 0xe8e <game_finished+0xc4>
						highScores2[a] = highScores2[a-1];
					}
					highScores2[i] = gameData.playtime;
     e9c:	fc 01       	movw	r30, r24
     e9e:	ec 5c       	subi	r30, 0xCC	; 204
     ea0:	fc 4f       	sbci	r31, 0xFC	; 252
     ea2:	30 83       	st	Z, r19
					break;
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <game_finished+0xe4>
					break;
				}
			}
			break;
		case 2:
			for (int i = 0; i<5; i++) {
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	85 30       	cpi	r24, 0x05	; 5
     eaa:	91 05       	cpc	r25, r1
     eac:	19 f7       	brne	.-58     	; 0xe74 <game_finished+0xaa>
			break;
		
	}
	
	
	sei();
     eae:	78 94       	sei
}
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <game_play>:
void game_play(uint8_t gameID)
{
     eb4:	cf 93       	push	r28
     eb6:	c8 2f       	mov	r28, r24
	if(gameActive==0)
     eb8:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <gameActive>
     ebc:	81 11       	cpse	r24, r1
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <game_play+0x10>
	{
		game_newgame();	
     ec0:	0e 94 3a 06 	call	0xc74	; 0xc74 <game_newgame>
	}
	if (buttons.right_button) {
     ec4:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <buttons+0x1>
     ec8:	88 23       	and	r24, r24
     eca:	21 f0       	breq	.+8      	; 0xed4 <game_play+0x20>
		gameActive = 0;
     ecc:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <gameActive>
		menu_init();
     ed0:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <menu_init>
}

void game_sendUserInput()
{
	//Send control data over can
	CAN_sendInputData();
     ed4:	0e 94 34 04 	call	0x868	; 0x868 <CAN_sendInputData>
	if (buttons.right_button) {
		gameActive = 0;
		menu_init();
	}
	game_sendUserInput();
	game_recieveGameData();
     ed8:	0e 94 4b 06 	call	0xc96	; 0xc96 <game_recieveGameData>
	game_updateOled(gameID);
     edc:	8c 2f       	mov	r24, r28
     ede:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <game_updateOled>
	switch (gameID) {
     ee2:	c1 30       	cpi	r28, 0x01	; 1
     ee4:	19 f0       	breq	.+6      	; 0xeec <game_play+0x38>
     ee6:	c2 30       	cpi	r28, 0x02	; 2
     ee8:	49 f0       	breq	.+18     	; 0xefc <game_play+0x48>
     eea:	0f c0       	rjmp	.+30     	; 0xf0a <game_play+0x56>
		case 1:
			if (gameData.playtime==10) {
     eec:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <gameData+0x2>
     ef0:	8a 30       	cpi	r24, 0x0A	; 10
     ef2:	59 f4       	brne	.+22     	; 0xf0a <game_play+0x56>
				game_finished(gameID);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	0e 94 e5 06 	call	0xdca	; 0xdca <game_finished>
     efa:	07 c0       	rjmp	.+14     	; 0xf0a <game_play+0x56>
			}
			break;
		case 2:
			if (gameData.score <10) {
     efc:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <gameData>
     f00:	8a 30       	cpi	r24, 0x0A	; 10
     f02:	18 f4       	brcc	.+6      	; 0xf0a <game_play+0x56>
				game_finished(gameID);
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	0e 94 e5 06 	call	0xdca	; 0xdca <game_finished>
			}
			break;
	}
	
	
}
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <game_displayHighscores>:

void game_displayHighscores(uint8_t gameID) {
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	00 d0       	rcall	.+0      	; 0xf24 <game_displayHighscores+0x16>
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	08 2f       	mov	r16, r24
	oled_reset();
     f2a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
	oled_home();
     f2e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     f32:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <currentMenu>
     f36:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <currentMenu+0x1>
     f3a:	02 96       	adiw	r24, 0x02	; 2
     f3c:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     f40:	0f 2e       	mov	r0, r31
     f42:	f8 e2       	ldi	r31, 0x28	; 40
     f44:	af 2e       	mov	r10, r31
     f46:	f3 e0       	ldi	r31, 0x03	; 3
     f48:	bf 2e       	mov	r11, r31
     f4a:	f0 2d       	mov	r31, r0
     f4c:	0f 2e       	mov	r0, r31
     f4e:	f4 e3       	ldi	r31, 0x34	; 52
     f50:	cf 2e       	mov	r12, r31
     f52:	f3 e0       	ldi	r31, 0x03	; 3
     f54:	df 2e       	mov	r13, r31
     f56:	f0 2d       	mov	r31, r0
     f58:	13 e0       	ldi	r17, 0x03	; 3
	
	for (int i=0;i<5;i++)
     f5a:	e1 2c       	mov	r14, r1
     f5c:	f1 2c       	mov	r15, r1
	{
		oled_gotoLine(3+i);
     f5e:	81 2f       	mov	r24, r17
     f60:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
		oled_print("Score ");
     f64:	80 e6       	ldi	r24, 0x60	; 96
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
		char num[2];
		itoa(i+1,num,10);
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	e8 1a       	sub	r14, r24
     f70:	f8 0a       	sbc	r15, r24
     f72:	4a e0       	ldi	r20, 0x0A	; 10
     f74:	be 01       	movw	r22, r28
     f76:	6f 5f       	subi	r22, 0xFF	; 255
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	c7 01       	movw	r24, r14
     f7c:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
		oled_print(num);
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
		oled_print(": ");
     f88:	8e e3       	ldi	r24, 0x3E	; 62
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
		switch (gameID) {
     f90:	01 30       	cpi	r16, 0x01	; 1
     f92:	19 f0       	breq	.+6      	; 0xf9a <game_displayHighscores+0x8c>
     f94:	02 30       	cpi	r16, 0x02	; 2
     f96:	59 f0       	breq	.+22     	; 0xfae <game_displayHighscores+0xa0>
     f98:	13 c0       	rjmp	.+38     	; 0xfc0 <game_displayHighscores+0xb2>
     f9a:	f5 01       	movw	r30, r10
     f9c:	80 81       	ld	r24, Z
     f9e:	4a e0       	ldi	r20, 0x0A	; 10
     fa0:	be 01       	movw	r22, r28
     fa2:	6f 5f       	subi	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <game_displayHighscores+0xb2>
     fae:	f6 01       	movw	r30, r12
     fb0:	80 81       	ld	r24, Z
     fb2:	4a e0       	ldi	r20, 0x0A	; 10
     fb4:	be 01       	movw	r22, r28
     fb6:	6f 5f       	subi	r22, 0xFF	; 255
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
				break;
			case 2:
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
     fc0:	ce 01       	movw	r24, r28
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
     fc8:	1f 5f       	subi	r17, 0xFF	; 255
     fca:	ff ef       	ldi	r31, 0xFF	; 255
     fcc:	af 1a       	sub	r10, r31
     fce:	bf 0a       	sbc	r11, r31
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	c8 1a       	sub	r12, r24
     fd4:	d8 0a       	sbc	r13, r24
void game_displayHighscores(uint8_t gameID) {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i=0;i<5;i++)
     fd6:	18 30       	cpi	r17, 0x08	; 8
     fd8:	11 f6       	brne	.-124    	; 0xf5e <game_displayHighscores+0x50>
				itoa(highScores2[i],num,10);
				break;
		}
		oled_print(num);
	}
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	08 95       	ret

00000ff4 <music_playRick>:
	 30, 10, 20, 20,
	 20,40, 80, 40
};


void music_playRick() {
     ff4:	8f 92       	push	r8
     ff6:	9f 92       	push	r9
     ff8:	af 92       	push	r10
     ffa:	bf 92       	push	r11
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
	cli();
    100c:	f8 94       	cli
	oled_home();
    100e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
	oled_reset();
    1012:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
    1016:	0d ee       	ldi	r16, 0xED	; 237
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	0f 2e       	mov	r0, r31
    101c:	fe e9       	ldi	r31, 0x9E	; 158
    101e:	ef 2e       	mov	r14, r31
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	ff 2e       	mov	r15, r31
    1024:	f0 2d       	mov	r31, r0
    1026:	c6 e0       	ldi	r28, 0x06	; 6
    1028:	d1 e0       	ldi	r29, 0x01	; 1
    102a:	0f 2e       	mov	r0, r31
    102c:	f9 e2       	ldi	r31, 0x29	; 41
    102e:	cf 2e       	mov	r12, r31
    1030:	f2 e0       	ldi	r31, 0x02	; 2
    1032:	df 2e       	mov	r13, r31
    1034:	f0 2d       	mov	r31, r0
    1036:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    1038:	0f 2e       	mov	r0, r31
    103a:	f4 e1       	ldi	r31, 0x14	; 20
    103c:	af 2e       	mov	r10, r31
    103e:	f0 2d       	mov	r31, r0
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		if (line== 0) {
    1040:	b1 10       	cpse	r11, r1
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <music_playRick+0x54>
			oled_reset();
    1044:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
    1048:	4e 01       	movw	r8, r28
		}
		//if not equal to ""
		if ((strcmp(lyrics_chorus[i], ""))) {
    104a:	e8 81       	ld	r30, Y
    104c:	f9 81       	ldd	r31, Y+1	; 0x01
    104e:	80 81       	ld	r24, Z
    1050:	88 23       	and	r24, r24
    1052:	41 f0       	breq	.+16     	; 0x1064 <music_playRick+0x70>
			oled_gotoLine(line);
    1054:	8b 2d       	mov	r24, r11
    1056:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
			line++;
    105a:	b3 94       	inc	r11
			oled_print(lyrics_chorus[i]);
    105c:	88 81       	ld	r24, Y
    105e:	99 81       	ldd	r25, Y+1	; 0x01
    1060:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
		}
		if (lyrics_chorus[i][strlen(lyrics_chorus[i])-1] == '.') {
    1064:	d4 01       	movw	r26, r8
    1066:	ed 91       	ld	r30, X+
    1068:	fc 91       	ld	r31, X
    106a:	22 96       	adiw	r28, 0x02	; 2
    106c:	01 90       	ld	r0, Z+
    106e:	00 20       	and	r0, r0
    1070:	e9 f7       	brne	.-6      	; 0x106c <music_playRick+0x78>
    1072:	32 97       	sbiw	r30, 0x02	; 2
    1074:	80 81       	ld	r24, Z
    1076:	8e 32       	cpi	r24, 0x2E	; 46
    1078:	09 f4       	brne	.+2      	; 0x107c <music_playRick+0x88>
			
			line = 0;
    107a:	b1 2c       	mov	r11, r1
		}
		
		
		//printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
    107c:	f8 01       	movw	r30, r16
    107e:	65 91       	lpm	r22, Z+
    1080:	74 91       	lpm	r23, Z
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
    108a:	f7 01       	movw	r30, r14
    108c:	84 91       	lpm	r24, Z
    108e:	a8 9e       	mul	r10, r24
    1090:	c0 01       	movw	r24, r0
    1092:	11 24       	eor	r1, r1
    1094:	09 2e       	mov	r0, r25
    1096:	00 0c       	add	r0, r0
    1098:	aa 0b       	sbc	r26, r26
    109a:	bb 0b       	sbc	r27, r27
		while (duration--) {
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	a1 05       	cpc	r26, r1
    10a0:	b1 05       	cpc	r27, r1
    10a2:	51 f0       	breq	.+20     	; 0x10b8 <music_playRick+0xc4>
    10a4:	ec ec       	ldi	r30, 0xCC	; 204
    10a6:	f4 e0       	ldi	r31, 0x04	; 4
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <music_playRick+0xb4>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <music_playRick+0xba>
    10ae:	00 00       	nop
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	a1 09       	sbc	r26, r1
    10b4:	b1 09       	sbc	r27, r1
    10b6:	b1 f7       	brne	.-20     	; 0x10a4 <music_playRick+0xb0>
    10b8:	0c 5f       	subi	r16, 0xFC	; 252
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	ff ef       	ldi	r31, 0xFF	; 255
    10be:	ef 1a       	sub	r14, r31
    10c0:	ff 0a       	sbc	r15, r31
void music_playRick() {
	cli();
	oled_home();
	oled_reset();
	uint8_t line = 0;
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
    10c2:	0c 15       	cp	r16, r12
    10c4:	1d 05       	cpc	r17, r13
    10c6:	09 f0       	breq	.+2      	; 0x10ca <music_playRick+0xd6>
    10c8:	bb cf       	rjmp	.-138    	; 0x1040 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	cb 01       	movw	r24, r22
    10d0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <pwm_setFreq>
	menu_init();
    10d4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <menu_init>

	sei();
    10d8:	78 94       	sei
	

}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	df 90       	pop	r13
    10e8:	cf 90       	pop	r12
    10ea:	bf 90       	pop	r11
    10ec:	af 90       	pop	r10
    10ee:	9f 90       	pop	r9
    10f0:	8f 90       	pop	r8
    10f2:	08 95       	ret

000010f4 <music_gameOver>:

void music_gameOver() {
	pwm_setFreq(NOTE_C5);
    10f4:	6b e0       	ldi	r22, 0x0B	; 11
    10f6:	72 e0       	ldi	r23, 0x02	; 2
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <pwm_setFreq>
    1100:	2f ef       	ldi	r18, 0xFF	; 255
    1102:	8f e7       	ldi	r24, 0x7F	; 127
    1104:	97 e0       	ldi	r25, 0x07	; 7
    1106:	21 50       	subi	r18, 0x01	; 1
    1108:	80 40       	sbci	r24, 0x00	; 0
    110a:	90 40       	sbci	r25, 0x00	; 0
    110c:	e1 f7       	brne	.-8      	; 0x1106 <music_gameOver+0x12>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <music_gameOver+0x1c>
    1110:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_G4);
    1112:	68 e8       	ldi	r22, 0x88	; 136
    1114:	71 e0       	ldi	r23, 0x01	; 1
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <pwm_setFreq>
    111e:	2f ef       	ldi	r18, 0xFF	; 255
    1120:	8f e7       	ldi	r24, 0x7F	; 127
    1122:	97 e0       	ldi	r25, 0x07	; 7
    1124:	21 50       	subi	r18, 0x01	; 1
    1126:	80 40       	sbci	r24, 0x00	; 0
    1128:	90 40       	sbci	r25, 0x00	; 0
    112a:	e1 f7       	brne	.-8      	; 0x1124 <music_gameOver+0x30>
    112c:	00 c0       	rjmp	.+0      	; 0x112e <music_gameOver+0x3a>
    112e:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_DS4);
    1130:	67 e3       	ldi	r22, 0x37	; 55
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <pwm_setFreq>
    113c:	2f ef       	ldi	r18, 0xFF	; 255
    113e:	8f e7       	ldi	r24, 0x7F	; 127
    1140:	97 e0       	ldi	r25, 0x07	; 7
    1142:	21 50       	subi	r18, 0x01	; 1
    1144:	80 40       	sbci	r24, 0x00	; 0
    1146:	90 40       	sbci	r25, 0x00	; 0
    1148:	e1 f7       	brne	.-8      	; 0x1142 <music_gameOver+0x4e>
    114a:	00 c0       	rjmp	.+0      	; 0x114c <music_gameOver+0x58>
    114c:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(NOTE_C4);
    114e:	66 e0       	ldi	r22, 0x06	; 6
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <pwm_setFreq>
    115a:	2f ef       	ldi	r18, 0xFF	; 255
    115c:	8f e7       	ldi	r24, 0x7F	; 127
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	21 50       	subi	r18, 0x01	; 1
    1162:	80 40       	sbci	r24, 0x00	; 0
    1164:	90 40       	sbci	r25, 0x00	; 0
    1166:	e1 f7       	brne	.-8      	; 0x1160 <music_gameOver+0x6c>
    1168:	00 c0       	rjmp	.+0      	; 0x116a <music_gameOver+0x76>
    116a:	00 00       	nop
	_delay_ms(500);
	pwm_setFreq(0);
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	cb 01       	movw	r24, r22
    1172:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <pwm_setFreq>
    1176:	08 95       	ret

00001178 <music_playNote>:
	
}

void music_playNote(uint16_t note) {
	pwm_setFreq(note);
    1178:	bc 01       	movw	r22, r24
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <pwm_setFreq>
    1182:	08 95       	ret

00001184 <pwm_init>:

void pwm_init() {
	
    //set output pin

    DDRB |= (1 << PB0); 
    1184:	b8 9a       	sbi	0x17, 0	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	81 bf       	out	0x31, r24	; 49
    
	
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
    118a:	80 e8       	ldi	r24, 0x80	; 128
    118c:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
    118e:	83 b7       	in	r24, 0x33	; 51
    1190:	88 60       	ori	r24, 0x08	; 8
    1192:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
    1194:	83 b7       	in	r24, 0x33	; 51
    1196:	80 61       	ori	r24, 0x10	; 16
    1198:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
    119a:	83 b7       	in	r24, 0x33	; 51
    119c:	88 7f       	andi	r24, 0xF8	; 248
    119e:	83 bf       	out	0x33, r24	; 51
    11a0:	08 95       	ret

000011a2 <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
    11a2:	9b 01       	movw	r18, r22
    11a4:	ac 01       	movw	r20, r24
    if (freq == 0) {
    11a6:	67 2b       	or	r22, r23
    11a8:	68 2b       	or	r22, r24
    11aa:	69 2b       	or	r22, r25
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
    11ae:	83 b7       	in	r24, 0x33	; 51
    11b0:	88 7f       	andi	r24, 0xF8	; 248
    11b2:	83 bf       	out	0x33, r24	; 51
        return;
    11b4:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e8       	ldi	r23, 0x80	; 128
    11ba:	85 e2       	ldi	r24, 0x25	; 37
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__udivmodsi4>
    11c2:	da 01       	movw	r26, r20
    11c4:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
    11c6:	21 30       	cpi	r18, 0x01	; 1
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	36 07       	cpc	r19, r22
    11cc:	41 05       	cpc	r20, r1
    11ce:	51 05       	cpc	r21, r1
    11d0:	a8 f1       	brcs	.+106    	; 0x123c <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
    11d2:	68 94       	set
    11d4:	12 f8       	bld	r1, 2
    11d6:	b6 95       	lsr	r27
    11d8:	a7 95       	ror	r26
    11da:	97 95       	ror	r25
    11dc:	87 95       	ror	r24
    11de:	16 94       	lsr	r1
    11e0:	d1 f7       	brne	.-12     	; 0x11d6 <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	96 07       	cpc	r25, r22
    11e8:	a1 05       	cpc	r26, r1
    11ea:	b1 05       	cpc	r27, r1
    11ec:	48 f1       	brcs	.+82     	; 0x1240 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
    11ee:	da 01       	movw	r26, r20
    11f0:	c9 01       	movw	r24, r18
    11f2:	68 94       	set
    11f4:	15 f8       	bld	r1, 5
    11f6:	b6 95       	lsr	r27
    11f8:	a7 95       	ror	r26
    11fa:	97 95       	ror	r25
    11fc:	87 95       	ror	r24
    11fe:	16 94       	lsr	r1
    1200:	d1 f7       	brne	.-12     	; 0x11f6 <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	96 07       	cpc	r25, r22
    1208:	a1 05       	cpc	r26, r1
    120a:	b1 05       	cpc	r27, r1
    120c:	d8 f0       	brcs	.+54     	; 0x1244 <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
    120e:	bb 27       	eor	r27, r27
    1210:	a5 2f       	mov	r26, r21
    1212:	94 2f       	mov	r25, r20
    1214:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	96 07       	cpc	r25, r22
    121c:	a1 05       	cpc	r26, r1
    121e:	b1 05       	cpc	r27, r1
    1220:	98 f0       	brcs	.+38     	; 0x1248 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
    1222:	da 01       	movw	r26, r20
    1224:	c9 01       	movw	r24, r18
    1226:	07 2e       	mov	r0, r23
    1228:	7a e0       	ldi	r23, 0x0A	; 10
    122a:	b6 95       	lsr	r27
    122c:	a7 95       	ror	r26
    122e:	97 95       	ror	r25
    1230:	87 95       	ror	r24
    1232:	7a 95       	dec	r23
    1234:	d1 f7       	brne	.-12     	; 0x122a <pwm_setFreq+0x88>
    1236:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
    1238:	35 e0       	ldi	r19, 0x05	; 5
    123a:	07 c0       	rjmp	.+14     	; 0x124a <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    123c:	31 e0       	ldi	r19, 0x01	; 1
    123e:	05 c0       	rjmp	.+10     	; 0x124a <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
    1240:	32 e0       	ldi	r19, 0x02	; 2
    1242:	03 c0       	rjmp	.+6      	; 0x124a <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
    1244:	33 e0       	ldi	r19, 0x03	; 3
    1246:	01 c0       	rjmp	.+2      	; 0x124a <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
    1248:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
    124a:	23 b7       	in	r18, 0x33	; 51
    124c:	28 7f       	andi	r18, 0xF8	; 248
    124e:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
    1250:	23 b7       	in	r18, 0x33	; 51
    1252:	23 2b       	or	r18, r19
    1254:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
    1256:	81 50       	subi	r24, 0x01	; 1
    1258:	81 bf       	out	0x31, r24	; 49
    125a:	08 95       	ret

0000125c <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
    125c:	85 b7       	in	r24, 0x35	; 53
    125e:	8f 7e       	andi	r24, 0xEF	; 239
    1260:	85 bf       	out	0x35, r24	; 53
    1262:	84 b7       	in	r24, 0x34	; 52
    1264:	8f 7d       	andi	r24, 0xDF	; 223
    1266:	84 bf       	out	0x34, r24	; 52
    1268:	86 b7       	in	r24, 0x36	; 54
    126a:	8f 77       	andi	r24, 0x7F	; 127
    126c:	86 bf       	out	0x36, r24	; 54
    126e:	08 95       	ret

00001270 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
    1270:	88 b1       	in	r24, 0x08	; 8
    1272:	88 68       	ori	r24, 0x88	; 136
    1274:	88 b9       	out	0x08, r24	; 8

	

	// Put the device to sleep:
	sleep_mode();
    1276:	85 b7       	in	r24, 0x35	; 53
    1278:	80 62       	ori	r24, 0x20	; 32
    127a:	85 bf       	out	0x35, r24	; 53
    127c:	88 95       	sleep
    127e:	85 b7       	in	r24, 0x35	; 53
    1280:	8f 7d       	andi	r24, 0xDF	; 223
    1282:	85 bf       	out	0x35, r24	; 53
    1284:	08 95       	ret

00001286 <joystick_init>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystick_init() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    128c:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1296:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <joystickOffsetY>
    129a:	08 95       	ret

0000129c <joystick_readPosition>:
}
void joystick_readPosition() {
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12ae:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    12b6:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
    12b8:	60 91 4a 03 	lds	r22, 0x034A	; 0x80034a <joystickOffsetX>
    12bc:	c6 17       	cp	r28, r22
    12be:	80 f4       	brcc	.+32     	; 0x12e0 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	2c 2f       	mov	r18, r28
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	26 1b       	sub	r18, r22
    12c8:	37 0b       	sbc	r19, r23
    12ca:	44 e6       	ldi	r20, 0x64	; 100
    12cc:	42 9f       	mul	r20, r18
    12ce:	c0 01       	movw	r24, r0
    12d0:	43 9f       	mul	r20, r19
    12d2:	90 0d       	add	r25, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divmodhi4>
    12da:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <joystick_pos>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
    12e0:	46 2f       	mov	r20, r22
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	2c 2f       	mov	r18, r28
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	24 1b       	sub	r18, r20
    12ea:	35 0b       	sbc	r19, r21
    12ec:	64 e6       	ldi	r22, 0x64	; 100
    12ee:	62 9f       	mul	r22, r18
    12f0:	c0 01       	movw	r24, r0
    12f2:	63 9f       	mul	r22, r19
    12f4:	90 0d       	add	r25, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	6f ef       	ldi	r22, 0xFF	; 255
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	64 1b       	sub	r22, r20
    12fe:	75 0b       	sbc	r23, r21
    1300:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divmodhi4>
    1304:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
    1308:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <joystickOffsetY>
    130c:	e2 17       	cp	r30, r18
    130e:	88 f4       	brcc	.+34     	; 0x1332 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
    1310:	62 2f       	mov	r22, r18
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	4e 2f       	mov	r20, r30
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	46 1b       	sub	r20, r22
    131a:	57 0b       	sbc	r21, r23
    131c:	24 e6       	ldi	r18, 0x64	; 100
    131e:	24 9f       	mul	r18, r20
    1320:	c0 01       	movw	r24, r0
    1322:	25 9f       	mul	r18, r21
    1324:	90 0d       	add	r25, r0
    1326:	11 24       	eor	r1, r1
    1328:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divmodhi4>
    132c:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <joystick_pos+0x1>
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	4e 2f       	mov	r20, r30
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	42 1b       	sub	r20, r18
    133a:	53 0b       	sbc	r21, r19
    133c:	64 e6       	ldi	r22, 0x64	; 100
    133e:	64 9f       	mul	r22, r20
    1340:	c0 01       	movw	r24, r0
    1342:	65 9f       	mul	r22, r21
    1344:	90 0d       	add	r25, r0
    1346:	11 24       	eor	r1, r1
    1348:	6f ef       	ldi	r22, 0xFF	; 255
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	62 1b       	sub	r22, r18
    134e:	73 0b       	sbc	r23, r19
    1350:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divmodhi4>
    1354:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
    1358:	c4 e2       	ldi	r28, 0x24	; 36
    135a:	d3 e0       	ldi	r29, 0x03	; 3
    135c:	68 81       	ld	r22, Y
    135e:	06 2e       	mov	r0, r22
    1360:	00 0c       	add	r0, r0
    1362:	77 0b       	sbc	r23, r23
    1364:	88 0b       	sbc	r24, r24
    1366:	99 0b       	sbc	r25, r25
    1368:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
    136c:	6b 01       	movw	r12, r22
    136e:	7c 01       	movw	r14, r24
    1370:	69 81       	ldd	r22, Y+1	; 0x01
    1372:	06 2e       	mov	r0, r22
    1374:	00 0c       	add	r0, r0
    1376:	77 0b       	sbc	r23, r23
    1378:	88 0b       	sbc	r24, r24
    137a:	99 0b       	sbc	r25, r25
    137c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatsisf>
    1380:	a7 01       	movw	r20, r14
    1382:	96 01       	movw	r18, r12
    1384:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <atan2>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	44 eb       	ldi	r20, 0xB4	; 180
    138e:	53 e4       	ldi	r21, 0x43	; 67
    1390:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__mulsf3>
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__mulsf3>
    13a0:	23 ec       	ldi	r18, 0xC3	; 195
    13a2:	35 ef       	ldi	r19, 0xF5	; 245
    13a4:	48 e4       	ldi	r20, 0x48	; 72
    13a6:	50 e4       	ldi	r21, 0x40	; 64
    13a8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divsf3>
    13ac:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixsfsi>
    13b0:	7b 83       	std	Y+3, r23	; 0x03
    13b2:	6a 83       	std	Y+2, r22	; 0x02
}
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	08 95       	ret

000013c2 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
    13c2:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
    13c4:	80 81       	ld	r24, Z
    13c6:	94 e0       	ldi	r25, 0x04	; 4
    13c8:	98 0f       	add	r25, r24
    13ca:	99 30       	cpi	r25, 0x09	; 9
    13cc:	20 f4       	brcc	.+8      	; 0x13d6 <joystick_getDirection+0x14>
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	9c 5f       	subi	r25, 0xFC	; 252
    13d2:	99 30       	cpi	r25, 0x09	; 9
    13d4:	90 f0       	brcs	.+36     	; 0x13fa <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
    13d6:	85 30       	cpi	r24, 0x05	; 5
    13d8:	2c f0       	brlt	.+10     	; 0x13e4 <joystick_getDirection+0x22>
    13da:	81 81       	ldd	r24, Z+1	; 0x01
    13dc:	8f 5c       	subi	r24, 0xCF	; 207
    13de:	83 36       	cpi	r24, 0x63	; 99
    13e0:	38 f4       	brcc	.+14     	; 0x13f0 <joystick_getDirection+0x2e>
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
    13e4:	8c 3f       	cpi	r24, 0xFC	; 252
    13e6:	24 f4       	brge	.+8      	; 0x13f0 <joystick_getDirection+0x2e>
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	8f 5c       	subi	r24, 0xCF	; 207
    13ec:	83 36       	cpi	r24, 0x63	; 99
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
    13f2:	8c 3f       	cpi	r24, 0xFC	; 252
    13f4:	44 f0       	brlt	.+16     	; 0x1406 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
    13f6:	82 e0       	ldi	r24, 0x02	; 2
    13f8:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
    13fa:	84 e0       	ldi	r24, 0x04	; 4
    13fc:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
    1406:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
    1408:	08 95       	ret

0000140a <navigateMenu>:
	//printf("MENU INITIATED\n\r");
}


void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
    140a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
    140e:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <currentMenu+0x3>
    1412:	94 30       	cpi	r25, 0x04	; 4
    1414:	09 f0       	breq	.+2      	; 0x1418 <navigateMenu+0xe>
    1416:	5c c0       	rjmp	.+184    	; 0x14d0 <navigateMenu+0xc6>
			switch (dir) {
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	e1 f1       	breq	.+120    	; 0x1494 <navigateMenu+0x8a>
    141c:	60 f1       	brcs	.+88     	; 0x1476 <navigateMenu+0x6c>
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	c9 f0       	breq	.+50     	; 0x1454 <navigateMenu+0x4a>
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	09 f0       	breq	.+2      	; 0x1428 <navigateMenu+0x1e>
    1426:	54 c0       	rjmp	.+168    	; 0x14d0 <navigateMenu+0xc6>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
    1428:	ee e2       	ldi	r30, 0x2E	; 46
    142a:	f3 e0       	ldi	r31, 0x03	; 3
    142c:	92 81       	ldd	r25, Z+2	; 0x02
    142e:	49 2f       	mov	r20, r25
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	01 90       	ld	r0, Z+
    1434:	f0 81       	ld	r31, Z
    1436:	e0 2d       	mov	r30, r0
    1438:	20 a1       	ldd	r18, Z+32	; 0x20
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	21 50       	subi	r18, 0x01	; 1
    143e:	31 09       	sbc	r19, r1
    1440:	42 17       	cp	r20, r18
    1442:	53 07       	cpc	r21, r19
    1444:	24 f4       	brge	.+8      	; 0x144e <navigateMenu+0x44>
					currentMenu.childIndex++;
    1446:	9f 5f       	subi	r25, 0xFF	; 255
    1448:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <currentMenu+0x2>
    144c:	41 c0       	rjmp	.+130    	; 0x14d0 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = 0;
    144e:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <currentMenu+0x2>
    1452:	3e c0       	rjmp	.+124    	; 0x14d0 <navigateMenu+0xc6>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
    1454:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <currentMenu+0x2>
    1458:	99 23       	and	r25, r25
    145a:	21 f0       	breq	.+8      	; 0x1464 <navigateMenu+0x5a>
					currentMenu.childIndex--;
    145c:	91 50       	subi	r25, 0x01	; 1
    145e:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <currentMenu+0x2>
    1462:	36 c0       	rjmp	.+108    	; 0x14d0 <navigateMenu+0xc6>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
    1464:	ee e2       	ldi	r30, 0x2E	; 46
    1466:	f3 e0       	ldi	r31, 0x03	; 3
    1468:	a0 81       	ld	r26, Z
    146a:	b1 81       	ldd	r27, Z+1	; 0x01
    146c:	90 96       	adiw	r26, 0x20	; 32
    146e:	9c 91       	ld	r25, X
    1470:	91 50       	subi	r25, 0x01	; 1
    1472:	92 83       	std	Z+2, r25	; 0x02
    1474:	2d c0       	rjmp	.+90     	; 0x14d0 <navigateMenu+0xc6>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
    1476:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <currentMenu>
    147a:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <currentMenu+0x1>
    147e:	22 89       	ldd	r18, Z+18	; 0x12
    1480:	33 89       	ldd	r19, Z+19	; 0x13
    1482:	21 15       	cp	r18, r1
    1484:	31 05       	cpc	r19, r1
    1486:	21 f1       	breq	.+72     	; 0x14d0 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
    1488:	ee e2       	ldi	r30, 0x2E	; 46
    148a:	f3 e0       	ldi	r31, 0x03	; 3
    148c:	31 83       	std	Z+1, r19	; 0x01
    148e:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
    1490:	12 82       	std	Z+2, r1	; 0x02
    1492:	1e c0       	rjmp	.+60     	; 0x14d0 <navigateMenu+0xc6>
				}
				
				break;
			case RIGHT:
				if ((currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) || (currentMenu.currentMenuItem->children[currentMenu.childIndex]->isAction)) {
    1494:	ae e2       	ldi	r26, 0x2E	; 46
    1496:	b3 e0       	ldi	r27, 0x03	; 3
    1498:	2d 91       	ld	r18, X+
    149a:	3c 91       	ld	r19, X
    149c:	11 97       	sbiw	r26, 0x01	; 1
    149e:	12 96       	adiw	r26, 0x02	; 2
    14a0:	9c 91       	ld	r25, X
    14a2:	e9 2f       	mov	r30, r25
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	3a 96       	adiw	r30, 0x0a	; 10
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	e2 0f       	add	r30, r18
    14ae:	f3 1f       	adc	r31, r19
    14b0:	01 90       	ld	r0, Z+
    14b2:	f0 81       	ld	r31, Z
    14b4:	e0 2d       	mov	r30, r0
    14b6:	90 a1       	ldd	r25, Z+32	; 0x20
    14b8:	91 11       	cpse	r25, r1
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <navigateMenu+0xb8>
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	99 23       	and	r25, r25
    14c0:	39 f0       	breq	.+14     	; 0x14d0 <navigateMenu+0xc6>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
    14c2:	ae e2       	ldi	r26, 0x2E	; 46
    14c4:	b3 e0       	ldi	r27, 0x03	; 3
    14c6:	11 96       	adiw	r26, 0x01	; 1
    14c8:	fc 93       	st	X, r31
    14ca:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
    14cc:	12 96       	adiw	r26, 0x02	; 2
    14ce:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
    14d0:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <currentMenu+0x3>
    14d4:	08 95       	ret

000014d6 <menu_init>:
#include <string.h>


MenuNode nodes[8];

void menu_init() {
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
	
	//printf("this_init initiating");
	//Setting the name of the main menu
	strcpy(nodes[0].name, "Main menu");
    14de:	8a e0       	ldi	r24, 0x0A	; 10
    14e0:	e8 ed       	ldi	r30, 0xD8	; 216
    14e2:	f2 e0       	ldi	r31, 0x02	; 2
    14e4:	ad e4       	ldi	r26, 0x4D	; 77
    14e6:	b3 e0       	ldi	r27, 0x03	; 3
    14e8:	01 90       	ld	r0, Z+
    14ea:	0d 92       	st	X+, r0
    14ec:	8a 95       	dec	r24
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <menu_init+0x12>
	//Setting the names of the subm
	strcpy(nodes[1].name, "Play game");
    14f0:	8a e0       	ldi	r24, 0x0A	; 10
    14f2:	e2 ee       	ldi	r30, 0xE2	; 226
    14f4:	f2 e0       	ldi	r31, 0x02	; 2
    14f6:	ae e6       	ldi	r26, 0x6E	; 110
    14f8:	b3 e0       	ldi	r27, 0x03	; 3
    14fa:	01 90       	ld	r0, Z+
    14fc:	0d 92       	st	X+, r0
    14fe:	8a 95       	dec	r24
    1500:	e1 f7       	brne	.-8      	; 0x14fa <menu_init+0x24>
	strcpy(nodes[2].name, "High scores");
    1502:	8c e0       	ldi	r24, 0x0C	; 12
    1504:	ec ee       	ldi	r30, 0xEC	; 236
    1506:	f2 e0       	ldi	r31, 0x02	; 2
    1508:	af e8       	ldi	r26, 0x8F	; 143
    150a:	b3 e0       	ldi	r27, 0x03	; 3
    150c:	01 90       	ld	r0, Z+
    150e:	0d 92       	st	X+, r0
    1510:	8a 95       	dec	r24
    1512:	e1 f7       	brne	.-8      	; 0x150c <menu_init+0x36>
	strcpy(nodes[3].name, "Music");
    1514:	86 e0       	ldi	r24, 0x06	; 6
    1516:	e8 ef       	ldi	r30, 0xF8	; 248
    1518:	f2 e0       	ldi	r31, 0x02	; 2
    151a:	a0 eb       	ldi	r26, 0xB0	; 176
    151c:	b3 e0       	ldi	r27, 0x03	; 3
    151e:	01 90       	ld	r0, Z+
    1520:	0d 92       	st	X+, r0
    1522:	8a 95       	dec	r24
    1524:	e1 f7       	brne	.-8      	; 0x151e <menu_init+0x48>
	//Setting the names of the actions
	strcpy(nodes[4].name, "Game 1");
    1526:	87 e0       	ldi	r24, 0x07	; 7
    1528:	ee ef       	ldi	r30, 0xFE	; 254
    152a:	f2 e0       	ldi	r31, 0x02	; 2
    152c:	a1 ed       	ldi	r26, 0xD1	; 209
    152e:	b3 e0       	ldi	r27, 0x03	; 3
    1530:	01 90       	ld	r0, Z+
    1532:	0d 92       	st	X+, r0
    1534:	8a 95       	dec	r24
    1536:	e1 f7       	brne	.-8      	; 0x1530 <menu_init+0x5a>
	strcpy(nodes[5].name, "Game 2");
    1538:	87 e0       	ldi	r24, 0x07	; 7
    153a:	e5 e0       	ldi	r30, 0x05	; 5
    153c:	f3 e0       	ldi	r31, 0x03	; 3
    153e:	a2 ef       	ldi	r26, 0xF2	; 242
    1540:	b3 e0       	ldi	r27, 0x03	; 3
    1542:	01 90       	ld	r0, Z+
    1544:	0d 92       	st	X+, r0
    1546:	8a 95       	dec	r24
    1548:	e1 f7       	brne	.-8      	; 0x1542 <menu_init+0x6c>
	strcpy(nodes[6].name, "Game 1 HS");
    154a:	8a e0       	ldi	r24, 0x0A	; 10
    154c:	ec e0       	ldi	r30, 0x0C	; 12
    154e:	f3 e0       	ldi	r31, 0x03	; 3
    1550:	a3 e1       	ldi	r26, 0x13	; 19
    1552:	b4 e0       	ldi	r27, 0x04	; 4
    1554:	01 90       	ld	r0, Z+
    1556:	0d 92       	st	X+, r0
    1558:	8a 95       	dec	r24
    155a:	e1 f7       	brne	.-8      	; 0x1554 <menu_init+0x7e>
	strcpy(nodes[7].name, "Game 2 HS");
    155c:	8a e0       	ldi	r24, 0x0A	; 10
    155e:	e6 e1       	ldi	r30, 0x16	; 22
    1560:	f3 e0       	ldi	r31, 0x03	; 3
    1562:	a4 e3       	ldi	r26, 0x34	; 52
    1564:	b4 e0       	ldi	r27, 0x04	; 4
    1566:	01 90       	ld	r0, Z+
    1568:	0d 92       	st	X+, r0
    156a:	8a 95       	dec	r24
    156c:	e1 f7       	brne	.-8      	; 0x1566 <menu_init+0x90>
    156e:	6b e4       	ldi	r22, 0x4B	; 75
    1570:	73 e0       	ldi	r23, 0x03	; 3
    1572:	fb 01       	movw	r30, r22
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
			nodes[i].isAction=1;
    1578:	21 e0       	ldi	r18, 0x01	; 1
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
	{
		//This could be done way better and more general with hashing taking in the node name as input.
		nodes[i].nodeID=i;
    157a:	80 83       	st	Z, r24
		//Chooses if the child is sub or action (this is not dynamic)
		if(i>=3){
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	14 f0       	brlt	.+4      	; 0x1586 <menu_init+0xb0>
			nodes[i].isAction=1;
    1582:	21 83       	std	Z+1, r18	; 0x01
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <menu_init+0xb2>
		}
		else{
			nodes[i].isAction=0;
    1586:	11 82       	std	Z+1, r1	; 0x01
	strcpy(nodes[5].name, "Game 2");
	strcpy(nodes[6].name, "Game 1 HS");
	strcpy(nodes[7].name, "Game 2 HS");
	
	//Set games and HSs to be actions
	for(int i = 0;i<8; i++)
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	b1 96       	adiw	r30, 0x21	; 33
    158c:	88 30       	cpi	r24, 0x08	; 8
    158e:	91 05       	cpc	r25, r1
    1590:	a1 f7       	brne	.-24     	; 0x157a <menu_init+0xa4>
			nodes[i].isAction=0;
		}
	}
	
	
	nodes[0].numChildren = 3;
    1592:	eb e4       	ldi	r30, 0x4B	; 75
    1594:	f3 e0       	ldi	r31, 0x03	; 3
    1596:	83 e0       	ldi	r24, 0x03	; 3
    1598:	80 a3       	std	Z+32, r24	; 0x20
	nodes[1].numChildren = 2;
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <nodes+0x41>
	nodes[2].numChildren = 2;
    15a0:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <nodes+0x62>
	nodes[3].numChildren = 0;
    15a4:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <nodes+0x83>
	nodes[4].numChildren = 0;
    15a8:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <nodes+0xa4>
	nodes[5].numChildren = 0;
    15ac:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <nodes+0xc5>
	nodes[6].numChildren = 0;
    15b0:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <nodes+0xe6>
	nodes[7].numChildren = 0;
    15b4:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <nodes+0x107>
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
    15b8:	13 8a       	std	Z+19, r1	; 0x13
    15ba:	12 8a       	std	Z+18, r1	; 0x12
    15bc:	03 e5       	ldi	r16, 0x53	; 83
    15be:	14 e0       	ldi	r17, 0x04	; 4
	nodes[5].numChildren = 0;
	nodes[6].numChildren = 0;
	nodes[7].numChildren = 0;
	
	
	uint8_t currentChildIdx = 1;
    15c0:	41 e0       	ldi	r20, 0x01	; 1
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
			nodes[i].children[childIdx] = nodes+currentChildIdx;
    15c2:	51 e2       	ldi	r21, 0x21	; 33
    15c4:	18 c0       	rjmp	.+48     	; 0x15f6 <menu_init+0x120>
    15c6:	54 9f       	mul	r21, r20
    15c8:	f0 01       	movw	r30, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	e5 5b       	subi	r30, 0xB5	; 181
    15ce:	fc 4f       	sbci	r31, 0xFC	; 252
    15d0:	e9 93       	st	Y+, r30
    15d2:	f9 93       	st	Y+, r31
			(nodes+currentChildIdx)->parent = nodes+i;
    15d4:	b3 8b       	std	Z+19, r27	; 0x13
    15d6:	a2 8b       	std	Z+18, r26	; 0x12
			currentChildIdx++;
    15d8:	4f 5f       	subi	r20, 0xFF	; 255
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15da:	2f 5f       	subi	r18, 0xFF	; 255
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	90 96       	adiw	r26, 0x20	; 32
    15e0:	8c 91       	ld	r24, X
    15e2:	90 97       	sbiw	r26, 0x20	; 32
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	28 17       	cp	r18, r24
    15e8:	39 07       	cpc	r19, r25
    15ea:	6c f3       	brlt	.-38     	; 0x15c6 <menu_init+0xf0>
    15ec:	6f 5d       	subi	r22, 0xDF	; 223
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	uint8_t currentChildIdx = 1;
	
	nodes[0].parent = NULL;
	for (int i = 0; i< 8; i++) {
    15f0:	60 17       	cp	r22, r16
    15f2:	71 07       	cpc	r23, r17
    15f4:	59 f0       	breq	.+22     	; 0x160c <menu_init+0x136>
    15f6:	db 01       	movw	r26, r22
		for (int childIdx = 0; childIdx< nodes[i].numChildren; childIdx++) {
    15f8:	90 96       	adiw	r26, 0x20	; 32
    15fa:	8c 91       	ld	r24, X
    15fc:	90 97       	sbiw	r26, 0x20	; 32
    15fe:	88 23       	and	r24, r24
    1600:	a9 f3       	breq	.-22     	; 0x15ec <menu_init+0x116>
    1602:	eb 01       	movw	r28, r22
    1604:	64 96       	adiw	r28, 0x14	; 20
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	dd cf       	rjmp	.-70     	; 0x15c6 <menu_init+0xf0>
			nodes[i].children[childIdx] = nodes+currentChildIdx;
			(nodes+currentChildIdx)->parent = nodes+i;
			currentChildIdx++;
		}
	}
	navigateMenu(&joystick_pos);
    160c:	84 e2       	ldi	r24, 0x24	; 36
    160e:	93 e0       	ldi	r25, 0x03	; 3
    1610:	0e 94 05 0a 	call	0x140a	; 0x140a <navigateMenu>
	currentMenu.currentMenuItem = nodes; //set main menu as current
    1614:	ee e2       	ldi	r30, 0x2E	; 46
    1616:	f3 e0       	ldi	r31, 0x03	; 3
    1618:	8b e4       	ldi	r24, 0x4B	; 75
    161a:	93 e0       	ldi	r25, 0x03	; 3
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	80 83       	st	Z, r24
	currentMenu.childIndex = 0;
    1620:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
    1622:	84 e0       	ldi	r24, 0x04	; 4
    1624:	83 83       	std	Z+3, r24	; 0x03
	//printf("MENU INITIATED\n\r");
}
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <menu_printCurrentMenu>:
	
	currentMenu.lastDir = dir;
	
}

void menu_printCurrentMenu() {
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
	oled_reset();
    163a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
	oled_home();
    163e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
    1642:	ce e2       	ldi	r28, 0x2E	; 46
    1644:	d3 e0       	ldi	r29, 0x03	; 3
    1646:	88 81       	ld	r24, Y
    1648:	99 81       	ldd	r25, Y+1	; 0x01
    164a:	02 96       	adiw	r24, 0x02	; 2
    164c:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    1650:	e8 81       	ld	r30, Y
    1652:	f9 81       	ldd	r31, Y+1	; 0x01
    1654:	80 a1       	ldd	r24, Z+32	; 0x20
    1656:	88 23       	and	r24, r24
    1658:	51 f1       	breq	.+84     	; 0x16ae <menu_printCurrentMenu+0x7e>
    165a:	68 94       	set
    165c:	ff 24       	eor	r15, r15
    165e:	f1 f8       	bld	r15, 1
    1660:	c0 e0       	ldi	r28, 0x00	; 0
    1662:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    1664:	0e e2       	ldi	r16, 0x2E	; 46
    1666:	13 e0       	ldi	r17, 0x03	; 3
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
    1668:	8f 2d       	mov	r24, r15
    166a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
    166e:	d8 01       	movw	r26, r16
    1670:	8d 91       	ld	r24, X+
    1672:	9c 91       	ld	r25, X
    1674:	fe 01       	movw	r30, r28
    1676:	3a 96       	adiw	r30, 0x0a	; 10
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	e8 0f       	add	r30, r24
    167e:	f9 1f       	adc	r31, r25
    1680:	80 81       	ld	r24, Z
    1682:	91 81       	ldd	r25, Z+1	; 0x01
    1684:	02 96       	adiw	r24, 0x02	; 2
    1686:	0e 94 c5 0b 	call	0x178a	; 0x178a <oled_print>
		if (currentMenu.childIndex == i) {
    168a:	f8 01       	movw	r30, r16
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	8c 17       	cp	r24, r28
    1692:	9d 07       	cpc	r25, r29
    1694:	11 f4       	brne	.+4      	; 0x169a <menu_printCurrentMenu+0x6a>
			oled_print_arrow();
    1696:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
    169a:	21 96       	adiw	r28, 0x01	; 1
    169c:	f3 94       	inc	r15
    169e:	d8 01       	movw	r26, r16
    16a0:	ed 91       	ld	r30, X+
    16a2:	fc 91       	ld	r31, X
    16a4:	80 a1       	ldd	r24, Z+32	; 0x20
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	c8 17       	cp	r28, r24
    16aa:	d9 07       	cpc	r29, r25
    16ac:	ec f2       	brlt	.-70     	; 0x1668 <menu_printCurrentMenu+0x38>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	08 95       	ret

000016ba <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
    16ba:	80 55       	subi	r24, 0x50	; 80
    16bc:	e0 e0       	ldi	r30, 0x00	; 0
    16be:	f0 e1       	ldi	r31, 0x10	; 16
    16c0:	80 83       	st	Z, r24
    16c2:	86 2f       	mov	r24, r22
    16c4:	8f 70       	andi	r24, 0x0F	; 15
    16c6:	80 83       	st	Z, r24
    16c8:	62 95       	swap	r22
    16ca:	6f 70       	andi	r22, 0x0F	; 15
    16cc:	60 61       	ori	r22, 0x10	; 16
    16ce:	60 83       	st	Z, r22
    16d0:	08 95       	ret

000016d2 <oled_reset>:
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	10 e0       	ldi	r17, 0x00	; 0
    16da:	c0 e0       	ldi	r28, 0x00	; 0
    16dc:	d2 e1       	ldi	r29, 0x12	; 18
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	81 2f       	mov	r24, r17
    16e2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <oled_pos>
    16e6:	80 e8       	ldi	r24, 0x80	; 128
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	18 82       	st	Y, r1
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	e9 f7       	brne	.-6      	; 0x16ea <oled_reset+0x18>
    16f0:	1f 5f       	subi	r17, 0xFF	; 255
    16f2:	18 30       	cpi	r17, 0x08	; 8
    16f4:	a1 f7       	brne	.-24     	; 0x16de <oled_reset+0xc>
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	08 95       	ret

000016fe <oled_print_arrow>:
    16fe:	e0 e0       	ldi	r30, 0x00	; 0
    1700:	f2 e1       	ldi	r31, 0x12	; 18
    1702:	88 e1       	ldi	r24, 0x18	; 24
    1704:	80 83       	st	Z, r24
    1706:	9c e3       	ldi	r25, 0x3C	; 60
    1708:	90 83       	st	Z, r25
    170a:	9e e7       	ldi	r25, 0x7E	; 126
    170c:	90 83       	st	Z, r25
    170e:	80 83       	st	Z, r24
    1710:	80 83       	st	Z, r24
    1712:	08 95       	ret

00001714 <oled_home>:
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <oled_pos>
    171c:	08 95       	ret

0000171e <oled_init>:
    171e:	e0 e0       	ldi	r30, 0x00	; 0
    1720:	f0 e1       	ldi	r31, 0x10	; 16
    1722:	8e ea       	ldi	r24, 0xAE	; 174
    1724:	80 83       	st	Z, r24
    1726:	81 ea       	ldi	r24, 0xA1	; 161
    1728:	80 83       	st	Z, r24
    172a:	8a ed       	ldi	r24, 0xDA	; 218
    172c:	80 83       	st	Z, r24
    172e:	82 e1       	ldi	r24, 0x12	; 18
    1730:	80 83       	st	Z, r24
    1732:	88 ec       	ldi	r24, 0xC8	; 200
    1734:	80 83       	st	Z, r24
    1736:	88 ea       	ldi	r24, 0xA8	; 168
    1738:	80 83       	st	Z, r24
    173a:	8f e3       	ldi	r24, 0x3F	; 63
    173c:	80 83       	st	Z, r24
    173e:	85 ed       	ldi	r24, 0xD5	; 213
    1740:	80 83       	st	Z, r24
    1742:	80 e8       	ldi	r24, 0x80	; 128
    1744:	80 83       	st	Z, r24
    1746:	81 e8       	ldi	r24, 0x81	; 129
    1748:	80 83       	st	Z, r24
    174a:	80 e5       	ldi	r24, 0x50	; 80
    174c:	80 83       	st	Z, r24
    174e:	89 ed       	ldi	r24, 0xD9	; 217
    1750:	80 83       	st	Z, r24
    1752:	81 e2       	ldi	r24, 0x21	; 33
    1754:	80 83       	st	Z, r24
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	80 83       	st	Z, r24
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	80 83       	st	Z, r24
    175e:	8b ed       	ldi	r24, 0xDB	; 219
    1760:	80 83       	st	Z, r24
    1762:	80 e3       	ldi	r24, 0x30	; 48
    1764:	80 83       	st	Z, r24
    1766:	8d ea       	ldi	r24, 0xAD	; 173
    1768:	80 83       	st	Z, r24
    176a:	10 82       	st	Z, r1
    176c:	84 ea       	ldi	r24, 0xA4	; 164
    176e:	80 83       	st	Z, r24
    1770:	86 ea       	ldi	r24, 0xA6	; 166
    1772:	80 83       	st	Z, r24
    1774:	8f ea       	ldi	r24, 0xAF	; 175
    1776:	80 83       	st	Z, r24
    1778:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <oled_reset>
    177c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <oled_home>
    1780:	08 95       	ret

00001782 <oled_gotoLine>:
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <oled_pos>
    1788:	08 95       	ret

0000178a <oled_print>:

void oled_print(char* character){
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	dc 01       	movw	r26, r24
	while (*character != '\0')
    1790:	8c 91       	ld	r24, X
    1792:	81 11       	cpse	r24, r1
    1794:	1a c0       	rjmp	.+52     	; 0x17ca <oled_print+0x40>
    1796:	1e c0       	rjmp	.+60     	; 0x17d4 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
    1798:	ec 91       	ld	r30, X
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	b0 97       	sbiw	r30, 0x20	; 32
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	e2 0f       	add	r30, r18
    17ac:	f3 1f       	adc	r31, r19
    17ae:	e7 5d       	subi	r30, 0xD7	; 215
    17b0:	fd 4f       	sbci	r31, 0xFD	; 253
    17b2:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17b4:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
    17b6:	2f 5f       	subi	r18, 0xFF	; 255
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	28 30       	cpi	r18, 0x08	; 8
    17bc:	31 05       	cpc	r19, r1
    17be:	61 f7       	brne	.-40     	; 0x1798 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
    17c0:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
    17c2:	8c 91       	ld	r24, X
    17c4:	81 11       	cpse	r24, r1
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <oled_print+0x44>
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
    17ca:	c0 e0       	ldi	r28, 0x00	; 0
    17cc:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	e2 cf       	rjmp	.-60     	; 0x1798 <oled_print+0xe>
		}
		character++;
	}
	
	
}
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <setupInit>:
#define MYUBRR FOSC/16/BAUD-1
#include <util/delay.h>


	void setupInit(void){
	cli();
    17da:	f8 94       	cli
	xmem_init();
    17dc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <xmem_init>
    17e0:	2f ef       	ldi	r18, 0xFF	; 255
    17e2:	8f e7       	ldi	r24, 0x7F	; 127
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	21 50       	subi	r18, 0x01	; 1
    17e8:	80 40       	sbci	r24, 0x00	; 0
    17ea:	90 40       	sbci	r25, 0x00	; 0
    17ec:	e1 f7       	brne	.-8      	; 0x17e6 <setupInit+0xc>
    17ee:	00 c0       	rjmp	.+0      	; 0x17f0 <setupInit+0x16>
    17f0:	00 c0       	rjmp	.+0      	; 0x17f2 <setupInit+0x18>
	_delay_ms(100);
	USART_init(MYUBRR);
    17f2:	8f e1       	ldi	r24, 0x1F	; 31
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <USART_init>
    17fa:	2f ef       	ldi	r18, 0xFF	; 255
    17fc:	8f e7       	ldi	r24, 0x7F	; 127
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	21 50       	subi	r18, 0x01	; 1
    1802:	80 40       	sbci	r24, 0x00	; 0
    1804:	90 40       	sbci	r25, 0x00	; 0
    1806:	e1 f7       	brne	.-8      	; 0x1800 <setupInit+0x26>
    1808:	00 c0       	rjmp	.+0      	; 0x180a <setupInit+0x30>
    180a:	00 c0       	rjmp	.+0      	; 0x180c <setupInit+0x32>
	_delay_ms(100);
	adcInit();
    180c:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
    1810:	2f ef       	ldi	r18, 0xFF	; 255
    1812:	8f e7       	ldi	r24, 0x7F	; 127
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	21 50       	subi	r18, 0x01	; 1
    1818:	80 40       	sbci	r24, 0x00	; 0
    181a:	90 40       	sbci	r25, 0x00	; 0
    181c:	e1 f7       	brne	.-8      	; 0x1816 <setupInit+0x3c>
    181e:	00 c0       	rjmp	.+0      	; 0x1820 <setupInit+0x46>
    1820:	00 c0       	rjmp	.+0      	; 0x1822 <setupInit+0x48>
	_delay_ms(100);
	joystick_init();
    1822:	0e 94 43 09 	call	0x1286	; 0x1286 <joystick_init>
    1826:	2f ef       	ldi	r18, 0xFF	; 255
    1828:	8f e7       	ldi	r24, 0x7F	; 127
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	21 50       	subi	r18, 0x01	; 1
    182e:	80 40       	sbci	r24, 0x00	; 0
    1830:	90 40       	sbci	r25, 0x00	; 0
    1832:	e1 f7       	brne	.-8      	; 0x182c <setupInit+0x52>
    1834:	00 c0       	rjmp	.+0      	; 0x1836 <setupInit+0x5c>
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <setupInit+0x5e>
	_delay_ms(100);
	touchButton_init();
    1838:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <touchButton_init>
    183c:	2f ef       	ldi	r18, 0xFF	; 255
    183e:	8f e7       	ldi	r24, 0x7F	; 127
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	21 50       	subi	r18, 0x01	; 1
    1844:	80 40       	sbci	r24, 0x00	; 0
    1846:	90 40       	sbci	r25, 0x00	; 0
    1848:	e1 f7       	brne	.-8      	; 0x1842 <setupInit+0x68>
    184a:	00 c0       	rjmp	.+0      	; 0x184c <setupInit+0x72>
    184c:	00 c0       	rjmp	.+0      	; 0x184e <setupInit+0x74>
	_delay_ms(100);
	oled_init();
    184e:	0e 94 8f 0b 	call	0x171e	; 0x171e <oled_init>
    1852:	2f ef       	ldi	r18, 0xFF	; 255
    1854:	8f e7       	ldi	r24, 0x7F	; 127
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	21 50       	subi	r18, 0x01	; 1
    185a:	80 40       	sbci	r24, 0x00	; 0
    185c:	90 40       	sbci	r25, 0x00	; 0
    185e:	e1 f7       	brne	.-8      	; 0x1858 <setupInit+0x7e>
    1860:	00 c0       	rjmp	.+0      	; 0x1862 <setupInit+0x88>
    1862:	00 c0       	rjmp	.+0      	; 0x1864 <setupInit+0x8a>
	_delay_ms(100);
	timer_init();
    1864:	0e 94 c3 0c 	call	0x1986	; 0x1986 <timer_init>
    1868:	2f ef       	ldi	r18, 0xFF	; 255
    186a:	8f e7       	ldi	r24, 0x7F	; 127
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	21 50       	subi	r18, 0x01	; 1
    1870:	80 40       	sbci	r24, 0x00	; 0
    1872:	90 40       	sbci	r25, 0x00	; 0
    1874:	e1 f7       	brne	.-8      	; 0x186e <setupInit+0x94>
    1876:	00 c0       	rjmp	.+0      	; 0x1878 <setupInit+0x9e>
    1878:	00 c0       	rjmp	.+0      	; 0x187a <setupInit+0xa0>
	_delay_ms(100);
	sleep_init();
    187a:	0e 94 2e 09 	call	0x125c	; 0x125c <sleep_init>
    187e:	2f ef       	ldi	r18, 0xFF	; 255
    1880:	8f e7       	ldi	r24, 0x7F	; 127
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	21 50       	subi	r18, 0x01	; 1
    1886:	80 40       	sbci	r24, 0x00	; 0
    1888:	90 40       	sbci	r25, 0x00	; 0
    188a:	e1 f7       	brne	.-8      	; 0x1884 <setupInit+0xaa>
    188c:	00 c0       	rjmp	.+0      	; 0x188e <setupInit+0xb4>
    188e:	00 c0       	rjmp	.+0      	; 0x1890 <setupInit+0xb6>
	_delay_ms(100);
	menu_init();
    1890:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <menu_init>
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	8f e7       	ldi	r24, 0x7F	; 127
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	21 50       	subi	r18, 0x01	; 1
    189c:	80 40       	sbci	r24, 0x00	; 0
    189e:	90 40       	sbci	r25, 0x00	; 0
    18a0:	e1 f7       	brne	.-8      	; 0x189a <setupInit+0xc0>
    18a2:	00 c0       	rjmp	.+0      	; 0x18a4 <setupInit+0xca>
    18a4:	00 c0       	rjmp	.+0      	; 0x18a6 <setupInit+0xcc>
	_delay_ms(100);
	CAN_init();
    18a6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <CAN_init>
    18aa:	2f ef       	ldi	r18, 0xFF	; 255
    18ac:	8f e7       	ldi	r24, 0x7F	; 127
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	21 50       	subi	r18, 0x01	; 1
    18b2:	80 40       	sbci	r24, 0x00	; 0
    18b4:	90 40       	sbci	r25, 0x00	; 0
    18b6:	e1 f7       	brne	.-8      	; 0x18b0 <setupInit+0xd6>
    18b8:	00 c0       	rjmp	.+0      	; 0x18ba <setupInit+0xe0>
    18ba:	00 c0       	rjmp	.+0      	; 0x18bc <setupInit+0xe2>
	_delay_ms(100);
	pwm_init();
    18bc:	0e 94 c2 08 	call	0x1184	; 0x1184 <pwm_init>
    18c0:	2f ef       	ldi	r18, 0xFF	; 255
    18c2:	8f e7       	ldi	r24, 0x7F	; 127
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	21 50       	subi	r18, 0x01	; 1
    18c8:	80 40       	sbci	r24, 0x00	; 0
    18ca:	90 40       	sbci	r25, 0x00	; 0
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <setupInit+0xec>
    18ce:	00 c0       	rjmp	.+0      	; 0x18d0 <setupInit+0xf6>
    18d0:	00 c0       	rjmp	.+0      	; 0x18d2 <setupInit+0xf8>
	_delay_ms(100);
	game_init();
    18d2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <game_init>
    18d6:	2f ef       	ldi	r18, 0xFF	; 255
    18d8:	8f e7       	ldi	r24, 0x7F	; 127
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	21 50       	subi	r18, 0x01	; 1
    18de:	80 40       	sbci	r24, 0x00	; 0
    18e0:	90 40       	sbci	r25, 0x00	; 0
    18e2:	e1 f7       	brne	.-8      	; 0x18dc <setupInit+0x102>
    18e4:	00 c0       	rjmp	.+0      	; 0x18e6 <setupInit+0x10c>
    18e6:	00 c0       	rjmp	.+0      	; 0x18e8 <setupInit+0x10e>
	_delay_ms(100);
	sei();
    18e8:	78 94       	sei
    18ea:	08 95       	ret

000018ec <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
#include "CAN.h"
void slider_readPosition(slider_position_t * pos) {
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    18f6:	cc e3       	ldi	r28, 0x3C	; 60
    18f8:	d3 e0       	ldi	r29, 0x03	; 3
    18fa:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
    1902:	89 83       	std	Y+1, r24	; 0x01
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
    190a:	87 b3       	in	r24, 0x17	; 23
    190c:	80 6a       	ori	r24, 0xA0	; 160
    190e:	87 bb       	out	0x17, r24	; 23
    1910:	bc 9a       	sbi	0x17, 4	; 23
    1912:	8d b1       	in	r24, 0x0d	; 13
    1914:	81 65       	ori	r24, 0x51	; 81
    1916:	8d b9       	out	0x0d, r24	; 13
    1918:	c4 9a       	sbi	0x18, 4	; 24
    191a:	08 95       	ret

0000191c <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
    191c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    191e:	77 9b       	sbis	0x0e, 7	; 14
    1920:	fe cf       	rjmp	.-4      	; 0x191e <SPI_masterWrite+0x2>

}
    1922:	08 95       	ret

00001924 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
    1924:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
    1926:	77 9b       	sbis	0x0e, 7	; 14
    1928:	fe cf       	rjmp	.-4      	; 0x1926 <SPI_masterRead+0x2>
	return SPDR;
    192a:	8f b1       	in	r24, 0x0f	; 15
}
    192c:	08 95       	ret

0000192e <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
    192e:	66 23       	and	r22, r22
    1930:	69 f0       	breq	.+26     	; 0x194c <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
    1932:	48 b3       	in	r20, 0x18	; 24
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	b9 01       	movw	r22, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <SPI_setChipSelect+0x12>
    193c:	66 0f       	add	r22, r22
    193e:	77 1f       	adc	r23, r23
    1940:	8a 95       	dec	r24
    1942:	e2 f7       	brpl	.-8      	; 0x193c <SPI_setChipSelect+0xe>
    1944:	cb 01       	movw	r24, r22
    1946:	84 2b       	or	r24, r20
    1948:	88 bb       	out	0x18, r24	; 24
    194a:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
    194c:	48 b3       	in	r20, 0x18	; 24
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	b9 01       	movw	r22, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <SPI_setChipSelect+0x2c>
    1956:	66 0f       	add	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	8a 95       	dec	r24
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <SPI_setChipSelect+0x28>
    195e:	cb 01       	movw	r24, r22
    1960:	80 95       	com	r24
    1962:	84 23       	and	r24, r20
    1964:	88 bb       	out	0x18, r24	; 24
    1966:	08 95       	ret

00001968 <__vector_14>:
#include "menu.h"
#include "game.h"
#include <avr/interrupt.h>


ISR (TIMER1_COMPB_vect) {
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	11 24       	eor	r1, r1
    1972:	8f 93       	push	r24
	
	timerFlag=1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <timerFlag>

}
    197a:	8f 91       	pop	r24
    197c:	0f 90       	pop	r0
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	0f 90       	pop	r0
    1982:	1f 90       	pop	r1
    1984:	18 95       	reti

00001986 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
    1986:	89 b7       	in	r24, 0x39	; 57
    1988:	80 62       	ori	r24, 0x20	; 32
    198a:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
    198c:	1d bc       	out	0x2d, r1	; 45
    198e:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
    1990:	80 e3       	ldi	r24, 0x30	; 48
    1992:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
    1994:	85 e0       	ldi	r24, 0x05	; 5
    1996:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
    1998:	80 ee       	ldi	r24, 0xE0	; 224
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	99 bd       	out	0x29, r25	; 41
    199e:	88 bd       	out	0x28, r24	; 40
	timerFlag=0;
    19a0:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <timerFlag>
    19a4:	08 95       	ret

000019a6 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"
#include "CAN.h"
void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
    19a6:	36 b3       	in	r19, 0x16	; 22
    19a8:	26 b3       	in	r18, 0x16	; 22
    19aa:	47 b3       	in	r20, 0x17	; 23
    19ac:	32 70       	andi	r19, 0x02	; 2
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	bc 01       	movw	r22, r24
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <touchButton_init+0x14>
    19b6:	66 0f       	add	r22, r22
    19b8:	77 1f       	adc	r23, r23
    19ba:	3a 95       	dec	r19
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <touchButton_init+0x10>
    19be:	24 70       	andi	r18, 0x04	; 4
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <touchButton_init+0x20>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	2a 95       	dec	r18
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <touchButton_init+0x1c>
    19ca:	86 2b       	or	r24, r22
    19cc:	97 2b       	or	r25, r23
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	84 23       	and	r24, r20
    19d4:	87 bb       	out	0x17, r24	; 23
    19d6:	08 95       	ret

000019d8 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    19d8:	86 b3       	in	r24, 0x16	; 22
    19da:	e2 e3       	ldi	r30, 0x32	; 50
    19dc:	f3 e0       	ldi	r31, 0x03	; 3
    19de:	86 95       	lsr	r24
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    19e4:	86 b3       	in	r24, 0x16	; 22
    19e6:	82 fb       	bst	r24, 2
    19e8:	88 27       	eor	r24, r24
    19ea:	80 f9       	bld	r24, 0
    19ec:	81 83       	std	Z+1, r24	; 0x01
    19ee:	08 95       	ret

000019f0 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    19f0:	5d 9b       	sbis	0x0b, 5	; 11
    19f2:	fe cf       	rjmp	.-4      	; 0x19f0 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    19f4:	8c b9       	out	0x0c, r24	; 12
    19f6:	08 95       	ret

000019f8 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    19f8:	5f 9b       	sbis	0x0b, 7	; 11
    19fa:	fe cf       	rjmp	.-4      	; 0x19f8 <USART_receiveChar>
		;
	
	return UDR0;
    19fc:	8c b1       	in	r24, 0x0c	; 12
    19fe:	08 95       	ret

00001a00 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1a00:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    1a02:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    1a04:	88 e1       	ldi	r24, 0x18	; 24
    1a06:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1a08:	8e e8       	ldi	r24, 0x8E	; 142
    1a0a:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    1a0c:	6c ef       	ldi	r22, 0xFC	; 252
    1a0e:	7c e0       	ldi	r23, 0x0C	; 12
    1a10:	88 ef       	ldi	r24, 0xF8	; 248
    1a12:	9c e0       	ldi	r25, 0x0C	; 12
    1a14:	0e 94 3c 10 	call	0x2078	; 0x2078 <fdevopen>
    1a18:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <uart+0x1>
    1a1c:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <uart>
    1a20:	08 95       	ret

00001a22 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1a22:	85 b7       	in	r24, 0x35	; 53
    1a24:	80 68       	ori	r24, 0x80	; 128
    1a26:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1a28:	80 b7       	in	r24, 0x30	; 48
    1a2a:	88 60       	ori	r24, 0x08	; 8
    1a2c:	80 bf       	out	0x30, r24	; 48
    1a2e:	08 95       	ret
    1a30:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscA>
    1a34:	60 f0       	brcs	.+24     	; 0x1a4e <xmem_init+0x2c>
    1a36:	80 e8       	ldi	r24, 0x80	; 128
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <xmem_init+0x1c>
    1a3c:	9e ef       	ldi	r25, 0xFE	; 254
    1a3e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscB>
    1a42:	28 f0       	brcs	.+10     	; 0x1a4e <xmem_init+0x2c>
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	51 e0       	ldi	r21, 0x01	; 1
    1a48:	71 f4       	brne	.+28     	; 0x1a66 <atan2+0x10>
    1a4a:	5e ef       	ldi	r21, 0xFE	; 254
    1a4c:	0c c0       	rjmp	.+24     	; 0x1a66 <atan2+0x10>
    1a4e:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__fp_nan>
    1a52:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_zero>

00001a56 <atan2>:
    1a56:	e9 2f       	mov	r30, r25
    1a58:	e0 78       	andi	r30, 0x80	; 128
    1a5a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__fp_split3>
    1a5e:	40 f3       	brcs	.-48     	; 0x1a30 <xmem_init+0xe>
    1a60:	09 2e       	mov	r0, r25
    1a62:	05 2a       	or	r0, r21
    1a64:	b1 f3       	breq	.-20     	; 0x1a52 <xmem_init+0x30>
    1a66:	26 17       	cp	r18, r22
    1a68:	37 07       	cpc	r19, r23
    1a6a:	48 07       	cpc	r20, r24
    1a6c:	59 07       	cpc	r21, r25
    1a6e:	38 f0       	brcs	.+14     	; 0x1a7e <atan2+0x28>
    1a70:	0e 2e       	mov	r0, r30
    1a72:	07 f8       	bld	r0, 7
    1a74:	e0 25       	eor	r30, r0
    1a76:	69 f0       	breq	.+26     	; 0x1a92 <atan2+0x3c>
    1a78:	e0 25       	eor	r30, r0
    1a7a:	e0 64       	ori	r30, 0x40	; 64
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <atan2+0x3c>
    1a7e:	ef 63       	ori	r30, 0x3F	; 63
    1a80:	07 f8       	bld	r0, 7
    1a82:	00 94       	com	r0
    1a84:	07 fa       	bst	r0, 7
    1a86:	db 01       	movw	r26, r22
    1a88:	b9 01       	movw	r22, r18
    1a8a:	9d 01       	movw	r18, r26
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	ca 01       	movw	r24, r20
    1a90:	ad 01       	movw	r20, r26
    1a92:	ef 93       	push	r30
    1a94:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__divsf3_pse>
    1a98:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_round>
    1a9c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <atan>
    1aa0:	5f 91       	pop	r21
    1aa2:	55 23       	and	r21, r21
    1aa4:	39 f0       	breq	.+14     	; 0x1ab4 <atan2+0x5e>
    1aa6:	2b ed       	ldi	r18, 0xDB	; 219
    1aa8:	3f e0       	ldi	r19, 0x0F	; 15
    1aaa:	49 e4       	ldi	r20, 0x49	; 73
    1aac:	50 fd       	sbrc	r21, 0
    1aae:	49 ec       	ldi	r20, 0xC9	; 201
    1ab0:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__addsf3>
    1ab4:	08 95       	ret

00001ab6 <atan>:
    1ab6:	df 93       	push	r29
    1ab8:	dd 27       	eor	r29, r29
    1aba:	b9 2f       	mov	r27, r25
    1abc:	bf 77       	andi	r27, 0x7F	; 127
    1abe:	40 e8       	ldi	r20, 0x80	; 128
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	16 16       	cp	r1, r22
    1ac4:	17 06       	cpc	r1, r23
    1ac6:	48 07       	cpc	r20, r24
    1ac8:	5b 07       	cpc	r21, r27
    1aca:	18 f4       	brcc	.+6      	; 0x1ad2 <atan+0x1c>
    1acc:	d9 2f       	mov	r29, r25
    1ace:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <inverse>
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	7f 93       	push	r23
    1ad8:	6f 93       	push	r22
    1ada:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <square>
    1ade:	e0 e7       	ldi	r30, 0x70	; 112
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_powser>
    1ae6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_round>
    1aea:	2f 91       	pop	r18
    1aec:	3f 91       	pop	r19
    1aee:	4f 91       	pop	r20
    1af0:	5f 91       	pop	r21
    1af2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3x>
    1af6:	dd 23       	and	r29, r29
    1af8:	51 f0       	breq	.+20     	; 0x1b0e <atan+0x58>
    1afa:	90 58       	subi	r25, 0x80	; 128
    1afc:	a2 ea       	ldi	r26, 0xA2	; 162
    1afe:	2a ed       	ldi	r18, 0xDA	; 218
    1b00:	3f e0       	ldi	r19, 0x0F	; 15
    1b02:	49 ec       	ldi	r20, 0xC9	; 201
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	d0 78       	andi	r29, 0x80	; 128
    1b08:	5d 27       	eor	r21, r29
    1b0a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__addsf3x>
    1b0e:	df 91       	pop	r29
    1b10:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_round>

00001b14 <__divsf3>:
    1b14:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__divsf3x>
    1b18:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_round>
    1b1c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscB>
    1b20:	58 f0       	brcs	.+22     	; 0x1b38 <__divsf3+0x24>
    1b22:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscA>
    1b26:	40 f0       	brcs	.+16     	; 0x1b38 <__divsf3+0x24>
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <__divsf3+0x20>
    1b2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <__divsf3+0x24>
    1b2e:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__fp_inf>
    1b32:	51 11       	cpse	r21, r1
    1b34:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>
    1b38:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__fp_nan>

00001b3c <__divsf3x>:
    1b3c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__fp_split3>
    1b40:	68 f3       	brcs	.-38     	; 0x1b1c <__divsf3+0x8>

00001b42 <__divsf3_pse>:
    1b42:	99 23       	and	r25, r25
    1b44:	b1 f3       	breq	.-20     	; 0x1b32 <__divsf3+0x1e>
    1b46:	55 23       	and	r21, r21
    1b48:	91 f3       	breq	.-28     	; 0x1b2e <__divsf3+0x1a>
    1b4a:	95 1b       	sub	r25, r21
    1b4c:	55 0b       	sbc	r21, r21
    1b4e:	bb 27       	eor	r27, r27
    1b50:	aa 27       	eor	r26, r26
    1b52:	62 17       	cp	r22, r18
    1b54:	73 07       	cpc	r23, r19
    1b56:	84 07       	cpc	r24, r20
    1b58:	38 f0       	brcs	.+14     	; 0x1b68 <__divsf3_pse+0x26>
    1b5a:	9f 5f       	subi	r25, 0xFF	; 255
    1b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	44 1f       	adc	r20, r20
    1b64:	aa 1f       	adc	r26, r26
    1b66:	a9 f3       	breq	.-22     	; 0x1b52 <__divsf3_pse+0x10>
    1b68:	35 d0       	rcall	.+106    	; 0x1bd4 <__divsf3_pse+0x92>
    1b6a:	0e 2e       	mov	r0, r30
    1b6c:	3a f0       	brmi	.+14     	; 0x1b7c <__divsf3_pse+0x3a>
    1b6e:	e0 e8       	ldi	r30, 0x80	; 128
    1b70:	32 d0       	rcall	.+100    	; 0x1bd6 <__divsf3_pse+0x94>
    1b72:	91 50       	subi	r25, 0x01	; 1
    1b74:	50 40       	sbci	r21, 0x00	; 0
    1b76:	e6 95       	lsr	r30
    1b78:	00 1c       	adc	r0, r0
    1b7a:	ca f7       	brpl	.-14     	; 0x1b6e <__divsf3_pse+0x2c>
    1b7c:	2b d0       	rcall	.+86     	; 0x1bd4 <__divsf3_pse+0x92>
    1b7e:	fe 2f       	mov	r31, r30
    1b80:	29 d0       	rcall	.+82     	; 0x1bd4 <__divsf3_pse+0x92>
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	26 17       	cp	r18, r22
    1b8c:	37 07       	cpc	r19, r23
    1b8e:	48 07       	cpc	r20, r24
    1b90:	ab 07       	cpc	r26, r27
    1b92:	b0 e8       	ldi	r27, 0x80	; 128
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <__divsf3_pse+0x56>
    1b96:	bb 0b       	sbc	r27, r27
    1b98:	80 2d       	mov	r24, r0
    1b9a:	bf 01       	movw	r22, r30
    1b9c:	ff 27       	eor	r31, r31
    1b9e:	93 58       	subi	r25, 0x83	; 131
    1ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba2:	3a f0       	brmi	.+14     	; 0x1bb2 <__divsf3_pse+0x70>
    1ba4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba6:	51 05       	cpc	r21, r1
    1ba8:	78 f0       	brcs	.+30     	; 0x1bc8 <__divsf3_pse+0x86>
    1baa:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__fp_inf>
    1bae:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>
    1bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb4:	e4 f3       	brlt	.-8      	; 0x1bae <__divsf3_pse+0x6c>
    1bb6:	98 3e       	cpi	r25, 0xE8	; 232
    1bb8:	d4 f3       	brlt	.-12     	; 0x1bae <__divsf3_pse+0x6c>
    1bba:	86 95       	lsr	r24
    1bbc:	77 95       	ror	r23
    1bbe:	67 95       	ror	r22
    1bc0:	b7 95       	ror	r27
    1bc2:	f7 95       	ror	r31
    1bc4:	9f 5f       	subi	r25, 0xFF	; 255
    1bc6:	c9 f7       	brne	.-14     	; 0x1bba <__divsf3_pse+0x78>
    1bc8:	88 0f       	add	r24, r24
    1bca:	91 1d       	adc	r25, r1
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	97 f9       	bld	r25, 7
    1bd2:	08 95       	ret
    1bd4:	e1 e0       	ldi	r30, 0x01	; 1
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	bb 1f       	adc	r27, r27
    1bde:	62 17       	cp	r22, r18
    1be0:	73 07       	cpc	r23, r19
    1be2:	84 07       	cpc	r24, r20
    1be4:	ba 07       	cpc	r27, r26
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__divsf3_pse+0xae>
    1be8:	62 1b       	sub	r22, r18
    1bea:	73 0b       	sbc	r23, r19
    1bec:	84 0b       	sbc	r24, r20
    1bee:	ba 0b       	sbc	r27, r26
    1bf0:	ee 1f       	adc	r30, r30
    1bf2:	88 f7       	brcc	.-30     	; 0x1bd6 <__divsf3_pse+0x94>
    1bf4:	e0 95       	com	r30
    1bf6:	08 95       	ret

00001bf8 <__fixsfsi>:
    1bf8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fixunssfsi>
    1bfc:	68 94       	set
    1bfe:	b1 11       	cpse	r27, r1
    1c00:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>
    1c04:	08 95       	ret

00001c06 <__fixunssfsi>:
    1c06:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_splitA>
    1c0a:	88 f0       	brcs	.+34     	; 0x1c2e <__fixunssfsi+0x28>
    1c0c:	9f 57       	subi	r25, 0x7F	; 127
    1c0e:	98 f0       	brcs	.+38     	; 0x1c36 <__fixunssfsi+0x30>
    1c10:	b9 2f       	mov	r27, r25
    1c12:	99 27       	eor	r25, r25
    1c14:	b7 51       	subi	r27, 0x17	; 23
    1c16:	b0 f0       	brcs	.+44     	; 0x1c44 <__fixunssfsi+0x3e>
    1c18:	e1 f0       	breq	.+56     	; 0x1c52 <__fixunssfsi+0x4c>
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	1a f0       	brmi	.+6      	; 0x1c2a <__fixunssfsi+0x24>
    1c24:	ba 95       	dec	r27
    1c26:	c9 f7       	brne	.-14     	; 0x1c1a <__fixunssfsi+0x14>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <__fixunssfsi+0x4c>
    1c2a:	b1 30       	cpi	r27, 0x01	; 1
    1c2c:	91 f0       	breq	.+36     	; 0x1c52 <__fixunssfsi+0x4c>
    1c2e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fp_zero>
    1c32:	b1 e0       	ldi	r27, 0x01	; 1
    1c34:	08 95       	ret
    1c36:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_zero>
    1c3a:	67 2f       	mov	r22, r23
    1c3c:	78 2f       	mov	r23, r24
    1c3e:	88 27       	eor	r24, r24
    1c40:	b8 5f       	subi	r27, 0xF8	; 248
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <__fixunssfsi+0x4c>
    1c44:	b9 3f       	cpi	r27, 0xF9	; 249
    1c46:	cc f3       	brlt	.-14     	; 0x1c3a <__fixunssfsi+0x34>
    1c48:	86 95       	lsr	r24
    1c4a:	77 95       	ror	r23
    1c4c:	67 95       	ror	r22
    1c4e:	b3 95       	inc	r27
    1c50:	d9 f7       	brne	.-10     	; 0x1c48 <__fixunssfsi+0x42>
    1c52:	3e f4       	brtc	.+14     	; 0x1c62 <__fixunssfsi+0x5c>
    1c54:	90 95       	com	r25
    1c56:	80 95       	com	r24
    1c58:	70 95       	com	r23
    1c5a:	61 95       	neg	r22
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	08 95       	ret

00001c64 <__floatunsisf>:
    1c64:	e8 94       	clt
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <__floatsisf+0x12>

00001c68 <__floatsisf>:
    1c68:	97 fb       	bst	r25, 7
    1c6a:	3e f4       	brtc	.+14     	; 0x1c7a <__floatsisf+0x12>
    1c6c:	90 95       	com	r25
    1c6e:	80 95       	com	r24
    1c70:	70 95       	com	r23
    1c72:	61 95       	neg	r22
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	8f 4f       	sbci	r24, 0xFF	; 255
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	99 23       	and	r25, r25
    1c7c:	a9 f0       	breq	.+42     	; 0x1ca8 <__floatsisf+0x40>
    1c7e:	f9 2f       	mov	r31, r25
    1c80:	96 e9       	ldi	r25, 0x96	; 150
    1c82:	bb 27       	eor	r27, r27
    1c84:	93 95       	inc	r25
    1c86:	f6 95       	lsr	r31
    1c88:	87 95       	ror	r24
    1c8a:	77 95       	ror	r23
    1c8c:	67 95       	ror	r22
    1c8e:	b7 95       	ror	r27
    1c90:	f1 11       	cpse	r31, r1
    1c92:	f8 cf       	rjmp	.-16     	; 0x1c84 <__floatsisf+0x1c>
    1c94:	fa f4       	brpl	.+62     	; 0x1cd4 <__floatsisf+0x6c>
    1c96:	bb 0f       	add	r27, r27
    1c98:	11 f4       	brne	.+4      	; 0x1c9e <__floatsisf+0x36>
    1c9a:	60 ff       	sbrs	r22, 0
    1c9c:	1b c0       	rjmp	.+54     	; 0x1cd4 <__floatsisf+0x6c>
    1c9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	16 c0       	rjmp	.+44     	; 0x1cd4 <__floatsisf+0x6c>
    1ca8:	88 23       	and	r24, r24
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <__floatsisf+0x48>
    1cac:	96 e9       	ldi	r25, 0x96	; 150
    1cae:	11 c0       	rjmp	.+34     	; 0x1cd2 <__floatsisf+0x6a>
    1cb0:	77 23       	and	r23, r23
    1cb2:	21 f0       	breq	.+8      	; 0x1cbc <__floatsisf+0x54>
    1cb4:	9e e8       	ldi	r25, 0x8E	; 142
    1cb6:	87 2f       	mov	r24, r23
    1cb8:	76 2f       	mov	r23, r22
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <__floatsisf+0x5e>
    1cbc:	66 23       	and	r22, r22
    1cbe:	71 f0       	breq	.+28     	; 0x1cdc <__floatsisf+0x74>
    1cc0:	96 e8       	ldi	r25, 0x86	; 134
    1cc2:	86 2f       	mov	r24, r22
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	2a f0       	brmi	.+10     	; 0x1cd4 <__floatsisf+0x6c>
    1cca:	9a 95       	dec	r25
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	da f7       	brpl	.-10     	; 0x1cca <__floatsisf+0x62>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	96 95       	lsr	r25
    1cd8:	87 95       	ror	r24
    1cda:	97 f9       	bld	r25, 7
    1cdc:	08 95       	ret

00001cde <__fp_inf>:
    1cde:	97 f9       	bld	r25, 7
    1ce0:	9f 67       	ori	r25, 0x7F	; 127
    1ce2:	80 e8       	ldi	r24, 0x80	; 128
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	08 95       	ret

00001cea <__fp_nan>:
    1cea:	9f ef       	ldi	r25, 0xFF	; 255
    1cec:	80 ec       	ldi	r24, 0xC0	; 192
    1cee:	08 95       	ret

00001cf0 <__fp_powser>:
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	1f 93       	push	r17
    1cf6:	0f 93       	push	r16
    1cf8:	ff 92       	push	r15
    1cfa:	ef 92       	push	r14
    1cfc:	df 92       	push	r13
    1cfe:	7b 01       	movw	r14, r22
    1d00:	8c 01       	movw	r16, r24
    1d02:	68 94       	set
    1d04:	06 c0       	rjmp	.+12     	; 0x1d12 <__fp_powser+0x22>
    1d06:	da 2e       	mov	r13, r26
    1d08:	ef 01       	movw	r28, r30
    1d0a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3x>
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e8 94       	clt
    1d12:	a5 91       	lpm	r26, Z+
    1d14:	25 91       	lpm	r18, Z+
    1d16:	35 91       	lpm	r19, Z+
    1d18:	45 91       	lpm	r20, Z+
    1d1a:	55 91       	lpm	r21, Z+
    1d1c:	a6 f3       	brts	.-24     	; 0x1d06 <__fp_powser+0x16>
    1d1e:	ef 01       	movw	r28, r30
    1d20:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__addsf3x>
    1d24:	fe 01       	movw	r30, r28
    1d26:	97 01       	movw	r18, r14
    1d28:	a8 01       	movw	r20, r16
    1d2a:	da 94       	dec	r13
    1d2c:	69 f7       	brne	.-38     	; 0x1d08 <__fp_powser+0x18>
    1d2e:	df 90       	pop	r13
    1d30:	ef 90       	pop	r14
    1d32:	ff 90       	pop	r15
    1d34:	0f 91       	pop	r16
    1d36:	1f 91       	pop	r17
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <__fp_pscA>:
    1d3e:	00 24       	eor	r0, r0
    1d40:	0a 94       	dec	r0
    1d42:	16 16       	cp	r1, r22
    1d44:	17 06       	cpc	r1, r23
    1d46:	18 06       	cpc	r1, r24
    1d48:	09 06       	cpc	r0, r25
    1d4a:	08 95       	ret

00001d4c <__fp_pscB>:
    1d4c:	00 24       	eor	r0, r0
    1d4e:	0a 94       	dec	r0
    1d50:	12 16       	cp	r1, r18
    1d52:	13 06       	cpc	r1, r19
    1d54:	14 06       	cpc	r1, r20
    1d56:	05 06       	cpc	r0, r21
    1d58:	08 95       	ret

00001d5a <__fp_round>:
    1d5a:	09 2e       	mov	r0, r25
    1d5c:	03 94       	inc	r0
    1d5e:	00 0c       	add	r0, r0
    1d60:	11 f4       	brne	.+4      	; 0x1d66 <__fp_round+0xc>
    1d62:	88 23       	and	r24, r24
    1d64:	52 f0       	brmi	.+20     	; 0x1d7a <__fp_round+0x20>
    1d66:	bb 0f       	add	r27, r27
    1d68:	40 f4       	brcc	.+16     	; 0x1d7a <__fp_round+0x20>
    1d6a:	bf 2b       	or	r27, r31
    1d6c:	11 f4       	brne	.+4      	; 0x1d72 <__fp_round+0x18>
    1d6e:	60 ff       	sbrs	r22, 0
    1d70:	04 c0       	rjmp	.+8      	; 0x1d7a <__fp_round+0x20>
    1d72:	6f 5f       	subi	r22, 0xFF	; 255
    1d74:	7f 4f       	sbci	r23, 0xFF	; 255
    1d76:	8f 4f       	sbci	r24, 0xFF	; 255
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	08 95       	ret

00001d7c <__fp_split3>:
    1d7c:	57 fd       	sbrc	r21, 7
    1d7e:	90 58       	subi	r25, 0x80	; 128
    1d80:	44 0f       	add	r20, r20
    1d82:	55 1f       	adc	r21, r21
    1d84:	59 f0       	breq	.+22     	; 0x1d9c <__fp_splitA+0x10>
    1d86:	5f 3f       	cpi	r21, 0xFF	; 255
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <__fp_splitA+0x1a>
    1d8a:	47 95       	ror	r20

00001d8c <__fp_splitA>:
    1d8c:	88 0f       	add	r24, r24
    1d8e:	97 fb       	bst	r25, 7
    1d90:	99 1f       	adc	r25, r25
    1d92:	61 f0       	breq	.+24     	; 0x1dac <__fp_splitA+0x20>
    1d94:	9f 3f       	cpi	r25, 0xFF	; 255
    1d96:	79 f0       	breq	.+30     	; 0x1db6 <__fp_splitA+0x2a>
    1d98:	87 95       	ror	r24
    1d9a:	08 95       	ret
    1d9c:	12 16       	cp	r1, r18
    1d9e:	13 06       	cpc	r1, r19
    1da0:	14 06       	cpc	r1, r20
    1da2:	55 1f       	adc	r21, r21
    1da4:	f2 cf       	rjmp	.-28     	; 0x1d8a <__fp_split3+0xe>
    1da6:	46 95       	lsr	r20
    1da8:	f1 df       	rcall	.-30     	; 0x1d8c <__fp_splitA>
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <__fp_splitA+0x30>
    1dac:	16 16       	cp	r1, r22
    1dae:	17 06       	cpc	r1, r23
    1db0:	18 06       	cpc	r1, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	f1 cf       	rjmp	.-30     	; 0x1d98 <__fp_splitA+0xc>
    1db6:	86 95       	lsr	r24
    1db8:	71 05       	cpc	r23, r1
    1dba:	61 05       	cpc	r22, r1
    1dbc:	08 94       	sec
    1dbe:	08 95       	ret

00001dc0 <__fp_zero>:
    1dc0:	e8 94       	clt

00001dc2 <__fp_szero>:
    1dc2:	bb 27       	eor	r27, r27
    1dc4:	66 27       	eor	r22, r22
    1dc6:	77 27       	eor	r23, r23
    1dc8:	cb 01       	movw	r24, r22
    1dca:	97 f9       	bld	r25, 7
    1dcc:	08 95       	ret

00001dce <inverse>:
    1dce:	9b 01       	movw	r18, r22
    1dd0:	ac 01       	movw	r20, r24
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	80 e8       	ldi	r24, 0x80	; 128
    1dd8:	9f e3       	ldi	r25, 0x3F	; 63
    1dda:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__divsf3>

00001dde <__mulsf3>:
    1dde:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3x>
    1de2:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_round>
    1de6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscA>
    1dea:	38 f0       	brcs	.+14     	; 0x1dfa <__mulsf3+0x1c>
    1dec:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscB>
    1df0:	20 f0       	brcs	.+8      	; 0x1dfa <__mulsf3+0x1c>
    1df2:	95 23       	and	r25, r21
    1df4:	11 f0       	breq	.+4      	; 0x1dfa <__mulsf3+0x1c>
    1df6:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__fp_inf>
    1dfa:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__fp_nan>
    1dfe:	11 24       	eor	r1, r1
    1e00:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>

00001e04 <__mulsf3x>:
    1e04:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__fp_split3>
    1e08:	70 f3       	brcs	.-36     	; 0x1de6 <__mulsf3+0x8>

00001e0a <__mulsf3_pse>:
    1e0a:	95 9f       	mul	r25, r21
    1e0c:	c1 f3       	breq	.-16     	; 0x1dfe <__mulsf3+0x20>
    1e0e:	95 0f       	add	r25, r21
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	55 1f       	adc	r21, r21
    1e14:	62 9f       	mul	r22, r18
    1e16:	f0 01       	movw	r30, r0
    1e18:	72 9f       	mul	r23, r18
    1e1a:	bb 27       	eor	r27, r27
    1e1c:	f0 0d       	add	r31, r0
    1e1e:	b1 1d       	adc	r27, r1
    1e20:	63 9f       	mul	r22, r19
    1e22:	aa 27       	eor	r26, r26
    1e24:	f0 0d       	add	r31, r0
    1e26:	b1 1d       	adc	r27, r1
    1e28:	aa 1f       	adc	r26, r26
    1e2a:	64 9f       	mul	r22, r20
    1e2c:	66 27       	eor	r22, r22
    1e2e:	b0 0d       	add	r27, r0
    1e30:	a1 1d       	adc	r26, r1
    1e32:	66 1f       	adc	r22, r22
    1e34:	82 9f       	mul	r24, r18
    1e36:	22 27       	eor	r18, r18
    1e38:	b0 0d       	add	r27, r0
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	62 1f       	adc	r22, r18
    1e3e:	73 9f       	mul	r23, r19
    1e40:	b0 0d       	add	r27, r0
    1e42:	a1 1d       	adc	r26, r1
    1e44:	62 1f       	adc	r22, r18
    1e46:	83 9f       	mul	r24, r19
    1e48:	a0 0d       	add	r26, r0
    1e4a:	61 1d       	adc	r22, r1
    1e4c:	22 1f       	adc	r18, r18
    1e4e:	74 9f       	mul	r23, r20
    1e50:	33 27       	eor	r19, r19
    1e52:	a0 0d       	add	r26, r0
    1e54:	61 1d       	adc	r22, r1
    1e56:	23 1f       	adc	r18, r19
    1e58:	84 9f       	mul	r24, r20
    1e5a:	60 0d       	add	r22, r0
    1e5c:	21 1d       	adc	r18, r1
    1e5e:	82 2f       	mov	r24, r18
    1e60:	76 2f       	mov	r23, r22
    1e62:	6a 2f       	mov	r22, r26
    1e64:	11 24       	eor	r1, r1
    1e66:	9f 57       	subi	r25, 0x7F	; 127
    1e68:	50 40       	sbci	r21, 0x00	; 0
    1e6a:	9a f0       	brmi	.+38     	; 0x1e92 <__mulsf3_pse+0x88>
    1e6c:	f1 f0       	breq	.+60     	; 0x1eaa <__mulsf3_pse+0xa0>
    1e6e:	88 23       	and	r24, r24
    1e70:	4a f0       	brmi	.+18     	; 0x1e84 <__mulsf3_pse+0x7a>
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	bb 1f       	adc	r27, r27
    1e78:	66 1f       	adc	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	91 50       	subi	r25, 0x01	; 1
    1e80:	50 40       	sbci	r21, 0x00	; 0
    1e82:	a9 f7       	brne	.-22     	; 0x1e6e <__mulsf3_pse+0x64>
    1e84:	9e 3f       	cpi	r25, 0xFE	; 254
    1e86:	51 05       	cpc	r21, r1
    1e88:	80 f0       	brcs	.+32     	; 0x1eaa <__mulsf3_pse+0xa0>
    1e8a:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__fp_inf>
    1e8e:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>
    1e92:	5f 3f       	cpi	r21, 0xFF	; 255
    1e94:	e4 f3       	brlt	.-8      	; 0x1e8e <__mulsf3_pse+0x84>
    1e96:	98 3e       	cpi	r25, 0xE8	; 232
    1e98:	d4 f3       	brlt	.-12     	; 0x1e8e <__mulsf3_pse+0x84>
    1e9a:	86 95       	lsr	r24
    1e9c:	77 95       	ror	r23
    1e9e:	67 95       	ror	r22
    1ea0:	b7 95       	ror	r27
    1ea2:	f7 95       	ror	r31
    1ea4:	e7 95       	ror	r30
    1ea6:	9f 5f       	subi	r25, 0xFF	; 255
    1ea8:	c1 f7       	brne	.-16     	; 0x1e9a <__mulsf3_pse+0x90>
    1eaa:	fe 2b       	or	r31, r30
    1eac:	88 0f       	add	r24, r24
    1eae:	91 1d       	adc	r25, r1
    1eb0:	96 95       	lsr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	08 95       	ret

00001eb8 <square>:
    1eb8:	9b 01       	movw	r18, r22
    1eba:	ac 01       	movw	r20, r24
    1ebc:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__mulsf3>

00001ec0 <__subsf3>:
    1ec0:	50 58       	subi	r21, 0x80	; 128

00001ec2 <__addsf3>:
    1ec2:	bb 27       	eor	r27, r27
    1ec4:	aa 27       	eor	r26, r26
    1ec6:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__addsf3x>
    1eca:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_round>
    1ece:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscA>
    1ed2:	38 f0       	brcs	.+14     	; 0x1ee2 <__addsf3+0x20>
    1ed4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscB>
    1ed8:	20 f0       	brcs	.+8      	; 0x1ee2 <__addsf3+0x20>
    1eda:	39 f4       	brne	.+14     	; 0x1eea <__addsf3+0x28>
    1edc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ede:	19 f4       	brne	.+6      	; 0x1ee6 <__addsf3+0x24>
    1ee0:	26 f4       	brtc	.+8      	; 0x1eea <__addsf3+0x28>
    1ee2:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__fp_nan>
    1ee6:	0e f4       	brtc	.+2      	; 0x1eea <__addsf3+0x28>
    1ee8:	e0 95       	com	r30
    1eea:	e7 fb       	bst	r30, 7
    1eec:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__fp_inf>

00001ef0 <__addsf3x>:
    1ef0:	e9 2f       	mov	r30, r25
    1ef2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__fp_split3>
    1ef6:	58 f3       	brcs	.-42     	; 0x1ece <__addsf3+0xc>
    1ef8:	ba 17       	cp	r27, r26
    1efa:	62 07       	cpc	r22, r18
    1efc:	73 07       	cpc	r23, r19
    1efe:	84 07       	cpc	r24, r20
    1f00:	95 07       	cpc	r25, r21
    1f02:	20 f0       	brcs	.+8      	; 0x1f0c <__addsf3x+0x1c>
    1f04:	79 f4       	brne	.+30     	; 0x1f24 <__addsf3x+0x34>
    1f06:	a6 f5       	brtc	.+104    	; 0x1f70 <__addsf3x+0x80>
    1f08:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_zero>
    1f0c:	0e f4       	brtc	.+2      	; 0x1f10 <__addsf3x+0x20>
    1f0e:	e0 95       	com	r30
    1f10:	0b 2e       	mov	r0, r27
    1f12:	ba 2f       	mov	r27, r26
    1f14:	a0 2d       	mov	r26, r0
    1f16:	0b 01       	movw	r0, r22
    1f18:	b9 01       	movw	r22, r18
    1f1a:	90 01       	movw	r18, r0
    1f1c:	0c 01       	movw	r0, r24
    1f1e:	ca 01       	movw	r24, r20
    1f20:	a0 01       	movw	r20, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	ff 27       	eor	r31, r31
    1f26:	59 1b       	sub	r21, r25
    1f28:	99 f0       	breq	.+38     	; 0x1f50 <__addsf3x+0x60>
    1f2a:	59 3f       	cpi	r21, 0xF9	; 249
    1f2c:	50 f4       	brcc	.+20     	; 0x1f42 <__addsf3x+0x52>
    1f2e:	50 3e       	cpi	r21, 0xE0	; 224
    1f30:	68 f1       	brcs	.+90     	; 0x1f8c <__addsf3x+0x9c>
    1f32:	1a 16       	cp	r1, r26
    1f34:	f0 40       	sbci	r31, 0x00	; 0
    1f36:	a2 2f       	mov	r26, r18
    1f38:	23 2f       	mov	r18, r19
    1f3a:	34 2f       	mov	r19, r20
    1f3c:	44 27       	eor	r20, r20
    1f3e:	58 5f       	subi	r21, 0xF8	; 248
    1f40:	f3 cf       	rjmp	.-26     	; 0x1f28 <__addsf3x+0x38>
    1f42:	46 95       	lsr	r20
    1f44:	37 95       	ror	r19
    1f46:	27 95       	ror	r18
    1f48:	a7 95       	ror	r26
    1f4a:	f0 40       	sbci	r31, 0x00	; 0
    1f4c:	53 95       	inc	r21
    1f4e:	c9 f7       	brne	.-14     	; 0x1f42 <__addsf3x+0x52>
    1f50:	7e f4       	brtc	.+30     	; 0x1f70 <__addsf3x+0x80>
    1f52:	1f 16       	cp	r1, r31
    1f54:	ba 0b       	sbc	r27, r26
    1f56:	62 0b       	sbc	r22, r18
    1f58:	73 0b       	sbc	r23, r19
    1f5a:	84 0b       	sbc	r24, r20
    1f5c:	ba f0       	brmi	.+46     	; 0x1f8c <__addsf3x+0x9c>
    1f5e:	91 50       	subi	r25, 0x01	; 1
    1f60:	a1 f0       	breq	.+40     	; 0x1f8a <__addsf3x+0x9a>
    1f62:	ff 0f       	add	r31, r31
    1f64:	bb 1f       	adc	r27, r27
    1f66:	66 1f       	adc	r22, r22
    1f68:	77 1f       	adc	r23, r23
    1f6a:	88 1f       	adc	r24, r24
    1f6c:	c2 f7       	brpl	.-16     	; 0x1f5e <__addsf3x+0x6e>
    1f6e:	0e c0       	rjmp	.+28     	; 0x1f8c <__addsf3x+0x9c>
    1f70:	ba 0f       	add	r27, r26
    1f72:	62 1f       	adc	r22, r18
    1f74:	73 1f       	adc	r23, r19
    1f76:	84 1f       	adc	r24, r20
    1f78:	48 f4       	brcc	.+18     	; 0x1f8c <__addsf3x+0x9c>
    1f7a:	87 95       	ror	r24
    1f7c:	77 95       	ror	r23
    1f7e:	67 95       	ror	r22
    1f80:	b7 95       	ror	r27
    1f82:	f7 95       	ror	r31
    1f84:	9e 3f       	cpi	r25, 0xFE	; 254
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <__addsf3x+0x9a>
    1f88:	b0 cf       	rjmp	.-160    	; 0x1eea <__addsf3+0x28>
    1f8a:	93 95       	inc	r25
    1f8c:	88 0f       	add	r24, r24
    1f8e:	08 f0       	brcs	.+2      	; 0x1f92 <__addsf3x+0xa2>
    1f90:	99 27       	eor	r25, r25
    1f92:	ee 0f       	add	r30, r30
    1f94:	97 95       	ror	r25
    1f96:	87 95       	ror	r24
    1f98:	08 95       	ret

00001f9a <__divmodhi4>:
    1f9a:	97 fb       	bst	r25, 7
    1f9c:	07 2e       	mov	r0, r23
    1f9e:	16 f4       	brtc	.+4      	; 0x1fa4 <__divmodhi4+0xa>
    1fa0:	00 94       	com	r0
    1fa2:	07 d0       	rcall	.+14     	; 0x1fb2 <__divmodhi4_neg1>
    1fa4:	77 fd       	sbrc	r23, 7
    1fa6:	09 d0       	rcall	.+18     	; 0x1fba <__divmodhi4_neg2>
    1fa8:	0e 94 03 10 	call	0x2006	; 0x2006 <__udivmodhi4>
    1fac:	07 fc       	sbrc	r0, 7
    1fae:	05 d0       	rcall	.+10     	; 0x1fba <__divmodhi4_neg2>
    1fb0:	3e f4       	brtc	.+14     	; 0x1fc0 <__divmodhi4_exit>

00001fb2 <__divmodhi4_neg1>:
    1fb2:	90 95       	com	r25
    1fb4:	81 95       	neg	r24
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	08 95       	ret

00001fba <__divmodhi4_neg2>:
    1fba:	70 95       	com	r23
    1fbc:	61 95       	neg	r22
    1fbe:	7f 4f       	sbci	r23, 0xFF	; 255

00001fc0 <__divmodhi4_exit>:
    1fc0:	08 95       	ret

00001fc2 <__udivmodsi4>:
    1fc2:	a1 e2       	ldi	r26, 0x21	; 33
    1fc4:	1a 2e       	mov	r1, r26
    1fc6:	aa 1b       	sub	r26, r26
    1fc8:	bb 1b       	sub	r27, r27
    1fca:	fd 01       	movw	r30, r26
    1fcc:	0d c0       	rjmp	.+26     	; 0x1fe8 <__udivmodsi4_ep>

00001fce <__udivmodsi4_loop>:
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	ee 1f       	adc	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	a2 17       	cp	r26, r18
    1fd8:	b3 07       	cpc	r27, r19
    1fda:	e4 07       	cpc	r30, r20
    1fdc:	f5 07       	cpc	r31, r21
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <__udivmodsi4_ep>
    1fe0:	a2 1b       	sub	r26, r18
    1fe2:	b3 0b       	sbc	r27, r19
    1fe4:	e4 0b       	sbc	r30, r20
    1fe6:	f5 0b       	sbc	r31, r21

00001fe8 <__udivmodsi4_ep>:
    1fe8:	66 1f       	adc	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	1a 94       	dec	r1
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <__udivmodsi4_loop>
    1ff4:	60 95       	com	r22
    1ff6:	70 95       	com	r23
    1ff8:	80 95       	com	r24
    1ffa:	90 95       	com	r25
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	ac 01       	movw	r20, r24
    2000:	bd 01       	movw	r22, r26
    2002:	cf 01       	movw	r24, r30
    2004:	08 95       	ret

00002006 <__udivmodhi4>:
    2006:	aa 1b       	sub	r26, r26
    2008:	bb 1b       	sub	r27, r27
    200a:	51 e1       	ldi	r21, 0x11	; 17
    200c:	07 c0       	rjmp	.+14     	; 0x201c <__udivmodhi4_ep>

0000200e <__udivmodhi4_loop>:
    200e:	aa 1f       	adc	r26, r26
    2010:	bb 1f       	adc	r27, r27
    2012:	a6 17       	cp	r26, r22
    2014:	b7 07       	cpc	r27, r23
    2016:	10 f0       	brcs	.+4      	; 0x201c <__udivmodhi4_ep>
    2018:	a6 1b       	sub	r26, r22
    201a:	b7 0b       	sbc	r27, r23

0000201c <__udivmodhi4_ep>:
    201c:	88 1f       	adc	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	5a 95       	dec	r21
    2022:	a9 f7       	brne	.-22     	; 0x200e <__udivmodhi4_loop>
    2024:	80 95       	com	r24
    2026:	90 95       	com	r25
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	08 95       	ret

0000202e <__itoa_ncheck>:
    202e:	bb 27       	eor	r27, r27
    2030:	4a 30       	cpi	r20, 0x0A	; 10
    2032:	31 f4       	brne	.+12     	; 0x2040 <__itoa_ncheck+0x12>
    2034:	99 23       	and	r25, r25
    2036:	22 f4       	brpl	.+8      	; 0x2040 <__itoa_ncheck+0x12>
    2038:	bd e2       	ldi	r27, 0x2D	; 45
    203a:	90 95       	com	r25
    203c:	81 95       	neg	r24
    203e:	9f 4f       	sbci	r25, 0xFF	; 255
    2040:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__utoa_common>

00002044 <__utoa_ncheck>:
    2044:	bb 27       	eor	r27, r27

00002046 <__utoa_common>:
    2046:	fb 01       	movw	r30, r22
    2048:	55 27       	eor	r21, r21
    204a:	aa 27       	eor	r26, r26
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	aa 1f       	adc	r26, r26
    2052:	a4 17       	cp	r26, r20
    2054:	10 f0       	brcs	.+4      	; 0x205a <__utoa_common+0x14>
    2056:	a4 1b       	sub	r26, r20
    2058:	83 95       	inc	r24
    205a:	50 51       	subi	r21, 0x10	; 16
    205c:	b9 f7       	brne	.-18     	; 0x204c <__utoa_common+0x6>
    205e:	a0 5d       	subi	r26, 0xD0	; 208
    2060:	aa 33       	cpi	r26, 0x3A	; 58
    2062:	08 f0       	brcs	.+2      	; 0x2066 <__utoa_common+0x20>
    2064:	a9 5d       	subi	r26, 0xD9	; 217
    2066:	a1 93       	st	Z+, r26
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	79 f7       	brne	.-34     	; 0x204a <__utoa_common+0x4>
    206c:	b1 11       	cpse	r27, r1
    206e:	b1 93       	st	Z+, r27
    2070:	11 92       	st	Z+, r1
    2072:	cb 01       	movw	r24, r22
    2074:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <strrev>

00002078 <fdevopen>:
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	31 f4       	brne	.+12     	; 0x2090 <fdevopen+0x18>
    2084:	61 15       	cp	r22, r1
    2086:	71 05       	cpc	r23, r1
    2088:	19 f4       	brne	.+6      	; 0x2090 <fdevopen+0x18>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	3a c0       	rjmp	.+116    	; 0x2104 <fdevopen+0x8c>
    2090:	8b 01       	movw	r16, r22
    2092:	ec 01       	movw	r28, r24
    2094:	6e e0       	ldi	r22, 0x0E	; 14
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <calloc>
    20a0:	fc 01       	movw	r30, r24
    20a2:	89 2b       	or	r24, r25
    20a4:	91 f3       	breq	.-28     	; 0x208a <fdevopen+0x12>
    20a6:	80 e8       	ldi	r24, 0x80	; 128
    20a8:	83 83       	std	Z+3, r24	; 0x03
    20aa:	01 15       	cp	r16, r1
    20ac:	11 05       	cpc	r17, r1
    20ae:	71 f0       	breq	.+28     	; 0x20cc <fdevopen+0x54>
    20b0:	13 87       	std	Z+11, r17	; 0x0b
    20b2:	02 87       	std	Z+10, r16	; 0x0a
    20b4:	81 e8       	ldi	r24, 0x81	; 129
    20b6:	83 83       	std	Z+3, r24	; 0x03
    20b8:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__iob>
    20bc:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <__iob+0x1>
    20c0:	89 2b       	or	r24, r25
    20c2:	21 f4       	brne	.+8      	; 0x20cc <fdevopen+0x54>
    20c4:	f0 93 56 04 	sts	0x0456, r31	; 0x800456 <__iob+0x1>
    20c8:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <__iob>
    20cc:	20 97       	sbiw	r28, 0x00	; 0
    20ce:	c9 f0       	breq	.+50     	; 0x2102 <fdevopen+0x8a>
    20d0:	d1 87       	std	Z+9, r29	; 0x09
    20d2:	c0 87       	std	Z+8, r28	; 0x08
    20d4:	83 81       	ldd	r24, Z+3	; 0x03
    20d6:	82 60       	ori	r24, 0x02	; 2
    20d8:	83 83       	std	Z+3, r24	; 0x03
    20da:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <__iob+0x2>
    20de:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <__iob+0x3>
    20e2:	89 2b       	or	r24, r25
    20e4:	71 f4       	brne	.+28     	; 0x2102 <fdevopen+0x8a>
    20e6:	f0 93 58 04 	sts	0x0458, r31	; 0x800458 <__iob+0x3>
    20ea:	e0 93 57 04 	sts	0x0457, r30	; 0x800457 <__iob+0x2>
    20ee:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <__iob+0x4>
    20f2:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <__iob+0x5>
    20f6:	89 2b       	or	r24, r25
    20f8:	21 f4       	brne	.+8      	; 0x2102 <fdevopen+0x8a>
    20fa:	f0 93 5a 04 	sts	0x045A, r31	; 0x80045a <__iob+0x5>
    20fe:	e0 93 59 04 	sts	0x0459, r30	; 0x800459 <__iob+0x4>
    2102:	cf 01       	movw	r24, r30
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	08 95       	ret

0000210e <printf>:
    210e:	a0 e0       	ldi	r26, 0x00	; 0
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ed e8       	ldi	r30, 0x8D	; 141
    2114:	f0 e1       	ldi	r31, 0x10	; 16
    2116:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__prologue_saves__+0x20>
    211a:	ae 01       	movw	r20, r28
    211c:	4b 5f       	subi	r20, 0xFB	; 251
    211e:	5f 4f       	sbci	r21, 0xFF	; 255
    2120:	fa 01       	movw	r30, r20
    2122:	61 91       	ld	r22, Z+
    2124:	71 91       	ld	r23, Z+
    2126:	af 01       	movw	r20, r30
    2128:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <__iob+0x2>
    212c:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <__iob+0x3>
    2130:	0e 94 9d 10 	call	0x213a	; 0x213a <vfprintf>
    2134:	e2 e0       	ldi	r30, 0x02	; 2
    2136:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__epilogue_restores__+0x20>

0000213a <vfprintf>:
    213a:	ab e0       	ldi	r26, 0x0B	; 11
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e3 ea       	ldi	r30, 0xA3	; 163
    2140:	f0 e1       	ldi	r31, 0x10	; 16
    2142:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__>
    2146:	6c 01       	movw	r12, r24
    2148:	7b 01       	movw	r14, r22
    214a:	8a 01       	movw	r16, r20
    214c:	fc 01       	movw	r30, r24
    214e:	17 82       	std	Z+7, r1	; 0x07
    2150:	16 82       	std	Z+6, r1	; 0x06
    2152:	83 81       	ldd	r24, Z+3	; 0x03
    2154:	81 ff       	sbrs	r24, 1
    2156:	cc c1       	rjmp	.+920    	; 0x24f0 <vfprintf+0x3b6>
    2158:	ce 01       	movw	r24, r28
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	3c 01       	movw	r6, r24
    215e:	f6 01       	movw	r30, r12
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	f7 01       	movw	r30, r14
    2164:	93 fd       	sbrc	r25, 3
    2166:	85 91       	lpm	r24, Z+
    2168:	93 ff       	sbrs	r25, 3
    216a:	81 91       	ld	r24, Z+
    216c:	7f 01       	movw	r14, r30
    216e:	88 23       	and	r24, r24
    2170:	09 f4       	brne	.+2      	; 0x2174 <vfprintf+0x3a>
    2172:	ba c1       	rjmp	.+884    	; 0x24e8 <vfprintf+0x3ae>
    2174:	85 32       	cpi	r24, 0x25	; 37
    2176:	39 f4       	brne	.+14     	; 0x2186 <vfprintf+0x4c>
    2178:	93 fd       	sbrc	r25, 3
    217a:	85 91       	lpm	r24, Z+
    217c:	93 ff       	sbrs	r25, 3
    217e:	81 91       	ld	r24, Z+
    2180:	7f 01       	movw	r14, r30
    2182:	85 32       	cpi	r24, 0x25	; 37
    2184:	29 f4       	brne	.+10     	; 0x2190 <vfprintf+0x56>
    2186:	b6 01       	movw	r22, r12
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    218e:	e7 cf       	rjmp	.-50     	; 0x215e <vfprintf+0x24>
    2190:	91 2c       	mov	r9, r1
    2192:	21 2c       	mov	r2, r1
    2194:	31 2c       	mov	r3, r1
    2196:	ff e1       	ldi	r31, 0x1F	; 31
    2198:	f3 15       	cp	r31, r3
    219a:	d8 f0       	brcs	.+54     	; 0x21d2 <vfprintf+0x98>
    219c:	8b 32       	cpi	r24, 0x2B	; 43
    219e:	79 f0       	breq	.+30     	; 0x21be <vfprintf+0x84>
    21a0:	38 f4       	brcc	.+14     	; 0x21b0 <vfprintf+0x76>
    21a2:	80 32       	cpi	r24, 0x20	; 32
    21a4:	79 f0       	breq	.+30     	; 0x21c4 <vfprintf+0x8a>
    21a6:	83 32       	cpi	r24, 0x23	; 35
    21a8:	a1 f4       	brne	.+40     	; 0x21d2 <vfprintf+0x98>
    21aa:	23 2d       	mov	r18, r3
    21ac:	20 61       	ori	r18, 0x10	; 16
    21ae:	1d c0       	rjmp	.+58     	; 0x21ea <vfprintf+0xb0>
    21b0:	8d 32       	cpi	r24, 0x2D	; 45
    21b2:	61 f0       	breq	.+24     	; 0x21cc <vfprintf+0x92>
    21b4:	80 33       	cpi	r24, 0x30	; 48
    21b6:	69 f4       	brne	.+26     	; 0x21d2 <vfprintf+0x98>
    21b8:	23 2d       	mov	r18, r3
    21ba:	21 60       	ori	r18, 0x01	; 1
    21bc:	16 c0       	rjmp	.+44     	; 0x21ea <vfprintf+0xb0>
    21be:	83 2d       	mov	r24, r3
    21c0:	82 60       	ori	r24, 0x02	; 2
    21c2:	38 2e       	mov	r3, r24
    21c4:	e3 2d       	mov	r30, r3
    21c6:	e4 60       	ori	r30, 0x04	; 4
    21c8:	3e 2e       	mov	r3, r30
    21ca:	2a c0       	rjmp	.+84     	; 0x2220 <vfprintf+0xe6>
    21cc:	f3 2d       	mov	r31, r3
    21ce:	f8 60       	ori	r31, 0x08	; 8
    21d0:	1d c0       	rjmp	.+58     	; 0x220c <vfprintf+0xd2>
    21d2:	37 fc       	sbrc	r3, 7
    21d4:	2d c0       	rjmp	.+90     	; 0x2230 <vfprintf+0xf6>
    21d6:	20 ed       	ldi	r18, 0xD0	; 208
    21d8:	28 0f       	add	r18, r24
    21da:	2a 30       	cpi	r18, 0x0A	; 10
    21dc:	40 f0       	brcs	.+16     	; 0x21ee <vfprintf+0xb4>
    21de:	8e 32       	cpi	r24, 0x2E	; 46
    21e0:	b9 f4       	brne	.+46     	; 0x2210 <vfprintf+0xd6>
    21e2:	36 fc       	sbrc	r3, 6
    21e4:	81 c1       	rjmp	.+770    	; 0x24e8 <vfprintf+0x3ae>
    21e6:	23 2d       	mov	r18, r3
    21e8:	20 64       	ori	r18, 0x40	; 64
    21ea:	32 2e       	mov	r3, r18
    21ec:	19 c0       	rjmp	.+50     	; 0x2220 <vfprintf+0xe6>
    21ee:	36 fe       	sbrs	r3, 6
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <vfprintf+0xc4>
    21f2:	8a e0       	ldi	r24, 0x0A	; 10
    21f4:	98 9e       	mul	r9, r24
    21f6:	20 0d       	add	r18, r0
    21f8:	11 24       	eor	r1, r1
    21fa:	92 2e       	mov	r9, r18
    21fc:	11 c0       	rjmp	.+34     	; 0x2220 <vfprintf+0xe6>
    21fe:	ea e0       	ldi	r30, 0x0A	; 10
    2200:	2e 9e       	mul	r2, r30
    2202:	20 0d       	add	r18, r0
    2204:	11 24       	eor	r1, r1
    2206:	22 2e       	mov	r2, r18
    2208:	f3 2d       	mov	r31, r3
    220a:	f0 62       	ori	r31, 0x20	; 32
    220c:	3f 2e       	mov	r3, r31
    220e:	08 c0       	rjmp	.+16     	; 0x2220 <vfprintf+0xe6>
    2210:	8c 36       	cpi	r24, 0x6C	; 108
    2212:	21 f4       	brne	.+8      	; 0x221c <vfprintf+0xe2>
    2214:	83 2d       	mov	r24, r3
    2216:	80 68       	ori	r24, 0x80	; 128
    2218:	38 2e       	mov	r3, r24
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <vfprintf+0xe6>
    221c:	88 36       	cpi	r24, 0x68	; 104
    221e:	41 f4       	brne	.+16     	; 0x2230 <vfprintf+0xf6>
    2220:	f7 01       	movw	r30, r14
    2222:	93 fd       	sbrc	r25, 3
    2224:	85 91       	lpm	r24, Z+
    2226:	93 ff       	sbrs	r25, 3
    2228:	81 91       	ld	r24, Z+
    222a:	7f 01       	movw	r14, r30
    222c:	81 11       	cpse	r24, r1
    222e:	b3 cf       	rjmp	.-154    	; 0x2196 <vfprintf+0x5c>
    2230:	98 2f       	mov	r25, r24
    2232:	9f 7d       	andi	r25, 0xDF	; 223
    2234:	95 54       	subi	r25, 0x45	; 69
    2236:	93 30       	cpi	r25, 0x03	; 3
    2238:	28 f4       	brcc	.+10     	; 0x2244 <vfprintf+0x10a>
    223a:	0c 5f       	subi	r16, 0xFC	; 252
    223c:	1f 4f       	sbci	r17, 0xFF	; 255
    223e:	9f e3       	ldi	r25, 0x3F	; 63
    2240:	99 83       	std	Y+1, r25	; 0x01
    2242:	0d c0       	rjmp	.+26     	; 0x225e <vfprintf+0x124>
    2244:	83 36       	cpi	r24, 0x63	; 99
    2246:	31 f0       	breq	.+12     	; 0x2254 <vfprintf+0x11a>
    2248:	83 37       	cpi	r24, 0x73	; 115
    224a:	71 f0       	breq	.+28     	; 0x2268 <vfprintf+0x12e>
    224c:	83 35       	cpi	r24, 0x53	; 83
    224e:	09 f0       	breq	.+2      	; 0x2252 <vfprintf+0x118>
    2250:	59 c0       	rjmp	.+178    	; 0x2304 <vfprintf+0x1ca>
    2252:	21 c0       	rjmp	.+66     	; 0x2296 <vfprintf+0x15c>
    2254:	f8 01       	movw	r30, r16
    2256:	80 81       	ld	r24, Z
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	0e 5f       	subi	r16, 0xFE	; 254
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	88 24       	eor	r8, r8
    2260:	83 94       	inc	r8
    2262:	91 2c       	mov	r9, r1
    2264:	53 01       	movw	r10, r6
    2266:	13 c0       	rjmp	.+38     	; 0x228e <vfprintf+0x154>
    2268:	28 01       	movw	r4, r16
    226a:	f2 e0       	ldi	r31, 0x02	; 2
    226c:	4f 0e       	add	r4, r31
    226e:	51 1c       	adc	r5, r1
    2270:	f8 01       	movw	r30, r16
    2272:	a0 80       	ld	r10, Z
    2274:	b1 80       	ldd	r11, Z+1	; 0x01
    2276:	36 fe       	sbrs	r3, 6
    2278:	03 c0       	rjmp	.+6      	; 0x2280 <vfprintf+0x146>
    227a:	69 2d       	mov	r22, r9
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <vfprintf+0x14a>
    2280:	6f ef       	ldi	r22, 0xFF	; 255
    2282:	7f ef       	ldi	r23, 0xFF	; 255
    2284:	c5 01       	movw	r24, r10
    2286:	0e 94 cd 13 	call	0x279a	; 0x279a <strnlen>
    228a:	4c 01       	movw	r8, r24
    228c:	82 01       	movw	r16, r4
    228e:	f3 2d       	mov	r31, r3
    2290:	ff 77       	andi	r31, 0x7F	; 127
    2292:	3f 2e       	mov	r3, r31
    2294:	16 c0       	rjmp	.+44     	; 0x22c2 <vfprintf+0x188>
    2296:	28 01       	movw	r4, r16
    2298:	22 e0       	ldi	r18, 0x02	; 2
    229a:	42 0e       	add	r4, r18
    229c:	51 1c       	adc	r5, r1
    229e:	f8 01       	movw	r30, r16
    22a0:	a0 80       	ld	r10, Z
    22a2:	b1 80       	ldd	r11, Z+1	; 0x01
    22a4:	36 fe       	sbrs	r3, 6
    22a6:	03 c0       	rjmp	.+6      	; 0x22ae <vfprintf+0x174>
    22a8:	69 2d       	mov	r22, r9
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <vfprintf+0x178>
    22ae:	6f ef       	ldi	r22, 0xFF	; 255
    22b0:	7f ef       	ldi	r23, 0xFF	; 255
    22b2:	c5 01       	movw	r24, r10
    22b4:	0e 94 bb 13 	call	0x2776	; 0x2776 <strnlen_P>
    22b8:	4c 01       	movw	r8, r24
    22ba:	f3 2d       	mov	r31, r3
    22bc:	f0 68       	ori	r31, 0x80	; 128
    22be:	3f 2e       	mov	r3, r31
    22c0:	82 01       	movw	r16, r4
    22c2:	33 fc       	sbrc	r3, 3
    22c4:	1b c0       	rjmp	.+54     	; 0x22fc <vfprintf+0x1c2>
    22c6:	82 2d       	mov	r24, r2
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	88 16       	cp	r8, r24
    22cc:	99 06       	cpc	r9, r25
    22ce:	b0 f4       	brcc	.+44     	; 0x22fc <vfprintf+0x1c2>
    22d0:	b6 01       	movw	r22, r12
    22d2:	80 e2       	ldi	r24, 0x20	; 32
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    22da:	2a 94       	dec	r2
    22dc:	f4 cf       	rjmp	.-24     	; 0x22c6 <vfprintf+0x18c>
    22de:	f5 01       	movw	r30, r10
    22e0:	37 fc       	sbrc	r3, 7
    22e2:	85 91       	lpm	r24, Z+
    22e4:	37 fe       	sbrs	r3, 7
    22e6:	81 91       	ld	r24, Z+
    22e8:	5f 01       	movw	r10, r30
    22ea:	b6 01       	movw	r22, r12
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    22f2:	21 10       	cpse	r2, r1
    22f4:	2a 94       	dec	r2
    22f6:	21 e0       	ldi	r18, 0x01	; 1
    22f8:	82 1a       	sub	r8, r18
    22fa:	91 08       	sbc	r9, r1
    22fc:	81 14       	cp	r8, r1
    22fe:	91 04       	cpc	r9, r1
    2300:	71 f7       	brne	.-36     	; 0x22de <vfprintf+0x1a4>
    2302:	e8 c0       	rjmp	.+464    	; 0x24d4 <vfprintf+0x39a>
    2304:	84 36       	cpi	r24, 0x64	; 100
    2306:	11 f0       	breq	.+4      	; 0x230c <vfprintf+0x1d2>
    2308:	89 36       	cpi	r24, 0x69	; 105
    230a:	41 f5       	brne	.+80     	; 0x235c <vfprintf+0x222>
    230c:	f8 01       	movw	r30, r16
    230e:	37 fe       	sbrs	r3, 7
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <vfprintf+0x1e6>
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	0c 5f       	subi	r16, 0xFC	; 252
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	08 c0       	rjmp	.+16     	; 0x2330 <vfprintf+0x1f6>
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	07 2e       	mov	r0, r23
    2326:	00 0c       	add	r0, r0
    2328:	88 0b       	sbc	r24, r24
    232a:	99 0b       	sbc	r25, r25
    232c:	0e 5f       	subi	r16, 0xFE	; 254
    232e:	1f 4f       	sbci	r17, 0xFF	; 255
    2330:	f3 2d       	mov	r31, r3
    2332:	ff 76       	andi	r31, 0x6F	; 111
    2334:	3f 2e       	mov	r3, r31
    2336:	97 ff       	sbrs	r25, 7
    2338:	09 c0       	rjmp	.+18     	; 0x234c <vfprintf+0x212>
    233a:	90 95       	com	r25
    233c:	80 95       	com	r24
    233e:	70 95       	com	r23
    2340:	61 95       	neg	r22
    2342:	7f 4f       	sbci	r23, 0xFF	; 255
    2344:	8f 4f       	sbci	r24, 0xFF	; 255
    2346:	9f 4f       	sbci	r25, 0xFF	; 255
    2348:	f0 68       	ori	r31, 0x80	; 128
    234a:	3f 2e       	mov	r3, r31
    234c:	2a e0       	ldi	r18, 0x0A	; 10
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	a3 01       	movw	r20, r6
    2352:	0e 94 24 14 	call	0x2848	; 0x2848 <__ultoa_invert>
    2356:	88 2e       	mov	r8, r24
    2358:	86 18       	sub	r8, r6
    235a:	45 c0       	rjmp	.+138    	; 0x23e6 <vfprintf+0x2ac>
    235c:	85 37       	cpi	r24, 0x75	; 117
    235e:	31 f4       	brne	.+12     	; 0x236c <vfprintf+0x232>
    2360:	23 2d       	mov	r18, r3
    2362:	2f 7e       	andi	r18, 0xEF	; 239
    2364:	b2 2e       	mov	r11, r18
    2366:	2a e0       	ldi	r18, 0x0A	; 10
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	25 c0       	rjmp	.+74     	; 0x23b6 <vfprintf+0x27c>
    236c:	93 2d       	mov	r25, r3
    236e:	99 7f       	andi	r25, 0xF9	; 249
    2370:	b9 2e       	mov	r11, r25
    2372:	8f 36       	cpi	r24, 0x6F	; 111
    2374:	c1 f0       	breq	.+48     	; 0x23a6 <vfprintf+0x26c>
    2376:	18 f4       	brcc	.+6      	; 0x237e <vfprintf+0x244>
    2378:	88 35       	cpi	r24, 0x58	; 88
    237a:	79 f0       	breq	.+30     	; 0x239a <vfprintf+0x260>
    237c:	b5 c0       	rjmp	.+362    	; 0x24e8 <vfprintf+0x3ae>
    237e:	80 37       	cpi	r24, 0x70	; 112
    2380:	19 f0       	breq	.+6      	; 0x2388 <vfprintf+0x24e>
    2382:	88 37       	cpi	r24, 0x78	; 120
    2384:	21 f0       	breq	.+8      	; 0x238e <vfprintf+0x254>
    2386:	b0 c0       	rjmp	.+352    	; 0x24e8 <vfprintf+0x3ae>
    2388:	e9 2f       	mov	r30, r25
    238a:	e0 61       	ori	r30, 0x10	; 16
    238c:	be 2e       	mov	r11, r30
    238e:	b4 fe       	sbrs	r11, 4
    2390:	0d c0       	rjmp	.+26     	; 0x23ac <vfprintf+0x272>
    2392:	fb 2d       	mov	r31, r11
    2394:	f4 60       	ori	r31, 0x04	; 4
    2396:	bf 2e       	mov	r11, r31
    2398:	09 c0       	rjmp	.+18     	; 0x23ac <vfprintf+0x272>
    239a:	34 fe       	sbrs	r3, 4
    239c:	0a c0       	rjmp	.+20     	; 0x23b2 <vfprintf+0x278>
    239e:	29 2f       	mov	r18, r25
    23a0:	26 60       	ori	r18, 0x06	; 6
    23a2:	b2 2e       	mov	r11, r18
    23a4:	06 c0       	rjmp	.+12     	; 0x23b2 <vfprintf+0x278>
    23a6:	28 e0       	ldi	r18, 0x08	; 8
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	05 c0       	rjmp	.+10     	; 0x23b6 <vfprintf+0x27c>
    23ac:	20 e1       	ldi	r18, 0x10	; 16
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <vfprintf+0x27c>
    23b2:	20 e1       	ldi	r18, 0x10	; 16
    23b4:	32 e0       	ldi	r19, 0x02	; 2
    23b6:	f8 01       	movw	r30, r16
    23b8:	b7 fe       	sbrs	r11, 7
    23ba:	07 c0       	rjmp	.+14     	; 0x23ca <vfprintf+0x290>
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	0c 5f       	subi	r16, 0xFC	; 252
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	06 c0       	rjmp	.+12     	; 0x23d6 <vfprintf+0x29c>
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 5f       	subi	r16, 0xFE	; 254
    23d4:	1f 4f       	sbci	r17, 0xFF	; 255
    23d6:	a3 01       	movw	r20, r6
    23d8:	0e 94 24 14 	call	0x2848	; 0x2848 <__ultoa_invert>
    23dc:	88 2e       	mov	r8, r24
    23de:	86 18       	sub	r8, r6
    23e0:	fb 2d       	mov	r31, r11
    23e2:	ff 77       	andi	r31, 0x7F	; 127
    23e4:	3f 2e       	mov	r3, r31
    23e6:	36 fe       	sbrs	r3, 6
    23e8:	0d c0       	rjmp	.+26     	; 0x2404 <vfprintf+0x2ca>
    23ea:	23 2d       	mov	r18, r3
    23ec:	2e 7f       	andi	r18, 0xFE	; 254
    23ee:	a2 2e       	mov	r10, r18
    23f0:	89 14       	cp	r8, r9
    23f2:	58 f4       	brcc	.+22     	; 0x240a <vfprintf+0x2d0>
    23f4:	34 fe       	sbrs	r3, 4
    23f6:	0b c0       	rjmp	.+22     	; 0x240e <vfprintf+0x2d4>
    23f8:	32 fc       	sbrc	r3, 2
    23fa:	09 c0       	rjmp	.+18     	; 0x240e <vfprintf+0x2d4>
    23fc:	83 2d       	mov	r24, r3
    23fe:	8e 7e       	andi	r24, 0xEE	; 238
    2400:	a8 2e       	mov	r10, r24
    2402:	05 c0       	rjmp	.+10     	; 0x240e <vfprintf+0x2d4>
    2404:	b8 2c       	mov	r11, r8
    2406:	a3 2c       	mov	r10, r3
    2408:	03 c0       	rjmp	.+6      	; 0x2410 <vfprintf+0x2d6>
    240a:	b8 2c       	mov	r11, r8
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <vfprintf+0x2d6>
    240e:	b9 2c       	mov	r11, r9
    2410:	a4 fe       	sbrs	r10, 4
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <vfprintf+0x2f8>
    2414:	fe 01       	movw	r30, r28
    2416:	e8 0d       	add	r30, r8
    2418:	f1 1d       	adc	r31, r1
    241a:	80 81       	ld	r24, Z
    241c:	80 33       	cpi	r24, 0x30	; 48
    241e:	21 f4       	brne	.+8      	; 0x2428 <vfprintf+0x2ee>
    2420:	9a 2d       	mov	r25, r10
    2422:	99 7e       	andi	r25, 0xE9	; 233
    2424:	a9 2e       	mov	r10, r25
    2426:	09 c0       	rjmp	.+18     	; 0x243a <vfprintf+0x300>
    2428:	a2 fe       	sbrs	r10, 2
    242a:	06 c0       	rjmp	.+12     	; 0x2438 <vfprintf+0x2fe>
    242c:	b3 94       	inc	r11
    242e:	b3 94       	inc	r11
    2430:	04 c0       	rjmp	.+8      	; 0x243a <vfprintf+0x300>
    2432:	8a 2d       	mov	r24, r10
    2434:	86 78       	andi	r24, 0x86	; 134
    2436:	09 f0       	breq	.+2      	; 0x243a <vfprintf+0x300>
    2438:	b3 94       	inc	r11
    243a:	a3 fc       	sbrc	r10, 3
    243c:	11 c0       	rjmp	.+34     	; 0x2460 <vfprintf+0x326>
    243e:	a0 fe       	sbrs	r10, 0
    2440:	06 c0       	rjmp	.+12     	; 0x244e <vfprintf+0x314>
    2442:	b2 14       	cp	r11, r2
    2444:	88 f4       	brcc	.+34     	; 0x2468 <vfprintf+0x32e>
    2446:	28 0c       	add	r2, r8
    2448:	92 2c       	mov	r9, r2
    244a:	9b 18       	sub	r9, r11
    244c:	0e c0       	rjmp	.+28     	; 0x246a <vfprintf+0x330>
    244e:	b2 14       	cp	r11, r2
    2450:	60 f4       	brcc	.+24     	; 0x246a <vfprintf+0x330>
    2452:	b6 01       	movw	r22, r12
    2454:	80 e2       	ldi	r24, 0x20	; 32
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    245c:	b3 94       	inc	r11
    245e:	f7 cf       	rjmp	.-18     	; 0x244e <vfprintf+0x314>
    2460:	b2 14       	cp	r11, r2
    2462:	18 f4       	brcc	.+6      	; 0x246a <vfprintf+0x330>
    2464:	2b 18       	sub	r2, r11
    2466:	02 c0       	rjmp	.+4      	; 0x246c <vfprintf+0x332>
    2468:	98 2c       	mov	r9, r8
    246a:	21 2c       	mov	r2, r1
    246c:	a4 fe       	sbrs	r10, 4
    246e:	10 c0       	rjmp	.+32     	; 0x2490 <vfprintf+0x356>
    2470:	b6 01       	movw	r22, r12
    2472:	80 e3       	ldi	r24, 0x30	; 48
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    247a:	a2 fe       	sbrs	r10, 2
    247c:	17 c0       	rjmp	.+46     	; 0x24ac <vfprintf+0x372>
    247e:	a1 fc       	sbrc	r10, 1
    2480:	03 c0       	rjmp	.+6      	; 0x2488 <vfprintf+0x34e>
    2482:	88 e7       	ldi	r24, 0x78	; 120
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	02 c0       	rjmp	.+4      	; 0x248c <vfprintf+0x352>
    2488:	88 e5       	ldi	r24, 0x58	; 88
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	b6 01       	movw	r22, r12
    248e:	0c c0       	rjmp	.+24     	; 0x24a8 <vfprintf+0x36e>
    2490:	8a 2d       	mov	r24, r10
    2492:	86 78       	andi	r24, 0x86	; 134
    2494:	59 f0       	breq	.+22     	; 0x24ac <vfprintf+0x372>
    2496:	a1 fe       	sbrs	r10, 1
    2498:	02 c0       	rjmp	.+4      	; 0x249e <vfprintf+0x364>
    249a:	8b e2       	ldi	r24, 0x2B	; 43
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <vfprintf+0x366>
    249e:	80 e2       	ldi	r24, 0x20	; 32
    24a0:	a7 fc       	sbrc	r10, 7
    24a2:	8d e2       	ldi	r24, 0x2D	; 45
    24a4:	b6 01       	movw	r22, r12
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    24ac:	89 14       	cp	r8, r9
    24ae:	38 f4       	brcc	.+14     	; 0x24be <vfprintf+0x384>
    24b0:	b6 01       	movw	r22, r12
    24b2:	80 e3       	ldi	r24, 0x30	; 48
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    24ba:	9a 94       	dec	r9
    24bc:	f7 cf       	rjmp	.-18     	; 0x24ac <vfprintf+0x372>
    24be:	8a 94       	dec	r8
    24c0:	f3 01       	movw	r30, r6
    24c2:	e8 0d       	add	r30, r8
    24c4:	f1 1d       	adc	r31, r1
    24c6:	80 81       	ld	r24, Z
    24c8:	b6 01       	movw	r22, r12
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    24d0:	81 10       	cpse	r8, r1
    24d2:	f5 cf       	rjmp	.-22     	; 0x24be <vfprintf+0x384>
    24d4:	22 20       	and	r2, r2
    24d6:	09 f4       	brne	.+2      	; 0x24da <vfprintf+0x3a0>
    24d8:	42 ce       	rjmp	.-892    	; 0x215e <vfprintf+0x24>
    24da:	b6 01       	movw	r22, r12
    24dc:	80 e2       	ldi	r24, 0x20	; 32
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    24e4:	2a 94       	dec	r2
    24e6:	f6 cf       	rjmp	.-20     	; 0x24d4 <vfprintf+0x39a>
    24e8:	f6 01       	movw	r30, r12
    24ea:	86 81       	ldd	r24, Z+6	; 0x06
    24ec:	97 81       	ldd	r25, Z+7	; 0x07
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <vfprintf+0x3ba>
    24f0:	8f ef       	ldi	r24, 0xFF	; 255
    24f2:	9f ef       	ldi	r25, 0xFF	; 255
    24f4:	2b 96       	adiw	r28, 0x0b	; 11
    24f6:	e2 e1       	ldi	r30, 0x12	; 18
    24f8:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__>

000024fc <calloc>:
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	86 9f       	mul	r24, r22
    2506:	80 01       	movw	r16, r0
    2508:	87 9f       	mul	r24, r23
    250a:	10 0d       	add	r17, r0
    250c:	96 9f       	mul	r25, r22
    250e:	10 0d       	add	r17, r0
    2510:	11 24       	eor	r1, r1
    2512:	c8 01       	movw	r24, r16
    2514:	0e 94 9a 12 	call	0x2534	; 0x2534 <malloc>
    2518:	ec 01       	movw	r28, r24
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	29 f0       	breq	.+10     	; 0x2528 <calloc+0x2c>
    251e:	a8 01       	movw	r20, r16
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	0e 94 c6 13 	call	0x278c	; 0x278c <memset>
    2528:	ce 01       	movw	r24, r28
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret

00002534 <malloc>:
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
    253c:	82 30       	cpi	r24, 0x02	; 2
    253e:	91 05       	cpc	r25, r1
    2540:	10 f4       	brcc	.+4      	; 0x2546 <malloc+0x12>
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <__flp>
    254a:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <__flp+0x1>
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	a0 e0       	ldi	r26, 0x00	; 0
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	30 97       	sbiw	r30, 0x00	; 0
    2558:	19 f1       	breq	.+70     	; 0x25a0 <malloc+0x6c>
    255a:	40 81       	ld	r20, Z
    255c:	51 81       	ldd	r21, Z+1	; 0x01
    255e:	02 81       	ldd	r16, Z+2	; 0x02
    2560:	13 81       	ldd	r17, Z+3	; 0x03
    2562:	48 17       	cp	r20, r24
    2564:	59 07       	cpc	r21, r25
    2566:	c8 f0       	brcs	.+50     	; 0x259a <malloc+0x66>
    2568:	84 17       	cp	r24, r20
    256a:	95 07       	cpc	r25, r21
    256c:	69 f4       	brne	.+26     	; 0x2588 <malloc+0x54>
    256e:	10 97       	sbiw	r26, 0x00	; 0
    2570:	31 f0       	breq	.+12     	; 0x257e <malloc+0x4a>
    2572:	12 96       	adiw	r26, 0x02	; 2
    2574:	0c 93       	st	X, r16
    2576:	12 97       	sbiw	r26, 0x02	; 2
    2578:	13 96       	adiw	r26, 0x03	; 3
    257a:	1c 93       	st	X, r17
    257c:	27 c0       	rjmp	.+78     	; 0x25cc <malloc+0x98>
    257e:	00 93 5d 04 	sts	0x045D, r16	; 0x80045d <__flp>
    2582:	10 93 5e 04 	sts	0x045E, r17	; 0x80045e <__flp+0x1>
    2586:	22 c0       	rjmp	.+68     	; 0x25cc <malloc+0x98>
    2588:	21 15       	cp	r18, r1
    258a:	31 05       	cpc	r19, r1
    258c:	19 f0       	breq	.+6      	; 0x2594 <malloc+0x60>
    258e:	42 17       	cp	r20, r18
    2590:	53 07       	cpc	r21, r19
    2592:	18 f4       	brcc	.+6      	; 0x259a <malloc+0x66>
    2594:	9a 01       	movw	r18, r20
    2596:	bd 01       	movw	r22, r26
    2598:	ef 01       	movw	r28, r30
    259a:	df 01       	movw	r26, r30
    259c:	f8 01       	movw	r30, r16
    259e:	db cf       	rjmp	.-74     	; 0x2556 <malloc+0x22>
    25a0:	21 15       	cp	r18, r1
    25a2:	31 05       	cpc	r19, r1
    25a4:	f9 f0       	breq	.+62     	; 0x25e4 <malloc+0xb0>
    25a6:	28 1b       	sub	r18, r24
    25a8:	39 0b       	sbc	r19, r25
    25aa:	24 30       	cpi	r18, 0x04	; 4
    25ac:	31 05       	cpc	r19, r1
    25ae:	80 f4       	brcc	.+32     	; 0x25d0 <malloc+0x9c>
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	61 15       	cp	r22, r1
    25b6:	71 05       	cpc	r23, r1
    25b8:	21 f0       	breq	.+8      	; 0x25c2 <malloc+0x8e>
    25ba:	fb 01       	movw	r30, r22
    25bc:	93 83       	std	Z+3, r25	; 0x03
    25be:	82 83       	std	Z+2, r24	; 0x02
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <malloc+0x96>
    25c2:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <__flp+0x1>
    25c6:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <__flp>
    25ca:	fe 01       	movw	r30, r28
    25cc:	32 96       	adiw	r30, 0x02	; 2
    25ce:	44 c0       	rjmp	.+136    	; 0x2658 <malloc+0x124>
    25d0:	fe 01       	movw	r30, r28
    25d2:	e2 0f       	add	r30, r18
    25d4:	f3 1f       	adc	r31, r19
    25d6:	81 93       	st	Z+, r24
    25d8:	91 93       	st	Z+, r25
    25da:	22 50       	subi	r18, 0x02	; 2
    25dc:	31 09       	sbc	r19, r1
    25de:	39 83       	std	Y+1, r19	; 0x01
    25e0:	28 83       	st	Y, r18
    25e2:	3a c0       	rjmp	.+116    	; 0x2658 <malloc+0x124>
    25e4:	20 91 5b 04 	lds	r18, 0x045B	; 0x80045b <__brkval>
    25e8:	30 91 5c 04 	lds	r19, 0x045C	; 0x80045c <__brkval+0x1>
    25ec:	23 2b       	or	r18, r19
    25ee:	41 f4       	brne	.+16     	; 0x2600 <malloc+0xcc>
    25f0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25f4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    25f8:	30 93 5c 04 	sts	0x045C, r19	; 0x80045c <__brkval+0x1>
    25fc:	20 93 5b 04 	sts	0x045B, r18	; 0x80045b <__brkval>
    2600:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2604:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2608:	21 15       	cp	r18, r1
    260a:	31 05       	cpc	r19, r1
    260c:	41 f4       	brne	.+16     	; 0x261e <malloc+0xea>
    260e:	2d b7       	in	r18, 0x3d	; 61
    2610:	3e b7       	in	r19, 0x3e	; 62
    2612:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2616:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    261a:	24 1b       	sub	r18, r20
    261c:	35 0b       	sbc	r19, r21
    261e:	e0 91 5b 04 	lds	r30, 0x045B	; 0x80045b <__brkval>
    2622:	f0 91 5c 04 	lds	r31, 0x045C	; 0x80045c <__brkval+0x1>
    2626:	e2 17       	cp	r30, r18
    2628:	f3 07       	cpc	r31, r19
    262a:	a0 f4       	brcc	.+40     	; 0x2654 <malloc+0x120>
    262c:	2e 1b       	sub	r18, r30
    262e:	3f 0b       	sbc	r19, r31
    2630:	28 17       	cp	r18, r24
    2632:	39 07       	cpc	r19, r25
    2634:	78 f0       	brcs	.+30     	; 0x2654 <malloc+0x120>
    2636:	ac 01       	movw	r20, r24
    2638:	4e 5f       	subi	r20, 0xFE	; 254
    263a:	5f 4f       	sbci	r21, 0xFF	; 255
    263c:	24 17       	cp	r18, r20
    263e:	35 07       	cpc	r19, r21
    2640:	48 f0       	brcs	.+18     	; 0x2654 <malloc+0x120>
    2642:	4e 0f       	add	r20, r30
    2644:	5f 1f       	adc	r21, r31
    2646:	50 93 5c 04 	sts	0x045C, r21	; 0x80045c <__brkval+0x1>
    264a:	40 93 5b 04 	sts	0x045B, r20	; 0x80045b <__brkval>
    264e:	81 93       	st	Z+, r24
    2650:	91 93       	st	Z+, r25
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <malloc+0x124>
    2654:	e0 e0       	ldi	r30, 0x00	; 0
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	cf 01       	movw	r24, r30
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	08 95       	ret

00002664 <free>:
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	09 f4       	brne	.+2      	; 0x266e <free+0xa>
    266c:	81 c0       	rjmp	.+258    	; 0x2770 <free+0x10c>
    266e:	fc 01       	movw	r30, r24
    2670:	32 97       	sbiw	r30, 0x02	; 2
    2672:	13 82       	std	Z+3, r1	; 0x03
    2674:	12 82       	std	Z+2, r1	; 0x02
    2676:	a0 91 5d 04 	lds	r26, 0x045D	; 0x80045d <__flp>
    267a:	b0 91 5e 04 	lds	r27, 0x045E	; 0x80045e <__flp+0x1>
    267e:	10 97       	sbiw	r26, 0x00	; 0
    2680:	81 f4       	brne	.+32     	; 0x26a2 <free+0x3e>
    2682:	20 81       	ld	r18, Z
    2684:	31 81       	ldd	r19, Z+1	; 0x01
    2686:	82 0f       	add	r24, r18
    2688:	93 1f       	adc	r25, r19
    268a:	20 91 5b 04 	lds	r18, 0x045B	; 0x80045b <__brkval>
    268e:	30 91 5c 04 	lds	r19, 0x045C	; 0x80045c <__brkval+0x1>
    2692:	28 17       	cp	r18, r24
    2694:	39 07       	cpc	r19, r25
    2696:	51 f5       	brne	.+84     	; 0x26ec <free+0x88>
    2698:	f0 93 5c 04 	sts	0x045C, r31	; 0x80045c <__brkval+0x1>
    269c:	e0 93 5b 04 	sts	0x045B, r30	; 0x80045b <__brkval>
    26a0:	67 c0       	rjmp	.+206    	; 0x2770 <free+0x10c>
    26a2:	ed 01       	movw	r28, r26
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	ce 17       	cp	r28, r30
    26aa:	df 07       	cpc	r29, r31
    26ac:	40 f4       	brcc	.+16     	; 0x26be <free+0x5a>
    26ae:	4a 81       	ldd	r20, Y+2	; 0x02
    26b0:	5b 81       	ldd	r21, Y+3	; 0x03
    26b2:	9e 01       	movw	r18, r28
    26b4:	41 15       	cp	r20, r1
    26b6:	51 05       	cpc	r21, r1
    26b8:	f1 f0       	breq	.+60     	; 0x26f6 <free+0x92>
    26ba:	ea 01       	movw	r28, r20
    26bc:	f5 cf       	rjmp	.-22     	; 0x26a8 <free+0x44>
    26be:	d3 83       	std	Z+3, r29	; 0x03
    26c0:	c2 83       	std	Z+2, r28	; 0x02
    26c2:	40 81       	ld	r20, Z
    26c4:	51 81       	ldd	r21, Z+1	; 0x01
    26c6:	84 0f       	add	r24, r20
    26c8:	95 1f       	adc	r25, r21
    26ca:	c8 17       	cp	r28, r24
    26cc:	d9 07       	cpc	r29, r25
    26ce:	59 f4       	brne	.+22     	; 0x26e6 <free+0x82>
    26d0:	88 81       	ld	r24, Y
    26d2:	99 81       	ldd	r25, Y+1	; 0x01
    26d4:	84 0f       	add	r24, r20
    26d6:	95 1f       	adc	r25, r21
    26d8:	02 96       	adiw	r24, 0x02	; 2
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	9b 81       	ldd	r25, Y+3	; 0x03
    26e2:	93 83       	std	Z+3, r25	; 0x03
    26e4:	82 83       	std	Z+2, r24	; 0x02
    26e6:	21 15       	cp	r18, r1
    26e8:	31 05       	cpc	r19, r1
    26ea:	29 f4       	brne	.+10     	; 0x26f6 <free+0x92>
    26ec:	f0 93 5e 04 	sts	0x045E, r31	; 0x80045e <__flp+0x1>
    26f0:	e0 93 5d 04 	sts	0x045D, r30	; 0x80045d <__flp>
    26f4:	3d c0       	rjmp	.+122    	; 0x2770 <free+0x10c>
    26f6:	e9 01       	movw	r28, r18
    26f8:	fb 83       	std	Y+3, r31	; 0x03
    26fa:	ea 83       	std	Y+2, r30	; 0x02
    26fc:	49 91       	ld	r20, Y+
    26fe:	59 91       	ld	r21, Y+
    2700:	c4 0f       	add	r28, r20
    2702:	d5 1f       	adc	r29, r21
    2704:	ec 17       	cp	r30, r28
    2706:	fd 07       	cpc	r31, r29
    2708:	61 f4       	brne	.+24     	; 0x2722 <free+0xbe>
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	84 0f       	add	r24, r20
    2710:	95 1f       	adc	r25, r21
    2712:	02 96       	adiw	r24, 0x02	; 2
    2714:	e9 01       	movw	r28, r18
    2716:	99 83       	std	Y+1, r25	; 0x01
    2718:	88 83       	st	Y, r24
    271a:	82 81       	ldd	r24, Z+2	; 0x02
    271c:	93 81       	ldd	r25, Z+3	; 0x03
    271e:	9b 83       	std	Y+3, r25	; 0x03
    2720:	8a 83       	std	Y+2, r24	; 0x02
    2722:	e0 e0       	ldi	r30, 0x00	; 0
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	12 96       	adiw	r26, 0x02	; 2
    2728:	8d 91       	ld	r24, X+
    272a:	9c 91       	ld	r25, X
    272c:	13 97       	sbiw	r26, 0x03	; 3
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	19 f0       	breq	.+6      	; 0x2738 <free+0xd4>
    2732:	fd 01       	movw	r30, r26
    2734:	dc 01       	movw	r26, r24
    2736:	f7 cf       	rjmp	.-18     	; 0x2726 <free+0xc2>
    2738:	8d 91       	ld	r24, X+
    273a:	9c 91       	ld	r25, X
    273c:	11 97       	sbiw	r26, 0x01	; 1
    273e:	9d 01       	movw	r18, r26
    2740:	2e 5f       	subi	r18, 0xFE	; 254
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	82 0f       	add	r24, r18
    2746:	93 1f       	adc	r25, r19
    2748:	20 91 5b 04 	lds	r18, 0x045B	; 0x80045b <__brkval>
    274c:	30 91 5c 04 	lds	r19, 0x045C	; 0x80045c <__brkval+0x1>
    2750:	28 17       	cp	r18, r24
    2752:	39 07       	cpc	r19, r25
    2754:	69 f4       	brne	.+26     	; 0x2770 <free+0x10c>
    2756:	30 97       	sbiw	r30, 0x00	; 0
    2758:	29 f4       	brne	.+10     	; 0x2764 <free+0x100>
    275a:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <__flp+0x1>
    275e:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <__flp>
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <free+0x104>
    2764:	13 82       	std	Z+3, r1	; 0x03
    2766:	12 82       	std	Z+2, r1	; 0x02
    2768:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <__brkval+0x1>
    276c:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <__brkval>
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	08 95       	ret

00002776 <strnlen_P>:
    2776:	fc 01       	movw	r30, r24
    2778:	05 90       	lpm	r0, Z+
    277a:	61 50       	subi	r22, 0x01	; 1
    277c:	70 40       	sbci	r23, 0x00	; 0
    277e:	01 10       	cpse	r0, r1
    2780:	d8 f7       	brcc	.-10     	; 0x2778 <strnlen_P+0x2>
    2782:	80 95       	com	r24
    2784:	90 95       	com	r25
    2786:	8e 0f       	add	r24, r30
    2788:	9f 1f       	adc	r25, r31
    278a:	08 95       	ret

0000278c <memset>:
    278c:	dc 01       	movw	r26, r24
    278e:	01 c0       	rjmp	.+2      	; 0x2792 <memset+0x6>
    2790:	6d 93       	st	X+, r22
    2792:	41 50       	subi	r20, 0x01	; 1
    2794:	50 40       	sbci	r21, 0x00	; 0
    2796:	e0 f7       	brcc	.-8      	; 0x2790 <memset+0x4>
    2798:	08 95       	ret

0000279a <strnlen>:
    279a:	fc 01       	movw	r30, r24
    279c:	61 50       	subi	r22, 0x01	; 1
    279e:	70 40       	sbci	r23, 0x00	; 0
    27a0:	01 90       	ld	r0, Z+
    27a2:	01 10       	cpse	r0, r1
    27a4:	d8 f7       	brcc	.-10     	; 0x279c <strnlen+0x2>
    27a6:	80 95       	com	r24
    27a8:	90 95       	com	r25
    27aa:	8e 0f       	add	r24, r30
    27ac:	9f 1f       	adc	r25, r31
    27ae:	08 95       	ret

000027b0 <strrev>:
    27b0:	dc 01       	movw	r26, r24
    27b2:	fc 01       	movw	r30, r24
    27b4:	67 2f       	mov	r22, r23
    27b6:	71 91       	ld	r23, Z+
    27b8:	77 23       	and	r23, r23
    27ba:	e1 f7       	brne	.-8      	; 0x27b4 <strrev+0x4>
    27bc:	32 97       	sbiw	r30, 0x02	; 2
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <strrev+0x18>
    27c0:	7c 91       	ld	r23, X
    27c2:	6d 93       	st	X+, r22
    27c4:	70 83       	st	Z, r23
    27c6:	62 91       	ld	r22, -Z
    27c8:	ae 17       	cp	r26, r30
    27ca:	bf 07       	cpc	r27, r31
    27cc:	c8 f3       	brcs	.-14     	; 0x27c0 <strrev+0x10>
    27ce:	08 95       	ret

000027d0 <fputc>:
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	fb 01       	movw	r30, r22
    27da:	23 81       	ldd	r18, Z+3	; 0x03
    27dc:	21 fd       	sbrc	r18, 1
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <fputc+0x16>
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	9f ef       	ldi	r25, 0xFF	; 255
    27e4:	2c c0       	rjmp	.+88     	; 0x283e <fputc+0x6e>
    27e6:	22 ff       	sbrs	r18, 2
    27e8:	16 c0       	rjmp	.+44     	; 0x2816 <fputc+0x46>
    27ea:	46 81       	ldd	r20, Z+6	; 0x06
    27ec:	57 81       	ldd	r21, Z+7	; 0x07
    27ee:	24 81       	ldd	r18, Z+4	; 0x04
    27f0:	35 81       	ldd	r19, Z+5	; 0x05
    27f2:	42 17       	cp	r20, r18
    27f4:	53 07       	cpc	r21, r19
    27f6:	44 f4       	brge	.+16     	; 0x2808 <fputc+0x38>
    27f8:	a0 81       	ld	r26, Z
    27fa:	b1 81       	ldd	r27, Z+1	; 0x01
    27fc:	9d 01       	movw	r18, r26
    27fe:	2f 5f       	subi	r18, 0xFF	; 255
    2800:	3f 4f       	sbci	r19, 0xFF	; 255
    2802:	31 83       	std	Z+1, r19	; 0x01
    2804:	20 83       	st	Z, r18
    2806:	8c 93       	st	X, r24
    2808:	26 81       	ldd	r18, Z+6	; 0x06
    280a:	37 81       	ldd	r19, Z+7	; 0x07
    280c:	2f 5f       	subi	r18, 0xFF	; 255
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	37 83       	std	Z+7, r19	; 0x07
    2812:	26 83       	std	Z+6, r18	; 0x06
    2814:	14 c0       	rjmp	.+40     	; 0x283e <fputc+0x6e>
    2816:	8b 01       	movw	r16, r22
    2818:	ec 01       	movw	r28, r24
    281a:	fb 01       	movw	r30, r22
    281c:	00 84       	ldd	r0, Z+8	; 0x08
    281e:	f1 85       	ldd	r31, Z+9	; 0x09
    2820:	e0 2d       	mov	r30, r0
    2822:	09 95       	icall
    2824:	89 2b       	or	r24, r25
    2826:	e1 f6       	brne	.-72     	; 0x27e0 <fputc+0x10>
    2828:	d8 01       	movw	r26, r16
    282a:	16 96       	adiw	r26, 0x06	; 6
    282c:	8d 91       	ld	r24, X+
    282e:	9c 91       	ld	r25, X
    2830:	17 97       	sbiw	r26, 0x07	; 7
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	17 96       	adiw	r26, 0x07	; 7
    2836:	9c 93       	st	X, r25
    2838:	8e 93       	st	-X, r24
    283a:	16 97       	sbiw	r26, 0x06	; 6
    283c:	ce 01       	movw	r24, r28
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	08 95       	ret

00002848 <__ultoa_invert>:
    2848:	fa 01       	movw	r30, r20
    284a:	aa 27       	eor	r26, r26
    284c:	28 30       	cpi	r18, 0x08	; 8
    284e:	51 f1       	breq	.+84     	; 0x28a4 <__ultoa_invert+0x5c>
    2850:	20 31       	cpi	r18, 0x10	; 16
    2852:	81 f1       	breq	.+96     	; 0x28b4 <__ultoa_invert+0x6c>
    2854:	e8 94       	clt
    2856:	6f 93       	push	r22
    2858:	6e 7f       	andi	r22, 0xFE	; 254
    285a:	6e 5f       	subi	r22, 0xFE	; 254
    285c:	7f 4f       	sbci	r23, 0xFF	; 255
    285e:	8f 4f       	sbci	r24, 0xFF	; 255
    2860:	9f 4f       	sbci	r25, 0xFF	; 255
    2862:	af 4f       	sbci	r26, 0xFF	; 255
    2864:	b1 e0       	ldi	r27, 0x01	; 1
    2866:	3e d0       	rcall	.+124    	; 0x28e4 <__ultoa_invert+0x9c>
    2868:	b4 e0       	ldi	r27, 0x04	; 4
    286a:	3c d0       	rcall	.+120    	; 0x28e4 <__ultoa_invert+0x9c>
    286c:	67 0f       	add	r22, r23
    286e:	78 1f       	adc	r23, r24
    2870:	89 1f       	adc	r24, r25
    2872:	9a 1f       	adc	r25, r26
    2874:	a1 1d       	adc	r26, r1
    2876:	68 0f       	add	r22, r24
    2878:	79 1f       	adc	r23, r25
    287a:	8a 1f       	adc	r24, r26
    287c:	91 1d       	adc	r25, r1
    287e:	a1 1d       	adc	r26, r1
    2880:	6a 0f       	add	r22, r26
    2882:	71 1d       	adc	r23, r1
    2884:	81 1d       	adc	r24, r1
    2886:	91 1d       	adc	r25, r1
    2888:	a1 1d       	adc	r26, r1
    288a:	20 d0       	rcall	.+64     	; 0x28cc <__ultoa_invert+0x84>
    288c:	09 f4       	brne	.+2      	; 0x2890 <__ultoa_invert+0x48>
    288e:	68 94       	set
    2890:	3f 91       	pop	r19
    2892:	2a e0       	ldi	r18, 0x0A	; 10
    2894:	26 9f       	mul	r18, r22
    2896:	11 24       	eor	r1, r1
    2898:	30 19       	sub	r19, r0
    289a:	30 5d       	subi	r19, 0xD0	; 208
    289c:	31 93       	st	Z+, r19
    289e:	de f6       	brtc	.-74     	; 0x2856 <__ultoa_invert+0xe>
    28a0:	cf 01       	movw	r24, r30
    28a2:	08 95       	ret
    28a4:	46 2f       	mov	r20, r22
    28a6:	47 70       	andi	r20, 0x07	; 7
    28a8:	40 5d       	subi	r20, 0xD0	; 208
    28aa:	41 93       	st	Z+, r20
    28ac:	b3 e0       	ldi	r27, 0x03	; 3
    28ae:	0f d0       	rcall	.+30     	; 0x28ce <__ultoa_invert+0x86>
    28b0:	c9 f7       	brne	.-14     	; 0x28a4 <__ultoa_invert+0x5c>
    28b2:	f6 cf       	rjmp	.-20     	; 0x28a0 <__ultoa_invert+0x58>
    28b4:	46 2f       	mov	r20, r22
    28b6:	4f 70       	andi	r20, 0x0F	; 15
    28b8:	40 5d       	subi	r20, 0xD0	; 208
    28ba:	4a 33       	cpi	r20, 0x3A	; 58
    28bc:	18 f0       	brcs	.+6      	; 0x28c4 <__ultoa_invert+0x7c>
    28be:	49 5d       	subi	r20, 0xD9	; 217
    28c0:	31 fd       	sbrc	r19, 1
    28c2:	40 52       	subi	r20, 0x20	; 32
    28c4:	41 93       	st	Z+, r20
    28c6:	02 d0       	rcall	.+4      	; 0x28cc <__ultoa_invert+0x84>
    28c8:	a9 f7       	brne	.-22     	; 0x28b4 <__ultoa_invert+0x6c>
    28ca:	ea cf       	rjmp	.-44     	; 0x28a0 <__ultoa_invert+0x58>
    28cc:	b4 e0       	ldi	r27, 0x04	; 4
    28ce:	a6 95       	lsr	r26
    28d0:	97 95       	ror	r25
    28d2:	87 95       	ror	r24
    28d4:	77 95       	ror	r23
    28d6:	67 95       	ror	r22
    28d8:	ba 95       	dec	r27
    28da:	c9 f7       	brne	.-14     	; 0x28ce <__ultoa_invert+0x86>
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	61 05       	cpc	r22, r1
    28e0:	71 05       	cpc	r23, r1
    28e2:	08 95       	ret
    28e4:	9b 01       	movw	r18, r22
    28e6:	ac 01       	movw	r20, r24
    28e8:	0a 2e       	mov	r0, r26
    28ea:	06 94       	lsr	r0
    28ec:	57 95       	ror	r21
    28ee:	47 95       	ror	r20
    28f0:	37 95       	ror	r19
    28f2:	27 95       	ror	r18
    28f4:	ba 95       	dec	r27
    28f6:	c9 f7       	brne	.-14     	; 0x28ea <__ultoa_invert+0xa2>
    28f8:	62 0f       	add	r22, r18
    28fa:	73 1f       	adc	r23, r19
    28fc:	84 1f       	adc	r24, r20
    28fe:	95 1f       	adc	r25, r21
    2900:	a0 1d       	adc	r26, r0
    2902:	08 95       	ret

00002904 <__prologue_saves__>:
    2904:	2f 92       	push	r2
    2906:	3f 92       	push	r3
    2908:	4f 92       	push	r4
    290a:	5f 92       	push	r5
    290c:	6f 92       	push	r6
    290e:	7f 92       	push	r7
    2910:	8f 92       	push	r8
    2912:	9f 92       	push	r9
    2914:	af 92       	push	r10
    2916:	bf 92       	push	r11
    2918:	cf 92       	push	r12
    291a:	df 92       	push	r13
    291c:	ef 92       	push	r14
    291e:	ff 92       	push	r15
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	ca 1b       	sub	r28, r26
    292e:	db 0b       	sbc	r29, r27
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	09 94       	ijmp

0000293c <__epilogue_restores__>:
    293c:	2a 88       	ldd	r2, Y+18	; 0x12
    293e:	39 88       	ldd	r3, Y+17	; 0x11
    2940:	48 88       	ldd	r4, Y+16	; 0x10
    2942:	5f 84       	ldd	r5, Y+15	; 0x0f
    2944:	6e 84       	ldd	r6, Y+14	; 0x0e
    2946:	7d 84       	ldd	r7, Y+13	; 0x0d
    2948:	8c 84       	ldd	r8, Y+12	; 0x0c
    294a:	9b 84       	ldd	r9, Y+11	; 0x0b
    294c:	aa 84       	ldd	r10, Y+10	; 0x0a
    294e:	b9 84       	ldd	r11, Y+9	; 0x09
    2950:	c8 84       	ldd	r12, Y+8	; 0x08
    2952:	df 80       	ldd	r13, Y+7	; 0x07
    2954:	ee 80       	ldd	r14, Y+6	; 0x06
    2956:	fd 80       	ldd	r15, Y+5	; 0x05
    2958:	0c 81       	ldd	r16, Y+4	; 0x04
    295a:	1b 81       	ldd	r17, Y+3	; 0x03
    295c:	aa 81       	ldd	r26, Y+2	; 0x02
    295e:	b9 81       	ldd	r27, Y+1	; 0x01
    2960:	ce 0f       	add	r28, r30
    2962:	d1 1d       	adc	r29, r1
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	ed 01       	movw	r28, r26
    2970:	08 95       	ret

00002972 <_exit>:
    2972:	f8 94       	cli

00002974 <__stop_program>:
    2974:	ff cf       	rjmp	.-2      	; 0x2974 <__stop_program>
