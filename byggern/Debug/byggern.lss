
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  000016ee  00001782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008001c6  008001c6  00001848  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000297d  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001397  00000000  00000000  000044fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e2  00000000  00000000  00005894  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  00006b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e8  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5e  00000000  00000000  000079a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf ef       	ldi	r28, 0xFF	; 255
      a4:	d4 e0       	ldi	r29, 0x04	; 4
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	ee ee       	ldi	r30, 0xEE	; 238
      b2:	f6 e1       	ldi	r31, 0x16	; 22
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a6 3c       	cpi	r26, 0xC6	; 198
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a6 ec       	ldi	r26, 0xC6	; 198
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a0 3e       	cpi	r26, 0xE0	; 224
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
      d4:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
      dc:	30 98       	cbi	0x06, 0	; 6
      de:	08 95       	ret

000000e0 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
      e0:	84 60       	ori	r24, 0x04	; 4
      e2:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1220>
	

	while (test_bit(PINE, PINE0)) {
      e6:	28 99       	sbic	0x05, 0	; 5
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <readAdc+0x6>

	}
	
	return *adc;
      ea:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1220>
      ee:	08 95       	ret

000000f0 <main>:
#include "pwm.h"
#include "music.h"

int main(void)
{
	setupInit();
      f0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setupInit>
	printf("Starting program\n\n\n\n\n\n\n\n\n\n");
      f4:	86 e0       	ldi	r24, 0x06	; 6
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <puts>
	//test_SRAM();
	pwm_testPlayNote();
      fc:	0e 94 4d 01 	call	0x29a	; 0x29a <pwm_testPlayNote>
	pwm_init();
     100:	0e 94 83 00 	call	0x106	; 0x106 <pwm_init>
     104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x14>

00000106 <pwm_init>:
    PRESC_1024 =   (1 << CS02)  |               (1 << CS00)
} prescaling;

void pwm_init() {
    //set output pin
    DDRB = (1 << PB0); 
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	87 bb       	out	0x17, r24	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
     10a:	8f ef       	ldi	r24, 0xFF	; 255
     10c:	81 bf       	out	0x31, r24	; 49
    
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
     10e:	80 e8       	ldi	r24, 0x80	; 128
     110:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
     112:	83 b7       	in	r24, 0x33	; 51
     114:	88 60       	ori	r24, 0x08	; 8
     116:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
     118:	83 b7       	in	r24, 0x33	; 51
     11a:	80 61       	ori	r24, 0x10	; 16
     11c:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 |= PRESC_1;
     11e:	83 b7       	in	r24, 0x33	; 51
     120:	81 60       	ori	r24, 0x01	; 1
     122:	83 bf       	out	0x33, r24	; 51
     124:	08 95       	ret

00000126 <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
     126:	8f 92       	push	r8
     128:	9f 92       	push	r9
     12a:	af 92       	push	r10
     12c:	bf 92       	push	r11
     12e:	cf 92       	push	r12
     130:	df 92       	push	r13
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	cf 93       	push	r28
     138:	9b 01       	movw	r18, r22
     13a:	ac 01       	movw	r20, r24
    if (freq == 0) {
     13c:	67 2b       	or	r22, r23
     13e:	68 2b       	or	r22, r24
     140:	69 2b       	or	r22, r25
     142:	21 f4       	brne	.+8      	; 0x14c <pwm_setFreq+0x26>
        TCCR0 &= PRESC_OFF;
     144:	83 b7       	in	r24, 0x33	; 51
     146:	88 7f       	andi	r24, 0xF8	; 248
     148:	83 bf       	out	0x33, r24	; 51
        return;
     14a:	9d c0       	rjmp	.+314    	; 0x286 <pwm_setFreq+0x160>
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	70 e8       	ldi	r23, 0x80	; 128
     150:	85 e2       	ldi	r24, 0x25	; 37
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 81 06 	call	0xd02	; 0xd02 <__udivmodsi4>
     158:	69 01       	movw	r12, r18
     15a:	7a 01       	movw	r14, r20

    if (ocr_plus_one > 255+1) {
     15c:	21 30       	cpi	r18, 0x01	; 1
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	38 07       	cpc	r19, r24
     162:	41 05       	cpc	r20, r1
     164:	51 05       	cpc	r21, r1
     166:	d0 f1       	brcs	.+116    	; 0x1dc <pwm_setFreq+0xb6>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
     168:	68 94       	set
     16a:	12 f8       	bld	r1, 2
     16c:	f6 94       	lsr	r15
     16e:	e7 94       	ror	r14
     170:	d7 94       	ror	r13
     172:	c7 94       	ror	r12
     174:	16 94       	lsr	r1
     176:	d1 f7       	brne	.-12     	; 0x16c <pwm_setFreq+0x46>

        if (ocr_plus_one > 255+1) {
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	c9 16       	cp	r12, r25
     17c:	d9 06       	cpc	r13, r25
     17e:	e1 04       	cpc	r14, r1
     180:	f1 04       	cpc	r15, r1
     182:	90 f1       	brcs	.+100    	; 0x1e8 <pwm_setFreq+0xc2>
            prescaler = PRESC_64;
			presc_num *=8;
			
            ocr_plus_one /= 8;
     184:	69 01       	movw	r12, r18
     186:	7a 01       	movw	r14, r20
     188:	68 94       	set
     18a:	15 f8       	bld	r1, 5
     18c:	f6 94       	lsr	r15
     18e:	e7 94       	ror	r14
     190:	d7 94       	ror	r13
     192:	c7 94       	ror	r12
     194:	16 94       	lsr	r1
     196:	d1 f7       	brne	.-12     	; 0x18c <pwm_setFreq+0x66>
            
            if (ocr_plus_one > 255+1) {
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	c8 16       	cp	r12, r24
     19c:	d8 06       	cpc	r13, r24
     19e:	e1 04       	cpc	r14, r1
     1a0:	f1 04       	cpc	r15, r1
     1a2:	48 f1       	brcs	.+82     	; 0x1f6 <pwm_setFreq+0xd0>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
     1a4:	c3 2e       	mov	r12, r19
     1a6:	d4 2e       	mov	r13, r20
     1a8:	e5 2e       	mov	r14, r21
     1aa:	ff 24       	eor	r15, r15
                    
                if (ocr_plus_one > 255+1) {
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	c9 16       	cp	r12, r25
     1b0:	d9 06       	cpc	r13, r25
     1b2:	e1 04       	cpc	r14, r1
     1b4:	f1 04       	cpc	r15, r1
     1b6:	30 f1       	brcs	.+76     	; 0x204 <pwm_setFreq+0xde>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
     1b8:	69 01       	movw	r12, r18
     1ba:	7a 01       	movw	r14, r20
     1bc:	0b 2e       	mov	r0, r27
     1be:	ba e0       	ldi	r27, 0x0A	; 10
     1c0:	f6 94       	lsr	r15
     1c2:	e7 94       	ror	r14
     1c4:	d7 94       	ror	r13
     1c6:	c7 94       	ror	r12
     1c8:	ba 95       	dec	r27
     1ca:	d1 f7       	brne	.-12     	; 0x1c0 <pwm_setFreq+0x9a>
     1cc:	b0 2d       	mov	r27, r0

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
					presc_num *=4;
     1ce:	81 2c       	mov	r8, r1
     1d0:	91 2c       	mov	r9, r1
     1d2:	54 01       	movw	r10, r8
     1d4:	68 94       	set
     1d6:	92 f8       	bld	r9, 2
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
     1d8:	c5 e0       	ldi	r28, 0x05	; 5
     1da:	19 c0       	rjmp	.+50     	; 0x20e <pwm_setFreq+0xe8>
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
     1dc:	81 2c       	mov	r8, r1
     1de:	91 2c       	mov	r9, r1
     1e0:	54 01       	movw	r10, r8
     1e2:	83 94       	inc	r8
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
     1e4:	c1 e0       	ldi	r28, 0x01	; 1
     1e6:	13 c0       	rjmp	.+38     	; 0x20e <pwm_setFreq+0xe8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
		presc_num *=8;
     1e8:	81 2c       	mov	r8, r1
     1ea:	91 2c       	mov	r9, r1
     1ec:	54 01       	movw	r10, r8
     1ee:	68 94       	set
     1f0:	83 f8       	bld	r8, 3
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
     1f2:	c2 e0       	ldi	r28, 0x02	; 2
     1f4:	0c c0       	rjmp	.+24     	; 0x20e <pwm_setFreq+0xe8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
			presc_num *=8;
     1f6:	81 2c       	mov	r8, r1
     1f8:	91 2c       	mov	r9, r1
     1fa:	54 01       	movw	r10, r8
     1fc:	68 94       	set
     1fe:	86 f8       	bld	r8, 6
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
     200:	c3 e0       	ldi	r28, 0x03	; 3
     202:	05 c0       	rjmp	.+10     	; 0x20e <pwm_setFreq+0xe8>
			
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
				presc_num *=4;
     204:	81 2c       	mov	r8, r1
     206:	91 2c       	mov	r9, r1
     208:	54 01       	movw	r10, r8
     20a:	93 94       	inc	r9
			presc_num *=8;
			
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
     20c:	c4 e0       	ldi	r28, 0x04	; 4
                    ocr_plus_one /= 4;
                }
            }
        }
    }
	printf("Prescaler: %i\t ocr_plus_one: %i\n\r", prescaler, ocr_plus_one);
     20e:	ff 92       	push	r15
     210:	ef 92       	push	r14
     212:	df 92       	push	r13
     214:	cf 92       	push	r12
     216:	8c 2f       	mov	r24, r28
     218:	0c 2e       	mov	r0, r28
     21a:	00 0c       	add	r0, r0
     21c:	99 0b       	sbc	r25, r25
     21e:	9f 93       	push	r25
     220:	cf 93       	push	r28
     222:	80 e2       	ldi	r24, 0x20	; 32
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	0e 94 44 08 	call	0x1088	; 0x1088 <printf>
	uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	printf("frequency obtained: %i\n\n\r", frequency);
     22e:	a5 01       	movw	r20, r10
     230:	94 01       	movw	r18, r8
     232:	c7 01       	movw	r24, r14
     234:	b6 01       	movw	r22, r12
     236:	0e 94 5d 06 	call	0xcba	; 0xcba <__mulsi3>
     23a:	9b 01       	movw	r18, r22
     23c:	ac 01       	movw	r20, r24
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	8b e4       	ldi	r24, 0x4B	; 75
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 81 06 	call	0xd02	; 0xd02 <__udivmodsi4>
     252:	5f 93       	push	r21
     254:	4f 93       	push	r20
     256:	3f 93       	push	r19
     258:	2f 93       	push	r18
     25a:	82 e4       	ldi	r24, 0x42	; 66
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	9f 93       	push	r25
     260:	8f 93       	push	r24
     262:	0e 94 44 08 	call	0x1088	; 0x1088 <printf>
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
     266:	83 b7       	in	r24, 0x33	; 51
     268:	88 7f       	andi	r24, 0xF8	; 248
     26a:	83 bf       	out	0x33, r24	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
     26c:	83 b7       	in	r24, 0x33	; 51
     26e:	c8 2b       	or	r28, r24
     270:	c3 bf       	out	0x33, r28	; 51
	OCR0 = ocr_plus_one-1;
     272:	ca 94       	dec	r12
     274:	c1 be       	out	0x31, r12	; 49
     276:	8d b7       	in	r24, 0x3d	; 61
     278:	9e b7       	in	r25, 0x3e	; 62
     27a:	0e 96       	adiw	r24, 0x0e	; 14
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	9e bf       	out	0x3e, r25	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	8d bf       	out	0x3d, r24	; 61
	
    
}
     286:	cf 91       	pop	r28
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	df 90       	pop	r13
     28e:	cf 90       	pop	r12
     290:	bf 90       	pop	r11
     292:	af 90       	pop	r10
     294:	9f 90       	pop	r9
     296:	8f 90       	pop	r8
     298:	08 95       	ret

0000029a <pwm_testPlayNote>:
void pwm_testPlayNote() {
		printf("Note should have this frequency: %i ", NOTE_G5);
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	8f 93       	push	r24
     29e:	80 e1       	ldi	r24, 0x10	; 16
     2a0:	8f 93       	push	r24
     2a2:	8c e5       	ldi	r24, 0x5C	; 92
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	0e 94 44 08 	call	0x1088	; 0x1088 <printf>
		pwm_setFreq(NOTE_G5);
     2ae:	60 e1       	ldi	r22, 0x10	; 16
     2b0:	73 e0       	ldi	r23, 0x03	; 3
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 93 00 	call	0x126	; 0x126 <pwm_setFreq>
	for (int i = 200; i<1000; i+=10) {
		printf("Note should have this frequency: %i ", i);
		pwm_setFreq(i);
	}
	*/
}
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	08 95       	ret

000002c4 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     2c4:	85 b7       	in	r24, 0x35	; 53
     2c6:	8f 7e       	andi	r24, 0xEF	; 239
     2c8:	85 bf       	out	0x35, r24	; 53
     2ca:	84 b7       	in	r24, 0x34	; 52
     2cc:	8f 7d       	andi	r24, 0xDF	; 223
     2ce:	84 bf       	out	0x34, r24	; 52
     2d0:	86 b7       	in	r24, 0x36	; 54
     2d2:	8f 77       	andi	r24, 0x7F	; 127
     2d4:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     2d6:	85 b7       	in	r24, 0x35	; 53
     2d8:	80 62       	ori	r24, 0x20	; 32
     2da:	85 bf       	out	0x35, r24	; 53
     2dc:	88 95       	sleep
     2de:	85 b7       	in	r24, 0x35	; 53
     2e0:	8f 7d       	andi	r24, 0xDF	; 223
     2e2:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     2e4:	85 b7       	in	r24, 0x35	; 53
     2e6:	80 62       	ori	r24, 0x20	; 32
     2e8:	85 bf       	out	0x35, r24	; 53
     2ea:	08 95       	ret

000002ec <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     2f2:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     2fc:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <joystickOffsetY>
     300:	08 95       	ret

00000302 <joystick_readPosition>:
}
void joystick_readPosition() {
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     314:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     31c:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     31e:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <joystickOffsetX>
     322:	c6 17       	cp	r28, r22
     324:	80 f4       	brcc	.+32     	; 0x346 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	2c 2f       	mov	r18, r28
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	26 1b       	sub	r18, r22
     32e:	37 0b       	sbc	r19, r23
     330:	44 e6       	ldi	r20, 0x64	; 100
     332:	42 9f       	mul	r20, r18
     334:	c0 01       	movw	r24, r0
     336:	43 9f       	mul	r20, r19
     338:	90 0d       	add	r25, r0
     33a:	11 24       	eor	r1, r1
     33c:	0e 94 6d 06 	call	0xcda	; 0xcda <__divmodhi4>
     340:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <__data_end>
     344:	14 c0       	rjmp	.+40     	; 0x36e <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     346:	46 2f       	mov	r20, r22
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	2c 2f       	mov	r18, r28
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	24 1b       	sub	r18, r20
     350:	35 0b       	sbc	r19, r21
     352:	64 e6       	ldi	r22, 0x64	; 100
     354:	62 9f       	mul	r22, r18
     356:	c0 01       	movw	r24, r0
     358:	63 9f       	mul	r22, r19
     35a:	90 0d       	add	r25, r0
     35c:	11 24       	eor	r1, r1
     35e:	6f ef       	ldi	r22, 0xFF	; 255
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	64 1b       	sub	r22, r20
     364:	75 0b       	sbc	r23, r21
     366:	0e 94 6d 06 	call	0xcda	; 0xcda <__divmodhi4>
     36a:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     36e:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <joystickOffsetY>
     372:	e2 17       	cp	r30, r18
     374:	88 f4       	brcc	.+34     	; 0x398 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     376:	62 2f       	mov	r22, r18
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	4e 2f       	mov	r20, r30
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	46 1b       	sub	r20, r22
     380:	57 0b       	sbc	r21, r23
     382:	24 e6       	ldi	r18, 0x64	; 100
     384:	24 9f       	mul	r18, r20
     386:	c0 01       	movw	r24, r0
     388:	25 9f       	mul	r18, r21
     38a:	90 0d       	add	r25, r0
     38c:	11 24       	eor	r1, r1
     38e:	0e 94 6d 06 	call	0xcda	; 0xcda <__divmodhi4>
     392:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <__data_end+0x1>
     396:	13 c0       	rjmp	.+38     	; 0x3be <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	4e 2f       	mov	r20, r30
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	42 1b       	sub	r20, r18
     3a0:	53 0b       	sbc	r21, r19
     3a2:	64 e6       	ldi	r22, 0x64	; 100
     3a4:	64 9f       	mul	r22, r20
     3a6:	c0 01       	movw	r24, r0
     3a8:	65 9f       	mul	r22, r21
     3aa:	90 0d       	add	r25, r0
     3ac:	11 24       	eor	r1, r1
     3ae:	6f ef       	ldi	r22, 0xFF	; 255
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	62 1b       	sub	r22, r18
     3b4:	73 0b       	sbc	r23, r19
     3b6:	0e 94 6d 06 	call	0xcda	; 0xcda <__divmodhi4>
     3ba:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     3be:	c6 ec       	ldi	r28, 0xC6	; 198
     3c0:	d1 e0       	ldi	r29, 0x01	; 1
     3c2:	68 81       	ld	r22, Y
     3c4:	06 2e       	mov	r0, r22
     3c6:	00 0c       	add	r0, r0
     3c8:	77 0b       	sbc	r23, r23
     3ca:	88 0b       	sbc	r24, r24
     3cc:	99 0b       	sbc	r25, r25
     3ce:	0e 94 c4 04 	call	0x988	; 0x988 <__floatsisf>
     3d2:	6b 01       	movw	r12, r22
     3d4:	7c 01       	movw	r14, r24
     3d6:	69 81       	ldd	r22, Y+1	; 0x01
     3d8:	06 2e       	mov	r0, r22
     3da:	00 0c       	add	r0, r0
     3dc:	77 0b       	sbc	r23, r23
     3de:	88 0b       	sbc	r24, r24
     3e0:	99 0b       	sbc	r25, r25
     3e2:	0e 94 c4 04 	call	0x988	; 0x988 <__floatsisf>
     3e6:	a7 01       	movw	r20, r14
     3e8:	96 01       	movw	r18, r12
     3ea:	0e 94 bb 03 	call	0x776	; 0x776 <atan2>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	44 eb       	ldi	r20, 0xB4	; 180
     3f4:	53 e4       	ldi	r21, 0x43	; 67
     3f6:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	5f e3       	ldi	r21, 0x3F	; 63
     402:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3>
     406:	23 ec       	ldi	r18, 0xC3	; 195
     408:	35 ef       	ldi	r19, 0xF5	; 245
     40a:	48 e4       	ldi	r20, 0x48	; 72
     40c:	50 e4       	ldi	r21, 0x40	; 64
     40e:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
     412:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
     416:	7b 83       	std	Y+3, r23	; 0x03
     418:	6a 83       	std	Y+2, r22	; 0x02
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	08 95       	ret

00000428 <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     428:	8f e1       	ldi	r24, 0x1F	; 31
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 d1 06 	call	0xda2	; 0xda2 <malloc>
	ptr->numChildren = 0;
     430:	fc 01       	movw	r30, r24
     432:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     434:	2a e0       	ldi	r18, 0x0A	; 10
     436:	e1 e8       	ldi	r30, 0x81	; 129
     438:	f1 e0       	ldi	r31, 0x01	; 1
     43a:	dc 01       	movw	r26, r24
     43c:	01 90       	ld	r0, Z+
     43e:	0d 92       	st	X+, r0
     440:	2a 95       	dec	r18
     442:	e1 f7       	brne	.-8      	; 0x43c <mainMenuInit+0x14>
	ptr->parent = NULL;
     444:	fc 01       	movw	r30, r24
     446:	11 8a       	std	Z+17, r1	; 0x11
     448:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     44a:	08 95       	ret

0000044c <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	7c 01       	movw	r14, r24
     45c:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     45e:	8f e1       	ldi	r24, 0x1F	; 31
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 d1 06 	call	0xda2	; 0xda2 <malloc>
     466:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     468:	d7 01       	movw	r26, r14
     46a:	5e 96       	adiw	r26, 0x1e	; 30
     46c:	ec 91       	ld	r30, X
     46e:	5e 97       	sbiw	r26, 0x1e	; 30
     470:	c1 e0       	ldi	r28, 0x01	; 1
     472:	ce 0f       	add	r28, r30
     474:	5e 96       	adiw	r26, 0x1e	; 30
     476:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     478:	b6 01       	movw	r22, r12
     47a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <strcpy>
	childPtr->parent = parent;
     47e:	f8 01       	movw	r30, r16
     480:	f1 8a       	std	Z+17, r15	; 0x11
     482:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     484:	c7 30       	cpi	r28, 0x07	; 7
     486:	78 f4       	brcc	.+30     	; 0x4a6 <addChild+0x5a>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     488:	ec 2f       	mov	r30, r28
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	38 96       	adiw	r30, 0x08	; 8
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	ee 0d       	add	r30, r14
     494:	ff 1d       	adc	r31, r15
     496:	11 83       	std	Z+1, r17	; 0x01
     498:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     49a:	d8 01       	movw	r26, r16
     49c:	5e 96       	adiw	r26, 0x1e	; 30
     49e:	1c 92       	st	X, r1
	return childPtr;
     4a0:	80 2f       	mov	r24, r16
     4a2:	91 2f       	mov	r25, r17
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <addChild+0x5e>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	df 90       	pop	r13
     4b6:	cf 90       	pop	r12
     4b8:	08 95       	ret

000004ba <menuInit>:

MenuNode* menuInit(void)
{
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     4c6:	0e 94 14 02 	call	0x428	; 0x428 <mainMenuInit>
     4ca:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     4cc:	6b e8       	ldi	r22, 0x8B	; 139
     4ce:	71 e0       	ldi	r23, 0x01	; 1
     4d0:	0e 94 26 02 	call	0x44c	; 0x44c <addChild>
     4d4:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     4d6:	65 e9       	ldi	r22, 0x95	; 149
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	0e 94 26 02 	call	0x44c	; 0x44c <addChild>
	addChild(childPlayGame,"GAME 2");
     4de:	6c e9       	ldi	r22, 0x9C	; 156
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	ce 01       	movw	r24, r28
     4e4:	0e 94 26 02 	call	0x44c	; 0x44c <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     4e8:	63 ea       	ldi	r22, 0xA3	; 163
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	c7 01       	movw	r24, r14
     4ee:	0e 94 26 02 	call	0x44c	; 0x44c <addChild>
     4f2:	8c 01       	movw	r16, r24
     4f4:	c5 e0       	ldi	r28, 0x05	; 5
     4f6:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     4f8:	6d ea       	ldi	r22, 0xAD	; 173
     4fa:	71 e0       	ldi	r23, 0x01	; 1
     4fc:	c8 01       	movw	r24, r16
     4fe:	0e 94 26 02 	call	0x44c	; 0x44c <addChild>
     502:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     504:	c9 f7       	brne	.-14     	; 0x4f8 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     506:	65 eb       	ldi	r22, 0xB5	; 181
     508:	71 e0       	ldi	r23, 0x01	; 1
     50a:	c7 01       	movw	r24, r14
     50c:	0e 94 26 02 	call	0x44c	; 0x44c <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     510:	6e eb       	ldi	r22, 0xBE	; 190
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	0e 94 26 02 	call	0x44c	; 0x44c <addChild>
	currentMenu.currentMenuItem = mainMenu;
     518:	ea ec       	ldi	r30, 0xCA	; 202
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	f1 82       	std	Z+1, r15	; 0x01
     51e:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     520:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     526:	c7 01       	movw	r24, r14
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	08 95       	ret

00000536 <oled_pos>:
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     536:	80 55       	subi	r24, 0x50	; 80
     538:	e0 e0       	ldi	r30, 0x00	; 0
     53a:	f0 e1       	ldi	r31, 0x10	; 16
     53c:	80 83       	st	Z, r24
     53e:	86 2f       	mov	r24, r22
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	80 83       	st	Z, r24
     544:	62 95       	swap	r22
     546:	6f 70       	andi	r22, 0x0F	; 15
     548:	60 61       	ori	r22, 0x10	; 16
     54a:	60 83       	st	Z, r22
     54c:	08 95       	ret

0000054e <oled_reset>:
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	10 e0       	ldi	r17, 0x00	; 0
     556:	c0 e0       	ldi	r28, 0x00	; 0
     558:	d2 e1       	ldi	r29, 0x12	; 18
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	81 2f       	mov	r24, r17
     55e:	0e 94 9b 02 	call	0x536	; 0x536 <oled_pos>
     562:	80 e8       	ldi	r24, 0x80	; 128
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	18 82       	st	Y, r1
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	e9 f7       	brne	.-6      	; 0x566 <oled_reset+0x18>
     56c:	1f 5f       	subi	r17, 0xFF	; 255
     56e:	18 30       	cpi	r17, 0x08	; 8
     570:	a1 f7       	brne	.-24     	; 0x55a <oled_reset+0xc>
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	08 95       	ret

0000057a <oled_home>:
	oled_write_d(0b00011000);
	oled_write_d(0b00011000);
}

void oled_home() {
	oled_pos(0,0);
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 9b 02 	call	0x536	; 0x536 <oled_pos>
     582:	08 95       	ret

00000584 <oled_init>:
#define OLED_COMMAND_BASE_ADDRESS 0x1000
#define OLED_DATA_BASE_ADDRESS 0x1200
//#include <util/delay.h>
void oled_write_c(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
     584:	e0 e0       	ldi	r30, 0x00	; 0
     586:	f0 e1       	ldi	r31, 0x10	; 16
     588:	8e ea       	ldi	r24, 0xAE	; 174
     58a:	80 83       	st	Z, r24
     58c:	81 ea       	ldi	r24, 0xA1	; 161
     58e:	80 83       	st	Z, r24
     590:	8a ed       	ldi	r24, 0xDA	; 218
     592:	80 83       	st	Z, r24
     594:	82 e1       	ldi	r24, 0x12	; 18
     596:	80 83       	st	Z, r24
     598:	88 ec       	ldi	r24, 0xC8	; 200
     59a:	80 83       	st	Z, r24
     59c:	88 ea       	ldi	r24, 0xA8	; 168
     59e:	80 83       	st	Z, r24
     5a0:	8f e3       	ldi	r24, 0x3F	; 63
     5a2:	80 83       	st	Z, r24
     5a4:	85 ed       	ldi	r24, 0xD5	; 213
     5a6:	80 83       	st	Z, r24
     5a8:	80 e8       	ldi	r24, 0x80	; 128
     5aa:	80 83       	st	Z, r24
     5ac:	81 e8       	ldi	r24, 0x81	; 129
     5ae:	80 83       	st	Z, r24
     5b0:	80 e5       	ldi	r24, 0x50	; 80
     5b2:	80 83       	st	Z, r24
     5b4:	89 ed       	ldi	r24, 0xD9	; 217
     5b6:	80 83       	st	Z, r24
     5b8:	81 e2       	ldi	r24, 0x21	; 33
     5ba:	80 83       	st	Z, r24
     5bc:	80 e2       	ldi	r24, 0x20	; 32
     5be:	80 83       	st	Z, r24
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	80 83       	st	Z, r24
     5c4:	8b ed       	ldi	r24, 0xDB	; 219
     5c6:	80 83       	st	Z, r24
     5c8:	80 e3       	ldi	r24, 0x30	; 48
     5ca:	80 83       	st	Z, r24
     5cc:	8d ea       	ldi	r24, 0xAD	; 173
     5ce:	80 83       	st	Z, r24
     5d0:	10 82       	st	Z, r1
     5d2:	84 ea       	ldi	r24, 0xA4	; 164
     5d4:	80 83       	st	Z, r24
     5d6:	86 ea       	ldi	r24, 0xA6	; 166
     5d8:	80 83       	st	Z, r24
     5da:	8f ea       	ldi	r24, 0xAF	; 175
     5dc:	80 83       	st	Z, r24
	oled_write_c(0xa6); //set normal display
	oled_write_c(0xaf); // display on
	
	//oled_write_c(0xa5);
	//_delay_ms(100);
	oled_reset();
     5de:	0e 94 a7 02 	call	0x54e	; 0x54e <oled_reset>
	oled_home();
     5e2:	0e 94 bd 02 	call	0x57a	; 0x57a <oled_home>
     5e6:	08 95       	ret

000005e8 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "SPI.h"

	void setupInit(void){
	xmem_init();
     5e8:	0e 94 a1 03 	call	0x742	; 0x742 <xmem_init>
	USART_init(MYUBRR);
     5ec:	8f e1       	ldi	r24, 0x1F	; 31
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 90 03 	call	0x720	; 0x720 <USART_init>
	adcInit();
     5f4:	0e 94 6e 00 	call	0xdc	; 0xdc <adcInit>
	joystickInit();
     5f8:	0e 94 76 01 	call	0x2ec	; 0x2ec <joystickInit>
	touchButton_init();
     5fc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <touchButton_init>
	oled_init();
     600:	0e 94 c2 02 	call	0x584	; 0x584 <oled_init>
	timer_init();
     604:	0e 94 53 03 	call	0x6a6	; 0x6a6 <timer_init>
	sleep_init();
     608:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sleep_init>
	menuInit();
     60c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <menuInit>
	SPI_MasterInit();
     610:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_MasterInit>
     614:	08 95       	ret

00000616 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     620:	c0 ed       	ldi	r28, 0xD0	; 208
     622:	d1 e0       	ldi	r29, 0x01	; 1
     624:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	//select slave output
	DDRB = (1 << PB4);
     634:	80 e1       	ldi	r24, 0x10	; 16
     636:	87 bb       	out	0x17, r24	; 23
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5) | (1 << PB7);
     638:	80 ea       	ldi	r24, 0xA0	; 160
     63a:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     63c:	81 e5       	ldi	r24, 0x51	; 81
     63e:	8d b9       	out	0x0d, r24	; 13
     640:	08 95       	ret

00000642 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	2f 93       	push	r18
     64e:	3f 93       	push	r19
     650:	4f 93       	push	r20
     652:	5f 93       	push	r21
     654:	6f 93       	push	r22
     656:	7f 93       	push	r23
     658:	8f 93       	push	r24
     65a:	9f 93       	push	r25
     65c:	af 93       	push	r26
     65e:	bf 93       	push	r27
     660:	ef 93       	push	r30
     662:	ff 93       	push	r31
	cli();
     664:	f8 94       	cli
	TCNT1 = 0x00;
     666:	1d bc       	out	0x2d, r1	; 45
     668:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     66a:	86 ec       	ldi	r24, 0xC6	; 198
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 81 01 	call	0x302	; 0x302 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     672:	80 ed       	ldi	r24, 0xD0	; 208
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 0b 03 	call	0x616	; 0x616 <slider_readPosition>
	touchButton_readButtons(&buttons);
     67a:	8e ec       	ldi	r24, 0xCE	; 206
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <touchButton_readButtons>
	sei();
     682:	78 94       	sei
}
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	7f 91       	pop	r23
     692:	6f 91       	pop	r22
     694:	5f 91       	pop	r21
     696:	4f 91       	pop	r20
     698:	3f 91       	pop	r19
     69a:	2f 91       	pop	r18
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <timer_init>:
}

*/
void timer_init() {
	//Disable global interrupts
	cli();
     6a6:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     6a8:	89 b7       	in	r24, 0x39	; 57
     6aa:	80 62       	ori	r24, 0x20	; 32
     6ac:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     6ae:	1d bc       	out	0x2d, r1	; 45
     6b0:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     6b2:	80 e3       	ldi	r24, 0x30	; 48
     6b4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     6b6:	85 e0       	ldi	r24, 0x05	; 5
     6b8:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     6ba:	80 ef       	ldi	r24, 0xF0	; 240
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	99 bd       	out	0x29, r25	; 41
     6c0:	88 bd       	out	0x28, r24	; 40
	
	OCR0 = TIMER0_RESET;
	*/
	
	//Enable global interrupts
	sei();
     6c2:	78 94       	sei
     6c4:	08 95       	ret

000006c6 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     6c6:	36 b3       	in	r19, 0x16	; 22
     6c8:	26 b3       	in	r18, 0x16	; 22
     6ca:	47 b3       	in	r20, 0x17	; 23
     6cc:	32 70       	andi	r19, 0x02	; 2
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	bc 01       	movw	r22, r24
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <touchButton_init+0x14>
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	3a 95       	dec	r19
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <touchButton_init+0x10>
     6de:	24 70       	andi	r18, 0x04	; 4
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <touchButton_init+0x20>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	2a 95       	dec	r18
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <touchButton_init+0x1c>
     6ea:	86 2b       	or	r24, r22
     6ec:	97 2b       	or	r25, r23
     6ee:	80 95       	com	r24
     6f0:	90 95       	com	r25
     6f2:	84 23       	and	r24, r20
     6f4:	87 bb       	out	0x17, r24	; 23
     6f6:	08 95       	ret

000006f8 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     6f8:	86 b3       	in	r24, 0x16	; 22
     6fa:	ee ec       	ldi	r30, 0xCE	; 206
     6fc:	f1 e0       	ldi	r31, 0x01	; 1
     6fe:	86 95       	lsr	r24
     700:	81 70       	andi	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     704:	86 b3       	in	r24, 0x16	; 22
     706:	82 fb       	bst	r24, 2
     708:	88 27       	eor	r24, r24
     70a:	80 f9       	bld	r24, 0
     70c:	81 83       	std	Z+1, r24	; 0x01
     70e:	08 95       	ret

00000710 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     710:	5d 9b       	sbis	0x0b, 5	; 11
     712:	fe cf       	rjmp	.-4      	; 0x710 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     714:	8c b9       	out	0x0c, r24	; 12
     716:	08 95       	ret

00000718 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     718:	5f 9b       	sbis	0x0b, 7	; 11
     71a:	fe cf       	rjmp	.-4      	; 0x718 <USART_receiveChar>
		;
	
	return UDR0;
     71c:	8c b1       	in	r24, 0x0c	; 12
     71e:	08 95       	ret

00000720 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     720:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     722:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     724:	88 e1       	ldi	r24, 0x18	; 24
     726:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     728:	8e e8       	ldi	r24, 0x8E	; 142
     72a:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     72c:	6c e8       	ldi	r22, 0x8C	; 140
     72e:	73 e0       	ldi	r23, 0x03	; 3
     730:	88 e8       	ldi	r24, 0x88	; 136
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 f9 07 	call	0xff2	; 0xff2 <fdevopen>
     738:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <uart+0x1>
     73c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <uart>
     740:	08 95       	ret

00000742 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     742:	85 b7       	in	r24, 0x35	; 53
     744:	80 68       	ori	r24, 0x80	; 128
     746:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     748:	80 b7       	in	r24, 0x30	; 48
     74a:	88 60       	ori	r24, 0x08	; 8
     74c:	80 bf       	out	0x30, r24	; 48
     74e:	08 95       	ret
     750:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
     754:	60 f0       	brcs	.+24     	; 0x76e <xmem_init+0x2c>
     756:	80 e8       	ldi	r24, 0x80	; 128
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	09 f4       	brne	.+2      	; 0x75e <xmem_init+0x1c>
     75c:	9e ef       	ldi	r25, 0xFE	; 254
     75e:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
     762:	28 f0       	brcs	.+10     	; 0x76e <xmem_init+0x2c>
     764:	40 e8       	ldi	r20, 0x80	; 128
     766:	51 e0       	ldi	r21, 0x01	; 1
     768:	71 f4       	brne	.+28     	; 0x786 <atan2+0x10>
     76a:	5e ef       	ldi	r21, 0xFE	; 254
     76c:	0c c0       	rjmp	.+24     	; 0x786 <atan2+0x10>
     76e:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
     772:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_zero>

00000776 <atan2>:
     776:	e9 2f       	mov	r30, r25
     778:	e0 78       	andi	r30, 0x80	; 128
     77a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_split3>
     77e:	40 f3       	brcs	.-48     	; 0x750 <xmem_init+0xe>
     780:	09 2e       	mov	r0, r25
     782:	05 2a       	or	r0, r21
     784:	b1 f3       	breq	.-20     	; 0x772 <xmem_init+0x30>
     786:	26 17       	cp	r18, r22
     788:	37 07       	cpc	r19, r23
     78a:	48 07       	cpc	r20, r24
     78c:	59 07       	cpc	r21, r25
     78e:	38 f0       	brcs	.+14     	; 0x79e <atan2+0x28>
     790:	0e 2e       	mov	r0, r30
     792:	07 f8       	bld	r0, 7
     794:	e0 25       	eor	r30, r0
     796:	69 f0       	breq	.+26     	; 0x7b2 <atan2+0x3c>
     798:	e0 25       	eor	r30, r0
     79a:	e0 64       	ori	r30, 0x40	; 64
     79c:	0a c0       	rjmp	.+20     	; 0x7b2 <atan2+0x3c>
     79e:	ef 63       	ori	r30, 0x3F	; 63
     7a0:	07 f8       	bld	r0, 7
     7a2:	00 94       	com	r0
     7a4:	07 fa       	bst	r0, 7
     7a6:	db 01       	movw	r26, r22
     7a8:	b9 01       	movw	r22, r18
     7aa:	9d 01       	movw	r18, r26
     7ac:	dc 01       	movw	r26, r24
     7ae:	ca 01       	movw	r24, r20
     7b0:	ad 01       	movw	r20, r26
     7b2:	ef 93       	push	r30
     7b4:	0e 94 31 04 	call	0x862	; 0x862 <__divsf3_pse>
     7b8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_round>
     7bc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atan>
     7c0:	5f 91       	pop	r21
     7c2:	55 23       	and	r21, r21
     7c4:	39 f0       	breq	.+14     	; 0x7d4 <atan2+0x5e>
     7c6:	2b ed       	ldi	r18, 0xDB	; 219
     7c8:	3f e0       	ldi	r19, 0x0F	; 15
     7ca:	49 e4       	ldi	r20, 0x49	; 73
     7cc:	50 fd       	sbrc	r21, 0
     7ce:	49 ec       	ldi	r20, 0xC9	; 201
     7d0:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__addsf3>
     7d4:	08 95       	ret

000007d6 <atan>:
     7d6:	df 93       	push	r29
     7d8:	dd 27       	eor	r29, r29
     7da:	b9 2f       	mov	r27, r25
     7dc:	bf 77       	andi	r27, 0x7F	; 127
     7de:	40 e8       	ldi	r20, 0x80	; 128
     7e0:	5f e3       	ldi	r21, 0x3F	; 63
     7e2:	16 16       	cp	r1, r22
     7e4:	17 06       	cpc	r1, r23
     7e6:	48 07       	cpc	r20, r24
     7e8:	5b 07       	cpc	r21, r27
     7ea:	18 f4       	brcc	.+6      	; 0x7f2 <atan+0x1c>
     7ec:	d9 2f       	mov	r29, r25
     7ee:	0e 94 77 05 	call	0xaee	; 0xaee <inverse>
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	7f 93       	push	r23
     7f8:	6f 93       	push	r22
     7fa:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <square>
     7fe:	e0 e7       	ldi	r30, 0x70	; 112
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_powser>
     806:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_round>
     80a:	2f 91       	pop	r18
     80c:	3f 91       	pop	r19
     80e:	4f 91       	pop	r20
     810:	5f 91       	pop	r21
     812:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3x>
     816:	dd 23       	and	r29, r29
     818:	51 f0       	breq	.+20     	; 0x82e <atan+0x58>
     81a:	90 58       	subi	r25, 0x80	; 128
     81c:	a2 ea       	ldi	r26, 0xA2	; 162
     81e:	2a ed       	ldi	r18, 0xDA	; 218
     820:	3f e0       	ldi	r19, 0x0F	; 15
     822:	49 ec       	ldi	r20, 0xC9	; 201
     824:	5f e3       	ldi	r21, 0x3F	; 63
     826:	d0 78       	andi	r29, 0x80	; 128
     828:	5d 27       	eor	r21, r29
     82a:	0e 94 08 06 	call	0xc10	; 0xc10 <__addsf3x>
     82e:	df 91       	pop	r29
     830:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_round>

00000834 <__divsf3>:
     834:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3x>
     838:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_round>
     83c:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
     840:	58 f0       	brcs	.+22     	; 0x858 <__divsf3+0x24>
     842:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
     846:	40 f0       	brcs	.+16     	; 0x858 <__divsf3+0x24>
     848:	29 f4       	brne	.+10     	; 0x854 <__divsf3+0x20>
     84a:	5f 3f       	cpi	r21, 0xFF	; 255
     84c:	29 f0       	breq	.+10     	; 0x858 <__divsf3+0x24>
     84e:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
     852:	51 11       	cpse	r21, r1
     854:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>
     858:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>

0000085c <__divsf3x>:
     85c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_split3>
     860:	68 f3       	brcs	.-38     	; 0x83c <__divsf3+0x8>

00000862 <__divsf3_pse>:
     862:	99 23       	and	r25, r25
     864:	b1 f3       	breq	.-20     	; 0x852 <__divsf3+0x1e>
     866:	55 23       	and	r21, r21
     868:	91 f3       	breq	.-28     	; 0x84e <__divsf3+0x1a>
     86a:	95 1b       	sub	r25, r21
     86c:	55 0b       	sbc	r21, r21
     86e:	bb 27       	eor	r27, r27
     870:	aa 27       	eor	r26, r26
     872:	62 17       	cp	r22, r18
     874:	73 07       	cpc	r23, r19
     876:	84 07       	cpc	r24, r20
     878:	38 f0       	brcs	.+14     	; 0x888 <__divsf3_pse+0x26>
     87a:	9f 5f       	subi	r25, 0xFF	; 255
     87c:	5f 4f       	sbci	r21, 0xFF	; 255
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	44 1f       	adc	r20, r20
     884:	aa 1f       	adc	r26, r26
     886:	a9 f3       	breq	.-22     	; 0x872 <__divsf3_pse+0x10>
     888:	35 d0       	rcall	.+106    	; 0x8f4 <__divsf3_pse+0x92>
     88a:	0e 2e       	mov	r0, r30
     88c:	3a f0       	brmi	.+14     	; 0x89c <__divsf3_pse+0x3a>
     88e:	e0 e8       	ldi	r30, 0x80	; 128
     890:	32 d0       	rcall	.+100    	; 0x8f6 <__divsf3_pse+0x94>
     892:	91 50       	subi	r25, 0x01	; 1
     894:	50 40       	sbci	r21, 0x00	; 0
     896:	e6 95       	lsr	r30
     898:	00 1c       	adc	r0, r0
     89a:	ca f7       	brpl	.-14     	; 0x88e <__divsf3_pse+0x2c>
     89c:	2b d0       	rcall	.+86     	; 0x8f4 <__divsf3_pse+0x92>
     89e:	fe 2f       	mov	r31, r30
     8a0:	29 d0       	rcall	.+82     	; 0x8f4 <__divsf3_pse+0x92>
     8a2:	66 0f       	add	r22, r22
     8a4:	77 1f       	adc	r23, r23
     8a6:	88 1f       	adc	r24, r24
     8a8:	bb 1f       	adc	r27, r27
     8aa:	26 17       	cp	r18, r22
     8ac:	37 07       	cpc	r19, r23
     8ae:	48 07       	cpc	r20, r24
     8b0:	ab 07       	cpc	r26, r27
     8b2:	b0 e8       	ldi	r27, 0x80	; 128
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <__divsf3_pse+0x56>
     8b6:	bb 0b       	sbc	r27, r27
     8b8:	80 2d       	mov	r24, r0
     8ba:	bf 01       	movw	r22, r30
     8bc:	ff 27       	eor	r31, r31
     8be:	93 58       	subi	r25, 0x83	; 131
     8c0:	5f 4f       	sbci	r21, 0xFF	; 255
     8c2:	3a f0       	brmi	.+14     	; 0x8d2 <__divsf3_pse+0x70>
     8c4:	9e 3f       	cpi	r25, 0xFE	; 254
     8c6:	51 05       	cpc	r21, r1
     8c8:	78 f0       	brcs	.+30     	; 0x8e8 <__divsf3_pse+0x86>
     8ca:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
     8ce:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>
     8d2:	5f 3f       	cpi	r21, 0xFF	; 255
     8d4:	e4 f3       	brlt	.-8      	; 0x8ce <__divsf3_pse+0x6c>
     8d6:	98 3e       	cpi	r25, 0xE8	; 232
     8d8:	d4 f3       	brlt	.-12     	; 0x8ce <__divsf3_pse+0x6c>
     8da:	86 95       	lsr	r24
     8dc:	77 95       	ror	r23
     8de:	67 95       	ror	r22
     8e0:	b7 95       	ror	r27
     8e2:	f7 95       	ror	r31
     8e4:	9f 5f       	subi	r25, 0xFF	; 255
     8e6:	c9 f7       	brne	.-14     	; 0x8da <__divsf3_pse+0x78>
     8e8:	88 0f       	add	r24, r24
     8ea:	91 1d       	adc	r25, r1
     8ec:	96 95       	lsr	r25
     8ee:	87 95       	ror	r24
     8f0:	97 f9       	bld	r25, 7
     8f2:	08 95       	ret
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	66 0f       	add	r22, r22
     8f8:	77 1f       	adc	r23, r23
     8fa:	88 1f       	adc	r24, r24
     8fc:	bb 1f       	adc	r27, r27
     8fe:	62 17       	cp	r22, r18
     900:	73 07       	cpc	r23, r19
     902:	84 07       	cpc	r24, r20
     904:	ba 07       	cpc	r27, r26
     906:	20 f0       	brcs	.+8      	; 0x910 <__divsf3_pse+0xae>
     908:	62 1b       	sub	r22, r18
     90a:	73 0b       	sbc	r23, r19
     90c:	84 0b       	sbc	r24, r20
     90e:	ba 0b       	sbc	r27, r26
     910:	ee 1f       	adc	r30, r30
     912:	88 f7       	brcc	.-30     	; 0x8f6 <__divsf3_pse+0x94>
     914:	e0 95       	com	r30
     916:	08 95       	ret

00000918 <__fixsfsi>:
     918:	0e 94 93 04 	call	0x926	; 0x926 <__fixunssfsi>
     91c:	68 94       	set
     91e:	b1 11       	cpse	r27, r1
     920:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>
     924:	08 95       	ret

00000926 <__fixunssfsi>:
     926:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_splitA>
     92a:	88 f0       	brcs	.+34     	; 0x94e <__fixunssfsi+0x28>
     92c:	9f 57       	subi	r25, 0x7F	; 127
     92e:	98 f0       	brcs	.+38     	; 0x956 <__fixunssfsi+0x30>
     930:	b9 2f       	mov	r27, r25
     932:	99 27       	eor	r25, r25
     934:	b7 51       	subi	r27, 0x17	; 23
     936:	b0 f0       	brcs	.+44     	; 0x964 <__fixunssfsi+0x3e>
     938:	e1 f0       	breq	.+56     	; 0x972 <__fixunssfsi+0x4c>
     93a:	66 0f       	add	r22, r22
     93c:	77 1f       	adc	r23, r23
     93e:	88 1f       	adc	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	1a f0       	brmi	.+6      	; 0x94a <__fixunssfsi+0x24>
     944:	ba 95       	dec	r27
     946:	c9 f7       	brne	.-14     	; 0x93a <__fixunssfsi+0x14>
     948:	14 c0       	rjmp	.+40     	; 0x972 <__fixunssfsi+0x4c>
     94a:	b1 30       	cpi	r27, 0x01	; 1
     94c:	91 f0       	breq	.+36     	; 0x972 <__fixunssfsi+0x4c>
     94e:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_zero>
     952:	b1 e0       	ldi	r27, 0x01	; 1
     954:	08 95       	ret
     956:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_zero>
     95a:	67 2f       	mov	r22, r23
     95c:	78 2f       	mov	r23, r24
     95e:	88 27       	eor	r24, r24
     960:	b8 5f       	subi	r27, 0xF8	; 248
     962:	39 f0       	breq	.+14     	; 0x972 <__fixunssfsi+0x4c>
     964:	b9 3f       	cpi	r27, 0xF9	; 249
     966:	cc f3       	brlt	.-14     	; 0x95a <__fixunssfsi+0x34>
     968:	86 95       	lsr	r24
     96a:	77 95       	ror	r23
     96c:	67 95       	ror	r22
     96e:	b3 95       	inc	r27
     970:	d9 f7       	brne	.-10     	; 0x968 <__fixunssfsi+0x42>
     972:	3e f4       	brtc	.+14     	; 0x982 <__fixunssfsi+0x5c>
     974:	90 95       	com	r25
     976:	80 95       	com	r24
     978:	70 95       	com	r23
     97a:	61 95       	neg	r22
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	8f 4f       	sbci	r24, 0xFF	; 255
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	08 95       	ret

00000984 <__floatunsisf>:
     984:	e8 94       	clt
     986:	09 c0       	rjmp	.+18     	; 0x99a <__floatsisf+0x12>

00000988 <__floatsisf>:
     988:	97 fb       	bst	r25, 7
     98a:	3e f4       	brtc	.+14     	; 0x99a <__floatsisf+0x12>
     98c:	90 95       	com	r25
     98e:	80 95       	com	r24
     990:	70 95       	com	r23
     992:	61 95       	neg	r22
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	8f 4f       	sbci	r24, 0xFF	; 255
     998:	9f 4f       	sbci	r25, 0xFF	; 255
     99a:	99 23       	and	r25, r25
     99c:	a9 f0       	breq	.+42     	; 0x9c8 <__floatsisf+0x40>
     99e:	f9 2f       	mov	r31, r25
     9a0:	96 e9       	ldi	r25, 0x96	; 150
     9a2:	bb 27       	eor	r27, r27
     9a4:	93 95       	inc	r25
     9a6:	f6 95       	lsr	r31
     9a8:	87 95       	ror	r24
     9aa:	77 95       	ror	r23
     9ac:	67 95       	ror	r22
     9ae:	b7 95       	ror	r27
     9b0:	f1 11       	cpse	r31, r1
     9b2:	f8 cf       	rjmp	.-16     	; 0x9a4 <__floatsisf+0x1c>
     9b4:	fa f4       	brpl	.+62     	; 0x9f4 <__floatsisf+0x6c>
     9b6:	bb 0f       	add	r27, r27
     9b8:	11 f4       	brne	.+4      	; 0x9be <__floatsisf+0x36>
     9ba:	60 ff       	sbrs	r22, 0
     9bc:	1b c0       	rjmp	.+54     	; 0x9f4 <__floatsisf+0x6c>
     9be:	6f 5f       	subi	r22, 0xFF	; 255
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	8f 4f       	sbci	r24, 0xFF	; 255
     9c4:	9f 4f       	sbci	r25, 0xFF	; 255
     9c6:	16 c0       	rjmp	.+44     	; 0x9f4 <__floatsisf+0x6c>
     9c8:	88 23       	and	r24, r24
     9ca:	11 f0       	breq	.+4      	; 0x9d0 <__floatsisf+0x48>
     9cc:	96 e9       	ldi	r25, 0x96	; 150
     9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <__floatsisf+0x6a>
     9d0:	77 23       	and	r23, r23
     9d2:	21 f0       	breq	.+8      	; 0x9dc <__floatsisf+0x54>
     9d4:	9e e8       	ldi	r25, 0x8E	; 142
     9d6:	87 2f       	mov	r24, r23
     9d8:	76 2f       	mov	r23, r22
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <__floatsisf+0x5e>
     9dc:	66 23       	and	r22, r22
     9de:	71 f0       	breq	.+28     	; 0x9fc <__floatsisf+0x74>
     9e0:	96 e8       	ldi	r25, 0x86	; 134
     9e2:	86 2f       	mov	r24, r22
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	2a f0       	brmi	.+10     	; 0x9f4 <__floatsisf+0x6c>
     9ea:	9a 95       	dec	r25
     9ec:	66 0f       	add	r22, r22
     9ee:	77 1f       	adc	r23, r23
     9f0:	88 1f       	adc	r24, r24
     9f2:	da f7       	brpl	.-10     	; 0x9ea <__floatsisf+0x62>
     9f4:	88 0f       	add	r24, r24
     9f6:	96 95       	lsr	r25
     9f8:	87 95       	ror	r24
     9fa:	97 f9       	bld	r25, 7
     9fc:	08 95       	ret

000009fe <__fp_inf>:
     9fe:	97 f9       	bld	r25, 7
     a00:	9f 67       	ori	r25, 0x7F	; 127
     a02:	80 e8       	ldi	r24, 0x80	; 128
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	08 95       	ret

00000a0a <__fp_nan>:
     a0a:	9f ef       	ldi	r25, 0xFF	; 255
     a0c:	80 ec       	ldi	r24, 0xC0	; 192
     a0e:	08 95       	ret

00000a10 <__fp_powser>:
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	1f 93       	push	r17
     a16:	0f 93       	push	r16
     a18:	ff 92       	push	r15
     a1a:	ef 92       	push	r14
     a1c:	df 92       	push	r13
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	68 94       	set
     a24:	06 c0       	rjmp	.+12     	; 0xa32 <__fp_powser+0x22>
     a26:	da 2e       	mov	r13, r26
     a28:	ef 01       	movw	r28, r30
     a2a:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3x>
     a2e:	fe 01       	movw	r30, r28
     a30:	e8 94       	clt
     a32:	a5 91       	lpm	r26, Z+
     a34:	25 91       	lpm	r18, Z+
     a36:	35 91       	lpm	r19, Z+
     a38:	45 91       	lpm	r20, Z+
     a3a:	55 91       	lpm	r21, Z+
     a3c:	a6 f3       	brts	.-24     	; 0xa26 <__fp_powser+0x16>
     a3e:	ef 01       	movw	r28, r30
     a40:	0e 94 08 06 	call	0xc10	; 0xc10 <__addsf3x>
     a44:	fe 01       	movw	r30, r28
     a46:	97 01       	movw	r18, r14
     a48:	a8 01       	movw	r20, r16
     a4a:	da 94       	dec	r13
     a4c:	69 f7       	brne	.-38     	; 0xa28 <__fp_powser+0x18>
     a4e:	df 90       	pop	r13
     a50:	ef 90       	pop	r14
     a52:	ff 90       	pop	r15
     a54:	0f 91       	pop	r16
     a56:	1f 91       	pop	r17
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	08 95       	ret

00000a5e <__fp_pscA>:
     a5e:	00 24       	eor	r0, r0
     a60:	0a 94       	dec	r0
     a62:	16 16       	cp	r1, r22
     a64:	17 06       	cpc	r1, r23
     a66:	18 06       	cpc	r1, r24
     a68:	09 06       	cpc	r0, r25
     a6a:	08 95       	ret

00000a6c <__fp_pscB>:
     a6c:	00 24       	eor	r0, r0
     a6e:	0a 94       	dec	r0
     a70:	12 16       	cp	r1, r18
     a72:	13 06       	cpc	r1, r19
     a74:	14 06       	cpc	r1, r20
     a76:	05 06       	cpc	r0, r21
     a78:	08 95       	ret

00000a7a <__fp_round>:
     a7a:	09 2e       	mov	r0, r25
     a7c:	03 94       	inc	r0
     a7e:	00 0c       	add	r0, r0
     a80:	11 f4       	brne	.+4      	; 0xa86 <__fp_round+0xc>
     a82:	88 23       	and	r24, r24
     a84:	52 f0       	brmi	.+20     	; 0xa9a <__fp_round+0x20>
     a86:	bb 0f       	add	r27, r27
     a88:	40 f4       	brcc	.+16     	; 0xa9a <__fp_round+0x20>
     a8a:	bf 2b       	or	r27, r31
     a8c:	11 f4       	brne	.+4      	; 0xa92 <__fp_round+0x18>
     a8e:	60 ff       	sbrs	r22, 0
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__fp_round+0x20>
     a92:	6f 5f       	subi	r22, 0xFF	; 255
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	8f 4f       	sbci	r24, 0xFF	; 255
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	08 95       	ret

00000a9c <__fp_split3>:
     a9c:	57 fd       	sbrc	r21, 7
     a9e:	90 58       	subi	r25, 0x80	; 128
     aa0:	44 0f       	add	r20, r20
     aa2:	55 1f       	adc	r21, r21
     aa4:	59 f0       	breq	.+22     	; 0xabc <__fp_splitA+0x10>
     aa6:	5f 3f       	cpi	r21, 0xFF	; 255
     aa8:	71 f0       	breq	.+28     	; 0xac6 <__fp_splitA+0x1a>
     aaa:	47 95       	ror	r20

00000aac <__fp_splitA>:
     aac:	88 0f       	add	r24, r24
     aae:	97 fb       	bst	r25, 7
     ab0:	99 1f       	adc	r25, r25
     ab2:	61 f0       	breq	.+24     	; 0xacc <__fp_splitA+0x20>
     ab4:	9f 3f       	cpi	r25, 0xFF	; 255
     ab6:	79 f0       	breq	.+30     	; 0xad6 <__fp_splitA+0x2a>
     ab8:	87 95       	ror	r24
     aba:	08 95       	ret
     abc:	12 16       	cp	r1, r18
     abe:	13 06       	cpc	r1, r19
     ac0:	14 06       	cpc	r1, r20
     ac2:	55 1f       	adc	r21, r21
     ac4:	f2 cf       	rjmp	.-28     	; 0xaaa <__fp_split3+0xe>
     ac6:	46 95       	lsr	r20
     ac8:	f1 df       	rcall	.-30     	; 0xaac <__fp_splitA>
     aca:	08 c0       	rjmp	.+16     	; 0xadc <__fp_splitA+0x30>
     acc:	16 16       	cp	r1, r22
     ace:	17 06       	cpc	r1, r23
     ad0:	18 06       	cpc	r1, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	f1 cf       	rjmp	.-30     	; 0xab8 <__fp_splitA+0xc>
     ad6:	86 95       	lsr	r24
     ad8:	71 05       	cpc	r23, r1
     ada:	61 05       	cpc	r22, r1
     adc:	08 94       	sec
     ade:	08 95       	ret

00000ae0 <__fp_zero>:
     ae0:	e8 94       	clt

00000ae2 <__fp_szero>:
     ae2:	bb 27       	eor	r27, r27
     ae4:	66 27       	eor	r22, r22
     ae6:	77 27       	eor	r23, r23
     ae8:	cb 01       	movw	r24, r22
     aea:	97 f9       	bld	r25, 7
     aec:	08 95       	ret

00000aee <inverse>:
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 e8       	ldi	r24, 0x80	; 128
     af8:	9f e3       	ldi	r25, 0x3F	; 63
     afa:	0c 94 1a 04 	jmp	0x834	; 0x834 <__divsf3>

00000afe <__mulsf3>:
     afe:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3x>
     b02:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_round>
     b06:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
     b0a:	38 f0       	brcs	.+14     	; 0xb1a <__mulsf3+0x1c>
     b0c:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
     b10:	20 f0       	brcs	.+8      	; 0xb1a <__mulsf3+0x1c>
     b12:	95 23       	and	r25, r21
     b14:	11 f0       	breq	.+4      	; 0xb1a <__mulsf3+0x1c>
     b16:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
     b1a:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
     b1e:	11 24       	eor	r1, r1
     b20:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>

00000b24 <__mulsf3x>:
     b24:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_split3>
     b28:	70 f3       	brcs	.-36     	; 0xb06 <__mulsf3+0x8>

00000b2a <__mulsf3_pse>:
     b2a:	95 9f       	mul	r25, r21
     b2c:	c1 f3       	breq	.-16     	; 0xb1e <__mulsf3+0x20>
     b2e:	95 0f       	add	r25, r21
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	55 1f       	adc	r21, r21
     b34:	62 9f       	mul	r22, r18
     b36:	f0 01       	movw	r30, r0
     b38:	72 9f       	mul	r23, r18
     b3a:	bb 27       	eor	r27, r27
     b3c:	f0 0d       	add	r31, r0
     b3e:	b1 1d       	adc	r27, r1
     b40:	63 9f       	mul	r22, r19
     b42:	aa 27       	eor	r26, r26
     b44:	f0 0d       	add	r31, r0
     b46:	b1 1d       	adc	r27, r1
     b48:	aa 1f       	adc	r26, r26
     b4a:	64 9f       	mul	r22, r20
     b4c:	66 27       	eor	r22, r22
     b4e:	b0 0d       	add	r27, r0
     b50:	a1 1d       	adc	r26, r1
     b52:	66 1f       	adc	r22, r22
     b54:	82 9f       	mul	r24, r18
     b56:	22 27       	eor	r18, r18
     b58:	b0 0d       	add	r27, r0
     b5a:	a1 1d       	adc	r26, r1
     b5c:	62 1f       	adc	r22, r18
     b5e:	73 9f       	mul	r23, r19
     b60:	b0 0d       	add	r27, r0
     b62:	a1 1d       	adc	r26, r1
     b64:	62 1f       	adc	r22, r18
     b66:	83 9f       	mul	r24, r19
     b68:	a0 0d       	add	r26, r0
     b6a:	61 1d       	adc	r22, r1
     b6c:	22 1f       	adc	r18, r18
     b6e:	74 9f       	mul	r23, r20
     b70:	33 27       	eor	r19, r19
     b72:	a0 0d       	add	r26, r0
     b74:	61 1d       	adc	r22, r1
     b76:	23 1f       	adc	r18, r19
     b78:	84 9f       	mul	r24, r20
     b7a:	60 0d       	add	r22, r0
     b7c:	21 1d       	adc	r18, r1
     b7e:	82 2f       	mov	r24, r18
     b80:	76 2f       	mov	r23, r22
     b82:	6a 2f       	mov	r22, r26
     b84:	11 24       	eor	r1, r1
     b86:	9f 57       	subi	r25, 0x7F	; 127
     b88:	50 40       	sbci	r21, 0x00	; 0
     b8a:	9a f0       	brmi	.+38     	; 0xbb2 <__mulsf3_pse+0x88>
     b8c:	f1 f0       	breq	.+60     	; 0xbca <__mulsf3_pse+0xa0>
     b8e:	88 23       	and	r24, r24
     b90:	4a f0       	brmi	.+18     	; 0xba4 <__mulsf3_pse+0x7a>
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	bb 1f       	adc	r27, r27
     b98:	66 1f       	adc	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	88 1f       	adc	r24, r24
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	50 40       	sbci	r21, 0x00	; 0
     ba2:	a9 f7       	brne	.-22     	; 0xb8e <__mulsf3_pse+0x64>
     ba4:	9e 3f       	cpi	r25, 0xFE	; 254
     ba6:	51 05       	cpc	r21, r1
     ba8:	80 f0       	brcs	.+32     	; 0xbca <__mulsf3_pse+0xa0>
     baa:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
     bae:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>
     bb2:	5f 3f       	cpi	r21, 0xFF	; 255
     bb4:	e4 f3       	brlt	.-8      	; 0xbae <__mulsf3_pse+0x84>
     bb6:	98 3e       	cpi	r25, 0xE8	; 232
     bb8:	d4 f3       	brlt	.-12     	; 0xbae <__mulsf3_pse+0x84>
     bba:	86 95       	lsr	r24
     bbc:	77 95       	ror	r23
     bbe:	67 95       	ror	r22
     bc0:	b7 95       	ror	r27
     bc2:	f7 95       	ror	r31
     bc4:	e7 95       	ror	r30
     bc6:	9f 5f       	subi	r25, 0xFF	; 255
     bc8:	c1 f7       	brne	.-16     	; 0xbba <__mulsf3_pse+0x90>
     bca:	fe 2b       	or	r31, r30
     bcc:	88 0f       	add	r24, r24
     bce:	91 1d       	adc	r25, r1
     bd0:	96 95       	lsr	r25
     bd2:	87 95       	ror	r24
     bd4:	97 f9       	bld	r25, 7
     bd6:	08 95       	ret

00000bd8 <square>:
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__mulsf3>

00000be0 <__subsf3>:
     be0:	50 58       	subi	r21, 0x80	; 128

00000be2 <__addsf3>:
     be2:	bb 27       	eor	r27, r27
     be4:	aa 27       	eor	r26, r26
     be6:	0e 94 08 06 	call	0xc10	; 0xc10 <__addsf3x>
     bea:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_round>
     bee:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
     bf2:	38 f0       	brcs	.+14     	; 0xc02 <__addsf3+0x20>
     bf4:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
     bf8:	20 f0       	brcs	.+8      	; 0xc02 <__addsf3+0x20>
     bfa:	39 f4       	brne	.+14     	; 0xc0a <__addsf3+0x28>
     bfc:	9f 3f       	cpi	r25, 0xFF	; 255
     bfe:	19 f4       	brne	.+6      	; 0xc06 <__addsf3+0x24>
     c00:	26 f4       	brtc	.+8      	; 0xc0a <__addsf3+0x28>
     c02:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
     c06:	0e f4       	brtc	.+2      	; 0xc0a <__addsf3+0x28>
     c08:	e0 95       	com	r30
     c0a:	e7 fb       	bst	r30, 7
     c0c:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>

00000c10 <__addsf3x>:
     c10:	e9 2f       	mov	r30, r25
     c12:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_split3>
     c16:	58 f3       	brcs	.-42     	; 0xbee <__addsf3+0xc>
     c18:	ba 17       	cp	r27, r26
     c1a:	62 07       	cpc	r22, r18
     c1c:	73 07       	cpc	r23, r19
     c1e:	84 07       	cpc	r24, r20
     c20:	95 07       	cpc	r25, r21
     c22:	20 f0       	brcs	.+8      	; 0xc2c <__addsf3x+0x1c>
     c24:	79 f4       	brne	.+30     	; 0xc44 <__addsf3x+0x34>
     c26:	a6 f5       	brtc	.+104    	; 0xc90 <__addsf3x+0x80>
     c28:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_zero>
     c2c:	0e f4       	brtc	.+2      	; 0xc30 <__addsf3x+0x20>
     c2e:	e0 95       	com	r30
     c30:	0b 2e       	mov	r0, r27
     c32:	ba 2f       	mov	r27, r26
     c34:	a0 2d       	mov	r26, r0
     c36:	0b 01       	movw	r0, r22
     c38:	b9 01       	movw	r22, r18
     c3a:	90 01       	movw	r18, r0
     c3c:	0c 01       	movw	r0, r24
     c3e:	ca 01       	movw	r24, r20
     c40:	a0 01       	movw	r20, r0
     c42:	11 24       	eor	r1, r1
     c44:	ff 27       	eor	r31, r31
     c46:	59 1b       	sub	r21, r25
     c48:	99 f0       	breq	.+38     	; 0xc70 <__addsf3x+0x60>
     c4a:	59 3f       	cpi	r21, 0xF9	; 249
     c4c:	50 f4       	brcc	.+20     	; 0xc62 <__addsf3x+0x52>
     c4e:	50 3e       	cpi	r21, 0xE0	; 224
     c50:	68 f1       	brcs	.+90     	; 0xcac <__addsf3x+0x9c>
     c52:	1a 16       	cp	r1, r26
     c54:	f0 40       	sbci	r31, 0x00	; 0
     c56:	a2 2f       	mov	r26, r18
     c58:	23 2f       	mov	r18, r19
     c5a:	34 2f       	mov	r19, r20
     c5c:	44 27       	eor	r20, r20
     c5e:	58 5f       	subi	r21, 0xF8	; 248
     c60:	f3 cf       	rjmp	.-26     	; 0xc48 <__addsf3x+0x38>
     c62:	46 95       	lsr	r20
     c64:	37 95       	ror	r19
     c66:	27 95       	ror	r18
     c68:	a7 95       	ror	r26
     c6a:	f0 40       	sbci	r31, 0x00	; 0
     c6c:	53 95       	inc	r21
     c6e:	c9 f7       	brne	.-14     	; 0xc62 <__addsf3x+0x52>
     c70:	7e f4       	brtc	.+30     	; 0xc90 <__addsf3x+0x80>
     c72:	1f 16       	cp	r1, r31
     c74:	ba 0b       	sbc	r27, r26
     c76:	62 0b       	sbc	r22, r18
     c78:	73 0b       	sbc	r23, r19
     c7a:	84 0b       	sbc	r24, r20
     c7c:	ba f0       	brmi	.+46     	; 0xcac <__addsf3x+0x9c>
     c7e:	91 50       	subi	r25, 0x01	; 1
     c80:	a1 f0       	breq	.+40     	; 0xcaa <__addsf3x+0x9a>
     c82:	ff 0f       	add	r31, r31
     c84:	bb 1f       	adc	r27, r27
     c86:	66 1f       	adc	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	88 1f       	adc	r24, r24
     c8c:	c2 f7       	brpl	.-16     	; 0xc7e <__addsf3x+0x6e>
     c8e:	0e c0       	rjmp	.+28     	; 0xcac <__addsf3x+0x9c>
     c90:	ba 0f       	add	r27, r26
     c92:	62 1f       	adc	r22, r18
     c94:	73 1f       	adc	r23, r19
     c96:	84 1f       	adc	r24, r20
     c98:	48 f4       	brcc	.+18     	; 0xcac <__addsf3x+0x9c>
     c9a:	87 95       	ror	r24
     c9c:	77 95       	ror	r23
     c9e:	67 95       	ror	r22
     ca0:	b7 95       	ror	r27
     ca2:	f7 95       	ror	r31
     ca4:	9e 3f       	cpi	r25, 0xFE	; 254
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <__addsf3x+0x9a>
     ca8:	b0 cf       	rjmp	.-160    	; 0xc0a <__addsf3+0x28>
     caa:	93 95       	inc	r25
     cac:	88 0f       	add	r24, r24
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <__addsf3x+0xa2>
     cb0:	99 27       	eor	r25, r25
     cb2:	ee 0f       	add	r30, r30
     cb4:	97 95       	ror	r25
     cb6:	87 95       	ror	r24
     cb8:	08 95       	ret

00000cba <__mulsi3>:
     cba:	db 01       	movw	r26, r22
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	0e 94 a3 06 	call	0xd46	; 0xd46 <__muluhisi3>
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	a2 9f       	mul	r26, r18
     cca:	80 0d       	add	r24, r0
     ccc:	91 1d       	adc	r25, r1
     cce:	a3 9f       	mul	r26, r19
     cd0:	90 0d       	add	r25, r0
     cd2:	b2 9f       	mul	r27, r18
     cd4:	90 0d       	add	r25, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	08 95       	ret

00000cda <__divmodhi4>:
     cda:	97 fb       	bst	r25, 7
     cdc:	07 2e       	mov	r0, r23
     cde:	16 f4       	brtc	.+4      	; 0xce4 <__divmodhi4+0xa>
     ce0:	00 94       	com	r0
     ce2:	07 d0       	rcall	.+14     	; 0xcf2 <__divmodhi4_neg1>
     ce4:	77 fd       	sbrc	r23, 7
     ce6:	09 d0       	rcall	.+18     	; 0xcfa <__divmodhi4_neg2>
     ce8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__udivmodhi4>
     cec:	07 fc       	sbrc	r0, 7
     cee:	05 d0       	rcall	.+10     	; 0xcfa <__divmodhi4_neg2>
     cf0:	3e f4       	brtc	.+14     	; 0xd00 <__divmodhi4_exit>

00000cf2 <__divmodhi4_neg1>:
     cf2:	90 95       	com	r25
     cf4:	81 95       	neg	r24
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	08 95       	ret

00000cfa <__divmodhi4_neg2>:
     cfa:	70 95       	com	r23
     cfc:	61 95       	neg	r22
     cfe:	7f 4f       	sbci	r23, 0xFF	; 255

00000d00 <__divmodhi4_exit>:
     d00:	08 95       	ret

00000d02 <__udivmodsi4>:
     d02:	a1 e2       	ldi	r26, 0x21	; 33
     d04:	1a 2e       	mov	r1, r26
     d06:	aa 1b       	sub	r26, r26
     d08:	bb 1b       	sub	r27, r27
     d0a:	fd 01       	movw	r30, r26
     d0c:	0d c0       	rjmp	.+26     	; 0xd28 <__udivmodsi4_ep>

00000d0e <__udivmodsi4_loop>:
     d0e:	aa 1f       	adc	r26, r26
     d10:	bb 1f       	adc	r27, r27
     d12:	ee 1f       	adc	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	a2 17       	cp	r26, r18
     d18:	b3 07       	cpc	r27, r19
     d1a:	e4 07       	cpc	r30, r20
     d1c:	f5 07       	cpc	r31, r21
     d1e:	20 f0       	brcs	.+8      	; 0xd28 <__udivmodsi4_ep>
     d20:	a2 1b       	sub	r26, r18
     d22:	b3 0b       	sbc	r27, r19
     d24:	e4 0b       	sbc	r30, r20
     d26:	f5 0b       	sbc	r31, r21

00000d28 <__udivmodsi4_ep>:
     d28:	66 1f       	adc	r22, r22
     d2a:	77 1f       	adc	r23, r23
     d2c:	88 1f       	adc	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	1a 94       	dec	r1
     d32:	69 f7       	brne	.-38     	; 0xd0e <__udivmodsi4_loop>
     d34:	60 95       	com	r22
     d36:	70 95       	com	r23
     d38:	80 95       	com	r24
     d3a:	90 95       	com	r25
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	bd 01       	movw	r22, r26
     d42:	cf 01       	movw	r24, r30
     d44:	08 95       	ret

00000d46 <__muluhisi3>:
     d46:	0e 94 c2 06 	call	0xd84	; 0xd84 <__umulhisi3>
     d4a:	a5 9f       	mul	r26, r21
     d4c:	90 0d       	add	r25, r0
     d4e:	b4 9f       	mul	r27, r20
     d50:	90 0d       	add	r25, r0
     d52:	a4 9f       	mul	r26, r20
     d54:	80 0d       	add	r24, r0
     d56:	91 1d       	adc	r25, r1
     d58:	11 24       	eor	r1, r1
     d5a:	08 95       	ret

00000d5c <__udivmodhi4>:
     d5c:	aa 1b       	sub	r26, r26
     d5e:	bb 1b       	sub	r27, r27
     d60:	51 e1       	ldi	r21, 0x11	; 17
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <__udivmodhi4_ep>

00000d64 <__udivmodhi4_loop>:
     d64:	aa 1f       	adc	r26, r26
     d66:	bb 1f       	adc	r27, r27
     d68:	a6 17       	cp	r26, r22
     d6a:	b7 07       	cpc	r27, r23
     d6c:	10 f0       	brcs	.+4      	; 0xd72 <__udivmodhi4_ep>
     d6e:	a6 1b       	sub	r26, r22
     d70:	b7 0b       	sbc	r27, r23

00000d72 <__udivmodhi4_ep>:
     d72:	88 1f       	adc	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	5a 95       	dec	r21
     d78:	a9 f7       	brne	.-22     	; 0xd64 <__udivmodhi4_loop>
     d7a:	80 95       	com	r24
     d7c:	90 95       	com	r25
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	08 95       	ret

00000d84 <__umulhisi3>:
     d84:	a2 9f       	mul	r26, r18
     d86:	b0 01       	movw	r22, r0
     d88:	b3 9f       	mul	r27, r19
     d8a:	c0 01       	movw	r24, r0
     d8c:	a3 9f       	mul	r26, r19
     d8e:	70 0d       	add	r23, r0
     d90:	81 1d       	adc	r24, r1
     d92:	11 24       	eor	r1, r1
     d94:	91 1d       	adc	r25, r1
     d96:	b2 9f       	mul	r27, r18
     d98:	70 0d       	add	r23, r0
     d9a:	81 1d       	adc	r24, r1
     d9c:	11 24       	eor	r1, r1
     d9e:	91 1d       	adc	r25, r1
     da0:	08 95       	ret

00000da2 <malloc>:
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	91 05       	cpc	r25, r1
     dae:	10 f4       	brcc	.+4      	; 0xdb4 <malloc+0x12>
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <__flp>
     db8:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <__flp+0x1>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	a0 e0       	ldi	r26, 0x00	; 0
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	30 97       	sbiw	r30, 0x00	; 0
     dc6:	19 f1       	breq	.+70     	; 0xe0e <malloc+0x6c>
     dc8:	40 81       	ld	r20, Z
     dca:	51 81       	ldd	r21, Z+1	; 0x01
     dcc:	02 81       	ldd	r16, Z+2	; 0x02
     dce:	13 81       	ldd	r17, Z+3	; 0x03
     dd0:	48 17       	cp	r20, r24
     dd2:	59 07       	cpc	r21, r25
     dd4:	c8 f0       	brcs	.+50     	; 0xe08 <malloc+0x66>
     dd6:	84 17       	cp	r24, r20
     dd8:	95 07       	cpc	r25, r21
     dda:	69 f4       	brne	.+26     	; 0xdf6 <malloc+0x54>
     ddc:	10 97       	sbiw	r26, 0x00	; 0
     dde:	31 f0       	breq	.+12     	; 0xdec <malloc+0x4a>
     de0:	12 96       	adiw	r26, 0x02	; 2
     de2:	0c 93       	st	X, r16
     de4:	12 97       	sbiw	r26, 0x02	; 2
     de6:	13 96       	adiw	r26, 0x03	; 3
     de8:	1c 93       	st	X, r17
     dea:	27 c0       	rjmp	.+78     	; 0xe3a <malloc+0x98>
     dec:	00 93 d8 01 	sts	0x01D8, r16	; 0x8001d8 <__flp>
     df0:	10 93 d9 01 	sts	0x01D9, r17	; 0x8001d9 <__flp+0x1>
     df4:	22 c0       	rjmp	.+68     	; 0xe3a <malloc+0x98>
     df6:	21 15       	cp	r18, r1
     df8:	31 05       	cpc	r19, r1
     dfa:	19 f0       	breq	.+6      	; 0xe02 <malloc+0x60>
     dfc:	42 17       	cp	r20, r18
     dfe:	53 07       	cpc	r21, r19
     e00:	18 f4       	brcc	.+6      	; 0xe08 <malloc+0x66>
     e02:	9a 01       	movw	r18, r20
     e04:	bd 01       	movw	r22, r26
     e06:	ef 01       	movw	r28, r30
     e08:	df 01       	movw	r26, r30
     e0a:	f8 01       	movw	r30, r16
     e0c:	db cf       	rjmp	.-74     	; 0xdc4 <malloc+0x22>
     e0e:	21 15       	cp	r18, r1
     e10:	31 05       	cpc	r19, r1
     e12:	f9 f0       	breq	.+62     	; 0xe52 <malloc+0xb0>
     e14:	28 1b       	sub	r18, r24
     e16:	39 0b       	sbc	r19, r25
     e18:	24 30       	cpi	r18, 0x04	; 4
     e1a:	31 05       	cpc	r19, r1
     e1c:	80 f4       	brcc	.+32     	; 0xe3e <malloc+0x9c>
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	9b 81       	ldd	r25, Y+3	; 0x03
     e22:	61 15       	cp	r22, r1
     e24:	71 05       	cpc	r23, r1
     e26:	21 f0       	breq	.+8      	; 0xe30 <malloc+0x8e>
     e28:	fb 01       	movw	r30, r22
     e2a:	93 83       	std	Z+3, r25	; 0x03
     e2c:	82 83       	std	Z+2, r24	; 0x02
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <malloc+0x96>
     e30:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <__flp+0x1>
     e34:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__flp>
     e38:	fe 01       	movw	r30, r28
     e3a:	32 96       	adiw	r30, 0x02	; 2
     e3c:	44 c0       	rjmp	.+136    	; 0xec6 <malloc+0x124>
     e3e:	fe 01       	movw	r30, r28
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	81 93       	st	Z+, r24
     e46:	91 93       	st	Z+, r25
     e48:	22 50       	subi	r18, 0x02	; 2
     e4a:	31 09       	sbc	r19, r1
     e4c:	39 83       	std	Y+1, r19	; 0x01
     e4e:	28 83       	st	Y, r18
     e50:	3a c0       	rjmp	.+116    	; 0xec6 <malloc+0x124>
     e52:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <__brkval>
     e56:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <__brkval+0x1>
     e5a:	23 2b       	or	r18, r19
     e5c:	41 f4       	brne	.+16     	; 0xe6e <malloc+0xcc>
     e5e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e62:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e66:	30 93 d7 01 	sts	0x01D7, r19	; 0x8001d7 <__brkval+0x1>
     e6a:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <__brkval>
     e6e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     e72:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     e76:	21 15       	cp	r18, r1
     e78:	31 05       	cpc	r19, r1
     e7a:	41 f4       	brne	.+16     	; 0xe8c <malloc+0xea>
     e7c:	2d b7       	in	r18, 0x3d	; 61
     e7e:	3e b7       	in	r19, 0x3e	; 62
     e80:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e84:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e88:	24 1b       	sub	r18, r20
     e8a:	35 0b       	sbc	r19, r21
     e8c:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <__brkval>
     e90:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <__brkval+0x1>
     e94:	e2 17       	cp	r30, r18
     e96:	f3 07       	cpc	r31, r19
     e98:	a0 f4       	brcc	.+40     	; 0xec2 <malloc+0x120>
     e9a:	2e 1b       	sub	r18, r30
     e9c:	3f 0b       	sbc	r19, r31
     e9e:	28 17       	cp	r18, r24
     ea0:	39 07       	cpc	r19, r25
     ea2:	78 f0       	brcs	.+30     	; 0xec2 <malloc+0x120>
     ea4:	ac 01       	movw	r20, r24
     ea6:	4e 5f       	subi	r20, 0xFE	; 254
     ea8:	5f 4f       	sbci	r21, 0xFF	; 255
     eaa:	24 17       	cp	r18, r20
     eac:	35 07       	cpc	r19, r21
     eae:	48 f0       	brcs	.+18     	; 0xec2 <malloc+0x120>
     eb0:	4e 0f       	add	r20, r30
     eb2:	5f 1f       	adc	r21, r31
     eb4:	50 93 d7 01 	sts	0x01D7, r21	; 0x8001d7 <__brkval+0x1>
     eb8:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <__brkval>
     ebc:	81 93       	st	Z+, r24
     ebe:	91 93       	st	Z+, r25
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <malloc+0x124>
     ec2:	e0 e0       	ldi	r30, 0x00	; 0
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	cf 01       	movw	r24, r30
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <free>:
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	09 f4       	brne	.+2      	; 0xedc <free+0xa>
     eda:	81 c0       	rjmp	.+258    	; 0xfde <free+0x10c>
     edc:	fc 01       	movw	r30, r24
     ede:	32 97       	sbiw	r30, 0x02	; 2
     ee0:	13 82       	std	Z+3, r1	; 0x03
     ee2:	12 82       	std	Z+2, r1	; 0x02
     ee4:	a0 91 d8 01 	lds	r26, 0x01D8	; 0x8001d8 <__flp>
     ee8:	b0 91 d9 01 	lds	r27, 0x01D9	; 0x8001d9 <__flp+0x1>
     eec:	10 97       	sbiw	r26, 0x00	; 0
     eee:	81 f4       	brne	.+32     	; 0xf10 <free+0x3e>
     ef0:	20 81       	ld	r18, Z
     ef2:	31 81       	ldd	r19, Z+1	; 0x01
     ef4:	82 0f       	add	r24, r18
     ef6:	93 1f       	adc	r25, r19
     ef8:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <__brkval>
     efc:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <__brkval+0x1>
     f00:	28 17       	cp	r18, r24
     f02:	39 07       	cpc	r19, r25
     f04:	51 f5       	brne	.+84     	; 0xf5a <free+0x88>
     f06:	f0 93 d7 01 	sts	0x01D7, r31	; 0x8001d7 <__brkval+0x1>
     f0a:	e0 93 d6 01 	sts	0x01D6, r30	; 0x8001d6 <__brkval>
     f0e:	67 c0       	rjmp	.+206    	; 0xfde <free+0x10c>
     f10:	ed 01       	movw	r28, r26
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	ce 17       	cp	r28, r30
     f18:	df 07       	cpc	r29, r31
     f1a:	40 f4       	brcc	.+16     	; 0xf2c <free+0x5a>
     f1c:	4a 81       	ldd	r20, Y+2	; 0x02
     f1e:	5b 81       	ldd	r21, Y+3	; 0x03
     f20:	9e 01       	movw	r18, r28
     f22:	41 15       	cp	r20, r1
     f24:	51 05       	cpc	r21, r1
     f26:	f1 f0       	breq	.+60     	; 0xf64 <free+0x92>
     f28:	ea 01       	movw	r28, r20
     f2a:	f5 cf       	rjmp	.-22     	; 0xf16 <free+0x44>
     f2c:	d3 83       	std	Z+3, r29	; 0x03
     f2e:	c2 83       	std	Z+2, r28	; 0x02
     f30:	40 81       	ld	r20, Z
     f32:	51 81       	ldd	r21, Z+1	; 0x01
     f34:	84 0f       	add	r24, r20
     f36:	95 1f       	adc	r25, r21
     f38:	c8 17       	cp	r28, r24
     f3a:	d9 07       	cpc	r29, r25
     f3c:	59 f4       	brne	.+22     	; 0xf54 <free+0x82>
     f3e:	88 81       	ld	r24, Y
     f40:	99 81       	ldd	r25, Y+1	; 0x01
     f42:	84 0f       	add	r24, r20
     f44:	95 1f       	adc	r25, r21
     f46:	02 96       	adiw	r24, 0x02	; 2
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	93 83       	std	Z+3, r25	; 0x03
     f52:	82 83       	std	Z+2, r24	; 0x02
     f54:	21 15       	cp	r18, r1
     f56:	31 05       	cpc	r19, r1
     f58:	29 f4       	brne	.+10     	; 0xf64 <free+0x92>
     f5a:	f0 93 d9 01 	sts	0x01D9, r31	; 0x8001d9 <__flp+0x1>
     f5e:	e0 93 d8 01 	sts	0x01D8, r30	; 0x8001d8 <__flp>
     f62:	3d c0       	rjmp	.+122    	; 0xfde <free+0x10c>
     f64:	e9 01       	movw	r28, r18
     f66:	fb 83       	std	Y+3, r31	; 0x03
     f68:	ea 83       	std	Y+2, r30	; 0x02
     f6a:	49 91       	ld	r20, Y+
     f6c:	59 91       	ld	r21, Y+
     f6e:	c4 0f       	add	r28, r20
     f70:	d5 1f       	adc	r29, r21
     f72:	ec 17       	cp	r30, r28
     f74:	fd 07       	cpc	r31, r29
     f76:	61 f4       	brne	.+24     	; 0xf90 <free+0xbe>
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	84 0f       	add	r24, r20
     f7e:	95 1f       	adc	r25, r21
     f80:	02 96       	adiw	r24, 0x02	; 2
     f82:	e9 01       	movw	r28, r18
     f84:	99 83       	std	Y+1, r25	; 0x01
     f86:	88 83       	st	Y, r24
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	9b 83       	std	Y+3, r25	; 0x03
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	e0 e0       	ldi	r30, 0x00	; 0
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	12 96       	adiw	r26, 0x02	; 2
     f96:	8d 91       	ld	r24, X+
     f98:	9c 91       	ld	r25, X
     f9a:	13 97       	sbiw	r26, 0x03	; 3
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <free+0xd4>
     fa0:	fd 01       	movw	r30, r26
     fa2:	dc 01       	movw	r26, r24
     fa4:	f7 cf       	rjmp	.-18     	; 0xf94 <free+0xc2>
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	9d 01       	movw	r18, r26
     fae:	2e 5f       	subi	r18, 0xFE	; 254
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <__brkval>
     fba:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <__brkval+0x1>
     fbe:	28 17       	cp	r18, r24
     fc0:	39 07       	cpc	r19, r25
     fc2:	69 f4       	brne	.+26     	; 0xfde <free+0x10c>
     fc4:	30 97       	sbiw	r30, 0x00	; 0
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <free+0x100>
     fc8:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <__flp+0x1>
     fcc:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__flp>
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <free+0x104>
     fd2:	13 82       	std	Z+3, r1	; 0x03
     fd4:	12 82       	std	Z+2, r1	; 0x02
     fd6:	b0 93 d7 01 	sts	0x01D7, r27	; 0x8001d7 <__brkval+0x1>
     fda:	a0 93 d6 01 	sts	0x01D6, r26	; 0x8001d6 <__brkval>
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <strcpy>:
     fe4:	fb 01       	movw	r30, r22
     fe6:	dc 01       	movw	r26, r24
     fe8:	01 90       	ld	r0, Z+
     fea:	0d 92       	st	X+, r0
     fec:	00 20       	and	r0, r0
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <strcpy+0x4>
     ff0:	08 95       	ret

00000ff2 <fdevopen>:
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	31 f4       	brne	.+12     	; 0x100a <fdevopen+0x18>
     ffe:	61 15       	cp	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	19 f4       	brne	.+6      	; 0x100a <fdevopen+0x18>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	3a c0       	rjmp	.+116    	; 0x107e <fdevopen+0x8c>
    100a:	8b 01       	movw	r16, r22
    100c:	ec 01       	movw	r28, r24
    100e:	6e e0       	ldi	r22, 0x0E	; 14
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <calloc>
    101a:	fc 01       	movw	r30, r24
    101c:	89 2b       	or	r24, r25
    101e:	91 f3       	breq	.-28     	; 0x1004 <fdevopen+0x12>
    1020:	80 e8       	ldi	r24, 0x80	; 128
    1022:	83 83       	std	Z+3, r24	; 0x03
    1024:	01 15       	cp	r16, r1
    1026:	11 05       	cpc	r17, r1
    1028:	71 f0       	breq	.+28     	; 0x1046 <fdevopen+0x54>
    102a:	13 87       	std	Z+11, r17	; 0x0b
    102c:	02 87       	std	Z+10, r16	; 0x0a
    102e:	81 e8       	ldi	r24, 0x81	; 129
    1030:	83 83       	std	Z+3, r24	; 0x03
    1032:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__iob>
    1036:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <__iob+0x1>
    103a:	89 2b       	or	r24, r25
    103c:	21 f4       	brne	.+8      	; 0x1046 <fdevopen+0x54>
    103e:	f0 93 db 01 	sts	0x01DB, r31	; 0x8001db <__iob+0x1>
    1042:	e0 93 da 01 	sts	0x01DA, r30	; 0x8001da <__iob>
    1046:	20 97       	sbiw	r28, 0x00	; 0
    1048:	c9 f0       	breq	.+50     	; 0x107c <fdevopen+0x8a>
    104a:	d1 87       	std	Z+9, r29	; 0x09
    104c:	c0 87       	std	Z+8, r28	; 0x08
    104e:	83 81       	ldd	r24, Z+3	; 0x03
    1050:	82 60       	ori	r24, 0x02	; 2
    1052:	83 83       	std	Z+3, r24	; 0x03
    1054:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <__iob+0x2>
    1058:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <__iob+0x3>
    105c:	89 2b       	or	r24, r25
    105e:	71 f4       	brne	.+28     	; 0x107c <fdevopen+0x8a>
    1060:	f0 93 dd 01 	sts	0x01DD, r31	; 0x8001dd <__iob+0x3>
    1064:	e0 93 dc 01 	sts	0x01DC, r30	; 0x8001dc <__iob+0x2>
    1068:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__iob+0x4>
    106c:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__iob+0x5>
    1070:	89 2b       	or	r24, r25
    1072:	21 f4       	brne	.+8      	; 0x107c <fdevopen+0x8a>
    1074:	f0 93 df 01 	sts	0x01DF, r31	; 0x8001df <__iob+0x5>
    1078:	e0 93 de 01 	sts	0x01DE, r30	; 0x8001de <__iob+0x4>
    107c:	cf 01       	movw	r24, r30
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <printf>:
    1088:	a0 e0       	ldi	r26, 0x00	; 0
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ea e4       	ldi	r30, 0x4A	; 74
    108e:	f8 e0       	ldi	r31, 0x08	; 8
    1090:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__prologue_saves__+0x20>
    1094:	ae 01       	movw	r20, r28
    1096:	4b 5f       	subi	r20, 0xFB	; 251
    1098:	5f 4f       	sbci	r21, 0xFF	; 255
    109a:	fa 01       	movw	r30, r20
    109c:	61 91       	ld	r22, Z+
    109e:	71 91       	ld	r23, Z+
    10a0:	af 01       	movw	r20, r30
    10a2:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <__iob+0x2>
    10a6:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <__iob+0x3>
    10aa:	0e 94 8a 08 	call	0x1114	; 0x1114 <vfprintf>
    10ae:	e2 e0       	ldi	r30, 0x02	; 2
    10b0:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__epilogue_restores__+0x20>

000010b4 <puts>:
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <__iob+0x2>
    10c0:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <__iob+0x3>
    10c4:	23 81       	ldd	r18, Z+3	; 0x03
    10c6:	21 ff       	sbrs	r18, 1
    10c8:	1b c0       	rjmp	.+54     	; 0x1100 <puts+0x4c>
    10ca:	8c 01       	movw	r16, r24
    10cc:	d0 e0       	ldi	r29, 0x00	; 0
    10ce:	c0 e0       	ldi	r28, 0x00	; 0
    10d0:	f8 01       	movw	r30, r16
    10d2:	81 91       	ld	r24, Z+
    10d4:	8f 01       	movw	r16, r30
    10d6:	60 91 dc 01 	lds	r22, 0x01DC	; 0x8001dc <__iob+0x2>
    10da:	70 91 dd 01 	lds	r23, 0x01DD	; 0x8001dd <__iob+0x3>
    10de:	db 01       	movw	r26, r22
    10e0:	18 96       	adiw	r26, 0x08	; 8
    10e2:	ed 91       	ld	r30, X+
    10e4:	fc 91       	ld	r31, X
    10e6:	19 97       	sbiw	r26, 0x09	; 9
    10e8:	88 23       	and	r24, r24
    10ea:	31 f0       	breq	.+12     	; 0x10f8 <puts+0x44>
    10ec:	09 95       	icall
    10ee:	89 2b       	or	r24, r25
    10f0:	79 f3       	breq	.-34     	; 0x10d0 <puts+0x1c>
    10f2:	df ef       	ldi	r29, 0xFF	; 255
    10f4:	cf ef       	ldi	r28, 0xFF	; 255
    10f6:	ec cf       	rjmp	.-40     	; 0x10d0 <puts+0x1c>
    10f8:	8a e0       	ldi	r24, 0x0A	; 10
    10fa:	09 95       	icall
    10fc:	89 2b       	or	r24, r25
    10fe:	19 f0       	breq	.+6      	; 0x1106 <puts+0x52>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f ef       	ldi	r25, 0xFF	; 255
    1104:	02 c0       	rjmp	.+4      	; 0x110a <puts+0x56>
    1106:	8d 2f       	mov	r24, r29
    1108:	9c 2f       	mov	r25, r28
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <vfprintf>:
    1114:	ab e0       	ldi	r26, 0x0B	; 11
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e0 e9       	ldi	r30, 0x90	; 144
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__prologue_saves__>
    1120:	6c 01       	movw	r12, r24
    1122:	7b 01       	movw	r14, r22
    1124:	8a 01       	movw	r16, r20
    1126:	fc 01       	movw	r30, r24
    1128:	17 82       	std	Z+7, r1	; 0x07
    112a:	16 82       	std	Z+6, r1	; 0x06
    112c:	83 81       	ldd	r24, Z+3	; 0x03
    112e:	81 ff       	sbrs	r24, 1
    1130:	cc c1       	rjmp	.+920    	; 0x14ca <vfprintf+0x3b6>
    1132:	ce 01       	movw	r24, r28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	3c 01       	movw	r6, r24
    1138:	f6 01       	movw	r30, r12
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	f7 01       	movw	r30, r14
    113e:	93 fd       	sbrc	r25, 3
    1140:	85 91       	lpm	r24, Z+
    1142:	93 ff       	sbrs	r25, 3
    1144:	81 91       	ld	r24, Z+
    1146:	7f 01       	movw	r14, r30
    1148:	88 23       	and	r24, r24
    114a:	09 f4       	brne	.+2      	; 0x114e <vfprintf+0x3a>
    114c:	ba c1       	rjmp	.+884    	; 0x14c2 <vfprintf+0x3ae>
    114e:	85 32       	cpi	r24, 0x25	; 37
    1150:	39 f4       	brne	.+14     	; 0x1160 <vfprintf+0x4c>
    1152:	93 fd       	sbrc	r25, 3
    1154:	85 91       	lpm	r24, Z+
    1156:	93 ff       	sbrs	r25, 3
    1158:	81 91       	ld	r24, Z+
    115a:	7f 01       	movw	r14, r30
    115c:	85 32       	cpi	r24, 0x25	; 37
    115e:	29 f4       	brne	.+10     	; 0x116a <vfprintf+0x56>
    1160:	b6 01       	movw	r22, r12
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    1168:	e7 cf       	rjmp	.-50     	; 0x1138 <vfprintf+0x24>
    116a:	91 2c       	mov	r9, r1
    116c:	21 2c       	mov	r2, r1
    116e:	31 2c       	mov	r3, r1
    1170:	ff e1       	ldi	r31, 0x1F	; 31
    1172:	f3 15       	cp	r31, r3
    1174:	d8 f0       	brcs	.+54     	; 0x11ac <vfprintf+0x98>
    1176:	8b 32       	cpi	r24, 0x2B	; 43
    1178:	79 f0       	breq	.+30     	; 0x1198 <vfprintf+0x84>
    117a:	38 f4       	brcc	.+14     	; 0x118a <vfprintf+0x76>
    117c:	80 32       	cpi	r24, 0x20	; 32
    117e:	79 f0       	breq	.+30     	; 0x119e <vfprintf+0x8a>
    1180:	83 32       	cpi	r24, 0x23	; 35
    1182:	a1 f4       	brne	.+40     	; 0x11ac <vfprintf+0x98>
    1184:	23 2d       	mov	r18, r3
    1186:	20 61       	ori	r18, 0x10	; 16
    1188:	1d c0       	rjmp	.+58     	; 0x11c4 <vfprintf+0xb0>
    118a:	8d 32       	cpi	r24, 0x2D	; 45
    118c:	61 f0       	breq	.+24     	; 0x11a6 <vfprintf+0x92>
    118e:	80 33       	cpi	r24, 0x30	; 48
    1190:	69 f4       	brne	.+26     	; 0x11ac <vfprintf+0x98>
    1192:	23 2d       	mov	r18, r3
    1194:	21 60       	ori	r18, 0x01	; 1
    1196:	16 c0       	rjmp	.+44     	; 0x11c4 <vfprintf+0xb0>
    1198:	83 2d       	mov	r24, r3
    119a:	82 60       	ori	r24, 0x02	; 2
    119c:	38 2e       	mov	r3, r24
    119e:	e3 2d       	mov	r30, r3
    11a0:	e4 60       	ori	r30, 0x04	; 4
    11a2:	3e 2e       	mov	r3, r30
    11a4:	2a c0       	rjmp	.+84     	; 0x11fa <vfprintf+0xe6>
    11a6:	f3 2d       	mov	r31, r3
    11a8:	f8 60       	ori	r31, 0x08	; 8
    11aa:	1d c0       	rjmp	.+58     	; 0x11e6 <vfprintf+0xd2>
    11ac:	37 fc       	sbrc	r3, 7
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <vfprintf+0xf6>
    11b0:	20 ed       	ldi	r18, 0xD0	; 208
    11b2:	28 0f       	add	r18, r24
    11b4:	2a 30       	cpi	r18, 0x0A	; 10
    11b6:	40 f0       	brcs	.+16     	; 0x11c8 <vfprintf+0xb4>
    11b8:	8e 32       	cpi	r24, 0x2E	; 46
    11ba:	b9 f4       	brne	.+46     	; 0x11ea <vfprintf+0xd6>
    11bc:	36 fc       	sbrc	r3, 6
    11be:	81 c1       	rjmp	.+770    	; 0x14c2 <vfprintf+0x3ae>
    11c0:	23 2d       	mov	r18, r3
    11c2:	20 64       	ori	r18, 0x40	; 64
    11c4:	32 2e       	mov	r3, r18
    11c6:	19 c0       	rjmp	.+50     	; 0x11fa <vfprintf+0xe6>
    11c8:	36 fe       	sbrs	r3, 6
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <vfprintf+0xc4>
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	98 9e       	mul	r9, r24
    11d0:	20 0d       	add	r18, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	92 2e       	mov	r9, r18
    11d6:	11 c0       	rjmp	.+34     	; 0x11fa <vfprintf+0xe6>
    11d8:	ea e0       	ldi	r30, 0x0A	; 10
    11da:	2e 9e       	mul	r2, r30
    11dc:	20 0d       	add	r18, r0
    11de:	11 24       	eor	r1, r1
    11e0:	22 2e       	mov	r2, r18
    11e2:	f3 2d       	mov	r31, r3
    11e4:	f0 62       	ori	r31, 0x20	; 32
    11e6:	3f 2e       	mov	r3, r31
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <vfprintf+0xe6>
    11ea:	8c 36       	cpi	r24, 0x6C	; 108
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <vfprintf+0xe2>
    11ee:	83 2d       	mov	r24, r3
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	38 2e       	mov	r3, r24
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <vfprintf+0xe6>
    11f6:	88 36       	cpi	r24, 0x68	; 104
    11f8:	41 f4       	brne	.+16     	; 0x120a <vfprintf+0xf6>
    11fa:	f7 01       	movw	r30, r14
    11fc:	93 fd       	sbrc	r25, 3
    11fe:	85 91       	lpm	r24, Z+
    1200:	93 ff       	sbrs	r25, 3
    1202:	81 91       	ld	r24, Z+
    1204:	7f 01       	movw	r14, r30
    1206:	81 11       	cpse	r24, r1
    1208:	b3 cf       	rjmp	.-154    	; 0x1170 <vfprintf+0x5c>
    120a:	98 2f       	mov	r25, r24
    120c:	9f 7d       	andi	r25, 0xDF	; 223
    120e:	95 54       	subi	r25, 0x45	; 69
    1210:	93 30       	cpi	r25, 0x03	; 3
    1212:	28 f4       	brcc	.+10     	; 0x121e <vfprintf+0x10a>
    1214:	0c 5f       	subi	r16, 0xFC	; 252
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	9f e3       	ldi	r25, 0x3F	; 63
    121a:	99 83       	std	Y+1, r25	; 0x01
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <vfprintf+0x124>
    121e:	83 36       	cpi	r24, 0x63	; 99
    1220:	31 f0       	breq	.+12     	; 0x122e <vfprintf+0x11a>
    1222:	83 37       	cpi	r24, 0x73	; 115
    1224:	71 f0       	breq	.+28     	; 0x1242 <vfprintf+0x12e>
    1226:	83 35       	cpi	r24, 0x53	; 83
    1228:	09 f0       	breq	.+2      	; 0x122c <vfprintf+0x118>
    122a:	59 c0       	rjmp	.+178    	; 0x12de <vfprintf+0x1ca>
    122c:	21 c0       	rjmp	.+66     	; 0x1270 <vfprintf+0x15c>
    122e:	f8 01       	movw	r30, r16
    1230:	80 81       	ld	r24, Z
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	0e 5f       	subi	r16, 0xFE	; 254
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	88 24       	eor	r8, r8
    123a:	83 94       	inc	r8
    123c:	91 2c       	mov	r9, r1
    123e:	53 01       	movw	r10, r6
    1240:	13 c0       	rjmp	.+38     	; 0x1268 <vfprintf+0x154>
    1242:	28 01       	movw	r4, r16
    1244:	f2 e0       	ldi	r31, 0x02	; 2
    1246:	4f 0e       	add	r4, r31
    1248:	51 1c       	adc	r5, r1
    124a:	f8 01       	movw	r30, r16
    124c:	a0 80       	ld	r10, Z
    124e:	b1 80       	ldd	r11, Z+1	; 0x01
    1250:	36 fe       	sbrs	r3, 6
    1252:	03 c0       	rjmp	.+6      	; 0x125a <vfprintf+0x146>
    1254:	69 2d       	mov	r22, r9
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <vfprintf+0x14a>
    125a:	6f ef       	ldi	r22, 0xFF	; 255
    125c:	7f ef       	ldi	r23, 0xFF	; 255
    125e:	c5 01       	movw	r24, r10
    1260:	0e 94 99 0a 	call	0x1532	; 0x1532 <strnlen>
    1264:	4c 01       	movw	r8, r24
    1266:	82 01       	movw	r16, r4
    1268:	f3 2d       	mov	r31, r3
    126a:	ff 77       	andi	r31, 0x7F	; 127
    126c:	3f 2e       	mov	r3, r31
    126e:	16 c0       	rjmp	.+44     	; 0x129c <vfprintf+0x188>
    1270:	28 01       	movw	r4, r16
    1272:	22 e0       	ldi	r18, 0x02	; 2
    1274:	42 0e       	add	r4, r18
    1276:	51 1c       	adc	r5, r1
    1278:	f8 01       	movw	r30, r16
    127a:	a0 80       	ld	r10, Z
    127c:	b1 80       	ldd	r11, Z+1	; 0x01
    127e:	36 fe       	sbrs	r3, 6
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <vfprintf+0x174>
    1282:	69 2d       	mov	r22, r9
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	02 c0       	rjmp	.+4      	; 0x128c <vfprintf+0x178>
    1288:	6f ef       	ldi	r22, 0xFF	; 255
    128a:	7f ef       	ldi	r23, 0xFF	; 255
    128c:	c5 01       	movw	r24, r10
    128e:	0e 94 87 0a 	call	0x150e	; 0x150e <strnlen_P>
    1292:	4c 01       	movw	r8, r24
    1294:	f3 2d       	mov	r31, r3
    1296:	f0 68       	ori	r31, 0x80	; 128
    1298:	3f 2e       	mov	r3, r31
    129a:	82 01       	movw	r16, r4
    129c:	33 fc       	sbrc	r3, 3
    129e:	1b c0       	rjmp	.+54     	; 0x12d6 <vfprintf+0x1c2>
    12a0:	82 2d       	mov	r24, r2
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	88 16       	cp	r8, r24
    12a6:	99 06       	cpc	r9, r25
    12a8:	b0 f4       	brcc	.+44     	; 0x12d6 <vfprintf+0x1c2>
    12aa:	b6 01       	movw	r22, r12
    12ac:	80 e2       	ldi	r24, 0x20	; 32
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    12b4:	2a 94       	dec	r2
    12b6:	f4 cf       	rjmp	.-24     	; 0x12a0 <vfprintf+0x18c>
    12b8:	f5 01       	movw	r30, r10
    12ba:	37 fc       	sbrc	r3, 7
    12bc:	85 91       	lpm	r24, Z+
    12be:	37 fe       	sbrs	r3, 7
    12c0:	81 91       	ld	r24, Z+
    12c2:	5f 01       	movw	r10, r30
    12c4:	b6 01       	movw	r22, r12
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    12cc:	21 10       	cpse	r2, r1
    12ce:	2a 94       	dec	r2
    12d0:	21 e0       	ldi	r18, 0x01	; 1
    12d2:	82 1a       	sub	r8, r18
    12d4:	91 08       	sbc	r9, r1
    12d6:	81 14       	cp	r8, r1
    12d8:	91 04       	cpc	r9, r1
    12da:	71 f7       	brne	.-36     	; 0x12b8 <vfprintf+0x1a4>
    12dc:	e8 c0       	rjmp	.+464    	; 0x14ae <vfprintf+0x39a>
    12de:	84 36       	cpi	r24, 0x64	; 100
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <vfprintf+0x1d2>
    12e2:	89 36       	cpi	r24, 0x69	; 105
    12e4:	41 f5       	brne	.+80     	; 0x1336 <vfprintf+0x222>
    12e6:	f8 01       	movw	r30, r16
    12e8:	37 fe       	sbrs	r3, 7
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <vfprintf+0x1e6>
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	0c 5f       	subi	r16, 0xFC	; 252
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <vfprintf+0x1f6>
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	07 2e       	mov	r0, r23
    1300:	00 0c       	add	r0, r0
    1302:	88 0b       	sbc	r24, r24
    1304:	99 0b       	sbc	r25, r25
    1306:	0e 5f       	subi	r16, 0xFE	; 254
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	f3 2d       	mov	r31, r3
    130c:	ff 76       	andi	r31, 0x6F	; 111
    130e:	3f 2e       	mov	r3, r31
    1310:	97 ff       	sbrs	r25, 7
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <vfprintf+0x212>
    1314:	90 95       	com	r25
    1316:	80 95       	com	r24
    1318:	70 95       	com	r23
    131a:	61 95       	neg	r22
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	f0 68       	ori	r31, 0x80	; 128
    1324:	3f 2e       	mov	r3, r31
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	a3 01       	movw	r20, r6
    132c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__ultoa_invert>
    1330:	88 2e       	mov	r8, r24
    1332:	86 18       	sub	r8, r6
    1334:	45 c0       	rjmp	.+138    	; 0x13c0 <vfprintf+0x2ac>
    1336:	85 37       	cpi	r24, 0x75	; 117
    1338:	31 f4       	brne	.+12     	; 0x1346 <vfprintf+0x232>
    133a:	23 2d       	mov	r18, r3
    133c:	2f 7e       	andi	r18, 0xEF	; 239
    133e:	b2 2e       	mov	r11, r18
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	25 c0       	rjmp	.+74     	; 0x1390 <vfprintf+0x27c>
    1346:	93 2d       	mov	r25, r3
    1348:	99 7f       	andi	r25, 0xF9	; 249
    134a:	b9 2e       	mov	r11, r25
    134c:	8f 36       	cpi	r24, 0x6F	; 111
    134e:	c1 f0       	breq	.+48     	; 0x1380 <vfprintf+0x26c>
    1350:	18 f4       	brcc	.+6      	; 0x1358 <vfprintf+0x244>
    1352:	88 35       	cpi	r24, 0x58	; 88
    1354:	79 f0       	breq	.+30     	; 0x1374 <vfprintf+0x260>
    1356:	b5 c0       	rjmp	.+362    	; 0x14c2 <vfprintf+0x3ae>
    1358:	80 37       	cpi	r24, 0x70	; 112
    135a:	19 f0       	breq	.+6      	; 0x1362 <vfprintf+0x24e>
    135c:	88 37       	cpi	r24, 0x78	; 120
    135e:	21 f0       	breq	.+8      	; 0x1368 <vfprintf+0x254>
    1360:	b0 c0       	rjmp	.+352    	; 0x14c2 <vfprintf+0x3ae>
    1362:	e9 2f       	mov	r30, r25
    1364:	e0 61       	ori	r30, 0x10	; 16
    1366:	be 2e       	mov	r11, r30
    1368:	b4 fe       	sbrs	r11, 4
    136a:	0d c0       	rjmp	.+26     	; 0x1386 <vfprintf+0x272>
    136c:	fb 2d       	mov	r31, r11
    136e:	f4 60       	ori	r31, 0x04	; 4
    1370:	bf 2e       	mov	r11, r31
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <vfprintf+0x272>
    1374:	34 fe       	sbrs	r3, 4
    1376:	0a c0       	rjmp	.+20     	; 0x138c <vfprintf+0x278>
    1378:	29 2f       	mov	r18, r25
    137a:	26 60       	ori	r18, 0x06	; 6
    137c:	b2 2e       	mov	r11, r18
    137e:	06 c0       	rjmp	.+12     	; 0x138c <vfprintf+0x278>
    1380:	28 e0       	ldi	r18, 0x08	; 8
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <vfprintf+0x27c>
    1386:	20 e1       	ldi	r18, 0x10	; 16
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <vfprintf+0x27c>
    138c:	20 e1       	ldi	r18, 0x10	; 16
    138e:	32 e0       	ldi	r19, 0x02	; 2
    1390:	f8 01       	movw	r30, r16
    1392:	b7 fe       	sbrs	r11, 7
    1394:	07 c0       	rjmp	.+14     	; 0x13a4 <vfprintf+0x290>
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	0c 5f       	subi	r16, 0xFC	; 252
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <vfprintf+0x29c>
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 5f       	subi	r16, 0xFE	; 254
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	a3 01       	movw	r20, r6
    13b2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__ultoa_invert>
    13b6:	88 2e       	mov	r8, r24
    13b8:	86 18       	sub	r8, r6
    13ba:	fb 2d       	mov	r31, r11
    13bc:	ff 77       	andi	r31, 0x7F	; 127
    13be:	3f 2e       	mov	r3, r31
    13c0:	36 fe       	sbrs	r3, 6
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <vfprintf+0x2ca>
    13c4:	23 2d       	mov	r18, r3
    13c6:	2e 7f       	andi	r18, 0xFE	; 254
    13c8:	a2 2e       	mov	r10, r18
    13ca:	89 14       	cp	r8, r9
    13cc:	58 f4       	brcc	.+22     	; 0x13e4 <vfprintf+0x2d0>
    13ce:	34 fe       	sbrs	r3, 4
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <vfprintf+0x2d4>
    13d2:	32 fc       	sbrc	r3, 2
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <vfprintf+0x2d4>
    13d6:	83 2d       	mov	r24, r3
    13d8:	8e 7e       	andi	r24, 0xEE	; 238
    13da:	a8 2e       	mov	r10, r24
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <vfprintf+0x2d4>
    13de:	b8 2c       	mov	r11, r8
    13e0:	a3 2c       	mov	r10, r3
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <vfprintf+0x2d6>
    13e4:	b8 2c       	mov	r11, r8
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <vfprintf+0x2d6>
    13e8:	b9 2c       	mov	r11, r9
    13ea:	a4 fe       	sbrs	r10, 4
    13ec:	0f c0       	rjmp	.+30     	; 0x140c <vfprintf+0x2f8>
    13ee:	fe 01       	movw	r30, r28
    13f0:	e8 0d       	add	r30, r8
    13f2:	f1 1d       	adc	r31, r1
    13f4:	80 81       	ld	r24, Z
    13f6:	80 33       	cpi	r24, 0x30	; 48
    13f8:	21 f4       	brne	.+8      	; 0x1402 <vfprintf+0x2ee>
    13fa:	9a 2d       	mov	r25, r10
    13fc:	99 7e       	andi	r25, 0xE9	; 233
    13fe:	a9 2e       	mov	r10, r25
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <vfprintf+0x300>
    1402:	a2 fe       	sbrs	r10, 2
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <vfprintf+0x2fe>
    1406:	b3 94       	inc	r11
    1408:	b3 94       	inc	r11
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <vfprintf+0x300>
    140c:	8a 2d       	mov	r24, r10
    140e:	86 78       	andi	r24, 0x86	; 134
    1410:	09 f0       	breq	.+2      	; 0x1414 <vfprintf+0x300>
    1412:	b3 94       	inc	r11
    1414:	a3 fc       	sbrc	r10, 3
    1416:	11 c0       	rjmp	.+34     	; 0x143a <vfprintf+0x326>
    1418:	a0 fe       	sbrs	r10, 0
    141a:	06 c0       	rjmp	.+12     	; 0x1428 <vfprintf+0x314>
    141c:	b2 14       	cp	r11, r2
    141e:	88 f4       	brcc	.+34     	; 0x1442 <vfprintf+0x32e>
    1420:	28 0c       	add	r2, r8
    1422:	92 2c       	mov	r9, r2
    1424:	9b 18       	sub	r9, r11
    1426:	0e c0       	rjmp	.+28     	; 0x1444 <vfprintf+0x330>
    1428:	b2 14       	cp	r11, r2
    142a:	60 f4       	brcc	.+24     	; 0x1444 <vfprintf+0x330>
    142c:	b6 01       	movw	r22, r12
    142e:	80 e2       	ldi	r24, 0x20	; 32
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    1436:	b3 94       	inc	r11
    1438:	f7 cf       	rjmp	.-18     	; 0x1428 <vfprintf+0x314>
    143a:	b2 14       	cp	r11, r2
    143c:	18 f4       	brcc	.+6      	; 0x1444 <vfprintf+0x330>
    143e:	2b 18       	sub	r2, r11
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x332>
    1442:	98 2c       	mov	r9, r8
    1444:	21 2c       	mov	r2, r1
    1446:	a4 fe       	sbrs	r10, 4
    1448:	10 c0       	rjmp	.+32     	; 0x146a <vfprintf+0x356>
    144a:	b6 01       	movw	r22, r12
    144c:	80 e3       	ldi	r24, 0x30	; 48
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    1454:	a2 fe       	sbrs	r10, 2
    1456:	17 c0       	rjmp	.+46     	; 0x1486 <vfprintf+0x372>
    1458:	a1 fc       	sbrc	r10, 1
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <vfprintf+0x34e>
    145c:	88 e7       	ldi	r24, 0x78	; 120
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <vfprintf+0x352>
    1462:	88 e5       	ldi	r24, 0x58	; 88
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	b6 01       	movw	r22, r12
    1468:	0c c0       	rjmp	.+24     	; 0x1482 <vfprintf+0x36e>
    146a:	8a 2d       	mov	r24, r10
    146c:	86 78       	andi	r24, 0x86	; 134
    146e:	59 f0       	breq	.+22     	; 0x1486 <vfprintf+0x372>
    1470:	a1 fe       	sbrs	r10, 1
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vfprintf+0x364>
    1474:	8b e2       	ldi	r24, 0x2B	; 43
    1476:	01 c0       	rjmp	.+2      	; 0x147a <vfprintf+0x366>
    1478:	80 e2       	ldi	r24, 0x20	; 32
    147a:	a7 fc       	sbrc	r10, 7
    147c:	8d e2       	ldi	r24, 0x2D	; 45
    147e:	b6 01       	movw	r22, r12
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    1486:	89 14       	cp	r8, r9
    1488:	38 f4       	brcc	.+14     	; 0x1498 <vfprintf+0x384>
    148a:	b6 01       	movw	r22, r12
    148c:	80 e3       	ldi	r24, 0x30	; 48
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    1494:	9a 94       	dec	r9
    1496:	f7 cf       	rjmp	.-18     	; 0x1486 <vfprintf+0x372>
    1498:	8a 94       	dec	r8
    149a:	f3 01       	movw	r30, r6
    149c:	e8 0d       	add	r30, r8
    149e:	f1 1d       	adc	r31, r1
    14a0:	80 81       	ld	r24, Z
    14a2:	b6 01       	movw	r22, r12
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    14aa:	81 10       	cpse	r8, r1
    14ac:	f5 cf       	rjmp	.-22     	; 0x1498 <vfprintf+0x384>
    14ae:	22 20       	and	r2, r2
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <vfprintf+0x3a0>
    14b2:	42 ce       	rjmp	.-892    	; 0x1138 <vfprintf+0x24>
    14b4:	b6 01       	movw	r22, r12
    14b6:	80 e2       	ldi	r24, 0x20	; 32
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fputc>
    14be:	2a 94       	dec	r2
    14c0:	f6 cf       	rjmp	.-20     	; 0x14ae <vfprintf+0x39a>
    14c2:	f6 01       	movw	r30, r12
    14c4:	86 81       	ldd	r24, Z+6	; 0x06
    14c6:	97 81       	ldd	r25, Z+7	; 0x07
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <vfprintf+0x3ba>
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	2b 96       	adiw	r28, 0x0b	; 11
    14d0:	e2 e1       	ldi	r30, 0x12	; 18
    14d2:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__epilogue_restores__>

000014d6 <calloc>:
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	86 9f       	mul	r24, r22
    14e0:	80 01       	movw	r16, r0
    14e2:	87 9f       	mul	r24, r23
    14e4:	10 0d       	add	r17, r0
    14e6:	96 9f       	mul	r25, r22
    14e8:	10 0d       	add	r17, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	c8 01       	movw	r24, r16
    14ee:	0e 94 d1 06 	call	0xda2	; 0xda2 <malloc>
    14f2:	ec 01       	movw	r28, r24
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	29 f0       	breq	.+10     	; 0x1502 <calloc+0x2c>
    14f8:	a8 01       	movw	r20, r16
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	0e 94 92 0a 	call	0x1524	; 0x1524 <memset>
    1502:	ce 01       	movw	r24, r28
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	08 95       	ret

0000150e <strnlen_P>:
    150e:	fc 01       	movw	r30, r24
    1510:	05 90       	lpm	r0, Z+
    1512:	61 50       	subi	r22, 0x01	; 1
    1514:	70 40       	sbci	r23, 0x00	; 0
    1516:	01 10       	cpse	r0, r1
    1518:	d8 f7       	brcc	.-10     	; 0x1510 <strnlen_P+0x2>
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	8e 0f       	add	r24, r30
    1520:	9f 1f       	adc	r25, r31
    1522:	08 95       	ret

00001524 <memset>:
    1524:	dc 01       	movw	r26, r24
    1526:	01 c0       	rjmp	.+2      	; 0x152a <memset+0x6>
    1528:	6d 93       	st	X+, r22
    152a:	41 50       	subi	r20, 0x01	; 1
    152c:	50 40       	sbci	r21, 0x00	; 0
    152e:	e0 f7       	brcc	.-8      	; 0x1528 <memset+0x4>
    1530:	08 95       	ret

00001532 <strnlen>:
    1532:	fc 01       	movw	r30, r24
    1534:	61 50       	subi	r22, 0x01	; 1
    1536:	70 40       	sbci	r23, 0x00	; 0
    1538:	01 90       	ld	r0, Z+
    153a:	01 10       	cpse	r0, r1
    153c:	d8 f7       	brcc	.-10     	; 0x1534 <strnlen+0x2>
    153e:	80 95       	com	r24
    1540:	90 95       	com	r25
    1542:	8e 0f       	add	r24, r30
    1544:	9f 1f       	adc	r25, r31
    1546:	08 95       	ret

00001548 <fputc>:
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	fb 01       	movw	r30, r22
    1552:	23 81       	ldd	r18, Z+3	; 0x03
    1554:	21 fd       	sbrc	r18, 1
    1556:	03 c0       	rjmp	.+6      	; 0x155e <fputc+0x16>
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	9f ef       	ldi	r25, 0xFF	; 255
    155c:	2c c0       	rjmp	.+88     	; 0x15b6 <fputc+0x6e>
    155e:	22 ff       	sbrs	r18, 2
    1560:	16 c0       	rjmp	.+44     	; 0x158e <fputc+0x46>
    1562:	46 81       	ldd	r20, Z+6	; 0x06
    1564:	57 81       	ldd	r21, Z+7	; 0x07
    1566:	24 81       	ldd	r18, Z+4	; 0x04
    1568:	35 81       	ldd	r19, Z+5	; 0x05
    156a:	42 17       	cp	r20, r18
    156c:	53 07       	cpc	r21, r19
    156e:	44 f4       	brge	.+16     	; 0x1580 <fputc+0x38>
    1570:	a0 81       	ld	r26, Z
    1572:	b1 81       	ldd	r27, Z+1	; 0x01
    1574:	9d 01       	movw	r18, r26
    1576:	2f 5f       	subi	r18, 0xFF	; 255
    1578:	3f 4f       	sbci	r19, 0xFF	; 255
    157a:	31 83       	std	Z+1, r19	; 0x01
    157c:	20 83       	st	Z, r18
    157e:	8c 93       	st	X, r24
    1580:	26 81       	ldd	r18, Z+6	; 0x06
    1582:	37 81       	ldd	r19, Z+7	; 0x07
    1584:	2f 5f       	subi	r18, 0xFF	; 255
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	37 83       	std	Z+7, r19	; 0x07
    158a:	26 83       	std	Z+6, r18	; 0x06
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <fputc+0x6e>
    158e:	8b 01       	movw	r16, r22
    1590:	ec 01       	movw	r28, r24
    1592:	fb 01       	movw	r30, r22
    1594:	00 84       	ldd	r0, Z+8	; 0x08
    1596:	f1 85       	ldd	r31, Z+9	; 0x09
    1598:	e0 2d       	mov	r30, r0
    159a:	09 95       	icall
    159c:	89 2b       	or	r24, r25
    159e:	e1 f6       	brne	.-72     	; 0x1558 <fputc+0x10>
    15a0:	d8 01       	movw	r26, r16
    15a2:	16 96       	adiw	r26, 0x06	; 6
    15a4:	8d 91       	ld	r24, X+
    15a6:	9c 91       	ld	r25, X
    15a8:	17 97       	sbiw	r26, 0x07	; 7
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	17 96       	adiw	r26, 0x07	; 7
    15ae:	9c 93       	st	X, r25
    15b0:	8e 93       	st	-X, r24
    15b2:	16 97       	sbiw	r26, 0x06	; 6
    15b4:	ce 01       	movw	r24, r28
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <__ultoa_invert>:
    15c0:	fa 01       	movw	r30, r20
    15c2:	aa 27       	eor	r26, r26
    15c4:	28 30       	cpi	r18, 0x08	; 8
    15c6:	51 f1       	breq	.+84     	; 0x161c <__ultoa_invert+0x5c>
    15c8:	20 31       	cpi	r18, 0x10	; 16
    15ca:	81 f1       	breq	.+96     	; 0x162c <__ultoa_invert+0x6c>
    15cc:	e8 94       	clt
    15ce:	6f 93       	push	r22
    15d0:	6e 7f       	andi	r22, 0xFE	; 254
    15d2:	6e 5f       	subi	r22, 0xFE	; 254
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	8f 4f       	sbci	r24, 0xFF	; 255
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	af 4f       	sbci	r26, 0xFF	; 255
    15dc:	b1 e0       	ldi	r27, 0x01	; 1
    15de:	3e d0       	rcall	.+124    	; 0x165c <__ultoa_invert+0x9c>
    15e0:	b4 e0       	ldi	r27, 0x04	; 4
    15e2:	3c d0       	rcall	.+120    	; 0x165c <__ultoa_invert+0x9c>
    15e4:	67 0f       	add	r22, r23
    15e6:	78 1f       	adc	r23, r24
    15e8:	89 1f       	adc	r24, r25
    15ea:	9a 1f       	adc	r25, r26
    15ec:	a1 1d       	adc	r26, r1
    15ee:	68 0f       	add	r22, r24
    15f0:	79 1f       	adc	r23, r25
    15f2:	8a 1f       	adc	r24, r26
    15f4:	91 1d       	adc	r25, r1
    15f6:	a1 1d       	adc	r26, r1
    15f8:	6a 0f       	add	r22, r26
    15fa:	71 1d       	adc	r23, r1
    15fc:	81 1d       	adc	r24, r1
    15fe:	91 1d       	adc	r25, r1
    1600:	a1 1d       	adc	r26, r1
    1602:	20 d0       	rcall	.+64     	; 0x1644 <__ultoa_invert+0x84>
    1604:	09 f4       	brne	.+2      	; 0x1608 <__ultoa_invert+0x48>
    1606:	68 94       	set
    1608:	3f 91       	pop	r19
    160a:	2a e0       	ldi	r18, 0x0A	; 10
    160c:	26 9f       	mul	r18, r22
    160e:	11 24       	eor	r1, r1
    1610:	30 19       	sub	r19, r0
    1612:	30 5d       	subi	r19, 0xD0	; 208
    1614:	31 93       	st	Z+, r19
    1616:	de f6       	brtc	.-74     	; 0x15ce <__ultoa_invert+0xe>
    1618:	cf 01       	movw	r24, r30
    161a:	08 95       	ret
    161c:	46 2f       	mov	r20, r22
    161e:	47 70       	andi	r20, 0x07	; 7
    1620:	40 5d       	subi	r20, 0xD0	; 208
    1622:	41 93       	st	Z+, r20
    1624:	b3 e0       	ldi	r27, 0x03	; 3
    1626:	0f d0       	rcall	.+30     	; 0x1646 <__ultoa_invert+0x86>
    1628:	c9 f7       	brne	.-14     	; 0x161c <__ultoa_invert+0x5c>
    162a:	f6 cf       	rjmp	.-20     	; 0x1618 <__ultoa_invert+0x58>
    162c:	46 2f       	mov	r20, r22
    162e:	4f 70       	andi	r20, 0x0F	; 15
    1630:	40 5d       	subi	r20, 0xD0	; 208
    1632:	4a 33       	cpi	r20, 0x3A	; 58
    1634:	18 f0       	brcs	.+6      	; 0x163c <__ultoa_invert+0x7c>
    1636:	49 5d       	subi	r20, 0xD9	; 217
    1638:	31 fd       	sbrc	r19, 1
    163a:	40 52       	subi	r20, 0x20	; 32
    163c:	41 93       	st	Z+, r20
    163e:	02 d0       	rcall	.+4      	; 0x1644 <__ultoa_invert+0x84>
    1640:	a9 f7       	brne	.-22     	; 0x162c <__ultoa_invert+0x6c>
    1642:	ea cf       	rjmp	.-44     	; 0x1618 <__ultoa_invert+0x58>
    1644:	b4 e0       	ldi	r27, 0x04	; 4
    1646:	a6 95       	lsr	r26
    1648:	97 95       	ror	r25
    164a:	87 95       	ror	r24
    164c:	77 95       	ror	r23
    164e:	67 95       	ror	r22
    1650:	ba 95       	dec	r27
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__ultoa_invert+0x86>
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	61 05       	cpc	r22, r1
    1658:	71 05       	cpc	r23, r1
    165a:	08 95       	ret
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	0a 2e       	mov	r0, r26
    1662:	06 94       	lsr	r0
    1664:	57 95       	ror	r21
    1666:	47 95       	ror	r20
    1668:	37 95       	ror	r19
    166a:	27 95       	ror	r18
    166c:	ba 95       	dec	r27
    166e:	c9 f7       	brne	.-14     	; 0x1662 <__ultoa_invert+0xa2>
    1670:	62 0f       	add	r22, r18
    1672:	73 1f       	adc	r23, r19
    1674:	84 1f       	adc	r24, r20
    1676:	95 1f       	adc	r25, r21
    1678:	a0 1d       	adc	r26, r0
    167a:	08 95       	ret

0000167c <__prologue_saves__>:
    167c:	2f 92       	push	r2
    167e:	3f 92       	push	r3
    1680:	4f 92       	push	r4
    1682:	5f 92       	push	r5
    1684:	6f 92       	push	r6
    1686:	7f 92       	push	r7
    1688:	8f 92       	push	r8
    168a:	9f 92       	push	r9
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	ca 1b       	sub	r28, r26
    16a6:	db 0b       	sbc	r29, r27
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	09 94       	ijmp

000016b4 <__epilogue_restores__>:
    16b4:	2a 88       	ldd	r2, Y+18	; 0x12
    16b6:	39 88       	ldd	r3, Y+17	; 0x11
    16b8:	48 88       	ldd	r4, Y+16	; 0x10
    16ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    16bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    16be:	7d 84       	ldd	r7, Y+13	; 0x0d
    16c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    16c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    16c6:	b9 84       	ldd	r11, Y+9	; 0x09
    16c8:	c8 84       	ldd	r12, Y+8	; 0x08
    16ca:	df 80       	ldd	r13, Y+7	; 0x07
    16cc:	ee 80       	ldd	r14, Y+6	; 0x06
    16ce:	fd 80       	ldd	r15, Y+5	; 0x05
    16d0:	0c 81       	ldd	r16, Y+4	; 0x04
    16d2:	1b 81       	ldd	r17, Y+3	; 0x03
    16d4:	aa 81       	ldd	r26, Y+2	; 0x02
    16d6:	b9 81       	ldd	r27, Y+1	; 0x01
    16d8:	ce 0f       	add	r28, r30
    16da:	d1 1d       	adc	r29, r1
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	ed 01       	movw	r28, r26
    16e8:	08 95       	ret

000016ea <_exit>:
    16ea:	f8 94       	cli

000016ec <__stop_program>:
    16ec:	ff cf       	rjmp	.-2      	; 0x16ec <__stop_program>
