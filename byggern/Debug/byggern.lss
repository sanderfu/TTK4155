
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001bfc  00001c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008001f0  008001f0  00001d80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000302a  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001558  00000000  00000000  00005102  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f5  00000000  00000000  0000665a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a8  00000000  00000000  00007b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000931  00000000  00000000  000080f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000116f  00000000  00000000  00008a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009b98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <slider_readPosition+0xc>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	11 e0       	ldi	r17, 0x01	; 1
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	ec ef       	ldi	r30, 0xFC	; 252
     3aa:	fb e1       	ldi	r31, 0x1B	; 27
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a0 3f       	cpi	r26, 0xF0	; 240
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	a0 ef       	ldi	r26, 0xF0	; 240
     3bc:	b1 e0       	ldi	r27, 0x01	; 1
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	aa 30       	cpi	r26, 0x0A	; 10
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
     3cc:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x11f6>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x11f6>
     3e6:	08 95       	ret

000003e8 <main>:
#include "music.h"

int main(void)
//p.23 for can read instructions
{
	setupInit();
     3e8:	0e 94 99 05 	call	0xb32	; 0xb32 <setupInit>
	
	//test_SRAM();
	
	CAN_controller_write(0x31, 5);
     3ec:	65 e0       	ldi	r22, 0x05	; 5
     3ee:	81 e3       	ldi	r24, 0x31	; 49
     3f0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CAN_controller_write>
	SPI_setChipSelect(PB4, 0);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
	SPI_masterWrite(MCP_RTS_TX0);
     3fc:	81 e8       	ldi	r24, 0x81	; 129
     3fe:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>

	uint8_t i = CAN_controller_read(0x61);
     40a:	81 e6       	ldi	r24, 0x61	; 97
     40c:	0e 94 48 02 	call	0x490	; 0x490 <CAN_controller_read>
	
	printf("This is my integer: %i",i);
     410:	1f 92       	push	r1
     412:	8f 93       	push	r24
     414:	86 e0       	ldi	r24, 0x06	; 6
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <printf>

	printf("Starting program\n\n\n\n\n\n\n\n\n\n");
     420:	8d e1       	ldi	r24, 0x1D	; 29
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <puts>
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
		_delay_ms(500);	
		SPI_setChipSelect(PB4,1);
		CAN_controller_write(0x31,5);
		uint8_t i = CAN_controller_read(0x61);
	
	printf("This is my integer: %i",i);
     430:	c6 e0       	ldi	r28, 0x06	; 6
     432:	d1 e0       	ldi	r29, 0x01	; 1
	//pwm_testPlayNote();
	//pwm_init();
	//music_playLisaGikk();                 
	while (1) {
		//Put microcontroller to sleep until next interrupt. 
		SPI_setChipSelect(PB4, 0);
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>

		sleep_now();
     43c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <sleep_now>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     440:	2f ef       	ldi	r18, 0xFF	; 255
     442:	8f e7       	ldi	r24, 0x7F	; 127
     444:	97 e0       	ldi	r25, 0x07	; 7
     446:	21 50       	subi	r18, 0x01	; 1
     448:	80 40       	sbci	r24, 0x00	; 0
     44a:	90 40       	sbci	r25, 0x00	; 0
     44c:	e1 f7       	brne	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     450:	00 00       	nop
		}
		
		//test_resetMenu();
		//test_outputControllers(joystick_pos, slider_pos, buttons);		
		_delay_ms(500);	
		SPI_setChipSelect(PB4,1);
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	84 e0       	ldi	r24, 0x04	; 4
     456:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
		CAN_controller_write(0x31,5);
     45a:	65 e0       	ldi	r22, 0x05	; 5
     45c:	81 e3       	ldi	r24, 0x31	; 49
     45e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CAN_controller_write>
		uint8_t i = CAN_controller_read(0x61);
     462:	81 e6       	ldi	r24, 0x61	; 97
     464:	0e 94 48 02 	call	0x490	; 0x490 <CAN_controller_read>
	
	printf("This is my integer: %i",i);
     468:	1f 92       	push	r1
     46a:	8f 93       	push	r24
     46c:	df 93       	push	r29
     46e:	cf 93       	push	r28
     470:	0e 94 cb 0a 	call	0x1596	; 0x1596 <printf>
     474:	9f ef       	ldi	r25, 0xFF	; 255
     476:	2f e7       	ldi	r18, 0x7F	; 127
     478:	87 e0       	ldi	r24, 0x07	; 7
     47a:	91 50       	subi	r25, 0x01	; 1
     47c:	20 40       	sbci	r18, 0x00	; 0
     47e:	80 40       	sbci	r24, 0x00	; 0
     480:	e1 f7       	brne	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     482:	00 c0       	rjmp	.+0      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     484:	00 00       	nop
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	d2 cf       	rjmp	.-92     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>

00000490 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     490:	cf 93       	push	r28
     492:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
	SPI_masterWrite(addr);
     4a2:	8c 2f       	mov	r24, r28
     4a4:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
	SPI_masterWrite(0);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     4ae:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_masterRead>
     4b2:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
	
	return data;
}
     4bc:	8c 2f       	mov	r24, r28
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	d8 2f       	mov	r29, r24
     4c8:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
	SPI_masterWrite(addr);
     4d8:	8d 2f       	mov	r24, r29
     4da:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
	SPI_masterWrite(data);
     4de:	8c 2f       	mov	r24, r28
     4e0:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	84 e0       	ldi	r24, 0x04	; 4
     4e8:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
	
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	d8 2f       	mov	r29, r24
     4fa:	16 2f       	mov	r17, r22
     4fc:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
		SPI_masterWrite(addr);
     50c:	81 2f       	mov	r24, r17
     50e:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
		SPI_masterWrite(mask);
     512:	8d 2f       	mov	r24, r29
     514:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
		SPI_masterWrite(data);
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>

}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	08 95       	ret

0000052e <CAN_controller_init>:

void CAN_controller_init() {
	
	
	SPI_masterInit();
     52e:	0e 94 c1 05 	call	0xb82	; 0xb82 <SPI_masterInit>
	
	//reset with spi command
	SPI_setChipSelect(PB4, 0);
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
	printf("Before spi write");
     53a:	87 e3       	ldi	r24, 0x37	; 55
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	0e 94 cb 0a 	call	0x1596	; 0x1596 <printf>
	SPI_masterWrite(MCP_RESET);
     546:	80 ec       	ldi	r24, 0xC0	; 192
     548:	0e 94 ca 05 	call	0xb94	; 0xb94 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	84 e0       	ldi	r24, 0x04	; 4
     550:	0e 94 d3 05 	call	0xba6	; 0xba6 <SPI_setChipSelect>
     554:	8c ec       	ldi	r24, 0xCC	; 204
     556:	94 e0       	ldi	r25, 0x04	; 4
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <CAN_controller_init+0x2a>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <CAN_controller_init+0x30>
     55e:	00 00       	nop
	//printf("After spi write\n");
	_delay_ms(1);
	
	//Check CANSTAT register
	
	uint8_t data = CAN_controller_read(MCP_CANSTAT);
     560:	8e e0       	ldi	r24, 0x0E	; 14
     562:	0e 94 48 02 	call	0x490	; 0x490 <CAN_controller_read>
     566:	ec ec       	ldi	r30, 0xCC	; 204
     568:	f4 e0       	ldi	r31, 0x04	; 4
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <CAN_controller_init+0x3c>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <CAN_controller_init+0x42>
     570:	00 00       	nop
	_delay_ms(1);
	
	//uint8_t data = 0x44;
	uint8_t mode_bits = (data & MODE_MASK);
     572:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	80 38       	cpi	r24, 0x80	; 128
     57a:	61 f0       	breq	.+24     	; 0x594 <CAN_controller_init+0x66>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     57c:	1f 92       	push	r1
     57e:	8f 93       	push	r24
     580:	88 e4       	ldi	r24, 0x48	; 72
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	0e 94 cb 0a 	call	0x1596	; 0x1596 <printf>
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11100000, MCP_CANCTRL, MODE_LOOPBACK);
     594:	40 e4       	ldi	r20, 0x40	; 64
     596:	6f e0       	ldi	r22, 0x0F	; 15
     598:	80 ee       	ldi	r24, 0xE0	; 224
     59a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     59e:	40 e6       	ldi	r20, 0x60	; 96
     5a0:	60 e6       	ldi	r22, 0x60	; 96
     5a2:	80 e6       	ldi	r24, 0x60	; 96
     5a4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b1, MCP_CANINTE, 0b1);
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	6b e2       	ldi	r22, 0x2B	; 43
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 79 02 	call	0x4f2	; 0x4f2 <CAN_controller_bitModify>
     5b2:	ff ef       	ldi	r31, 0xFF	; 255
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	f1 50       	subi	r31, 0x01	; 1
     5ba:	20 40       	sbci	r18, 0x00	; 0
     5bc:	80 40       	sbci	r24, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <CAN_controller_init+0x8a>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <CAN_controller_init+0x94>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <CAN_controller_init+0x96>
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     5c4:	83 e6       	ldi	r24, 0x63	; 99
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	0e 94 cb 0a 	call	0x1596	; 0x1596 <printf>
	
	//Check CANSTAT register
	data = CAN_controller_read(MCP_CANSTAT);
     5d0:	8e e0       	ldi	r24, 0x0E	; 14
     5d2:	0e 94 48 02 	call	0x490	; 0x490 <CAN_controller_read>
	printf("Data: %i\n\r", data);
     5d6:	1f 92       	push	r1
     5d8:	8f 93       	push	r24
     5da:	8c e7       	ldi	r24, 0x7C	; 124
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <printf>

     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	08 95       	ret

000005f4 <sleep_init>:

#include "sleep.h"
#include <avr/sleep.h>
#include <avr/interrupt.h>

void sleep_init() {
     5f4:	08 95       	ret

000005f6 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     5f6:	88 b1       	in	r24, 0x08	; 8
     5f8:	88 68       	ori	r24, 0x88	; 136
     5fa:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     5fc:	85 b7       	in	r24, 0x35	; 53
     5fe:	80 62       	ori	r24, 0x20	; 32
     600:	85 bf       	out	0x35, r24	; 53
     602:	88 95       	sleep
     604:	85 b7       	in	r24, 0x35	; 53
     606:	8f 7d       	andi	r24, 0xDF	; 223
     608:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     60a:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     60c:	85 b7       	in	r24, 0x35	; 53
     60e:	8f 7d       	andi	r24, 0xDF	; 223
     610:	85 bf       	out	0x35, r24	; 53
     612:	08 95       	ret

00000614 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     61a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     624:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <joystickOffsetY>
     628:	08 95       	ret

0000062a <joystick_readPosition>:
}
void joystick_readPosition() {
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     63c:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     644:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     646:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <joystickOffsetX>
     64a:	c6 17       	cp	r28, r22
     64c:	80 f4       	brcc	.+32     	; 0x66e <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	2c 2f       	mov	r18, r28
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	26 1b       	sub	r18, r22
     656:	37 0b       	sbc	r19, r23
     658:	44 e6       	ldi	r20, 0x64	; 100
     65a:	42 9f       	mul	r20, r18
     65c:	c0 01       	movw	r24, r0
     65e:	43 9f       	mul	r20, r19
     660:	90 0d       	add	r25, r0
     662:	11 24       	eor	r1, r1
     664:	0e 94 30 09 	call	0x1260	; 0x1260 <__divmodhi4>
     668:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <__data_end>
     66c:	14 c0       	rjmp	.+40     	; 0x696 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     66e:	46 2f       	mov	r20, r22
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	2c 2f       	mov	r18, r28
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	24 1b       	sub	r18, r20
     678:	35 0b       	sbc	r19, r21
     67a:	64 e6       	ldi	r22, 0x64	; 100
     67c:	62 9f       	mul	r22, r18
     67e:	c0 01       	movw	r24, r0
     680:	63 9f       	mul	r22, r19
     682:	90 0d       	add	r25, r0
     684:	11 24       	eor	r1, r1
     686:	6f ef       	ldi	r22, 0xFF	; 255
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	64 1b       	sub	r22, r20
     68c:	75 0b       	sbc	r23, r21
     68e:	0e 94 30 09 	call	0x1260	; 0x1260 <__divmodhi4>
     692:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     696:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <joystickOffsetY>
     69a:	e2 17       	cp	r30, r18
     69c:	88 f4       	brcc	.+34     	; 0x6c0 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     69e:	62 2f       	mov	r22, r18
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	4e 2f       	mov	r20, r30
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	46 1b       	sub	r20, r22
     6a8:	57 0b       	sbc	r21, r23
     6aa:	24 e6       	ldi	r18, 0x64	; 100
     6ac:	24 9f       	mul	r18, r20
     6ae:	c0 01       	movw	r24, r0
     6b0:	25 9f       	mul	r18, r21
     6b2:	90 0d       	add	r25, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	0e 94 30 09 	call	0x1260	; 0x1260 <__divmodhi4>
     6ba:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <__data_end+0x1>
     6be:	13 c0       	rjmp	.+38     	; 0x6e6 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	4e 2f       	mov	r20, r30
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	42 1b       	sub	r20, r18
     6c8:	53 0b       	sbc	r21, r19
     6ca:	64 e6       	ldi	r22, 0x64	; 100
     6cc:	64 9f       	mul	r22, r20
     6ce:	c0 01       	movw	r24, r0
     6d0:	65 9f       	mul	r22, r21
     6d2:	90 0d       	add	r25, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	6f ef       	ldi	r22, 0xFF	; 255
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	62 1b       	sub	r22, r18
     6dc:	73 0b       	sbc	r23, r19
     6de:	0e 94 30 09 	call	0x1260	; 0x1260 <__divmodhi4>
     6e2:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     6e6:	c0 ef       	ldi	r28, 0xF0	; 240
     6e8:	d1 e0       	ldi	r29, 0x01	; 1
     6ea:	68 81       	ld	r22, Y
     6ec:	06 2e       	mov	r0, r22
     6ee:	00 0c       	add	r0, r0
     6f0:	77 0b       	sbc	r23, r23
     6f2:	88 0b       	sbc	r24, r24
     6f4:	99 0b       	sbc	r25, r25
     6f6:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatsisf>
     6fa:	6b 01       	movw	r12, r22
     6fc:	7c 01       	movw	r14, r24
     6fe:	69 81       	ldd	r22, Y+1	; 0x01
     700:	06 2e       	mov	r0, r22
     702:	00 0c       	add	r0, r0
     704:	77 0b       	sbc	r23, r23
     706:	88 0b       	sbc	r24, r24
     708:	99 0b       	sbc	r25, r25
     70a:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatsisf>
     70e:	a7 01       	movw	r20, r14
     710:	96 01       	movw	r18, r12
     712:	0e 94 8e 06 	call	0xd1c	; 0xd1c <atan2>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	44 eb       	ldi	r20, 0xB4	; 180
     71c:	53 e4       	ldi	r21, 0x43	; 67
     71e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	5f e3       	ldi	r21, 0x3F	; 63
     72a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     72e:	23 ec       	ldi	r18, 0xC3	; 195
     730:	35 ef       	ldi	r19, 0xF5	; 245
     732:	48 e4       	ldi	r20, 0x48	; 72
     734:	50 e4       	ldi	r21, 0x40	; 64
     736:	0e 94 ed 06 	call	0xdda	; 0xdda <__divsf3>
     73a:	0e 94 5f 07 	call	0xebe	; 0xebe <__fixsfsi>
     73e:	7b 83       	std	Y+3, r23	; 0x03
     740:	6a 83       	std	Y+2, r22	; 0x02
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	08 95       	ret

00000750 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     750:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     752:	80 81       	ld	r24, Z
     754:	94 e0       	ldi	r25, 0x04	; 4
     756:	98 0f       	add	r25, r24
     758:	99 30       	cpi	r25, 0x09	; 9
     75a:	20 f4       	brcc	.+8      	; 0x764 <joystick_getDirection+0x14>
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	9c 5f       	subi	r25, 0xFC	; 252
     760:	99 30       	cpi	r25, 0x09	; 9
     762:	90 f0       	brcs	.+36     	; 0x788 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     764:	85 30       	cpi	r24, 0x05	; 5
     766:	2c f0       	brlt	.+10     	; 0x772 <joystick_getDirection+0x22>
     768:	81 81       	ldd	r24, Z+1	; 0x01
     76a:	8f 5c       	subi	r24, 0xCF	; 207
     76c:	83 36       	cpi	r24, 0x63	; 99
     76e:	38 f4       	brcc	.+14     	; 0x77e <joystick_getDirection+0x2e>
     770:	0d c0       	rjmp	.+26     	; 0x78c <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     772:	8c 3f       	cpi	r24, 0xFC	; 252
     774:	24 f4       	brge	.+8      	; 0x77e <joystick_getDirection+0x2e>
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	8f 5c       	subi	r24, 0xCF	; 207
     77a:	83 36       	cpi	r24, 0x63	; 99
     77c:	48 f0       	brcs	.+18     	; 0x790 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     77e:	81 81       	ldd	r24, Z+1	; 0x01
     780:	8c 3f       	cpi	r24, 0xFC	; 252
     782:	44 f0       	brlt	.+16     	; 0x794 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     794:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     796:	08 95       	ret

00000798 <mainMenuInit>:
#include <avr/interrupt.h>



MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     798:	8f e1       	ldi	r24, 0x1F	; 31
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <malloc>
	ptr->numChildren = 0;
     7a0:	fc 01       	movw	r30, r24
     7a2:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     7a4:	2a e0       	ldi	r18, 0x0A	; 10
     7a6:	e7 e8       	ldi	r30, 0x87	; 135
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	dc 01       	movw	r26, r24
     7ac:	01 90       	ld	r0, Z+
     7ae:	0d 92       	st	X+, r0
     7b0:	2a 95       	dec	r18
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <mainMenuInit+0x14>
	ptr->parent = NULL;
     7b4:	fc 01       	movw	r30, r24
     7b6:	11 8a       	std	Z+17, r1	; 0x11
     7b8:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     7ba:	08 95       	ret

000007bc <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	7c 01       	movw	r14, r24
     7cc:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     7ce:	8f e1       	ldi	r24, 0x1F	; 31
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 58 09 	call	0x12b0	; 0x12b0 <malloc>
     7d6:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     7d8:	d7 01       	movw	r26, r14
     7da:	5e 96       	adiw	r26, 0x1e	; 30
     7dc:	ec 91       	ld	r30, X
     7de:	5e 97       	sbiw	r26, 0x1e	; 30
     7e0:	c1 e0       	ldi	r28, 0x01	; 1
     7e2:	ce 0f       	add	r28, r30
     7e4:	5e 96       	adiw	r26, 0x1e	; 30
     7e6:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     7e8:	b6 01       	movw	r22, r12
     7ea:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcpy>
	childPtr->parent = parent;
     7ee:	f8 01       	movw	r30, r16
     7f0:	f1 8a       	std	Z+17, r15	; 0x11
     7f2:	e0 8a       	std	Z+16, r14	; 0x10
	//printf("Added child: %s\n\r", childPtr->name);

	if (parent->numChildren > MAXCHILDREN) {
     7f4:	c7 30       	cpi	r28, 0x07	; 7
     7f6:	58 f0       	brcs	.+22     	; 0x80e <addChild+0x52>
		printf("REached max: \n\r");
     7f8:	81 e9       	ldi	r24, 0x91	; 145
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	0e 94 cb 0a 	call	0x1596	; 0x1596 <printf>
		return NULL;
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e c0       	rjmp	.+28     	; 0x82a <addChild+0x6e>
	} 
	parent->children[parent->numChildren-1]=childPtr;
     80e:	ec 2f       	mov	r30, r28
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	38 96       	adiw	r30, 0x08	; 8
     814:	ee 0f       	add	r30, r30
     816:	ff 1f       	adc	r31, r31
     818:	ee 0d       	add	r30, r14
     81a:	ff 1d       	adc	r31, r15
     81c:	11 83       	std	Z+1, r17	; 0x01
     81e:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     820:	d8 01       	movw	r26, r16
     822:	5e 96       	adiw	r26, 0x1e	; 30
     824:	1c 92       	st	X, r1
	return childPtr;
     826:	80 2f       	mov	r24, r16
     828:	91 2f       	mov	r25, r17
}
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	cf 90       	pop	r12
     838:	08 95       	ret

0000083a <menuInit>:

MenuNode* menuInit(void)
{
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     846:	0e 94 cc 03 	call	0x798	; 0x798 <mainMenuInit>
     84a:	8c 01       	movw	r16, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     84c:	61 ea       	ldi	r22, 0xA1	; 161
     84e:	71 e0       	ldi	r23, 0x01	; 1
     850:	0e 94 de 03 	call	0x7bc	; 0x7bc <addChild>
     854:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     856:	6b ea       	ldi	r22, 0xAB	; 171
     858:	71 e0       	ldi	r23, 0x01	; 1
     85a:	0e 94 de 03 	call	0x7bc	; 0x7bc <addChild>
	addChild(childPlayGame,"GAME 2");
     85e:	62 eb       	ldi	r22, 0xB2	; 178
     860:	71 e0       	ldi	r23, 0x01	; 1
     862:	ce 01       	movw	r24, r28
     864:	0e 94 de 03 	call	0x7bc	; 0x7bc <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     868:	69 eb       	ldi	r22, 0xB9	; 185
     86a:	71 e0       	ldi	r23, 0x01	; 1
     86c:	c8 01       	movw	r24, r16
     86e:	0e 94 de 03 	call	0x7bc	; 0x7bc <addChild>
     872:	7c 01       	movw	r14, r24
     874:	c5 e0       	ldi	r28, 0x05	; 5
     876:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     878:	63 ec       	ldi	r22, 0xC3	; 195
     87a:	71 e0       	ldi	r23, 0x01	; 1
     87c:	c7 01       	movw	r24, r14
     87e:	0e 94 de 03 	call	0x7bc	; 0x7bc <addChild>
     882:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     884:	c9 f7       	brne	.-14     	; 0x878 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	//MenuNode* childSettings = addChild(mainMenu,"Settings");
	
	MenuNode* childMusic = addChild(mainMenu,"Music");
     886:	6b ec       	ldi	r22, 0xCB	; 203
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	c8 01       	movw	r24, r16
     88c:	0e 94 de 03 	call	0x7bc	; 0x7bc <addChild>
	addChild(childMusic, "Rick");
     890:	61 ed       	ldi	r22, 0xD1	; 209
     892:	71 e0       	ldi	r23, 0x01	; 1
     894:	0e 94 de 03 	call	0x7bc	; 0x7bc <addChild>
	
	
	//addChild(childSettings, "No sett");
	
	
	printf("Number of children: %i\n\r",mainMenu->numChildren);
     898:	f8 01       	movw	r30, r16
     89a:	86 8d       	ldd	r24, Z+30	; 0x1e
     89c:	1f 92       	push	r1
     89e:	8f 93       	push	r24
     8a0:	86 ed       	ldi	r24, 0xD6	; 214
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <printf>
	/*
	MenuNode* childSettings = addChild(mainMenu,"Settings");
	addChild(childSettings, "No sett");
	printf("Number of children: %i\n\r",childSettings->numChildren);
	*/
	currentMenu.currentMenuItem = mainMenu;
     8ac:	e4 ef       	ldi	r30, 0xF4	; 244
     8ae:	f1 e0       	ldi	r31, 0x01	; 1
     8b0:	11 83       	std	Z+1, r17	; 0x01
     8b2:	00 83       	st	Z, r16
	currentMenu.childIndex = 0;
     8b4:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     8b6:	84 e0       	ldi	r24, 0x04	; 4
     8b8:	83 83       	std	Z+3, r24	; 0x03
	
	return mainMenu;
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
}
     8c2:	c8 01       	movw	r24, r16
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	08 95       	ret

000008d2 <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     8d2:	0e 94 a8 03 	call	0x750	; 0x750 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     8d6:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <currentMenu+0x3>
     8da:	94 30       	cpi	r25, 0x04	; 4
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <navigateMenu+0xe>
     8de:	58 c0       	rjmp	.+176    	; 0x990 <navigateMenu+0xbe>
			switch (dir) {
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	e1 f1       	breq	.+120    	; 0x95c <navigateMenu+0x8a>
     8e4:	60 f1       	brcs	.+88     	; 0x93e <navigateMenu+0x6c>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	c9 f0       	breq	.+50     	; 0x91c <navigateMenu+0x4a>
     8ea:	83 30       	cpi	r24, 0x03	; 3
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <navigateMenu+0x1e>
     8ee:	50 c0       	rjmp	.+160    	; 0x990 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     8f0:	e4 ef       	ldi	r30, 0xF4	; 244
     8f2:	f1 e0       	ldi	r31, 0x01	; 1
     8f4:	92 81       	ldd	r25, Z+2	; 0x02
     8f6:	49 2f       	mov	r20, r25
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	01 90       	ld	r0, Z+
     8fc:	f0 81       	ld	r31, Z
     8fe:	e0 2d       	mov	r30, r0
     900:	26 8d       	ldd	r18, Z+30	; 0x1e
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	21 50       	subi	r18, 0x01	; 1
     906:	31 09       	sbc	r19, r1
     908:	42 17       	cp	r20, r18
     90a:	53 07       	cpc	r21, r19
     90c:	24 f4       	brge	.+8      	; 0x916 <navigateMenu+0x44>
					currentMenu.childIndex++;
     90e:	9f 5f       	subi	r25, 0xFF	; 255
     910:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <currentMenu+0x2>
     914:	3d c0       	rjmp	.+122    	; 0x990 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     916:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <currentMenu+0x2>
     91a:	3a c0       	rjmp	.+116    	; 0x990 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     91c:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <currentMenu+0x2>
     920:	99 23       	and	r25, r25
     922:	21 f0       	breq	.+8      	; 0x92c <navigateMenu+0x5a>
					currentMenu.childIndex--;
     924:	91 50       	subi	r25, 0x01	; 1
     926:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <currentMenu+0x2>
     92a:	32 c0       	rjmp	.+100    	; 0x990 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     92c:	e4 ef       	ldi	r30, 0xF4	; 244
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	a0 81       	ld	r26, Z
     932:	b1 81       	ldd	r27, Z+1	; 0x01
     934:	5e 96       	adiw	r26, 0x1e	; 30
     936:	9c 91       	ld	r25, X
     938:	91 50       	subi	r25, 0x01	; 1
     93a:	92 83       	std	Z+2, r25	; 0x02
     93c:	29 c0       	rjmp	.+82     	; 0x990 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     93e:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <currentMenu>
     942:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <currentMenu+0x1>
     946:	20 89       	ldd	r18, Z+16	; 0x10
     948:	31 89       	ldd	r19, Z+17	; 0x11
     94a:	21 15       	cp	r18, r1
     94c:	31 05       	cpc	r19, r1
     94e:	01 f1       	breq	.+64     	; 0x990 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     950:	e4 ef       	ldi	r30, 0xF4	; 244
     952:	f1 e0       	ldi	r31, 0x01	; 1
     954:	31 83       	std	Z+1, r19	; 0x01
     956:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     958:	12 82       	std	Z+2, r1	; 0x02
     95a:	1a c0       	rjmp	.+52     	; 0x990 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     95c:	a4 ef       	ldi	r26, 0xF4	; 244
     95e:	b1 e0       	ldi	r27, 0x01	; 1
     960:	2d 91       	ld	r18, X+
     962:	3c 91       	ld	r19, X
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	12 96       	adiw	r26, 0x02	; 2
     968:	9c 91       	ld	r25, X
     96a:	12 97       	sbiw	r26, 0x02	; 2
     96c:	e9 2f       	mov	r30, r25
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	39 96       	adiw	r30, 0x09	; 9
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	e2 0f       	add	r30, r18
     978:	f3 1f       	adc	r31, r19
     97a:	01 90       	ld	r0, Z+
     97c:	f0 81       	ld	r31, Z
     97e:	e0 2d       	mov	r30, r0
     980:	96 8d       	ldd	r25, Z+30	; 0x1e
     982:	99 23       	and	r25, r25
     984:	29 f0       	breq	.+10     	; 0x990 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     986:	11 96       	adiw	r26, 0x01	; 1
     988:	fc 93       	st	X, r31
     98a:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     98c:	12 96       	adiw	r26, 0x02	; 2
     98e:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     990:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <currentMenu+0x3>
     994:	08 95       	ret

00000996 <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
	oled_reset();
     99e:	0e 94 15 05 	call	0xa2a	; 0xa2a <oled_reset>
	oled_home();
     9a2:	0e 94 36 05 	call	0xa6c	; 0xa6c <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     9a6:	c4 ef       	ldi	r28, 0xF4	; 244
     9a8:	d1 e0       	ldi	r29, 0x01	; 1
     9aa:	88 81       	ld	r24, Y
     9ac:	99 81       	ldd	r25, Y+1	; 0x01
     9ae:	0e 94 71 05 	call	0xae2	; 0xae2 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     9b2:	e8 81       	ld	r30, Y
     9b4:	f9 81       	ldd	r31, Y+1	; 0x01
     9b6:	86 8d       	ldd	r24, Z+30	; 0x1e
     9b8:	88 23       	and	r24, r24
     9ba:	31 f1       	breq	.+76     	; 0xa08 <menu_printCurrentMenu+0x72>
     9bc:	c0 e0       	ldi	r28, 0x00	; 0
     9be:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     9c0:	04 ef       	ldi	r16, 0xF4	; 244
     9c2:	11 e0       	ldi	r17, 0x01	; 1
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     9c4:	ce 01       	movw	r24, r28
     9c6:	02 96       	adiw	r24, 0x02	; 2
     9c8:	0e 94 6d 05 	call	0xada	; 0xada <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     9cc:	d8 01       	movw	r26, r16
     9ce:	8d 91       	ld	r24, X+
     9d0:	9c 91       	ld	r25, X
     9d2:	fe 01       	movw	r30, r28
     9d4:	39 96       	adiw	r30, 0x09	; 9
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	e8 0f       	add	r30, r24
     9dc:	f9 1f       	adc	r31, r25
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	0e 94 71 05 	call	0xae2	; 0xae2 <oled_print>
		if (currentMenu.childIndex == i) {
     9e6:	f8 01       	movw	r30, r16
     9e8:	82 81       	ldd	r24, Z+2	; 0x02
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	8c 17       	cp	r24, r28
     9ee:	9d 07       	cpc	r25, r29
     9f0:	11 f4       	brne	.+4      	; 0x9f6 <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     9f2:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     9f6:	21 96       	adiw	r28, 0x01	; 1
     9f8:	d8 01       	movw	r26, r16
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	86 8d       	ldd	r24, Z+30	; 0x1e
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	c8 17       	cp	r28, r24
     a04:	d9 07       	cpc	r29, r25
     a06:	f4 f2       	brlt	.-68     	; 0x9c4 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     a12:	80 55       	subi	r24, 0x50	; 80
     a14:	e0 e0       	ldi	r30, 0x00	; 0
     a16:	f0 e1       	ldi	r31, 0x10	; 16
     a18:	80 83       	st	Z, r24
     a1a:	86 2f       	mov	r24, r22
     a1c:	8f 70       	andi	r24, 0x0F	; 15
     a1e:	80 83       	st	Z, r24
     a20:	62 95       	swap	r22
     a22:	6f 70       	andi	r22, 0x0F	; 15
     a24:	60 61       	ori	r22, 0x10	; 16
     a26:	60 83       	st	Z, r22
     a28:	08 95       	ret

00000a2a <oled_reset>:
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	10 e0       	ldi	r17, 0x00	; 0
     a32:	c0 e0       	ldi	r28, 0x00	; 0
     a34:	d2 e1       	ldi	r29, 0x12	; 18
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	81 2f       	mov	r24, r17
     a3a:	0e 94 09 05 	call	0xa12	; 0xa12 <oled_pos>
     a3e:	80 e8       	ldi	r24, 0x80	; 128
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	18 82       	st	Y, r1
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	e9 f7       	brne	.-6      	; 0xa42 <oled_reset+0x18>
     a48:	1f 5f       	subi	r17, 0xFF	; 255
     a4a:	18 30       	cpi	r17, 0x08	; 8
     a4c:	a1 f7       	brne	.-24     	; 0xa36 <oled_reset+0xc>
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	08 95       	ret

00000a56 <oled_print_arrow>:
     a56:	e0 e0       	ldi	r30, 0x00	; 0
     a58:	f2 e1       	ldi	r31, 0x12	; 18
     a5a:	88 e1       	ldi	r24, 0x18	; 24
     a5c:	80 83       	st	Z, r24
     a5e:	9c e3       	ldi	r25, 0x3C	; 60
     a60:	90 83       	st	Z, r25
     a62:	9e e7       	ldi	r25, 0x7E	; 126
     a64:	90 83       	st	Z, r25
     a66:	80 83       	st	Z, r24
     a68:	80 83       	st	Z, r24
     a6a:	08 95       	ret

00000a6c <oled_home>:
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 09 05 	call	0xa12	; 0xa12 <oled_pos>
     a74:	08 95       	ret

00000a76 <oled_init>:
     a76:	e0 e0       	ldi	r30, 0x00	; 0
     a78:	f0 e1       	ldi	r31, 0x10	; 16
     a7a:	8e ea       	ldi	r24, 0xAE	; 174
     a7c:	80 83       	st	Z, r24
     a7e:	81 ea       	ldi	r24, 0xA1	; 161
     a80:	80 83       	st	Z, r24
     a82:	8a ed       	ldi	r24, 0xDA	; 218
     a84:	80 83       	st	Z, r24
     a86:	82 e1       	ldi	r24, 0x12	; 18
     a88:	80 83       	st	Z, r24
     a8a:	88 ec       	ldi	r24, 0xC8	; 200
     a8c:	80 83       	st	Z, r24
     a8e:	88 ea       	ldi	r24, 0xA8	; 168
     a90:	80 83       	st	Z, r24
     a92:	8f e3       	ldi	r24, 0x3F	; 63
     a94:	80 83       	st	Z, r24
     a96:	85 ed       	ldi	r24, 0xD5	; 213
     a98:	80 83       	st	Z, r24
     a9a:	80 e8       	ldi	r24, 0x80	; 128
     a9c:	80 83       	st	Z, r24
     a9e:	81 e8       	ldi	r24, 0x81	; 129
     aa0:	80 83       	st	Z, r24
     aa2:	80 e5       	ldi	r24, 0x50	; 80
     aa4:	80 83       	st	Z, r24
     aa6:	89 ed       	ldi	r24, 0xD9	; 217
     aa8:	80 83       	st	Z, r24
     aaa:	81 e2       	ldi	r24, 0x21	; 33
     aac:	80 83       	st	Z, r24
     aae:	80 e2       	ldi	r24, 0x20	; 32
     ab0:	80 83       	st	Z, r24
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
     ab6:	8b ed       	ldi	r24, 0xDB	; 219
     ab8:	80 83       	st	Z, r24
     aba:	80 e3       	ldi	r24, 0x30	; 48
     abc:	80 83       	st	Z, r24
     abe:	8d ea       	ldi	r24, 0xAD	; 173
     ac0:	80 83       	st	Z, r24
     ac2:	10 82       	st	Z, r1
     ac4:	84 ea       	ldi	r24, 0xA4	; 164
     ac6:	80 83       	st	Z, r24
     ac8:	86 ea       	ldi	r24, 0xA6	; 166
     aca:	80 83       	st	Z, r24
     acc:	8f ea       	ldi	r24, 0xAF	; 175
     ace:	80 83       	st	Z, r24
     ad0:	0e 94 15 05 	call	0xa2a	; 0xa2a <oled_reset>
     ad4:	0e 94 36 05 	call	0xa6c	; 0xa6c <oled_home>
     ad8:	08 95       	ret

00000ada <oled_gotoLine>:
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	0e 94 09 05 	call	0xa12	; 0xa12 <oled_pos>
     ae0:	08 95       	ret

00000ae2 <oled_print>:

void oled_print(char* character){
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	dc 01       	movw	r26, r24
	while (*character != '\0')
     ae8:	8c 91       	ld	r24, X
     aea:	81 11       	cpse	r24, r1
     aec:	1a c0       	rjmp	.+52     	; 0xb22 <oled_print+0x40>
     aee:	1e c0       	rjmp	.+60     	; 0xb2c <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     af0:	ec 91       	ld	r30, X
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	b0 97       	sbiw	r30, 0x20	; 32
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	e2 0f       	add	r30, r18
     b04:	f3 1f       	adc	r31, r19
     b06:	e2 56       	subi	r30, 0x62	; 98
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     b0c:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	28 30       	cpi	r18, 0x08	; 8
     b14:	31 05       	cpc	r19, r1
     b16:	61 f7       	brne	.-40     	; 0xaf0 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     b18:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     b1a:	8c 91       	ld	r24, X
     b1c:	81 11       	cpse	r24, r1
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <oled_print+0x44>
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     b22:	c0 e0       	ldi	r28, 0x00	; 0
     b24:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	e2 cf       	rjmp	.-60     	; 0xaf0 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "CAN_controller.h"

	void setupInit(void){
	cli();
     b32:	f8 94       	cli
	xmem_init();
     b34:	0e 94 74 06 	call	0xce8	; 0xce8 <xmem_init>
	USART_init(MYUBRR);
     b38:	8f e1       	ldi	r24, 0x1F	; 31
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <USART_init>
	adcInit();
     b40:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     b44:	0e 94 0a 03 	call	0x614	; 0x614 <joystickInit>
	touchButton_init();
     b48:	0e 94 36 06 	call	0xc6c	; 0xc6c <touchButton_init>
	oled_init();
     b4c:	0e 94 3b 05 	call	0xa76	; 0xa76 <oled_init>
	timer_init();
     b50:	0e 94 28 06 	call	0xc50	; 0xc50 <timer_init>
	sleep_init();
     b54:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <sleep_init>
	menuInit();
     b58:	0e 94 1d 04 	call	0x83a	; 0x83a <menuInit>
	CAN_controller_init();
     b5c:	0e 94 97 02 	call	0x52e	; 0x52e <CAN_controller_init>
	sei();
     b60:	78 94       	sei
     b62:	08 95       	ret

00000b64 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     b6e:	ca ef       	ldi	r28, 0xFA	; 250
     b70:	d1 e0       	ldi	r29, 0x01	; 1
     b72:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     b82:	87 b3       	in	r24, 0x17	; 23
     b84:	80 6a       	ori	r24, 0xA0	; 160
     b86:	87 bb       	out	0x17, r24	; 23
     b88:	bc 9a       	sbi	0x17, 4	; 23
     b8a:	8d b1       	in	r24, 0x0d	; 13
     b8c:	81 65       	ori	r24, 0x51	; 81
     b8e:	8d b9       	out	0x0d, r24	; 13
     b90:	c4 9a       	sbi	0x18, 4	; 24
     b92:	08 95       	ret

00000b94 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     b94:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     b96:	77 9b       	sbis	0x0e, 7	; 14
     b98:	fe cf       	rjmp	.-4      	; 0xb96 <SPI_masterWrite+0x2>

}
     b9a:	08 95       	ret

00000b9c <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     b9c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     b9e:	77 9b       	sbis	0x0e, 7	; 14
     ba0:	fe cf       	rjmp	.-4      	; 0xb9e <SPI_masterRead+0x2>
	return SPDR;
     ba2:	8f b1       	in	r24, 0x0f	; 15
}
     ba4:	08 95       	ret

00000ba6 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     ba6:	66 23       	and	r22, r22
     ba8:	69 f0       	breq	.+26     	; 0xbc4 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     baa:	48 b3       	in	r20, 0x18	; 24
     bac:	21 e0       	ldi	r18, 0x01	; 1
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	b9 01       	movw	r22, r18
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <SPI_setChipSelect+0x12>
     bb4:	66 0f       	add	r22, r22
     bb6:	77 1f       	adc	r23, r23
     bb8:	8a 95       	dec	r24
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <SPI_setChipSelect+0xe>
     bbc:	cb 01       	movw	r24, r22
     bbe:	84 2b       	or	r24, r20
     bc0:	88 bb       	out	0x18, r24	; 24
     bc2:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     bc4:	48 b3       	in	r20, 0x18	; 24
     bc6:	21 e0       	ldi	r18, 0x01	; 1
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	b9 01       	movw	r22, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <SPI_setChipSelect+0x2c>
     bce:	66 0f       	add	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	8a 95       	dec	r24
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <SPI_setChipSelect+0x28>
     bd6:	cb 01       	movw	r24, r22
     bd8:	80 95       	com	r24
     bda:	84 23       	and	r24, r20
     bdc:	88 bb       	out	0x18, r24	; 24
     bde:	08 95       	ret

00000be0 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
	cli();
     c02:	f8 94       	cli
	TCNT1 = 0x00;
     c04:	1d bc       	out	0x2d, r1	; 45
     c06:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     c08:	80 ef       	ldi	r24, 0xF0	; 240
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 15 03 	call	0x62a	; 0x62a <joystick_readPosition>
	slider_readPosition(&slider_pos);
     c10:	8a ef       	ldi	r24, 0xFA	; 250
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 b2 05 	call	0xb64	; 0xb64 <slider_readPosition>
	touchButton_readButtons(&buttons);
     c18:	88 ef       	ldi	r24, 0xF8	; 248
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     c20:	80 ef       	ldi	r24, 0xF0	; 240
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 69 04 	call	0x8d2	; 0x8d2 <navigateMenu>
	menu_printCurrentMenu();
     c28:	0e 94 cb 04 	call	0x996	; 0x996 <menu_printCurrentMenu>
	sei();
     c2c:	78 94       	sei
}
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     c50:	89 b7       	in	r24, 0x39	; 57
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     c56:	1d bc       	out	0x2d, r1	; 45
     c58:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     c5a:	80 e3       	ldi	r24, 0x30	; 48
     c5c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     c62:	80 ef       	ldi	r24, 0xF0	; 240
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	99 bd       	out	0x29, r25	; 41
     c68:	88 bd       	out	0x28, r24	; 40
     c6a:	08 95       	ret

00000c6c <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     c6c:	36 b3       	in	r19, 0x16	; 22
     c6e:	26 b3       	in	r18, 0x16	; 22
     c70:	47 b3       	in	r20, 0x17	; 23
     c72:	32 70       	andi	r19, 0x02	; 2
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	bc 01       	movw	r22, r24
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <touchButton_init+0x14>
     c7c:	66 0f       	add	r22, r22
     c7e:	77 1f       	adc	r23, r23
     c80:	3a 95       	dec	r19
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <touchButton_init+0x10>
     c84:	24 70       	andi	r18, 0x04	; 4
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <touchButton_init+0x20>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	2a 95       	dec	r18
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <touchButton_init+0x1c>
     c90:	86 2b       	or	r24, r22
     c92:	97 2b       	or	r25, r23
     c94:	80 95       	com	r24
     c96:	90 95       	com	r25
     c98:	84 23       	and	r24, r20
     c9a:	87 bb       	out	0x17, r24	; 23
     c9c:	08 95       	ret

00000c9e <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     c9e:	86 b3       	in	r24, 0x16	; 22
     ca0:	e8 ef       	ldi	r30, 0xF8	; 248
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
     ca4:	86 95       	lsr	r24
     ca6:	81 70       	andi	r24, 0x01	; 1
     ca8:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     caa:	86 b3       	in	r24, 0x16	; 22
     cac:	82 fb       	bst	r24, 2
     cae:	88 27       	eor	r24, r24
     cb0:	80 f9       	bld	r24, 0
     cb2:	81 83       	std	Z+1, r24	; 0x01
     cb4:	08 95       	ret

00000cb6 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     cb6:	5d 9b       	sbis	0x0b, 5	; 11
     cb8:	fe cf       	rjmp	.-4      	; 0xcb6 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     cba:	8c b9       	out	0x0c, r24	; 12
     cbc:	08 95       	ret

00000cbe <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     cbe:	5f 9b       	sbis	0x0b, 7	; 11
     cc0:	fe cf       	rjmp	.-4      	; 0xcbe <USART_receiveChar>
		;
	
	return UDR0;
     cc2:	8c b1       	in	r24, 0x0c	; 12
     cc4:	08 95       	ret

00000cc6 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     cc6:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     cc8:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     cca:	88 e1       	ldi	r24, 0x18	; 24
     ccc:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     cce:	8e e8       	ldi	r24, 0x8E	; 142
     cd0:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     cd2:	6f e5       	ldi	r22, 0x5F	; 95
     cd4:	76 e0       	ldi	r23, 0x06	; 6
     cd6:	8b e5       	ldi	r24, 0x5B	; 91
     cd8:	96 e0       	ldi	r25, 0x06	; 6
     cda:	0e 94 80 0a 	call	0x1500	; 0x1500 <fdevopen>
     cde:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <uart+0x1>
     ce2:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <uart>
     ce6:	08 95       	ret

00000ce8 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     ce8:	85 b7       	in	r24, 0x35	; 53
     cea:	80 68       	ori	r24, 0x80	; 128
     cec:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     cee:	80 b7       	in	r24, 0x30	; 48
     cf0:	88 60       	ori	r24, 0x08	; 8
     cf2:	80 bf       	out	0x30, r24	; 48
     cf4:	08 95       	ret
     cf6:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_pscA>
     cfa:	60 f0       	brcs	.+24     	; 0xd14 <xmem_init+0x2c>
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	09 f4       	brne	.+2      	; 0xd04 <xmem_init+0x1c>
     d02:	9e ef       	ldi	r25, 0xFE	; 254
     d04:	0e 94 09 08 	call	0x1012	; 0x1012 <__fp_pscB>
     d08:	28 f0       	brcs	.+10     	; 0xd14 <xmem_init+0x2c>
     d0a:	40 e8       	ldi	r20, 0x80	; 128
     d0c:	51 e0       	ldi	r21, 0x01	; 1
     d0e:	71 f4       	brne	.+28     	; 0xd2c <atan2+0x10>
     d10:	5e ef       	ldi	r21, 0xFE	; 254
     d12:	0c c0       	rjmp	.+24     	; 0xd2c <atan2+0x10>
     d14:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_nan>
     d18:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_zero>

00000d1c <atan2>:
     d1c:	e9 2f       	mov	r30, r25
     d1e:	e0 78       	andi	r30, 0x80	; 128
     d20:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_split3>
     d24:	40 f3       	brcs	.-48     	; 0xcf6 <xmem_init+0xe>
     d26:	09 2e       	mov	r0, r25
     d28:	05 2a       	or	r0, r21
     d2a:	b1 f3       	breq	.-20     	; 0xd18 <xmem_init+0x30>
     d2c:	26 17       	cp	r18, r22
     d2e:	37 07       	cpc	r19, r23
     d30:	48 07       	cpc	r20, r24
     d32:	59 07       	cpc	r21, r25
     d34:	38 f0       	brcs	.+14     	; 0xd44 <atan2+0x28>
     d36:	0e 2e       	mov	r0, r30
     d38:	07 f8       	bld	r0, 7
     d3a:	e0 25       	eor	r30, r0
     d3c:	69 f0       	breq	.+26     	; 0xd58 <atan2+0x3c>
     d3e:	e0 25       	eor	r30, r0
     d40:	e0 64       	ori	r30, 0x40	; 64
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <atan2+0x3c>
     d44:	ef 63       	ori	r30, 0x3F	; 63
     d46:	07 f8       	bld	r0, 7
     d48:	00 94       	com	r0
     d4a:	07 fa       	bst	r0, 7
     d4c:	db 01       	movw	r26, r22
     d4e:	b9 01       	movw	r22, r18
     d50:	9d 01       	movw	r18, r26
     d52:	dc 01       	movw	r26, r24
     d54:	ca 01       	movw	r24, r20
     d56:	ad 01       	movw	r20, r26
     d58:	ef 93       	push	r30
     d5a:	0e 94 04 07 	call	0xe08	; 0xe08 <__divsf3_pse>
     d5e:	0e 94 10 08 	call	0x1020	; 0x1020 <__fp_round>
     d62:	0e 94 be 06 	call	0xd7c	; 0xd7c <atan>
     d66:	5f 91       	pop	r21
     d68:	55 23       	and	r21, r21
     d6a:	39 f0       	breq	.+14     	; 0xd7a <atan2+0x5e>
     d6c:	2b ed       	ldi	r18, 0xDB	; 219
     d6e:	3f e0       	ldi	r19, 0x0F	; 15
     d70:	49 e4       	ldi	r20, 0x49	; 73
     d72:	50 fd       	sbrc	r21, 0
     d74:	49 ec       	ldi	r20, 0xC9	; 201
     d76:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__addsf3>
     d7a:	08 95       	ret

00000d7c <atan>:
     d7c:	df 93       	push	r29
     d7e:	dd 27       	eor	r29, r29
     d80:	b9 2f       	mov	r27, r25
     d82:	bf 77       	andi	r27, 0x7F	; 127
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	16 16       	cp	r1, r22
     d8a:	17 06       	cpc	r1, r23
     d8c:	48 07       	cpc	r20, r24
     d8e:	5b 07       	cpc	r21, r27
     d90:	18 f4       	brcc	.+6      	; 0xd98 <atan+0x1c>
     d92:	d9 2f       	mov	r29, r25
     d94:	0e 94 4a 08 	call	0x1094	; 0x1094 <inverse>
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	7f 93       	push	r23
     d9e:	6f 93       	push	r22
     da0:	0e 94 bf 08 	call	0x117e	; 0x117e <square>
     da4:	e0 e7       	ldi	r30, 0x70	; 112
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fp_powser>
     dac:	0e 94 10 08 	call	0x1020	; 0x1020 <__fp_round>
     db0:	2f 91       	pop	r18
     db2:	3f 91       	pop	r19
     db4:	4f 91       	pop	r20
     db6:	5f 91       	pop	r21
     db8:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3x>
     dbc:	dd 23       	and	r29, r29
     dbe:	51 f0       	breq	.+20     	; 0xdd4 <atan+0x58>
     dc0:	90 58       	subi	r25, 0x80	; 128
     dc2:	a2 ea       	ldi	r26, 0xA2	; 162
     dc4:	2a ed       	ldi	r18, 0xDA	; 218
     dc6:	3f e0       	ldi	r19, 0x0F	; 15
     dc8:	49 ec       	ldi	r20, 0xC9	; 201
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	d0 78       	andi	r29, 0x80	; 128
     dce:	5d 27       	eor	r21, r29
     dd0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__addsf3x>
     dd4:	df 91       	pop	r29
     dd6:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_round>

00000dda <__divsf3>:
     dda:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3x>
     dde:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_round>
     de2:	0e 94 09 08 	call	0x1012	; 0x1012 <__fp_pscB>
     de6:	58 f0       	brcs	.+22     	; 0xdfe <__divsf3+0x24>
     de8:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_pscA>
     dec:	40 f0       	brcs	.+16     	; 0xdfe <__divsf3+0x24>
     dee:	29 f4       	brne	.+10     	; 0xdfa <__divsf3+0x20>
     df0:	5f 3f       	cpi	r21, 0xFF	; 255
     df2:	29 f0       	breq	.+10     	; 0xdfe <__divsf3+0x24>
     df4:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>
     df8:	51 11       	cpse	r21, r1
     dfa:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__fp_szero>
     dfe:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_nan>

00000e02 <__divsf3x>:
     e02:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_split3>
     e06:	68 f3       	brcs	.-38     	; 0xde2 <__divsf3+0x8>

00000e08 <__divsf3_pse>:
     e08:	99 23       	and	r25, r25
     e0a:	b1 f3       	breq	.-20     	; 0xdf8 <__divsf3+0x1e>
     e0c:	55 23       	and	r21, r21
     e0e:	91 f3       	breq	.-28     	; 0xdf4 <__divsf3+0x1a>
     e10:	95 1b       	sub	r25, r21
     e12:	55 0b       	sbc	r21, r21
     e14:	bb 27       	eor	r27, r27
     e16:	aa 27       	eor	r26, r26
     e18:	62 17       	cp	r22, r18
     e1a:	73 07       	cpc	r23, r19
     e1c:	84 07       	cpc	r24, r20
     e1e:	38 f0       	brcs	.+14     	; 0xe2e <__divsf3_pse+0x26>
     e20:	9f 5f       	subi	r25, 0xFF	; 255
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	44 1f       	adc	r20, r20
     e2a:	aa 1f       	adc	r26, r26
     e2c:	a9 f3       	breq	.-22     	; 0xe18 <__divsf3_pse+0x10>
     e2e:	35 d0       	rcall	.+106    	; 0xe9a <__divsf3_pse+0x92>
     e30:	0e 2e       	mov	r0, r30
     e32:	3a f0       	brmi	.+14     	; 0xe42 <__divsf3_pse+0x3a>
     e34:	e0 e8       	ldi	r30, 0x80	; 128
     e36:	32 d0       	rcall	.+100    	; 0xe9c <__divsf3_pse+0x94>
     e38:	91 50       	subi	r25, 0x01	; 1
     e3a:	50 40       	sbci	r21, 0x00	; 0
     e3c:	e6 95       	lsr	r30
     e3e:	00 1c       	adc	r0, r0
     e40:	ca f7       	brpl	.-14     	; 0xe34 <__divsf3_pse+0x2c>
     e42:	2b d0       	rcall	.+86     	; 0xe9a <__divsf3_pse+0x92>
     e44:	fe 2f       	mov	r31, r30
     e46:	29 d0       	rcall	.+82     	; 0xe9a <__divsf3_pse+0x92>
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	88 1f       	adc	r24, r24
     e4e:	bb 1f       	adc	r27, r27
     e50:	26 17       	cp	r18, r22
     e52:	37 07       	cpc	r19, r23
     e54:	48 07       	cpc	r20, r24
     e56:	ab 07       	cpc	r26, r27
     e58:	b0 e8       	ldi	r27, 0x80	; 128
     e5a:	09 f0       	breq	.+2      	; 0xe5e <__divsf3_pse+0x56>
     e5c:	bb 0b       	sbc	r27, r27
     e5e:	80 2d       	mov	r24, r0
     e60:	bf 01       	movw	r22, r30
     e62:	ff 27       	eor	r31, r31
     e64:	93 58       	subi	r25, 0x83	; 131
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	3a f0       	brmi	.+14     	; 0xe78 <__divsf3_pse+0x70>
     e6a:	9e 3f       	cpi	r25, 0xFE	; 254
     e6c:	51 05       	cpc	r21, r1
     e6e:	78 f0       	brcs	.+30     	; 0xe8e <__divsf3_pse+0x86>
     e70:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>
     e74:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__fp_szero>
     e78:	5f 3f       	cpi	r21, 0xFF	; 255
     e7a:	e4 f3       	brlt	.-8      	; 0xe74 <__divsf3_pse+0x6c>
     e7c:	98 3e       	cpi	r25, 0xE8	; 232
     e7e:	d4 f3       	brlt	.-12     	; 0xe74 <__divsf3_pse+0x6c>
     e80:	86 95       	lsr	r24
     e82:	77 95       	ror	r23
     e84:	67 95       	ror	r22
     e86:	b7 95       	ror	r27
     e88:	f7 95       	ror	r31
     e8a:	9f 5f       	subi	r25, 0xFF	; 255
     e8c:	c9 f7       	brne	.-14     	; 0xe80 <__divsf3_pse+0x78>
     e8e:	88 0f       	add	r24, r24
     e90:	91 1d       	adc	r25, r1
     e92:	96 95       	lsr	r25
     e94:	87 95       	ror	r24
     e96:	97 f9       	bld	r25, 7
     e98:	08 95       	ret
     e9a:	e1 e0       	ldi	r30, 0x01	; 1
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	bb 1f       	adc	r27, r27
     ea4:	62 17       	cp	r22, r18
     ea6:	73 07       	cpc	r23, r19
     ea8:	84 07       	cpc	r24, r20
     eaa:	ba 07       	cpc	r27, r26
     eac:	20 f0       	brcs	.+8      	; 0xeb6 <__divsf3_pse+0xae>
     eae:	62 1b       	sub	r22, r18
     eb0:	73 0b       	sbc	r23, r19
     eb2:	84 0b       	sbc	r24, r20
     eb4:	ba 0b       	sbc	r27, r26
     eb6:	ee 1f       	adc	r30, r30
     eb8:	88 f7       	brcc	.-30     	; 0xe9c <__divsf3_pse+0x94>
     eba:	e0 95       	com	r30
     ebc:	08 95       	ret

00000ebe <__fixsfsi>:
     ebe:	0e 94 66 07 	call	0xecc	; 0xecc <__fixunssfsi>
     ec2:	68 94       	set
     ec4:	b1 11       	cpse	r27, r1
     ec6:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__fp_szero>
     eca:	08 95       	ret

00000ecc <__fixunssfsi>:
     ecc:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_splitA>
     ed0:	88 f0       	brcs	.+34     	; 0xef4 <__fixunssfsi+0x28>
     ed2:	9f 57       	subi	r25, 0x7F	; 127
     ed4:	98 f0       	brcs	.+38     	; 0xefc <__fixunssfsi+0x30>
     ed6:	b9 2f       	mov	r27, r25
     ed8:	99 27       	eor	r25, r25
     eda:	b7 51       	subi	r27, 0x17	; 23
     edc:	b0 f0       	brcs	.+44     	; 0xf0a <__fixunssfsi+0x3e>
     ede:	e1 f0       	breq	.+56     	; 0xf18 <__fixunssfsi+0x4c>
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	1a f0       	brmi	.+6      	; 0xef0 <__fixunssfsi+0x24>
     eea:	ba 95       	dec	r27
     eec:	c9 f7       	brne	.-14     	; 0xee0 <__fixunssfsi+0x14>
     eee:	14 c0       	rjmp	.+40     	; 0xf18 <__fixunssfsi+0x4c>
     ef0:	b1 30       	cpi	r27, 0x01	; 1
     ef2:	91 f0       	breq	.+36     	; 0xf18 <__fixunssfsi+0x4c>
     ef4:	0e 94 43 08 	call	0x1086	; 0x1086 <__fp_zero>
     ef8:	b1 e0       	ldi	r27, 0x01	; 1
     efa:	08 95       	ret
     efc:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_zero>
     f00:	67 2f       	mov	r22, r23
     f02:	78 2f       	mov	r23, r24
     f04:	88 27       	eor	r24, r24
     f06:	b8 5f       	subi	r27, 0xF8	; 248
     f08:	39 f0       	breq	.+14     	; 0xf18 <__fixunssfsi+0x4c>
     f0a:	b9 3f       	cpi	r27, 0xF9	; 249
     f0c:	cc f3       	brlt	.-14     	; 0xf00 <__fixunssfsi+0x34>
     f0e:	86 95       	lsr	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b3 95       	inc	r27
     f16:	d9 f7       	brne	.-10     	; 0xf0e <__fixunssfsi+0x42>
     f18:	3e f4       	brtc	.+14     	; 0xf28 <__fixunssfsi+0x5c>
     f1a:	90 95       	com	r25
     f1c:	80 95       	com	r24
     f1e:	70 95       	com	r23
     f20:	61 95       	neg	r22
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	8f 4f       	sbci	r24, 0xFF	; 255
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	08 95       	ret

00000f2a <__floatunsisf>:
     f2a:	e8 94       	clt
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <__floatsisf+0x12>

00000f2e <__floatsisf>:
     f2e:	97 fb       	bst	r25, 7
     f30:	3e f4       	brtc	.+14     	; 0xf40 <__floatsisf+0x12>
     f32:	90 95       	com	r25
     f34:	80 95       	com	r24
     f36:	70 95       	com	r23
     f38:	61 95       	neg	r22
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	99 23       	and	r25, r25
     f42:	a9 f0       	breq	.+42     	; 0xf6e <__floatsisf+0x40>
     f44:	f9 2f       	mov	r31, r25
     f46:	96 e9       	ldi	r25, 0x96	; 150
     f48:	bb 27       	eor	r27, r27
     f4a:	93 95       	inc	r25
     f4c:	f6 95       	lsr	r31
     f4e:	87 95       	ror	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b7 95       	ror	r27
     f56:	f1 11       	cpse	r31, r1
     f58:	f8 cf       	rjmp	.-16     	; 0xf4a <__floatsisf+0x1c>
     f5a:	fa f4       	brpl	.+62     	; 0xf9a <__floatsisf+0x6c>
     f5c:	bb 0f       	add	r27, r27
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__floatsisf+0x36>
     f60:	60 ff       	sbrs	r22, 0
     f62:	1b c0       	rjmp	.+54     	; 0xf9a <__floatsisf+0x6c>
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <__floatsisf+0x6c>
     f6e:	88 23       	and	r24, r24
     f70:	11 f0       	breq	.+4      	; 0xf76 <__floatsisf+0x48>
     f72:	96 e9       	ldi	r25, 0x96	; 150
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <__floatsisf+0x6a>
     f76:	77 23       	and	r23, r23
     f78:	21 f0       	breq	.+8      	; 0xf82 <__floatsisf+0x54>
     f7a:	9e e8       	ldi	r25, 0x8E	; 142
     f7c:	87 2f       	mov	r24, r23
     f7e:	76 2f       	mov	r23, r22
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <__floatsisf+0x5e>
     f82:	66 23       	and	r22, r22
     f84:	71 f0       	breq	.+28     	; 0xfa2 <__floatsisf+0x74>
     f86:	96 e8       	ldi	r25, 0x86	; 134
     f88:	86 2f       	mov	r24, r22
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	2a f0       	brmi	.+10     	; 0xf9a <__floatsisf+0x6c>
     f90:	9a 95       	dec	r25
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	da f7       	brpl	.-10     	; 0xf90 <__floatsisf+0x62>
     f9a:	88 0f       	add	r24, r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <__fp_inf>:
     fa4:	97 f9       	bld	r25, 7
     fa6:	9f 67       	ori	r25, 0x7F	; 127
     fa8:	80 e8       	ldi	r24, 0x80	; 128
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	08 95       	ret

00000fb0 <__fp_nan>:
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	80 ec       	ldi	r24, 0xC0	; 192
     fb4:	08 95       	ret

00000fb6 <__fp_powser>:
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	1f 93       	push	r17
     fbc:	0f 93       	push	r16
     fbe:	ff 92       	push	r15
     fc0:	ef 92       	push	r14
     fc2:	df 92       	push	r13
     fc4:	7b 01       	movw	r14, r22
     fc6:	8c 01       	movw	r16, r24
     fc8:	68 94       	set
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <__fp_powser+0x22>
     fcc:	da 2e       	mov	r13, r26
     fce:	ef 01       	movw	r28, r30
     fd0:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3x>
     fd4:	fe 01       	movw	r30, r28
     fd6:	e8 94       	clt
     fd8:	a5 91       	lpm	r26, Z+
     fda:	25 91       	lpm	r18, Z+
     fdc:	35 91       	lpm	r19, Z+
     fde:	45 91       	lpm	r20, Z+
     fe0:	55 91       	lpm	r21, Z+
     fe2:	a6 f3       	brts	.-24     	; 0xfcc <__fp_powser+0x16>
     fe4:	ef 01       	movw	r28, r30
     fe6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__addsf3x>
     fea:	fe 01       	movw	r30, r28
     fec:	97 01       	movw	r18, r14
     fee:	a8 01       	movw	r20, r16
     ff0:	da 94       	dec	r13
     ff2:	69 f7       	brne	.-38     	; 0xfce <__fp_powser+0x18>
     ff4:	df 90       	pop	r13
     ff6:	ef 90       	pop	r14
     ff8:	ff 90       	pop	r15
     ffa:	0f 91       	pop	r16
     ffc:	1f 91       	pop	r17
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <__fp_pscA>:
    1004:	00 24       	eor	r0, r0
    1006:	0a 94       	dec	r0
    1008:	16 16       	cp	r1, r22
    100a:	17 06       	cpc	r1, r23
    100c:	18 06       	cpc	r1, r24
    100e:	09 06       	cpc	r0, r25
    1010:	08 95       	ret

00001012 <__fp_pscB>:
    1012:	00 24       	eor	r0, r0
    1014:	0a 94       	dec	r0
    1016:	12 16       	cp	r1, r18
    1018:	13 06       	cpc	r1, r19
    101a:	14 06       	cpc	r1, r20
    101c:	05 06       	cpc	r0, r21
    101e:	08 95       	ret

00001020 <__fp_round>:
    1020:	09 2e       	mov	r0, r25
    1022:	03 94       	inc	r0
    1024:	00 0c       	add	r0, r0
    1026:	11 f4       	brne	.+4      	; 0x102c <__fp_round+0xc>
    1028:	88 23       	and	r24, r24
    102a:	52 f0       	brmi	.+20     	; 0x1040 <__fp_round+0x20>
    102c:	bb 0f       	add	r27, r27
    102e:	40 f4       	brcc	.+16     	; 0x1040 <__fp_round+0x20>
    1030:	bf 2b       	or	r27, r31
    1032:	11 f4       	brne	.+4      	; 0x1038 <__fp_round+0x18>
    1034:	60 ff       	sbrs	r22, 0
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <__fp_round+0x20>
    1038:	6f 5f       	subi	r22, 0xFF	; 255
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	8f 4f       	sbci	r24, 0xFF	; 255
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	08 95       	ret

00001042 <__fp_split3>:
    1042:	57 fd       	sbrc	r21, 7
    1044:	90 58       	subi	r25, 0x80	; 128
    1046:	44 0f       	add	r20, r20
    1048:	55 1f       	adc	r21, r21
    104a:	59 f0       	breq	.+22     	; 0x1062 <__fp_splitA+0x10>
    104c:	5f 3f       	cpi	r21, 0xFF	; 255
    104e:	71 f0       	breq	.+28     	; 0x106c <__fp_splitA+0x1a>
    1050:	47 95       	ror	r20

00001052 <__fp_splitA>:
    1052:	88 0f       	add	r24, r24
    1054:	97 fb       	bst	r25, 7
    1056:	99 1f       	adc	r25, r25
    1058:	61 f0       	breq	.+24     	; 0x1072 <__fp_splitA+0x20>
    105a:	9f 3f       	cpi	r25, 0xFF	; 255
    105c:	79 f0       	breq	.+30     	; 0x107c <__fp_splitA+0x2a>
    105e:	87 95       	ror	r24
    1060:	08 95       	ret
    1062:	12 16       	cp	r1, r18
    1064:	13 06       	cpc	r1, r19
    1066:	14 06       	cpc	r1, r20
    1068:	55 1f       	adc	r21, r21
    106a:	f2 cf       	rjmp	.-28     	; 0x1050 <__fp_split3+0xe>
    106c:	46 95       	lsr	r20
    106e:	f1 df       	rcall	.-30     	; 0x1052 <__fp_splitA>
    1070:	08 c0       	rjmp	.+16     	; 0x1082 <__fp_splitA+0x30>
    1072:	16 16       	cp	r1, r22
    1074:	17 06       	cpc	r1, r23
    1076:	18 06       	cpc	r1, r24
    1078:	99 1f       	adc	r25, r25
    107a:	f1 cf       	rjmp	.-30     	; 0x105e <__fp_splitA+0xc>
    107c:	86 95       	lsr	r24
    107e:	71 05       	cpc	r23, r1
    1080:	61 05       	cpc	r22, r1
    1082:	08 94       	sec
    1084:	08 95       	ret

00001086 <__fp_zero>:
    1086:	e8 94       	clt

00001088 <__fp_szero>:
    1088:	bb 27       	eor	r27, r27
    108a:	66 27       	eor	r22, r22
    108c:	77 27       	eor	r23, r23
    108e:	cb 01       	movw	r24, r22
    1090:	97 f9       	bld	r25, 7
    1092:	08 95       	ret

00001094 <inverse>:
    1094:	9b 01       	movw	r18, r22
    1096:	ac 01       	movw	r20, r24
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e8       	ldi	r24, 0x80	; 128
    109e:	9f e3       	ldi	r25, 0x3F	; 63
    10a0:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__divsf3>

000010a4 <__mulsf3>:
    10a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3x>
    10a8:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_round>
    10ac:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_pscA>
    10b0:	38 f0       	brcs	.+14     	; 0x10c0 <__mulsf3+0x1c>
    10b2:	0e 94 09 08 	call	0x1012	; 0x1012 <__fp_pscB>
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__mulsf3+0x1c>
    10b8:	95 23       	and	r25, r21
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <__mulsf3+0x1c>
    10bc:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>
    10c0:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_nan>
    10c4:	11 24       	eor	r1, r1
    10c6:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__fp_szero>

000010ca <__mulsf3x>:
    10ca:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_split3>
    10ce:	70 f3       	brcs	.-36     	; 0x10ac <__mulsf3+0x8>

000010d0 <__mulsf3_pse>:
    10d0:	95 9f       	mul	r25, r21
    10d2:	c1 f3       	breq	.-16     	; 0x10c4 <__mulsf3+0x20>
    10d4:	95 0f       	add	r25, r21
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	55 1f       	adc	r21, r21
    10da:	62 9f       	mul	r22, r18
    10dc:	f0 01       	movw	r30, r0
    10de:	72 9f       	mul	r23, r18
    10e0:	bb 27       	eor	r27, r27
    10e2:	f0 0d       	add	r31, r0
    10e4:	b1 1d       	adc	r27, r1
    10e6:	63 9f       	mul	r22, r19
    10e8:	aa 27       	eor	r26, r26
    10ea:	f0 0d       	add	r31, r0
    10ec:	b1 1d       	adc	r27, r1
    10ee:	aa 1f       	adc	r26, r26
    10f0:	64 9f       	mul	r22, r20
    10f2:	66 27       	eor	r22, r22
    10f4:	b0 0d       	add	r27, r0
    10f6:	a1 1d       	adc	r26, r1
    10f8:	66 1f       	adc	r22, r22
    10fa:	82 9f       	mul	r24, r18
    10fc:	22 27       	eor	r18, r18
    10fe:	b0 0d       	add	r27, r0
    1100:	a1 1d       	adc	r26, r1
    1102:	62 1f       	adc	r22, r18
    1104:	73 9f       	mul	r23, r19
    1106:	b0 0d       	add	r27, r0
    1108:	a1 1d       	adc	r26, r1
    110a:	62 1f       	adc	r22, r18
    110c:	83 9f       	mul	r24, r19
    110e:	a0 0d       	add	r26, r0
    1110:	61 1d       	adc	r22, r1
    1112:	22 1f       	adc	r18, r18
    1114:	74 9f       	mul	r23, r20
    1116:	33 27       	eor	r19, r19
    1118:	a0 0d       	add	r26, r0
    111a:	61 1d       	adc	r22, r1
    111c:	23 1f       	adc	r18, r19
    111e:	84 9f       	mul	r24, r20
    1120:	60 0d       	add	r22, r0
    1122:	21 1d       	adc	r18, r1
    1124:	82 2f       	mov	r24, r18
    1126:	76 2f       	mov	r23, r22
    1128:	6a 2f       	mov	r22, r26
    112a:	11 24       	eor	r1, r1
    112c:	9f 57       	subi	r25, 0x7F	; 127
    112e:	50 40       	sbci	r21, 0x00	; 0
    1130:	9a f0       	brmi	.+38     	; 0x1158 <__mulsf3_pse+0x88>
    1132:	f1 f0       	breq	.+60     	; 0x1170 <__mulsf3_pse+0xa0>
    1134:	88 23       	and	r24, r24
    1136:	4a f0       	brmi	.+18     	; 0x114a <__mulsf3_pse+0x7a>
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	bb 1f       	adc	r27, r27
    113e:	66 1f       	adc	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	88 1f       	adc	r24, r24
    1144:	91 50       	subi	r25, 0x01	; 1
    1146:	50 40       	sbci	r21, 0x00	; 0
    1148:	a9 f7       	brne	.-22     	; 0x1134 <__mulsf3_pse+0x64>
    114a:	9e 3f       	cpi	r25, 0xFE	; 254
    114c:	51 05       	cpc	r21, r1
    114e:	80 f0       	brcs	.+32     	; 0x1170 <__mulsf3_pse+0xa0>
    1150:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>
    1154:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__fp_szero>
    1158:	5f 3f       	cpi	r21, 0xFF	; 255
    115a:	e4 f3       	brlt	.-8      	; 0x1154 <__mulsf3_pse+0x84>
    115c:	98 3e       	cpi	r25, 0xE8	; 232
    115e:	d4 f3       	brlt	.-12     	; 0x1154 <__mulsf3_pse+0x84>
    1160:	86 95       	lsr	r24
    1162:	77 95       	ror	r23
    1164:	67 95       	ror	r22
    1166:	b7 95       	ror	r27
    1168:	f7 95       	ror	r31
    116a:	e7 95       	ror	r30
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	c1 f7       	brne	.-16     	; 0x1160 <__mulsf3_pse+0x90>
    1170:	fe 2b       	or	r31, r30
    1172:	88 0f       	add	r24, r24
    1174:	91 1d       	adc	r25, r1
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <square>:
    117e:	9b 01       	movw	r18, r22
    1180:	ac 01       	movw	r20, r24
    1182:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__mulsf3>

00001186 <__subsf3>:
    1186:	50 58       	subi	r21, 0x80	; 128

00001188 <__addsf3>:
    1188:	bb 27       	eor	r27, r27
    118a:	aa 27       	eor	r26, r26
    118c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__addsf3x>
    1190:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_round>
    1194:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_pscA>
    1198:	38 f0       	brcs	.+14     	; 0x11a8 <__addsf3+0x20>
    119a:	0e 94 09 08 	call	0x1012	; 0x1012 <__fp_pscB>
    119e:	20 f0       	brcs	.+8      	; 0x11a8 <__addsf3+0x20>
    11a0:	39 f4       	brne	.+14     	; 0x11b0 <__addsf3+0x28>
    11a2:	9f 3f       	cpi	r25, 0xFF	; 255
    11a4:	19 f4       	brne	.+6      	; 0x11ac <__addsf3+0x24>
    11a6:	26 f4       	brtc	.+8      	; 0x11b0 <__addsf3+0x28>
    11a8:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_nan>
    11ac:	0e f4       	brtc	.+2      	; 0x11b0 <__addsf3+0x28>
    11ae:	e0 95       	com	r30
    11b0:	e7 fb       	bst	r30, 7
    11b2:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>

000011b6 <__addsf3x>:
    11b6:	e9 2f       	mov	r30, r25
    11b8:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_split3>
    11bc:	58 f3       	brcs	.-42     	; 0x1194 <__addsf3+0xc>
    11be:	ba 17       	cp	r27, r26
    11c0:	62 07       	cpc	r22, r18
    11c2:	73 07       	cpc	r23, r19
    11c4:	84 07       	cpc	r24, r20
    11c6:	95 07       	cpc	r25, r21
    11c8:	20 f0       	brcs	.+8      	; 0x11d2 <__addsf3x+0x1c>
    11ca:	79 f4       	brne	.+30     	; 0x11ea <__addsf3x+0x34>
    11cc:	a6 f5       	brtc	.+104    	; 0x1236 <__addsf3x+0x80>
    11ce:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_zero>
    11d2:	0e f4       	brtc	.+2      	; 0x11d6 <__addsf3x+0x20>
    11d4:	e0 95       	com	r30
    11d6:	0b 2e       	mov	r0, r27
    11d8:	ba 2f       	mov	r27, r26
    11da:	a0 2d       	mov	r26, r0
    11dc:	0b 01       	movw	r0, r22
    11de:	b9 01       	movw	r22, r18
    11e0:	90 01       	movw	r18, r0
    11e2:	0c 01       	movw	r0, r24
    11e4:	ca 01       	movw	r24, r20
    11e6:	a0 01       	movw	r20, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	ff 27       	eor	r31, r31
    11ec:	59 1b       	sub	r21, r25
    11ee:	99 f0       	breq	.+38     	; 0x1216 <__addsf3x+0x60>
    11f0:	59 3f       	cpi	r21, 0xF9	; 249
    11f2:	50 f4       	brcc	.+20     	; 0x1208 <__addsf3x+0x52>
    11f4:	50 3e       	cpi	r21, 0xE0	; 224
    11f6:	68 f1       	brcs	.+90     	; 0x1252 <__addsf3x+0x9c>
    11f8:	1a 16       	cp	r1, r26
    11fa:	f0 40       	sbci	r31, 0x00	; 0
    11fc:	a2 2f       	mov	r26, r18
    11fe:	23 2f       	mov	r18, r19
    1200:	34 2f       	mov	r19, r20
    1202:	44 27       	eor	r20, r20
    1204:	58 5f       	subi	r21, 0xF8	; 248
    1206:	f3 cf       	rjmp	.-26     	; 0x11ee <__addsf3x+0x38>
    1208:	46 95       	lsr	r20
    120a:	37 95       	ror	r19
    120c:	27 95       	ror	r18
    120e:	a7 95       	ror	r26
    1210:	f0 40       	sbci	r31, 0x00	; 0
    1212:	53 95       	inc	r21
    1214:	c9 f7       	brne	.-14     	; 0x1208 <__addsf3x+0x52>
    1216:	7e f4       	brtc	.+30     	; 0x1236 <__addsf3x+0x80>
    1218:	1f 16       	cp	r1, r31
    121a:	ba 0b       	sbc	r27, r26
    121c:	62 0b       	sbc	r22, r18
    121e:	73 0b       	sbc	r23, r19
    1220:	84 0b       	sbc	r24, r20
    1222:	ba f0       	brmi	.+46     	; 0x1252 <__addsf3x+0x9c>
    1224:	91 50       	subi	r25, 0x01	; 1
    1226:	a1 f0       	breq	.+40     	; 0x1250 <__addsf3x+0x9a>
    1228:	ff 0f       	add	r31, r31
    122a:	bb 1f       	adc	r27, r27
    122c:	66 1f       	adc	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	c2 f7       	brpl	.-16     	; 0x1224 <__addsf3x+0x6e>
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <__addsf3x+0x9c>
    1236:	ba 0f       	add	r27, r26
    1238:	62 1f       	adc	r22, r18
    123a:	73 1f       	adc	r23, r19
    123c:	84 1f       	adc	r24, r20
    123e:	48 f4       	brcc	.+18     	; 0x1252 <__addsf3x+0x9c>
    1240:	87 95       	ror	r24
    1242:	77 95       	ror	r23
    1244:	67 95       	ror	r22
    1246:	b7 95       	ror	r27
    1248:	f7 95       	ror	r31
    124a:	9e 3f       	cpi	r25, 0xFE	; 254
    124c:	08 f0       	brcs	.+2      	; 0x1250 <__addsf3x+0x9a>
    124e:	b0 cf       	rjmp	.-160    	; 0x11b0 <__addsf3+0x28>
    1250:	93 95       	inc	r25
    1252:	88 0f       	add	r24, r24
    1254:	08 f0       	brcs	.+2      	; 0x1258 <__addsf3x+0xa2>
    1256:	99 27       	eor	r25, r25
    1258:	ee 0f       	add	r30, r30
    125a:	97 95       	ror	r25
    125c:	87 95       	ror	r24
    125e:	08 95       	ret

00001260 <__divmodhi4>:
    1260:	97 fb       	bst	r25, 7
    1262:	07 2e       	mov	r0, r23
    1264:	16 f4       	brtc	.+4      	; 0x126a <__divmodhi4+0xa>
    1266:	00 94       	com	r0
    1268:	07 d0       	rcall	.+14     	; 0x1278 <__divmodhi4_neg1>
    126a:	77 fd       	sbrc	r23, 7
    126c:	09 d0       	rcall	.+18     	; 0x1280 <__divmodhi4_neg2>
    126e:	0e 94 44 09 	call	0x1288	; 0x1288 <__udivmodhi4>
    1272:	07 fc       	sbrc	r0, 7
    1274:	05 d0       	rcall	.+10     	; 0x1280 <__divmodhi4_neg2>
    1276:	3e f4       	brtc	.+14     	; 0x1286 <__divmodhi4_exit>

00001278 <__divmodhi4_neg1>:
    1278:	90 95       	com	r25
    127a:	81 95       	neg	r24
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	08 95       	ret

00001280 <__divmodhi4_neg2>:
    1280:	70 95       	com	r23
    1282:	61 95       	neg	r22
    1284:	7f 4f       	sbci	r23, 0xFF	; 255

00001286 <__divmodhi4_exit>:
    1286:	08 95       	ret

00001288 <__udivmodhi4>:
    1288:	aa 1b       	sub	r26, r26
    128a:	bb 1b       	sub	r27, r27
    128c:	51 e1       	ldi	r21, 0x11	; 17
    128e:	07 c0       	rjmp	.+14     	; 0x129e <__udivmodhi4_ep>

00001290 <__udivmodhi4_loop>:
    1290:	aa 1f       	adc	r26, r26
    1292:	bb 1f       	adc	r27, r27
    1294:	a6 17       	cp	r26, r22
    1296:	b7 07       	cpc	r27, r23
    1298:	10 f0       	brcs	.+4      	; 0x129e <__udivmodhi4_ep>
    129a:	a6 1b       	sub	r26, r22
    129c:	b7 0b       	sbc	r27, r23

0000129e <__udivmodhi4_ep>:
    129e:	88 1f       	adc	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	5a 95       	dec	r21
    12a4:	a9 f7       	brne	.-22     	; 0x1290 <__udivmodhi4_loop>
    12a6:	80 95       	com	r24
    12a8:	90 95       	com	r25
    12aa:	bc 01       	movw	r22, r24
    12ac:	cd 01       	movw	r24, r26
    12ae:	08 95       	ret

000012b0 <malloc>:
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	91 05       	cpc	r25, r1
    12bc:	10 f4       	brcc	.+4      	; 0x12c2 <malloc+0x12>
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__flp>
    12c6:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__flp+0x1>
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	30 97       	sbiw	r30, 0x00	; 0
    12d4:	19 f1       	breq	.+70     	; 0x131c <malloc+0x6c>
    12d6:	40 81       	ld	r20, Z
    12d8:	51 81       	ldd	r21, Z+1	; 0x01
    12da:	02 81       	ldd	r16, Z+2	; 0x02
    12dc:	13 81       	ldd	r17, Z+3	; 0x03
    12de:	48 17       	cp	r20, r24
    12e0:	59 07       	cpc	r21, r25
    12e2:	c8 f0       	brcs	.+50     	; 0x1316 <malloc+0x66>
    12e4:	84 17       	cp	r24, r20
    12e6:	95 07       	cpc	r25, r21
    12e8:	69 f4       	brne	.+26     	; 0x1304 <malloc+0x54>
    12ea:	10 97       	sbiw	r26, 0x00	; 0
    12ec:	31 f0       	breq	.+12     	; 0x12fa <malloc+0x4a>
    12ee:	12 96       	adiw	r26, 0x02	; 2
    12f0:	0c 93       	st	X, r16
    12f2:	12 97       	sbiw	r26, 0x02	; 2
    12f4:	13 96       	adiw	r26, 0x03	; 3
    12f6:	1c 93       	st	X, r17
    12f8:	27 c0       	rjmp	.+78     	; 0x1348 <malloc+0x98>
    12fa:	00 93 02 02 	sts	0x0202, r16	; 0x800202 <__flp>
    12fe:	10 93 03 02 	sts	0x0203, r17	; 0x800203 <__flp+0x1>
    1302:	22 c0       	rjmp	.+68     	; 0x1348 <malloc+0x98>
    1304:	21 15       	cp	r18, r1
    1306:	31 05       	cpc	r19, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <malloc+0x60>
    130a:	42 17       	cp	r20, r18
    130c:	53 07       	cpc	r21, r19
    130e:	18 f4       	brcc	.+6      	; 0x1316 <malloc+0x66>
    1310:	9a 01       	movw	r18, r20
    1312:	bd 01       	movw	r22, r26
    1314:	ef 01       	movw	r28, r30
    1316:	df 01       	movw	r26, r30
    1318:	f8 01       	movw	r30, r16
    131a:	db cf       	rjmp	.-74     	; 0x12d2 <malloc+0x22>
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	f9 f0       	breq	.+62     	; 0x1360 <malloc+0xb0>
    1322:	28 1b       	sub	r18, r24
    1324:	39 0b       	sbc	r19, r25
    1326:	24 30       	cpi	r18, 0x04	; 4
    1328:	31 05       	cpc	r19, r1
    132a:	80 f4       	brcc	.+32     	; 0x134c <malloc+0x9c>
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	9b 81       	ldd	r25, Y+3	; 0x03
    1330:	61 15       	cp	r22, r1
    1332:	71 05       	cpc	r23, r1
    1334:	21 f0       	breq	.+8      	; 0x133e <malloc+0x8e>
    1336:	fb 01       	movw	r30, r22
    1338:	93 83       	std	Z+3, r25	; 0x03
    133a:	82 83       	std	Z+2, r24	; 0x02
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <malloc+0x96>
    133e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__flp+0x1>
    1342:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__flp>
    1346:	fe 01       	movw	r30, r28
    1348:	32 96       	adiw	r30, 0x02	; 2
    134a:	44 c0       	rjmp	.+136    	; 0x13d4 <malloc+0x124>
    134c:	fe 01       	movw	r30, r28
    134e:	e2 0f       	add	r30, r18
    1350:	f3 1f       	adc	r31, r19
    1352:	81 93       	st	Z+, r24
    1354:	91 93       	st	Z+, r25
    1356:	22 50       	subi	r18, 0x02	; 2
    1358:	31 09       	sbc	r19, r1
    135a:	39 83       	std	Y+1, r19	; 0x01
    135c:	28 83       	st	Y, r18
    135e:	3a c0       	rjmp	.+116    	; 0x13d4 <malloc+0x124>
    1360:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
    1364:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
    1368:	23 2b       	or	r18, r19
    136a:	41 f4       	brne	.+16     	; 0x137c <malloc+0xcc>
    136c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1370:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1374:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__brkval+0x1>
    1378:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__brkval>
    137c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1380:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1384:	21 15       	cp	r18, r1
    1386:	31 05       	cpc	r19, r1
    1388:	41 f4       	brne	.+16     	; 0x139a <malloc+0xea>
    138a:	2d b7       	in	r18, 0x3d	; 61
    138c:	3e b7       	in	r19, 0x3e	; 62
    138e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1392:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1396:	24 1b       	sub	r18, r20
    1398:	35 0b       	sbc	r19, r21
    139a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__brkval>
    139e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__brkval+0x1>
    13a2:	e2 17       	cp	r30, r18
    13a4:	f3 07       	cpc	r31, r19
    13a6:	a0 f4       	brcc	.+40     	; 0x13d0 <malloc+0x120>
    13a8:	2e 1b       	sub	r18, r30
    13aa:	3f 0b       	sbc	r19, r31
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	78 f0       	brcs	.+30     	; 0x13d0 <malloc+0x120>
    13b2:	ac 01       	movw	r20, r24
    13b4:	4e 5f       	subi	r20, 0xFE	; 254
    13b6:	5f 4f       	sbci	r21, 0xFF	; 255
    13b8:	24 17       	cp	r18, r20
    13ba:	35 07       	cpc	r19, r21
    13bc:	48 f0       	brcs	.+18     	; 0x13d0 <malloc+0x120>
    13be:	4e 0f       	add	r20, r30
    13c0:	5f 1f       	adc	r21, r31
    13c2:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__brkval+0x1>
    13c6:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__brkval>
    13ca:	81 93       	st	Z+, r24
    13cc:	91 93       	st	Z+, r25
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <malloc+0x124>
    13d0:	e0 e0       	ldi	r30, 0x00	; 0
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	cf 01       	movw	r24, r30
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <free>:
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	09 f4       	brne	.+2      	; 0x13ea <free+0xa>
    13e8:	81 c0       	rjmp	.+258    	; 0x14ec <free+0x10c>
    13ea:	fc 01       	movw	r30, r24
    13ec:	32 97       	sbiw	r30, 0x02	; 2
    13ee:	13 82       	std	Z+3, r1	; 0x03
    13f0:	12 82       	std	Z+2, r1	; 0x02
    13f2:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__flp>
    13f6:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__flp+0x1>
    13fa:	10 97       	sbiw	r26, 0x00	; 0
    13fc:	81 f4       	brne	.+32     	; 0x141e <free+0x3e>
    13fe:	20 81       	ld	r18, Z
    1400:	31 81       	ldd	r19, Z+1	; 0x01
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
    140a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	51 f5       	brne	.+84     	; 0x1468 <free+0x88>
    1414:	f0 93 01 02 	sts	0x0201, r31	; 0x800201 <__brkval+0x1>
    1418:	e0 93 00 02 	sts	0x0200, r30	; 0x800200 <__brkval>
    141c:	67 c0       	rjmp	.+206    	; 0x14ec <free+0x10c>
    141e:	ed 01       	movw	r28, r26
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	ce 17       	cp	r28, r30
    1426:	df 07       	cpc	r29, r31
    1428:	40 f4       	brcc	.+16     	; 0x143a <free+0x5a>
    142a:	4a 81       	ldd	r20, Y+2	; 0x02
    142c:	5b 81       	ldd	r21, Y+3	; 0x03
    142e:	9e 01       	movw	r18, r28
    1430:	41 15       	cp	r20, r1
    1432:	51 05       	cpc	r21, r1
    1434:	f1 f0       	breq	.+60     	; 0x1472 <free+0x92>
    1436:	ea 01       	movw	r28, r20
    1438:	f5 cf       	rjmp	.-22     	; 0x1424 <free+0x44>
    143a:	d3 83       	std	Z+3, r29	; 0x03
    143c:	c2 83       	std	Z+2, r28	; 0x02
    143e:	40 81       	ld	r20, Z
    1440:	51 81       	ldd	r21, Z+1	; 0x01
    1442:	84 0f       	add	r24, r20
    1444:	95 1f       	adc	r25, r21
    1446:	c8 17       	cp	r28, r24
    1448:	d9 07       	cpc	r29, r25
    144a:	59 f4       	brne	.+22     	; 0x1462 <free+0x82>
    144c:	88 81       	ld	r24, Y
    144e:	99 81       	ldd	r25, Y+1	; 0x01
    1450:	84 0f       	add	r24, r20
    1452:	95 1f       	adc	r25, r21
    1454:	02 96       	adiw	r24, 0x02	; 2
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	9b 81       	ldd	r25, Y+3	; 0x03
    145e:	93 83       	std	Z+3, r25	; 0x03
    1460:	82 83       	std	Z+2, r24	; 0x02
    1462:	21 15       	cp	r18, r1
    1464:	31 05       	cpc	r19, r1
    1466:	29 f4       	brne	.+10     	; 0x1472 <free+0x92>
    1468:	f0 93 03 02 	sts	0x0203, r31	; 0x800203 <__flp+0x1>
    146c:	e0 93 02 02 	sts	0x0202, r30	; 0x800202 <__flp>
    1470:	3d c0       	rjmp	.+122    	; 0x14ec <free+0x10c>
    1472:	e9 01       	movw	r28, r18
    1474:	fb 83       	std	Y+3, r31	; 0x03
    1476:	ea 83       	std	Y+2, r30	; 0x02
    1478:	49 91       	ld	r20, Y+
    147a:	59 91       	ld	r21, Y+
    147c:	c4 0f       	add	r28, r20
    147e:	d5 1f       	adc	r29, r21
    1480:	ec 17       	cp	r30, r28
    1482:	fd 07       	cpc	r31, r29
    1484:	61 f4       	brne	.+24     	; 0x149e <free+0xbe>
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	84 0f       	add	r24, r20
    148c:	95 1f       	adc	r25, r21
    148e:	02 96       	adiw	r24, 0x02	; 2
    1490:	e9 01       	movw	r28, r18
    1492:	99 83       	std	Y+1, r25	; 0x01
    1494:	88 83       	st	Y, r24
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	9b 83       	std	Y+3, r25	; 0x03
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	e0 e0       	ldi	r30, 0x00	; 0
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	12 96       	adiw	r26, 0x02	; 2
    14a4:	8d 91       	ld	r24, X+
    14a6:	9c 91       	ld	r25, X
    14a8:	13 97       	sbiw	r26, 0x03	; 3
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <free+0xd4>
    14ae:	fd 01       	movw	r30, r26
    14b0:	dc 01       	movw	r26, r24
    14b2:	f7 cf       	rjmp	.-18     	; 0x14a2 <free+0xc2>
    14b4:	8d 91       	ld	r24, X+
    14b6:	9c 91       	ld	r25, X
    14b8:	11 97       	sbiw	r26, 0x01	; 1
    14ba:	9d 01       	movw	r18, r26
    14bc:	2e 5f       	subi	r18, 0xFE	; 254
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	82 0f       	add	r24, r18
    14c2:	93 1f       	adc	r25, r19
    14c4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
    14c8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
    14cc:	28 17       	cp	r18, r24
    14ce:	39 07       	cpc	r19, r25
    14d0:	69 f4       	brne	.+26     	; 0x14ec <free+0x10c>
    14d2:	30 97       	sbiw	r30, 0x00	; 0
    14d4:	29 f4       	brne	.+10     	; 0x14e0 <free+0x100>
    14d6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__flp+0x1>
    14da:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__flp>
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <free+0x104>
    14e0:	13 82       	std	Z+3, r1	; 0x03
    14e2:	12 82       	std	Z+2, r1	; 0x02
    14e4:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <__brkval+0x1>
    14e8:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <__brkval>
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <strcpy>:
    14f2:	fb 01       	movw	r30, r22
    14f4:	dc 01       	movw	r26, r24
    14f6:	01 90       	ld	r0, Z+
    14f8:	0d 92       	st	X+, r0
    14fa:	00 20       	and	r0, r0
    14fc:	e1 f7       	brne	.-8      	; 0x14f6 <strcpy+0x4>
    14fe:	08 95       	ret

00001500 <fdevopen>:
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	31 f4       	brne	.+12     	; 0x1518 <fdevopen+0x18>
    150c:	61 15       	cp	r22, r1
    150e:	71 05       	cpc	r23, r1
    1510:	19 f4       	brne	.+6      	; 0x1518 <fdevopen+0x18>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	3a c0       	rjmp	.+116    	; 0x158c <fdevopen+0x8c>
    1518:	8b 01       	movw	r16, r22
    151a:	ec 01       	movw	r28, r24
    151c:	6e e0       	ldi	r22, 0x0E	; 14
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <calloc>
    1528:	fc 01       	movw	r30, r24
    152a:	89 2b       	or	r24, r25
    152c:	91 f3       	breq	.-28     	; 0x1512 <fdevopen+0x12>
    152e:	80 e8       	ldi	r24, 0x80	; 128
    1530:	83 83       	std	Z+3, r24	; 0x03
    1532:	01 15       	cp	r16, r1
    1534:	11 05       	cpc	r17, r1
    1536:	71 f0       	breq	.+28     	; 0x1554 <fdevopen+0x54>
    1538:	13 87       	std	Z+11, r17	; 0x0b
    153a:	02 87       	std	Z+10, r16	; 0x0a
    153c:	81 e8       	ldi	r24, 0x81	; 129
    153e:	83 83       	std	Z+3, r24	; 0x03
    1540:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__iob>
    1544:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__iob+0x1>
    1548:	89 2b       	or	r24, r25
    154a:	21 f4       	brne	.+8      	; 0x1554 <fdevopen+0x54>
    154c:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <__iob+0x1>
    1550:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <__iob>
    1554:	20 97       	sbiw	r28, 0x00	; 0
    1556:	c9 f0       	breq	.+50     	; 0x158a <fdevopen+0x8a>
    1558:	d1 87       	std	Z+9, r29	; 0x09
    155a:	c0 87       	std	Z+8, r28	; 0x08
    155c:	83 81       	ldd	r24, Z+3	; 0x03
    155e:	82 60       	ori	r24, 0x02	; 2
    1560:	83 83       	std	Z+3, r24	; 0x03
    1562:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__iob+0x2>
    1566:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__iob+0x3>
    156a:	89 2b       	or	r24, r25
    156c:	71 f4       	brne	.+28     	; 0x158a <fdevopen+0x8a>
    156e:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__iob+0x3>
    1572:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__iob+0x2>
    1576:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__iob+0x4>
    157a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__iob+0x5>
    157e:	89 2b       	or	r24, r25
    1580:	21 f4       	brne	.+8      	; 0x158a <fdevopen+0x8a>
    1582:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__iob+0x5>
    1586:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__iob+0x4>
    158a:	cf 01       	movw	r24, r30
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	08 95       	ret

00001596 <printf>:
    1596:	a0 e0       	ldi	r26, 0x00	; 0
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 ed       	ldi	r30, 0xD1	; 209
    159c:	fa e0       	ldi	r31, 0x0A	; 10
    159e:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__prologue_saves__+0x20>
    15a2:	ae 01       	movw	r20, r28
    15a4:	4b 5f       	subi	r20, 0xFB	; 251
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255
    15a8:	fa 01       	movw	r30, r20
    15aa:	61 91       	ld	r22, Z+
    15ac:	71 91       	ld	r23, Z+
    15ae:	af 01       	movw	r20, r30
    15b0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__iob+0x2>
    15b4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__iob+0x3>
    15b8:	0e 94 11 0b 	call	0x1622	; 0x1622 <vfprintf>
    15bc:	e2 e0       	ldi	r30, 0x02	; 2
    15be:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__epilogue_restores__+0x20>

000015c2 <puts>:
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__iob+0x2>
    15ce:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__iob+0x3>
    15d2:	23 81       	ldd	r18, Z+3	; 0x03
    15d4:	21 ff       	sbrs	r18, 1
    15d6:	1b c0       	rjmp	.+54     	; 0x160e <puts+0x4c>
    15d8:	8c 01       	movw	r16, r24
    15da:	d0 e0       	ldi	r29, 0x00	; 0
    15dc:	c0 e0       	ldi	r28, 0x00	; 0
    15de:	f8 01       	movw	r30, r16
    15e0:	81 91       	ld	r24, Z+
    15e2:	8f 01       	movw	r16, r30
    15e4:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__iob+0x2>
    15e8:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__iob+0x3>
    15ec:	db 01       	movw	r26, r22
    15ee:	18 96       	adiw	r26, 0x08	; 8
    15f0:	ed 91       	ld	r30, X+
    15f2:	fc 91       	ld	r31, X
    15f4:	19 97       	sbiw	r26, 0x09	; 9
    15f6:	88 23       	and	r24, r24
    15f8:	31 f0       	breq	.+12     	; 0x1606 <puts+0x44>
    15fa:	09 95       	icall
    15fc:	89 2b       	or	r24, r25
    15fe:	79 f3       	breq	.-34     	; 0x15de <puts+0x1c>
    1600:	df ef       	ldi	r29, 0xFF	; 255
    1602:	cf ef       	ldi	r28, 0xFF	; 255
    1604:	ec cf       	rjmp	.-40     	; 0x15de <puts+0x1c>
    1606:	8a e0       	ldi	r24, 0x0A	; 10
    1608:	09 95       	icall
    160a:	89 2b       	or	r24, r25
    160c:	19 f0       	breq	.+6      	; 0x1614 <puts+0x52>
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	9f ef       	ldi	r25, 0xFF	; 255
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <puts+0x56>
    1614:	8d 2f       	mov	r24, r29
    1616:	9c 2f       	mov	r25, r28
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <vfprintf>:
    1622:	ab e0       	ldi	r26, 0x0B	; 11
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e1       	ldi	r30, 0x17	; 23
    1628:	fb e0       	ldi	r31, 0x0B	; 11
    162a:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__prologue_saves__>
    162e:	6c 01       	movw	r12, r24
    1630:	7b 01       	movw	r14, r22
    1632:	8a 01       	movw	r16, r20
    1634:	fc 01       	movw	r30, r24
    1636:	17 82       	std	Z+7, r1	; 0x07
    1638:	16 82       	std	Z+6, r1	; 0x06
    163a:	83 81       	ldd	r24, Z+3	; 0x03
    163c:	81 ff       	sbrs	r24, 1
    163e:	cc c1       	rjmp	.+920    	; 0x19d8 <vfprintf+0x3b6>
    1640:	ce 01       	movw	r24, r28
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	3c 01       	movw	r6, r24
    1646:	f6 01       	movw	r30, r12
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	f7 01       	movw	r30, r14
    164c:	93 fd       	sbrc	r25, 3
    164e:	85 91       	lpm	r24, Z+
    1650:	93 ff       	sbrs	r25, 3
    1652:	81 91       	ld	r24, Z+
    1654:	7f 01       	movw	r14, r30
    1656:	88 23       	and	r24, r24
    1658:	09 f4       	brne	.+2      	; 0x165c <vfprintf+0x3a>
    165a:	ba c1       	rjmp	.+884    	; 0x19d0 <vfprintf+0x3ae>
    165c:	85 32       	cpi	r24, 0x25	; 37
    165e:	39 f4       	brne	.+14     	; 0x166e <vfprintf+0x4c>
    1660:	93 fd       	sbrc	r25, 3
    1662:	85 91       	lpm	r24, Z+
    1664:	93 ff       	sbrs	r25, 3
    1666:	81 91       	ld	r24, Z+
    1668:	7f 01       	movw	r14, r30
    166a:	85 32       	cpi	r24, 0x25	; 37
    166c:	29 f4       	brne	.+10     	; 0x1678 <vfprintf+0x56>
    166e:	b6 01       	movw	r22, r12
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    1676:	e7 cf       	rjmp	.-50     	; 0x1646 <vfprintf+0x24>
    1678:	91 2c       	mov	r9, r1
    167a:	21 2c       	mov	r2, r1
    167c:	31 2c       	mov	r3, r1
    167e:	ff e1       	ldi	r31, 0x1F	; 31
    1680:	f3 15       	cp	r31, r3
    1682:	d8 f0       	brcs	.+54     	; 0x16ba <vfprintf+0x98>
    1684:	8b 32       	cpi	r24, 0x2B	; 43
    1686:	79 f0       	breq	.+30     	; 0x16a6 <vfprintf+0x84>
    1688:	38 f4       	brcc	.+14     	; 0x1698 <vfprintf+0x76>
    168a:	80 32       	cpi	r24, 0x20	; 32
    168c:	79 f0       	breq	.+30     	; 0x16ac <vfprintf+0x8a>
    168e:	83 32       	cpi	r24, 0x23	; 35
    1690:	a1 f4       	brne	.+40     	; 0x16ba <vfprintf+0x98>
    1692:	23 2d       	mov	r18, r3
    1694:	20 61       	ori	r18, 0x10	; 16
    1696:	1d c0       	rjmp	.+58     	; 0x16d2 <vfprintf+0xb0>
    1698:	8d 32       	cpi	r24, 0x2D	; 45
    169a:	61 f0       	breq	.+24     	; 0x16b4 <vfprintf+0x92>
    169c:	80 33       	cpi	r24, 0x30	; 48
    169e:	69 f4       	brne	.+26     	; 0x16ba <vfprintf+0x98>
    16a0:	23 2d       	mov	r18, r3
    16a2:	21 60       	ori	r18, 0x01	; 1
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <vfprintf+0xb0>
    16a6:	83 2d       	mov	r24, r3
    16a8:	82 60       	ori	r24, 0x02	; 2
    16aa:	38 2e       	mov	r3, r24
    16ac:	e3 2d       	mov	r30, r3
    16ae:	e4 60       	ori	r30, 0x04	; 4
    16b0:	3e 2e       	mov	r3, r30
    16b2:	2a c0       	rjmp	.+84     	; 0x1708 <vfprintf+0xe6>
    16b4:	f3 2d       	mov	r31, r3
    16b6:	f8 60       	ori	r31, 0x08	; 8
    16b8:	1d c0       	rjmp	.+58     	; 0x16f4 <vfprintf+0xd2>
    16ba:	37 fc       	sbrc	r3, 7
    16bc:	2d c0       	rjmp	.+90     	; 0x1718 <vfprintf+0xf6>
    16be:	20 ed       	ldi	r18, 0xD0	; 208
    16c0:	28 0f       	add	r18, r24
    16c2:	2a 30       	cpi	r18, 0x0A	; 10
    16c4:	40 f0       	brcs	.+16     	; 0x16d6 <vfprintf+0xb4>
    16c6:	8e 32       	cpi	r24, 0x2E	; 46
    16c8:	b9 f4       	brne	.+46     	; 0x16f8 <vfprintf+0xd6>
    16ca:	36 fc       	sbrc	r3, 6
    16cc:	81 c1       	rjmp	.+770    	; 0x19d0 <vfprintf+0x3ae>
    16ce:	23 2d       	mov	r18, r3
    16d0:	20 64       	ori	r18, 0x40	; 64
    16d2:	32 2e       	mov	r3, r18
    16d4:	19 c0       	rjmp	.+50     	; 0x1708 <vfprintf+0xe6>
    16d6:	36 fe       	sbrs	r3, 6
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <vfprintf+0xc4>
    16da:	8a e0       	ldi	r24, 0x0A	; 10
    16dc:	98 9e       	mul	r9, r24
    16de:	20 0d       	add	r18, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	92 2e       	mov	r9, r18
    16e4:	11 c0       	rjmp	.+34     	; 0x1708 <vfprintf+0xe6>
    16e6:	ea e0       	ldi	r30, 0x0A	; 10
    16e8:	2e 9e       	mul	r2, r30
    16ea:	20 0d       	add	r18, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	22 2e       	mov	r2, r18
    16f0:	f3 2d       	mov	r31, r3
    16f2:	f0 62       	ori	r31, 0x20	; 32
    16f4:	3f 2e       	mov	r3, r31
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <vfprintf+0xe6>
    16f8:	8c 36       	cpi	r24, 0x6C	; 108
    16fa:	21 f4       	brne	.+8      	; 0x1704 <vfprintf+0xe2>
    16fc:	83 2d       	mov	r24, r3
    16fe:	80 68       	ori	r24, 0x80	; 128
    1700:	38 2e       	mov	r3, r24
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0xe6>
    1704:	88 36       	cpi	r24, 0x68	; 104
    1706:	41 f4       	brne	.+16     	; 0x1718 <vfprintf+0xf6>
    1708:	f7 01       	movw	r30, r14
    170a:	93 fd       	sbrc	r25, 3
    170c:	85 91       	lpm	r24, Z+
    170e:	93 ff       	sbrs	r25, 3
    1710:	81 91       	ld	r24, Z+
    1712:	7f 01       	movw	r14, r30
    1714:	81 11       	cpse	r24, r1
    1716:	b3 cf       	rjmp	.-154    	; 0x167e <vfprintf+0x5c>
    1718:	98 2f       	mov	r25, r24
    171a:	9f 7d       	andi	r25, 0xDF	; 223
    171c:	95 54       	subi	r25, 0x45	; 69
    171e:	93 30       	cpi	r25, 0x03	; 3
    1720:	28 f4       	brcc	.+10     	; 0x172c <vfprintf+0x10a>
    1722:	0c 5f       	subi	r16, 0xFC	; 252
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	9f e3       	ldi	r25, 0x3F	; 63
    1728:	99 83       	std	Y+1, r25	; 0x01
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <vfprintf+0x124>
    172c:	83 36       	cpi	r24, 0x63	; 99
    172e:	31 f0       	breq	.+12     	; 0x173c <vfprintf+0x11a>
    1730:	83 37       	cpi	r24, 0x73	; 115
    1732:	71 f0       	breq	.+28     	; 0x1750 <vfprintf+0x12e>
    1734:	83 35       	cpi	r24, 0x53	; 83
    1736:	09 f0       	breq	.+2      	; 0x173a <vfprintf+0x118>
    1738:	59 c0       	rjmp	.+178    	; 0x17ec <vfprintf+0x1ca>
    173a:	21 c0       	rjmp	.+66     	; 0x177e <vfprintf+0x15c>
    173c:	f8 01       	movw	r30, r16
    173e:	80 81       	ld	r24, Z
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	0e 5f       	subi	r16, 0xFE	; 254
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	88 24       	eor	r8, r8
    1748:	83 94       	inc	r8
    174a:	91 2c       	mov	r9, r1
    174c:	53 01       	movw	r10, r6
    174e:	13 c0       	rjmp	.+38     	; 0x1776 <vfprintf+0x154>
    1750:	28 01       	movw	r4, r16
    1752:	f2 e0       	ldi	r31, 0x02	; 2
    1754:	4f 0e       	add	r4, r31
    1756:	51 1c       	adc	r5, r1
    1758:	f8 01       	movw	r30, r16
    175a:	a0 80       	ld	r10, Z
    175c:	b1 80       	ldd	r11, Z+1	; 0x01
    175e:	36 fe       	sbrs	r3, 6
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <vfprintf+0x146>
    1762:	69 2d       	mov	r22, r9
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <vfprintf+0x14a>
    1768:	6f ef       	ldi	r22, 0xFF	; 255
    176a:	7f ef       	ldi	r23, 0xFF	; 255
    176c:	c5 01       	movw	r24, r10
    176e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <strnlen>
    1772:	4c 01       	movw	r8, r24
    1774:	82 01       	movw	r16, r4
    1776:	f3 2d       	mov	r31, r3
    1778:	ff 77       	andi	r31, 0x7F	; 127
    177a:	3f 2e       	mov	r3, r31
    177c:	16 c0       	rjmp	.+44     	; 0x17aa <vfprintf+0x188>
    177e:	28 01       	movw	r4, r16
    1780:	22 e0       	ldi	r18, 0x02	; 2
    1782:	42 0e       	add	r4, r18
    1784:	51 1c       	adc	r5, r1
    1786:	f8 01       	movw	r30, r16
    1788:	a0 80       	ld	r10, Z
    178a:	b1 80       	ldd	r11, Z+1	; 0x01
    178c:	36 fe       	sbrs	r3, 6
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <vfprintf+0x174>
    1790:	69 2d       	mov	r22, r9
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x178>
    1796:	6f ef       	ldi	r22, 0xFF	; 255
    1798:	7f ef       	ldi	r23, 0xFF	; 255
    179a:	c5 01       	movw	r24, r10
    179c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <strnlen_P>
    17a0:	4c 01       	movw	r8, r24
    17a2:	f3 2d       	mov	r31, r3
    17a4:	f0 68       	ori	r31, 0x80	; 128
    17a6:	3f 2e       	mov	r3, r31
    17a8:	82 01       	movw	r16, r4
    17aa:	33 fc       	sbrc	r3, 3
    17ac:	1b c0       	rjmp	.+54     	; 0x17e4 <vfprintf+0x1c2>
    17ae:	82 2d       	mov	r24, r2
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	88 16       	cp	r8, r24
    17b4:	99 06       	cpc	r9, r25
    17b6:	b0 f4       	brcc	.+44     	; 0x17e4 <vfprintf+0x1c2>
    17b8:	b6 01       	movw	r22, r12
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    17c2:	2a 94       	dec	r2
    17c4:	f4 cf       	rjmp	.-24     	; 0x17ae <vfprintf+0x18c>
    17c6:	f5 01       	movw	r30, r10
    17c8:	37 fc       	sbrc	r3, 7
    17ca:	85 91       	lpm	r24, Z+
    17cc:	37 fe       	sbrs	r3, 7
    17ce:	81 91       	ld	r24, Z+
    17d0:	5f 01       	movw	r10, r30
    17d2:	b6 01       	movw	r22, r12
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    17da:	21 10       	cpse	r2, r1
    17dc:	2a 94       	dec	r2
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	82 1a       	sub	r8, r18
    17e2:	91 08       	sbc	r9, r1
    17e4:	81 14       	cp	r8, r1
    17e6:	91 04       	cpc	r9, r1
    17e8:	71 f7       	brne	.-36     	; 0x17c6 <vfprintf+0x1a4>
    17ea:	e8 c0       	rjmp	.+464    	; 0x19bc <vfprintf+0x39a>
    17ec:	84 36       	cpi	r24, 0x64	; 100
    17ee:	11 f0       	breq	.+4      	; 0x17f4 <vfprintf+0x1d2>
    17f0:	89 36       	cpi	r24, 0x69	; 105
    17f2:	41 f5       	brne	.+80     	; 0x1844 <vfprintf+0x222>
    17f4:	f8 01       	movw	r30, r16
    17f6:	37 fe       	sbrs	r3, 7
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <vfprintf+0x1e6>
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	0c 5f       	subi	r16, 0xFC	; 252
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	08 c0       	rjmp	.+16     	; 0x1818 <vfprintf+0x1f6>
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	07 2e       	mov	r0, r23
    180e:	00 0c       	add	r0, r0
    1810:	88 0b       	sbc	r24, r24
    1812:	99 0b       	sbc	r25, r25
    1814:	0e 5f       	subi	r16, 0xFE	; 254
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	f3 2d       	mov	r31, r3
    181a:	ff 76       	andi	r31, 0x6F	; 111
    181c:	3f 2e       	mov	r3, r31
    181e:	97 ff       	sbrs	r25, 7
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <vfprintf+0x212>
    1822:	90 95       	com	r25
    1824:	80 95       	com	r24
    1826:	70 95       	com	r23
    1828:	61 95       	neg	r22
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	f0 68       	ori	r31, 0x80	; 128
    1832:	3f 2e       	mov	r3, r31
    1834:	2a e0       	ldi	r18, 0x0A	; 10
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	a3 01       	movw	r20, r6
    183a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__ultoa_invert>
    183e:	88 2e       	mov	r8, r24
    1840:	86 18       	sub	r8, r6
    1842:	45 c0       	rjmp	.+138    	; 0x18ce <vfprintf+0x2ac>
    1844:	85 37       	cpi	r24, 0x75	; 117
    1846:	31 f4       	brne	.+12     	; 0x1854 <vfprintf+0x232>
    1848:	23 2d       	mov	r18, r3
    184a:	2f 7e       	andi	r18, 0xEF	; 239
    184c:	b2 2e       	mov	r11, r18
    184e:	2a e0       	ldi	r18, 0x0A	; 10
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	25 c0       	rjmp	.+74     	; 0x189e <vfprintf+0x27c>
    1854:	93 2d       	mov	r25, r3
    1856:	99 7f       	andi	r25, 0xF9	; 249
    1858:	b9 2e       	mov	r11, r25
    185a:	8f 36       	cpi	r24, 0x6F	; 111
    185c:	c1 f0       	breq	.+48     	; 0x188e <vfprintf+0x26c>
    185e:	18 f4       	brcc	.+6      	; 0x1866 <vfprintf+0x244>
    1860:	88 35       	cpi	r24, 0x58	; 88
    1862:	79 f0       	breq	.+30     	; 0x1882 <vfprintf+0x260>
    1864:	b5 c0       	rjmp	.+362    	; 0x19d0 <vfprintf+0x3ae>
    1866:	80 37       	cpi	r24, 0x70	; 112
    1868:	19 f0       	breq	.+6      	; 0x1870 <vfprintf+0x24e>
    186a:	88 37       	cpi	r24, 0x78	; 120
    186c:	21 f0       	breq	.+8      	; 0x1876 <vfprintf+0x254>
    186e:	b0 c0       	rjmp	.+352    	; 0x19d0 <vfprintf+0x3ae>
    1870:	e9 2f       	mov	r30, r25
    1872:	e0 61       	ori	r30, 0x10	; 16
    1874:	be 2e       	mov	r11, r30
    1876:	b4 fe       	sbrs	r11, 4
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <vfprintf+0x272>
    187a:	fb 2d       	mov	r31, r11
    187c:	f4 60       	ori	r31, 0x04	; 4
    187e:	bf 2e       	mov	r11, r31
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <vfprintf+0x272>
    1882:	34 fe       	sbrs	r3, 4
    1884:	0a c0       	rjmp	.+20     	; 0x189a <vfprintf+0x278>
    1886:	29 2f       	mov	r18, r25
    1888:	26 60       	ori	r18, 0x06	; 6
    188a:	b2 2e       	mov	r11, r18
    188c:	06 c0       	rjmp	.+12     	; 0x189a <vfprintf+0x278>
    188e:	28 e0       	ldi	r18, 0x08	; 8
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	05 c0       	rjmp	.+10     	; 0x189e <vfprintf+0x27c>
    1894:	20 e1       	ldi	r18, 0x10	; 16
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x27c>
    189a:	20 e1       	ldi	r18, 0x10	; 16
    189c:	32 e0       	ldi	r19, 0x02	; 2
    189e:	f8 01       	movw	r30, r16
    18a0:	b7 fe       	sbrs	r11, 7
    18a2:	07 c0       	rjmp	.+14     	; 0x18b2 <vfprintf+0x290>
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	0c 5f       	subi	r16, 0xFC	; 252
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <vfprintf+0x29c>
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 5f       	subi	r16, 0xFE	; 254
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	a3 01       	movw	r20, r6
    18c0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__ultoa_invert>
    18c4:	88 2e       	mov	r8, r24
    18c6:	86 18       	sub	r8, r6
    18c8:	fb 2d       	mov	r31, r11
    18ca:	ff 77       	andi	r31, 0x7F	; 127
    18cc:	3f 2e       	mov	r3, r31
    18ce:	36 fe       	sbrs	r3, 6
    18d0:	0d c0       	rjmp	.+26     	; 0x18ec <vfprintf+0x2ca>
    18d2:	23 2d       	mov	r18, r3
    18d4:	2e 7f       	andi	r18, 0xFE	; 254
    18d6:	a2 2e       	mov	r10, r18
    18d8:	89 14       	cp	r8, r9
    18da:	58 f4       	brcc	.+22     	; 0x18f2 <vfprintf+0x2d0>
    18dc:	34 fe       	sbrs	r3, 4
    18de:	0b c0       	rjmp	.+22     	; 0x18f6 <vfprintf+0x2d4>
    18e0:	32 fc       	sbrc	r3, 2
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <vfprintf+0x2d4>
    18e4:	83 2d       	mov	r24, r3
    18e6:	8e 7e       	andi	r24, 0xEE	; 238
    18e8:	a8 2e       	mov	r10, r24
    18ea:	05 c0       	rjmp	.+10     	; 0x18f6 <vfprintf+0x2d4>
    18ec:	b8 2c       	mov	r11, r8
    18ee:	a3 2c       	mov	r10, r3
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <vfprintf+0x2d6>
    18f2:	b8 2c       	mov	r11, r8
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <vfprintf+0x2d6>
    18f6:	b9 2c       	mov	r11, r9
    18f8:	a4 fe       	sbrs	r10, 4
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <vfprintf+0x2f8>
    18fc:	fe 01       	movw	r30, r28
    18fe:	e8 0d       	add	r30, r8
    1900:	f1 1d       	adc	r31, r1
    1902:	80 81       	ld	r24, Z
    1904:	80 33       	cpi	r24, 0x30	; 48
    1906:	21 f4       	brne	.+8      	; 0x1910 <vfprintf+0x2ee>
    1908:	9a 2d       	mov	r25, r10
    190a:	99 7e       	andi	r25, 0xE9	; 233
    190c:	a9 2e       	mov	r10, r25
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <vfprintf+0x300>
    1910:	a2 fe       	sbrs	r10, 2
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <vfprintf+0x2fe>
    1914:	b3 94       	inc	r11
    1916:	b3 94       	inc	r11
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <vfprintf+0x300>
    191a:	8a 2d       	mov	r24, r10
    191c:	86 78       	andi	r24, 0x86	; 134
    191e:	09 f0       	breq	.+2      	; 0x1922 <vfprintf+0x300>
    1920:	b3 94       	inc	r11
    1922:	a3 fc       	sbrc	r10, 3
    1924:	11 c0       	rjmp	.+34     	; 0x1948 <vfprintf+0x326>
    1926:	a0 fe       	sbrs	r10, 0
    1928:	06 c0       	rjmp	.+12     	; 0x1936 <vfprintf+0x314>
    192a:	b2 14       	cp	r11, r2
    192c:	88 f4       	brcc	.+34     	; 0x1950 <vfprintf+0x32e>
    192e:	28 0c       	add	r2, r8
    1930:	92 2c       	mov	r9, r2
    1932:	9b 18       	sub	r9, r11
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <vfprintf+0x330>
    1936:	b2 14       	cp	r11, r2
    1938:	60 f4       	brcc	.+24     	; 0x1952 <vfprintf+0x330>
    193a:	b6 01       	movw	r22, r12
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    1944:	b3 94       	inc	r11
    1946:	f7 cf       	rjmp	.-18     	; 0x1936 <vfprintf+0x314>
    1948:	b2 14       	cp	r11, r2
    194a:	18 f4       	brcc	.+6      	; 0x1952 <vfprintf+0x330>
    194c:	2b 18       	sub	r2, r11
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <vfprintf+0x332>
    1950:	98 2c       	mov	r9, r8
    1952:	21 2c       	mov	r2, r1
    1954:	a4 fe       	sbrs	r10, 4
    1956:	10 c0       	rjmp	.+32     	; 0x1978 <vfprintf+0x356>
    1958:	b6 01       	movw	r22, r12
    195a:	80 e3       	ldi	r24, 0x30	; 48
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    1962:	a2 fe       	sbrs	r10, 2
    1964:	17 c0       	rjmp	.+46     	; 0x1994 <vfprintf+0x372>
    1966:	a1 fc       	sbrc	r10, 1
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <vfprintf+0x34e>
    196a:	88 e7       	ldi	r24, 0x78	; 120
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <vfprintf+0x352>
    1970:	88 e5       	ldi	r24, 0x58	; 88
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	b6 01       	movw	r22, r12
    1976:	0c c0       	rjmp	.+24     	; 0x1990 <vfprintf+0x36e>
    1978:	8a 2d       	mov	r24, r10
    197a:	86 78       	andi	r24, 0x86	; 134
    197c:	59 f0       	breq	.+22     	; 0x1994 <vfprintf+0x372>
    197e:	a1 fe       	sbrs	r10, 1
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <vfprintf+0x364>
    1982:	8b e2       	ldi	r24, 0x2B	; 43
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <vfprintf+0x366>
    1986:	80 e2       	ldi	r24, 0x20	; 32
    1988:	a7 fc       	sbrc	r10, 7
    198a:	8d e2       	ldi	r24, 0x2D	; 45
    198c:	b6 01       	movw	r22, r12
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    1994:	89 14       	cp	r8, r9
    1996:	38 f4       	brcc	.+14     	; 0x19a6 <vfprintf+0x384>
    1998:	b6 01       	movw	r22, r12
    199a:	80 e3       	ldi	r24, 0x30	; 48
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    19a2:	9a 94       	dec	r9
    19a4:	f7 cf       	rjmp	.-18     	; 0x1994 <vfprintf+0x372>
    19a6:	8a 94       	dec	r8
    19a8:	f3 01       	movw	r30, r6
    19aa:	e8 0d       	add	r30, r8
    19ac:	f1 1d       	adc	r31, r1
    19ae:	80 81       	ld	r24, Z
    19b0:	b6 01       	movw	r22, r12
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    19b8:	81 10       	cpse	r8, r1
    19ba:	f5 cf       	rjmp	.-22     	; 0x19a6 <vfprintf+0x384>
    19bc:	22 20       	and	r2, r2
    19be:	09 f4       	brne	.+2      	; 0x19c2 <vfprintf+0x3a0>
    19c0:	42 ce       	rjmp	.-892    	; 0x1646 <vfprintf+0x24>
    19c2:	b6 01       	movw	r22, r12
    19c4:	80 e2       	ldi	r24, 0x20	; 32
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <fputc>
    19cc:	2a 94       	dec	r2
    19ce:	f6 cf       	rjmp	.-20     	; 0x19bc <vfprintf+0x39a>
    19d0:	f6 01       	movw	r30, r12
    19d2:	86 81       	ldd	r24, Z+6	; 0x06
    19d4:	97 81       	ldd	r25, Z+7	; 0x07
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <vfprintf+0x3ba>
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	9f ef       	ldi	r25, 0xFF	; 255
    19dc:	2b 96       	adiw	r28, 0x0b	; 11
    19de:	e2 e1       	ldi	r30, 0x12	; 18
    19e0:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__epilogue_restores__>

000019e4 <calloc>:
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	86 9f       	mul	r24, r22
    19ee:	80 01       	movw	r16, r0
    19f0:	87 9f       	mul	r24, r23
    19f2:	10 0d       	add	r17, r0
    19f4:	96 9f       	mul	r25, r22
    19f6:	10 0d       	add	r17, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	c8 01       	movw	r24, r16
    19fc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <malloc>
    1a00:	ec 01       	movw	r28, r24
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	29 f0       	breq	.+10     	; 0x1a10 <calloc+0x2c>
    1a06:	a8 01       	movw	r20, r16
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <memset>
    1a10:	ce 01       	movw	r24, r28
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	08 95       	ret

00001a1c <strnlen_P>:
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	05 90       	lpm	r0, Z+
    1a20:	61 50       	subi	r22, 0x01	; 1
    1a22:	70 40       	sbci	r23, 0x00	; 0
    1a24:	01 10       	cpse	r0, r1
    1a26:	d8 f7       	brcc	.-10     	; 0x1a1e <strnlen_P+0x2>
    1a28:	80 95       	com	r24
    1a2a:	90 95       	com	r25
    1a2c:	8e 0f       	add	r24, r30
    1a2e:	9f 1f       	adc	r25, r31
    1a30:	08 95       	ret

00001a32 <memset>:
    1a32:	dc 01       	movw	r26, r24
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <memset+0x6>
    1a36:	6d 93       	st	X+, r22
    1a38:	41 50       	subi	r20, 0x01	; 1
    1a3a:	50 40       	sbci	r21, 0x00	; 0
    1a3c:	e0 f7       	brcc	.-8      	; 0x1a36 <memset+0x4>
    1a3e:	08 95       	ret

00001a40 <strnlen>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	61 50       	subi	r22, 0x01	; 1
    1a44:	70 40       	sbci	r23, 0x00	; 0
    1a46:	01 90       	ld	r0, Z+
    1a48:	01 10       	cpse	r0, r1
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <strnlen+0x2>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	8e 0f       	add	r24, r30
    1a52:	9f 1f       	adc	r25, r31
    1a54:	08 95       	ret

00001a56 <fputc>:
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	fb 01       	movw	r30, r22
    1a60:	23 81       	ldd	r18, Z+3	; 0x03
    1a62:	21 fd       	sbrc	r18, 1
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <fputc+0x16>
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	9f ef       	ldi	r25, 0xFF	; 255
    1a6a:	2c c0       	rjmp	.+88     	; 0x1ac4 <fputc+0x6e>
    1a6c:	22 ff       	sbrs	r18, 2
    1a6e:	16 c0       	rjmp	.+44     	; 0x1a9c <fputc+0x46>
    1a70:	46 81       	ldd	r20, Z+6	; 0x06
    1a72:	57 81       	ldd	r21, Z+7	; 0x07
    1a74:	24 81       	ldd	r18, Z+4	; 0x04
    1a76:	35 81       	ldd	r19, Z+5	; 0x05
    1a78:	42 17       	cp	r20, r18
    1a7a:	53 07       	cpc	r21, r19
    1a7c:	44 f4       	brge	.+16     	; 0x1a8e <fputc+0x38>
    1a7e:	a0 81       	ld	r26, Z
    1a80:	b1 81       	ldd	r27, Z+1	; 0x01
    1a82:	9d 01       	movw	r18, r26
    1a84:	2f 5f       	subi	r18, 0xFF	; 255
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	31 83       	std	Z+1, r19	; 0x01
    1a8a:	20 83       	st	Z, r18
    1a8c:	8c 93       	st	X, r24
    1a8e:	26 81       	ldd	r18, Z+6	; 0x06
    1a90:	37 81       	ldd	r19, Z+7	; 0x07
    1a92:	2f 5f       	subi	r18, 0xFF	; 255
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	37 83       	std	Z+7, r19	; 0x07
    1a98:	26 83       	std	Z+6, r18	; 0x06
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <fputc+0x6e>
    1a9c:	8b 01       	movw	r16, r22
    1a9e:	ec 01       	movw	r28, r24
    1aa0:	fb 01       	movw	r30, r22
    1aa2:	00 84       	ldd	r0, Z+8	; 0x08
    1aa4:	f1 85       	ldd	r31, Z+9	; 0x09
    1aa6:	e0 2d       	mov	r30, r0
    1aa8:	09 95       	icall
    1aaa:	89 2b       	or	r24, r25
    1aac:	e1 f6       	brne	.-72     	; 0x1a66 <fputc+0x10>
    1aae:	d8 01       	movw	r26, r16
    1ab0:	16 96       	adiw	r26, 0x06	; 6
    1ab2:	8d 91       	ld	r24, X+
    1ab4:	9c 91       	ld	r25, X
    1ab6:	17 97       	sbiw	r26, 0x07	; 7
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	17 96       	adiw	r26, 0x07	; 7
    1abc:	9c 93       	st	X, r25
    1abe:	8e 93       	st	-X, r24
    1ac0:	16 97       	sbiw	r26, 0x06	; 6
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret

00001ace <__ultoa_invert>:
    1ace:	fa 01       	movw	r30, r20
    1ad0:	aa 27       	eor	r26, r26
    1ad2:	28 30       	cpi	r18, 0x08	; 8
    1ad4:	51 f1       	breq	.+84     	; 0x1b2a <__ultoa_invert+0x5c>
    1ad6:	20 31       	cpi	r18, 0x10	; 16
    1ad8:	81 f1       	breq	.+96     	; 0x1b3a <__ultoa_invert+0x6c>
    1ada:	e8 94       	clt
    1adc:	6f 93       	push	r22
    1ade:	6e 7f       	andi	r22, 0xFE	; 254
    1ae0:	6e 5f       	subi	r22, 0xFE	; 254
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	af 4f       	sbci	r26, 0xFF	; 255
    1aea:	b1 e0       	ldi	r27, 0x01	; 1
    1aec:	3e d0       	rcall	.+124    	; 0x1b6a <__ultoa_invert+0x9c>
    1aee:	b4 e0       	ldi	r27, 0x04	; 4
    1af0:	3c d0       	rcall	.+120    	; 0x1b6a <__ultoa_invert+0x9c>
    1af2:	67 0f       	add	r22, r23
    1af4:	78 1f       	adc	r23, r24
    1af6:	89 1f       	adc	r24, r25
    1af8:	9a 1f       	adc	r25, r26
    1afa:	a1 1d       	adc	r26, r1
    1afc:	68 0f       	add	r22, r24
    1afe:	79 1f       	adc	r23, r25
    1b00:	8a 1f       	adc	r24, r26
    1b02:	91 1d       	adc	r25, r1
    1b04:	a1 1d       	adc	r26, r1
    1b06:	6a 0f       	add	r22, r26
    1b08:	71 1d       	adc	r23, r1
    1b0a:	81 1d       	adc	r24, r1
    1b0c:	91 1d       	adc	r25, r1
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	20 d0       	rcall	.+64     	; 0x1b52 <__ultoa_invert+0x84>
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <__ultoa_invert+0x48>
    1b14:	68 94       	set
    1b16:	3f 91       	pop	r19
    1b18:	2a e0       	ldi	r18, 0x0A	; 10
    1b1a:	26 9f       	mul	r18, r22
    1b1c:	11 24       	eor	r1, r1
    1b1e:	30 19       	sub	r19, r0
    1b20:	30 5d       	subi	r19, 0xD0	; 208
    1b22:	31 93       	st	Z+, r19
    1b24:	de f6       	brtc	.-74     	; 0x1adc <__ultoa_invert+0xe>
    1b26:	cf 01       	movw	r24, r30
    1b28:	08 95       	ret
    1b2a:	46 2f       	mov	r20, r22
    1b2c:	47 70       	andi	r20, 0x07	; 7
    1b2e:	40 5d       	subi	r20, 0xD0	; 208
    1b30:	41 93       	st	Z+, r20
    1b32:	b3 e0       	ldi	r27, 0x03	; 3
    1b34:	0f d0       	rcall	.+30     	; 0x1b54 <__ultoa_invert+0x86>
    1b36:	c9 f7       	brne	.-14     	; 0x1b2a <__ultoa_invert+0x5c>
    1b38:	f6 cf       	rjmp	.-20     	; 0x1b26 <__ultoa_invert+0x58>
    1b3a:	46 2f       	mov	r20, r22
    1b3c:	4f 70       	andi	r20, 0x0F	; 15
    1b3e:	40 5d       	subi	r20, 0xD0	; 208
    1b40:	4a 33       	cpi	r20, 0x3A	; 58
    1b42:	18 f0       	brcs	.+6      	; 0x1b4a <__ultoa_invert+0x7c>
    1b44:	49 5d       	subi	r20, 0xD9	; 217
    1b46:	31 fd       	sbrc	r19, 1
    1b48:	40 52       	subi	r20, 0x20	; 32
    1b4a:	41 93       	st	Z+, r20
    1b4c:	02 d0       	rcall	.+4      	; 0x1b52 <__ultoa_invert+0x84>
    1b4e:	a9 f7       	brne	.-22     	; 0x1b3a <__ultoa_invert+0x6c>
    1b50:	ea cf       	rjmp	.-44     	; 0x1b26 <__ultoa_invert+0x58>
    1b52:	b4 e0       	ldi	r27, 0x04	; 4
    1b54:	a6 95       	lsr	r26
    1b56:	97 95       	ror	r25
    1b58:	87 95       	ror	r24
    1b5a:	77 95       	ror	r23
    1b5c:	67 95       	ror	r22
    1b5e:	ba 95       	dec	r27
    1b60:	c9 f7       	brne	.-14     	; 0x1b54 <__ultoa_invert+0x86>
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	61 05       	cpc	r22, r1
    1b66:	71 05       	cpc	r23, r1
    1b68:	08 95       	ret
    1b6a:	9b 01       	movw	r18, r22
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	0a 2e       	mov	r0, r26
    1b70:	06 94       	lsr	r0
    1b72:	57 95       	ror	r21
    1b74:	47 95       	ror	r20
    1b76:	37 95       	ror	r19
    1b78:	27 95       	ror	r18
    1b7a:	ba 95       	dec	r27
    1b7c:	c9 f7       	brne	.-14     	; 0x1b70 <__ultoa_invert+0xa2>
    1b7e:	62 0f       	add	r22, r18
    1b80:	73 1f       	adc	r23, r19
    1b82:	84 1f       	adc	r24, r20
    1b84:	95 1f       	adc	r25, r21
    1b86:	a0 1d       	adc	r26, r0
    1b88:	08 95       	ret

00001b8a <__prologue_saves__>:
    1b8a:	2f 92       	push	r2
    1b8c:	3f 92       	push	r3
    1b8e:	4f 92       	push	r4
    1b90:	5f 92       	push	r5
    1b92:	6f 92       	push	r6
    1b94:	7f 92       	push	r7
    1b96:	8f 92       	push	r8
    1b98:	9f 92       	push	r9
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	ca 1b       	sub	r28, r26
    1bb4:	db 0b       	sbc	r29, r27
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	09 94       	ijmp

00001bc2 <__epilogue_restores__>:
    1bc2:	2a 88       	ldd	r2, Y+18	; 0x12
    1bc4:	39 88       	ldd	r3, Y+17	; 0x11
    1bc6:	48 88       	ldd	r4, Y+16	; 0x10
    1bc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bca:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bce:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bd4:	b9 84       	ldd	r11, Y+9	; 0x09
    1bd6:	c8 84       	ldd	r12, Y+8	; 0x08
    1bd8:	df 80       	ldd	r13, Y+7	; 0x07
    1bda:	ee 80       	ldd	r14, Y+6	; 0x06
    1bdc:	fd 80       	ldd	r15, Y+5	; 0x05
    1bde:	0c 81       	ldd	r16, Y+4	; 0x04
    1be0:	1b 81       	ldd	r17, Y+3	; 0x03
    1be2:	aa 81       	ldd	r26, Y+2	; 0x02
    1be4:	b9 81       	ldd	r27, Y+1	; 0x01
    1be6:	ce 0f       	add	r28, r30
    1be8:	d1 1d       	adc	r29, r1
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	ed 01       	movw	r28, r26
    1bf6:	08 95       	ret

00001bf8 <_exit>:
    1bf8:	f8 94       	cli

00001bfa <__stop_program>:
    1bfa:	ff cf       	rjmp	.-2      	; 0x1bfa <__stop_program>
