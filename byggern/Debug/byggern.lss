
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017c  00800100  00001c44  00001cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080027c  0080027c  00001e54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c2b  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001414  00000000  00000000  00004dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001343  00000000  00000000  000061d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  00007518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c2  00000000  00000000  00007b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001090  00000000  00000000  000083fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000948e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__vector_16>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <timer_init+0xa>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e4 e4       	ldi	r30, 0x44	; 68
     3aa:	fc e1       	ldi	r31, 0x1C	; 28
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	ac 37       	cpi	r26, 0x7C	; 124
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	ac e7       	ldi	r26, 0x7C	; 124
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a6 39       	cpi	r26, 0x96	; 150
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
     3cc:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x116a>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x116a>
     3e6:	08 95       	ret

000003e8 <main>:
#include "test.h"
#include "SPI.h"

int main(void)
{
	setupInit();
     3e8:	0e 94 99 04 	call	0x932	; 0x932 <setupInit>
	test_SRAM();
     3ec:	0e 94 ce 04 	call	0x99c	; 0x99c <test_SRAM>
	SPI_MasterTransmit(0xAA);
     3f0:	8a ea       	ldi	r24, 0xAA	; 170
     3f2:	0e 94 c7 04 	call	0x98e	; 0x98e <SPI_MasterTransmit>
	SPI_MasterTransmit(0x01);
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 c7 04 	call	0x98e	; 0x98e <SPI_MasterTransmit>
	printf("%i",SPDR);
     3fc:	8f b1       	in	r24, 0x0f	; 15
     3fe:	1f 92       	push	r1
     400:	8f 93       	push	r24
     402:	8a e0       	ldi	r24, 0x0A	; 10
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	9f 93       	push	r25
     408:	8f 93       	push	r24
     40a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <printf>
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	ff cf       	rjmp	.-2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

00000418 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     418:	85 b7       	in	r24, 0x35	; 53
     41a:	8f 7e       	andi	r24, 0xEF	; 239
     41c:	85 bf       	out	0x35, r24	; 53
     41e:	84 b7       	in	r24, 0x34	; 52
     420:	8f 7d       	andi	r24, 0xDF	; 223
     422:	84 bf       	out	0x34, r24	; 52
     424:	86 b7       	in	r24, 0x36	; 54
     426:	8f 77       	andi	r24, 0x7F	; 127
     428:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     42a:	85 b7       	in	r24, 0x35	; 53
     42c:	80 62       	ori	r24, 0x20	; 32
     42e:	85 bf       	out	0x35, r24	; 53
     430:	88 95       	sleep
     432:	85 b7       	in	r24, 0x35	; 53
     434:	8f 7d       	andi	r24, 0xDF	; 223
     436:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     438:	85 b7       	in	r24, 0x35	; 53
     43a:	80 62       	ori	r24, 0x20	; 32
     43c:	85 bf       	out	0x35, r24	; 53
     43e:	08 95       	ret

00000440 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     446:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     450:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <joystickOffsetY>
     454:	08 95       	ret

00000456 <joystick_readPosition>:
}
void joystick_readPosition() {
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     468:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     470:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     472:	60 91 89 02 	lds	r22, 0x0289	; 0x800289 <joystickOffsetX>
     476:	c6 17       	cp	r28, r22
     478:	80 f4       	brcc	.+32     	; 0x49a <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	2c 2f       	mov	r18, r28
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	26 1b       	sub	r18, r22
     482:	37 0b       	sbc	r19, r23
     484:	44 e6       	ldi	r20, 0x64	; 100
     486:	42 9f       	mul	r20, r18
     488:	c0 01       	movw	r24, r0
     48a:	43 9f       	mul	r20, r19
     48c:	90 0d       	add	r25, r0
     48e:	11 24       	eor	r1, r1
     490:	0e 94 c5 08 	call	0x118a	; 0x118a <__divmodhi4>
     494:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <__data_end>
     498:	14 c0       	rjmp	.+40     	; 0x4c2 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     49a:	46 2f       	mov	r20, r22
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	2c 2f       	mov	r18, r28
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	24 1b       	sub	r18, r20
     4a4:	35 0b       	sbc	r19, r21
     4a6:	64 e6       	ldi	r22, 0x64	; 100
     4a8:	62 9f       	mul	r22, r18
     4aa:	c0 01       	movw	r24, r0
     4ac:	63 9f       	mul	r22, r19
     4ae:	90 0d       	add	r25, r0
     4b0:	11 24       	eor	r1, r1
     4b2:	6f ef       	ldi	r22, 0xFF	; 255
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	64 1b       	sub	r22, r20
     4b8:	75 0b       	sbc	r23, r21
     4ba:	0e 94 c5 08 	call	0x118a	; 0x118a <__divmodhi4>
     4be:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     4c2:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <joystickOffsetY>
     4c6:	e2 17       	cp	r30, r18
     4c8:	88 f4       	brcc	.+34     	; 0x4ec <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     4ca:	62 2f       	mov	r22, r18
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	4e 2f       	mov	r20, r30
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	46 1b       	sub	r20, r22
     4d4:	57 0b       	sbc	r21, r23
     4d6:	24 e6       	ldi	r18, 0x64	; 100
     4d8:	24 9f       	mul	r18, r20
     4da:	c0 01       	movw	r24, r0
     4dc:	25 9f       	mul	r18, r21
     4de:	90 0d       	add	r25, r0
     4e0:	11 24       	eor	r1, r1
     4e2:	0e 94 c5 08 	call	0x118a	; 0x118a <__divmodhi4>
     4e6:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <__data_end+0x1>
     4ea:	13 c0       	rjmp	.+38     	; 0x512 <__stack+0x13>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	4e 2f       	mov	r20, r30
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	42 1b       	sub	r20, r18
     4f4:	53 0b       	sbc	r21, r19
     4f6:	64 e6       	ldi	r22, 0x64	; 100
     4f8:	64 9f       	mul	r22, r20
     4fa:	c0 01       	movw	r24, r0
     4fc:	65 9f       	mul	r22, r21
     4fe:	90 0d       	add	r25, r0
     500:	11 24       	eor	r1, r1
     502:	6f ef       	ldi	r22, 0xFF	; 255
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	62 1b       	sub	r22, r18
     508:	73 0b       	sbc	r23, r19
     50a:	0e 94 c5 08 	call	0x118a	; 0x118a <__divmodhi4>
     50e:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     512:	cc e7       	ldi	r28, 0x7C	; 124
     514:	d2 e0       	ldi	r29, 0x02	; 2
     516:	68 81       	ld	r22, Y
     518:	06 2e       	mov	r0, r22
     51a:	00 0c       	add	r0, r0
     51c:	77 0b       	sbc	r23, r23
     51e:	88 0b       	sbc	r24, r24
     520:	99 0b       	sbc	r25, r25
     522:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatsisf>
     526:	6b 01       	movw	r12, r22
     528:	7c 01       	movw	r14, r24
     52a:	69 81       	ldd	r22, Y+1	; 0x01
     52c:	06 2e       	mov	r0, r22
     52e:	00 0c       	add	r0, r0
     530:	77 0b       	sbc	r23, r23
     532:	88 0b       	sbc	r24, r24
     534:	99 0b       	sbc	r25, r25
     536:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatsisf>
     53a:	a7 01       	movw	r20, r14
     53c:	96 01       	movw	r18, r12
     53e:	0e 94 23 06 	call	0xc46	; 0xc46 <atan2>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	44 eb       	ldi	r20, 0xB4	; 180
     548:	53 e4       	ldi	r21, 0x43	; 67
     54a:	0e 94 e7 07 	call	0xfce	; 0xfce <__mulsf3>
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	5f e3       	ldi	r21, 0x3F	; 63
     556:	0e 94 e7 07 	call	0xfce	; 0xfce <__mulsf3>
     55a:	23 ec       	ldi	r18, 0xC3	; 195
     55c:	35 ef       	ldi	r19, 0xF5	; 245
     55e:	48 e4       	ldi	r20, 0x48	; 72
     560:	50 e4       	ldi	r21, 0x40	; 64
     562:	0e 94 82 06 	call	0xd04	; 0xd04 <__divsf3>
     566:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fixsfsi>
     56a:	7b 83       	std	Y+3, r23	; 0x03
     56c:	6a 83       	std	Y+2, r22	; 0x02
}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	08 95       	ret

0000057c <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     57c:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     57e:	80 81       	ld	r24, Z
     580:	94 e0       	ldi	r25, 0x04	; 4
     582:	98 0f       	add	r25, r24
     584:	99 30       	cpi	r25, 0x09	; 9
     586:	20 f4       	brcc	.+8      	; 0x590 <joystick_getDirection+0x14>
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	9c 5f       	subi	r25, 0xFC	; 252
     58c:	99 30       	cpi	r25, 0x09	; 9
     58e:	90 f0       	brcs	.+36     	; 0x5b4 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     590:	85 30       	cpi	r24, 0x05	; 5
     592:	2c f0       	brlt	.+10     	; 0x59e <joystick_getDirection+0x22>
     594:	81 81       	ldd	r24, Z+1	; 0x01
     596:	8f 5c       	subi	r24, 0xCF	; 207
     598:	83 36       	cpi	r24, 0x63	; 99
     59a:	38 f4       	brcc	.+14     	; 0x5aa <joystick_getDirection+0x2e>
     59c:	0d c0       	rjmp	.+26     	; 0x5b8 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     59e:	8c 3f       	cpi	r24, 0xFC	; 252
     5a0:	24 f4       	brge	.+8      	; 0x5aa <joystick_getDirection+0x2e>
     5a2:	81 81       	ldd	r24, Z+1	; 0x01
     5a4:	8f 5c       	subi	r24, 0xCF	; 207
     5a6:	83 36       	cpi	r24, 0x63	; 99
     5a8:	48 f0       	brcs	.+18     	; 0x5bc <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	8c 3f       	cpi	r24, 0xFC	; 252
     5ae:	44 f0       	brlt	.+16     	; 0x5c0 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     5b4:	84 e0       	ldi	r24, 0x04	; 4
     5b6:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     5c0:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     5c2:	08 95       	ret

000005c4 <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     5c4:	8f e1       	ldi	r24, 0x1F	; 31
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 ed 08 	call	0x11da	; 0x11da <malloc>
	ptr->numChildren = 0;
     5cc:	fc 01       	movw	r30, r24
     5ce:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     5d0:	2a e0       	ldi	r18, 0x0A	; 10
     5d2:	ed e0       	ldi	r30, 0x0D	; 13
     5d4:	f1 e0       	ldi	r31, 0x01	; 1
     5d6:	dc 01       	movw	r26, r24
     5d8:	01 90       	ld	r0, Z+
     5da:	0d 92       	st	X+, r0
     5dc:	2a 95       	dec	r18
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <mainMenuInit+0x14>
	ptr->parent = NULL;
     5e0:	fc 01       	movw	r30, r24
     5e2:	11 8a       	std	Z+17, r1	; 0x11
     5e4:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     5e6:	08 95       	ret

000005e8 <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	7c 01       	movw	r14, r24
     5f8:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     5fa:	8f e1       	ldi	r24, 0x1F	; 31
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 ed 08 	call	0x11da	; 0x11da <malloc>
     602:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     604:	d7 01       	movw	r26, r14
     606:	5e 96       	adiw	r26, 0x1e	; 30
     608:	ec 91       	ld	r30, X
     60a:	5e 97       	sbiw	r26, 0x1e	; 30
     60c:	c1 e0       	ldi	r28, 0x01	; 1
     60e:	ce 0f       	add	r28, r30
     610:	5e 96       	adiw	r26, 0x1e	; 30
     612:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     614:	b6 01       	movw	r22, r12
     616:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <strcpy>
	childPtr->parent = parent;
     61a:	f8 01       	movw	r30, r16
     61c:	f1 8a       	std	Z+17, r15	; 0x11
     61e:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     620:	c7 30       	cpi	r28, 0x07	; 7
     622:	78 f4       	brcc	.+30     	; 0x642 <addChild+0x5a>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     624:	ec 2f       	mov	r30, r28
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	38 96       	adiw	r30, 0x08	; 8
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	ee 0d       	add	r30, r14
     630:	ff 1d       	adc	r31, r15
     632:	11 83       	std	Z+1, r17	; 0x01
     634:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     636:	d8 01       	movw	r26, r16
     638:	5e 96       	adiw	r26, 0x1e	; 30
     63a:	1c 92       	st	X, r1
	return childPtr;
     63c:	80 2f       	mov	r24, r16
     63e:	91 2f       	mov	r25, r17
     640:	02 c0       	rjmp	.+4      	; 0x646 <addChild+0x5e>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	08 95       	ret

00000656 <menuInit>:

MenuNode* menuInit(void)
{
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     662:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <mainMenuInit>
     666:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     668:	67 e1       	ldi	r22, 0x17	; 23
     66a:	71 e0       	ldi	r23, 0x01	; 1
     66c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <addChild>
     670:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     672:	61 e2       	ldi	r22, 0x21	; 33
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <addChild>
	addChild(childPlayGame,"GAME 2");
     67a:	68 e2       	ldi	r22, 0x28	; 40
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     684:	6f e2       	ldi	r22, 0x2F	; 47
     686:	71 e0       	ldi	r23, 0x01	; 1
     688:	c7 01       	movw	r24, r14
     68a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <addChild>
     68e:	8c 01       	movw	r16, r24
     690:	c5 e0       	ldi	r28, 0x05	; 5
     692:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     694:	69 e3       	ldi	r22, 0x39	; 57
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	c8 01       	movw	r24, r16
     69a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <addChild>
     69e:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     6a0:	c9 f7       	brne	.-14     	; 0x694 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     6a2:	61 e4       	ldi	r22, 0x41	; 65
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	c7 01       	movw	r24, r14
     6a8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     6ac:	6a e4       	ldi	r22, 0x4A	; 74
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <addChild>
	currentMenu.currentMenuItem = mainMenu;
     6b4:	e0 e8       	ldi	r30, 0x80	; 128
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	f1 82       	std	Z+1, r15	; 0x01
     6ba:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     6bc:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     6c2:	c7 01       	movw	r24, r14
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	08 95       	ret

000006d2 <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     6d2:	0e 94 be 02 	call	0x57c	; 0x57c <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     6d6:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <currentMenu+0x3>
     6da:	94 30       	cpi	r25, 0x04	; 4
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <navigateMenu+0xe>
     6de:	58 c0       	rjmp	.+176    	; 0x790 <navigateMenu+0xbe>
			switch (dir) {
     6e0:	81 30       	cpi	r24, 0x01	; 1
     6e2:	e1 f1       	breq	.+120    	; 0x75c <navigateMenu+0x8a>
     6e4:	60 f1       	brcs	.+88     	; 0x73e <navigateMenu+0x6c>
     6e6:	82 30       	cpi	r24, 0x02	; 2
     6e8:	c9 f0       	breq	.+50     	; 0x71c <navigateMenu+0x4a>
     6ea:	83 30       	cpi	r24, 0x03	; 3
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <navigateMenu+0x1e>
     6ee:	50 c0       	rjmp	.+160    	; 0x790 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     6f0:	e0 e8       	ldi	r30, 0x80	; 128
     6f2:	f2 e0       	ldi	r31, 0x02	; 2
     6f4:	92 81       	ldd	r25, Z+2	; 0x02
     6f6:	49 2f       	mov	r20, r25
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	01 90       	ld	r0, Z+
     6fc:	f0 81       	ld	r31, Z
     6fe:	e0 2d       	mov	r30, r0
     700:	26 8d       	ldd	r18, Z+30	; 0x1e
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	21 50       	subi	r18, 0x01	; 1
     706:	31 09       	sbc	r19, r1
     708:	42 17       	cp	r20, r18
     70a:	53 07       	cpc	r21, r19
     70c:	24 f4       	brge	.+8      	; 0x716 <navigateMenu+0x44>
					currentMenu.childIndex++;
     70e:	9f 5f       	subi	r25, 0xFF	; 255
     710:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <currentMenu+0x2>
     714:	3d c0       	rjmp	.+122    	; 0x790 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     716:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <currentMenu+0x2>
     71a:	3a c0       	rjmp	.+116    	; 0x790 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     71c:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <currentMenu+0x2>
     720:	99 23       	and	r25, r25
     722:	21 f0       	breq	.+8      	; 0x72c <navigateMenu+0x5a>
					currentMenu.childIndex--;
     724:	91 50       	subi	r25, 0x01	; 1
     726:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <currentMenu+0x2>
     72a:	32 c0       	rjmp	.+100    	; 0x790 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     72c:	e0 e8       	ldi	r30, 0x80	; 128
     72e:	f2 e0       	ldi	r31, 0x02	; 2
     730:	a0 81       	ld	r26, Z
     732:	b1 81       	ldd	r27, Z+1	; 0x01
     734:	5e 96       	adiw	r26, 0x1e	; 30
     736:	9c 91       	ld	r25, X
     738:	91 50       	subi	r25, 0x01	; 1
     73a:	92 83       	std	Z+2, r25	; 0x02
     73c:	29 c0       	rjmp	.+82     	; 0x790 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     73e:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <currentMenu>
     742:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <currentMenu+0x1>
     746:	20 89       	ldd	r18, Z+16	; 0x10
     748:	31 89       	ldd	r19, Z+17	; 0x11
     74a:	21 15       	cp	r18, r1
     74c:	31 05       	cpc	r19, r1
     74e:	01 f1       	breq	.+64     	; 0x790 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     750:	e0 e8       	ldi	r30, 0x80	; 128
     752:	f2 e0       	ldi	r31, 0x02	; 2
     754:	31 83       	std	Z+1, r19	; 0x01
     756:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     758:	12 82       	std	Z+2, r1	; 0x02
     75a:	1a c0       	rjmp	.+52     	; 0x790 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     75c:	a0 e8       	ldi	r26, 0x80	; 128
     75e:	b2 e0       	ldi	r27, 0x02	; 2
     760:	2d 91       	ld	r18, X+
     762:	3c 91       	ld	r19, X
     764:	11 97       	sbiw	r26, 0x01	; 1
     766:	12 96       	adiw	r26, 0x02	; 2
     768:	9c 91       	ld	r25, X
     76a:	12 97       	sbiw	r26, 0x02	; 2
     76c:	e9 2f       	mov	r30, r25
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	39 96       	adiw	r30, 0x09	; 9
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e2 0f       	add	r30, r18
     778:	f3 1f       	adc	r31, r19
     77a:	01 90       	ld	r0, Z+
     77c:	f0 81       	ld	r31, Z
     77e:	e0 2d       	mov	r30, r0
     780:	96 8d       	ldd	r25, Z+30	; 0x1e
     782:	99 23       	and	r25, r25
     784:	29 f0       	breq	.+10     	; 0x790 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     786:	11 96       	adiw	r26, 0x01	; 1
     788:	fc 93       	st	X, r31
     78a:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     78c:	12 96       	adiw	r26, 0x02	; 2
     78e:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     790:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <currentMenu+0x3>
     794:	08 95       	ret

00000796 <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
	oled_reset();
     79e:	0e 94 15 04 	call	0x82a	; 0x82a <oled_reset>
	oled_home();
     7a2:	0e 94 36 04 	call	0x86c	; 0x86c <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     7a6:	c0 e8       	ldi	r28, 0x80	; 128
     7a8:	d2 e0       	ldi	r29, 0x02	; 2
     7aa:	88 81       	ld	r24, Y
     7ac:	99 81       	ldd	r25, Y+1	; 0x01
     7ae:	0e 94 71 04 	call	0x8e2	; 0x8e2 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     7b2:	e8 81       	ld	r30, Y
     7b4:	f9 81       	ldd	r31, Y+1	; 0x01
     7b6:	86 8d       	ldd	r24, Z+30	; 0x1e
     7b8:	88 23       	and	r24, r24
     7ba:	31 f1       	breq	.+76     	; 0x808 <menu_printCurrentMenu+0x72>
     7bc:	c0 e0       	ldi	r28, 0x00	; 0
     7be:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     7c0:	00 e8       	ldi	r16, 0x80	; 128
     7c2:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     7c4:	ce 01       	movw	r24, r28
     7c6:	02 96       	adiw	r24, 0x02	; 2
     7c8:	0e 94 6d 04 	call	0x8da	; 0x8da <oled_gotoLine>
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     7cc:	d8 01       	movw	r26, r16
     7ce:	8d 91       	ld	r24, X+
     7d0:	9c 91       	ld	r25, X
     7d2:	fe 01       	movw	r30, r28
     7d4:	39 96       	adiw	r30, 0x09	; 9
     7d6:	ee 0f       	add	r30, r30
     7d8:	ff 1f       	adc	r31, r31
     7da:	e8 0f       	add	r30, r24
     7dc:	f9 1f       	adc	r31, r25
     7de:	80 81       	ld	r24, Z
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <oled_print>
		if (currentMenu.childIndex == i) {
     7e6:	f8 01       	movw	r30, r16
     7e8:	82 81       	ldd	r24, Z+2	; 0x02
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8c 17       	cp	r24, r28
     7ee:	9d 07       	cpc	r25, r29
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     7f2:	0e 94 2b 04 	call	0x856	; 0x856 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     7f6:	21 96       	adiw	r28, 0x01	; 1
     7f8:	d8 01       	movw	r26, r16
     7fa:	ed 91       	ld	r30, X+
     7fc:	fc 91       	ld	r31, X
     7fe:	86 8d       	ldd	r24, Z+30	; 0x1e
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	c8 17       	cp	r28, r24
     804:	d9 07       	cpc	r29, r25
     806:	f4 f2       	brlt	.-68     	; 0x7c4 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     812:	80 55       	subi	r24, 0x50	; 80
     814:	e0 e0       	ldi	r30, 0x00	; 0
     816:	f0 e1       	ldi	r31, 0x10	; 16
     818:	80 83       	st	Z, r24
     81a:	86 2f       	mov	r24, r22
     81c:	8f 70       	andi	r24, 0x0F	; 15
     81e:	80 83       	st	Z, r24
     820:	62 95       	swap	r22
     822:	6f 70       	andi	r22, 0x0F	; 15
     824:	60 61       	ori	r22, 0x10	; 16
     826:	60 83       	st	Z, r22
     828:	08 95       	ret

0000082a <oled_reset>:
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	10 e0       	ldi	r17, 0x00	; 0
     832:	c0 e0       	ldi	r28, 0x00	; 0
     834:	d2 e1       	ldi	r29, 0x12	; 18
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	81 2f       	mov	r24, r17
     83a:	0e 94 09 04 	call	0x812	; 0x812 <oled_pos>
     83e:	80 e8       	ldi	r24, 0x80	; 128
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	18 82       	st	Y, r1
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	e9 f7       	brne	.-6      	; 0x842 <oled_reset+0x18>
     848:	1f 5f       	subi	r17, 0xFF	; 255
     84a:	18 30       	cpi	r17, 0x08	; 8
     84c:	a1 f7       	brne	.-24     	; 0x836 <oled_reset+0xc>
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	08 95       	ret

00000856 <oled_print_arrow>:
     856:	e0 e0       	ldi	r30, 0x00	; 0
     858:	f2 e1       	ldi	r31, 0x12	; 18
     85a:	88 e1       	ldi	r24, 0x18	; 24
     85c:	80 83       	st	Z, r24
     85e:	9c e3       	ldi	r25, 0x3C	; 60
     860:	90 83       	st	Z, r25
     862:	9e e7       	ldi	r25, 0x7E	; 126
     864:	90 83       	st	Z, r25
     866:	80 83       	st	Z, r24
     868:	80 83       	st	Z, r24
     86a:	08 95       	ret

0000086c <oled_home>:
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 09 04 	call	0x812	; 0x812 <oled_pos>
     874:	08 95       	ret

00000876 <oled_init>:
     876:	e0 e0       	ldi	r30, 0x00	; 0
     878:	f0 e1       	ldi	r31, 0x10	; 16
     87a:	8e ea       	ldi	r24, 0xAE	; 174
     87c:	80 83       	st	Z, r24
     87e:	81 ea       	ldi	r24, 0xA1	; 161
     880:	80 83       	st	Z, r24
     882:	8a ed       	ldi	r24, 0xDA	; 218
     884:	80 83       	st	Z, r24
     886:	82 e1       	ldi	r24, 0x12	; 18
     888:	80 83       	st	Z, r24
     88a:	88 ec       	ldi	r24, 0xC8	; 200
     88c:	80 83       	st	Z, r24
     88e:	88 ea       	ldi	r24, 0xA8	; 168
     890:	80 83       	st	Z, r24
     892:	8f e3       	ldi	r24, 0x3F	; 63
     894:	80 83       	st	Z, r24
     896:	85 ed       	ldi	r24, 0xD5	; 213
     898:	80 83       	st	Z, r24
     89a:	80 e8       	ldi	r24, 0x80	; 128
     89c:	80 83       	st	Z, r24
     89e:	81 e8       	ldi	r24, 0x81	; 129
     8a0:	80 83       	st	Z, r24
     8a2:	80 e5       	ldi	r24, 0x50	; 80
     8a4:	80 83       	st	Z, r24
     8a6:	89 ed       	ldi	r24, 0xD9	; 217
     8a8:	80 83       	st	Z, r24
     8aa:	81 e2       	ldi	r24, 0x21	; 33
     8ac:	80 83       	st	Z, r24
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	80 83       	st	Z, r24
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	80 83       	st	Z, r24
     8b6:	8b ed       	ldi	r24, 0xDB	; 219
     8b8:	80 83       	st	Z, r24
     8ba:	80 e3       	ldi	r24, 0x30	; 48
     8bc:	80 83       	st	Z, r24
     8be:	8d ea       	ldi	r24, 0xAD	; 173
     8c0:	80 83       	st	Z, r24
     8c2:	10 82       	st	Z, r1
     8c4:	84 ea       	ldi	r24, 0xA4	; 164
     8c6:	80 83       	st	Z, r24
     8c8:	86 ea       	ldi	r24, 0xA6	; 166
     8ca:	80 83       	st	Z, r24
     8cc:	8f ea       	ldi	r24, 0xAF	; 175
     8ce:	80 83       	st	Z, r24
     8d0:	0e 94 15 04 	call	0x82a	; 0x82a <oled_reset>
     8d4:	0e 94 36 04 	call	0x86c	; 0x86c <oled_home>
     8d8:	08 95       	ret

000008da <oled_gotoLine>:
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	0e 94 09 04 	call	0x812	; 0x812 <oled_pos>
     8e0:	08 95       	ret

000008e2 <oled_print>:

void oled_print(char* character){
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	dc 01       	movw	r26, r24
	while (*character != '\0')
     8e8:	8c 91       	ld	r24, X
     8ea:	81 11       	cpse	r24, r1
     8ec:	1a c0       	rjmp	.+52     	; 0x922 <oled_print+0x40>
     8ee:	1e c0       	rjmp	.+60     	; 0x92c <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     8f0:	ec 91       	ld	r30, X
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	b0 97       	sbiw	r30, 0x20	; 32
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	e2 0f       	add	r30, r18
     904:	f3 1f       	adc	r31, r19
     906:	e2 56       	subi	r30, 0x62	; 98
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     90c:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     90e:	2f 5f       	subi	r18, 0xFF	; 255
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	28 30       	cpi	r18, 0x08	; 8
     914:	31 05       	cpc	r19, r1
     916:	61 f7       	brne	.-40     	; 0x8f0 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     918:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     91a:	8c 91       	ld	r24, X
     91c:	81 11       	cpse	r24, r1
     91e:	03 c0       	rjmp	.+6      	; 0x926 <oled_print+0x44>
     920:	05 c0       	rjmp	.+10     	; 0x92c <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	e2 cf       	rjmp	.-60     	; 0x8f0 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "SPI.h"

	void setupInit(void){
	xmem_init();
     932:	0e 94 09 06 	call	0xc12	; 0xc12 <xmem_init>
	USART_init(MYUBRR);
     936:	8f e1       	ldi	r24, 0x1F	; 31
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <USART_init>
	adcInit();
     93e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     942:	0e 94 20 02 	call	0x440	; 0x440 <joystickInit>
	touchButton_init();
     946:	0e 94 cb 05 	call	0xb96	; 0xb96 <touchButton_init>
	oled_init();
     94a:	0e 94 3b 04 	call	0x876	; 0x876 <oled_init>
	timer_init();
     94e:	0e 94 b3 05 	call	0xb66	; 0xb66 <timer_init>
	sleep_init();
     952:	0e 94 0c 02 	call	0x418	; 0x418 <sleep_init>
	menuInit();
     956:	0e 94 2b 03 	call	0x656	; 0x656 <menuInit>
	SPI_MasterInit();
     95a:	0e 94 bf 04 	call	0x97e	; 0x97e <SPI_MasterInit>
     95e:	08 95       	ret

00000960 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     96a:	c6 e8       	ldi	r28, 0x86	; 134
     96c:	d2 e0       	ldi	r29, 0x02	; 2
     96e:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	//select slave output
	DDRB |= (1 << PB4);
     97e:	bc 9a       	sbi	0x17, 4	; 23
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1 << PB5) | (1 << PB7);
     980:	87 b3       	in	r24, 0x17	; 23
     982:	80 6a       	ori	r24, 0xA0	; 160
     984:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     986:	8d b1       	in	r24, 0x0d	; 13
     988:	81 65       	ori	r24, 0x51	; 81
     98a:	8d b9       	out	0x0d, r24	; 13
     98c:	08 95       	ret

0000098e <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	//select slave low
	PORTB |= (0 << PB4);
     98e:	98 b3       	in	r25, 0x18	; 24
     990:	98 bb       	out	0x18, r25	; 24
	/* Start transmission */
	SPDR = cData;
     992:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
     994:	77 9b       	sbis	0x0e, 7	; 14
     996:	fe cf       	rjmp	.-4      	; 0x994 <SPI_MasterTransmit+0x6>
	//select slave high
	PORTB |= (1 << PB4);
     998:	c4 9a       	sbi	0x18, 4	; 24
     99a:	08 95       	ret

0000099c <test_SRAM>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "menu.h"

void test_SRAM(void)
{
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     9ac:	82 e5       	ldi	r24, 0x52	; 82
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	9f 93       	push	r25
     9b2:	8f 93       	push	r24
     9b4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     9b8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <rand>
     9bc:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9be:	0e 94 5f 0a 	call	0x14be	; 0x14be <srand>
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9c6:	c1 2c       	mov	r12, r1
     9c8:	d1 2c       	mov	r13, r1

void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9ca:	00 e0       	ldi	r16, 0x00	; 0
     9cc:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     9ce:	ca e6       	ldi	r28, 0x6A	; 106
     9d0:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9d2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <rand>
     9d6:	f6 01       	movw	r30, r12
     9d8:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9da:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9dc:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9de:	28 17       	cp	r18, r24
     9e0:	a9 f0       	breq	.+42     	; 0xa0c <test_SRAM+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     9e2:	99 27       	eor	r25, r25
     9e4:	9f 93       	push	r25
     9e6:	8f 93       	push	r24
     9e8:	1f 92       	push	r1
     9ea:	2f 93       	push	r18
     9ec:	df 92       	push	r13
     9ee:	cf 92       	push	r12
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <printf>
			write_errors++;
     9f8:	0f 5f       	subi	r16, 0xFF	; 255
     9fa:	1f 4f       	sbci	r17, 0xFF	; 255
     9fc:	8d b7       	in	r24, 0x3d	; 61
     9fe:	9e b7       	in	r25, 0x3e	; 62
     a00:	08 96       	adiw	r24, 0x08	; 8
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	9e bf       	out	0x3e, r25	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a0c:	9f ef       	ldi	r25, 0xFF	; 255
     a0e:	c9 1a       	sub	r12, r25
     a10:	d9 0a       	sbc	r13, r25
     a12:	c1 14       	cp	r12, r1
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	d8 06       	cpc	r13, r24
     a18:	e1 f6       	brne	.-72     	; 0x9d2 <test_SRAM+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     a1a:	c7 01       	movw	r24, r14
     a1c:	0e 94 5f 0a 	call	0x14be	; 0x14be <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a20:	c0 e0       	ldi	r28, 0x00	; 0
     a22:	d0 e0       	ldi	r29, 0x00	; 0
void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a24:	e1 2c       	mov	r14, r1
     a26:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     a28:	0f 2e       	mov	r0, r31
     a2a:	f4 ea       	ldi	r31, 0xA4	; 164
     a2c:	cf 2e       	mov	r12, r31
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	df 2e       	mov	r13, r31
     a32:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a34:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <rand>
     a38:	fe 01       	movw	r30, r28
     a3a:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a3c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a3e:	28 17       	cp	r18, r24
     a40:	b1 f0       	breq	.+44     	; 0xa6e <test_SRAM+0xd2>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     a42:	99 27       	eor	r25, r25
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	1f 92       	push	r1
     a4a:	2f 93       	push	r18
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	df 92       	push	r13
     a52:	cf 92       	push	r12
     a54:	0e 94 bc 0a 	call	0x1578	; 0x1578 <printf>
			i, retreived_value, some_value);
			retrieval_errors++;
     a58:	9f ef       	ldi	r25, 0xFF	; 255
     a5a:	e9 1a       	sub	r14, r25
     a5c:	f9 0a       	sbc	r15, r25
     a5e:	8d b7       	in	r24, 0x3d	; 61
     a60:	9e b7       	in	r25, 0x3e	; 62
     a62:	08 96       	adiw	r24, 0x08	; 8
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	9e bf       	out	0x3e, r25	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a6e:	21 96       	adiw	r28, 0x01	; 1
     a70:	c1 15       	cp	r28, r1
     a72:	98 e0       	ldi	r25, 0x08	; 8
     a74:	d9 07       	cpc	r29, r25
     a76:	f1 f6       	brne	.-68     	; 0xa34 <test_SRAM+0x98>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
			i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
     a78:	ff 92       	push	r15
     a7a:	ef 92       	push	r14
     a7c:	1f 93       	push	r17
     a7e:	0f 93       	push	r16
     a80:	82 ee       	ldi	r24, 0xE2	; 226
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	9f 93       	push	r25
     a86:	8f 93       	push	r24
     a88:	0e 94 bc 0a 	call	0x1578	; 0x1578 <printf>
}
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	08 95       	ret

00000aaa <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
	cli();
     acc:	f8 94       	cli
	TCNT1 = 0x00;
     ace:	1d bc       	out	0x2d, r1	; 45
     ad0:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     ad2:	8c e7       	ldi	r24, 0x7C	; 124
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 2b 02 	call	0x456	; 0x456 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     ada:	86 e8       	ldi	r24, 0x86	; 134
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 b0 04 	call	0x960	; 0x960 <slider_readPosition>
	touchButton_readButtons(&buttons);
     ae2:	84 e8       	ldi	r24, 0x84	; 132
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <touchButton_readButtons>
	sei();
     aea:	78 94       	sei
}
     aec:	ff 91       	pop	r31
     aee:	ef 91       	pop	r30
     af0:	bf 91       	pop	r27
     af2:	af 91       	pop	r26
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	7f 91       	pop	r23
     afa:	6f 91       	pop	r22
     afc:	5f 91       	pop	r21
     afe:	4f 91       	pop	r20
     b00:	3f 91       	pop	r19
     b02:	2f 91       	pop	r18
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
     b0c:	18 95       	reti

00000b0e <__vector_16>:

ISR (TIMER0_COMP_vect) {
     b0e:	1f 92       	push	r1
     b10:	0f 92       	push	r0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	0f 92       	push	r0
     b16:	11 24       	eor	r1, r1
     b18:	2f 93       	push	r18
     b1a:	3f 93       	push	r19
     b1c:	4f 93       	push	r20
     b1e:	5f 93       	push	r21
     b20:	6f 93       	push	r22
     b22:	7f 93       	push	r23
     b24:	8f 93       	push	r24
     b26:	9f 93       	push	r25
     b28:	af 93       	push	r26
     b2a:	bf 93       	push	r27
     b2c:	ef 93       	push	r30
     b2e:	ff 93       	push	r31
	cli();
     b30:	f8 94       	cli
	TCNT1 = 0x00;
     b32:	1d bc       	out	0x2d, r1	; 45
     b34:	1c bc       	out	0x2c, r1	; 44
	navigateMenu(&joystick_pos);
     b36:	8c e7       	ldi	r24, 0x7C	; 124
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <navigateMenu>
	menu_printCurrentMenu();
     b3e:	0e 94 cb 03 	call	0x796	; 0x796 <menu_printCurrentMenu>
	sei();
     b42:	78 94       	sei
}
     b44:	ff 91       	pop	r31
     b46:	ef 91       	pop	r30
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	7f 91       	pop	r23
     b52:	6f 91       	pop	r22
     b54:	5f 91       	pop	r21
     b56:	4f 91       	pop	r20
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <timer_init>:


void timer_init() {
	//Disable global interrupts
	cli();
     b66:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     b68:	89 b7       	in	r24, 0x39	; 57
     b6a:	80 62       	ori	r24, 0x20	; 32
     b6c:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     b6e:	1d bc       	out	0x2d, r1	; 45
     b70:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     b72:	80 e3       	ldi	r24, 0x30	; 48
     b74:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     b76:	85 e0       	ldi	r24, 0x05	; 5
     b78:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     b7a:	80 ef       	ldi	r24, 0xF0	; 240
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	99 bd       	out	0x29, r25	; 41
     b80:	88 bd       	out	0x28, r24	; 40
	
	
	////////////////////////TIMER 0////////////////////////////////////
	
	TIMSK |= (1 << OCIE0);
     b82:	89 b7       	in	r24, 0x39	; 57
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0x0; 
     b88:	12 be       	out	0x32, r1	; 50
	
	TCCR0 = (1 << COM01 | 1 << COM00 | 1 << CS02 | 1 << CS00);
     b8a:	85 e3       	ldi	r24, 0x35	; 53
     b8c:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = TIMER0_RESET;
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	81 bf       	out	0x31, r24	; 49
	
	
	//Enable global interrupts
	sei();
     b92:	78 94       	sei
     b94:	08 95       	ret

00000b96 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     b96:	36 b3       	in	r19, 0x16	; 22
     b98:	26 b3       	in	r18, 0x16	; 22
     b9a:	47 b3       	in	r20, 0x17	; 23
     b9c:	32 70       	andi	r19, 0x02	; 2
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	bc 01       	movw	r22, r24
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <touchButton_init+0x14>
     ba6:	66 0f       	add	r22, r22
     ba8:	77 1f       	adc	r23, r23
     baa:	3a 95       	dec	r19
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <touchButton_init+0x10>
     bae:	24 70       	andi	r18, 0x04	; 4
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <touchButton_init+0x20>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	2a 95       	dec	r18
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <touchButton_init+0x1c>
     bba:	86 2b       	or	r24, r22
     bbc:	97 2b       	or	r25, r23
     bbe:	80 95       	com	r24
     bc0:	90 95       	com	r25
     bc2:	84 23       	and	r24, r20
     bc4:	87 bb       	out	0x17, r24	; 23
     bc6:	08 95       	ret

00000bc8 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     bc8:	86 b3       	in	r24, 0x16	; 22
     bca:	e4 e8       	ldi	r30, 0x84	; 132
     bcc:	f2 e0       	ldi	r31, 0x02	; 2
     bce:	86 95       	lsr	r24
     bd0:	81 70       	andi	r24, 0x01	; 1
     bd2:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     bd4:	86 b3       	in	r24, 0x16	; 22
     bd6:	82 fb       	bst	r24, 2
     bd8:	88 27       	eor	r24, r24
     bda:	80 f9       	bld	r24, 0
     bdc:	81 83       	std	Z+1, r24	; 0x01
     bde:	08 95       	ret

00000be0 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     be0:	5d 9b       	sbis	0x0b, 5	; 11
     be2:	fe cf       	rjmp	.-4      	; 0xbe0 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     be4:	8c b9       	out	0x0c, r24	; 12
     be6:	08 95       	ret

00000be8 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     be8:	5f 9b       	sbis	0x0b, 7	; 11
     bea:	fe cf       	rjmp	.-4      	; 0xbe8 <USART_receiveChar>
		;
	
	return UDR0;
     bec:	8c b1       	in	r24, 0x0c	; 12
     bee:	08 95       	ret

00000bf0 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     bf0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     bf2:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     bf4:	88 e1       	ldi	r24, 0x18	; 24
     bf6:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     bf8:	8e e8       	ldi	r24, 0x8E	; 142
     bfa:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     bfc:	64 ef       	ldi	r22, 0xF4	; 244
     bfe:	75 e0       	ldi	r23, 0x05	; 5
     c00:	80 ef       	ldi	r24, 0xF0	; 240
     c02:	95 e0       	ldi	r25, 0x05	; 5
     c04:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <fdevopen>
     c08:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <uart+0x1>
     c0c:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <uart>
     c10:	08 95       	ret

00000c12 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     c12:	85 b7       	in	r24, 0x35	; 53
     c14:	80 68       	ori	r24, 0x80	; 128
     c16:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     c18:	80 b7       	in	r24, 0x30	; 48
     c1a:	88 60       	ori	r24, 0x08	; 8
     c1c:	80 bf       	out	0x30, r24	; 48
     c1e:	08 95       	ret
     c20:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fp_pscA>
     c24:	60 f0       	brcs	.+24     	; 0xc3e <xmem_init+0x2c>
     c26:	80 e8       	ldi	r24, 0x80	; 128
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	09 f4       	brne	.+2      	; 0xc2e <xmem_init+0x1c>
     c2c:	9e ef       	ldi	r25, 0xFE	; 254
     c2e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_pscB>
     c32:	28 f0       	brcs	.+10     	; 0xc3e <xmem_init+0x2c>
     c34:	40 e8       	ldi	r20, 0x80	; 128
     c36:	51 e0       	ldi	r21, 0x01	; 1
     c38:	71 f4       	brne	.+28     	; 0xc56 <atan2+0x10>
     c3a:	5e ef       	ldi	r21, 0xFE	; 254
     c3c:	0c c0       	rjmp	.+24     	; 0xc56 <atan2+0x10>
     c3e:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>
     c42:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_zero>

00000c46 <atan2>:
     c46:	e9 2f       	mov	r30, r25
     c48:	e0 78       	andi	r30, 0x80	; 128
     c4a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_split3>
     c4e:	40 f3       	brcs	.-48     	; 0xc20 <xmem_init+0xe>
     c50:	09 2e       	mov	r0, r25
     c52:	05 2a       	or	r0, r21
     c54:	b1 f3       	breq	.-20     	; 0xc42 <xmem_init+0x30>
     c56:	26 17       	cp	r18, r22
     c58:	37 07       	cpc	r19, r23
     c5a:	48 07       	cpc	r20, r24
     c5c:	59 07       	cpc	r21, r25
     c5e:	38 f0       	brcs	.+14     	; 0xc6e <atan2+0x28>
     c60:	0e 2e       	mov	r0, r30
     c62:	07 f8       	bld	r0, 7
     c64:	e0 25       	eor	r30, r0
     c66:	69 f0       	breq	.+26     	; 0xc82 <atan2+0x3c>
     c68:	e0 25       	eor	r30, r0
     c6a:	e0 64       	ori	r30, 0x40	; 64
     c6c:	0a c0       	rjmp	.+20     	; 0xc82 <atan2+0x3c>
     c6e:	ef 63       	ori	r30, 0x3F	; 63
     c70:	07 f8       	bld	r0, 7
     c72:	00 94       	com	r0
     c74:	07 fa       	bst	r0, 7
     c76:	db 01       	movw	r26, r22
     c78:	b9 01       	movw	r22, r18
     c7a:	9d 01       	movw	r18, r26
     c7c:	dc 01       	movw	r26, r24
     c7e:	ca 01       	movw	r24, r20
     c80:	ad 01       	movw	r20, r26
     c82:	ef 93       	push	r30
     c84:	0e 94 99 06 	call	0xd32	; 0xd32 <__divsf3_pse>
     c88:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__fp_round>
     c8c:	0e 94 53 06 	call	0xca6	; 0xca6 <atan>
     c90:	5f 91       	pop	r21
     c92:	55 23       	and	r21, r21
     c94:	39 f0       	breq	.+14     	; 0xca4 <atan2+0x5e>
     c96:	2b ed       	ldi	r18, 0xDB	; 219
     c98:	3f e0       	ldi	r19, 0x0F	; 15
     c9a:	49 e4       	ldi	r20, 0x49	; 73
     c9c:	50 fd       	sbrc	r21, 0
     c9e:	49 ec       	ldi	r20, 0xC9	; 201
     ca0:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__addsf3>
     ca4:	08 95       	ret

00000ca6 <atan>:
     ca6:	df 93       	push	r29
     ca8:	dd 27       	eor	r29, r29
     caa:	b9 2f       	mov	r27, r25
     cac:	bf 77       	andi	r27, 0x7F	; 127
     cae:	40 e8       	ldi	r20, 0x80	; 128
     cb0:	5f e3       	ldi	r21, 0x3F	; 63
     cb2:	16 16       	cp	r1, r22
     cb4:	17 06       	cpc	r1, r23
     cb6:	48 07       	cpc	r20, r24
     cb8:	5b 07       	cpc	r21, r27
     cba:	18 f4       	brcc	.+6      	; 0xcc2 <atan+0x1c>
     cbc:	d9 2f       	mov	r29, r25
     cbe:	0e 94 df 07 	call	0xfbe	; 0xfbe <inverse>
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	7f 93       	push	r23
     cc8:	6f 93       	push	r22
     cca:	0e 94 54 08 	call	0x10a8	; 0x10a8 <square>
     cce:	e0 e7       	ldi	r30, 0x70	; 112
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	0e 94 70 07 	call	0xee0	; 0xee0 <__fp_powser>
     cd6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__fp_round>
     cda:	2f 91       	pop	r18
     cdc:	3f 91       	pop	r19
     cde:	4f 91       	pop	r20
     ce0:	5f 91       	pop	r21
     ce2:	0e 94 fa 07 	call	0xff4	; 0xff4 <__mulsf3x>
     ce6:	dd 23       	and	r29, r29
     ce8:	51 f0       	breq	.+20     	; 0xcfe <atan+0x58>
     cea:	90 58       	subi	r25, 0x80	; 128
     cec:	a2 ea       	ldi	r26, 0xA2	; 162
     cee:	2a ed       	ldi	r18, 0xDA	; 218
     cf0:	3f e0       	ldi	r19, 0x0F	; 15
     cf2:	49 ec       	ldi	r20, 0xC9	; 201
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	d0 78       	andi	r29, 0x80	; 128
     cf8:	5d 27       	eor	r21, r29
     cfa:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3x>
     cfe:	df 91       	pop	r29
     d00:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_round>

00000d04 <__divsf3>:
     d04:	0e 94 96 06 	call	0xd2c	; 0xd2c <__divsf3x>
     d08:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_round>
     d0c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_pscB>
     d10:	58 f0       	brcs	.+22     	; 0xd28 <__divsf3+0x24>
     d12:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fp_pscA>
     d16:	40 f0       	brcs	.+16     	; 0xd28 <__divsf3+0x24>
     d18:	29 f4       	brne	.+10     	; 0xd24 <__divsf3+0x20>
     d1a:	5f 3f       	cpi	r21, 0xFF	; 255
     d1c:	29 f0       	breq	.+10     	; 0xd28 <__divsf3+0x24>
     d1e:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
     d22:	51 11       	cpse	r21, r1
     d24:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_szero>
     d28:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>

00000d2c <__divsf3x>:
     d2c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_split3>
     d30:	68 f3       	brcs	.-38     	; 0xd0c <__divsf3+0x8>

00000d32 <__divsf3_pse>:
     d32:	99 23       	and	r25, r25
     d34:	b1 f3       	breq	.-20     	; 0xd22 <__divsf3+0x1e>
     d36:	55 23       	and	r21, r21
     d38:	91 f3       	breq	.-28     	; 0xd1e <__divsf3+0x1a>
     d3a:	95 1b       	sub	r25, r21
     d3c:	55 0b       	sbc	r21, r21
     d3e:	bb 27       	eor	r27, r27
     d40:	aa 27       	eor	r26, r26
     d42:	62 17       	cp	r22, r18
     d44:	73 07       	cpc	r23, r19
     d46:	84 07       	cpc	r24, r20
     d48:	38 f0       	brcs	.+14     	; 0xd58 <__divsf3_pse+0x26>
     d4a:	9f 5f       	subi	r25, 0xFF	; 255
     d4c:	5f 4f       	sbci	r21, 0xFF	; 255
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	44 1f       	adc	r20, r20
     d54:	aa 1f       	adc	r26, r26
     d56:	a9 f3       	breq	.-22     	; 0xd42 <__divsf3_pse+0x10>
     d58:	35 d0       	rcall	.+106    	; 0xdc4 <__divsf3_pse+0x92>
     d5a:	0e 2e       	mov	r0, r30
     d5c:	3a f0       	brmi	.+14     	; 0xd6c <__divsf3_pse+0x3a>
     d5e:	e0 e8       	ldi	r30, 0x80	; 128
     d60:	32 d0       	rcall	.+100    	; 0xdc6 <__divsf3_pse+0x94>
     d62:	91 50       	subi	r25, 0x01	; 1
     d64:	50 40       	sbci	r21, 0x00	; 0
     d66:	e6 95       	lsr	r30
     d68:	00 1c       	adc	r0, r0
     d6a:	ca f7       	brpl	.-14     	; 0xd5e <__divsf3_pse+0x2c>
     d6c:	2b d0       	rcall	.+86     	; 0xdc4 <__divsf3_pse+0x92>
     d6e:	fe 2f       	mov	r31, r30
     d70:	29 d0       	rcall	.+82     	; 0xdc4 <__divsf3_pse+0x92>
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	bb 1f       	adc	r27, r27
     d7a:	26 17       	cp	r18, r22
     d7c:	37 07       	cpc	r19, r23
     d7e:	48 07       	cpc	r20, r24
     d80:	ab 07       	cpc	r26, r27
     d82:	b0 e8       	ldi	r27, 0x80	; 128
     d84:	09 f0       	breq	.+2      	; 0xd88 <__divsf3_pse+0x56>
     d86:	bb 0b       	sbc	r27, r27
     d88:	80 2d       	mov	r24, r0
     d8a:	bf 01       	movw	r22, r30
     d8c:	ff 27       	eor	r31, r31
     d8e:	93 58       	subi	r25, 0x83	; 131
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	3a f0       	brmi	.+14     	; 0xda2 <__divsf3_pse+0x70>
     d94:	9e 3f       	cpi	r25, 0xFE	; 254
     d96:	51 05       	cpc	r21, r1
     d98:	78 f0       	brcs	.+30     	; 0xdb8 <__divsf3_pse+0x86>
     d9a:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
     d9e:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_szero>
     da2:	5f 3f       	cpi	r21, 0xFF	; 255
     da4:	e4 f3       	brlt	.-8      	; 0xd9e <__divsf3_pse+0x6c>
     da6:	98 3e       	cpi	r25, 0xE8	; 232
     da8:	d4 f3       	brlt	.-12     	; 0xd9e <__divsf3_pse+0x6c>
     daa:	86 95       	lsr	r24
     dac:	77 95       	ror	r23
     dae:	67 95       	ror	r22
     db0:	b7 95       	ror	r27
     db2:	f7 95       	ror	r31
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	c9 f7       	brne	.-14     	; 0xdaa <__divsf3_pse+0x78>
     db8:	88 0f       	add	r24, r24
     dba:	91 1d       	adc	r25, r1
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	97 f9       	bld	r25, 7
     dc2:	08 95       	ret
     dc4:	e1 e0       	ldi	r30, 0x01	; 1
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	bb 1f       	adc	r27, r27
     dce:	62 17       	cp	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	ba 07       	cpc	r27, r26
     dd6:	20 f0       	brcs	.+8      	; 0xde0 <__divsf3_pse+0xae>
     dd8:	62 1b       	sub	r22, r18
     dda:	73 0b       	sbc	r23, r19
     ddc:	84 0b       	sbc	r24, r20
     dde:	ba 0b       	sbc	r27, r26
     de0:	ee 1f       	adc	r30, r30
     de2:	88 f7       	brcc	.-30     	; 0xdc6 <__divsf3_pse+0x94>
     de4:	e0 95       	com	r30
     de6:	08 95       	ret

00000de8 <__fixsfsi>:
     de8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fixunssfsi>
     dec:	68 94       	set
     dee:	b1 11       	cpse	r27, r1
     df0:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_szero>
     df4:	08 95       	ret

00000df6 <__fixunssfsi>:
     df6:	0e 94 be 07 	call	0xf7c	; 0xf7c <__fp_splitA>
     dfa:	88 f0       	brcs	.+34     	; 0xe1e <__fixunssfsi+0x28>
     dfc:	9f 57       	subi	r25, 0x7F	; 127
     dfe:	98 f0       	brcs	.+38     	; 0xe26 <__fixunssfsi+0x30>
     e00:	b9 2f       	mov	r27, r25
     e02:	99 27       	eor	r25, r25
     e04:	b7 51       	subi	r27, 0x17	; 23
     e06:	b0 f0       	brcs	.+44     	; 0xe34 <__fixunssfsi+0x3e>
     e08:	e1 f0       	breq	.+56     	; 0xe42 <__fixunssfsi+0x4c>
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	1a f0       	brmi	.+6      	; 0xe1a <__fixunssfsi+0x24>
     e14:	ba 95       	dec	r27
     e16:	c9 f7       	brne	.-14     	; 0xe0a <__fixunssfsi+0x14>
     e18:	14 c0       	rjmp	.+40     	; 0xe42 <__fixunssfsi+0x4c>
     e1a:	b1 30       	cpi	r27, 0x01	; 1
     e1c:	91 f0       	breq	.+36     	; 0xe42 <__fixunssfsi+0x4c>
     e1e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fp_zero>
     e22:	b1 e0       	ldi	r27, 0x01	; 1
     e24:	08 95       	ret
     e26:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_zero>
     e2a:	67 2f       	mov	r22, r23
     e2c:	78 2f       	mov	r23, r24
     e2e:	88 27       	eor	r24, r24
     e30:	b8 5f       	subi	r27, 0xF8	; 248
     e32:	39 f0       	breq	.+14     	; 0xe42 <__fixunssfsi+0x4c>
     e34:	b9 3f       	cpi	r27, 0xF9	; 249
     e36:	cc f3       	brlt	.-14     	; 0xe2a <__fixunssfsi+0x34>
     e38:	86 95       	lsr	r24
     e3a:	77 95       	ror	r23
     e3c:	67 95       	ror	r22
     e3e:	b3 95       	inc	r27
     e40:	d9 f7       	brne	.-10     	; 0xe38 <__fixunssfsi+0x42>
     e42:	3e f4       	brtc	.+14     	; 0xe52 <__fixunssfsi+0x5c>
     e44:	90 95       	com	r25
     e46:	80 95       	com	r24
     e48:	70 95       	com	r23
     e4a:	61 95       	neg	r22
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	8f 4f       	sbci	r24, 0xFF	; 255
     e50:	9f 4f       	sbci	r25, 0xFF	; 255
     e52:	08 95       	ret

00000e54 <__floatunsisf>:
     e54:	e8 94       	clt
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <__floatsisf+0x12>

00000e58 <__floatsisf>:
     e58:	97 fb       	bst	r25, 7
     e5a:	3e f4       	brtc	.+14     	; 0xe6a <__floatsisf+0x12>
     e5c:	90 95       	com	r25
     e5e:	80 95       	com	r24
     e60:	70 95       	com	r23
     e62:	61 95       	neg	r22
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	8f 4f       	sbci	r24, 0xFF	; 255
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	99 23       	and	r25, r25
     e6c:	a9 f0       	breq	.+42     	; 0xe98 <__floatsisf+0x40>
     e6e:	f9 2f       	mov	r31, r25
     e70:	96 e9       	ldi	r25, 0x96	; 150
     e72:	bb 27       	eor	r27, r27
     e74:	93 95       	inc	r25
     e76:	f6 95       	lsr	r31
     e78:	87 95       	ror	r24
     e7a:	77 95       	ror	r23
     e7c:	67 95       	ror	r22
     e7e:	b7 95       	ror	r27
     e80:	f1 11       	cpse	r31, r1
     e82:	f8 cf       	rjmp	.-16     	; 0xe74 <__floatsisf+0x1c>
     e84:	fa f4       	brpl	.+62     	; 0xec4 <__floatsisf+0x6c>
     e86:	bb 0f       	add	r27, r27
     e88:	11 f4       	brne	.+4      	; 0xe8e <__floatsisf+0x36>
     e8a:	60 ff       	sbrs	r22, 0
     e8c:	1b c0       	rjmp	.+54     	; 0xec4 <__floatsisf+0x6c>
     e8e:	6f 5f       	subi	r22, 0xFF	; 255
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	16 c0       	rjmp	.+44     	; 0xec4 <__floatsisf+0x6c>
     e98:	88 23       	and	r24, r24
     e9a:	11 f0       	breq	.+4      	; 0xea0 <__floatsisf+0x48>
     e9c:	96 e9       	ldi	r25, 0x96	; 150
     e9e:	11 c0       	rjmp	.+34     	; 0xec2 <__floatsisf+0x6a>
     ea0:	77 23       	and	r23, r23
     ea2:	21 f0       	breq	.+8      	; 0xeac <__floatsisf+0x54>
     ea4:	9e e8       	ldi	r25, 0x8E	; 142
     ea6:	87 2f       	mov	r24, r23
     ea8:	76 2f       	mov	r23, r22
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <__floatsisf+0x5e>
     eac:	66 23       	and	r22, r22
     eae:	71 f0       	breq	.+28     	; 0xecc <__floatsisf+0x74>
     eb0:	96 e8       	ldi	r25, 0x86	; 134
     eb2:	86 2f       	mov	r24, r22
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	2a f0       	brmi	.+10     	; 0xec4 <__floatsisf+0x6c>
     eba:	9a 95       	dec	r25
     ebc:	66 0f       	add	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	88 1f       	adc	r24, r24
     ec2:	da f7       	brpl	.-10     	; 0xeba <__floatsisf+0x62>
     ec4:	88 0f       	add	r24, r24
     ec6:	96 95       	lsr	r25
     ec8:	87 95       	ror	r24
     eca:	97 f9       	bld	r25, 7
     ecc:	08 95       	ret

00000ece <__fp_inf>:
     ece:	97 f9       	bld	r25, 7
     ed0:	9f 67       	ori	r25, 0x7F	; 127
     ed2:	80 e8       	ldi	r24, 0x80	; 128
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	08 95       	ret

00000eda <__fp_nan>:
     eda:	9f ef       	ldi	r25, 0xFF	; 255
     edc:	80 ec       	ldi	r24, 0xC0	; 192
     ede:	08 95       	ret

00000ee0 <__fp_powser>:
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	1f 93       	push	r17
     ee6:	0f 93       	push	r16
     ee8:	ff 92       	push	r15
     eea:	ef 92       	push	r14
     eec:	df 92       	push	r13
     eee:	7b 01       	movw	r14, r22
     ef0:	8c 01       	movw	r16, r24
     ef2:	68 94       	set
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <__fp_powser+0x22>
     ef6:	da 2e       	mov	r13, r26
     ef8:	ef 01       	movw	r28, r30
     efa:	0e 94 fa 07 	call	0xff4	; 0xff4 <__mulsf3x>
     efe:	fe 01       	movw	r30, r28
     f00:	e8 94       	clt
     f02:	a5 91       	lpm	r26, Z+
     f04:	25 91       	lpm	r18, Z+
     f06:	35 91       	lpm	r19, Z+
     f08:	45 91       	lpm	r20, Z+
     f0a:	55 91       	lpm	r21, Z+
     f0c:	a6 f3       	brts	.-24     	; 0xef6 <__fp_powser+0x16>
     f0e:	ef 01       	movw	r28, r30
     f10:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3x>
     f14:	fe 01       	movw	r30, r28
     f16:	97 01       	movw	r18, r14
     f18:	a8 01       	movw	r20, r16
     f1a:	da 94       	dec	r13
     f1c:	69 f7       	brne	.-38     	; 0xef8 <__fp_powser+0x18>
     f1e:	df 90       	pop	r13
     f20:	ef 90       	pop	r14
     f22:	ff 90       	pop	r15
     f24:	0f 91       	pop	r16
     f26:	1f 91       	pop	r17
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <__fp_pscA>:
     f2e:	00 24       	eor	r0, r0
     f30:	0a 94       	dec	r0
     f32:	16 16       	cp	r1, r22
     f34:	17 06       	cpc	r1, r23
     f36:	18 06       	cpc	r1, r24
     f38:	09 06       	cpc	r0, r25
     f3a:	08 95       	ret

00000f3c <__fp_pscB>:
     f3c:	00 24       	eor	r0, r0
     f3e:	0a 94       	dec	r0
     f40:	12 16       	cp	r1, r18
     f42:	13 06       	cpc	r1, r19
     f44:	14 06       	cpc	r1, r20
     f46:	05 06       	cpc	r0, r21
     f48:	08 95       	ret

00000f4a <__fp_round>:
     f4a:	09 2e       	mov	r0, r25
     f4c:	03 94       	inc	r0
     f4e:	00 0c       	add	r0, r0
     f50:	11 f4       	brne	.+4      	; 0xf56 <__fp_round+0xc>
     f52:	88 23       	and	r24, r24
     f54:	52 f0       	brmi	.+20     	; 0xf6a <__fp_round+0x20>
     f56:	bb 0f       	add	r27, r27
     f58:	40 f4       	brcc	.+16     	; 0xf6a <__fp_round+0x20>
     f5a:	bf 2b       	or	r27, r31
     f5c:	11 f4       	brne	.+4      	; 0xf62 <__fp_round+0x18>
     f5e:	60 ff       	sbrs	r22, 0
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <__fp_round+0x20>
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	08 95       	ret

00000f6c <__fp_split3>:
     f6c:	57 fd       	sbrc	r21, 7
     f6e:	90 58       	subi	r25, 0x80	; 128
     f70:	44 0f       	add	r20, r20
     f72:	55 1f       	adc	r21, r21
     f74:	59 f0       	breq	.+22     	; 0xf8c <__fp_splitA+0x10>
     f76:	5f 3f       	cpi	r21, 0xFF	; 255
     f78:	71 f0       	breq	.+28     	; 0xf96 <__fp_splitA+0x1a>
     f7a:	47 95       	ror	r20

00000f7c <__fp_splitA>:
     f7c:	88 0f       	add	r24, r24
     f7e:	97 fb       	bst	r25, 7
     f80:	99 1f       	adc	r25, r25
     f82:	61 f0       	breq	.+24     	; 0xf9c <__fp_splitA+0x20>
     f84:	9f 3f       	cpi	r25, 0xFF	; 255
     f86:	79 f0       	breq	.+30     	; 0xfa6 <__fp_splitA+0x2a>
     f88:	87 95       	ror	r24
     f8a:	08 95       	ret
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	14 06       	cpc	r1, r20
     f92:	55 1f       	adc	r21, r21
     f94:	f2 cf       	rjmp	.-28     	; 0xf7a <__fp_split3+0xe>
     f96:	46 95       	lsr	r20
     f98:	f1 df       	rcall	.-30     	; 0xf7c <__fp_splitA>
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <__fp_splitA+0x30>
     f9c:	16 16       	cp	r1, r22
     f9e:	17 06       	cpc	r1, r23
     fa0:	18 06       	cpc	r1, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	f1 cf       	rjmp	.-30     	; 0xf88 <__fp_splitA+0xc>
     fa6:	86 95       	lsr	r24
     fa8:	71 05       	cpc	r23, r1
     faa:	61 05       	cpc	r22, r1
     fac:	08 94       	sec
     fae:	08 95       	ret

00000fb0 <__fp_zero>:
     fb0:	e8 94       	clt

00000fb2 <__fp_szero>:
     fb2:	bb 27       	eor	r27, r27
     fb4:	66 27       	eor	r22, r22
     fb6:	77 27       	eor	r23, r23
     fb8:	cb 01       	movw	r24, r22
     fba:	97 f9       	bld	r25, 7
     fbc:	08 95       	ret

00000fbe <inverse>:
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	80 e8       	ldi	r24, 0x80	; 128
     fc8:	9f e3       	ldi	r25, 0x3F	; 63
     fca:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__divsf3>

00000fce <__mulsf3>:
     fce:	0e 94 fa 07 	call	0xff4	; 0xff4 <__mulsf3x>
     fd2:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_round>
     fd6:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fp_pscA>
     fda:	38 f0       	brcs	.+14     	; 0xfea <__mulsf3+0x1c>
     fdc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_pscB>
     fe0:	20 f0       	brcs	.+8      	; 0xfea <__mulsf3+0x1c>
     fe2:	95 23       	and	r25, r21
     fe4:	11 f0       	breq	.+4      	; 0xfea <__mulsf3+0x1c>
     fe6:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
     fea:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>
     fee:	11 24       	eor	r1, r1
     ff0:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_szero>

00000ff4 <__mulsf3x>:
     ff4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_split3>
     ff8:	70 f3       	brcs	.-36     	; 0xfd6 <__mulsf3+0x8>

00000ffa <__mulsf3_pse>:
     ffa:	95 9f       	mul	r25, r21
     ffc:	c1 f3       	breq	.-16     	; 0xfee <__mulsf3+0x20>
     ffe:	95 0f       	add	r25, r21
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	55 1f       	adc	r21, r21
    1004:	62 9f       	mul	r22, r18
    1006:	f0 01       	movw	r30, r0
    1008:	72 9f       	mul	r23, r18
    100a:	bb 27       	eor	r27, r27
    100c:	f0 0d       	add	r31, r0
    100e:	b1 1d       	adc	r27, r1
    1010:	63 9f       	mul	r22, r19
    1012:	aa 27       	eor	r26, r26
    1014:	f0 0d       	add	r31, r0
    1016:	b1 1d       	adc	r27, r1
    1018:	aa 1f       	adc	r26, r26
    101a:	64 9f       	mul	r22, r20
    101c:	66 27       	eor	r22, r22
    101e:	b0 0d       	add	r27, r0
    1020:	a1 1d       	adc	r26, r1
    1022:	66 1f       	adc	r22, r22
    1024:	82 9f       	mul	r24, r18
    1026:	22 27       	eor	r18, r18
    1028:	b0 0d       	add	r27, r0
    102a:	a1 1d       	adc	r26, r1
    102c:	62 1f       	adc	r22, r18
    102e:	73 9f       	mul	r23, r19
    1030:	b0 0d       	add	r27, r0
    1032:	a1 1d       	adc	r26, r1
    1034:	62 1f       	adc	r22, r18
    1036:	83 9f       	mul	r24, r19
    1038:	a0 0d       	add	r26, r0
    103a:	61 1d       	adc	r22, r1
    103c:	22 1f       	adc	r18, r18
    103e:	74 9f       	mul	r23, r20
    1040:	33 27       	eor	r19, r19
    1042:	a0 0d       	add	r26, r0
    1044:	61 1d       	adc	r22, r1
    1046:	23 1f       	adc	r18, r19
    1048:	84 9f       	mul	r24, r20
    104a:	60 0d       	add	r22, r0
    104c:	21 1d       	adc	r18, r1
    104e:	82 2f       	mov	r24, r18
    1050:	76 2f       	mov	r23, r22
    1052:	6a 2f       	mov	r22, r26
    1054:	11 24       	eor	r1, r1
    1056:	9f 57       	subi	r25, 0x7F	; 127
    1058:	50 40       	sbci	r21, 0x00	; 0
    105a:	9a f0       	brmi	.+38     	; 0x1082 <__mulsf3_pse+0x88>
    105c:	f1 f0       	breq	.+60     	; 0x109a <__mulsf3_pse+0xa0>
    105e:	88 23       	and	r24, r24
    1060:	4a f0       	brmi	.+18     	; 0x1074 <__mulsf3_pse+0x7a>
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	bb 1f       	adc	r27, r27
    1068:	66 1f       	adc	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	88 1f       	adc	r24, r24
    106e:	91 50       	subi	r25, 0x01	; 1
    1070:	50 40       	sbci	r21, 0x00	; 0
    1072:	a9 f7       	brne	.-22     	; 0x105e <__mulsf3_pse+0x64>
    1074:	9e 3f       	cpi	r25, 0xFE	; 254
    1076:	51 05       	cpc	r21, r1
    1078:	80 f0       	brcs	.+32     	; 0x109a <__mulsf3_pse+0xa0>
    107a:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
    107e:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_szero>
    1082:	5f 3f       	cpi	r21, 0xFF	; 255
    1084:	e4 f3       	brlt	.-8      	; 0x107e <__mulsf3_pse+0x84>
    1086:	98 3e       	cpi	r25, 0xE8	; 232
    1088:	d4 f3       	brlt	.-12     	; 0x107e <__mulsf3_pse+0x84>
    108a:	86 95       	lsr	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b7 95       	ror	r27
    1092:	f7 95       	ror	r31
    1094:	e7 95       	ror	r30
    1096:	9f 5f       	subi	r25, 0xFF	; 255
    1098:	c1 f7       	brne	.-16     	; 0x108a <__mulsf3_pse+0x90>
    109a:	fe 2b       	or	r31, r30
    109c:	88 0f       	add	r24, r24
    109e:	91 1d       	adc	r25, r1
    10a0:	96 95       	lsr	r25
    10a2:	87 95       	ror	r24
    10a4:	97 f9       	bld	r25, 7
    10a6:	08 95       	ret

000010a8 <square>:
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__mulsf3>

000010b0 <__subsf3>:
    10b0:	50 58       	subi	r21, 0x80	; 128

000010b2 <__addsf3>:
    10b2:	bb 27       	eor	r27, r27
    10b4:	aa 27       	eor	r26, r26
    10b6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3x>
    10ba:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_round>
    10be:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fp_pscA>
    10c2:	38 f0       	brcs	.+14     	; 0x10d2 <__addsf3+0x20>
    10c4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_pscB>
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__addsf3+0x20>
    10ca:	39 f4       	brne	.+14     	; 0x10da <__addsf3+0x28>
    10cc:	9f 3f       	cpi	r25, 0xFF	; 255
    10ce:	19 f4       	brne	.+6      	; 0x10d6 <__addsf3+0x24>
    10d0:	26 f4       	brtc	.+8      	; 0x10da <__addsf3+0x28>
    10d2:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>
    10d6:	0e f4       	brtc	.+2      	; 0x10da <__addsf3+0x28>
    10d8:	e0 95       	com	r30
    10da:	e7 fb       	bst	r30, 7
    10dc:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>

000010e0 <__addsf3x>:
    10e0:	e9 2f       	mov	r30, r25
    10e2:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_split3>
    10e6:	58 f3       	brcs	.-42     	; 0x10be <__addsf3+0xc>
    10e8:	ba 17       	cp	r27, r26
    10ea:	62 07       	cpc	r22, r18
    10ec:	73 07       	cpc	r23, r19
    10ee:	84 07       	cpc	r24, r20
    10f0:	95 07       	cpc	r25, r21
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <__addsf3x+0x1c>
    10f4:	79 f4       	brne	.+30     	; 0x1114 <__addsf3x+0x34>
    10f6:	a6 f5       	brtc	.+104    	; 0x1160 <__addsf3x+0x80>
    10f8:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_zero>
    10fc:	0e f4       	brtc	.+2      	; 0x1100 <__addsf3x+0x20>
    10fe:	e0 95       	com	r30
    1100:	0b 2e       	mov	r0, r27
    1102:	ba 2f       	mov	r27, r26
    1104:	a0 2d       	mov	r26, r0
    1106:	0b 01       	movw	r0, r22
    1108:	b9 01       	movw	r22, r18
    110a:	90 01       	movw	r18, r0
    110c:	0c 01       	movw	r0, r24
    110e:	ca 01       	movw	r24, r20
    1110:	a0 01       	movw	r20, r0
    1112:	11 24       	eor	r1, r1
    1114:	ff 27       	eor	r31, r31
    1116:	59 1b       	sub	r21, r25
    1118:	99 f0       	breq	.+38     	; 0x1140 <__addsf3x+0x60>
    111a:	59 3f       	cpi	r21, 0xF9	; 249
    111c:	50 f4       	brcc	.+20     	; 0x1132 <__addsf3x+0x52>
    111e:	50 3e       	cpi	r21, 0xE0	; 224
    1120:	68 f1       	brcs	.+90     	; 0x117c <__addsf3x+0x9c>
    1122:	1a 16       	cp	r1, r26
    1124:	f0 40       	sbci	r31, 0x00	; 0
    1126:	a2 2f       	mov	r26, r18
    1128:	23 2f       	mov	r18, r19
    112a:	34 2f       	mov	r19, r20
    112c:	44 27       	eor	r20, r20
    112e:	58 5f       	subi	r21, 0xF8	; 248
    1130:	f3 cf       	rjmp	.-26     	; 0x1118 <__addsf3x+0x38>
    1132:	46 95       	lsr	r20
    1134:	37 95       	ror	r19
    1136:	27 95       	ror	r18
    1138:	a7 95       	ror	r26
    113a:	f0 40       	sbci	r31, 0x00	; 0
    113c:	53 95       	inc	r21
    113e:	c9 f7       	brne	.-14     	; 0x1132 <__addsf3x+0x52>
    1140:	7e f4       	brtc	.+30     	; 0x1160 <__addsf3x+0x80>
    1142:	1f 16       	cp	r1, r31
    1144:	ba 0b       	sbc	r27, r26
    1146:	62 0b       	sbc	r22, r18
    1148:	73 0b       	sbc	r23, r19
    114a:	84 0b       	sbc	r24, r20
    114c:	ba f0       	brmi	.+46     	; 0x117c <__addsf3x+0x9c>
    114e:	91 50       	subi	r25, 0x01	; 1
    1150:	a1 f0       	breq	.+40     	; 0x117a <__addsf3x+0x9a>
    1152:	ff 0f       	add	r31, r31
    1154:	bb 1f       	adc	r27, r27
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	c2 f7       	brpl	.-16     	; 0x114e <__addsf3x+0x6e>
    115e:	0e c0       	rjmp	.+28     	; 0x117c <__addsf3x+0x9c>
    1160:	ba 0f       	add	r27, r26
    1162:	62 1f       	adc	r22, r18
    1164:	73 1f       	adc	r23, r19
    1166:	84 1f       	adc	r24, r20
    1168:	48 f4       	brcc	.+18     	; 0x117c <__addsf3x+0x9c>
    116a:	87 95       	ror	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b7 95       	ror	r27
    1172:	f7 95       	ror	r31
    1174:	9e 3f       	cpi	r25, 0xFE	; 254
    1176:	08 f0       	brcs	.+2      	; 0x117a <__addsf3x+0x9a>
    1178:	b0 cf       	rjmp	.-160    	; 0x10da <__addsf3+0x28>
    117a:	93 95       	inc	r25
    117c:	88 0f       	add	r24, r24
    117e:	08 f0       	brcs	.+2      	; 0x1182 <__addsf3x+0xa2>
    1180:	99 27       	eor	r25, r25
    1182:	ee 0f       	add	r30, r30
    1184:	97 95       	ror	r25
    1186:	87 95       	ror	r24
    1188:	08 95       	ret

0000118a <__divmodhi4>:
    118a:	97 fb       	bst	r25, 7
    118c:	07 2e       	mov	r0, r23
    118e:	16 f4       	brtc	.+4      	; 0x1194 <__divmodhi4+0xa>
    1190:	00 94       	com	r0
    1192:	07 d0       	rcall	.+14     	; 0x11a2 <__divmodhi4_neg1>
    1194:	77 fd       	sbrc	r23, 7
    1196:	09 d0       	rcall	.+18     	; 0x11aa <__divmodhi4_neg2>
    1198:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__udivmodhi4>
    119c:	07 fc       	sbrc	r0, 7
    119e:	05 d0       	rcall	.+10     	; 0x11aa <__divmodhi4_neg2>
    11a0:	3e f4       	brtc	.+14     	; 0x11b0 <__divmodhi4_exit>

000011a2 <__divmodhi4_neg1>:
    11a2:	90 95       	com	r25
    11a4:	81 95       	neg	r24
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	08 95       	ret

000011aa <__divmodhi4_neg2>:
    11aa:	70 95       	com	r23
    11ac:	61 95       	neg	r22
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255

000011b0 <__divmodhi4_exit>:
    11b0:	08 95       	ret

000011b2 <__udivmodhi4>:
    11b2:	aa 1b       	sub	r26, r26
    11b4:	bb 1b       	sub	r27, r27
    11b6:	51 e1       	ldi	r21, 0x11	; 17
    11b8:	07 c0       	rjmp	.+14     	; 0x11c8 <__udivmodhi4_ep>

000011ba <__udivmodhi4_loop>:
    11ba:	aa 1f       	adc	r26, r26
    11bc:	bb 1f       	adc	r27, r27
    11be:	a6 17       	cp	r26, r22
    11c0:	b7 07       	cpc	r27, r23
    11c2:	10 f0       	brcs	.+4      	; 0x11c8 <__udivmodhi4_ep>
    11c4:	a6 1b       	sub	r26, r22
    11c6:	b7 0b       	sbc	r27, r23

000011c8 <__udivmodhi4_ep>:
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	5a 95       	dec	r21
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <__udivmodhi4_loop>
    11d0:	80 95       	com	r24
    11d2:	90 95       	com	r25
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	08 95       	ret

000011da <malloc>:
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	10 f4       	brcc	.+4      	; 0x11ec <malloc+0x12>
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <__flp>
    11f0:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <__flp+0x1>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	30 97       	sbiw	r30, 0x00	; 0
    11fe:	19 f1       	breq	.+70     	; 0x1246 <malloc+0x6c>
    1200:	40 81       	ld	r20, Z
    1202:	51 81       	ldd	r21, Z+1	; 0x01
    1204:	02 81       	ldd	r16, Z+2	; 0x02
    1206:	13 81       	ldd	r17, Z+3	; 0x03
    1208:	48 17       	cp	r20, r24
    120a:	59 07       	cpc	r21, r25
    120c:	c8 f0       	brcs	.+50     	; 0x1240 <malloc+0x66>
    120e:	84 17       	cp	r24, r20
    1210:	95 07       	cpc	r25, r21
    1212:	69 f4       	brne	.+26     	; 0x122e <malloc+0x54>
    1214:	10 97       	sbiw	r26, 0x00	; 0
    1216:	31 f0       	breq	.+12     	; 0x1224 <malloc+0x4a>
    1218:	12 96       	adiw	r26, 0x02	; 2
    121a:	0c 93       	st	X, r16
    121c:	12 97       	sbiw	r26, 0x02	; 2
    121e:	13 96       	adiw	r26, 0x03	; 3
    1220:	1c 93       	st	X, r17
    1222:	27 c0       	rjmp	.+78     	; 0x1272 <malloc+0x98>
    1224:	00 93 8e 02 	sts	0x028E, r16	; 0x80028e <__flp>
    1228:	10 93 8f 02 	sts	0x028F, r17	; 0x80028f <__flp+0x1>
    122c:	22 c0       	rjmp	.+68     	; 0x1272 <malloc+0x98>
    122e:	21 15       	cp	r18, r1
    1230:	31 05       	cpc	r19, r1
    1232:	19 f0       	breq	.+6      	; 0x123a <malloc+0x60>
    1234:	42 17       	cp	r20, r18
    1236:	53 07       	cpc	r21, r19
    1238:	18 f4       	brcc	.+6      	; 0x1240 <malloc+0x66>
    123a:	9a 01       	movw	r18, r20
    123c:	bd 01       	movw	r22, r26
    123e:	ef 01       	movw	r28, r30
    1240:	df 01       	movw	r26, r30
    1242:	f8 01       	movw	r30, r16
    1244:	db cf       	rjmp	.-74     	; 0x11fc <malloc+0x22>
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	f9 f0       	breq	.+62     	; 0x128a <malloc+0xb0>
    124c:	28 1b       	sub	r18, r24
    124e:	39 0b       	sbc	r19, r25
    1250:	24 30       	cpi	r18, 0x04	; 4
    1252:	31 05       	cpc	r19, r1
    1254:	80 f4       	brcc	.+32     	; 0x1276 <malloc+0x9c>
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	61 15       	cp	r22, r1
    125c:	71 05       	cpc	r23, r1
    125e:	21 f0       	breq	.+8      	; 0x1268 <malloc+0x8e>
    1260:	fb 01       	movw	r30, r22
    1262:	93 83       	std	Z+3, r25	; 0x03
    1264:	82 83       	std	Z+2, r24	; 0x02
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <malloc+0x96>
    1268:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__flp+0x1>
    126c:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__flp>
    1270:	fe 01       	movw	r30, r28
    1272:	32 96       	adiw	r30, 0x02	; 2
    1274:	44 c0       	rjmp	.+136    	; 0x12fe <malloc+0x124>
    1276:	fe 01       	movw	r30, r28
    1278:	e2 0f       	add	r30, r18
    127a:	f3 1f       	adc	r31, r19
    127c:	81 93       	st	Z+, r24
    127e:	91 93       	st	Z+, r25
    1280:	22 50       	subi	r18, 0x02	; 2
    1282:	31 09       	sbc	r19, r1
    1284:	39 83       	std	Y+1, r19	; 0x01
    1286:	28 83       	st	Y, r18
    1288:	3a c0       	rjmp	.+116    	; 0x12fe <malloc+0x124>
    128a:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <__brkval>
    128e:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <__brkval+0x1>
    1292:	23 2b       	or	r18, r19
    1294:	41 f4       	brne	.+16     	; 0x12a6 <malloc+0xcc>
    1296:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    129a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    129e:	30 93 8d 02 	sts	0x028D, r19	; 0x80028d <__brkval+0x1>
    12a2:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <__brkval>
    12a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    12aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    12ae:	21 15       	cp	r18, r1
    12b0:	31 05       	cpc	r19, r1
    12b2:	41 f4       	brne	.+16     	; 0x12c4 <malloc+0xea>
    12b4:	2d b7       	in	r18, 0x3d	; 61
    12b6:	3e b7       	in	r19, 0x3e	; 62
    12b8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    12bc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    12c0:	24 1b       	sub	r18, r20
    12c2:	35 0b       	sbc	r19, r21
    12c4:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <__brkval>
    12c8:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <__brkval+0x1>
    12cc:	e2 17       	cp	r30, r18
    12ce:	f3 07       	cpc	r31, r19
    12d0:	a0 f4       	brcc	.+40     	; 0x12fa <malloc+0x120>
    12d2:	2e 1b       	sub	r18, r30
    12d4:	3f 0b       	sbc	r19, r31
    12d6:	28 17       	cp	r18, r24
    12d8:	39 07       	cpc	r19, r25
    12da:	78 f0       	brcs	.+30     	; 0x12fa <malloc+0x120>
    12dc:	ac 01       	movw	r20, r24
    12de:	4e 5f       	subi	r20, 0xFE	; 254
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	24 17       	cp	r18, r20
    12e4:	35 07       	cpc	r19, r21
    12e6:	48 f0       	brcs	.+18     	; 0x12fa <malloc+0x120>
    12e8:	4e 0f       	add	r20, r30
    12ea:	5f 1f       	adc	r21, r31
    12ec:	50 93 8d 02 	sts	0x028D, r21	; 0x80028d <__brkval+0x1>
    12f0:	40 93 8c 02 	sts	0x028C, r20	; 0x80028c <__brkval>
    12f4:	81 93       	st	Z+, r24
    12f6:	91 93       	st	Z+, r25
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <malloc+0x124>
    12fa:	e0 e0       	ldi	r30, 0x00	; 0
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	cf 01       	movw	r24, r30
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <free>:
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	09 f4       	brne	.+2      	; 0x1314 <free+0xa>
    1312:	81 c0       	rjmp	.+258    	; 0x1416 <free+0x10c>
    1314:	fc 01       	movw	r30, r24
    1316:	32 97       	sbiw	r30, 0x02	; 2
    1318:	13 82       	std	Z+3, r1	; 0x03
    131a:	12 82       	std	Z+2, r1	; 0x02
    131c:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <__flp>
    1320:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <__flp+0x1>
    1324:	10 97       	sbiw	r26, 0x00	; 0
    1326:	81 f4       	brne	.+32     	; 0x1348 <free+0x3e>
    1328:	20 81       	ld	r18, Z
    132a:	31 81       	ldd	r19, Z+1	; 0x01
    132c:	82 0f       	add	r24, r18
    132e:	93 1f       	adc	r25, r19
    1330:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <__brkval>
    1334:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <__brkval+0x1>
    1338:	28 17       	cp	r18, r24
    133a:	39 07       	cpc	r19, r25
    133c:	51 f5       	brne	.+84     	; 0x1392 <free+0x88>
    133e:	f0 93 8d 02 	sts	0x028D, r31	; 0x80028d <__brkval+0x1>
    1342:	e0 93 8c 02 	sts	0x028C, r30	; 0x80028c <__brkval>
    1346:	67 c0       	rjmp	.+206    	; 0x1416 <free+0x10c>
    1348:	ed 01       	movw	r28, r26
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	ce 17       	cp	r28, r30
    1350:	df 07       	cpc	r29, r31
    1352:	40 f4       	brcc	.+16     	; 0x1364 <free+0x5a>
    1354:	4a 81       	ldd	r20, Y+2	; 0x02
    1356:	5b 81       	ldd	r21, Y+3	; 0x03
    1358:	9e 01       	movw	r18, r28
    135a:	41 15       	cp	r20, r1
    135c:	51 05       	cpc	r21, r1
    135e:	f1 f0       	breq	.+60     	; 0x139c <free+0x92>
    1360:	ea 01       	movw	r28, r20
    1362:	f5 cf       	rjmp	.-22     	; 0x134e <free+0x44>
    1364:	d3 83       	std	Z+3, r29	; 0x03
    1366:	c2 83       	std	Z+2, r28	; 0x02
    1368:	40 81       	ld	r20, Z
    136a:	51 81       	ldd	r21, Z+1	; 0x01
    136c:	84 0f       	add	r24, r20
    136e:	95 1f       	adc	r25, r21
    1370:	c8 17       	cp	r28, r24
    1372:	d9 07       	cpc	r29, r25
    1374:	59 f4       	brne	.+22     	; 0x138c <free+0x82>
    1376:	88 81       	ld	r24, Y
    1378:	99 81       	ldd	r25, Y+1	; 0x01
    137a:	84 0f       	add	r24, r20
    137c:	95 1f       	adc	r25, r21
    137e:	02 96       	adiw	r24, 0x02	; 2
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	93 83       	std	Z+3, r25	; 0x03
    138a:	82 83       	std	Z+2, r24	; 0x02
    138c:	21 15       	cp	r18, r1
    138e:	31 05       	cpc	r19, r1
    1390:	29 f4       	brne	.+10     	; 0x139c <free+0x92>
    1392:	f0 93 8f 02 	sts	0x028F, r31	; 0x80028f <__flp+0x1>
    1396:	e0 93 8e 02 	sts	0x028E, r30	; 0x80028e <__flp>
    139a:	3d c0       	rjmp	.+122    	; 0x1416 <free+0x10c>
    139c:	e9 01       	movw	r28, r18
    139e:	fb 83       	std	Y+3, r31	; 0x03
    13a0:	ea 83       	std	Y+2, r30	; 0x02
    13a2:	49 91       	ld	r20, Y+
    13a4:	59 91       	ld	r21, Y+
    13a6:	c4 0f       	add	r28, r20
    13a8:	d5 1f       	adc	r29, r21
    13aa:	ec 17       	cp	r30, r28
    13ac:	fd 07       	cpc	r31, r29
    13ae:	61 f4       	brne	.+24     	; 0x13c8 <free+0xbe>
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	84 0f       	add	r24, r20
    13b6:	95 1f       	adc	r25, r21
    13b8:	02 96       	adiw	r24, 0x02	; 2
    13ba:	e9 01       	movw	r28, r18
    13bc:	99 83       	std	Y+1, r25	; 0x01
    13be:	88 83       	st	Y, r24
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	9b 83       	std	Y+3, r25	; 0x03
    13c6:	8a 83       	std	Y+2, r24	; 0x02
    13c8:	e0 e0       	ldi	r30, 0x00	; 0
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	12 96       	adiw	r26, 0x02	; 2
    13ce:	8d 91       	ld	r24, X+
    13d0:	9c 91       	ld	r25, X
    13d2:	13 97       	sbiw	r26, 0x03	; 3
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	19 f0       	breq	.+6      	; 0x13de <free+0xd4>
    13d8:	fd 01       	movw	r30, r26
    13da:	dc 01       	movw	r26, r24
    13dc:	f7 cf       	rjmp	.-18     	; 0x13cc <free+0xc2>
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	11 97       	sbiw	r26, 0x01	; 1
    13e4:	9d 01       	movw	r18, r26
    13e6:	2e 5f       	subi	r18, 0xFE	; 254
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <__brkval>
    13f2:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <__brkval+0x1>
    13f6:	28 17       	cp	r18, r24
    13f8:	39 07       	cpc	r19, r25
    13fa:	69 f4       	brne	.+26     	; 0x1416 <free+0x10c>
    13fc:	30 97       	sbiw	r30, 0x00	; 0
    13fe:	29 f4       	brne	.+10     	; 0x140a <free+0x100>
    1400:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <__flp+0x1>
    1404:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <__flp>
    1408:	02 c0       	rjmp	.+4      	; 0x140e <free+0x104>
    140a:	13 82       	std	Z+3, r1	; 0x03
    140c:	12 82       	std	Z+2, r1	; 0x02
    140e:	b0 93 8d 02 	sts	0x028D, r27	; 0x80028d <__brkval+0x1>
    1412:	a0 93 8c 02 	sts	0x028C, r26	; 0x80028c <__brkval>
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <do_rand>:
    141c:	8f 92       	push	r8
    141e:	9f 92       	push	r9
    1420:	af 92       	push	r10
    1422:	bf 92       	push	r11
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ec 01       	movw	r28, r24
    1432:	68 81       	ld	r22, Y
    1434:	79 81       	ldd	r23, Y+1	; 0x01
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	61 15       	cp	r22, r1
    143c:	71 05       	cpc	r23, r1
    143e:	81 05       	cpc	r24, r1
    1440:	91 05       	cpc	r25, r1
    1442:	21 f4       	brne	.+8      	; 0x144c <do_rand+0x30>
    1444:	64 e2       	ldi	r22, 0x24	; 36
    1446:	79 ed       	ldi	r23, 0xD9	; 217
    1448:	8b e5       	ldi	r24, 0x5B	; 91
    144a:	97 e0       	ldi	r25, 0x07	; 7
    144c:	2d e1       	ldi	r18, 0x1D	; 29
    144e:	33 ef       	ldi	r19, 0xF3	; 243
    1450:	41 e0       	ldi	r20, 0x01	; 1
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__divmodsi4>
    1458:	49 01       	movw	r8, r18
    145a:	5a 01       	movw	r10, r20
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	a7 ea       	ldi	r26, 0xA7	; 167
    1462:	b1 e4       	ldi	r27, 0x41	; 65
    1464:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__muluhisi3>
    1468:	6b 01       	movw	r12, r22
    146a:	7c 01       	movw	r14, r24
    146c:	ac ee       	ldi	r26, 0xEC	; 236
    146e:	b4 ef       	ldi	r27, 0xF4	; 244
    1470:	a5 01       	movw	r20, r10
    1472:	94 01       	movw	r18, r8
    1474:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulohisi3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8c 0d       	add	r24, r12
    147e:	9d 1d       	adc	r25, r13
    1480:	ae 1d       	adc	r26, r14
    1482:	bf 1d       	adc	r27, r15
    1484:	b7 ff       	sbrs	r27, 7
    1486:	03 c0       	rjmp	.+6      	; 0x148e <do_rand+0x72>
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	a1 09       	sbc	r26, r1
    148c:	b0 48       	sbci	r27, 0x80	; 128
    148e:	88 83       	st	Y, r24
    1490:	99 83       	std	Y+1, r25	; 0x01
    1492:	aa 83       	std	Y+2, r26	; 0x02
    1494:	bb 83       	std	Y+3, r27	; 0x03
    1496:	9f 77       	andi	r25, 0x7F	; 127
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	bf 90       	pop	r11
    14a6:	af 90       	pop	r10
    14a8:	9f 90       	pop	r9
    14aa:	8f 90       	pop	r8
    14ac:	08 95       	ret

000014ae <rand_r>:
    14ae:	0e 94 0e 0a 	call	0x141c	; 0x141c <do_rand>
    14b2:	08 95       	ret

000014b4 <rand>:
    14b4:	86 e0       	ldi	r24, 0x06	; 6
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	0e 94 0e 0a 	call	0x141c	; 0x141c <do_rand>
    14bc:	08 95       	ret

000014be <srand>:
    14be:	a0 e0       	ldi	r26, 0x00	; 0
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    14c6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    14ca:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    14ce:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    14d2:	08 95       	ret

000014d4 <strcpy>:
    14d4:	fb 01       	movw	r30, r22
    14d6:	dc 01       	movw	r26, r24
    14d8:	01 90       	ld	r0, Z+
    14da:	0d 92       	st	X+, r0
    14dc:	00 20       	and	r0, r0
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <strcpy+0x4>
    14e0:	08 95       	ret

000014e2 <fdevopen>:
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	31 f4       	brne	.+12     	; 0x14fa <fdevopen+0x18>
    14ee:	61 15       	cp	r22, r1
    14f0:	71 05       	cpc	r23, r1
    14f2:	19 f4       	brne	.+6      	; 0x14fa <fdevopen+0x18>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	3a c0       	rjmp	.+116    	; 0x156e <fdevopen+0x8c>
    14fa:	8b 01       	movw	r16, r22
    14fc:	ec 01       	movw	r28, r24
    14fe:	6e e0       	ldi	r22, 0x0E	; 14
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 b3 0c 	call	0x1966	; 0x1966 <calloc>
    150a:	fc 01       	movw	r30, r24
    150c:	89 2b       	or	r24, r25
    150e:	91 f3       	breq	.-28     	; 0x14f4 <fdevopen+0x12>
    1510:	80 e8       	ldi	r24, 0x80	; 128
    1512:	83 83       	std	Z+3, r24	; 0x03
    1514:	01 15       	cp	r16, r1
    1516:	11 05       	cpc	r17, r1
    1518:	71 f0       	breq	.+28     	; 0x1536 <fdevopen+0x54>
    151a:	13 87       	std	Z+11, r17	; 0x0b
    151c:	02 87       	std	Z+10, r16	; 0x0a
    151e:	81 e8       	ldi	r24, 0x81	; 129
    1520:	83 83       	std	Z+3, r24	; 0x03
    1522:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__iob>
    1526:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__iob+0x1>
    152a:	89 2b       	or	r24, r25
    152c:	21 f4       	brne	.+8      	; 0x1536 <fdevopen+0x54>
    152e:	f0 93 91 02 	sts	0x0291, r31	; 0x800291 <__iob+0x1>
    1532:	e0 93 90 02 	sts	0x0290, r30	; 0x800290 <__iob>
    1536:	20 97       	sbiw	r28, 0x00	; 0
    1538:	c9 f0       	breq	.+50     	; 0x156c <fdevopen+0x8a>
    153a:	d1 87       	std	Z+9, r29	; 0x09
    153c:	c0 87       	std	Z+8, r28	; 0x08
    153e:	83 81       	ldd	r24, Z+3	; 0x03
    1540:	82 60       	ori	r24, 0x02	; 2
    1542:	83 83       	std	Z+3, r24	; 0x03
    1544:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__iob+0x2>
    1548:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__iob+0x3>
    154c:	89 2b       	or	r24, r25
    154e:	71 f4       	brne	.+28     	; 0x156c <fdevopen+0x8a>
    1550:	f0 93 93 02 	sts	0x0293, r31	; 0x800293 <__iob+0x3>
    1554:	e0 93 92 02 	sts	0x0292, r30	; 0x800292 <__iob+0x2>
    1558:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__iob+0x4>
    155c:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <__iob+0x5>
    1560:	89 2b       	or	r24, r25
    1562:	21 f4       	brne	.+8      	; 0x156c <fdevopen+0x8a>
    1564:	f0 93 95 02 	sts	0x0295, r31	; 0x800295 <__iob+0x5>
    1568:	e0 93 94 02 	sts	0x0294, r30	; 0x800294 <__iob+0x4>
    156c:	cf 01       	movw	r24, r30
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <printf>:
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 ec       	ldi	r30, 0xC2	; 194
    157e:	fa e0       	ldi	r31, 0x0A	; 10
    1580:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__prologue_saves__+0x20>
    1584:	ae 01       	movw	r20, r28
    1586:	4b 5f       	subi	r20, 0xFB	; 251
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	fa 01       	movw	r30, r20
    158c:	61 91       	ld	r22, Z+
    158e:	71 91       	ld	r23, Z+
    1590:	af 01       	movw	r20, r30
    1592:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__iob+0x2>
    1596:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__iob+0x3>
    159a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vfprintf>
    159e:	e2 e0       	ldi	r30, 0x02	; 2
    15a0:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__epilogue_restores__+0x20>

000015a4 <vfprintf>:
    15a4:	ab e0       	ldi	r26, 0x0B	; 11
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 ed       	ldi	r30, 0xD8	; 216
    15aa:	fa e0       	ldi	r31, 0x0A	; 10
    15ac:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__prologue_saves__>
    15b0:	6c 01       	movw	r12, r24
    15b2:	7b 01       	movw	r14, r22
    15b4:	8a 01       	movw	r16, r20
    15b6:	fc 01       	movw	r30, r24
    15b8:	17 82       	std	Z+7, r1	; 0x07
    15ba:	16 82       	std	Z+6, r1	; 0x06
    15bc:	83 81       	ldd	r24, Z+3	; 0x03
    15be:	81 ff       	sbrs	r24, 1
    15c0:	cc c1       	rjmp	.+920    	; 0x195a <vfprintf+0x3b6>
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	3c 01       	movw	r6, r24
    15c8:	f6 01       	movw	r30, r12
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	f7 01       	movw	r30, r14
    15ce:	93 fd       	sbrc	r25, 3
    15d0:	85 91       	lpm	r24, Z+
    15d2:	93 ff       	sbrs	r25, 3
    15d4:	81 91       	ld	r24, Z+
    15d6:	7f 01       	movw	r14, r30
    15d8:	88 23       	and	r24, r24
    15da:	09 f4       	brne	.+2      	; 0x15de <vfprintf+0x3a>
    15dc:	ba c1       	rjmp	.+884    	; 0x1952 <vfprintf+0x3ae>
    15de:	85 32       	cpi	r24, 0x25	; 37
    15e0:	39 f4       	brne	.+14     	; 0x15f0 <vfprintf+0x4c>
    15e2:	93 fd       	sbrc	r25, 3
    15e4:	85 91       	lpm	r24, Z+
    15e6:	93 ff       	sbrs	r25, 3
    15e8:	81 91       	ld	r24, Z+
    15ea:	7f 01       	movw	r14, r30
    15ec:	85 32       	cpi	r24, 0x25	; 37
    15ee:	29 f4       	brne	.+10     	; 0x15fa <vfprintf+0x56>
    15f0:	b6 01       	movw	r22, r12
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    15f8:	e7 cf       	rjmp	.-50     	; 0x15c8 <vfprintf+0x24>
    15fa:	91 2c       	mov	r9, r1
    15fc:	21 2c       	mov	r2, r1
    15fe:	31 2c       	mov	r3, r1
    1600:	ff e1       	ldi	r31, 0x1F	; 31
    1602:	f3 15       	cp	r31, r3
    1604:	d8 f0       	brcs	.+54     	; 0x163c <vfprintf+0x98>
    1606:	8b 32       	cpi	r24, 0x2B	; 43
    1608:	79 f0       	breq	.+30     	; 0x1628 <vfprintf+0x84>
    160a:	38 f4       	brcc	.+14     	; 0x161a <vfprintf+0x76>
    160c:	80 32       	cpi	r24, 0x20	; 32
    160e:	79 f0       	breq	.+30     	; 0x162e <vfprintf+0x8a>
    1610:	83 32       	cpi	r24, 0x23	; 35
    1612:	a1 f4       	brne	.+40     	; 0x163c <vfprintf+0x98>
    1614:	23 2d       	mov	r18, r3
    1616:	20 61       	ori	r18, 0x10	; 16
    1618:	1d c0       	rjmp	.+58     	; 0x1654 <vfprintf+0xb0>
    161a:	8d 32       	cpi	r24, 0x2D	; 45
    161c:	61 f0       	breq	.+24     	; 0x1636 <vfprintf+0x92>
    161e:	80 33       	cpi	r24, 0x30	; 48
    1620:	69 f4       	brne	.+26     	; 0x163c <vfprintf+0x98>
    1622:	23 2d       	mov	r18, r3
    1624:	21 60       	ori	r18, 0x01	; 1
    1626:	16 c0       	rjmp	.+44     	; 0x1654 <vfprintf+0xb0>
    1628:	83 2d       	mov	r24, r3
    162a:	82 60       	ori	r24, 0x02	; 2
    162c:	38 2e       	mov	r3, r24
    162e:	e3 2d       	mov	r30, r3
    1630:	e4 60       	ori	r30, 0x04	; 4
    1632:	3e 2e       	mov	r3, r30
    1634:	2a c0       	rjmp	.+84     	; 0x168a <vfprintf+0xe6>
    1636:	f3 2d       	mov	r31, r3
    1638:	f8 60       	ori	r31, 0x08	; 8
    163a:	1d c0       	rjmp	.+58     	; 0x1676 <vfprintf+0xd2>
    163c:	37 fc       	sbrc	r3, 7
    163e:	2d c0       	rjmp	.+90     	; 0x169a <vfprintf+0xf6>
    1640:	20 ed       	ldi	r18, 0xD0	; 208
    1642:	28 0f       	add	r18, r24
    1644:	2a 30       	cpi	r18, 0x0A	; 10
    1646:	40 f0       	brcs	.+16     	; 0x1658 <vfprintf+0xb4>
    1648:	8e 32       	cpi	r24, 0x2E	; 46
    164a:	b9 f4       	brne	.+46     	; 0x167a <vfprintf+0xd6>
    164c:	36 fc       	sbrc	r3, 6
    164e:	81 c1       	rjmp	.+770    	; 0x1952 <vfprintf+0x3ae>
    1650:	23 2d       	mov	r18, r3
    1652:	20 64       	ori	r18, 0x40	; 64
    1654:	32 2e       	mov	r3, r18
    1656:	19 c0       	rjmp	.+50     	; 0x168a <vfprintf+0xe6>
    1658:	36 fe       	sbrs	r3, 6
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0xc4>
    165c:	8a e0       	ldi	r24, 0x0A	; 10
    165e:	98 9e       	mul	r9, r24
    1660:	20 0d       	add	r18, r0
    1662:	11 24       	eor	r1, r1
    1664:	92 2e       	mov	r9, r18
    1666:	11 c0       	rjmp	.+34     	; 0x168a <vfprintf+0xe6>
    1668:	ea e0       	ldi	r30, 0x0A	; 10
    166a:	2e 9e       	mul	r2, r30
    166c:	20 0d       	add	r18, r0
    166e:	11 24       	eor	r1, r1
    1670:	22 2e       	mov	r2, r18
    1672:	f3 2d       	mov	r31, r3
    1674:	f0 62       	ori	r31, 0x20	; 32
    1676:	3f 2e       	mov	r3, r31
    1678:	08 c0       	rjmp	.+16     	; 0x168a <vfprintf+0xe6>
    167a:	8c 36       	cpi	r24, 0x6C	; 108
    167c:	21 f4       	brne	.+8      	; 0x1686 <vfprintf+0xe2>
    167e:	83 2d       	mov	r24, r3
    1680:	80 68       	ori	r24, 0x80	; 128
    1682:	38 2e       	mov	r3, r24
    1684:	02 c0       	rjmp	.+4      	; 0x168a <vfprintf+0xe6>
    1686:	88 36       	cpi	r24, 0x68	; 104
    1688:	41 f4       	brne	.+16     	; 0x169a <vfprintf+0xf6>
    168a:	f7 01       	movw	r30, r14
    168c:	93 fd       	sbrc	r25, 3
    168e:	85 91       	lpm	r24, Z+
    1690:	93 ff       	sbrs	r25, 3
    1692:	81 91       	ld	r24, Z+
    1694:	7f 01       	movw	r14, r30
    1696:	81 11       	cpse	r24, r1
    1698:	b3 cf       	rjmp	.-154    	; 0x1600 <vfprintf+0x5c>
    169a:	98 2f       	mov	r25, r24
    169c:	9f 7d       	andi	r25, 0xDF	; 223
    169e:	95 54       	subi	r25, 0x45	; 69
    16a0:	93 30       	cpi	r25, 0x03	; 3
    16a2:	28 f4       	brcc	.+10     	; 0x16ae <vfprintf+0x10a>
    16a4:	0c 5f       	subi	r16, 0xFC	; 252
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	9f e3       	ldi	r25, 0x3F	; 63
    16aa:	99 83       	std	Y+1, r25	; 0x01
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <vfprintf+0x124>
    16ae:	83 36       	cpi	r24, 0x63	; 99
    16b0:	31 f0       	breq	.+12     	; 0x16be <vfprintf+0x11a>
    16b2:	83 37       	cpi	r24, 0x73	; 115
    16b4:	71 f0       	breq	.+28     	; 0x16d2 <vfprintf+0x12e>
    16b6:	83 35       	cpi	r24, 0x53	; 83
    16b8:	09 f0       	breq	.+2      	; 0x16bc <vfprintf+0x118>
    16ba:	59 c0       	rjmp	.+178    	; 0x176e <vfprintf+0x1ca>
    16bc:	21 c0       	rjmp	.+66     	; 0x1700 <vfprintf+0x15c>
    16be:	f8 01       	movw	r30, r16
    16c0:	80 81       	ld	r24, Z
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	0e 5f       	subi	r16, 0xFE	; 254
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	88 24       	eor	r8, r8
    16ca:	83 94       	inc	r8
    16cc:	91 2c       	mov	r9, r1
    16ce:	53 01       	movw	r10, r6
    16d0:	13 c0       	rjmp	.+38     	; 0x16f8 <vfprintf+0x154>
    16d2:	28 01       	movw	r4, r16
    16d4:	f2 e0       	ldi	r31, 0x02	; 2
    16d6:	4f 0e       	add	r4, r31
    16d8:	51 1c       	adc	r5, r1
    16da:	f8 01       	movw	r30, r16
    16dc:	a0 80       	ld	r10, Z
    16de:	b1 80       	ldd	r11, Z+1	; 0x01
    16e0:	36 fe       	sbrs	r3, 6
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <vfprintf+0x146>
    16e4:	69 2d       	mov	r22, r9
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <vfprintf+0x14a>
    16ea:	6f ef       	ldi	r22, 0xFF	; 255
    16ec:	7f ef       	ldi	r23, 0xFF	; 255
    16ee:	c5 01       	movw	r24, r10
    16f0:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <strnlen>
    16f4:	4c 01       	movw	r8, r24
    16f6:	82 01       	movw	r16, r4
    16f8:	f3 2d       	mov	r31, r3
    16fa:	ff 77       	andi	r31, 0x7F	; 127
    16fc:	3f 2e       	mov	r3, r31
    16fe:	16 c0       	rjmp	.+44     	; 0x172c <vfprintf+0x188>
    1700:	28 01       	movw	r4, r16
    1702:	22 e0       	ldi	r18, 0x02	; 2
    1704:	42 0e       	add	r4, r18
    1706:	51 1c       	adc	r5, r1
    1708:	f8 01       	movw	r30, r16
    170a:	a0 80       	ld	r10, Z
    170c:	b1 80       	ldd	r11, Z+1	; 0x01
    170e:	36 fe       	sbrs	r3, 6
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <vfprintf+0x174>
    1712:	69 2d       	mov	r22, r9
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <vfprintf+0x178>
    1718:	6f ef       	ldi	r22, 0xFF	; 255
    171a:	7f ef       	ldi	r23, 0xFF	; 255
    171c:	c5 01       	movw	r24, r10
    171e:	0e 94 cf 0c 	call	0x199e	; 0x199e <strnlen_P>
    1722:	4c 01       	movw	r8, r24
    1724:	f3 2d       	mov	r31, r3
    1726:	f0 68       	ori	r31, 0x80	; 128
    1728:	3f 2e       	mov	r3, r31
    172a:	82 01       	movw	r16, r4
    172c:	33 fc       	sbrc	r3, 3
    172e:	1b c0       	rjmp	.+54     	; 0x1766 <vfprintf+0x1c2>
    1730:	82 2d       	mov	r24, r2
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	88 16       	cp	r8, r24
    1736:	99 06       	cpc	r9, r25
    1738:	b0 f4       	brcc	.+44     	; 0x1766 <vfprintf+0x1c2>
    173a:	b6 01       	movw	r22, r12
    173c:	80 e2       	ldi	r24, 0x20	; 32
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    1744:	2a 94       	dec	r2
    1746:	f4 cf       	rjmp	.-24     	; 0x1730 <vfprintf+0x18c>
    1748:	f5 01       	movw	r30, r10
    174a:	37 fc       	sbrc	r3, 7
    174c:	85 91       	lpm	r24, Z+
    174e:	37 fe       	sbrs	r3, 7
    1750:	81 91       	ld	r24, Z+
    1752:	5f 01       	movw	r10, r30
    1754:	b6 01       	movw	r22, r12
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    175c:	21 10       	cpse	r2, r1
    175e:	2a 94       	dec	r2
    1760:	21 e0       	ldi	r18, 0x01	; 1
    1762:	82 1a       	sub	r8, r18
    1764:	91 08       	sbc	r9, r1
    1766:	81 14       	cp	r8, r1
    1768:	91 04       	cpc	r9, r1
    176a:	71 f7       	brne	.-36     	; 0x1748 <vfprintf+0x1a4>
    176c:	e8 c0       	rjmp	.+464    	; 0x193e <vfprintf+0x39a>
    176e:	84 36       	cpi	r24, 0x64	; 100
    1770:	11 f0       	breq	.+4      	; 0x1776 <vfprintf+0x1d2>
    1772:	89 36       	cpi	r24, 0x69	; 105
    1774:	41 f5       	brne	.+80     	; 0x17c6 <vfprintf+0x222>
    1776:	f8 01       	movw	r30, r16
    1778:	37 fe       	sbrs	r3, 7
    177a:	07 c0       	rjmp	.+14     	; 0x178a <vfprintf+0x1e6>
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	0c 5f       	subi	r16, 0xFC	; 252
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	08 c0       	rjmp	.+16     	; 0x179a <vfprintf+0x1f6>
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	07 2e       	mov	r0, r23
    1790:	00 0c       	add	r0, r0
    1792:	88 0b       	sbc	r24, r24
    1794:	99 0b       	sbc	r25, r25
    1796:	0e 5f       	subi	r16, 0xFE	; 254
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	f3 2d       	mov	r31, r3
    179c:	ff 76       	andi	r31, 0x6F	; 111
    179e:	3f 2e       	mov	r3, r31
    17a0:	97 ff       	sbrs	r25, 7
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <vfprintf+0x212>
    17a4:	90 95       	com	r25
    17a6:	80 95       	com	r24
    17a8:	70 95       	com	r23
    17aa:	61 95       	neg	r22
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	f0 68       	ori	r31, 0x80	; 128
    17b4:	3f 2e       	mov	r3, r31
    17b6:	2a e0       	ldi	r18, 0x0A	; 10
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	a3 01       	movw	r20, r6
    17bc:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__ultoa_invert>
    17c0:	88 2e       	mov	r8, r24
    17c2:	86 18       	sub	r8, r6
    17c4:	45 c0       	rjmp	.+138    	; 0x1850 <vfprintf+0x2ac>
    17c6:	85 37       	cpi	r24, 0x75	; 117
    17c8:	31 f4       	brne	.+12     	; 0x17d6 <vfprintf+0x232>
    17ca:	23 2d       	mov	r18, r3
    17cc:	2f 7e       	andi	r18, 0xEF	; 239
    17ce:	b2 2e       	mov	r11, r18
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	25 c0       	rjmp	.+74     	; 0x1820 <vfprintf+0x27c>
    17d6:	93 2d       	mov	r25, r3
    17d8:	99 7f       	andi	r25, 0xF9	; 249
    17da:	b9 2e       	mov	r11, r25
    17dc:	8f 36       	cpi	r24, 0x6F	; 111
    17de:	c1 f0       	breq	.+48     	; 0x1810 <vfprintf+0x26c>
    17e0:	18 f4       	brcc	.+6      	; 0x17e8 <vfprintf+0x244>
    17e2:	88 35       	cpi	r24, 0x58	; 88
    17e4:	79 f0       	breq	.+30     	; 0x1804 <vfprintf+0x260>
    17e6:	b5 c0       	rjmp	.+362    	; 0x1952 <vfprintf+0x3ae>
    17e8:	80 37       	cpi	r24, 0x70	; 112
    17ea:	19 f0       	breq	.+6      	; 0x17f2 <vfprintf+0x24e>
    17ec:	88 37       	cpi	r24, 0x78	; 120
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <vfprintf+0x254>
    17f0:	b0 c0       	rjmp	.+352    	; 0x1952 <vfprintf+0x3ae>
    17f2:	e9 2f       	mov	r30, r25
    17f4:	e0 61       	ori	r30, 0x10	; 16
    17f6:	be 2e       	mov	r11, r30
    17f8:	b4 fe       	sbrs	r11, 4
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <vfprintf+0x272>
    17fc:	fb 2d       	mov	r31, r11
    17fe:	f4 60       	ori	r31, 0x04	; 4
    1800:	bf 2e       	mov	r11, r31
    1802:	09 c0       	rjmp	.+18     	; 0x1816 <vfprintf+0x272>
    1804:	34 fe       	sbrs	r3, 4
    1806:	0a c0       	rjmp	.+20     	; 0x181c <vfprintf+0x278>
    1808:	29 2f       	mov	r18, r25
    180a:	26 60       	ori	r18, 0x06	; 6
    180c:	b2 2e       	mov	r11, r18
    180e:	06 c0       	rjmp	.+12     	; 0x181c <vfprintf+0x278>
    1810:	28 e0       	ldi	r18, 0x08	; 8
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <vfprintf+0x27c>
    1816:	20 e1       	ldi	r18, 0x10	; 16
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <vfprintf+0x27c>
    181c:	20 e1       	ldi	r18, 0x10	; 16
    181e:	32 e0       	ldi	r19, 0x02	; 2
    1820:	f8 01       	movw	r30, r16
    1822:	b7 fe       	sbrs	r11, 7
    1824:	07 c0       	rjmp	.+14     	; 0x1834 <vfprintf+0x290>
    1826:	60 81       	ld	r22, Z
    1828:	71 81       	ldd	r23, Z+1	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	0c 5f       	subi	r16, 0xFC	; 252
    1830:	1f 4f       	sbci	r17, 0xFF	; 255
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <vfprintf+0x29c>
    1834:	60 81       	ld	r22, Z
    1836:	71 81       	ldd	r23, Z+1	; 0x01
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 5f       	subi	r16, 0xFE	; 254
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	a3 01       	movw	r20, r6
    1842:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__ultoa_invert>
    1846:	88 2e       	mov	r8, r24
    1848:	86 18       	sub	r8, r6
    184a:	fb 2d       	mov	r31, r11
    184c:	ff 77       	andi	r31, 0x7F	; 127
    184e:	3f 2e       	mov	r3, r31
    1850:	36 fe       	sbrs	r3, 6
    1852:	0d c0       	rjmp	.+26     	; 0x186e <vfprintf+0x2ca>
    1854:	23 2d       	mov	r18, r3
    1856:	2e 7f       	andi	r18, 0xFE	; 254
    1858:	a2 2e       	mov	r10, r18
    185a:	89 14       	cp	r8, r9
    185c:	58 f4       	brcc	.+22     	; 0x1874 <vfprintf+0x2d0>
    185e:	34 fe       	sbrs	r3, 4
    1860:	0b c0       	rjmp	.+22     	; 0x1878 <vfprintf+0x2d4>
    1862:	32 fc       	sbrc	r3, 2
    1864:	09 c0       	rjmp	.+18     	; 0x1878 <vfprintf+0x2d4>
    1866:	83 2d       	mov	r24, r3
    1868:	8e 7e       	andi	r24, 0xEE	; 238
    186a:	a8 2e       	mov	r10, r24
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <vfprintf+0x2d4>
    186e:	b8 2c       	mov	r11, r8
    1870:	a3 2c       	mov	r10, r3
    1872:	03 c0       	rjmp	.+6      	; 0x187a <vfprintf+0x2d6>
    1874:	b8 2c       	mov	r11, r8
    1876:	01 c0       	rjmp	.+2      	; 0x187a <vfprintf+0x2d6>
    1878:	b9 2c       	mov	r11, r9
    187a:	a4 fe       	sbrs	r10, 4
    187c:	0f c0       	rjmp	.+30     	; 0x189c <vfprintf+0x2f8>
    187e:	fe 01       	movw	r30, r28
    1880:	e8 0d       	add	r30, r8
    1882:	f1 1d       	adc	r31, r1
    1884:	80 81       	ld	r24, Z
    1886:	80 33       	cpi	r24, 0x30	; 48
    1888:	21 f4       	brne	.+8      	; 0x1892 <vfprintf+0x2ee>
    188a:	9a 2d       	mov	r25, r10
    188c:	99 7e       	andi	r25, 0xE9	; 233
    188e:	a9 2e       	mov	r10, r25
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <vfprintf+0x300>
    1892:	a2 fe       	sbrs	r10, 2
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <vfprintf+0x2fe>
    1896:	b3 94       	inc	r11
    1898:	b3 94       	inc	r11
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <vfprintf+0x300>
    189c:	8a 2d       	mov	r24, r10
    189e:	86 78       	andi	r24, 0x86	; 134
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <vfprintf+0x300>
    18a2:	b3 94       	inc	r11
    18a4:	a3 fc       	sbrc	r10, 3
    18a6:	11 c0       	rjmp	.+34     	; 0x18ca <vfprintf+0x326>
    18a8:	a0 fe       	sbrs	r10, 0
    18aa:	06 c0       	rjmp	.+12     	; 0x18b8 <vfprintf+0x314>
    18ac:	b2 14       	cp	r11, r2
    18ae:	88 f4       	brcc	.+34     	; 0x18d2 <vfprintf+0x32e>
    18b0:	28 0c       	add	r2, r8
    18b2:	92 2c       	mov	r9, r2
    18b4:	9b 18       	sub	r9, r11
    18b6:	0e c0       	rjmp	.+28     	; 0x18d4 <vfprintf+0x330>
    18b8:	b2 14       	cp	r11, r2
    18ba:	60 f4       	brcc	.+24     	; 0x18d4 <vfprintf+0x330>
    18bc:	b6 01       	movw	r22, r12
    18be:	80 e2       	ldi	r24, 0x20	; 32
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    18c6:	b3 94       	inc	r11
    18c8:	f7 cf       	rjmp	.-18     	; 0x18b8 <vfprintf+0x314>
    18ca:	b2 14       	cp	r11, r2
    18cc:	18 f4       	brcc	.+6      	; 0x18d4 <vfprintf+0x330>
    18ce:	2b 18       	sub	r2, r11
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <vfprintf+0x332>
    18d2:	98 2c       	mov	r9, r8
    18d4:	21 2c       	mov	r2, r1
    18d6:	a4 fe       	sbrs	r10, 4
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <vfprintf+0x356>
    18da:	b6 01       	movw	r22, r12
    18dc:	80 e3       	ldi	r24, 0x30	; 48
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    18e4:	a2 fe       	sbrs	r10, 2
    18e6:	17 c0       	rjmp	.+46     	; 0x1916 <vfprintf+0x372>
    18e8:	a1 fc       	sbrc	r10, 1
    18ea:	03 c0       	rjmp	.+6      	; 0x18f2 <vfprintf+0x34e>
    18ec:	88 e7       	ldi	r24, 0x78	; 120
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0x352>
    18f2:	88 e5       	ldi	r24, 0x58	; 88
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	b6 01       	movw	r22, r12
    18f8:	0c c0       	rjmp	.+24     	; 0x1912 <vfprintf+0x36e>
    18fa:	8a 2d       	mov	r24, r10
    18fc:	86 78       	andi	r24, 0x86	; 134
    18fe:	59 f0       	breq	.+22     	; 0x1916 <vfprintf+0x372>
    1900:	a1 fe       	sbrs	r10, 1
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <vfprintf+0x364>
    1904:	8b e2       	ldi	r24, 0x2B	; 43
    1906:	01 c0       	rjmp	.+2      	; 0x190a <vfprintf+0x366>
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	a7 fc       	sbrc	r10, 7
    190c:	8d e2       	ldi	r24, 0x2D	; 45
    190e:	b6 01       	movw	r22, r12
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    1916:	89 14       	cp	r8, r9
    1918:	38 f4       	brcc	.+14     	; 0x1928 <vfprintf+0x384>
    191a:	b6 01       	movw	r22, r12
    191c:	80 e3       	ldi	r24, 0x30	; 48
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    1924:	9a 94       	dec	r9
    1926:	f7 cf       	rjmp	.-18     	; 0x1916 <vfprintf+0x372>
    1928:	8a 94       	dec	r8
    192a:	f3 01       	movw	r30, r6
    192c:	e8 0d       	add	r30, r8
    192e:	f1 1d       	adc	r31, r1
    1930:	80 81       	ld	r24, Z
    1932:	b6 01       	movw	r22, r12
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    193a:	81 10       	cpse	r8, r1
    193c:	f5 cf       	rjmp	.-22     	; 0x1928 <vfprintf+0x384>
    193e:	22 20       	and	r2, r2
    1940:	09 f4       	brne	.+2      	; 0x1944 <vfprintf+0x3a0>
    1942:	42 ce       	rjmp	.-892    	; 0x15c8 <vfprintf+0x24>
    1944:	b6 01       	movw	r22, r12
    1946:	80 e2       	ldi	r24, 0x20	; 32
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    194e:	2a 94       	dec	r2
    1950:	f6 cf       	rjmp	.-20     	; 0x193e <vfprintf+0x39a>
    1952:	f6 01       	movw	r30, r12
    1954:	86 81       	ldd	r24, Z+6	; 0x06
    1956:	97 81       	ldd	r25, Z+7	; 0x07
    1958:	02 c0       	rjmp	.+4      	; 0x195e <vfprintf+0x3ba>
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	9f ef       	ldi	r25, 0xFF	; 255
    195e:	2b 96       	adiw	r28, 0x0b	; 11
    1960:	e2 e1       	ldi	r30, 0x12	; 18
    1962:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__epilogue_restores__>

00001966 <calloc>:
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	86 9f       	mul	r24, r22
    1970:	80 01       	movw	r16, r0
    1972:	87 9f       	mul	r24, r23
    1974:	10 0d       	add	r17, r0
    1976:	96 9f       	mul	r25, r22
    1978:	10 0d       	add	r17, r0
    197a:	11 24       	eor	r1, r1
    197c:	c8 01       	movw	r24, r16
    197e:	0e 94 ed 08 	call	0x11da	; 0x11da <malloc>
    1982:	ec 01       	movw	r28, r24
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	29 f0       	breq	.+10     	; 0x1992 <calloc+0x2c>
    1988:	a8 01       	movw	r20, r16
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <memset>
    1992:	ce 01       	movw	r24, r28
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	08 95       	ret

0000199e <strnlen_P>:
    199e:	fc 01       	movw	r30, r24
    19a0:	05 90       	lpm	r0, Z+
    19a2:	61 50       	subi	r22, 0x01	; 1
    19a4:	70 40       	sbci	r23, 0x00	; 0
    19a6:	01 10       	cpse	r0, r1
    19a8:	d8 f7       	brcc	.-10     	; 0x19a0 <strnlen_P+0x2>
    19aa:	80 95       	com	r24
    19ac:	90 95       	com	r25
    19ae:	8e 0f       	add	r24, r30
    19b0:	9f 1f       	adc	r25, r31
    19b2:	08 95       	ret

000019b4 <memset>:
    19b4:	dc 01       	movw	r26, r24
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <memset+0x6>
    19b8:	6d 93       	st	X+, r22
    19ba:	41 50       	subi	r20, 0x01	; 1
    19bc:	50 40       	sbci	r21, 0x00	; 0
    19be:	e0 f7       	brcc	.-8      	; 0x19b8 <memset+0x4>
    19c0:	08 95       	ret

000019c2 <strnlen>:
    19c2:	fc 01       	movw	r30, r24
    19c4:	61 50       	subi	r22, 0x01	; 1
    19c6:	70 40       	sbci	r23, 0x00	; 0
    19c8:	01 90       	ld	r0, Z+
    19ca:	01 10       	cpse	r0, r1
    19cc:	d8 f7       	brcc	.-10     	; 0x19c4 <strnlen+0x2>
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	8e 0f       	add	r24, r30
    19d4:	9f 1f       	adc	r25, r31
    19d6:	08 95       	ret

000019d8 <fputc>:
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	fb 01       	movw	r30, r22
    19e2:	23 81       	ldd	r18, Z+3	; 0x03
    19e4:	21 fd       	sbrc	r18, 1
    19e6:	03 c0       	rjmp	.+6      	; 0x19ee <fputc+0x16>
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	9f ef       	ldi	r25, 0xFF	; 255
    19ec:	2c c0       	rjmp	.+88     	; 0x1a46 <fputc+0x6e>
    19ee:	22 ff       	sbrs	r18, 2
    19f0:	16 c0       	rjmp	.+44     	; 0x1a1e <fputc+0x46>
    19f2:	46 81       	ldd	r20, Z+6	; 0x06
    19f4:	57 81       	ldd	r21, Z+7	; 0x07
    19f6:	24 81       	ldd	r18, Z+4	; 0x04
    19f8:	35 81       	ldd	r19, Z+5	; 0x05
    19fa:	42 17       	cp	r20, r18
    19fc:	53 07       	cpc	r21, r19
    19fe:	44 f4       	brge	.+16     	; 0x1a10 <fputc+0x38>
    1a00:	a0 81       	ld	r26, Z
    1a02:	b1 81       	ldd	r27, Z+1	; 0x01
    1a04:	9d 01       	movw	r18, r26
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	31 83       	std	Z+1, r19	; 0x01
    1a0c:	20 83       	st	Z, r18
    1a0e:	8c 93       	st	X, r24
    1a10:	26 81       	ldd	r18, Z+6	; 0x06
    1a12:	37 81       	ldd	r19, Z+7	; 0x07
    1a14:	2f 5f       	subi	r18, 0xFF	; 255
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	37 83       	std	Z+7, r19	; 0x07
    1a1a:	26 83       	std	Z+6, r18	; 0x06
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <fputc+0x6e>
    1a1e:	8b 01       	movw	r16, r22
    1a20:	ec 01       	movw	r28, r24
    1a22:	fb 01       	movw	r30, r22
    1a24:	00 84       	ldd	r0, Z+8	; 0x08
    1a26:	f1 85       	ldd	r31, Z+9	; 0x09
    1a28:	e0 2d       	mov	r30, r0
    1a2a:	09 95       	icall
    1a2c:	89 2b       	or	r24, r25
    1a2e:	e1 f6       	brne	.-72     	; 0x19e8 <fputc+0x10>
    1a30:	d8 01       	movw	r26, r16
    1a32:	16 96       	adiw	r26, 0x06	; 6
    1a34:	8d 91       	ld	r24, X+
    1a36:	9c 91       	ld	r25, X
    1a38:	17 97       	sbiw	r26, 0x07	; 7
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	17 96       	adiw	r26, 0x07	; 7
    1a3e:	9c 93       	st	X, r25
    1a40:	8e 93       	st	-X, r24
    1a42:	16 97       	sbiw	r26, 0x06	; 6
    1a44:	ce 01       	movw	r24, r28
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	08 95       	ret

00001a50 <__ultoa_invert>:
    1a50:	fa 01       	movw	r30, r20
    1a52:	aa 27       	eor	r26, r26
    1a54:	28 30       	cpi	r18, 0x08	; 8
    1a56:	51 f1       	breq	.+84     	; 0x1aac <__ultoa_invert+0x5c>
    1a58:	20 31       	cpi	r18, 0x10	; 16
    1a5a:	81 f1       	breq	.+96     	; 0x1abc <__ultoa_invert+0x6c>
    1a5c:	e8 94       	clt
    1a5e:	6f 93       	push	r22
    1a60:	6e 7f       	andi	r22, 0xFE	; 254
    1a62:	6e 5f       	subi	r22, 0xFE	; 254
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	af 4f       	sbci	r26, 0xFF	; 255
    1a6c:	b1 e0       	ldi	r27, 0x01	; 1
    1a6e:	3e d0       	rcall	.+124    	; 0x1aec <__ultoa_invert+0x9c>
    1a70:	b4 e0       	ldi	r27, 0x04	; 4
    1a72:	3c d0       	rcall	.+120    	; 0x1aec <__ultoa_invert+0x9c>
    1a74:	67 0f       	add	r22, r23
    1a76:	78 1f       	adc	r23, r24
    1a78:	89 1f       	adc	r24, r25
    1a7a:	9a 1f       	adc	r25, r26
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	68 0f       	add	r22, r24
    1a80:	79 1f       	adc	r23, r25
    1a82:	8a 1f       	adc	r24, r26
    1a84:	91 1d       	adc	r25, r1
    1a86:	a1 1d       	adc	r26, r1
    1a88:	6a 0f       	add	r22, r26
    1a8a:	71 1d       	adc	r23, r1
    1a8c:	81 1d       	adc	r24, r1
    1a8e:	91 1d       	adc	r25, r1
    1a90:	a1 1d       	adc	r26, r1
    1a92:	20 d0       	rcall	.+64     	; 0x1ad4 <__ultoa_invert+0x84>
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <__ultoa_invert+0x48>
    1a96:	68 94       	set
    1a98:	3f 91       	pop	r19
    1a9a:	2a e0       	ldi	r18, 0x0A	; 10
    1a9c:	26 9f       	mul	r18, r22
    1a9e:	11 24       	eor	r1, r1
    1aa0:	30 19       	sub	r19, r0
    1aa2:	30 5d       	subi	r19, 0xD0	; 208
    1aa4:	31 93       	st	Z+, r19
    1aa6:	de f6       	brtc	.-74     	; 0x1a5e <__ultoa_invert+0xe>
    1aa8:	cf 01       	movw	r24, r30
    1aaa:	08 95       	ret
    1aac:	46 2f       	mov	r20, r22
    1aae:	47 70       	andi	r20, 0x07	; 7
    1ab0:	40 5d       	subi	r20, 0xD0	; 208
    1ab2:	41 93       	st	Z+, r20
    1ab4:	b3 e0       	ldi	r27, 0x03	; 3
    1ab6:	0f d0       	rcall	.+30     	; 0x1ad6 <__ultoa_invert+0x86>
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <__ultoa_invert+0x5c>
    1aba:	f6 cf       	rjmp	.-20     	; 0x1aa8 <__ultoa_invert+0x58>
    1abc:	46 2f       	mov	r20, r22
    1abe:	4f 70       	andi	r20, 0x0F	; 15
    1ac0:	40 5d       	subi	r20, 0xD0	; 208
    1ac2:	4a 33       	cpi	r20, 0x3A	; 58
    1ac4:	18 f0       	brcs	.+6      	; 0x1acc <__ultoa_invert+0x7c>
    1ac6:	49 5d       	subi	r20, 0xD9	; 217
    1ac8:	31 fd       	sbrc	r19, 1
    1aca:	40 52       	subi	r20, 0x20	; 32
    1acc:	41 93       	st	Z+, r20
    1ace:	02 d0       	rcall	.+4      	; 0x1ad4 <__ultoa_invert+0x84>
    1ad0:	a9 f7       	brne	.-22     	; 0x1abc <__ultoa_invert+0x6c>
    1ad2:	ea cf       	rjmp	.-44     	; 0x1aa8 <__ultoa_invert+0x58>
    1ad4:	b4 e0       	ldi	r27, 0x04	; 4
    1ad6:	a6 95       	lsr	r26
    1ad8:	97 95       	ror	r25
    1ada:	87 95       	ror	r24
    1adc:	77 95       	ror	r23
    1ade:	67 95       	ror	r22
    1ae0:	ba 95       	dec	r27
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <__ultoa_invert+0x86>
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 05       	cpc	r22, r1
    1ae8:	71 05       	cpc	r23, r1
    1aea:	08 95       	ret
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
    1af0:	0a 2e       	mov	r0, r26
    1af2:	06 94       	lsr	r0
    1af4:	57 95       	ror	r21
    1af6:	47 95       	ror	r20
    1af8:	37 95       	ror	r19
    1afa:	27 95       	ror	r18
    1afc:	ba 95       	dec	r27
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__ultoa_invert+0xa2>
    1b00:	62 0f       	add	r22, r18
    1b02:	73 1f       	adc	r23, r19
    1b04:	84 1f       	adc	r24, r20
    1b06:	95 1f       	adc	r25, r21
    1b08:	a0 1d       	adc	r26, r0
    1b0a:	08 95       	ret

00001b0c <__divmodsi4>:
    1b0c:	05 2e       	mov	r0, r21
    1b0e:	97 fb       	bst	r25, 7
    1b10:	1e f4       	brtc	.+6      	; 0x1b18 <__divmodsi4+0xc>
    1b12:	00 94       	com	r0
    1b14:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__negsi2>
    1b18:	57 fd       	sbrc	r21, 7
    1b1a:	07 d0       	rcall	.+14     	; 0x1b2a <__divmodsi4_neg2>
    1b1c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__udivmodsi4>
    1b20:	07 fc       	sbrc	r0, 7
    1b22:	03 d0       	rcall	.+6      	; 0x1b2a <__divmodsi4_neg2>
    1b24:	4e f4       	brtc	.+18     	; 0x1b38 <__divmodsi4_exit>
    1b26:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__negsi2>

00001b2a <__divmodsi4_neg2>:
    1b2a:	50 95       	com	r21
    1b2c:	40 95       	com	r20
    1b2e:	30 95       	com	r19
    1b30:	21 95       	neg	r18
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	4f 4f       	sbci	r20, 0xFF	; 255
    1b36:	5f 4f       	sbci	r21, 0xFF	; 255

00001b38 <__divmodsi4_exit>:
    1b38:	08 95       	ret

00001b3a <__negsi2>:
    1b3a:	90 95       	com	r25
    1b3c:	80 95       	com	r24
    1b3e:	70 95       	com	r23
    1b40:	61 95       	neg	r22
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	8f 4f       	sbci	r24, 0xFF	; 255
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	08 95       	ret

00001b4a <__muluhisi3>:
    1b4a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__umulhisi3>
    1b4e:	a5 9f       	mul	r26, r21
    1b50:	90 0d       	add	r25, r0
    1b52:	b4 9f       	mul	r27, r20
    1b54:	90 0d       	add	r25, r0
    1b56:	a4 9f       	mul	r26, r20
    1b58:	80 0d       	add	r24, r0
    1b5a:	91 1d       	adc	r25, r1
    1b5c:	11 24       	eor	r1, r1
    1b5e:	08 95       	ret

00001b60 <__mulshisi3>:
    1b60:	b7 ff       	sbrs	r27, 7
    1b62:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__muluhisi3>

00001b66 <__mulohisi3>:
    1b66:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__muluhisi3>
    1b6a:	82 1b       	sub	r24, r18
    1b6c:	93 0b       	sbc	r25, r19
    1b6e:	08 95       	ret

00001b70 <__prologue_saves__>:
    1b70:	2f 92       	push	r2
    1b72:	3f 92       	push	r3
    1b74:	4f 92       	push	r4
    1b76:	5f 92       	push	r5
    1b78:	6f 92       	push	r6
    1b7a:	7f 92       	push	r7
    1b7c:	8f 92       	push	r8
    1b7e:	9f 92       	push	r9
    1b80:	af 92       	push	r10
    1b82:	bf 92       	push	r11
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	ca 1b       	sub	r28, r26
    1b9a:	db 0b       	sbc	r29, r27
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	09 94       	ijmp

00001ba8 <__epilogue_restores__>:
    1ba8:	2a 88       	ldd	r2, Y+18	; 0x12
    1baa:	39 88       	ldd	r3, Y+17	; 0x11
    1bac:	48 88       	ldd	r4, Y+16	; 0x10
    1bae:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bba:	b9 84       	ldd	r11, Y+9	; 0x09
    1bbc:	c8 84       	ldd	r12, Y+8	; 0x08
    1bbe:	df 80       	ldd	r13, Y+7	; 0x07
    1bc0:	ee 80       	ldd	r14, Y+6	; 0x06
    1bc2:	fd 80       	ldd	r15, Y+5	; 0x05
    1bc4:	0c 81       	ldd	r16, Y+4	; 0x04
    1bc6:	1b 81       	ldd	r17, Y+3	; 0x03
    1bc8:	aa 81       	ldd	r26, Y+2	; 0x02
    1bca:	b9 81       	ldd	r27, Y+1	; 0x01
    1bcc:	ce 0f       	add	r28, r30
    1bce:	d1 1d       	adc	r29, r1
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	ed 01       	movw	r28, r26
    1bdc:	08 95       	ret

00001bde <__udivmodsi4>:
    1bde:	a1 e2       	ldi	r26, 0x21	; 33
    1be0:	1a 2e       	mov	r1, r26
    1be2:	aa 1b       	sub	r26, r26
    1be4:	bb 1b       	sub	r27, r27
    1be6:	fd 01       	movw	r30, r26
    1be8:	0d c0       	rjmp	.+26     	; 0x1c04 <__udivmodsi4_ep>

00001bea <__udivmodsi4_loop>:
    1bea:	aa 1f       	adc	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	ee 1f       	adc	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	a2 17       	cp	r26, r18
    1bf4:	b3 07       	cpc	r27, r19
    1bf6:	e4 07       	cpc	r30, r20
    1bf8:	f5 07       	cpc	r31, r21
    1bfa:	20 f0       	brcs	.+8      	; 0x1c04 <__udivmodsi4_ep>
    1bfc:	a2 1b       	sub	r26, r18
    1bfe:	b3 0b       	sbc	r27, r19
    1c00:	e4 0b       	sbc	r30, r20
    1c02:	f5 0b       	sbc	r31, r21

00001c04 <__udivmodsi4_ep>:
    1c04:	66 1f       	adc	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	88 1f       	adc	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	1a 94       	dec	r1
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <__udivmodsi4_loop>
    1c10:	60 95       	com	r22
    1c12:	70 95       	com	r23
    1c14:	80 95       	com	r24
    1c16:	90 95       	com	r25
    1c18:	9b 01       	movw	r18, r22
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	bd 01       	movw	r22, r26
    1c1e:	cf 01       	movw	r24, r30
    1c20:	08 95       	ret

00001c22 <__umulhisi3>:
    1c22:	a2 9f       	mul	r26, r18
    1c24:	b0 01       	movw	r22, r0
    1c26:	b3 9f       	mul	r27, r19
    1c28:	c0 01       	movw	r24, r0
    1c2a:	a3 9f       	mul	r26, r19
    1c2c:	70 0d       	add	r23, r0
    1c2e:	81 1d       	adc	r24, r1
    1c30:	11 24       	eor	r1, r1
    1c32:	91 1d       	adc	r25, r1
    1c34:	b2 9f       	mul	r27, r18
    1c36:	70 0d       	add	r23, r0
    1c38:	81 1d       	adc	r24, r1
    1c3a:	11 24       	eor	r1, r1
    1c3c:	91 1d       	adc	r25, r1
    1c3e:	08 95       	ret

00001c40 <_exit>:
    1c40:	f8 94       	cli

00001c42 <__stop_program>:
    1c42:	ff cf       	rjmp	.-2      	; 0x1c42 <__stop_program>
