
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001c44  00001cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008001f0  008001f0  00001dc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003119  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001557  00000000  00000000  00005249  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000154d  00000000  00000000  000067a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00007cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000967  00000000  00000000  000082c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001260  00000000  00000000  00008c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00009e87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <oled_print+0x46>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	11 e0       	ldi	r17, 0x01	; 1
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e4 e4       	ldi	r30, 0x44	; 68
     3aa:	fc e1       	ldi	r31, 0x1C	; 28
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a0 3f       	cpi	r26, 0xF0	; 240
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	a0 ef       	ldi	r26, 0xF0	; 240
     3bc:	b1 e0       	ldi	r27, 0x01	; 1
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	aa 30       	cpi	r26, 0x0A	; 10
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
     3cc:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x11f6>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x11f6>
     3e6:	08 95       	ret

000003e8 <main>:
#include "music.h"

int main(void)
//p.23 for can read instructions
{
	setupInit();
     3e8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <setupInit>
	
	//test_SRAM();
	
	CAN_controller_write(0x31, 5);
     3ec:	65 e0       	ldi	r22, 0x05	; 5
     3ee:	81 e3       	ldi	r24, 0x31	; 49
     3f0:	0e 94 65 02 	call	0x4ca	; 0x4ca <CAN_controller_write>
	SPI_setChipSelect(PB4, 0);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
	SPI_masterWrite(MCP_RTS_TX0);
     3fc:	81 e8       	ldi	r24, 0x81	; 129
     3fe:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>

	uint8_t i = CAN_controller_read(0x61);
     40a:	81 e6       	ldi	r24, 0x61	; 97
     40c:	0e 94 4c 02 	call	0x498	; 0x498 <CAN_controller_read>
	
	printf("This is my integer: %i",i);
     410:	1f 92       	push	r1
     412:	8f 93       	push	r24
     414:	86 e0       	ldi	r24, 0x06	; 6
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 ef 0a 	call	0x15de	; 0x15de <printf>

	printf("Starting program\n\n\n\n\n\n\n\n\n\n");
     420:	8d e1       	ldi	r24, 0x1D	; 29
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 05 0b 	call	0x160a	; 0x160a <puts>
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
		CAN_controller_RTS(0);
		_delay_ms(500);

		uint8_t i = CAN_controller_read(0x61);  //0x61 is rx buffer 0
	
		printf("This is my integer: %i",i);
     430:	c6 e0       	ldi	r28, 0x06	; 6
     432:	d1 e0       	ldi	r29, 0x01	; 1
	//pwm_init();
	//music_playLisaGikk();                 
	while (1) {
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     434:	0e 94 1f 03 	call	0x63e	; 0x63e <sleep_now>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     438:	2f ef       	ldi	r18, 0xFF	; 255
     43a:	8f e7       	ldi	r24, 0x7F	; 127
     43c:	97 e0       	ldi	r25, 0x07	; 7
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	80 40       	sbci	r24, 0x00	; 0
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     448:	00 00       	nop
		}
		
		//test_resetMenu();
		//test_outputControllers(joystick_pos, slider_pos, buttons);		
		_delay_ms(500);	
		CAN_controller_write(0x31,5); //0x31 is TX buffer 0
     44a:	65 e0       	ldi	r22, 0x05	; 5
     44c:	81 e3       	ldi	r24, 0x31	; 49
     44e:	0e 94 65 02 	call	0x4ca	; 0x4ca <CAN_controller_write>
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	8f e7       	ldi	r24, 0x7F	; 127
     456:	97 e0       	ldi	r25, 0x07	; 7
     458:	21 50       	subi	r18, 0x01	; 1
     45a:	80 40       	sbci	r24, 0x00	; 0
     45c:	90 40       	sbci	r25, 0x00	; 0
     45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     462:	00 00       	nop
		_delay_ms(500);

		CAN_controller_RTS(0);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 01 03 	call	0x602	; 0x602 <CAN_controller_RTS>
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	8f e7       	ldi	r24, 0x7F	; 127
     46e:	97 e0       	ldi	r25, 0x07	; 7
     470:	21 50       	subi	r18, 0x01	; 1
     472:	80 40       	sbci	r24, 0x00	; 0
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     478:	00 c0       	rjmp	.+0      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     47a:	00 00       	nop
		_delay_ms(500);

		uint8_t i = CAN_controller_read(0x61);  //0x61 is rx buffer 0
     47c:	81 e6       	ldi	r24, 0x61	; 97
     47e:	0e 94 4c 02 	call	0x498	; 0x498 <CAN_controller_read>
	
		printf("This is my integer: %i",i);
     482:	1f 92       	push	r1
     484:	8f 93       	push	r24
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	0e 94 ef 0a 	call	0x15de	; 0x15de <printf>
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	ce cf       	rjmp	.-100    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>

00000498 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     498:	cf 93       	push	r28
     49a:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
	SPI_masterWrite(addr);
     4aa:	8c 2f       	mov	r24, r28
     4ac:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
	SPI_masterWrite(0);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     4b6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_masterRead>
     4ba:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	84 e0       	ldi	r24, 0x04	; 4
     4c0:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
	
	return data;
}
     4c4:	8c 2f       	mov	r24, r28
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	d8 2f       	mov	r29, r24
     4d0:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
	SPI_masterWrite(addr);
     4e0:	8d 2f       	mov	r24, r29
     4e2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
	SPI_masterWrite(data);
     4e6:	8c 2f       	mov	r24, r28
     4e8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	84 e0       	ldi	r24, 0x04	; 4
     4f0:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
	
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	d8 2f       	mov	r29, r24
     502:	16 2f       	mov	r17, r22
     504:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     50e:	85 e0       	ldi	r24, 0x05	; 5
     510:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
		SPI_masterWrite(addr);
     514:	81 2f       	mov	r24, r17
     516:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
		SPI_masterWrite(mask);
     51a:	8d 2f       	mov	r24, r29
     51c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
		SPI_masterWrite(data);
     520:	8c 2f       	mov	r24, r28
     522:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>

}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	08 95       	ret

00000536 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	84 e0       	ldi	r24, 0x04	; 4
     53a:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
	printf("Before spi write");
     53e:	87 e3       	ldi	r24, 0x37	; 55
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	9f 93       	push	r25
     544:	8f 93       	push	r24
     546:	0e 94 ef 0a 	call	0x15de	; 0x15de <printf>
	SPI_masterWrite(MCP_RESET);
     54a:	80 ec       	ldi	r24, 0xC0	; 192
     54c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
}
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	08 95       	ret

0000055e <CAN_controller_init>:
void CAN_controller_init() {
	
	
	SPI_masterInit();
     55e:	0e 94 e5 05 	call	0xbca	; 0xbca <SPI_masterInit>
	
	//reset with spi command
	CAN_controller_reset();
     562:	0e 94 9b 02 	call	0x536	; 0x536 <CAN_controller_reset>
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	9f e5       	ldi	r25, 0x5F	; 95
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <CAN_controller_init+0xc>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <CAN_controller_init+0x12>
     570:	00 00       	nop
	//printf("After spi write\n");
	_delay_ms(20);
	
	//Check CANSTAT register
	
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     572:	8e e0       	ldi	r24, 0x0E	; 14
     574:	0e 94 4c 02 	call	0x498	; 0x498 <CAN_controller_read>
     578:	ef ef       	ldi	r30, 0xFF	; 255
     57a:	ff e5       	ldi	r31, 0x5F	; 95
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <CAN_controller_init+0x1e>
     580:	00 c0       	rjmp	.+0      	; 0x582 <CAN_controller_init+0x24>
     582:	00 00       	nop
	_delay_ms(20);
	
	//uint8_t data = 0x44;
	uint8_t mode_bits = (status & MODE_MASK);
     584:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     586:	80 38       	cpi	r24, 0x80	; 128
     588:	61 f0       	breq	.+24     	; 0x5a2 <CAN_controller_init+0x44>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     58a:	1f 92       	push	r1
     58c:	8f 93       	push	r24
     58e:	88 e4       	ldi	r24, 0x48	; 72
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	0e 94 ef 0a 	call	0x15de	; 0x15de <printf>
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11100000, MCP_CANCTRL, MODE_LOOPBACK);
     5a2:	40 e4       	ldi	r20, 0x40	; 64
     5a4:	6f e0       	ldi	r22, 0x0F	; 15
     5a6:	80 ee       	ldi	r24, 0xE0	; 224
     5a8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     5ac:	40 e6       	ldi	r20, 0x60	; 96
     5ae:	60 e6       	ldi	r22, 0x60	; 96
     5b0:	80 e6       	ldi	r24, 0x60	; 96
     5b2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <CAN_controller_bitModify>
	CAN_controller_bitModify(0b1, MCP_CANINTE, 0b1);
     5b6:	41 e0       	ldi	r20, 0x01	; 1
     5b8:	6b e2       	ldi	r22, 0x2B	; 43
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <CAN_controller_bitModify>
     5c0:	ff ef       	ldi	r31, 0xFF	; 255
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	f1 50       	subi	r31, 0x01	; 1
     5c8:	20 40       	sbci	r18, 0x00	; 0
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <CAN_controller_init+0x68>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <CAN_controller_init+0x72>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <CAN_controller_init+0x74>
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     5d2:	83 e6       	ldi	r24, 0x63	; 99
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	0e 94 ef 0a 	call	0x15de	; 0x15de <printf>
	
	//Check CANSTAT register
	status = CAN_controller_read(MCP_CANSTAT);
     5de:	8e e0       	ldi	r24, 0x0E	; 14
     5e0:	0e 94 4c 02 	call	0x498	; 0x498 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     5e4:	1f 92       	push	r1
     5e6:	8f 93       	push	r24
     5e8:	8c e7       	ldi	r24, 0x7C	; 124
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	0e 94 ef 0a 	call	0x15de	; 0x15de <printf>

}
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	08 95       	ret

00000602 <CAN_controller_RTS>:

void CAN_controller_RTS(uint8_t buffer) {
     602:	cf 93       	push	r28
     604:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
	switch (buffer) {
     60e:	c1 30       	cpi	r28, 0x01	; 1
     610:	41 f0       	breq	.+16     	; 0x622 <CAN_controller_RTS+0x20>
     612:	18 f0       	brcs	.+6      	; 0x61a <CAN_controller_RTS+0x18>
     614:	c2 30       	cpi	r28, 0x02	; 2
     616:	49 f0       	breq	.+18     	; 0x62a <CAN_controller_RTS+0x28>
     618:	0b c0       	rjmp	.+22     	; 0x630 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     61a:	81 e8       	ldi	r24, 0x81	; 129
     61c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
			break;
     620:	07 c0       	rjmp	.+14     	; 0x630 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     622:	82 e8       	ldi	r24, 0x82	; 130
     624:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
			break;
     628:	03 c0       	rjmp	.+6      	; 0x630 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     62a:	84 e8       	ldi	r24, 0x84	; 132
     62c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_setChipSelect>
}
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <sleep_init>:

#include "sleep.h"
#include <avr/sleep.h>
#include <avr/interrupt.h>

void sleep_init() {
     63c:	08 95       	ret

0000063e <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     63e:	88 b1       	in	r24, 0x08	; 8
     640:	88 68       	ori	r24, 0x88	; 136
     642:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     644:	85 b7       	in	r24, 0x35	; 53
     646:	80 62       	ori	r24, 0x20	; 32
     648:	85 bf       	out	0x35, r24	; 53
     64a:	88 95       	sleep
     64c:	85 b7       	in	r24, 0x35	; 53
     64e:	8f 7d       	andi	r24, 0xDF	; 223
     650:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     652:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     654:	85 b7       	in	r24, 0x35	; 53
     656:	8f 7d       	andi	r24, 0xDF	; 223
     658:	85 bf       	out	0x35, r24	; 53
     65a:	08 95       	ret

0000065c <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     662:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     66c:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <joystickOffsetY>
     670:	08 95       	ret

00000672 <joystick_readPosition>:
}
void joystick_readPosition() {
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     684:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     68c:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     68e:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <joystickOffsetX>
     692:	c6 17       	cp	r28, r22
     694:	80 f4       	brcc	.+32     	; 0x6b6 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	2c 2f       	mov	r18, r28
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	26 1b       	sub	r18, r22
     69e:	37 0b       	sbc	r19, r23
     6a0:	44 e6       	ldi	r20, 0x64	; 100
     6a2:	42 9f       	mul	r20, r18
     6a4:	c0 01       	movw	r24, r0
     6a6:	43 9f       	mul	r20, r19
     6a8:	90 0d       	add	r25, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divmodhi4>
     6b0:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <__data_end>
     6b4:	14 c0       	rjmp	.+40     	; 0x6de <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     6b6:	46 2f       	mov	r20, r22
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	2c 2f       	mov	r18, r28
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	24 1b       	sub	r18, r20
     6c0:	35 0b       	sbc	r19, r21
     6c2:	64 e6       	ldi	r22, 0x64	; 100
     6c4:	62 9f       	mul	r22, r18
     6c6:	c0 01       	movw	r24, r0
     6c8:	63 9f       	mul	r22, r19
     6ca:	90 0d       	add	r25, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	6f ef       	ldi	r22, 0xFF	; 255
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	64 1b       	sub	r22, r20
     6d4:	75 0b       	sbc	r23, r21
     6d6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divmodhi4>
     6da:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     6de:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <joystickOffsetY>
     6e2:	e2 17       	cp	r30, r18
     6e4:	88 f4       	brcc	.+34     	; 0x708 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     6e6:	62 2f       	mov	r22, r18
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	4e 2f       	mov	r20, r30
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	46 1b       	sub	r20, r22
     6f0:	57 0b       	sbc	r21, r23
     6f2:	24 e6       	ldi	r18, 0x64	; 100
     6f4:	24 9f       	mul	r18, r20
     6f6:	c0 01       	movw	r24, r0
     6f8:	25 9f       	mul	r18, r21
     6fa:	90 0d       	add	r25, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divmodhi4>
     702:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <__data_end+0x1>
     706:	13 c0       	rjmp	.+38     	; 0x72e <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	4e 2f       	mov	r20, r30
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	42 1b       	sub	r20, r18
     710:	53 0b       	sbc	r21, r19
     712:	64 e6       	ldi	r22, 0x64	; 100
     714:	64 9f       	mul	r22, r20
     716:	c0 01       	movw	r24, r0
     718:	65 9f       	mul	r22, r21
     71a:	90 0d       	add	r25, r0
     71c:	11 24       	eor	r1, r1
     71e:	6f ef       	ldi	r22, 0xFF	; 255
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	62 1b       	sub	r22, r18
     724:	73 0b       	sbc	r23, r19
     726:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divmodhi4>
     72a:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     72e:	c0 ef       	ldi	r28, 0xF0	; 240
     730:	d1 e0       	ldi	r29, 0x01	; 1
     732:	68 81       	ld	r22, Y
     734:	06 2e       	mov	r0, r22
     736:	00 0c       	add	r0, r0
     738:	77 0b       	sbc	r23, r23
     73a:	88 0b       	sbc	r24, r24
     73c:	99 0b       	sbc	r25, r25
     73e:	0e 94 bb 07 	call	0xf76	; 0xf76 <__floatsisf>
     742:	6b 01       	movw	r12, r22
     744:	7c 01       	movw	r14, r24
     746:	69 81       	ldd	r22, Y+1	; 0x01
     748:	06 2e       	mov	r0, r22
     74a:	00 0c       	add	r0, r0
     74c:	77 0b       	sbc	r23, r23
     74e:	88 0b       	sbc	r24, r24
     750:	99 0b       	sbc	r25, r25
     752:	0e 94 bb 07 	call	0xf76	; 0xf76 <__floatsisf>
     756:	a7 01       	movw	r20, r14
     758:	96 01       	movw	r18, r12
     75a:	0e 94 b2 06 	call	0xd64	; 0xd64 <atan2>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	44 eb       	ldi	r20, 0xB4	; 180
     764:	53 e4       	ldi	r21, 0x43	; 67
     766:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	5f e3       	ldi	r21, 0x3F	; 63
     772:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     776:	23 ec       	ldi	r18, 0xC3	; 195
     778:	35 ef       	ldi	r19, 0xF5	; 245
     77a:	48 e4       	ldi	r20, 0x48	; 72
     77c:	50 e4       	ldi	r21, 0x40	; 64
     77e:	0e 94 11 07 	call	0xe22	; 0xe22 <__divsf3>
     782:	0e 94 83 07 	call	0xf06	; 0xf06 <__fixsfsi>
     786:	7b 83       	std	Y+3, r23	; 0x03
     788:	6a 83       	std	Y+2, r22	; 0x02
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	08 95       	ret

00000798 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     798:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     79a:	80 81       	ld	r24, Z
     79c:	94 e0       	ldi	r25, 0x04	; 4
     79e:	98 0f       	add	r25, r24
     7a0:	99 30       	cpi	r25, 0x09	; 9
     7a2:	20 f4       	brcc	.+8      	; 0x7ac <joystick_getDirection+0x14>
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	9c 5f       	subi	r25, 0xFC	; 252
     7a8:	99 30       	cpi	r25, 0x09	; 9
     7aa:	90 f0       	brcs	.+36     	; 0x7d0 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     7ac:	85 30       	cpi	r24, 0x05	; 5
     7ae:	2c f0       	brlt	.+10     	; 0x7ba <joystick_getDirection+0x22>
     7b0:	81 81       	ldd	r24, Z+1	; 0x01
     7b2:	8f 5c       	subi	r24, 0xCF	; 207
     7b4:	83 36       	cpi	r24, 0x63	; 99
     7b6:	38 f4       	brcc	.+14     	; 0x7c6 <joystick_getDirection+0x2e>
     7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     7ba:	8c 3f       	cpi	r24, 0xFC	; 252
     7bc:	24 f4       	brge	.+8      	; 0x7c6 <joystick_getDirection+0x2e>
     7be:	81 81       	ldd	r24, Z+1	; 0x01
     7c0:	8f 5c       	subi	r24, 0xCF	; 207
     7c2:	83 36       	cpi	r24, 0x63	; 99
     7c4:	48 f0       	brcs	.+18     	; 0x7d8 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
     7c8:	8c 3f       	cpi	r24, 0xFC	; 252
     7ca:	44 f0       	brlt	.+16     	; 0x7dc <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     7dc:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     7de:	08 95       	ret

000007e0 <mainMenuInit>:
#include <avr/interrupt.h>



MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     7e0:	8f e1       	ldi	r24, 0x1F	; 31
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <malloc>
	ptr->numChildren = 0;
     7e8:	fc 01       	movw	r30, r24
     7ea:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     7ec:	2a e0       	ldi	r18, 0x0A	; 10
     7ee:	e7 e8       	ldi	r30, 0x87	; 135
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	dc 01       	movw	r26, r24
     7f4:	01 90       	ld	r0, Z+
     7f6:	0d 92       	st	X+, r0
     7f8:	2a 95       	dec	r18
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <mainMenuInit+0x14>
	ptr->parent = NULL;
     7fc:	fc 01       	movw	r30, r24
     7fe:	11 8a       	std	Z+17, r1	; 0x11
     800:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     802:	08 95       	ret

00000804 <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	7c 01       	movw	r14, r24
     814:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     816:	8f e1       	ldi	r24, 0x1F	; 31
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <malloc>
     81e:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     820:	d7 01       	movw	r26, r14
     822:	5e 96       	adiw	r26, 0x1e	; 30
     824:	ec 91       	ld	r30, X
     826:	5e 97       	sbiw	r26, 0x1e	; 30
     828:	c1 e0       	ldi	r28, 0x01	; 1
     82a:	ce 0f       	add	r28, r30
     82c:	5e 96       	adiw	r26, 0x1e	; 30
     82e:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     830:	b6 01       	movw	r22, r12
     832:	0e 94 9d 0a 	call	0x153a	; 0x153a <strcpy>
	childPtr->parent = parent;
     836:	f8 01       	movw	r30, r16
     838:	f1 8a       	std	Z+17, r15	; 0x11
     83a:	e0 8a       	std	Z+16, r14	; 0x10
	//printf("Added child: %s\n\r", childPtr->name);

	if (parent->numChildren > MAXCHILDREN) {
     83c:	c7 30       	cpi	r28, 0x07	; 7
     83e:	58 f0       	brcs	.+22     	; 0x856 <addChild+0x52>
		printf("REached max: \n\r");
     840:	81 e9       	ldi	r24, 0x91	; 145
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	0e 94 ef 0a 	call	0x15de	; 0x15de <printf>
		return NULL;
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e c0       	rjmp	.+28     	; 0x872 <addChild+0x6e>
	} 
	parent->children[parent->numChildren-1]=childPtr;
     856:	ec 2f       	mov	r30, r28
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	38 96       	adiw	r30, 0x08	; 8
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	ee 0d       	add	r30, r14
     862:	ff 1d       	adc	r31, r15
     864:	11 83       	std	Z+1, r17	; 0x01
     866:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     868:	d8 01       	movw	r26, r16
     86a:	5e 96       	adiw	r26, 0x1e	; 30
     86c:	1c 92       	st	X, r1
	return childPtr;
     86e:	80 2f       	mov	r24, r16
     870:	91 2f       	mov	r25, r17
}
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	08 95       	ret

00000882 <menuInit>:

MenuNode* menuInit(void)
{
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     88e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mainMenuInit>
     892:	8c 01       	movw	r16, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     894:	61 ea       	ldi	r22, 0xA1	; 161
     896:	71 e0       	ldi	r23, 0x01	; 1
     898:	0e 94 02 04 	call	0x804	; 0x804 <addChild>
     89c:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     89e:	6b ea       	ldi	r22, 0xAB	; 171
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	0e 94 02 04 	call	0x804	; 0x804 <addChild>
	addChild(childPlayGame,"GAME 2");
     8a6:	62 eb       	ldi	r22, 0xB2	; 178
     8a8:	71 e0       	ldi	r23, 0x01	; 1
     8aa:	ce 01       	movw	r24, r28
     8ac:	0e 94 02 04 	call	0x804	; 0x804 <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     8b0:	69 eb       	ldi	r22, 0xB9	; 185
     8b2:	71 e0       	ldi	r23, 0x01	; 1
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 02 04 	call	0x804	; 0x804 <addChild>
     8ba:	7c 01       	movw	r14, r24
     8bc:	c5 e0       	ldi	r28, 0x05	; 5
     8be:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     8c0:	63 ec       	ldi	r22, 0xC3	; 195
     8c2:	71 e0       	ldi	r23, 0x01	; 1
     8c4:	c7 01       	movw	r24, r14
     8c6:	0e 94 02 04 	call	0x804	; 0x804 <addChild>
     8ca:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     8cc:	c9 f7       	brne	.-14     	; 0x8c0 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	//MenuNode* childSettings = addChild(mainMenu,"Settings");
	
	MenuNode* childMusic = addChild(mainMenu,"Music");
     8ce:	6b ec       	ldi	r22, 0xCB	; 203
     8d0:	71 e0       	ldi	r23, 0x01	; 1
     8d2:	c8 01       	movw	r24, r16
     8d4:	0e 94 02 04 	call	0x804	; 0x804 <addChild>
	addChild(childMusic, "Rick");
     8d8:	61 ed       	ldi	r22, 0xD1	; 209
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	0e 94 02 04 	call	0x804	; 0x804 <addChild>
	
	
	//addChild(childSettings, "No sett");
	
	
	printf("Number of children: %i\n\r",mainMenu->numChildren);
     8e0:	f8 01       	movw	r30, r16
     8e2:	86 8d       	ldd	r24, Z+30	; 0x1e
     8e4:	1f 92       	push	r1
     8e6:	8f 93       	push	r24
     8e8:	86 ed       	ldi	r24, 0xD6	; 214
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	0e 94 ef 0a 	call	0x15de	; 0x15de <printf>
	/*
	MenuNode* childSettings = addChild(mainMenu,"Settings");
	addChild(childSettings, "No sett");
	printf("Number of children: %i\n\r",childSettings->numChildren);
	*/
	currentMenu.currentMenuItem = mainMenu;
     8f4:	e4 ef       	ldi	r30, 0xF4	; 244
     8f6:	f1 e0       	ldi	r31, 0x01	; 1
     8f8:	11 83       	std	Z+1, r17	; 0x01
     8fa:	00 83       	st	Z, r16
	currentMenu.childIndex = 0;
     8fc:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	83 83       	std	Z+3, r24	; 0x03
	
	return mainMenu;
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
}
     90a:	c8 01       	movw	r24, r16
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	08 95       	ret

0000091a <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     91a:	0e 94 cc 03 	call	0x798	; 0x798 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     91e:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <currentMenu+0x3>
     922:	94 30       	cpi	r25, 0x04	; 4
     924:	09 f0       	breq	.+2      	; 0x928 <navigateMenu+0xe>
     926:	58 c0       	rjmp	.+176    	; 0x9d8 <navigateMenu+0xbe>
			switch (dir) {
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	e1 f1       	breq	.+120    	; 0x9a4 <navigateMenu+0x8a>
     92c:	60 f1       	brcs	.+88     	; 0x986 <navigateMenu+0x6c>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	c9 f0       	breq	.+50     	; 0x964 <navigateMenu+0x4a>
     932:	83 30       	cpi	r24, 0x03	; 3
     934:	09 f0       	breq	.+2      	; 0x938 <navigateMenu+0x1e>
     936:	50 c0       	rjmp	.+160    	; 0x9d8 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     938:	e4 ef       	ldi	r30, 0xF4	; 244
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	92 81       	ldd	r25, Z+2	; 0x02
     93e:	49 2f       	mov	r20, r25
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	01 90       	ld	r0, Z+
     944:	f0 81       	ld	r31, Z
     946:	e0 2d       	mov	r30, r0
     948:	26 8d       	ldd	r18, Z+30	; 0x1e
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	21 50       	subi	r18, 0x01	; 1
     94e:	31 09       	sbc	r19, r1
     950:	42 17       	cp	r20, r18
     952:	53 07       	cpc	r21, r19
     954:	24 f4       	brge	.+8      	; 0x95e <navigateMenu+0x44>
					currentMenu.childIndex++;
     956:	9f 5f       	subi	r25, 0xFF	; 255
     958:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <currentMenu+0x2>
     95c:	3d c0       	rjmp	.+122    	; 0x9d8 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     95e:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <currentMenu+0x2>
     962:	3a c0       	rjmp	.+116    	; 0x9d8 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     964:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <currentMenu+0x2>
     968:	99 23       	and	r25, r25
     96a:	21 f0       	breq	.+8      	; 0x974 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     96c:	91 50       	subi	r25, 0x01	; 1
     96e:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <currentMenu+0x2>
     972:	32 c0       	rjmp	.+100    	; 0x9d8 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     974:	e4 ef       	ldi	r30, 0xF4	; 244
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	a0 81       	ld	r26, Z
     97a:	b1 81       	ldd	r27, Z+1	; 0x01
     97c:	5e 96       	adiw	r26, 0x1e	; 30
     97e:	9c 91       	ld	r25, X
     980:	91 50       	subi	r25, 0x01	; 1
     982:	92 83       	std	Z+2, r25	; 0x02
     984:	29 c0       	rjmp	.+82     	; 0x9d8 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     986:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <currentMenu>
     98a:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <currentMenu+0x1>
     98e:	20 89       	ldd	r18, Z+16	; 0x10
     990:	31 89       	ldd	r19, Z+17	; 0x11
     992:	21 15       	cp	r18, r1
     994:	31 05       	cpc	r19, r1
     996:	01 f1       	breq	.+64     	; 0x9d8 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     998:	e4 ef       	ldi	r30, 0xF4	; 244
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	31 83       	std	Z+1, r19	; 0x01
     99e:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     9a0:	12 82       	std	Z+2, r1	; 0x02
     9a2:	1a c0       	rjmp	.+52     	; 0x9d8 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     9a4:	a4 ef       	ldi	r26, 0xF4	; 244
     9a6:	b1 e0       	ldi	r27, 0x01	; 1
     9a8:	2d 91       	ld	r18, X+
     9aa:	3c 91       	ld	r19, X
     9ac:	11 97       	sbiw	r26, 0x01	; 1
     9ae:	12 96       	adiw	r26, 0x02	; 2
     9b0:	9c 91       	ld	r25, X
     9b2:	12 97       	sbiw	r26, 0x02	; 2
     9b4:	e9 2f       	mov	r30, r25
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	39 96       	adiw	r30, 0x09	; 9
     9ba:	ee 0f       	add	r30, r30
     9bc:	ff 1f       	adc	r31, r31
     9be:	e2 0f       	add	r30, r18
     9c0:	f3 1f       	adc	r31, r19
     9c2:	01 90       	ld	r0, Z+
     9c4:	f0 81       	ld	r31, Z
     9c6:	e0 2d       	mov	r30, r0
     9c8:	96 8d       	ldd	r25, Z+30	; 0x1e
     9ca:	99 23       	and	r25, r25
     9cc:	29 f0       	breq	.+10     	; 0x9d8 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     9ce:	11 96       	adiw	r26, 0x01	; 1
     9d0:	fc 93       	st	X, r31
     9d2:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     9d8:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <currentMenu+0x3>
     9dc:	08 95       	ret

000009de <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
	oled_reset();
     9e6:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_reset>
	oled_home();
     9ea:	0e 94 5a 05 	call	0xab4	; 0xab4 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     9ee:	c4 ef       	ldi	r28, 0xF4	; 244
     9f0:	d1 e0       	ldi	r29, 0x01	; 1
     9f2:	88 81       	ld	r24, Y
     9f4:	99 81       	ldd	r25, Y+1	; 0x01
     9f6:	0e 94 95 05 	call	0xb2a	; 0xb2a <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     9fa:	e8 81       	ld	r30, Y
     9fc:	f9 81       	ldd	r31, Y+1	; 0x01
     9fe:	86 8d       	ldd	r24, Z+30	; 0x1e
     a00:	88 23       	and	r24, r24
     a02:	31 f1       	breq	.+76     	; 0xa50 <menu_printCurrentMenu+0x72>
     a04:	c0 e0       	ldi	r28, 0x00	; 0
     a06:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     a08:	04 ef       	ldi	r16, 0xF4	; 244
     a0a:	11 e0       	ldi	r17, 0x01	; 1
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     a0c:	ce 01       	movw	r24, r28
     a0e:	02 96       	adiw	r24, 0x02	; 2
     a10:	0e 94 91 05 	call	0xb22	; 0xb22 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     a14:	d8 01       	movw	r26, r16
     a16:	8d 91       	ld	r24, X+
     a18:	9c 91       	ld	r25, X
     a1a:	fe 01       	movw	r30, r28
     a1c:	39 96       	adiw	r30, 0x09	; 9
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	e8 0f       	add	r30, r24
     a24:	f9 1f       	adc	r31, r25
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	0e 94 95 05 	call	0xb2a	; 0xb2a <oled_print>
		if (currentMenu.childIndex == i) {
     a2e:	f8 01       	movw	r30, r16
     a30:	82 81       	ldd	r24, Z+2	; 0x02
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	8c 17       	cp	r24, r28
     a36:	9d 07       	cpc	r25, r29
     a38:	11 f4       	brne	.+4      	; 0xa3e <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     a3a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     a3e:	21 96       	adiw	r28, 0x01	; 1
     a40:	d8 01       	movw	r26, r16
     a42:	ed 91       	ld	r30, X+
     a44:	fc 91       	ld	r31, X
     a46:	86 8d       	ldd	r24, Z+30	; 0x1e
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	c8 17       	cp	r28, r24
     a4c:	d9 07       	cpc	r29, r25
     a4e:	f4 f2       	brlt	.-68     	; 0xa0c <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     a5a:	80 55       	subi	r24, 0x50	; 80
     a5c:	e0 e0       	ldi	r30, 0x00	; 0
     a5e:	f0 e1       	ldi	r31, 0x10	; 16
     a60:	80 83       	st	Z, r24
     a62:	86 2f       	mov	r24, r22
     a64:	8f 70       	andi	r24, 0x0F	; 15
     a66:	80 83       	st	Z, r24
     a68:	62 95       	swap	r22
     a6a:	6f 70       	andi	r22, 0x0F	; 15
     a6c:	60 61       	ori	r22, 0x10	; 16
     a6e:	60 83       	st	Z, r22
     a70:	08 95       	ret

00000a72 <oled_reset>:
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	c0 e0       	ldi	r28, 0x00	; 0
     a7c:	d2 e1       	ldi	r29, 0x12	; 18
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	81 2f       	mov	r24, r17
     a82:	0e 94 2d 05 	call	0xa5a	; 0xa5a <oled_pos>
     a86:	80 e8       	ldi	r24, 0x80	; 128
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	18 82       	st	Y, r1
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	e9 f7       	brne	.-6      	; 0xa8a <oled_reset+0x18>
     a90:	1f 5f       	subi	r17, 0xFF	; 255
     a92:	18 30       	cpi	r17, 0x08	; 8
     a94:	a1 f7       	brne	.-24     	; 0xa7e <oled_reset+0xc>
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	08 95       	ret

00000a9e <oled_print_arrow>:
     a9e:	e0 e0       	ldi	r30, 0x00	; 0
     aa0:	f2 e1       	ldi	r31, 0x12	; 18
     aa2:	88 e1       	ldi	r24, 0x18	; 24
     aa4:	80 83       	st	Z, r24
     aa6:	9c e3       	ldi	r25, 0x3C	; 60
     aa8:	90 83       	st	Z, r25
     aaa:	9e e7       	ldi	r25, 0x7E	; 126
     aac:	90 83       	st	Z, r25
     aae:	80 83       	st	Z, r24
     ab0:	80 83       	st	Z, r24
     ab2:	08 95       	ret

00000ab4 <oled_home>:
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <oled_pos>
     abc:	08 95       	ret

00000abe <oled_init>:
     abe:	e0 e0       	ldi	r30, 0x00	; 0
     ac0:	f0 e1       	ldi	r31, 0x10	; 16
     ac2:	8e ea       	ldi	r24, 0xAE	; 174
     ac4:	80 83       	st	Z, r24
     ac6:	81 ea       	ldi	r24, 0xA1	; 161
     ac8:	80 83       	st	Z, r24
     aca:	8a ed       	ldi	r24, 0xDA	; 218
     acc:	80 83       	st	Z, r24
     ace:	82 e1       	ldi	r24, 0x12	; 18
     ad0:	80 83       	st	Z, r24
     ad2:	88 ec       	ldi	r24, 0xC8	; 200
     ad4:	80 83       	st	Z, r24
     ad6:	88 ea       	ldi	r24, 0xA8	; 168
     ad8:	80 83       	st	Z, r24
     ada:	8f e3       	ldi	r24, 0x3F	; 63
     adc:	80 83       	st	Z, r24
     ade:	85 ed       	ldi	r24, 0xD5	; 213
     ae0:	80 83       	st	Z, r24
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	80 83       	st	Z, r24
     ae6:	81 e8       	ldi	r24, 0x81	; 129
     ae8:	80 83       	st	Z, r24
     aea:	80 e5       	ldi	r24, 0x50	; 80
     aec:	80 83       	st	Z, r24
     aee:	89 ed       	ldi	r24, 0xD9	; 217
     af0:	80 83       	st	Z, r24
     af2:	81 e2       	ldi	r24, 0x21	; 33
     af4:	80 83       	st	Z, r24
     af6:	80 e2       	ldi	r24, 0x20	; 32
     af8:	80 83       	st	Z, r24
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	80 83       	st	Z, r24
     afe:	8b ed       	ldi	r24, 0xDB	; 219
     b00:	80 83       	st	Z, r24
     b02:	80 e3       	ldi	r24, 0x30	; 48
     b04:	80 83       	st	Z, r24
     b06:	8d ea       	ldi	r24, 0xAD	; 173
     b08:	80 83       	st	Z, r24
     b0a:	10 82       	st	Z, r1
     b0c:	84 ea       	ldi	r24, 0xA4	; 164
     b0e:	80 83       	st	Z, r24
     b10:	86 ea       	ldi	r24, 0xA6	; 166
     b12:	80 83       	st	Z, r24
     b14:	8f ea       	ldi	r24, 0xAF	; 175
     b16:	80 83       	st	Z, r24
     b18:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_reset>
     b1c:	0e 94 5a 05 	call	0xab4	; 0xab4 <oled_home>
     b20:	08 95       	ret

00000b22 <oled_gotoLine>:
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	0e 94 2d 05 	call	0xa5a	; 0xa5a <oled_pos>
     b28:	08 95       	ret

00000b2a <oled_print>:

void oled_print(char* character){
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	dc 01       	movw	r26, r24
	while (*character != '\0')
     b30:	8c 91       	ld	r24, X
     b32:	81 11       	cpse	r24, r1
     b34:	1a c0       	rjmp	.+52     	; 0xb6a <oled_print+0x40>
     b36:	1e c0       	rjmp	.+60     	; 0xb74 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     b38:	ec 91       	ld	r30, X
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	b0 97       	sbiw	r30, 0x20	; 32
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	ee 0f       	add	r30, r30
     b44:	ff 1f       	adc	r31, r31
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	e2 0f       	add	r30, r18
     b4c:	f3 1f       	adc	r31, r19
     b4e:	e2 56       	subi	r30, 0x62	; 98
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     b54:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     b56:	2f 5f       	subi	r18, 0xFF	; 255
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	28 30       	cpi	r18, 0x08	; 8
     b5c:	31 05       	cpc	r19, r1
     b5e:	61 f7       	brne	.-40     	; 0xb38 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     b60:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     b62:	8c 91       	ld	r24, X
     b64:	81 11       	cpse	r24, r1
     b66:	03 c0       	rjmp	.+6      	; 0xb6e <oled_print+0x44>
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     b6a:	c0 e0       	ldi	r28, 0x00	; 0
     b6c:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	e2 cf       	rjmp	.-60     	; 0xb38 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <setupInit>:
#include "oled.h"
#include "timer.h"
#include "sleep.h"

	void setupInit(void){
	cli();
     b7a:	f8 94       	cli
	xmem_init();
     b7c:	0e 94 98 06 	call	0xd30	; 0xd30 <xmem_init>
	USART_init(MYUBRR);
     b80:	8f e1       	ldi	r24, 0x1F	; 31
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 87 06 	call	0xd0e	; 0xd0e <USART_init>
	adcInit();
     b88:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     b8c:	0e 94 2e 03 	call	0x65c	; 0x65c <joystickInit>
	touchButton_init();
     b90:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <touchButton_init>
	oled_init();
     b94:	0e 94 5f 05 	call	0xabe	; 0xabe <oled_init>
	timer_init();
     b98:	0e 94 4c 06 	call	0xc98	; 0xc98 <timer_init>
	sleep_init();
     b9c:	0e 94 1e 03 	call	0x63c	; 0x63c <sleep_init>
	menuInit();
     ba0:	0e 94 41 04 	call	0x882	; 0x882 <menuInit>
	CAN_controller_init();
     ba4:	0e 94 af 02 	call	0x55e	; 0x55e <CAN_controller_init>
	sei();
     ba8:	78 94       	sei
     baa:	08 95       	ret

00000bac <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     bb6:	ca ef       	ldi	r28, 0xFA	; 250
     bb8:	d1 e0       	ldi	r29, 0x01	; 1
     bba:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     bca:	87 b3       	in	r24, 0x17	; 23
     bcc:	80 6a       	ori	r24, 0xA0	; 160
     bce:	87 bb       	out	0x17, r24	; 23
     bd0:	bc 9a       	sbi	0x17, 4	; 23
     bd2:	8d b1       	in	r24, 0x0d	; 13
     bd4:	81 65       	ori	r24, 0x51	; 81
     bd6:	8d b9       	out	0x0d, r24	; 13
     bd8:	c4 9a       	sbi	0x18, 4	; 24
     bda:	08 95       	ret

00000bdc <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     bdc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     bde:	77 9b       	sbis	0x0e, 7	; 14
     be0:	fe cf       	rjmp	.-4      	; 0xbde <SPI_masterWrite+0x2>

}
     be2:	08 95       	ret

00000be4 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     be4:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     be6:	77 9b       	sbis	0x0e, 7	; 14
     be8:	fe cf       	rjmp	.-4      	; 0xbe6 <SPI_masterRead+0x2>
	return SPDR;
     bea:	8f b1       	in	r24, 0x0f	; 15
}
     bec:	08 95       	ret

00000bee <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     bee:	66 23       	and	r22, r22
     bf0:	69 f0       	breq	.+26     	; 0xc0c <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     bf2:	48 b3       	in	r20, 0x18	; 24
     bf4:	21 e0       	ldi	r18, 0x01	; 1
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	b9 01       	movw	r22, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <SPI_setChipSelect+0x12>
     bfc:	66 0f       	add	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <SPI_setChipSelect+0xe>
     c04:	cb 01       	movw	r24, r22
     c06:	84 2b       	or	r24, r20
     c08:	88 bb       	out	0x18, r24	; 24
     c0a:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     c0c:	48 b3       	in	r20, 0x18	; 24
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	b9 01       	movw	r22, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <SPI_setChipSelect+0x2c>
     c16:	66 0f       	add	r22, r22
     c18:	77 1f       	adc	r23, r23
     c1a:	8a 95       	dec	r24
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <SPI_setChipSelect+0x28>
     c1e:	cb 01       	movw	r24, r22
     c20:	80 95       	com	r24
     c22:	84 23       	and	r24, r20
     c24:	88 bb       	out	0x18, r24	; 24
     c26:	08 95       	ret

00000c28 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
	cli();
     c4a:	f8 94       	cli
	TCNT1 = 0x00;
     c4c:	1d bc       	out	0x2d, r1	; 45
     c4e:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     c50:	80 ef       	ldi	r24, 0xF0	; 240
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 39 03 	call	0x672	; 0x672 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     c58:	8a ef       	ldi	r24, 0xFA	; 250
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 d6 05 	call	0xbac	; 0xbac <slider_readPosition>
	touchButton_readButtons(&buttons);
     c60:	88 ef       	ldi	r24, 0xF8	; 248
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 73 06 	call	0xce6	; 0xce6 <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     c68:	80 ef       	ldi	r24, 0xF0	; 240
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 8d 04 	call	0x91a	; 0x91a <navigateMenu>
	menu_printCurrentMenu();
     c70:	0e 94 ef 04 	call	0x9de	; 0x9de <menu_printCurrentMenu>
	sei();
     c74:	78 94       	sei
}
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	bf 91       	pop	r27
     c7c:	af 91       	pop	r26
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	7f 91       	pop	r23
     c84:	6f 91       	pop	r22
     c86:	5f 91       	pop	r21
     c88:	4f 91       	pop	r20
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     c98:	89 b7       	in	r24, 0x39	; 57
     c9a:	80 62       	ori	r24, 0x20	; 32
     c9c:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     c9e:	1d bc       	out	0x2d, r1	; 45
     ca0:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     ca2:	80 e3       	ldi	r24, 0x30	; 48
     ca4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     caa:	80 ef       	ldi	r24, 0xF0	; 240
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	99 bd       	out	0x29, r25	; 41
     cb0:	88 bd       	out	0x28, r24	; 40
     cb2:	08 95       	ret

00000cb4 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     cb4:	36 b3       	in	r19, 0x16	; 22
     cb6:	26 b3       	in	r18, 0x16	; 22
     cb8:	47 b3       	in	r20, 0x17	; 23
     cba:	32 70       	andi	r19, 0x02	; 2
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	bc 01       	movw	r22, r24
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <touchButton_init+0x14>
     cc4:	66 0f       	add	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	3a 95       	dec	r19
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <touchButton_init+0x10>
     ccc:	24 70       	andi	r18, 0x04	; 4
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <touchButton_init+0x20>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	2a 95       	dec	r18
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <touchButton_init+0x1c>
     cd8:	86 2b       	or	r24, r22
     cda:	97 2b       	or	r25, r23
     cdc:	80 95       	com	r24
     cde:	90 95       	com	r25
     ce0:	84 23       	and	r24, r20
     ce2:	87 bb       	out	0x17, r24	; 23
     ce4:	08 95       	ret

00000ce6 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     ce6:	86 b3       	in	r24, 0x16	; 22
     ce8:	e8 ef       	ldi	r30, 0xF8	; 248
     cea:	f1 e0       	ldi	r31, 0x01	; 1
     cec:	86 95       	lsr	r24
     cee:	81 70       	andi	r24, 0x01	; 1
     cf0:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     cf2:	86 b3       	in	r24, 0x16	; 22
     cf4:	82 fb       	bst	r24, 2
     cf6:	88 27       	eor	r24, r24
     cf8:	80 f9       	bld	r24, 0
     cfa:	81 83       	std	Z+1, r24	; 0x01
     cfc:	08 95       	ret

00000cfe <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     cfe:	5d 9b       	sbis	0x0b, 5	; 11
     d00:	fe cf       	rjmp	.-4      	; 0xcfe <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     d02:	8c b9       	out	0x0c, r24	; 12
     d04:	08 95       	ret

00000d06 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     d06:	5f 9b       	sbis	0x0b, 7	; 11
     d08:	fe cf       	rjmp	.-4      	; 0xd06 <USART_receiveChar>
		;
	
	return UDR0;
     d0a:	8c b1       	in	r24, 0x0c	; 12
     d0c:	08 95       	ret

00000d0e <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     d0e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     d10:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     d12:	88 e1       	ldi	r24, 0x18	; 24
     d14:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     d16:	8e e8       	ldi	r24, 0x8E	; 142
     d18:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     d1a:	63 e8       	ldi	r22, 0x83	; 131
     d1c:	76 e0       	ldi	r23, 0x06	; 6
     d1e:	8f e7       	ldi	r24, 0x7F	; 127
     d20:	96 e0       	ldi	r25, 0x06	; 6
     d22:	0e 94 a4 0a 	call	0x1548	; 0x1548 <fdevopen>
     d26:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <uart+0x1>
     d2a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <uart>
     d2e:	08 95       	ret

00000d30 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     d30:	85 b7       	in	r24, 0x35	; 53
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     d36:	80 b7       	in	r24, 0x30	; 48
     d38:	88 60       	ori	r24, 0x08	; 8
     d3a:	80 bf       	out	0x30, r24	; 48
     d3c:	08 95       	ret
     d3e:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscA>
     d42:	60 f0       	brcs	.+24     	; 0xd5c <xmem_init+0x2c>
     d44:	80 e8       	ldi	r24, 0x80	; 128
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	09 f4       	brne	.+2      	; 0xd4c <xmem_init+0x1c>
     d4a:	9e ef       	ldi	r25, 0xFE	; 254
     d4c:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_pscB>
     d50:	28 f0       	brcs	.+10     	; 0xd5c <xmem_init+0x2c>
     d52:	40 e8       	ldi	r20, 0x80	; 128
     d54:	51 e0       	ldi	r21, 0x01	; 1
     d56:	71 f4       	brne	.+28     	; 0xd74 <atan2+0x10>
     d58:	5e ef       	ldi	r21, 0xFE	; 254
     d5a:	0c c0       	rjmp	.+24     	; 0xd74 <atan2+0x10>
     d5c:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_nan>
     d60:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_zero>

00000d64 <atan2>:
     d64:	e9 2f       	mov	r30, r25
     d66:	e0 78       	andi	r30, 0x80	; 128
     d68:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_split3>
     d6c:	40 f3       	brcs	.-48     	; 0xd3e <xmem_init+0xe>
     d6e:	09 2e       	mov	r0, r25
     d70:	05 2a       	or	r0, r21
     d72:	b1 f3       	breq	.-20     	; 0xd60 <xmem_init+0x30>
     d74:	26 17       	cp	r18, r22
     d76:	37 07       	cpc	r19, r23
     d78:	48 07       	cpc	r20, r24
     d7a:	59 07       	cpc	r21, r25
     d7c:	38 f0       	brcs	.+14     	; 0xd8c <atan2+0x28>
     d7e:	0e 2e       	mov	r0, r30
     d80:	07 f8       	bld	r0, 7
     d82:	e0 25       	eor	r30, r0
     d84:	69 f0       	breq	.+26     	; 0xda0 <atan2+0x3c>
     d86:	e0 25       	eor	r30, r0
     d88:	e0 64       	ori	r30, 0x40	; 64
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <atan2+0x3c>
     d8c:	ef 63       	ori	r30, 0x3F	; 63
     d8e:	07 f8       	bld	r0, 7
     d90:	00 94       	com	r0
     d92:	07 fa       	bst	r0, 7
     d94:	db 01       	movw	r26, r22
     d96:	b9 01       	movw	r22, r18
     d98:	9d 01       	movw	r18, r26
     d9a:	dc 01       	movw	r26, r24
     d9c:	ca 01       	movw	r24, r20
     d9e:	ad 01       	movw	r20, r26
     da0:	ef 93       	push	r30
     da2:	0e 94 28 07 	call	0xe50	; 0xe50 <__divsf3_pse>
     da6:	0e 94 34 08 	call	0x1068	; 0x1068 <__fp_round>
     daa:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <atan>
     dae:	5f 91       	pop	r21
     db0:	55 23       	and	r21, r21
     db2:	39 f0       	breq	.+14     	; 0xdc2 <atan2+0x5e>
     db4:	2b ed       	ldi	r18, 0xDB	; 219
     db6:	3f e0       	ldi	r19, 0x0F	; 15
     db8:	49 e4       	ldi	r20, 0x49	; 73
     dba:	50 fd       	sbrc	r21, 0
     dbc:	49 ec       	ldi	r20, 0xC9	; 201
     dbe:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__addsf3>
     dc2:	08 95       	ret

00000dc4 <atan>:
     dc4:	df 93       	push	r29
     dc6:	dd 27       	eor	r29, r29
     dc8:	b9 2f       	mov	r27, r25
     dca:	bf 77       	andi	r27, 0x7F	; 127
     dcc:	40 e8       	ldi	r20, 0x80	; 128
     dce:	5f e3       	ldi	r21, 0x3F	; 63
     dd0:	16 16       	cp	r1, r22
     dd2:	17 06       	cpc	r1, r23
     dd4:	48 07       	cpc	r20, r24
     dd6:	5b 07       	cpc	r21, r27
     dd8:	18 f4       	brcc	.+6      	; 0xde0 <atan+0x1c>
     dda:	d9 2f       	mov	r29, r25
     ddc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <inverse>
     de0:	9f 93       	push	r25
     de2:	8f 93       	push	r24
     de4:	7f 93       	push	r23
     de6:	6f 93       	push	r22
     de8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <square>
     dec:	e0 e7       	ldi	r30, 0x70	; 112
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_powser>
     df4:	0e 94 34 08 	call	0x1068	; 0x1068 <__fp_round>
     df8:	2f 91       	pop	r18
     dfa:	3f 91       	pop	r19
     dfc:	4f 91       	pop	r20
     dfe:	5f 91       	pop	r21
     e00:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3x>
     e04:	dd 23       	and	r29, r29
     e06:	51 f0       	breq	.+20     	; 0xe1c <atan+0x58>
     e08:	90 58       	subi	r25, 0x80	; 128
     e0a:	a2 ea       	ldi	r26, 0xA2	; 162
     e0c:	2a ed       	ldi	r18, 0xDA	; 218
     e0e:	3f e0       	ldi	r19, 0x0F	; 15
     e10:	49 ec       	ldi	r20, 0xC9	; 201
     e12:	5f e3       	ldi	r21, 0x3F	; 63
     e14:	d0 78       	andi	r29, 0x80	; 128
     e16:	5d 27       	eor	r21, r29
     e18:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__addsf3x>
     e1c:	df 91       	pop	r29
     e1e:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_round>

00000e22 <__divsf3>:
     e22:	0e 94 25 07 	call	0xe4a	; 0xe4a <__divsf3x>
     e26:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_round>
     e2a:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_pscB>
     e2e:	58 f0       	brcs	.+22     	; 0xe46 <__divsf3+0x24>
     e30:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscA>
     e34:	40 f0       	brcs	.+16     	; 0xe46 <__divsf3+0x24>
     e36:	29 f4       	brne	.+10     	; 0xe42 <__divsf3+0x20>
     e38:	5f 3f       	cpi	r21, 0xFF	; 255
     e3a:	29 f0       	breq	.+10     	; 0xe46 <__divsf3+0x24>
     e3c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>
     e40:	51 11       	cpse	r21, r1
     e42:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>
     e46:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_nan>

00000e4a <__divsf3x>:
     e4a:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_split3>
     e4e:	68 f3       	brcs	.-38     	; 0xe2a <__divsf3+0x8>

00000e50 <__divsf3_pse>:
     e50:	99 23       	and	r25, r25
     e52:	b1 f3       	breq	.-20     	; 0xe40 <__divsf3+0x1e>
     e54:	55 23       	and	r21, r21
     e56:	91 f3       	breq	.-28     	; 0xe3c <__divsf3+0x1a>
     e58:	95 1b       	sub	r25, r21
     e5a:	55 0b       	sbc	r21, r21
     e5c:	bb 27       	eor	r27, r27
     e5e:	aa 27       	eor	r26, r26
     e60:	62 17       	cp	r22, r18
     e62:	73 07       	cpc	r23, r19
     e64:	84 07       	cpc	r24, r20
     e66:	38 f0       	brcs	.+14     	; 0xe76 <__divsf3_pse+0x26>
     e68:	9f 5f       	subi	r25, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	44 1f       	adc	r20, r20
     e72:	aa 1f       	adc	r26, r26
     e74:	a9 f3       	breq	.-22     	; 0xe60 <__divsf3_pse+0x10>
     e76:	35 d0       	rcall	.+106    	; 0xee2 <__divsf3_pse+0x92>
     e78:	0e 2e       	mov	r0, r30
     e7a:	3a f0       	brmi	.+14     	; 0xe8a <__divsf3_pse+0x3a>
     e7c:	e0 e8       	ldi	r30, 0x80	; 128
     e7e:	32 d0       	rcall	.+100    	; 0xee4 <__divsf3_pse+0x94>
     e80:	91 50       	subi	r25, 0x01	; 1
     e82:	50 40       	sbci	r21, 0x00	; 0
     e84:	e6 95       	lsr	r30
     e86:	00 1c       	adc	r0, r0
     e88:	ca f7       	brpl	.-14     	; 0xe7c <__divsf3_pse+0x2c>
     e8a:	2b d0       	rcall	.+86     	; 0xee2 <__divsf3_pse+0x92>
     e8c:	fe 2f       	mov	r31, r30
     e8e:	29 d0       	rcall	.+82     	; 0xee2 <__divsf3_pse+0x92>
     e90:	66 0f       	add	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	88 1f       	adc	r24, r24
     e96:	bb 1f       	adc	r27, r27
     e98:	26 17       	cp	r18, r22
     e9a:	37 07       	cpc	r19, r23
     e9c:	48 07       	cpc	r20, r24
     e9e:	ab 07       	cpc	r26, r27
     ea0:	b0 e8       	ldi	r27, 0x80	; 128
     ea2:	09 f0       	breq	.+2      	; 0xea6 <__divsf3_pse+0x56>
     ea4:	bb 0b       	sbc	r27, r27
     ea6:	80 2d       	mov	r24, r0
     ea8:	bf 01       	movw	r22, r30
     eaa:	ff 27       	eor	r31, r31
     eac:	93 58       	subi	r25, 0x83	; 131
     eae:	5f 4f       	sbci	r21, 0xFF	; 255
     eb0:	3a f0       	brmi	.+14     	; 0xec0 <__divsf3_pse+0x70>
     eb2:	9e 3f       	cpi	r25, 0xFE	; 254
     eb4:	51 05       	cpc	r21, r1
     eb6:	78 f0       	brcs	.+30     	; 0xed6 <__divsf3_pse+0x86>
     eb8:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>
     ebc:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>
     ec0:	5f 3f       	cpi	r21, 0xFF	; 255
     ec2:	e4 f3       	brlt	.-8      	; 0xebc <__divsf3_pse+0x6c>
     ec4:	98 3e       	cpi	r25, 0xE8	; 232
     ec6:	d4 f3       	brlt	.-12     	; 0xebc <__divsf3_pse+0x6c>
     ec8:	86 95       	lsr	r24
     eca:	77 95       	ror	r23
     ecc:	67 95       	ror	r22
     ece:	b7 95       	ror	r27
     ed0:	f7 95       	ror	r31
     ed2:	9f 5f       	subi	r25, 0xFF	; 255
     ed4:	c9 f7       	brne	.-14     	; 0xec8 <__divsf3_pse+0x78>
     ed6:	88 0f       	add	r24, r24
     ed8:	91 1d       	adc	r25, r1
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	97 f9       	bld	r25, 7
     ee0:	08 95       	ret
     ee2:	e1 e0       	ldi	r30, 0x01	; 1
     ee4:	66 0f       	add	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	88 1f       	adc	r24, r24
     eea:	bb 1f       	adc	r27, r27
     eec:	62 17       	cp	r22, r18
     eee:	73 07       	cpc	r23, r19
     ef0:	84 07       	cpc	r24, r20
     ef2:	ba 07       	cpc	r27, r26
     ef4:	20 f0       	brcs	.+8      	; 0xefe <__divsf3_pse+0xae>
     ef6:	62 1b       	sub	r22, r18
     ef8:	73 0b       	sbc	r23, r19
     efa:	84 0b       	sbc	r24, r20
     efc:	ba 0b       	sbc	r27, r26
     efe:	ee 1f       	adc	r30, r30
     f00:	88 f7       	brcc	.-30     	; 0xee4 <__divsf3_pse+0x94>
     f02:	e0 95       	com	r30
     f04:	08 95       	ret

00000f06 <__fixsfsi>:
     f06:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fixunssfsi>
     f0a:	68 94       	set
     f0c:	b1 11       	cpse	r27, r1
     f0e:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>
     f12:	08 95       	ret

00000f14 <__fixunssfsi>:
     f14:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_splitA>
     f18:	88 f0       	brcs	.+34     	; 0xf3c <__fixunssfsi+0x28>
     f1a:	9f 57       	subi	r25, 0x7F	; 127
     f1c:	98 f0       	brcs	.+38     	; 0xf44 <__fixunssfsi+0x30>
     f1e:	b9 2f       	mov	r27, r25
     f20:	99 27       	eor	r25, r25
     f22:	b7 51       	subi	r27, 0x17	; 23
     f24:	b0 f0       	brcs	.+44     	; 0xf52 <__fixunssfsi+0x3e>
     f26:	e1 f0       	breq	.+56     	; 0xf60 <__fixunssfsi+0x4c>
     f28:	66 0f       	add	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	88 1f       	adc	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	1a f0       	brmi	.+6      	; 0xf38 <__fixunssfsi+0x24>
     f32:	ba 95       	dec	r27
     f34:	c9 f7       	brne	.-14     	; 0xf28 <__fixunssfsi+0x14>
     f36:	14 c0       	rjmp	.+40     	; 0xf60 <__fixunssfsi+0x4c>
     f38:	b1 30       	cpi	r27, 0x01	; 1
     f3a:	91 f0       	breq	.+36     	; 0xf60 <__fixunssfsi+0x4c>
     f3c:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fp_zero>
     f40:	b1 e0       	ldi	r27, 0x01	; 1
     f42:	08 95       	ret
     f44:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_zero>
     f48:	67 2f       	mov	r22, r23
     f4a:	78 2f       	mov	r23, r24
     f4c:	88 27       	eor	r24, r24
     f4e:	b8 5f       	subi	r27, 0xF8	; 248
     f50:	39 f0       	breq	.+14     	; 0xf60 <__fixunssfsi+0x4c>
     f52:	b9 3f       	cpi	r27, 0xF9	; 249
     f54:	cc f3       	brlt	.-14     	; 0xf48 <__fixunssfsi+0x34>
     f56:	86 95       	lsr	r24
     f58:	77 95       	ror	r23
     f5a:	67 95       	ror	r22
     f5c:	b3 95       	inc	r27
     f5e:	d9 f7       	brne	.-10     	; 0xf56 <__fixunssfsi+0x42>
     f60:	3e f4       	brtc	.+14     	; 0xf70 <__fixunssfsi+0x5c>
     f62:	90 95       	com	r25
     f64:	80 95       	com	r24
     f66:	70 95       	com	r23
     f68:	61 95       	neg	r22
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	8f 4f       	sbci	r24, 0xFF	; 255
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	08 95       	ret

00000f72 <__floatunsisf>:
     f72:	e8 94       	clt
     f74:	09 c0       	rjmp	.+18     	; 0xf88 <__floatsisf+0x12>

00000f76 <__floatsisf>:
     f76:	97 fb       	bst	r25, 7
     f78:	3e f4       	brtc	.+14     	; 0xf88 <__floatsisf+0x12>
     f7a:	90 95       	com	r25
     f7c:	80 95       	com	r24
     f7e:	70 95       	com	r23
     f80:	61 95       	neg	r22
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	8f 4f       	sbci	r24, 0xFF	; 255
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	99 23       	and	r25, r25
     f8a:	a9 f0       	breq	.+42     	; 0xfb6 <__floatsisf+0x40>
     f8c:	f9 2f       	mov	r31, r25
     f8e:	96 e9       	ldi	r25, 0x96	; 150
     f90:	bb 27       	eor	r27, r27
     f92:	93 95       	inc	r25
     f94:	f6 95       	lsr	r31
     f96:	87 95       	ror	r24
     f98:	77 95       	ror	r23
     f9a:	67 95       	ror	r22
     f9c:	b7 95       	ror	r27
     f9e:	f1 11       	cpse	r31, r1
     fa0:	f8 cf       	rjmp	.-16     	; 0xf92 <__floatsisf+0x1c>
     fa2:	fa f4       	brpl	.+62     	; 0xfe2 <__floatsisf+0x6c>
     fa4:	bb 0f       	add	r27, r27
     fa6:	11 f4       	brne	.+4      	; 0xfac <__floatsisf+0x36>
     fa8:	60 ff       	sbrs	r22, 0
     faa:	1b c0       	rjmp	.+54     	; 0xfe2 <__floatsisf+0x6c>
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	8f 4f       	sbci	r24, 0xFF	; 255
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	16 c0       	rjmp	.+44     	; 0xfe2 <__floatsisf+0x6c>
     fb6:	88 23       	and	r24, r24
     fb8:	11 f0       	breq	.+4      	; 0xfbe <__floatsisf+0x48>
     fba:	96 e9       	ldi	r25, 0x96	; 150
     fbc:	11 c0       	rjmp	.+34     	; 0xfe0 <__floatsisf+0x6a>
     fbe:	77 23       	and	r23, r23
     fc0:	21 f0       	breq	.+8      	; 0xfca <__floatsisf+0x54>
     fc2:	9e e8       	ldi	r25, 0x8E	; 142
     fc4:	87 2f       	mov	r24, r23
     fc6:	76 2f       	mov	r23, r22
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <__floatsisf+0x5e>
     fca:	66 23       	and	r22, r22
     fcc:	71 f0       	breq	.+28     	; 0xfea <__floatsisf+0x74>
     fce:	96 e8       	ldi	r25, 0x86	; 134
     fd0:	86 2f       	mov	r24, r22
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	2a f0       	brmi	.+10     	; 0xfe2 <__floatsisf+0x6c>
     fd8:	9a 95       	dec	r25
     fda:	66 0f       	add	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	88 1f       	adc	r24, r24
     fe0:	da f7       	brpl	.-10     	; 0xfd8 <__floatsisf+0x62>
     fe2:	88 0f       	add	r24, r24
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	97 f9       	bld	r25, 7
     fea:	08 95       	ret

00000fec <__fp_inf>:
     fec:	97 f9       	bld	r25, 7
     fee:	9f 67       	ori	r25, 0x7F	; 127
     ff0:	80 e8       	ldi	r24, 0x80	; 128
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <__fp_nan>:
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
     ffa:	80 ec       	ldi	r24, 0xC0	; 192
     ffc:	08 95       	ret

00000ffe <__fp_powser>:
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	1f 93       	push	r17
    1004:	0f 93       	push	r16
    1006:	ff 92       	push	r15
    1008:	ef 92       	push	r14
    100a:	df 92       	push	r13
    100c:	7b 01       	movw	r14, r22
    100e:	8c 01       	movw	r16, r24
    1010:	68 94       	set
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <__fp_powser+0x22>
    1014:	da 2e       	mov	r13, r26
    1016:	ef 01       	movw	r28, r30
    1018:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3x>
    101c:	fe 01       	movw	r30, r28
    101e:	e8 94       	clt
    1020:	a5 91       	lpm	r26, Z+
    1022:	25 91       	lpm	r18, Z+
    1024:	35 91       	lpm	r19, Z+
    1026:	45 91       	lpm	r20, Z+
    1028:	55 91       	lpm	r21, Z+
    102a:	a6 f3       	brts	.-24     	; 0x1014 <__fp_powser+0x16>
    102c:	ef 01       	movw	r28, r30
    102e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__addsf3x>
    1032:	fe 01       	movw	r30, r28
    1034:	97 01       	movw	r18, r14
    1036:	a8 01       	movw	r20, r16
    1038:	da 94       	dec	r13
    103a:	69 f7       	brne	.-38     	; 0x1016 <__fp_powser+0x18>
    103c:	df 90       	pop	r13
    103e:	ef 90       	pop	r14
    1040:	ff 90       	pop	r15
    1042:	0f 91       	pop	r16
    1044:	1f 91       	pop	r17
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <__fp_pscA>:
    104c:	00 24       	eor	r0, r0
    104e:	0a 94       	dec	r0
    1050:	16 16       	cp	r1, r22
    1052:	17 06       	cpc	r1, r23
    1054:	18 06       	cpc	r1, r24
    1056:	09 06       	cpc	r0, r25
    1058:	08 95       	ret

0000105a <__fp_pscB>:
    105a:	00 24       	eor	r0, r0
    105c:	0a 94       	dec	r0
    105e:	12 16       	cp	r1, r18
    1060:	13 06       	cpc	r1, r19
    1062:	14 06       	cpc	r1, r20
    1064:	05 06       	cpc	r0, r21
    1066:	08 95       	ret

00001068 <__fp_round>:
    1068:	09 2e       	mov	r0, r25
    106a:	03 94       	inc	r0
    106c:	00 0c       	add	r0, r0
    106e:	11 f4       	brne	.+4      	; 0x1074 <__fp_round+0xc>
    1070:	88 23       	and	r24, r24
    1072:	52 f0       	brmi	.+20     	; 0x1088 <__fp_round+0x20>
    1074:	bb 0f       	add	r27, r27
    1076:	40 f4       	brcc	.+16     	; 0x1088 <__fp_round+0x20>
    1078:	bf 2b       	or	r27, r31
    107a:	11 f4       	brne	.+4      	; 0x1080 <__fp_round+0x18>
    107c:	60 ff       	sbrs	r22, 0
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <__fp_round+0x20>
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	08 95       	ret

0000108a <__fp_split3>:
    108a:	57 fd       	sbrc	r21, 7
    108c:	90 58       	subi	r25, 0x80	; 128
    108e:	44 0f       	add	r20, r20
    1090:	55 1f       	adc	r21, r21
    1092:	59 f0       	breq	.+22     	; 0x10aa <__fp_splitA+0x10>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	71 f0       	breq	.+28     	; 0x10b4 <__fp_splitA+0x1a>
    1098:	47 95       	ror	r20

0000109a <__fp_splitA>:
    109a:	88 0f       	add	r24, r24
    109c:	97 fb       	bst	r25, 7
    109e:	99 1f       	adc	r25, r25
    10a0:	61 f0       	breq	.+24     	; 0x10ba <__fp_splitA+0x20>
    10a2:	9f 3f       	cpi	r25, 0xFF	; 255
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <__fp_splitA+0x2a>
    10a6:	87 95       	ror	r24
    10a8:	08 95       	ret
    10aa:	12 16       	cp	r1, r18
    10ac:	13 06       	cpc	r1, r19
    10ae:	14 06       	cpc	r1, r20
    10b0:	55 1f       	adc	r21, r21
    10b2:	f2 cf       	rjmp	.-28     	; 0x1098 <__fp_split3+0xe>
    10b4:	46 95       	lsr	r20
    10b6:	f1 df       	rcall	.-30     	; 0x109a <__fp_splitA>
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <__fp_splitA+0x30>
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	18 06       	cpc	r1, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	f1 cf       	rjmp	.-30     	; 0x10a6 <__fp_splitA+0xc>
    10c4:	86 95       	lsr	r24
    10c6:	71 05       	cpc	r23, r1
    10c8:	61 05       	cpc	r22, r1
    10ca:	08 94       	sec
    10cc:	08 95       	ret

000010ce <__fp_zero>:
    10ce:	e8 94       	clt

000010d0 <__fp_szero>:
    10d0:	bb 27       	eor	r27, r27
    10d2:	66 27       	eor	r22, r22
    10d4:	77 27       	eor	r23, r23
    10d6:	cb 01       	movw	r24, r22
    10d8:	97 f9       	bld	r25, 7
    10da:	08 95       	ret

000010dc <inverse>:
    10dc:	9b 01       	movw	r18, r22
    10de:	ac 01       	movw	r20, r24
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	80 e8       	ldi	r24, 0x80	; 128
    10e6:	9f e3       	ldi	r25, 0x3F	; 63
    10e8:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__divsf3>

000010ec <__mulsf3>:
    10ec:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3x>
    10f0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_round>
    10f4:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscA>
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <__mulsf3+0x1c>
    10fa:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_pscB>
    10fe:	20 f0       	brcs	.+8      	; 0x1108 <__mulsf3+0x1c>
    1100:	95 23       	and	r25, r21
    1102:	11 f0       	breq	.+4      	; 0x1108 <__mulsf3+0x1c>
    1104:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>
    1108:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_nan>
    110c:	11 24       	eor	r1, r1
    110e:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>

00001112 <__mulsf3x>:
    1112:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_split3>
    1116:	70 f3       	brcs	.-36     	; 0x10f4 <__mulsf3+0x8>

00001118 <__mulsf3_pse>:
    1118:	95 9f       	mul	r25, r21
    111a:	c1 f3       	breq	.-16     	; 0x110c <__mulsf3+0x20>
    111c:	95 0f       	add	r25, r21
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	55 1f       	adc	r21, r21
    1122:	62 9f       	mul	r22, r18
    1124:	f0 01       	movw	r30, r0
    1126:	72 9f       	mul	r23, r18
    1128:	bb 27       	eor	r27, r27
    112a:	f0 0d       	add	r31, r0
    112c:	b1 1d       	adc	r27, r1
    112e:	63 9f       	mul	r22, r19
    1130:	aa 27       	eor	r26, r26
    1132:	f0 0d       	add	r31, r0
    1134:	b1 1d       	adc	r27, r1
    1136:	aa 1f       	adc	r26, r26
    1138:	64 9f       	mul	r22, r20
    113a:	66 27       	eor	r22, r22
    113c:	b0 0d       	add	r27, r0
    113e:	a1 1d       	adc	r26, r1
    1140:	66 1f       	adc	r22, r22
    1142:	82 9f       	mul	r24, r18
    1144:	22 27       	eor	r18, r18
    1146:	b0 0d       	add	r27, r0
    1148:	a1 1d       	adc	r26, r1
    114a:	62 1f       	adc	r22, r18
    114c:	73 9f       	mul	r23, r19
    114e:	b0 0d       	add	r27, r0
    1150:	a1 1d       	adc	r26, r1
    1152:	62 1f       	adc	r22, r18
    1154:	83 9f       	mul	r24, r19
    1156:	a0 0d       	add	r26, r0
    1158:	61 1d       	adc	r22, r1
    115a:	22 1f       	adc	r18, r18
    115c:	74 9f       	mul	r23, r20
    115e:	33 27       	eor	r19, r19
    1160:	a0 0d       	add	r26, r0
    1162:	61 1d       	adc	r22, r1
    1164:	23 1f       	adc	r18, r19
    1166:	84 9f       	mul	r24, r20
    1168:	60 0d       	add	r22, r0
    116a:	21 1d       	adc	r18, r1
    116c:	82 2f       	mov	r24, r18
    116e:	76 2f       	mov	r23, r22
    1170:	6a 2f       	mov	r22, r26
    1172:	11 24       	eor	r1, r1
    1174:	9f 57       	subi	r25, 0x7F	; 127
    1176:	50 40       	sbci	r21, 0x00	; 0
    1178:	9a f0       	brmi	.+38     	; 0x11a0 <__mulsf3_pse+0x88>
    117a:	f1 f0       	breq	.+60     	; 0x11b8 <__mulsf3_pse+0xa0>
    117c:	88 23       	and	r24, r24
    117e:	4a f0       	brmi	.+18     	; 0x1192 <__mulsf3_pse+0x7a>
    1180:	ee 0f       	add	r30, r30
    1182:	ff 1f       	adc	r31, r31
    1184:	bb 1f       	adc	r27, r27
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	91 50       	subi	r25, 0x01	; 1
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	a9 f7       	brne	.-22     	; 0x117c <__mulsf3_pse+0x64>
    1192:	9e 3f       	cpi	r25, 0xFE	; 254
    1194:	51 05       	cpc	r21, r1
    1196:	80 f0       	brcs	.+32     	; 0x11b8 <__mulsf3_pse+0xa0>
    1198:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>
    119c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	e4 f3       	brlt	.-8      	; 0x119c <__mulsf3_pse+0x84>
    11a4:	98 3e       	cpi	r25, 0xE8	; 232
    11a6:	d4 f3       	brlt	.-12     	; 0x119c <__mulsf3_pse+0x84>
    11a8:	86 95       	lsr	r24
    11aa:	77 95       	ror	r23
    11ac:	67 95       	ror	r22
    11ae:	b7 95       	ror	r27
    11b0:	f7 95       	ror	r31
    11b2:	e7 95       	ror	r30
    11b4:	9f 5f       	subi	r25, 0xFF	; 255
    11b6:	c1 f7       	brne	.-16     	; 0x11a8 <__mulsf3_pse+0x90>
    11b8:	fe 2b       	or	r31, r30
    11ba:	88 0f       	add	r24, r24
    11bc:	91 1d       	adc	r25, r1
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	97 f9       	bld	r25, 7
    11c4:	08 95       	ret

000011c6 <square>:
    11c6:	9b 01       	movw	r18, r22
    11c8:	ac 01       	movw	r20, r24
    11ca:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__mulsf3>

000011ce <__subsf3>:
    11ce:	50 58       	subi	r21, 0x80	; 128

000011d0 <__addsf3>:
    11d0:	bb 27       	eor	r27, r27
    11d2:	aa 27       	eor	r26, r26
    11d4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__addsf3x>
    11d8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_round>
    11dc:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscA>
    11e0:	38 f0       	brcs	.+14     	; 0x11f0 <__addsf3+0x20>
    11e2:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_pscB>
    11e6:	20 f0       	brcs	.+8      	; 0x11f0 <__addsf3+0x20>
    11e8:	39 f4       	brne	.+14     	; 0x11f8 <__addsf3+0x28>
    11ea:	9f 3f       	cpi	r25, 0xFF	; 255
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <__addsf3+0x24>
    11ee:	26 f4       	brtc	.+8      	; 0x11f8 <__addsf3+0x28>
    11f0:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_nan>
    11f4:	0e f4       	brtc	.+2      	; 0x11f8 <__addsf3+0x28>
    11f6:	e0 95       	com	r30
    11f8:	e7 fb       	bst	r30, 7
    11fa:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>

000011fe <__addsf3x>:
    11fe:	e9 2f       	mov	r30, r25
    1200:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_split3>
    1204:	58 f3       	brcs	.-42     	; 0x11dc <__addsf3+0xc>
    1206:	ba 17       	cp	r27, r26
    1208:	62 07       	cpc	r22, r18
    120a:	73 07       	cpc	r23, r19
    120c:	84 07       	cpc	r24, r20
    120e:	95 07       	cpc	r25, r21
    1210:	20 f0       	brcs	.+8      	; 0x121a <__addsf3x+0x1c>
    1212:	79 f4       	brne	.+30     	; 0x1232 <__addsf3x+0x34>
    1214:	a6 f5       	brtc	.+104    	; 0x127e <__addsf3x+0x80>
    1216:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_zero>
    121a:	0e f4       	brtc	.+2      	; 0x121e <__addsf3x+0x20>
    121c:	e0 95       	com	r30
    121e:	0b 2e       	mov	r0, r27
    1220:	ba 2f       	mov	r27, r26
    1222:	a0 2d       	mov	r26, r0
    1224:	0b 01       	movw	r0, r22
    1226:	b9 01       	movw	r22, r18
    1228:	90 01       	movw	r18, r0
    122a:	0c 01       	movw	r0, r24
    122c:	ca 01       	movw	r24, r20
    122e:	a0 01       	movw	r20, r0
    1230:	11 24       	eor	r1, r1
    1232:	ff 27       	eor	r31, r31
    1234:	59 1b       	sub	r21, r25
    1236:	99 f0       	breq	.+38     	; 0x125e <__addsf3x+0x60>
    1238:	59 3f       	cpi	r21, 0xF9	; 249
    123a:	50 f4       	brcc	.+20     	; 0x1250 <__addsf3x+0x52>
    123c:	50 3e       	cpi	r21, 0xE0	; 224
    123e:	68 f1       	brcs	.+90     	; 0x129a <__addsf3x+0x9c>
    1240:	1a 16       	cp	r1, r26
    1242:	f0 40       	sbci	r31, 0x00	; 0
    1244:	a2 2f       	mov	r26, r18
    1246:	23 2f       	mov	r18, r19
    1248:	34 2f       	mov	r19, r20
    124a:	44 27       	eor	r20, r20
    124c:	58 5f       	subi	r21, 0xF8	; 248
    124e:	f3 cf       	rjmp	.-26     	; 0x1236 <__addsf3x+0x38>
    1250:	46 95       	lsr	r20
    1252:	37 95       	ror	r19
    1254:	27 95       	ror	r18
    1256:	a7 95       	ror	r26
    1258:	f0 40       	sbci	r31, 0x00	; 0
    125a:	53 95       	inc	r21
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__addsf3x+0x52>
    125e:	7e f4       	brtc	.+30     	; 0x127e <__addsf3x+0x80>
    1260:	1f 16       	cp	r1, r31
    1262:	ba 0b       	sbc	r27, r26
    1264:	62 0b       	sbc	r22, r18
    1266:	73 0b       	sbc	r23, r19
    1268:	84 0b       	sbc	r24, r20
    126a:	ba f0       	brmi	.+46     	; 0x129a <__addsf3x+0x9c>
    126c:	91 50       	subi	r25, 0x01	; 1
    126e:	a1 f0       	breq	.+40     	; 0x1298 <__addsf3x+0x9a>
    1270:	ff 0f       	add	r31, r31
    1272:	bb 1f       	adc	r27, r27
    1274:	66 1f       	adc	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	c2 f7       	brpl	.-16     	; 0x126c <__addsf3x+0x6e>
    127c:	0e c0       	rjmp	.+28     	; 0x129a <__addsf3x+0x9c>
    127e:	ba 0f       	add	r27, r26
    1280:	62 1f       	adc	r22, r18
    1282:	73 1f       	adc	r23, r19
    1284:	84 1f       	adc	r24, r20
    1286:	48 f4       	brcc	.+18     	; 0x129a <__addsf3x+0x9c>
    1288:	87 95       	ror	r24
    128a:	77 95       	ror	r23
    128c:	67 95       	ror	r22
    128e:	b7 95       	ror	r27
    1290:	f7 95       	ror	r31
    1292:	9e 3f       	cpi	r25, 0xFE	; 254
    1294:	08 f0       	brcs	.+2      	; 0x1298 <__addsf3x+0x9a>
    1296:	b0 cf       	rjmp	.-160    	; 0x11f8 <__addsf3+0x28>
    1298:	93 95       	inc	r25
    129a:	88 0f       	add	r24, r24
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <__addsf3x+0xa2>
    129e:	99 27       	eor	r25, r25
    12a0:	ee 0f       	add	r30, r30
    12a2:	97 95       	ror	r25
    12a4:	87 95       	ror	r24
    12a6:	08 95       	ret

000012a8 <__divmodhi4>:
    12a8:	97 fb       	bst	r25, 7
    12aa:	07 2e       	mov	r0, r23
    12ac:	16 f4       	brtc	.+4      	; 0x12b2 <__divmodhi4+0xa>
    12ae:	00 94       	com	r0
    12b0:	07 d0       	rcall	.+14     	; 0x12c0 <__divmodhi4_neg1>
    12b2:	77 fd       	sbrc	r23, 7
    12b4:	09 d0       	rcall	.+18     	; 0x12c8 <__divmodhi4_neg2>
    12b6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__udivmodhi4>
    12ba:	07 fc       	sbrc	r0, 7
    12bc:	05 d0       	rcall	.+10     	; 0x12c8 <__divmodhi4_neg2>
    12be:	3e f4       	brtc	.+14     	; 0x12ce <__divmodhi4_exit>

000012c0 <__divmodhi4_neg1>:
    12c0:	90 95       	com	r25
    12c2:	81 95       	neg	r24
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	08 95       	ret

000012c8 <__divmodhi4_neg2>:
    12c8:	70 95       	com	r23
    12ca:	61 95       	neg	r22
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255

000012ce <__divmodhi4_exit>:
    12ce:	08 95       	ret

000012d0 <__udivmodhi4>:
    12d0:	aa 1b       	sub	r26, r26
    12d2:	bb 1b       	sub	r27, r27
    12d4:	51 e1       	ldi	r21, 0x11	; 17
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <__udivmodhi4_ep>

000012d8 <__udivmodhi4_loop>:
    12d8:	aa 1f       	adc	r26, r26
    12da:	bb 1f       	adc	r27, r27
    12dc:	a6 17       	cp	r26, r22
    12de:	b7 07       	cpc	r27, r23
    12e0:	10 f0       	brcs	.+4      	; 0x12e6 <__udivmodhi4_ep>
    12e2:	a6 1b       	sub	r26, r22
    12e4:	b7 0b       	sbc	r27, r23

000012e6 <__udivmodhi4_ep>:
    12e6:	88 1f       	adc	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	5a 95       	dec	r21
    12ec:	a9 f7       	brne	.-22     	; 0x12d8 <__udivmodhi4_loop>
    12ee:	80 95       	com	r24
    12f0:	90 95       	com	r25
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	08 95       	ret

000012f8 <malloc>:
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	91 05       	cpc	r25, r1
    1304:	10 f4       	brcc	.+4      	; 0x130a <malloc+0x12>
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__flp>
    130e:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__flp+0x1>
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	30 97       	sbiw	r30, 0x00	; 0
    131c:	19 f1       	breq	.+70     	; 0x1364 <malloc+0x6c>
    131e:	40 81       	ld	r20, Z
    1320:	51 81       	ldd	r21, Z+1	; 0x01
    1322:	02 81       	ldd	r16, Z+2	; 0x02
    1324:	13 81       	ldd	r17, Z+3	; 0x03
    1326:	48 17       	cp	r20, r24
    1328:	59 07       	cpc	r21, r25
    132a:	c8 f0       	brcs	.+50     	; 0x135e <malloc+0x66>
    132c:	84 17       	cp	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	69 f4       	brne	.+26     	; 0x134c <malloc+0x54>
    1332:	10 97       	sbiw	r26, 0x00	; 0
    1334:	31 f0       	breq	.+12     	; 0x1342 <malloc+0x4a>
    1336:	12 96       	adiw	r26, 0x02	; 2
    1338:	0c 93       	st	X, r16
    133a:	12 97       	sbiw	r26, 0x02	; 2
    133c:	13 96       	adiw	r26, 0x03	; 3
    133e:	1c 93       	st	X, r17
    1340:	27 c0       	rjmp	.+78     	; 0x1390 <malloc+0x98>
    1342:	00 93 02 02 	sts	0x0202, r16	; 0x800202 <__flp>
    1346:	10 93 03 02 	sts	0x0203, r17	; 0x800203 <__flp+0x1>
    134a:	22 c0       	rjmp	.+68     	; 0x1390 <malloc+0x98>
    134c:	21 15       	cp	r18, r1
    134e:	31 05       	cpc	r19, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <malloc+0x60>
    1352:	42 17       	cp	r20, r18
    1354:	53 07       	cpc	r21, r19
    1356:	18 f4       	brcc	.+6      	; 0x135e <malloc+0x66>
    1358:	9a 01       	movw	r18, r20
    135a:	bd 01       	movw	r22, r26
    135c:	ef 01       	movw	r28, r30
    135e:	df 01       	movw	r26, r30
    1360:	f8 01       	movw	r30, r16
    1362:	db cf       	rjmp	.-74     	; 0x131a <malloc+0x22>
    1364:	21 15       	cp	r18, r1
    1366:	31 05       	cpc	r19, r1
    1368:	f9 f0       	breq	.+62     	; 0x13a8 <malloc+0xb0>
    136a:	28 1b       	sub	r18, r24
    136c:	39 0b       	sbc	r19, r25
    136e:	24 30       	cpi	r18, 0x04	; 4
    1370:	31 05       	cpc	r19, r1
    1372:	80 f4       	brcc	.+32     	; 0x1394 <malloc+0x9c>
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	61 15       	cp	r22, r1
    137a:	71 05       	cpc	r23, r1
    137c:	21 f0       	breq	.+8      	; 0x1386 <malloc+0x8e>
    137e:	fb 01       	movw	r30, r22
    1380:	93 83       	std	Z+3, r25	; 0x03
    1382:	82 83       	std	Z+2, r24	; 0x02
    1384:	04 c0       	rjmp	.+8      	; 0x138e <malloc+0x96>
    1386:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__flp+0x1>
    138a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__flp>
    138e:	fe 01       	movw	r30, r28
    1390:	32 96       	adiw	r30, 0x02	; 2
    1392:	44 c0       	rjmp	.+136    	; 0x141c <malloc+0x124>
    1394:	fe 01       	movw	r30, r28
    1396:	e2 0f       	add	r30, r18
    1398:	f3 1f       	adc	r31, r19
    139a:	81 93       	st	Z+, r24
    139c:	91 93       	st	Z+, r25
    139e:	22 50       	subi	r18, 0x02	; 2
    13a0:	31 09       	sbc	r19, r1
    13a2:	39 83       	std	Y+1, r19	; 0x01
    13a4:	28 83       	st	Y, r18
    13a6:	3a c0       	rjmp	.+116    	; 0x141c <malloc+0x124>
    13a8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
    13ac:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
    13b0:	23 2b       	or	r18, r19
    13b2:	41 f4       	brne	.+16     	; 0x13c4 <malloc+0xcc>
    13b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    13b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13bc:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__brkval+0x1>
    13c0:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__brkval>
    13c4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13c8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13cc:	21 15       	cp	r18, r1
    13ce:	31 05       	cpc	r19, r1
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <malloc+0xea>
    13d2:	2d b7       	in	r18, 0x3d	; 61
    13d4:	3e b7       	in	r19, 0x3e	; 62
    13d6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13da:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13de:	24 1b       	sub	r18, r20
    13e0:	35 0b       	sbc	r19, r21
    13e2:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__brkval>
    13e6:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__brkval+0x1>
    13ea:	e2 17       	cp	r30, r18
    13ec:	f3 07       	cpc	r31, r19
    13ee:	a0 f4       	brcc	.+40     	; 0x1418 <malloc+0x120>
    13f0:	2e 1b       	sub	r18, r30
    13f2:	3f 0b       	sbc	r19, r31
    13f4:	28 17       	cp	r18, r24
    13f6:	39 07       	cpc	r19, r25
    13f8:	78 f0       	brcs	.+30     	; 0x1418 <malloc+0x120>
    13fa:	ac 01       	movw	r20, r24
    13fc:	4e 5f       	subi	r20, 0xFE	; 254
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	24 17       	cp	r18, r20
    1402:	35 07       	cpc	r19, r21
    1404:	48 f0       	brcs	.+18     	; 0x1418 <malloc+0x120>
    1406:	4e 0f       	add	r20, r30
    1408:	5f 1f       	adc	r21, r31
    140a:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__brkval+0x1>
    140e:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__brkval>
    1412:	81 93       	st	Z+, r24
    1414:	91 93       	st	Z+, r25
    1416:	02 c0       	rjmp	.+4      	; 0x141c <malloc+0x124>
    1418:	e0 e0       	ldi	r30, 0x00	; 0
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	cf 01       	movw	r24, r30
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	08 95       	ret

00001428 <free>:
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	09 f4       	brne	.+2      	; 0x1432 <free+0xa>
    1430:	81 c0       	rjmp	.+258    	; 0x1534 <free+0x10c>
    1432:	fc 01       	movw	r30, r24
    1434:	32 97       	sbiw	r30, 0x02	; 2
    1436:	13 82       	std	Z+3, r1	; 0x03
    1438:	12 82       	std	Z+2, r1	; 0x02
    143a:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__flp>
    143e:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__flp+0x1>
    1442:	10 97       	sbiw	r26, 0x00	; 0
    1444:	81 f4       	brne	.+32     	; 0x1466 <free+0x3e>
    1446:	20 81       	ld	r18, Z
    1448:	31 81       	ldd	r19, Z+1	; 0x01
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
    1452:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
    1456:	28 17       	cp	r18, r24
    1458:	39 07       	cpc	r19, r25
    145a:	51 f5       	brne	.+84     	; 0x14b0 <free+0x88>
    145c:	f0 93 01 02 	sts	0x0201, r31	; 0x800201 <__brkval+0x1>
    1460:	e0 93 00 02 	sts	0x0200, r30	; 0x800200 <__brkval>
    1464:	67 c0       	rjmp	.+206    	; 0x1534 <free+0x10c>
    1466:	ed 01       	movw	r28, r26
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	ce 17       	cp	r28, r30
    146e:	df 07       	cpc	r29, r31
    1470:	40 f4       	brcc	.+16     	; 0x1482 <free+0x5a>
    1472:	4a 81       	ldd	r20, Y+2	; 0x02
    1474:	5b 81       	ldd	r21, Y+3	; 0x03
    1476:	9e 01       	movw	r18, r28
    1478:	41 15       	cp	r20, r1
    147a:	51 05       	cpc	r21, r1
    147c:	f1 f0       	breq	.+60     	; 0x14ba <free+0x92>
    147e:	ea 01       	movw	r28, r20
    1480:	f5 cf       	rjmp	.-22     	; 0x146c <free+0x44>
    1482:	d3 83       	std	Z+3, r29	; 0x03
    1484:	c2 83       	std	Z+2, r28	; 0x02
    1486:	40 81       	ld	r20, Z
    1488:	51 81       	ldd	r21, Z+1	; 0x01
    148a:	84 0f       	add	r24, r20
    148c:	95 1f       	adc	r25, r21
    148e:	c8 17       	cp	r28, r24
    1490:	d9 07       	cpc	r29, r25
    1492:	59 f4       	brne	.+22     	; 0x14aa <free+0x82>
    1494:	88 81       	ld	r24, Y
    1496:	99 81       	ldd	r25, Y+1	; 0x01
    1498:	84 0f       	add	r24, r20
    149a:	95 1f       	adc	r25, r21
    149c:	02 96       	adiw	r24, 0x02	; 2
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	9b 81       	ldd	r25, Y+3	; 0x03
    14a6:	93 83       	std	Z+3, r25	; 0x03
    14a8:	82 83       	std	Z+2, r24	; 0x02
    14aa:	21 15       	cp	r18, r1
    14ac:	31 05       	cpc	r19, r1
    14ae:	29 f4       	brne	.+10     	; 0x14ba <free+0x92>
    14b0:	f0 93 03 02 	sts	0x0203, r31	; 0x800203 <__flp+0x1>
    14b4:	e0 93 02 02 	sts	0x0202, r30	; 0x800202 <__flp>
    14b8:	3d c0       	rjmp	.+122    	; 0x1534 <free+0x10c>
    14ba:	e9 01       	movw	r28, r18
    14bc:	fb 83       	std	Y+3, r31	; 0x03
    14be:	ea 83       	std	Y+2, r30	; 0x02
    14c0:	49 91       	ld	r20, Y+
    14c2:	59 91       	ld	r21, Y+
    14c4:	c4 0f       	add	r28, r20
    14c6:	d5 1f       	adc	r29, r21
    14c8:	ec 17       	cp	r30, r28
    14ca:	fd 07       	cpc	r31, r29
    14cc:	61 f4       	brne	.+24     	; 0x14e6 <free+0xbe>
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	84 0f       	add	r24, r20
    14d4:	95 1f       	adc	r25, r21
    14d6:	02 96       	adiw	r24, 0x02	; 2
    14d8:	e9 01       	movw	r28, r18
    14da:	99 83       	std	Y+1, r25	; 0x01
    14dc:	88 83       	st	Y, r24
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	9b 83       	std	Y+3, r25	; 0x03
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	e0 e0       	ldi	r30, 0x00	; 0
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	12 96       	adiw	r26, 0x02	; 2
    14ec:	8d 91       	ld	r24, X+
    14ee:	9c 91       	ld	r25, X
    14f0:	13 97       	sbiw	r26, 0x03	; 3
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	19 f0       	breq	.+6      	; 0x14fc <free+0xd4>
    14f6:	fd 01       	movw	r30, r26
    14f8:	dc 01       	movw	r26, r24
    14fa:	f7 cf       	rjmp	.-18     	; 0x14ea <free+0xc2>
    14fc:	8d 91       	ld	r24, X+
    14fe:	9c 91       	ld	r25, X
    1500:	11 97       	sbiw	r26, 0x01	; 1
    1502:	9d 01       	movw	r18, r26
    1504:	2e 5f       	subi	r18, 0xFE	; 254
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	82 0f       	add	r24, r18
    150a:	93 1f       	adc	r25, r19
    150c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
    1510:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
    1514:	28 17       	cp	r18, r24
    1516:	39 07       	cpc	r19, r25
    1518:	69 f4       	brne	.+26     	; 0x1534 <free+0x10c>
    151a:	30 97       	sbiw	r30, 0x00	; 0
    151c:	29 f4       	brne	.+10     	; 0x1528 <free+0x100>
    151e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__flp+0x1>
    1522:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__flp>
    1526:	02 c0       	rjmp	.+4      	; 0x152c <free+0x104>
    1528:	13 82       	std	Z+3, r1	; 0x03
    152a:	12 82       	std	Z+2, r1	; 0x02
    152c:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <__brkval+0x1>
    1530:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <__brkval>
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <strcpy>:
    153a:	fb 01       	movw	r30, r22
    153c:	dc 01       	movw	r26, r24
    153e:	01 90       	ld	r0, Z+
    1540:	0d 92       	st	X+, r0
    1542:	00 20       	and	r0, r0
    1544:	e1 f7       	brne	.-8      	; 0x153e <strcpy+0x4>
    1546:	08 95       	ret

00001548 <fdevopen>:
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	31 f4       	brne	.+12     	; 0x1560 <fdevopen+0x18>
    1554:	61 15       	cp	r22, r1
    1556:	71 05       	cpc	r23, r1
    1558:	19 f4       	brne	.+6      	; 0x1560 <fdevopen+0x18>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	3a c0       	rjmp	.+116    	; 0x15d4 <fdevopen+0x8c>
    1560:	8b 01       	movw	r16, r22
    1562:	ec 01       	movw	r28, r24
    1564:	6e e0       	ldi	r22, 0x0E	; 14
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <calloc>
    1570:	fc 01       	movw	r30, r24
    1572:	89 2b       	or	r24, r25
    1574:	91 f3       	breq	.-28     	; 0x155a <fdevopen+0x12>
    1576:	80 e8       	ldi	r24, 0x80	; 128
    1578:	83 83       	std	Z+3, r24	; 0x03
    157a:	01 15       	cp	r16, r1
    157c:	11 05       	cpc	r17, r1
    157e:	71 f0       	breq	.+28     	; 0x159c <fdevopen+0x54>
    1580:	13 87       	std	Z+11, r17	; 0x0b
    1582:	02 87       	std	Z+10, r16	; 0x0a
    1584:	81 e8       	ldi	r24, 0x81	; 129
    1586:	83 83       	std	Z+3, r24	; 0x03
    1588:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__iob>
    158c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__iob+0x1>
    1590:	89 2b       	or	r24, r25
    1592:	21 f4       	brne	.+8      	; 0x159c <fdevopen+0x54>
    1594:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <__iob+0x1>
    1598:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <__iob>
    159c:	20 97       	sbiw	r28, 0x00	; 0
    159e:	c9 f0       	breq	.+50     	; 0x15d2 <fdevopen+0x8a>
    15a0:	d1 87       	std	Z+9, r29	; 0x09
    15a2:	c0 87       	std	Z+8, r28	; 0x08
    15a4:	83 81       	ldd	r24, Z+3	; 0x03
    15a6:	82 60       	ori	r24, 0x02	; 2
    15a8:	83 83       	std	Z+3, r24	; 0x03
    15aa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__iob+0x2>
    15ae:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__iob+0x3>
    15b2:	89 2b       	or	r24, r25
    15b4:	71 f4       	brne	.+28     	; 0x15d2 <fdevopen+0x8a>
    15b6:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__iob+0x3>
    15ba:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__iob+0x2>
    15be:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__iob+0x4>
    15c2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__iob+0x5>
    15c6:	89 2b       	or	r24, r25
    15c8:	21 f4       	brne	.+8      	; 0x15d2 <fdevopen+0x8a>
    15ca:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__iob+0x5>
    15ce:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__iob+0x4>
    15d2:	cf 01       	movw	r24, r30
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	08 95       	ret

000015de <printf>:
    15de:	a0 e0       	ldi	r26, 0x00	; 0
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 ef       	ldi	r30, 0xF5	; 245
    15e4:	fa e0       	ldi	r31, 0x0A	; 10
    15e6:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__prologue_saves__+0x20>
    15ea:	ae 01       	movw	r20, r28
    15ec:	4b 5f       	subi	r20, 0xFB	; 251
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	fa 01       	movw	r30, r20
    15f2:	61 91       	ld	r22, Z+
    15f4:	71 91       	ld	r23, Z+
    15f6:	af 01       	movw	r20, r30
    15f8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__iob+0x2>
    15fc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__iob+0x3>
    1600:	0e 94 35 0b 	call	0x166a	; 0x166a <vfprintf>
    1604:	e2 e0       	ldi	r30, 0x02	; 2
    1606:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__epilogue_restores__+0x20>

0000160a <puts>:
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__iob+0x2>
    1616:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__iob+0x3>
    161a:	23 81       	ldd	r18, Z+3	; 0x03
    161c:	21 ff       	sbrs	r18, 1
    161e:	1b c0       	rjmp	.+54     	; 0x1656 <puts+0x4c>
    1620:	8c 01       	movw	r16, r24
    1622:	d0 e0       	ldi	r29, 0x00	; 0
    1624:	c0 e0       	ldi	r28, 0x00	; 0
    1626:	f8 01       	movw	r30, r16
    1628:	81 91       	ld	r24, Z+
    162a:	8f 01       	movw	r16, r30
    162c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__iob+0x2>
    1630:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__iob+0x3>
    1634:	db 01       	movw	r26, r22
    1636:	18 96       	adiw	r26, 0x08	; 8
    1638:	ed 91       	ld	r30, X+
    163a:	fc 91       	ld	r31, X
    163c:	19 97       	sbiw	r26, 0x09	; 9
    163e:	88 23       	and	r24, r24
    1640:	31 f0       	breq	.+12     	; 0x164e <puts+0x44>
    1642:	09 95       	icall
    1644:	89 2b       	or	r24, r25
    1646:	79 f3       	breq	.-34     	; 0x1626 <puts+0x1c>
    1648:	df ef       	ldi	r29, 0xFF	; 255
    164a:	cf ef       	ldi	r28, 0xFF	; 255
    164c:	ec cf       	rjmp	.-40     	; 0x1626 <puts+0x1c>
    164e:	8a e0       	ldi	r24, 0x0A	; 10
    1650:	09 95       	icall
    1652:	89 2b       	or	r24, r25
    1654:	19 f0       	breq	.+6      	; 0x165c <puts+0x52>
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	9f ef       	ldi	r25, 0xFF	; 255
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <puts+0x56>
    165c:	8d 2f       	mov	r24, r29
    165e:	9c 2f       	mov	r25, r28
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <vfprintf>:
    166a:	ab e0       	ldi	r26, 0x0B	; 11
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	fb e0       	ldi	r31, 0x0B	; 11
    1672:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__prologue_saves__>
    1676:	6c 01       	movw	r12, r24
    1678:	7b 01       	movw	r14, r22
    167a:	8a 01       	movw	r16, r20
    167c:	fc 01       	movw	r30, r24
    167e:	17 82       	std	Z+7, r1	; 0x07
    1680:	16 82       	std	Z+6, r1	; 0x06
    1682:	83 81       	ldd	r24, Z+3	; 0x03
    1684:	81 ff       	sbrs	r24, 1
    1686:	cc c1       	rjmp	.+920    	; 0x1a20 <vfprintf+0x3b6>
    1688:	ce 01       	movw	r24, r28
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	3c 01       	movw	r6, r24
    168e:	f6 01       	movw	r30, r12
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	f7 01       	movw	r30, r14
    1694:	93 fd       	sbrc	r25, 3
    1696:	85 91       	lpm	r24, Z+
    1698:	93 ff       	sbrs	r25, 3
    169a:	81 91       	ld	r24, Z+
    169c:	7f 01       	movw	r14, r30
    169e:	88 23       	and	r24, r24
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <vfprintf+0x3a>
    16a2:	ba c1       	rjmp	.+884    	; 0x1a18 <vfprintf+0x3ae>
    16a4:	85 32       	cpi	r24, 0x25	; 37
    16a6:	39 f4       	brne	.+14     	; 0x16b6 <vfprintf+0x4c>
    16a8:	93 fd       	sbrc	r25, 3
    16aa:	85 91       	lpm	r24, Z+
    16ac:	93 ff       	sbrs	r25, 3
    16ae:	81 91       	ld	r24, Z+
    16b0:	7f 01       	movw	r14, r30
    16b2:	85 32       	cpi	r24, 0x25	; 37
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <vfprintf+0x56>
    16b6:	b6 01       	movw	r22, r12
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    16be:	e7 cf       	rjmp	.-50     	; 0x168e <vfprintf+0x24>
    16c0:	91 2c       	mov	r9, r1
    16c2:	21 2c       	mov	r2, r1
    16c4:	31 2c       	mov	r3, r1
    16c6:	ff e1       	ldi	r31, 0x1F	; 31
    16c8:	f3 15       	cp	r31, r3
    16ca:	d8 f0       	brcs	.+54     	; 0x1702 <vfprintf+0x98>
    16cc:	8b 32       	cpi	r24, 0x2B	; 43
    16ce:	79 f0       	breq	.+30     	; 0x16ee <vfprintf+0x84>
    16d0:	38 f4       	brcc	.+14     	; 0x16e0 <vfprintf+0x76>
    16d2:	80 32       	cpi	r24, 0x20	; 32
    16d4:	79 f0       	breq	.+30     	; 0x16f4 <vfprintf+0x8a>
    16d6:	83 32       	cpi	r24, 0x23	; 35
    16d8:	a1 f4       	brne	.+40     	; 0x1702 <vfprintf+0x98>
    16da:	23 2d       	mov	r18, r3
    16dc:	20 61       	ori	r18, 0x10	; 16
    16de:	1d c0       	rjmp	.+58     	; 0x171a <vfprintf+0xb0>
    16e0:	8d 32       	cpi	r24, 0x2D	; 45
    16e2:	61 f0       	breq	.+24     	; 0x16fc <vfprintf+0x92>
    16e4:	80 33       	cpi	r24, 0x30	; 48
    16e6:	69 f4       	brne	.+26     	; 0x1702 <vfprintf+0x98>
    16e8:	23 2d       	mov	r18, r3
    16ea:	21 60       	ori	r18, 0x01	; 1
    16ec:	16 c0       	rjmp	.+44     	; 0x171a <vfprintf+0xb0>
    16ee:	83 2d       	mov	r24, r3
    16f0:	82 60       	ori	r24, 0x02	; 2
    16f2:	38 2e       	mov	r3, r24
    16f4:	e3 2d       	mov	r30, r3
    16f6:	e4 60       	ori	r30, 0x04	; 4
    16f8:	3e 2e       	mov	r3, r30
    16fa:	2a c0       	rjmp	.+84     	; 0x1750 <vfprintf+0xe6>
    16fc:	f3 2d       	mov	r31, r3
    16fe:	f8 60       	ori	r31, 0x08	; 8
    1700:	1d c0       	rjmp	.+58     	; 0x173c <vfprintf+0xd2>
    1702:	37 fc       	sbrc	r3, 7
    1704:	2d c0       	rjmp	.+90     	; 0x1760 <vfprintf+0xf6>
    1706:	20 ed       	ldi	r18, 0xD0	; 208
    1708:	28 0f       	add	r18, r24
    170a:	2a 30       	cpi	r18, 0x0A	; 10
    170c:	40 f0       	brcs	.+16     	; 0x171e <vfprintf+0xb4>
    170e:	8e 32       	cpi	r24, 0x2E	; 46
    1710:	b9 f4       	brne	.+46     	; 0x1740 <vfprintf+0xd6>
    1712:	36 fc       	sbrc	r3, 6
    1714:	81 c1       	rjmp	.+770    	; 0x1a18 <vfprintf+0x3ae>
    1716:	23 2d       	mov	r18, r3
    1718:	20 64       	ori	r18, 0x40	; 64
    171a:	32 2e       	mov	r3, r18
    171c:	19 c0       	rjmp	.+50     	; 0x1750 <vfprintf+0xe6>
    171e:	36 fe       	sbrs	r3, 6
    1720:	06 c0       	rjmp	.+12     	; 0x172e <vfprintf+0xc4>
    1722:	8a e0       	ldi	r24, 0x0A	; 10
    1724:	98 9e       	mul	r9, r24
    1726:	20 0d       	add	r18, r0
    1728:	11 24       	eor	r1, r1
    172a:	92 2e       	mov	r9, r18
    172c:	11 c0       	rjmp	.+34     	; 0x1750 <vfprintf+0xe6>
    172e:	ea e0       	ldi	r30, 0x0A	; 10
    1730:	2e 9e       	mul	r2, r30
    1732:	20 0d       	add	r18, r0
    1734:	11 24       	eor	r1, r1
    1736:	22 2e       	mov	r2, r18
    1738:	f3 2d       	mov	r31, r3
    173a:	f0 62       	ori	r31, 0x20	; 32
    173c:	3f 2e       	mov	r3, r31
    173e:	08 c0       	rjmp	.+16     	; 0x1750 <vfprintf+0xe6>
    1740:	8c 36       	cpi	r24, 0x6C	; 108
    1742:	21 f4       	brne	.+8      	; 0x174c <vfprintf+0xe2>
    1744:	83 2d       	mov	r24, r3
    1746:	80 68       	ori	r24, 0x80	; 128
    1748:	38 2e       	mov	r3, r24
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <vfprintf+0xe6>
    174c:	88 36       	cpi	r24, 0x68	; 104
    174e:	41 f4       	brne	.+16     	; 0x1760 <vfprintf+0xf6>
    1750:	f7 01       	movw	r30, r14
    1752:	93 fd       	sbrc	r25, 3
    1754:	85 91       	lpm	r24, Z+
    1756:	93 ff       	sbrs	r25, 3
    1758:	81 91       	ld	r24, Z+
    175a:	7f 01       	movw	r14, r30
    175c:	81 11       	cpse	r24, r1
    175e:	b3 cf       	rjmp	.-154    	; 0x16c6 <vfprintf+0x5c>
    1760:	98 2f       	mov	r25, r24
    1762:	9f 7d       	andi	r25, 0xDF	; 223
    1764:	95 54       	subi	r25, 0x45	; 69
    1766:	93 30       	cpi	r25, 0x03	; 3
    1768:	28 f4       	brcc	.+10     	; 0x1774 <vfprintf+0x10a>
    176a:	0c 5f       	subi	r16, 0xFC	; 252
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	9f e3       	ldi	r25, 0x3F	; 63
    1770:	99 83       	std	Y+1, r25	; 0x01
    1772:	0d c0       	rjmp	.+26     	; 0x178e <vfprintf+0x124>
    1774:	83 36       	cpi	r24, 0x63	; 99
    1776:	31 f0       	breq	.+12     	; 0x1784 <vfprintf+0x11a>
    1778:	83 37       	cpi	r24, 0x73	; 115
    177a:	71 f0       	breq	.+28     	; 0x1798 <vfprintf+0x12e>
    177c:	83 35       	cpi	r24, 0x53	; 83
    177e:	09 f0       	breq	.+2      	; 0x1782 <vfprintf+0x118>
    1780:	59 c0       	rjmp	.+178    	; 0x1834 <vfprintf+0x1ca>
    1782:	21 c0       	rjmp	.+66     	; 0x17c6 <vfprintf+0x15c>
    1784:	f8 01       	movw	r30, r16
    1786:	80 81       	ld	r24, Z
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	0e 5f       	subi	r16, 0xFE	; 254
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	88 24       	eor	r8, r8
    1790:	83 94       	inc	r8
    1792:	91 2c       	mov	r9, r1
    1794:	53 01       	movw	r10, r6
    1796:	13 c0       	rjmp	.+38     	; 0x17be <vfprintf+0x154>
    1798:	28 01       	movw	r4, r16
    179a:	f2 e0       	ldi	r31, 0x02	; 2
    179c:	4f 0e       	add	r4, r31
    179e:	51 1c       	adc	r5, r1
    17a0:	f8 01       	movw	r30, r16
    17a2:	a0 80       	ld	r10, Z
    17a4:	b1 80       	ldd	r11, Z+1	; 0x01
    17a6:	36 fe       	sbrs	r3, 6
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <vfprintf+0x146>
    17aa:	69 2d       	mov	r22, r9
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <vfprintf+0x14a>
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	7f ef       	ldi	r23, 0xFF	; 255
    17b4:	c5 01       	movw	r24, r10
    17b6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <strnlen>
    17ba:	4c 01       	movw	r8, r24
    17bc:	82 01       	movw	r16, r4
    17be:	f3 2d       	mov	r31, r3
    17c0:	ff 77       	andi	r31, 0x7F	; 127
    17c2:	3f 2e       	mov	r3, r31
    17c4:	16 c0       	rjmp	.+44     	; 0x17f2 <vfprintf+0x188>
    17c6:	28 01       	movw	r4, r16
    17c8:	22 e0       	ldi	r18, 0x02	; 2
    17ca:	42 0e       	add	r4, r18
    17cc:	51 1c       	adc	r5, r1
    17ce:	f8 01       	movw	r30, r16
    17d0:	a0 80       	ld	r10, Z
    17d2:	b1 80       	ldd	r11, Z+1	; 0x01
    17d4:	36 fe       	sbrs	r3, 6
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <vfprintf+0x174>
    17d8:	69 2d       	mov	r22, r9
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x178>
    17de:	6f ef       	ldi	r22, 0xFF	; 255
    17e0:	7f ef       	ldi	r23, 0xFF	; 255
    17e2:	c5 01       	movw	r24, r10
    17e4:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <strnlen_P>
    17e8:	4c 01       	movw	r8, r24
    17ea:	f3 2d       	mov	r31, r3
    17ec:	f0 68       	ori	r31, 0x80	; 128
    17ee:	3f 2e       	mov	r3, r31
    17f0:	82 01       	movw	r16, r4
    17f2:	33 fc       	sbrc	r3, 3
    17f4:	1b c0       	rjmp	.+54     	; 0x182c <vfprintf+0x1c2>
    17f6:	82 2d       	mov	r24, r2
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	88 16       	cp	r8, r24
    17fc:	99 06       	cpc	r9, r25
    17fe:	b0 f4       	brcc	.+44     	; 0x182c <vfprintf+0x1c2>
    1800:	b6 01       	movw	r22, r12
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    180a:	2a 94       	dec	r2
    180c:	f4 cf       	rjmp	.-24     	; 0x17f6 <vfprintf+0x18c>
    180e:	f5 01       	movw	r30, r10
    1810:	37 fc       	sbrc	r3, 7
    1812:	85 91       	lpm	r24, Z+
    1814:	37 fe       	sbrs	r3, 7
    1816:	81 91       	ld	r24, Z+
    1818:	5f 01       	movw	r10, r30
    181a:	b6 01       	movw	r22, r12
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    1822:	21 10       	cpse	r2, r1
    1824:	2a 94       	dec	r2
    1826:	21 e0       	ldi	r18, 0x01	; 1
    1828:	82 1a       	sub	r8, r18
    182a:	91 08       	sbc	r9, r1
    182c:	81 14       	cp	r8, r1
    182e:	91 04       	cpc	r9, r1
    1830:	71 f7       	brne	.-36     	; 0x180e <vfprintf+0x1a4>
    1832:	e8 c0       	rjmp	.+464    	; 0x1a04 <vfprintf+0x39a>
    1834:	84 36       	cpi	r24, 0x64	; 100
    1836:	11 f0       	breq	.+4      	; 0x183c <vfprintf+0x1d2>
    1838:	89 36       	cpi	r24, 0x69	; 105
    183a:	41 f5       	brne	.+80     	; 0x188c <vfprintf+0x222>
    183c:	f8 01       	movw	r30, r16
    183e:	37 fe       	sbrs	r3, 7
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <vfprintf+0x1e6>
    1842:	60 81       	ld	r22, Z
    1844:	71 81       	ldd	r23, Z+1	; 0x01
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	0c 5f       	subi	r16, 0xFC	; 252
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
    184e:	08 c0       	rjmp	.+16     	; 0x1860 <vfprintf+0x1f6>
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	07 2e       	mov	r0, r23
    1856:	00 0c       	add	r0, r0
    1858:	88 0b       	sbc	r24, r24
    185a:	99 0b       	sbc	r25, r25
    185c:	0e 5f       	subi	r16, 0xFE	; 254
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	f3 2d       	mov	r31, r3
    1862:	ff 76       	andi	r31, 0x6F	; 111
    1864:	3f 2e       	mov	r3, r31
    1866:	97 ff       	sbrs	r25, 7
    1868:	09 c0       	rjmp	.+18     	; 0x187c <vfprintf+0x212>
    186a:	90 95       	com	r25
    186c:	80 95       	com	r24
    186e:	70 95       	com	r23
    1870:	61 95       	neg	r22
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	8f 4f       	sbci	r24, 0xFF	; 255
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	f0 68       	ori	r31, 0x80	; 128
    187a:	3f 2e       	mov	r3, r31
    187c:	2a e0       	ldi	r18, 0x0A	; 10
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	a3 01       	movw	r20, r6
    1882:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__ultoa_invert>
    1886:	88 2e       	mov	r8, r24
    1888:	86 18       	sub	r8, r6
    188a:	45 c0       	rjmp	.+138    	; 0x1916 <vfprintf+0x2ac>
    188c:	85 37       	cpi	r24, 0x75	; 117
    188e:	31 f4       	brne	.+12     	; 0x189c <vfprintf+0x232>
    1890:	23 2d       	mov	r18, r3
    1892:	2f 7e       	andi	r18, 0xEF	; 239
    1894:	b2 2e       	mov	r11, r18
    1896:	2a e0       	ldi	r18, 0x0A	; 10
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	25 c0       	rjmp	.+74     	; 0x18e6 <vfprintf+0x27c>
    189c:	93 2d       	mov	r25, r3
    189e:	99 7f       	andi	r25, 0xF9	; 249
    18a0:	b9 2e       	mov	r11, r25
    18a2:	8f 36       	cpi	r24, 0x6F	; 111
    18a4:	c1 f0       	breq	.+48     	; 0x18d6 <vfprintf+0x26c>
    18a6:	18 f4       	brcc	.+6      	; 0x18ae <vfprintf+0x244>
    18a8:	88 35       	cpi	r24, 0x58	; 88
    18aa:	79 f0       	breq	.+30     	; 0x18ca <vfprintf+0x260>
    18ac:	b5 c0       	rjmp	.+362    	; 0x1a18 <vfprintf+0x3ae>
    18ae:	80 37       	cpi	r24, 0x70	; 112
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <vfprintf+0x24e>
    18b2:	88 37       	cpi	r24, 0x78	; 120
    18b4:	21 f0       	breq	.+8      	; 0x18be <vfprintf+0x254>
    18b6:	b0 c0       	rjmp	.+352    	; 0x1a18 <vfprintf+0x3ae>
    18b8:	e9 2f       	mov	r30, r25
    18ba:	e0 61       	ori	r30, 0x10	; 16
    18bc:	be 2e       	mov	r11, r30
    18be:	b4 fe       	sbrs	r11, 4
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <vfprintf+0x272>
    18c2:	fb 2d       	mov	r31, r11
    18c4:	f4 60       	ori	r31, 0x04	; 4
    18c6:	bf 2e       	mov	r11, r31
    18c8:	09 c0       	rjmp	.+18     	; 0x18dc <vfprintf+0x272>
    18ca:	34 fe       	sbrs	r3, 4
    18cc:	0a c0       	rjmp	.+20     	; 0x18e2 <vfprintf+0x278>
    18ce:	29 2f       	mov	r18, r25
    18d0:	26 60       	ori	r18, 0x06	; 6
    18d2:	b2 2e       	mov	r11, r18
    18d4:	06 c0       	rjmp	.+12     	; 0x18e2 <vfprintf+0x278>
    18d6:	28 e0       	ldi	r18, 0x08	; 8
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <vfprintf+0x27c>
    18dc:	20 e1       	ldi	r18, 0x10	; 16
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <vfprintf+0x27c>
    18e2:	20 e1       	ldi	r18, 0x10	; 16
    18e4:	32 e0       	ldi	r19, 0x02	; 2
    18e6:	f8 01       	movw	r30, r16
    18e8:	b7 fe       	sbrs	r11, 7
    18ea:	07 c0       	rjmp	.+14     	; 0x18fa <vfprintf+0x290>
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	0c 5f       	subi	r16, 0xFC	; 252
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <vfprintf+0x29c>
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 5f       	subi	r16, 0xFE	; 254
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	a3 01       	movw	r20, r6
    1908:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__ultoa_invert>
    190c:	88 2e       	mov	r8, r24
    190e:	86 18       	sub	r8, r6
    1910:	fb 2d       	mov	r31, r11
    1912:	ff 77       	andi	r31, 0x7F	; 127
    1914:	3f 2e       	mov	r3, r31
    1916:	36 fe       	sbrs	r3, 6
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <vfprintf+0x2ca>
    191a:	23 2d       	mov	r18, r3
    191c:	2e 7f       	andi	r18, 0xFE	; 254
    191e:	a2 2e       	mov	r10, r18
    1920:	89 14       	cp	r8, r9
    1922:	58 f4       	brcc	.+22     	; 0x193a <vfprintf+0x2d0>
    1924:	34 fe       	sbrs	r3, 4
    1926:	0b c0       	rjmp	.+22     	; 0x193e <vfprintf+0x2d4>
    1928:	32 fc       	sbrc	r3, 2
    192a:	09 c0       	rjmp	.+18     	; 0x193e <vfprintf+0x2d4>
    192c:	83 2d       	mov	r24, r3
    192e:	8e 7e       	andi	r24, 0xEE	; 238
    1930:	a8 2e       	mov	r10, r24
    1932:	05 c0       	rjmp	.+10     	; 0x193e <vfprintf+0x2d4>
    1934:	b8 2c       	mov	r11, r8
    1936:	a3 2c       	mov	r10, r3
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <vfprintf+0x2d6>
    193a:	b8 2c       	mov	r11, r8
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <vfprintf+0x2d6>
    193e:	b9 2c       	mov	r11, r9
    1940:	a4 fe       	sbrs	r10, 4
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <vfprintf+0x2f8>
    1944:	fe 01       	movw	r30, r28
    1946:	e8 0d       	add	r30, r8
    1948:	f1 1d       	adc	r31, r1
    194a:	80 81       	ld	r24, Z
    194c:	80 33       	cpi	r24, 0x30	; 48
    194e:	21 f4       	brne	.+8      	; 0x1958 <vfprintf+0x2ee>
    1950:	9a 2d       	mov	r25, r10
    1952:	99 7e       	andi	r25, 0xE9	; 233
    1954:	a9 2e       	mov	r10, r25
    1956:	09 c0       	rjmp	.+18     	; 0x196a <vfprintf+0x300>
    1958:	a2 fe       	sbrs	r10, 2
    195a:	06 c0       	rjmp	.+12     	; 0x1968 <vfprintf+0x2fe>
    195c:	b3 94       	inc	r11
    195e:	b3 94       	inc	r11
    1960:	04 c0       	rjmp	.+8      	; 0x196a <vfprintf+0x300>
    1962:	8a 2d       	mov	r24, r10
    1964:	86 78       	andi	r24, 0x86	; 134
    1966:	09 f0       	breq	.+2      	; 0x196a <vfprintf+0x300>
    1968:	b3 94       	inc	r11
    196a:	a3 fc       	sbrc	r10, 3
    196c:	11 c0       	rjmp	.+34     	; 0x1990 <vfprintf+0x326>
    196e:	a0 fe       	sbrs	r10, 0
    1970:	06 c0       	rjmp	.+12     	; 0x197e <vfprintf+0x314>
    1972:	b2 14       	cp	r11, r2
    1974:	88 f4       	brcc	.+34     	; 0x1998 <vfprintf+0x32e>
    1976:	28 0c       	add	r2, r8
    1978:	92 2c       	mov	r9, r2
    197a:	9b 18       	sub	r9, r11
    197c:	0e c0       	rjmp	.+28     	; 0x199a <vfprintf+0x330>
    197e:	b2 14       	cp	r11, r2
    1980:	60 f4       	brcc	.+24     	; 0x199a <vfprintf+0x330>
    1982:	b6 01       	movw	r22, r12
    1984:	80 e2       	ldi	r24, 0x20	; 32
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    198c:	b3 94       	inc	r11
    198e:	f7 cf       	rjmp	.-18     	; 0x197e <vfprintf+0x314>
    1990:	b2 14       	cp	r11, r2
    1992:	18 f4       	brcc	.+6      	; 0x199a <vfprintf+0x330>
    1994:	2b 18       	sub	r2, r11
    1996:	02 c0       	rjmp	.+4      	; 0x199c <vfprintf+0x332>
    1998:	98 2c       	mov	r9, r8
    199a:	21 2c       	mov	r2, r1
    199c:	a4 fe       	sbrs	r10, 4
    199e:	10 c0       	rjmp	.+32     	; 0x19c0 <vfprintf+0x356>
    19a0:	b6 01       	movw	r22, r12
    19a2:	80 e3       	ldi	r24, 0x30	; 48
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    19aa:	a2 fe       	sbrs	r10, 2
    19ac:	17 c0       	rjmp	.+46     	; 0x19dc <vfprintf+0x372>
    19ae:	a1 fc       	sbrc	r10, 1
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <vfprintf+0x34e>
    19b2:	88 e7       	ldi	r24, 0x78	; 120
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <vfprintf+0x352>
    19b8:	88 e5       	ldi	r24, 0x58	; 88
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	b6 01       	movw	r22, r12
    19be:	0c c0       	rjmp	.+24     	; 0x19d8 <vfprintf+0x36e>
    19c0:	8a 2d       	mov	r24, r10
    19c2:	86 78       	andi	r24, 0x86	; 134
    19c4:	59 f0       	breq	.+22     	; 0x19dc <vfprintf+0x372>
    19c6:	a1 fe       	sbrs	r10, 1
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <vfprintf+0x364>
    19ca:	8b e2       	ldi	r24, 0x2B	; 43
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <vfprintf+0x366>
    19ce:	80 e2       	ldi	r24, 0x20	; 32
    19d0:	a7 fc       	sbrc	r10, 7
    19d2:	8d e2       	ldi	r24, 0x2D	; 45
    19d4:	b6 01       	movw	r22, r12
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    19dc:	89 14       	cp	r8, r9
    19de:	38 f4       	brcc	.+14     	; 0x19ee <vfprintf+0x384>
    19e0:	b6 01       	movw	r22, r12
    19e2:	80 e3       	ldi	r24, 0x30	; 48
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    19ea:	9a 94       	dec	r9
    19ec:	f7 cf       	rjmp	.-18     	; 0x19dc <vfprintf+0x372>
    19ee:	8a 94       	dec	r8
    19f0:	f3 01       	movw	r30, r6
    19f2:	e8 0d       	add	r30, r8
    19f4:	f1 1d       	adc	r31, r1
    19f6:	80 81       	ld	r24, Z
    19f8:	b6 01       	movw	r22, r12
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    1a00:	81 10       	cpse	r8, r1
    1a02:	f5 cf       	rjmp	.-22     	; 0x19ee <vfprintf+0x384>
    1a04:	22 20       	and	r2, r2
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <vfprintf+0x3a0>
    1a08:	42 ce       	rjmp	.-892    	; 0x168e <vfprintf+0x24>
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	80 e2       	ldi	r24, 0x20	; 32
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <fputc>
    1a14:	2a 94       	dec	r2
    1a16:	f6 cf       	rjmp	.-20     	; 0x1a04 <vfprintf+0x39a>
    1a18:	f6 01       	movw	r30, r12
    1a1a:	86 81       	ldd	r24, Z+6	; 0x06
    1a1c:	97 81       	ldd	r25, Z+7	; 0x07
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <vfprintf+0x3ba>
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	9f ef       	ldi	r25, 0xFF	; 255
    1a24:	2b 96       	adiw	r28, 0x0b	; 11
    1a26:	e2 e1       	ldi	r30, 0x12	; 18
    1a28:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__epilogue_restores__>

00001a2c <calloc>:
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	86 9f       	mul	r24, r22
    1a36:	80 01       	movw	r16, r0
    1a38:	87 9f       	mul	r24, r23
    1a3a:	10 0d       	add	r17, r0
    1a3c:	96 9f       	mul	r25, r22
    1a3e:	10 0d       	add	r17, r0
    1a40:	11 24       	eor	r1, r1
    1a42:	c8 01       	movw	r24, r16
    1a44:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <malloc>
    1a48:	ec 01       	movw	r28, r24
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	29 f0       	breq	.+10     	; 0x1a58 <calloc+0x2c>
    1a4e:	a8 01       	movw	r20, r16
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <memset>
    1a58:	ce 01       	movw	r24, r28
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	08 95       	ret

00001a64 <strnlen_P>:
    1a64:	fc 01       	movw	r30, r24
    1a66:	05 90       	lpm	r0, Z+
    1a68:	61 50       	subi	r22, 0x01	; 1
    1a6a:	70 40       	sbci	r23, 0x00	; 0
    1a6c:	01 10       	cpse	r0, r1
    1a6e:	d8 f7       	brcc	.-10     	; 0x1a66 <strnlen_P+0x2>
    1a70:	80 95       	com	r24
    1a72:	90 95       	com	r25
    1a74:	8e 0f       	add	r24, r30
    1a76:	9f 1f       	adc	r25, r31
    1a78:	08 95       	ret

00001a7a <memset>:
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <memset+0x6>
    1a7e:	6d 93       	st	X+, r22
    1a80:	41 50       	subi	r20, 0x01	; 1
    1a82:	50 40       	sbci	r21, 0x00	; 0
    1a84:	e0 f7       	brcc	.-8      	; 0x1a7e <memset+0x4>
    1a86:	08 95       	ret

00001a88 <strnlen>:
    1a88:	fc 01       	movw	r30, r24
    1a8a:	61 50       	subi	r22, 0x01	; 1
    1a8c:	70 40       	sbci	r23, 0x00	; 0
    1a8e:	01 90       	ld	r0, Z+
    1a90:	01 10       	cpse	r0, r1
    1a92:	d8 f7       	brcc	.-10     	; 0x1a8a <strnlen+0x2>
    1a94:	80 95       	com	r24
    1a96:	90 95       	com	r25
    1a98:	8e 0f       	add	r24, r30
    1a9a:	9f 1f       	adc	r25, r31
    1a9c:	08 95       	ret

00001a9e <fputc>:
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	fb 01       	movw	r30, r22
    1aa8:	23 81       	ldd	r18, Z+3	; 0x03
    1aaa:	21 fd       	sbrc	r18, 1
    1aac:	03 c0       	rjmp	.+6      	; 0x1ab4 <fputc+0x16>
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	9f ef       	ldi	r25, 0xFF	; 255
    1ab2:	2c c0       	rjmp	.+88     	; 0x1b0c <fputc+0x6e>
    1ab4:	22 ff       	sbrs	r18, 2
    1ab6:	16 c0       	rjmp	.+44     	; 0x1ae4 <fputc+0x46>
    1ab8:	46 81       	ldd	r20, Z+6	; 0x06
    1aba:	57 81       	ldd	r21, Z+7	; 0x07
    1abc:	24 81       	ldd	r18, Z+4	; 0x04
    1abe:	35 81       	ldd	r19, Z+5	; 0x05
    1ac0:	42 17       	cp	r20, r18
    1ac2:	53 07       	cpc	r21, r19
    1ac4:	44 f4       	brge	.+16     	; 0x1ad6 <fputc+0x38>
    1ac6:	a0 81       	ld	r26, Z
    1ac8:	b1 81       	ldd	r27, Z+1	; 0x01
    1aca:	9d 01       	movw	r18, r26
    1acc:	2f 5f       	subi	r18, 0xFF	; 255
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	31 83       	std	Z+1, r19	; 0x01
    1ad2:	20 83       	st	Z, r18
    1ad4:	8c 93       	st	X, r24
    1ad6:	26 81       	ldd	r18, Z+6	; 0x06
    1ad8:	37 81       	ldd	r19, Z+7	; 0x07
    1ada:	2f 5f       	subi	r18, 0xFF	; 255
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	37 83       	std	Z+7, r19	; 0x07
    1ae0:	26 83       	std	Z+6, r18	; 0x06
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <fputc+0x6e>
    1ae4:	8b 01       	movw	r16, r22
    1ae6:	ec 01       	movw	r28, r24
    1ae8:	fb 01       	movw	r30, r22
    1aea:	00 84       	ldd	r0, Z+8	; 0x08
    1aec:	f1 85       	ldd	r31, Z+9	; 0x09
    1aee:	e0 2d       	mov	r30, r0
    1af0:	09 95       	icall
    1af2:	89 2b       	or	r24, r25
    1af4:	e1 f6       	brne	.-72     	; 0x1aae <fputc+0x10>
    1af6:	d8 01       	movw	r26, r16
    1af8:	16 96       	adiw	r26, 0x06	; 6
    1afa:	8d 91       	ld	r24, X+
    1afc:	9c 91       	ld	r25, X
    1afe:	17 97       	sbiw	r26, 0x07	; 7
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	17 96       	adiw	r26, 0x07	; 7
    1b04:	9c 93       	st	X, r25
    1b06:	8e 93       	st	-X, r24
    1b08:	16 97       	sbiw	r26, 0x06	; 6
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	08 95       	ret

00001b16 <__ultoa_invert>:
    1b16:	fa 01       	movw	r30, r20
    1b18:	aa 27       	eor	r26, r26
    1b1a:	28 30       	cpi	r18, 0x08	; 8
    1b1c:	51 f1       	breq	.+84     	; 0x1b72 <__ultoa_invert+0x5c>
    1b1e:	20 31       	cpi	r18, 0x10	; 16
    1b20:	81 f1       	breq	.+96     	; 0x1b82 <__ultoa_invert+0x6c>
    1b22:	e8 94       	clt
    1b24:	6f 93       	push	r22
    1b26:	6e 7f       	andi	r22, 0xFE	; 254
    1b28:	6e 5f       	subi	r22, 0xFE	; 254
    1b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b30:	af 4f       	sbci	r26, 0xFF	; 255
    1b32:	b1 e0       	ldi	r27, 0x01	; 1
    1b34:	3e d0       	rcall	.+124    	; 0x1bb2 <__ultoa_invert+0x9c>
    1b36:	b4 e0       	ldi	r27, 0x04	; 4
    1b38:	3c d0       	rcall	.+120    	; 0x1bb2 <__ultoa_invert+0x9c>
    1b3a:	67 0f       	add	r22, r23
    1b3c:	78 1f       	adc	r23, r24
    1b3e:	89 1f       	adc	r24, r25
    1b40:	9a 1f       	adc	r25, r26
    1b42:	a1 1d       	adc	r26, r1
    1b44:	68 0f       	add	r22, r24
    1b46:	79 1f       	adc	r23, r25
    1b48:	8a 1f       	adc	r24, r26
    1b4a:	91 1d       	adc	r25, r1
    1b4c:	a1 1d       	adc	r26, r1
    1b4e:	6a 0f       	add	r22, r26
    1b50:	71 1d       	adc	r23, r1
    1b52:	81 1d       	adc	r24, r1
    1b54:	91 1d       	adc	r25, r1
    1b56:	a1 1d       	adc	r26, r1
    1b58:	20 d0       	rcall	.+64     	; 0x1b9a <__ultoa_invert+0x84>
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <__ultoa_invert+0x48>
    1b5c:	68 94       	set
    1b5e:	3f 91       	pop	r19
    1b60:	2a e0       	ldi	r18, 0x0A	; 10
    1b62:	26 9f       	mul	r18, r22
    1b64:	11 24       	eor	r1, r1
    1b66:	30 19       	sub	r19, r0
    1b68:	30 5d       	subi	r19, 0xD0	; 208
    1b6a:	31 93       	st	Z+, r19
    1b6c:	de f6       	brtc	.-74     	; 0x1b24 <__ultoa_invert+0xe>
    1b6e:	cf 01       	movw	r24, r30
    1b70:	08 95       	ret
    1b72:	46 2f       	mov	r20, r22
    1b74:	47 70       	andi	r20, 0x07	; 7
    1b76:	40 5d       	subi	r20, 0xD0	; 208
    1b78:	41 93       	st	Z+, r20
    1b7a:	b3 e0       	ldi	r27, 0x03	; 3
    1b7c:	0f d0       	rcall	.+30     	; 0x1b9c <__ultoa_invert+0x86>
    1b7e:	c9 f7       	brne	.-14     	; 0x1b72 <__ultoa_invert+0x5c>
    1b80:	f6 cf       	rjmp	.-20     	; 0x1b6e <__ultoa_invert+0x58>
    1b82:	46 2f       	mov	r20, r22
    1b84:	4f 70       	andi	r20, 0x0F	; 15
    1b86:	40 5d       	subi	r20, 0xD0	; 208
    1b88:	4a 33       	cpi	r20, 0x3A	; 58
    1b8a:	18 f0       	brcs	.+6      	; 0x1b92 <__ultoa_invert+0x7c>
    1b8c:	49 5d       	subi	r20, 0xD9	; 217
    1b8e:	31 fd       	sbrc	r19, 1
    1b90:	40 52       	subi	r20, 0x20	; 32
    1b92:	41 93       	st	Z+, r20
    1b94:	02 d0       	rcall	.+4      	; 0x1b9a <__ultoa_invert+0x84>
    1b96:	a9 f7       	brne	.-22     	; 0x1b82 <__ultoa_invert+0x6c>
    1b98:	ea cf       	rjmp	.-44     	; 0x1b6e <__ultoa_invert+0x58>
    1b9a:	b4 e0       	ldi	r27, 0x04	; 4
    1b9c:	a6 95       	lsr	r26
    1b9e:	97 95       	ror	r25
    1ba0:	87 95       	ror	r24
    1ba2:	77 95       	ror	r23
    1ba4:	67 95       	ror	r22
    1ba6:	ba 95       	dec	r27
    1ba8:	c9 f7       	brne	.-14     	; 0x1b9c <__ultoa_invert+0x86>
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	61 05       	cpc	r22, r1
    1bae:	71 05       	cpc	r23, r1
    1bb0:	08 95       	ret
    1bb2:	9b 01       	movw	r18, r22
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	0a 2e       	mov	r0, r26
    1bb8:	06 94       	lsr	r0
    1bba:	57 95       	ror	r21
    1bbc:	47 95       	ror	r20
    1bbe:	37 95       	ror	r19
    1bc0:	27 95       	ror	r18
    1bc2:	ba 95       	dec	r27
    1bc4:	c9 f7       	brne	.-14     	; 0x1bb8 <__ultoa_invert+0xa2>
    1bc6:	62 0f       	add	r22, r18
    1bc8:	73 1f       	adc	r23, r19
    1bca:	84 1f       	adc	r24, r20
    1bcc:	95 1f       	adc	r25, r21
    1bce:	a0 1d       	adc	r26, r0
    1bd0:	08 95       	ret

00001bd2 <__prologue_saves__>:
    1bd2:	2f 92       	push	r2
    1bd4:	3f 92       	push	r3
    1bd6:	4f 92       	push	r4
    1bd8:	5f 92       	push	r5
    1bda:	6f 92       	push	r6
    1bdc:	7f 92       	push	r7
    1bde:	8f 92       	push	r8
    1be0:	9f 92       	push	r9
    1be2:	af 92       	push	r10
    1be4:	bf 92       	push	r11
    1be6:	cf 92       	push	r12
    1be8:	df 92       	push	r13
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	ca 1b       	sub	r28, r26
    1bfc:	db 0b       	sbc	r29, r27
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	09 94       	ijmp

00001c0a <__epilogue_restores__>:
    1c0a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c0c:	39 88       	ldd	r3, Y+17	; 0x11
    1c0e:	48 88       	ldd	r4, Y+16	; 0x10
    1c10:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c12:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c14:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c16:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c18:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c1c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c1e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c20:	df 80       	ldd	r13, Y+7	; 0x07
    1c22:	ee 80       	ldd	r14, Y+6	; 0x06
    1c24:	fd 80       	ldd	r15, Y+5	; 0x05
    1c26:	0c 81       	ldd	r16, Y+4	; 0x04
    1c28:	1b 81       	ldd	r17, Y+3	; 0x03
    1c2a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c2c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c2e:	ce 0f       	add	r28, r30
    1c30:	d1 1d       	adc	r29, r1
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	ed 01       	movw	r28, r26
    1c3e:	08 95       	ret

00001c40 <_exit>:
    1c40:	f8 94       	cli

00001c42 <__stop_program>:
    1c42:	ff cf       	rjmp	.-2      	; 0x1c42 <__stop_program>
