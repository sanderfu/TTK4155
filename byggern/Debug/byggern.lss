
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00000d06  00000d9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800208  00800208  00000ea2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8c  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000528  00000000  00000000  00002447  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027f  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000031bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e0       	ldi	r30, 0x06	; 6
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 30       	cpi	r26, 0x08	; 8
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 e0       	ldi	r26, 0x08	; 8
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 31       	cpi	r26, 0x14	; 20
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  a6:	0c 94 81 06 	jmp	0xd02	; 0xd02 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <SRAM_test>:
#include "uart.h"
#include <stdlib.h>
#include "xmem.h"

void SRAM_test(void)
{
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
uint16_t retrieval_errors = 0;
printf("Starting SRAM test...\n");
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <puts>
// rand() stores some internal state, so calling this function in a loop will
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
  c6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <rand>
  ca:	7c 01       	movw	r14, r24
// Write phase: Immediately check that the correct value was stored
srand(seed);
  cc:	0e 94 76 01 	call	0x2ec	; 0x2ec <srand>
for (uint16_t i = 0; i < ext_ram_size; i++) {
  d0:	c1 2c       	mov	r12, r1
  d2:	d1 2c       	mov	r13, r1

void SRAM_test(void)
{
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	10 e0       	ldi	r17, 0x00	; 0
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
ext_ram[i] = some_value;
uint8_t retreived_value = ext_ram[i];
if (retreived_value != some_value) {
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  d8:	c0 e2       	ldi	r28, 0x20	; 32
  da:	d1 e0       	ldi	r29, 0x01	; 1
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
// Write phase: Immediately check that the correct value was stored
srand(seed);
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
  dc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <rand>
  e0:	f6 01       	movw	r30, r12
  e2:	f8 5e       	subi	r31, 0xE8	; 232
ext_ram[i] = some_value;
  e4:	80 83       	st	Z, r24
uint8_t retreived_value = ext_ram[i];
  e6:	20 81       	ld	r18, Z
if (retreived_value != some_value) {
  e8:	28 17       	cp	r18, r24
  ea:	a9 f0       	breq	.+42     	; 0x116 <SRAM_test+0x68>
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  ec:	99 27       	eor	r25, r25
  ee:	9f 93       	push	r25
  f0:	8f 93       	push	r24
  f2:	1f 92       	push	r1
  f4:	2f 93       	push	r18
  f6:	df 92       	push	r13
  f8:	cf 92       	push	r12
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	0e 94 cc 01 	call	0x398	; 0x398 <printf>
write_errors++;
 102:	0f 5f       	subi	r16, 0xFF	; 255
 104:	1f 4f       	sbci	r17, 0xFF	; 255
 106:	8d b7       	in	r24, 0x3d	; 61
 108:	9e b7       	in	r25, 0x3e	; 62
 10a:	08 96       	adiw	r24, 0x08	; 8
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	9e bf       	out	0x3e, r25	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	8d bf       	out	0x3d, r24	; 61
// rand() stores some internal state, so calling this function in a loop will
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
// Write phase: Immediately check that the correct value was stored
srand(seed);
for (uint16_t i = 0; i < ext_ram_size; i++) {
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	c9 1a       	sub	r12, r25
 11a:	d9 0a       	sbc	r13, r25
 11c:	c1 14       	cp	r12, r1
 11e:	88 e0       	ldi	r24, 0x08	; 8
 120:	d8 06       	cpc	r13, r24
 122:	e1 f6       	brne	.-72     	; 0xdc <SRAM_test+0x2e>
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
write_errors++;
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
 124:	c7 01       	movw	r24, r14
 126:	0e 94 76 01 	call	0x2ec	; 0x2ec <srand>
for (uint16_t i = 0; i < ext_ram_size; i++) {
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
uint16_t retrieval_errors = 0;
 12e:	e1 2c       	mov	r14, r1
 130:	f1 2c       	mov	r15, r1
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
uint8_t retreived_value = ext_ram[i];
if (retreived_value != some_value) {
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",
 132:	0f 2e       	mov	r0, r31
 134:	f9 e5       	ldi	r31, 0x59	; 89
 136:	cf 2e       	mov	r12, r31
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	df 2e       	mov	r13, r31
 13c:	f0 2d       	mov	r31, r0
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
 13e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <rand>
 142:	fe 01       	movw	r30, r28
 144:	f8 5e       	subi	r31, 0xE8	; 232
uint8_t retreived_value = ext_ram[i];
 146:	20 81       	ld	r18, Z
if (retreived_value != some_value) {
 148:	28 17       	cp	r18, r24
 14a:	b1 f0       	breq	.+44     	; 0x178 <SRAM_test+0xca>
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",
 14c:	99 27       	eor	r25, r25
 14e:	9f 93       	push	r25
 150:	8f 93       	push	r24
 152:	1f 92       	push	r1
 154:	2f 93       	push	r18
 156:	df 93       	push	r29
 158:	cf 93       	push	r28
 15a:	df 92       	push	r13
 15c:	cf 92       	push	r12
 15e:	0e 94 cc 01 	call	0x398	; 0x398 <printf>
i, retreived_value, some_value);
retrieval_errors++;
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	e9 1a       	sub	r14, r25
 166:	f9 0a       	sbc	r15, r25
 168:	8d b7       	in	r24, 0x3d	; 61
 16a:	9e b7       	in	r25, 0x3e	; 62
 16c:	08 96       	adiw	r24, 0x08	; 8
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	9e bf       	out	0x3e, r25	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	8d bf       	out	0x3d, r24	; 61
write_errors++;
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	c1 15       	cp	r28, r1
 17c:	98 e0       	ldi	r25, 0x08	; 8
 17e:	d9 07       	cpc	r29, r25
 180:	f1 f6       	brne	.-68     	; 0x13e <SRAM_test+0x90>
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",
i, retreived_value, some_value);
retrieval_errors++;
}
}
printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 182:	ff 92       	push	r15
 184:	ef 92       	push	r14
 186:	1f 93       	push	r17
 188:	0f 93       	push	r16
 18a:	86 e9       	ldi	r24, 0x96	; 150
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	0e 94 cc 01 	call	0x398	; 0x398 <printf>
}
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	08 95       	ret

000001b4 <main>:

int main(void)
{
	xmem_init();
 1b4:	0e 94 1a 01 	call	0x234	; 0x234 <xmem_init>
	USART_init(MYUBRR);
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 09 01 	call	0x212	; 0x212 <USART_init>
	
	//xmemWrite(0x51, 0x183E); //sram
	//xmemWrite(0x1400);
	SRAM_test();
 1c0:	0e 94 57 00 	call	0xae	; 0xae <SRAM_test>
	printf("Hello, world!\n\r");
 1c4:	8f ee       	ldi	r24, 0xEF	; 239
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	9f 93       	push	r25
 1ca:	8f 93       	push	r24
 1cc:	0e 94 cc 01 	call	0x398	; 0x398 <printf>
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
		
		//sram test
		xmemWrite(0x51, 0x180E);
		//printf("Read from SRAM: %i\r\n", xmemRead(0x183E));
		//xmemWrite(0x51, 0x103E);
		printf("hello\n\r");
 1d4:	cf ef       	ldi	r28, 0xFF	; 255
 1d6:	d1 e0       	ldi	r29, 0x01	; 1
	SRAM_test();
	printf("Hello, world!\n\r");
	while (1) {
		
		//sram test
		xmemWrite(0x51, 0x180E);
 1d8:	6e e0       	ldi	r22, 0x0E	; 14
 1da:	78 e1       	ldi	r23, 0x18	; 24
 1dc:	81 e5       	ldi	r24, 0x51	; 81
 1de:	0e 94 21 01 	call	0x242	; 0x242 <xmemWrite>
		//printf("Read from SRAM: %i\r\n", xmemRead(0x183E));
		//xmemWrite(0x51, 0x103E);
		printf("hello\n\r");
 1e2:	df 93       	push	r29
 1e4:	cf 93       	push	r28
 1e6:	0e 94 cc 01 	call	0x398	; 0x398 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	2f e7       	ldi	r18, 0x7F	; 127
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	91 50       	subi	r25, 0x01	; 1
 1f2:	20 40       	sbci	r18, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x3c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x46>
 1fa:	00 00       	nop
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	eb cf       	rjmp	.-42     	; 0x1d8 <main+0x24>

00000202 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
 202:	5d 9b       	sbis	0x0b, 5	; 11
 204:	fe cf       	rjmp	.-4      	; 0x202 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
 206:	8c b9       	out	0x0c, r24	; 12
 208:	08 95       	ret

0000020a <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
 20a:	5f 9b       	sbis	0x0b, 7	; 11
 20c:	fe cf       	rjmp	.-4      	; 0x20a <USART_receiveChar>
		;
	
	return UDR0;
 20e:	8c b1       	in	r24, 0x0c	; 12
 210:	08 95       	ret

00000212 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
 212:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
 214:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 21a:	8e e8       	ldi	r24, 0x8E	; 142
 21c:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
 21e:	65 e0       	ldi	r22, 0x05	; 5
 220:	71 e0       	ldi	r23, 0x01	; 1
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 81 01 	call	0x302	; 0x302 <fdevopen>
 22a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 22e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
 232:	08 95       	ret

00000234 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
 234:	85 b7       	in	r24, 0x35	; 53
 236:	80 68       	ori	r24, 0x80	; 128
 238:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
 23a:	80 b7       	in	r24, 0x30	; 48
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	80 bf       	out	0x30, r24	; 48
 240:	08 95       	ret

00000242 <xmemWrite>:
}

void xmemWrite(uint8_t data, uint16_t addr) {
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[addr] = data;
 242:	fb 01       	movw	r30, r22
 244:	f0 5f       	subi	r31, 0xF0	; 240
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <do_rand>:
 24a:	8f 92       	push	r8
 24c:	9f 92       	push	r9
 24e:	af 92       	push	r10
 250:	bf 92       	push	r11
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	68 81       	ld	r22, Y
 262:	79 81       	ldd	r23, Y+1	; 0x01
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	9b 81       	ldd	r25, Y+3	; 0x03
 268:	61 15       	cp	r22, r1
 26a:	71 05       	cpc	r23, r1
 26c:	81 05       	cpc	r24, r1
 26e:	91 05       	cpc	r25, r1
 270:	21 f4       	brne	.+8      	; 0x27a <do_rand+0x30>
 272:	64 e2       	ldi	r22, 0x24	; 36
 274:	79 ed       	ldi	r23, 0xD9	; 217
 276:	8b e5       	ldi	r24, 0x5B	; 91
 278:	97 e0       	ldi	r25, 0x07	; 7
 27a:	2d e1       	ldi	r18, 0x1D	; 29
 27c:	33 ef       	ldi	r19, 0xF3	; 243
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	0e 94 e7 05 	call	0xbce	; 0xbce <__divmodsi4>
 286:	49 01       	movw	r8, r18
 288:	5a 01       	movw	r10, r20
 28a:	9b 01       	movw	r18, r22
 28c:	ac 01       	movw	r20, r24
 28e:	a7 ea       	ldi	r26, 0xA7	; 167
 290:	b1 e4       	ldi	r27, 0x41	; 65
 292:	0e 94 06 06 	call	0xc0c	; 0xc0c <__muluhisi3>
 296:	6b 01       	movw	r12, r22
 298:	7c 01       	movw	r14, r24
 29a:	ac ee       	ldi	r26, 0xEC	; 236
 29c:	b4 ef       	ldi	r27, 0xF4	; 244
 29e:	a5 01       	movw	r20, r10
 2a0:	94 01       	movw	r18, r8
 2a2:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulohisi3>
 2a6:	dc 01       	movw	r26, r24
 2a8:	cb 01       	movw	r24, r22
 2aa:	8c 0d       	add	r24, r12
 2ac:	9d 1d       	adc	r25, r13
 2ae:	ae 1d       	adc	r26, r14
 2b0:	bf 1d       	adc	r27, r15
 2b2:	b7 ff       	sbrs	r27, 7
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <do_rand+0x72>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	a1 09       	sbc	r26, r1
 2ba:	b0 48       	sbci	r27, 0x80	; 128
 2bc:	88 83       	st	Y, r24
 2be:	99 83       	std	Y+1, r25	; 0x01
 2c0:	aa 83       	std	Y+2, r26	; 0x02
 2c2:	bb 83       	std	Y+3, r27	; 0x03
 2c4:	9f 77       	andi	r25, 0x7F	; 127
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	bf 90       	pop	r11
 2d4:	af 90       	pop	r10
 2d6:	9f 90       	pop	r9
 2d8:	8f 90       	pop	r8
 2da:	08 95       	ret

000002dc <rand_r>:
 2dc:	0e 94 25 01 	call	0x24a	; 0x24a <do_rand>
 2e0:	08 95       	ret

000002e2 <rand>:
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 25 01 	call	0x24a	; 0x24a <do_rand>
 2ea:	08 95       	ret

000002ec <srand>:
 2ec:	a0 e0       	ldi	r26, 0x00	; 0
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2f8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2fc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 300:	08 95       	ret

00000302 <fdevopen>:
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	31 f4       	brne	.+12     	; 0x31a <fdevopen+0x18>
 30e:	61 15       	cp	r22, r1
 310:	71 05       	cpc	r23, r1
 312:	19 f4       	brne	.+6      	; 0x31a <fdevopen+0x18>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	3a c0       	rjmp	.+116    	; 0x38e <fdevopen+0x8c>
 31a:	8b 01       	movw	r16, r22
 31c:	ec 01       	movw	r28, r24
 31e:	6e e0       	ldi	r22, 0x0E	; 14
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <calloc>
 32a:	fc 01       	movw	r30, r24
 32c:	89 2b       	or	r24, r25
 32e:	91 f3       	breq	.-28     	; 0x314 <fdevopen+0x12>
 330:	80 e8       	ldi	r24, 0x80	; 128
 332:	83 83       	std	Z+3, r24	; 0x03
 334:	01 15       	cp	r16, r1
 336:	11 05       	cpc	r17, r1
 338:	71 f0       	breq	.+28     	; 0x356 <fdevopen+0x54>
 33a:	13 87       	std	Z+11, r17	; 0x0b
 33c:	02 87       	std	Z+10, r16	; 0x0a
 33e:	81 e8       	ldi	r24, 0x81	; 129
 340:	83 83       	std	Z+3, r24	; 0x03
 342:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__iob>
 346:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__iob+0x1>
 34a:	89 2b       	or	r24, r25
 34c:	21 f4       	brne	.+8      	; 0x356 <fdevopen+0x54>
 34e:	f0 93 0b 02 	sts	0x020B, r31	; 0x80020b <__iob+0x1>
 352:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <__iob>
 356:	20 97       	sbiw	r28, 0x00	; 0
 358:	c9 f0       	breq	.+50     	; 0x38c <fdevopen+0x8a>
 35a:	d1 87       	std	Z+9, r29	; 0x09
 35c:	c0 87       	std	Z+8, r28	; 0x08
 35e:	83 81       	ldd	r24, Z+3	; 0x03
 360:	82 60       	ori	r24, 0x02	; 2
 362:	83 83       	std	Z+3, r24	; 0x03
 364:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__iob+0x2>
 368:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__iob+0x3>
 36c:	89 2b       	or	r24, r25
 36e:	71 f4       	brne	.+28     	; 0x38c <fdevopen+0x8a>
 370:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__iob+0x3>
 374:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__iob+0x2>
 378:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__iob+0x4>
 37c:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <__iob+0x5>
 380:	89 2b       	or	r24, r25
 382:	21 f4       	brne	.+8      	; 0x38c <fdevopen+0x8a>
 384:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__iob+0x5>
 388:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__iob+0x4>
 38c:	cf 01       	movw	r24, r30
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	08 95       	ret

00000398 <printf>:
 398:	a0 e0       	ldi	r26, 0x00	; 0
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e2 ed       	ldi	r30, 0xD2	; 210
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__prologue_saves__+0x20>
 3a4:	ae 01       	movw	r20, r28
 3a6:	4b 5f       	subi	r20, 0xFB	; 251
 3a8:	5f 4f       	sbci	r21, 0xFF	; 255
 3aa:	fa 01       	movw	r30, r20
 3ac:	61 91       	ld	r22, Z+
 3ae:	71 91       	ld	r23, Z+
 3b0:	af 01       	movw	r20, r30
 3b2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__iob+0x2>
 3b6:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__iob+0x3>
 3ba:	0e 94 12 02 	call	0x424	; 0x424 <vfprintf>
 3be:	e2 e0       	ldi	r30, 0x02	; 2
 3c0:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__epilogue_restores__+0x20>

000003c4 <puts>:
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__iob+0x2>
 3d0:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__iob+0x3>
 3d4:	23 81       	ldd	r18, Z+3	; 0x03
 3d6:	21 ff       	sbrs	r18, 1
 3d8:	1b c0       	rjmp	.+54     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3da:	8c 01       	movw	r16, r24
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
 3de:	c0 e0       	ldi	r28, 0x00	; 0
 3e0:	f8 01       	movw	r30, r16
 3e2:	81 91       	ld	r24, Z+
 3e4:	8f 01       	movw	r16, r30
 3e6:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <__iob+0x2>
 3ea:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <__iob+0x3>
 3ee:	db 01       	movw	r26, r22
 3f0:	18 96       	adiw	r26, 0x08	; 8
 3f2:	ed 91       	ld	r30, X+
 3f4:	fc 91       	ld	r31, X
 3f6:	19 97       	sbiw	r26, 0x09	; 9
 3f8:	88 23       	and	r24, r24
 3fa:	31 f0       	breq	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	09 95       	icall
 3fe:	89 2b       	or	r24, r25
 400:	79 f3       	breq	.-34     	; 0x3e0 <puts+0x1c>
 402:	df ef       	ldi	r29, 0xFF	; 255
 404:	cf ef       	ldi	r28, 0xFF	; 255
 406:	ec cf       	rjmp	.-40     	; 0x3e0 <puts+0x1c>
 408:	8a e0       	ldi	r24, 0x0A	; 10
 40a:	09 95       	icall
 40c:	89 2b       	or	r24, r25
 40e:	19 f0       	breq	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	9f ef       	ldi	r25, 0xFF	; 255
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	8d 2f       	mov	r24, r29
 418:	9c 2f       	mov	r25, r28
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	08 95       	ret

00000424 <vfprintf>:
 424:	ab e0       	ldi	r26, 0x0B	; 11
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e8 e1       	ldi	r30, 0x18	; 24
 42a:	f2 e0       	ldi	r31, 0x02	; 2
 42c:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__prologue_saves__>
 430:	6c 01       	movw	r12, r24
 432:	7b 01       	movw	r14, r22
 434:	8a 01       	movw	r16, r20
 436:	fc 01       	movw	r30, r24
 438:	17 82       	std	Z+7, r1	; 0x07
 43a:	16 82       	std	Z+6, r1	; 0x06
 43c:	83 81       	ldd	r24, Z+3	; 0x03
 43e:	81 ff       	sbrs	r24, 1
 440:	cc c1       	rjmp	.+920    	; 0x7da <__stack+0x2db>
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	3c 01       	movw	r6, r24
 448:	f6 01       	movw	r30, r12
 44a:	93 81       	ldd	r25, Z+3	; 0x03
 44c:	f7 01       	movw	r30, r14
 44e:	93 fd       	sbrc	r25, 3
 450:	85 91       	lpm	r24, Z+
 452:	93 ff       	sbrs	r25, 3
 454:	81 91       	ld	r24, Z+
 456:	7f 01       	movw	r14, r30
 458:	88 23       	and	r24, r24
 45a:	09 f4       	brne	.+2      	; 0x45e <vfprintf+0x3a>
 45c:	ba c1       	rjmp	.+884    	; 0x7d2 <__stack+0x2d3>
 45e:	85 32       	cpi	r24, 0x25	; 37
 460:	39 f4       	brne	.+14     	; 0x470 <vfprintf+0x4c>
 462:	93 fd       	sbrc	r25, 3
 464:	85 91       	lpm	r24, Z+
 466:	93 ff       	sbrs	r25, 3
 468:	81 91       	ld	r24, Z+
 46a:	7f 01       	movw	r14, r30
 46c:	85 32       	cpi	r24, 0x25	; 37
 46e:	29 f4       	brne	.+10     	; 0x47a <vfprintf+0x56>
 470:	b6 01       	movw	r22, r12
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 478:	e7 cf       	rjmp	.-50     	; 0x448 <vfprintf+0x24>
 47a:	91 2c       	mov	r9, r1
 47c:	21 2c       	mov	r2, r1
 47e:	31 2c       	mov	r3, r1
 480:	ff e1       	ldi	r31, 0x1F	; 31
 482:	f3 15       	cp	r31, r3
 484:	d8 f0       	brcs	.+54     	; 0x4bc <vfprintf+0x98>
 486:	8b 32       	cpi	r24, 0x2B	; 43
 488:	79 f0       	breq	.+30     	; 0x4a8 <vfprintf+0x84>
 48a:	38 f4       	brcc	.+14     	; 0x49a <vfprintf+0x76>
 48c:	80 32       	cpi	r24, 0x20	; 32
 48e:	79 f0       	breq	.+30     	; 0x4ae <vfprintf+0x8a>
 490:	83 32       	cpi	r24, 0x23	; 35
 492:	a1 f4       	brne	.+40     	; 0x4bc <vfprintf+0x98>
 494:	23 2d       	mov	r18, r3
 496:	20 61       	ori	r18, 0x10	; 16
 498:	1d c0       	rjmp	.+58     	; 0x4d4 <vfprintf+0xb0>
 49a:	8d 32       	cpi	r24, 0x2D	; 45
 49c:	61 f0       	breq	.+24     	; 0x4b6 <vfprintf+0x92>
 49e:	80 33       	cpi	r24, 0x30	; 48
 4a0:	69 f4       	brne	.+26     	; 0x4bc <vfprintf+0x98>
 4a2:	23 2d       	mov	r18, r3
 4a4:	21 60       	ori	r18, 0x01	; 1
 4a6:	16 c0       	rjmp	.+44     	; 0x4d4 <vfprintf+0xb0>
 4a8:	83 2d       	mov	r24, r3
 4aa:	82 60       	ori	r24, 0x02	; 2
 4ac:	38 2e       	mov	r3, r24
 4ae:	e3 2d       	mov	r30, r3
 4b0:	e4 60       	ori	r30, 0x04	; 4
 4b2:	3e 2e       	mov	r3, r30
 4b4:	2a c0       	rjmp	.+84     	; 0x50a <__stack+0xb>
 4b6:	f3 2d       	mov	r31, r3
 4b8:	f8 60       	ori	r31, 0x08	; 8
 4ba:	1d c0       	rjmp	.+58     	; 0x4f6 <vfprintf+0xd2>
 4bc:	37 fc       	sbrc	r3, 7
 4be:	2d c0       	rjmp	.+90     	; 0x51a <__stack+0x1b>
 4c0:	20 ed       	ldi	r18, 0xD0	; 208
 4c2:	28 0f       	add	r18, r24
 4c4:	2a 30       	cpi	r18, 0x0A	; 10
 4c6:	40 f0       	brcs	.+16     	; 0x4d8 <vfprintf+0xb4>
 4c8:	8e 32       	cpi	r24, 0x2E	; 46
 4ca:	b9 f4       	brne	.+46     	; 0x4fa <vfprintf+0xd6>
 4cc:	36 fc       	sbrc	r3, 6
 4ce:	81 c1       	rjmp	.+770    	; 0x7d2 <__stack+0x2d3>
 4d0:	23 2d       	mov	r18, r3
 4d2:	20 64       	ori	r18, 0x40	; 64
 4d4:	32 2e       	mov	r3, r18
 4d6:	19 c0       	rjmp	.+50     	; 0x50a <__stack+0xb>
 4d8:	36 fe       	sbrs	r3, 6
 4da:	06 c0       	rjmp	.+12     	; 0x4e8 <vfprintf+0xc4>
 4dc:	8a e0       	ldi	r24, 0x0A	; 10
 4de:	98 9e       	mul	r9, r24
 4e0:	20 0d       	add	r18, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	92 2e       	mov	r9, r18
 4e6:	11 c0       	rjmp	.+34     	; 0x50a <__stack+0xb>
 4e8:	ea e0       	ldi	r30, 0x0A	; 10
 4ea:	2e 9e       	mul	r2, r30
 4ec:	20 0d       	add	r18, r0
 4ee:	11 24       	eor	r1, r1
 4f0:	22 2e       	mov	r2, r18
 4f2:	f3 2d       	mov	r31, r3
 4f4:	f0 62       	ori	r31, 0x20	; 32
 4f6:	3f 2e       	mov	r3, r31
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <__stack+0xb>
 4fa:	8c 36       	cpi	r24, 0x6C	; 108
 4fc:	21 f4       	brne	.+8      	; 0x506 <__stack+0x7>
 4fe:	83 2d       	mov	r24, r3
 500:	80 68       	ori	r24, 0x80	; 128
 502:	38 2e       	mov	r3, r24
 504:	02 c0       	rjmp	.+4      	; 0x50a <__stack+0xb>
 506:	88 36       	cpi	r24, 0x68	; 104
 508:	41 f4       	brne	.+16     	; 0x51a <__stack+0x1b>
 50a:	f7 01       	movw	r30, r14
 50c:	93 fd       	sbrc	r25, 3
 50e:	85 91       	lpm	r24, Z+
 510:	93 ff       	sbrs	r25, 3
 512:	81 91       	ld	r24, Z+
 514:	7f 01       	movw	r14, r30
 516:	81 11       	cpse	r24, r1
 518:	b3 cf       	rjmp	.-154    	; 0x480 <vfprintf+0x5c>
 51a:	98 2f       	mov	r25, r24
 51c:	9f 7d       	andi	r25, 0xDF	; 223
 51e:	95 54       	subi	r25, 0x45	; 69
 520:	93 30       	cpi	r25, 0x03	; 3
 522:	28 f4       	brcc	.+10     	; 0x52e <__stack+0x2f>
 524:	0c 5f       	subi	r16, 0xFC	; 252
 526:	1f 4f       	sbci	r17, 0xFF	; 255
 528:	9f e3       	ldi	r25, 0x3F	; 63
 52a:	99 83       	std	Y+1, r25	; 0x01
 52c:	0d c0       	rjmp	.+26     	; 0x548 <__stack+0x49>
 52e:	83 36       	cpi	r24, 0x63	; 99
 530:	31 f0       	breq	.+12     	; 0x53e <__stack+0x3f>
 532:	83 37       	cpi	r24, 0x73	; 115
 534:	71 f0       	breq	.+28     	; 0x552 <__stack+0x53>
 536:	83 35       	cpi	r24, 0x53	; 83
 538:	09 f0       	breq	.+2      	; 0x53c <__stack+0x3d>
 53a:	59 c0       	rjmp	.+178    	; 0x5ee <__stack+0xef>
 53c:	21 c0       	rjmp	.+66     	; 0x580 <__stack+0x81>
 53e:	f8 01       	movw	r30, r16
 540:	80 81       	ld	r24, Z
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	0e 5f       	subi	r16, 0xFE	; 254
 546:	1f 4f       	sbci	r17, 0xFF	; 255
 548:	88 24       	eor	r8, r8
 54a:	83 94       	inc	r8
 54c:	91 2c       	mov	r9, r1
 54e:	53 01       	movw	r10, r6
 550:	13 c0       	rjmp	.+38     	; 0x578 <__stack+0x79>
 552:	28 01       	movw	r4, r16
 554:	f2 e0       	ldi	r31, 0x02	; 2
 556:	4f 0e       	add	r4, r31
 558:	51 1c       	adc	r5, r1
 55a:	f8 01       	movw	r30, r16
 55c:	a0 80       	ld	r10, Z
 55e:	b1 80       	ldd	r11, Z+1	; 0x01
 560:	36 fe       	sbrs	r3, 6
 562:	03 c0       	rjmp	.+6      	; 0x56a <__stack+0x6b>
 564:	69 2d       	mov	r22, r9
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <__stack+0x6f>
 56a:	6f ef       	ldi	r22, 0xFF	; 255
 56c:	7f ef       	ldi	r23, 0xFF	; 255
 56e:	c5 01       	movw	r24, r10
 570:	0e 94 42 05 	call	0xa84	; 0xa84 <strnlen>
 574:	4c 01       	movw	r8, r24
 576:	82 01       	movw	r16, r4
 578:	f3 2d       	mov	r31, r3
 57a:	ff 77       	andi	r31, 0x7F	; 127
 57c:	3f 2e       	mov	r3, r31
 57e:	16 c0       	rjmp	.+44     	; 0x5ac <__stack+0xad>
 580:	28 01       	movw	r4, r16
 582:	22 e0       	ldi	r18, 0x02	; 2
 584:	42 0e       	add	r4, r18
 586:	51 1c       	adc	r5, r1
 588:	f8 01       	movw	r30, r16
 58a:	a0 80       	ld	r10, Z
 58c:	b1 80       	ldd	r11, Z+1	; 0x01
 58e:	36 fe       	sbrs	r3, 6
 590:	03 c0       	rjmp	.+6      	; 0x598 <__stack+0x99>
 592:	69 2d       	mov	r22, r9
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <__stack+0x9d>
 598:	6f ef       	ldi	r22, 0xFF	; 255
 59a:	7f ef       	ldi	r23, 0xFF	; 255
 59c:	c5 01       	movw	r24, r10
 59e:	0e 94 30 05 	call	0xa60	; 0xa60 <strnlen_P>
 5a2:	4c 01       	movw	r8, r24
 5a4:	f3 2d       	mov	r31, r3
 5a6:	f0 68       	ori	r31, 0x80	; 128
 5a8:	3f 2e       	mov	r3, r31
 5aa:	82 01       	movw	r16, r4
 5ac:	33 fc       	sbrc	r3, 3
 5ae:	1b c0       	rjmp	.+54     	; 0x5e6 <__stack+0xe7>
 5b0:	82 2d       	mov	r24, r2
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	88 16       	cp	r8, r24
 5b6:	99 06       	cpc	r9, r25
 5b8:	b0 f4       	brcc	.+44     	; 0x5e6 <__stack+0xe7>
 5ba:	b6 01       	movw	r22, r12
 5bc:	80 e2       	ldi	r24, 0x20	; 32
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 5c4:	2a 94       	dec	r2
 5c6:	f4 cf       	rjmp	.-24     	; 0x5b0 <__stack+0xb1>
 5c8:	f5 01       	movw	r30, r10
 5ca:	37 fc       	sbrc	r3, 7
 5cc:	85 91       	lpm	r24, Z+
 5ce:	37 fe       	sbrs	r3, 7
 5d0:	81 91       	ld	r24, Z+
 5d2:	5f 01       	movw	r10, r30
 5d4:	b6 01       	movw	r22, r12
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 5dc:	21 10       	cpse	r2, r1
 5de:	2a 94       	dec	r2
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	82 1a       	sub	r8, r18
 5e4:	91 08       	sbc	r9, r1
 5e6:	81 14       	cp	r8, r1
 5e8:	91 04       	cpc	r9, r1
 5ea:	71 f7       	brne	.-36     	; 0x5c8 <__stack+0xc9>
 5ec:	e8 c0       	rjmp	.+464    	; 0x7be <__stack+0x2bf>
 5ee:	84 36       	cpi	r24, 0x64	; 100
 5f0:	11 f0       	breq	.+4      	; 0x5f6 <__stack+0xf7>
 5f2:	89 36       	cpi	r24, 0x69	; 105
 5f4:	41 f5       	brne	.+80     	; 0x646 <__stack+0x147>
 5f6:	f8 01       	movw	r30, r16
 5f8:	37 fe       	sbrs	r3, 7
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <__stack+0x10b>
 5fc:	60 81       	ld	r22, Z
 5fe:	71 81       	ldd	r23, Z+1	; 0x01
 600:	82 81       	ldd	r24, Z+2	; 0x02
 602:	93 81       	ldd	r25, Z+3	; 0x03
 604:	0c 5f       	subi	r16, 0xFC	; 252
 606:	1f 4f       	sbci	r17, 0xFF	; 255
 608:	08 c0       	rjmp	.+16     	; 0x61a <__stack+0x11b>
 60a:	60 81       	ld	r22, Z
 60c:	71 81       	ldd	r23, Z+1	; 0x01
 60e:	07 2e       	mov	r0, r23
 610:	00 0c       	add	r0, r0
 612:	88 0b       	sbc	r24, r24
 614:	99 0b       	sbc	r25, r25
 616:	0e 5f       	subi	r16, 0xFE	; 254
 618:	1f 4f       	sbci	r17, 0xFF	; 255
 61a:	f3 2d       	mov	r31, r3
 61c:	ff 76       	andi	r31, 0x6F	; 111
 61e:	3f 2e       	mov	r3, r31
 620:	97 ff       	sbrs	r25, 7
 622:	09 c0       	rjmp	.+18     	; 0x636 <__stack+0x137>
 624:	90 95       	com	r25
 626:	80 95       	com	r24
 628:	70 95       	com	r23
 62a:	61 95       	neg	r22
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	8f 4f       	sbci	r24, 0xFF	; 255
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	f0 68       	ori	r31, 0x80	; 128
 634:	3f 2e       	mov	r3, r31
 636:	2a e0       	ldi	r18, 0x0A	; 10
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	a3 01       	movw	r20, r6
 63c:	0e 94 89 05 	call	0xb12	; 0xb12 <__ultoa_invert>
 640:	88 2e       	mov	r8, r24
 642:	86 18       	sub	r8, r6
 644:	45 c0       	rjmp	.+138    	; 0x6d0 <__stack+0x1d1>
 646:	85 37       	cpi	r24, 0x75	; 117
 648:	31 f4       	brne	.+12     	; 0x656 <__stack+0x157>
 64a:	23 2d       	mov	r18, r3
 64c:	2f 7e       	andi	r18, 0xEF	; 239
 64e:	b2 2e       	mov	r11, r18
 650:	2a e0       	ldi	r18, 0x0A	; 10
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	25 c0       	rjmp	.+74     	; 0x6a0 <__stack+0x1a1>
 656:	93 2d       	mov	r25, r3
 658:	99 7f       	andi	r25, 0xF9	; 249
 65a:	b9 2e       	mov	r11, r25
 65c:	8f 36       	cpi	r24, 0x6F	; 111
 65e:	c1 f0       	breq	.+48     	; 0x690 <__stack+0x191>
 660:	18 f4       	brcc	.+6      	; 0x668 <__stack+0x169>
 662:	88 35       	cpi	r24, 0x58	; 88
 664:	79 f0       	breq	.+30     	; 0x684 <__stack+0x185>
 666:	b5 c0       	rjmp	.+362    	; 0x7d2 <__stack+0x2d3>
 668:	80 37       	cpi	r24, 0x70	; 112
 66a:	19 f0       	breq	.+6      	; 0x672 <__stack+0x173>
 66c:	88 37       	cpi	r24, 0x78	; 120
 66e:	21 f0       	breq	.+8      	; 0x678 <__stack+0x179>
 670:	b0 c0       	rjmp	.+352    	; 0x7d2 <__stack+0x2d3>
 672:	e9 2f       	mov	r30, r25
 674:	e0 61       	ori	r30, 0x10	; 16
 676:	be 2e       	mov	r11, r30
 678:	b4 fe       	sbrs	r11, 4
 67a:	0d c0       	rjmp	.+26     	; 0x696 <__stack+0x197>
 67c:	fb 2d       	mov	r31, r11
 67e:	f4 60       	ori	r31, 0x04	; 4
 680:	bf 2e       	mov	r11, r31
 682:	09 c0       	rjmp	.+18     	; 0x696 <__stack+0x197>
 684:	34 fe       	sbrs	r3, 4
 686:	0a c0       	rjmp	.+20     	; 0x69c <__stack+0x19d>
 688:	29 2f       	mov	r18, r25
 68a:	26 60       	ori	r18, 0x06	; 6
 68c:	b2 2e       	mov	r11, r18
 68e:	06 c0       	rjmp	.+12     	; 0x69c <__stack+0x19d>
 690:	28 e0       	ldi	r18, 0x08	; 8
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	05 c0       	rjmp	.+10     	; 0x6a0 <__stack+0x1a1>
 696:	20 e1       	ldi	r18, 0x10	; 16
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <__stack+0x1a1>
 69c:	20 e1       	ldi	r18, 0x10	; 16
 69e:	32 e0       	ldi	r19, 0x02	; 2
 6a0:	f8 01       	movw	r30, r16
 6a2:	b7 fe       	sbrs	r11, 7
 6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <__stack+0x1b5>
 6a6:	60 81       	ld	r22, Z
 6a8:	71 81       	ldd	r23, Z+1	; 0x01
 6aa:	82 81       	ldd	r24, Z+2	; 0x02
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	0c 5f       	subi	r16, 0xFC	; 252
 6b0:	1f 4f       	sbci	r17, 0xFF	; 255
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <__stack+0x1c1>
 6b4:	60 81       	ld	r22, Z
 6b6:	71 81       	ldd	r23, Z+1	; 0x01
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 5f       	subi	r16, 0xFE	; 254
 6be:	1f 4f       	sbci	r17, 0xFF	; 255
 6c0:	a3 01       	movw	r20, r6
 6c2:	0e 94 89 05 	call	0xb12	; 0xb12 <__ultoa_invert>
 6c6:	88 2e       	mov	r8, r24
 6c8:	86 18       	sub	r8, r6
 6ca:	fb 2d       	mov	r31, r11
 6cc:	ff 77       	andi	r31, 0x7F	; 127
 6ce:	3f 2e       	mov	r3, r31
 6d0:	36 fe       	sbrs	r3, 6
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <__stack+0x1ef>
 6d4:	23 2d       	mov	r18, r3
 6d6:	2e 7f       	andi	r18, 0xFE	; 254
 6d8:	a2 2e       	mov	r10, r18
 6da:	89 14       	cp	r8, r9
 6dc:	58 f4       	brcc	.+22     	; 0x6f4 <__stack+0x1f5>
 6de:	34 fe       	sbrs	r3, 4
 6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <__stack+0x1f9>
 6e2:	32 fc       	sbrc	r3, 2
 6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <__stack+0x1f9>
 6e6:	83 2d       	mov	r24, r3
 6e8:	8e 7e       	andi	r24, 0xEE	; 238
 6ea:	a8 2e       	mov	r10, r24
 6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <__stack+0x1f9>
 6ee:	b8 2c       	mov	r11, r8
 6f0:	a3 2c       	mov	r10, r3
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <__stack+0x1fb>
 6f4:	b8 2c       	mov	r11, r8
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <__stack+0x1fb>
 6f8:	b9 2c       	mov	r11, r9
 6fa:	a4 fe       	sbrs	r10, 4
 6fc:	0f c0       	rjmp	.+30     	; 0x71c <__stack+0x21d>
 6fe:	fe 01       	movw	r30, r28
 700:	e8 0d       	add	r30, r8
 702:	f1 1d       	adc	r31, r1
 704:	80 81       	ld	r24, Z
 706:	80 33       	cpi	r24, 0x30	; 48
 708:	21 f4       	brne	.+8      	; 0x712 <__stack+0x213>
 70a:	9a 2d       	mov	r25, r10
 70c:	99 7e       	andi	r25, 0xE9	; 233
 70e:	a9 2e       	mov	r10, r25
 710:	09 c0       	rjmp	.+18     	; 0x724 <__stack+0x225>
 712:	a2 fe       	sbrs	r10, 2
 714:	06 c0       	rjmp	.+12     	; 0x722 <__stack+0x223>
 716:	b3 94       	inc	r11
 718:	b3 94       	inc	r11
 71a:	04 c0       	rjmp	.+8      	; 0x724 <__stack+0x225>
 71c:	8a 2d       	mov	r24, r10
 71e:	86 78       	andi	r24, 0x86	; 134
 720:	09 f0       	breq	.+2      	; 0x724 <__stack+0x225>
 722:	b3 94       	inc	r11
 724:	a3 fc       	sbrc	r10, 3
 726:	11 c0       	rjmp	.+34     	; 0x74a <__stack+0x24b>
 728:	a0 fe       	sbrs	r10, 0
 72a:	06 c0       	rjmp	.+12     	; 0x738 <__stack+0x239>
 72c:	b2 14       	cp	r11, r2
 72e:	88 f4       	brcc	.+34     	; 0x752 <__stack+0x253>
 730:	28 0c       	add	r2, r8
 732:	92 2c       	mov	r9, r2
 734:	9b 18       	sub	r9, r11
 736:	0e c0       	rjmp	.+28     	; 0x754 <__stack+0x255>
 738:	b2 14       	cp	r11, r2
 73a:	60 f4       	brcc	.+24     	; 0x754 <__stack+0x255>
 73c:	b6 01       	movw	r22, r12
 73e:	80 e2       	ldi	r24, 0x20	; 32
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 746:	b3 94       	inc	r11
 748:	f7 cf       	rjmp	.-18     	; 0x738 <__stack+0x239>
 74a:	b2 14       	cp	r11, r2
 74c:	18 f4       	brcc	.+6      	; 0x754 <__stack+0x255>
 74e:	2b 18       	sub	r2, r11
 750:	02 c0       	rjmp	.+4      	; 0x756 <__stack+0x257>
 752:	98 2c       	mov	r9, r8
 754:	21 2c       	mov	r2, r1
 756:	a4 fe       	sbrs	r10, 4
 758:	10 c0       	rjmp	.+32     	; 0x77a <__stack+0x27b>
 75a:	b6 01       	movw	r22, r12
 75c:	80 e3       	ldi	r24, 0x30	; 48
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 764:	a2 fe       	sbrs	r10, 2
 766:	17 c0       	rjmp	.+46     	; 0x796 <__stack+0x297>
 768:	a1 fc       	sbrc	r10, 1
 76a:	03 c0       	rjmp	.+6      	; 0x772 <__stack+0x273>
 76c:	88 e7       	ldi	r24, 0x78	; 120
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <__stack+0x277>
 772:	88 e5       	ldi	r24, 0x58	; 88
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	b6 01       	movw	r22, r12
 778:	0c c0       	rjmp	.+24     	; 0x792 <__stack+0x293>
 77a:	8a 2d       	mov	r24, r10
 77c:	86 78       	andi	r24, 0x86	; 134
 77e:	59 f0       	breq	.+22     	; 0x796 <__stack+0x297>
 780:	a1 fe       	sbrs	r10, 1
 782:	02 c0       	rjmp	.+4      	; 0x788 <__stack+0x289>
 784:	8b e2       	ldi	r24, 0x2B	; 43
 786:	01 c0       	rjmp	.+2      	; 0x78a <__stack+0x28b>
 788:	80 e2       	ldi	r24, 0x20	; 32
 78a:	a7 fc       	sbrc	r10, 7
 78c:	8d e2       	ldi	r24, 0x2D	; 45
 78e:	b6 01       	movw	r22, r12
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 796:	89 14       	cp	r8, r9
 798:	38 f4       	brcc	.+14     	; 0x7a8 <__stack+0x2a9>
 79a:	b6 01       	movw	r22, r12
 79c:	80 e3       	ldi	r24, 0x30	; 48
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 7a4:	9a 94       	dec	r9
 7a6:	f7 cf       	rjmp	.-18     	; 0x796 <__stack+0x297>
 7a8:	8a 94       	dec	r8
 7aa:	f3 01       	movw	r30, r6
 7ac:	e8 0d       	add	r30, r8
 7ae:	f1 1d       	adc	r31, r1
 7b0:	80 81       	ld	r24, Z
 7b2:	b6 01       	movw	r22, r12
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 7ba:	81 10       	cpse	r8, r1
 7bc:	f5 cf       	rjmp	.-22     	; 0x7a8 <__stack+0x2a9>
 7be:	22 20       	and	r2, r2
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <__stack+0x2c5>
 7c2:	42 ce       	rjmp	.-892    	; 0x448 <vfprintf+0x24>
 7c4:	b6 01       	movw	r22, r12
 7c6:	80 e2       	ldi	r24, 0x20	; 32
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 7ce:	2a 94       	dec	r2
 7d0:	f6 cf       	rjmp	.-20     	; 0x7be <__stack+0x2bf>
 7d2:	f6 01       	movw	r30, r12
 7d4:	86 81       	ldd	r24, Z+6	; 0x06
 7d6:	97 81       	ldd	r25, Z+7	; 0x07
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <__stack+0x2df>
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	9f ef       	ldi	r25, 0xFF	; 255
 7de:	2b 96       	adiw	r28, 0x0b	; 11
 7e0:	e2 e1       	ldi	r30, 0x12	; 18
 7e2:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__epilogue_restores__>

000007e6 <calloc>:
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	86 9f       	mul	r24, r22
 7f0:	80 01       	movw	r16, r0
 7f2:	87 9f       	mul	r24, r23
 7f4:	10 0d       	add	r17, r0
 7f6:	96 9f       	mul	r25, r22
 7f8:	10 0d       	add	r17, r0
 7fa:	11 24       	eor	r1, r1
 7fc:	c8 01       	movw	r24, r16
 7fe:	0e 94 0f 04 	call	0x81e	; 0x81e <malloc>
 802:	ec 01       	movw	r28, r24
 804:	00 97       	sbiw	r24, 0x00	; 0
 806:	29 f0       	breq	.+10     	; 0x812 <calloc+0x2c>
 808:	a8 01       	movw	r20, r16
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	0e 94 3b 05 	call	0xa76	; 0xa76 <memset>
 812:	ce 01       	movw	r24, r28
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	08 95       	ret

0000081e <malloc>:
 81e:	0f 93       	push	r16
 820:	1f 93       	push	r17
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	82 30       	cpi	r24, 0x02	; 2
 828:	91 05       	cpc	r25, r1
 82a:	10 f4       	brcc	.+4      	; 0x830 <malloc+0x12>
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <__flp>
 834:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <__flp+0x1>
 838:	20 e0       	ldi	r18, 0x00	; 0
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	a0 e0       	ldi	r26, 0x00	; 0
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	30 97       	sbiw	r30, 0x00	; 0
 842:	19 f1       	breq	.+70     	; 0x88a <malloc+0x6c>
 844:	40 81       	ld	r20, Z
 846:	51 81       	ldd	r21, Z+1	; 0x01
 848:	02 81       	ldd	r16, Z+2	; 0x02
 84a:	13 81       	ldd	r17, Z+3	; 0x03
 84c:	48 17       	cp	r20, r24
 84e:	59 07       	cpc	r21, r25
 850:	c8 f0       	brcs	.+50     	; 0x884 <malloc+0x66>
 852:	84 17       	cp	r24, r20
 854:	95 07       	cpc	r25, r21
 856:	69 f4       	brne	.+26     	; 0x872 <malloc+0x54>
 858:	10 97       	sbiw	r26, 0x00	; 0
 85a:	31 f0       	breq	.+12     	; 0x868 <malloc+0x4a>
 85c:	12 96       	adiw	r26, 0x02	; 2
 85e:	0c 93       	st	X, r16
 860:	12 97       	sbiw	r26, 0x02	; 2
 862:	13 96       	adiw	r26, 0x03	; 3
 864:	1c 93       	st	X, r17
 866:	27 c0       	rjmp	.+78     	; 0x8b6 <malloc+0x98>
 868:	00 93 12 02 	sts	0x0212, r16	; 0x800212 <__flp>
 86c:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <__flp+0x1>
 870:	22 c0       	rjmp	.+68     	; 0x8b6 <malloc+0x98>
 872:	21 15       	cp	r18, r1
 874:	31 05       	cpc	r19, r1
 876:	19 f0       	breq	.+6      	; 0x87e <malloc+0x60>
 878:	42 17       	cp	r20, r18
 87a:	53 07       	cpc	r21, r19
 87c:	18 f4       	brcc	.+6      	; 0x884 <malloc+0x66>
 87e:	9a 01       	movw	r18, r20
 880:	bd 01       	movw	r22, r26
 882:	ef 01       	movw	r28, r30
 884:	df 01       	movw	r26, r30
 886:	f8 01       	movw	r30, r16
 888:	db cf       	rjmp	.-74     	; 0x840 <malloc+0x22>
 88a:	21 15       	cp	r18, r1
 88c:	31 05       	cpc	r19, r1
 88e:	f9 f0       	breq	.+62     	; 0x8ce <malloc+0xb0>
 890:	28 1b       	sub	r18, r24
 892:	39 0b       	sbc	r19, r25
 894:	24 30       	cpi	r18, 0x04	; 4
 896:	31 05       	cpc	r19, r1
 898:	80 f4       	brcc	.+32     	; 0x8ba <malloc+0x9c>
 89a:	8a 81       	ldd	r24, Y+2	; 0x02
 89c:	9b 81       	ldd	r25, Y+3	; 0x03
 89e:	61 15       	cp	r22, r1
 8a0:	71 05       	cpc	r23, r1
 8a2:	21 f0       	breq	.+8      	; 0x8ac <malloc+0x8e>
 8a4:	fb 01       	movw	r30, r22
 8a6:	93 83       	std	Z+3, r25	; 0x03
 8a8:	82 83       	std	Z+2, r24	; 0x02
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <malloc+0x96>
 8ac:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__flp+0x1>
 8b0:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__flp>
 8b4:	fe 01       	movw	r30, r28
 8b6:	32 96       	adiw	r30, 0x02	; 2
 8b8:	44 c0       	rjmp	.+136    	; 0x942 <malloc+0x124>
 8ba:	fe 01       	movw	r30, r28
 8bc:	e2 0f       	add	r30, r18
 8be:	f3 1f       	adc	r31, r19
 8c0:	81 93       	st	Z+, r24
 8c2:	91 93       	st	Z+, r25
 8c4:	22 50       	subi	r18, 0x02	; 2
 8c6:	31 09       	sbc	r19, r1
 8c8:	39 83       	std	Y+1, r19	; 0x01
 8ca:	28 83       	st	Y, r18
 8cc:	3a c0       	rjmp	.+116    	; 0x942 <malloc+0x124>
 8ce:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__brkval>
 8d2:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__brkval+0x1>
 8d6:	23 2b       	or	r18, r19
 8d8:	41 f4       	brne	.+16     	; 0x8ea <malloc+0xcc>
 8da:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 8de:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 8e2:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <__brkval+0x1>
 8e6:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <__brkval>
 8ea:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 8ee:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 8f2:	21 15       	cp	r18, r1
 8f4:	31 05       	cpc	r19, r1
 8f6:	41 f4       	brne	.+16     	; 0x908 <malloc+0xea>
 8f8:	2d b7       	in	r18, 0x3d	; 61
 8fa:	3e b7       	in	r19, 0x3e	; 62
 8fc:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 900:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 904:	24 1b       	sub	r18, r20
 906:	35 0b       	sbc	r19, r21
 908:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__brkval>
 90c:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__brkval+0x1>
 910:	e2 17       	cp	r30, r18
 912:	f3 07       	cpc	r31, r19
 914:	a0 f4       	brcc	.+40     	; 0x93e <malloc+0x120>
 916:	2e 1b       	sub	r18, r30
 918:	3f 0b       	sbc	r19, r31
 91a:	28 17       	cp	r18, r24
 91c:	39 07       	cpc	r19, r25
 91e:	78 f0       	brcs	.+30     	; 0x93e <malloc+0x120>
 920:	ac 01       	movw	r20, r24
 922:	4e 5f       	subi	r20, 0xFE	; 254
 924:	5f 4f       	sbci	r21, 0xFF	; 255
 926:	24 17       	cp	r18, r20
 928:	35 07       	cpc	r19, r21
 92a:	48 f0       	brcs	.+18     	; 0x93e <malloc+0x120>
 92c:	4e 0f       	add	r20, r30
 92e:	5f 1f       	adc	r21, r31
 930:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <__brkval+0x1>
 934:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <__brkval>
 938:	81 93       	st	Z+, r24
 93a:	91 93       	st	Z+, r25
 93c:	02 c0       	rjmp	.+4      	; 0x942 <malloc+0x124>
 93e:	e0 e0       	ldi	r30, 0x00	; 0
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	cf 01       	movw	r24, r30
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	1f 91       	pop	r17
 94a:	0f 91       	pop	r16
 94c:	08 95       	ret

0000094e <free>:
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	09 f4       	brne	.+2      	; 0x958 <free+0xa>
 956:	81 c0       	rjmp	.+258    	; 0xa5a <free+0x10c>
 958:	fc 01       	movw	r30, r24
 95a:	32 97       	sbiw	r30, 0x02	; 2
 95c:	13 82       	std	Z+3, r1	; 0x03
 95e:	12 82       	std	Z+2, r1	; 0x02
 960:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <__flp>
 964:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <__flp+0x1>
 968:	10 97       	sbiw	r26, 0x00	; 0
 96a:	81 f4       	brne	.+32     	; 0x98c <free+0x3e>
 96c:	20 81       	ld	r18, Z
 96e:	31 81       	ldd	r19, Z+1	; 0x01
 970:	82 0f       	add	r24, r18
 972:	93 1f       	adc	r25, r19
 974:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__brkval>
 978:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__brkval+0x1>
 97c:	28 17       	cp	r18, r24
 97e:	39 07       	cpc	r19, r25
 980:	51 f5       	brne	.+84     	; 0x9d6 <free+0x88>
 982:	f0 93 11 02 	sts	0x0211, r31	; 0x800211 <__brkval+0x1>
 986:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <__brkval>
 98a:	67 c0       	rjmp	.+206    	; 0xa5a <free+0x10c>
 98c:	ed 01       	movw	r28, r26
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	ce 17       	cp	r28, r30
 994:	df 07       	cpc	r29, r31
 996:	40 f4       	brcc	.+16     	; 0x9a8 <free+0x5a>
 998:	4a 81       	ldd	r20, Y+2	; 0x02
 99a:	5b 81       	ldd	r21, Y+3	; 0x03
 99c:	9e 01       	movw	r18, r28
 99e:	41 15       	cp	r20, r1
 9a0:	51 05       	cpc	r21, r1
 9a2:	f1 f0       	breq	.+60     	; 0x9e0 <free+0x92>
 9a4:	ea 01       	movw	r28, r20
 9a6:	f5 cf       	rjmp	.-22     	; 0x992 <free+0x44>
 9a8:	d3 83       	std	Z+3, r29	; 0x03
 9aa:	c2 83       	std	Z+2, r28	; 0x02
 9ac:	40 81       	ld	r20, Z
 9ae:	51 81       	ldd	r21, Z+1	; 0x01
 9b0:	84 0f       	add	r24, r20
 9b2:	95 1f       	adc	r25, r21
 9b4:	c8 17       	cp	r28, r24
 9b6:	d9 07       	cpc	r29, r25
 9b8:	59 f4       	brne	.+22     	; 0x9d0 <free+0x82>
 9ba:	88 81       	ld	r24, Y
 9bc:	99 81       	ldd	r25, Y+1	; 0x01
 9be:	84 0f       	add	r24, r20
 9c0:	95 1f       	adc	r25, r21
 9c2:	02 96       	adiw	r24, 0x02	; 2
 9c4:	91 83       	std	Z+1, r25	; 0x01
 9c6:	80 83       	st	Z, r24
 9c8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ca:	9b 81       	ldd	r25, Y+3	; 0x03
 9cc:	93 83       	std	Z+3, r25	; 0x03
 9ce:	82 83       	std	Z+2, r24	; 0x02
 9d0:	21 15       	cp	r18, r1
 9d2:	31 05       	cpc	r19, r1
 9d4:	29 f4       	brne	.+10     	; 0x9e0 <free+0x92>
 9d6:	f0 93 13 02 	sts	0x0213, r31	; 0x800213 <__flp+0x1>
 9da:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <__flp>
 9de:	3d c0       	rjmp	.+122    	; 0xa5a <free+0x10c>
 9e0:	e9 01       	movw	r28, r18
 9e2:	fb 83       	std	Y+3, r31	; 0x03
 9e4:	ea 83       	std	Y+2, r30	; 0x02
 9e6:	49 91       	ld	r20, Y+
 9e8:	59 91       	ld	r21, Y+
 9ea:	c4 0f       	add	r28, r20
 9ec:	d5 1f       	adc	r29, r21
 9ee:	ec 17       	cp	r30, r28
 9f0:	fd 07       	cpc	r31, r29
 9f2:	61 f4       	brne	.+24     	; 0xa0c <free+0xbe>
 9f4:	80 81       	ld	r24, Z
 9f6:	91 81       	ldd	r25, Z+1	; 0x01
 9f8:	84 0f       	add	r24, r20
 9fa:	95 1f       	adc	r25, r21
 9fc:	02 96       	adiw	r24, 0x02	; 2
 9fe:	e9 01       	movw	r28, r18
 a00:	99 83       	std	Y+1, r25	; 0x01
 a02:	88 83       	st	Y, r24
 a04:	82 81       	ldd	r24, Z+2	; 0x02
 a06:	93 81       	ldd	r25, Z+3	; 0x03
 a08:	9b 83       	std	Y+3, r25	; 0x03
 a0a:	8a 83       	std	Y+2, r24	; 0x02
 a0c:	e0 e0       	ldi	r30, 0x00	; 0
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	12 96       	adiw	r26, 0x02	; 2
 a12:	8d 91       	ld	r24, X+
 a14:	9c 91       	ld	r25, X
 a16:	13 97       	sbiw	r26, 0x03	; 3
 a18:	00 97       	sbiw	r24, 0x00	; 0
 a1a:	19 f0       	breq	.+6      	; 0xa22 <free+0xd4>
 a1c:	fd 01       	movw	r30, r26
 a1e:	dc 01       	movw	r26, r24
 a20:	f7 cf       	rjmp	.-18     	; 0xa10 <free+0xc2>
 a22:	8d 91       	ld	r24, X+
 a24:	9c 91       	ld	r25, X
 a26:	11 97       	sbiw	r26, 0x01	; 1
 a28:	9d 01       	movw	r18, r26
 a2a:	2e 5f       	subi	r18, 0xFE	; 254
 a2c:	3f 4f       	sbci	r19, 0xFF	; 255
 a2e:	82 0f       	add	r24, r18
 a30:	93 1f       	adc	r25, r19
 a32:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__brkval>
 a36:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__brkval+0x1>
 a3a:	28 17       	cp	r18, r24
 a3c:	39 07       	cpc	r19, r25
 a3e:	69 f4       	brne	.+26     	; 0xa5a <free+0x10c>
 a40:	30 97       	sbiw	r30, 0x00	; 0
 a42:	29 f4       	brne	.+10     	; 0xa4e <free+0x100>
 a44:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__flp+0x1>
 a48:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__flp>
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <free+0x104>
 a4e:	13 82       	std	Z+3, r1	; 0x03
 a50:	12 82       	std	Z+2, r1	; 0x02
 a52:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <__brkval+0x1>
 a56:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <__brkval>
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	08 95       	ret

00000a60 <strnlen_P>:
 a60:	fc 01       	movw	r30, r24
 a62:	05 90       	lpm	r0, Z+
 a64:	61 50       	subi	r22, 0x01	; 1
 a66:	70 40       	sbci	r23, 0x00	; 0
 a68:	01 10       	cpse	r0, r1
 a6a:	d8 f7       	brcc	.-10     	; 0xa62 <strnlen_P+0x2>
 a6c:	80 95       	com	r24
 a6e:	90 95       	com	r25
 a70:	8e 0f       	add	r24, r30
 a72:	9f 1f       	adc	r25, r31
 a74:	08 95       	ret

00000a76 <memset>:
 a76:	dc 01       	movw	r26, r24
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <memset+0x6>
 a7a:	6d 93       	st	X+, r22
 a7c:	41 50       	subi	r20, 0x01	; 1
 a7e:	50 40       	sbci	r21, 0x00	; 0
 a80:	e0 f7       	brcc	.-8      	; 0xa7a <memset+0x4>
 a82:	08 95       	ret

00000a84 <strnlen>:
 a84:	fc 01       	movw	r30, r24
 a86:	61 50       	subi	r22, 0x01	; 1
 a88:	70 40       	sbci	r23, 0x00	; 0
 a8a:	01 90       	ld	r0, Z+
 a8c:	01 10       	cpse	r0, r1
 a8e:	d8 f7       	brcc	.-10     	; 0xa86 <strnlen+0x2>
 a90:	80 95       	com	r24
 a92:	90 95       	com	r25
 a94:	8e 0f       	add	r24, r30
 a96:	9f 1f       	adc	r25, r31
 a98:	08 95       	ret

00000a9a <fputc>:
 a9a:	0f 93       	push	r16
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	fb 01       	movw	r30, r22
 aa4:	23 81       	ldd	r18, Z+3	; 0x03
 aa6:	21 fd       	sbrc	r18, 1
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <fputc+0x16>
 aaa:	8f ef       	ldi	r24, 0xFF	; 255
 aac:	9f ef       	ldi	r25, 0xFF	; 255
 aae:	2c c0       	rjmp	.+88     	; 0xb08 <fputc+0x6e>
 ab0:	22 ff       	sbrs	r18, 2
 ab2:	16 c0       	rjmp	.+44     	; 0xae0 <fputc+0x46>
 ab4:	46 81       	ldd	r20, Z+6	; 0x06
 ab6:	57 81       	ldd	r21, Z+7	; 0x07
 ab8:	24 81       	ldd	r18, Z+4	; 0x04
 aba:	35 81       	ldd	r19, Z+5	; 0x05
 abc:	42 17       	cp	r20, r18
 abe:	53 07       	cpc	r21, r19
 ac0:	44 f4       	brge	.+16     	; 0xad2 <fputc+0x38>
 ac2:	a0 81       	ld	r26, Z
 ac4:	b1 81       	ldd	r27, Z+1	; 0x01
 ac6:	9d 01       	movw	r18, r26
 ac8:	2f 5f       	subi	r18, 0xFF	; 255
 aca:	3f 4f       	sbci	r19, 0xFF	; 255
 acc:	31 83       	std	Z+1, r19	; 0x01
 ace:	20 83       	st	Z, r18
 ad0:	8c 93       	st	X, r24
 ad2:	26 81       	ldd	r18, Z+6	; 0x06
 ad4:	37 81       	ldd	r19, Z+7	; 0x07
 ad6:	2f 5f       	subi	r18, 0xFF	; 255
 ad8:	3f 4f       	sbci	r19, 0xFF	; 255
 ada:	37 83       	std	Z+7, r19	; 0x07
 adc:	26 83       	std	Z+6, r18	; 0x06
 ade:	14 c0       	rjmp	.+40     	; 0xb08 <fputc+0x6e>
 ae0:	8b 01       	movw	r16, r22
 ae2:	ec 01       	movw	r28, r24
 ae4:	fb 01       	movw	r30, r22
 ae6:	00 84       	ldd	r0, Z+8	; 0x08
 ae8:	f1 85       	ldd	r31, Z+9	; 0x09
 aea:	e0 2d       	mov	r30, r0
 aec:	09 95       	icall
 aee:	89 2b       	or	r24, r25
 af0:	e1 f6       	brne	.-72     	; 0xaaa <fputc+0x10>
 af2:	d8 01       	movw	r26, r16
 af4:	16 96       	adiw	r26, 0x06	; 6
 af6:	8d 91       	ld	r24, X+
 af8:	9c 91       	ld	r25, X
 afa:	17 97       	sbiw	r26, 0x07	; 7
 afc:	01 96       	adiw	r24, 0x01	; 1
 afe:	17 96       	adiw	r26, 0x07	; 7
 b00:	9c 93       	st	X, r25
 b02:	8e 93       	st	-X, r24
 b04:	16 97       	sbiw	r26, 0x06	; 6
 b06:	ce 01       	movw	r24, r28
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	1f 91       	pop	r17
 b0e:	0f 91       	pop	r16
 b10:	08 95       	ret

00000b12 <__ultoa_invert>:
 b12:	fa 01       	movw	r30, r20
 b14:	aa 27       	eor	r26, r26
 b16:	28 30       	cpi	r18, 0x08	; 8
 b18:	51 f1       	breq	.+84     	; 0xb6e <__ultoa_invert+0x5c>
 b1a:	20 31       	cpi	r18, 0x10	; 16
 b1c:	81 f1       	breq	.+96     	; 0xb7e <__ultoa_invert+0x6c>
 b1e:	e8 94       	clt
 b20:	6f 93       	push	r22
 b22:	6e 7f       	andi	r22, 0xFE	; 254
 b24:	6e 5f       	subi	r22, 0xFE	; 254
 b26:	7f 4f       	sbci	r23, 0xFF	; 255
 b28:	8f 4f       	sbci	r24, 0xFF	; 255
 b2a:	9f 4f       	sbci	r25, 0xFF	; 255
 b2c:	af 4f       	sbci	r26, 0xFF	; 255
 b2e:	b1 e0       	ldi	r27, 0x01	; 1
 b30:	3e d0       	rcall	.+124    	; 0xbae <__ultoa_invert+0x9c>
 b32:	b4 e0       	ldi	r27, 0x04	; 4
 b34:	3c d0       	rcall	.+120    	; 0xbae <__ultoa_invert+0x9c>
 b36:	67 0f       	add	r22, r23
 b38:	78 1f       	adc	r23, r24
 b3a:	89 1f       	adc	r24, r25
 b3c:	9a 1f       	adc	r25, r26
 b3e:	a1 1d       	adc	r26, r1
 b40:	68 0f       	add	r22, r24
 b42:	79 1f       	adc	r23, r25
 b44:	8a 1f       	adc	r24, r26
 b46:	91 1d       	adc	r25, r1
 b48:	a1 1d       	adc	r26, r1
 b4a:	6a 0f       	add	r22, r26
 b4c:	71 1d       	adc	r23, r1
 b4e:	81 1d       	adc	r24, r1
 b50:	91 1d       	adc	r25, r1
 b52:	a1 1d       	adc	r26, r1
 b54:	20 d0       	rcall	.+64     	; 0xb96 <__ultoa_invert+0x84>
 b56:	09 f4       	brne	.+2      	; 0xb5a <__ultoa_invert+0x48>
 b58:	68 94       	set
 b5a:	3f 91       	pop	r19
 b5c:	2a e0       	ldi	r18, 0x0A	; 10
 b5e:	26 9f       	mul	r18, r22
 b60:	11 24       	eor	r1, r1
 b62:	30 19       	sub	r19, r0
 b64:	30 5d       	subi	r19, 0xD0	; 208
 b66:	31 93       	st	Z+, r19
 b68:	de f6       	brtc	.-74     	; 0xb20 <__ultoa_invert+0xe>
 b6a:	cf 01       	movw	r24, r30
 b6c:	08 95       	ret
 b6e:	46 2f       	mov	r20, r22
 b70:	47 70       	andi	r20, 0x07	; 7
 b72:	40 5d       	subi	r20, 0xD0	; 208
 b74:	41 93       	st	Z+, r20
 b76:	b3 e0       	ldi	r27, 0x03	; 3
 b78:	0f d0       	rcall	.+30     	; 0xb98 <__ultoa_invert+0x86>
 b7a:	c9 f7       	brne	.-14     	; 0xb6e <__ultoa_invert+0x5c>
 b7c:	f6 cf       	rjmp	.-20     	; 0xb6a <__ultoa_invert+0x58>
 b7e:	46 2f       	mov	r20, r22
 b80:	4f 70       	andi	r20, 0x0F	; 15
 b82:	40 5d       	subi	r20, 0xD0	; 208
 b84:	4a 33       	cpi	r20, 0x3A	; 58
 b86:	18 f0       	brcs	.+6      	; 0xb8e <__ultoa_invert+0x7c>
 b88:	49 5d       	subi	r20, 0xD9	; 217
 b8a:	31 fd       	sbrc	r19, 1
 b8c:	40 52       	subi	r20, 0x20	; 32
 b8e:	41 93       	st	Z+, r20
 b90:	02 d0       	rcall	.+4      	; 0xb96 <__ultoa_invert+0x84>
 b92:	a9 f7       	brne	.-22     	; 0xb7e <__ultoa_invert+0x6c>
 b94:	ea cf       	rjmp	.-44     	; 0xb6a <__ultoa_invert+0x58>
 b96:	b4 e0       	ldi	r27, 0x04	; 4
 b98:	a6 95       	lsr	r26
 b9a:	97 95       	ror	r25
 b9c:	87 95       	ror	r24
 b9e:	77 95       	ror	r23
 ba0:	67 95       	ror	r22
 ba2:	ba 95       	dec	r27
 ba4:	c9 f7       	brne	.-14     	; 0xb98 <__ultoa_invert+0x86>
 ba6:	00 97       	sbiw	r24, 0x00	; 0
 ba8:	61 05       	cpc	r22, r1
 baa:	71 05       	cpc	r23, r1
 bac:	08 95       	ret
 bae:	9b 01       	movw	r18, r22
 bb0:	ac 01       	movw	r20, r24
 bb2:	0a 2e       	mov	r0, r26
 bb4:	06 94       	lsr	r0
 bb6:	57 95       	ror	r21
 bb8:	47 95       	ror	r20
 bba:	37 95       	ror	r19
 bbc:	27 95       	ror	r18
 bbe:	ba 95       	dec	r27
 bc0:	c9 f7       	brne	.-14     	; 0xbb4 <__ultoa_invert+0xa2>
 bc2:	62 0f       	add	r22, r18
 bc4:	73 1f       	adc	r23, r19
 bc6:	84 1f       	adc	r24, r20
 bc8:	95 1f       	adc	r25, r21
 bca:	a0 1d       	adc	r26, r0
 bcc:	08 95       	ret

00000bce <__divmodsi4>:
 bce:	05 2e       	mov	r0, r21
 bd0:	97 fb       	bst	r25, 7
 bd2:	1e f4       	brtc	.+6      	; 0xbda <__divmodsi4+0xc>
 bd4:	00 94       	com	r0
 bd6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__negsi2>
 bda:	57 fd       	sbrc	r21, 7
 bdc:	07 d0       	rcall	.+14     	; 0xbec <__divmodsi4_neg2>
 bde:	0e 94 50 06 	call	0xca0	; 0xca0 <__udivmodsi4>
 be2:	07 fc       	sbrc	r0, 7
 be4:	03 d0       	rcall	.+6      	; 0xbec <__divmodsi4_neg2>
 be6:	4e f4       	brtc	.+18     	; 0xbfa <__divmodsi4_exit>
 be8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__negsi2>

00000bec <__divmodsi4_neg2>:
 bec:	50 95       	com	r21
 bee:	40 95       	com	r20
 bf0:	30 95       	com	r19
 bf2:	21 95       	neg	r18
 bf4:	3f 4f       	sbci	r19, 0xFF	; 255
 bf6:	4f 4f       	sbci	r20, 0xFF	; 255
 bf8:	5f 4f       	sbci	r21, 0xFF	; 255

00000bfa <__divmodsi4_exit>:
 bfa:	08 95       	ret

00000bfc <__negsi2>:
 bfc:	90 95       	com	r25
 bfe:	80 95       	com	r24
 c00:	70 95       	com	r23
 c02:	61 95       	neg	r22
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	08 95       	ret

00000c0c <__muluhisi3>:
 c0c:	0e 94 72 06 	call	0xce4	; 0xce4 <__umulhisi3>
 c10:	a5 9f       	mul	r26, r21
 c12:	90 0d       	add	r25, r0
 c14:	b4 9f       	mul	r27, r20
 c16:	90 0d       	add	r25, r0
 c18:	a4 9f       	mul	r26, r20
 c1a:	80 0d       	add	r24, r0
 c1c:	91 1d       	adc	r25, r1
 c1e:	11 24       	eor	r1, r1
 c20:	08 95       	ret

00000c22 <__mulshisi3>:
 c22:	b7 ff       	sbrs	r27, 7
 c24:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__muluhisi3>

00000c28 <__mulohisi3>:
 c28:	0e 94 06 06 	call	0xc0c	; 0xc0c <__muluhisi3>
 c2c:	82 1b       	sub	r24, r18
 c2e:	93 0b       	sbc	r25, r19
 c30:	08 95       	ret

00000c32 <__prologue_saves__>:
 c32:	2f 92       	push	r2
 c34:	3f 92       	push	r3
 c36:	4f 92       	push	r4
 c38:	5f 92       	push	r5
 c3a:	6f 92       	push	r6
 c3c:	7f 92       	push	r7
 c3e:	8f 92       	push	r8
 c40:	9f 92       	push	r9
 c42:	af 92       	push	r10
 c44:	bf 92       	push	r11
 c46:	cf 92       	push	r12
 c48:	df 92       	push	r13
 c4a:	ef 92       	push	r14
 c4c:	ff 92       	push	r15
 c4e:	0f 93       	push	r16
 c50:	1f 93       	push	r17
 c52:	cf 93       	push	r28
 c54:	df 93       	push	r29
 c56:	cd b7       	in	r28, 0x3d	; 61
 c58:	de b7       	in	r29, 0x3e	; 62
 c5a:	ca 1b       	sub	r28, r26
 c5c:	db 0b       	sbc	r29, r27
 c5e:	0f b6       	in	r0, 0x3f	; 63
 c60:	f8 94       	cli
 c62:	de bf       	out	0x3e, r29	; 62
 c64:	0f be       	out	0x3f, r0	; 63
 c66:	cd bf       	out	0x3d, r28	; 61
 c68:	09 94       	ijmp

00000c6a <__epilogue_restores__>:
 c6a:	2a 88       	ldd	r2, Y+18	; 0x12
 c6c:	39 88       	ldd	r3, Y+17	; 0x11
 c6e:	48 88       	ldd	r4, Y+16	; 0x10
 c70:	5f 84       	ldd	r5, Y+15	; 0x0f
 c72:	6e 84       	ldd	r6, Y+14	; 0x0e
 c74:	7d 84       	ldd	r7, Y+13	; 0x0d
 c76:	8c 84       	ldd	r8, Y+12	; 0x0c
 c78:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7a:	aa 84       	ldd	r10, Y+10	; 0x0a
 c7c:	b9 84       	ldd	r11, Y+9	; 0x09
 c7e:	c8 84       	ldd	r12, Y+8	; 0x08
 c80:	df 80       	ldd	r13, Y+7	; 0x07
 c82:	ee 80       	ldd	r14, Y+6	; 0x06
 c84:	fd 80       	ldd	r15, Y+5	; 0x05
 c86:	0c 81       	ldd	r16, Y+4	; 0x04
 c88:	1b 81       	ldd	r17, Y+3	; 0x03
 c8a:	aa 81       	ldd	r26, Y+2	; 0x02
 c8c:	b9 81       	ldd	r27, Y+1	; 0x01
 c8e:	ce 0f       	add	r28, r30
 c90:	d1 1d       	adc	r29, r1
 c92:	0f b6       	in	r0, 0x3f	; 63
 c94:	f8 94       	cli
 c96:	de bf       	out	0x3e, r29	; 62
 c98:	0f be       	out	0x3f, r0	; 63
 c9a:	cd bf       	out	0x3d, r28	; 61
 c9c:	ed 01       	movw	r28, r26
 c9e:	08 95       	ret

00000ca0 <__udivmodsi4>:
 ca0:	a1 e2       	ldi	r26, 0x21	; 33
 ca2:	1a 2e       	mov	r1, r26
 ca4:	aa 1b       	sub	r26, r26
 ca6:	bb 1b       	sub	r27, r27
 ca8:	fd 01       	movw	r30, r26
 caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__udivmodsi4_ep>

00000cac <__udivmodsi4_loop>:
 cac:	aa 1f       	adc	r26, r26
 cae:	bb 1f       	adc	r27, r27
 cb0:	ee 1f       	adc	r30, r30
 cb2:	ff 1f       	adc	r31, r31
 cb4:	a2 17       	cp	r26, r18
 cb6:	b3 07       	cpc	r27, r19
 cb8:	e4 07       	cpc	r30, r20
 cba:	f5 07       	cpc	r31, r21
 cbc:	20 f0       	brcs	.+8      	; 0xcc6 <__udivmodsi4_ep>
 cbe:	a2 1b       	sub	r26, r18
 cc0:	b3 0b       	sbc	r27, r19
 cc2:	e4 0b       	sbc	r30, r20
 cc4:	f5 0b       	sbc	r31, r21

00000cc6 <__udivmodsi4_ep>:
 cc6:	66 1f       	adc	r22, r22
 cc8:	77 1f       	adc	r23, r23
 cca:	88 1f       	adc	r24, r24
 ccc:	99 1f       	adc	r25, r25
 cce:	1a 94       	dec	r1
 cd0:	69 f7       	brne	.-38     	; 0xcac <__udivmodsi4_loop>
 cd2:	60 95       	com	r22
 cd4:	70 95       	com	r23
 cd6:	80 95       	com	r24
 cd8:	90 95       	com	r25
 cda:	9b 01       	movw	r18, r22
 cdc:	ac 01       	movw	r20, r24
 cde:	bd 01       	movw	r22, r26
 ce0:	cf 01       	movw	r24, r30
 ce2:	08 95       	ret

00000ce4 <__umulhisi3>:
 ce4:	a2 9f       	mul	r26, r18
 ce6:	b0 01       	movw	r22, r0
 ce8:	b3 9f       	mul	r27, r19
 cea:	c0 01       	movw	r24, r0
 cec:	a3 9f       	mul	r26, r19
 cee:	70 0d       	add	r23, r0
 cf0:	81 1d       	adc	r24, r1
 cf2:	11 24       	eor	r1, r1
 cf4:	91 1d       	adc	r25, r1
 cf6:	b2 9f       	mul	r27, r18
 cf8:	70 0d       	add	r23, r0
 cfa:	81 1d       	adc	r24, r1
 cfc:	11 24       	eor	r1, r1
 cfe:	91 1d       	adc	r25, r1
 d00:	08 95       	ret

00000d02 <_exit>:
 d02:	f8 94       	cli

00000d04 <__stop_program>:
 d04:	ff cf       	rjmp	.-2      	; 0xd04 <__stop_program>
