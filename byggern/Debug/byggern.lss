
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  0000164a  000016de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000164a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002b0  008002b0  0000188e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c3  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d42  00000000  00000000  00002e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aaf  00000000  00000000  00003b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00004634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000696  00000000  00000000  00004fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000564c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_16>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf ef       	ldi	r28, 0xFF	; 255
      a4:	d4 e0       	ldi	r29, 0x04	; 4
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	12 e0       	ldi	r17, 0x02	; 2
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	ea e4       	ldi	r30, 0x4A	; 74
      b2:	f6 e1       	ldi	r31, 0x16	; 22
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 3b       	cpi	r26, 0xB0	; 176
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	22 e0       	ldi	r18, 0x02	; 2
      c2:	a0 eb       	ldi	r26, 0xB0	; 176
      c4:	b2 e0       	ldi	r27, 0x02	; 2
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 3b       	cpi	r26, 0xBE	; 190
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 29 01 	call	0x252	; 0x252 <main>
      d4:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
      dc:	30 98       	cbi	0x06, 0	; 6
      de:	08 95       	ret

000000e0 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
      e0:	84 60       	ori	r24, 0x04	; 4
      e2:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1142>
	

	while (test_bit(PINE, PINE0)) {
      e6:	28 99       	sbic	0x05, 0	; 5
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <readAdc+0x6>

	}
	
	return *adc;
      ea:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1142>
      ee:	08 95       	ret

000000f0 <SRAM_test>:
#include "touchButton.h"
#include "avr/interrupt.h"


void SRAM_test(void)
{
      f0:	cf 92       	push	r12
      f2:	df 92       	push	r13
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
uint16_t retrieval_errors = 0;
printf("Starting SRAM test...\n\r");
     100:	8a e0       	ldi	r24, 0x0A	; 10
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	9f 93       	push	r25
     106:	8f 93       	push	r24
     108:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
// rand() stores some internal state, so calling this function in a loop will
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
     10c:	0e 94 43 06 	call	0xc86	; 0xc86 <rand>
     110:	7c 01       	movw	r14, r24
// Write phase: Immediately check that the correct value was stored
srand(seed);
     112:	0e 94 48 06 	call	0xc90	; 0xc90 <srand>
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
for (uint16_t i = 0; i < ext_ram_size; i++) {
     11a:	c1 2c       	mov	r12, r1
     11c:	d1 2c       	mov	r13, r1

void SRAM_test(void)
{
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	10 e0       	ldi	r17, 0x00	; 0
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
ext_ram[i] = some_value;
uint8_t retreived_value = ext_ram[i];
if (retreived_value != some_value) {
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     122:	c2 e2       	ldi	r28, 0x22	; 34
     124:	d1 e0       	ldi	r29, 0x01	; 1
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
// Write phase: Immediately check that the correct value was stored
srand(seed);
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
     126:	0e 94 43 06 	call	0xc86	; 0xc86 <rand>
     12a:	f6 01       	movw	r30, r12
     12c:	f8 5e       	subi	r31, 0xE8	; 232
ext_ram[i] = some_value;
     12e:	80 83       	st	Z, r24
uint8_t retreived_value = ext_ram[i];
     130:	20 81       	ld	r18, Z
if (retreived_value != some_value) {
     132:	28 17       	cp	r18, r24
     134:	a9 f0       	breq	.+42     	; 0x160 <SRAM_test+0x70>
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     136:	99 27       	eor	r25, r25
     138:	9f 93       	push	r25
     13a:	8f 93       	push	r24
     13c:	1f 92       	push	r1
     13e:	2f 93       	push	r18
     140:	df 92       	push	r13
     142:	cf 92       	push	r12
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
write_errors++;
     14c:	0f 5f       	subi	r16, 0xFF	; 255
     14e:	1f 4f       	sbci	r17, 0xFF	; 255
     150:	8d b7       	in	r24, 0x3d	; 61
     152:	9e b7       	in	r25, 0x3e	; 62
     154:	08 96       	adiw	r24, 0x08	; 8
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	9e bf       	out	0x3e, r25	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	8d bf       	out	0x3d, r24	; 61
// rand() stores some internal state, so calling this function in a loop will
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
// Write phase: Immediately check that the correct value was stored
srand(seed);
for (uint16_t i = 0; i < ext_ram_size; i++) {
     160:	9f ef       	ldi	r25, 0xFF	; 255
     162:	c9 1a       	sub	r12, r25
     164:	d9 0a       	sbc	r13, r25
     166:	c1 14       	cp	r12, r1
     168:	88 e0       	ldi	r24, 0x08	; 8
     16a:	d8 06       	cpc	r13, r24
     16c:	e1 f6       	brne	.-72     	; 0x126 <SRAM_test+0x36>
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
write_errors++;
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
     16e:	c7 01       	movw	r24, r14
     170:	0e 94 48 06 	call	0xc90	; 0xc90 <srand>
for (uint16_t i = 0; i < ext_ram_size; i++) {
     174:	c0 e0       	ldi	r28, 0x00	; 0
     176:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
uint16_t retrieval_errors = 0;
     178:	e1 2c       	mov	r14, r1
     17a:	f1 2c       	mov	r15, r1
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
uint8_t retreived_value = ext_ram[i];
if (retreived_value != some_value) {
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     17c:	0f 2e       	mov	r0, r31
     17e:	fc e5       	ldi	r31, 0x5C	; 92
     180:	cf 2e       	mov	r12, r31
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	df 2e       	mov	r13, r31
     186:	f0 2d       	mov	r31, r0
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
     188:	0e 94 43 06 	call	0xc86	; 0xc86 <rand>
     18c:	fe 01       	movw	r30, r28
     18e:	f8 5e       	subi	r31, 0xE8	; 232
uint8_t retreived_value = ext_ram[i];
     190:	20 81       	ld	r18, Z
if (retreived_value != some_value) {
     192:	28 17       	cp	r18, r24
     194:	b1 f0       	breq	.+44     	; 0x1c2 <SRAM_test+0xd2>
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     196:	99 27       	eor	r25, r25
     198:	9f 93       	push	r25
     19a:	8f 93       	push	r24
     19c:	1f 92       	push	r1
     19e:	2f 93       	push	r18
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	df 92       	push	r13
     1a6:	cf 92       	push	r12
     1a8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
i, retreived_value, some_value);
retrieval_errors++;
     1ac:	9f ef       	ldi	r25, 0xFF	; 255
     1ae:	e9 1a       	sub	r14, r25
     1b0:	f9 0a       	sbc	r15, r25
     1b2:	8d b7       	in	r24, 0x3d	; 61
     1b4:	9e b7       	in	r25, 0x3e	; 62
     1b6:	08 96       	adiw	r24, 0x08	; 8
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	9e bf       	out	0x3e, r25	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	8d bf       	out	0x3d, r24	; 61
write_errors++;
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
     1c2:	21 96       	adiw	r28, 0x01	; 1
     1c4:	c1 15       	cp	r28, r1
     1c6:	98 e0       	ldi	r25, 0x08	; 8
     1c8:	d9 07       	cpc	r29, r25
     1ca:	f1 f6       	brne	.-68     	; 0x188 <SRAM_test+0x98>
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
i, retreived_value, some_value);
retrieval_errors++;
}
}
printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
     1cc:	ff 92       	push	r15
     1ce:	ef 92       	push	r14
     1d0:	1f 93       	push	r17
     1d2:	0f 93       	push	r16
     1d4:	8a e9       	ldi	r24, 0x9A	; 154
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
}
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <__vector_16>:

ISR (TIMER0_COMP_vect) {
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	11 24       	eor	r1, r1
     208:	2f 93       	push	r18
     20a:	3f 93       	push	r19
     20c:	4f 93       	push	r20
     20e:	5f 93       	push	r21
     210:	6f 93       	push	r22
     212:	7f 93       	push	r23
     214:	8f 93       	push	r24
     216:	9f 93       	push	r25
     218:	af 93       	push	r26
     21a:	bf 93       	push	r27
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
	printf("timer interrupt");
     220:	85 ef       	ldi	r24, 0xF5	; 245
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	9f 93       	push	r25
     226:	8f 93       	push	r24
     228:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
}
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	bf 91       	pop	r27
     236:	af 91       	pop	r26
     238:	9f 91       	pop	r25
     23a:	8f 91       	pop	r24
     23c:	7f 91       	pop	r23
     23e:	6f 91       	pop	r22
     240:	5f 91       	pop	r21
     242:	4f 91       	pop	r20
     244:	3f 91       	pop	r19
     246:	2f 91       	pop	r18
     248:	0f 90       	pop	r0
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	0f 90       	pop	r0
     24e:	1f 90       	pop	r1
     250:	18 95       	reti

00000252 <main>:

int main(void)
{
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	28 97       	sbiw	r28, 0x08	; 8
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
	//DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
	setupInit();
     266:	0e 94 bd 02 	call	0x57a	; 0x57a <setupInit>
	SRAM_test();
     26a:	0e 94 78 00 	call	0xf0	; 0xf0 <SRAM_test>
	printf("Hello, world!\n\r");
     26e:	85 e0       	ldi	r24, 0x05	; 5
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	9f 93       	push	r25
     274:	8f 93       	push	r24
     276:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
	buttonValues_t buttons;
	
	//Enable interrupt from timer
	
	//Disable global interrupts
	cli();
     27a:	f8 94       	cli
	
	//Setup code here for timer interrupt
	TCCR0 = (1 << COM00 | 1 << COM01);
     27c:	80 e3       	ldi	r24, 0x30	; 48
     27e:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
     280:	78 94       	sei
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
		
		_delay_ms(500);
		joystick_readPosition(&pos);
		slider_readPosition(&slider_pos);
		touchButton_readButtons(&buttons);
		printf("ADC: \n\r");
     286:	0f 2e       	mov	r0, r31
     288:	f5 e1       	ldi	r31, 0x15	; 21
     28a:	8f 2e       	mov	r8, r31
     28c:	f2 e0       	ldi	r31, 0x02	; 2
     28e:	9f 2e       	mov	r9, r31
     290:	f0 2d       	mov	r31, r0
		printf("x: %i\t", pos.x_pos);
     292:	0f 2e       	mov	r0, r31
     294:	fd e1       	ldi	r31, 0x1D	; 29
     296:	af 2e       	mov	r10, r31
     298:	f2 e0       	ldi	r31, 0x02	; 2
     29a:	bf 2e       	mov	r11, r31
     29c:	f0 2d       	mov	r31, r0
		printf("y: %i\n\r", pos.y_pos);
     29e:	0f 2e       	mov	r0, r31
     2a0:	f4 e2       	ldi	r31, 0x24	; 36
     2a2:	cf 2e       	mov	r12, r31
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	df 2e       	mov	r13, r31
     2a8:	f0 2d       	mov	r31, r0
		joystick_printDirection(joystick_getDirection(&pos));
		printf("Slider left: %i\tSlider right: %i\n\r", slider_pos.left_pos, slider_pos.right_pos);
     2aa:	0f 2e       	mov	r0, r31
     2ac:	fc e2       	ldi	r31, 0x2C	; 44
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f2 e0       	ldi	r31, 0x02	; 2
     2b2:	ff 2e       	mov	r15, r31
     2b4:	f0 2d       	mov	r31, r0
		printf("Button left: %i \tButton right: %i\n\r", buttons.left_button, buttons.right_button);
     2b6:	0f e4       	ldi	r16, 0x4F	; 79
     2b8:	12 e0       	ldi	r17, 0x02	; 2
		printf("Angle: %i\n\r", pos.angle);
     2ba:	0f 2e       	mov	r0, r31
     2bc:	f3 e7       	ldi	r31, 0x73	; 115
     2be:	6f 2e       	mov	r6, r31
     2c0:	f2 e0       	ldi	r31, 0x02	; 2
     2c2:	7f 2e       	mov	r7, r31
     2c4:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c6:	2f ef       	ldi	r18, 0xFF	; 255
     2c8:	8f e7       	ldi	r24, 0x7F	; 127
     2ca:	97 e0       	ldi	r25, 0x07	; 7
     2cc:	21 50       	subi	r18, 0x01	; 1
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	90 40       	sbci	r25, 0x00	; 0
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x7a>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x84>
     2d6:	00 00       	nop

	
	while (1) {
		
		_delay_ms(500);
		joystick_readPosition(&pos);
     2d8:	ce 01       	movw	r24, r28
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	0e 94 c5 01 	call	0x38a	; 0x38a <joystick_readPosition>
		slider_readPosition(&slider_pos);
     2e0:	ce 01       	movw	r24, r28
     2e2:	05 96       	adiw	r24, 0x05	; 5
     2e4:	0e 94 ca 02 	call	0x594	; 0x594 <slider_readPosition>
		touchButton_readButtons(&buttons);
     2e8:	ce 01       	movw	r24, r28
     2ea:	07 96       	adiw	r24, 0x07	; 7
     2ec:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <touchButton_readButtons>
		printf("ADC: \n\r");
     2f0:	9f 92       	push	r9
     2f2:	8f 92       	push	r8
     2f4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
		printf("x: %i\t", pos.x_pos);
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	28 2f       	mov	r18, r24
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	33 0b       	sbc	r19, r19
     302:	3f 93       	push	r19
     304:	8f 93       	push	r24
     306:	bf 92       	push	r11
     308:	af 92       	push	r10
     30a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
		printf("y: %i\n\r", pos.y_pos);
     30e:	8a 81       	ldd	r24, Y+2	; 0x02
     310:	28 2f       	mov	r18, r24
     312:	08 2e       	mov	r0, r24
     314:	00 0c       	add	r0, r0
     316:	33 0b       	sbc	r19, r19
     318:	3f 93       	push	r19
     31a:	8f 93       	push	r24
     31c:	df 92       	push	r13
     31e:	cf 92       	push	r12
     320:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
		joystick_printDirection(joystick_getDirection(&pos));
     324:	ce 01       	movw	r24, r28
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	0e 94 55 02 	call	0x4aa	; 0x4aa <joystick_getDirection>
     32c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <joystick_printDirection>
		printf("Slider left: %i\tSlider right: %i\n\r", slider_pos.left_pos, slider_pos.right_pos);
     330:	8e 81       	ldd	r24, Y+6	; 0x06
     332:	1f 92       	push	r1
     334:	8f 93       	push	r24
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	1f 92       	push	r1
     33a:	8f 93       	push	r24
     33c:	ff 92       	push	r15
     33e:	ef 92       	push	r14
     340:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
		printf("Button left: %i \tButton right: %i\n\r", buttons.left_button, buttons.right_button);
     344:	88 85       	ldd	r24, Y+8	; 0x08
     346:	1f 92       	push	r1
     348:	8f 93       	push	r24
     34a:	8f 81       	ldd	r24, Y+7	; 0x07
     34c:	1f 92       	push	r1
     34e:	8f 93       	push	r24
     350:	1f 93       	push	r17
     352:	0f 93       	push	r16
     354:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
		printf("Angle: %i\n\r", pos.angle);
     358:	8c 81       	ldd	r24, Y+4	; 0x04
     35a:	8f 93       	push	r24
     35c:	8b 81       	ldd	r24, Y+3	; 0x03
     35e:	8f 93       	push	r24
     360:	7f 92       	push	r7
     362:	6f 92       	push	r6
     364:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	a9 cf       	rjmp	.-174    	; 0x2c6 <main+0x74>

00000374 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     37a:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     384:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end>
     388:	08 95       	ret

0000038a <joystick_readPosition>:
}
void joystick_readPosition(joystick_position_t * pos) {
     38a:	cf 92       	push	r12
     38c:	df 92       	push	r13
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	ec 01       	movw	r28, r24
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     3a0:	18 2f       	mov	r17, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     3a8:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     3aa:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <joystickOffsetX>
     3ae:	16 17       	cp	r17, r22
     3b0:	78 f4       	brcc	.+30     	; 0x3d0 <joystick_readPosition+0x46>
		pos->x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	21 2f       	mov	r18, r17
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	26 1b       	sub	r18, r22
     3ba:	37 0b       	sbc	r19, r23
     3bc:	44 e6       	ldi	r20, 0x64	; 100
     3be:	42 9f       	mul	r20, r18
     3c0:	c0 01       	movw	r24, r0
     3c2:	43 9f       	mul	r20, r19
     3c4:	90 0d       	add	r25, r0
     3c6:	11 24       	eor	r1, r1
     3c8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodhi4>
     3cc:	68 83       	st	Y, r22
     3ce:	13 c0       	rjmp	.+38     	; 0x3f6 <joystick_readPosition+0x6c>
	} else {
		pos->x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     3d0:	46 2f       	mov	r20, r22
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	21 2f       	mov	r18, r17
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	24 1b       	sub	r18, r20
     3da:	35 0b       	sbc	r19, r21
     3dc:	64 e6       	ldi	r22, 0x64	; 100
     3de:	62 9f       	mul	r22, r18
     3e0:	c0 01       	movw	r24, r0
     3e2:	63 9f       	mul	r22, r19
     3e4:	90 0d       	add	r25, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	6f ef       	ldi	r22, 0xFF	; 255
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	64 1b       	sub	r22, r20
     3ee:	75 0b       	sbc	r23, r21
     3f0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodhi4>
     3f4:	68 83       	st	Y, r22
	}
	if (y_pos < joystickOffsetY) {
     3f6:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__data_end>
     3fa:	e2 17       	cp	r30, r18
     3fc:	80 f4       	brcc	.+32     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		pos->y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     3fe:	62 2f       	mov	r22, r18
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	4e 2f       	mov	r20, r30
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	46 1b       	sub	r20, r22
     408:	57 0b       	sbc	r21, r23
     40a:	24 e6       	ldi	r18, 0x64	; 100
     40c:	24 9f       	mul	r18, r20
     40e:	c0 01       	movw	r24, r0
     410:	25 9f       	mul	r18, r21
     412:	90 0d       	add	r25, r0
     414:	11 24       	eor	r1, r1
     416:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodhi4>
     41a:	69 83       	std	Y+1, r22	; 0x01
     41c:	12 c0       	rjmp	.+36     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	} else {
		pos->y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	4e 2f       	mov	r20, r30
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	42 1b       	sub	r20, r18
     426:	53 0b       	sbc	r21, r19
     428:	64 e6       	ldi	r22, 0x64	; 100
     42a:	64 9f       	mul	r22, r20
     42c:	c0 01       	movw	r24, r0
     42e:	65 9f       	mul	r22, r21
     430:	90 0d       	add	r25, r0
     432:	11 24       	eor	r1, r1
     434:	6f ef       	ldi	r22, 0xFF	; 255
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	62 1b       	sub	r22, r18
     43a:	73 0b       	sbc	r23, r19
     43c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodhi4>
     440:	69 83       	std	Y+1, r22	; 0x01
	}
	pos->angle = atan2(pos->y_pos, pos->x_pos)*360/2.0/3.14;
     442:	68 81       	ld	r22, Y
     444:	06 2e       	mov	r0, r22
     446:	00 0c       	add	r0, r0
     448:	77 0b       	sbc	r23, r23
     44a:	88 0b       	sbc	r24, r24
     44c:	99 0b       	sbc	r25, r25
     44e:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
     452:	6b 01       	movw	r12, r22
     454:	7c 01       	movw	r14, r24
     456:	69 81       	ldd	r22, Y+1	; 0x01
     458:	06 2e       	mov	r0, r22
     45a:	00 0c       	add	r0, r0
     45c:	77 0b       	sbc	r23, r23
     45e:	88 0b       	sbc	r24, r24
     460:	99 0b       	sbc	r25, r25
     462:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
     466:	a7 01       	movw	r20, r14
     468:	96 01       	movw	r18, r12
     46a:	0e 94 2d 03 	call	0x65a	; 0x65a <atan2>
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	44 eb       	ldi	r20, 0xB4	; 180
     474:	53 e4       	ldi	r21, 0x43	; 67
     476:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__mulsf3>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	5f e3       	ldi	r21, 0x3F	; 63
     482:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__mulsf3>
     486:	23 ec       	ldi	r18, 0xC3	; 195
     488:	35 ef       	ldi	r19, 0xF5	; 245
     48a:	48 e4       	ldi	r20, 0x48	; 72
     48c:	50 e4       	ldi	r21, 0x40	; 64
     48e:	0e 94 8c 03 	call	0x718	; 0x718 <__divsf3>
     492:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fixsfsi>
     496:	7b 83       	std	Y+3, r23	; 0x03
     498:	6a 83       	std	Y+2, r22	; 0x02
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	08 95       	ret

000004aa <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     4aa:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     4ac:	80 81       	ld	r24, Z
     4ae:	94 e0       	ldi	r25, 0x04	; 4
     4b0:	98 0f       	add	r25, r24
     4b2:	99 30       	cpi	r25, 0x09	; 9
     4b4:	20 f4       	brcc	.+8      	; 0x4be <joystick_getDirection+0x14>
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	9c 5f       	subi	r25, 0xFC	; 252
     4ba:	99 30       	cpi	r25, 0x09	; 9
     4bc:	90 f0       	brcs	.+36     	; 0x4e2 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     4be:	85 30       	cpi	r24, 0x05	; 5
     4c0:	2c f0       	brlt	.+10     	; 0x4cc <joystick_getDirection+0x22>
     4c2:	81 81       	ldd	r24, Z+1	; 0x01
     4c4:	8f 5c       	subi	r24, 0xCF	; 207
     4c6:	83 36       	cpi	r24, 0x63	; 99
     4c8:	38 f4       	brcc	.+14     	; 0x4d8 <joystick_getDirection+0x2e>
     4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     4cc:	8c 3f       	cpi	r24, 0xFC	; 252
     4ce:	24 f4       	brge	.+8      	; 0x4d8 <joystick_getDirection+0x2e>
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	8f 5c       	subi	r24, 0xCF	; 207
     4d4:	83 36       	cpi	r24, 0x63	; 99
     4d6:	48 f0       	brcs	.+18     	; 0x4ea <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     4d8:	81 81       	ldd	r24, Z+1	; 0x01
     4da:	8c 3f       	cpi	r24, 0xFC	; 252
     4dc:	44 f0       	brlt	.+16     	; 0x4ee <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	08 95       	ret
	pos->angle = atan2(pos->y_pos, pos->x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     4e2:	84 e0       	ldi	r24, 0x04	; 4
     4e4:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     4ee:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     4f0:	08 95       	ret

000004f2 <joystick_printDirection>:
void joystick_printDirection(DIRECTION_t dir) {
     4f2:	cf 93       	push	r28
     4f4:	c8 2f       	mov	r28, r24
	printf("Direction:\t");
     4f6:	8f e7       	ldi	r24, 0x7F	; 127
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
	switch(dir) {
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	c2 30       	cpi	r28, 0x02	; 2
     508:	29 f1       	breq	.+74     	; 0x554 <__stack+0x55>
     50a:	28 f4       	brcc	.+10     	; 0x516 <__stack+0x17>
     50c:	cc 23       	and	r28, r28
     50e:	81 f0       	breq	.+32     	; 0x530 <__stack+0x31>
     510:	c1 30       	cpi	r28, 0x01	; 1
     512:	b9 f0       	breq	.+46     	; 0x542 <__stack+0x43>
     514:	30 c0       	rjmp	.+96     	; 0x576 <__stack+0x77>
     516:	c3 30       	cpi	r28, 0x03	; 3
     518:	31 f1       	breq	.+76     	; 0x566 <__stack+0x67>
     51a:	c4 30       	cpi	r28, 0x04	; 4
     51c:	61 f5       	brne	.+88     	; 0x576 <__stack+0x77>
		case NEUTRAL:
			printf("Neutral\n\r");
     51e:	8b e8       	ldi	r24, 0x8B	; 139
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
			return;
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	23 c0       	rjmp	.+70     	; 0x576 <__stack+0x77>
		case LEFT:
			printf("Left\n\r");
     530:	85 e9       	ldi	r24, 0x95	; 149
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
			return;
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	1a c0       	rjmp	.+52     	; 0x576 <__stack+0x77>
		case RIGHT:
			printf("Right\n\r");
     542:	8c e9       	ldi	r24, 0x9C	; 156
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
			return;
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	11 c0       	rjmp	.+34     	; 0x576 <__stack+0x77>
		case UP:
			printf("Up\n\r");
     554:	84 ea       	ldi	r24, 0xA4	; 164
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
			return;
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	08 c0       	rjmp	.+16     	; 0x576 <__stack+0x77>
		case DOWN:
			printf("Down\n\r");
     566:	89 ea       	ldi	r24, 0xA9	; 169
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printf>
			return;
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
		
	}
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <setupInit>:
#include "adc.h"
#include "joystick.h"
#include "setup.h"

	void setupInit(void){
	xmem_init();
     57a:	0e 94 13 03 	call	0x626	; 0x626 <xmem_init>
	USART_init(MYUBRR);
     57e:	8f e1       	ldi	r24, 0x1F	; 31
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 02 03 	call	0x604	; 0x604 <USART_init>
	adcInit();
     586:	0e 94 6e 00 	call	0xdc	; 0xdc <adcInit>
	joystickInit();
     58a:	0e 94 ba 01 	call	0x374	; 0x374 <joystickInit>
	touchButton_init();
     58e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <touchButton_init>
     592:	08 95       	ret

00000594 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	ec 01       	movw	r28, r24
	pos->left_pos = readAdc(LEFT_POS_CHANNEL);
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     5a0:	88 83       	st	Y, r24
	pos->right_pos = readAdc(RIGHT_POS_CHANNEL);
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     5a8:	89 83       	std	Y+1, r24	; 0x01
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     5b0:	36 b3       	in	r19, 0x16	; 22
     5b2:	26 b3       	in	r18, 0x16	; 22
     5b4:	47 b3       	in	r20, 0x17	; 23
     5b6:	31 70       	andi	r19, 0x01	; 1
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	bc 01       	movw	r22, r24
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <touchButton_init+0x14>
     5c0:	66 0f       	add	r22, r22
     5c2:	77 1f       	adc	r23, r23
     5c4:	3a 95       	dec	r19
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <touchButton_init+0x10>
     5c8:	22 70       	andi	r18, 0x02	; 2
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <touchButton_init+0x20>
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	2a 95       	dec	r18
     5d2:	e2 f7       	brpl	.-8      	; 0x5cc <touchButton_init+0x1c>
     5d4:	86 2b       	or	r24, r22
     5d6:	97 2b       	or	r25, r23
     5d8:	80 95       	com	r24
     5da:	90 95       	com	r25
     5dc:	84 23       	and	r24, r20
     5de:	87 bb       	out	0x17, r24	; 23
     5e0:	08 95       	ret

000005e2 <touchButton_readButtons>:
}
touchButton_readButtons(buttonValues_t * buttons) {
     5e2:	fc 01       	movw	r30, r24
	buttons->left_button = !!(BUTTON_LEFT);
     5e4:	96 b3       	in	r25, 0x16	; 22
     5e6:	91 70       	andi	r25, 0x01	; 1
     5e8:	90 83       	st	Z, r25
	buttons->right_button = !!(BUTTON_RIGHT);
     5ea:	96 b3       	in	r25, 0x16	; 22
     5ec:	96 95       	lsr	r25
     5ee:	91 70       	andi	r25, 0x01	; 1
     5f0:	91 83       	std	Z+1, r25	; 0x01
     5f2:	08 95       	ret

000005f4 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     5f4:	5d 9b       	sbis	0x0b, 5	; 11
     5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     5f8:	8c b9       	out	0x0c, r24	; 12
     5fa:	08 95       	ret

000005fc <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     5fc:	5f 9b       	sbis	0x0b, 7	; 11
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <USART_receiveChar>
		;
	
	return UDR0;
     600:	8c b1       	in	r24, 0x0c	; 12
     602:	08 95       	ret

00000604 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     604:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     606:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     608:	88 e1       	ldi	r24, 0x18	; 24
     60a:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     60c:	8e e8       	ldi	r24, 0x8E	; 142
     60e:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     610:	6e ef       	ldi	r22, 0xFE	; 254
     612:	72 e0       	ldi	r23, 0x02	; 2
     614:	8a ef       	ldi	r24, 0xFA	; 250
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 53 06 	call	0xca6	; 0xca6 <fdevopen>
     61c:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <uart+0x1>
     620:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <uart>
     624:	08 95       	ret

00000626 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     626:	85 b7       	in	r24, 0x35	; 53
     628:	80 68       	ori	r24, 0x80	; 128
     62a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     62c:	80 b7       	in	r24, 0x30	; 48
     62e:	88 60       	ori	r24, 0x08	; 8
     630:	80 bf       	out	0x30, r24	; 48
     632:	08 95       	ret
     634:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     638:	60 f0       	brcs	.+24     	; 0x652 <xmem_init+0x2c>
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	09 f4       	brne	.+2      	; 0x642 <xmem_init+0x1c>
     640:	9e ef       	ldi	r25, 0xFE	; 254
     642:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     646:	28 f0       	brcs	.+10     	; 0x652 <xmem_init+0x2c>
     648:	40 e8       	ldi	r20, 0x80	; 128
     64a:	51 e0       	ldi	r21, 0x01	; 1
     64c:	71 f4       	brne	.+28     	; 0x66a <atan2+0x10>
     64e:	5e ef       	ldi	r21, 0xFE	; 254
     650:	0c c0       	rjmp	.+24     	; 0x66a <atan2+0x10>
     652:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_nan>
     656:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>

0000065a <atan2>:
     65a:	e9 2f       	mov	r30, r25
     65c:	e0 78       	andi	r30, 0x80	; 128
     65e:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     662:	40 f3       	brcs	.-48     	; 0x634 <xmem_init+0xe>
     664:	09 2e       	mov	r0, r25
     666:	05 2a       	or	r0, r21
     668:	b1 f3       	breq	.-20     	; 0x656 <xmem_init+0x30>
     66a:	26 17       	cp	r18, r22
     66c:	37 07       	cpc	r19, r23
     66e:	48 07       	cpc	r20, r24
     670:	59 07       	cpc	r21, r25
     672:	38 f0       	brcs	.+14     	; 0x682 <atan2+0x28>
     674:	0e 2e       	mov	r0, r30
     676:	07 f8       	bld	r0, 7
     678:	e0 25       	eor	r30, r0
     67a:	69 f0       	breq	.+26     	; 0x696 <atan2+0x3c>
     67c:	e0 25       	eor	r30, r0
     67e:	e0 64       	ori	r30, 0x40	; 64
     680:	0a c0       	rjmp	.+20     	; 0x696 <atan2+0x3c>
     682:	ef 63       	ori	r30, 0x3F	; 63
     684:	07 f8       	bld	r0, 7
     686:	00 94       	com	r0
     688:	07 fa       	bst	r0, 7
     68a:	db 01       	movw	r26, r22
     68c:	b9 01       	movw	r22, r18
     68e:	9d 01       	movw	r18, r26
     690:	dc 01       	movw	r26, r24
     692:	ca 01       	movw	r24, r20
     694:	ad 01       	movw	r20, r26
     696:	ef 93       	push	r30
     698:	0e 94 a3 03 	call	0x746	; 0x746 <__divsf3_pse>
     69c:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_round>
     6a0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <atan>
     6a4:	5f 91       	pop	r21
     6a6:	55 23       	and	r21, r21
     6a8:	39 f0       	breq	.+14     	; 0x6b8 <atan2+0x5e>
     6aa:	2b ed       	ldi	r18, 0xDB	; 219
     6ac:	3f e0       	ldi	r19, 0x0F	; 15
     6ae:	49 e4       	ldi	r20, 0x49	; 73
     6b0:	50 fd       	sbrc	r21, 0
     6b2:	49 ec       	ldi	r20, 0xC9	; 201
     6b4:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__addsf3>
     6b8:	08 95       	ret

000006ba <atan>:
     6ba:	df 93       	push	r29
     6bc:	dd 27       	eor	r29, r29
     6be:	b9 2f       	mov	r27, r25
     6c0:	bf 77       	andi	r27, 0x7F	; 127
     6c2:	40 e8       	ldi	r20, 0x80	; 128
     6c4:	5f e3       	ldi	r21, 0x3F	; 63
     6c6:	16 16       	cp	r1, r22
     6c8:	17 06       	cpc	r1, r23
     6ca:	48 07       	cpc	r20, r24
     6cc:	5b 07       	cpc	r21, r27
     6ce:	18 f4       	brcc	.+6      	; 0x6d6 <atan+0x1c>
     6d0:	d9 2f       	mov	r29, r25
     6d2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <inverse>
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	7f 93       	push	r23
     6dc:	6f 93       	push	r22
     6de:	0e 94 5e 05 	call	0xabc	; 0xabc <square>
     6e2:	e0 e7       	ldi	r30, 0x70	; 112
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__fp_powser>
     6ea:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_round>
     6ee:	2f 91       	pop	r18
     6f0:	3f 91       	pop	r19
     6f2:	4f 91       	pop	r20
     6f4:	5f 91       	pop	r21
     6f6:	0e 94 04 05 	call	0xa08	; 0xa08 <__mulsf3x>
     6fa:	dd 23       	and	r29, r29
     6fc:	51 f0       	breq	.+20     	; 0x712 <atan+0x58>
     6fe:	90 58       	subi	r25, 0x80	; 128
     700:	a2 ea       	ldi	r26, 0xA2	; 162
     702:	2a ed       	ldi	r18, 0xDA	; 218
     704:	3f e0       	ldi	r19, 0x0F	; 15
     706:	49 ec       	ldi	r20, 0xC9	; 201
     708:	5f e3       	ldi	r21, 0x3F	; 63
     70a:	d0 78       	andi	r29, 0x80	; 128
     70c:	5d 27       	eor	r21, r29
     70e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__addsf3x>
     712:	df 91       	pop	r29
     714:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>

00000718 <__divsf3>:
     718:	0e 94 a0 03 	call	0x740	; 0x740 <__divsf3x>
     71c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     720:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     724:	58 f0       	brcs	.+22     	; 0x73c <__divsf3+0x24>
     726:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     72a:	40 f0       	brcs	.+16     	; 0x73c <__divsf3+0x24>
     72c:	29 f4       	brne	.+10     	; 0x738 <__divsf3+0x20>
     72e:	5f 3f       	cpi	r21, 0xFF	; 255
     730:	29 f0       	breq	.+10     	; 0x73c <__divsf3+0x24>
     732:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>
     736:	51 11       	cpse	r21, r1
     738:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     73c:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_nan>

00000740 <__divsf3x>:
     740:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     744:	68 f3       	brcs	.-38     	; 0x720 <__divsf3+0x8>

00000746 <__divsf3_pse>:
     746:	99 23       	and	r25, r25
     748:	b1 f3       	breq	.-20     	; 0x736 <__divsf3+0x1e>
     74a:	55 23       	and	r21, r21
     74c:	91 f3       	breq	.-28     	; 0x732 <__divsf3+0x1a>
     74e:	95 1b       	sub	r25, r21
     750:	55 0b       	sbc	r21, r21
     752:	bb 27       	eor	r27, r27
     754:	aa 27       	eor	r26, r26
     756:	62 17       	cp	r22, r18
     758:	73 07       	cpc	r23, r19
     75a:	84 07       	cpc	r24, r20
     75c:	38 f0       	brcs	.+14     	; 0x76c <__divsf3_pse+0x26>
     75e:	9f 5f       	subi	r25, 0xFF	; 255
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	44 1f       	adc	r20, r20
     768:	aa 1f       	adc	r26, r26
     76a:	a9 f3       	breq	.-22     	; 0x756 <__divsf3_pse+0x10>
     76c:	35 d0       	rcall	.+106    	; 0x7d8 <__divsf3_pse+0x92>
     76e:	0e 2e       	mov	r0, r30
     770:	3a f0       	brmi	.+14     	; 0x780 <__divsf3_pse+0x3a>
     772:	e0 e8       	ldi	r30, 0x80	; 128
     774:	32 d0       	rcall	.+100    	; 0x7da <__divsf3_pse+0x94>
     776:	91 50       	subi	r25, 0x01	; 1
     778:	50 40       	sbci	r21, 0x00	; 0
     77a:	e6 95       	lsr	r30
     77c:	00 1c       	adc	r0, r0
     77e:	ca f7       	brpl	.-14     	; 0x772 <__divsf3_pse+0x2c>
     780:	2b d0       	rcall	.+86     	; 0x7d8 <__divsf3_pse+0x92>
     782:	fe 2f       	mov	r31, r30
     784:	29 d0       	rcall	.+82     	; 0x7d8 <__divsf3_pse+0x92>
     786:	66 0f       	add	r22, r22
     788:	77 1f       	adc	r23, r23
     78a:	88 1f       	adc	r24, r24
     78c:	bb 1f       	adc	r27, r27
     78e:	26 17       	cp	r18, r22
     790:	37 07       	cpc	r19, r23
     792:	48 07       	cpc	r20, r24
     794:	ab 07       	cpc	r26, r27
     796:	b0 e8       	ldi	r27, 0x80	; 128
     798:	09 f0       	breq	.+2      	; 0x79c <__divsf3_pse+0x56>
     79a:	bb 0b       	sbc	r27, r27
     79c:	80 2d       	mov	r24, r0
     79e:	bf 01       	movw	r22, r30
     7a0:	ff 27       	eor	r31, r31
     7a2:	93 58       	subi	r25, 0x83	; 131
     7a4:	5f 4f       	sbci	r21, 0xFF	; 255
     7a6:	3a f0       	brmi	.+14     	; 0x7b6 <__divsf3_pse+0x70>
     7a8:	9e 3f       	cpi	r25, 0xFE	; 254
     7aa:	51 05       	cpc	r21, r1
     7ac:	78 f0       	brcs	.+30     	; 0x7cc <__divsf3_pse+0x86>
     7ae:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>
     7b2:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     7b6:	5f 3f       	cpi	r21, 0xFF	; 255
     7b8:	e4 f3       	brlt	.-8      	; 0x7b2 <__divsf3_pse+0x6c>
     7ba:	98 3e       	cpi	r25, 0xE8	; 232
     7bc:	d4 f3       	brlt	.-12     	; 0x7b2 <__divsf3_pse+0x6c>
     7be:	86 95       	lsr	r24
     7c0:	77 95       	ror	r23
     7c2:	67 95       	ror	r22
     7c4:	b7 95       	ror	r27
     7c6:	f7 95       	ror	r31
     7c8:	9f 5f       	subi	r25, 0xFF	; 255
     7ca:	c9 f7       	brne	.-14     	; 0x7be <__divsf3_pse+0x78>
     7cc:	88 0f       	add	r24, r24
     7ce:	91 1d       	adc	r25, r1
     7d0:	96 95       	lsr	r25
     7d2:	87 95       	ror	r24
     7d4:	97 f9       	bld	r25, 7
     7d6:	08 95       	ret
     7d8:	e1 e0       	ldi	r30, 0x01	; 1
     7da:	66 0f       	add	r22, r22
     7dc:	77 1f       	adc	r23, r23
     7de:	88 1f       	adc	r24, r24
     7e0:	bb 1f       	adc	r27, r27
     7e2:	62 17       	cp	r22, r18
     7e4:	73 07       	cpc	r23, r19
     7e6:	84 07       	cpc	r24, r20
     7e8:	ba 07       	cpc	r27, r26
     7ea:	20 f0       	brcs	.+8      	; 0x7f4 <__divsf3_pse+0xae>
     7ec:	62 1b       	sub	r22, r18
     7ee:	73 0b       	sbc	r23, r19
     7f0:	84 0b       	sbc	r24, r20
     7f2:	ba 0b       	sbc	r27, r26
     7f4:	ee 1f       	adc	r30, r30
     7f6:	88 f7       	brcc	.-30     	; 0x7da <__divsf3_pse+0x94>
     7f8:	e0 95       	com	r30
     7fa:	08 95       	ret

000007fc <__fixsfsi>:
     7fc:	0e 94 05 04 	call	0x80a	; 0x80a <__fixunssfsi>
     800:	68 94       	set
     802:	b1 11       	cpse	r27, r1
     804:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     808:	08 95       	ret

0000080a <__fixunssfsi>:
     80a:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_splitA>
     80e:	88 f0       	brcs	.+34     	; 0x832 <__fixunssfsi+0x28>
     810:	9f 57       	subi	r25, 0x7F	; 127
     812:	98 f0       	brcs	.+38     	; 0x83a <__fixunssfsi+0x30>
     814:	b9 2f       	mov	r27, r25
     816:	99 27       	eor	r25, r25
     818:	b7 51       	subi	r27, 0x17	; 23
     81a:	b0 f0       	brcs	.+44     	; 0x848 <__fixunssfsi+0x3e>
     81c:	e1 f0       	breq	.+56     	; 0x856 <__fixunssfsi+0x4c>
     81e:	66 0f       	add	r22, r22
     820:	77 1f       	adc	r23, r23
     822:	88 1f       	adc	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	1a f0       	brmi	.+6      	; 0x82e <__fixunssfsi+0x24>
     828:	ba 95       	dec	r27
     82a:	c9 f7       	brne	.-14     	; 0x81e <__fixunssfsi+0x14>
     82c:	14 c0       	rjmp	.+40     	; 0x856 <__fixunssfsi+0x4c>
     82e:	b1 30       	cpi	r27, 0x01	; 1
     830:	91 f0       	breq	.+36     	; 0x856 <__fixunssfsi+0x4c>
     832:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fp_zero>
     836:	b1 e0       	ldi	r27, 0x01	; 1
     838:	08 95       	ret
     83a:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
     83e:	67 2f       	mov	r22, r23
     840:	78 2f       	mov	r23, r24
     842:	88 27       	eor	r24, r24
     844:	b8 5f       	subi	r27, 0xF8	; 248
     846:	39 f0       	breq	.+14     	; 0x856 <__fixunssfsi+0x4c>
     848:	b9 3f       	cpi	r27, 0xF9	; 249
     84a:	cc f3       	brlt	.-14     	; 0x83e <__fixunssfsi+0x34>
     84c:	86 95       	lsr	r24
     84e:	77 95       	ror	r23
     850:	67 95       	ror	r22
     852:	b3 95       	inc	r27
     854:	d9 f7       	brne	.-10     	; 0x84c <__fixunssfsi+0x42>
     856:	3e f4       	brtc	.+14     	; 0x866 <__fixunssfsi+0x5c>
     858:	90 95       	com	r25
     85a:	80 95       	com	r24
     85c:	70 95       	com	r23
     85e:	61 95       	neg	r22
     860:	7f 4f       	sbci	r23, 0xFF	; 255
     862:	8f 4f       	sbci	r24, 0xFF	; 255
     864:	9f 4f       	sbci	r25, 0xFF	; 255
     866:	08 95       	ret

00000868 <__floatunsisf>:
     868:	e8 94       	clt
     86a:	09 c0       	rjmp	.+18     	; 0x87e <__floatsisf+0x12>

0000086c <__floatsisf>:
     86c:	97 fb       	bst	r25, 7
     86e:	3e f4       	brtc	.+14     	; 0x87e <__floatsisf+0x12>
     870:	90 95       	com	r25
     872:	80 95       	com	r24
     874:	70 95       	com	r23
     876:	61 95       	neg	r22
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	8f 4f       	sbci	r24, 0xFF	; 255
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	99 23       	and	r25, r25
     880:	a9 f0       	breq	.+42     	; 0x8ac <__floatsisf+0x40>
     882:	f9 2f       	mov	r31, r25
     884:	96 e9       	ldi	r25, 0x96	; 150
     886:	bb 27       	eor	r27, r27
     888:	93 95       	inc	r25
     88a:	f6 95       	lsr	r31
     88c:	87 95       	ror	r24
     88e:	77 95       	ror	r23
     890:	67 95       	ror	r22
     892:	b7 95       	ror	r27
     894:	f1 11       	cpse	r31, r1
     896:	f8 cf       	rjmp	.-16     	; 0x888 <__floatsisf+0x1c>
     898:	fa f4       	brpl	.+62     	; 0x8d8 <__floatsisf+0x6c>
     89a:	bb 0f       	add	r27, r27
     89c:	11 f4       	brne	.+4      	; 0x8a2 <__floatsisf+0x36>
     89e:	60 ff       	sbrs	r22, 0
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <__floatsisf+0x6c>
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	8f 4f       	sbci	r24, 0xFF	; 255
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <__floatsisf+0x6c>
     8ac:	88 23       	and	r24, r24
     8ae:	11 f0       	breq	.+4      	; 0x8b4 <__floatsisf+0x48>
     8b0:	96 e9       	ldi	r25, 0x96	; 150
     8b2:	11 c0       	rjmp	.+34     	; 0x8d6 <__floatsisf+0x6a>
     8b4:	77 23       	and	r23, r23
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <__floatsisf+0x54>
     8b8:	9e e8       	ldi	r25, 0x8E	; 142
     8ba:	87 2f       	mov	r24, r23
     8bc:	76 2f       	mov	r23, r22
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <__floatsisf+0x5e>
     8c0:	66 23       	and	r22, r22
     8c2:	71 f0       	breq	.+28     	; 0x8e0 <__floatsisf+0x74>
     8c4:	96 e8       	ldi	r25, 0x86	; 134
     8c6:	86 2f       	mov	r24, r22
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	2a f0       	brmi	.+10     	; 0x8d8 <__floatsisf+0x6c>
     8ce:	9a 95       	dec	r25
     8d0:	66 0f       	add	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	88 1f       	adc	r24, r24
     8d6:	da f7       	brpl	.-10     	; 0x8ce <__floatsisf+0x62>
     8d8:	88 0f       	add	r24, r24
     8da:	96 95       	lsr	r25
     8dc:	87 95       	ror	r24
     8de:	97 f9       	bld	r25, 7
     8e0:	08 95       	ret

000008e2 <__fp_inf>:
     8e2:	97 f9       	bld	r25, 7
     8e4:	9f 67       	ori	r25, 0x7F	; 127
     8e6:	80 e8       	ldi	r24, 0x80	; 128
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	08 95       	ret

000008ee <__fp_nan>:
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
     8f0:	80 ec       	ldi	r24, 0xC0	; 192
     8f2:	08 95       	ret

000008f4 <__fp_powser>:
     8f4:	df 93       	push	r29
     8f6:	cf 93       	push	r28
     8f8:	1f 93       	push	r17
     8fa:	0f 93       	push	r16
     8fc:	ff 92       	push	r15
     8fe:	ef 92       	push	r14
     900:	df 92       	push	r13
     902:	7b 01       	movw	r14, r22
     904:	8c 01       	movw	r16, r24
     906:	68 94       	set
     908:	06 c0       	rjmp	.+12     	; 0x916 <__fp_powser+0x22>
     90a:	da 2e       	mov	r13, r26
     90c:	ef 01       	movw	r28, r30
     90e:	0e 94 04 05 	call	0xa08	; 0xa08 <__mulsf3x>
     912:	fe 01       	movw	r30, r28
     914:	e8 94       	clt
     916:	a5 91       	lpm	r26, Z+
     918:	25 91       	lpm	r18, Z+
     91a:	35 91       	lpm	r19, Z+
     91c:	45 91       	lpm	r20, Z+
     91e:	55 91       	lpm	r21, Z+
     920:	a6 f3       	brts	.-24     	; 0x90a <__fp_powser+0x16>
     922:	ef 01       	movw	r28, r30
     924:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__addsf3x>
     928:	fe 01       	movw	r30, r28
     92a:	97 01       	movw	r18, r14
     92c:	a8 01       	movw	r20, r16
     92e:	da 94       	dec	r13
     930:	69 f7       	brne	.-38     	; 0x90c <__fp_powser+0x18>
     932:	df 90       	pop	r13
     934:	ef 90       	pop	r14
     936:	ff 90       	pop	r15
     938:	0f 91       	pop	r16
     93a:	1f 91       	pop	r17
     93c:	cf 91       	pop	r28
     93e:	df 91       	pop	r29
     940:	08 95       	ret

00000942 <__fp_pscA>:
     942:	00 24       	eor	r0, r0
     944:	0a 94       	dec	r0
     946:	16 16       	cp	r1, r22
     948:	17 06       	cpc	r1, r23
     94a:	18 06       	cpc	r1, r24
     94c:	09 06       	cpc	r0, r25
     94e:	08 95       	ret

00000950 <__fp_pscB>:
     950:	00 24       	eor	r0, r0
     952:	0a 94       	dec	r0
     954:	12 16       	cp	r1, r18
     956:	13 06       	cpc	r1, r19
     958:	14 06       	cpc	r1, r20
     95a:	05 06       	cpc	r0, r21
     95c:	08 95       	ret

0000095e <__fp_round>:
     95e:	09 2e       	mov	r0, r25
     960:	03 94       	inc	r0
     962:	00 0c       	add	r0, r0
     964:	11 f4       	brne	.+4      	; 0x96a <__fp_round+0xc>
     966:	88 23       	and	r24, r24
     968:	52 f0       	brmi	.+20     	; 0x97e <__fp_round+0x20>
     96a:	bb 0f       	add	r27, r27
     96c:	40 f4       	brcc	.+16     	; 0x97e <__fp_round+0x20>
     96e:	bf 2b       	or	r27, r31
     970:	11 f4       	brne	.+4      	; 0x976 <__fp_round+0x18>
     972:	60 ff       	sbrs	r22, 0
     974:	04 c0       	rjmp	.+8      	; 0x97e <__fp_round+0x20>
     976:	6f 5f       	subi	r22, 0xFF	; 255
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	8f 4f       	sbci	r24, 0xFF	; 255
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	08 95       	ret

00000980 <__fp_split3>:
     980:	57 fd       	sbrc	r21, 7
     982:	90 58       	subi	r25, 0x80	; 128
     984:	44 0f       	add	r20, r20
     986:	55 1f       	adc	r21, r21
     988:	59 f0       	breq	.+22     	; 0x9a0 <__fp_splitA+0x10>
     98a:	5f 3f       	cpi	r21, 0xFF	; 255
     98c:	71 f0       	breq	.+28     	; 0x9aa <__fp_splitA+0x1a>
     98e:	47 95       	ror	r20

00000990 <__fp_splitA>:
     990:	88 0f       	add	r24, r24
     992:	97 fb       	bst	r25, 7
     994:	99 1f       	adc	r25, r25
     996:	61 f0       	breq	.+24     	; 0x9b0 <__fp_splitA+0x20>
     998:	9f 3f       	cpi	r25, 0xFF	; 255
     99a:	79 f0       	breq	.+30     	; 0x9ba <__fp_splitA+0x2a>
     99c:	87 95       	ror	r24
     99e:	08 95       	ret
     9a0:	12 16       	cp	r1, r18
     9a2:	13 06       	cpc	r1, r19
     9a4:	14 06       	cpc	r1, r20
     9a6:	55 1f       	adc	r21, r21
     9a8:	f2 cf       	rjmp	.-28     	; 0x98e <__fp_split3+0xe>
     9aa:	46 95       	lsr	r20
     9ac:	f1 df       	rcall	.-30     	; 0x990 <__fp_splitA>
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <__fp_splitA+0x30>
     9b0:	16 16       	cp	r1, r22
     9b2:	17 06       	cpc	r1, r23
     9b4:	18 06       	cpc	r1, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	f1 cf       	rjmp	.-30     	; 0x99c <__fp_splitA+0xc>
     9ba:	86 95       	lsr	r24
     9bc:	71 05       	cpc	r23, r1
     9be:	61 05       	cpc	r22, r1
     9c0:	08 94       	sec
     9c2:	08 95       	ret

000009c4 <__fp_zero>:
     9c4:	e8 94       	clt

000009c6 <__fp_szero>:
     9c6:	bb 27       	eor	r27, r27
     9c8:	66 27       	eor	r22, r22
     9ca:	77 27       	eor	r23, r23
     9cc:	cb 01       	movw	r24, r22
     9ce:	97 f9       	bld	r25, 7
     9d0:	08 95       	ret

000009d2 <inverse>:
     9d2:	9b 01       	movw	r18, r22
     9d4:	ac 01       	movw	r20, r24
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	80 e8       	ldi	r24, 0x80	; 128
     9dc:	9f e3       	ldi	r25, 0x3F	; 63
     9de:	0c 94 8c 03 	jmp	0x718	; 0x718 <__divsf3>

000009e2 <__mulsf3>:
     9e2:	0e 94 04 05 	call	0xa08	; 0xa08 <__mulsf3x>
     9e6:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     9ea:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     9ee:	38 f0       	brcs	.+14     	; 0x9fe <__mulsf3+0x1c>
     9f0:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     9f4:	20 f0       	brcs	.+8      	; 0x9fe <__mulsf3+0x1c>
     9f6:	95 23       	and	r25, r21
     9f8:	11 f0       	breq	.+4      	; 0x9fe <__mulsf3+0x1c>
     9fa:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>
     9fe:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_nan>
     a02:	11 24       	eor	r1, r1
     a04:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>

00000a08 <__mulsf3x>:
     a08:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     a0c:	70 f3       	brcs	.-36     	; 0x9ea <__mulsf3+0x8>

00000a0e <__mulsf3_pse>:
     a0e:	95 9f       	mul	r25, r21
     a10:	c1 f3       	breq	.-16     	; 0xa02 <__mulsf3+0x20>
     a12:	95 0f       	add	r25, r21
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	55 1f       	adc	r21, r21
     a18:	62 9f       	mul	r22, r18
     a1a:	f0 01       	movw	r30, r0
     a1c:	72 9f       	mul	r23, r18
     a1e:	bb 27       	eor	r27, r27
     a20:	f0 0d       	add	r31, r0
     a22:	b1 1d       	adc	r27, r1
     a24:	63 9f       	mul	r22, r19
     a26:	aa 27       	eor	r26, r26
     a28:	f0 0d       	add	r31, r0
     a2a:	b1 1d       	adc	r27, r1
     a2c:	aa 1f       	adc	r26, r26
     a2e:	64 9f       	mul	r22, r20
     a30:	66 27       	eor	r22, r22
     a32:	b0 0d       	add	r27, r0
     a34:	a1 1d       	adc	r26, r1
     a36:	66 1f       	adc	r22, r22
     a38:	82 9f       	mul	r24, r18
     a3a:	22 27       	eor	r18, r18
     a3c:	b0 0d       	add	r27, r0
     a3e:	a1 1d       	adc	r26, r1
     a40:	62 1f       	adc	r22, r18
     a42:	73 9f       	mul	r23, r19
     a44:	b0 0d       	add	r27, r0
     a46:	a1 1d       	adc	r26, r1
     a48:	62 1f       	adc	r22, r18
     a4a:	83 9f       	mul	r24, r19
     a4c:	a0 0d       	add	r26, r0
     a4e:	61 1d       	adc	r22, r1
     a50:	22 1f       	adc	r18, r18
     a52:	74 9f       	mul	r23, r20
     a54:	33 27       	eor	r19, r19
     a56:	a0 0d       	add	r26, r0
     a58:	61 1d       	adc	r22, r1
     a5a:	23 1f       	adc	r18, r19
     a5c:	84 9f       	mul	r24, r20
     a5e:	60 0d       	add	r22, r0
     a60:	21 1d       	adc	r18, r1
     a62:	82 2f       	mov	r24, r18
     a64:	76 2f       	mov	r23, r22
     a66:	6a 2f       	mov	r22, r26
     a68:	11 24       	eor	r1, r1
     a6a:	9f 57       	subi	r25, 0x7F	; 127
     a6c:	50 40       	sbci	r21, 0x00	; 0
     a6e:	9a f0       	brmi	.+38     	; 0xa96 <__mulsf3_pse+0x88>
     a70:	f1 f0       	breq	.+60     	; 0xaae <__mulsf3_pse+0xa0>
     a72:	88 23       	and	r24, r24
     a74:	4a f0       	brmi	.+18     	; 0xa88 <__mulsf3_pse+0x7a>
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	bb 1f       	adc	r27, r27
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	88 1f       	adc	r24, r24
     a82:	91 50       	subi	r25, 0x01	; 1
     a84:	50 40       	sbci	r21, 0x00	; 0
     a86:	a9 f7       	brne	.-22     	; 0xa72 <__mulsf3_pse+0x64>
     a88:	9e 3f       	cpi	r25, 0xFE	; 254
     a8a:	51 05       	cpc	r21, r1
     a8c:	80 f0       	brcs	.+32     	; 0xaae <__mulsf3_pse+0xa0>
     a8e:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>
     a92:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     a96:	5f 3f       	cpi	r21, 0xFF	; 255
     a98:	e4 f3       	brlt	.-8      	; 0xa92 <__mulsf3_pse+0x84>
     a9a:	98 3e       	cpi	r25, 0xE8	; 232
     a9c:	d4 f3       	brlt	.-12     	; 0xa92 <__mulsf3_pse+0x84>
     a9e:	86 95       	lsr	r24
     aa0:	77 95       	ror	r23
     aa2:	67 95       	ror	r22
     aa4:	b7 95       	ror	r27
     aa6:	f7 95       	ror	r31
     aa8:	e7 95       	ror	r30
     aaa:	9f 5f       	subi	r25, 0xFF	; 255
     aac:	c1 f7       	brne	.-16     	; 0xa9e <__mulsf3_pse+0x90>
     aae:	fe 2b       	or	r31, r30
     ab0:	88 0f       	add	r24, r24
     ab2:	91 1d       	adc	r25, r1
     ab4:	96 95       	lsr	r25
     ab6:	87 95       	ror	r24
     ab8:	97 f9       	bld	r25, 7
     aba:	08 95       	ret

00000abc <square>:
     abc:	9b 01       	movw	r18, r22
     abe:	ac 01       	movw	r20, r24
     ac0:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__mulsf3>

00000ac4 <__subsf3>:
     ac4:	50 58       	subi	r21, 0x80	; 128

00000ac6 <__addsf3>:
     ac6:	bb 27       	eor	r27, r27
     ac8:	aa 27       	eor	r26, r26
     aca:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__addsf3x>
     ace:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     ad2:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     ad6:	38 f0       	brcs	.+14     	; 0xae6 <__addsf3+0x20>
     ad8:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     adc:	20 f0       	brcs	.+8      	; 0xae6 <__addsf3+0x20>
     ade:	39 f4       	brne	.+14     	; 0xaee <__addsf3+0x28>
     ae0:	9f 3f       	cpi	r25, 0xFF	; 255
     ae2:	19 f4       	brne	.+6      	; 0xaea <__addsf3+0x24>
     ae4:	26 f4       	brtc	.+8      	; 0xaee <__addsf3+0x28>
     ae6:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_nan>
     aea:	0e f4       	brtc	.+2      	; 0xaee <__addsf3+0x28>
     aec:	e0 95       	com	r30
     aee:	e7 fb       	bst	r30, 7
     af0:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>

00000af4 <__addsf3x>:
     af4:	e9 2f       	mov	r30, r25
     af6:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     afa:	58 f3       	brcs	.-42     	; 0xad2 <__addsf3+0xc>
     afc:	ba 17       	cp	r27, r26
     afe:	62 07       	cpc	r22, r18
     b00:	73 07       	cpc	r23, r19
     b02:	84 07       	cpc	r24, r20
     b04:	95 07       	cpc	r25, r21
     b06:	20 f0       	brcs	.+8      	; 0xb10 <__addsf3x+0x1c>
     b08:	79 f4       	brne	.+30     	; 0xb28 <__addsf3x+0x34>
     b0a:	a6 f5       	brtc	.+104    	; 0xb74 <__addsf3x+0x80>
     b0c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
     b10:	0e f4       	brtc	.+2      	; 0xb14 <__addsf3x+0x20>
     b12:	e0 95       	com	r30
     b14:	0b 2e       	mov	r0, r27
     b16:	ba 2f       	mov	r27, r26
     b18:	a0 2d       	mov	r26, r0
     b1a:	0b 01       	movw	r0, r22
     b1c:	b9 01       	movw	r22, r18
     b1e:	90 01       	movw	r18, r0
     b20:	0c 01       	movw	r0, r24
     b22:	ca 01       	movw	r24, r20
     b24:	a0 01       	movw	r20, r0
     b26:	11 24       	eor	r1, r1
     b28:	ff 27       	eor	r31, r31
     b2a:	59 1b       	sub	r21, r25
     b2c:	99 f0       	breq	.+38     	; 0xb54 <__addsf3x+0x60>
     b2e:	59 3f       	cpi	r21, 0xF9	; 249
     b30:	50 f4       	brcc	.+20     	; 0xb46 <__addsf3x+0x52>
     b32:	50 3e       	cpi	r21, 0xE0	; 224
     b34:	68 f1       	brcs	.+90     	; 0xb90 <__addsf3x+0x9c>
     b36:	1a 16       	cp	r1, r26
     b38:	f0 40       	sbci	r31, 0x00	; 0
     b3a:	a2 2f       	mov	r26, r18
     b3c:	23 2f       	mov	r18, r19
     b3e:	34 2f       	mov	r19, r20
     b40:	44 27       	eor	r20, r20
     b42:	58 5f       	subi	r21, 0xF8	; 248
     b44:	f3 cf       	rjmp	.-26     	; 0xb2c <__addsf3x+0x38>
     b46:	46 95       	lsr	r20
     b48:	37 95       	ror	r19
     b4a:	27 95       	ror	r18
     b4c:	a7 95       	ror	r26
     b4e:	f0 40       	sbci	r31, 0x00	; 0
     b50:	53 95       	inc	r21
     b52:	c9 f7       	brne	.-14     	; 0xb46 <__addsf3x+0x52>
     b54:	7e f4       	brtc	.+30     	; 0xb74 <__addsf3x+0x80>
     b56:	1f 16       	cp	r1, r31
     b58:	ba 0b       	sbc	r27, r26
     b5a:	62 0b       	sbc	r22, r18
     b5c:	73 0b       	sbc	r23, r19
     b5e:	84 0b       	sbc	r24, r20
     b60:	ba f0       	brmi	.+46     	; 0xb90 <__addsf3x+0x9c>
     b62:	91 50       	subi	r25, 0x01	; 1
     b64:	a1 f0       	breq	.+40     	; 0xb8e <__addsf3x+0x9a>
     b66:	ff 0f       	add	r31, r31
     b68:	bb 1f       	adc	r27, r27
     b6a:	66 1f       	adc	r22, r22
     b6c:	77 1f       	adc	r23, r23
     b6e:	88 1f       	adc	r24, r24
     b70:	c2 f7       	brpl	.-16     	; 0xb62 <__addsf3x+0x6e>
     b72:	0e c0       	rjmp	.+28     	; 0xb90 <__addsf3x+0x9c>
     b74:	ba 0f       	add	r27, r26
     b76:	62 1f       	adc	r22, r18
     b78:	73 1f       	adc	r23, r19
     b7a:	84 1f       	adc	r24, r20
     b7c:	48 f4       	brcc	.+18     	; 0xb90 <__addsf3x+0x9c>
     b7e:	87 95       	ror	r24
     b80:	77 95       	ror	r23
     b82:	67 95       	ror	r22
     b84:	b7 95       	ror	r27
     b86:	f7 95       	ror	r31
     b88:	9e 3f       	cpi	r25, 0xFE	; 254
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <__addsf3x+0x9a>
     b8c:	b0 cf       	rjmp	.-160    	; 0xaee <__addsf3+0x28>
     b8e:	93 95       	inc	r25
     b90:	88 0f       	add	r24, r24
     b92:	08 f0       	brcs	.+2      	; 0xb96 <__addsf3x+0xa2>
     b94:	99 27       	eor	r25, r25
     b96:	ee 0f       	add	r30, r30
     b98:	97 95       	ror	r25
     b9a:	87 95       	ror	r24
     b9c:	08 95       	ret

00000b9e <__divmodhi4>:
     b9e:	97 fb       	bst	r25, 7
     ba0:	07 2e       	mov	r0, r23
     ba2:	16 f4       	brtc	.+4      	; 0xba8 <__divmodhi4+0xa>
     ba4:	00 94       	com	r0
     ba6:	07 d0       	rcall	.+14     	; 0xbb6 <__divmodhi4_neg1>
     ba8:	77 fd       	sbrc	r23, 7
     baa:	09 d0       	rcall	.+18     	; 0xbbe <__divmodhi4_neg2>
     bac:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__udivmodhi4>
     bb0:	07 fc       	sbrc	r0, 7
     bb2:	05 d0       	rcall	.+10     	; 0xbbe <__divmodhi4_neg2>
     bb4:	3e f4       	brtc	.+14     	; 0xbc4 <__divmodhi4_exit>

00000bb6 <__divmodhi4_neg1>:
     bb6:	90 95       	com	r25
     bb8:	81 95       	neg	r24
     bba:	9f 4f       	sbci	r25, 0xFF	; 255
     bbc:	08 95       	ret

00000bbe <__divmodhi4_neg2>:
     bbe:	70 95       	com	r23
     bc0:	61 95       	neg	r22
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc4 <__divmodhi4_exit>:
     bc4:	08 95       	ret

00000bc6 <__udivmodhi4>:
     bc6:	aa 1b       	sub	r26, r26
     bc8:	bb 1b       	sub	r27, r27
     bca:	51 e1       	ldi	r21, 0x11	; 17
     bcc:	07 c0       	rjmp	.+14     	; 0xbdc <__udivmodhi4_ep>

00000bce <__udivmodhi4_loop>:
     bce:	aa 1f       	adc	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	a6 17       	cp	r26, r22
     bd4:	b7 07       	cpc	r27, r23
     bd6:	10 f0       	brcs	.+4      	; 0xbdc <__udivmodhi4_ep>
     bd8:	a6 1b       	sub	r26, r22
     bda:	b7 0b       	sbc	r27, r23

00000bdc <__udivmodhi4_ep>:
     bdc:	88 1f       	adc	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	5a 95       	dec	r21
     be2:	a9 f7       	brne	.-22     	; 0xbce <__udivmodhi4_loop>
     be4:	80 95       	com	r24
     be6:	90 95       	com	r25
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	08 95       	ret

00000bee <do_rand>:
     bee:	8f 92       	push	r8
     bf0:	9f 92       	push	r9
     bf2:	af 92       	push	r10
     bf4:	bf 92       	push	r11
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
     c04:	68 81       	ld	r22, Y
     c06:	79 81       	ldd	r23, Y+1	; 0x01
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	9b 81       	ldd	r25, Y+3	; 0x03
     c0c:	61 15       	cp	r22, r1
     c0e:	71 05       	cpc	r23, r1
     c10:	81 05       	cpc	r24, r1
     c12:	91 05       	cpc	r25, r1
     c14:	21 f4       	brne	.+8      	; 0xc1e <do_rand+0x30>
     c16:	64 e2       	ldi	r22, 0x24	; 36
     c18:	79 ed       	ldi	r23, 0xD9	; 217
     c1a:	8b e5       	ldi	r24, 0x5B	; 91
     c1c:	97 e0       	ldi	r25, 0x07	; 7
     c1e:	2d e1       	ldi	r18, 0x1D	; 29
     c20:	33 ef       	ldi	r19, 0xF3	; 243
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divmodsi4>
     c2a:	49 01       	movw	r8, r18
     c2c:	5a 01       	movw	r10, r20
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	a7 ea       	ldi	r26, 0xA7	; 167
     c34:	b1 e4       	ldi	r27, 0x41	; 65
     c36:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__muluhisi3>
     c3a:	6b 01       	movw	r12, r22
     c3c:	7c 01       	movw	r14, r24
     c3e:	ac ee       	ldi	r26, 0xEC	; 236
     c40:	b4 ef       	ldi	r27, 0xF4	; 244
     c42:	a5 01       	movw	r20, r10
     c44:	94 01       	movw	r18, r8
     c46:	0e 94 b6 0a 	call	0x156c	; 0x156c <__mulohisi3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	8c 0d       	add	r24, r12
     c50:	9d 1d       	adc	r25, r13
     c52:	ae 1d       	adc	r26, r14
     c54:	bf 1d       	adc	r27, r15
     c56:	b7 ff       	sbrs	r27, 7
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <do_rand+0x72>
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	a1 09       	sbc	r26, r1
     c5e:	b0 48       	sbci	r27, 0x80	; 128
     c60:	88 83       	st	Y, r24
     c62:	99 83       	std	Y+1, r25	; 0x01
     c64:	aa 83       	std	Y+2, r26	; 0x02
     c66:	bb 83       	std	Y+3, r27	; 0x03
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	9f 90       	pop	r9
     c7c:	8f 90       	pop	r8
     c7e:	08 95       	ret

00000c80 <rand_r>:
     c80:	0e 94 f7 05 	call	0xbee	; 0xbee <do_rand>
     c84:	08 95       	ret

00000c86 <rand>:
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 f7 05 	call	0xbee	; 0xbee <do_rand>
     c8e:	08 95       	ret

00000c90 <srand>:
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c98:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     c9c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     ca0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     ca4:	08 95       	ret

00000ca6 <fdevopen>:
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	31 f4       	brne	.+12     	; 0xcbe <fdevopen+0x18>
     cb2:	61 15       	cp	r22, r1
     cb4:	71 05       	cpc	r23, r1
     cb6:	19 f4       	brne	.+6      	; 0xcbe <fdevopen+0x18>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	3a c0       	rjmp	.+116    	; 0xd32 <fdevopen+0x8c>
     cbe:	8b 01       	movw	r16, r22
     cc0:	ec 01       	movw	r28, r24
     cc2:	6e e0       	ldi	r22, 0x0E	; 14
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 95 08 	call	0x112a	; 0x112a <calloc>
     cce:	fc 01       	movw	r30, r24
     cd0:	89 2b       	or	r24, r25
     cd2:	91 f3       	breq	.-28     	; 0xcb8 <fdevopen+0x12>
     cd4:	80 e8       	ldi	r24, 0x80	; 128
     cd6:	83 83       	std	Z+3, r24	; 0x03
     cd8:	01 15       	cp	r16, r1
     cda:	11 05       	cpc	r17, r1
     cdc:	71 f0       	breq	.+28     	; 0xcfa <fdevopen+0x54>
     cde:	13 87       	std	Z+11, r17	; 0x0b
     ce0:	02 87       	std	Z+10, r16	; 0x0a
     ce2:	81 e8       	ldi	r24, 0x81	; 129
     ce4:	83 83       	std	Z+3, r24	; 0x03
     ce6:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__iob>
     cea:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__iob+0x1>
     cee:	89 2b       	or	r24, r25
     cf0:	21 f4       	brne	.+8      	; 0xcfa <fdevopen+0x54>
     cf2:	f0 93 b5 02 	sts	0x02B5, r31	; 0x8002b5 <__iob+0x1>
     cf6:	e0 93 b4 02 	sts	0x02B4, r30	; 0x8002b4 <__iob>
     cfa:	20 97       	sbiw	r28, 0x00	; 0
     cfc:	c9 f0       	breq	.+50     	; 0xd30 <fdevopen+0x8a>
     cfe:	d1 87       	std	Z+9, r29	; 0x09
     d00:	c0 87       	std	Z+8, r28	; 0x08
     d02:	83 81       	ldd	r24, Z+3	; 0x03
     d04:	82 60       	ori	r24, 0x02	; 2
     d06:	83 83       	std	Z+3, r24	; 0x03
     d08:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__iob+0x2>
     d0c:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__iob+0x3>
     d10:	89 2b       	or	r24, r25
     d12:	71 f4       	brne	.+28     	; 0xd30 <fdevopen+0x8a>
     d14:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <__iob+0x3>
     d18:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <__iob+0x2>
     d1c:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__iob+0x4>
     d20:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__iob+0x5>
     d24:	89 2b       	or	r24, r25
     d26:	21 f4       	brne	.+8      	; 0xd30 <fdevopen+0x8a>
     d28:	f0 93 b9 02 	sts	0x02B9, r31	; 0x8002b9 <__iob+0x5>
     d2c:	e0 93 b8 02 	sts	0x02B8, r30	; 0x8002b8 <__iob+0x4>
     d30:	cf 01       	movw	r24, r30
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <printf>:
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e4 ea       	ldi	r30, 0xA4	; 164
     d42:	f6 e0       	ldi	r31, 0x06	; 6
     d44:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__prologue_saves__+0x20>
     d48:	ae 01       	movw	r20, r28
     d4a:	4b 5f       	subi	r20, 0xFB	; 251
     d4c:	5f 4f       	sbci	r21, 0xFF	; 255
     d4e:	fa 01       	movw	r30, r20
     d50:	61 91       	ld	r22, Z+
     d52:	71 91       	ld	r23, Z+
     d54:	af 01       	movw	r20, r30
     d56:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__iob+0x2>
     d5a:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__iob+0x3>
     d5e:	0e 94 b4 06 	call	0xd68	; 0xd68 <vfprintf>
     d62:	e2 e0       	ldi	r30, 0x02	; 2
     d64:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__epilogue_restores__+0x20>

00000d68 <vfprintf>:
     d68:	ab e0       	ldi	r26, 0x0B	; 11
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ea eb       	ldi	r30, 0xBA	; 186
     d6e:	f6 e0       	ldi	r31, 0x06	; 6
     d70:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__prologue_saves__>
     d74:	6c 01       	movw	r12, r24
     d76:	7b 01       	movw	r14, r22
     d78:	8a 01       	movw	r16, r20
     d7a:	fc 01       	movw	r30, r24
     d7c:	17 82       	std	Z+7, r1	; 0x07
     d7e:	16 82       	std	Z+6, r1	; 0x06
     d80:	83 81       	ldd	r24, Z+3	; 0x03
     d82:	81 ff       	sbrs	r24, 1
     d84:	cc c1       	rjmp	.+920    	; 0x111e <vfprintf+0x3b6>
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	3c 01       	movw	r6, r24
     d8c:	f6 01       	movw	r30, r12
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	f7 01       	movw	r30, r14
     d92:	93 fd       	sbrc	r25, 3
     d94:	85 91       	lpm	r24, Z+
     d96:	93 ff       	sbrs	r25, 3
     d98:	81 91       	ld	r24, Z+
     d9a:	7f 01       	movw	r14, r30
     d9c:	88 23       	and	r24, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <vfprintf+0x3a>
     da0:	ba c1       	rjmp	.+884    	; 0x1116 <vfprintf+0x3ae>
     da2:	85 32       	cpi	r24, 0x25	; 37
     da4:	39 f4       	brne	.+14     	; 0xdb4 <vfprintf+0x4c>
     da6:	93 fd       	sbrc	r25, 3
     da8:	85 91       	lpm	r24, Z+
     daa:	93 ff       	sbrs	r25, 3
     dac:	81 91       	ld	r24, Z+
     dae:	7f 01       	movw	r14, r30
     db0:	85 32       	cpi	r24, 0x25	; 37
     db2:	29 f4       	brne	.+10     	; 0xdbe <vfprintf+0x56>
     db4:	b6 01       	movw	r22, r12
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
     dbc:	e7 cf       	rjmp	.-50     	; 0xd8c <vfprintf+0x24>
     dbe:	91 2c       	mov	r9, r1
     dc0:	21 2c       	mov	r2, r1
     dc2:	31 2c       	mov	r3, r1
     dc4:	ff e1       	ldi	r31, 0x1F	; 31
     dc6:	f3 15       	cp	r31, r3
     dc8:	d8 f0       	brcs	.+54     	; 0xe00 <vfprintf+0x98>
     dca:	8b 32       	cpi	r24, 0x2B	; 43
     dcc:	79 f0       	breq	.+30     	; 0xdec <vfprintf+0x84>
     dce:	38 f4       	brcc	.+14     	; 0xdde <vfprintf+0x76>
     dd0:	80 32       	cpi	r24, 0x20	; 32
     dd2:	79 f0       	breq	.+30     	; 0xdf2 <vfprintf+0x8a>
     dd4:	83 32       	cpi	r24, 0x23	; 35
     dd6:	a1 f4       	brne	.+40     	; 0xe00 <vfprintf+0x98>
     dd8:	23 2d       	mov	r18, r3
     dda:	20 61       	ori	r18, 0x10	; 16
     ddc:	1d c0       	rjmp	.+58     	; 0xe18 <vfprintf+0xb0>
     dde:	8d 32       	cpi	r24, 0x2D	; 45
     de0:	61 f0       	breq	.+24     	; 0xdfa <vfprintf+0x92>
     de2:	80 33       	cpi	r24, 0x30	; 48
     de4:	69 f4       	brne	.+26     	; 0xe00 <vfprintf+0x98>
     de6:	23 2d       	mov	r18, r3
     de8:	21 60       	ori	r18, 0x01	; 1
     dea:	16 c0       	rjmp	.+44     	; 0xe18 <vfprintf+0xb0>
     dec:	83 2d       	mov	r24, r3
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	38 2e       	mov	r3, r24
     df2:	e3 2d       	mov	r30, r3
     df4:	e4 60       	ori	r30, 0x04	; 4
     df6:	3e 2e       	mov	r3, r30
     df8:	2a c0       	rjmp	.+84     	; 0xe4e <vfprintf+0xe6>
     dfa:	f3 2d       	mov	r31, r3
     dfc:	f8 60       	ori	r31, 0x08	; 8
     dfe:	1d c0       	rjmp	.+58     	; 0xe3a <vfprintf+0xd2>
     e00:	37 fc       	sbrc	r3, 7
     e02:	2d c0       	rjmp	.+90     	; 0xe5e <vfprintf+0xf6>
     e04:	20 ed       	ldi	r18, 0xD0	; 208
     e06:	28 0f       	add	r18, r24
     e08:	2a 30       	cpi	r18, 0x0A	; 10
     e0a:	40 f0       	brcs	.+16     	; 0xe1c <vfprintf+0xb4>
     e0c:	8e 32       	cpi	r24, 0x2E	; 46
     e0e:	b9 f4       	brne	.+46     	; 0xe3e <vfprintf+0xd6>
     e10:	36 fc       	sbrc	r3, 6
     e12:	81 c1       	rjmp	.+770    	; 0x1116 <vfprintf+0x3ae>
     e14:	23 2d       	mov	r18, r3
     e16:	20 64       	ori	r18, 0x40	; 64
     e18:	32 2e       	mov	r3, r18
     e1a:	19 c0       	rjmp	.+50     	; 0xe4e <vfprintf+0xe6>
     e1c:	36 fe       	sbrs	r3, 6
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <vfprintf+0xc4>
     e20:	8a e0       	ldi	r24, 0x0A	; 10
     e22:	98 9e       	mul	r9, r24
     e24:	20 0d       	add	r18, r0
     e26:	11 24       	eor	r1, r1
     e28:	92 2e       	mov	r9, r18
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <vfprintf+0xe6>
     e2c:	ea e0       	ldi	r30, 0x0A	; 10
     e2e:	2e 9e       	mul	r2, r30
     e30:	20 0d       	add	r18, r0
     e32:	11 24       	eor	r1, r1
     e34:	22 2e       	mov	r2, r18
     e36:	f3 2d       	mov	r31, r3
     e38:	f0 62       	ori	r31, 0x20	; 32
     e3a:	3f 2e       	mov	r3, r31
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <vfprintf+0xe6>
     e3e:	8c 36       	cpi	r24, 0x6C	; 108
     e40:	21 f4       	brne	.+8      	; 0xe4a <vfprintf+0xe2>
     e42:	83 2d       	mov	r24, r3
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	38 2e       	mov	r3, r24
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <vfprintf+0xe6>
     e4a:	88 36       	cpi	r24, 0x68	; 104
     e4c:	41 f4       	brne	.+16     	; 0xe5e <vfprintf+0xf6>
     e4e:	f7 01       	movw	r30, r14
     e50:	93 fd       	sbrc	r25, 3
     e52:	85 91       	lpm	r24, Z+
     e54:	93 ff       	sbrs	r25, 3
     e56:	81 91       	ld	r24, Z+
     e58:	7f 01       	movw	r14, r30
     e5a:	81 11       	cpse	r24, r1
     e5c:	b3 cf       	rjmp	.-154    	; 0xdc4 <vfprintf+0x5c>
     e5e:	98 2f       	mov	r25, r24
     e60:	9f 7d       	andi	r25, 0xDF	; 223
     e62:	95 54       	subi	r25, 0x45	; 69
     e64:	93 30       	cpi	r25, 0x03	; 3
     e66:	28 f4       	brcc	.+10     	; 0xe72 <vfprintf+0x10a>
     e68:	0c 5f       	subi	r16, 0xFC	; 252
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	9f e3       	ldi	r25, 0x3F	; 63
     e6e:	99 83       	std	Y+1, r25	; 0x01
     e70:	0d c0       	rjmp	.+26     	; 0xe8c <vfprintf+0x124>
     e72:	83 36       	cpi	r24, 0x63	; 99
     e74:	31 f0       	breq	.+12     	; 0xe82 <vfprintf+0x11a>
     e76:	83 37       	cpi	r24, 0x73	; 115
     e78:	71 f0       	breq	.+28     	; 0xe96 <vfprintf+0x12e>
     e7a:	83 35       	cpi	r24, 0x53	; 83
     e7c:	09 f0       	breq	.+2      	; 0xe80 <vfprintf+0x118>
     e7e:	59 c0       	rjmp	.+178    	; 0xf32 <vfprintf+0x1ca>
     e80:	21 c0       	rjmp	.+66     	; 0xec4 <vfprintf+0x15c>
     e82:	f8 01       	movw	r30, r16
     e84:	80 81       	ld	r24, Z
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	0e 5f       	subi	r16, 0xFE	; 254
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
     e8c:	88 24       	eor	r8, r8
     e8e:	83 94       	inc	r8
     e90:	91 2c       	mov	r9, r1
     e92:	53 01       	movw	r10, r6
     e94:	13 c0       	rjmp	.+38     	; 0xebc <vfprintf+0x154>
     e96:	28 01       	movw	r4, r16
     e98:	f2 e0       	ldi	r31, 0x02	; 2
     e9a:	4f 0e       	add	r4, r31
     e9c:	51 1c       	adc	r5, r1
     e9e:	f8 01       	movw	r30, r16
     ea0:	a0 80       	ld	r10, Z
     ea2:	b1 80       	ldd	r11, Z+1	; 0x01
     ea4:	36 fe       	sbrs	r3, 6
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <vfprintf+0x146>
     ea8:	69 2d       	mov	r22, r9
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x14a>
     eae:	6f ef       	ldi	r22, 0xFF	; 255
     eb0:	7f ef       	ldi	r23, 0xFF	; 255
     eb2:	c5 01       	movw	r24, r10
     eb4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <strnlen>
     eb8:	4c 01       	movw	r8, r24
     eba:	82 01       	movw	r16, r4
     ebc:	f3 2d       	mov	r31, r3
     ebe:	ff 77       	andi	r31, 0x7F	; 127
     ec0:	3f 2e       	mov	r3, r31
     ec2:	16 c0       	rjmp	.+44     	; 0xef0 <vfprintf+0x188>
     ec4:	28 01       	movw	r4, r16
     ec6:	22 e0       	ldi	r18, 0x02	; 2
     ec8:	42 0e       	add	r4, r18
     eca:	51 1c       	adc	r5, r1
     ecc:	f8 01       	movw	r30, r16
     ece:	a0 80       	ld	r10, Z
     ed0:	b1 80       	ldd	r11, Z+1	; 0x01
     ed2:	36 fe       	sbrs	r3, 6
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <vfprintf+0x174>
     ed6:	69 2d       	mov	r22, r9
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <vfprintf+0x178>
     edc:	6f ef       	ldi	r22, 0xFF	; 255
     ede:	7f ef       	ldi	r23, 0xFF	; 255
     ee0:	c5 01       	movw	r24, r10
     ee2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <strnlen_P>
     ee6:	4c 01       	movw	r8, r24
     ee8:	f3 2d       	mov	r31, r3
     eea:	f0 68       	ori	r31, 0x80	; 128
     eec:	3f 2e       	mov	r3, r31
     eee:	82 01       	movw	r16, r4
     ef0:	33 fc       	sbrc	r3, 3
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <vfprintf+0x1c2>
     ef4:	82 2d       	mov	r24, r2
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 16       	cp	r8, r24
     efa:	99 06       	cpc	r9, r25
     efc:	b0 f4       	brcc	.+44     	; 0xf2a <vfprintf+0x1c2>
     efe:	b6 01       	movw	r22, r12
     f00:	80 e2       	ldi	r24, 0x20	; 32
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
     f08:	2a 94       	dec	r2
     f0a:	f4 cf       	rjmp	.-24     	; 0xef4 <vfprintf+0x18c>
     f0c:	f5 01       	movw	r30, r10
     f0e:	37 fc       	sbrc	r3, 7
     f10:	85 91       	lpm	r24, Z+
     f12:	37 fe       	sbrs	r3, 7
     f14:	81 91       	ld	r24, Z+
     f16:	5f 01       	movw	r10, r30
     f18:	b6 01       	movw	r22, r12
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
     f20:	21 10       	cpse	r2, r1
     f22:	2a 94       	dec	r2
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	82 1a       	sub	r8, r18
     f28:	91 08       	sbc	r9, r1
     f2a:	81 14       	cp	r8, r1
     f2c:	91 04       	cpc	r9, r1
     f2e:	71 f7       	brne	.-36     	; 0xf0c <vfprintf+0x1a4>
     f30:	e8 c0       	rjmp	.+464    	; 0x1102 <vfprintf+0x39a>
     f32:	84 36       	cpi	r24, 0x64	; 100
     f34:	11 f0       	breq	.+4      	; 0xf3a <vfprintf+0x1d2>
     f36:	89 36       	cpi	r24, 0x69	; 105
     f38:	41 f5       	brne	.+80     	; 0xf8a <vfprintf+0x222>
     f3a:	f8 01       	movw	r30, r16
     f3c:	37 fe       	sbrs	r3, 7
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <vfprintf+0x1e6>
     f40:	60 81       	ld	r22, Z
     f42:	71 81       	ldd	r23, Z+1	; 0x01
     f44:	82 81       	ldd	r24, Z+2	; 0x02
     f46:	93 81       	ldd	r25, Z+3	; 0x03
     f48:	0c 5f       	subi	r16, 0xFC	; 252
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <vfprintf+0x1f6>
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	07 2e       	mov	r0, r23
     f54:	00 0c       	add	r0, r0
     f56:	88 0b       	sbc	r24, r24
     f58:	99 0b       	sbc	r25, r25
     f5a:	0e 5f       	subi	r16, 0xFE	; 254
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	f3 2d       	mov	r31, r3
     f60:	ff 76       	andi	r31, 0x6F	; 111
     f62:	3f 2e       	mov	r3, r31
     f64:	97 ff       	sbrs	r25, 7
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <vfprintf+0x212>
     f68:	90 95       	com	r25
     f6a:	80 95       	com	r24
     f6c:	70 95       	com	r23
     f6e:	61 95       	neg	r22
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	f0 68       	ori	r31, 0x80	; 128
     f78:	3f 2e       	mov	r3, r31
     f7a:	2a e0       	ldi	r18, 0x0A	; 10
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	a3 01       	movw	r20, r6
     f80:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__ultoa_invert>
     f84:	88 2e       	mov	r8, r24
     f86:	86 18       	sub	r8, r6
     f88:	45 c0       	rjmp	.+138    	; 0x1014 <vfprintf+0x2ac>
     f8a:	85 37       	cpi	r24, 0x75	; 117
     f8c:	31 f4       	brne	.+12     	; 0xf9a <vfprintf+0x232>
     f8e:	23 2d       	mov	r18, r3
     f90:	2f 7e       	andi	r18, 0xEF	; 239
     f92:	b2 2e       	mov	r11, r18
     f94:	2a e0       	ldi	r18, 0x0A	; 10
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	25 c0       	rjmp	.+74     	; 0xfe4 <vfprintf+0x27c>
     f9a:	93 2d       	mov	r25, r3
     f9c:	99 7f       	andi	r25, 0xF9	; 249
     f9e:	b9 2e       	mov	r11, r25
     fa0:	8f 36       	cpi	r24, 0x6F	; 111
     fa2:	c1 f0       	breq	.+48     	; 0xfd4 <vfprintf+0x26c>
     fa4:	18 f4       	brcc	.+6      	; 0xfac <vfprintf+0x244>
     fa6:	88 35       	cpi	r24, 0x58	; 88
     fa8:	79 f0       	breq	.+30     	; 0xfc8 <vfprintf+0x260>
     faa:	b5 c0       	rjmp	.+362    	; 0x1116 <vfprintf+0x3ae>
     fac:	80 37       	cpi	r24, 0x70	; 112
     fae:	19 f0       	breq	.+6      	; 0xfb6 <vfprintf+0x24e>
     fb0:	88 37       	cpi	r24, 0x78	; 120
     fb2:	21 f0       	breq	.+8      	; 0xfbc <vfprintf+0x254>
     fb4:	b0 c0       	rjmp	.+352    	; 0x1116 <vfprintf+0x3ae>
     fb6:	e9 2f       	mov	r30, r25
     fb8:	e0 61       	ori	r30, 0x10	; 16
     fba:	be 2e       	mov	r11, r30
     fbc:	b4 fe       	sbrs	r11, 4
     fbe:	0d c0       	rjmp	.+26     	; 0xfda <vfprintf+0x272>
     fc0:	fb 2d       	mov	r31, r11
     fc2:	f4 60       	ori	r31, 0x04	; 4
     fc4:	bf 2e       	mov	r11, r31
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <vfprintf+0x272>
     fc8:	34 fe       	sbrs	r3, 4
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <vfprintf+0x278>
     fcc:	29 2f       	mov	r18, r25
     fce:	26 60       	ori	r18, 0x06	; 6
     fd0:	b2 2e       	mov	r11, r18
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x278>
     fd4:	28 e0       	ldi	r18, 0x08	; 8
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <vfprintf+0x27c>
     fda:	20 e1       	ldi	r18, 0x10	; 16
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x27c>
     fe0:	20 e1       	ldi	r18, 0x10	; 16
     fe2:	32 e0       	ldi	r19, 0x02	; 2
     fe4:	f8 01       	movw	r30, r16
     fe6:	b7 fe       	sbrs	r11, 7
     fe8:	07 c0       	rjmp	.+14     	; 0xff8 <vfprintf+0x290>
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	0c 5f       	subi	r16, 0xFC	; 252
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0x29c>
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 5f       	subi	r16, 0xFE	; 254
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	a3 01       	movw	r20, r6
    1006:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__ultoa_invert>
    100a:	88 2e       	mov	r8, r24
    100c:	86 18       	sub	r8, r6
    100e:	fb 2d       	mov	r31, r11
    1010:	ff 77       	andi	r31, 0x7F	; 127
    1012:	3f 2e       	mov	r3, r31
    1014:	36 fe       	sbrs	r3, 6
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <vfprintf+0x2ca>
    1018:	23 2d       	mov	r18, r3
    101a:	2e 7f       	andi	r18, 0xFE	; 254
    101c:	a2 2e       	mov	r10, r18
    101e:	89 14       	cp	r8, r9
    1020:	58 f4       	brcc	.+22     	; 0x1038 <vfprintf+0x2d0>
    1022:	34 fe       	sbrs	r3, 4
    1024:	0b c0       	rjmp	.+22     	; 0x103c <vfprintf+0x2d4>
    1026:	32 fc       	sbrc	r3, 2
    1028:	09 c0       	rjmp	.+18     	; 0x103c <vfprintf+0x2d4>
    102a:	83 2d       	mov	r24, r3
    102c:	8e 7e       	andi	r24, 0xEE	; 238
    102e:	a8 2e       	mov	r10, r24
    1030:	05 c0       	rjmp	.+10     	; 0x103c <vfprintf+0x2d4>
    1032:	b8 2c       	mov	r11, r8
    1034:	a3 2c       	mov	r10, r3
    1036:	03 c0       	rjmp	.+6      	; 0x103e <vfprintf+0x2d6>
    1038:	b8 2c       	mov	r11, r8
    103a:	01 c0       	rjmp	.+2      	; 0x103e <vfprintf+0x2d6>
    103c:	b9 2c       	mov	r11, r9
    103e:	a4 fe       	sbrs	r10, 4
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <vfprintf+0x2f8>
    1042:	fe 01       	movw	r30, r28
    1044:	e8 0d       	add	r30, r8
    1046:	f1 1d       	adc	r31, r1
    1048:	80 81       	ld	r24, Z
    104a:	80 33       	cpi	r24, 0x30	; 48
    104c:	21 f4       	brne	.+8      	; 0x1056 <vfprintf+0x2ee>
    104e:	9a 2d       	mov	r25, r10
    1050:	99 7e       	andi	r25, 0xE9	; 233
    1052:	a9 2e       	mov	r10, r25
    1054:	09 c0       	rjmp	.+18     	; 0x1068 <vfprintf+0x300>
    1056:	a2 fe       	sbrs	r10, 2
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <vfprintf+0x2fe>
    105a:	b3 94       	inc	r11
    105c:	b3 94       	inc	r11
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <vfprintf+0x300>
    1060:	8a 2d       	mov	r24, r10
    1062:	86 78       	andi	r24, 0x86	; 134
    1064:	09 f0       	breq	.+2      	; 0x1068 <vfprintf+0x300>
    1066:	b3 94       	inc	r11
    1068:	a3 fc       	sbrc	r10, 3
    106a:	11 c0       	rjmp	.+34     	; 0x108e <vfprintf+0x326>
    106c:	a0 fe       	sbrs	r10, 0
    106e:	06 c0       	rjmp	.+12     	; 0x107c <vfprintf+0x314>
    1070:	b2 14       	cp	r11, r2
    1072:	88 f4       	brcc	.+34     	; 0x1096 <vfprintf+0x32e>
    1074:	28 0c       	add	r2, r8
    1076:	92 2c       	mov	r9, r2
    1078:	9b 18       	sub	r9, r11
    107a:	0e c0       	rjmp	.+28     	; 0x1098 <vfprintf+0x330>
    107c:	b2 14       	cp	r11, r2
    107e:	60 f4       	brcc	.+24     	; 0x1098 <vfprintf+0x330>
    1080:	b6 01       	movw	r22, r12
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    108a:	b3 94       	inc	r11
    108c:	f7 cf       	rjmp	.-18     	; 0x107c <vfprintf+0x314>
    108e:	b2 14       	cp	r11, r2
    1090:	18 f4       	brcc	.+6      	; 0x1098 <vfprintf+0x330>
    1092:	2b 18       	sub	r2, r11
    1094:	02 c0       	rjmp	.+4      	; 0x109a <vfprintf+0x332>
    1096:	98 2c       	mov	r9, r8
    1098:	21 2c       	mov	r2, r1
    109a:	a4 fe       	sbrs	r10, 4
    109c:	10 c0       	rjmp	.+32     	; 0x10be <vfprintf+0x356>
    109e:	b6 01       	movw	r22, r12
    10a0:	80 e3       	ldi	r24, 0x30	; 48
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    10a8:	a2 fe       	sbrs	r10, 2
    10aa:	17 c0       	rjmp	.+46     	; 0x10da <vfprintf+0x372>
    10ac:	a1 fc       	sbrc	r10, 1
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <vfprintf+0x34e>
    10b0:	88 e7       	ldi	r24, 0x78	; 120
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <vfprintf+0x352>
    10b6:	88 e5       	ldi	r24, 0x58	; 88
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	b6 01       	movw	r22, r12
    10bc:	0c c0       	rjmp	.+24     	; 0x10d6 <vfprintf+0x36e>
    10be:	8a 2d       	mov	r24, r10
    10c0:	86 78       	andi	r24, 0x86	; 134
    10c2:	59 f0       	breq	.+22     	; 0x10da <vfprintf+0x372>
    10c4:	a1 fe       	sbrs	r10, 1
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <vfprintf+0x364>
    10c8:	8b e2       	ldi	r24, 0x2B	; 43
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <vfprintf+0x366>
    10cc:	80 e2       	ldi	r24, 0x20	; 32
    10ce:	a7 fc       	sbrc	r10, 7
    10d0:	8d e2       	ldi	r24, 0x2D	; 45
    10d2:	b6 01       	movw	r22, r12
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    10da:	89 14       	cp	r8, r9
    10dc:	38 f4       	brcc	.+14     	; 0x10ec <vfprintf+0x384>
    10de:	b6 01       	movw	r22, r12
    10e0:	80 e3       	ldi	r24, 0x30	; 48
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    10e8:	9a 94       	dec	r9
    10ea:	f7 cf       	rjmp	.-18     	; 0x10da <vfprintf+0x372>
    10ec:	8a 94       	dec	r8
    10ee:	f3 01       	movw	r30, r6
    10f0:	e8 0d       	add	r30, r8
    10f2:	f1 1d       	adc	r31, r1
    10f4:	80 81       	ld	r24, Z
    10f6:	b6 01       	movw	r22, r12
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    10fe:	81 10       	cpse	r8, r1
    1100:	f5 cf       	rjmp	.-22     	; 0x10ec <vfprintf+0x384>
    1102:	22 20       	and	r2, r2
    1104:	09 f4       	brne	.+2      	; 0x1108 <vfprintf+0x3a0>
    1106:	42 ce       	rjmp	.-892    	; 0xd8c <vfprintf+0x24>
    1108:	b6 01       	movw	r22, r12
    110a:	80 e2       	ldi	r24, 0x20	; 32
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    1112:	2a 94       	dec	r2
    1114:	f6 cf       	rjmp	.-20     	; 0x1102 <vfprintf+0x39a>
    1116:	f6 01       	movw	r30, r12
    1118:	86 81       	ldd	r24, Z+6	; 0x06
    111a:	97 81       	ldd	r25, Z+7	; 0x07
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <vfprintf+0x3ba>
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	9f ef       	ldi	r25, 0xFF	; 255
    1122:	2b 96       	adiw	r28, 0x0b	; 11
    1124:	e2 e1       	ldi	r30, 0x12	; 18
    1126:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__epilogue_restores__>

0000112a <calloc>:
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	86 9f       	mul	r24, r22
    1134:	80 01       	movw	r16, r0
    1136:	87 9f       	mul	r24, r23
    1138:	10 0d       	add	r17, r0
    113a:	96 9f       	mul	r25, r22
    113c:	10 0d       	add	r17, r0
    113e:	11 24       	eor	r1, r1
    1140:	c8 01       	movw	r24, r16
    1142:	0e 94 b1 08 	call	0x1162	; 0x1162 <malloc>
    1146:	ec 01       	movw	r28, r24
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	29 f0       	breq	.+10     	; 0x1156 <calloc+0x2c>
    114c:	a8 01       	movw	r20, r16
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	0e 94 dd 09 	call	0x13ba	; 0x13ba <memset>
    1156:	ce 01       	movw	r24, r28
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <malloc>:
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	91 05       	cpc	r25, r1
    116e:	10 f4       	brcc	.+4      	; 0x1174 <malloc+0x12>
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <__flp>
    1178:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <__flp+0x1>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	30 97       	sbiw	r30, 0x00	; 0
    1186:	19 f1       	breq	.+70     	; 0x11ce <malloc+0x6c>
    1188:	40 81       	ld	r20, Z
    118a:	51 81       	ldd	r21, Z+1	; 0x01
    118c:	02 81       	ldd	r16, Z+2	; 0x02
    118e:	13 81       	ldd	r17, Z+3	; 0x03
    1190:	48 17       	cp	r20, r24
    1192:	59 07       	cpc	r21, r25
    1194:	c8 f0       	brcs	.+50     	; 0x11c8 <malloc+0x66>
    1196:	84 17       	cp	r24, r20
    1198:	95 07       	cpc	r25, r21
    119a:	69 f4       	brne	.+26     	; 0x11b6 <malloc+0x54>
    119c:	10 97       	sbiw	r26, 0x00	; 0
    119e:	31 f0       	breq	.+12     	; 0x11ac <malloc+0x4a>
    11a0:	12 96       	adiw	r26, 0x02	; 2
    11a2:	0c 93       	st	X, r16
    11a4:	12 97       	sbiw	r26, 0x02	; 2
    11a6:	13 96       	adiw	r26, 0x03	; 3
    11a8:	1c 93       	st	X, r17
    11aa:	27 c0       	rjmp	.+78     	; 0x11fa <malloc+0x98>
    11ac:	00 93 bc 02 	sts	0x02BC, r16	; 0x8002bc <__flp>
    11b0:	10 93 bd 02 	sts	0x02BD, r17	; 0x8002bd <__flp+0x1>
    11b4:	22 c0       	rjmp	.+68     	; 0x11fa <malloc+0x98>
    11b6:	21 15       	cp	r18, r1
    11b8:	31 05       	cpc	r19, r1
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <malloc+0x60>
    11bc:	42 17       	cp	r20, r18
    11be:	53 07       	cpc	r21, r19
    11c0:	18 f4       	brcc	.+6      	; 0x11c8 <malloc+0x66>
    11c2:	9a 01       	movw	r18, r20
    11c4:	bd 01       	movw	r22, r26
    11c6:	ef 01       	movw	r28, r30
    11c8:	df 01       	movw	r26, r30
    11ca:	f8 01       	movw	r30, r16
    11cc:	db cf       	rjmp	.-74     	; 0x1184 <malloc+0x22>
    11ce:	21 15       	cp	r18, r1
    11d0:	31 05       	cpc	r19, r1
    11d2:	f9 f0       	breq	.+62     	; 0x1212 <malloc+0xb0>
    11d4:	28 1b       	sub	r18, r24
    11d6:	39 0b       	sbc	r19, r25
    11d8:	24 30       	cpi	r18, 0x04	; 4
    11da:	31 05       	cpc	r19, r1
    11dc:	80 f4       	brcc	.+32     	; 0x11fe <malloc+0x9c>
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	9b 81       	ldd	r25, Y+3	; 0x03
    11e2:	61 15       	cp	r22, r1
    11e4:	71 05       	cpc	r23, r1
    11e6:	21 f0       	breq	.+8      	; 0x11f0 <malloc+0x8e>
    11e8:	fb 01       	movw	r30, r22
    11ea:	93 83       	std	Z+3, r25	; 0x03
    11ec:	82 83       	std	Z+2, r24	; 0x02
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <malloc+0x96>
    11f0:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <__flp+0x1>
    11f4:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__flp>
    11f8:	fe 01       	movw	r30, r28
    11fa:	32 96       	adiw	r30, 0x02	; 2
    11fc:	44 c0       	rjmp	.+136    	; 0x1286 <malloc+0x124>
    11fe:	fe 01       	movw	r30, r28
    1200:	e2 0f       	add	r30, r18
    1202:	f3 1f       	adc	r31, r19
    1204:	81 93       	st	Z+, r24
    1206:	91 93       	st	Z+, r25
    1208:	22 50       	subi	r18, 0x02	; 2
    120a:	31 09       	sbc	r19, r1
    120c:	39 83       	std	Y+1, r19	; 0x01
    120e:	28 83       	st	Y, r18
    1210:	3a c0       	rjmp	.+116    	; 0x1286 <malloc+0x124>
    1212:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <__brkval>
    1216:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <__brkval+0x1>
    121a:	23 2b       	or	r18, r19
    121c:	41 f4       	brne	.+16     	; 0x122e <malloc+0xcc>
    121e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    1222:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    1226:	30 93 bb 02 	sts	0x02BB, r19	; 0x8002bb <__brkval+0x1>
    122a:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <__brkval>
    122e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    1232:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    1236:	21 15       	cp	r18, r1
    1238:	31 05       	cpc	r19, r1
    123a:	41 f4       	brne	.+16     	; 0x124c <malloc+0xea>
    123c:	2d b7       	in	r18, 0x3d	; 61
    123e:	3e b7       	in	r19, 0x3e	; 62
    1240:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    1244:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    1248:	24 1b       	sub	r18, r20
    124a:	35 0b       	sbc	r19, r21
    124c:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <__brkval>
    1250:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <__brkval+0x1>
    1254:	e2 17       	cp	r30, r18
    1256:	f3 07       	cpc	r31, r19
    1258:	a0 f4       	brcc	.+40     	; 0x1282 <malloc+0x120>
    125a:	2e 1b       	sub	r18, r30
    125c:	3f 0b       	sbc	r19, r31
    125e:	28 17       	cp	r18, r24
    1260:	39 07       	cpc	r19, r25
    1262:	78 f0       	brcs	.+30     	; 0x1282 <malloc+0x120>
    1264:	ac 01       	movw	r20, r24
    1266:	4e 5f       	subi	r20, 0xFE	; 254
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	24 17       	cp	r18, r20
    126c:	35 07       	cpc	r19, r21
    126e:	48 f0       	brcs	.+18     	; 0x1282 <malloc+0x120>
    1270:	4e 0f       	add	r20, r30
    1272:	5f 1f       	adc	r21, r31
    1274:	50 93 bb 02 	sts	0x02BB, r21	; 0x8002bb <__brkval+0x1>
    1278:	40 93 ba 02 	sts	0x02BA, r20	; 0x8002ba <__brkval>
    127c:	81 93       	st	Z+, r24
    127e:	91 93       	st	Z+, r25
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <malloc+0x124>
    1282:	e0 e0       	ldi	r30, 0x00	; 0
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	cf 01       	movw	r24, r30
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <free>:
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	09 f4       	brne	.+2      	; 0x129c <free+0xa>
    129a:	81 c0       	rjmp	.+258    	; 0x139e <free+0x10c>
    129c:	fc 01       	movw	r30, r24
    129e:	32 97       	sbiw	r30, 0x02	; 2
    12a0:	13 82       	std	Z+3, r1	; 0x03
    12a2:	12 82       	std	Z+2, r1	; 0x02
    12a4:	a0 91 bc 02 	lds	r26, 0x02BC	; 0x8002bc <__flp>
    12a8:	b0 91 bd 02 	lds	r27, 0x02BD	; 0x8002bd <__flp+0x1>
    12ac:	10 97       	sbiw	r26, 0x00	; 0
    12ae:	81 f4       	brne	.+32     	; 0x12d0 <free+0x3e>
    12b0:	20 81       	ld	r18, Z
    12b2:	31 81       	ldd	r19, Z+1	; 0x01
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <__brkval>
    12bc:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <__brkval+0x1>
    12c0:	28 17       	cp	r18, r24
    12c2:	39 07       	cpc	r19, r25
    12c4:	51 f5       	brne	.+84     	; 0x131a <free+0x88>
    12c6:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <__brkval+0x1>
    12ca:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <__brkval>
    12ce:	67 c0       	rjmp	.+206    	; 0x139e <free+0x10c>
    12d0:	ed 01       	movw	r28, r26
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	ce 17       	cp	r28, r30
    12d8:	df 07       	cpc	r29, r31
    12da:	40 f4       	brcc	.+16     	; 0x12ec <free+0x5a>
    12dc:	4a 81       	ldd	r20, Y+2	; 0x02
    12de:	5b 81       	ldd	r21, Y+3	; 0x03
    12e0:	9e 01       	movw	r18, r28
    12e2:	41 15       	cp	r20, r1
    12e4:	51 05       	cpc	r21, r1
    12e6:	f1 f0       	breq	.+60     	; 0x1324 <free+0x92>
    12e8:	ea 01       	movw	r28, r20
    12ea:	f5 cf       	rjmp	.-22     	; 0x12d6 <free+0x44>
    12ec:	d3 83       	std	Z+3, r29	; 0x03
    12ee:	c2 83       	std	Z+2, r28	; 0x02
    12f0:	40 81       	ld	r20, Z
    12f2:	51 81       	ldd	r21, Z+1	; 0x01
    12f4:	84 0f       	add	r24, r20
    12f6:	95 1f       	adc	r25, r21
    12f8:	c8 17       	cp	r28, r24
    12fa:	d9 07       	cpc	r29, r25
    12fc:	59 f4       	brne	.+22     	; 0x1314 <free+0x82>
    12fe:	88 81       	ld	r24, Y
    1300:	99 81       	ldd	r25, Y+1	; 0x01
    1302:	84 0f       	add	r24, r20
    1304:	95 1f       	adc	r25, r21
    1306:	02 96       	adiw	r24, 0x02	; 2
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	93 83       	std	Z+3, r25	; 0x03
    1312:	82 83       	std	Z+2, r24	; 0x02
    1314:	21 15       	cp	r18, r1
    1316:	31 05       	cpc	r19, r1
    1318:	29 f4       	brne	.+10     	; 0x1324 <free+0x92>
    131a:	f0 93 bd 02 	sts	0x02BD, r31	; 0x8002bd <__flp+0x1>
    131e:	e0 93 bc 02 	sts	0x02BC, r30	; 0x8002bc <__flp>
    1322:	3d c0       	rjmp	.+122    	; 0x139e <free+0x10c>
    1324:	e9 01       	movw	r28, r18
    1326:	fb 83       	std	Y+3, r31	; 0x03
    1328:	ea 83       	std	Y+2, r30	; 0x02
    132a:	49 91       	ld	r20, Y+
    132c:	59 91       	ld	r21, Y+
    132e:	c4 0f       	add	r28, r20
    1330:	d5 1f       	adc	r29, r21
    1332:	ec 17       	cp	r30, r28
    1334:	fd 07       	cpc	r31, r29
    1336:	61 f4       	brne	.+24     	; 0x1350 <free+0xbe>
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	84 0f       	add	r24, r20
    133e:	95 1f       	adc	r25, r21
    1340:	02 96       	adiw	r24, 0x02	; 2
    1342:	e9 01       	movw	r28, r18
    1344:	99 83       	std	Y+1, r25	; 0x01
    1346:	88 83       	st	Y, r24
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	9b 83       	std	Y+3, r25	; 0x03
    134e:	8a 83       	std	Y+2, r24	; 0x02
    1350:	e0 e0       	ldi	r30, 0x00	; 0
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	12 96       	adiw	r26, 0x02	; 2
    1356:	8d 91       	ld	r24, X+
    1358:	9c 91       	ld	r25, X
    135a:	13 97       	sbiw	r26, 0x03	; 3
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	19 f0       	breq	.+6      	; 0x1366 <free+0xd4>
    1360:	fd 01       	movw	r30, r26
    1362:	dc 01       	movw	r26, r24
    1364:	f7 cf       	rjmp	.-18     	; 0x1354 <free+0xc2>
    1366:	8d 91       	ld	r24, X+
    1368:	9c 91       	ld	r25, X
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	9d 01       	movw	r18, r26
    136e:	2e 5f       	subi	r18, 0xFE	; 254
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	82 0f       	add	r24, r18
    1374:	93 1f       	adc	r25, r19
    1376:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <__brkval>
    137a:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <__brkval+0x1>
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	69 f4       	brne	.+26     	; 0x139e <free+0x10c>
    1384:	30 97       	sbiw	r30, 0x00	; 0
    1386:	29 f4       	brne	.+10     	; 0x1392 <free+0x100>
    1388:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <__flp+0x1>
    138c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <__flp>
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <free+0x104>
    1392:	13 82       	std	Z+3, r1	; 0x03
    1394:	12 82       	std	Z+2, r1	; 0x02
    1396:	b0 93 bb 02 	sts	0x02BB, r27	; 0x8002bb <__brkval+0x1>
    139a:	a0 93 ba 02 	sts	0x02BA, r26	; 0x8002ba <__brkval>
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <strnlen_P>:
    13a4:	fc 01       	movw	r30, r24
    13a6:	05 90       	lpm	r0, Z+
    13a8:	61 50       	subi	r22, 0x01	; 1
    13aa:	70 40       	sbci	r23, 0x00	; 0
    13ac:	01 10       	cpse	r0, r1
    13ae:	d8 f7       	brcc	.-10     	; 0x13a6 <strnlen_P+0x2>
    13b0:	80 95       	com	r24
    13b2:	90 95       	com	r25
    13b4:	8e 0f       	add	r24, r30
    13b6:	9f 1f       	adc	r25, r31
    13b8:	08 95       	ret

000013ba <memset>:
    13ba:	dc 01       	movw	r26, r24
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <memset+0x6>
    13be:	6d 93       	st	X+, r22
    13c0:	41 50       	subi	r20, 0x01	; 1
    13c2:	50 40       	sbci	r21, 0x00	; 0
    13c4:	e0 f7       	brcc	.-8      	; 0x13be <memset+0x4>
    13c6:	08 95       	ret

000013c8 <strnlen>:
    13c8:	fc 01       	movw	r30, r24
    13ca:	61 50       	subi	r22, 0x01	; 1
    13cc:	70 40       	sbci	r23, 0x00	; 0
    13ce:	01 90       	ld	r0, Z+
    13d0:	01 10       	cpse	r0, r1
    13d2:	d8 f7       	brcc	.-10     	; 0x13ca <strnlen+0x2>
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	8e 0f       	add	r24, r30
    13da:	9f 1f       	adc	r25, r31
    13dc:	08 95       	ret

000013de <fputc>:
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	fb 01       	movw	r30, r22
    13e8:	23 81       	ldd	r18, Z+3	; 0x03
    13ea:	21 fd       	sbrc	r18, 1
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <fputc+0x16>
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9f ef       	ldi	r25, 0xFF	; 255
    13f2:	2c c0       	rjmp	.+88     	; 0x144c <fputc+0x6e>
    13f4:	22 ff       	sbrs	r18, 2
    13f6:	16 c0       	rjmp	.+44     	; 0x1424 <fputc+0x46>
    13f8:	46 81       	ldd	r20, Z+6	; 0x06
    13fa:	57 81       	ldd	r21, Z+7	; 0x07
    13fc:	24 81       	ldd	r18, Z+4	; 0x04
    13fe:	35 81       	ldd	r19, Z+5	; 0x05
    1400:	42 17       	cp	r20, r18
    1402:	53 07       	cpc	r21, r19
    1404:	44 f4       	brge	.+16     	; 0x1416 <fputc+0x38>
    1406:	a0 81       	ld	r26, Z
    1408:	b1 81       	ldd	r27, Z+1	; 0x01
    140a:	9d 01       	movw	r18, r26
    140c:	2f 5f       	subi	r18, 0xFF	; 255
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	31 83       	std	Z+1, r19	; 0x01
    1412:	20 83       	st	Z, r18
    1414:	8c 93       	st	X, r24
    1416:	26 81       	ldd	r18, Z+6	; 0x06
    1418:	37 81       	ldd	r19, Z+7	; 0x07
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	37 83       	std	Z+7, r19	; 0x07
    1420:	26 83       	std	Z+6, r18	; 0x06
    1422:	14 c0       	rjmp	.+40     	; 0x144c <fputc+0x6e>
    1424:	8b 01       	movw	r16, r22
    1426:	ec 01       	movw	r28, r24
    1428:	fb 01       	movw	r30, r22
    142a:	00 84       	ldd	r0, Z+8	; 0x08
    142c:	f1 85       	ldd	r31, Z+9	; 0x09
    142e:	e0 2d       	mov	r30, r0
    1430:	09 95       	icall
    1432:	89 2b       	or	r24, r25
    1434:	e1 f6       	brne	.-72     	; 0x13ee <fputc+0x10>
    1436:	d8 01       	movw	r26, r16
    1438:	16 96       	adiw	r26, 0x06	; 6
    143a:	8d 91       	ld	r24, X+
    143c:	9c 91       	ld	r25, X
    143e:	17 97       	sbiw	r26, 0x07	; 7
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	17 96       	adiw	r26, 0x07	; 7
    1444:	9c 93       	st	X, r25
    1446:	8e 93       	st	-X, r24
    1448:	16 97       	sbiw	r26, 0x06	; 6
    144a:	ce 01       	movw	r24, r28
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	08 95       	ret

00001456 <__ultoa_invert>:
    1456:	fa 01       	movw	r30, r20
    1458:	aa 27       	eor	r26, r26
    145a:	28 30       	cpi	r18, 0x08	; 8
    145c:	51 f1       	breq	.+84     	; 0x14b2 <__ultoa_invert+0x5c>
    145e:	20 31       	cpi	r18, 0x10	; 16
    1460:	81 f1       	breq	.+96     	; 0x14c2 <__ultoa_invert+0x6c>
    1462:	e8 94       	clt
    1464:	6f 93       	push	r22
    1466:	6e 7f       	andi	r22, 0xFE	; 254
    1468:	6e 5f       	subi	r22, 0xFE	; 254
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	8f 4f       	sbci	r24, 0xFF	; 255
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	af 4f       	sbci	r26, 0xFF	; 255
    1472:	b1 e0       	ldi	r27, 0x01	; 1
    1474:	3e d0       	rcall	.+124    	; 0x14f2 <__ultoa_invert+0x9c>
    1476:	b4 e0       	ldi	r27, 0x04	; 4
    1478:	3c d0       	rcall	.+120    	; 0x14f2 <__ultoa_invert+0x9c>
    147a:	67 0f       	add	r22, r23
    147c:	78 1f       	adc	r23, r24
    147e:	89 1f       	adc	r24, r25
    1480:	9a 1f       	adc	r25, r26
    1482:	a1 1d       	adc	r26, r1
    1484:	68 0f       	add	r22, r24
    1486:	79 1f       	adc	r23, r25
    1488:	8a 1f       	adc	r24, r26
    148a:	91 1d       	adc	r25, r1
    148c:	a1 1d       	adc	r26, r1
    148e:	6a 0f       	add	r22, r26
    1490:	71 1d       	adc	r23, r1
    1492:	81 1d       	adc	r24, r1
    1494:	91 1d       	adc	r25, r1
    1496:	a1 1d       	adc	r26, r1
    1498:	20 d0       	rcall	.+64     	; 0x14da <__ultoa_invert+0x84>
    149a:	09 f4       	brne	.+2      	; 0x149e <__ultoa_invert+0x48>
    149c:	68 94       	set
    149e:	3f 91       	pop	r19
    14a0:	2a e0       	ldi	r18, 0x0A	; 10
    14a2:	26 9f       	mul	r18, r22
    14a4:	11 24       	eor	r1, r1
    14a6:	30 19       	sub	r19, r0
    14a8:	30 5d       	subi	r19, 0xD0	; 208
    14aa:	31 93       	st	Z+, r19
    14ac:	de f6       	brtc	.-74     	; 0x1464 <__ultoa_invert+0xe>
    14ae:	cf 01       	movw	r24, r30
    14b0:	08 95       	ret
    14b2:	46 2f       	mov	r20, r22
    14b4:	47 70       	andi	r20, 0x07	; 7
    14b6:	40 5d       	subi	r20, 0xD0	; 208
    14b8:	41 93       	st	Z+, r20
    14ba:	b3 e0       	ldi	r27, 0x03	; 3
    14bc:	0f d0       	rcall	.+30     	; 0x14dc <__ultoa_invert+0x86>
    14be:	c9 f7       	brne	.-14     	; 0x14b2 <__ultoa_invert+0x5c>
    14c0:	f6 cf       	rjmp	.-20     	; 0x14ae <__ultoa_invert+0x58>
    14c2:	46 2f       	mov	r20, r22
    14c4:	4f 70       	andi	r20, 0x0F	; 15
    14c6:	40 5d       	subi	r20, 0xD0	; 208
    14c8:	4a 33       	cpi	r20, 0x3A	; 58
    14ca:	18 f0       	brcs	.+6      	; 0x14d2 <__ultoa_invert+0x7c>
    14cc:	49 5d       	subi	r20, 0xD9	; 217
    14ce:	31 fd       	sbrc	r19, 1
    14d0:	40 52       	subi	r20, 0x20	; 32
    14d2:	41 93       	st	Z+, r20
    14d4:	02 d0       	rcall	.+4      	; 0x14da <__ultoa_invert+0x84>
    14d6:	a9 f7       	brne	.-22     	; 0x14c2 <__ultoa_invert+0x6c>
    14d8:	ea cf       	rjmp	.-44     	; 0x14ae <__ultoa_invert+0x58>
    14da:	b4 e0       	ldi	r27, 0x04	; 4
    14dc:	a6 95       	lsr	r26
    14de:	97 95       	ror	r25
    14e0:	87 95       	ror	r24
    14e2:	77 95       	ror	r23
    14e4:	67 95       	ror	r22
    14e6:	ba 95       	dec	r27
    14e8:	c9 f7       	brne	.-14     	; 0x14dc <__ultoa_invert+0x86>
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	61 05       	cpc	r22, r1
    14ee:	71 05       	cpc	r23, r1
    14f0:	08 95       	ret
    14f2:	9b 01       	movw	r18, r22
    14f4:	ac 01       	movw	r20, r24
    14f6:	0a 2e       	mov	r0, r26
    14f8:	06 94       	lsr	r0
    14fa:	57 95       	ror	r21
    14fc:	47 95       	ror	r20
    14fe:	37 95       	ror	r19
    1500:	27 95       	ror	r18
    1502:	ba 95       	dec	r27
    1504:	c9 f7       	brne	.-14     	; 0x14f8 <__ultoa_invert+0xa2>
    1506:	62 0f       	add	r22, r18
    1508:	73 1f       	adc	r23, r19
    150a:	84 1f       	adc	r24, r20
    150c:	95 1f       	adc	r25, r21
    150e:	a0 1d       	adc	r26, r0
    1510:	08 95       	ret

00001512 <__divmodsi4>:
    1512:	05 2e       	mov	r0, r21
    1514:	97 fb       	bst	r25, 7
    1516:	1e f4       	brtc	.+6      	; 0x151e <__divmodsi4+0xc>
    1518:	00 94       	com	r0
    151a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__negsi2>
    151e:	57 fd       	sbrc	r21, 7
    1520:	07 d0       	rcall	.+14     	; 0x1530 <__divmodsi4_neg2>
    1522:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__udivmodsi4>
    1526:	07 fc       	sbrc	r0, 7
    1528:	03 d0       	rcall	.+6      	; 0x1530 <__divmodsi4_neg2>
    152a:	4e f4       	brtc	.+18     	; 0x153e <__divmodsi4_exit>
    152c:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__negsi2>

00001530 <__divmodsi4_neg2>:
    1530:	50 95       	com	r21
    1532:	40 95       	com	r20
    1534:	30 95       	com	r19
    1536:	21 95       	neg	r18
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	4f 4f       	sbci	r20, 0xFF	; 255
    153c:	5f 4f       	sbci	r21, 0xFF	; 255

0000153e <__divmodsi4_exit>:
    153e:	08 95       	ret

00001540 <__negsi2>:
    1540:	90 95       	com	r25
    1542:	80 95       	com	r24
    1544:	70 95       	com	r23
    1546:	61 95       	neg	r22
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	08 95       	ret

00001550 <__muluhisi3>:
    1550:	0e 94 14 0b 	call	0x1628	; 0x1628 <__umulhisi3>
    1554:	a5 9f       	mul	r26, r21
    1556:	90 0d       	add	r25, r0
    1558:	b4 9f       	mul	r27, r20
    155a:	90 0d       	add	r25, r0
    155c:	a4 9f       	mul	r26, r20
    155e:	80 0d       	add	r24, r0
    1560:	91 1d       	adc	r25, r1
    1562:	11 24       	eor	r1, r1
    1564:	08 95       	ret

00001566 <__mulshisi3>:
    1566:	b7 ff       	sbrs	r27, 7
    1568:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__muluhisi3>

0000156c <__mulohisi3>:
    156c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__muluhisi3>
    1570:	82 1b       	sub	r24, r18
    1572:	93 0b       	sbc	r25, r19
    1574:	08 95       	ret

00001576 <__prologue_saves__>:
    1576:	2f 92       	push	r2
    1578:	3f 92       	push	r3
    157a:	4f 92       	push	r4
    157c:	5f 92       	push	r5
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	ca 1b       	sub	r28, r26
    15a0:	db 0b       	sbc	r29, r27
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	09 94       	ijmp

000015ae <__epilogue_restores__>:
    15ae:	2a 88       	ldd	r2, Y+18	; 0x12
    15b0:	39 88       	ldd	r3, Y+17	; 0x11
    15b2:	48 88       	ldd	r4, Y+16	; 0x10
    15b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    15b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    15b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    15ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    15bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    15be:	aa 84       	ldd	r10, Y+10	; 0x0a
    15c0:	b9 84       	ldd	r11, Y+9	; 0x09
    15c2:	c8 84       	ldd	r12, Y+8	; 0x08
    15c4:	df 80       	ldd	r13, Y+7	; 0x07
    15c6:	ee 80       	ldd	r14, Y+6	; 0x06
    15c8:	fd 80       	ldd	r15, Y+5	; 0x05
    15ca:	0c 81       	ldd	r16, Y+4	; 0x04
    15cc:	1b 81       	ldd	r17, Y+3	; 0x03
    15ce:	aa 81       	ldd	r26, Y+2	; 0x02
    15d0:	b9 81       	ldd	r27, Y+1	; 0x01
    15d2:	ce 0f       	add	r28, r30
    15d4:	d1 1d       	adc	r29, r1
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	ed 01       	movw	r28, r26
    15e2:	08 95       	ret

000015e4 <__udivmodsi4>:
    15e4:	a1 e2       	ldi	r26, 0x21	; 33
    15e6:	1a 2e       	mov	r1, r26
    15e8:	aa 1b       	sub	r26, r26
    15ea:	bb 1b       	sub	r27, r27
    15ec:	fd 01       	movw	r30, r26
    15ee:	0d c0       	rjmp	.+26     	; 0x160a <__udivmodsi4_ep>

000015f0 <__udivmodsi4_loop>:
    15f0:	aa 1f       	adc	r26, r26
    15f2:	bb 1f       	adc	r27, r27
    15f4:	ee 1f       	adc	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	a2 17       	cp	r26, r18
    15fa:	b3 07       	cpc	r27, r19
    15fc:	e4 07       	cpc	r30, r20
    15fe:	f5 07       	cpc	r31, r21
    1600:	20 f0       	brcs	.+8      	; 0x160a <__udivmodsi4_ep>
    1602:	a2 1b       	sub	r26, r18
    1604:	b3 0b       	sbc	r27, r19
    1606:	e4 0b       	sbc	r30, r20
    1608:	f5 0b       	sbc	r31, r21

0000160a <__udivmodsi4_ep>:
    160a:	66 1f       	adc	r22, r22
    160c:	77 1f       	adc	r23, r23
    160e:	88 1f       	adc	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	1a 94       	dec	r1
    1614:	69 f7       	brne	.-38     	; 0x15f0 <__udivmodsi4_loop>
    1616:	60 95       	com	r22
    1618:	70 95       	com	r23
    161a:	80 95       	com	r24
    161c:	90 95       	com	r25
    161e:	9b 01       	movw	r18, r22
    1620:	ac 01       	movw	r20, r24
    1622:	bd 01       	movw	r22, r26
    1624:	cf 01       	movw	r24, r30
    1626:	08 95       	ret

00001628 <__umulhisi3>:
    1628:	a2 9f       	mul	r26, r18
    162a:	b0 01       	movw	r22, r0
    162c:	b3 9f       	mul	r27, r19
    162e:	c0 01       	movw	r24, r0
    1630:	a3 9f       	mul	r26, r19
    1632:	70 0d       	add	r23, r0
    1634:	81 1d       	adc	r24, r1
    1636:	11 24       	eor	r1, r1
    1638:	91 1d       	adc	r25, r1
    163a:	b2 9f       	mul	r27, r18
    163c:	70 0d       	add	r23, r0
    163e:	81 1d       	adc	r24, r1
    1640:	11 24       	eor	r1, r1
    1642:	91 1d       	adc	r25, r1
    1644:	08 95       	ret

00001646 <_exit>:
    1646:	f8 94       	cli

00001648 <__stop_program>:
    1648:	ff cf       	rjmp	.-2      	; 0x1648 <__stop_program>
