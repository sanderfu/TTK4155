
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c8  00800100  00001682  00001716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002c8  008002c8  000018de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b1  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0a  00000000  00000000  00002d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a53  00000000  00000000  00003a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  000044e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062c  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d7  00000000  00000000  00004e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf ef       	ldi	r28, 0xFF	; 255
      a4:	d4 e0       	ldi	r29, 0x04	; 4
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	12 e0       	ldi	r17, 0x02	; 2
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e2 e8       	ldi	r30, 0x82	; 130
      b2:	f6 e1       	ldi	r31, 0x16	; 22
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a8 3c       	cpi	r26, 0xC8	; 200
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	22 e0       	ldi	r18, 0x02	; 2
      c2:	a8 ec       	ldi	r26, 0xC8	; 200
      c4:	b2 e0       	ldi	r27, 0x02	; 2
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 3d       	cpi	r26, 0xDE	; 222
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
      d4:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
      dc:	30 98       	cbi	0x06, 0	; 6
      de:	08 95       	ret

000000e0 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
      e0:	84 60       	ori	r24, 0x04	; 4
      e2:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1122>
	

	while (test_bit(PINE, PINE0)) {
      e6:	28 99       	sbic	0x05, 0	; 5
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <readAdc+0x6>

	}
	
	return *adc;
      ea:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1122>
      ee:	08 95       	ret

000000f0 <SRAM_test>:
joystick_position_t joystick_pos;
slider_position_t slider_pos;
buttonValues_t buttons;

void SRAM_test(void)
{
      f0:	cf 92       	push	r12
      f2:	df 92       	push	r13
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
uint16_t retrieval_errors = 0;
printf("Starting SRAM test...\n\r");
     100:	8a e0       	ldi	r24, 0x0A	; 10
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	9f 93       	push	r25
     106:	8f 93       	push	r24
     108:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
// rand() stores some internal state, so calling this function in a loop will
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
     10c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <rand>
     110:	7c 01       	movw	r14, r24
// Write phase: Immediately check that the correct value was stored
srand(seed);
     112:	0e 94 64 06 	call	0xcc8	; 0xcc8 <srand>
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
for (uint16_t i = 0; i < ext_ram_size; i++) {
     11a:	c1 2c       	mov	r12, r1
     11c:	d1 2c       	mov	r13, r1

void SRAM_test(void)
{
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	10 e0       	ldi	r17, 0x00	; 0
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
ext_ram[i] = some_value;
uint8_t retreived_value = ext_ram[i];
if (retreived_value != some_value) {
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     122:	c2 e2       	ldi	r28, 0x22	; 34
     124:	d1 e0       	ldi	r29, 0x01	; 1
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
// Write phase: Immediately check that the correct value was stored
srand(seed);
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
     126:	0e 94 5f 06 	call	0xcbe	; 0xcbe <rand>
     12a:	f6 01       	movw	r30, r12
     12c:	f8 5e       	subi	r31, 0xE8	; 232
ext_ram[i] = some_value;
     12e:	80 83       	st	Z, r24
uint8_t retreived_value = ext_ram[i];
     130:	20 81       	ld	r18, Z
if (retreived_value != some_value) {
     132:	28 17       	cp	r18, r24
     134:	a9 f0       	breq	.+42     	; 0x160 <SRAM_test+0x70>
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     136:	99 27       	eor	r25, r25
     138:	9f 93       	push	r25
     13a:	8f 93       	push	r24
     13c:	1f 92       	push	r1
     13e:	2f 93       	push	r18
     140:	df 92       	push	r13
     142:	cf 92       	push	r12
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
write_errors++;
     14c:	0f 5f       	subi	r16, 0xFF	; 255
     14e:	1f 4f       	sbci	r17, 0xFF	; 255
     150:	8d b7       	in	r24, 0x3d	; 61
     152:	9e b7       	in	r25, 0x3e	; 62
     154:	08 96       	adiw	r24, 0x08	; 8
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	9e bf       	out	0x3e, r25	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	8d bf       	out	0x3d, r24	; 61
// rand() stores some internal state, so calling this function in a loop will
// yield different seeds each time (unless srand() is called before this function)
uint16_t seed = rand();
// Write phase: Immediately check that the correct value was stored
srand(seed);
for (uint16_t i = 0; i < ext_ram_size; i++) {
     160:	9f ef       	ldi	r25, 0xFF	; 255
     162:	c9 1a       	sub	r12, r25
     164:	d9 0a       	sbc	r13, r25
     166:	c1 14       	cp	r12, r1
     168:	88 e0       	ldi	r24, 0x08	; 8
     16a:	d8 06       	cpc	r13, r24
     16c:	e1 f6       	brne	.-72     	; 0x126 <SRAM_test+0x36>
printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
write_errors++;
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
     16e:	c7 01       	movw	r24, r14
     170:	0e 94 64 06 	call	0xcc8	; 0xcc8 <srand>
for (uint16_t i = 0; i < ext_ram_size; i++) {
     174:	c0 e0       	ldi	r28, 0x00	; 0
     176:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
uint16_t ext_ram_size = 0x800;
uint16_t write_errors = 0;
uint16_t retrieval_errors = 0;
     178:	e1 2c       	mov	r14, r1
     17a:	f1 2c       	mov	r15, r1
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
uint8_t retreived_value = ext_ram[i];
if (retreived_value != some_value) {
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     17c:	0f 2e       	mov	r0, r31
     17e:	fc e5       	ldi	r31, 0x5C	; 92
     180:	cf 2e       	mov	r12, r31
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	df 2e       	mov	r13, r31
     186:	f0 2d       	mov	r31, r0
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
uint8_t some_value = rand();
     188:	0e 94 5f 06 	call	0xcbe	; 0xcbe <rand>
     18c:	fe 01       	movw	r30, r28
     18e:	f8 5e       	subi	r31, 0xE8	; 232
uint8_t retreived_value = ext_ram[i];
     190:	20 81       	ld	r18, Z
if (retreived_value != some_value) {
     192:	28 17       	cp	r18, r24
     194:	b1 f0       	breq	.+44     	; 0x1c2 <SRAM_test+0xd2>
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     196:	99 27       	eor	r25, r25
     198:	9f 93       	push	r25
     19a:	8f 93       	push	r24
     19c:	1f 92       	push	r1
     19e:	2f 93       	push	r18
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	df 92       	push	r13
     1a6:	cf 92       	push	r12
     1a8:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
i, retreived_value, some_value);
retrieval_errors++;
     1ac:	9f ef       	ldi	r25, 0xFF	; 255
     1ae:	e9 1a       	sub	r14, r25
     1b0:	f9 0a       	sbc	r15, r25
     1b2:	8d b7       	in	r24, 0x3d	; 61
     1b4:	9e b7       	in	r25, 0x3e	; 62
     1b6:	08 96       	adiw	r24, 0x08	; 8
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	9e bf       	out	0x3e, r25	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	8d bf       	out	0x3d, r24	; 61
write_errors++;
}
}
// Retrieval phase: Check that no values were changed during or after the write phase
srand(seed); // reset the PRNG to the state it had before the write phase
for (uint16_t i = 0; i < ext_ram_size; i++) {
     1c2:	21 96       	adiw	r28, 0x01	; 1
     1c4:	c1 15       	cp	r28, r1
     1c6:	98 e0       	ldi	r25, 0x08	; 8
     1c8:	d9 07       	cpc	r29, r25
     1ca:	f1 f6       	brne	.-68     	; 0x188 <SRAM_test+0x98>
printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
i, retreived_value, some_value);
retrieval_errors++;
}
}
printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
     1cc:	ff 92       	push	r15
     1ce:	ef 92       	push	r14
     1d0:	1f 93       	push	r17
     1d2:	0f 93       	push	r16
     1d4:	8a e9       	ldi	r24, 0x9A	; 154
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
}
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <__vector_14>:

ISR (TIMER1_COMPB_vect) {
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	11 24       	eor	r1, r1
     208:	2f 93       	push	r18
     20a:	3f 93       	push	r19
     20c:	4f 93       	push	r20
     20e:	5f 93       	push	r21
     210:	6f 93       	push	r22
     212:	7f 93       	push	r23
     214:	8f 93       	push	r24
     216:	9f 93       	push	r25
     218:	af 93       	push	r26
     21a:	bf 93       	push	r27
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
	cli();
     220:	f8 94       	cli
	TCNT1 = 0x00;
     222:	1d bc       	out	0x2d, r1	; 45
     224:	1c bc       	out	0x2c, r1	; 44
	printf("timer interrupt: %i, ", TCNT1);
     226:	8c b5       	in	r24, 0x2c	; 44
     228:	9d b5       	in	r25, 0x2d	; 45
     22a:	9f 93       	push	r25
     22c:	8f 93       	push	r24
     22e:	85 ef       	ldi	r24, 0xF5	; 245
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	9f 93       	push	r25
     234:	8f 93       	push	r24
     236:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
	joystick_readPosition(&joystick_pos);
     23a:	88 ec       	ldi	r24, 0xC8	; 200
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     242:	8e ec       	ldi	r24, 0xCE	; 206
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	0e 94 e6 02 	call	0x5cc	; 0x5cc <slider_readPosition>
	touchButton_readButtons(&buttons);
     24a:	8c ec       	ldi	r24, 0xCC	; 204
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	0e 94 0d 03 	call	0x61a	; 0x61a <touchButton_readButtons>
	sei();
     252:	78 94       	sei
}
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	ff 91       	pop	r31
     25e:	ef 91       	pop	r30
     260:	bf 91       	pop	r27
     262:	af 91       	pop	r26
     264:	9f 91       	pop	r25
     266:	8f 91       	pop	r24
     268:	7f 91       	pop	r23
     26a:	6f 91       	pop	r22
     26c:	5f 91       	pop	r21
     26e:	4f 91       	pop	r20
     270:	3f 91       	pop	r19
     272:	2f 91       	pop	r18
     274:	0f 90       	pop	r0
     276:	0f be       	out	0x3f, r0	; 63
     278:	0f 90       	pop	r0
     27a:	1f 90       	pop	r1
     27c:	18 95       	reti

0000027e <main>:

int main(void)
{
	//DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
	setupInit();
     27e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <setupInit>
	SRAM_test();
     282:	0e 94 78 00 	call	0xf0	; 0xf0 <SRAM_test>
	printf("Hello, world!\n\r");
     286:	8b e0       	ldi	r24, 0x0B	; 11
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	9f 93       	push	r25
     28c:	8f 93       	push	r24
     28e:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
	
	
	//Enable interrupt from timer
	
	//Disable global interrupts
	cli();
     292:	f8 94       	cli
	
	//enable timer 0
	TIMSK |= (1 << OCIE1B);
     294:	89 b7       	in	r24, 0x39	; 57
     296:	80 62       	ori	r24, 0x20	; 32
     298:	89 bf       	out	0x39, r24	; 57

	
	//Setup code here for timer interrupt
	TCNT1 = 0x00;
     29a:	1d bc       	out	0x2d, r1	; 45
     29c:	1c bc       	out	0x2c, r1	; 44
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     29e:	80 e3       	ldi	r24, 0x30	; 48
     2a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     2a2:	85 e0       	ldi	r24, 0x05	; 5
     2a4:	8e bd       	out	0x2e, r24	; 46
	
	OCR1B = TIMER_RESET;
     2a6:	80 ef       	ldi	r24, 0xF0	; 240
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	99 bd       	out	0x29, r25	; 41
     2ac:	88 bd       	out	0x28, r24	; 40
	
	//Enable global interrupts
	sei();
     2ae:	78 94       	sei
	printf("Timer initialized");
     2b0:	8b e1       	ldi	r24, 0x1B	; 27
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	9f 93       	push	r25
     2b6:	8f 93       	push	r24
     2b8:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
		
		//cli();
		//TCNT1 = 0x4444;
		//printf("Timer: %i\n\r", TCNT1);
		//sei();
		printf("ADC: \n\r");
     2c4:	0f 2e       	mov	r0, r31
     2c6:	fd e2       	ldi	r31, 0x2D	; 45
     2c8:	af 2e       	mov	r10, r31
     2ca:	f2 e0       	ldi	r31, 0x02	; 2
     2cc:	bf 2e       	mov	r11, r31
     2ce:	f0 2d       	mov	r31, r0
		printf("x: %i\t", joystick_pos.x_pos);
     2d0:	c8 ec       	ldi	r28, 0xC8	; 200
     2d2:	d2 e0       	ldi	r29, 0x02	; 2
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f5 e3       	ldi	r31, 0x35	; 53
     2d8:	cf 2e       	mov	r12, r31
     2da:	f2 e0       	ldi	r31, 0x02	; 2
     2dc:	df 2e       	mov	r13, r31
     2de:	f0 2d       	mov	r31, r0
		printf("y: %i\n\r", joystick_pos.y_pos);
     2e0:	0f 2e       	mov	r0, r31
     2e2:	fc e3       	ldi	r31, 0x3C	; 60
     2e4:	8f 2e       	mov	r8, r31
     2e6:	f2 e0       	ldi	r31, 0x02	; 2
     2e8:	9f 2e       	mov	r9, r31
     2ea:	f0 2d       	mov	r31, r0
		joystick_printDirection(joystick_getDirection(&joystick_pos));
		printf("Slider left: %i\tSlider right: %i\n\r", slider_pos.left_pos, slider_pos.right_pos);
     2ec:	0f 2e       	mov	r0, r31
     2ee:	fe ec       	ldi	r31, 0xCE	; 206
     2f0:	ef 2e       	mov	r14, r31
     2f2:	f2 e0       	ldi	r31, 0x02	; 2
     2f4:	ff 2e       	mov	r15, r31
     2f6:	f0 2d       	mov	r31, r0
     2f8:	0f 2e       	mov	r0, r31
     2fa:	f4 e4       	ldi	r31, 0x44	; 68
     2fc:	6f 2e       	mov	r6, r31
     2fe:	f2 e0       	ldi	r31, 0x02	; 2
     300:	7f 2e       	mov	r7, r31
     302:	f0 2d       	mov	r31, r0
		printf("Button left: %i \tButton right: %i\n\r", buttons.left_button, buttons.right_button);
     304:	0c ec       	ldi	r16, 0xCC	; 204
     306:	12 e0       	ldi	r17, 0x02	; 2
     308:	0f 2e       	mov	r0, r31
     30a:	f7 e6       	ldi	r31, 0x67	; 103
     30c:	4f 2e       	mov	r4, r31
     30e:	f2 e0       	ldi	r31, 0x02	; 2
     310:	5f 2e       	mov	r5, r31
     312:	f0 2d       	mov	r31, r0
		printf("Angle: %i\n\r", joystick_pos.angle);
     314:	0f 2e       	mov	r0, r31
     316:	fb e8       	ldi	r31, 0x8B	; 139
     318:	2f 2e       	mov	r2, r31
     31a:	f2 e0       	ldi	r31, 0x02	; 2
     31c:	3f 2e       	mov	r3, r31
     31e:	f0 2d       	mov	r31, r0
		
		//cli();
		//TCNT1 = 0x4444;
		//printf("Timer: %i\n\r", TCNT1);
		//sei();
		printf("ADC: \n\r");
     320:	bf 92       	push	r11
     322:	af 92       	push	r10
     324:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
		printf("x: %i\t", joystick_pos.x_pos);
     328:	88 81       	ld	r24, Y
     32a:	28 2f       	mov	r18, r24
     32c:	08 2e       	mov	r0, r24
     32e:	00 0c       	add	r0, r0
     330:	33 0b       	sbc	r19, r19
     332:	3f 93       	push	r19
     334:	8f 93       	push	r24
     336:	df 92       	push	r13
     338:	cf 92       	push	r12
     33a:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
		printf("y: %i\n\r", joystick_pos.y_pos);
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	28 2f       	mov	r18, r24
     342:	08 2e       	mov	r0, r24
     344:	00 0c       	add	r0, r0
     346:	33 0b       	sbc	r19, r19
     348:	3f 93       	push	r19
     34a:	8f 93       	push	r24
     34c:	9f 92       	push	r9
     34e:	8f 92       	push	r8
     350:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
		joystick_printDirection(joystick_getDirection(&joystick_pos));
     354:	ce 01       	movw	r24, r28
     356:	0e 94 71 02 	call	0x4e2	; 0x4e2 <joystick_getDirection>
     35a:	0e 94 95 02 	call	0x52a	; 0x52a <joystick_printDirection>
		printf("Slider left: %i\tSlider right: %i\n\r", slider_pos.left_pos, slider_pos.right_pos);
     35e:	f7 01       	movw	r30, r14
     360:	81 81       	ldd	r24, Z+1	; 0x01
     362:	1f 92       	push	r1
     364:	8f 93       	push	r24
     366:	80 81       	ld	r24, Z
     368:	1f 92       	push	r1
     36a:	8f 93       	push	r24
     36c:	7f 92       	push	r7
     36e:	6f 92       	push	r6
     370:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
		printf("Button left: %i \tButton right: %i\n\r", buttons.left_button, buttons.right_button);
     374:	f8 01       	movw	r30, r16
     376:	81 81       	ldd	r24, Z+1	; 0x01
     378:	1f 92       	push	r1
     37a:	8f 93       	push	r24
     37c:	80 81       	ld	r24, Z
     37e:	1f 92       	push	r1
     380:	8f 93       	push	r24
     382:	5f 92       	push	r5
     384:	4f 92       	push	r4
     386:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
		printf("Angle: %i\n\r", joystick_pos.angle);
     38a:	8b 81       	ldd	r24, Y+3	; 0x03
     38c:	8f 93       	push	r24
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	8f 93       	push	r24
     392:	3f 92       	push	r3
     394:	2f 92       	push	r2
     396:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
     39a:	8d b7       	in	r24, 0x3d	; 61
     39c:	9e b7       	in	r25, 0x3e	; 62
     39e:	4a 96       	adiw	r24, 0x1a	; 26
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	9e bf       	out	0x3e, r25	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	8d bf       	out	0x3d, r24	; 61
     3aa:	ba cf       	rjmp	.-140    	; 0x320 <main+0xa2>

000003ac <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     3b2:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     3bc:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <joystickOffsetY>
     3c0:	08 95       	ret

000003c2 <joystick_readPosition>:
}
void joystick_readPosition(joystick_position_t * pos) {
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     3d8:	18 2f       	mov	r17, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     3e0:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     3e2:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <joystickOffsetX>
     3e6:	16 17       	cp	r17, r22
     3e8:	78 f4       	brcc	.+30     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		pos->x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	21 2f       	mov	r18, r17
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	26 1b       	sub	r18, r22
     3f2:	37 0b       	sbc	r19, r23
     3f4:	44 e6       	ldi	r20, 0x64	; 100
     3f6:	42 9f       	mul	r20, r18
     3f8:	c0 01       	movw	r24, r0
     3fa:	43 9f       	mul	r20, r19
     3fc:	90 0d       	add	r25, r0
     3fe:	11 24       	eor	r1, r1
     400:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
     404:	68 83       	st	Y, r22
     406:	13 c0       	rjmp	.+38     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	} else {
		pos->x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     408:	46 2f       	mov	r20, r22
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	21 2f       	mov	r18, r17
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	24 1b       	sub	r18, r20
     412:	35 0b       	sbc	r19, r21
     414:	64 e6       	ldi	r22, 0x64	; 100
     416:	62 9f       	mul	r22, r18
     418:	c0 01       	movw	r24, r0
     41a:	63 9f       	mul	r22, r19
     41c:	90 0d       	add	r25, r0
     41e:	11 24       	eor	r1, r1
     420:	6f ef       	ldi	r22, 0xFF	; 255
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	64 1b       	sub	r22, r20
     426:	75 0b       	sbc	r23, r21
     428:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
     42c:	68 83       	st	Y, r22
	}
	if (y_pos < joystickOffsetY) {
     42e:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <joystickOffsetY>
     432:	e2 17       	cp	r30, r18
     434:	80 f4       	brcc	.+32     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		pos->y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     436:	62 2f       	mov	r22, r18
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	4e 2f       	mov	r20, r30
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	46 1b       	sub	r20, r22
     440:	57 0b       	sbc	r21, r23
     442:	24 e6       	ldi	r18, 0x64	; 100
     444:	24 9f       	mul	r18, r20
     446:	c0 01       	movw	r24, r0
     448:	25 9f       	mul	r18, r21
     44a:	90 0d       	add	r25, r0
     44c:	11 24       	eor	r1, r1
     44e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
     452:	69 83       	std	Y+1, r22	; 0x01
     454:	12 c0       	rjmp	.+36     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	} else {
		pos->y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	4e 2f       	mov	r20, r30
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	42 1b       	sub	r20, r18
     45e:	53 0b       	sbc	r21, r19
     460:	64 e6       	ldi	r22, 0x64	; 100
     462:	64 9f       	mul	r22, r20
     464:	c0 01       	movw	r24, r0
     466:	65 9f       	mul	r22, r21
     468:	90 0d       	add	r25, r0
     46a:	11 24       	eor	r1, r1
     46c:	6f ef       	ldi	r22, 0xFF	; 255
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	62 1b       	sub	r22, r18
     472:	73 0b       	sbc	r23, r19
     474:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
     478:	69 83       	std	Y+1, r22	; 0x01
	}
	pos->angle = atan2(pos->y_pos, pos->x_pos)*360/2.0/3.14;
     47a:	68 81       	ld	r22, Y
     47c:	06 2e       	mov	r0, r22
     47e:	00 0c       	add	r0, r0
     480:	77 0b       	sbc	r23, r23
     482:	88 0b       	sbc	r24, r24
     484:	99 0b       	sbc	r25, r25
     486:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__floatsisf>
     48a:	6b 01       	movw	r12, r22
     48c:	7c 01       	movw	r14, r24
     48e:	69 81       	ldd	r22, Y+1	; 0x01
     490:	06 2e       	mov	r0, r22
     492:	00 0c       	add	r0, r0
     494:	77 0b       	sbc	r23, r23
     496:	88 0b       	sbc	r24, r24
     498:	99 0b       	sbc	r25, r25
     49a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__floatsisf>
     49e:	a7 01       	movw	r20, r14
     4a0:	96 01       	movw	r18, r12
     4a2:	0e 94 49 03 	call	0x692	; 0x692 <atan2>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	44 eb       	ldi	r20, 0xB4	; 180
     4ac:	53 e4       	ldi	r21, 0x43	; 67
     4ae:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	5f e3       	ldi	r21, 0x3F	; 63
     4ba:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3>
     4be:	23 ec       	ldi	r18, 0xC3	; 195
     4c0:	35 ef       	ldi	r19, 0xF5	; 245
     4c2:	48 e4       	ldi	r20, 0x48	; 72
     4c4:	50 e4       	ldi	r21, 0x40	; 64
     4c6:	0e 94 a8 03 	call	0x750	; 0x750 <__divsf3>
     4ca:	0e 94 1a 04 	call	0x834	; 0x834 <__fixsfsi>
     4ce:	7b 83       	std	Y+3, r23	; 0x03
     4d0:	6a 83       	std	Y+2, r22	; 0x02
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	df 90       	pop	r13
     4de:	cf 90       	pop	r12
     4e0:	08 95       	ret

000004e2 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     4e2:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     4e4:	80 81       	ld	r24, Z
     4e6:	94 e0       	ldi	r25, 0x04	; 4
     4e8:	98 0f       	add	r25, r24
     4ea:	99 30       	cpi	r25, 0x09	; 9
     4ec:	20 f4       	brcc	.+8      	; 0x4f6 <joystick_getDirection+0x14>
     4ee:	91 81       	ldd	r25, Z+1	; 0x01
     4f0:	9c 5f       	subi	r25, 0xFC	; 252
     4f2:	99 30       	cpi	r25, 0x09	; 9
     4f4:	90 f0       	brcs	.+36     	; 0x51a <__stack+0x1b>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     4f6:	85 30       	cpi	r24, 0x05	; 5
     4f8:	2c f0       	brlt	.+10     	; 0x504 <__stack+0x5>
     4fa:	81 81       	ldd	r24, Z+1	; 0x01
     4fc:	8f 5c       	subi	r24, 0xCF	; 207
     4fe:	83 36       	cpi	r24, 0x63	; 99
     500:	38 f4       	brcc	.+14     	; 0x510 <__stack+0x11>
     502:	0d c0       	rjmp	.+26     	; 0x51e <__stack+0x1f>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     504:	8c 3f       	cpi	r24, 0xFC	; 252
     506:	24 f4       	brge	.+8      	; 0x510 <__stack+0x11>
     508:	81 81       	ldd	r24, Z+1	; 0x01
     50a:	8f 5c       	subi	r24, 0xCF	; 207
     50c:	83 36       	cpi	r24, 0x63	; 99
     50e:	48 f0       	brcs	.+18     	; 0x522 <__stack+0x23>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     510:	81 81       	ldd	r24, Z+1	; 0x01
     512:	8c 3f       	cpi	r24, 0xFC	; 252
     514:	44 f0       	brlt	.+16     	; 0x526 <__stack+0x27>
		return DOWN;
	}
	else {
		return UP;
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	08 95       	ret
	pos->angle = atan2(pos->y_pos, pos->x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     526:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     528:	08 95       	ret

0000052a <joystick_printDirection>:
void joystick_printDirection(DIRECTION_t dir) {
     52a:	cf 93       	push	r28
     52c:	c8 2f       	mov	r28, r24
	printf("Direction:\t");
     52e:	87 e9       	ldi	r24, 0x97	; 151
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
	switch(dir) {
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	c2 30       	cpi	r28, 0x02	; 2
     540:	29 f1       	breq	.+74     	; 0x58c <joystick_printDirection+0x62>
     542:	28 f4       	brcc	.+10     	; 0x54e <joystick_printDirection+0x24>
     544:	cc 23       	and	r28, r28
     546:	81 f0       	breq	.+32     	; 0x568 <joystick_printDirection+0x3e>
     548:	c1 30       	cpi	r28, 0x01	; 1
     54a:	b9 f0       	breq	.+46     	; 0x57a <joystick_printDirection+0x50>
     54c:	30 c0       	rjmp	.+96     	; 0x5ae <joystick_printDirection+0x84>
     54e:	c3 30       	cpi	r28, 0x03	; 3
     550:	31 f1       	breq	.+76     	; 0x59e <joystick_printDirection+0x74>
     552:	c4 30       	cpi	r28, 0x04	; 4
     554:	61 f5       	brne	.+88     	; 0x5ae <joystick_printDirection+0x84>
		case NEUTRAL:
			printf("Neutral\n\r");
     556:	83 ea       	ldi	r24, 0xA3	; 163
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	9f 93       	push	r25
     55c:	8f 93       	push	r24
     55e:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
			return;
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	23 c0       	rjmp	.+70     	; 0x5ae <joystick_printDirection+0x84>
		case LEFT:
			printf("Left\n\r");
     568:	8d ea       	ldi	r24, 0xAD	; 173
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
			return;
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	1a c0       	rjmp	.+52     	; 0x5ae <joystick_printDirection+0x84>
		case RIGHT:
			printf("Right\n\r");
     57a:	84 eb       	ldi	r24, 0xB4	; 180
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	9f 93       	push	r25
     580:	8f 93       	push	r24
     582:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
			return;
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	11 c0       	rjmp	.+34     	; 0x5ae <joystick_printDirection+0x84>
		case UP:
			printf("Up\n\r");
     58c:	8c eb       	ldi	r24, 0xBC	; 188
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
			return;
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	08 c0       	rjmp	.+16     	; 0x5ae <joystick_printDirection+0x84>
		case DOWN:
			printf("Down\n\r");
     59e:	81 ec       	ldi	r24, 0xC1	; 193
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
			return;
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
		
	}
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <setupInit>:
#include "adc.h"
#include "joystick.h"
#include "setup.h"

	void setupInit(void){
	xmem_init();
     5b2:	0e 94 2f 03 	call	0x65e	; 0x65e <xmem_init>
	USART_init(MYUBRR);
     5b6:	8f e1       	ldi	r24, 0x1F	; 31
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 1e 03 	call	0x63c	; 0x63c <USART_init>
	adcInit();
     5be:	0e 94 6e 00 	call	0xdc	; 0xdc <adcInit>
	joystickInit();
     5c2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <joystickInit>
	touchButton_init();
     5c6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <touchButton_init>
     5ca:	08 95       	ret

000005cc <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
	pos->left_pos = readAdc(LEFT_POS_CHANNEL);
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     5d8:	88 83       	st	Y, r24
	pos->right_pos = readAdc(RIGHT_POS_CHANNEL);
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     5e8:	36 b3       	in	r19, 0x16	; 22
     5ea:	26 b3       	in	r18, 0x16	; 22
     5ec:	47 b3       	in	r20, 0x17	; 23
     5ee:	31 70       	andi	r19, 0x01	; 1
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	bc 01       	movw	r22, r24
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <touchButton_init+0x14>
     5f8:	66 0f       	add	r22, r22
     5fa:	77 1f       	adc	r23, r23
     5fc:	3a 95       	dec	r19
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <touchButton_init+0x10>
     600:	22 70       	andi	r18, 0x02	; 2
     602:	02 c0       	rjmp	.+4      	; 0x608 <touchButton_init+0x20>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	2a 95       	dec	r18
     60a:	e2 f7       	brpl	.-8      	; 0x604 <touchButton_init+0x1c>
     60c:	86 2b       	or	r24, r22
     60e:	97 2b       	or	r25, r23
     610:	80 95       	com	r24
     612:	90 95       	com	r25
     614:	84 23       	and	r24, r20
     616:	87 bb       	out	0x17, r24	; 23
     618:	08 95       	ret

0000061a <touchButton_readButtons>:
}
touchButton_readButtons(buttonValues_t * buttons) {
     61a:	fc 01       	movw	r30, r24
	buttons->left_button = !!(BUTTON_LEFT);
     61c:	96 b3       	in	r25, 0x16	; 22
     61e:	91 70       	andi	r25, 0x01	; 1
     620:	90 83       	st	Z, r25
	buttons->right_button = !!(BUTTON_RIGHT);
     622:	96 b3       	in	r25, 0x16	; 22
     624:	96 95       	lsr	r25
     626:	91 70       	andi	r25, 0x01	; 1
     628:	91 83       	std	Z+1, r25	; 0x01
     62a:	08 95       	ret

0000062c <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     62c:	5d 9b       	sbis	0x0b, 5	; 11
     62e:	fe cf       	rjmp	.-4      	; 0x62c <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     630:	8c b9       	out	0x0c, r24	; 12
     632:	08 95       	ret

00000634 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     634:	5f 9b       	sbis	0x0b, 7	; 11
     636:	fe cf       	rjmp	.-4      	; 0x634 <USART_receiveChar>
		;
	
	return UDR0;
     638:	8c b1       	in	r24, 0x0c	; 12
     63a:	08 95       	ret

0000063c <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     63c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     63e:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     640:	88 e1       	ldi	r24, 0x18	; 24
     642:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     644:	8e e8       	ldi	r24, 0x8E	; 142
     646:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     648:	6a e1       	ldi	r22, 0x1A	; 26
     64a:	73 e0       	ldi	r23, 0x03	; 3
     64c:	86 e1       	ldi	r24, 0x16	; 22
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	0e 94 6f 06 	call	0xcde	; 0xcde <fdevopen>
     654:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <uart+0x1>
     658:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <uart>
     65c:	08 95       	ret

0000065e <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     65e:	85 b7       	in	r24, 0x35	; 53
     660:	80 68       	ori	r24, 0x80	; 128
     662:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     664:	80 b7       	in	r24, 0x30	; 48
     666:	88 60       	ori	r24, 0x08	; 8
     668:	80 bf       	out	0x30, r24	; 48
     66a:	08 95       	ret
     66c:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_pscA>
     670:	60 f0       	brcs	.+24     	; 0x68a <xmem_init+0x2c>
     672:	80 e8       	ldi	r24, 0x80	; 128
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	09 f4       	brne	.+2      	; 0x67a <xmem_init+0x1c>
     678:	9e ef       	ldi	r25, 0xFE	; 254
     67a:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_pscB>
     67e:	28 f0       	brcs	.+10     	; 0x68a <xmem_init+0x2c>
     680:	40 e8       	ldi	r20, 0x80	; 128
     682:	51 e0       	ldi	r21, 0x01	; 1
     684:	71 f4       	brne	.+28     	; 0x6a2 <atan2+0x10>
     686:	5e ef       	ldi	r21, 0xFE	; 254
     688:	0c c0       	rjmp	.+24     	; 0x6a2 <atan2+0x10>
     68a:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_nan>
     68e:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_zero>

00000692 <atan2>:
     692:	e9 2f       	mov	r30, r25
     694:	e0 78       	andi	r30, 0x80	; 128
     696:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_split3>
     69a:	40 f3       	brcs	.-48     	; 0x66c <xmem_init+0xe>
     69c:	09 2e       	mov	r0, r25
     69e:	05 2a       	or	r0, r21
     6a0:	b1 f3       	breq	.-20     	; 0x68e <xmem_init+0x30>
     6a2:	26 17       	cp	r18, r22
     6a4:	37 07       	cpc	r19, r23
     6a6:	48 07       	cpc	r20, r24
     6a8:	59 07       	cpc	r21, r25
     6aa:	38 f0       	brcs	.+14     	; 0x6ba <atan2+0x28>
     6ac:	0e 2e       	mov	r0, r30
     6ae:	07 f8       	bld	r0, 7
     6b0:	e0 25       	eor	r30, r0
     6b2:	69 f0       	breq	.+26     	; 0x6ce <atan2+0x3c>
     6b4:	e0 25       	eor	r30, r0
     6b6:	e0 64       	ori	r30, 0x40	; 64
     6b8:	0a c0       	rjmp	.+20     	; 0x6ce <atan2+0x3c>
     6ba:	ef 63       	ori	r30, 0x3F	; 63
     6bc:	07 f8       	bld	r0, 7
     6be:	00 94       	com	r0
     6c0:	07 fa       	bst	r0, 7
     6c2:	db 01       	movw	r26, r22
     6c4:	b9 01       	movw	r22, r18
     6c6:	9d 01       	movw	r18, r26
     6c8:	dc 01       	movw	r26, r24
     6ca:	ca 01       	movw	r24, r20
     6cc:	ad 01       	movw	r20, r26
     6ce:	ef 93       	push	r30
     6d0:	0e 94 bf 03 	call	0x77e	; 0x77e <__divsf3_pse>
     6d4:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_round>
     6d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atan>
     6dc:	5f 91       	pop	r21
     6de:	55 23       	and	r21, r21
     6e0:	39 f0       	breq	.+14     	; 0x6f0 <atan2+0x5e>
     6e2:	2b ed       	ldi	r18, 0xDB	; 219
     6e4:	3f e0       	ldi	r19, 0x0F	; 15
     6e6:	49 e4       	ldi	r20, 0x49	; 73
     6e8:	50 fd       	sbrc	r21, 0
     6ea:	49 ec       	ldi	r20, 0xC9	; 201
     6ec:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__addsf3>
     6f0:	08 95       	ret

000006f2 <atan>:
     6f2:	df 93       	push	r29
     6f4:	dd 27       	eor	r29, r29
     6f6:	b9 2f       	mov	r27, r25
     6f8:	bf 77       	andi	r27, 0x7F	; 127
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	16 16       	cp	r1, r22
     700:	17 06       	cpc	r1, r23
     702:	48 07       	cpc	r20, r24
     704:	5b 07       	cpc	r21, r27
     706:	18 f4       	brcc	.+6      	; 0x70e <atan+0x1c>
     708:	d9 2f       	mov	r29, r25
     70a:	0e 94 05 05 	call	0xa0a	; 0xa0a <inverse>
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	7f 93       	push	r23
     714:	6f 93       	push	r22
     716:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <square>
     71a:	e0 e7       	ldi	r30, 0x70	; 112
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_powser>
     722:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_round>
     726:	2f 91       	pop	r18
     728:	3f 91       	pop	r19
     72a:	4f 91       	pop	r20
     72c:	5f 91       	pop	r21
     72e:	0e 94 20 05 	call	0xa40	; 0xa40 <__mulsf3x>
     732:	dd 23       	and	r29, r29
     734:	51 f0       	breq	.+20     	; 0x74a <atan+0x58>
     736:	90 58       	subi	r25, 0x80	; 128
     738:	a2 ea       	ldi	r26, 0xA2	; 162
     73a:	2a ed       	ldi	r18, 0xDA	; 218
     73c:	3f e0       	ldi	r19, 0x0F	; 15
     73e:	49 ec       	ldi	r20, 0xC9	; 201
     740:	5f e3       	ldi	r21, 0x3F	; 63
     742:	d0 78       	andi	r29, 0x80	; 128
     744:	5d 27       	eor	r21, r29
     746:	0e 94 96 05 	call	0xb2c	; 0xb2c <__addsf3x>
     74a:	df 91       	pop	r29
     74c:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_round>

00000750 <__divsf3>:
     750:	0e 94 bc 03 	call	0x778	; 0x778 <__divsf3x>
     754:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_round>
     758:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_pscB>
     75c:	58 f0       	brcs	.+22     	; 0x774 <__divsf3+0x24>
     75e:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_pscA>
     762:	40 f0       	brcs	.+16     	; 0x774 <__divsf3+0x24>
     764:	29 f4       	brne	.+10     	; 0x770 <__divsf3+0x20>
     766:	5f 3f       	cpi	r21, 0xFF	; 255
     768:	29 f0       	breq	.+10     	; 0x774 <__divsf3+0x24>
     76a:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>
     76e:	51 11       	cpse	r21, r1
     770:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_szero>
     774:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_nan>

00000778 <__divsf3x>:
     778:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_split3>
     77c:	68 f3       	brcs	.-38     	; 0x758 <__divsf3+0x8>

0000077e <__divsf3_pse>:
     77e:	99 23       	and	r25, r25
     780:	b1 f3       	breq	.-20     	; 0x76e <__divsf3+0x1e>
     782:	55 23       	and	r21, r21
     784:	91 f3       	breq	.-28     	; 0x76a <__divsf3+0x1a>
     786:	95 1b       	sub	r25, r21
     788:	55 0b       	sbc	r21, r21
     78a:	bb 27       	eor	r27, r27
     78c:	aa 27       	eor	r26, r26
     78e:	62 17       	cp	r22, r18
     790:	73 07       	cpc	r23, r19
     792:	84 07       	cpc	r24, r20
     794:	38 f0       	brcs	.+14     	; 0x7a4 <__divsf3_pse+0x26>
     796:	9f 5f       	subi	r25, 0xFF	; 255
     798:	5f 4f       	sbci	r21, 0xFF	; 255
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	44 1f       	adc	r20, r20
     7a0:	aa 1f       	adc	r26, r26
     7a2:	a9 f3       	breq	.-22     	; 0x78e <__divsf3_pse+0x10>
     7a4:	35 d0       	rcall	.+106    	; 0x810 <__divsf3_pse+0x92>
     7a6:	0e 2e       	mov	r0, r30
     7a8:	3a f0       	brmi	.+14     	; 0x7b8 <__divsf3_pse+0x3a>
     7aa:	e0 e8       	ldi	r30, 0x80	; 128
     7ac:	32 d0       	rcall	.+100    	; 0x812 <__divsf3_pse+0x94>
     7ae:	91 50       	subi	r25, 0x01	; 1
     7b0:	50 40       	sbci	r21, 0x00	; 0
     7b2:	e6 95       	lsr	r30
     7b4:	00 1c       	adc	r0, r0
     7b6:	ca f7       	brpl	.-14     	; 0x7aa <__divsf3_pse+0x2c>
     7b8:	2b d0       	rcall	.+86     	; 0x810 <__divsf3_pse+0x92>
     7ba:	fe 2f       	mov	r31, r30
     7bc:	29 d0       	rcall	.+82     	; 0x810 <__divsf3_pse+0x92>
     7be:	66 0f       	add	r22, r22
     7c0:	77 1f       	adc	r23, r23
     7c2:	88 1f       	adc	r24, r24
     7c4:	bb 1f       	adc	r27, r27
     7c6:	26 17       	cp	r18, r22
     7c8:	37 07       	cpc	r19, r23
     7ca:	48 07       	cpc	r20, r24
     7cc:	ab 07       	cpc	r26, r27
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__divsf3_pse+0x56>
     7d2:	bb 0b       	sbc	r27, r27
     7d4:	80 2d       	mov	r24, r0
     7d6:	bf 01       	movw	r22, r30
     7d8:	ff 27       	eor	r31, r31
     7da:	93 58       	subi	r25, 0x83	; 131
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	3a f0       	brmi	.+14     	; 0x7ee <__divsf3_pse+0x70>
     7e0:	9e 3f       	cpi	r25, 0xFE	; 254
     7e2:	51 05       	cpc	r21, r1
     7e4:	78 f0       	brcs	.+30     	; 0x804 <__divsf3_pse+0x86>
     7e6:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>
     7ea:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_szero>
     7ee:	5f 3f       	cpi	r21, 0xFF	; 255
     7f0:	e4 f3       	brlt	.-8      	; 0x7ea <__divsf3_pse+0x6c>
     7f2:	98 3e       	cpi	r25, 0xE8	; 232
     7f4:	d4 f3       	brlt	.-12     	; 0x7ea <__divsf3_pse+0x6c>
     7f6:	86 95       	lsr	r24
     7f8:	77 95       	ror	r23
     7fa:	67 95       	ror	r22
     7fc:	b7 95       	ror	r27
     7fe:	f7 95       	ror	r31
     800:	9f 5f       	subi	r25, 0xFF	; 255
     802:	c9 f7       	brne	.-14     	; 0x7f6 <__divsf3_pse+0x78>
     804:	88 0f       	add	r24, r24
     806:	91 1d       	adc	r25, r1
     808:	96 95       	lsr	r25
     80a:	87 95       	ror	r24
     80c:	97 f9       	bld	r25, 7
     80e:	08 95       	ret
     810:	e1 e0       	ldi	r30, 0x01	; 1
     812:	66 0f       	add	r22, r22
     814:	77 1f       	adc	r23, r23
     816:	88 1f       	adc	r24, r24
     818:	bb 1f       	adc	r27, r27
     81a:	62 17       	cp	r22, r18
     81c:	73 07       	cpc	r23, r19
     81e:	84 07       	cpc	r24, r20
     820:	ba 07       	cpc	r27, r26
     822:	20 f0       	brcs	.+8      	; 0x82c <__divsf3_pse+0xae>
     824:	62 1b       	sub	r22, r18
     826:	73 0b       	sbc	r23, r19
     828:	84 0b       	sbc	r24, r20
     82a:	ba 0b       	sbc	r27, r26
     82c:	ee 1f       	adc	r30, r30
     82e:	88 f7       	brcc	.-30     	; 0x812 <__divsf3_pse+0x94>
     830:	e0 95       	com	r30
     832:	08 95       	ret

00000834 <__fixsfsi>:
     834:	0e 94 21 04 	call	0x842	; 0x842 <__fixunssfsi>
     838:	68 94       	set
     83a:	b1 11       	cpse	r27, r1
     83c:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_szero>
     840:	08 95       	ret

00000842 <__fixunssfsi>:
     842:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_splitA>
     846:	88 f0       	brcs	.+34     	; 0x86a <__fixunssfsi+0x28>
     848:	9f 57       	subi	r25, 0x7F	; 127
     84a:	98 f0       	brcs	.+38     	; 0x872 <__fixunssfsi+0x30>
     84c:	b9 2f       	mov	r27, r25
     84e:	99 27       	eor	r25, r25
     850:	b7 51       	subi	r27, 0x17	; 23
     852:	b0 f0       	brcs	.+44     	; 0x880 <__fixunssfsi+0x3e>
     854:	e1 f0       	breq	.+56     	; 0x88e <__fixunssfsi+0x4c>
     856:	66 0f       	add	r22, r22
     858:	77 1f       	adc	r23, r23
     85a:	88 1f       	adc	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	1a f0       	brmi	.+6      	; 0x866 <__fixunssfsi+0x24>
     860:	ba 95       	dec	r27
     862:	c9 f7       	brne	.-14     	; 0x856 <__fixunssfsi+0x14>
     864:	14 c0       	rjmp	.+40     	; 0x88e <__fixunssfsi+0x4c>
     866:	b1 30       	cpi	r27, 0x01	; 1
     868:	91 f0       	breq	.+36     	; 0x88e <__fixunssfsi+0x4c>
     86a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_zero>
     86e:	b1 e0       	ldi	r27, 0x01	; 1
     870:	08 95       	ret
     872:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_zero>
     876:	67 2f       	mov	r22, r23
     878:	78 2f       	mov	r23, r24
     87a:	88 27       	eor	r24, r24
     87c:	b8 5f       	subi	r27, 0xF8	; 248
     87e:	39 f0       	breq	.+14     	; 0x88e <__fixunssfsi+0x4c>
     880:	b9 3f       	cpi	r27, 0xF9	; 249
     882:	cc f3       	brlt	.-14     	; 0x876 <__fixunssfsi+0x34>
     884:	86 95       	lsr	r24
     886:	77 95       	ror	r23
     888:	67 95       	ror	r22
     88a:	b3 95       	inc	r27
     88c:	d9 f7       	brne	.-10     	; 0x884 <__fixunssfsi+0x42>
     88e:	3e f4       	brtc	.+14     	; 0x89e <__fixunssfsi+0x5c>
     890:	90 95       	com	r25
     892:	80 95       	com	r24
     894:	70 95       	com	r23
     896:	61 95       	neg	r22
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	8f 4f       	sbci	r24, 0xFF	; 255
     89c:	9f 4f       	sbci	r25, 0xFF	; 255
     89e:	08 95       	ret

000008a0 <__floatunsisf>:
     8a0:	e8 94       	clt
     8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <__floatsisf+0x12>

000008a4 <__floatsisf>:
     8a4:	97 fb       	bst	r25, 7
     8a6:	3e f4       	brtc	.+14     	; 0x8b6 <__floatsisf+0x12>
     8a8:	90 95       	com	r25
     8aa:	80 95       	com	r24
     8ac:	70 95       	com	r23
     8ae:	61 95       	neg	r22
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	8f 4f       	sbci	r24, 0xFF	; 255
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	99 23       	and	r25, r25
     8b8:	a9 f0       	breq	.+42     	; 0x8e4 <__floatsisf+0x40>
     8ba:	f9 2f       	mov	r31, r25
     8bc:	96 e9       	ldi	r25, 0x96	; 150
     8be:	bb 27       	eor	r27, r27
     8c0:	93 95       	inc	r25
     8c2:	f6 95       	lsr	r31
     8c4:	87 95       	ror	r24
     8c6:	77 95       	ror	r23
     8c8:	67 95       	ror	r22
     8ca:	b7 95       	ror	r27
     8cc:	f1 11       	cpse	r31, r1
     8ce:	f8 cf       	rjmp	.-16     	; 0x8c0 <__floatsisf+0x1c>
     8d0:	fa f4       	brpl	.+62     	; 0x910 <__floatsisf+0x6c>
     8d2:	bb 0f       	add	r27, r27
     8d4:	11 f4       	brne	.+4      	; 0x8da <__floatsisf+0x36>
     8d6:	60 ff       	sbrs	r22, 0
     8d8:	1b c0       	rjmp	.+54     	; 0x910 <__floatsisf+0x6c>
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	8f 4f       	sbci	r24, 0xFF	; 255
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	16 c0       	rjmp	.+44     	; 0x910 <__floatsisf+0x6c>
     8e4:	88 23       	and	r24, r24
     8e6:	11 f0       	breq	.+4      	; 0x8ec <__floatsisf+0x48>
     8e8:	96 e9       	ldi	r25, 0x96	; 150
     8ea:	11 c0       	rjmp	.+34     	; 0x90e <__floatsisf+0x6a>
     8ec:	77 23       	and	r23, r23
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__floatsisf+0x54>
     8f0:	9e e8       	ldi	r25, 0x8E	; 142
     8f2:	87 2f       	mov	r24, r23
     8f4:	76 2f       	mov	r23, r22
     8f6:	05 c0       	rjmp	.+10     	; 0x902 <__floatsisf+0x5e>
     8f8:	66 23       	and	r22, r22
     8fa:	71 f0       	breq	.+28     	; 0x918 <__floatsisf+0x74>
     8fc:	96 e8       	ldi	r25, 0x86	; 134
     8fe:	86 2f       	mov	r24, r22
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	2a f0       	brmi	.+10     	; 0x910 <__floatsisf+0x6c>
     906:	9a 95       	dec	r25
     908:	66 0f       	add	r22, r22
     90a:	77 1f       	adc	r23, r23
     90c:	88 1f       	adc	r24, r24
     90e:	da f7       	brpl	.-10     	; 0x906 <__floatsisf+0x62>
     910:	88 0f       	add	r24, r24
     912:	96 95       	lsr	r25
     914:	87 95       	ror	r24
     916:	97 f9       	bld	r25, 7
     918:	08 95       	ret

0000091a <__fp_inf>:
     91a:	97 f9       	bld	r25, 7
     91c:	9f 67       	ori	r25, 0x7F	; 127
     91e:	80 e8       	ldi	r24, 0x80	; 128
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	08 95       	ret

00000926 <__fp_nan>:
     926:	9f ef       	ldi	r25, 0xFF	; 255
     928:	80 ec       	ldi	r24, 0xC0	; 192
     92a:	08 95       	ret

0000092c <__fp_powser>:
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	1f 93       	push	r17
     932:	0f 93       	push	r16
     934:	ff 92       	push	r15
     936:	ef 92       	push	r14
     938:	df 92       	push	r13
     93a:	7b 01       	movw	r14, r22
     93c:	8c 01       	movw	r16, r24
     93e:	68 94       	set
     940:	06 c0       	rjmp	.+12     	; 0x94e <__fp_powser+0x22>
     942:	da 2e       	mov	r13, r26
     944:	ef 01       	movw	r28, r30
     946:	0e 94 20 05 	call	0xa40	; 0xa40 <__mulsf3x>
     94a:	fe 01       	movw	r30, r28
     94c:	e8 94       	clt
     94e:	a5 91       	lpm	r26, Z+
     950:	25 91       	lpm	r18, Z+
     952:	35 91       	lpm	r19, Z+
     954:	45 91       	lpm	r20, Z+
     956:	55 91       	lpm	r21, Z+
     958:	a6 f3       	brts	.-24     	; 0x942 <__fp_powser+0x16>
     95a:	ef 01       	movw	r28, r30
     95c:	0e 94 96 05 	call	0xb2c	; 0xb2c <__addsf3x>
     960:	fe 01       	movw	r30, r28
     962:	97 01       	movw	r18, r14
     964:	a8 01       	movw	r20, r16
     966:	da 94       	dec	r13
     968:	69 f7       	brne	.-38     	; 0x944 <__fp_powser+0x18>
     96a:	df 90       	pop	r13
     96c:	ef 90       	pop	r14
     96e:	ff 90       	pop	r15
     970:	0f 91       	pop	r16
     972:	1f 91       	pop	r17
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	08 95       	ret

0000097a <__fp_pscA>:
     97a:	00 24       	eor	r0, r0
     97c:	0a 94       	dec	r0
     97e:	16 16       	cp	r1, r22
     980:	17 06       	cpc	r1, r23
     982:	18 06       	cpc	r1, r24
     984:	09 06       	cpc	r0, r25
     986:	08 95       	ret

00000988 <__fp_pscB>:
     988:	00 24       	eor	r0, r0
     98a:	0a 94       	dec	r0
     98c:	12 16       	cp	r1, r18
     98e:	13 06       	cpc	r1, r19
     990:	14 06       	cpc	r1, r20
     992:	05 06       	cpc	r0, r21
     994:	08 95       	ret

00000996 <__fp_round>:
     996:	09 2e       	mov	r0, r25
     998:	03 94       	inc	r0
     99a:	00 0c       	add	r0, r0
     99c:	11 f4       	brne	.+4      	; 0x9a2 <__fp_round+0xc>
     99e:	88 23       	and	r24, r24
     9a0:	52 f0       	brmi	.+20     	; 0x9b6 <__fp_round+0x20>
     9a2:	bb 0f       	add	r27, r27
     9a4:	40 f4       	brcc	.+16     	; 0x9b6 <__fp_round+0x20>
     9a6:	bf 2b       	or	r27, r31
     9a8:	11 f4       	brne	.+4      	; 0x9ae <__fp_round+0x18>
     9aa:	60 ff       	sbrs	r22, 0
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__fp_round+0x20>
     9ae:	6f 5f       	subi	r22, 0xFF	; 255
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	8f 4f       	sbci	r24, 0xFF	; 255
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	08 95       	ret

000009b8 <__fp_split3>:
     9b8:	57 fd       	sbrc	r21, 7
     9ba:	90 58       	subi	r25, 0x80	; 128
     9bc:	44 0f       	add	r20, r20
     9be:	55 1f       	adc	r21, r21
     9c0:	59 f0       	breq	.+22     	; 0x9d8 <__fp_splitA+0x10>
     9c2:	5f 3f       	cpi	r21, 0xFF	; 255
     9c4:	71 f0       	breq	.+28     	; 0x9e2 <__fp_splitA+0x1a>
     9c6:	47 95       	ror	r20

000009c8 <__fp_splitA>:
     9c8:	88 0f       	add	r24, r24
     9ca:	97 fb       	bst	r25, 7
     9cc:	99 1f       	adc	r25, r25
     9ce:	61 f0       	breq	.+24     	; 0x9e8 <__fp_splitA+0x20>
     9d0:	9f 3f       	cpi	r25, 0xFF	; 255
     9d2:	79 f0       	breq	.+30     	; 0x9f2 <__fp_splitA+0x2a>
     9d4:	87 95       	ror	r24
     9d6:	08 95       	ret
     9d8:	12 16       	cp	r1, r18
     9da:	13 06       	cpc	r1, r19
     9dc:	14 06       	cpc	r1, r20
     9de:	55 1f       	adc	r21, r21
     9e0:	f2 cf       	rjmp	.-28     	; 0x9c6 <__fp_split3+0xe>
     9e2:	46 95       	lsr	r20
     9e4:	f1 df       	rcall	.-30     	; 0x9c8 <__fp_splitA>
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <__fp_splitA+0x30>
     9e8:	16 16       	cp	r1, r22
     9ea:	17 06       	cpc	r1, r23
     9ec:	18 06       	cpc	r1, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	f1 cf       	rjmp	.-30     	; 0x9d4 <__fp_splitA+0xc>
     9f2:	86 95       	lsr	r24
     9f4:	71 05       	cpc	r23, r1
     9f6:	61 05       	cpc	r22, r1
     9f8:	08 94       	sec
     9fa:	08 95       	ret

000009fc <__fp_zero>:
     9fc:	e8 94       	clt

000009fe <__fp_szero>:
     9fe:	bb 27       	eor	r27, r27
     a00:	66 27       	eor	r22, r22
     a02:	77 27       	eor	r23, r23
     a04:	cb 01       	movw	r24, r22
     a06:	97 f9       	bld	r25, 7
     a08:	08 95       	ret

00000a0a <inverse>:
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	80 e8       	ldi	r24, 0x80	; 128
     a14:	9f e3       	ldi	r25, 0x3F	; 63
     a16:	0c 94 a8 03 	jmp	0x750	; 0x750 <__divsf3>

00000a1a <__mulsf3>:
     a1a:	0e 94 20 05 	call	0xa40	; 0xa40 <__mulsf3x>
     a1e:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_round>
     a22:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_pscA>
     a26:	38 f0       	brcs	.+14     	; 0xa36 <__mulsf3+0x1c>
     a28:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_pscB>
     a2c:	20 f0       	brcs	.+8      	; 0xa36 <__mulsf3+0x1c>
     a2e:	95 23       	and	r25, r21
     a30:	11 f0       	breq	.+4      	; 0xa36 <__mulsf3+0x1c>
     a32:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>
     a36:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_nan>
     a3a:	11 24       	eor	r1, r1
     a3c:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_szero>

00000a40 <__mulsf3x>:
     a40:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_split3>
     a44:	70 f3       	brcs	.-36     	; 0xa22 <__mulsf3+0x8>

00000a46 <__mulsf3_pse>:
     a46:	95 9f       	mul	r25, r21
     a48:	c1 f3       	breq	.-16     	; 0xa3a <__mulsf3+0x20>
     a4a:	95 0f       	add	r25, r21
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	55 1f       	adc	r21, r21
     a50:	62 9f       	mul	r22, r18
     a52:	f0 01       	movw	r30, r0
     a54:	72 9f       	mul	r23, r18
     a56:	bb 27       	eor	r27, r27
     a58:	f0 0d       	add	r31, r0
     a5a:	b1 1d       	adc	r27, r1
     a5c:	63 9f       	mul	r22, r19
     a5e:	aa 27       	eor	r26, r26
     a60:	f0 0d       	add	r31, r0
     a62:	b1 1d       	adc	r27, r1
     a64:	aa 1f       	adc	r26, r26
     a66:	64 9f       	mul	r22, r20
     a68:	66 27       	eor	r22, r22
     a6a:	b0 0d       	add	r27, r0
     a6c:	a1 1d       	adc	r26, r1
     a6e:	66 1f       	adc	r22, r22
     a70:	82 9f       	mul	r24, r18
     a72:	22 27       	eor	r18, r18
     a74:	b0 0d       	add	r27, r0
     a76:	a1 1d       	adc	r26, r1
     a78:	62 1f       	adc	r22, r18
     a7a:	73 9f       	mul	r23, r19
     a7c:	b0 0d       	add	r27, r0
     a7e:	a1 1d       	adc	r26, r1
     a80:	62 1f       	adc	r22, r18
     a82:	83 9f       	mul	r24, r19
     a84:	a0 0d       	add	r26, r0
     a86:	61 1d       	adc	r22, r1
     a88:	22 1f       	adc	r18, r18
     a8a:	74 9f       	mul	r23, r20
     a8c:	33 27       	eor	r19, r19
     a8e:	a0 0d       	add	r26, r0
     a90:	61 1d       	adc	r22, r1
     a92:	23 1f       	adc	r18, r19
     a94:	84 9f       	mul	r24, r20
     a96:	60 0d       	add	r22, r0
     a98:	21 1d       	adc	r18, r1
     a9a:	82 2f       	mov	r24, r18
     a9c:	76 2f       	mov	r23, r22
     a9e:	6a 2f       	mov	r22, r26
     aa0:	11 24       	eor	r1, r1
     aa2:	9f 57       	subi	r25, 0x7F	; 127
     aa4:	50 40       	sbci	r21, 0x00	; 0
     aa6:	9a f0       	brmi	.+38     	; 0xace <__mulsf3_pse+0x88>
     aa8:	f1 f0       	breq	.+60     	; 0xae6 <__mulsf3_pse+0xa0>
     aaa:	88 23       	and	r24, r24
     aac:	4a f0       	brmi	.+18     	; 0xac0 <__mulsf3_pse+0x7a>
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	bb 1f       	adc	r27, r27
     ab4:	66 1f       	adc	r22, r22
     ab6:	77 1f       	adc	r23, r23
     ab8:	88 1f       	adc	r24, r24
     aba:	91 50       	subi	r25, 0x01	; 1
     abc:	50 40       	sbci	r21, 0x00	; 0
     abe:	a9 f7       	brne	.-22     	; 0xaaa <__mulsf3_pse+0x64>
     ac0:	9e 3f       	cpi	r25, 0xFE	; 254
     ac2:	51 05       	cpc	r21, r1
     ac4:	80 f0       	brcs	.+32     	; 0xae6 <__mulsf3_pse+0xa0>
     ac6:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>
     aca:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_szero>
     ace:	5f 3f       	cpi	r21, 0xFF	; 255
     ad0:	e4 f3       	brlt	.-8      	; 0xaca <__mulsf3_pse+0x84>
     ad2:	98 3e       	cpi	r25, 0xE8	; 232
     ad4:	d4 f3       	brlt	.-12     	; 0xaca <__mulsf3_pse+0x84>
     ad6:	86 95       	lsr	r24
     ad8:	77 95       	ror	r23
     ada:	67 95       	ror	r22
     adc:	b7 95       	ror	r27
     ade:	f7 95       	ror	r31
     ae0:	e7 95       	ror	r30
     ae2:	9f 5f       	subi	r25, 0xFF	; 255
     ae4:	c1 f7       	brne	.-16     	; 0xad6 <__mulsf3_pse+0x90>
     ae6:	fe 2b       	or	r31, r30
     ae8:	88 0f       	add	r24, r24
     aea:	91 1d       	adc	r25, r1
     aec:	96 95       	lsr	r25
     aee:	87 95       	ror	r24
     af0:	97 f9       	bld	r25, 7
     af2:	08 95       	ret

00000af4 <square>:
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__mulsf3>

00000afc <__subsf3>:
     afc:	50 58       	subi	r21, 0x80	; 128

00000afe <__addsf3>:
     afe:	bb 27       	eor	r27, r27
     b00:	aa 27       	eor	r26, r26
     b02:	0e 94 96 05 	call	0xb2c	; 0xb2c <__addsf3x>
     b06:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_round>
     b0a:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_pscA>
     b0e:	38 f0       	brcs	.+14     	; 0xb1e <__addsf3+0x20>
     b10:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_pscB>
     b14:	20 f0       	brcs	.+8      	; 0xb1e <__addsf3+0x20>
     b16:	39 f4       	brne	.+14     	; 0xb26 <__addsf3+0x28>
     b18:	9f 3f       	cpi	r25, 0xFF	; 255
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__addsf3+0x24>
     b1c:	26 f4       	brtc	.+8      	; 0xb26 <__addsf3+0x28>
     b1e:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_nan>
     b22:	0e f4       	brtc	.+2      	; 0xb26 <__addsf3+0x28>
     b24:	e0 95       	com	r30
     b26:	e7 fb       	bst	r30, 7
     b28:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>

00000b2c <__addsf3x>:
     b2c:	e9 2f       	mov	r30, r25
     b2e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_split3>
     b32:	58 f3       	brcs	.-42     	; 0xb0a <__addsf3+0xc>
     b34:	ba 17       	cp	r27, r26
     b36:	62 07       	cpc	r22, r18
     b38:	73 07       	cpc	r23, r19
     b3a:	84 07       	cpc	r24, r20
     b3c:	95 07       	cpc	r25, r21
     b3e:	20 f0       	brcs	.+8      	; 0xb48 <__addsf3x+0x1c>
     b40:	79 f4       	brne	.+30     	; 0xb60 <__addsf3x+0x34>
     b42:	a6 f5       	brtc	.+104    	; 0xbac <__addsf3x+0x80>
     b44:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_zero>
     b48:	0e f4       	brtc	.+2      	; 0xb4c <__addsf3x+0x20>
     b4a:	e0 95       	com	r30
     b4c:	0b 2e       	mov	r0, r27
     b4e:	ba 2f       	mov	r27, r26
     b50:	a0 2d       	mov	r26, r0
     b52:	0b 01       	movw	r0, r22
     b54:	b9 01       	movw	r22, r18
     b56:	90 01       	movw	r18, r0
     b58:	0c 01       	movw	r0, r24
     b5a:	ca 01       	movw	r24, r20
     b5c:	a0 01       	movw	r20, r0
     b5e:	11 24       	eor	r1, r1
     b60:	ff 27       	eor	r31, r31
     b62:	59 1b       	sub	r21, r25
     b64:	99 f0       	breq	.+38     	; 0xb8c <__addsf3x+0x60>
     b66:	59 3f       	cpi	r21, 0xF9	; 249
     b68:	50 f4       	brcc	.+20     	; 0xb7e <__addsf3x+0x52>
     b6a:	50 3e       	cpi	r21, 0xE0	; 224
     b6c:	68 f1       	brcs	.+90     	; 0xbc8 <__addsf3x+0x9c>
     b6e:	1a 16       	cp	r1, r26
     b70:	f0 40       	sbci	r31, 0x00	; 0
     b72:	a2 2f       	mov	r26, r18
     b74:	23 2f       	mov	r18, r19
     b76:	34 2f       	mov	r19, r20
     b78:	44 27       	eor	r20, r20
     b7a:	58 5f       	subi	r21, 0xF8	; 248
     b7c:	f3 cf       	rjmp	.-26     	; 0xb64 <__addsf3x+0x38>
     b7e:	46 95       	lsr	r20
     b80:	37 95       	ror	r19
     b82:	27 95       	ror	r18
     b84:	a7 95       	ror	r26
     b86:	f0 40       	sbci	r31, 0x00	; 0
     b88:	53 95       	inc	r21
     b8a:	c9 f7       	brne	.-14     	; 0xb7e <__addsf3x+0x52>
     b8c:	7e f4       	brtc	.+30     	; 0xbac <__addsf3x+0x80>
     b8e:	1f 16       	cp	r1, r31
     b90:	ba 0b       	sbc	r27, r26
     b92:	62 0b       	sbc	r22, r18
     b94:	73 0b       	sbc	r23, r19
     b96:	84 0b       	sbc	r24, r20
     b98:	ba f0       	brmi	.+46     	; 0xbc8 <__addsf3x+0x9c>
     b9a:	91 50       	subi	r25, 0x01	; 1
     b9c:	a1 f0       	breq	.+40     	; 0xbc6 <__addsf3x+0x9a>
     b9e:	ff 0f       	add	r31, r31
     ba0:	bb 1f       	adc	r27, r27
     ba2:	66 1f       	adc	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	c2 f7       	brpl	.-16     	; 0xb9a <__addsf3x+0x6e>
     baa:	0e c0       	rjmp	.+28     	; 0xbc8 <__addsf3x+0x9c>
     bac:	ba 0f       	add	r27, r26
     bae:	62 1f       	adc	r22, r18
     bb0:	73 1f       	adc	r23, r19
     bb2:	84 1f       	adc	r24, r20
     bb4:	48 f4       	brcc	.+18     	; 0xbc8 <__addsf3x+0x9c>
     bb6:	87 95       	ror	r24
     bb8:	77 95       	ror	r23
     bba:	67 95       	ror	r22
     bbc:	b7 95       	ror	r27
     bbe:	f7 95       	ror	r31
     bc0:	9e 3f       	cpi	r25, 0xFE	; 254
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <__addsf3x+0x9a>
     bc4:	b0 cf       	rjmp	.-160    	; 0xb26 <__addsf3+0x28>
     bc6:	93 95       	inc	r25
     bc8:	88 0f       	add	r24, r24
     bca:	08 f0       	brcs	.+2      	; 0xbce <__addsf3x+0xa2>
     bcc:	99 27       	eor	r25, r25
     bce:	ee 0f       	add	r30, r30
     bd0:	97 95       	ror	r25
     bd2:	87 95       	ror	r24
     bd4:	08 95       	ret

00000bd6 <__divmodhi4>:
     bd6:	97 fb       	bst	r25, 7
     bd8:	07 2e       	mov	r0, r23
     bda:	16 f4       	brtc	.+4      	; 0xbe0 <__divmodhi4+0xa>
     bdc:	00 94       	com	r0
     bde:	07 d0       	rcall	.+14     	; 0xbee <__divmodhi4_neg1>
     be0:	77 fd       	sbrc	r23, 7
     be2:	09 d0       	rcall	.+18     	; 0xbf6 <__divmodhi4_neg2>
     be4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__udivmodhi4>
     be8:	07 fc       	sbrc	r0, 7
     bea:	05 d0       	rcall	.+10     	; 0xbf6 <__divmodhi4_neg2>
     bec:	3e f4       	brtc	.+14     	; 0xbfc <__divmodhi4_exit>

00000bee <__divmodhi4_neg1>:
     bee:	90 95       	com	r25
     bf0:	81 95       	neg	r24
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	08 95       	ret

00000bf6 <__divmodhi4_neg2>:
     bf6:	70 95       	com	r23
     bf8:	61 95       	neg	r22
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255

00000bfc <__divmodhi4_exit>:
     bfc:	08 95       	ret

00000bfe <__udivmodhi4>:
     bfe:	aa 1b       	sub	r26, r26
     c00:	bb 1b       	sub	r27, r27
     c02:	51 e1       	ldi	r21, 0x11	; 17
     c04:	07 c0       	rjmp	.+14     	; 0xc14 <__udivmodhi4_ep>

00000c06 <__udivmodhi4_loop>:
     c06:	aa 1f       	adc	r26, r26
     c08:	bb 1f       	adc	r27, r27
     c0a:	a6 17       	cp	r26, r22
     c0c:	b7 07       	cpc	r27, r23
     c0e:	10 f0       	brcs	.+4      	; 0xc14 <__udivmodhi4_ep>
     c10:	a6 1b       	sub	r26, r22
     c12:	b7 0b       	sbc	r27, r23

00000c14 <__udivmodhi4_ep>:
     c14:	88 1f       	adc	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	5a 95       	dec	r21
     c1a:	a9 f7       	brne	.-22     	; 0xc06 <__udivmodhi4_loop>
     c1c:	80 95       	com	r24
     c1e:	90 95       	com	r25
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	08 95       	ret

00000c26 <do_rand>:
     c26:	8f 92       	push	r8
     c28:	9f 92       	push	r9
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ec 01       	movw	r28, r24
     c3c:	68 81       	ld	r22, Y
     c3e:	79 81       	ldd	r23, Y+1	; 0x01
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	61 15       	cp	r22, r1
     c46:	71 05       	cpc	r23, r1
     c48:	81 05       	cpc	r24, r1
     c4a:	91 05       	cpc	r25, r1
     c4c:	21 f4       	brne	.+8      	; 0xc56 <do_rand+0x30>
     c4e:	64 e2       	ldi	r22, 0x24	; 36
     c50:	79 ed       	ldi	r23, 0xD9	; 217
     c52:	8b e5       	ldi	r24, 0x5B	; 91
     c54:	97 e0       	ldi	r25, 0x07	; 7
     c56:	2d e1       	ldi	r18, 0x1D	; 29
     c58:	33 ef       	ldi	r19, 0xF3	; 243
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	0e 94 a5 0a 	call	0x154a	; 0x154a <__divmodsi4>
     c62:	49 01       	movw	r8, r18
     c64:	5a 01       	movw	r10, r20
     c66:	9b 01       	movw	r18, r22
     c68:	ac 01       	movw	r20, r24
     c6a:	a7 ea       	ldi	r26, 0xA7	; 167
     c6c:	b1 e4       	ldi	r27, 0x41	; 65
     c6e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__muluhisi3>
     c72:	6b 01       	movw	r12, r22
     c74:	7c 01       	movw	r14, r24
     c76:	ac ee       	ldi	r26, 0xEC	; 236
     c78:	b4 ef       	ldi	r27, 0xF4	; 244
     c7a:	a5 01       	movw	r20, r10
     c7c:	94 01       	movw	r18, r8
     c7e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__mulohisi3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	8c 0d       	add	r24, r12
     c88:	9d 1d       	adc	r25, r13
     c8a:	ae 1d       	adc	r26, r14
     c8c:	bf 1d       	adc	r27, r15
     c8e:	b7 ff       	sbrs	r27, 7
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <do_rand+0x72>
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	a1 09       	sbc	r26, r1
     c96:	b0 48       	sbci	r27, 0x80	; 128
     c98:	88 83       	st	Y, r24
     c9a:	99 83       	std	Y+1, r25	; 0x01
     c9c:	aa 83       	std	Y+2, r26	; 0x02
     c9e:	bb 83       	std	Y+3, r27	; 0x03
     ca0:	9f 77       	andi	r25, 0x7F	; 127
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	af 90       	pop	r10
     cb2:	9f 90       	pop	r9
     cb4:	8f 90       	pop	r8
     cb6:	08 95       	ret

00000cb8 <rand_r>:
     cb8:	0e 94 13 06 	call	0xc26	; 0xc26 <do_rand>
     cbc:	08 95       	ret

00000cbe <rand>:
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 13 06 	call	0xc26	; 0xc26 <do_rand>
     cc6:	08 95       	ret

00000cc8 <srand>:
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     cd0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     cd4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     cd8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     cdc:	08 95       	ret

00000cde <fdevopen>:
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	31 f4       	brne	.+12     	; 0xcf6 <fdevopen+0x18>
     cea:	61 15       	cp	r22, r1
     cec:	71 05       	cpc	r23, r1
     cee:	19 f4       	brne	.+6      	; 0xcf6 <fdevopen+0x18>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	3a c0       	rjmp	.+116    	; 0xd6a <fdevopen+0x8c>
     cf6:	8b 01       	movw	r16, r22
     cf8:	ec 01       	movw	r28, r24
     cfa:	6e e0       	ldi	r22, 0x0E	; 14
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 b1 08 	call	0x1162	; 0x1162 <calloc>
     d06:	fc 01       	movw	r30, r24
     d08:	89 2b       	or	r24, r25
     d0a:	91 f3       	breq	.-28     	; 0xcf0 <fdevopen+0x12>
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	83 83       	std	Z+3, r24	; 0x03
     d10:	01 15       	cp	r16, r1
     d12:	11 05       	cpc	r17, r1
     d14:	71 f0       	breq	.+28     	; 0xd32 <fdevopen+0x54>
     d16:	13 87       	std	Z+11, r17	; 0x0b
     d18:	02 87       	std	Z+10, r16	; 0x0a
     d1a:	81 e8       	ldi	r24, 0x81	; 129
     d1c:	83 83       	std	Z+3, r24	; 0x03
     d1e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__iob>
     d22:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__iob+0x1>
     d26:	89 2b       	or	r24, r25
     d28:	21 f4       	brne	.+8      	; 0xd32 <fdevopen+0x54>
     d2a:	f0 93 d5 02 	sts	0x02D5, r31	; 0x8002d5 <__iob+0x1>
     d2e:	e0 93 d4 02 	sts	0x02D4, r30	; 0x8002d4 <__iob>
     d32:	20 97       	sbiw	r28, 0x00	; 0
     d34:	c9 f0       	breq	.+50     	; 0xd68 <fdevopen+0x8a>
     d36:	d1 87       	std	Z+9, r29	; 0x09
     d38:	c0 87       	std	Z+8, r28	; 0x08
     d3a:	83 81       	ldd	r24, Z+3	; 0x03
     d3c:	82 60       	ori	r24, 0x02	; 2
     d3e:	83 83       	std	Z+3, r24	; 0x03
     d40:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__iob+0x2>
     d44:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__iob+0x3>
     d48:	89 2b       	or	r24, r25
     d4a:	71 f4       	brne	.+28     	; 0xd68 <fdevopen+0x8a>
     d4c:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__iob+0x3>
     d50:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__iob+0x2>
     d54:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__iob+0x4>
     d58:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <__iob+0x5>
     d5c:	89 2b       	or	r24, r25
     d5e:	21 f4       	brne	.+8      	; 0xd68 <fdevopen+0x8a>
     d60:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <__iob+0x5>
     d64:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <__iob+0x4>
     d68:	cf 01       	movw	r24, r30
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <printf>:
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e0 ec       	ldi	r30, 0xC0	; 192
     d7a:	f6 e0       	ldi	r31, 0x06	; 6
     d7c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__prologue_saves__+0x20>
     d80:	ae 01       	movw	r20, r28
     d82:	4b 5f       	subi	r20, 0xFB	; 251
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	fa 01       	movw	r30, r20
     d88:	61 91       	ld	r22, Z+
     d8a:	71 91       	ld	r23, Z+
     d8c:	af 01       	movw	r20, r30
     d8e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__iob+0x2>
     d92:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__iob+0x3>
     d96:	0e 94 d0 06 	call	0xda0	; 0xda0 <vfprintf>
     d9a:	e2 e0       	ldi	r30, 0x02	; 2
     d9c:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__epilogue_restores__+0x20>

00000da0 <vfprintf>:
     da0:	ab e0       	ldi	r26, 0x0B	; 11
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e6 ed       	ldi	r30, 0xD6	; 214
     da6:	f6 e0       	ldi	r31, 0x06	; 6
     da8:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__prologue_saves__>
     dac:	6c 01       	movw	r12, r24
     dae:	7b 01       	movw	r14, r22
     db0:	8a 01       	movw	r16, r20
     db2:	fc 01       	movw	r30, r24
     db4:	17 82       	std	Z+7, r1	; 0x07
     db6:	16 82       	std	Z+6, r1	; 0x06
     db8:	83 81       	ldd	r24, Z+3	; 0x03
     dba:	81 ff       	sbrs	r24, 1
     dbc:	cc c1       	rjmp	.+920    	; 0x1156 <vfprintf+0x3b6>
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	3c 01       	movw	r6, r24
     dc4:	f6 01       	movw	r30, r12
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	f7 01       	movw	r30, r14
     dca:	93 fd       	sbrc	r25, 3
     dcc:	85 91       	lpm	r24, Z+
     dce:	93 ff       	sbrs	r25, 3
     dd0:	81 91       	ld	r24, Z+
     dd2:	7f 01       	movw	r14, r30
     dd4:	88 23       	and	r24, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <vfprintf+0x3a>
     dd8:	ba c1       	rjmp	.+884    	; 0x114e <vfprintf+0x3ae>
     dda:	85 32       	cpi	r24, 0x25	; 37
     ddc:	39 f4       	brne	.+14     	; 0xdec <vfprintf+0x4c>
     dde:	93 fd       	sbrc	r25, 3
     de0:	85 91       	lpm	r24, Z+
     de2:	93 ff       	sbrs	r25, 3
     de4:	81 91       	ld	r24, Z+
     de6:	7f 01       	movw	r14, r30
     de8:	85 32       	cpi	r24, 0x25	; 37
     dea:	29 f4       	brne	.+10     	; 0xdf6 <vfprintf+0x56>
     dec:	b6 01       	movw	r22, r12
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
     df4:	e7 cf       	rjmp	.-50     	; 0xdc4 <vfprintf+0x24>
     df6:	91 2c       	mov	r9, r1
     df8:	21 2c       	mov	r2, r1
     dfa:	31 2c       	mov	r3, r1
     dfc:	ff e1       	ldi	r31, 0x1F	; 31
     dfe:	f3 15       	cp	r31, r3
     e00:	d8 f0       	brcs	.+54     	; 0xe38 <vfprintf+0x98>
     e02:	8b 32       	cpi	r24, 0x2B	; 43
     e04:	79 f0       	breq	.+30     	; 0xe24 <vfprintf+0x84>
     e06:	38 f4       	brcc	.+14     	; 0xe16 <vfprintf+0x76>
     e08:	80 32       	cpi	r24, 0x20	; 32
     e0a:	79 f0       	breq	.+30     	; 0xe2a <vfprintf+0x8a>
     e0c:	83 32       	cpi	r24, 0x23	; 35
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <vfprintf+0x98>
     e10:	23 2d       	mov	r18, r3
     e12:	20 61       	ori	r18, 0x10	; 16
     e14:	1d c0       	rjmp	.+58     	; 0xe50 <vfprintf+0xb0>
     e16:	8d 32       	cpi	r24, 0x2D	; 45
     e18:	61 f0       	breq	.+24     	; 0xe32 <vfprintf+0x92>
     e1a:	80 33       	cpi	r24, 0x30	; 48
     e1c:	69 f4       	brne	.+26     	; 0xe38 <vfprintf+0x98>
     e1e:	23 2d       	mov	r18, r3
     e20:	21 60       	ori	r18, 0x01	; 1
     e22:	16 c0       	rjmp	.+44     	; 0xe50 <vfprintf+0xb0>
     e24:	83 2d       	mov	r24, r3
     e26:	82 60       	ori	r24, 0x02	; 2
     e28:	38 2e       	mov	r3, r24
     e2a:	e3 2d       	mov	r30, r3
     e2c:	e4 60       	ori	r30, 0x04	; 4
     e2e:	3e 2e       	mov	r3, r30
     e30:	2a c0       	rjmp	.+84     	; 0xe86 <vfprintf+0xe6>
     e32:	f3 2d       	mov	r31, r3
     e34:	f8 60       	ori	r31, 0x08	; 8
     e36:	1d c0       	rjmp	.+58     	; 0xe72 <vfprintf+0xd2>
     e38:	37 fc       	sbrc	r3, 7
     e3a:	2d c0       	rjmp	.+90     	; 0xe96 <vfprintf+0xf6>
     e3c:	20 ed       	ldi	r18, 0xD0	; 208
     e3e:	28 0f       	add	r18, r24
     e40:	2a 30       	cpi	r18, 0x0A	; 10
     e42:	40 f0       	brcs	.+16     	; 0xe54 <vfprintf+0xb4>
     e44:	8e 32       	cpi	r24, 0x2E	; 46
     e46:	b9 f4       	brne	.+46     	; 0xe76 <vfprintf+0xd6>
     e48:	36 fc       	sbrc	r3, 6
     e4a:	81 c1       	rjmp	.+770    	; 0x114e <vfprintf+0x3ae>
     e4c:	23 2d       	mov	r18, r3
     e4e:	20 64       	ori	r18, 0x40	; 64
     e50:	32 2e       	mov	r3, r18
     e52:	19 c0       	rjmp	.+50     	; 0xe86 <vfprintf+0xe6>
     e54:	36 fe       	sbrs	r3, 6
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <vfprintf+0xc4>
     e58:	8a e0       	ldi	r24, 0x0A	; 10
     e5a:	98 9e       	mul	r9, r24
     e5c:	20 0d       	add	r18, r0
     e5e:	11 24       	eor	r1, r1
     e60:	92 2e       	mov	r9, r18
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <vfprintf+0xe6>
     e64:	ea e0       	ldi	r30, 0x0A	; 10
     e66:	2e 9e       	mul	r2, r30
     e68:	20 0d       	add	r18, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	22 2e       	mov	r2, r18
     e6e:	f3 2d       	mov	r31, r3
     e70:	f0 62       	ori	r31, 0x20	; 32
     e72:	3f 2e       	mov	r3, r31
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <vfprintf+0xe6>
     e76:	8c 36       	cpi	r24, 0x6C	; 108
     e78:	21 f4       	brne	.+8      	; 0xe82 <vfprintf+0xe2>
     e7a:	83 2d       	mov	r24, r3
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	38 2e       	mov	r3, r24
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <vfprintf+0xe6>
     e82:	88 36       	cpi	r24, 0x68	; 104
     e84:	41 f4       	brne	.+16     	; 0xe96 <vfprintf+0xf6>
     e86:	f7 01       	movw	r30, r14
     e88:	93 fd       	sbrc	r25, 3
     e8a:	85 91       	lpm	r24, Z+
     e8c:	93 ff       	sbrs	r25, 3
     e8e:	81 91       	ld	r24, Z+
     e90:	7f 01       	movw	r14, r30
     e92:	81 11       	cpse	r24, r1
     e94:	b3 cf       	rjmp	.-154    	; 0xdfc <vfprintf+0x5c>
     e96:	98 2f       	mov	r25, r24
     e98:	9f 7d       	andi	r25, 0xDF	; 223
     e9a:	95 54       	subi	r25, 0x45	; 69
     e9c:	93 30       	cpi	r25, 0x03	; 3
     e9e:	28 f4       	brcc	.+10     	; 0xeaa <vfprintf+0x10a>
     ea0:	0c 5f       	subi	r16, 0xFC	; 252
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	9f e3       	ldi	r25, 0x3F	; 63
     ea6:	99 83       	std	Y+1, r25	; 0x01
     ea8:	0d c0       	rjmp	.+26     	; 0xec4 <vfprintf+0x124>
     eaa:	83 36       	cpi	r24, 0x63	; 99
     eac:	31 f0       	breq	.+12     	; 0xeba <vfprintf+0x11a>
     eae:	83 37       	cpi	r24, 0x73	; 115
     eb0:	71 f0       	breq	.+28     	; 0xece <vfprintf+0x12e>
     eb2:	83 35       	cpi	r24, 0x53	; 83
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <vfprintf+0x118>
     eb6:	59 c0       	rjmp	.+178    	; 0xf6a <vfprintf+0x1ca>
     eb8:	21 c0       	rjmp	.+66     	; 0xefc <vfprintf+0x15c>
     eba:	f8 01       	movw	r30, r16
     ebc:	80 81       	ld	r24, Z
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	0e 5f       	subi	r16, 0xFE	; 254
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	88 24       	eor	r8, r8
     ec6:	83 94       	inc	r8
     ec8:	91 2c       	mov	r9, r1
     eca:	53 01       	movw	r10, r6
     ecc:	13 c0       	rjmp	.+38     	; 0xef4 <vfprintf+0x154>
     ece:	28 01       	movw	r4, r16
     ed0:	f2 e0       	ldi	r31, 0x02	; 2
     ed2:	4f 0e       	add	r4, r31
     ed4:	51 1c       	adc	r5, r1
     ed6:	f8 01       	movw	r30, r16
     ed8:	a0 80       	ld	r10, Z
     eda:	b1 80       	ldd	r11, Z+1	; 0x01
     edc:	36 fe       	sbrs	r3, 6
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <vfprintf+0x146>
     ee0:	69 2d       	mov	r22, r9
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <vfprintf+0x14a>
     ee6:	6f ef       	ldi	r22, 0xFF	; 255
     ee8:	7f ef       	ldi	r23, 0xFF	; 255
     eea:	c5 01       	movw	r24, r10
     eec:	0e 94 00 0a 	call	0x1400	; 0x1400 <strnlen>
     ef0:	4c 01       	movw	r8, r24
     ef2:	82 01       	movw	r16, r4
     ef4:	f3 2d       	mov	r31, r3
     ef6:	ff 77       	andi	r31, 0x7F	; 127
     ef8:	3f 2e       	mov	r3, r31
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <vfprintf+0x188>
     efc:	28 01       	movw	r4, r16
     efe:	22 e0       	ldi	r18, 0x02	; 2
     f00:	42 0e       	add	r4, r18
     f02:	51 1c       	adc	r5, r1
     f04:	f8 01       	movw	r30, r16
     f06:	a0 80       	ld	r10, Z
     f08:	b1 80       	ldd	r11, Z+1	; 0x01
     f0a:	36 fe       	sbrs	r3, 6
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <vfprintf+0x174>
     f0e:	69 2d       	mov	r22, r9
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <vfprintf+0x178>
     f14:	6f ef       	ldi	r22, 0xFF	; 255
     f16:	7f ef       	ldi	r23, 0xFF	; 255
     f18:	c5 01       	movw	r24, r10
     f1a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <strnlen_P>
     f1e:	4c 01       	movw	r8, r24
     f20:	f3 2d       	mov	r31, r3
     f22:	f0 68       	ori	r31, 0x80	; 128
     f24:	3f 2e       	mov	r3, r31
     f26:	82 01       	movw	r16, r4
     f28:	33 fc       	sbrc	r3, 3
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <vfprintf+0x1c2>
     f2c:	82 2d       	mov	r24, r2
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	88 16       	cp	r8, r24
     f32:	99 06       	cpc	r9, r25
     f34:	b0 f4       	brcc	.+44     	; 0xf62 <vfprintf+0x1c2>
     f36:	b6 01       	movw	r22, r12
     f38:	80 e2       	ldi	r24, 0x20	; 32
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
     f40:	2a 94       	dec	r2
     f42:	f4 cf       	rjmp	.-24     	; 0xf2c <vfprintf+0x18c>
     f44:	f5 01       	movw	r30, r10
     f46:	37 fc       	sbrc	r3, 7
     f48:	85 91       	lpm	r24, Z+
     f4a:	37 fe       	sbrs	r3, 7
     f4c:	81 91       	ld	r24, Z+
     f4e:	5f 01       	movw	r10, r30
     f50:	b6 01       	movw	r22, r12
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
     f58:	21 10       	cpse	r2, r1
     f5a:	2a 94       	dec	r2
     f5c:	21 e0       	ldi	r18, 0x01	; 1
     f5e:	82 1a       	sub	r8, r18
     f60:	91 08       	sbc	r9, r1
     f62:	81 14       	cp	r8, r1
     f64:	91 04       	cpc	r9, r1
     f66:	71 f7       	brne	.-36     	; 0xf44 <vfprintf+0x1a4>
     f68:	e8 c0       	rjmp	.+464    	; 0x113a <vfprintf+0x39a>
     f6a:	84 36       	cpi	r24, 0x64	; 100
     f6c:	11 f0       	breq	.+4      	; 0xf72 <vfprintf+0x1d2>
     f6e:	89 36       	cpi	r24, 0x69	; 105
     f70:	41 f5       	brne	.+80     	; 0xfc2 <vfprintf+0x222>
     f72:	f8 01       	movw	r30, r16
     f74:	37 fe       	sbrs	r3, 7
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <vfprintf+0x1e6>
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	0c 5f       	subi	r16, 0xFC	; 252
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	08 c0       	rjmp	.+16     	; 0xf96 <vfprintf+0x1f6>
     f86:	60 81       	ld	r22, Z
     f88:	71 81       	ldd	r23, Z+1	; 0x01
     f8a:	07 2e       	mov	r0, r23
     f8c:	00 0c       	add	r0, r0
     f8e:	88 0b       	sbc	r24, r24
     f90:	99 0b       	sbc	r25, r25
     f92:	0e 5f       	subi	r16, 0xFE	; 254
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	f3 2d       	mov	r31, r3
     f98:	ff 76       	andi	r31, 0x6F	; 111
     f9a:	3f 2e       	mov	r3, r31
     f9c:	97 ff       	sbrs	r25, 7
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <vfprintf+0x212>
     fa0:	90 95       	com	r25
     fa2:	80 95       	com	r24
     fa4:	70 95       	com	r23
     fa6:	61 95       	neg	r22
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	f0 68       	ori	r31, 0x80	; 128
     fb0:	3f 2e       	mov	r3, r31
     fb2:	2a e0       	ldi	r18, 0x0A	; 10
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	a3 01       	movw	r20, r6
     fb8:	0e 94 47 0a 	call	0x148e	; 0x148e <__ultoa_invert>
     fbc:	88 2e       	mov	r8, r24
     fbe:	86 18       	sub	r8, r6
     fc0:	45 c0       	rjmp	.+138    	; 0x104c <vfprintf+0x2ac>
     fc2:	85 37       	cpi	r24, 0x75	; 117
     fc4:	31 f4       	brne	.+12     	; 0xfd2 <vfprintf+0x232>
     fc6:	23 2d       	mov	r18, r3
     fc8:	2f 7e       	andi	r18, 0xEF	; 239
     fca:	b2 2e       	mov	r11, r18
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	25 c0       	rjmp	.+74     	; 0x101c <vfprintf+0x27c>
     fd2:	93 2d       	mov	r25, r3
     fd4:	99 7f       	andi	r25, 0xF9	; 249
     fd6:	b9 2e       	mov	r11, r25
     fd8:	8f 36       	cpi	r24, 0x6F	; 111
     fda:	c1 f0       	breq	.+48     	; 0x100c <vfprintf+0x26c>
     fdc:	18 f4       	brcc	.+6      	; 0xfe4 <vfprintf+0x244>
     fde:	88 35       	cpi	r24, 0x58	; 88
     fe0:	79 f0       	breq	.+30     	; 0x1000 <vfprintf+0x260>
     fe2:	b5 c0       	rjmp	.+362    	; 0x114e <vfprintf+0x3ae>
     fe4:	80 37       	cpi	r24, 0x70	; 112
     fe6:	19 f0       	breq	.+6      	; 0xfee <vfprintf+0x24e>
     fe8:	88 37       	cpi	r24, 0x78	; 120
     fea:	21 f0       	breq	.+8      	; 0xff4 <vfprintf+0x254>
     fec:	b0 c0       	rjmp	.+352    	; 0x114e <vfprintf+0x3ae>
     fee:	e9 2f       	mov	r30, r25
     ff0:	e0 61       	ori	r30, 0x10	; 16
     ff2:	be 2e       	mov	r11, r30
     ff4:	b4 fe       	sbrs	r11, 4
     ff6:	0d c0       	rjmp	.+26     	; 0x1012 <vfprintf+0x272>
     ff8:	fb 2d       	mov	r31, r11
     ffa:	f4 60       	ori	r31, 0x04	; 4
     ffc:	bf 2e       	mov	r11, r31
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <vfprintf+0x272>
    1000:	34 fe       	sbrs	r3, 4
    1002:	0a c0       	rjmp	.+20     	; 0x1018 <vfprintf+0x278>
    1004:	29 2f       	mov	r18, r25
    1006:	26 60       	ori	r18, 0x06	; 6
    1008:	b2 2e       	mov	r11, r18
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <vfprintf+0x278>
    100c:	28 e0       	ldi	r18, 0x08	; 8
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	05 c0       	rjmp	.+10     	; 0x101c <vfprintf+0x27c>
    1012:	20 e1       	ldi	r18, 0x10	; 16
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <vfprintf+0x27c>
    1018:	20 e1       	ldi	r18, 0x10	; 16
    101a:	32 e0       	ldi	r19, 0x02	; 2
    101c:	f8 01       	movw	r30, r16
    101e:	b7 fe       	sbrs	r11, 7
    1020:	07 c0       	rjmp	.+14     	; 0x1030 <vfprintf+0x290>
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	0c 5f       	subi	r16, 0xFC	; 252
    102c:	1f 4f       	sbci	r17, 0xFF	; 255
    102e:	06 c0       	rjmp	.+12     	; 0x103c <vfprintf+0x29c>
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 5f       	subi	r16, 0xFE	; 254
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
    103c:	a3 01       	movw	r20, r6
    103e:	0e 94 47 0a 	call	0x148e	; 0x148e <__ultoa_invert>
    1042:	88 2e       	mov	r8, r24
    1044:	86 18       	sub	r8, r6
    1046:	fb 2d       	mov	r31, r11
    1048:	ff 77       	andi	r31, 0x7F	; 127
    104a:	3f 2e       	mov	r3, r31
    104c:	36 fe       	sbrs	r3, 6
    104e:	0d c0       	rjmp	.+26     	; 0x106a <vfprintf+0x2ca>
    1050:	23 2d       	mov	r18, r3
    1052:	2e 7f       	andi	r18, 0xFE	; 254
    1054:	a2 2e       	mov	r10, r18
    1056:	89 14       	cp	r8, r9
    1058:	58 f4       	brcc	.+22     	; 0x1070 <vfprintf+0x2d0>
    105a:	34 fe       	sbrs	r3, 4
    105c:	0b c0       	rjmp	.+22     	; 0x1074 <vfprintf+0x2d4>
    105e:	32 fc       	sbrc	r3, 2
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <vfprintf+0x2d4>
    1062:	83 2d       	mov	r24, r3
    1064:	8e 7e       	andi	r24, 0xEE	; 238
    1066:	a8 2e       	mov	r10, r24
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <vfprintf+0x2d4>
    106a:	b8 2c       	mov	r11, r8
    106c:	a3 2c       	mov	r10, r3
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <vfprintf+0x2d6>
    1070:	b8 2c       	mov	r11, r8
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <vfprintf+0x2d6>
    1074:	b9 2c       	mov	r11, r9
    1076:	a4 fe       	sbrs	r10, 4
    1078:	0f c0       	rjmp	.+30     	; 0x1098 <vfprintf+0x2f8>
    107a:	fe 01       	movw	r30, r28
    107c:	e8 0d       	add	r30, r8
    107e:	f1 1d       	adc	r31, r1
    1080:	80 81       	ld	r24, Z
    1082:	80 33       	cpi	r24, 0x30	; 48
    1084:	21 f4       	brne	.+8      	; 0x108e <vfprintf+0x2ee>
    1086:	9a 2d       	mov	r25, r10
    1088:	99 7e       	andi	r25, 0xE9	; 233
    108a:	a9 2e       	mov	r10, r25
    108c:	09 c0       	rjmp	.+18     	; 0x10a0 <vfprintf+0x300>
    108e:	a2 fe       	sbrs	r10, 2
    1090:	06 c0       	rjmp	.+12     	; 0x109e <vfprintf+0x2fe>
    1092:	b3 94       	inc	r11
    1094:	b3 94       	inc	r11
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <vfprintf+0x300>
    1098:	8a 2d       	mov	r24, r10
    109a:	86 78       	andi	r24, 0x86	; 134
    109c:	09 f0       	breq	.+2      	; 0x10a0 <vfprintf+0x300>
    109e:	b3 94       	inc	r11
    10a0:	a3 fc       	sbrc	r10, 3
    10a2:	11 c0       	rjmp	.+34     	; 0x10c6 <vfprintf+0x326>
    10a4:	a0 fe       	sbrs	r10, 0
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <vfprintf+0x314>
    10a8:	b2 14       	cp	r11, r2
    10aa:	88 f4       	brcc	.+34     	; 0x10ce <vfprintf+0x32e>
    10ac:	28 0c       	add	r2, r8
    10ae:	92 2c       	mov	r9, r2
    10b0:	9b 18       	sub	r9, r11
    10b2:	0e c0       	rjmp	.+28     	; 0x10d0 <vfprintf+0x330>
    10b4:	b2 14       	cp	r11, r2
    10b6:	60 f4       	brcc	.+24     	; 0x10d0 <vfprintf+0x330>
    10b8:	b6 01       	movw	r22, r12
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    10c2:	b3 94       	inc	r11
    10c4:	f7 cf       	rjmp	.-18     	; 0x10b4 <vfprintf+0x314>
    10c6:	b2 14       	cp	r11, r2
    10c8:	18 f4       	brcc	.+6      	; 0x10d0 <vfprintf+0x330>
    10ca:	2b 18       	sub	r2, r11
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vfprintf+0x332>
    10ce:	98 2c       	mov	r9, r8
    10d0:	21 2c       	mov	r2, r1
    10d2:	a4 fe       	sbrs	r10, 4
    10d4:	10 c0       	rjmp	.+32     	; 0x10f6 <vfprintf+0x356>
    10d6:	b6 01       	movw	r22, r12
    10d8:	80 e3       	ldi	r24, 0x30	; 48
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    10e0:	a2 fe       	sbrs	r10, 2
    10e2:	17 c0       	rjmp	.+46     	; 0x1112 <vfprintf+0x372>
    10e4:	a1 fc       	sbrc	r10, 1
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <vfprintf+0x34e>
    10e8:	88 e7       	ldi	r24, 0x78	; 120
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <vfprintf+0x352>
    10ee:	88 e5       	ldi	r24, 0x58	; 88
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	b6 01       	movw	r22, r12
    10f4:	0c c0       	rjmp	.+24     	; 0x110e <vfprintf+0x36e>
    10f6:	8a 2d       	mov	r24, r10
    10f8:	86 78       	andi	r24, 0x86	; 134
    10fa:	59 f0       	breq	.+22     	; 0x1112 <vfprintf+0x372>
    10fc:	a1 fe       	sbrs	r10, 1
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfprintf+0x364>
    1100:	8b e2       	ldi	r24, 0x2B	; 43
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <vfprintf+0x366>
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	a7 fc       	sbrc	r10, 7
    1108:	8d e2       	ldi	r24, 0x2D	; 45
    110a:	b6 01       	movw	r22, r12
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    1112:	89 14       	cp	r8, r9
    1114:	38 f4       	brcc	.+14     	; 0x1124 <vfprintf+0x384>
    1116:	b6 01       	movw	r22, r12
    1118:	80 e3       	ldi	r24, 0x30	; 48
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    1120:	9a 94       	dec	r9
    1122:	f7 cf       	rjmp	.-18     	; 0x1112 <vfprintf+0x372>
    1124:	8a 94       	dec	r8
    1126:	f3 01       	movw	r30, r6
    1128:	e8 0d       	add	r30, r8
    112a:	f1 1d       	adc	r31, r1
    112c:	80 81       	ld	r24, Z
    112e:	b6 01       	movw	r22, r12
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    1136:	81 10       	cpse	r8, r1
    1138:	f5 cf       	rjmp	.-22     	; 0x1124 <vfprintf+0x384>
    113a:	22 20       	and	r2, r2
    113c:	09 f4       	brne	.+2      	; 0x1140 <vfprintf+0x3a0>
    113e:	42 ce       	rjmp	.-892    	; 0xdc4 <vfprintf+0x24>
    1140:	b6 01       	movw	r22, r12
    1142:	80 e2       	ldi	r24, 0x20	; 32
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    114a:	2a 94       	dec	r2
    114c:	f6 cf       	rjmp	.-20     	; 0x113a <vfprintf+0x39a>
    114e:	f6 01       	movw	r30, r12
    1150:	86 81       	ldd	r24, Z+6	; 0x06
    1152:	97 81       	ldd	r25, Z+7	; 0x07
    1154:	02 c0       	rjmp	.+4      	; 0x115a <vfprintf+0x3ba>
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	9f ef       	ldi	r25, 0xFF	; 255
    115a:	2b 96       	adiw	r28, 0x0b	; 11
    115c:	e2 e1       	ldi	r30, 0x12	; 18
    115e:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__epilogue_restores__>

00001162 <calloc>:
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	86 9f       	mul	r24, r22
    116c:	80 01       	movw	r16, r0
    116e:	87 9f       	mul	r24, r23
    1170:	10 0d       	add	r17, r0
    1172:	96 9f       	mul	r25, r22
    1174:	10 0d       	add	r17, r0
    1176:	11 24       	eor	r1, r1
    1178:	c8 01       	movw	r24, r16
    117a:	0e 94 cd 08 	call	0x119a	; 0x119a <malloc>
    117e:	ec 01       	movw	r28, r24
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	29 f0       	breq	.+10     	; 0x118e <calloc+0x2c>
    1184:	a8 01       	movw	r20, r16
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <memset>
    118e:	ce 01       	movw	r24, r28
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	08 95       	ret

0000119a <malloc>:
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	91 05       	cpc	r25, r1
    11a6:	10 f4       	brcc	.+4      	; 0x11ac <malloc+0x12>
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <__flp>
    11b0:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <__flp+0x1>
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	30 97       	sbiw	r30, 0x00	; 0
    11be:	19 f1       	breq	.+70     	; 0x1206 <malloc+0x6c>
    11c0:	40 81       	ld	r20, Z
    11c2:	51 81       	ldd	r21, Z+1	; 0x01
    11c4:	02 81       	ldd	r16, Z+2	; 0x02
    11c6:	13 81       	ldd	r17, Z+3	; 0x03
    11c8:	48 17       	cp	r20, r24
    11ca:	59 07       	cpc	r21, r25
    11cc:	c8 f0       	brcs	.+50     	; 0x1200 <malloc+0x66>
    11ce:	84 17       	cp	r24, r20
    11d0:	95 07       	cpc	r25, r21
    11d2:	69 f4       	brne	.+26     	; 0x11ee <malloc+0x54>
    11d4:	10 97       	sbiw	r26, 0x00	; 0
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <malloc+0x4a>
    11d8:	12 96       	adiw	r26, 0x02	; 2
    11da:	0c 93       	st	X, r16
    11dc:	12 97       	sbiw	r26, 0x02	; 2
    11de:	13 96       	adiw	r26, 0x03	; 3
    11e0:	1c 93       	st	X, r17
    11e2:	27 c0       	rjmp	.+78     	; 0x1232 <malloc+0x98>
    11e4:	00 93 dc 02 	sts	0x02DC, r16	; 0x8002dc <__flp>
    11e8:	10 93 dd 02 	sts	0x02DD, r17	; 0x8002dd <__flp+0x1>
    11ec:	22 c0       	rjmp	.+68     	; 0x1232 <malloc+0x98>
    11ee:	21 15       	cp	r18, r1
    11f0:	31 05       	cpc	r19, r1
    11f2:	19 f0       	breq	.+6      	; 0x11fa <malloc+0x60>
    11f4:	42 17       	cp	r20, r18
    11f6:	53 07       	cpc	r21, r19
    11f8:	18 f4       	brcc	.+6      	; 0x1200 <malloc+0x66>
    11fa:	9a 01       	movw	r18, r20
    11fc:	bd 01       	movw	r22, r26
    11fe:	ef 01       	movw	r28, r30
    1200:	df 01       	movw	r26, r30
    1202:	f8 01       	movw	r30, r16
    1204:	db cf       	rjmp	.-74     	; 0x11bc <malloc+0x22>
    1206:	21 15       	cp	r18, r1
    1208:	31 05       	cpc	r19, r1
    120a:	f9 f0       	breq	.+62     	; 0x124a <malloc+0xb0>
    120c:	28 1b       	sub	r18, r24
    120e:	39 0b       	sbc	r19, r25
    1210:	24 30       	cpi	r18, 0x04	; 4
    1212:	31 05       	cpc	r19, r1
    1214:	80 f4       	brcc	.+32     	; 0x1236 <malloc+0x9c>
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	9b 81       	ldd	r25, Y+3	; 0x03
    121a:	61 15       	cp	r22, r1
    121c:	71 05       	cpc	r23, r1
    121e:	21 f0       	breq	.+8      	; 0x1228 <malloc+0x8e>
    1220:	fb 01       	movw	r30, r22
    1222:	93 83       	std	Z+3, r25	; 0x03
    1224:	82 83       	std	Z+2, r24	; 0x02
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <malloc+0x96>
    1228:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <__flp+0x1>
    122c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__flp>
    1230:	fe 01       	movw	r30, r28
    1232:	32 96       	adiw	r30, 0x02	; 2
    1234:	44 c0       	rjmp	.+136    	; 0x12be <malloc+0x124>
    1236:	fe 01       	movw	r30, r28
    1238:	e2 0f       	add	r30, r18
    123a:	f3 1f       	adc	r31, r19
    123c:	81 93       	st	Z+, r24
    123e:	91 93       	st	Z+, r25
    1240:	22 50       	subi	r18, 0x02	; 2
    1242:	31 09       	sbc	r19, r1
    1244:	39 83       	std	Y+1, r19	; 0x01
    1246:	28 83       	st	Y, r18
    1248:	3a c0       	rjmp	.+116    	; 0x12be <malloc+0x124>
    124a:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <__brkval>
    124e:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <__brkval+0x1>
    1252:	23 2b       	or	r18, r19
    1254:	41 f4       	brne	.+16     	; 0x1266 <malloc+0xcc>
    1256:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    125a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    125e:	30 93 db 02 	sts	0x02DB, r19	; 0x8002db <__brkval+0x1>
    1262:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <__brkval>
    1266:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    126a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    126e:	21 15       	cp	r18, r1
    1270:	31 05       	cpc	r19, r1
    1272:	41 f4       	brne	.+16     	; 0x1284 <malloc+0xea>
    1274:	2d b7       	in	r18, 0x3d	; 61
    1276:	3e b7       	in	r19, 0x3e	; 62
    1278:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    127c:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    1280:	24 1b       	sub	r18, r20
    1282:	35 0b       	sbc	r19, r21
    1284:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <__brkval>
    1288:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <__brkval+0x1>
    128c:	e2 17       	cp	r30, r18
    128e:	f3 07       	cpc	r31, r19
    1290:	a0 f4       	brcc	.+40     	; 0x12ba <malloc+0x120>
    1292:	2e 1b       	sub	r18, r30
    1294:	3f 0b       	sbc	r19, r31
    1296:	28 17       	cp	r18, r24
    1298:	39 07       	cpc	r19, r25
    129a:	78 f0       	brcs	.+30     	; 0x12ba <malloc+0x120>
    129c:	ac 01       	movw	r20, r24
    129e:	4e 5f       	subi	r20, 0xFE	; 254
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	24 17       	cp	r18, r20
    12a4:	35 07       	cpc	r19, r21
    12a6:	48 f0       	brcs	.+18     	; 0x12ba <malloc+0x120>
    12a8:	4e 0f       	add	r20, r30
    12aa:	5f 1f       	adc	r21, r31
    12ac:	50 93 db 02 	sts	0x02DB, r21	; 0x8002db <__brkval+0x1>
    12b0:	40 93 da 02 	sts	0x02DA, r20	; 0x8002da <__brkval>
    12b4:	81 93       	st	Z+, r24
    12b6:	91 93       	st	Z+, r25
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <malloc+0x124>
    12ba:	e0 e0       	ldi	r30, 0x00	; 0
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	cf 01       	movw	r24, r30
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <free>:
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <free+0xa>
    12d2:	81 c0       	rjmp	.+258    	; 0x13d6 <free+0x10c>
    12d4:	fc 01       	movw	r30, r24
    12d6:	32 97       	sbiw	r30, 0x02	; 2
    12d8:	13 82       	std	Z+3, r1	; 0x03
    12da:	12 82       	std	Z+2, r1	; 0x02
    12dc:	a0 91 dc 02 	lds	r26, 0x02DC	; 0x8002dc <__flp>
    12e0:	b0 91 dd 02 	lds	r27, 0x02DD	; 0x8002dd <__flp+0x1>
    12e4:	10 97       	sbiw	r26, 0x00	; 0
    12e6:	81 f4       	brne	.+32     	; 0x1308 <free+0x3e>
    12e8:	20 81       	ld	r18, Z
    12ea:	31 81       	ldd	r19, Z+1	; 0x01
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <__brkval>
    12f4:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <__brkval+0x1>
    12f8:	28 17       	cp	r18, r24
    12fa:	39 07       	cpc	r19, r25
    12fc:	51 f5       	brne	.+84     	; 0x1352 <free+0x88>
    12fe:	f0 93 db 02 	sts	0x02DB, r31	; 0x8002db <__brkval+0x1>
    1302:	e0 93 da 02 	sts	0x02DA, r30	; 0x8002da <__brkval>
    1306:	67 c0       	rjmp	.+206    	; 0x13d6 <free+0x10c>
    1308:	ed 01       	movw	r28, r26
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	ce 17       	cp	r28, r30
    1310:	df 07       	cpc	r29, r31
    1312:	40 f4       	brcc	.+16     	; 0x1324 <free+0x5a>
    1314:	4a 81       	ldd	r20, Y+2	; 0x02
    1316:	5b 81       	ldd	r21, Y+3	; 0x03
    1318:	9e 01       	movw	r18, r28
    131a:	41 15       	cp	r20, r1
    131c:	51 05       	cpc	r21, r1
    131e:	f1 f0       	breq	.+60     	; 0x135c <free+0x92>
    1320:	ea 01       	movw	r28, r20
    1322:	f5 cf       	rjmp	.-22     	; 0x130e <free+0x44>
    1324:	d3 83       	std	Z+3, r29	; 0x03
    1326:	c2 83       	std	Z+2, r28	; 0x02
    1328:	40 81       	ld	r20, Z
    132a:	51 81       	ldd	r21, Z+1	; 0x01
    132c:	84 0f       	add	r24, r20
    132e:	95 1f       	adc	r25, r21
    1330:	c8 17       	cp	r28, r24
    1332:	d9 07       	cpc	r29, r25
    1334:	59 f4       	brne	.+22     	; 0x134c <free+0x82>
    1336:	88 81       	ld	r24, Y
    1338:	99 81       	ldd	r25, Y+1	; 0x01
    133a:	84 0f       	add	r24, r20
    133c:	95 1f       	adc	r25, r21
    133e:	02 96       	adiw	r24, 0x02	; 2
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	9b 81       	ldd	r25, Y+3	; 0x03
    1348:	93 83       	std	Z+3, r25	; 0x03
    134a:	82 83       	std	Z+2, r24	; 0x02
    134c:	21 15       	cp	r18, r1
    134e:	31 05       	cpc	r19, r1
    1350:	29 f4       	brne	.+10     	; 0x135c <free+0x92>
    1352:	f0 93 dd 02 	sts	0x02DD, r31	; 0x8002dd <__flp+0x1>
    1356:	e0 93 dc 02 	sts	0x02DC, r30	; 0x8002dc <__flp>
    135a:	3d c0       	rjmp	.+122    	; 0x13d6 <free+0x10c>
    135c:	e9 01       	movw	r28, r18
    135e:	fb 83       	std	Y+3, r31	; 0x03
    1360:	ea 83       	std	Y+2, r30	; 0x02
    1362:	49 91       	ld	r20, Y+
    1364:	59 91       	ld	r21, Y+
    1366:	c4 0f       	add	r28, r20
    1368:	d5 1f       	adc	r29, r21
    136a:	ec 17       	cp	r30, r28
    136c:	fd 07       	cpc	r31, r29
    136e:	61 f4       	brne	.+24     	; 0x1388 <free+0xbe>
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	84 0f       	add	r24, r20
    1376:	95 1f       	adc	r25, r21
    1378:	02 96       	adiw	r24, 0x02	; 2
    137a:	e9 01       	movw	r28, r18
    137c:	99 83       	std	Y+1, r25	; 0x01
    137e:	88 83       	st	Y, r24
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	9b 83       	std	Y+3, r25	; 0x03
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	e0 e0       	ldi	r30, 0x00	; 0
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	12 96       	adiw	r26, 0x02	; 2
    138e:	8d 91       	ld	r24, X+
    1390:	9c 91       	ld	r25, X
    1392:	13 97       	sbiw	r26, 0x03	; 3
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	19 f0       	breq	.+6      	; 0x139e <free+0xd4>
    1398:	fd 01       	movw	r30, r26
    139a:	dc 01       	movw	r26, r24
    139c:	f7 cf       	rjmp	.-18     	; 0x138c <free+0xc2>
    139e:	8d 91       	ld	r24, X+
    13a0:	9c 91       	ld	r25, X
    13a2:	11 97       	sbiw	r26, 0x01	; 1
    13a4:	9d 01       	movw	r18, r26
    13a6:	2e 5f       	subi	r18, 0xFE	; 254
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	82 0f       	add	r24, r18
    13ac:	93 1f       	adc	r25, r19
    13ae:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <__brkval>
    13b2:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <__brkval+0x1>
    13b6:	28 17       	cp	r18, r24
    13b8:	39 07       	cpc	r19, r25
    13ba:	69 f4       	brne	.+26     	; 0x13d6 <free+0x10c>
    13bc:	30 97       	sbiw	r30, 0x00	; 0
    13be:	29 f4       	brne	.+10     	; 0x13ca <free+0x100>
    13c0:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <__flp+0x1>
    13c4:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <__flp>
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <free+0x104>
    13ca:	13 82       	std	Z+3, r1	; 0x03
    13cc:	12 82       	std	Z+2, r1	; 0x02
    13ce:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <__brkval+0x1>
    13d2:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <__brkval>
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	08 95       	ret

000013dc <strnlen_P>:
    13dc:	fc 01       	movw	r30, r24
    13de:	05 90       	lpm	r0, Z+
    13e0:	61 50       	subi	r22, 0x01	; 1
    13e2:	70 40       	sbci	r23, 0x00	; 0
    13e4:	01 10       	cpse	r0, r1
    13e6:	d8 f7       	brcc	.-10     	; 0x13de <strnlen_P+0x2>
    13e8:	80 95       	com	r24
    13ea:	90 95       	com	r25
    13ec:	8e 0f       	add	r24, r30
    13ee:	9f 1f       	adc	r25, r31
    13f0:	08 95       	ret

000013f2 <memset>:
    13f2:	dc 01       	movw	r26, r24
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <memset+0x6>
    13f6:	6d 93       	st	X+, r22
    13f8:	41 50       	subi	r20, 0x01	; 1
    13fa:	50 40       	sbci	r21, 0x00	; 0
    13fc:	e0 f7       	brcc	.-8      	; 0x13f6 <memset+0x4>
    13fe:	08 95       	ret

00001400 <strnlen>:
    1400:	fc 01       	movw	r30, r24
    1402:	61 50       	subi	r22, 0x01	; 1
    1404:	70 40       	sbci	r23, 0x00	; 0
    1406:	01 90       	ld	r0, Z+
    1408:	01 10       	cpse	r0, r1
    140a:	d8 f7       	brcc	.-10     	; 0x1402 <strnlen+0x2>
    140c:	80 95       	com	r24
    140e:	90 95       	com	r25
    1410:	8e 0f       	add	r24, r30
    1412:	9f 1f       	adc	r25, r31
    1414:	08 95       	ret

00001416 <fputc>:
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	fb 01       	movw	r30, r22
    1420:	23 81       	ldd	r18, Z+3	; 0x03
    1422:	21 fd       	sbrc	r18, 1
    1424:	03 c0       	rjmp	.+6      	; 0x142c <fputc+0x16>
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	2c c0       	rjmp	.+88     	; 0x1484 <fputc+0x6e>
    142c:	22 ff       	sbrs	r18, 2
    142e:	16 c0       	rjmp	.+44     	; 0x145c <fputc+0x46>
    1430:	46 81       	ldd	r20, Z+6	; 0x06
    1432:	57 81       	ldd	r21, Z+7	; 0x07
    1434:	24 81       	ldd	r18, Z+4	; 0x04
    1436:	35 81       	ldd	r19, Z+5	; 0x05
    1438:	42 17       	cp	r20, r18
    143a:	53 07       	cpc	r21, r19
    143c:	44 f4       	brge	.+16     	; 0x144e <fputc+0x38>
    143e:	a0 81       	ld	r26, Z
    1440:	b1 81       	ldd	r27, Z+1	; 0x01
    1442:	9d 01       	movw	r18, r26
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	31 83       	std	Z+1, r19	; 0x01
    144a:	20 83       	st	Z, r18
    144c:	8c 93       	st	X, r24
    144e:	26 81       	ldd	r18, Z+6	; 0x06
    1450:	37 81       	ldd	r19, Z+7	; 0x07
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	37 83       	std	Z+7, r19	; 0x07
    1458:	26 83       	std	Z+6, r18	; 0x06
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <fputc+0x6e>
    145c:	8b 01       	movw	r16, r22
    145e:	ec 01       	movw	r28, r24
    1460:	fb 01       	movw	r30, r22
    1462:	00 84       	ldd	r0, Z+8	; 0x08
    1464:	f1 85       	ldd	r31, Z+9	; 0x09
    1466:	e0 2d       	mov	r30, r0
    1468:	09 95       	icall
    146a:	89 2b       	or	r24, r25
    146c:	e1 f6       	brne	.-72     	; 0x1426 <fputc+0x10>
    146e:	d8 01       	movw	r26, r16
    1470:	16 96       	adiw	r26, 0x06	; 6
    1472:	8d 91       	ld	r24, X+
    1474:	9c 91       	ld	r25, X
    1476:	17 97       	sbiw	r26, 0x07	; 7
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	17 96       	adiw	r26, 0x07	; 7
    147c:	9c 93       	st	X, r25
    147e:	8e 93       	st	-X, r24
    1480:	16 97       	sbiw	r26, 0x06	; 6
    1482:	ce 01       	movw	r24, r28
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	08 95       	ret

0000148e <__ultoa_invert>:
    148e:	fa 01       	movw	r30, r20
    1490:	aa 27       	eor	r26, r26
    1492:	28 30       	cpi	r18, 0x08	; 8
    1494:	51 f1       	breq	.+84     	; 0x14ea <__ultoa_invert+0x5c>
    1496:	20 31       	cpi	r18, 0x10	; 16
    1498:	81 f1       	breq	.+96     	; 0x14fa <__ultoa_invert+0x6c>
    149a:	e8 94       	clt
    149c:	6f 93       	push	r22
    149e:	6e 7f       	andi	r22, 0xFE	; 254
    14a0:	6e 5f       	subi	r22, 0xFE	; 254
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	8f 4f       	sbci	r24, 0xFF	; 255
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	af 4f       	sbci	r26, 0xFF	; 255
    14aa:	b1 e0       	ldi	r27, 0x01	; 1
    14ac:	3e d0       	rcall	.+124    	; 0x152a <__ultoa_invert+0x9c>
    14ae:	b4 e0       	ldi	r27, 0x04	; 4
    14b0:	3c d0       	rcall	.+120    	; 0x152a <__ultoa_invert+0x9c>
    14b2:	67 0f       	add	r22, r23
    14b4:	78 1f       	adc	r23, r24
    14b6:	89 1f       	adc	r24, r25
    14b8:	9a 1f       	adc	r25, r26
    14ba:	a1 1d       	adc	r26, r1
    14bc:	68 0f       	add	r22, r24
    14be:	79 1f       	adc	r23, r25
    14c0:	8a 1f       	adc	r24, r26
    14c2:	91 1d       	adc	r25, r1
    14c4:	a1 1d       	adc	r26, r1
    14c6:	6a 0f       	add	r22, r26
    14c8:	71 1d       	adc	r23, r1
    14ca:	81 1d       	adc	r24, r1
    14cc:	91 1d       	adc	r25, r1
    14ce:	a1 1d       	adc	r26, r1
    14d0:	20 d0       	rcall	.+64     	; 0x1512 <__ultoa_invert+0x84>
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <__ultoa_invert+0x48>
    14d4:	68 94       	set
    14d6:	3f 91       	pop	r19
    14d8:	2a e0       	ldi	r18, 0x0A	; 10
    14da:	26 9f       	mul	r18, r22
    14dc:	11 24       	eor	r1, r1
    14de:	30 19       	sub	r19, r0
    14e0:	30 5d       	subi	r19, 0xD0	; 208
    14e2:	31 93       	st	Z+, r19
    14e4:	de f6       	brtc	.-74     	; 0x149c <__ultoa_invert+0xe>
    14e6:	cf 01       	movw	r24, r30
    14e8:	08 95       	ret
    14ea:	46 2f       	mov	r20, r22
    14ec:	47 70       	andi	r20, 0x07	; 7
    14ee:	40 5d       	subi	r20, 0xD0	; 208
    14f0:	41 93       	st	Z+, r20
    14f2:	b3 e0       	ldi	r27, 0x03	; 3
    14f4:	0f d0       	rcall	.+30     	; 0x1514 <__ultoa_invert+0x86>
    14f6:	c9 f7       	brne	.-14     	; 0x14ea <__ultoa_invert+0x5c>
    14f8:	f6 cf       	rjmp	.-20     	; 0x14e6 <__ultoa_invert+0x58>
    14fa:	46 2f       	mov	r20, r22
    14fc:	4f 70       	andi	r20, 0x0F	; 15
    14fe:	40 5d       	subi	r20, 0xD0	; 208
    1500:	4a 33       	cpi	r20, 0x3A	; 58
    1502:	18 f0       	brcs	.+6      	; 0x150a <__ultoa_invert+0x7c>
    1504:	49 5d       	subi	r20, 0xD9	; 217
    1506:	31 fd       	sbrc	r19, 1
    1508:	40 52       	subi	r20, 0x20	; 32
    150a:	41 93       	st	Z+, r20
    150c:	02 d0       	rcall	.+4      	; 0x1512 <__ultoa_invert+0x84>
    150e:	a9 f7       	brne	.-22     	; 0x14fa <__ultoa_invert+0x6c>
    1510:	ea cf       	rjmp	.-44     	; 0x14e6 <__ultoa_invert+0x58>
    1512:	b4 e0       	ldi	r27, 0x04	; 4
    1514:	a6 95       	lsr	r26
    1516:	97 95       	ror	r25
    1518:	87 95       	ror	r24
    151a:	77 95       	ror	r23
    151c:	67 95       	ror	r22
    151e:	ba 95       	dec	r27
    1520:	c9 f7       	brne	.-14     	; 0x1514 <__ultoa_invert+0x86>
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	61 05       	cpc	r22, r1
    1526:	71 05       	cpc	r23, r1
    1528:	08 95       	ret
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	0a 2e       	mov	r0, r26
    1530:	06 94       	lsr	r0
    1532:	57 95       	ror	r21
    1534:	47 95       	ror	r20
    1536:	37 95       	ror	r19
    1538:	27 95       	ror	r18
    153a:	ba 95       	dec	r27
    153c:	c9 f7       	brne	.-14     	; 0x1530 <__ultoa_invert+0xa2>
    153e:	62 0f       	add	r22, r18
    1540:	73 1f       	adc	r23, r19
    1542:	84 1f       	adc	r24, r20
    1544:	95 1f       	adc	r25, r21
    1546:	a0 1d       	adc	r26, r0
    1548:	08 95       	ret

0000154a <__divmodsi4>:
    154a:	05 2e       	mov	r0, r21
    154c:	97 fb       	bst	r25, 7
    154e:	1e f4       	brtc	.+6      	; 0x1556 <__divmodsi4+0xc>
    1550:	00 94       	com	r0
    1552:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__negsi2>
    1556:	57 fd       	sbrc	r21, 7
    1558:	07 d0       	rcall	.+14     	; 0x1568 <__divmodsi4_neg2>
    155a:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodsi4>
    155e:	07 fc       	sbrc	r0, 7
    1560:	03 d0       	rcall	.+6      	; 0x1568 <__divmodsi4_neg2>
    1562:	4e f4       	brtc	.+18     	; 0x1576 <__divmodsi4_exit>
    1564:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__negsi2>

00001568 <__divmodsi4_neg2>:
    1568:	50 95       	com	r21
    156a:	40 95       	com	r20
    156c:	30 95       	com	r19
    156e:	21 95       	neg	r18
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	4f 4f       	sbci	r20, 0xFF	; 255
    1574:	5f 4f       	sbci	r21, 0xFF	; 255

00001576 <__divmodsi4_exit>:
    1576:	08 95       	ret

00001578 <__negsi2>:
    1578:	90 95       	com	r25
    157a:	80 95       	com	r24
    157c:	70 95       	com	r23
    157e:	61 95       	neg	r22
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	08 95       	ret

00001588 <__muluhisi3>:
    1588:	0e 94 30 0b 	call	0x1660	; 0x1660 <__umulhisi3>
    158c:	a5 9f       	mul	r26, r21
    158e:	90 0d       	add	r25, r0
    1590:	b4 9f       	mul	r27, r20
    1592:	90 0d       	add	r25, r0
    1594:	a4 9f       	mul	r26, r20
    1596:	80 0d       	add	r24, r0
    1598:	91 1d       	adc	r25, r1
    159a:	11 24       	eor	r1, r1
    159c:	08 95       	ret

0000159e <__mulshisi3>:
    159e:	b7 ff       	sbrs	r27, 7
    15a0:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__muluhisi3>

000015a4 <__mulohisi3>:
    15a4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__muluhisi3>
    15a8:	82 1b       	sub	r24, r18
    15aa:	93 0b       	sbc	r25, r19
    15ac:	08 95       	ret

000015ae <__prologue_saves__>:
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	ca 1b       	sub	r28, r26
    15d8:	db 0b       	sbc	r29, r27
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	09 94       	ijmp

000015e6 <__epilogue_restores__>:
    15e6:	2a 88       	ldd	r2, Y+18	; 0x12
    15e8:	39 88       	ldd	r3, Y+17	; 0x11
    15ea:	48 88       	ldd	r4, Y+16	; 0x10
    15ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    15ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    15f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15f8:	b9 84       	ldd	r11, Y+9	; 0x09
    15fa:	c8 84       	ldd	r12, Y+8	; 0x08
    15fc:	df 80       	ldd	r13, Y+7	; 0x07
    15fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1600:	fd 80       	ldd	r15, Y+5	; 0x05
    1602:	0c 81       	ldd	r16, Y+4	; 0x04
    1604:	1b 81       	ldd	r17, Y+3	; 0x03
    1606:	aa 81       	ldd	r26, Y+2	; 0x02
    1608:	b9 81       	ldd	r27, Y+1	; 0x01
    160a:	ce 0f       	add	r28, r30
    160c:	d1 1d       	adc	r29, r1
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	ed 01       	movw	r28, r26
    161a:	08 95       	ret

0000161c <__udivmodsi4>:
    161c:	a1 e2       	ldi	r26, 0x21	; 33
    161e:	1a 2e       	mov	r1, r26
    1620:	aa 1b       	sub	r26, r26
    1622:	bb 1b       	sub	r27, r27
    1624:	fd 01       	movw	r30, r26
    1626:	0d c0       	rjmp	.+26     	; 0x1642 <__udivmodsi4_ep>

00001628 <__udivmodsi4_loop>:
    1628:	aa 1f       	adc	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	ee 1f       	adc	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	a2 17       	cp	r26, r18
    1632:	b3 07       	cpc	r27, r19
    1634:	e4 07       	cpc	r30, r20
    1636:	f5 07       	cpc	r31, r21
    1638:	20 f0       	brcs	.+8      	; 0x1642 <__udivmodsi4_ep>
    163a:	a2 1b       	sub	r26, r18
    163c:	b3 0b       	sbc	r27, r19
    163e:	e4 0b       	sbc	r30, r20
    1640:	f5 0b       	sbc	r31, r21

00001642 <__udivmodsi4_ep>:
    1642:	66 1f       	adc	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	1a 94       	dec	r1
    164c:	69 f7       	brne	.-38     	; 0x1628 <__udivmodsi4_loop>
    164e:	60 95       	com	r22
    1650:	70 95       	com	r23
    1652:	80 95       	com	r24
    1654:	90 95       	com	r25
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	bd 01       	movw	r22, r26
    165c:	cf 01       	movw	r24, r30
    165e:	08 95       	ret

00001660 <__umulhisi3>:
    1660:	a2 9f       	mul	r26, r18
    1662:	b0 01       	movw	r22, r0
    1664:	b3 9f       	mul	r27, r19
    1666:	c0 01       	movw	r24, r0
    1668:	a3 9f       	mul	r26, r19
    166a:	70 0d       	add	r23, r0
    166c:	81 1d       	adc	r24, r1
    166e:	11 24       	eor	r1, r1
    1670:	91 1d       	adc	r25, r1
    1672:	b2 9f       	mul	r27, r18
    1674:	70 0d       	add	r23, r0
    1676:	81 1d       	adc	r24, r1
    1678:	11 24       	eor	r1, r1
    167a:	91 1d       	adc	r25, r1
    167c:	08 95       	ret

0000167e <_exit>:
    167e:	f8 94       	cli

00001680 <__stop_program>:
    1680:	ff cf       	rjmp	.-2      	; 0x1680 <__stop_program>
