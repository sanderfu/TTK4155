
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00001d0a  00001d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008002b0  008002b0  00001f4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033bf  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001718  00000000  00000000  000056bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001784  00000000  00000000  00006dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  0000855c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a56  00000000  00000000  00008c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016fe  00000000  00000000  0000967e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	12 e0       	ldi	r17, 0x02	; 2
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	ea e0       	ldi	r30, 0x0A	; 10
     536:	fd e1       	ldi	r31, 0x1D	; 29
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a0 3b       	cpi	r26, 0xB0	; 176
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	22 e0       	ldi	r18, 0x02	; 2
     546:	a0 eb       	ldi	r26, 0xB0	; 176
     548:	b2 e0       	ldi	r27, 0x02	; 2
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	aa 3c       	cpi	r26, 0xCA	; 202
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 ba 02 	call	0x574	; 0x574 <main>
     558:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1136>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1136>
     572:	08 95       	ret

00000574 <main>:
#include "pwm.h"
#include "music.h"

int main(void)
//p.23 for can read instructions
{
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
	if (!setupInit()) {
     578:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <setupInit>
     57c:	88 23       	and	r24, r24
     57e:	f9 f0       	breq	.+62     	; 0x5be <main+0x4a>

	//uint8_t i = CAN_controller_read(0x61);
	
	//printf("This is my integer: %i",i);

	printf("Starting program\n\n\n\n\n\n\n\n\n\n");
     580:	84 ea       	ldi	r24, 0xA4	; 164
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <puts>
	//test_SRAM();
	//pwm_testPlayNote();
	pwm_init();
     588:	0e 94 8d 03 	call	0x71a	; 0x71a <pwm_init>
	//music_playLisaGikk();                 
	while (1) {
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		if (!strcmp(currentMenu.currentMenuItem->children[currentMenu.childIndex]->name, "Rick")) {
     58c:	c4 eb       	ldi	r28, 0xB4	; 180
     58e:	d2 e0       	ldi	r29, 0x02	; 2
	//pwm_testPlayNote();
	pwm_init();
	//music_playLisaGikk();                 
	while (1) {
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     590:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <sleep_now>
		if (!strcmp(currentMenu.currentMenuItem->children[currentMenu.childIndex]->name, "Rick")) {
     594:	28 81       	ld	r18, Y
     596:	39 81       	ldd	r19, Y+1	; 0x01
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	e8 2f       	mov	r30, r24
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	39 96       	adiw	r30, 0x09	; 9
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	e2 0f       	add	r30, r18
     5a6:	f3 1f       	adc	r31, r19
     5a8:	6e eb       	ldi	r22, 0xBE	; 190
     5aa:	71 e0       	ldi	r23, 0x01	; 1
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <strcmp>
     5b4:	89 2b       	or	r24, r25
     5b6:	61 f7       	brne	.-40     	; 0x590 <main+0x1c>
			music_playRick();
     5b8:	0e 94 2a 03 	call	0x654	; 0x654 <music_playRick>
     5bc:	e9 cf       	rjmp	.-46     	; 0x590 <main+0x1c>
		
		//test_resetMenu();
		//test_outputControllers(joystick_pos, slider_pos, buttons);		
		//_delay_ms(50);	
	}
}
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <CAN_controller_read>:
		SPI_masterWrite(mask);
		SPI_masterWrite(data);
		
		SPI_setChipSelect(PB4, 1);

}
     5c8:	cf 93       	push	r28
     5ca:	c8 2f       	mov	r28, r24
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	0e 94 36 06 	call	0xc6c	; 0xc6c <SPI_setChipSelect>
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SPI_masterWrite>
     5da:	8c 2f       	mov	r24, r28
     5dc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SPI_masterWrite>
     5e0:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_masterRead>
     5e4:	c8 2f       	mov	r28, r24
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	0e 94 36 06 	call	0xc6c	; 0xc6c <SPI_setChipSelect>
     5ee:	8c 2f       	mov	r24, r28
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <CAN_controller_init>:

uint8_t CAN_controller_init() {
	
	
	SPI_masterInit();
     5f4:	0e 94 25 06 	call	0xc4a	; 0xc4a <SPI_masterInit>
	
	//reset with spi command
	SPI_setChipSelect(PB4, 0);
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	84 e0       	ldi	r24, 0x04	; 4
     5fc:	0e 94 36 06 	call	0xc6c	; 0xc6c <SPI_setChipSelect>
	printf("Before spi write");
     600:	83 ec       	ldi	r24, 0xC3	; 195
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <printf>
	SPI_masterWrite(MCP_RESET);
     60c:	80 ec       	ldi	r24, 0xC0	; 192
     60e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	84 e0       	ldi	r24, 0x04	; 4
     616:	0e 94 36 06 	call	0xc6c	; 0xc6c <SPI_setChipSelect>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	8f ef       	ldi	r24, 0xFF	; 255
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	21 50       	subi	r18, 0x01	; 1
     622:	80 40       	sbci	r24, 0x00	; 0
     624:	90 40       	sbci	r25, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <CAN_controller_init+0x2c>
     628:	00 c0       	rjmp	.+0      	; 0x62a <CAN_controller_init+0x36>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <CAN_controller_init+0x38>
	//printf("After spi write\n");
	_delay_ms(200);
	
	//Check CANSTAT register
	
	uint8_t data = CAN_controller_read(MCP_CANSTAT);
     62c:	8e e0       	ldi	r24, 0x0E	; 14
     62e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <CAN_controller_read>
	
	//uint8_t data = 0x44;
	uint8_t mode_bits = (data & MODE_MASK);
	
	if (mode_bits != MODE_CONFIG) {
     632:	80 7e       	andi	r24, 0xE0	; 224
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	80 38       	cpi	r24, 0x80	; 128
     63a:	51 f0       	breq	.+20     	; 0x650 <CAN_controller_init+0x5c>
		printf("Not in config mode");
     63c:	84 ed       	ldi	r24, 0xD4	; 212
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <printf>
		return 0;
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	08 95       	ret
	
	//Check CANSTAT register
	uint8_t data = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", data);
	*/
	return 1;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	08 95       	ret

00000654 <music_playRick>:
	}
	pwm_setFreq(0);
	sei();

}
void music_playRick() {
     654:	bf 92       	push	r11
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
	
	printf("You got rickrolled\n\n\r");
     666:	8a e2       	ldi	r24, 0x2A	; 42
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <printf>
     672:	c6 e0       	ldi	r28, 0x06	; 6
     674:	d1 e0       	ldi	r29, 0x01	; 1
     676:	0f 2e       	mov	r0, r31
     678:	fd ee       	ldi	r31, 0xED	; 237
     67a:	ef 2e       	mov	r14, r31
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	ff 2e       	mov	r15, r31
     680:	f0 2d       	mov	r31, r0
     682:	0e e9       	ldi	r16, 0x9E	; 158
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	0f 2e       	mov	r0, r31
     688:	f4 ea       	ldi	r31, 0xA4	; 164
     68a:	cf 2e       	mov	r12, r31
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	df 2e       	mov	r13, r31
     690:	f0 2d       	mov	r31, r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
     696:	0f 2e       	mov	r0, r31
     698:	f4 e1       	ldi	r31, 0x14	; 20
     69a:	bf 2e       	mov	r11, r31
     69c:	f0 2d       	mov	r31, r0
}
void music_playRick() {
	
	printf("You got rickrolled\n\n\r");
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		printf(lyrics_chorus[i]);
     69e:	88 81       	ld	r24, Y
     6a0:	99 81       	ldd	r25, Y+1	; 0x01
     6a2:	22 96       	adiw	r28, 0x02	; 2
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
     6a8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <printf>
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
     6ac:	f7 01       	movw	r30, r14
     6ae:	65 91       	lpm	r22, Z+
     6b0:	74 91       	lpm	r23, Z
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 9d 03 	call	0x73a	; 0x73a <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
     6ba:	f8 01       	movw	r30, r16
     6bc:	84 91       	lpm	r24, Z
     6be:	b8 9e       	mul	r11, r24
     6c0:	c0 01       	movw	r24, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	09 2e       	mov	r0, r25
     6c6:	00 0c       	add	r0, r0
     6c8:	aa 0b       	sbc	r26, r26
     6ca:	bb 0b       	sbc	r27, r27
		while (duration--) {
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	a1 05       	cpc	r26, r1
     6d4:	b1 05       	cpc	r27, r1
     6d6:	51 f0       	breq	.+20     	; 0x6ec <music_playRick+0x98>
     6d8:	ec ec       	ldi	r30, 0xCC	; 204
     6da:	f4 e0       	ldi	r31, 0x04	; 4
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <music_playRick+0x88>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <music_playRick+0x8e>
     6e2:	00 00       	nop
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	a1 09       	sbc	r26, r1
     6e8:	b1 09       	sbc	r27, r1
     6ea:	b1 f7       	brne	.-20     	; 0x6d8 <music_playRick+0x84>
     6ec:	f4 e0       	ldi	r31, 0x04	; 4
     6ee:	ef 0e       	add	r14, r31
     6f0:	f1 1c       	adc	r15, r1
     6f2:	0f 5f       	subi	r16, 0xFF	; 255
     6f4:	1f 4f       	sbci	r17, 0xFF	; 255

}
void music_playRick() {
	
	printf("You got rickrolled\n\n\r");
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
     6f6:	cc 15       	cp	r28, r12
     6f8:	dd 05       	cpc	r29, r13
     6fa:	89 f6       	brne	.-94     	; 0x69e <music_playRick+0x4a>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	cb 01       	movw	r24, r22
     702:	0e 94 9d 03 	call	0x73a	; 0x73a <pwm_setFreq>
	

     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	08 95       	ret

0000071a <pwm_init>:
    PRESC_1024 =   (1 << CS02)  |               (1 << CS00)
} prescaling;

void pwm_init() {
    //set output pin
    DDRB = (1 << PB0); 
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	87 bb       	out	0x17, r24	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	81 bf       	out	0x31, r24	; 49
    
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
     722:	80 e8       	ldi	r24, 0x80	; 128
     724:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
     726:	83 b7       	in	r24, 0x33	; 51
     728:	88 60       	ori	r24, 0x08	; 8
     72a:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
     72c:	83 b7       	in	r24, 0x33	; 51
     72e:	80 61       	ori	r24, 0x10	; 16
     730:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
     732:	83 b7       	in	r24, 0x33	; 51
     734:	88 7f       	andi	r24, 0xF8	; 248
     736:	83 bf       	out	0x33, r24	; 51
     738:	08 95       	ret

0000073a <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
    if (freq == 0) {
     73e:	67 2b       	or	r22, r23
     740:	68 2b       	or	r22, r24
     742:	69 2b       	or	r22, r25
     744:	21 f4       	brne	.+8      	; 0x74e <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
     746:	83 b7       	in	r24, 0x33	; 51
     748:	88 7f       	andi	r24, 0xF8	; 248
     74a:	83 bf       	out	0x33, r24	; 51
        return;
     74c:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e8       	ldi	r23, 0x80	; 128
     752:	85 e2       	ldi	r24, 0x25	; 37
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodsi4>
     75a:	da 01       	movw	r26, r20
     75c:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
     75e:	21 30       	cpi	r18, 0x01	; 1
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	36 07       	cpc	r19, r22
     764:	41 05       	cpc	r20, r1
     766:	51 05       	cpc	r21, r1
     768:	a8 f1       	brcs	.+106    	; 0x7d4 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
     76a:	68 94       	set
     76c:	12 f8       	bld	r1, 2
     76e:	b6 95       	lsr	r27
     770:	a7 95       	ror	r26
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	16 94       	lsr	r1
     778:	d1 f7       	brne	.-12     	; 0x76e <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	96 07       	cpc	r25, r22
     780:	a1 05       	cpc	r26, r1
     782:	b1 05       	cpc	r27, r1
     784:	48 f1       	brcs	.+82     	; 0x7d8 <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
     786:	da 01       	movw	r26, r20
     788:	c9 01       	movw	r24, r18
     78a:	68 94       	set
     78c:	15 f8       	bld	r1, 5
     78e:	b6 95       	lsr	r27
     790:	a7 95       	ror	r26
     792:	97 95       	ror	r25
     794:	87 95       	ror	r24
     796:	16 94       	lsr	r1
     798:	d1 f7       	brne	.-12     	; 0x78e <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	96 07       	cpc	r25, r22
     7a0:	a1 05       	cpc	r26, r1
     7a2:	b1 05       	cpc	r27, r1
     7a4:	d8 f0       	brcs	.+54     	; 0x7dc <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
     7a6:	bb 27       	eor	r27, r27
     7a8:	a5 2f       	mov	r26, r21
     7aa:	94 2f       	mov	r25, r20
     7ac:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	96 07       	cpc	r25, r22
     7b4:	a1 05       	cpc	r26, r1
     7b6:	b1 05       	cpc	r27, r1
     7b8:	98 f0       	brcs	.+38     	; 0x7e0 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
     7ba:	da 01       	movw	r26, r20
     7bc:	c9 01       	movw	r24, r18
     7be:	07 2e       	mov	r0, r23
     7c0:	7a e0       	ldi	r23, 0x0A	; 10
     7c2:	b6 95       	lsr	r27
     7c4:	a7 95       	ror	r26
     7c6:	97 95       	ror	r25
     7c8:	87 95       	ror	r24
     7ca:	7a 95       	dec	r23
     7cc:	d1 f7       	brne	.-12     	; 0x7c2 <pwm_setFreq+0x88>
     7ce:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
     7d0:	35 e0       	ldi	r19, 0x05	; 5
     7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
     7d4:	31 e0       	ldi	r19, 0x01	; 1
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
     7d8:	32 e0       	ldi	r19, 0x02	; 2
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
     7dc:	33 e0       	ldi	r19, 0x03	; 3
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
     7e0:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
     7e2:	23 b7       	in	r18, 0x33	; 51
     7e4:	28 7f       	andi	r18, 0xF8	; 248
     7e6:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
     7e8:	23 b7       	in	r18, 0x33	; 51
     7ea:	23 2b       	or	r18, r19
     7ec:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
     7ee:	81 50       	subi	r24, 0x01	; 1
     7f0:	81 bf       	out	0x31, r24	; 49
     7f2:	08 95       	ret

000007f4 <sleep_init>:

#include "sleep.h"
#include <avr/sleep.h>
#include <avr/interrupt.h>

void sleep_init() {
     7f4:	08 95       	ret

000007f6 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     7f6:	88 b1       	in	r24, 0x08	; 8
     7f8:	88 68       	ori	r24, 0x88	; 136
     7fa:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     7fc:	85 b7       	in	r24, 0x35	; 53
     7fe:	80 62       	ori	r24, 0x20	; 32
     800:	85 bf       	out	0x35, r24	; 53
     802:	88 95       	sleep
     804:	85 b7       	in	r24, 0x35	; 53
     806:	8f 7d       	andi	r24, 0xDF	; 223
     808:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     80a:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     80c:	85 b7       	in	r24, 0x35	; 53
     80e:	8f 7d       	andi	r24, 0xDF	; 223
     810:	85 bf       	out	0x35, r24	; 53
     812:	08 95       	ret

00000814 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     81a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     824:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <joystickOffsetY>
     828:	08 95       	ret

0000082a <joystick_readPosition>:
}
void joystick_readPosition() {
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     83c:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     844:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     846:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <joystickOffsetX>
     84a:	c6 17       	cp	r28, r22
     84c:	80 f4       	brcc	.+32     	; 0x86e <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	2c 2f       	mov	r18, r28
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	26 1b       	sub	r18, r22
     856:	37 0b       	sbc	r19, r23
     858:	44 e6       	ldi	r20, 0x64	; 100
     85a:	42 9f       	mul	r20, r18
     85c:	c0 01       	movw	r24, r0
     85e:	43 9f       	mul	r20, r19
     860:	90 0d       	add	r25, r0
     862:	11 24       	eor	r1, r1
     864:	0e 94 93 09 	call	0x1326	; 0x1326 <__divmodhi4>
     868:	60 93 b0 02 	sts	0x02B0, r22	; 0x8002b0 <__data_end>
     86c:	14 c0       	rjmp	.+40     	; 0x896 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     86e:	46 2f       	mov	r20, r22
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	2c 2f       	mov	r18, r28
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	24 1b       	sub	r18, r20
     878:	35 0b       	sbc	r19, r21
     87a:	64 e6       	ldi	r22, 0x64	; 100
     87c:	62 9f       	mul	r22, r18
     87e:	c0 01       	movw	r24, r0
     880:	63 9f       	mul	r22, r19
     882:	90 0d       	add	r25, r0
     884:	11 24       	eor	r1, r1
     886:	6f ef       	ldi	r22, 0xFF	; 255
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	64 1b       	sub	r22, r20
     88c:	75 0b       	sbc	r23, r21
     88e:	0e 94 93 09 	call	0x1326	; 0x1326 <__divmodhi4>
     892:	60 93 b0 02 	sts	0x02B0, r22	; 0x8002b0 <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     896:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <joystickOffsetY>
     89a:	e2 17       	cp	r30, r18
     89c:	88 f4       	brcc	.+34     	; 0x8c0 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     89e:	62 2f       	mov	r22, r18
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	4e 2f       	mov	r20, r30
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	46 1b       	sub	r20, r22
     8a8:	57 0b       	sbc	r21, r23
     8aa:	24 e6       	ldi	r18, 0x64	; 100
     8ac:	24 9f       	mul	r18, r20
     8ae:	c0 01       	movw	r24, r0
     8b0:	25 9f       	mul	r18, r21
     8b2:	90 0d       	add	r25, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	0e 94 93 09 	call	0x1326	; 0x1326 <__divmodhi4>
     8ba:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <__data_end+0x1>
     8be:	13 c0       	rjmp	.+38     	; 0x8e6 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4e 2f       	mov	r20, r30
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	42 1b       	sub	r20, r18
     8c8:	53 0b       	sbc	r21, r19
     8ca:	64 e6       	ldi	r22, 0x64	; 100
     8cc:	64 9f       	mul	r22, r20
     8ce:	c0 01       	movw	r24, r0
     8d0:	65 9f       	mul	r22, r21
     8d2:	90 0d       	add	r25, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	6f ef       	ldi	r22, 0xFF	; 255
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	62 1b       	sub	r22, r18
     8dc:	73 0b       	sbc	r23, r19
     8de:	0e 94 93 09 	call	0x1326	; 0x1326 <__divmodhi4>
     8e2:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     8e6:	c0 eb       	ldi	r28, 0xB0	; 176
     8e8:	d2 e0       	ldi	r29, 0x02	; 2
     8ea:	68 81       	ld	r22, Y
     8ec:	06 2e       	mov	r0, r22
     8ee:	00 0c       	add	r0, r0
     8f0:	77 0b       	sbc	r23, r23
     8f2:	88 0b       	sbc	r24, r24
     8f4:	99 0b       	sbc	r25, r25
     8f6:	0e 94 fa 07 	call	0xff4	; 0xff4 <__floatsisf>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	69 81       	ldd	r22, Y+1	; 0x01
     900:	06 2e       	mov	r0, r22
     902:	00 0c       	add	r0, r0
     904:	77 0b       	sbc	r23, r23
     906:	88 0b       	sbc	r24, r24
     908:	99 0b       	sbc	r25, r25
     90a:	0e 94 fa 07 	call	0xff4	; 0xff4 <__floatsisf>
     90e:	a7 01       	movw	r20, r14
     910:	96 01       	movw	r18, r12
     912:	0e 94 f1 06 	call	0xde2	; 0xde2 <atan2>
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	44 eb       	ldi	r20, 0xB4	; 180
     91c:	53 e4       	ldi	r21, 0x43	; 67
     91e:	0e 94 b5 08 	call	0x116a	; 0x116a <__mulsf3>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	5f e3       	ldi	r21, 0x3F	; 63
     92a:	0e 94 b5 08 	call	0x116a	; 0x116a <__mulsf3>
     92e:	23 ec       	ldi	r18, 0xC3	; 195
     930:	35 ef       	ldi	r19, 0xF5	; 245
     932:	48 e4       	ldi	r20, 0x48	; 72
     934:	50 e4       	ldi	r21, 0x40	; 64
     936:	0e 94 50 07 	call	0xea0	; 0xea0 <__divsf3>
     93a:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fixsfsi>
     93e:	7b 83       	std	Y+3, r23	; 0x03
     940:	6a 83       	std	Y+2, r22	; 0x02
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	08 95       	ret

00000950 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     950:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     952:	80 81       	ld	r24, Z
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	98 0f       	add	r25, r24
     958:	99 30       	cpi	r25, 0x09	; 9
     95a:	20 f4       	brcc	.+8      	; 0x964 <joystick_getDirection+0x14>
     95c:	91 81       	ldd	r25, Z+1	; 0x01
     95e:	9c 5f       	subi	r25, 0xFC	; 252
     960:	99 30       	cpi	r25, 0x09	; 9
     962:	90 f0       	brcs	.+36     	; 0x988 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     964:	85 30       	cpi	r24, 0x05	; 5
     966:	2c f0       	brlt	.+10     	; 0x972 <joystick_getDirection+0x22>
     968:	81 81       	ldd	r24, Z+1	; 0x01
     96a:	8f 5c       	subi	r24, 0xCF	; 207
     96c:	83 36       	cpi	r24, 0x63	; 99
     96e:	38 f4       	brcc	.+14     	; 0x97e <joystick_getDirection+0x2e>
     970:	0d c0       	rjmp	.+26     	; 0x98c <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     972:	8c 3f       	cpi	r24, 0xFC	; 252
     974:	24 f4       	brge	.+8      	; 0x97e <joystick_getDirection+0x2e>
     976:	81 81       	ldd	r24, Z+1	; 0x01
     978:	8f 5c       	subi	r24, 0xCF	; 207
     97a:	83 36       	cpi	r24, 0x63	; 99
     97c:	48 f0       	brcs	.+18     	; 0x990 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     97e:	81 81       	ldd	r24, Z+1	; 0x01
     980:	8c 3f       	cpi	r24, 0xFC	; 252
     982:	44 f0       	brlt	.+16     	; 0x994 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     988:	84 e0       	ldi	r24, 0x04	; 4
     98a:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     994:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     996:	08 95       	ret

00000998 <navigateMenu>:
	
	return mainMenu;
}

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     998:	0e 94 a8 04 	call	0x950	; 0x950 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     99c:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <currentMenu+0x3>
     9a0:	94 30       	cpi	r25, 0x04	; 4
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <navigateMenu+0xe>
     9a4:	58 c0       	rjmp	.+176    	; 0xa56 <navigateMenu+0xbe>
			switch (dir) {
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	e1 f1       	breq	.+120    	; 0xa22 <navigateMenu+0x8a>
     9aa:	60 f1       	brcs	.+88     	; 0xa04 <navigateMenu+0x6c>
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	c9 f0       	breq	.+50     	; 0x9e2 <navigateMenu+0x4a>
     9b0:	83 30       	cpi	r24, 0x03	; 3
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <navigateMenu+0x1e>
     9b4:	50 c0       	rjmp	.+160    	; 0xa56 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     9b6:	e4 eb       	ldi	r30, 0xB4	; 180
     9b8:	f2 e0       	ldi	r31, 0x02	; 2
     9ba:	92 81       	ldd	r25, Z+2	; 0x02
     9bc:	49 2f       	mov	r20, r25
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	01 90       	ld	r0, Z+
     9c2:	f0 81       	ld	r31, Z
     9c4:	e0 2d       	mov	r30, r0
     9c6:	26 8d       	ldd	r18, Z+30	; 0x1e
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	31 09       	sbc	r19, r1
     9ce:	42 17       	cp	r20, r18
     9d0:	53 07       	cpc	r21, r19
     9d2:	24 f4       	brge	.+8      	; 0x9dc <navigateMenu+0x44>
					currentMenu.childIndex++;
     9d4:	9f 5f       	subi	r25, 0xFF	; 255
     9d6:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <currentMenu+0x2>
     9da:	3d c0       	rjmp	.+122    	; 0xa56 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     9dc:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <currentMenu+0x2>
     9e0:	3a c0       	rjmp	.+116    	; 0xa56 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     9e2:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <currentMenu+0x2>
     9e6:	99 23       	and	r25, r25
     9e8:	21 f0       	breq	.+8      	; 0x9f2 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     9ea:	91 50       	subi	r25, 0x01	; 1
     9ec:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <currentMenu+0x2>
     9f0:	32 c0       	rjmp	.+100    	; 0xa56 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     9f2:	e4 eb       	ldi	r30, 0xB4	; 180
     9f4:	f2 e0       	ldi	r31, 0x02	; 2
     9f6:	a0 81       	ld	r26, Z
     9f8:	b1 81       	ldd	r27, Z+1	; 0x01
     9fa:	5e 96       	adiw	r26, 0x1e	; 30
     9fc:	9c 91       	ld	r25, X
     9fe:	91 50       	subi	r25, 0x01	; 1
     a00:	92 83       	std	Z+2, r25	; 0x02
     a02:	29 c0       	rjmp	.+82     	; 0xa56 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     a04:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <currentMenu>
     a08:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <currentMenu+0x1>
     a0c:	20 89       	ldd	r18, Z+16	; 0x10
     a0e:	31 89       	ldd	r19, Z+17	; 0x11
     a10:	21 15       	cp	r18, r1
     a12:	31 05       	cpc	r19, r1
     a14:	01 f1       	breq	.+64     	; 0xa56 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     a16:	e4 eb       	ldi	r30, 0xB4	; 180
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	31 83       	std	Z+1, r19	; 0x01
     a1c:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     a1e:	12 82       	std	Z+2, r1	; 0x02
     a20:	1a c0       	rjmp	.+52     	; 0xa56 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     a22:	a4 eb       	ldi	r26, 0xB4	; 180
     a24:	b2 e0       	ldi	r27, 0x02	; 2
     a26:	2d 91       	ld	r18, X+
     a28:	3c 91       	ld	r19, X
     a2a:	11 97       	sbiw	r26, 0x01	; 1
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	9c 91       	ld	r25, X
     a30:	12 97       	sbiw	r26, 0x02	; 2
     a32:	e9 2f       	mov	r30, r25
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	39 96       	adiw	r30, 0x09	; 9
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	e2 0f       	add	r30, r18
     a3e:	f3 1f       	adc	r31, r19
     a40:	01 90       	ld	r0, Z+
     a42:	f0 81       	ld	r31, Z
     a44:	e0 2d       	mov	r30, r0
     a46:	96 8d       	ldd	r25, Z+30	; 0x1e
     a48:	99 23       	and	r25, r25
     a4a:	29 f0       	breq	.+10     	; 0xa56 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	fc 93       	st	X, r31
     a50:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     a52:	12 96       	adiw	r26, 0x02	; 2
     a54:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     a56:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <currentMenu+0x3>
     a5a:	08 95       	ret

00000a5c <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
	oled_reset();
     a64:	0e 94 78 05 	call	0xaf0	; 0xaf0 <oled_reset>
	oled_home();
     a68:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     a6c:	c4 eb       	ldi	r28, 0xB4	; 180
     a6e:	d2 e0       	ldi	r29, 0x02	; 2
     a70:	88 81       	ld	r24, Y
     a72:	99 81       	ldd	r25, Y+1	; 0x01
     a74:	0e 94 d4 05 	call	0xba8	; 0xba8 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     a78:	e8 81       	ld	r30, Y
     a7a:	f9 81       	ldd	r31, Y+1	; 0x01
     a7c:	86 8d       	ldd	r24, Z+30	; 0x1e
     a7e:	88 23       	and	r24, r24
     a80:	31 f1       	breq	.+76     	; 0xace <menu_printCurrentMenu+0x72>
     a82:	c0 e0       	ldi	r28, 0x00	; 0
     a84:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     a86:	04 eb       	ldi	r16, 0xB4	; 180
     a88:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     a8a:	ce 01       	movw	r24, r28
     a8c:	02 96       	adiw	r24, 0x02	; 2
     a8e:	0e 94 d0 05 	call	0xba0	; 0xba0 <oled_gotoLine>
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     a92:	d8 01       	movw	r26, r16
     a94:	8d 91       	ld	r24, X+
     a96:	9c 91       	ld	r25, X
     a98:	fe 01       	movw	r30, r28
     a9a:	39 96       	adiw	r30, 0x09	; 9
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	e8 0f       	add	r30, r24
     aa2:	f9 1f       	adc	r31, r25
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	0e 94 d4 05 	call	0xba8	; 0xba8 <oled_print>
		if (currentMenu.childIndex == i) {
     aac:	f8 01       	movw	r30, r16
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	8c 17       	cp	r24, r28
     ab4:	9d 07       	cpc	r25, r29
     ab6:	11 f4       	brne	.+4      	; 0xabc <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     ab8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     abc:	21 96       	adiw	r28, 0x01	; 1
     abe:	d8 01       	movw	r26, r16
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	86 8d       	ldd	r24, Z+30	; 0x1e
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	c8 17       	cp	r28, r24
     aca:	d9 07       	cpc	r29, r25
     acc:	f4 f2       	brlt	.-68     	; 0xa8a <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     ad8:	80 55       	subi	r24, 0x50	; 80
     ada:	e0 e0       	ldi	r30, 0x00	; 0
     adc:	f0 e1       	ldi	r31, 0x10	; 16
     ade:	80 83       	st	Z, r24
     ae0:	86 2f       	mov	r24, r22
     ae2:	8f 70       	andi	r24, 0x0F	; 15
     ae4:	80 83       	st	Z, r24
     ae6:	62 95       	swap	r22
     ae8:	6f 70       	andi	r22, 0x0F	; 15
     aea:	60 61       	ori	r22, 0x10	; 16
     aec:	60 83       	st	Z, r22
     aee:	08 95       	ret

00000af0 <oled_reset>:
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	c0 e0       	ldi	r28, 0x00	; 0
     afa:	d2 e1       	ldi	r29, 0x12	; 18
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	81 2f       	mov	r24, r17
     b00:	0e 94 6c 05 	call	0xad8	; 0xad8 <oled_pos>
     b04:	80 e8       	ldi	r24, 0x80	; 128
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	18 82       	st	Y, r1
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	e9 f7       	brne	.-6      	; 0xb08 <oled_reset+0x18>
     b0e:	1f 5f       	subi	r17, 0xFF	; 255
     b10:	18 30       	cpi	r17, 0x08	; 8
     b12:	a1 f7       	brne	.-24     	; 0xafc <oled_reset+0xc>
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	08 95       	ret

00000b1c <oled_print_arrow>:
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f2 e1       	ldi	r31, 0x12	; 18
     b20:	88 e1       	ldi	r24, 0x18	; 24
     b22:	80 83       	st	Z, r24
     b24:	9c e3       	ldi	r25, 0x3C	; 60
     b26:	90 83       	st	Z, r25
     b28:	9e e7       	ldi	r25, 0x7E	; 126
     b2a:	90 83       	st	Z, r25
     b2c:	80 83       	st	Z, r24
     b2e:	80 83       	st	Z, r24
     b30:	08 95       	ret

00000b32 <oled_home>:
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 6c 05 	call	0xad8	; 0xad8 <oled_pos>
     b3a:	08 95       	ret

00000b3c <oled_init>:
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e1       	ldi	r31, 0x10	; 16
     b40:	8e ea       	ldi	r24, 0xAE	; 174
     b42:	80 83       	st	Z, r24
     b44:	81 ea       	ldi	r24, 0xA1	; 161
     b46:	80 83       	st	Z, r24
     b48:	8a ed       	ldi	r24, 0xDA	; 218
     b4a:	80 83       	st	Z, r24
     b4c:	82 e1       	ldi	r24, 0x12	; 18
     b4e:	80 83       	st	Z, r24
     b50:	88 ec       	ldi	r24, 0xC8	; 200
     b52:	80 83       	st	Z, r24
     b54:	88 ea       	ldi	r24, 0xA8	; 168
     b56:	80 83       	st	Z, r24
     b58:	8f e3       	ldi	r24, 0x3F	; 63
     b5a:	80 83       	st	Z, r24
     b5c:	85 ed       	ldi	r24, 0xD5	; 213
     b5e:	80 83       	st	Z, r24
     b60:	80 e8       	ldi	r24, 0x80	; 128
     b62:	80 83       	st	Z, r24
     b64:	81 e8       	ldi	r24, 0x81	; 129
     b66:	80 83       	st	Z, r24
     b68:	80 e5       	ldi	r24, 0x50	; 80
     b6a:	80 83       	st	Z, r24
     b6c:	89 ed       	ldi	r24, 0xD9	; 217
     b6e:	80 83       	st	Z, r24
     b70:	81 e2       	ldi	r24, 0x21	; 33
     b72:	80 83       	st	Z, r24
     b74:	80 e2       	ldi	r24, 0x20	; 32
     b76:	80 83       	st	Z, r24
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	80 83       	st	Z, r24
     b7c:	8b ed       	ldi	r24, 0xDB	; 219
     b7e:	80 83       	st	Z, r24
     b80:	80 e3       	ldi	r24, 0x30	; 48
     b82:	80 83       	st	Z, r24
     b84:	8d ea       	ldi	r24, 0xAD	; 173
     b86:	80 83       	st	Z, r24
     b88:	10 82       	st	Z, r1
     b8a:	84 ea       	ldi	r24, 0xA4	; 164
     b8c:	80 83       	st	Z, r24
     b8e:	86 ea       	ldi	r24, 0xA6	; 166
     b90:	80 83       	st	Z, r24
     b92:	8f ea       	ldi	r24, 0xAF	; 175
     b94:	80 83       	st	Z, r24
     b96:	0e 94 78 05 	call	0xaf0	; 0xaf0 <oled_reset>
     b9a:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_home>
     b9e:	08 95       	ret

00000ba0 <oled_gotoLine>:
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	0e 94 6c 05 	call	0xad8	; 0xad8 <oled_pos>
     ba6:	08 95       	ret

00000ba8 <oled_print>:

void oled_print(char* character){
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	dc 01       	movw	r26, r24
	while (*character != '\0')
     bae:	8c 91       	ld	r24, X
     bb0:	81 11       	cpse	r24, r1
     bb2:	1a c0       	rjmp	.+52     	; 0xbe8 <oled_print+0x40>
     bb4:	1e c0       	rjmp	.+60     	; 0xbf2 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     bb6:	ec 91       	ld	r30, X
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	b0 97       	sbiw	r30, 0x20	; 32
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e2 0f       	add	r30, r18
     bca:	f3 1f       	adc	r31, r19
     bcc:	e7 5d       	subi	r30, 0xD7	; 215
     bce:	fd 4f       	sbci	r31, 0xFD	; 253
     bd0:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     bd2:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	28 30       	cpi	r18, 0x08	; 8
     bda:	31 05       	cpc	r19, r1
     bdc:	61 f7       	brne	.-40     	; 0xbb6 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     bde:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     be0:	8c 91       	ld	r24, X
     be2:	81 11       	cpse	r24, r1
     be4:	03 c0       	rjmp	.+6      	; 0xbec <oled_print+0x44>
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     be8:	c0 e0       	ldi	r28, 0x00	; 0
     bea:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	e2 cf       	rjmp	.-60     	; 0xbb6 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "CAN_controller.h"

	uint8_t setupInit(void){
		cli();
     bf8:	f8 94       	cli
	xmem_init();
     bfa:	0e 94 d7 06 	call	0xdae	; 0xdae <xmem_init>
	USART_init(MYUBRR);
     bfe:	8f e1       	ldi	r24, 0x1F	; 31
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 c6 06 	call	0xd8c	; 0xd8c <USART_init>
	adcInit();
     c06:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
	joystickInit();
     c0a:	0e 94 0a 04 	call	0x814	; 0x814 <joystickInit>
	touchButton_init();
     c0e:	0e 94 99 06 	call	0xd32	; 0xd32 <touchButton_init>
	oled_init();
     c12:	0e 94 9e 05 	call	0xb3c	; 0xb3c <oled_init>
	timer_init();
     c16:	0e 94 8b 06 	call	0xd16	; 0xd16 <timer_init>
	sleep_init();
     c1a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <sleep_init>
	//menuInit();
	
	if (!CAN_controller_init()) {
     c1e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <CAN_controller_init>
     c22:	88 23       	and	r24, r24
     c24:	11 f0       	breq	.+4      	; 0xc2a <setupInit+0x32>
		return 0;
	}
		sei();
     c26:	78 94       	sei
	return 1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	08 95       	ret

00000c2c <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     c36:	ca eb       	ldi	r28, 0xBA	; 186
     c38:	d2 e0       	ldi	r29, 0x02	; 2
     c3a:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     c42:	89 83       	std	Y+1, r24	; 0x01
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     c4a:	80 ea       	ldi	r24, 0xA0	; 160
     c4c:	87 bb       	out	0x17, r24	; 23
     c4e:	bc 9a       	sbi	0x17, 4	; 23
     c50:	8d b1       	in	r24, 0x0d	; 13
     c52:	81 65       	ori	r24, 0x51	; 81
     c54:	8d b9       	out	0x0d, r24	; 13
     c56:	c4 9a       	sbi	0x18, 4	; 24
     c58:	08 95       	ret

00000c5a <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     c5a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     c5c:	77 9b       	sbis	0x0e, 7	; 14
     c5e:	fe cf       	rjmp	.-4      	; 0xc5c <SPI_masterWrite+0x2>

}
     c60:	08 95       	ret

00000c62 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     c62:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     c64:	77 9b       	sbis	0x0e, 7	; 14
     c66:	fe cf       	rjmp	.-4      	; 0xc64 <SPI_masterRead+0x2>
	return SPDR;
     c68:	8f b1       	in	r24, 0x0f	; 15
}
     c6a:	08 95       	ret

00000c6c <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     c6c:	66 23       	and	r22, r22
     c6e:	69 f0       	breq	.+26     	; 0xc8a <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     c70:	48 b3       	in	r20, 0x18	; 24
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	b9 01       	movw	r22, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <SPI_setChipSelect+0x12>
     c7a:	66 0f       	add	r22, r22
     c7c:	77 1f       	adc	r23, r23
     c7e:	8a 95       	dec	r24
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <SPI_setChipSelect+0xe>
     c82:	cb 01       	movw	r24, r22
     c84:	84 2b       	or	r24, r20
     c86:	88 bb       	out	0x18, r24	; 24
     c88:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     c8a:	48 b3       	in	r20, 0x18	; 24
     c8c:	21 e0       	ldi	r18, 0x01	; 1
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	b9 01       	movw	r22, r18
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <SPI_setChipSelect+0x2c>
     c94:	66 0f       	add	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	8a 95       	dec	r24
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <SPI_setChipSelect+0x28>
     c9c:	cb 01       	movw	r24, r22
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	88 bb       	out	0x18, r24	; 24
     ca4:	08 95       	ret

00000ca6 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
	cli();
     cc8:	f8 94       	cli
	TCNT1 = 0x00;
     cca:	1d bc       	out	0x2d, r1	; 45
     ccc:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     cce:	80 eb       	ldi	r24, 0xB0	; 176
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 15 04 	call	0x82a	; 0x82a <joystick_readPosition>
	slider_readPosition(&slider_pos);
     cd6:	8a eb       	ldi	r24, 0xBA	; 186
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 16 06 	call	0xc2c	; 0xc2c <slider_readPosition>
	touchButton_readButtons(&buttons);
     cde:	88 eb       	ldi	r24, 0xB8	; 184
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 b2 06 	call	0xd64	; 0xd64 <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     ce6:	80 eb       	ldi	r24, 0xB0	; 176
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	0e 94 cc 04 	call	0x998	; 0x998 <navigateMenu>
	menu_printCurrentMenu();
     cee:	0e 94 2e 05 	call	0xa5c	; 0xa5c <menu_printCurrentMenu>
	sei();
     cf2:	78 94       	sei
}
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     d16:	89 b7       	in	r24, 0x39	; 57
     d18:	80 62       	ori	r24, 0x20	; 32
     d1a:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     d1c:	1d bc       	out	0x2d, r1	; 45
     d1e:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     d20:	80 e3       	ldi	r24, 0x30	; 48
     d22:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     d24:	85 e0       	ldi	r24, 0x05	; 5
     d26:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     d28:	80 ef       	ldi	r24, 0xF0	; 240
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	99 bd       	out	0x29, r25	; 41
     d2e:	88 bd       	out	0x28, r24	; 40
     d30:	08 95       	ret

00000d32 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     d32:	36 b3       	in	r19, 0x16	; 22
     d34:	26 b3       	in	r18, 0x16	; 22
     d36:	47 b3       	in	r20, 0x17	; 23
     d38:	32 70       	andi	r19, 0x02	; 2
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	bc 01       	movw	r22, r24
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <touchButton_init+0x14>
     d42:	66 0f       	add	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	3a 95       	dec	r19
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <touchButton_init+0x10>
     d4a:	24 70       	andi	r18, 0x04	; 4
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <touchButton_init+0x20>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	2a 95       	dec	r18
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <touchButton_init+0x1c>
     d56:	86 2b       	or	r24, r22
     d58:	97 2b       	or	r25, r23
     d5a:	80 95       	com	r24
     d5c:	90 95       	com	r25
     d5e:	84 23       	and	r24, r20
     d60:	87 bb       	out	0x17, r24	; 23
     d62:	08 95       	ret

00000d64 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     d64:	86 b3       	in	r24, 0x16	; 22
     d66:	e8 eb       	ldi	r30, 0xB8	; 184
     d68:	f2 e0       	ldi	r31, 0x02	; 2
     d6a:	86 95       	lsr	r24
     d6c:	81 70       	andi	r24, 0x01	; 1
     d6e:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     d70:	86 b3       	in	r24, 0x16	; 22
     d72:	82 fb       	bst	r24, 2
     d74:	88 27       	eor	r24, r24
     d76:	80 f9       	bld	r24, 0
     d78:	81 83       	std	Z+1, r24	; 0x01
     d7a:	08 95       	ret

00000d7c <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     d7c:	5d 9b       	sbis	0x0b, 5	; 11
     d7e:	fe cf       	rjmp	.-4      	; 0xd7c <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     d80:	8c b9       	out	0x0c, r24	; 12
     d82:	08 95       	ret

00000d84 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     d84:	5f 9b       	sbis	0x0b, 7	; 11
     d86:	fe cf       	rjmp	.-4      	; 0xd84 <USART_receiveChar>
		;
	
	return UDR0;
     d88:	8c b1       	in	r24, 0x0c	; 12
     d8a:	08 95       	ret

00000d8c <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     d8c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     d8e:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     d90:	88 e1       	ldi	r24, 0x18	; 24
     d92:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     d94:	8e e8       	ldi	r24, 0x8E	; 142
     d96:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     d98:	62 ec       	ldi	r22, 0xC2	; 194
     d9a:	76 e0       	ldi	r23, 0x06	; 6
     d9c:	8e eb       	ldi	r24, 0xBE	; 190
     d9e:	96 e0       	ldi	r25, 0x06	; 6
     da0:	0e 94 07 0b 	call	0x160e	; 0x160e <fdevopen>
     da4:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <uart+0x1>
     da8:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <uart>
     dac:	08 95       	ret

00000dae <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     dae:	85 b7       	in	r24, 0x35	; 53
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     db4:	80 b7       	in	r24, 0x30	; 48
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	80 bf       	out	0x30, r24	; 48
     dba:	08 95       	ret
     dbc:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     dc0:	60 f0       	brcs	.+24     	; 0xdda <xmem_init+0x2c>
     dc2:	80 e8       	ldi	r24, 0x80	; 128
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	09 f4       	brne	.+2      	; 0xdca <xmem_init+0x1c>
     dc8:	9e ef       	ldi	r25, 0xFE	; 254
     dca:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     dce:	28 f0       	brcs	.+10     	; 0xdda <xmem_init+0x2c>
     dd0:	40 e8       	ldi	r20, 0x80	; 128
     dd2:	51 e0       	ldi	r21, 0x01	; 1
     dd4:	71 f4       	brne	.+28     	; 0xdf2 <atan2+0x10>
     dd6:	5e ef       	ldi	r21, 0xFE	; 254
     dd8:	0c c0       	rjmp	.+24     	; 0xdf2 <atan2+0x10>
     dda:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_nan>
     dde:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_zero>

00000de2 <atan2>:
     de2:	e9 2f       	mov	r30, r25
     de4:	e0 78       	andi	r30, 0x80	; 128
     de6:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     dea:	40 f3       	brcs	.-48     	; 0xdbc <xmem_init+0xe>
     dec:	09 2e       	mov	r0, r25
     dee:	05 2a       	or	r0, r21
     df0:	b1 f3       	breq	.-20     	; 0xdde <xmem_init+0x30>
     df2:	26 17       	cp	r18, r22
     df4:	37 07       	cpc	r19, r23
     df6:	48 07       	cpc	r20, r24
     df8:	59 07       	cpc	r21, r25
     dfa:	38 f0       	brcs	.+14     	; 0xe0a <atan2+0x28>
     dfc:	0e 2e       	mov	r0, r30
     dfe:	07 f8       	bld	r0, 7
     e00:	e0 25       	eor	r30, r0
     e02:	69 f0       	breq	.+26     	; 0xe1e <atan2+0x3c>
     e04:	e0 25       	eor	r30, r0
     e06:	e0 64       	ori	r30, 0x40	; 64
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <atan2+0x3c>
     e0a:	ef 63       	ori	r30, 0x3F	; 63
     e0c:	07 f8       	bld	r0, 7
     e0e:	00 94       	com	r0
     e10:	07 fa       	bst	r0, 7
     e12:	db 01       	movw	r26, r22
     e14:	b9 01       	movw	r22, r18
     e16:	9d 01       	movw	r18, r26
     e18:	dc 01       	movw	r26, r24
     e1a:	ca 01       	movw	r24, r20
     e1c:	ad 01       	movw	r20, r26
     e1e:	ef 93       	push	r30
     e20:	0e 94 67 07 	call	0xece	; 0xece <__divsf3_pse>
     e24:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fp_round>
     e28:	0e 94 21 07 	call	0xe42	; 0xe42 <atan>
     e2c:	5f 91       	pop	r21
     e2e:	55 23       	and	r21, r21
     e30:	39 f0       	breq	.+14     	; 0xe40 <atan2+0x5e>
     e32:	2b ed       	ldi	r18, 0xDB	; 219
     e34:	3f e0       	ldi	r19, 0x0F	; 15
     e36:	49 e4       	ldi	r20, 0x49	; 73
     e38:	50 fd       	sbrc	r21, 0
     e3a:	49 ec       	ldi	r20, 0xC9	; 201
     e3c:	0c 94 27 09 	jmp	0x124e	; 0x124e <__addsf3>
     e40:	08 95       	ret

00000e42 <atan>:
     e42:	df 93       	push	r29
     e44:	dd 27       	eor	r29, r29
     e46:	b9 2f       	mov	r27, r25
     e48:	bf 77       	andi	r27, 0x7F	; 127
     e4a:	40 e8       	ldi	r20, 0x80	; 128
     e4c:	5f e3       	ldi	r21, 0x3F	; 63
     e4e:	16 16       	cp	r1, r22
     e50:	17 06       	cpc	r1, r23
     e52:	48 07       	cpc	r20, r24
     e54:	5b 07       	cpc	r21, r27
     e56:	18 f4       	brcc	.+6      	; 0xe5e <atan+0x1c>
     e58:	d9 2f       	mov	r29, r25
     e5a:	0e 94 ad 08 	call	0x115a	; 0x115a <inverse>
     e5e:	9f 93       	push	r25
     e60:	8f 93       	push	r24
     e62:	7f 93       	push	r23
     e64:	6f 93       	push	r22
     e66:	0e 94 22 09 	call	0x1244	; 0x1244 <square>
     e6a:	e0 e7       	ldi	r30, 0x70	; 112
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	0e 94 3e 08 	call	0x107c	; 0x107c <__fp_powser>
     e72:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fp_round>
     e76:	2f 91       	pop	r18
     e78:	3f 91       	pop	r19
     e7a:	4f 91       	pop	r20
     e7c:	5f 91       	pop	r21
     e7e:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulsf3x>
     e82:	dd 23       	and	r29, r29
     e84:	51 f0       	breq	.+20     	; 0xe9a <atan+0x58>
     e86:	90 58       	subi	r25, 0x80	; 128
     e88:	a2 ea       	ldi	r26, 0xA2	; 162
     e8a:	2a ed       	ldi	r18, 0xDA	; 218
     e8c:	3f e0       	ldi	r19, 0x0F	; 15
     e8e:	49 ec       	ldi	r20, 0xC9	; 201
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	d0 78       	andi	r29, 0x80	; 128
     e94:	5d 27       	eor	r21, r29
     e96:	0e 94 3e 09 	call	0x127c	; 0x127c <__addsf3x>
     e9a:	df 91       	pop	r29
     e9c:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>

00000ea0 <__divsf3>:
     ea0:	0e 94 64 07 	call	0xec8	; 0xec8 <__divsf3x>
     ea4:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
     ea8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     eac:	58 f0       	brcs	.+22     	; 0xec4 <__divsf3+0x24>
     eae:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     eb2:	40 f0       	brcs	.+16     	; 0xec4 <__divsf3+0x24>
     eb4:	29 f4       	brne	.+10     	; 0xec0 <__divsf3+0x20>
     eb6:	5f 3f       	cpi	r21, 0xFF	; 255
     eb8:	29 f0       	breq	.+10     	; 0xec4 <__divsf3+0x24>
     eba:	0c 94 35 08 	jmp	0x106a	; 0x106a <__fp_inf>
     ebe:	51 11       	cpse	r21, r1
     ec0:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     ec4:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_nan>

00000ec8 <__divsf3x>:
     ec8:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     ecc:	68 f3       	brcs	.-38     	; 0xea8 <__divsf3+0x8>

00000ece <__divsf3_pse>:
     ece:	99 23       	and	r25, r25
     ed0:	b1 f3       	breq	.-20     	; 0xebe <__divsf3+0x1e>
     ed2:	55 23       	and	r21, r21
     ed4:	91 f3       	breq	.-28     	; 0xeba <__divsf3+0x1a>
     ed6:	95 1b       	sub	r25, r21
     ed8:	55 0b       	sbc	r21, r21
     eda:	bb 27       	eor	r27, r27
     edc:	aa 27       	eor	r26, r26
     ede:	62 17       	cp	r22, r18
     ee0:	73 07       	cpc	r23, r19
     ee2:	84 07       	cpc	r24, r20
     ee4:	38 f0       	brcs	.+14     	; 0xef4 <__divsf3_pse+0x26>
     ee6:	9f 5f       	subi	r25, 0xFF	; 255
     ee8:	5f 4f       	sbci	r21, 0xFF	; 255
     eea:	22 0f       	add	r18, r18
     eec:	33 1f       	adc	r19, r19
     eee:	44 1f       	adc	r20, r20
     ef0:	aa 1f       	adc	r26, r26
     ef2:	a9 f3       	breq	.-22     	; 0xede <__divsf3_pse+0x10>
     ef4:	35 d0       	rcall	.+106    	; 0xf60 <__divsf3_pse+0x92>
     ef6:	0e 2e       	mov	r0, r30
     ef8:	3a f0       	brmi	.+14     	; 0xf08 <__divsf3_pse+0x3a>
     efa:	e0 e8       	ldi	r30, 0x80	; 128
     efc:	32 d0       	rcall	.+100    	; 0xf62 <__divsf3_pse+0x94>
     efe:	91 50       	subi	r25, 0x01	; 1
     f00:	50 40       	sbci	r21, 0x00	; 0
     f02:	e6 95       	lsr	r30
     f04:	00 1c       	adc	r0, r0
     f06:	ca f7       	brpl	.-14     	; 0xefa <__divsf3_pse+0x2c>
     f08:	2b d0       	rcall	.+86     	; 0xf60 <__divsf3_pse+0x92>
     f0a:	fe 2f       	mov	r31, r30
     f0c:	29 d0       	rcall	.+82     	; 0xf60 <__divsf3_pse+0x92>
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	bb 1f       	adc	r27, r27
     f16:	26 17       	cp	r18, r22
     f18:	37 07       	cpc	r19, r23
     f1a:	48 07       	cpc	r20, r24
     f1c:	ab 07       	cpc	r26, r27
     f1e:	b0 e8       	ldi	r27, 0x80	; 128
     f20:	09 f0       	breq	.+2      	; 0xf24 <__divsf3_pse+0x56>
     f22:	bb 0b       	sbc	r27, r27
     f24:	80 2d       	mov	r24, r0
     f26:	bf 01       	movw	r22, r30
     f28:	ff 27       	eor	r31, r31
     f2a:	93 58       	subi	r25, 0x83	; 131
     f2c:	5f 4f       	sbci	r21, 0xFF	; 255
     f2e:	3a f0       	brmi	.+14     	; 0xf3e <__divsf3_pse+0x70>
     f30:	9e 3f       	cpi	r25, 0xFE	; 254
     f32:	51 05       	cpc	r21, r1
     f34:	78 f0       	brcs	.+30     	; 0xf54 <__divsf3_pse+0x86>
     f36:	0c 94 35 08 	jmp	0x106a	; 0x106a <__fp_inf>
     f3a:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     f3e:	5f 3f       	cpi	r21, 0xFF	; 255
     f40:	e4 f3       	brlt	.-8      	; 0xf3a <__divsf3_pse+0x6c>
     f42:	98 3e       	cpi	r25, 0xE8	; 232
     f44:	d4 f3       	brlt	.-12     	; 0xf3a <__divsf3_pse+0x6c>
     f46:	86 95       	lsr	r24
     f48:	77 95       	ror	r23
     f4a:	67 95       	ror	r22
     f4c:	b7 95       	ror	r27
     f4e:	f7 95       	ror	r31
     f50:	9f 5f       	subi	r25, 0xFF	; 255
     f52:	c9 f7       	brne	.-14     	; 0xf46 <__divsf3_pse+0x78>
     f54:	88 0f       	add	r24, r24
     f56:	91 1d       	adc	r25, r1
     f58:	96 95       	lsr	r25
     f5a:	87 95       	ror	r24
     f5c:	97 f9       	bld	r25, 7
     f5e:	08 95       	ret
     f60:	e1 e0       	ldi	r30, 0x01	; 1
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	88 1f       	adc	r24, r24
     f68:	bb 1f       	adc	r27, r27
     f6a:	62 17       	cp	r22, r18
     f6c:	73 07       	cpc	r23, r19
     f6e:	84 07       	cpc	r24, r20
     f70:	ba 07       	cpc	r27, r26
     f72:	20 f0       	brcs	.+8      	; 0xf7c <__divsf3_pse+0xae>
     f74:	62 1b       	sub	r22, r18
     f76:	73 0b       	sbc	r23, r19
     f78:	84 0b       	sbc	r24, r20
     f7a:	ba 0b       	sbc	r27, r26
     f7c:	ee 1f       	adc	r30, r30
     f7e:	88 f7       	brcc	.-30     	; 0xf62 <__divsf3_pse+0x94>
     f80:	e0 95       	com	r30
     f82:	08 95       	ret

00000f84 <__fixsfsi>:
     f84:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     f88:	68 94       	set
     f8a:	b1 11       	cpse	r27, r1
     f8c:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     f90:	08 95       	ret

00000f92 <__fixunssfsi>:
     f92:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_splitA>
     f96:	88 f0       	brcs	.+34     	; 0xfba <__fixunssfsi+0x28>
     f98:	9f 57       	subi	r25, 0x7F	; 127
     f9a:	98 f0       	brcs	.+38     	; 0xfc2 <__fixunssfsi+0x30>
     f9c:	b9 2f       	mov	r27, r25
     f9e:	99 27       	eor	r25, r25
     fa0:	b7 51       	subi	r27, 0x17	; 23
     fa2:	b0 f0       	brcs	.+44     	; 0xfd0 <__fixunssfsi+0x3e>
     fa4:	e1 f0       	breq	.+56     	; 0xfde <__fixunssfsi+0x4c>
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	1a f0       	brmi	.+6      	; 0xfb6 <__fixunssfsi+0x24>
     fb0:	ba 95       	dec	r27
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__fixunssfsi+0x14>
     fb4:	14 c0       	rjmp	.+40     	; 0xfde <__fixunssfsi+0x4c>
     fb6:	b1 30       	cpi	r27, 0x01	; 1
     fb8:	91 f0       	breq	.+36     	; 0xfde <__fixunssfsi+0x4c>
     fba:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_zero>
     fbe:	b1 e0       	ldi	r27, 0x01	; 1
     fc0:	08 95       	ret
     fc2:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_zero>
     fc6:	67 2f       	mov	r22, r23
     fc8:	78 2f       	mov	r23, r24
     fca:	88 27       	eor	r24, r24
     fcc:	b8 5f       	subi	r27, 0xF8	; 248
     fce:	39 f0       	breq	.+14     	; 0xfde <__fixunssfsi+0x4c>
     fd0:	b9 3f       	cpi	r27, 0xF9	; 249
     fd2:	cc f3       	brlt	.-14     	; 0xfc6 <__fixunssfsi+0x34>
     fd4:	86 95       	lsr	r24
     fd6:	77 95       	ror	r23
     fd8:	67 95       	ror	r22
     fda:	b3 95       	inc	r27
     fdc:	d9 f7       	brne	.-10     	; 0xfd4 <__fixunssfsi+0x42>
     fde:	3e f4       	brtc	.+14     	; 0xfee <__fixunssfsi+0x5c>
     fe0:	90 95       	com	r25
     fe2:	80 95       	com	r24
     fe4:	70 95       	com	r23
     fe6:	61 95       	neg	r22
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8f 4f       	sbci	r24, 0xFF	; 255
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	08 95       	ret

00000ff0 <__floatunsisf>:
     ff0:	e8 94       	clt
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <__floatsisf+0x12>

00000ff4 <__floatsisf>:
     ff4:	97 fb       	bst	r25, 7
     ff6:	3e f4       	brtc	.+14     	; 0x1006 <__floatsisf+0x12>
     ff8:	90 95       	com	r25
     ffa:	80 95       	com	r24
     ffc:	70 95       	com	r23
     ffe:	61 95       	neg	r22
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	99 23       	and	r25, r25
    1008:	a9 f0       	breq	.+42     	; 0x1034 <__floatsisf+0x40>
    100a:	f9 2f       	mov	r31, r25
    100c:	96 e9       	ldi	r25, 0x96	; 150
    100e:	bb 27       	eor	r27, r27
    1010:	93 95       	inc	r25
    1012:	f6 95       	lsr	r31
    1014:	87 95       	ror	r24
    1016:	77 95       	ror	r23
    1018:	67 95       	ror	r22
    101a:	b7 95       	ror	r27
    101c:	f1 11       	cpse	r31, r1
    101e:	f8 cf       	rjmp	.-16     	; 0x1010 <__floatsisf+0x1c>
    1020:	fa f4       	brpl	.+62     	; 0x1060 <__floatsisf+0x6c>
    1022:	bb 0f       	add	r27, r27
    1024:	11 f4       	brne	.+4      	; 0x102a <__floatsisf+0x36>
    1026:	60 ff       	sbrs	r22, 0
    1028:	1b c0       	rjmp	.+54     	; 0x1060 <__floatsisf+0x6c>
    102a:	6f 5f       	subi	r22, 0xFF	; 255
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	16 c0       	rjmp	.+44     	; 0x1060 <__floatsisf+0x6c>
    1034:	88 23       	and	r24, r24
    1036:	11 f0       	breq	.+4      	; 0x103c <__floatsisf+0x48>
    1038:	96 e9       	ldi	r25, 0x96	; 150
    103a:	11 c0       	rjmp	.+34     	; 0x105e <__floatsisf+0x6a>
    103c:	77 23       	and	r23, r23
    103e:	21 f0       	breq	.+8      	; 0x1048 <__floatsisf+0x54>
    1040:	9e e8       	ldi	r25, 0x8E	; 142
    1042:	87 2f       	mov	r24, r23
    1044:	76 2f       	mov	r23, r22
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <__floatsisf+0x5e>
    1048:	66 23       	and	r22, r22
    104a:	71 f0       	breq	.+28     	; 0x1068 <__floatsisf+0x74>
    104c:	96 e8       	ldi	r25, 0x86	; 134
    104e:	86 2f       	mov	r24, r22
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	2a f0       	brmi	.+10     	; 0x1060 <__floatsisf+0x6c>
    1056:	9a 95       	dec	r25
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	88 1f       	adc	r24, r24
    105e:	da f7       	brpl	.-10     	; 0x1056 <__floatsisf+0x62>
    1060:	88 0f       	add	r24, r24
    1062:	96 95       	lsr	r25
    1064:	87 95       	ror	r24
    1066:	97 f9       	bld	r25, 7
    1068:	08 95       	ret

0000106a <__fp_inf>:
    106a:	97 f9       	bld	r25, 7
    106c:	9f 67       	ori	r25, 0x7F	; 127
    106e:	80 e8       	ldi	r24, 0x80	; 128
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	08 95       	ret

00001076 <__fp_nan>:
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	80 ec       	ldi	r24, 0xC0	; 192
    107a:	08 95       	ret

0000107c <__fp_powser>:
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	1f 93       	push	r17
    1082:	0f 93       	push	r16
    1084:	ff 92       	push	r15
    1086:	ef 92       	push	r14
    1088:	df 92       	push	r13
    108a:	7b 01       	movw	r14, r22
    108c:	8c 01       	movw	r16, r24
    108e:	68 94       	set
    1090:	06 c0       	rjmp	.+12     	; 0x109e <__fp_powser+0x22>
    1092:	da 2e       	mov	r13, r26
    1094:	ef 01       	movw	r28, r30
    1096:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulsf3x>
    109a:	fe 01       	movw	r30, r28
    109c:	e8 94       	clt
    109e:	a5 91       	lpm	r26, Z+
    10a0:	25 91       	lpm	r18, Z+
    10a2:	35 91       	lpm	r19, Z+
    10a4:	45 91       	lpm	r20, Z+
    10a6:	55 91       	lpm	r21, Z+
    10a8:	a6 f3       	brts	.-24     	; 0x1092 <__fp_powser+0x16>
    10aa:	ef 01       	movw	r28, r30
    10ac:	0e 94 3e 09 	call	0x127c	; 0x127c <__addsf3x>
    10b0:	fe 01       	movw	r30, r28
    10b2:	97 01       	movw	r18, r14
    10b4:	a8 01       	movw	r20, r16
    10b6:	da 94       	dec	r13
    10b8:	69 f7       	brne	.-38     	; 0x1094 <__fp_powser+0x18>
    10ba:	df 90       	pop	r13
    10bc:	ef 90       	pop	r14
    10be:	ff 90       	pop	r15
    10c0:	0f 91       	pop	r16
    10c2:	1f 91       	pop	r17
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <__fp_pscA>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	18 06       	cpc	r1, r24
    10d4:	09 06       	cpc	r0, r25
    10d6:	08 95       	ret

000010d8 <__fp_pscB>:
    10d8:	00 24       	eor	r0, r0
    10da:	0a 94       	dec	r0
    10dc:	12 16       	cp	r1, r18
    10de:	13 06       	cpc	r1, r19
    10e0:	14 06       	cpc	r1, r20
    10e2:	05 06       	cpc	r0, r21
    10e4:	08 95       	ret

000010e6 <__fp_round>:
    10e6:	09 2e       	mov	r0, r25
    10e8:	03 94       	inc	r0
    10ea:	00 0c       	add	r0, r0
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__fp_round+0xc>
    10ee:	88 23       	and	r24, r24
    10f0:	52 f0       	brmi	.+20     	; 0x1106 <__fp_round+0x20>
    10f2:	bb 0f       	add	r27, r27
    10f4:	40 f4       	brcc	.+16     	; 0x1106 <__fp_round+0x20>
    10f6:	bf 2b       	or	r27, r31
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__fp_round+0x18>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <__fp_round+0x20>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__fp_split3>:
    1108:	57 fd       	sbrc	r21, 7
    110a:	90 58       	subi	r25, 0x80	; 128
    110c:	44 0f       	add	r20, r20
    110e:	55 1f       	adc	r21, r21
    1110:	59 f0       	breq	.+22     	; 0x1128 <__fp_splitA+0x10>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	71 f0       	breq	.+28     	; 0x1132 <__fp_splitA+0x1a>
    1116:	47 95       	ror	r20

00001118 <__fp_splitA>:
    1118:	88 0f       	add	r24, r24
    111a:	97 fb       	bst	r25, 7
    111c:	99 1f       	adc	r25, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <__fp_splitA+0x20>
    1120:	9f 3f       	cpi	r25, 0xFF	; 255
    1122:	79 f0       	breq	.+30     	; 0x1142 <__fp_splitA+0x2a>
    1124:	87 95       	ror	r24
    1126:	08 95       	ret
    1128:	12 16       	cp	r1, r18
    112a:	13 06       	cpc	r1, r19
    112c:	14 06       	cpc	r1, r20
    112e:	55 1f       	adc	r21, r21
    1130:	f2 cf       	rjmp	.-28     	; 0x1116 <__fp_split3+0xe>
    1132:	46 95       	lsr	r20
    1134:	f1 df       	rcall	.-30     	; 0x1118 <__fp_splitA>
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <__fp_splitA+0x30>
    1138:	16 16       	cp	r1, r22
    113a:	17 06       	cpc	r1, r23
    113c:	18 06       	cpc	r1, r24
    113e:	99 1f       	adc	r25, r25
    1140:	f1 cf       	rjmp	.-30     	; 0x1124 <__fp_splitA+0xc>
    1142:	86 95       	lsr	r24
    1144:	71 05       	cpc	r23, r1
    1146:	61 05       	cpc	r22, r1
    1148:	08 94       	sec
    114a:	08 95       	ret

0000114c <__fp_zero>:
    114c:	e8 94       	clt

0000114e <__fp_szero>:
    114e:	bb 27       	eor	r27, r27
    1150:	66 27       	eor	r22, r22
    1152:	77 27       	eor	r23, r23
    1154:	cb 01       	movw	r24, r22
    1156:	97 f9       	bld	r25, 7
    1158:	08 95       	ret

0000115a <inverse>:
    115a:	9b 01       	movw	r18, r22
    115c:	ac 01       	movw	r20, r24
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	80 e8       	ldi	r24, 0x80	; 128
    1164:	9f e3       	ldi	r25, 0x3F	; 63
    1166:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__divsf3>

0000116a <__mulsf3>:
    116a:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulsf3x>
    116e:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
    1172:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
    1176:	38 f0       	brcs	.+14     	; 0x1186 <__mulsf3+0x1c>
    1178:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
    117c:	20 f0       	brcs	.+8      	; 0x1186 <__mulsf3+0x1c>
    117e:	95 23       	and	r25, r21
    1180:	11 f0       	breq	.+4      	; 0x1186 <__mulsf3+0x1c>
    1182:	0c 94 35 08 	jmp	0x106a	; 0x106a <__fp_inf>
    1186:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_nan>
    118a:	11 24       	eor	r1, r1
    118c:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>

00001190 <__mulsf3x>:
    1190:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
    1194:	70 f3       	brcs	.-36     	; 0x1172 <__mulsf3+0x8>

00001196 <__mulsf3_pse>:
    1196:	95 9f       	mul	r25, r21
    1198:	c1 f3       	breq	.-16     	; 0x118a <__mulsf3+0x20>
    119a:	95 0f       	add	r25, r21
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	55 1f       	adc	r21, r21
    11a0:	62 9f       	mul	r22, r18
    11a2:	f0 01       	movw	r30, r0
    11a4:	72 9f       	mul	r23, r18
    11a6:	bb 27       	eor	r27, r27
    11a8:	f0 0d       	add	r31, r0
    11aa:	b1 1d       	adc	r27, r1
    11ac:	63 9f       	mul	r22, r19
    11ae:	aa 27       	eor	r26, r26
    11b0:	f0 0d       	add	r31, r0
    11b2:	b1 1d       	adc	r27, r1
    11b4:	aa 1f       	adc	r26, r26
    11b6:	64 9f       	mul	r22, r20
    11b8:	66 27       	eor	r22, r22
    11ba:	b0 0d       	add	r27, r0
    11bc:	a1 1d       	adc	r26, r1
    11be:	66 1f       	adc	r22, r22
    11c0:	82 9f       	mul	r24, r18
    11c2:	22 27       	eor	r18, r18
    11c4:	b0 0d       	add	r27, r0
    11c6:	a1 1d       	adc	r26, r1
    11c8:	62 1f       	adc	r22, r18
    11ca:	73 9f       	mul	r23, r19
    11cc:	b0 0d       	add	r27, r0
    11ce:	a1 1d       	adc	r26, r1
    11d0:	62 1f       	adc	r22, r18
    11d2:	83 9f       	mul	r24, r19
    11d4:	a0 0d       	add	r26, r0
    11d6:	61 1d       	adc	r22, r1
    11d8:	22 1f       	adc	r18, r18
    11da:	74 9f       	mul	r23, r20
    11dc:	33 27       	eor	r19, r19
    11de:	a0 0d       	add	r26, r0
    11e0:	61 1d       	adc	r22, r1
    11e2:	23 1f       	adc	r18, r19
    11e4:	84 9f       	mul	r24, r20
    11e6:	60 0d       	add	r22, r0
    11e8:	21 1d       	adc	r18, r1
    11ea:	82 2f       	mov	r24, r18
    11ec:	76 2f       	mov	r23, r22
    11ee:	6a 2f       	mov	r22, r26
    11f0:	11 24       	eor	r1, r1
    11f2:	9f 57       	subi	r25, 0x7F	; 127
    11f4:	50 40       	sbci	r21, 0x00	; 0
    11f6:	9a f0       	brmi	.+38     	; 0x121e <__mulsf3_pse+0x88>
    11f8:	f1 f0       	breq	.+60     	; 0x1236 <__mulsf3_pse+0xa0>
    11fa:	88 23       	and	r24, r24
    11fc:	4a f0       	brmi	.+18     	; 0x1210 <__mulsf3_pse+0x7a>
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	bb 1f       	adc	r27, r27
    1204:	66 1f       	adc	r22, r22
    1206:	77 1f       	adc	r23, r23
    1208:	88 1f       	adc	r24, r24
    120a:	91 50       	subi	r25, 0x01	; 1
    120c:	50 40       	sbci	r21, 0x00	; 0
    120e:	a9 f7       	brne	.-22     	; 0x11fa <__mulsf3_pse+0x64>
    1210:	9e 3f       	cpi	r25, 0xFE	; 254
    1212:	51 05       	cpc	r21, r1
    1214:	80 f0       	brcs	.+32     	; 0x1236 <__mulsf3_pse+0xa0>
    1216:	0c 94 35 08 	jmp	0x106a	; 0x106a <__fp_inf>
    121a:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
    121e:	5f 3f       	cpi	r21, 0xFF	; 255
    1220:	e4 f3       	brlt	.-8      	; 0x121a <__mulsf3_pse+0x84>
    1222:	98 3e       	cpi	r25, 0xE8	; 232
    1224:	d4 f3       	brlt	.-12     	; 0x121a <__mulsf3_pse+0x84>
    1226:	86 95       	lsr	r24
    1228:	77 95       	ror	r23
    122a:	67 95       	ror	r22
    122c:	b7 95       	ror	r27
    122e:	f7 95       	ror	r31
    1230:	e7 95       	ror	r30
    1232:	9f 5f       	subi	r25, 0xFF	; 255
    1234:	c1 f7       	brne	.-16     	; 0x1226 <__mulsf3_pse+0x90>
    1236:	fe 2b       	or	r31, r30
    1238:	88 0f       	add	r24, r24
    123a:	91 1d       	adc	r25, r1
    123c:	96 95       	lsr	r25
    123e:	87 95       	ror	r24
    1240:	97 f9       	bld	r25, 7
    1242:	08 95       	ret

00001244 <square>:
    1244:	9b 01       	movw	r18, r22
    1246:	ac 01       	movw	r20, r24
    1248:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__mulsf3>

0000124c <__subsf3>:
    124c:	50 58       	subi	r21, 0x80	; 128

0000124e <__addsf3>:
    124e:	bb 27       	eor	r27, r27
    1250:	aa 27       	eor	r26, r26
    1252:	0e 94 3e 09 	call	0x127c	; 0x127c <__addsf3x>
    1256:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
    125a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
    125e:	38 f0       	brcs	.+14     	; 0x126e <__addsf3+0x20>
    1260:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
    1264:	20 f0       	brcs	.+8      	; 0x126e <__addsf3+0x20>
    1266:	39 f4       	brne	.+14     	; 0x1276 <__addsf3+0x28>
    1268:	9f 3f       	cpi	r25, 0xFF	; 255
    126a:	19 f4       	brne	.+6      	; 0x1272 <__addsf3+0x24>
    126c:	26 f4       	brtc	.+8      	; 0x1276 <__addsf3+0x28>
    126e:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_nan>
    1272:	0e f4       	brtc	.+2      	; 0x1276 <__addsf3+0x28>
    1274:	e0 95       	com	r30
    1276:	e7 fb       	bst	r30, 7
    1278:	0c 94 35 08 	jmp	0x106a	; 0x106a <__fp_inf>

0000127c <__addsf3x>:
    127c:	e9 2f       	mov	r30, r25
    127e:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
    1282:	58 f3       	brcs	.-42     	; 0x125a <__addsf3+0xc>
    1284:	ba 17       	cp	r27, r26
    1286:	62 07       	cpc	r22, r18
    1288:	73 07       	cpc	r23, r19
    128a:	84 07       	cpc	r24, r20
    128c:	95 07       	cpc	r25, r21
    128e:	20 f0       	brcs	.+8      	; 0x1298 <__addsf3x+0x1c>
    1290:	79 f4       	brne	.+30     	; 0x12b0 <__addsf3x+0x34>
    1292:	a6 f5       	brtc	.+104    	; 0x12fc <__addsf3x+0x80>
    1294:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_zero>
    1298:	0e f4       	brtc	.+2      	; 0x129c <__addsf3x+0x20>
    129a:	e0 95       	com	r30
    129c:	0b 2e       	mov	r0, r27
    129e:	ba 2f       	mov	r27, r26
    12a0:	a0 2d       	mov	r26, r0
    12a2:	0b 01       	movw	r0, r22
    12a4:	b9 01       	movw	r22, r18
    12a6:	90 01       	movw	r18, r0
    12a8:	0c 01       	movw	r0, r24
    12aa:	ca 01       	movw	r24, r20
    12ac:	a0 01       	movw	r20, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	ff 27       	eor	r31, r31
    12b2:	59 1b       	sub	r21, r25
    12b4:	99 f0       	breq	.+38     	; 0x12dc <__addsf3x+0x60>
    12b6:	59 3f       	cpi	r21, 0xF9	; 249
    12b8:	50 f4       	brcc	.+20     	; 0x12ce <__addsf3x+0x52>
    12ba:	50 3e       	cpi	r21, 0xE0	; 224
    12bc:	68 f1       	brcs	.+90     	; 0x1318 <__addsf3x+0x9c>
    12be:	1a 16       	cp	r1, r26
    12c0:	f0 40       	sbci	r31, 0x00	; 0
    12c2:	a2 2f       	mov	r26, r18
    12c4:	23 2f       	mov	r18, r19
    12c6:	34 2f       	mov	r19, r20
    12c8:	44 27       	eor	r20, r20
    12ca:	58 5f       	subi	r21, 0xF8	; 248
    12cc:	f3 cf       	rjmp	.-26     	; 0x12b4 <__addsf3x+0x38>
    12ce:	46 95       	lsr	r20
    12d0:	37 95       	ror	r19
    12d2:	27 95       	ror	r18
    12d4:	a7 95       	ror	r26
    12d6:	f0 40       	sbci	r31, 0x00	; 0
    12d8:	53 95       	inc	r21
    12da:	c9 f7       	brne	.-14     	; 0x12ce <__addsf3x+0x52>
    12dc:	7e f4       	brtc	.+30     	; 0x12fc <__addsf3x+0x80>
    12de:	1f 16       	cp	r1, r31
    12e0:	ba 0b       	sbc	r27, r26
    12e2:	62 0b       	sbc	r22, r18
    12e4:	73 0b       	sbc	r23, r19
    12e6:	84 0b       	sbc	r24, r20
    12e8:	ba f0       	brmi	.+46     	; 0x1318 <__addsf3x+0x9c>
    12ea:	91 50       	subi	r25, 0x01	; 1
    12ec:	a1 f0       	breq	.+40     	; 0x1316 <__addsf3x+0x9a>
    12ee:	ff 0f       	add	r31, r31
    12f0:	bb 1f       	adc	r27, r27
    12f2:	66 1f       	adc	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	c2 f7       	brpl	.-16     	; 0x12ea <__addsf3x+0x6e>
    12fa:	0e c0       	rjmp	.+28     	; 0x1318 <__addsf3x+0x9c>
    12fc:	ba 0f       	add	r27, r26
    12fe:	62 1f       	adc	r22, r18
    1300:	73 1f       	adc	r23, r19
    1302:	84 1f       	adc	r24, r20
    1304:	48 f4       	brcc	.+18     	; 0x1318 <__addsf3x+0x9c>
    1306:	87 95       	ror	r24
    1308:	77 95       	ror	r23
    130a:	67 95       	ror	r22
    130c:	b7 95       	ror	r27
    130e:	f7 95       	ror	r31
    1310:	9e 3f       	cpi	r25, 0xFE	; 254
    1312:	08 f0       	brcs	.+2      	; 0x1316 <__addsf3x+0x9a>
    1314:	b0 cf       	rjmp	.-160    	; 0x1276 <__addsf3+0x28>
    1316:	93 95       	inc	r25
    1318:	88 0f       	add	r24, r24
    131a:	08 f0       	brcs	.+2      	; 0x131e <__addsf3x+0xa2>
    131c:	99 27       	eor	r25, r25
    131e:	ee 0f       	add	r30, r30
    1320:	97 95       	ror	r25
    1322:	87 95       	ror	r24
    1324:	08 95       	ret

00001326 <__divmodhi4>:
    1326:	97 fb       	bst	r25, 7
    1328:	07 2e       	mov	r0, r23
    132a:	16 f4       	brtc	.+4      	; 0x1330 <__divmodhi4+0xa>
    132c:	00 94       	com	r0
    132e:	07 d0       	rcall	.+14     	; 0x133e <__divmodhi4_neg1>
    1330:	77 fd       	sbrc	r23, 7
    1332:	09 d0       	rcall	.+18     	; 0x1346 <__divmodhi4_neg2>
    1334:	0e 94 c9 09 	call	0x1392	; 0x1392 <__udivmodhi4>
    1338:	07 fc       	sbrc	r0, 7
    133a:	05 d0       	rcall	.+10     	; 0x1346 <__divmodhi4_neg2>
    133c:	3e f4       	brtc	.+14     	; 0x134c <__divmodhi4_exit>

0000133e <__divmodhi4_neg1>:
    133e:	90 95       	com	r25
    1340:	81 95       	neg	r24
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	08 95       	ret

00001346 <__divmodhi4_neg2>:
    1346:	70 95       	com	r23
    1348:	61 95       	neg	r22
    134a:	7f 4f       	sbci	r23, 0xFF	; 255

0000134c <__divmodhi4_exit>:
    134c:	08 95       	ret

0000134e <__udivmodsi4>:
    134e:	a1 e2       	ldi	r26, 0x21	; 33
    1350:	1a 2e       	mov	r1, r26
    1352:	aa 1b       	sub	r26, r26
    1354:	bb 1b       	sub	r27, r27
    1356:	fd 01       	movw	r30, r26
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <__udivmodsi4_ep>

0000135a <__udivmodsi4_loop>:
    135a:	aa 1f       	adc	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	ee 1f       	adc	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	a2 17       	cp	r26, r18
    1364:	b3 07       	cpc	r27, r19
    1366:	e4 07       	cpc	r30, r20
    1368:	f5 07       	cpc	r31, r21
    136a:	20 f0       	brcs	.+8      	; 0x1374 <__udivmodsi4_ep>
    136c:	a2 1b       	sub	r26, r18
    136e:	b3 0b       	sbc	r27, r19
    1370:	e4 0b       	sbc	r30, r20
    1372:	f5 0b       	sbc	r31, r21

00001374 <__udivmodsi4_ep>:
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	1a 94       	dec	r1
    137e:	69 f7       	brne	.-38     	; 0x135a <__udivmodsi4_loop>
    1380:	60 95       	com	r22
    1382:	70 95       	com	r23
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	bd 01       	movw	r22, r26
    138e:	cf 01       	movw	r24, r30
    1390:	08 95       	ret

00001392 <__udivmodhi4>:
    1392:	aa 1b       	sub	r26, r26
    1394:	bb 1b       	sub	r27, r27
    1396:	51 e1       	ldi	r21, 0x11	; 17
    1398:	07 c0       	rjmp	.+14     	; 0x13a8 <__udivmodhi4_ep>

0000139a <__udivmodhi4_loop>:
    139a:	aa 1f       	adc	r26, r26
    139c:	bb 1f       	adc	r27, r27
    139e:	a6 17       	cp	r26, r22
    13a0:	b7 07       	cpc	r27, r23
    13a2:	10 f0       	brcs	.+4      	; 0x13a8 <__udivmodhi4_ep>
    13a4:	a6 1b       	sub	r26, r22
    13a6:	b7 0b       	sbc	r27, r23

000013a8 <__udivmodhi4_ep>:
    13a8:	88 1f       	adc	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	5a 95       	dec	r21
    13ae:	a9 f7       	brne	.-22     	; 0x139a <__udivmodhi4_loop>
    13b0:	80 95       	com	r24
    13b2:	90 95       	com	r25
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	08 95       	ret

000013ba <malloc>:
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	82 30       	cpi	r24, 0x02	; 2
    13c4:	91 05       	cpc	r25, r1
    13c6:	10 f4       	brcc	.+4      	; 0x13cc <malloc+0x12>
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <__flp>
    13d0:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <__flp+0x1>
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	a0 e0       	ldi	r26, 0x00	; 0
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	30 97       	sbiw	r30, 0x00	; 0
    13de:	19 f1       	breq	.+70     	; 0x1426 <malloc+0x6c>
    13e0:	40 81       	ld	r20, Z
    13e2:	51 81       	ldd	r21, Z+1	; 0x01
    13e4:	02 81       	ldd	r16, Z+2	; 0x02
    13e6:	13 81       	ldd	r17, Z+3	; 0x03
    13e8:	48 17       	cp	r20, r24
    13ea:	59 07       	cpc	r21, r25
    13ec:	c8 f0       	brcs	.+50     	; 0x1420 <malloc+0x66>
    13ee:	84 17       	cp	r24, r20
    13f0:	95 07       	cpc	r25, r21
    13f2:	69 f4       	brne	.+26     	; 0x140e <malloc+0x54>
    13f4:	10 97       	sbiw	r26, 0x00	; 0
    13f6:	31 f0       	breq	.+12     	; 0x1404 <malloc+0x4a>
    13f8:	12 96       	adiw	r26, 0x02	; 2
    13fa:	0c 93       	st	X, r16
    13fc:	12 97       	sbiw	r26, 0x02	; 2
    13fe:	13 96       	adiw	r26, 0x03	; 3
    1400:	1c 93       	st	X, r17
    1402:	27 c0       	rjmp	.+78     	; 0x1452 <malloc+0x98>
    1404:	00 93 c2 02 	sts	0x02C2, r16	; 0x8002c2 <__flp>
    1408:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <__flp+0x1>
    140c:	22 c0       	rjmp	.+68     	; 0x1452 <malloc+0x98>
    140e:	21 15       	cp	r18, r1
    1410:	31 05       	cpc	r19, r1
    1412:	19 f0       	breq	.+6      	; 0x141a <malloc+0x60>
    1414:	42 17       	cp	r20, r18
    1416:	53 07       	cpc	r21, r19
    1418:	18 f4       	brcc	.+6      	; 0x1420 <malloc+0x66>
    141a:	9a 01       	movw	r18, r20
    141c:	bd 01       	movw	r22, r26
    141e:	ef 01       	movw	r28, r30
    1420:	df 01       	movw	r26, r30
    1422:	f8 01       	movw	r30, r16
    1424:	db cf       	rjmp	.-74     	; 0x13dc <malloc+0x22>
    1426:	21 15       	cp	r18, r1
    1428:	31 05       	cpc	r19, r1
    142a:	f9 f0       	breq	.+62     	; 0x146a <malloc+0xb0>
    142c:	28 1b       	sub	r18, r24
    142e:	39 0b       	sbc	r19, r25
    1430:	24 30       	cpi	r18, 0x04	; 4
    1432:	31 05       	cpc	r19, r1
    1434:	80 f4       	brcc	.+32     	; 0x1456 <malloc+0x9c>
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	61 15       	cp	r22, r1
    143c:	71 05       	cpc	r23, r1
    143e:	21 f0       	breq	.+8      	; 0x1448 <malloc+0x8e>
    1440:	fb 01       	movw	r30, r22
    1442:	93 83       	std	Z+3, r25	; 0x03
    1444:	82 83       	std	Z+2, r24	; 0x02
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <malloc+0x96>
    1448:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <__flp+0x1>
    144c:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__flp>
    1450:	fe 01       	movw	r30, r28
    1452:	32 96       	adiw	r30, 0x02	; 2
    1454:	44 c0       	rjmp	.+136    	; 0x14de <malloc+0x124>
    1456:	fe 01       	movw	r30, r28
    1458:	e2 0f       	add	r30, r18
    145a:	f3 1f       	adc	r31, r19
    145c:	81 93       	st	Z+, r24
    145e:	91 93       	st	Z+, r25
    1460:	22 50       	subi	r18, 0x02	; 2
    1462:	31 09       	sbc	r19, r1
    1464:	39 83       	std	Y+1, r19	; 0x01
    1466:	28 83       	st	Y, r18
    1468:	3a c0       	rjmp	.+116    	; 0x14de <malloc+0x124>
    146a:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
    146e:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
    1472:	23 2b       	or	r18, r19
    1474:	41 f4       	brne	.+16     	; 0x1486 <malloc+0xcc>
    1476:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    147a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    147e:	30 93 c1 02 	sts	0x02C1, r19	; 0x8002c1 <__brkval+0x1>
    1482:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <__brkval>
    1486:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    148a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    148e:	21 15       	cp	r18, r1
    1490:	31 05       	cpc	r19, r1
    1492:	41 f4       	brne	.+16     	; 0x14a4 <malloc+0xea>
    1494:	2d b7       	in	r18, 0x3d	; 61
    1496:	3e b7       	in	r19, 0x3e	; 62
    1498:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    149c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    14a0:	24 1b       	sub	r18, r20
    14a2:	35 0b       	sbc	r19, r21
    14a4:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <__brkval>
    14a8:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <__brkval+0x1>
    14ac:	e2 17       	cp	r30, r18
    14ae:	f3 07       	cpc	r31, r19
    14b0:	a0 f4       	brcc	.+40     	; 0x14da <malloc+0x120>
    14b2:	2e 1b       	sub	r18, r30
    14b4:	3f 0b       	sbc	r19, r31
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	78 f0       	brcs	.+30     	; 0x14da <malloc+0x120>
    14bc:	ac 01       	movw	r20, r24
    14be:	4e 5f       	subi	r20, 0xFE	; 254
    14c0:	5f 4f       	sbci	r21, 0xFF	; 255
    14c2:	24 17       	cp	r18, r20
    14c4:	35 07       	cpc	r19, r21
    14c6:	48 f0       	brcs	.+18     	; 0x14da <malloc+0x120>
    14c8:	4e 0f       	add	r20, r30
    14ca:	5f 1f       	adc	r21, r31
    14cc:	50 93 c1 02 	sts	0x02C1, r21	; 0x8002c1 <__brkval+0x1>
    14d0:	40 93 c0 02 	sts	0x02C0, r20	; 0x8002c0 <__brkval>
    14d4:	81 93       	st	Z+, r24
    14d6:	91 93       	st	Z+, r25
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <malloc+0x124>
    14da:	e0 e0       	ldi	r30, 0x00	; 0
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	cf 01       	movw	r24, r30
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	08 95       	ret

000014ea <free>:
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <free+0xa>
    14f2:	81 c0       	rjmp	.+258    	; 0x15f6 <free+0x10c>
    14f4:	fc 01       	movw	r30, r24
    14f6:	32 97       	sbiw	r30, 0x02	; 2
    14f8:	13 82       	std	Z+3, r1	; 0x03
    14fa:	12 82       	std	Z+2, r1	; 0x02
    14fc:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <__flp>
    1500:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <__flp+0x1>
    1504:	10 97       	sbiw	r26, 0x00	; 0
    1506:	81 f4       	brne	.+32     	; 0x1528 <free+0x3e>
    1508:	20 81       	ld	r18, Z
    150a:	31 81       	ldd	r19, Z+1	; 0x01
    150c:	82 0f       	add	r24, r18
    150e:	93 1f       	adc	r25, r19
    1510:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
    1514:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
    1518:	28 17       	cp	r18, r24
    151a:	39 07       	cpc	r19, r25
    151c:	51 f5       	brne	.+84     	; 0x1572 <free+0x88>
    151e:	f0 93 c1 02 	sts	0x02C1, r31	; 0x8002c1 <__brkval+0x1>
    1522:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <__brkval>
    1526:	67 c0       	rjmp	.+206    	; 0x15f6 <free+0x10c>
    1528:	ed 01       	movw	r28, r26
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	ce 17       	cp	r28, r30
    1530:	df 07       	cpc	r29, r31
    1532:	40 f4       	brcc	.+16     	; 0x1544 <free+0x5a>
    1534:	4a 81       	ldd	r20, Y+2	; 0x02
    1536:	5b 81       	ldd	r21, Y+3	; 0x03
    1538:	9e 01       	movw	r18, r28
    153a:	41 15       	cp	r20, r1
    153c:	51 05       	cpc	r21, r1
    153e:	f1 f0       	breq	.+60     	; 0x157c <free+0x92>
    1540:	ea 01       	movw	r28, r20
    1542:	f5 cf       	rjmp	.-22     	; 0x152e <free+0x44>
    1544:	d3 83       	std	Z+3, r29	; 0x03
    1546:	c2 83       	std	Z+2, r28	; 0x02
    1548:	40 81       	ld	r20, Z
    154a:	51 81       	ldd	r21, Z+1	; 0x01
    154c:	84 0f       	add	r24, r20
    154e:	95 1f       	adc	r25, r21
    1550:	c8 17       	cp	r28, r24
    1552:	d9 07       	cpc	r29, r25
    1554:	59 f4       	brne	.+22     	; 0x156c <free+0x82>
    1556:	88 81       	ld	r24, Y
    1558:	99 81       	ldd	r25, Y+1	; 0x01
    155a:	84 0f       	add	r24, r20
    155c:	95 1f       	adc	r25, r21
    155e:	02 96       	adiw	r24, 0x02	; 2
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	93 83       	std	Z+3, r25	; 0x03
    156a:	82 83       	std	Z+2, r24	; 0x02
    156c:	21 15       	cp	r18, r1
    156e:	31 05       	cpc	r19, r1
    1570:	29 f4       	brne	.+10     	; 0x157c <free+0x92>
    1572:	f0 93 c3 02 	sts	0x02C3, r31	; 0x8002c3 <__flp+0x1>
    1576:	e0 93 c2 02 	sts	0x02C2, r30	; 0x8002c2 <__flp>
    157a:	3d c0       	rjmp	.+122    	; 0x15f6 <free+0x10c>
    157c:	e9 01       	movw	r28, r18
    157e:	fb 83       	std	Y+3, r31	; 0x03
    1580:	ea 83       	std	Y+2, r30	; 0x02
    1582:	49 91       	ld	r20, Y+
    1584:	59 91       	ld	r21, Y+
    1586:	c4 0f       	add	r28, r20
    1588:	d5 1f       	adc	r29, r21
    158a:	ec 17       	cp	r30, r28
    158c:	fd 07       	cpc	r31, r29
    158e:	61 f4       	brne	.+24     	; 0x15a8 <free+0xbe>
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	84 0f       	add	r24, r20
    1596:	95 1f       	adc	r25, r21
    1598:	02 96       	adiw	r24, 0x02	; 2
    159a:	e9 01       	movw	r28, r18
    159c:	99 83       	std	Y+1, r25	; 0x01
    159e:	88 83       	st	Y, r24
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	9b 83       	std	Y+3, r25	; 0x03
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    15a8:	e0 e0       	ldi	r30, 0x00	; 0
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	12 96       	adiw	r26, 0x02	; 2
    15ae:	8d 91       	ld	r24, X+
    15b0:	9c 91       	ld	r25, X
    15b2:	13 97       	sbiw	r26, 0x03	; 3
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	19 f0       	breq	.+6      	; 0x15be <free+0xd4>
    15b8:	fd 01       	movw	r30, r26
    15ba:	dc 01       	movw	r26, r24
    15bc:	f7 cf       	rjmp	.-18     	; 0x15ac <free+0xc2>
    15be:	8d 91       	ld	r24, X+
    15c0:	9c 91       	ld	r25, X
    15c2:	11 97       	sbiw	r26, 0x01	; 1
    15c4:	9d 01       	movw	r18, r26
    15c6:	2e 5f       	subi	r18, 0xFE	; 254
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	82 0f       	add	r24, r18
    15cc:	93 1f       	adc	r25, r19
    15ce:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
    15d2:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
    15d6:	28 17       	cp	r18, r24
    15d8:	39 07       	cpc	r19, r25
    15da:	69 f4       	brne	.+26     	; 0x15f6 <free+0x10c>
    15dc:	30 97       	sbiw	r30, 0x00	; 0
    15de:	29 f4       	brne	.+10     	; 0x15ea <free+0x100>
    15e0:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <__flp+0x1>
    15e4:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <__flp>
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <free+0x104>
    15ea:	13 82       	std	Z+3, r1	; 0x03
    15ec:	12 82       	std	Z+2, r1	; 0x02
    15ee:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <__brkval+0x1>
    15f2:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <__brkval>
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <strcmp>:
    15fc:	fb 01       	movw	r30, r22
    15fe:	dc 01       	movw	r26, r24
    1600:	8d 91       	ld	r24, X+
    1602:	01 90       	ld	r0, Z+
    1604:	80 19       	sub	r24, r0
    1606:	01 10       	cpse	r0, r1
    1608:	d9 f3       	breq	.-10     	; 0x1600 <strcmp+0x4>
    160a:	99 0b       	sbc	r25, r25
    160c:	08 95       	ret

0000160e <fdevopen>:
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	31 f4       	brne	.+12     	; 0x1626 <fdevopen+0x18>
    161a:	61 15       	cp	r22, r1
    161c:	71 05       	cpc	r23, r1
    161e:	19 f4       	brne	.+6      	; 0x1626 <fdevopen+0x18>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	3a c0       	rjmp	.+116    	; 0x169a <fdevopen+0x8c>
    1626:	8b 01       	movw	r16, r22
    1628:	ec 01       	movw	r28, r24
    162a:	6e e0       	ldi	r22, 0x0E	; 14
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <calloc>
    1636:	fc 01       	movw	r30, r24
    1638:	89 2b       	or	r24, r25
    163a:	91 f3       	breq	.-28     	; 0x1620 <fdevopen+0x12>
    163c:	80 e8       	ldi	r24, 0x80	; 128
    163e:	83 83       	std	Z+3, r24	; 0x03
    1640:	01 15       	cp	r16, r1
    1642:	11 05       	cpc	r17, r1
    1644:	71 f0       	breq	.+28     	; 0x1662 <fdevopen+0x54>
    1646:	13 87       	std	Z+11, r17	; 0x0b
    1648:	02 87       	std	Z+10, r16	; 0x0a
    164a:	81 e8       	ldi	r24, 0x81	; 129
    164c:	83 83       	std	Z+3, r24	; 0x03
    164e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__iob>
    1652:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__iob+0x1>
    1656:	89 2b       	or	r24, r25
    1658:	21 f4       	brne	.+8      	; 0x1662 <fdevopen+0x54>
    165a:	f0 93 c5 02 	sts	0x02C5, r31	; 0x8002c5 <__iob+0x1>
    165e:	e0 93 c4 02 	sts	0x02C4, r30	; 0x8002c4 <__iob>
    1662:	20 97       	sbiw	r28, 0x00	; 0
    1664:	c9 f0       	breq	.+50     	; 0x1698 <fdevopen+0x8a>
    1666:	d1 87       	std	Z+9, r29	; 0x09
    1668:	c0 87       	std	Z+8, r28	; 0x08
    166a:	83 81       	ldd	r24, Z+3	; 0x03
    166c:	82 60       	ori	r24, 0x02	; 2
    166e:	83 83       	std	Z+3, r24	; 0x03
    1670:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__iob+0x2>
    1674:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <__iob+0x3>
    1678:	89 2b       	or	r24, r25
    167a:	71 f4       	brne	.+28     	; 0x1698 <fdevopen+0x8a>
    167c:	f0 93 c7 02 	sts	0x02C7, r31	; 0x8002c7 <__iob+0x3>
    1680:	e0 93 c6 02 	sts	0x02C6, r30	; 0x8002c6 <__iob+0x2>
    1684:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <__iob+0x4>
    1688:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <__iob+0x5>
    168c:	89 2b       	or	r24, r25
    168e:	21 f4       	brne	.+8      	; 0x1698 <fdevopen+0x8a>
    1690:	f0 93 c9 02 	sts	0x02C9, r31	; 0x8002c9 <__iob+0x5>
    1694:	e0 93 c8 02 	sts	0x02C8, r30	; 0x8002c8 <__iob+0x4>
    1698:	cf 01       	movw	r24, r30
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	08 95       	ret

000016a4 <printf>:
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e5       	ldi	r30, 0x58	; 88
    16aa:	fb e0       	ldi	r31, 0x0B	; 11
    16ac:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__prologue_saves__+0x20>
    16b0:	ae 01       	movw	r20, r28
    16b2:	4b 5f       	subi	r20, 0xFB	; 251
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	fa 01       	movw	r30, r20
    16b8:	61 91       	ld	r22, Z+
    16ba:	71 91       	ld	r23, Z+
    16bc:	af 01       	movw	r20, r30
    16be:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__iob+0x2>
    16c2:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <__iob+0x3>
    16c6:	0e 94 98 0b 	call	0x1730	; 0x1730 <vfprintf>
    16ca:	e2 e0       	ldi	r30, 0x02	; 2
    16cc:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__epilogue_restores__+0x20>

000016d0 <puts>:
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <__iob+0x2>
    16dc:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <__iob+0x3>
    16e0:	23 81       	ldd	r18, Z+3	; 0x03
    16e2:	21 ff       	sbrs	r18, 1
    16e4:	1b c0       	rjmp	.+54     	; 0x171c <puts+0x4c>
    16e6:	8c 01       	movw	r16, r24
    16e8:	d0 e0       	ldi	r29, 0x00	; 0
    16ea:	c0 e0       	ldi	r28, 0x00	; 0
    16ec:	f8 01       	movw	r30, r16
    16ee:	81 91       	ld	r24, Z+
    16f0:	8f 01       	movw	r16, r30
    16f2:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <__iob+0x2>
    16f6:	70 91 c7 02 	lds	r23, 0x02C7	; 0x8002c7 <__iob+0x3>
    16fa:	db 01       	movw	r26, r22
    16fc:	18 96       	adiw	r26, 0x08	; 8
    16fe:	ed 91       	ld	r30, X+
    1700:	fc 91       	ld	r31, X
    1702:	19 97       	sbiw	r26, 0x09	; 9
    1704:	88 23       	and	r24, r24
    1706:	31 f0       	breq	.+12     	; 0x1714 <puts+0x44>
    1708:	09 95       	icall
    170a:	89 2b       	or	r24, r25
    170c:	79 f3       	breq	.-34     	; 0x16ec <puts+0x1c>
    170e:	df ef       	ldi	r29, 0xFF	; 255
    1710:	cf ef       	ldi	r28, 0xFF	; 255
    1712:	ec cf       	rjmp	.-40     	; 0x16ec <puts+0x1c>
    1714:	8a e0       	ldi	r24, 0x0A	; 10
    1716:	09 95       	icall
    1718:	89 2b       	or	r24, r25
    171a:	19 f0       	breq	.+6      	; 0x1722 <puts+0x52>
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	9f ef       	ldi	r25, 0xFF	; 255
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <puts+0x56>
    1722:	8d 2f       	mov	r24, r29
    1724:	9c 2f       	mov	r25, r28
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	08 95       	ret

00001730 <vfprintf>:
    1730:	ab e0       	ldi	r26, 0x0B	; 11
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e9       	ldi	r30, 0x9E	; 158
    1736:	fb e0       	ldi	r31, 0x0B	; 11
    1738:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__prologue_saves__>
    173c:	6c 01       	movw	r12, r24
    173e:	7b 01       	movw	r14, r22
    1740:	8a 01       	movw	r16, r20
    1742:	fc 01       	movw	r30, r24
    1744:	17 82       	std	Z+7, r1	; 0x07
    1746:	16 82       	std	Z+6, r1	; 0x06
    1748:	83 81       	ldd	r24, Z+3	; 0x03
    174a:	81 ff       	sbrs	r24, 1
    174c:	cc c1       	rjmp	.+920    	; 0x1ae6 <vfprintf+0x3b6>
    174e:	ce 01       	movw	r24, r28
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	3c 01       	movw	r6, r24
    1754:	f6 01       	movw	r30, r12
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	f7 01       	movw	r30, r14
    175a:	93 fd       	sbrc	r25, 3
    175c:	85 91       	lpm	r24, Z+
    175e:	93 ff       	sbrs	r25, 3
    1760:	81 91       	ld	r24, Z+
    1762:	7f 01       	movw	r14, r30
    1764:	88 23       	and	r24, r24
    1766:	09 f4       	brne	.+2      	; 0x176a <vfprintf+0x3a>
    1768:	ba c1       	rjmp	.+884    	; 0x1ade <vfprintf+0x3ae>
    176a:	85 32       	cpi	r24, 0x25	; 37
    176c:	39 f4       	brne	.+14     	; 0x177c <vfprintf+0x4c>
    176e:	93 fd       	sbrc	r25, 3
    1770:	85 91       	lpm	r24, Z+
    1772:	93 ff       	sbrs	r25, 3
    1774:	81 91       	ld	r24, Z+
    1776:	7f 01       	movw	r14, r30
    1778:	85 32       	cpi	r24, 0x25	; 37
    177a:	29 f4       	brne	.+10     	; 0x1786 <vfprintf+0x56>
    177c:	b6 01       	movw	r22, r12
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    1784:	e7 cf       	rjmp	.-50     	; 0x1754 <vfprintf+0x24>
    1786:	91 2c       	mov	r9, r1
    1788:	21 2c       	mov	r2, r1
    178a:	31 2c       	mov	r3, r1
    178c:	ff e1       	ldi	r31, 0x1F	; 31
    178e:	f3 15       	cp	r31, r3
    1790:	d8 f0       	brcs	.+54     	; 0x17c8 <vfprintf+0x98>
    1792:	8b 32       	cpi	r24, 0x2B	; 43
    1794:	79 f0       	breq	.+30     	; 0x17b4 <vfprintf+0x84>
    1796:	38 f4       	brcc	.+14     	; 0x17a6 <vfprintf+0x76>
    1798:	80 32       	cpi	r24, 0x20	; 32
    179a:	79 f0       	breq	.+30     	; 0x17ba <vfprintf+0x8a>
    179c:	83 32       	cpi	r24, 0x23	; 35
    179e:	a1 f4       	brne	.+40     	; 0x17c8 <vfprintf+0x98>
    17a0:	23 2d       	mov	r18, r3
    17a2:	20 61       	ori	r18, 0x10	; 16
    17a4:	1d c0       	rjmp	.+58     	; 0x17e0 <vfprintf+0xb0>
    17a6:	8d 32       	cpi	r24, 0x2D	; 45
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <vfprintf+0x92>
    17aa:	80 33       	cpi	r24, 0x30	; 48
    17ac:	69 f4       	brne	.+26     	; 0x17c8 <vfprintf+0x98>
    17ae:	23 2d       	mov	r18, r3
    17b0:	21 60       	ori	r18, 0x01	; 1
    17b2:	16 c0       	rjmp	.+44     	; 0x17e0 <vfprintf+0xb0>
    17b4:	83 2d       	mov	r24, r3
    17b6:	82 60       	ori	r24, 0x02	; 2
    17b8:	38 2e       	mov	r3, r24
    17ba:	e3 2d       	mov	r30, r3
    17bc:	e4 60       	ori	r30, 0x04	; 4
    17be:	3e 2e       	mov	r3, r30
    17c0:	2a c0       	rjmp	.+84     	; 0x1816 <vfprintf+0xe6>
    17c2:	f3 2d       	mov	r31, r3
    17c4:	f8 60       	ori	r31, 0x08	; 8
    17c6:	1d c0       	rjmp	.+58     	; 0x1802 <vfprintf+0xd2>
    17c8:	37 fc       	sbrc	r3, 7
    17ca:	2d c0       	rjmp	.+90     	; 0x1826 <vfprintf+0xf6>
    17cc:	20 ed       	ldi	r18, 0xD0	; 208
    17ce:	28 0f       	add	r18, r24
    17d0:	2a 30       	cpi	r18, 0x0A	; 10
    17d2:	40 f0       	brcs	.+16     	; 0x17e4 <vfprintf+0xb4>
    17d4:	8e 32       	cpi	r24, 0x2E	; 46
    17d6:	b9 f4       	brne	.+46     	; 0x1806 <vfprintf+0xd6>
    17d8:	36 fc       	sbrc	r3, 6
    17da:	81 c1       	rjmp	.+770    	; 0x1ade <vfprintf+0x3ae>
    17dc:	23 2d       	mov	r18, r3
    17de:	20 64       	ori	r18, 0x40	; 64
    17e0:	32 2e       	mov	r3, r18
    17e2:	19 c0       	rjmp	.+50     	; 0x1816 <vfprintf+0xe6>
    17e4:	36 fe       	sbrs	r3, 6
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0xc4>
    17e8:	8a e0       	ldi	r24, 0x0A	; 10
    17ea:	98 9e       	mul	r9, r24
    17ec:	20 0d       	add	r18, r0
    17ee:	11 24       	eor	r1, r1
    17f0:	92 2e       	mov	r9, r18
    17f2:	11 c0       	rjmp	.+34     	; 0x1816 <vfprintf+0xe6>
    17f4:	ea e0       	ldi	r30, 0x0A	; 10
    17f6:	2e 9e       	mul	r2, r30
    17f8:	20 0d       	add	r18, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	22 2e       	mov	r2, r18
    17fe:	f3 2d       	mov	r31, r3
    1800:	f0 62       	ori	r31, 0x20	; 32
    1802:	3f 2e       	mov	r3, r31
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <vfprintf+0xe6>
    1806:	8c 36       	cpi	r24, 0x6C	; 108
    1808:	21 f4       	brne	.+8      	; 0x1812 <vfprintf+0xe2>
    180a:	83 2d       	mov	r24, r3
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	38 2e       	mov	r3, r24
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <vfprintf+0xe6>
    1812:	88 36       	cpi	r24, 0x68	; 104
    1814:	41 f4       	brne	.+16     	; 0x1826 <vfprintf+0xf6>
    1816:	f7 01       	movw	r30, r14
    1818:	93 fd       	sbrc	r25, 3
    181a:	85 91       	lpm	r24, Z+
    181c:	93 ff       	sbrs	r25, 3
    181e:	81 91       	ld	r24, Z+
    1820:	7f 01       	movw	r14, r30
    1822:	81 11       	cpse	r24, r1
    1824:	b3 cf       	rjmp	.-154    	; 0x178c <vfprintf+0x5c>
    1826:	98 2f       	mov	r25, r24
    1828:	9f 7d       	andi	r25, 0xDF	; 223
    182a:	95 54       	subi	r25, 0x45	; 69
    182c:	93 30       	cpi	r25, 0x03	; 3
    182e:	28 f4       	brcc	.+10     	; 0x183a <vfprintf+0x10a>
    1830:	0c 5f       	subi	r16, 0xFC	; 252
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	9f e3       	ldi	r25, 0x3F	; 63
    1836:	99 83       	std	Y+1, r25	; 0x01
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <vfprintf+0x124>
    183a:	83 36       	cpi	r24, 0x63	; 99
    183c:	31 f0       	breq	.+12     	; 0x184a <vfprintf+0x11a>
    183e:	83 37       	cpi	r24, 0x73	; 115
    1840:	71 f0       	breq	.+28     	; 0x185e <vfprintf+0x12e>
    1842:	83 35       	cpi	r24, 0x53	; 83
    1844:	09 f0       	breq	.+2      	; 0x1848 <vfprintf+0x118>
    1846:	59 c0       	rjmp	.+178    	; 0x18fa <vfprintf+0x1ca>
    1848:	21 c0       	rjmp	.+66     	; 0x188c <vfprintf+0x15c>
    184a:	f8 01       	movw	r30, r16
    184c:	80 81       	ld	r24, Z
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	0e 5f       	subi	r16, 0xFE	; 254
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	88 24       	eor	r8, r8
    1856:	83 94       	inc	r8
    1858:	91 2c       	mov	r9, r1
    185a:	53 01       	movw	r10, r6
    185c:	13 c0       	rjmp	.+38     	; 0x1884 <vfprintf+0x154>
    185e:	28 01       	movw	r4, r16
    1860:	f2 e0       	ldi	r31, 0x02	; 2
    1862:	4f 0e       	add	r4, r31
    1864:	51 1c       	adc	r5, r1
    1866:	f8 01       	movw	r30, r16
    1868:	a0 80       	ld	r10, Z
    186a:	b1 80       	ldd	r11, Z+1	; 0x01
    186c:	36 fe       	sbrs	r3, 6
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <vfprintf+0x146>
    1870:	69 2d       	mov	r22, r9
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0x14a>
    1876:	6f ef       	ldi	r22, 0xFF	; 255
    1878:	7f ef       	ldi	r23, 0xFF	; 255
    187a:	c5 01       	movw	r24, r10
    187c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <strnlen>
    1880:	4c 01       	movw	r8, r24
    1882:	82 01       	movw	r16, r4
    1884:	f3 2d       	mov	r31, r3
    1886:	ff 77       	andi	r31, 0x7F	; 127
    1888:	3f 2e       	mov	r3, r31
    188a:	16 c0       	rjmp	.+44     	; 0x18b8 <vfprintf+0x188>
    188c:	28 01       	movw	r4, r16
    188e:	22 e0       	ldi	r18, 0x02	; 2
    1890:	42 0e       	add	r4, r18
    1892:	51 1c       	adc	r5, r1
    1894:	f8 01       	movw	r30, r16
    1896:	a0 80       	ld	r10, Z
    1898:	b1 80       	ldd	r11, Z+1	; 0x01
    189a:	36 fe       	sbrs	r3, 6
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <vfprintf+0x174>
    189e:	69 2d       	mov	r22, r9
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <vfprintf+0x178>
    18a4:	6f ef       	ldi	r22, 0xFF	; 255
    18a6:	7f ef       	ldi	r23, 0xFF	; 255
    18a8:	c5 01       	movw	r24, r10
    18aa:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <strnlen_P>
    18ae:	4c 01       	movw	r8, r24
    18b0:	f3 2d       	mov	r31, r3
    18b2:	f0 68       	ori	r31, 0x80	; 128
    18b4:	3f 2e       	mov	r3, r31
    18b6:	82 01       	movw	r16, r4
    18b8:	33 fc       	sbrc	r3, 3
    18ba:	1b c0       	rjmp	.+54     	; 0x18f2 <vfprintf+0x1c2>
    18bc:	82 2d       	mov	r24, r2
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	88 16       	cp	r8, r24
    18c2:	99 06       	cpc	r9, r25
    18c4:	b0 f4       	brcc	.+44     	; 0x18f2 <vfprintf+0x1c2>
    18c6:	b6 01       	movw	r22, r12
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    18d0:	2a 94       	dec	r2
    18d2:	f4 cf       	rjmp	.-24     	; 0x18bc <vfprintf+0x18c>
    18d4:	f5 01       	movw	r30, r10
    18d6:	37 fc       	sbrc	r3, 7
    18d8:	85 91       	lpm	r24, Z+
    18da:	37 fe       	sbrs	r3, 7
    18dc:	81 91       	ld	r24, Z+
    18de:	5f 01       	movw	r10, r30
    18e0:	b6 01       	movw	r22, r12
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    18e8:	21 10       	cpse	r2, r1
    18ea:	2a 94       	dec	r2
    18ec:	21 e0       	ldi	r18, 0x01	; 1
    18ee:	82 1a       	sub	r8, r18
    18f0:	91 08       	sbc	r9, r1
    18f2:	81 14       	cp	r8, r1
    18f4:	91 04       	cpc	r9, r1
    18f6:	71 f7       	brne	.-36     	; 0x18d4 <vfprintf+0x1a4>
    18f8:	e8 c0       	rjmp	.+464    	; 0x1aca <vfprintf+0x39a>
    18fa:	84 36       	cpi	r24, 0x64	; 100
    18fc:	11 f0       	breq	.+4      	; 0x1902 <vfprintf+0x1d2>
    18fe:	89 36       	cpi	r24, 0x69	; 105
    1900:	41 f5       	brne	.+80     	; 0x1952 <vfprintf+0x222>
    1902:	f8 01       	movw	r30, r16
    1904:	37 fe       	sbrs	r3, 7
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <vfprintf+0x1e6>
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	0c 5f       	subi	r16, 0xFC	; 252
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	08 c0       	rjmp	.+16     	; 0x1926 <vfprintf+0x1f6>
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	07 2e       	mov	r0, r23
    191c:	00 0c       	add	r0, r0
    191e:	88 0b       	sbc	r24, r24
    1920:	99 0b       	sbc	r25, r25
    1922:	0e 5f       	subi	r16, 0xFE	; 254
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	f3 2d       	mov	r31, r3
    1928:	ff 76       	andi	r31, 0x6F	; 111
    192a:	3f 2e       	mov	r3, r31
    192c:	97 ff       	sbrs	r25, 7
    192e:	09 c0       	rjmp	.+18     	; 0x1942 <vfprintf+0x212>
    1930:	90 95       	com	r25
    1932:	80 95       	com	r24
    1934:	70 95       	com	r23
    1936:	61 95       	neg	r22
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	f0 68       	ori	r31, 0x80	; 128
    1940:	3f 2e       	mov	r3, r31
    1942:	2a e0       	ldi	r18, 0x0A	; 10
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	a3 01       	movw	r20, r6
    1948:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__ultoa_invert>
    194c:	88 2e       	mov	r8, r24
    194e:	86 18       	sub	r8, r6
    1950:	45 c0       	rjmp	.+138    	; 0x19dc <vfprintf+0x2ac>
    1952:	85 37       	cpi	r24, 0x75	; 117
    1954:	31 f4       	brne	.+12     	; 0x1962 <vfprintf+0x232>
    1956:	23 2d       	mov	r18, r3
    1958:	2f 7e       	andi	r18, 0xEF	; 239
    195a:	b2 2e       	mov	r11, r18
    195c:	2a e0       	ldi	r18, 0x0A	; 10
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	25 c0       	rjmp	.+74     	; 0x19ac <vfprintf+0x27c>
    1962:	93 2d       	mov	r25, r3
    1964:	99 7f       	andi	r25, 0xF9	; 249
    1966:	b9 2e       	mov	r11, r25
    1968:	8f 36       	cpi	r24, 0x6F	; 111
    196a:	c1 f0       	breq	.+48     	; 0x199c <vfprintf+0x26c>
    196c:	18 f4       	brcc	.+6      	; 0x1974 <vfprintf+0x244>
    196e:	88 35       	cpi	r24, 0x58	; 88
    1970:	79 f0       	breq	.+30     	; 0x1990 <vfprintf+0x260>
    1972:	b5 c0       	rjmp	.+362    	; 0x1ade <vfprintf+0x3ae>
    1974:	80 37       	cpi	r24, 0x70	; 112
    1976:	19 f0       	breq	.+6      	; 0x197e <vfprintf+0x24e>
    1978:	88 37       	cpi	r24, 0x78	; 120
    197a:	21 f0       	breq	.+8      	; 0x1984 <vfprintf+0x254>
    197c:	b0 c0       	rjmp	.+352    	; 0x1ade <vfprintf+0x3ae>
    197e:	e9 2f       	mov	r30, r25
    1980:	e0 61       	ori	r30, 0x10	; 16
    1982:	be 2e       	mov	r11, r30
    1984:	b4 fe       	sbrs	r11, 4
    1986:	0d c0       	rjmp	.+26     	; 0x19a2 <vfprintf+0x272>
    1988:	fb 2d       	mov	r31, r11
    198a:	f4 60       	ori	r31, 0x04	; 4
    198c:	bf 2e       	mov	r11, r31
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <vfprintf+0x272>
    1990:	34 fe       	sbrs	r3, 4
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <vfprintf+0x278>
    1994:	29 2f       	mov	r18, r25
    1996:	26 60       	ori	r18, 0x06	; 6
    1998:	b2 2e       	mov	r11, r18
    199a:	06 c0       	rjmp	.+12     	; 0x19a8 <vfprintf+0x278>
    199c:	28 e0       	ldi	r18, 0x08	; 8
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <vfprintf+0x27c>
    19a2:	20 e1       	ldi	r18, 0x10	; 16
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <vfprintf+0x27c>
    19a8:	20 e1       	ldi	r18, 0x10	; 16
    19aa:	32 e0       	ldi	r19, 0x02	; 2
    19ac:	f8 01       	movw	r30, r16
    19ae:	b7 fe       	sbrs	r11, 7
    19b0:	07 c0       	rjmp	.+14     	; 0x19c0 <vfprintf+0x290>
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	0c 5f       	subi	r16, 0xFC	; 252
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <vfprintf+0x29c>
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 5f       	subi	r16, 0xFE	; 254
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	a3 01       	movw	r20, r6
    19ce:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__ultoa_invert>
    19d2:	88 2e       	mov	r8, r24
    19d4:	86 18       	sub	r8, r6
    19d6:	fb 2d       	mov	r31, r11
    19d8:	ff 77       	andi	r31, 0x7F	; 127
    19da:	3f 2e       	mov	r3, r31
    19dc:	36 fe       	sbrs	r3, 6
    19de:	0d c0       	rjmp	.+26     	; 0x19fa <vfprintf+0x2ca>
    19e0:	23 2d       	mov	r18, r3
    19e2:	2e 7f       	andi	r18, 0xFE	; 254
    19e4:	a2 2e       	mov	r10, r18
    19e6:	89 14       	cp	r8, r9
    19e8:	58 f4       	brcc	.+22     	; 0x1a00 <vfprintf+0x2d0>
    19ea:	34 fe       	sbrs	r3, 4
    19ec:	0b c0       	rjmp	.+22     	; 0x1a04 <vfprintf+0x2d4>
    19ee:	32 fc       	sbrc	r3, 2
    19f0:	09 c0       	rjmp	.+18     	; 0x1a04 <vfprintf+0x2d4>
    19f2:	83 2d       	mov	r24, r3
    19f4:	8e 7e       	andi	r24, 0xEE	; 238
    19f6:	a8 2e       	mov	r10, r24
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <vfprintf+0x2d4>
    19fa:	b8 2c       	mov	r11, r8
    19fc:	a3 2c       	mov	r10, r3
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <vfprintf+0x2d6>
    1a00:	b8 2c       	mov	r11, r8
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <vfprintf+0x2d6>
    1a04:	b9 2c       	mov	r11, r9
    1a06:	a4 fe       	sbrs	r10, 4
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <vfprintf+0x2f8>
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e8 0d       	add	r30, r8
    1a0e:	f1 1d       	adc	r31, r1
    1a10:	80 81       	ld	r24, Z
    1a12:	80 33       	cpi	r24, 0x30	; 48
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <vfprintf+0x2ee>
    1a16:	9a 2d       	mov	r25, r10
    1a18:	99 7e       	andi	r25, 0xE9	; 233
    1a1a:	a9 2e       	mov	r10, r25
    1a1c:	09 c0       	rjmp	.+18     	; 0x1a30 <vfprintf+0x300>
    1a1e:	a2 fe       	sbrs	r10, 2
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <vfprintf+0x2fe>
    1a22:	b3 94       	inc	r11
    1a24:	b3 94       	inc	r11
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <vfprintf+0x300>
    1a28:	8a 2d       	mov	r24, r10
    1a2a:	86 78       	andi	r24, 0x86	; 134
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <vfprintf+0x300>
    1a2e:	b3 94       	inc	r11
    1a30:	a3 fc       	sbrc	r10, 3
    1a32:	11 c0       	rjmp	.+34     	; 0x1a56 <vfprintf+0x326>
    1a34:	a0 fe       	sbrs	r10, 0
    1a36:	06 c0       	rjmp	.+12     	; 0x1a44 <vfprintf+0x314>
    1a38:	b2 14       	cp	r11, r2
    1a3a:	88 f4       	brcc	.+34     	; 0x1a5e <vfprintf+0x32e>
    1a3c:	28 0c       	add	r2, r8
    1a3e:	92 2c       	mov	r9, r2
    1a40:	9b 18       	sub	r9, r11
    1a42:	0e c0       	rjmp	.+28     	; 0x1a60 <vfprintf+0x330>
    1a44:	b2 14       	cp	r11, r2
    1a46:	60 f4       	brcc	.+24     	; 0x1a60 <vfprintf+0x330>
    1a48:	b6 01       	movw	r22, r12
    1a4a:	80 e2       	ldi	r24, 0x20	; 32
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    1a52:	b3 94       	inc	r11
    1a54:	f7 cf       	rjmp	.-18     	; 0x1a44 <vfprintf+0x314>
    1a56:	b2 14       	cp	r11, r2
    1a58:	18 f4       	brcc	.+6      	; 0x1a60 <vfprintf+0x330>
    1a5a:	2b 18       	sub	r2, r11
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <vfprintf+0x332>
    1a5e:	98 2c       	mov	r9, r8
    1a60:	21 2c       	mov	r2, r1
    1a62:	a4 fe       	sbrs	r10, 4
    1a64:	10 c0       	rjmp	.+32     	; 0x1a86 <vfprintf+0x356>
    1a66:	b6 01       	movw	r22, r12
    1a68:	80 e3       	ldi	r24, 0x30	; 48
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    1a70:	a2 fe       	sbrs	r10, 2
    1a72:	17 c0       	rjmp	.+46     	; 0x1aa2 <vfprintf+0x372>
    1a74:	a1 fc       	sbrc	r10, 1
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <vfprintf+0x34e>
    1a78:	88 e7       	ldi	r24, 0x78	; 120
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <vfprintf+0x352>
    1a7e:	88 e5       	ldi	r24, 0x58	; 88
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	b6 01       	movw	r22, r12
    1a84:	0c c0       	rjmp	.+24     	; 0x1a9e <vfprintf+0x36e>
    1a86:	8a 2d       	mov	r24, r10
    1a88:	86 78       	andi	r24, 0x86	; 134
    1a8a:	59 f0       	breq	.+22     	; 0x1aa2 <vfprintf+0x372>
    1a8c:	a1 fe       	sbrs	r10, 1
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <vfprintf+0x364>
    1a90:	8b e2       	ldi	r24, 0x2B	; 43
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <vfprintf+0x366>
    1a94:	80 e2       	ldi	r24, 0x20	; 32
    1a96:	a7 fc       	sbrc	r10, 7
    1a98:	8d e2       	ldi	r24, 0x2D	; 45
    1a9a:	b6 01       	movw	r22, r12
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    1aa2:	89 14       	cp	r8, r9
    1aa4:	38 f4       	brcc	.+14     	; 0x1ab4 <vfprintf+0x384>
    1aa6:	b6 01       	movw	r22, r12
    1aa8:	80 e3       	ldi	r24, 0x30	; 48
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    1ab0:	9a 94       	dec	r9
    1ab2:	f7 cf       	rjmp	.-18     	; 0x1aa2 <vfprintf+0x372>
    1ab4:	8a 94       	dec	r8
    1ab6:	f3 01       	movw	r30, r6
    1ab8:	e8 0d       	add	r30, r8
    1aba:	f1 1d       	adc	r31, r1
    1abc:	80 81       	ld	r24, Z
    1abe:	b6 01       	movw	r22, r12
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    1ac6:	81 10       	cpse	r8, r1
    1ac8:	f5 cf       	rjmp	.-22     	; 0x1ab4 <vfprintf+0x384>
    1aca:	22 20       	and	r2, r2
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <vfprintf+0x3a0>
    1ace:	42 ce       	rjmp	.-892    	; 0x1754 <vfprintf+0x24>
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fputc>
    1ada:	2a 94       	dec	r2
    1adc:	f6 cf       	rjmp	.-20     	; 0x1aca <vfprintf+0x39a>
    1ade:	f6 01       	movw	r30, r12
    1ae0:	86 81       	ldd	r24, Z+6	; 0x06
    1ae2:	97 81       	ldd	r25, Z+7	; 0x07
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <vfprintf+0x3ba>
    1ae6:	8f ef       	ldi	r24, 0xFF	; 255
    1ae8:	9f ef       	ldi	r25, 0xFF	; 255
    1aea:	2b 96       	adiw	r28, 0x0b	; 11
    1aec:	e2 e1       	ldi	r30, 0x12	; 18
    1aee:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__epilogue_restores__>

00001af2 <calloc>:
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	86 9f       	mul	r24, r22
    1afc:	80 01       	movw	r16, r0
    1afe:	87 9f       	mul	r24, r23
    1b00:	10 0d       	add	r17, r0
    1b02:	96 9f       	mul	r25, r22
    1b04:	10 0d       	add	r17, r0
    1b06:	11 24       	eor	r1, r1
    1b08:	c8 01       	movw	r24, r16
    1b0a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <malloc>
    1b0e:	ec 01       	movw	r28, r24
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <calloc+0x2c>
    1b14:	a8 01       	movw	r20, r16
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <memset>
    1b1e:	ce 01       	movw	r24, r28
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <strnlen_P>:
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	05 90       	lpm	r0, Z+
    1b2e:	61 50       	subi	r22, 0x01	; 1
    1b30:	70 40       	sbci	r23, 0x00	; 0
    1b32:	01 10       	cpse	r0, r1
    1b34:	d8 f7       	brcc	.-10     	; 0x1b2c <strnlen_P+0x2>
    1b36:	80 95       	com	r24
    1b38:	90 95       	com	r25
    1b3a:	8e 0f       	add	r24, r30
    1b3c:	9f 1f       	adc	r25, r31
    1b3e:	08 95       	ret

00001b40 <memset>:
    1b40:	dc 01       	movw	r26, r24
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <memset+0x6>
    1b44:	6d 93       	st	X+, r22
    1b46:	41 50       	subi	r20, 0x01	; 1
    1b48:	50 40       	sbci	r21, 0x00	; 0
    1b4a:	e0 f7       	brcc	.-8      	; 0x1b44 <memset+0x4>
    1b4c:	08 95       	ret

00001b4e <strnlen>:
    1b4e:	fc 01       	movw	r30, r24
    1b50:	61 50       	subi	r22, 0x01	; 1
    1b52:	70 40       	sbci	r23, 0x00	; 0
    1b54:	01 90       	ld	r0, Z+
    1b56:	01 10       	cpse	r0, r1
    1b58:	d8 f7       	brcc	.-10     	; 0x1b50 <strnlen+0x2>
    1b5a:	80 95       	com	r24
    1b5c:	90 95       	com	r25
    1b5e:	8e 0f       	add	r24, r30
    1b60:	9f 1f       	adc	r25, r31
    1b62:	08 95       	ret

00001b64 <fputc>:
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	fb 01       	movw	r30, r22
    1b6e:	23 81       	ldd	r18, Z+3	; 0x03
    1b70:	21 fd       	sbrc	r18, 1
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <fputc+0x16>
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	9f ef       	ldi	r25, 0xFF	; 255
    1b78:	2c c0       	rjmp	.+88     	; 0x1bd2 <fputc+0x6e>
    1b7a:	22 ff       	sbrs	r18, 2
    1b7c:	16 c0       	rjmp	.+44     	; 0x1baa <fputc+0x46>
    1b7e:	46 81       	ldd	r20, Z+6	; 0x06
    1b80:	57 81       	ldd	r21, Z+7	; 0x07
    1b82:	24 81       	ldd	r18, Z+4	; 0x04
    1b84:	35 81       	ldd	r19, Z+5	; 0x05
    1b86:	42 17       	cp	r20, r18
    1b88:	53 07       	cpc	r21, r19
    1b8a:	44 f4       	brge	.+16     	; 0x1b9c <fputc+0x38>
    1b8c:	a0 81       	ld	r26, Z
    1b8e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b90:	9d 01       	movw	r18, r26
    1b92:	2f 5f       	subi	r18, 0xFF	; 255
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	31 83       	std	Z+1, r19	; 0x01
    1b98:	20 83       	st	Z, r18
    1b9a:	8c 93       	st	X, r24
    1b9c:	26 81       	ldd	r18, Z+6	; 0x06
    1b9e:	37 81       	ldd	r19, Z+7	; 0x07
    1ba0:	2f 5f       	subi	r18, 0xFF	; 255
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	37 83       	std	Z+7, r19	; 0x07
    1ba6:	26 83       	std	Z+6, r18	; 0x06
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <fputc+0x6e>
    1baa:	8b 01       	movw	r16, r22
    1bac:	ec 01       	movw	r28, r24
    1bae:	fb 01       	movw	r30, r22
    1bb0:	00 84       	ldd	r0, Z+8	; 0x08
    1bb2:	f1 85       	ldd	r31, Z+9	; 0x09
    1bb4:	e0 2d       	mov	r30, r0
    1bb6:	09 95       	icall
    1bb8:	89 2b       	or	r24, r25
    1bba:	e1 f6       	brne	.-72     	; 0x1b74 <fputc+0x10>
    1bbc:	d8 01       	movw	r26, r16
    1bbe:	16 96       	adiw	r26, 0x06	; 6
    1bc0:	8d 91       	ld	r24, X+
    1bc2:	9c 91       	ld	r25, X
    1bc4:	17 97       	sbiw	r26, 0x07	; 7
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	17 96       	adiw	r26, 0x07	; 7
    1bca:	9c 93       	st	X, r25
    1bcc:	8e 93       	st	-X, r24
    1bce:	16 97       	sbiw	r26, 0x06	; 6
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <__ultoa_invert>:
    1bdc:	fa 01       	movw	r30, r20
    1bde:	aa 27       	eor	r26, r26
    1be0:	28 30       	cpi	r18, 0x08	; 8
    1be2:	51 f1       	breq	.+84     	; 0x1c38 <__ultoa_invert+0x5c>
    1be4:	20 31       	cpi	r18, 0x10	; 16
    1be6:	81 f1       	breq	.+96     	; 0x1c48 <__ultoa_invert+0x6c>
    1be8:	e8 94       	clt
    1bea:	6f 93       	push	r22
    1bec:	6e 7f       	andi	r22, 0xFE	; 254
    1bee:	6e 5f       	subi	r22, 0xFE	; 254
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf6:	af 4f       	sbci	r26, 0xFF	; 255
    1bf8:	b1 e0       	ldi	r27, 0x01	; 1
    1bfa:	3e d0       	rcall	.+124    	; 0x1c78 <__ultoa_invert+0x9c>
    1bfc:	b4 e0       	ldi	r27, 0x04	; 4
    1bfe:	3c d0       	rcall	.+120    	; 0x1c78 <__ultoa_invert+0x9c>
    1c00:	67 0f       	add	r22, r23
    1c02:	78 1f       	adc	r23, r24
    1c04:	89 1f       	adc	r24, r25
    1c06:	9a 1f       	adc	r25, r26
    1c08:	a1 1d       	adc	r26, r1
    1c0a:	68 0f       	add	r22, r24
    1c0c:	79 1f       	adc	r23, r25
    1c0e:	8a 1f       	adc	r24, r26
    1c10:	91 1d       	adc	r25, r1
    1c12:	a1 1d       	adc	r26, r1
    1c14:	6a 0f       	add	r22, r26
    1c16:	71 1d       	adc	r23, r1
    1c18:	81 1d       	adc	r24, r1
    1c1a:	91 1d       	adc	r25, r1
    1c1c:	a1 1d       	adc	r26, r1
    1c1e:	20 d0       	rcall	.+64     	; 0x1c60 <__ultoa_invert+0x84>
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <__ultoa_invert+0x48>
    1c22:	68 94       	set
    1c24:	3f 91       	pop	r19
    1c26:	2a e0       	ldi	r18, 0x0A	; 10
    1c28:	26 9f       	mul	r18, r22
    1c2a:	11 24       	eor	r1, r1
    1c2c:	30 19       	sub	r19, r0
    1c2e:	30 5d       	subi	r19, 0xD0	; 208
    1c30:	31 93       	st	Z+, r19
    1c32:	de f6       	brtc	.-74     	; 0x1bea <__ultoa_invert+0xe>
    1c34:	cf 01       	movw	r24, r30
    1c36:	08 95       	ret
    1c38:	46 2f       	mov	r20, r22
    1c3a:	47 70       	andi	r20, 0x07	; 7
    1c3c:	40 5d       	subi	r20, 0xD0	; 208
    1c3e:	41 93       	st	Z+, r20
    1c40:	b3 e0       	ldi	r27, 0x03	; 3
    1c42:	0f d0       	rcall	.+30     	; 0x1c62 <__ultoa_invert+0x86>
    1c44:	c9 f7       	brne	.-14     	; 0x1c38 <__ultoa_invert+0x5c>
    1c46:	f6 cf       	rjmp	.-20     	; 0x1c34 <__ultoa_invert+0x58>
    1c48:	46 2f       	mov	r20, r22
    1c4a:	4f 70       	andi	r20, 0x0F	; 15
    1c4c:	40 5d       	subi	r20, 0xD0	; 208
    1c4e:	4a 33       	cpi	r20, 0x3A	; 58
    1c50:	18 f0       	brcs	.+6      	; 0x1c58 <__ultoa_invert+0x7c>
    1c52:	49 5d       	subi	r20, 0xD9	; 217
    1c54:	31 fd       	sbrc	r19, 1
    1c56:	40 52       	subi	r20, 0x20	; 32
    1c58:	41 93       	st	Z+, r20
    1c5a:	02 d0       	rcall	.+4      	; 0x1c60 <__ultoa_invert+0x84>
    1c5c:	a9 f7       	brne	.-22     	; 0x1c48 <__ultoa_invert+0x6c>
    1c5e:	ea cf       	rjmp	.-44     	; 0x1c34 <__ultoa_invert+0x58>
    1c60:	b4 e0       	ldi	r27, 0x04	; 4
    1c62:	a6 95       	lsr	r26
    1c64:	97 95       	ror	r25
    1c66:	87 95       	ror	r24
    1c68:	77 95       	ror	r23
    1c6a:	67 95       	ror	r22
    1c6c:	ba 95       	dec	r27
    1c6e:	c9 f7       	brne	.-14     	; 0x1c62 <__ultoa_invert+0x86>
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	61 05       	cpc	r22, r1
    1c74:	71 05       	cpc	r23, r1
    1c76:	08 95       	ret
    1c78:	9b 01       	movw	r18, r22
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	0a 2e       	mov	r0, r26
    1c7e:	06 94       	lsr	r0
    1c80:	57 95       	ror	r21
    1c82:	47 95       	ror	r20
    1c84:	37 95       	ror	r19
    1c86:	27 95       	ror	r18
    1c88:	ba 95       	dec	r27
    1c8a:	c9 f7       	brne	.-14     	; 0x1c7e <__ultoa_invert+0xa2>
    1c8c:	62 0f       	add	r22, r18
    1c8e:	73 1f       	adc	r23, r19
    1c90:	84 1f       	adc	r24, r20
    1c92:	95 1f       	adc	r25, r21
    1c94:	a0 1d       	adc	r26, r0
    1c96:	08 95       	ret

00001c98 <__prologue_saves__>:
    1c98:	2f 92       	push	r2
    1c9a:	3f 92       	push	r3
    1c9c:	4f 92       	push	r4
    1c9e:	5f 92       	push	r5
    1ca0:	6f 92       	push	r6
    1ca2:	7f 92       	push	r7
    1ca4:	8f 92       	push	r8
    1ca6:	9f 92       	push	r9
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	ca 1b       	sub	r28, r26
    1cc2:	db 0b       	sbc	r29, r27
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	09 94       	ijmp

00001cd0 <__epilogue_restores__>:
    1cd0:	2a 88       	ldd	r2, Y+18	; 0x12
    1cd2:	39 88       	ldd	r3, Y+17	; 0x11
    1cd4:	48 88       	ldd	r4, Y+16	; 0x10
    1cd6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cd8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cda:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cdc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cde:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ce0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ce2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ce4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ce6:	df 80       	ldd	r13, Y+7	; 0x07
    1ce8:	ee 80       	ldd	r14, Y+6	; 0x06
    1cea:	fd 80       	ldd	r15, Y+5	; 0x05
    1cec:	0c 81       	ldd	r16, Y+4	; 0x04
    1cee:	1b 81       	ldd	r17, Y+3	; 0x03
    1cf0:	aa 81       	ldd	r26, Y+2	; 0x02
    1cf2:	b9 81       	ldd	r27, Y+1	; 0x01
    1cf4:	ce 0f       	add	r28, r30
    1cf6:	d1 1d       	adc	r29, r1
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	ed 01       	movw	r28, r26
    1d04:	08 95       	ret

00001d06 <_exit>:
    1d06:	f8 94       	cli

00001d08 <__stop_program>:
    1d08:	ff cf       	rjmp	.-2      	; 0x1d08 <__stop_program>
