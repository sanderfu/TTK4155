
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ce  00800100  00001810  000018a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001810  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008002ce  008002ce  00001a72  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e46  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f2  00000000  00000000  00004c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014c7  00000000  00000000  0000610c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ec  00000000  00000000  000075d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a4  00000000  00000000  00007bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000134e  00000000  00000000  00008564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  000098b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__ctors_end>
       4:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
       8:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
       c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      10:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      14:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      18:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      1c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      20:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      24:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      28:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      2c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      30:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      34:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      38:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_14>
      3c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      40:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      44:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      48:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      4c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      50:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      54:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      58:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      5c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      60:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      64:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      68:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      6c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 00       	.word	0x0028	; ????

000000ee <song1_chorus_melody>:
      ee:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fe:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10e:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11e:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12e:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13e:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14e:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15e:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16e:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17e:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18e:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19e:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ae:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1be:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1ce:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1de:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ee:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fe:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20e:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21e:	6e 02 00 00 2a 02 00 00 00 00 00 00 00 00 00 00     n...*...........

0000022e <__ctors_end>:
     22e:	11 24       	eor	r1, r1
     230:	1f be       	out	0x3f, r1	; 63
     232:	cf ef       	ldi	r28, 0xFF	; 255
     234:	d4 e0       	ldi	r29, 0x04	; 4
     236:	de bf       	out	0x3e, r29	; 62
     238:	cd bf       	out	0x3d, r28	; 61

0000023a <__do_copy_data>:
     23a:	12 e0       	ldi	r17, 0x02	; 2
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b1 e0       	ldi	r27, 0x01	; 1
     240:	e0 e1       	ldi	r30, 0x10	; 16
     242:	f8 e1       	ldi	r31, 0x18	; 24
     244:	02 c0       	rjmp	.+4      	; 0x24a <__do_copy_data+0x10>
     246:	05 90       	lpm	r0, Z+
     248:	0d 92       	st	X+, r0
     24a:	ae 3c       	cpi	r26, 0xCE	; 206
     24c:	b1 07       	cpc	r27, r17
     24e:	d9 f7       	brne	.-10     	; 0x246 <__do_copy_data+0xc>

00000250 <__do_clear_bss>:
     250:	22 e0       	ldi	r18, 0x02	; 2
     252:	ae ec       	ldi	r26, 0xCE	; 206
     254:	b2 e0       	ldi	r27, 0x02	; 2
     256:	01 c0       	rjmp	.+2      	; 0x25a <.do_clear_bss_start>

00000258 <.do_clear_bss_loop>:
     258:	1d 92       	st	X+, r1

0000025a <.do_clear_bss_start>:
     25a:	a8 3e       	cpi	r26, 0xE8	; 232
     25c:	b2 07       	cpc	r27, r18
     25e:	e1 f7       	brne	.-8      	; 0x258 <.do_clear_bss_loop>
     260:	0e 94 40 01 	call	0x280	; 0x280 <main>
     264:	0c 94 06 0c 	jmp	0x180c	; 0x180c <_exit>

00000268 <__bad_interrupt>:
     268:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026c <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     26c:	30 98       	cbi	0x06, 0	; 6
     26e:	08 95       	ret

00000270 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     270:	84 60       	ori	r24, 0x04	; 4
     272:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1118>
	

	while (test_bit(PINE, PINE0)) {
     276:	28 99       	sbic	0x05, 0	; 5
     278:	fe cf       	rjmp	.-4      	; 0x276 <readAdc+0x6>

	}
	
	return *adc;
     27a:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1118>
     27e:	08 95       	ret

00000280 <main>:
#include "pwm.h"
#include "music.h"

int main(void)
{
	setupInit();
     280:	0e 94 af 03 	call	0x75e	; 0x75e <setupInit>
	printf("Starting program\n\n\n\n\n\n\n\n\n\n");
     284:	86 ea       	ldi	r24, 0xA6	; 166
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <puts>
	//test_SRAM();
	//pwm_testPlayNote();
	pwm_init();
     28c:	0e 94 b0 01 	call	0x360	; 0x360 <pwm_init>
	//music_playLisaGikk();                 
	music_playRick();
     290:	0e 94 4b 01 	call	0x296	; 0x296 <music_playRick>
     294:	ff cf       	rjmp	.-2      	; 0x294 <main+0x14>

00000296 <music_playRick>:
	}
	pwm_setFreq(0);
	sei();

}
void music_playRick() {
     296:	bf 92       	push	r11
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	cli();
     2a8:	f8 94       	cli
	printf("You got rickrolled\n\n\r");
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 d5 08 	call	0x11aa	; 0x11aa <printf>
     2b6:	c6 e0       	ldi	r28, 0x06	; 6
     2b8:	d1 e0       	ldi	r29, 0x01	; 1
     2ba:	0f 2e       	mov	r0, r31
     2bc:	fe ee       	ldi	r31, 0xEE	; 238
     2be:	ef 2e       	mov	r14, r31
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	ff 2e       	mov	r15, r31
     2c4:	f0 2d       	mov	r31, r0
     2c6:	0e e9       	ldi	r16, 0x9E	; 158
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	0f 2e       	mov	r0, r31
     2cc:	f6 ea       	ldi	r31, 0xA6	; 166
     2ce:	cf 2e       	mov	r12, r31
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	df 2e       	mov	r13, r31
     2d4:	f0 2d       	mov	r31, r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
     2da:	0f 2e       	mov	r0, r31
     2dc:	f4 e1       	ldi	r31, 0x14	; 20
     2de:	bf 2e       	mov	r11, r31
     2e0:	f0 2d       	mov	r31, r0
}
void music_playRick() {
	cli();
	printf("You got rickrolled\n\n\r");
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		printf(lyrics_chorus[i]);
     2e2:	88 81       	ld	r24, Y
     2e4:	99 81       	ldd	r25, Y+1	; 0x01
     2e6:	22 96       	adiw	r28, 0x02	; 2
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	0e 94 d5 08 	call	0x11aa	; 0x11aa <printf>
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
     2f0:	f7 01       	movw	r30, r14
     2f2:	65 91       	lpm	r22, Z+
     2f4:	74 91       	lpm	r23, Z
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 c0 01 	call	0x380	; 0x380 <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
     2fe:	f8 01       	movw	r30, r16
     300:	84 91       	lpm	r24, Z
     302:	b8 9e       	mul	r11, r24
     304:	c0 01       	movw	r24, r0
     306:	11 24       	eor	r1, r1
     308:	09 2e       	mov	r0, r25
     30a:	00 0c       	add	r0, r0
     30c:	aa 0b       	sbc	r26, r26
     30e:	bb 0b       	sbc	r27, r27
		while (duration--) {
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	00 97       	sbiw	r24, 0x00	; 0
     316:	a1 05       	cpc	r26, r1
     318:	b1 05       	cpc	r27, r1
     31a:	51 f0       	breq	.+20     	; 0x330 <music_playRick+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31c:	ec ec       	ldi	r30, 0xCC	; 204
     31e:	f4 e0       	ldi	r31, 0x04	; 4
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <music_playRick+0x8a>
     324:	00 c0       	rjmp	.+0      	; 0x326 <music_playRick+0x90>
     326:	00 00       	nop
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	a1 09       	sbc	r26, r1
     32c:	b1 09       	sbc	r27, r1
     32e:	b1 f7       	brne	.-20     	; 0x31c <music_playRick+0x86>
     330:	f4 e0       	ldi	r31, 0x04	; 4
     332:	ef 0e       	add	r14, r31
     334:	f1 1c       	adc	r15, r1
     336:	0f 5f       	subi	r16, 0xFF	; 255
     338:	1f 4f       	sbci	r17, 0xFF	; 255

}
void music_playRick() {
	cli();
	printf("You got rickrolled\n\n\r");
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
     33a:	cc 15       	cp	r28, r12
     33c:	dd 05       	cpc	r29, r13
     33e:	89 f6       	brne	.-94     	; 0x2e2 <music_playRick+0x4c>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	cb 01       	movw	r24, r22
     346:	0e 94 c0 01 	call	0x380	; 0x380 <pwm_setFreq>
	sei();
     34a:	78 94       	sei

     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	08 95       	ret

00000360 <pwm_init>:
    PRESC_1024 =   (1 << CS02)  |               (1 << CS00)
} prescaling;

void pwm_init() {
    //set output pin
    DDRB = (1 << PB0); 
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	87 bb       	out	0x17, r24	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	81 bf       	out	0x31, r24	; 49
    
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
     368:	80 e8       	ldi	r24, 0x80	; 128
     36a:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
     36c:	83 b7       	in	r24, 0x33	; 51
     36e:	88 60       	ori	r24, 0x08	; 8
     370:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
     372:	83 b7       	in	r24, 0x33	; 51
     374:	80 61       	ori	r24, 0x10	; 16
     376:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 |= PRESC_1;
     378:	83 b7       	in	r24, 0x33	; 51
     37a:	81 60       	ori	r24, 0x01	; 1
     37c:	83 bf       	out	0x33, r24	; 51
     37e:	08 95       	ret

00000380 <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
     380:	9b 01       	movw	r18, r22
     382:	ac 01       	movw	r20, r24
    if (freq == 0) {
     384:	67 2b       	or	r22, r23
     386:	68 2b       	or	r22, r24
     388:	69 2b       	or	r22, r25
     38a:	21 f4       	brne	.+8      	; 0x394 <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
     38c:	83 b7       	in	r24, 0x33	; 51
     38e:	88 7f       	andi	r24, 0xF8	; 248
     390:	83 bf       	out	0x33, r24	; 51
        return;
     392:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e8       	ldi	r23, 0x80	; 128
     398:	85 e2       	ldi	r24, 0x25	; 37
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 2c 07 	call	0xe58	; 0xe58 <__udivmodsi4>
     3a0:	da 01       	movw	r26, r20
     3a2:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
     3a4:	21 30       	cpi	r18, 0x01	; 1
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	36 07       	cpc	r19, r22
     3aa:	41 05       	cpc	r20, r1
     3ac:	51 05       	cpc	r21, r1
     3ae:	a8 f1       	brcs	.+106    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
     3b0:	68 94       	set
     3b2:	12 f8       	bld	r1, 2
     3b4:	b6 95       	lsr	r27
     3b6:	a7 95       	ror	r26
     3b8:	97 95       	ror	r25
     3ba:	87 95       	ror	r24
     3bc:	16 94       	lsr	r1
     3be:	d1 f7       	brne	.-12     	; 0x3b4 <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	96 07       	cpc	r25, r22
     3c6:	a1 05       	cpc	r26, r1
     3c8:	b1 05       	cpc	r27, r1
     3ca:	48 f1       	brcs	.+82     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
     3cc:	da 01       	movw	r26, r20
     3ce:	c9 01       	movw	r24, r18
     3d0:	68 94       	set
     3d2:	15 f8       	bld	r1, 5
     3d4:	b6 95       	lsr	r27
     3d6:	a7 95       	ror	r26
     3d8:	97 95       	ror	r25
     3da:	87 95       	ror	r24
     3dc:	16 94       	lsr	r1
     3de:	d1 f7       	brne	.-12     	; 0x3d4 <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	96 07       	cpc	r25, r22
     3e6:	a1 05       	cpc	r26, r1
     3e8:	b1 05       	cpc	r27, r1
     3ea:	d8 f0       	brcs	.+54     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
     3ec:	bb 27       	eor	r27, r27
     3ee:	a5 2f       	mov	r26, r21
     3f0:	94 2f       	mov	r25, r20
     3f2:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	96 07       	cpc	r25, r22
     3fa:	a1 05       	cpc	r26, r1
     3fc:	b1 05       	cpc	r27, r1
     3fe:	98 f0       	brcs	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
     400:	da 01       	movw	r26, r20
     402:	c9 01       	movw	r24, r18
     404:	07 2e       	mov	r0, r23
     406:	7a e0       	ldi	r23, 0x0A	; 10
     408:	b6 95       	lsr	r27
     40a:	a7 95       	ror	r26
     40c:	97 95       	ror	r25
     40e:	87 95       	ror	r24
     410:	7a 95       	dec	r23
     412:	d1 f7       	brne	.-12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     414:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
     416:	35 e0       	ldi	r19, 0x05	; 5
     418:	07 c0       	rjmp	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
     41a:	31 e0       	ldi	r19, 0x01	; 1
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
     41e:	32 e0       	ldi	r19, 0x02	; 2
     420:	03 c0       	rjmp	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
     422:	33 e0       	ldi	r19, 0x03	; 3
     424:	01 c0       	rjmp	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
     426:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
     428:	23 b7       	in	r18, 0x33	; 51
     42a:	28 7f       	andi	r18, 0xF8	; 248
     42c:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
     42e:	23 b7       	in	r18, 0x33	; 51
     430:	23 2b       	or	r18, r19
     432:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
     434:	81 50       	subi	r24, 0x01	; 1
     436:	81 bf       	out	0x31, r24	; 49
     438:	08 95       	ret

0000043a <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     43a:	85 b7       	in	r24, 0x35	; 53
     43c:	8f 7e       	andi	r24, 0xEF	; 239
     43e:	85 bf       	out	0x35, r24	; 53
     440:	84 b7       	in	r24, 0x34	; 52
     442:	8f 7d       	andi	r24, 0xDF	; 223
     444:	84 bf       	out	0x34, r24	; 52
     446:	86 b7       	in	r24, 0x36	; 54
     448:	8f 77       	andi	r24, 0x7F	; 127
     44a:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     44c:	85 b7       	in	r24, 0x35	; 53
     44e:	80 62       	ori	r24, 0x20	; 32
     450:	85 bf       	out	0x35, r24	; 53
     452:	88 95       	sleep
     454:	85 b7       	in	r24, 0x35	; 53
     456:	8f 7d       	andi	r24, 0xDF	; 223
     458:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     45a:	85 b7       	in	r24, 0x35	; 53
     45c:	80 62       	ori	r24, 0x20	; 32
     45e:	85 bf       	out	0x35, r24	; 53
     460:	08 95       	ret

00000462 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 38 01 	call	0x270	; 0x270 <readAdc>
     468:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 38 01 	call	0x270	; 0x270 <readAdc>
     472:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <joystickOffsetY>
     476:	08 95       	ret

00000478 <joystick_readPosition>:
}
void joystick_readPosition() {
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 38 01 	call	0x270	; 0x270 <readAdc>
     48a:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 38 01 	call	0x270	; 0x270 <readAdc>
     492:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     494:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <joystickOffsetX>
     498:	c6 17       	cp	r28, r22
     49a:	80 f4       	brcc	.+32     	; 0x4bc <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	2c 2f       	mov	r18, r28
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	26 1b       	sub	r18, r22
     4a4:	37 0b       	sbc	r19, r23
     4a6:	44 e6       	ldi	r20, 0x64	; 100
     4a8:	42 9f       	mul	r20, r18
     4aa:	c0 01       	movw	r24, r0
     4ac:	43 9f       	mul	r20, r19
     4ae:	90 0d       	add	r25, r0
     4b0:	11 24       	eor	r1, r1
     4b2:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodhi4>
     4b6:	60 93 ce 02 	sts	0x02CE, r22	; 0x8002ce <__data_end>
     4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     4bc:	46 2f       	mov	r20, r22
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	2c 2f       	mov	r18, r28
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	24 1b       	sub	r18, r20
     4c6:	35 0b       	sbc	r19, r21
     4c8:	64 e6       	ldi	r22, 0x64	; 100
     4ca:	62 9f       	mul	r22, r18
     4cc:	c0 01       	movw	r24, r0
     4ce:	63 9f       	mul	r22, r19
     4d0:	90 0d       	add	r25, r0
     4d2:	11 24       	eor	r1, r1
     4d4:	6f ef       	ldi	r22, 0xFF	; 255
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	64 1b       	sub	r22, r20
     4da:	75 0b       	sbc	r23, r21
     4dc:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodhi4>
     4e0:	60 93 ce 02 	sts	0x02CE, r22	; 0x8002ce <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     4e4:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <joystickOffsetY>
     4e8:	e2 17       	cp	r30, r18
     4ea:	88 f4       	brcc	.+34     	; 0x50e <__stack+0xf>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     4ec:	62 2f       	mov	r22, r18
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	4e 2f       	mov	r20, r30
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	46 1b       	sub	r20, r22
     4f6:	57 0b       	sbc	r21, r23
     4f8:	24 e6       	ldi	r18, 0x64	; 100
     4fa:	24 9f       	mul	r18, r20
     4fc:	c0 01       	movw	r24, r0
     4fe:	25 9f       	mul	r18, r21
     500:	90 0d       	add	r25, r0
     502:	11 24       	eor	r1, r1
     504:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodhi4>
     508:	60 93 cf 02 	sts	0x02CF, r22	; 0x8002cf <__data_end+0x1>
     50c:	13 c0       	rjmp	.+38     	; 0x534 <__stack+0x35>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	4e 2f       	mov	r20, r30
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	42 1b       	sub	r20, r18
     516:	53 0b       	sbc	r21, r19
     518:	64 e6       	ldi	r22, 0x64	; 100
     51a:	64 9f       	mul	r22, r20
     51c:	c0 01       	movw	r24, r0
     51e:	65 9f       	mul	r22, r21
     520:	90 0d       	add	r25, r0
     522:	11 24       	eor	r1, r1
     524:	6f ef       	ldi	r22, 0xFF	; 255
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	62 1b       	sub	r22, r18
     52a:	73 0b       	sbc	r23, r19
     52c:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodhi4>
     530:	60 93 cf 02 	sts	0x02CF, r22	; 0x8002cf <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     534:	ce ec       	ldi	r28, 0xCE	; 206
     536:	d2 e0       	ldi	r29, 0x02	; 2
     538:	68 81       	ld	r22, Y
     53a:	06 2e       	mov	r0, r22
     53c:	00 0c       	add	r0, r0
     53e:	77 0b       	sbc	r23, r23
     540:	88 0b       	sbc	r24, r24
     542:	99 0b       	sbc	r25, r25
     544:	0e 94 7f 05 	call	0xafe	; 0xafe <__floatsisf>
     548:	6b 01       	movw	r12, r22
     54a:	7c 01       	movw	r14, r24
     54c:	69 81       	ldd	r22, Y+1	; 0x01
     54e:	06 2e       	mov	r0, r22
     550:	00 0c       	add	r0, r0
     552:	77 0b       	sbc	r23, r23
     554:	88 0b       	sbc	r24, r24
     556:	99 0b       	sbc	r25, r25
     558:	0e 94 7f 05 	call	0xafe	; 0xafe <__floatsisf>
     55c:	a7 01       	movw	r20, r14
     55e:	96 01       	movw	r18, r12
     560:	0e 94 76 04 	call	0x8ec	; 0x8ec <atan2>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	44 eb       	ldi	r20, 0xB4	; 180
     56a:	53 e4       	ldi	r21, 0x43	; 67
     56c:	0e 94 3a 06 	call	0xc74	; 0xc74 <__mulsf3>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	0e 94 3a 06 	call	0xc74	; 0xc74 <__mulsf3>
     57c:	23 ec       	ldi	r18, 0xC3	; 195
     57e:	35 ef       	ldi	r19, 0xF5	; 245
     580:	48 e4       	ldi	r20, 0x48	; 72
     582:	50 e4       	ldi	r21, 0x40	; 64
     584:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divsf3>
     588:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fixsfsi>
     58c:	7b 83       	std	Y+3, r23	; 0x03
     58e:	6a 83       	std	Y+2, r22	; 0x02
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	df 90       	pop	r13
     59a:	cf 90       	pop	r12
     59c:	08 95       	ret

0000059e <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     59e:	8f e1       	ldi	r24, 0x1F	; 31
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 62 07 	call	0xec4	; 0xec4 <malloc>
	ptr->numChildren = 0;
     5a6:	fc 01       	movw	r30, r24
     5a8:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     5aa:	2a e0       	ldi	r18, 0x0A	; 10
     5ac:	e8 e8       	ldi	r30, 0x88	; 136
     5ae:	f2 e0       	ldi	r31, 0x02	; 2
     5b0:	dc 01       	movw	r26, r24
     5b2:	01 90       	ld	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	2a 95       	dec	r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <mainMenuInit+0x14>
	ptr->parent = NULL;
     5ba:	fc 01       	movw	r30, r24
     5bc:	11 8a       	std	Z+17, r1	; 0x11
     5be:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     5c0:	08 95       	ret

000005c2 <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	7c 01       	movw	r14, r24
     5d2:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     5d4:	8f e1       	ldi	r24, 0x1F	; 31
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 62 07 	call	0xec4	; 0xec4 <malloc>
     5dc:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     5de:	d7 01       	movw	r26, r14
     5e0:	5e 96       	adiw	r26, 0x1e	; 30
     5e2:	ec 91       	ld	r30, X
     5e4:	5e 97       	sbiw	r26, 0x1e	; 30
     5e6:	c1 e0       	ldi	r28, 0x01	; 1
     5e8:	ce 0f       	add	r28, r30
     5ea:	5e 96       	adiw	r26, 0x1e	; 30
     5ec:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 83 08 	call	0x1106	; 0x1106 <strcpy>
	childPtr->parent = parent;
     5f4:	f8 01       	movw	r30, r16
     5f6:	f1 8a       	std	Z+17, r15	; 0x11
     5f8:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     5fa:	c7 30       	cpi	r28, 0x07	; 7
     5fc:	78 f4       	brcc	.+30     	; 0x61c <addChild+0x5a>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     5fe:	ec 2f       	mov	r30, r28
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	38 96       	adiw	r30, 0x08	; 8
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ee 0d       	add	r30, r14
     60a:	ff 1d       	adc	r31, r15
     60c:	11 83       	std	Z+1, r17	; 0x01
     60e:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     610:	d8 01       	movw	r26, r16
     612:	5e 96       	adiw	r26, 0x1e	; 30
     614:	1c 92       	st	X, r1
	return childPtr;
     616:	80 2f       	mov	r24, r16
     618:	91 2f       	mov	r25, r17
     61a:	02 c0       	rjmp	.+4      	; 0x620 <addChild+0x5e>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	08 95       	ret

00000630 <menuInit>:

MenuNode* menuInit(void)
{
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     63c:	0e 94 cf 02 	call	0x59e	; 0x59e <mainMenuInit>
     640:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     642:	62 e9       	ldi	r22, 0x92	; 146
     644:	72 e0       	ldi	r23, 0x02	; 2
     646:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <addChild>
     64a:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     64c:	6c e9       	ldi	r22, 0x9C	; 156
     64e:	72 e0       	ldi	r23, 0x02	; 2
     650:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <addChild>
	addChild(childPlayGame,"GAME 2");
     654:	63 ea       	ldi	r22, 0xA3	; 163
     656:	72 e0       	ldi	r23, 0x02	; 2
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     65e:	6a ea       	ldi	r22, 0xAA	; 170
     660:	72 e0       	ldi	r23, 0x02	; 2
     662:	c7 01       	movw	r24, r14
     664:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <addChild>
     668:	8c 01       	movw	r16, r24
     66a:	c5 e0       	ldi	r28, 0x05	; 5
     66c:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     66e:	64 eb       	ldi	r22, 0xB4	; 180
     670:	72 e0       	ldi	r23, 0x02	; 2
     672:	c8 01       	movw	r24, r16
     674:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <addChild>
     678:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     67a:	c9 f7       	brne	.-14     	; 0x66e <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     67c:	6c eb       	ldi	r22, 0xBC	; 188
     67e:	72 e0       	ldi	r23, 0x02	; 2
     680:	c7 01       	movw	r24, r14
     682:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     686:	65 ec       	ldi	r22, 0xC5	; 197
     688:	72 e0       	ldi	r23, 0x02	; 2
     68a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <addChild>
	currentMenu.currentMenuItem = mainMenu;
     68e:	e2 ed       	ldi	r30, 0xD2	; 210
     690:	f2 e0       	ldi	r31, 0x02	; 2
     692:	f1 82       	std	Z+1, r15	; 0x01
     694:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     696:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     69c:	c7 01       	movw	r24, r14
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	08 95       	ret

000006ac <oled_pos>:
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     6ac:	80 55       	subi	r24, 0x50	; 80
     6ae:	e0 e0       	ldi	r30, 0x00	; 0
     6b0:	f0 e1       	ldi	r31, 0x10	; 16
     6b2:	80 83       	st	Z, r24
     6b4:	86 2f       	mov	r24, r22
     6b6:	8f 70       	andi	r24, 0x0F	; 15
     6b8:	80 83       	st	Z, r24
     6ba:	62 95       	swap	r22
     6bc:	6f 70       	andi	r22, 0x0F	; 15
     6be:	60 61       	ori	r22, 0x10	; 16
     6c0:	60 83       	st	Z, r22
     6c2:	08 95       	ret

000006c4 <oled_reset>:
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	c0 e0       	ldi	r28, 0x00	; 0
     6ce:	d2 e1       	ldi	r29, 0x12	; 18
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	81 2f       	mov	r24, r17
     6d4:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_pos>
     6d8:	80 e8       	ldi	r24, 0x80	; 128
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	18 82       	st	Y, r1
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	e9 f7       	brne	.-6      	; 0x6dc <oled_reset+0x18>
     6e2:	1f 5f       	subi	r17, 0xFF	; 255
     6e4:	18 30       	cpi	r17, 0x08	; 8
     6e6:	a1 f7       	brne	.-24     	; 0x6d0 <oled_reset+0xc>
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	08 95       	ret

000006f0 <oled_home>:
	oled_write_d(0b00011000);
	oled_write_d(0b00011000);
}

void oled_home() {
	oled_pos(0,0);
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_pos>
     6f8:	08 95       	ret

000006fa <oled_init>:
#define OLED_COMMAND_BASE_ADDRESS 0x1000
#define OLED_DATA_BASE_ADDRESS 0x1200
//#include <util/delay.h>
void oled_write_c(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
     6fa:	e0 e0       	ldi	r30, 0x00	; 0
     6fc:	f0 e1       	ldi	r31, 0x10	; 16
     6fe:	8e ea       	ldi	r24, 0xAE	; 174
     700:	80 83       	st	Z, r24
     702:	81 ea       	ldi	r24, 0xA1	; 161
     704:	80 83       	st	Z, r24
     706:	8a ed       	ldi	r24, 0xDA	; 218
     708:	80 83       	st	Z, r24
     70a:	82 e1       	ldi	r24, 0x12	; 18
     70c:	80 83       	st	Z, r24
     70e:	88 ec       	ldi	r24, 0xC8	; 200
     710:	80 83       	st	Z, r24
     712:	88 ea       	ldi	r24, 0xA8	; 168
     714:	80 83       	st	Z, r24
     716:	8f e3       	ldi	r24, 0x3F	; 63
     718:	80 83       	st	Z, r24
     71a:	85 ed       	ldi	r24, 0xD5	; 213
     71c:	80 83       	st	Z, r24
     71e:	80 e8       	ldi	r24, 0x80	; 128
     720:	80 83       	st	Z, r24
     722:	81 e8       	ldi	r24, 0x81	; 129
     724:	80 83       	st	Z, r24
     726:	80 e5       	ldi	r24, 0x50	; 80
     728:	80 83       	st	Z, r24
     72a:	89 ed       	ldi	r24, 0xD9	; 217
     72c:	80 83       	st	Z, r24
     72e:	81 e2       	ldi	r24, 0x21	; 33
     730:	80 83       	st	Z, r24
     732:	80 e2       	ldi	r24, 0x20	; 32
     734:	80 83       	st	Z, r24
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	80 83       	st	Z, r24
     73a:	8b ed       	ldi	r24, 0xDB	; 219
     73c:	80 83       	st	Z, r24
     73e:	80 e3       	ldi	r24, 0x30	; 48
     740:	80 83       	st	Z, r24
     742:	8d ea       	ldi	r24, 0xAD	; 173
     744:	80 83       	st	Z, r24
     746:	10 82       	st	Z, r1
     748:	84 ea       	ldi	r24, 0xA4	; 164
     74a:	80 83       	st	Z, r24
     74c:	86 ea       	ldi	r24, 0xA6	; 166
     74e:	80 83       	st	Z, r24
     750:	8f ea       	ldi	r24, 0xAF	; 175
     752:	80 83       	st	Z, r24
	oled_write_c(0xa6); //set normal display
	oled_write_c(0xaf); // display on
	
	//oled_write_c(0xa5);
	//_delay_ms(100);
	oled_reset();
     754:	0e 94 62 03 	call	0x6c4	; 0x6c4 <oled_reset>
	oled_home();
     758:	0e 94 78 03 	call	0x6f0	; 0x6f0 <oled_home>
     75c:	08 95       	ret

0000075e <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "SPI.h"

	void setupInit(void){
	xmem_init();
     75e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xmem_init>
	USART_init(MYUBRR);
     762:	8f e1       	ldi	r24, 0x1F	; 31
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 4b 04 	call	0x896	; 0x896 <USART_init>
	adcInit();
     76a:	0e 94 36 01 	call	0x26c	; 0x26c <adcInit>
	joystickInit();
     76e:	0e 94 31 02 	call	0x462	; 0x462 <joystickInit>
	touchButton_init();
     772:	0e 94 1e 04 	call	0x83c	; 0x83c <touchButton_init>
	oled_init();
     776:	0e 94 7d 03 	call	0x6fa	; 0x6fa <oled_init>
	timer_init();
     77a:	0e 94 0e 04 	call	0x81c	; 0x81c <timer_init>
	sleep_init();
     77e:	0e 94 1d 02 	call	0x43a	; 0x43a <sleep_init>
	menuInit();
     782:	0e 94 18 03 	call	0x630	; 0x630 <menuInit>
	SPI_MasterInit();
     786:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPI_MasterInit>
     78a:	08 95       	ret

0000078c <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	0e 94 38 01 	call	0x270	; 0x270 <readAdc>
     796:	c8 ed       	ldi	r28, 0xD8	; 216
     798:	d2 e0       	ldi	r29, 0x02	; 2
     79a:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	0e 94 38 01 	call	0x270	; 0x270 <readAdc>
     7a2:	89 83       	std	Y+1, r24	; 0x01
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	//select slave output
	DDRB = (1 << PB4);
     7aa:	80 e1       	ldi	r24, 0x10	; 16
     7ac:	87 bb       	out	0x17, r24	; 23
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5) | (1 << PB7);
     7ae:	80 ea       	ldi	r24, 0xA0	; 160
     7b0:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     7b2:	81 e5       	ldi	r24, 0x51	; 81
     7b4:	8d b9       	out	0x0d, r24	; 13
     7b6:	08 95       	ret

000007b8 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     7b8:	1f 92       	push	r1
     7ba:	0f 92       	push	r0
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	0f 92       	push	r0
     7c0:	11 24       	eor	r1, r1
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31
	cli();
     7da:	f8 94       	cli
	TCNT1 = 0x00;
     7dc:	1d bc       	out	0x2d, r1	; 45
     7de:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     7e0:	8e ec       	ldi	r24, 0xCE	; 206
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 3c 02 	call	0x478	; 0x478 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     7e8:	88 ed       	ldi	r24, 0xD8	; 216
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	0e 94 c6 03 	call	0x78c	; 0x78c <slider_readPosition>
	touchButton_readButtons(&buttons);
     7f0:	86 ed       	ldi	r24, 0xD6	; 214
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 37 04 	call	0x86e	; 0x86e <touchButton_readButtons>
	sei();
     7f8:	78 94       	sei
}
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <timer_init>:
}

*/
void timer_init() {
	//Disable global interrupts
	cli();
     81c:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     81e:	89 b7       	in	r24, 0x39	; 57
     820:	80 62       	ori	r24, 0x20	; 32
     822:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     824:	1d bc       	out	0x2d, r1	; 45
     826:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     828:	80 e3       	ldi	r24, 0x30	; 48
     82a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     82c:	85 e0       	ldi	r24, 0x05	; 5
     82e:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     830:	80 ef       	ldi	r24, 0xF0	; 240
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	99 bd       	out	0x29, r25	; 41
     836:	88 bd       	out	0x28, r24	; 40
	
	OCR0 = TIMER0_RESET;
	*/
	
	//Enable global interrupts
	sei();
     838:	78 94       	sei
     83a:	08 95       	ret

0000083c <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     83c:	36 b3       	in	r19, 0x16	; 22
     83e:	26 b3       	in	r18, 0x16	; 22
     840:	47 b3       	in	r20, 0x17	; 23
     842:	32 70       	andi	r19, 0x02	; 2
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	bc 01       	movw	r22, r24
     84a:	02 c0       	rjmp	.+4      	; 0x850 <touchButton_init+0x14>
     84c:	66 0f       	add	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	3a 95       	dec	r19
     852:	e2 f7       	brpl	.-8      	; 0x84c <touchButton_init+0x10>
     854:	24 70       	andi	r18, 0x04	; 4
     856:	02 c0       	rjmp	.+4      	; 0x85c <touchButton_init+0x20>
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	2a 95       	dec	r18
     85e:	e2 f7       	brpl	.-8      	; 0x858 <touchButton_init+0x1c>
     860:	86 2b       	or	r24, r22
     862:	97 2b       	or	r25, r23
     864:	80 95       	com	r24
     866:	90 95       	com	r25
     868:	84 23       	and	r24, r20
     86a:	87 bb       	out	0x17, r24	; 23
     86c:	08 95       	ret

0000086e <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     86e:	86 b3       	in	r24, 0x16	; 22
     870:	e6 ed       	ldi	r30, 0xD6	; 214
     872:	f2 e0       	ldi	r31, 0x02	; 2
     874:	86 95       	lsr	r24
     876:	81 70       	andi	r24, 0x01	; 1
     878:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     87a:	86 b3       	in	r24, 0x16	; 22
     87c:	82 fb       	bst	r24, 2
     87e:	88 27       	eor	r24, r24
     880:	80 f9       	bld	r24, 0
     882:	81 83       	std	Z+1, r24	; 0x01
     884:	08 95       	ret

00000886 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     886:	5d 9b       	sbis	0x0b, 5	; 11
     888:	fe cf       	rjmp	.-4      	; 0x886 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     88a:	8c b9       	out	0x0c, r24	; 12
     88c:	08 95       	ret

0000088e <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     88e:	5f 9b       	sbis	0x0b, 7	; 11
     890:	fe cf       	rjmp	.-4      	; 0x88e <USART_receiveChar>
		;
	
	return UDR0;
     892:	8c b1       	in	r24, 0x0c	; 12
     894:	08 95       	ret

00000896 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     896:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     898:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     89a:	88 e1       	ldi	r24, 0x18	; 24
     89c:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     89e:	8e e8       	ldi	r24, 0x8E	; 142
     8a0:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     8a2:	67 e4       	ldi	r22, 0x47	; 71
     8a4:	74 e0       	ldi	r23, 0x04	; 4
     8a6:	83 e4       	ldi	r24, 0x43	; 67
     8a8:	94 e0       	ldi	r25, 0x04	; 4
     8aa:	0e 94 8a 08 	call	0x1114	; 0x1114 <fdevopen>
     8ae:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <uart+0x1>
     8b2:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <uart>
     8b6:	08 95       	ret

000008b8 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     8b8:	85 b7       	in	r24, 0x35	; 53
     8ba:	80 68       	ori	r24, 0x80	; 128
     8bc:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     8be:	80 b7       	in	r24, 0x30	; 48
     8c0:	88 60       	ori	r24, 0x08	; 8
     8c2:	80 bf       	out	0x30, r24	; 48
     8c4:	08 95       	ret
     8c6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_pscA>
     8ca:	60 f0       	brcs	.+24     	; 0x8e4 <xmem_init+0x2c>
     8cc:	80 e8       	ldi	r24, 0x80	; 128
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <xmem_init+0x1c>
     8d2:	9e ef       	ldi	r25, 0xFE	; 254
     8d4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscB>
     8d8:	28 f0       	brcs	.+10     	; 0x8e4 <xmem_init+0x2c>
     8da:	40 e8       	ldi	r20, 0x80	; 128
     8dc:	51 e0       	ldi	r21, 0x01	; 1
     8de:	71 f4       	brne	.+28     	; 0x8fc <atan2+0x10>
     8e0:	5e ef       	ldi	r21, 0xFE	; 254
     8e2:	0c c0       	rjmp	.+24     	; 0x8fc <atan2+0x10>
     8e4:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>
     8e8:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_zero>

000008ec <atan2>:
     8ec:	e9 2f       	mov	r30, r25
     8ee:	e0 78       	andi	r30, 0x80	; 128
     8f0:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_split3>
     8f4:	40 f3       	brcs	.-48     	; 0x8c6 <xmem_init+0xe>
     8f6:	09 2e       	mov	r0, r25
     8f8:	05 2a       	or	r0, r21
     8fa:	b1 f3       	breq	.-20     	; 0x8e8 <xmem_init+0x30>
     8fc:	26 17       	cp	r18, r22
     8fe:	37 07       	cpc	r19, r23
     900:	48 07       	cpc	r20, r24
     902:	59 07       	cpc	r21, r25
     904:	38 f0       	brcs	.+14     	; 0x914 <atan2+0x28>
     906:	0e 2e       	mov	r0, r30
     908:	07 f8       	bld	r0, 7
     90a:	e0 25       	eor	r30, r0
     90c:	69 f0       	breq	.+26     	; 0x928 <atan2+0x3c>
     90e:	e0 25       	eor	r30, r0
     910:	e0 64       	ori	r30, 0x40	; 64
     912:	0a c0       	rjmp	.+20     	; 0x928 <atan2+0x3c>
     914:	ef 63       	ori	r30, 0x3F	; 63
     916:	07 f8       	bld	r0, 7
     918:	00 94       	com	r0
     91a:	07 fa       	bst	r0, 7
     91c:	db 01       	movw	r26, r22
     91e:	b9 01       	movw	r22, r18
     920:	9d 01       	movw	r18, r26
     922:	dc 01       	movw	r26, r24
     924:	ca 01       	movw	r24, r20
     926:	ad 01       	movw	r20, r26
     928:	ef 93       	push	r30
     92a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divsf3_pse>
     92e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_round>
     932:	0e 94 a6 04 	call	0x94c	; 0x94c <atan>
     936:	5f 91       	pop	r21
     938:	55 23       	and	r21, r21
     93a:	39 f0       	breq	.+14     	; 0x94a <atan2+0x5e>
     93c:	2b ed       	ldi	r18, 0xDB	; 219
     93e:	3f e0       	ldi	r19, 0x0F	; 15
     940:	49 e4       	ldi	r20, 0x49	; 73
     942:	50 fd       	sbrc	r21, 0
     944:	49 ec       	ldi	r20, 0xC9	; 201
     946:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__addsf3>
     94a:	08 95       	ret

0000094c <atan>:
     94c:	df 93       	push	r29
     94e:	dd 27       	eor	r29, r29
     950:	b9 2f       	mov	r27, r25
     952:	bf 77       	andi	r27, 0x7F	; 127
     954:	40 e8       	ldi	r20, 0x80	; 128
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	16 16       	cp	r1, r22
     95a:	17 06       	cpc	r1, r23
     95c:	48 07       	cpc	r20, r24
     95e:	5b 07       	cpc	r21, r27
     960:	18 f4       	brcc	.+6      	; 0x968 <atan+0x1c>
     962:	d9 2f       	mov	r29, r25
     964:	0e 94 32 06 	call	0xc64	; 0xc64 <inverse>
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	7f 93       	push	r23
     96e:	6f 93       	push	r22
     970:	0e 94 a7 06 	call	0xd4e	; 0xd4e <square>
     974:	e0 e7       	ldi	r30, 0x70	; 112
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_powser>
     97c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_round>
     980:	2f 91       	pop	r18
     982:	3f 91       	pop	r19
     984:	4f 91       	pop	r20
     986:	5f 91       	pop	r21
     988:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3x>
     98c:	dd 23       	and	r29, r29
     98e:	51 f0       	breq	.+20     	; 0x9a4 <atan+0x58>
     990:	90 58       	subi	r25, 0x80	; 128
     992:	a2 ea       	ldi	r26, 0xA2	; 162
     994:	2a ed       	ldi	r18, 0xDA	; 218
     996:	3f e0       	ldi	r19, 0x0F	; 15
     998:	49 ec       	ldi	r20, 0xC9	; 201
     99a:	5f e3       	ldi	r21, 0x3F	; 63
     99c:	d0 78       	andi	r29, 0x80	; 128
     99e:	5d 27       	eor	r21, r29
     9a0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__addsf3x>
     9a4:	df 91       	pop	r29
     9a6:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_round>

000009aa <__divsf3>:
     9aa:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__divsf3x>
     9ae:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_round>
     9b2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscB>
     9b6:	58 f0       	brcs	.+22     	; 0x9ce <__divsf3+0x24>
     9b8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_pscA>
     9bc:	40 f0       	brcs	.+16     	; 0x9ce <__divsf3+0x24>
     9be:	29 f4       	brne	.+10     	; 0x9ca <__divsf3+0x20>
     9c0:	5f 3f       	cpi	r21, 0xFF	; 255
     9c2:	29 f0       	breq	.+10     	; 0x9ce <__divsf3+0x24>
     9c4:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_inf>
     9c8:	51 11       	cpse	r21, r1
     9ca:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_szero>
     9ce:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>

000009d2 <__divsf3x>:
     9d2:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_split3>
     9d6:	68 f3       	brcs	.-38     	; 0x9b2 <__divsf3+0x8>

000009d8 <__divsf3_pse>:
     9d8:	99 23       	and	r25, r25
     9da:	b1 f3       	breq	.-20     	; 0x9c8 <__divsf3+0x1e>
     9dc:	55 23       	and	r21, r21
     9de:	91 f3       	breq	.-28     	; 0x9c4 <__divsf3+0x1a>
     9e0:	95 1b       	sub	r25, r21
     9e2:	55 0b       	sbc	r21, r21
     9e4:	bb 27       	eor	r27, r27
     9e6:	aa 27       	eor	r26, r26
     9e8:	62 17       	cp	r22, r18
     9ea:	73 07       	cpc	r23, r19
     9ec:	84 07       	cpc	r24, r20
     9ee:	38 f0       	brcs	.+14     	; 0x9fe <__divsf3_pse+0x26>
     9f0:	9f 5f       	subi	r25, 0xFF	; 255
     9f2:	5f 4f       	sbci	r21, 0xFF	; 255
     9f4:	22 0f       	add	r18, r18
     9f6:	33 1f       	adc	r19, r19
     9f8:	44 1f       	adc	r20, r20
     9fa:	aa 1f       	adc	r26, r26
     9fc:	a9 f3       	breq	.-22     	; 0x9e8 <__divsf3_pse+0x10>
     9fe:	35 d0       	rcall	.+106    	; 0xa6a <__divsf3_pse+0x92>
     a00:	0e 2e       	mov	r0, r30
     a02:	3a f0       	brmi	.+14     	; 0xa12 <__divsf3_pse+0x3a>
     a04:	e0 e8       	ldi	r30, 0x80	; 128
     a06:	32 d0       	rcall	.+100    	; 0xa6c <__divsf3_pse+0x94>
     a08:	91 50       	subi	r25, 0x01	; 1
     a0a:	50 40       	sbci	r21, 0x00	; 0
     a0c:	e6 95       	lsr	r30
     a0e:	00 1c       	adc	r0, r0
     a10:	ca f7       	brpl	.-14     	; 0xa04 <__divsf3_pse+0x2c>
     a12:	2b d0       	rcall	.+86     	; 0xa6a <__divsf3_pse+0x92>
     a14:	fe 2f       	mov	r31, r30
     a16:	29 d0       	rcall	.+82     	; 0xa6a <__divsf3_pse+0x92>
     a18:	66 0f       	add	r22, r22
     a1a:	77 1f       	adc	r23, r23
     a1c:	88 1f       	adc	r24, r24
     a1e:	bb 1f       	adc	r27, r27
     a20:	26 17       	cp	r18, r22
     a22:	37 07       	cpc	r19, r23
     a24:	48 07       	cpc	r20, r24
     a26:	ab 07       	cpc	r26, r27
     a28:	b0 e8       	ldi	r27, 0x80	; 128
     a2a:	09 f0       	breq	.+2      	; 0xa2e <__divsf3_pse+0x56>
     a2c:	bb 0b       	sbc	r27, r27
     a2e:	80 2d       	mov	r24, r0
     a30:	bf 01       	movw	r22, r30
     a32:	ff 27       	eor	r31, r31
     a34:	93 58       	subi	r25, 0x83	; 131
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	3a f0       	brmi	.+14     	; 0xa48 <__divsf3_pse+0x70>
     a3a:	9e 3f       	cpi	r25, 0xFE	; 254
     a3c:	51 05       	cpc	r21, r1
     a3e:	78 f0       	brcs	.+30     	; 0xa5e <__divsf3_pse+0x86>
     a40:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_inf>
     a44:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_szero>
     a48:	5f 3f       	cpi	r21, 0xFF	; 255
     a4a:	e4 f3       	brlt	.-8      	; 0xa44 <__divsf3_pse+0x6c>
     a4c:	98 3e       	cpi	r25, 0xE8	; 232
     a4e:	d4 f3       	brlt	.-12     	; 0xa44 <__divsf3_pse+0x6c>
     a50:	86 95       	lsr	r24
     a52:	77 95       	ror	r23
     a54:	67 95       	ror	r22
     a56:	b7 95       	ror	r27
     a58:	f7 95       	ror	r31
     a5a:	9f 5f       	subi	r25, 0xFF	; 255
     a5c:	c9 f7       	brne	.-14     	; 0xa50 <__divsf3_pse+0x78>
     a5e:	88 0f       	add	r24, r24
     a60:	91 1d       	adc	r25, r1
     a62:	96 95       	lsr	r25
     a64:	87 95       	ror	r24
     a66:	97 f9       	bld	r25, 7
     a68:	08 95       	ret
     a6a:	e1 e0       	ldi	r30, 0x01	; 1
     a6c:	66 0f       	add	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	88 1f       	adc	r24, r24
     a72:	bb 1f       	adc	r27, r27
     a74:	62 17       	cp	r22, r18
     a76:	73 07       	cpc	r23, r19
     a78:	84 07       	cpc	r24, r20
     a7a:	ba 07       	cpc	r27, r26
     a7c:	20 f0       	brcs	.+8      	; 0xa86 <__divsf3_pse+0xae>
     a7e:	62 1b       	sub	r22, r18
     a80:	73 0b       	sbc	r23, r19
     a82:	84 0b       	sbc	r24, r20
     a84:	ba 0b       	sbc	r27, r26
     a86:	ee 1f       	adc	r30, r30
     a88:	88 f7       	brcc	.-30     	; 0xa6c <__divsf3_pse+0x94>
     a8a:	e0 95       	com	r30
     a8c:	08 95       	ret

00000a8e <__fixsfsi>:
     a8e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fixunssfsi>
     a92:	68 94       	set
     a94:	b1 11       	cpse	r27, r1
     a96:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_szero>
     a9a:	08 95       	ret

00000a9c <__fixunssfsi>:
     a9c:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_splitA>
     aa0:	88 f0       	brcs	.+34     	; 0xac4 <__fixunssfsi+0x28>
     aa2:	9f 57       	subi	r25, 0x7F	; 127
     aa4:	98 f0       	brcs	.+38     	; 0xacc <__fixunssfsi+0x30>
     aa6:	b9 2f       	mov	r27, r25
     aa8:	99 27       	eor	r25, r25
     aaa:	b7 51       	subi	r27, 0x17	; 23
     aac:	b0 f0       	brcs	.+44     	; 0xada <__fixunssfsi+0x3e>
     aae:	e1 f0       	breq	.+56     	; 0xae8 <__fixunssfsi+0x4c>
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	88 1f       	adc	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	1a f0       	brmi	.+6      	; 0xac0 <__fixunssfsi+0x24>
     aba:	ba 95       	dec	r27
     abc:	c9 f7       	brne	.-14     	; 0xab0 <__fixunssfsi+0x14>
     abe:	14 c0       	rjmp	.+40     	; 0xae8 <__fixunssfsi+0x4c>
     ac0:	b1 30       	cpi	r27, 0x01	; 1
     ac2:	91 f0       	breq	.+36     	; 0xae8 <__fixunssfsi+0x4c>
     ac4:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_zero>
     ac8:	b1 e0       	ldi	r27, 0x01	; 1
     aca:	08 95       	ret
     acc:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_zero>
     ad0:	67 2f       	mov	r22, r23
     ad2:	78 2f       	mov	r23, r24
     ad4:	88 27       	eor	r24, r24
     ad6:	b8 5f       	subi	r27, 0xF8	; 248
     ad8:	39 f0       	breq	.+14     	; 0xae8 <__fixunssfsi+0x4c>
     ada:	b9 3f       	cpi	r27, 0xF9	; 249
     adc:	cc f3       	brlt	.-14     	; 0xad0 <__fixunssfsi+0x34>
     ade:	86 95       	lsr	r24
     ae0:	77 95       	ror	r23
     ae2:	67 95       	ror	r22
     ae4:	b3 95       	inc	r27
     ae6:	d9 f7       	brne	.-10     	; 0xade <__fixunssfsi+0x42>
     ae8:	3e f4       	brtc	.+14     	; 0xaf8 <__fixunssfsi+0x5c>
     aea:	90 95       	com	r25
     aec:	80 95       	com	r24
     aee:	70 95       	com	r23
     af0:	61 95       	neg	r22
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	8f 4f       	sbci	r24, 0xFF	; 255
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	08 95       	ret

00000afa <__floatunsisf>:
     afa:	e8 94       	clt
     afc:	09 c0       	rjmp	.+18     	; 0xb10 <__floatsisf+0x12>

00000afe <__floatsisf>:
     afe:	97 fb       	bst	r25, 7
     b00:	3e f4       	brtc	.+14     	; 0xb10 <__floatsisf+0x12>
     b02:	90 95       	com	r25
     b04:	80 95       	com	r24
     b06:	70 95       	com	r23
     b08:	61 95       	neg	r22
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255
     b0c:	8f 4f       	sbci	r24, 0xFF	; 255
     b0e:	9f 4f       	sbci	r25, 0xFF	; 255
     b10:	99 23       	and	r25, r25
     b12:	a9 f0       	breq	.+42     	; 0xb3e <__floatsisf+0x40>
     b14:	f9 2f       	mov	r31, r25
     b16:	96 e9       	ldi	r25, 0x96	; 150
     b18:	bb 27       	eor	r27, r27
     b1a:	93 95       	inc	r25
     b1c:	f6 95       	lsr	r31
     b1e:	87 95       	ror	r24
     b20:	77 95       	ror	r23
     b22:	67 95       	ror	r22
     b24:	b7 95       	ror	r27
     b26:	f1 11       	cpse	r31, r1
     b28:	f8 cf       	rjmp	.-16     	; 0xb1a <__floatsisf+0x1c>
     b2a:	fa f4       	brpl	.+62     	; 0xb6a <__floatsisf+0x6c>
     b2c:	bb 0f       	add	r27, r27
     b2e:	11 f4       	brne	.+4      	; 0xb34 <__floatsisf+0x36>
     b30:	60 ff       	sbrs	r22, 0
     b32:	1b c0       	rjmp	.+54     	; 0xb6a <__floatsisf+0x6c>
     b34:	6f 5f       	subi	r22, 0xFF	; 255
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	8f 4f       	sbci	r24, 0xFF	; 255
     b3a:	9f 4f       	sbci	r25, 0xFF	; 255
     b3c:	16 c0       	rjmp	.+44     	; 0xb6a <__floatsisf+0x6c>
     b3e:	88 23       	and	r24, r24
     b40:	11 f0       	breq	.+4      	; 0xb46 <__floatsisf+0x48>
     b42:	96 e9       	ldi	r25, 0x96	; 150
     b44:	11 c0       	rjmp	.+34     	; 0xb68 <__floatsisf+0x6a>
     b46:	77 23       	and	r23, r23
     b48:	21 f0       	breq	.+8      	; 0xb52 <__floatsisf+0x54>
     b4a:	9e e8       	ldi	r25, 0x8E	; 142
     b4c:	87 2f       	mov	r24, r23
     b4e:	76 2f       	mov	r23, r22
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <__floatsisf+0x5e>
     b52:	66 23       	and	r22, r22
     b54:	71 f0       	breq	.+28     	; 0xb72 <__floatsisf+0x74>
     b56:	96 e8       	ldi	r25, 0x86	; 134
     b58:	86 2f       	mov	r24, r22
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	2a f0       	brmi	.+10     	; 0xb6a <__floatsisf+0x6c>
     b60:	9a 95       	dec	r25
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	88 1f       	adc	r24, r24
     b68:	da f7       	brpl	.-10     	; 0xb60 <__floatsisf+0x62>
     b6a:	88 0f       	add	r24, r24
     b6c:	96 95       	lsr	r25
     b6e:	87 95       	ror	r24
     b70:	97 f9       	bld	r25, 7
     b72:	08 95       	ret

00000b74 <__fp_inf>:
     b74:	97 f9       	bld	r25, 7
     b76:	9f 67       	ori	r25, 0x7F	; 127
     b78:	80 e8       	ldi	r24, 0x80	; 128
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	08 95       	ret

00000b80 <__fp_nan>:
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	80 ec       	ldi	r24, 0xC0	; 192
     b84:	08 95       	ret

00000b86 <__fp_powser>:
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	1f 93       	push	r17
     b8c:	0f 93       	push	r16
     b8e:	ff 92       	push	r15
     b90:	ef 92       	push	r14
     b92:	df 92       	push	r13
     b94:	7b 01       	movw	r14, r22
     b96:	8c 01       	movw	r16, r24
     b98:	68 94       	set
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <__fp_powser+0x22>
     b9c:	da 2e       	mov	r13, r26
     b9e:	ef 01       	movw	r28, r30
     ba0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3x>
     ba4:	fe 01       	movw	r30, r28
     ba6:	e8 94       	clt
     ba8:	a5 91       	lpm	r26, Z+
     baa:	25 91       	lpm	r18, Z+
     bac:	35 91       	lpm	r19, Z+
     bae:	45 91       	lpm	r20, Z+
     bb0:	55 91       	lpm	r21, Z+
     bb2:	a6 f3       	brts	.-24     	; 0xb9c <__fp_powser+0x16>
     bb4:	ef 01       	movw	r28, r30
     bb6:	0e 94 c3 06 	call	0xd86	; 0xd86 <__addsf3x>
     bba:	fe 01       	movw	r30, r28
     bbc:	97 01       	movw	r18, r14
     bbe:	a8 01       	movw	r20, r16
     bc0:	da 94       	dec	r13
     bc2:	69 f7       	brne	.-38     	; 0xb9e <__fp_powser+0x18>
     bc4:	df 90       	pop	r13
     bc6:	ef 90       	pop	r14
     bc8:	ff 90       	pop	r15
     bca:	0f 91       	pop	r16
     bcc:	1f 91       	pop	r17
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <__fp_pscA>:
     bd4:	00 24       	eor	r0, r0
     bd6:	0a 94       	dec	r0
     bd8:	16 16       	cp	r1, r22
     bda:	17 06       	cpc	r1, r23
     bdc:	18 06       	cpc	r1, r24
     bde:	09 06       	cpc	r0, r25
     be0:	08 95       	ret

00000be2 <__fp_pscB>:
     be2:	00 24       	eor	r0, r0
     be4:	0a 94       	dec	r0
     be6:	12 16       	cp	r1, r18
     be8:	13 06       	cpc	r1, r19
     bea:	14 06       	cpc	r1, r20
     bec:	05 06       	cpc	r0, r21
     bee:	08 95       	ret

00000bf0 <__fp_round>:
     bf0:	09 2e       	mov	r0, r25
     bf2:	03 94       	inc	r0
     bf4:	00 0c       	add	r0, r0
     bf6:	11 f4       	brne	.+4      	; 0xbfc <__fp_round+0xc>
     bf8:	88 23       	and	r24, r24
     bfa:	52 f0       	brmi	.+20     	; 0xc10 <__fp_round+0x20>
     bfc:	bb 0f       	add	r27, r27
     bfe:	40 f4       	brcc	.+16     	; 0xc10 <__fp_round+0x20>
     c00:	bf 2b       	or	r27, r31
     c02:	11 f4       	brne	.+4      	; 0xc08 <__fp_round+0x18>
     c04:	60 ff       	sbrs	r22, 0
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <__fp_round+0x20>
     c08:	6f 5f       	subi	r22, 0xFF	; 255
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	8f 4f       	sbci	r24, 0xFF	; 255
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	08 95       	ret

00000c12 <__fp_split3>:
     c12:	57 fd       	sbrc	r21, 7
     c14:	90 58       	subi	r25, 0x80	; 128
     c16:	44 0f       	add	r20, r20
     c18:	55 1f       	adc	r21, r21
     c1a:	59 f0       	breq	.+22     	; 0xc32 <__fp_splitA+0x10>
     c1c:	5f 3f       	cpi	r21, 0xFF	; 255
     c1e:	71 f0       	breq	.+28     	; 0xc3c <__fp_splitA+0x1a>
     c20:	47 95       	ror	r20

00000c22 <__fp_splitA>:
     c22:	88 0f       	add	r24, r24
     c24:	97 fb       	bst	r25, 7
     c26:	99 1f       	adc	r25, r25
     c28:	61 f0       	breq	.+24     	; 0xc42 <__fp_splitA+0x20>
     c2a:	9f 3f       	cpi	r25, 0xFF	; 255
     c2c:	79 f0       	breq	.+30     	; 0xc4c <__fp_splitA+0x2a>
     c2e:	87 95       	ror	r24
     c30:	08 95       	ret
     c32:	12 16       	cp	r1, r18
     c34:	13 06       	cpc	r1, r19
     c36:	14 06       	cpc	r1, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	f2 cf       	rjmp	.-28     	; 0xc20 <__fp_split3+0xe>
     c3c:	46 95       	lsr	r20
     c3e:	f1 df       	rcall	.-30     	; 0xc22 <__fp_splitA>
     c40:	08 c0       	rjmp	.+16     	; 0xc52 <__fp_splitA+0x30>
     c42:	16 16       	cp	r1, r22
     c44:	17 06       	cpc	r1, r23
     c46:	18 06       	cpc	r1, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	f1 cf       	rjmp	.-30     	; 0xc2e <__fp_splitA+0xc>
     c4c:	86 95       	lsr	r24
     c4e:	71 05       	cpc	r23, r1
     c50:	61 05       	cpc	r22, r1
     c52:	08 94       	sec
     c54:	08 95       	ret

00000c56 <__fp_zero>:
     c56:	e8 94       	clt

00000c58 <__fp_szero>:
     c58:	bb 27       	eor	r27, r27
     c5a:	66 27       	eor	r22, r22
     c5c:	77 27       	eor	r23, r23
     c5e:	cb 01       	movw	r24, r22
     c60:	97 f9       	bld	r25, 7
     c62:	08 95       	ret

00000c64 <inverse>:
     c64:	9b 01       	movw	r18, r22
     c66:	ac 01       	movw	r20, r24
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	9f e3       	ldi	r25, 0x3F	; 63
     c70:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__divsf3>

00000c74 <__mulsf3>:
     c74:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3x>
     c78:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_round>
     c7c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_pscA>
     c80:	38 f0       	brcs	.+14     	; 0xc90 <__mulsf3+0x1c>
     c82:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscB>
     c86:	20 f0       	brcs	.+8      	; 0xc90 <__mulsf3+0x1c>
     c88:	95 23       	and	r25, r21
     c8a:	11 f0       	breq	.+4      	; 0xc90 <__mulsf3+0x1c>
     c8c:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_inf>
     c90:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>
     c94:	11 24       	eor	r1, r1
     c96:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_szero>

00000c9a <__mulsf3x>:
     c9a:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_split3>
     c9e:	70 f3       	brcs	.-36     	; 0xc7c <__mulsf3+0x8>

00000ca0 <__mulsf3_pse>:
     ca0:	95 9f       	mul	r25, r21
     ca2:	c1 f3       	breq	.-16     	; 0xc94 <__mulsf3+0x20>
     ca4:	95 0f       	add	r25, r21
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	55 1f       	adc	r21, r21
     caa:	62 9f       	mul	r22, r18
     cac:	f0 01       	movw	r30, r0
     cae:	72 9f       	mul	r23, r18
     cb0:	bb 27       	eor	r27, r27
     cb2:	f0 0d       	add	r31, r0
     cb4:	b1 1d       	adc	r27, r1
     cb6:	63 9f       	mul	r22, r19
     cb8:	aa 27       	eor	r26, r26
     cba:	f0 0d       	add	r31, r0
     cbc:	b1 1d       	adc	r27, r1
     cbe:	aa 1f       	adc	r26, r26
     cc0:	64 9f       	mul	r22, r20
     cc2:	66 27       	eor	r22, r22
     cc4:	b0 0d       	add	r27, r0
     cc6:	a1 1d       	adc	r26, r1
     cc8:	66 1f       	adc	r22, r22
     cca:	82 9f       	mul	r24, r18
     ccc:	22 27       	eor	r18, r18
     cce:	b0 0d       	add	r27, r0
     cd0:	a1 1d       	adc	r26, r1
     cd2:	62 1f       	adc	r22, r18
     cd4:	73 9f       	mul	r23, r19
     cd6:	b0 0d       	add	r27, r0
     cd8:	a1 1d       	adc	r26, r1
     cda:	62 1f       	adc	r22, r18
     cdc:	83 9f       	mul	r24, r19
     cde:	a0 0d       	add	r26, r0
     ce0:	61 1d       	adc	r22, r1
     ce2:	22 1f       	adc	r18, r18
     ce4:	74 9f       	mul	r23, r20
     ce6:	33 27       	eor	r19, r19
     ce8:	a0 0d       	add	r26, r0
     cea:	61 1d       	adc	r22, r1
     cec:	23 1f       	adc	r18, r19
     cee:	84 9f       	mul	r24, r20
     cf0:	60 0d       	add	r22, r0
     cf2:	21 1d       	adc	r18, r1
     cf4:	82 2f       	mov	r24, r18
     cf6:	76 2f       	mov	r23, r22
     cf8:	6a 2f       	mov	r22, r26
     cfa:	11 24       	eor	r1, r1
     cfc:	9f 57       	subi	r25, 0x7F	; 127
     cfe:	50 40       	sbci	r21, 0x00	; 0
     d00:	9a f0       	brmi	.+38     	; 0xd28 <__mulsf3_pse+0x88>
     d02:	f1 f0       	breq	.+60     	; 0xd40 <__mulsf3_pse+0xa0>
     d04:	88 23       	and	r24, r24
     d06:	4a f0       	brmi	.+18     	; 0xd1a <__mulsf3_pse+0x7a>
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	bb 1f       	adc	r27, r27
     d0e:	66 1f       	adc	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	91 50       	subi	r25, 0x01	; 1
     d16:	50 40       	sbci	r21, 0x00	; 0
     d18:	a9 f7       	brne	.-22     	; 0xd04 <__mulsf3_pse+0x64>
     d1a:	9e 3f       	cpi	r25, 0xFE	; 254
     d1c:	51 05       	cpc	r21, r1
     d1e:	80 f0       	brcs	.+32     	; 0xd40 <__mulsf3_pse+0xa0>
     d20:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_inf>
     d24:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_szero>
     d28:	5f 3f       	cpi	r21, 0xFF	; 255
     d2a:	e4 f3       	brlt	.-8      	; 0xd24 <__mulsf3_pse+0x84>
     d2c:	98 3e       	cpi	r25, 0xE8	; 232
     d2e:	d4 f3       	brlt	.-12     	; 0xd24 <__mulsf3_pse+0x84>
     d30:	86 95       	lsr	r24
     d32:	77 95       	ror	r23
     d34:	67 95       	ror	r22
     d36:	b7 95       	ror	r27
     d38:	f7 95       	ror	r31
     d3a:	e7 95       	ror	r30
     d3c:	9f 5f       	subi	r25, 0xFF	; 255
     d3e:	c1 f7       	brne	.-16     	; 0xd30 <__mulsf3_pse+0x90>
     d40:	fe 2b       	or	r31, r30
     d42:	88 0f       	add	r24, r24
     d44:	91 1d       	adc	r25, r1
     d46:	96 95       	lsr	r25
     d48:	87 95       	ror	r24
     d4a:	97 f9       	bld	r25, 7
     d4c:	08 95       	ret

00000d4e <square>:
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__mulsf3>

00000d56 <__subsf3>:
     d56:	50 58       	subi	r21, 0x80	; 128

00000d58 <__addsf3>:
     d58:	bb 27       	eor	r27, r27
     d5a:	aa 27       	eor	r26, r26
     d5c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__addsf3x>
     d60:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_round>
     d64:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_pscA>
     d68:	38 f0       	brcs	.+14     	; 0xd78 <__addsf3+0x20>
     d6a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscB>
     d6e:	20 f0       	brcs	.+8      	; 0xd78 <__addsf3+0x20>
     d70:	39 f4       	brne	.+14     	; 0xd80 <__addsf3+0x28>
     d72:	9f 3f       	cpi	r25, 0xFF	; 255
     d74:	19 f4       	brne	.+6      	; 0xd7c <__addsf3+0x24>
     d76:	26 f4       	brtc	.+8      	; 0xd80 <__addsf3+0x28>
     d78:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>
     d7c:	0e f4       	brtc	.+2      	; 0xd80 <__addsf3+0x28>
     d7e:	e0 95       	com	r30
     d80:	e7 fb       	bst	r30, 7
     d82:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_inf>

00000d86 <__addsf3x>:
     d86:	e9 2f       	mov	r30, r25
     d88:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_split3>
     d8c:	58 f3       	brcs	.-42     	; 0xd64 <__addsf3+0xc>
     d8e:	ba 17       	cp	r27, r26
     d90:	62 07       	cpc	r22, r18
     d92:	73 07       	cpc	r23, r19
     d94:	84 07       	cpc	r24, r20
     d96:	95 07       	cpc	r25, r21
     d98:	20 f0       	brcs	.+8      	; 0xda2 <__addsf3x+0x1c>
     d9a:	79 f4       	brne	.+30     	; 0xdba <__addsf3x+0x34>
     d9c:	a6 f5       	brtc	.+104    	; 0xe06 <__addsf3x+0x80>
     d9e:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_zero>
     da2:	0e f4       	brtc	.+2      	; 0xda6 <__addsf3x+0x20>
     da4:	e0 95       	com	r30
     da6:	0b 2e       	mov	r0, r27
     da8:	ba 2f       	mov	r27, r26
     daa:	a0 2d       	mov	r26, r0
     dac:	0b 01       	movw	r0, r22
     dae:	b9 01       	movw	r22, r18
     db0:	90 01       	movw	r18, r0
     db2:	0c 01       	movw	r0, r24
     db4:	ca 01       	movw	r24, r20
     db6:	a0 01       	movw	r20, r0
     db8:	11 24       	eor	r1, r1
     dba:	ff 27       	eor	r31, r31
     dbc:	59 1b       	sub	r21, r25
     dbe:	99 f0       	breq	.+38     	; 0xde6 <__addsf3x+0x60>
     dc0:	59 3f       	cpi	r21, 0xF9	; 249
     dc2:	50 f4       	brcc	.+20     	; 0xdd8 <__addsf3x+0x52>
     dc4:	50 3e       	cpi	r21, 0xE0	; 224
     dc6:	68 f1       	brcs	.+90     	; 0xe22 <__addsf3x+0x9c>
     dc8:	1a 16       	cp	r1, r26
     dca:	f0 40       	sbci	r31, 0x00	; 0
     dcc:	a2 2f       	mov	r26, r18
     dce:	23 2f       	mov	r18, r19
     dd0:	34 2f       	mov	r19, r20
     dd2:	44 27       	eor	r20, r20
     dd4:	58 5f       	subi	r21, 0xF8	; 248
     dd6:	f3 cf       	rjmp	.-26     	; 0xdbe <__addsf3x+0x38>
     dd8:	46 95       	lsr	r20
     dda:	37 95       	ror	r19
     ddc:	27 95       	ror	r18
     dde:	a7 95       	ror	r26
     de0:	f0 40       	sbci	r31, 0x00	; 0
     de2:	53 95       	inc	r21
     de4:	c9 f7       	brne	.-14     	; 0xdd8 <__addsf3x+0x52>
     de6:	7e f4       	brtc	.+30     	; 0xe06 <__addsf3x+0x80>
     de8:	1f 16       	cp	r1, r31
     dea:	ba 0b       	sbc	r27, r26
     dec:	62 0b       	sbc	r22, r18
     dee:	73 0b       	sbc	r23, r19
     df0:	84 0b       	sbc	r24, r20
     df2:	ba f0       	brmi	.+46     	; 0xe22 <__addsf3x+0x9c>
     df4:	91 50       	subi	r25, 0x01	; 1
     df6:	a1 f0       	breq	.+40     	; 0xe20 <__addsf3x+0x9a>
     df8:	ff 0f       	add	r31, r31
     dfa:	bb 1f       	adc	r27, r27
     dfc:	66 1f       	adc	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	c2 f7       	brpl	.-16     	; 0xdf4 <__addsf3x+0x6e>
     e04:	0e c0       	rjmp	.+28     	; 0xe22 <__addsf3x+0x9c>
     e06:	ba 0f       	add	r27, r26
     e08:	62 1f       	adc	r22, r18
     e0a:	73 1f       	adc	r23, r19
     e0c:	84 1f       	adc	r24, r20
     e0e:	48 f4       	brcc	.+18     	; 0xe22 <__addsf3x+0x9c>
     e10:	87 95       	ror	r24
     e12:	77 95       	ror	r23
     e14:	67 95       	ror	r22
     e16:	b7 95       	ror	r27
     e18:	f7 95       	ror	r31
     e1a:	9e 3f       	cpi	r25, 0xFE	; 254
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <__addsf3x+0x9a>
     e1e:	b0 cf       	rjmp	.-160    	; 0xd80 <__addsf3+0x28>
     e20:	93 95       	inc	r25
     e22:	88 0f       	add	r24, r24
     e24:	08 f0       	brcs	.+2      	; 0xe28 <__addsf3x+0xa2>
     e26:	99 27       	eor	r25, r25
     e28:	ee 0f       	add	r30, r30
     e2a:	97 95       	ror	r25
     e2c:	87 95       	ror	r24
     e2e:	08 95       	ret

00000e30 <__divmodhi4>:
     e30:	97 fb       	bst	r25, 7
     e32:	07 2e       	mov	r0, r23
     e34:	16 f4       	brtc	.+4      	; 0xe3a <__divmodhi4+0xa>
     e36:	00 94       	com	r0
     e38:	07 d0       	rcall	.+14     	; 0xe48 <__divmodhi4_neg1>
     e3a:	77 fd       	sbrc	r23, 7
     e3c:	09 d0       	rcall	.+18     	; 0xe50 <__divmodhi4_neg2>
     e3e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__udivmodhi4>
     e42:	07 fc       	sbrc	r0, 7
     e44:	05 d0       	rcall	.+10     	; 0xe50 <__divmodhi4_neg2>
     e46:	3e f4       	brtc	.+14     	; 0xe56 <__divmodhi4_exit>

00000e48 <__divmodhi4_neg1>:
     e48:	90 95       	com	r25
     e4a:	81 95       	neg	r24
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	08 95       	ret

00000e50 <__divmodhi4_neg2>:
     e50:	70 95       	com	r23
     e52:	61 95       	neg	r22
     e54:	7f 4f       	sbci	r23, 0xFF	; 255

00000e56 <__divmodhi4_exit>:
     e56:	08 95       	ret

00000e58 <__udivmodsi4>:
     e58:	a1 e2       	ldi	r26, 0x21	; 33
     e5a:	1a 2e       	mov	r1, r26
     e5c:	aa 1b       	sub	r26, r26
     e5e:	bb 1b       	sub	r27, r27
     e60:	fd 01       	movw	r30, r26
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <__udivmodsi4_ep>

00000e64 <__udivmodsi4_loop>:
     e64:	aa 1f       	adc	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	ee 1f       	adc	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	a2 17       	cp	r26, r18
     e6e:	b3 07       	cpc	r27, r19
     e70:	e4 07       	cpc	r30, r20
     e72:	f5 07       	cpc	r31, r21
     e74:	20 f0       	brcs	.+8      	; 0xe7e <__udivmodsi4_ep>
     e76:	a2 1b       	sub	r26, r18
     e78:	b3 0b       	sbc	r27, r19
     e7a:	e4 0b       	sbc	r30, r20
     e7c:	f5 0b       	sbc	r31, r21

00000e7e <__udivmodsi4_ep>:
     e7e:	66 1f       	adc	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	1a 94       	dec	r1
     e88:	69 f7       	brne	.-38     	; 0xe64 <__udivmodsi4_loop>
     e8a:	60 95       	com	r22
     e8c:	70 95       	com	r23
     e8e:	80 95       	com	r24
     e90:	90 95       	com	r25
     e92:	9b 01       	movw	r18, r22
     e94:	ac 01       	movw	r20, r24
     e96:	bd 01       	movw	r22, r26
     e98:	cf 01       	movw	r24, r30
     e9a:	08 95       	ret

00000e9c <__udivmodhi4>:
     e9c:	aa 1b       	sub	r26, r26
     e9e:	bb 1b       	sub	r27, r27
     ea0:	51 e1       	ldi	r21, 0x11	; 17
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <__udivmodhi4_ep>

00000ea4 <__udivmodhi4_loop>:
     ea4:	aa 1f       	adc	r26, r26
     ea6:	bb 1f       	adc	r27, r27
     ea8:	a6 17       	cp	r26, r22
     eaa:	b7 07       	cpc	r27, r23
     eac:	10 f0       	brcs	.+4      	; 0xeb2 <__udivmodhi4_ep>
     eae:	a6 1b       	sub	r26, r22
     eb0:	b7 0b       	sbc	r27, r23

00000eb2 <__udivmodhi4_ep>:
     eb2:	88 1f       	adc	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	5a 95       	dec	r21
     eb8:	a9 f7       	brne	.-22     	; 0xea4 <__udivmodhi4_loop>
     eba:	80 95       	com	r24
     ebc:	90 95       	com	r25
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	08 95       	ret

00000ec4 <malloc>:
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	91 05       	cpc	r25, r1
     ed0:	10 f4       	brcc	.+4      	; 0xed6 <malloc+0x12>
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <__flp>
     eda:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <__flp+0x1>
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	30 97       	sbiw	r30, 0x00	; 0
     ee8:	19 f1       	breq	.+70     	; 0xf30 <malloc+0x6c>
     eea:	40 81       	ld	r20, Z
     eec:	51 81       	ldd	r21, Z+1	; 0x01
     eee:	02 81       	ldd	r16, Z+2	; 0x02
     ef0:	13 81       	ldd	r17, Z+3	; 0x03
     ef2:	48 17       	cp	r20, r24
     ef4:	59 07       	cpc	r21, r25
     ef6:	c8 f0       	brcs	.+50     	; 0xf2a <malloc+0x66>
     ef8:	84 17       	cp	r24, r20
     efa:	95 07       	cpc	r25, r21
     efc:	69 f4       	brne	.+26     	; 0xf18 <malloc+0x54>
     efe:	10 97       	sbiw	r26, 0x00	; 0
     f00:	31 f0       	breq	.+12     	; 0xf0e <malloc+0x4a>
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	0c 93       	st	X, r16
     f06:	12 97       	sbiw	r26, 0x02	; 2
     f08:	13 96       	adiw	r26, 0x03	; 3
     f0a:	1c 93       	st	X, r17
     f0c:	27 c0       	rjmp	.+78     	; 0xf5c <malloc+0x98>
     f0e:	00 93 e0 02 	sts	0x02E0, r16	; 0x8002e0 <__flp>
     f12:	10 93 e1 02 	sts	0x02E1, r17	; 0x8002e1 <__flp+0x1>
     f16:	22 c0       	rjmp	.+68     	; 0xf5c <malloc+0x98>
     f18:	21 15       	cp	r18, r1
     f1a:	31 05       	cpc	r19, r1
     f1c:	19 f0       	breq	.+6      	; 0xf24 <malloc+0x60>
     f1e:	42 17       	cp	r20, r18
     f20:	53 07       	cpc	r21, r19
     f22:	18 f4       	brcc	.+6      	; 0xf2a <malloc+0x66>
     f24:	9a 01       	movw	r18, r20
     f26:	bd 01       	movw	r22, r26
     f28:	ef 01       	movw	r28, r30
     f2a:	df 01       	movw	r26, r30
     f2c:	f8 01       	movw	r30, r16
     f2e:	db cf       	rjmp	.-74     	; 0xee6 <malloc+0x22>
     f30:	21 15       	cp	r18, r1
     f32:	31 05       	cpc	r19, r1
     f34:	f9 f0       	breq	.+62     	; 0xf74 <malloc+0xb0>
     f36:	28 1b       	sub	r18, r24
     f38:	39 0b       	sbc	r19, r25
     f3a:	24 30       	cpi	r18, 0x04	; 4
     f3c:	31 05       	cpc	r19, r1
     f3e:	80 f4       	brcc	.+32     	; 0xf60 <malloc+0x9c>
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	9b 81       	ldd	r25, Y+3	; 0x03
     f44:	61 15       	cp	r22, r1
     f46:	71 05       	cpc	r23, r1
     f48:	21 f0       	breq	.+8      	; 0xf52 <malloc+0x8e>
     f4a:	fb 01       	movw	r30, r22
     f4c:	93 83       	std	Z+3, r25	; 0x03
     f4e:	82 83       	std	Z+2, r24	; 0x02
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <malloc+0x96>
     f52:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <__flp+0x1>
     f56:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__flp>
     f5a:	fe 01       	movw	r30, r28
     f5c:	32 96       	adiw	r30, 0x02	; 2
     f5e:	44 c0       	rjmp	.+136    	; 0xfe8 <malloc+0x124>
     f60:	fe 01       	movw	r30, r28
     f62:	e2 0f       	add	r30, r18
     f64:	f3 1f       	adc	r31, r19
     f66:	81 93       	st	Z+, r24
     f68:	91 93       	st	Z+, r25
     f6a:	22 50       	subi	r18, 0x02	; 2
     f6c:	31 09       	sbc	r19, r1
     f6e:	39 83       	std	Y+1, r19	; 0x01
     f70:	28 83       	st	Y, r18
     f72:	3a c0       	rjmp	.+116    	; 0xfe8 <malloc+0x124>
     f74:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <__brkval>
     f78:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <__brkval+0x1>
     f7c:	23 2b       	or	r18, r19
     f7e:	41 f4       	brne	.+16     	; 0xf90 <malloc+0xcc>
     f80:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f84:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f88:	30 93 df 02 	sts	0x02DF, r19	; 0x8002df <__brkval+0x1>
     f8c:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <__brkval>
     f90:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f94:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f98:	21 15       	cp	r18, r1
     f9a:	31 05       	cpc	r19, r1
     f9c:	41 f4       	brne	.+16     	; 0xfae <malloc+0xea>
     f9e:	2d b7       	in	r18, 0x3d	; 61
     fa0:	3e b7       	in	r19, 0x3e	; 62
     fa2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     fa6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     faa:	24 1b       	sub	r18, r20
     fac:	35 0b       	sbc	r19, r21
     fae:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <__brkval>
     fb2:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <__brkval+0x1>
     fb6:	e2 17       	cp	r30, r18
     fb8:	f3 07       	cpc	r31, r19
     fba:	a0 f4       	brcc	.+40     	; 0xfe4 <malloc+0x120>
     fbc:	2e 1b       	sub	r18, r30
     fbe:	3f 0b       	sbc	r19, r31
     fc0:	28 17       	cp	r18, r24
     fc2:	39 07       	cpc	r19, r25
     fc4:	78 f0       	brcs	.+30     	; 0xfe4 <malloc+0x120>
     fc6:	ac 01       	movw	r20, r24
     fc8:	4e 5f       	subi	r20, 0xFE	; 254
     fca:	5f 4f       	sbci	r21, 0xFF	; 255
     fcc:	24 17       	cp	r18, r20
     fce:	35 07       	cpc	r19, r21
     fd0:	48 f0       	brcs	.+18     	; 0xfe4 <malloc+0x120>
     fd2:	4e 0f       	add	r20, r30
     fd4:	5f 1f       	adc	r21, r31
     fd6:	50 93 df 02 	sts	0x02DF, r21	; 0x8002df <__brkval+0x1>
     fda:	40 93 de 02 	sts	0x02DE, r20	; 0x8002de <__brkval>
     fde:	81 93       	st	Z+, r24
     fe0:	91 93       	st	Z+, r25
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <malloc+0x124>
     fe4:	e0 e0       	ldi	r30, 0x00	; 0
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	cf 01       	movw	r24, r30
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	08 95       	ret

00000ff4 <free>:
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	09 f4       	brne	.+2      	; 0xffe <free+0xa>
     ffc:	81 c0       	rjmp	.+258    	; 0x1100 <free+0x10c>
     ffe:	fc 01       	movw	r30, r24
    1000:	32 97       	sbiw	r30, 0x02	; 2
    1002:	13 82       	std	Z+3, r1	; 0x03
    1004:	12 82       	std	Z+2, r1	; 0x02
    1006:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <__flp>
    100a:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <__flp+0x1>
    100e:	10 97       	sbiw	r26, 0x00	; 0
    1010:	81 f4       	brne	.+32     	; 0x1032 <free+0x3e>
    1012:	20 81       	ld	r18, Z
    1014:	31 81       	ldd	r19, Z+1	; 0x01
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <__brkval>
    101e:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <__brkval+0x1>
    1022:	28 17       	cp	r18, r24
    1024:	39 07       	cpc	r19, r25
    1026:	51 f5       	brne	.+84     	; 0x107c <free+0x88>
    1028:	f0 93 df 02 	sts	0x02DF, r31	; 0x8002df <__brkval+0x1>
    102c:	e0 93 de 02 	sts	0x02DE, r30	; 0x8002de <__brkval>
    1030:	67 c0       	rjmp	.+206    	; 0x1100 <free+0x10c>
    1032:	ed 01       	movw	r28, r26
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	ce 17       	cp	r28, r30
    103a:	df 07       	cpc	r29, r31
    103c:	40 f4       	brcc	.+16     	; 0x104e <free+0x5a>
    103e:	4a 81       	ldd	r20, Y+2	; 0x02
    1040:	5b 81       	ldd	r21, Y+3	; 0x03
    1042:	9e 01       	movw	r18, r28
    1044:	41 15       	cp	r20, r1
    1046:	51 05       	cpc	r21, r1
    1048:	f1 f0       	breq	.+60     	; 0x1086 <free+0x92>
    104a:	ea 01       	movw	r28, r20
    104c:	f5 cf       	rjmp	.-22     	; 0x1038 <free+0x44>
    104e:	d3 83       	std	Z+3, r29	; 0x03
    1050:	c2 83       	std	Z+2, r28	; 0x02
    1052:	40 81       	ld	r20, Z
    1054:	51 81       	ldd	r21, Z+1	; 0x01
    1056:	84 0f       	add	r24, r20
    1058:	95 1f       	adc	r25, r21
    105a:	c8 17       	cp	r28, r24
    105c:	d9 07       	cpc	r29, r25
    105e:	59 f4       	brne	.+22     	; 0x1076 <free+0x82>
    1060:	88 81       	ld	r24, Y
    1062:	99 81       	ldd	r25, Y+1	; 0x01
    1064:	84 0f       	add	r24, r20
    1066:	95 1f       	adc	r25, r21
    1068:	02 96       	adiw	r24, 0x02	; 2
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	93 83       	std	Z+3, r25	; 0x03
    1074:	82 83       	std	Z+2, r24	; 0x02
    1076:	21 15       	cp	r18, r1
    1078:	31 05       	cpc	r19, r1
    107a:	29 f4       	brne	.+10     	; 0x1086 <free+0x92>
    107c:	f0 93 e1 02 	sts	0x02E1, r31	; 0x8002e1 <__flp+0x1>
    1080:	e0 93 e0 02 	sts	0x02E0, r30	; 0x8002e0 <__flp>
    1084:	3d c0       	rjmp	.+122    	; 0x1100 <free+0x10c>
    1086:	e9 01       	movw	r28, r18
    1088:	fb 83       	std	Y+3, r31	; 0x03
    108a:	ea 83       	std	Y+2, r30	; 0x02
    108c:	49 91       	ld	r20, Y+
    108e:	59 91       	ld	r21, Y+
    1090:	c4 0f       	add	r28, r20
    1092:	d5 1f       	adc	r29, r21
    1094:	ec 17       	cp	r30, r28
    1096:	fd 07       	cpc	r31, r29
    1098:	61 f4       	brne	.+24     	; 0x10b2 <free+0xbe>
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	84 0f       	add	r24, r20
    10a0:	95 1f       	adc	r25, r21
    10a2:	02 96       	adiw	r24, 0x02	; 2
    10a4:	e9 01       	movw	r28, r18
    10a6:	99 83       	std	Y+1, r25	; 0x01
    10a8:	88 83       	st	Y, r24
    10aa:	82 81       	ldd	r24, Z+2	; 0x02
    10ac:	93 81       	ldd	r25, Z+3	; 0x03
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	e0 e0       	ldi	r30, 0x00	; 0
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	12 96       	adiw	r26, 0x02	; 2
    10b8:	8d 91       	ld	r24, X+
    10ba:	9c 91       	ld	r25, X
    10bc:	13 97       	sbiw	r26, 0x03	; 3
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	19 f0       	breq	.+6      	; 0x10c8 <free+0xd4>
    10c2:	fd 01       	movw	r30, r26
    10c4:	dc 01       	movw	r26, r24
    10c6:	f7 cf       	rjmp	.-18     	; 0x10b6 <free+0xc2>
    10c8:	8d 91       	ld	r24, X+
    10ca:	9c 91       	ld	r25, X
    10cc:	11 97       	sbiw	r26, 0x01	; 1
    10ce:	9d 01       	movw	r18, r26
    10d0:	2e 5f       	subi	r18, 0xFE	; 254
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
    10d4:	82 0f       	add	r24, r18
    10d6:	93 1f       	adc	r25, r19
    10d8:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <__brkval>
    10dc:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <__brkval+0x1>
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	69 f4       	brne	.+26     	; 0x1100 <free+0x10c>
    10e6:	30 97       	sbiw	r30, 0x00	; 0
    10e8:	29 f4       	brne	.+10     	; 0x10f4 <free+0x100>
    10ea:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <__flp+0x1>
    10ee:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <__flp>
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <free+0x104>
    10f4:	13 82       	std	Z+3, r1	; 0x03
    10f6:	12 82       	std	Z+2, r1	; 0x02
    10f8:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <__brkval+0x1>
    10fc:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <__brkval>
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <strcpy>:
    1106:	fb 01       	movw	r30, r22
    1108:	dc 01       	movw	r26, r24
    110a:	01 90       	ld	r0, Z+
    110c:	0d 92       	st	X+, r0
    110e:	00 20       	and	r0, r0
    1110:	e1 f7       	brne	.-8      	; 0x110a <strcpy+0x4>
    1112:	08 95       	ret

00001114 <fdevopen>:
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	31 f4       	brne	.+12     	; 0x112c <fdevopen+0x18>
    1120:	61 15       	cp	r22, r1
    1122:	71 05       	cpc	r23, r1
    1124:	19 f4       	brne	.+6      	; 0x112c <fdevopen+0x18>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	3a c0       	rjmp	.+116    	; 0x11a0 <fdevopen+0x8c>
    112c:	8b 01       	movw	r16, r22
    112e:	ec 01       	movw	r28, r24
    1130:	6e e0       	ldi	r22, 0x0E	; 14
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <calloc>
    113c:	fc 01       	movw	r30, r24
    113e:	89 2b       	or	r24, r25
    1140:	91 f3       	breq	.-28     	; 0x1126 <fdevopen+0x12>
    1142:	80 e8       	ldi	r24, 0x80	; 128
    1144:	83 83       	std	Z+3, r24	; 0x03
    1146:	01 15       	cp	r16, r1
    1148:	11 05       	cpc	r17, r1
    114a:	71 f0       	breq	.+28     	; 0x1168 <fdevopen+0x54>
    114c:	13 87       	std	Z+11, r17	; 0x0b
    114e:	02 87       	std	Z+10, r16	; 0x0a
    1150:	81 e8       	ldi	r24, 0x81	; 129
    1152:	83 83       	std	Z+3, r24	; 0x03
    1154:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__iob>
    1158:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <__iob+0x1>
    115c:	89 2b       	or	r24, r25
    115e:	21 f4       	brne	.+8      	; 0x1168 <fdevopen+0x54>
    1160:	f0 93 e3 02 	sts	0x02E3, r31	; 0x8002e3 <__iob+0x1>
    1164:	e0 93 e2 02 	sts	0x02E2, r30	; 0x8002e2 <__iob>
    1168:	20 97       	sbiw	r28, 0x00	; 0
    116a:	c9 f0       	breq	.+50     	; 0x119e <fdevopen+0x8a>
    116c:	d1 87       	std	Z+9, r29	; 0x09
    116e:	c0 87       	std	Z+8, r28	; 0x08
    1170:	83 81       	ldd	r24, Z+3	; 0x03
    1172:	82 60       	ori	r24, 0x02	; 2
    1174:	83 83       	std	Z+3, r24	; 0x03
    1176:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__iob+0x2>
    117a:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <__iob+0x3>
    117e:	89 2b       	or	r24, r25
    1180:	71 f4       	brne	.+28     	; 0x119e <fdevopen+0x8a>
    1182:	f0 93 e5 02 	sts	0x02E5, r31	; 0x8002e5 <__iob+0x3>
    1186:	e0 93 e4 02 	sts	0x02E4, r30	; 0x8002e4 <__iob+0x2>
    118a:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__iob+0x4>
    118e:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <__iob+0x5>
    1192:	89 2b       	or	r24, r25
    1194:	21 f4       	brne	.+8      	; 0x119e <fdevopen+0x8a>
    1196:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__iob+0x5>
    119a:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__iob+0x4>
    119e:	cf 01       	movw	r24, r30
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	08 95       	ret

000011aa <printf>:
    11aa:	a0 e0       	ldi	r26, 0x00	; 0
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb ed       	ldi	r30, 0xDB	; 219
    11b0:	f8 e0       	ldi	r31, 0x08	; 8
    11b2:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__prologue_saves__+0x20>
    11b6:	ae 01       	movw	r20, r28
    11b8:	4b 5f       	subi	r20, 0xFB	; 251
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	fa 01       	movw	r30, r20
    11be:	61 91       	ld	r22, Z+
    11c0:	71 91       	ld	r23, Z+
    11c2:	af 01       	movw	r20, r30
    11c4:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__iob+0x2>
    11c8:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <__iob+0x3>
    11cc:	0e 94 1b 09 	call	0x1236	; 0x1236 <vfprintf>
    11d0:	e2 e0       	ldi	r30, 0x02	; 2
    11d2:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__epilogue_restores__+0x20>

000011d6 <puts>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <__iob+0x2>
    11e2:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <__iob+0x3>
    11e6:	23 81       	ldd	r18, Z+3	; 0x03
    11e8:	21 ff       	sbrs	r18, 1
    11ea:	1b c0       	rjmp	.+54     	; 0x1222 <puts+0x4c>
    11ec:	8c 01       	movw	r16, r24
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
    11f0:	c0 e0       	ldi	r28, 0x00	; 0
    11f2:	f8 01       	movw	r30, r16
    11f4:	81 91       	ld	r24, Z+
    11f6:	8f 01       	movw	r16, r30
    11f8:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <__iob+0x2>
    11fc:	70 91 e5 02 	lds	r23, 0x02E5	; 0x8002e5 <__iob+0x3>
    1200:	db 01       	movw	r26, r22
    1202:	18 96       	adiw	r26, 0x08	; 8
    1204:	ed 91       	ld	r30, X+
    1206:	fc 91       	ld	r31, X
    1208:	19 97       	sbiw	r26, 0x09	; 9
    120a:	88 23       	and	r24, r24
    120c:	31 f0       	breq	.+12     	; 0x121a <puts+0x44>
    120e:	09 95       	icall
    1210:	89 2b       	or	r24, r25
    1212:	79 f3       	breq	.-34     	; 0x11f2 <puts+0x1c>
    1214:	df ef       	ldi	r29, 0xFF	; 255
    1216:	cf ef       	ldi	r28, 0xFF	; 255
    1218:	ec cf       	rjmp	.-40     	; 0x11f2 <puts+0x1c>
    121a:	8a e0       	ldi	r24, 0x0A	; 10
    121c:	09 95       	icall
    121e:	89 2b       	or	r24, r25
    1220:	19 f0       	breq	.+6      	; 0x1228 <puts+0x52>
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	02 c0       	rjmp	.+4      	; 0x122c <puts+0x56>
    1228:	8d 2f       	mov	r24, r29
    122a:	9c 2f       	mov	r25, r28
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <vfprintf>:
    1236:	ab e0       	ldi	r26, 0x0B	; 11
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e1 e2       	ldi	r30, 0x21	; 33
    123c:	f9 e0       	ldi	r31, 0x09	; 9
    123e:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__prologue_saves__>
    1242:	6c 01       	movw	r12, r24
    1244:	7b 01       	movw	r14, r22
    1246:	8a 01       	movw	r16, r20
    1248:	fc 01       	movw	r30, r24
    124a:	17 82       	std	Z+7, r1	; 0x07
    124c:	16 82       	std	Z+6, r1	; 0x06
    124e:	83 81       	ldd	r24, Z+3	; 0x03
    1250:	81 ff       	sbrs	r24, 1
    1252:	cc c1       	rjmp	.+920    	; 0x15ec <vfprintf+0x3b6>
    1254:	ce 01       	movw	r24, r28
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	3c 01       	movw	r6, r24
    125a:	f6 01       	movw	r30, r12
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	f7 01       	movw	r30, r14
    1260:	93 fd       	sbrc	r25, 3
    1262:	85 91       	lpm	r24, Z+
    1264:	93 ff       	sbrs	r25, 3
    1266:	81 91       	ld	r24, Z+
    1268:	7f 01       	movw	r14, r30
    126a:	88 23       	and	r24, r24
    126c:	09 f4       	brne	.+2      	; 0x1270 <vfprintf+0x3a>
    126e:	ba c1       	rjmp	.+884    	; 0x15e4 <vfprintf+0x3ae>
    1270:	85 32       	cpi	r24, 0x25	; 37
    1272:	39 f4       	brne	.+14     	; 0x1282 <vfprintf+0x4c>
    1274:	93 fd       	sbrc	r25, 3
    1276:	85 91       	lpm	r24, Z+
    1278:	93 ff       	sbrs	r25, 3
    127a:	81 91       	ld	r24, Z+
    127c:	7f 01       	movw	r14, r30
    127e:	85 32       	cpi	r24, 0x25	; 37
    1280:	29 f4       	brne	.+10     	; 0x128c <vfprintf+0x56>
    1282:	b6 01       	movw	r22, r12
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    128a:	e7 cf       	rjmp	.-50     	; 0x125a <vfprintf+0x24>
    128c:	91 2c       	mov	r9, r1
    128e:	21 2c       	mov	r2, r1
    1290:	31 2c       	mov	r3, r1
    1292:	ff e1       	ldi	r31, 0x1F	; 31
    1294:	f3 15       	cp	r31, r3
    1296:	d8 f0       	brcs	.+54     	; 0x12ce <vfprintf+0x98>
    1298:	8b 32       	cpi	r24, 0x2B	; 43
    129a:	79 f0       	breq	.+30     	; 0x12ba <vfprintf+0x84>
    129c:	38 f4       	brcc	.+14     	; 0x12ac <vfprintf+0x76>
    129e:	80 32       	cpi	r24, 0x20	; 32
    12a0:	79 f0       	breq	.+30     	; 0x12c0 <vfprintf+0x8a>
    12a2:	83 32       	cpi	r24, 0x23	; 35
    12a4:	a1 f4       	brne	.+40     	; 0x12ce <vfprintf+0x98>
    12a6:	23 2d       	mov	r18, r3
    12a8:	20 61       	ori	r18, 0x10	; 16
    12aa:	1d c0       	rjmp	.+58     	; 0x12e6 <vfprintf+0xb0>
    12ac:	8d 32       	cpi	r24, 0x2D	; 45
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <vfprintf+0x92>
    12b0:	80 33       	cpi	r24, 0x30	; 48
    12b2:	69 f4       	brne	.+26     	; 0x12ce <vfprintf+0x98>
    12b4:	23 2d       	mov	r18, r3
    12b6:	21 60       	ori	r18, 0x01	; 1
    12b8:	16 c0       	rjmp	.+44     	; 0x12e6 <vfprintf+0xb0>
    12ba:	83 2d       	mov	r24, r3
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	38 2e       	mov	r3, r24
    12c0:	e3 2d       	mov	r30, r3
    12c2:	e4 60       	ori	r30, 0x04	; 4
    12c4:	3e 2e       	mov	r3, r30
    12c6:	2a c0       	rjmp	.+84     	; 0x131c <vfprintf+0xe6>
    12c8:	f3 2d       	mov	r31, r3
    12ca:	f8 60       	ori	r31, 0x08	; 8
    12cc:	1d c0       	rjmp	.+58     	; 0x1308 <vfprintf+0xd2>
    12ce:	37 fc       	sbrc	r3, 7
    12d0:	2d c0       	rjmp	.+90     	; 0x132c <vfprintf+0xf6>
    12d2:	20 ed       	ldi	r18, 0xD0	; 208
    12d4:	28 0f       	add	r18, r24
    12d6:	2a 30       	cpi	r18, 0x0A	; 10
    12d8:	40 f0       	brcs	.+16     	; 0x12ea <vfprintf+0xb4>
    12da:	8e 32       	cpi	r24, 0x2E	; 46
    12dc:	b9 f4       	brne	.+46     	; 0x130c <vfprintf+0xd6>
    12de:	36 fc       	sbrc	r3, 6
    12e0:	81 c1       	rjmp	.+770    	; 0x15e4 <vfprintf+0x3ae>
    12e2:	23 2d       	mov	r18, r3
    12e4:	20 64       	ori	r18, 0x40	; 64
    12e6:	32 2e       	mov	r3, r18
    12e8:	19 c0       	rjmp	.+50     	; 0x131c <vfprintf+0xe6>
    12ea:	36 fe       	sbrs	r3, 6
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <vfprintf+0xc4>
    12ee:	8a e0       	ldi	r24, 0x0A	; 10
    12f0:	98 9e       	mul	r9, r24
    12f2:	20 0d       	add	r18, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	92 2e       	mov	r9, r18
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <vfprintf+0xe6>
    12fa:	ea e0       	ldi	r30, 0x0A	; 10
    12fc:	2e 9e       	mul	r2, r30
    12fe:	20 0d       	add	r18, r0
    1300:	11 24       	eor	r1, r1
    1302:	22 2e       	mov	r2, r18
    1304:	f3 2d       	mov	r31, r3
    1306:	f0 62       	ori	r31, 0x20	; 32
    1308:	3f 2e       	mov	r3, r31
    130a:	08 c0       	rjmp	.+16     	; 0x131c <vfprintf+0xe6>
    130c:	8c 36       	cpi	r24, 0x6C	; 108
    130e:	21 f4       	brne	.+8      	; 0x1318 <vfprintf+0xe2>
    1310:	83 2d       	mov	r24, r3
    1312:	80 68       	ori	r24, 0x80	; 128
    1314:	38 2e       	mov	r3, r24
    1316:	02 c0       	rjmp	.+4      	; 0x131c <vfprintf+0xe6>
    1318:	88 36       	cpi	r24, 0x68	; 104
    131a:	41 f4       	brne	.+16     	; 0x132c <vfprintf+0xf6>
    131c:	f7 01       	movw	r30, r14
    131e:	93 fd       	sbrc	r25, 3
    1320:	85 91       	lpm	r24, Z+
    1322:	93 ff       	sbrs	r25, 3
    1324:	81 91       	ld	r24, Z+
    1326:	7f 01       	movw	r14, r30
    1328:	81 11       	cpse	r24, r1
    132a:	b3 cf       	rjmp	.-154    	; 0x1292 <vfprintf+0x5c>
    132c:	98 2f       	mov	r25, r24
    132e:	9f 7d       	andi	r25, 0xDF	; 223
    1330:	95 54       	subi	r25, 0x45	; 69
    1332:	93 30       	cpi	r25, 0x03	; 3
    1334:	28 f4       	brcc	.+10     	; 0x1340 <vfprintf+0x10a>
    1336:	0c 5f       	subi	r16, 0xFC	; 252
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	9f e3       	ldi	r25, 0x3F	; 63
    133c:	99 83       	std	Y+1, r25	; 0x01
    133e:	0d c0       	rjmp	.+26     	; 0x135a <vfprintf+0x124>
    1340:	83 36       	cpi	r24, 0x63	; 99
    1342:	31 f0       	breq	.+12     	; 0x1350 <vfprintf+0x11a>
    1344:	83 37       	cpi	r24, 0x73	; 115
    1346:	71 f0       	breq	.+28     	; 0x1364 <vfprintf+0x12e>
    1348:	83 35       	cpi	r24, 0x53	; 83
    134a:	09 f0       	breq	.+2      	; 0x134e <vfprintf+0x118>
    134c:	59 c0       	rjmp	.+178    	; 0x1400 <vfprintf+0x1ca>
    134e:	21 c0       	rjmp	.+66     	; 0x1392 <vfprintf+0x15c>
    1350:	f8 01       	movw	r30, r16
    1352:	80 81       	ld	r24, Z
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	0e 5f       	subi	r16, 0xFE	; 254
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	88 24       	eor	r8, r8
    135c:	83 94       	inc	r8
    135e:	91 2c       	mov	r9, r1
    1360:	53 01       	movw	r10, r6
    1362:	13 c0       	rjmp	.+38     	; 0x138a <vfprintf+0x154>
    1364:	28 01       	movw	r4, r16
    1366:	f2 e0       	ldi	r31, 0x02	; 2
    1368:	4f 0e       	add	r4, r31
    136a:	51 1c       	adc	r5, r1
    136c:	f8 01       	movw	r30, r16
    136e:	a0 80       	ld	r10, Z
    1370:	b1 80       	ldd	r11, Z+1	; 0x01
    1372:	36 fe       	sbrs	r3, 6
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x146>
    1376:	69 2d       	mov	r22, r9
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x14a>
    137c:	6f ef       	ldi	r22, 0xFF	; 255
    137e:	7f ef       	ldi	r23, 0xFF	; 255
    1380:	c5 01       	movw	r24, r10
    1382:	0e 94 2a 0b 	call	0x1654	; 0x1654 <strnlen>
    1386:	4c 01       	movw	r8, r24
    1388:	82 01       	movw	r16, r4
    138a:	f3 2d       	mov	r31, r3
    138c:	ff 77       	andi	r31, 0x7F	; 127
    138e:	3f 2e       	mov	r3, r31
    1390:	16 c0       	rjmp	.+44     	; 0x13be <vfprintf+0x188>
    1392:	28 01       	movw	r4, r16
    1394:	22 e0       	ldi	r18, 0x02	; 2
    1396:	42 0e       	add	r4, r18
    1398:	51 1c       	adc	r5, r1
    139a:	f8 01       	movw	r30, r16
    139c:	a0 80       	ld	r10, Z
    139e:	b1 80       	ldd	r11, Z+1	; 0x01
    13a0:	36 fe       	sbrs	r3, 6
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <vfprintf+0x174>
    13a4:	69 2d       	mov	r22, r9
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <vfprintf+0x178>
    13aa:	6f ef       	ldi	r22, 0xFF	; 255
    13ac:	7f ef       	ldi	r23, 0xFF	; 255
    13ae:	c5 01       	movw	r24, r10
    13b0:	0e 94 18 0b 	call	0x1630	; 0x1630 <strnlen_P>
    13b4:	4c 01       	movw	r8, r24
    13b6:	f3 2d       	mov	r31, r3
    13b8:	f0 68       	ori	r31, 0x80	; 128
    13ba:	3f 2e       	mov	r3, r31
    13bc:	82 01       	movw	r16, r4
    13be:	33 fc       	sbrc	r3, 3
    13c0:	1b c0       	rjmp	.+54     	; 0x13f8 <vfprintf+0x1c2>
    13c2:	82 2d       	mov	r24, r2
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	88 16       	cp	r8, r24
    13c8:	99 06       	cpc	r9, r25
    13ca:	b0 f4       	brcc	.+44     	; 0x13f8 <vfprintf+0x1c2>
    13cc:	b6 01       	movw	r22, r12
    13ce:	80 e2       	ldi	r24, 0x20	; 32
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    13d6:	2a 94       	dec	r2
    13d8:	f4 cf       	rjmp	.-24     	; 0x13c2 <vfprintf+0x18c>
    13da:	f5 01       	movw	r30, r10
    13dc:	37 fc       	sbrc	r3, 7
    13de:	85 91       	lpm	r24, Z+
    13e0:	37 fe       	sbrs	r3, 7
    13e2:	81 91       	ld	r24, Z+
    13e4:	5f 01       	movw	r10, r30
    13e6:	b6 01       	movw	r22, r12
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    13ee:	21 10       	cpse	r2, r1
    13f0:	2a 94       	dec	r2
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	82 1a       	sub	r8, r18
    13f6:	91 08       	sbc	r9, r1
    13f8:	81 14       	cp	r8, r1
    13fa:	91 04       	cpc	r9, r1
    13fc:	71 f7       	brne	.-36     	; 0x13da <vfprintf+0x1a4>
    13fe:	e8 c0       	rjmp	.+464    	; 0x15d0 <vfprintf+0x39a>
    1400:	84 36       	cpi	r24, 0x64	; 100
    1402:	11 f0       	breq	.+4      	; 0x1408 <vfprintf+0x1d2>
    1404:	89 36       	cpi	r24, 0x69	; 105
    1406:	41 f5       	brne	.+80     	; 0x1458 <vfprintf+0x222>
    1408:	f8 01       	movw	r30, r16
    140a:	37 fe       	sbrs	r3, 7
    140c:	07 c0       	rjmp	.+14     	; 0x141c <vfprintf+0x1e6>
    140e:	60 81       	ld	r22, Z
    1410:	71 81       	ldd	r23, Z+1	; 0x01
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	93 81       	ldd	r25, Z+3	; 0x03
    1416:	0c 5f       	subi	r16, 0xFC	; 252
    1418:	1f 4f       	sbci	r17, 0xFF	; 255
    141a:	08 c0       	rjmp	.+16     	; 0x142c <vfprintf+0x1f6>
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	07 2e       	mov	r0, r23
    1422:	00 0c       	add	r0, r0
    1424:	88 0b       	sbc	r24, r24
    1426:	99 0b       	sbc	r25, r25
    1428:	0e 5f       	subi	r16, 0xFE	; 254
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	f3 2d       	mov	r31, r3
    142e:	ff 76       	andi	r31, 0x6F	; 111
    1430:	3f 2e       	mov	r3, r31
    1432:	97 ff       	sbrs	r25, 7
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <vfprintf+0x212>
    1436:	90 95       	com	r25
    1438:	80 95       	com	r24
    143a:	70 95       	com	r23
    143c:	61 95       	neg	r22
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	8f 4f       	sbci	r24, 0xFF	; 255
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	f0 68       	ori	r31, 0x80	; 128
    1446:	3f 2e       	mov	r3, r31
    1448:	2a e0       	ldi	r18, 0x0A	; 10
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	a3 01       	movw	r20, r6
    144e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__ultoa_invert>
    1452:	88 2e       	mov	r8, r24
    1454:	86 18       	sub	r8, r6
    1456:	45 c0       	rjmp	.+138    	; 0x14e2 <vfprintf+0x2ac>
    1458:	85 37       	cpi	r24, 0x75	; 117
    145a:	31 f4       	brne	.+12     	; 0x1468 <vfprintf+0x232>
    145c:	23 2d       	mov	r18, r3
    145e:	2f 7e       	andi	r18, 0xEF	; 239
    1460:	b2 2e       	mov	r11, r18
    1462:	2a e0       	ldi	r18, 0x0A	; 10
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	25 c0       	rjmp	.+74     	; 0x14b2 <vfprintf+0x27c>
    1468:	93 2d       	mov	r25, r3
    146a:	99 7f       	andi	r25, 0xF9	; 249
    146c:	b9 2e       	mov	r11, r25
    146e:	8f 36       	cpi	r24, 0x6F	; 111
    1470:	c1 f0       	breq	.+48     	; 0x14a2 <vfprintf+0x26c>
    1472:	18 f4       	brcc	.+6      	; 0x147a <vfprintf+0x244>
    1474:	88 35       	cpi	r24, 0x58	; 88
    1476:	79 f0       	breq	.+30     	; 0x1496 <vfprintf+0x260>
    1478:	b5 c0       	rjmp	.+362    	; 0x15e4 <vfprintf+0x3ae>
    147a:	80 37       	cpi	r24, 0x70	; 112
    147c:	19 f0       	breq	.+6      	; 0x1484 <vfprintf+0x24e>
    147e:	88 37       	cpi	r24, 0x78	; 120
    1480:	21 f0       	breq	.+8      	; 0x148a <vfprintf+0x254>
    1482:	b0 c0       	rjmp	.+352    	; 0x15e4 <vfprintf+0x3ae>
    1484:	e9 2f       	mov	r30, r25
    1486:	e0 61       	ori	r30, 0x10	; 16
    1488:	be 2e       	mov	r11, r30
    148a:	b4 fe       	sbrs	r11, 4
    148c:	0d c0       	rjmp	.+26     	; 0x14a8 <vfprintf+0x272>
    148e:	fb 2d       	mov	r31, r11
    1490:	f4 60       	ori	r31, 0x04	; 4
    1492:	bf 2e       	mov	r11, r31
    1494:	09 c0       	rjmp	.+18     	; 0x14a8 <vfprintf+0x272>
    1496:	34 fe       	sbrs	r3, 4
    1498:	0a c0       	rjmp	.+20     	; 0x14ae <vfprintf+0x278>
    149a:	29 2f       	mov	r18, r25
    149c:	26 60       	ori	r18, 0x06	; 6
    149e:	b2 2e       	mov	r11, r18
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <vfprintf+0x278>
    14a2:	28 e0       	ldi	r18, 0x08	; 8
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <vfprintf+0x27c>
    14a8:	20 e1       	ldi	r18, 0x10	; 16
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x27c>
    14ae:	20 e1       	ldi	r18, 0x10	; 16
    14b0:	32 e0       	ldi	r19, 0x02	; 2
    14b2:	f8 01       	movw	r30, r16
    14b4:	b7 fe       	sbrs	r11, 7
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <vfprintf+0x290>
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	0c 5f       	subi	r16, 0xFC	; 252
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	06 c0       	rjmp	.+12     	; 0x14d2 <vfprintf+0x29c>
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 5f       	subi	r16, 0xFE	; 254
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
    14d2:	a3 01       	movw	r20, r6
    14d4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__ultoa_invert>
    14d8:	88 2e       	mov	r8, r24
    14da:	86 18       	sub	r8, r6
    14dc:	fb 2d       	mov	r31, r11
    14de:	ff 77       	andi	r31, 0x7F	; 127
    14e0:	3f 2e       	mov	r3, r31
    14e2:	36 fe       	sbrs	r3, 6
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <vfprintf+0x2ca>
    14e6:	23 2d       	mov	r18, r3
    14e8:	2e 7f       	andi	r18, 0xFE	; 254
    14ea:	a2 2e       	mov	r10, r18
    14ec:	89 14       	cp	r8, r9
    14ee:	58 f4       	brcc	.+22     	; 0x1506 <vfprintf+0x2d0>
    14f0:	34 fe       	sbrs	r3, 4
    14f2:	0b c0       	rjmp	.+22     	; 0x150a <vfprintf+0x2d4>
    14f4:	32 fc       	sbrc	r3, 2
    14f6:	09 c0       	rjmp	.+18     	; 0x150a <vfprintf+0x2d4>
    14f8:	83 2d       	mov	r24, r3
    14fa:	8e 7e       	andi	r24, 0xEE	; 238
    14fc:	a8 2e       	mov	r10, r24
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <vfprintf+0x2d4>
    1500:	b8 2c       	mov	r11, r8
    1502:	a3 2c       	mov	r10, r3
    1504:	03 c0       	rjmp	.+6      	; 0x150c <vfprintf+0x2d6>
    1506:	b8 2c       	mov	r11, r8
    1508:	01 c0       	rjmp	.+2      	; 0x150c <vfprintf+0x2d6>
    150a:	b9 2c       	mov	r11, r9
    150c:	a4 fe       	sbrs	r10, 4
    150e:	0f c0       	rjmp	.+30     	; 0x152e <vfprintf+0x2f8>
    1510:	fe 01       	movw	r30, r28
    1512:	e8 0d       	add	r30, r8
    1514:	f1 1d       	adc	r31, r1
    1516:	80 81       	ld	r24, Z
    1518:	80 33       	cpi	r24, 0x30	; 48
    151a:	21 f4       	brne	.+8      	; 0x1524 <vfprintf+0x2ee>
    151c:	9a 2d       	mov	r25, r10
    151e:	99 7e       	andi	r25, 0xE9	; 233
    1520:	a9 2e       	mov	r10, r25
    1522:	09 c0       	rjmp	.+18     	; 0x1536 <vfprintf+0x300>
    1524:	a2 fe       	sbrs	r10, 2
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <vfprintf+0x2fe>
    1528:	b3 94       	inc	r11
    152a:	b3 94       	inc	r11
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <vfprintf+0x300>
    152e:	8a 2d       	mov	r24, r10
    1530:	86 78       	andi	r24, 0x86	; 134
    1532:	09 f0       	breq	.+2      	; 0x1536 <vfprintf+0x300>
    1534:	b3 94       	inc	r11
    1536:	a3 fc       	sbrc	r10, 3
    1538:	11 c0       	rjmp	.+34     	; 0x155c <vfprintf+0x326>
    153a:	a0 fe       	sbrs	r10, 0
    153c:	06 c0       	rjmp	.+12     	; 0x154a <vfprintf+0x314>
    153e:	b2 14       	cp	r11, r2
    1540:	88 f4       	brcc	.+34     	; 0x1564 <vfprintf+0x32e>
    1542:	28 0c       	add	r2, r8
    1544:	92 2c       	mov	r9, r2
    1546:	9b 18       	sub	r9, r11
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <vfprintf+0x330>
    154a:	b2 14       	cp	r11, r2
    154c:	60 f4       	brcc	.+24     	; 0x1566 <vfprintf+0x330>
    154e:	b6 01       	movw	r22, r12
    1550:	80 e2       	ldi	r24, 0x20	; 32
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    1558:	b3 94       	inc	r11
    155a:	f7 cf       	rjmp	.-18     	; 0x154a <vfprintf+0x314>
    155c:	b2 14       	cp	r11, r2
    155e:	18 f4       	brcc	.+6      	; 0x1566 <vfprintf+0x330>
    1560:	2b 18       	sub	r2, r11
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <vfprintf+0x332>
    1564:	98 2c       	mov	r9, r8
    1566:	21 2c       	mov	r2, r1
    1568:	a4 fe       	sbrs	r10, 4
    156a:	10 c0       	rjmp	.+32     	; 0x158c <vfprintf+0x356>
    156c:	b6 01       	movw	r22, r12
    156e:	80 e3       	ldi	r24, 0x30	; 48
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    1576:	a2 fe       	sbrs	r10, 2
    1578:	17 c0       	rjmp	.+46     	; 0x15a8 <vfprintf+0x372>
    157a:	a1 fc       	sbrc	r10, 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <vfprintf+0x34e>
    157e:	88 e7       	ldi	r24, 0x78	; 120
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <vfprintf+0x352>
    1584:	88 e5       	ldi	r24, 0x58	; 88
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	b6 01       	movw	r22, r12
    158a:	0c c0       	rjmp	.+24     	; 0x15a4 <vfprintf+0x36e>
    158c:	8a 2d       	mov	r24, r10
    158e:	86 78       	andi	r24, 0x86	; 134
    1590:	59 f0       	breq	.+22     	; 0x15a8 <vfprintf+0x372>
    1592:	a1 fe       	sbrs	r10, 1
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfprintf+0x364>
    1596:	8b e2       	ldi	r24, 0x2B	; 43
    1598:	01 c0       	rjmp	.+2      	; 0x159c <vfprintf+0x366>
    159a:	80 e2       	ldi	r24, 0x20	; 32
    159c:	a7 fc       	sbrc	r10, 7
    159e:	8d e2       	ldi	r24, 0x2D	; 45
    15a0:	b6 01       	movw	r22, r12
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    15a8:	89 14       	cp	r8, r9
    15aa:	38 f4       	brcc	.+14     	; 0x15ba <vfprintf+0x384>
    15ac:	b6 01       	movw	r22, r12
    15ae:	80 e3       	ldi	r24, 0x30	; 48
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    15b6:	9a 94       	dec	r9
    15b8:	f7 cf       	rjmp	.-18     	; 0x15a8 <vfprintf+0x372>
    15ba:	8a 94       	dec	r8
    15bc:	f3 01       	movw	r30, r6
    15be:	e8 0d       	add	r30, r8
    15c0:	f1 1d       	adc	r31, r1
    15c2:	80 81       	ld	r24, Z
    15c4:	b6 01       	movw	r22, r12
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    15cc:	81 10       	cpse	r8, r1
    15ce:	f5 cf       	rjmp	.-22     	; 0x15ba <vfprintf+0x384>
    15d0:	22 20       	and	r2, r2
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <vfprintf+0x3a0>
    15d4:	42 ce       	rjmp	.-892    	; 0x125a <vfprintf+0x24>
    15d6:	b6 01       	movw	r22, r12
    15d8:	80 e2       	ldi	r24, 0x20	; 32
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 35 0b 	call	0x166a	; 0x166a <fputc>
    15e0:	2a 94       	dec	r2
    15e2:	f6 cf       	rjmp	.-20     	; 0x15d0 <vfprintf+0x39a>
    15e4:	f6 01       	movw	r30, r12
    15e6:	86 81       	ldd	r24, Z+6	; 0x06
    15e8:	97 81       	ldd	r25, Z+7	; 0x07
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <vfprintf+0x3ba>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	2b 96       	adiw	r28, 0x0b	; 11
    15f2:	e2 e1       	ldi	r30, 0x12	; 18
    15f4:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__epilogue_restores__>

000015f8 <calloc>:
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	86 9f       	mul	r24, r22
    1602:	80 01       	movw	r16, r0
    1604:	87 9f       	mul	r24, r23
    1606:	10 0d       	add	r17, r0
    1608:	96 9f       	mul	r25, r22
    160a:	10 0d       	add	r17, r0
    160c:	11 24       	eor	r1, r1
    160e:	c8 01       	movw	r24, r16
    1610:	0e 94 62 07 	call	0xec4	; 0xec4 <malloc>
    1614:	ec 01       	movw	r28, r24
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	29 f0       	breq	.+10     	; 0x1624 <calloc+0x2c>
    161a:	a8 01       	movw	r20, r16
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	0e 94 23 0b 	call	0x1646	; 0x1646 <memset>
    1624:	ce 01       	movw	r24, r28
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <strnlen_P>:
    1630:	fc 01       	movw	r30, r24
    1632:	05 90       	lpm	r0, Z+
    1634:	61 50       	subi	r22, 0x01	; 1
    1636:	70 40       	sbci	r23, 0x00	; 0
    1638:	01 10       	cpse	r0, r1
    163a:	d8 f7       	brcc	.-10     	; 0x1632 <strnlen_P+0x2>
    163c:	80 95       	com	r24
    163e:	90 95       	com	r25
    1640:	8e 0f       	add	r24, r30
    1642:	9f 1f       	adc	r25, r31
    1644:	08 95       	ret

00001646 <memset>:
    1646:	dc 01       	movw	r26, r24
    1648:	01 c0       	rjmp	.+2      	; 0x164c <memset+0x6>
    164a:	6d 93       	st	X+, r22
    164c:	41 50       	subi	r20, 0x01	; 1
    164e:	50 40       	sbci	r21, 0x00	; 0
    1650:	e0 f7       	brcc	.-8      	; 0x164a <memset+0x4>
    1652:	08 95       	ret

00001654 <strnlen>:
    1654:	fc 01       	movw	r30, r24
    1656:	61 50       	subi	r22, 0x01	; 1
    1658:	70 40       	sbci	r23, 0x00	; 0
    165a:	01 90       	ld	r0, Z+
    165c:	01 10       	cpse	r0, r1
    165e:	d8 f7       	brcc	.-10     	; 0x1656 <strnlen+0x2>
    1660:	80 95       	com	r24
    1662:	90 95       	com	r25
    1664:	8e 0f       	add	r24, r30
    1666:	9f 1f       	adc	r25, r31
    1668:	08 95       	ret

0000166a <fputc>:
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	fb 01       	movw	r30, r22
    1674:	23 81       	ldd	r18, Z+3	; 0x03
    1676:	21 fd       	sbrc	r18, 1
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <fputc+0x16>
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	9f ef       	ldi	r25, 0xFF	; 255
    167e:	2c c0       	rjmp	.+88     	; 0x16d8 <fputc+0x6e>
    1680:	22 ff       	sbrs	r18, 2
    1682:	16 c0       	rjmp	.+44     	; 0x16b0 <fputc+0x46>
    1684:	46 81       	ldd	r20, Z+6	; 0x06
    1686:	57 81       	ldd	r21, Z+7	; 0x07
    1688:	24 81       	ldd	r18, Z+4	; 0x04
    168a:	35 81       	ldd	r19, Z+5	; 0x05
    168c:	42 17       	cp	r20, r18
    168e:	53 07       	cpc	r21, r19
    1690:	44 f4       	brge	.+16     	; 0x16a2 <fputc+0x38>
    1692:	a0 81       	ld	r26, Z
    1694:	b1 81       	ldd	r27, Z+1	; 0x01
    1696:	9d 01       	movw	r18, r26
    1698:	2f 5f       	subi	r18, 0xFF	; 255
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	31 83       	std	Z+1, r19	; 0x01
    169e:	20 83       	st	Z, r18
    16a0:	8c 93       	st	X, r24
    16a2:	26 81       	ldd	r18, Z+6	; 0x06
    16a4:	37 81       	ldd	r19, Z+7	; 0x07
    16a6:	2f 5f       	subi	r18, 0xFF	; 255
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	37 83       	std	Z+7, r19	; 0x07
    16ac:	26 83       	std	Z+6, r18	; 0x06
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <fputc+0x6e>
    16b0:	8b 01       	movw	r16, r22
    16b2:	ec 01       	movw	r28, r24
    16b4:	fb 01       	movw	r30, r22
    16b6:	00 84       	ldd	r0, Z+8	; 0x08
    16b8:	f1 85       	ldd	r31, Z+9	; 0x09
    16ba:	e0 2d       	mov	r30, r0
    16bc:	09 95       	icall
    16be:	89 2b       	or	r24, r25
    16c0:	e1 f6       	brne	.-72     	; 0x167a <fputc+0x10>
    16c2:	d8 01       	movw	r26, r16
    16c4:	16 96       	adiw	r26, 0x06	; 6
    16c6:	8d 91       	ld	r24, X+
    16c8:	9c 91       	ld	r25, X
    16ca:	17 97       	sbiw	r26, 0x07	; 7
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	17 96       	adiw	r26, 0x07	; 7
    16d0:	9c 93       	st	X, r25
    16d2:	8e 93       	st	-X, r24
    16d4:	16 97       	sbiw	r26, 0x06	; 6
    16d6:	ce 01       	movw	r24, r28
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <__ultoa_invert>:
    16e2:	fa 01       	movw	r30, r20
    16e4:	aa 27       	eor	r26, r26
    16e6:	28 30       	cpi	r18, 0x08	; 8
    16e8:	51 f1       	breq	.+84     	; 0x173e <__ultoa_invert+0x5c>
    16ea:	20 31       	cpi	r18, 0x10	; 16
    16ec:	81 f1       	breq	.+96     	; 0x174e <__ultoa_invert+0x6c>
    16ee:	e8 94       	clt
    16f0:	6f 93       	push	r22
    16f2:	6e 7f       	andi	r22, 0xFE	; 254
    16f4:	6e 5f       	subi	r22, 0xFE	; 254
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	8f 4f       	sbci	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	af 4f       	sbci	r26, 0xFF	; 255
    16fe:	b1 e0       	ldi	r27, 0x01	; 1
    1700:	3e d0       	rcall	.+124    	; 0x177e <__ultoa_invert+0x9c>
    1702:	b4 e0       	ldi	r27, 0x04	; 4
    1704:	3c d0       	rcall	.+120    	; 0x177e <__ultoa_invert+0x9c>
    1706:	67 0f       	add	r22, r23
    1708:	78 1f       	adc	r23, r24
    170a:	89 1f       	adc	r24, r25
    170c:	9a 1f       	adc	r25, r26
    170e:	a1 1d       	adc	r26, r1
    1710:	68 0f       	add	r22, r24
    1712:	79 1f       	adc	r23, r25
    1714:	8a 1f       	adc	r24, r26
    1716:	91 1d       	adc	r25, r1
    1718:	a1 1d       	adc	r26, r1
    171a:	6a 0f       	add	r22, r26
    171c:	71 1d       	adc	r23, r1
    171e:	81 1d       	adc	r24, r1
    1720:	91 1d       	adc	r25, r1
    1722:	a1 1d       	adc	r26, r1
    1724:	20 d0       	rcall	.+64     	; 0x1766 <__ultoa_invert+0x84>
    1726:	09 f4       	brne	.+2      	; 0x172a <__ultoa_invert+0x48>
    1728:	68 94       	set
    172a:	3f 91       	pop	r19
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	26 9f       	mul	r18, r22
    1730:	11 24       	eor	r1, r1
    1732:	30 19       	sub	r19, r0
    1734:	30 5d       	subi	r19, 0xD0	; 208
    1736:	31 93       	st	Z+, r19
    1738:	de f6       	brtc	.-74     	; 0x16f0 <__ultoa_invert+0xe>
    173a:	cf 01       	movw	r24, r30
    173c:	08 95       	ret
    173e:	46 2f       	mov	r20, r22
    1740:	47 70       	andi	r20, 0x07	; 7
    1742:	40 5d       	subi	r20, 0xD0	; 208
    1744:	41 93       	st	Z+, r20
    1746:	b3 e0       	ldi	r27, 0x03	; 3
    1748:	0f d0       	rcall	.+30     	; 0x1768 <__ultoa_invert+0x86>
    174a:	c9 f7       	brne	.-14     	; 0x173e <__ultoa_invert+0x5c>
    174c:	f6 cf       	rjmp	.-20     	; 0x173a <__ultoa_invert+0x58>
    174e:	46 2f       	mov	r20, r22
    1750:	4f 70       	andi	r20, 0x0F	; 15
    1752:	40 5d       	subi	r20, 0xD0	; 208
    1754:	4a 33       	cpi	r20, 0x3A	; 58
    1756:	18 f0       	brcs	.+6      	; 0x175e <__ultoa_invert+0x7c>
    1758:	49 5d       	subi	r20, 0xD9	; 217
    175a:	31 fd       	sbrc	r19, 1
    175c:	40 52       	subi	r20, 0x20	; 32
    175e:	41 93       	st	Z+, r20
    1760:	02 d0       	rcall	.+4      	; 0x1766 <__ultoa_invert+0x84>
    1762:	a9 f7       	brne	.-22     	; 0x174e <__ultoa_invert+0x6c>
    1764:	ea cf       	rjmp	.-44     	; 0x173a <__ultoa_invert+0x58>
    1766:	b4 e0       	ldi	r27, 0x04	; 4
    1768:	a6 95       	lsr	r26
    176a:	97 95       	ror	r25
    176c:	87 95       	ror	r24
    176e:	77 95       	ror	r23
    1770:	67 95       	ror	r22
    1772:	ba 95       	dec	r27
    1774:	c9 f7       	brne	.-14     	; 0x1768 <__ultoa_invert+0x86>
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	61 05       	cpc	r22, r1
    177a:	71 05       	cpc	r23, r1
    177c:	08 95       	ret
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	0a 2e       	mov	r0, r26
    1784:	06 94       	lsr	r0
    1786:	57 95       	ror	r21
    1788:	47 95       	ror	r20
    178a:	37 95       	ror	r19
    178c:	27 95       	ror	r18
    178e:	ba 95       	dec	r27
    1790:	c9 f7       	brne	.-14     	; 0x1784 <__ultoa_invert+0xa2>
    1792:	62 0f       	add	r22, r18
    1794:	73 1f       	adc	r23, r19
    1796:	84 1f       	adc	r24, r20
    1798:	95 1f       	adc	r25, r21
    179a:	a0 1d       	adc	r26, r0
    179c:	08 95       	ret

0000179e <__prologue_saves__>:
    179e:	2f 92       	push	r2
    17a0:	3f 92       	push	r3
    17a2:	4f 92       	push	r4
    17a4:	5f 92       	push	r5
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	ca 1b       	sub	r28, r26
    17c8:	db 0b       	sbc	r29, r27
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	09 94       	ijmp

000017d6 <__epilogue_restores__>:
    17d6:	2a 88       	ldd	r2, Y+18	; 0x12
    17d8:	39 88       	ldd	r3, Y+17	; 0x11
    17da:	48 88       	ldd	r4, Y+16	; 0x10
    17dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    17de:	6e 84       	ldd	r6, Y+14	; 0x0e
    17e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    17e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    17e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    17e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    17e8:	b9 84       	ldd	r11, Y+9	; 0x09
    17ea:	c8 84       	ldd	r12, Y+8	; 0x08
    17ec:	df 80       	ldd	r13, Y+7	; 0x07
    17ee:	ee 80       	ldd	r14, Y+6	; 0x06
    17f0:	fd 80       	ldd	r15, Y+5	; 0x05
    17f2:	0c 81       	ldd	r16, Y+4	; 0x04
    17f4:	1b 81       	ldd	r17, Y+3	; 0x03
    17f6:	aa 81       	ldd	r26, Y+2	; 0x02
    17f8:	b9 81       	ldd	r27, Y+1	; 0x01
    17fa:	ce 0f       	add	r28, r30
    17fc:	d1 1d       	adc	r29, r1
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	ed 01       	movw	r28, r26
    180a:	08 95       	ret

0000180c <_exit>:
    180c:	f8 94       	cli

0000180e <__stop_program>:
    180e:	ff cf       	rjmp	.-2      	; 0x180e <__stop_program>
