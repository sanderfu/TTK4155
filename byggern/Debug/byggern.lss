
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  00001cca  00001d5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080027a  0080027a  00001ed8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b7b  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001392  00000000  00000000  00004d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001252  00000000  00000000  000060fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00007350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088f  00000000  00000000  00007930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000103a  00000000  00000000  000081bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000091f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__vector_16>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <__vector_14+0x3c>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	ea ec       	ldi	r30, 0xCA	; 202
     3aa:	fc e1       	ldi	r31, 0x1C	; 28
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	aa 37       	cpi	r26, 0x7A	; 122
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	aa e7       	ldi	r26, 0x7A	; 122
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a4 39       	cpi	r26, 0x94	; 148
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
     3cc:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x116c>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x116c>
     3e6:	08 95       	ret

000003e8 <main>:
#include "test.h"


int main(void)
{
	setupInit();
     3e8:	0e 94 ab 04 	call	0x956	; 0x956 <setupInit>
	test_SRAM();
     3ec:	0e 94 cf 04 	call	0x99e	; 0x99e <test_SRAM>
	

	while (1) {
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     3f0:	0e 94 23 02 	call	0x446	; 0x446 <sleep_now>
		                         
		
		
		test_resetMenu();
     3f4:	0e 94 99 05 	call	0xb32	; 0xb32 <test_resetMenu>
		test_outputControllers(joystick_pos, slider_pos, buttons);		
     3f8:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <buttons>
     3fc:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <buttons+0x1>
     400:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <slider_pos>
     404:	50 91 85 02 	lds	r21, 0x0285	; 0x800285 <slider_pos+0x1>
     408:	60 91 7a 02 	lds	r22, 0x027A	; 0x80027a <__data_end>
     40c:	70 91 7b 02 	lds	r23, 0x027B	; 0x80027b <__data_end+0x1>
     410:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end+0x2>
     414:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <__data_end+0x3>
     418:	0e 94 56 05 	call	0xaac	; 0xaac <test_outputControllers>
     41c:	e9 cf       	rjmp	.-46     	; 0x3f0 <main+0x8>

0000041e <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     41e:	85 b7       	in	r24, 0x35	; 53
     420:	8f 7e       	andi	r24, 0xEF	; 239
     422:	85 bf       	out	0x35, r24	; 53
     424:	84 b7       	in	r24, 0x34	; 52
     426:	8f 7d       	andi	r24, 0xDF	; 223
     428:	84 bf       	out	0x34, r24	; 52
     42a:	86 b7       	in	r24, 0x36	; 54
     42c:	8f 77       	andi	r24, 0x7F	; 127
     42e:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     430:	85 b7       	in	r24, 0x35	; 53
     432:	80 62       	ori	r24, 0x20	; 32
     434:	85 bf       	out	0x35, r24	; 53
     436:	88 95       	sleep
     438:	85 b7       	in	r24, 0x35	; 53
     43a:	8f 7d       	andi	r24, 0xDF	; 223
     43c:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     43e:	85 b7       	in	r24, 0x35	; 53
     440:	80 62       	ori	r24, 0x20	; 32
     442:	85 bf       	out	0x35, r24	; 53
     444:	08 95       	ret

00000446 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     446:	88 b1       	in	r24, 0x08	; 8
     448:	88 68       	ori	r24, 0x88	; 136
     44a:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     44c:	85 b7       	in	r24, 0x35	; 53
     44e:	80 62       	ori	r24, 0x20	; 32
     450:	85 bf       	out	0x35, r24	; 53
     452:	88 95       	sleep
     454:	85 b7       	in	r24, 0x35	; 53
     456:	8f 7d       	andi	r24, 0xDF	; 223
     458:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     45a:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	8f 7d       	andi	r24, 0xDF	; 223
     460:	85 bf       	out	0x35, r24	; 53
     462:	08 95       	ret

00000464 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     46a:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     474:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <joystickOffsetY>
     478:	08 95       	ret

0000047a <joystick_readPosition>:
}
void joystick_readPosition() {
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     48c:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     494:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     496:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <joystickOffsetX>
     49a:	c6 17       	cp	r28, r22
     49c:	80 f4       	brcc	.+32     	; 0x4be <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	2c 2f       	mov	r18, r28
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	26 1b       	sub	r18, r22
     4a6:	37 0b       	sbc	r19, r23
     4a8:	44 e6       	ldi	r20, 0x64	; 100
     4aa:	42 9f       	mul	r20, r18
     4ac:	c0 01       	movw	r24, r0
     4ae:	43 9f       	mul	r20, r19
     4b0:	90 0d       	add	r25, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	0e 94 08 09 	call	0x1210	; 0x1210 <__divmodhi4>
     4b8:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <__data_end>
     4bc:	14 c0       	rjmp	.+40     	; 0x4e6 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     4be:	46 2f       	mov	r20, r22
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	2c 2f       	mov	r18, r28
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	24 1b       	sub	r18, r20
     4c8:	35 0b       	sbc	r19, r21
     4ca:	64 e6       	ldi	r22, 0x64	; 100
     4cc:	62 9f       	mul	r22, r18
     4ce:	c0 01       	movw	r24, r0
     4d0:	63 9f       	mul	r22, r19
     4d2:	90 0d       	add	r25, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	6f ef       	ldi	r22, 0xFF	; 255
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	64 1b       	sub	r22, r20
     4dc:	75 0b       	sbc	r23, r21
     4de:	0e 94 08 09 	call	0x1210	; 0x1210 <__divmodhi4>
     4e2:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     4e6:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <joystickOffsetY>
     4ea:	e2 17       	cp	r30, r18
     4ec:	88 f4       	brcc	.+34     	; 0x510 <__stack+0x11>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     4ee:	62 2f       	mov	r22, r18
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	4e 2f       	mov	r20, r30
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	46 1b       	sub	r20, r22
     4f8:	57 0b       	sbc	r21, r23
     4fa:	24 e6       	ldi	r18, 0x64	; 100
     4fc:	24 9f       	mul	r18, r20
     4fe:	c0 01       	movw	r24, r0
     500:	25 9f       	mul	r18, r21
     502:	90 0d       	add	r25, r0
     504:	11 24       	eor	r1, r1
     506:	0e 94 08 09 	call	0x1210	; 0x1210 <__divmodhi4>
     50a:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <__data_end+0x1>
     50e:	13 c0       	rjmp	.+38     	; 0x536 <__stack+0x37>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	4e 2f       	mov	r20, r30
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	42 1b       	sub	r20, r18
     518:	53 0b       	sbc	r21, r19
     51a:	64 e6       	ldi	r22, 0x64	; 100
     51c:	64 9f       	mul	r22, r20
     51e:	c0 01       	movw	r24, r0
     520:	65 9f       	mul	r22, r21
     522:	90 0d       	add	r25, r0
     524:	11 24       	eor	r1, r1
     526:	6f ef       	ldi	r22, 0xFF	; 255
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	62 1b       	sub	r22, r18
     52c:	73 0b       	sbc	r23, r19
     52e:	0e 94 08 09 	call	0x1210	; 0x1210 <__divmodhi4>
     532:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     536:	ca e7       	ldi	r28, 0x7A	; 122
     538:	d2 e0       	ldi	r29, 0x02	; 2
     53a:	68 81       	ld	r22, Y
     53c:	06 2e       	mov	r0, r22
     53e:	00 0c       	add	r0, r0
     540:	77 0b       	sbc	r23, r23
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25
     546:	0e 94 6f 07 	call	0xede	; 0xede <__floatsisf>
     54a:	6b 01       	movw	r12, r22
     54c:	7c 01       	movw	r14, r24
     54e:	69 81       	ldd	r22, Y+1	; 0x01
     550:	06 2e       	mov	r0, r22
     552:	00 0c       	add	r0, r0
     554:	77 0b       	sbc	r23, r23
     556:	88 0b       	sbc	r24, r24
     558:	99 0b       	sbc	r25, r25
     55a:	0e 94 6f 07 	call	0xede	; 0xede <__floatsisf>
     55e:	a7 01       	movw	r20, r14
     560:	96 01       	movw	r18, r12
     562:	0e 94 66 06 	call	0xccc	; 0xccc <atan2>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	44 eb       	ldi	r20, 0xB4	; 180
     56c:	53 e4       	ldi	r21, 0x43	; 67
     56e:	0e 94 2a 08 	call	0x1054	; 0x1054 <__mulsf3>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	5f e3       	ldi	r21, 0x3F	; 63
     57a:	0e 94 2a 08 	call	0x1054	; 0x1054 <__mulsf3>
     57e:	23 ec       	ldi	r18, 0xC3	; 195
     580:	35 ef       	ldi	r19, 0xF5	; 245
     582:	48 e4       	ldi	r20, 0x48	; 72
     584:	50 e4       	ldi	r21, 0x40	; 64
     586:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__divsf3>
     58a:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fixsfsi>
     58e:	7b 83       	std	Y+3, r23	; 0x03
     590:	6a 83       	std	Y+2, r22	; 0x02
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
     59e:	08 95       	ret

000005a0 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     5a0:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     5a2:	80 81       	ld	r24, Z
     5a4:	94 e0       	ldi	r25, 0x04	; 4
     5a6:	98 0f       	add	r25, r24
     5a8:	99 30       	cpi	r25, 0x09	; 9
     5aa:	20 f4       	brcc	.+8      	; 0x5b4 <joystick_getDirection+0x14>
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	9c 5f       	subi	r25, 0xFC	; 252
     5b0:	99 30       	cpi	r25, 0x09	; 9
     5b2:	90 f0       	brcs	.+36     	; 0x5d8 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     5b4:	85 30       	cpi	r24, 0x05	; 5
     5b6:	2c f0       	brlt	.+10     	; 0x5c2 <joystick_getDirection+0x22>
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
     5ba:	8f 5c       	subi	r24, 0xCF	; 207
     5bc:	83 36       	cpi	r24, 0x63	; 99
     5be:	38 f4       	brcc	.+14     	; 0x5ce <joystick_getDirection+0x2e>
     5c0:	0d c0       	rjmp	.+26     	; 0x5dc <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     5c2:	8c 3f       	cpi	r24, 0xFC	; 252
     5c4:	24 f4       	brge	.+8      	; 0x5ce <joystick_getDirection+0x2e>
     5c6:	81 81       	ldd	r24, Z+1	; 0x01
     5c8:	8f 5c       	subi	r24, 0xCF	; 207
     5ca:	83 36       	cpi	r24, 0x63	; 99
     5cc:	48 f0       	brcs	.+18     	; 0x5e0 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     5ce:	81 81       	ldd	r24, Z+1	; 0x01
     5d0:	8c 3f       	cpi	r24, 0xFC	; 252
     5d2:	44 f0       	brlt	.+16     	; 0x5e4 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     5d8:	84 e0       	ldi	r24, 0x04	; 4
     5da:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     5e4:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     5e6:	08 95       	ret

000005e8 <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     5e8:	8f e1       	ldi	r24, 0x1F	; 31
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 30 09 	call	0x1260	; 0x1260 <malloc>
	ptr->numChildren = 0;
     5f0:	fc 01       	movw	r30, r24
     5f2:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     5f4:	2a e0       	ldi	r18, 0x0A	; 10
     5f6:	ea e0       	ldi	r30, 0x0A	; 10
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	dc 01       	movw	r26, r24
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	2a 95       	dec	r18
     602:	e1 f7       	brne	.-8      	; 0x5fc <mainMenuInit+0x14>
	ptr->parent = NULL;
     604:	fc 01       	movw	r30, r24
     606:	11 8a       	std	Z+17, r1	; 0x11
     608:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     60a:	08 95       	ret

0000060c <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	7c 01       	movw	r14, r24
     61c:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     61e:	8f e1       	ldi	r24, 0x1F	; 31
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 30 09 	call	0x1260	; 0x1260 <malloc>
     626:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     628:	d7 01       	movw	r26, r14
     62a:	5e 96       	adiw	r26, 0x1e	; 30
     62c:	ec 91       	ld	r30, X
     62e:	5e 97       	sbiw	r26, 0x1e	; 30
     630:	c1 e0       	ldi	r28, 0x01	; 1
     632:	ce 0f       	add	r28, r30
     634:	5e 96       	adiw	r26, 0x1e	; 30
     636:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     638:	b6 01       	movw	r22, r12
     63a:	0e 94 ad 0a 	call	0x155a	; 0x155a <strcpy>
	childPtr->parent = parent;
     63e:	f8 01       	movw	r30, r16
     640:	f1 8a       	std	Z+17, r15	; 0x11
     642:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     644:	c7 30       	cpi	r28, 0x07	; 7
     646:	78 f4       	brcc	.+30     	; 0x666 <addChild+0x5a>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     648:	ec 2f       	mov	r30, r28
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	38 96       	adiw	r30, 0x08	; 8
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	ee 0d       	add	r30, r14
     654:	ff 1d       	adc	r31, r15
     656:	11 83       	std	Z+1, r17	; 0x01
     658:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     65a:	d8 01       	movw	r26, r16
     65c:	5e 96       	adiw	r26, 0x1e	; 30
     65e:	1c 92       	st	X, r1
	return childPtr;
     660:	80 2f       	mov	r24, r16
     662:	91 2f       	mov	r25, r17
     664:	02 c0       	rjmp	.+4      	; 0x66a <addChild+0x5e>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	08 95       	ret

0000067a <menuInit>:

MenuNode* menuInit(void)
{
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     686:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <mainMenuInit>
     68a:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     68c:	64 e1       	ldi	r22, 0x14	; 20
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
     694:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     696:	6e e1       	ldi	r22, 0x1E	; 30
     698:	71 e0       	ldi	r23, 0x01	; 1
     69a:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
	addChild(childPlayGame,"GAME 2");
     69e:	65 e2       	ldi	r22, 0x25	; 37
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	ce 01       	movw	r24, r28
     6a4:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     6a8:	6c e2       	ldi	r22, 0x2C	; 44
     6aa:	71 e0       	ldi	r23, 0x01	; 1
     6ac:	c7 01       	movw	r24, r14
     6ae:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
     6b2:	8c 01       	movw	r16, r24
     6b4:	c5 e0       	ldi	r28, 0x05	; 5
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     6b8:	66 e3       	ldi	r22, 0x36	; 54
     6ba:	71 e0       	ldi	r23, 0x01	; 1
     6bc:	c8 01       	movw	r24, r16
     6be:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
     6c2:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     6c4:	c9 f7       	brne	.-14     	; 0x6b8 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     6c6:	6e e3       	ldi	r22, 0x3E	; 62
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	c7 01       	movw	r24, r14
     6cc:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     6d0:	67 e4       	ldi	r22, 0x47	; 71
     6d2:	71 e0       	ldi	r23, 0x01	; 1
     6d4:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
	currentMenu.currentMenuItem = mainMenu;
     6d8:	ee e7       	ldi	r30, 0x7E	; 126
     6da:	f2 e0       	ldi	r31, 0x02	; 2
     6dc:	f1 82       	std	Z+1, r15	; 0x01
     6de:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     6e0:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     6e6:	c7 01       	movw	r24, r14
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	08 95       	ret

000006f6 <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     6f6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     6fa:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <currentMenu+0x3>
     6fe:	94 30       	cpi	r25, 0x04	; 4
     700:	09 f0       	breq	.+2      	; 0x704 <navigateMenu+0xe>
     702:	58 c0       	rjmp	.+176    	; 0x7b4 <navigateMenu+0xbe>
			switch (dir) {
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	e1 f1       	breq	.+120    	; 0x780 <navigateMenu+0x8a>
     708:	60 f1       	brcs	.+88     	; 0x762 <navigateMenu+0x6c>
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	c9 f0       	breq	.+50     	; 0x740 <navigateMenu+0x4a>
     70e:	83 30       	cpi	r24, 0x03	; 3
     710:	09 f0       	breq	.+2      	; 0x714 <navigateMenu+0x1e>
     712:	50 c0       	rjmp	.+160    	; 0x7b4 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     714:	ee e7       	ldi	r30, 0x7E	; 126
     716:	f2 e0       	ldi	r31, 0x02	; 2
     718:	92 81       	ldd	r25, Z+2	; 0x02
     71a:	49 2f       	mov	r20, r25
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	01 90       	ld	r0, Z+
     720:	f0 81       	ld	r31, Z
     722:	e0 2d       	mov	r30, r0
     724:	26 8d       	ldd	r18, Z+30	; 0x1e
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	31 09       	sbc	r19, r1
     72c:	42 17       	cp	r20, r18
     72e:	53 07       	cpc	r21, r19
     730:	24 f4       	brge	.+8      	; 0x73a <navigateMenu+0x44>
					currentMenu.childIndex++;
     732:	9f 5f       	subi	r25, 0xFF	; 255
     734:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <currentMenu+0x2>
     738:	3d c0       	rjmp	.+122    	; 0x7b4 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     73a:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <currentMenu+0x2>
     73e:	3a c0       	rjmp	.+116    	; 0x7b4 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     740:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <currentMenu+0x2>
     744:	99 23       	and	r25, r25
     746:	21 f0       	breq	.+8      	; 0x750 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     748:	91 50       	subi	r25, 0x01	; 1
     74a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <currentMenu+0x2>
     74e:	32 c0       	rjmp	.+100    	; 0x7b4 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     750:	ee e7       	ldi	r30, 0x7E	; 126
     752:	f2 e0       	ldi	r31, 0x02	; 2
     754:	a0 81       	ld	r26, Z
     756:	b1 81       	ldd	r27, Z+1	; 0x01
     758:	5e 96       	adiw	r26, 0x1e	; 30
     75a:	9c 91       	ld	r25, X
     75c:	91 50       	subi	r25, 0x01	; 1
     75e:	92 83       	std	Z+2, r25	; 0x02
     760:	29 c0       	rjmp	.+82     	; 0x7b4 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     762:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <currentMenu>
     766:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <currentMenu+0x1>
     76a:	20 89       	ldd	r18, Z+16	; 0x10
     76c:	31 89       	ldd	r19, Z+17	; 0x11
     76e:	21 15       	cp	r18, r1
     770:	31 05       	cpc	r19, r1
     772:	01 f1       	breq	.+64     	; 0x7b4 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     774:	ee e7       	ldi	r30, 0x7E	; 126
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	31 83       	std	Z+1, r19	; 0x01
     77a:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     77c:	12 82       	std	Z+2, r1	; 0x02
     77e:	1a c0       	rjmp	.+52     	; 0x7b4 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     780:	ae e7       	ldi	r26, 0x7E	; 126
     782:	b2 e0       	ldi	r27, 0x02	; 2
     784:	2d 91       	ld	r18, X+
     786:	3c 91       	ld	r19, X
     788:	11 97       	sbiw	r26, 0x01	; 1
     78a:	12 96       	adiw	r26, 0x02	; 2
     78c:	9c 91       	ld	r25, X
     78e:	12 97       	sbiw	r26, 0x02	; 2
     790:	e9 2f       	mov	r30, r25
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	39 96       	adiw	r30, 0x09	; 9
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	e2 0f       	add	r30, r18
     79c:	f3 1f       	adc	r31, r19
     79e:	01 90       	ld	r0, Z+
     7a0:	f0 81       	ld	r31, Z
     7a2:	e0 2d       	mov	r30, r0
     7a4:	96 8d       	ldd	r25, Z+30	; 0x1e
     7a6:	99 23       	and	r25, r25
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	fc 93       	st	X, r31
     7ae:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     7b0:	12 96       	adiw	r26, 0x02	; 2
     7b2:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     7b4:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <currentMenu+0x3>
     7b8:	08 95       	ret

000007ba <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
	oled_reset();
     7c2:	0e 94 27 04 	call	0x84e	; 0x84e <oled_reset>
	oled_home();
     7c6:	0e 94 48 04 	call	0x890	; 0x890 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     7ca:	ce e7       	ldi	r28, 0x7E	; 126
     7cc:	d2 e0       	ldi	r29, 0x02	; 2
     7ce:	88 81       	ld	r24, Y
     7d0:	99 81       	ldd	r25, Y+1	; 0x01
     7d2:	0e 94 83 04 	call	0x906	; 0x906 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     7d6:	e8 81       	ld	r30, Y
     7d8:	f9 81       	ldd	r31, Y+1	; 0x01
     7da:	86 8d       	ldd	r24, Z+30	; 0x1e
     7dc:	88 23       	and	r24, r24
     7de:	31 f1       	breq	.+76     	; 0x82c <menu_printCurrentMenu+0x72>
     7e0:	c0 e0       	ldi	r28, 0x00	; 0
     7e2:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     7e4:	0e e7       	ldi	r16, 0x7E	; 126
     7e6:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     7e8:	ce 01       	movw	r24, r28
     7ea:	02 96       	adiw	r24, 0x02	; 2
     7ec:	0e 94 7f 04 	call	0x8fe	; 0x8fe <oled_gotoLine>
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     7f0:	d8 01       	movw	r26, r16
     7f2:	8d 91       	ld	r24, X+
     7f4:	9c 91       	ld	r25, X
     7f6:	fe 01       	movw	r30, r28
     7f8:	39 96       	adiw	r30, 0x09	; 9
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	80 81       	ld	r24, Z
     804:	91 81       	ldd	r25, Z+1	; 0x01
     806:	0e 94 83 04 	call	0x906	; 0x906 <oled_print>
		if (currentMenu.childIndex == i) {
     80a:	f8 01       	movw	r30, r16
     80c:	82 81       	ldd	r24, Z+2	; 0x02
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	8c 17       	cp	r24, r28
     812:	9d 07       	cpc	r25, r29
     814:	11 f4       	brne	.+4      	; 0x81a <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     816:	0e 94 3d 04 	call	0x87a	; 0x87a <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     81a:	21 96       	adiw	r28, 0x01	; 1
     81c:	d8 01       	movw	r26, r16
     81e:	ed 91       	ld	r30, X+
     820:	fc 91       	ld	r31, X
     822:	86 8d       	ldd	r24, Z+30	; 0x1e
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	c8 17       	cp	r28, r24
     828:	d9 07       	cpc	r29, r25
     82a:	f4 f2       	brlt	.-68     	; 0x7e8 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     836:	80 55       	subi	r24, 0x50	; 80
     838:	e0 e0       	ldi	r30, 0x00	; 0
     83a:	f0 e1       	ldi	r31, 0x10	; 16
     83c:	80 83       	st	Z, r24
     83e:	86 2f       	mov	r24, r22
     840:	8f 70       	andi	r24, 0x0F	; 15
     842:	80 83       	st	Z, r24
     844:	62 95       	swap	r22
     846:	6f 70       	andi	r22, 0x0F	; 15
     848:	60 61       	ori	r22, 0x10	; 16
     84a:	60 83       	st	Z, r22
     84c:	08 95       	ret

0000084e <oled_reset>:
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	d2 e1       	ldi	r29, 0x12	; 18
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	81 2f       	mov	r24, r17
     85e:	0e 94 1b 04 	call	0x836	; 0x836 <oled_pos>
     862:	80 e8       	ldi	r24, 0x80	; 128
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	18 82       	st	Y, r1
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	e9 f7       	brne	.-6      	; 0x866 <oled_reset+0x18>
     86c:	1f 5f       	subi	r17, 0xFF	; 255
     86e:	18 30       	cpi	r17, 0x08	; 8
     870:	a1 f7       	brne	.-24     	; 0x85a <oled_reset+0xc>
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	08 95       	ret

0000087a <oled_print_arrow>:
     87a:	e0 e0       	ldi	r30, 0x00	; 0
     87c:	f2 e1       	ldi	r31, 0x12	; 18
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	80 83       	st	Z, r24
     882:	9c e3       	ldi	r25, 0x3C	; 60
     884:	90 83       	st	Z, r25
     886:	9e e7       	ldi	r25, 0x7E	; 126
     888:	90 83       	st	Z, r25
     88a:	80 83       	st	Z, r24
     88c:	80 83       	st	Z, r24
     88e:	08 95       	ret

00000890 <oled_home>:
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 1b 04 	call	0x836	; 0x836 <oled_pos>
     898:	08 95       	ret

0000089a <oled_init>:
     89a:	e0 e0       	ldi	r30, 0x00	; 0
     89c:	f0 e1       	ldi	r31, 0x10	; 16
     89e:	8e ea       	ldi	r24, 0xAE	; 174
     8a0:	80 83       	st	Z, r24
     8a2:	81 ea       	ldi	r24, 0xA1	; 161
     8a4:	80 83       	st	Z, r24
     8a6:	8a ed       	ldi	r24, 0xDA	; 218
     8a8:	80 83       	st	Z, r24
     8aa:	82 e1       	ldi	r24, 0x12	; 18
     8ac:	80 83       	st	Z, r24
     8ae:	88 ec       	ldi	r24, 0xC8	; 200
     8b0:	80 83       	st	Z, r24
     8b2:	88 ea       	ldi	r24, 0xA8	; 168
     8b4:	80 83       	st	Z, r24
     8b6:	8f e3       	ldi	r24, 0x3F	; 63
     8b8:	80 83       	st	Z, r24
     8ba:	85 ed       	ldi	r24, 0xD5	; 213
     8bc:	80 83       	st	Z, r24
     8be:	80 e8       	ldi	r24, 0x80	; 128
     8c0:	80 83       	st	Z, r24
     8c2:	81 e8       	ldi	r24, 0x81	; 129
     8c4:	80 83       	st	Z, r24
     8c6:	80 e5       	ldi	r24, 0x50	; 80
     8c8:	80 83       	st	Z, r24
     8ca:	89 ed       	ldi	r24, 0xD9	; 217
     8cc:	80 83       	st	Z, r24
     8ce:	81 e2       	ldi	r24, 0x21	; 33
     8d0:	80 83       	st	Z, r24
     8d2:	80 e2       	ldi	r24, 0x20	; 32
     8d4:	80 83       	st	Z, r24
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	80 83       	st	Z, r24
     8da:	8b ed       	ldi	r24, 0xDB	; 219
     8dc:	80 83       	st	Z, r24
     8de:	80 e3       	ldi	r24, 0x30	; 48
     8e0:	80 83       	st	Z, r24
     8e2:	8d ea       	ldi	r24, 0xAD	; 173
     8e4:	80 83       	st	Z, r24
     8e6:	10 82       	st	Z, r1
     8e8:	84 ea       	ldi	r24, 0xA4	; 164
     8ea:	80 83       	st	Z, r24
     8ec:	86 ea       	ldi	r24, 0xA6	; 166
     8ee:	80 83       	st	Z, r24
     8f0:	8f ea       	ldi	r24, 0xAF	; 175
     8f2:	80 83       	st	Z, r24
     8f4:	0e 94 27 04 	call	0x84e	; 0x84e <oled_reset>
     8f8:	0e 94 48 04 	call	0x890	; 0x890 <oled_home>
     8fc:	08 95       	ret

000008fe <oled_gotoLine>:
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	0e 94 1b 04 	call	0x836	; 0x836 <oled_pos>
     904:	08 95       	ret

00000906 <oled_print>:

void oled_print(char* character){
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	dc 01       	movw	r26, r24
	while (*character != '\0')
     90c:	8c 91       	ld	r24, X
     90e:	81 11       	cpse	r24, r1
     910:	1a c0       	rjmp	.+52     	; 0x946 <oled_print+0x40>
     912:	1e c0       	rjmp	.+60     	; 0x950 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     914:	ec 91       	ld	r30, X
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	b0 97       	sbiw	r30, 0x20	; 32
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	e2 0f       	add	r30, r18
     928:	f3 1f       	adc	r31, r19
     92a:	e2 56       	subi	r30, 0x62	; 98
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     930:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	28 30       	cpi	r18, 0x08	; 8
     938:	31 05       	cpc	r19, r1
     93a:	61 f7       	brne	.-40     	; 0x914 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     93c:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     93e:	8c 91       	ld	r24, X
     940:	81 11       	cpse	r24, r1
     942:	03 c0       	rjmp	.+6      	; 0x94a <oled_print+0x44>
     944:	05 c0       	rjmp	.+10     	; 0x950 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     946:	c0 e0       	ldi	r28, 0x00	; 0
     948:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	e2 cf       	rjmp	.-60     	; 0x914 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <setupInit>:
#include "setup.h"
#include "oled.h"
#include "timer.h"
#include "sleep.h"
	void setupInit(void){
	xmem_init();
     956:	0e 94 4c 06 	call	0xc98	; 0xc98 <xmem_init>
	USART_init(MYUBRR);
     95a:	8f e1       	ldi	r24, 0x1F	; 31
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 3b 06 	call	0xc76	; 0xc76 <USART_init>
	adcInit();
     962:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     966:	0e 94 32 02 	call	0x464	; 0x464 <joystickInit>
	touchButton_init();
     96a:	0e 94 10 06 	call	0xc20	; 0xc20 <touchButton_init>
	oled_init();
     96e:	0e 94 4d 04 	call	0x89a	; 0x89a <oled_init>
	timer_init();
     972:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <timer_init>
	sleep_init();
     976:	0e 94 0f 02 	call	0x41e	; 0x41e <sleep_init>
	menuInit();
     97a:	0e 94 3d 03 	call	0x67a	; 0x67a <menuInit>
     97e:	08 95       	ret

00000980 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     98a:	c4 e8       	ldi	r28, 0x84	; 132
     98c:	d2 e0       	ldi	r29, 0x02	; 2
     98e:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     996:	89 83       	std	Y+1, r24	; 0x01
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <test_SRAM>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "menu.h"

void test_SRAM(void)
{
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     9ae:	8f e4       	ldi	r24, 0x4F	; 79
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     9ba:	0e 94 9d 0a 	call	0x153a	; 0x153a <rand>
     9be:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9c0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <srand>
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9c8:	c1 2c       	mov	r12, r1
     9ca:	d1 2c       	mov	r13, r1

void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9cc:	00 e0       	ldi	r16, 0x00	; 0
     9ce:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     9d0:	c7 e6       	ldi	r28, 0x67	; 103
     9d2:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9d4:	0e 94 9d 0a 	call	0x153a	; 0x153a <rand>
     9d8:	f6 01       	movw	r30, r12
     9da:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9dc:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9de:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9e0:	28 17       	cp	r18, r24
     9e2:	a9 f0       	breq	.+42     	; 0xa0e <test_SRAM+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     9e4:	99 27       	eor	r25, r25
     9e6:	9f 93       	push	r25
     9e8:	8f 93       	push	r24
     9ea:	1f 92       	push	r1
     9ec:	2f 93       	push	r18
     9ee:	df 92       	push	r13
     9f0:	cf 92       	push	r12
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
			write_errors++;
     9fa:	0f 5f       	subi	r16, 0xFF	; 255
     9fc:	1f 4f       	sbci	r17, 0xFF	; 255
     9fe:	8d b7       	in	r24, 0x3d	; 61
     a00:	9e b7       	in	r25, 0x3e	; 62
     a02:	08 96       	adiw	r24, 0x08	; 8
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	9e bf       	out	0x3e, r25	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a0e:	9f ef       	ldi	r25, 0xFF	; 255
     a10:	c9 1a       	sub	r12, r25
     a12:	d9 0a       	sbc	r13, r25
     a14:	c1 14       	cp	r12, r1
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	d8 06       	cpc	r13, r24
     a1a:	e1 f6       	brne	.-72     	; 0x9d4 <test_SRAM+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     a1c:	c7 01       	movw	r24, r14
     a1e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a22:	c0 e0       	ldi	r28, 0x00	; 0
     a24:	d0 e0       	ldi	r29, 0x00	; 0
void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a26:	e1 2c       	mov	r14, r1
     a28:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     a2a:	0f 2e       	mov	r0, r31
     a2c:	f1 ea       	ldi	r31, 0xA1	; 161
     a2e:	cf 2e       	mov	r12, r31
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	df 2e       	mov	r13, r31
     a34:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a36:	0e 94 9d 0a 	call	0x153a	; 0x153a <rand>
     a3a:	fe 01       	movw	r30, r28
     a3c:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a3e:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a40:	28 17       	cp	r18, r24
     a42:	b1 f0       	breq	.+44     	; 0xa70 <test_SRAM+0xd2>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     a44:	99 27       	eor	r25, r25
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	1f 92       	push	r1
     a4c:	2f 93       	push	r18
     a4e:	df 93       	push	r29
     a50:	cf 93       	push	r28
     a52:	df 92       	push	r13
     a54:	cf 92       	push	r12
     a56:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
			i, retreived_value, some_value);
			retrieval_errors++;
     a5a:	9f ef       	ldi	r25, 0xFF	; 255
     a5c:	e9 1a       	sub	r14, r25
     a5e:	f9 0a       	sbc	r15, r25
     a60:	8d b7       	in	r24, 0x3d	; 61
     a62:	9e b7       	in	r25, 0x3e	; 62
     a64:	08 96       	adiw	r24, 0x08	; 8
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	9e bf       	out	0x3e, r25	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a70:	21 96       	adiw	r28, 0x01	; 1
     a72:	c1 15       	cp	r28, r1
     a74:	98 e0       	ldi	r25, 0x08	; 8
     a76:	d9 07       	cpc	r29, r25
     a78:	f1 f6       	brne	.-68     	; 0xa36 <test_SRAM+0x98>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
			i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
     a7a:	ff 92       	push	r15
     a7c:	ef 92       	push	r14
     a7e:	1f 93       	push	r17
     a80:	0f 93       	push	r16
     a82:	8f ed       	ldi	r24, 0xDF	; 223
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
}
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <test_outputControllers>:

void test_outputControllers(joystick_position_t joystick_pos, slider_position_t slider_pos, buttonValues_t buttons) {
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	c6 2f       	mov	r28, r22
     abe:	d7 2f       	mov	r29, r23
     ac0:	d8 2e       	mov	r13, r24
     ac2:	c9 2e       	mov	r12, r25
     ac4:	14 2f       	mov	r17, r20
     ac6:	05 2f       	mov	r16, r21
     ac8:	f2 2e       	mov	r15, r18
     aca:	e3 2e       	mov	r14, r19
	
	//clear terminal
	printf("\033\143");
     acc:	8a e3       	ldi	r24, 0x3A	; 58
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
		
	printf("x: %i y: %i\n\rSl L: %i SL R: %i\n\rB L: %i B R: %i\n\rAngle: %i\n", joystick_pos.x_pos, joystick_pos.y_pos, slider_pos.left_pos, slider_pos.right_pos,  buttons.left_button, buttons.right_button, joystick_pos.angle);
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	1f 92       	push	r1
     ade:	ef 92       	push	r14
     ae0:	1f 92       	push	r1
     ae2:	ff 92       	push	r15
     ae4:	1f 92       	push	r1
     ae6:	0f 93       	push	r16
     ae8:	1f 92       	push	r1
     aea:	1f 93       	push	r17
     aec:	8d 2f       	mov	r24, r29
     aee:	0d 2e       	mov	r0, r29
     af0:	00 0c       	add	r0, r0
     af2:	99 0b       	sbc	r25, r25
     af4:	9f 93       	push	r25
     af6:	df 93       	push	r29
     af8:	8c 2f       	mov	r24, r28
     afa:	0c 2e       	mov	r0, r28
     afc:	00 0c       	add	r0, r0
     afe:	99 0b       	sbc	r25, r25
     b00:	9f 93       	push	r25
     b02:	cf 93       	push	r28
     b04:	8d e3       	ldi	r24, 0x3D	; 61
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>

	
}
     b10:	8d b7       	in	r24, 0x3d	; 61
     b12:	9e b7       	in	r25, 0x3e	; 62
     b14:	42 96       	adiw	r24, 0x12	; 18
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	9e bf       	out	0x3e, r25	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	8d bf       	out	0x3d, r24	; 61
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	08 95       	ret

00000b32 <test_resetMenu>:


void test_resetMenu(void) {
     b32:	08 95       	ret

00000b34 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
	cli();
     b56:	f8 94       	cli
	TCNT1 = 0x00;
     b58:	1d bc       	out	0x2d, r1	; 45
     b5a:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     b5c:	8a e7       	ldi	r24, 0x7A	; 122
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 3d 02 	call	0x47a	; 0x47a <joystick_readPosition>
	slider_readPosition(&slider_pos);
     b64:	84 e8       	ldi	r24, 0x84	; 132
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	0e 94 c0 04 	call	0x980	; 0x980 <slider_readPosition>
	touchButton_readButtons(&buttons);
     b6c:	82 e8       	ldi	r24, 0x82	; 130
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	0e 94 29 06 	call	0xc52	; 0xc52 <touchButton_readButtons>
	sei();
     b74:	78 94       	sei
}
     b76:	ff 91       	pop	r31
     b78:	ef 91       	pop	r30
     b7a:	bf 91       	pop	r27
     b7c:	af 91       	pop	r26
     b7e:	9f 91       	pop	r25
     b80:	8f 91       	pop	r24
     b82:	7f 91       	pop	r23
     b84:	6f 91       	pop	r22
     b86:	5f 91       	pop	r21
     b88:	4f 91       	pop	r20
     b8a:	3f 91       	pop	r19
     b8c:	2f 91       	pop	r18
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <__vector_16>:

ISR (TIMER0_COMP_vect) {
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	2f 93       	push	r18
     ba4:	3f 93       	push	r19
     ba6:	4f 93       	push	r20
     ba8:	5f 93       	push	r21
     baa:	6f 93       	push	r22
     bac:	7f 93       	push	r23
     bae:	8f 93       	push	r24
     bb0:	9f 93       	push	r25
     bb2:	af 93       	push	r26
     bb4:	bf 93       	push	r27
     bb6:	ef 93       	push	r30
     bb8:	ff 93       	push	r31
	cli();
     bba:	f8 94       	cli
	TCNT1 = 0x00;
     bbc:	1d bc       	out	0x2d, r1	; 45
     bbe:	1c bc       	out	0x2c, r1	; 44
	navigateMenu(&joystick_pos);
     bc0:	8a e7       	ldi	r24, 0x7A	; 122
     bc2:	92 e0       	ldi	r25, 0x02	; 2
     bc4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <navigateMenu>
	menu_printCurrentMenu();
     bc8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <menu_printCurrentMenu>
	sei();
     bcc:	78 94       	sei
}
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <timer_init>:


void timer_init() {
	//Disable global interrupts
	cli();
     bf0:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     bf2:	89 b7       	in	r24, 0x39	; 57
     bf4:	80 62       	ori	r24, 0x20	; 32
     bf6:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     bf8:	1d bc       	out	0x2d, r1	; 45
     bfa:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     bfc:	80 e3       	ldi	r24, 0x30	; 48
     bfe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     c00:	85 e0       	ldi	r24, 0x05	; 5
     c02:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     c04:	80 ef       	ldi	r24, 0xF0	; 240
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	99 bd       	out	0x29, r25	; 41
     c0a:	88 bd       	out	0x28, r24	; 40
	
	
	////////////////////////TIMER 0////////////////////////////////////
	
	TIMSK |= (1 << OCIE0);
     c0c:	89 b7       	in	r24, 0x39	; 57
     c0e:	81 60       	ori	r24, 0x01	; 1
     c10:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0x0; 
     c12:	12 be       	out	0x32, r1	; 50
	
	TCCR0 = (1 << COM01 | 1 << COM00 | 1 << CS02 | 1 << CS00);
     c14:	85 e3       	ldi	r24, 0x35	; 53
     c16:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = TIMER0_RESET;
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	81 bf       	out	0x31, r24	; 49
	
	
	//Enable global interrupts
	sei();
     c1c:	78 94       	sei
     c1e:	08 95       	ret

00000c20 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     c20:	36 b3       	in	r19, 0x16	; 22
     c22:	26 b3       	in	r18, 0x16	; 22
     c24:	47 b3       	in	r20, 0x17	; 23
     c26:	31 70       	andi	r19, 0x01	; 1
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	bc 01       	movw	r22, r24
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <touchButton_init+0x14>
     c30:	66 0f       	add	r22, r22
     c32:	77 1f       	adc	r23, r23
     c34:	3a 95       	dec	r19
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <touchButton_init+0x10>
     c38:	22 70       	andi	r18, 0x02	; 2
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <touchButton_init+0x20>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	2a 95       	dec	r18
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <touchButton_init+0x1c>
     c44:	86 2b       	or	r24, r22
     c46:	97 2b       	or	r25, r23
     c48:	80 95       	com	r24
     c4a:	90 95       	com	r25
     c4c:	84 23       	and	r24, r20
     c4e:	87 bb       	out	0x17, r24	; 23
     c50:	08 95       	ret

00000c52 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     c52:	86 b3       	in	r24, 0x16	; 22
     c54:	e2 e8       	ldi	r30, 0x82	; 130
     c56:	f2 e0       	ldi	r31, 0x02	; 2
     c58:	81 70       	andi	r24, 0x01	; 1
     c5a:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     c5c:	86 b3       	in	r24, 0x16	; 22
     c5e:	86 95       	lsr	r24
     c60:	81 70       	andi	r24, 0x01	; 1
     c62:	81 83       	std	Z+1, r24	; 0x01
     c64:	08 95       	ret

00000c66 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     c66:	5d 9b       	sbis	0x0b, 5	; 11
     c68:	fe cf       	rjmp	.-4      	; 0xc66 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     c6a:	8c b9       	out	0x0c, r24	; 12
     c6c:	08 95       	ret

00000c6e <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     c6e:	5f 9b       	sbis	0x0b, 7	; 11
     c70:	fe cf       	rjmp	.-4      	; 0xc6e <USART_receiveChar>
		;
	
	return UDR0;
     c72:	8c b1       	in	r24, 0x0c	; 12
     c74:	08 95       	ret

00000c76 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     c76:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     c78:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     c7a:	88 e1       	ldi	r24, 0x18	; 24
     c7c:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     c7e:	8e e8       	ldi	r24, 0x8E	; 142
     c80:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     c82:	67 e3       	ldi	r22, 0x37	; 55
     c84:	76 e0       	ldi	r23, 0x06	; 6
     c86:	83 e3       	ldi	r24, 0x33	; 51
     c88:	96 e0       	ldi	r25, 0x06	; 6
     c8a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <fdevopen>
     c8e:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <uart+0x1>
     c92:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <uart>
     c96:	08 95       	ret

00000c98 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     c98:	85 b7       	in	r24, 0x35	; 53
     c9a:	80 68       	ori	r24, 0x80	; 128
     c9c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     c9e:	80 b7       	in	r24, 0x30	; 48
     ca0:	88 60       	ori	r24, 0x08	; 8
     ca2:	80 bf       	out	0x30, r24	; 48
     ca4:	08 95       	ret
     ca6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     caa:	60 f0       	brcs	.+24     	; 0xcc4 <xmem_init+0x2c>
     cac:	80 e8       	ldi	r24, 0x80	; 128
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <xmem_init+0x1c>
     cb2:	9e ef       	ldi	r25, 0xFE	; 254
     cb4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     cb8:	28 f0       	brcs	.+10     	; 0xcc4 <xmem_init+0x2c>
     cba:	40 e8       	ldi	r20, 0x80	; 128
     cbc:	51 e0       	ldi	r21, 0x01	; 1
     cbe:	71 f4       	brne	.+28     	; 0xcdc <atan2+0x10>
     cc0:	5e ef       	ldi	r21, 0xFE	; 254
     cc2:	0c c0       	rjmp	.+24     	; 0xcdc <atan2+0x10>
     cc4:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_nan>
     cc8:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>

00000ccc <atan2>:
     ccc:	e9 2f       	mov	r30, r25
     cce:	e0 78       	andi	r30, 0x80	; 128
     cd0:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     cd4:	40 f3       	brcs	.-48     	; 0xca6 <xmem_init+0xe>
     cd6:	09 2e       	mov	r0, r25
     cd8:	05 2a       	or	r0, r21
     cda:	b1 f3       	breq	.-20     	; 0xcc8 <xmem_init+0x30>
     cdc:	26 17       	cp	r18, r22
     cde:	37 07       	cpc	r19, r23
     ce0:	48 07       	cpc	r20, r24
     ce2:	59 07       	cpc	r21, r25
     ce4:	38 f0       	brcs	.+14     	; 0xcf4 <atan2+0x28>
     ce6:	0e 2e       	mov	r0, r30
     ce8:	07 f8       	bld	r0, 7
     cea:	e0 25       	eor	r30, r0
     cec:	69 f0       	breq	.+26     	; 0xd08 <atan2+0x3c>
     cee:	e0 25       	eor	r30, r0
     cf0:	e0 64       	ori	r30, 0x40	; 64
     cf2:	0a c0       	rjmp	.+20     	; 0xd08 <atan2+0x3c>
     cf4:	ef 63       	ori	r30, 0x3F	; 63
     cf6:	07 f8       	bld	r0, 7
     cf8:	00 94       	com	r0
     cfa:	07 fa       	bst	r0, 7
     cfc:	db 01       	movw	r26, r22
     cfe:	b9 01       	movw	r22, r18
     d00:	9d 01       	movw	r18, r26
     d02:	dc 01       	movw	r26, r24
     d04:	ca 01       	movw	r24, r20
     d06:	ad 01       	movw	r20, r26
     d08:	ef 93       	push	r30
     d0a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divsf3_pse>
     d0e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_round>
     d12:	0e 94 96 06 	call	0xd2c	; 0xd2c <atan>
     d16:	5f 91       	pop	r21
     d18:	55 23       	and	r21, r21
     d1a:	39 f0       	breq	.+14     	; 0xd2a <atan2+0x5e>
     d1c:	2b ed       	ldi	r18, 0xDB	; 219
     d1e:	3f e0       	ldi	r19, 0x0F	; 15
     d20:	49 e4       	ldi	r20, 0x49	; 73
     d22:	50 fd       	sbrc	r21, 0
     d24:	49 ec       	ldi	r20, 0xC9	; 201
     d26:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__addsf3>
     d2a:	08 95       	ret

00000d2c <atan>:
     d2c:	df 93       	push	r29
     d2e:	dd 27       	eor	r29, r29
     d30:	b9 2f       	mov	r27, r25
     d32:	bf 77       	andi	r27, 0x7F	; 127
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	5f e3       	ldi	r21, 0x3F	; 63
     d38:	16 16       	cp	r1, r22
     d3a:	17 06       	cpc	r1, r23
     d3c:	48 07       	cpc	r20, r24
     d3e:	5b 07       	cpc	r21, r27
     d40:	18 f4       	brcc	.+6      	; 0xd48 <atan+0x1c>
     d42:	d9 2f       	mov	r29, r25
     d44:	0e 94 22 08 	call	0x1044	; 0x1044 <inverse>
     d48:	9f 93       	push	r25
     d4a:	8f 93       	push	r24
     d4c:	7f 93       	push	r23
     d4e:	6f 93       	push	r22
     d50:	0e 94 97 08 	call	0x112e	; 0x112e <square>
     d54:	e0 e7       	ldi	r30, 0x70	; 112
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_powser>
     d5c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_round>
     d60:	2f 91       	pop	r18
     d62:	3f 91       	pop	r19
     d64:	4f 91       	pop	r20
     d66:	5f 91       	pop	r21
     d68:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3x>
     d6c:	dd 23       	and	r29, r29
     d6e:	51 f0       	breq	.+20     	; 0xd84 <atan+0x58>
     d70:	90 58       	subi	r25, 0x80	; 128
     d72:	a2 ea       	ldi	r26, 0xA2	; 162
     d74:	2a ed       	ldi	r18, 0xDA	; 218
     d76:	3f e0       	ldi	r19, 0x0F	; 15
     d78:	49 ec       	ldi	r20, 0xC9	; 201
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	d0 78       	andi	r29, 0x80	; 128
     d7e:	5d 27       	eor	r21, r29
     d80:	0e 94 b3 08 	call	0x1166	; 0x1166 <__addsf3x>
     d84:	df 91       	pop	r29
     d86:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>

00000d8a <__divsf3>:
     d8a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__divsf3x>
     d8e:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     d92:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     d96:	58 f0       	brcs	.+22     	; 0xdae <__divsf3+0x24>
     d98:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     d9c:	40 f0       	brcs	.+16     	; 0xdae <__divsf3+0x24>
     d9e:	29 f4       	brne	.+10     	; 0xdaa <__divsf3+0x20>
     da0:	5f 3f       	cpi	r21, 0xFF	; 255
     da2:	29 f0       	breq	.+10     	; 0xdae <__divsf3+0x24>
     da4:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>
     da8:	51 11       	cpse	r21, r1
     daa:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     dae:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_nan>

00000db2 <__divsf3x>:
     db2:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     db6:	68 f3       	brcs	.-38     	; 0xd92 <__divsf3+0x8>

00000db8 <__divsf3_pse>:
     db8:	99 23       	and	r25, r25
     dba:	b1 f3       	breq	.-20     	; 0xda8 <__divsf3+0x1e>
     dbc:	55 23       	and	r21, r21
     dbe:	91 f3       	breq	.-28     	; 0xda4 <__divsf3+0x1a>
     dc0:	95 1b       	sub	r25, r21
     dc2:	55 0b       	sbc	r21, r21
     dc4:	bb 27       	eor	r27, r27
     dc6:	aa 27       	eor	r26, r26
     dc8:	62 17       	cp	r22, r18
     dca:	73 07       	cpc	r23, r19
     dcc:	84 07       	cpc	r24, r20
     dce:	38 f0       	brcs	.+14     	; 0xdde <__divsf3_pse+0x26>
     dd0:	9f 5f       	subi	r25, 0xFF	; 255
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	44 1f       	adc	r20, r20
     dda:	aa 1f       	adc	r26, r26
     ddc:	a9 f3       	breq	.-22     	; 0xdc8 <__divsf3_pse+0x10>
     dde:	35 d0       	rcall	.+106    	; 0xe4a <__divsf3_pse+0x92>
     de0:	0e 2e       	mov	r0, r30
     de2:	3a f0       	brmi	.+14     	; 0xdf2 <__divsf3_pse+0x3a>
     de4:	e0 e8       	ldi	r30, 0x80	; 128
     de6:	32 d0       	rcall	.+100    	; 0xe4c <__divsf3_pse+0x94>
     de8:	91 50       	subi	r25, 0x01	; 1
     dea:	50 40       	sbci	r21, 0x00	; 0
     dec:	e6 95       	lsr	r30
     dee:	00 1c       	adc	r0, r0
     df0:	ca f7       	brpl	.-14     	; 0xde4 <__divsf3_pse+0x2c>
     df2:	2b d0       	rcall	.+86     	; 0xe4a <__divsf3_pse+0x92>
     df4:	fe 2f       	mov	r31, r30
     df6:	29 d0       	rcall	.+82     	; 0xe4a <__divsf3_pse+0x92>
     df8:	66 0f       	add	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	88 1f       	adc	r24, r24
     dfe:	bb 1f       	adc	r27, r27
     e00:	26 17       	cp	r18, r22
     e02:	37 07       	cpc	r19, r23
     e04:	48 07       	cpc	r20, r24
     e06:	ab 07       	cpc	r26, r27
     e08:	b0 e8       	ldi	r27, 0x80	; 128
     e0a:	09 f0       	breq	.+2      	; 0xe0e <__divsf3_pse+0x56>
     e0c:	bb 0b       	sbc	r27, r27
     e0e:	80 2d       	mov	r24, r0
     e10:	bf 01       	movw	r22, r30
     e12:	ff 27       	eor	r31, r31
     e14:	93 58       	subi	r25, 0x83	; 131
     e16:	5f 4f       	sbci	r21, 0xFF	; 255
     e18:	3a f0       	brmi	.+14     	; 0xe28 <__divsf3_pse+0x70>
     e1a:	9e 3f       	cpi	r25, 0xFE	; 254
     e1c:	51 05       	cpc	r21, r1
     e1e:	78 f0       	brcs	.+30     	; 0xe3e <__divsf3_pse+0x86>
     e20:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>
     e24:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     e28:	5f 3f       	cpi	r21, 0xFF	; 255
     e2a:	e4 f3       	brlt	.-8      	; 0xe24 <__divsf3_pse+0x6c>
     e2c:	98 3e       	cpi	r25, 0xE8	; 232
     e2e:	d4 f3       	brlt	.-12     	; 0xe24 <__divsf3_pse+0x6c>
     e30:	86 95       	lsr	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b7 95       	ror	r27
     e38:	f7 95       	ror	r31
     e3a:	9f 5f       	subi	r25, 0xFF	; 255
     e3c:	c9 f7       	brne	.-14     	; 0xe30 <__divsf3_pse+0x78>
     e3e:	88 0f       	add	r24, r24
     e40:	91 1d       	adc	r25, r1
     e42:	96 95       	lsr	r25
     e44:	87 95       	ror	r24
     e46:	97 f9       	bld	r25, 7
     e48:	08 95       	ret
     e4a:	e1 e0       	ldi	r30, 0x01	; 1
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	88 1f       	adc	r24, r24
     e52:	bb 1f       	adc	r27, r27
     e54:	62 17       	cp	r22, r18
     e56:	73 07       	cpc	r23, r19
     e58:	84 07       	cpc	r24, r20
     e5a:	ba 07       	cpc	r27, r26
     e5c:	20 f0       	brcs	.+8      	; 0xe66 <__divsf3_pse+0xae>
     e5e:	62 1b       	sub	r22, r18
     e60:	73 0b       	sbc	r23, r19
     e62:	84 0b       	sbc	r24, r20
     e64:	ba 0b       	sbc	r27, r26
     e66:	ee 1f       	adc	r30, r30
     e68:	88 f7       	brcc	.-30     	; 0xe4c <__divsf3_pse+0x94>
     e6a:	e0 95       	com	r30
     e6c:	08 95       	ret

00000e6e <__fixsfsi>:
     e6e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fixunssfsi>
     e72:	68 94       	set
     e74:	b1 11       	cpse	r27, r1
     e76:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     e7a:	08 95       	ret

00000e7c <__fixunssfsi>:
     e7c:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
     e80:	88 f0       	brcs	.+34     	; 0xea4 <__fixunssfsi+0x28>
     e82:	9f 57       	subi	r25, 0x7F	; 127
     e84:	98 f0       	brcs	.+38     	; 0xeac <__fixunssfsi+0x30>
     e86:	b9 2f       	mov	r27, r25
     e88:	99 27       	eor	r25, r25
     e8a:	b7 51       	subi	r27, 0x17	; 23
     e8c:	b0 f0       	brcs	.+44     	; 0xeba <__fixunssfsi+0x3e>
     e8e:	e1 f0       	breq	.+56     	; 0xec8 <__fixunssfsi+0x4c>
     e90:	66 0f       	add	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	88 1f       	adc	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	1a f0       	brmi	.+6      	; 0xea0 <__fixunssfsi+0x24>
     e9a:	ba 95       	dec	r27
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <__fixunssfsi+0x14>
     e9e:	14 c0       	rjmp	.+40     	; 0xec8 <__fixunssfsi+0x4c>
     ea0:	b1 30       	cpi	r27, 0x01	; 1
     ea2:	91 f0       	breq	.+36     	; 0xec8 <__fixunssfsi+0x4c>
     ea4:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_zero>
     ea8:	b1 e0       	ldi	r27, 0x01	; 1
     eaa:	08 95       	ret
     eac:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     eb0:	67 2f       	mov	r22, r23
     eb2:	78 2f       	mov	r23, r24
     eb4:	88 27       	eor	r24, r24
     eb6:	b8 5f       	subi	r27, 0xF8	; 248
     eb8:	39 f0       	breq	.+14     	; 0xec8 <__fixunssfsi+0x4c>
     eba:	b9 3f       	cpi	r27, 0xF9	; 249
     ebc:	cc f3       	brlt	.-14     	; 0xeb0 <__fixunssfsi+0x34>
     ebe:	86 95       	lsr	r24
     ec0:	77 95       	ror	r23
     ec2:	67 95       	ror	r22
     ec4:	b3 95       	inc	r27
     ec6:	d9 f7       	brne	.-10     	; 0xebe <__fixunssfsi+0x42>
     ec8:	3e f4       	brtc	.+14     	; 0xed8 <__fixunssfsi+0x5c>
     eca:	90 95       	com	r25
     ecc:	80 95       	com	r24
     ece:	70 95       	com	r23
     ed0:	61 95       	neg	r22
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	8f 4f       	sbci	r24, 0xFF	; 255
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	08 95       	ret

00000eda <__floatunsisf>:
     eda:	e8 94       	clt
     edc:	09 c0       	rjmp	.+18     	; 0xef0 <__floatsisf+0x12>

00000ede <__floatsisf>:
     ede:	97 fb       	bst	r25, 7
     ee0:	3e f4       	brtc	.+14     	; 0xef0 <__floatsisf+0x12>
     ee2:	90 95       	com	r25
     ee4:	80 95       	com	r24
     ee6:	70 95       	com	r23
     ee8:	61 95       	neg	r22
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	99 23       	and	r25, r25
     ef2:	a9 f0       	breq	.+42     	; 0xf1e <__floatsisf+0x40>
     ef4:	f9 2f       	mov	r31, r25
     ef6:	96 e9       	ldi	r25, 0x96	; 150
     ef8:	bb 27       	eor	r27, r27
     efa:	93 95       	inc	r25
     efc:	f6 95       	lsr	r31
     efe:	87 95       	ror	r24
     f00:	77 95       	ror	r23
     f02:	67 95       	ror	r22
     f04:	b7 95       	ror	r27
     f06:	f1 11       	cpse	r31, r1
     f08:	f8 cf       	rjmp	.-16     	; 0xefa <__floatsisf+0x1c>
     f0a:	fa f4       	brpl	.+62     	; 0xf4a <__floatsisf+0x6c>
     f0c:	bb 0f       	add	r27, r27
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__floatsisf+0x36>
     f10:	60 ff       	sbrs	r22, 0
     f12:	1b c0       	rjmp	.+54     	; 0xf4a <__floatsisf+0x6c>
     f14:	6f 5f       	subi	r22, 0xFF	; 255
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	8f 4f       	sbci	r24, 0xFF	; 255
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	16 c0       	rjmp	.+44     	; 0xf4a <__floatsisf+0x6c>
     f1e:	88 23       	and	r24, r24
     f20:	11 f0       	breq	.+4      	; 0xf26 <__floatsisf+0x48>
     f22:	96 e9       	ldi	r25, 0x96	; 150
     f24:	11 c0       	rjmp	.+34     	; 0xf48 <__floatsisf+0x6a>
     f26:	77 23       	and	r23, r23
     f28:	21 f0       	breq	.+8      	; 0xf32 <__floatsisf+0x54>
     f2a:	9e e8       	ldi	r25, 0x8E	; 142
     f2c:	87 2f       	mov	r24, r23
     f2e:	76 2f       	mov	r23, r22
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <__floatsisf+0x5e>
     f32:	66 23       	and	r22, r22
     f34:	71 f0       	breq	.+28     	; 0xf52 <__floatsisf+0x74>
     f36:	96 e8       	ldi	r25, 0x86	; 134
     f38:	86 2f       	mov	r24, r22
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	2a f0       	brmi	.+10     	; 0xf4a <__floatsisf+0x6c>
     f40:	9a 95       	dec	r25
     f42:	66 0f       	add	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	88 1f       	adc	r24, r24
     f48:	da f7       	brpl	.-10     	; 0xf40 <__floatsisf+0x62>
     f4a:	88 0f       	add	r24, r24
     f4c:	96 95       	lsr	r25
     f4e:	87 95       	ror	r24
     f50:	97 f9       	bld	r25, 7
     f52:	08 95       	ret

00000f54 <__fp_inf>:
     f54:	97 f9       	bld	r25, 7
     f56:	9f 67       	ori	r25, 0x7F	; 127
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	08 95       	ret

00000f60 <__fp_nan>:
     f60:	9f ef       	ldi	r25, 0xFF	; 255
     f62:	80 ec       	ldi	r24, 0xC0	; 192
     f64:	08 95       	ret

00000f66 <__fp_powser>:
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	1f 93       	push	r17
     f6c:	0f 93       	push	r16
     f6e:	ff 92       	push	r15
     f70:	ef 92       	push	r14
     f72:	df 92       	push	r13
     f74:	7b 01       	movw	r14, r22
     f76:	8c 01       	movw	r16, r24
     f78:	68 94       	set
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <__fp_powser+0x22>
     f7c:	da 2e       	mov	r13, r26
     f7e:	ef 01       	movw	r28, r30
     f80:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3x>
     f84:	fe 01       	movw	r30, r28
     f86:	e8 94       	clt
     f88:	a5 91       	lpm	r26, Z+
     f8a:	25 91       	lpm	r18, Z+
     f8c:	35 91       	lpm	r19, Z+
     f8e:	45 91       	lpm	r20, Z+
     f90:	55 91       	lpm	r21, Z+
     f92:	a6 f3       	brts	.-24     	; 0xf7c <__fp_powser+0x16>
     f94:	ef 01       	movw	r28, r30
     f96:	0e 94 b3 08 	call	0x1166	; 0x1166 <__addsf3x>
     f9a:	fe 01       	movw	r30, r28
     f9c:	97 01       	movw	r18, r14
     f9e:	a8 01       	movw	r20, r16
     fa0:	da 94       	dec	r13
     fa2:	69 f7       	brne	.-38     	; 0xf7e <__fp_powser+0x18>
     fa4:	df 90       	pop	r13
     fa6:	ef 90       	pop	r14
     fa8:	ff 90       	pop	r15
     faa:	0f 91       	pop	r16
     fac:	1f 91       	pop	r17
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <__fp_pscA>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	16 16       	cp	r1, r22
     fba:	17 06       	cpc	r1, r23
     fbc:	18 06       	cpc	r1, r24
     fbe:	09 06       	cpc	r0, r25
     fc0:	08 95       	ret

00000fc2 <__fp_pscB>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	05 06       	cpc	r0, r21
     fce:	08 95       	ret

00000fd0 <__fp_round>:
     fd0:	09 2e       	mov	r0, r25
     fd2:	03 94       	inc	r0
     fd4:	00 0c       	add	r0, r0
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__fp_round+0xc>
     fd8:	88 23       	and	r24, r24
     fda:	52 f0       	brmi	.+20     	; 0xff0 <__fp_round+0x20>
     fdc:	bb 0f       	add	r27, r27
     fde:	40 f4       	brcc	.+16     	; 0xff0 <__fp_round+0x20>
     fe0:	bf 2b       	or	r27, r31
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__fp_round+0x18>
     fe4:	60 ff       	sbrs	r22, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__fp_round+0x20>
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__fp_split3>:
     ff2:	57 fd       	sbrc	r21, 7
     ff4:	90 58       	subi	r25, 0x80	; 128
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	59 f0       	breq	.+22     	; 0x1012 <__fp_splitA+0x10>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	71 f0       	breq	.+28     	; 0x101c <__fp_splitA+0x1a>
    1000:	47 95       	ror	r20

00001002 <__fp_splitA>:
    1002:	88 0f       	add	r24, r24
    1004:	97 fb       	bst	r25, 7
    1006:	99 1f       	adc	r25, r25
    1008:	61 f0       	breq	.+24     	; 0x1022 <__fp_splitA+0x20>
    100a:	9f 3f       	cpi	r25, 0xFF	; 255
    100c:	79 f0       	breq	.+30     	; 0x102c <__fp_splitA+0x2a>
    100e:	87 95       	ror	r24
    1010:	08 95       	ret
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	14 06       	cpc	r1, r20
    1018:	55 1f       	adc	r21, r21
    101a:	f2 cf       	rjmp	.-28     	; 0x1000 <__fp_split3+0xe>
    101c:	46 95       	lsr	r20
    101e:	f1 df       	rcall	.-30     	; 0x1002 <__fp_splitA>
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <__fp_splitA+0x30>
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	99 1f       	adc	r25, r25
    102a:	f1 cf       	rjmp	.-30     	; 0x100e <__fp_splitA+0xc>
    102c:	86 95       	lsr	r24
    102e:	71 05       	cpc	r23, r1
    1030:	61 05       	cpc	r22, r1
    1032:	08 94       	sec
    1034:	08 95       	ret

00001036 <__fp_zero>:
    1036:	e8 94       	clt

00001038 <__fp_szero>:
    1038:	bb 27       	eor	r27, r27
    103a:	66 27       	eor	r22, r22
    103c:	77 27       	eor	r23, r23
    103e:	cb 01       	movw	r24, r22
    1040:	97 f9       	bld	r25, 7
    1042:	08 95       	ret

00001044 <inverse>:
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	80 e8       	ldi	r24, 0x80	; 128
    104e:	9f e3       	ldi	r25, 0x3F	; 63
    1050:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__divsf3>

00001054 <__mulsf3>:
    1054:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3x>
    1058:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
    105c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
    1060:	38 f0       	brcs	.+14     	; 0x1070 <__mulsf3+0x1c>
    1062:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
    1066:	20 f0       	brcs	.+8      	; 0x1070 <__mulsf3+0x1c>
    1068:	95 23       	and	r25, r21
    106a:	11 f0       	breq	.+4      	; 0x1070 <__mulsf3+0x1c>
    106c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>
    1070:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_nan>
    1074:	11 24       	eor	r1, r1
    1076:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>

0000107a <__mulsf3x>:
    107a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
    107e:	70 f3       	brcs	.-36     	; 0x105c <__mulsf3+0x8>

00001080 <__mulsf3_pse>:
    1080:	95 9f       	mul	r25, r21
    1082:	c1 f3       	breq	.-16     	; 0x1074 <__mulsf3+0x20>
    1084:	95 0f       	add	r25, r21
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	55 1f       	adc	r21, r21
    108a:	62 9f       	mul	r22, r18
    108c:	f0 01       	movw	r30, r0
    108e:	72 9f       	mul	r23, r18
    1090:	bb 27       	eor	r27, r27
    1092:	f0 0d       	add	r31, r0
    1094:	b1 1d       	adc	r27, r1
    1096:	63 9f       	mul	r22, r19
    1098:	aa 27       	eor	r26, r26
    109a:	f0 0d       	add	r31, r0
    109c:	b1 1d       	adc	r27, r1
    109e:	aa 1f       	adc	r26, r26
    10a0:	64 9f       	mul	r22, r20
    10a2:	66 27       	eor	r22, r22
    10a4:	b0 0d       	add	r27, r0
    10a6:	a1 1d       	adc	r26, r1
    10a8:	66 1f       	adc	r22, r22
    10aa:	82 9f       	mul	r24, r18
    10ac:	22 27       	eor	r18, r18
    10ae:	b0 0d       	add	r27, r0
    10b0:	a1 1d       	adc	r26, r1
    10b2:	62 1f       	adc	r22, r18
    10b4:	73 9f       	mul	r23, r19
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	62 1f       	adc	r22, r18
    10bc:	83 9f       	mul	r24, r19
    10be:	a0 0d       	add	r26, r0
    10c0:	61 1d       	adc	r22, r1
    10c2:	22 1f       	adc	r18, r18
    10c4:	74 9f       	mul	r23, r20
    10c6:	33 27       	eor	r19, r19
    10c8:	a0 0d       	add	r26, r0
    10ca:	61 1d       	adc	r22, r1
    10cc:	23 1f       	adc	r18, r19
    10ce:	84 9f       	mul	r24, r20
    10d0:	60 0d       	add	r22, r0
    10d2:	21 1d       	adc	r18, r1
    10d4:	82 2f       	mov	r24, r18
    10d6:	76 2f       	mov	r23, r22
    10d8:	6a 2f       	mov	r22, r26
    10da:	11 24       	eor	r1, r1
    10dc:	9f 57       	subi	r25, 0x7F	; 127
    10de:	50 40       	sbci	r21, 0x00	; 0
    10e0:	9a f0       	brmi	.+38     	; 0x1108 <__mulsf3_pse+0x88>
    10e2:	f1 f0       	breq	.+60     	; 0x1120 <__mulsf3_pse+0xa0>
    10e4:	88 23       	and	r24, r24
    10e6:	4a f0       	brmi	.+18     	; 0x10fa <__mulsf3_pse+0x7a>
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	bb 1f       	adc	r27, r27
    10ee:	66 1f       	adc	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	91 50       	subi	r25, 0x01	; 1
    10f6:	50 40       	sbci	r21, 0x00	; 0
    10f8:	a9 f7       	brne	.-22     	; 0x10e4 <__mulsf3_pse+0x64>
    10fa:	9e 3f       	cpi	r25, 0xFE	; 254
    10fc:	51 05       	cpc	r21, r1
    10fe:	80 f0       	brcs	.+32     	; 0x1120 <__mulsf3_pse+0xa0>
    1100:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>
    1104:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
    1108:	5f 3f       	cpi	r21, 0xFF	; 255
    110a:	e4 f3       	brlt	.-8      	; 0x1104 <__mulsf3_pse+0x84>
    110c:	98 3e       	cpi	r25, 0xE8	; 232
    110e:	d4 f3       	brlt	.-12     	; 0x1104 <__mulsf3_pse+0x84>
    1110:	86 95       	lsr	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	b7 95       	ror	r27
    1118:	f7 95       	ror	r31
    111a:	e7 95       	ror	r30
    111c:	9f 5f       	subi	r25, 0xFF	; 255
    111e:	c1 f7       	brne	.-16     	; 0x1110 <__mulsf3_pse+0x90>
    1120:	fe 2b       	or	r31, r30
    1122:	88 0f       	add	r24, r24
    1124:	91 1d       	adc	r25, r1
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	97 f9       	bld	r25, 7
    112c:	08 95       	ret

0000112e <square>:
    112e:	9b 01       	movw	r18, r22
    1130:	ac 01       	movw	r20, r24
    1132:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__mulsf3>

00001136 <__subsf3>:
    1136:	50 58       	subi	r21, 0x80	; 128

00001138 <__addsf3>:
    1138:	bb 27       	eor	r27, r27
    113a:	aa 27       	eor	r26, r26
    113c:	0e 94 b3 08 	call	0x1166	; 0x1166 <__addsf3x>
    1140:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
    1144:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
    1148:	38 f0       	brcs	.+14     	; 0x1158 <__addsf3+0x20>
    114a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
    114e:	20 f0       	brcs	.+8      	; 0x1158 <__addsf3+0x20>
    1150:	39 f4       	brne	.+14     	; 0x1160 <__addsf3+0x28>
    1152:	9f 3f       	cpi	r25, 0xFF	; 255
    1154:	19 f4       	brne	.+6      	; 0x115c <__addsf3+0x24>
    1156:	26 f4       	brtc	.+8      	; 0x1160 <__addsf3+0x28>
    1158:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_nan>
    115c:	0e f4       	brtc	.+2      	; 0x1160 <__addsf3+0x28>
    115e:	e0 95       	com	r30
    1160:	e7 fb       	bst	r30, 7
    1162:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>

00001166 <__addsf3x>:
    1166:	e9 2f       	mov	r30, r25
    1168:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
    116c:	58 f3       	brcs	.-42     	; 0x1144 <__addsf3+0xc>
    116e:	ba 17       	cp	r27, r26
    1170:	62 07       	cpc	r22, r18
    1172:	73 07       	cpc	r23, r19
    1174:	84 07       	cpc	r24, r20
    1176:	95 07       	cpc	r25, r21
    1178:	20 f0       	brcs	.+8      	; 0x1182 <__addsf3x+0x1c>
    117a:	79 f4       	brne	.+30     	; 0x119a <__addsf3x+0x34>
    117c:	a6 f5       	brtc	.+104    	; 0x11e6 <__addsf3x+0x80>
    117e:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
    1182:	0e f4       	brtc	.+2      	; 0x1186 <__addsf3x+0x20>
    1184:	e0 95       	com	r30
    1186:	0b 2e       	mov	r0, r27
    1188:	ba 2f       	mov	r27, r26
    118a:	a0 2d       	mov	r26, r0
    118c:	0b 01       	movw	r0, r22
    118e:	b9 01       	movw	r22, r18
    1190:	90 01       	movw	r18, r0
    1192:	0c 01       	movw	r0, r24
    1194:	ca 01       	movw	r24, r20
    1196:	a0 01       	movw	r20, r0
    1198:	11 24       	eor	r1, r1
    119a:	ff 27       	eor	r31, r31
    119c:	59 1b       	sub	r21, r25
    119e:	99 f0       	breq	.+38     	; 0x11c6 <__addsf3x+0x60>
    11a0:	59 3f       	cpi	r21, 0xF9	; 249
    11a2:	50 f4       	brcc	.+20     	; 0x11b8 <__addsf3x+0x52>
    11a4:	50 3e       	cpi	r21, 0xE0	; 224
    11a6:	68 f1       	brcs	.+90     	; 0x1202 <__addsf3x+0x9c>
    11a8:	1a 16       	cp	r1, r26
    11aa:	f0 40       	sbci	r31, 0x00	; 0
    11ac:	a2 2f       	mov	r26, r18
    11ae:	23 2f       	mov	r18, r19
    11b0:	34 2f       	mov	r19, r20
    11b2:	44 27       	eor	r20, r20
    11b4:	58 5f       	subi	r21, 0xF8	; 248
    11b6:	f3 cf       	rjmp	.-26     	; 0x119e <__addsf3x+0x38>
    11b8:	46 95       	lsr	r20
    11ba:	37 95       	ror	r19
    11bc:	27 95       	ror	r18
    11be:	a7 95       	ror	r26
    11c0:	f0 40       	sbci	r31, 0x00	; 0
    11c2:	53 95       	inc	r21
    11c4:	c9 f7       	brne	.-14     	; 0x11b8 <__addsf3x+0x52>
    11c6:	7e f4       	brtc	.+30     	; 0x11e6 <__addsf3x+0x80>
    11c8:	1f 16       	cp	r1, r31
    11ca:	ba 0b       	sbc	r27, r26
    11cc:	62 0b       	sbc	r22, r18
    11ce:	73 0b       	sbc	r23, r19
    11d0:	84 0b       	sbc	r24, r20
    11d2:	ba f0       	brmi	.+46     	; 0x1202 <__addsf3x+0x9c>
    11d4:	91 50       	subi	r25, 0x01	; 1
    11d6:	a1 f0       	breq	.+40     	; 0x1200 <__addsf3x+0x9a>
    11d8:	ff 0f       	add	r31, r31
    11da:	bb 1f       	adc	r27, r27
    11dc:	66 1f       	adc	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	c2 f7       	brpl	.-16     	; 0x11d4 <__addsf3x+0x6e>
    11e4:	0e c0       	rjmp	.+28     	; 0x1202 <__addsf3x+0x9c>
    11e6:	ba 0f       	add	r27, r26
    11e8:	62 1f       	adc	r22, r18
    11ea:	73 1f       	adc	r23, r19
    11ec:	84 1f       	adc	r24, r20
    11ee:	48 f4       	brcc	.+18     	; 0x1202 <__addsf3x+0x9c>
    11f0:	87 95       	ror	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	f7 95       	ror	r31
    11fa:	9e 3f       	cpi	r25, 0xFE	; 254
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <__addsf3x+0x9a>
    11fe:	b0 cf       	rjmp	.-160    	; 0x1160 <__addsf3+0x28>
    1200:	93 95       	inc	r25
    1202:	88 0f       	add	r24, r24
    1204:	08 f0       	brcs	.+2      	; 0x1208 <__addsf3x+0xa2>
    1206:	99 27       	eor	r25, r25
    1208:	ee 0f       	add	r30, r30
    120a:	97 95       	ror	r25
    120c:	87 95       	ror	r24
    120e:	08 95       	ret

00001210 <__divmodhi4>:
    1210:	97 fb       	bst	r25, 7
    1212:	07 2e       	mov	r0, r23
    1214:	16 f4       	brtc	.+4      	; 0x121a <__divmodhi4+0xa>
    1216:	00 94       	com	r0
    1218:	07 d0       	rcall	.+14     	; 0x1228 <__divmodhi4_neg1>
    121a:	77 fd       	sbrc	r23, 7
    121c:	09 d0       	rcall	.+18     	; 0x1230 <__divmodhi4_neg2>
    121e:	0e 94 1c 09 	call	0x1238	; 0x1238 <__udivmodhi4>
    1222:	07 fc       	sbrc	r0, 7
    1224:	05 d0       	rcall	.+10     	; 0x1230 <__divmodhi4_neg2>
    1226:	3e f4       	brtc	.+14     	; 0x1236 <__divmodhi4_exit>

00001228 <__divmodhi4_neg1>:
    1228:	90 95       	com	r25
    122a:	81 95       	neg	r24
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	08 95       	ret

00001230 <__divmodhi4_neg2>:
    1230:	70 95       	com	r23
    1232:	61 95       	neg	r22
    1234:	7f 4f       	sbci	r23, 0xFF	; 255

00001236 <__divmodhi4_exit>:
    1236:	08 95       	ret

00001238 <__udivmodhi4>:
    1238:	aa 1b       	sub	r26, r26
    123a:	bb 1b       	sub	r27, r27
    123c:	51 e1       	ldi	r21, 0x11	; 17
    123e:	07 c0       	rjmp	.+14     	; 0x124e <__udivmodhi4_ep>

00001240 <__udivmodhi4_loop>:
    1240:	aa 1f       	adc	r26, r26
    1242:	bb 1f       	adc	r27, r27
    1244:	a6 17       	cp	r26, r22
    1246:	b7 07       	cpc	r27, r23
    1248:	10 f0       	brcs	.+4      	; 0x124e <__udivmodhi4_ep>
    124a:	a6 1b       	sub	r26, r22
    124c:	b7 0b       	sbc	r27, r23

0000124e <__udivmodhi4_ep>:
    124e:	88 1f       	adc	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	5a 95       	dec	r21
    1254:	a9 f7       	brne	.-22     	; 0x1240 <__udivmodhi4_loop>
    1256:	80 95       	com	r24
    1258:	90 95       	com	r25
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	08 95       	ret

00001260 <malloc>:
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	91 05       	cpc	r25, r1
    126c:	10 f4       	brcc	.+4      	; 0x1272 <malloc+0x12>
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <__flp>
    1276:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <__flp+0x1>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	30 97       	sbiw	r30, 0x00	; 0
    1284:	19 f1       	breq	.+70     	; 0x12cc <malloc+0x6c>
    1286:	40 81       	ld	r20, Z
    1288:	51 81       	ldd	r21, Z+1	; 0x01
    128a:	02 81       	ldd	r16, Z+2	; 0x02
    128c:	13 81       	ldd	r17, Z+3	; 0x03
    128e:	48 17       	cp	r20, r24
    1290:	59 07       	cpc	r21, r25
    1292:	c8 f0       	brcs	.+50     	; 0x12c6 <malloc+0x66>
    1294:	84 17       	cp	r24, r20
    1296:	95 07       	cpc	r25, r21
    1298:	69 f4       	brne	.+26     	; 0x12b4 <malloc+0x54>
    129a:	10 97       	sbiw	r26, 0x00	; 0
    129c:	31 f0       	breq	.+12     	; 0x12aa <malloc+0x4a>
    129e:	12 96       	adiw	r26, 0x02	; 2
    12a0:	0c 93       	st	X, r16
    12a2:	12 97       	sbiw	r26, 0x02	; 2
    12a4:	13 96       	adiw	r26, 0x03	; 3
    12a6:	1c 93       	st	X, r17
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <malloc+0x98>
    12aa:	00 93 8c 02 	sts	0x028C, r16	; 0x80028c <__flp>
    12ae:	10 93 8d 02 	sts	0x028D, r17	; 0x80028d <__flp+0x1>
    12b2:	22 c0       	rjmp	.+68     	; 0x12f8 <malloc+0x98>
    12b4:	21 15       	cp	r18, r1
    12b6:	31 05       	cpc	r19, r1
    12b8:	19 f0       	breq	.+6      	; 0x12c0 <malloc+0x60>
    12ba:	42 17       	cp	r20, r18
    12bc:	53 07       	cpc	r21, r19
    12be:	18 f4       	brcc	.+6      	; 0x12c6 <malloc+0x66>
    12c0:	9a 01       	movw	r18, r20
    12c2:	bd 01       	movw	r22, r26
    12c4:	ef 01       	movw	r28, r30
    12c6:	df 01       	movw	r26, r30
    12c8:	f8 01       	movw	r30, r16
    12ca:	db cf       	rjmp	.-74     	; 0x1282 <malloc+0x22>
    12cc:	21 15       	cp	r18, r1
    12ce:	31 05       	cpc	r19, r1
    12d0:	f9 f0       	breq	.+62     	; 0x1310 <malloc+0xb0>
    12d2:	28 1b       	sub	r18, r24
    12d4:	39 0b       	sbc	r19, r25
    12d6:	24 30       	cpi	r18, 0x04	; 4
    12d8:	31 05       	cpc	r19, r1
    12da:	80 f4       	brcc	.+32     	; 0x12fc <malloc+0x9c>
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	61 15       	cp	r22, r1
    12e2:	71 05       	cpc	r23, r1
    12e4:	21 f0       	breq	.+8      	; 0x12ee <malloc+0x8e>
    12e6:	fb 01       	movw	r30, r22
    12e8:	93 83       	std	Z+3, r25	; 0x03
    12ea:	82 83       	std	Z+2, r24	; 0x02
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <malloc+0x96>
    12ee:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <__flp+0x1>
    12f2:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <__flp>
    12f6:	fe 01       	movw	r30, r28
    12f8:	32 96       	adiw	r30, 0x02	; 2
    12fa:	44 c0       	rjmp	.+136    	; 0x1384 <malloc+0x124>
    12fc:	fe 01       	movw	r30, r28
    12fe:	e2 0f       	add	r30, r18
    1300:	f3 1f       	adc	r31, r19
    1302:	81 93       	st	Z+, r24
    1304:	91 93       	st	Z+, r25
    1306:	22 50       	subi	r18, 0x02	; 2
    1308:	31 09       	sbc	r19, r1
    130a:	39 83       	std	Y+1, r19	; 0x01
    130c:	28 83       	st	Y, r18
    130e:	3a c0       	rjmp	.+116    	; 0x1384 <malloc+0x124>
    1310:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <__brkval>
    1314:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <__brkval+0x1>
    1318:	23 2b       	or	r18, r19
    131a:	41 f4       	brne	.+16     	; 0x132c <malloc+0xcc>
    131c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1320:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1324:	30 93 8b 02 	sts	0x028B, r19	; 0x80028b <__brkval+0x1>
    1328:	20 93 8a 02 	sts	0x028A, r18	; 0x80028a <__brkval>
    132c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1330:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1334:	21 15       	cp	r18, r1
    1336:	31 05       	cpc	r19, r1
    1338:	41 f4       	brne	.+16     	; 0x134a <malloc+0xea>
    133a:	2d b7       	in	r18, 0x3d	; 61
    133c:	3e b7       	in	r19, 0x3e	; 62
    133e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1342:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1346:	24 1b       	sub	r18, r20
    1348:	35 0b       	sbc	r19, r21
    134a:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <__brkval>
    134e:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <__brkval+0x1>
    1352:	e2 17       	cp	r30, r18
    1354:	f3 07       	cpc	r31, r19
    1356:	a0 f4       	brcc	.+40     	; 0x1380 <malloc+0x120>
    1358:	2e 1b       	sub	r18, r30
    135a:	3f 0b       	sbc	r19, r31
    135c:	28 17       	cp	r18, r24
    135e:	39 07       	cpc	r19, r25
    1360:	78 f0       	brcs	.+30     	; 0x1380 <malloc+0x120>
    1362:	ac 01       	movw	r20, r24
    1364:	4e 5f       	subi	r20, 0xFE	; 254
    1366:	5f 4f       	sbci	r21, 0xFF	; 255
    1368:	24 17       	cp	r18, r20
    136a:	35 07       	cpc	r19, r21
    136c:	48 f0       	brcs	.+18     	; 0x1380 <malloc+0x120>
    136e:	4e 0f       	add	r20, r30
    1370:	5f 1f       	adc	r21, r31
    1372:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <__brkval+0x1>
    1376:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <__brkval>
    137a:	81 93       	st	Z+, r24
    137c:	91 93       	st	Z+, r25
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <malloc+0x124>
    1380:	e0 e0       	ldi	r30, 0x00	; 0
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	cf 01       	movw	r24, r30
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <free>:
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	09 f4       	brne	.+2      	; 0x139a <free+0xa>
    1398:	81 c0       	rjmp	.+258    	; 0x149c <free+0x10c>
    139a:	fc 01       	movw	r30, r24
    139c:	32 97       	sbiw	r30, 0x02	; 2
    139e:	13 82       	std	Z+3, r1	; 0x03
    13a0:	12 82       	std	Z+2, r1	; 0x02
    13a2:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <__flp>
    13a6:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <__flp+0x1>
    13aa:	10 97       	sbiw	r26, 0x00	; 0
    13ac:	81 f4       	brne	.+32     	; 0x13ce <free+0x3e>
    13ae:	20 81       	ld	r18, Z
    13b0:	31 81       	ldd	r19, Z+1	; 0x01
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19
    13b6:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <__brkval>
    13ba:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <__brkval+0x1>
    13be:	28 17       	cp	r18, r24
    13c0:	39 07       	cpc	r19, r25
    13c2:	51 f5       	brne	.+84     	; 0x1418 <free+0x88>
    13c4:	f0 93 8b 02 	sts	0x028B, r31	; 0x80028b <__brkval+0x1>
    13c8:	e0 93 8a 02 	sts	0x028A, r30	; 0x80028a <__brkval>
    13cc:	67 c0       	rjmp	.+206    	; 0x149c <free+0x10c>
    13ce:	ed 01       	movw	r28, r26
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	ce 17       	cp	r28, r30
    13d6:	df 07       	cpc	r29, r31
    13d8:	40 f4       	brcc	.+16     	; 0x13ea <free+0x5a>
    13da:	4a 81       	ldd	r20, Y+2	; 0x02
    13dc:	5b 81       	ldd	r21, Y+3	; 0x03
    13de:	9e 01       	movw	r18, r28
    13e0:	41 15       	cp	r20, r1
    13e2:	51 05       	cpc	r21, r1
    13e4:	f1 f0       	breq	.+60     	; 0x1422 <free+0x92>
    13e6:	ea 01       	movw	r28, r20
    13e8:	f5 cf       	rjmp	.-22     	; 0x13d4 <free+0x44>
    13ea:	d3 83       	std	Z+3, r29	; 0x03
    13ec:	c2 83       	std	Z+2, r28	; 0x02
    13ee:	40 81       	ld	r20, Z
    13f0:	51 81       	ldd	r21, Z+1	; 0x01
    13f2:	84 0f       	add	r24, r20
    13f4:	95 1f       	adc	r25, r21
    13f6:	c8 17       	cp	r28, r24
    13f8:	d9 07       	cpc	r29, r25
    13fa:	59 f4       	brne	.+22     	; 0x1412 <free+0x82>
    13fc:	88 81       	ld	r24, Y
    13fe:	99 81       	ldd	r25, Y+1	; 0x01
    1400:	84 0f       	add	r24, r20
    1402:	95 1f       	adc	r25, r21
    1404:	02 96       	adiw	r24, 0x02	; 2
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	93 83       	std	Z+3, r25	; 0x03
    1410:	82 83       	std	Z+2, r24	; 0x02
    1412:	21 15       	cp	r18, r1
    1414:	31 05       	cpc	r19, r1
    1416:	29 f4       	brne	.+10     	; 0x1422 <free+0x92>
    1418:	f0 93 8d 02 	sts	0x028D, r31	; 0x80028d <__flp+0x1>
    141c:	e0 93 8c 02 	sts	0x028C, r30	; 0x80028c <__flp>
    1420:	3d c0       	rjmp	.+122    	; 0x149c <free+0x10c>
    1422:	e9 01       	movw	r28, r18
    1424:	fb 83       	std	Y+3, r31	; 0x03
    1426:	ea 83       	std	Y+2, r30	; 0x02
    1428:	49 91       	ld	r20, Y+
    142a:	59 91       	ld	r21, Y+
    142c:	c4 0f       	add	r28, r20
    142e:	d5 1f       	adc	r29, r21
    1430:	ec 17       	cp	r30, r28
    1432:	fd 07       	cpc	r31, r29
    1434:	61 f4       	brne	.+24     	; 0x144e <free+0xbe>
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	84 0f       	add	r24, r20
    143c:	95 1f       	adc	r25, r21
    143e:	02 96       	adiw	r24, 0x02	; 2
    1440:	e9 01       	movw	r28, r18
    1442:	99 83       	std	Y+1, r25	; 0x01
    1444:	88 83       	st	Y, r24
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	9b 83       	std	Y+3, r25	; 0x03
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	e0 e0       	ldi	r30, 0x00	; 0
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	12 96       	adiw	r26, 0x02	; 2
    1454:	8d 91       	ld	r24, X+
    1456:	9c 91       	ld	r25, X
    1458:	13 97       	sbiw	r26, 0x03	; 3
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	19 f0       	breq	.+6      	; 0x1464 <free+0xd4>
    145e:	fd 01       	movw	r30, r26
    1460:	dc 01       	movw	r26, r24
    1462:	f7 cf       	rjmp	.-18     	; 0x1452 <free+0xc2>
    1464:	8d 91       	ld	r24, X+
    1466:	9c 91       	ld	r25, X
    1468:	11 97       	sbiw	r26, 0x01	; 1
    146a:	9d 01       	movw	r18, r26
    146c:	2e 5f       	subi	r18, 0xFE	; 254
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <__brkval>
    1478:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <__brkval+0x1>
    147c:	28 17       	cp	r18, r24
    147e:	39 07       	cpc	r19, r25
    1480:	69 f4       	brne	.+26     	; 0x149c <free+0x10c>
    1482:	30 97       	sbiw	r30, 0x00	; 0
    1484:	29 f4       	brne	.+10     	; 0x1490 <free+0x100>
    1486:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <__flp+0x1>
    148a:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <__flp>
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <free+0x104>
    1490:	13 82       	std	Z+3, r1	; 0x03
    1492:	12 82       	std	Z+2, r1	; 0x02
    1494:	b0 93 8b 02 	sts	0x028B, r27	; 0x80028b <__brkval+0x1>
    1498:	a0 93 8a 02 	sts	0x028A, r26	; 0x80028a <__brkval>
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <do_rand>:
    14a2:	8f 92       	push	r8
    14a4:	9f 92       	push	r9
    14a6:	af 92       	push	r10
    14a8:	bf 92       	push	r11
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	ec 01       	movw	r28, r24
    14b8:	68 81       	ld	r22, Y
    14ba:	79 81       	ldd	r23, Y+1	; 0x01
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	61 15       	cp	r22, r1
    14c2:	71 05       	cpc	r23, r1
    14c4:	81 05       	cpc	r24, r1
    14c6:	91 05       	cpc	r25, r1
    14c8:	21 f4       	brne	.+8      	; 0x14d2 <do_rand+0x30>
    14ca:	64 e2       	ldi	r22, 0x24	; 36
    14cc:	79 ed       	ldi	r23, 0xD9	; 217
    14ce:	8b e5       	ldi	r24, 0x5B	; 91
    14d0:	97 e0       	ldi	r25, 0x07	; 7
    14d2:	2d e1       	ldi	r18, 0x1D	; 29
    14d4:	33 ef       	ldi	r19, 0xF3	; 243
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodsi4>
    14de:	49 01       	movw	r8, r18
    14e0:	5a 01       	movw	r10, r20
    14e2:	9b 01       	movw	r18, r22
    14e4:	ac 01       	movw	r20, r24
    14e6:	a7 ea       	ldi	r26, 0xA7	; 167
    14e8:	b1 e4       	ldi	r27, 0x41	; 65
    14ea:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__muluhisi3>
    14ee:	6b 01       	movw	r12, r22
    14f0:	7c 01       	movw	r14, r24
    14f2:	ac ee       	ldi	r26, 0xEC	; 236
    14f4:	b4 ef       	ldi	r27, 0xF4	; 244
    14f6:	a5 01       	movw	r20, r10
    14f8:	94 01       	movw	r18, r8
    14fa:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__mulohisi3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8c 0d       	add	r24, r12
    1504:	9d 1d       	adc	r25, r13
    1506:	ae 1d       	adc	r26, r14
    1508:	bf 1d       	adc	r27, r15
    150a:	b7 ff       	sbrs	r27, 7
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <do_rand+0x72>
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	a1 09       	sbc	r26, r1
    1512:	b0 48       	sbci	r27, 0x80	; 128
    1514:	88 83       	st	Y, r24
    1516:	99 83       	std	Y+1, r25	; 0x01
    1518:	aa 83       	std	Y+2, r26	; 0x02
    151a:	bb 83       	std	Y+3, r27	; 0x03
    151c:	9f 77       	andi	r25, 0x7F	; 127
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	af 90       	pop	r10
    152e:	9f 90       	pop	r9
    1530:	8f 90       	pop	r8
    1532:	08 95       	ret

00001534 <rand_r>:
    1534:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <do_rand>
    1538:	08 95       	ret

0000153a <rand>:
    153a:	86 e0       	ldi	r24, 0x06	; 6
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <do_rand>
    1542:	08 95       	ret

00001544 <srand>:
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    154c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1550:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1554:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1558:	08 95       	ret

0000155a <strcpy>:
    155a:	fb 01       	movw	r30, r22
    155c:	dc 01       	movw	r26, r24
    155e:	01 90       	ld	r0, Z+
    1560:	0d 92       	st	X+, r0
    1562:	00 20       	and	r0, r0
    1564:	e1 f7       	brne	.-8      	; 0x155e <strcpy+0x4>
    1566:	08 95       	ret

00001568 <fdevopen>:
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	31 f4       	brne	.+12     	; 0x1580 <fdevopen+0x18>
    1574:	61 15       	cp	r22, r1
    1576:	71 05       	cpc	r23, r1
    1578:	19 f4       	brne	.+6      	; 0x1580 <fdevopen+0x18>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	3a c0       	rjmp	.+116    	; 0x15f4 <fdevopen+0x8c>
    1580:	8b 01       	movw	r16, r22
    1582:	ec 01       	movw	r28, r24
    1584:	6e e0       	ldi	r22, 0x0E	; 14
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <calloc>
    1590:	fc 01       	movw	r30, r24
    1592:	89 2b       	or	r24, r25
    1594:	91 f3       	breq	.-28     	; 0x157a <fdevopen+0x12>
    1596:	80 e8       	ldi	r24, 0x80	; 128
    1598:	83 83       	std	Z+3, r24	; 0x03
    159a:	01 15       	cp	r16, r1
    159c:	11 05       	cpc	r17, r1
    159e:	71 f0       	breq	.+28     	; 0x15bc <fdevopen+0x54>
    15a0:	13 87       	std	Z+11, r17	; 0x0b
    15a2:	02 87       	std	Z+10, r16	; 0x0a
    15a4:	81 e8       	ldi	r24, 0x81	; 129
    15a6:	83 83       	std	Z+3, r24	; 0x03
    15a8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__iob>
    15ac:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__iob+0x1>
    15b0:	89 2b       	or	r24, r25
    15b2:	21 f4       	brne	.+8      	; 0x15bc <fdevopen+0x54>
    15b4:	f0 93 8f 02 	sts	0x028F, r31	; 0x80028f <__iob+0x1>
    15b8:	e0 93 8e 02 	sts	0x028E, r30	; 0x80028e <__iob>
    15bc:	20 97       	sbiw	r28, 0x00	; 0
    15be:	c9 f0       	breq	.+50     	; 0x15f2 <fdevopen+0x8a>
    15c0:	d1 87       	std	Z+9, r29	; 0x09
    15c2:	c0 87       	std	Z+8, r28	; 0x08
    15c4:	83 81       	ldd	r24, Z+3	; 0x03
    15c6:	82 60       	ori	r24, 0x02	; 2
    15c8:	83 83       	std	Z+3, r24	; 0x03
    15ca:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__iob+0x2>
    15ce:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__iob+0x3>
    15d2:	89 2b       	or	r24, r25
    15d4:	71 f4       	brne	.+28     	; 0x15f2 <fdevopen+0x8a>
    15d6:	f0 93 91 02 	sts	0x0291, r31	; 0x800291 <__iob+0x3>
    15da:	e0 93 90 02 	sts	0x0290, r30	; 0x800290 <__iob+0x2>
    15de:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__iob+0x4>
    15e2:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__iob+0x5>
    15e6:	89 2b       	or	r24, r25
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <fdevopen+0x8a>
    15ea:	f0 93 93 02 	sts	0x0293, r31	; 0x800293 <__iob+0x5>
    15ee:	e0 93 92 02 	sts	0x0292, r30	; 0x800292 <__iob+0x4>
    15f2:	cf 01       	movw	r24, r30
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	08 95       	ret

000015fe <printf>:
    15fe:	a0 e0       	ldi	r26, 0x00	; 0
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e0       	ldi	r30, 0x05	; 5
    1604:	fb e0       	ldi	r31, 0x0B	; 11
    1606:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__prologue_saves__+0x20>
    160a:	ae 01       	movw	r20, r28
    160c:	4b 5f       	subi	r20, 0xFB	; 251
    160e:	5f 4f       	sbci	r21, 0xFF	; 255
    1610:	fa 01       	movw	r30, r20
    1612:	61 91       	ld	r22, Z+
    1614:	71 91       	ld	r23, Z+
    1616:	af 01       	movw	r20, r30
    1618:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__iob+0x2>
    161c:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__iob+0x3>
    1620:	0e 94 15 0b 	call	0x162a	; 0x162a <vfprintf>
    1624:	e2 e0       	ldi	r30, 0x02	; 2
    1626:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__epilogue_restores__+0x20>

0000162a <vfprintf>:
    162a:	ab e0       	ldi	r26, 0x0B	; 11
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e1       	ldi	r30, 0x1B	; 27
    1630:	fb e0       	ldi	r31, 0x0B	; 11
    1632:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__prologue_saves__>
    1636:	6c 01       	movw	r12, r24
    1638:	7b 01       	movw	r14, r22
    163a:	8a 01       	movw	r16, r20
    163c:	fc 01       	movw	r30, r24
    163e:	17 82       	std	Z+7, r1	; 0x07
    1640:	16 82       	std	Z+6, r1	; 0x06
    1642:	83 81       	ldd	r24, Z+3	; 0x03
    1644:	81 ff       	sbrs	r24, 1
    1646:	cc c1       	rjmp	.+920    	; 0x19e0 <vfprintf+0x3b6>
    1648:	ce 01       	movw	r24, r28
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	3c 01       	movw	r6, r24
    164e:	f6 01       	movw	r30, r12
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	f7 01       	movw	r30, r14
    1654:	93 fd       	sbrc	r25, 3
    1656:	85 91       	lpm	r24, Z+
    1658:	93 ff       	sbrs	r25, 3
    165a:	81 91       	ld	r24, Z+
    165c:	7f 01       	movw	r14, r30
    165e:	88 23       	and	r24, r24
    1660:	09 f4       	brne	.+2      	; 0x1664 <vfprintf+0x3a>
    1662:	ba c1       	rjmp	.+884    	; 0x19d8 <vfprintf+0x3ae>
    1664:	85 32       	cpi	r24, 0x25	; 37
    1666:	39 f4       	brne	.+14     	; 0x1676 <vfprintf+0x4c>
    1668:	93 fd       	sbrc	r25, 3
    166a:	85 91       	lpm	r24, Z+
    166c:	93 ff       	sbrs	r25, 3
    166e:	81 91       	ld	r24, Z+
    1670:	7f 01       	movw	r14, r30
    1672:	85 32       	cpi	r24, 0x25	; 37
    1674:	29 f4       	brne	.+10     	; 0x1680 <vfprintf+0x56>
    1676:	b6 01       	movw	r22, r12
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    167e:	e7 cf       	rjmp	.-50     	; 0x164e <vfprintf+0x24>
    1680:	91 2c       	mov	r9, r1
    1682:	21 2c       	mov	r2, r1
    1684:	31 2c       	mov	r3, r1
    1686:	ff e1       	ldi	r31, 0x1F	; 31
    1688:	f3 15       	cp	r31, r3
    168a:	d8 f0       	brcs	.+54     	; 0x16c2 <vfprintf+0x98>
    168c:	8b 32       	cpi	r24, 0x2B	; 43
    168e:	79 f0       	breq	.+30     	; 0x16ae <vfprintf+0x84>
    1690:	38 f4       	brcc	.+14     	; 0x16a0 <vfprintf+0x76>
    1692:	80 32       	cpi	r24, 0x20	; 32
    1694:	79 f0       	breq	.+30     	; 0x16b4 <vfprintf+0x8a>
    1696:	83 32       	cpi	r24, 0x23	; 35
    1698:	a1 f4       	brne	.+40     	; 0x16c2 <vfprintf+0x98>
    169a:	23 2d       	mov	r18, r3
    169c:	20 61       	ori	r18, 0x10	; 16
    169e:	1d c0       	rjmp	.+58     	; 0x16da <vfprintf+0xb0>
    16a0:	8d 32       	cpi	r24, 0x2D	; 45
    16a2:	61 f0       	breq	.+24     	; 0x16bc <vfprintf+0x92>
    16a4:	80 33       	cpi	r24, 0x30	; 48
    16a6:	69 f4       	brne	.+26     	; 0x16c2 <vfprintf+0x98>
    16a8:	23 2d       	mov	r18, r3
    16aa:	21 60       	ori	r18, 0x01	; 1
    16ac:	16 c0       	rjmp	.+44     	; 0x16da <vfprintf+0xb0>
    16ae:	83 2d       	mov	r24, r3
    16b0:	82 60       	ori	r24, 0x02	; 2
    16b2:	38 2e       	mov	r3, r24
    16b4:	e3 2d       	mov	r30, r3
    16b6:	e4 60       	ori	r30, 0x04	; 4
    16b8:	3e 2e       	mov	r3, r30
    16ba:	2a c0       	rjmp	.+84     	; 0x1710 <vfprintf+0xe6>
    16bc:	f3 2d       	mov	r31, r3
    16be:	f8 60       	ori	r31, 0x08	; 8
    16c0:	1d c0       	rjmp	.+58     	; 0x16fc <vfprintf+0xd2>
    16c2:	37 fc       	sbrc	r3, 7
    16c4:	2d c0       	rjmp	.+90     	; 0x1720 <vfprintf+0xf6>
    16c6:	20 ed       	ldi	r18, 0xD0	; 208
    16c8:	28 0f       	add	r18, r24
    16ca:	2a 30       	cpi	r18, 0x0A	; 10
    16cc:	40 f0       	brcs	.+16     	; 0x16de <vfprintf+0xb4>
    16ce:	8e 32       	cpi	r24, 0x2E	; 46
    16d0:	b9 f4       	brne	.+46     	; 0x1700 <vfprintf+0xd6>
    16d2:	36 fc       	sbrc	r3, 6
    16d4:	81 c1       	rjmp	.+770    	; 0x19d8 <vfprintf+0x3ae>
    16d6:	23 2d       	mov	r18, r3
    16d8:	20 64       	ori	r18, 0x40	; 64
    16da:	32 2e       	mov	r3, r18
    16dc:	19 c0       	rjmp	.+50     	; 0x1710 <vfprintf+0xe6>
    16de:	36 fe       	sbrs	r3, 6
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <vfprintf+0xc4>
    16e2:	8a e0       	ldi	r24, 0x0A	; 10
    16e4:	98 9e       	mul	r9, r24
    16e6:	20 0d       	add	r18, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	92 2e       	mov	r9, r18
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <vfprintf+0xe6>
    16ee:	ea e0       	ldi	r30, 0x0A	; 10
    16f0:	2e 9e       	mul	r2, r30
    16f2:	20 0d       	add	r18, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	22 2e       	mov	r2, r18
    16f8:	f3 2d       	mov	r31, r3
    16fa:	f0 62       	ori	r31, 0x20	; 32
    16fc:	3f 2e       	mov	r3, r31
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <vfprintf+0xe6>
    1700:	8c 36       	cpi	r24, 0x6C	; 108
    1702:	21 f4       	brne	.+8      	; 0x170c <vfprintf+0xe2>
    1704:	83 2d       	mov	r24, r3
    1706:	80 68       	ori	r24, 0x80	; 128
    1708:	38 2e       	mov	r3, r24
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0xe6>
    170c:	88 36       	cpi	r24, 0x68	; 104
    170e:	41 f4       	brne	.+16     	; 0x1720 <vfprintf+0xf6>
    1710:	f7 01       	movw	r30, r14
    1712:	93 fd       	sbrc	r25, 3
    1714:	85 91       	lpm	r24, Z+
    1716:	93 ff       	sbrs	r25, 3
    1718:	81 91       	ld	r24, Z+
    171a:	7f 01       	movw	r14, r30
    171c:	81 11       	cpse	r24, r1
    171e:	b3 cf       	rjmp	.-154    	; 0x1686 <vfprintf+0x5c>
    1720:	98 2f       	mov	r25, r24
    1722:	9f 7d       	andi	r25, 0xDF	; 223
    1724:	95 54       	subi	r25, 0x45	; 69
    1726:	93 30       	cpi	r25, 0x03	; 3
    1728:	28 f4       	brcc	.+10     	; 0x1734 <vfprintf+0x10a>
    172a:	0c 5f       	subi	r16, 0xFC	; 252
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	9f e3       	ldi	r25, 0x3F	; 63
    1730:	99 83       	std	Y+1, r25	; 0x01
    1732:	0d c0       	rjmp	.+26     	; 0x174e <vfprintf+0x124>
    1734:	83 36       	cpi	r24, 0x63	; 99
    1736:	31 f0       	breq	.+12     	; 0x1744 <vfprintf+0x11a>
    1738:	83 37       	cpi	r24, 0x73	; 115
    173a:	71 f0       	breq	.+28     	; 0x1758 <vfprintf+0x12e>
    173c:	83 35       	cpi	r24, 0x53	; 83
    173e:	09 f0       	breq	.+2      	; 0x1742 <vfprintf+0x118>
    1740:	59 c0       	rjmp	.+178    	; 0x17f4 <vfprintf+0x1ca>
    1742:	21 c0       	rjmp	.+66     	; 0x1786 <vfprintf+0x15c>
    1744:	f8 01       	movw	r30, r16
    1746:	80 81       	ld	r24, Z
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	0e 5f       	subi	r16, 0xFE	; 254
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	88 24       	eor	r8, r8
    1750:	83 94       	inc	r8
    1752:	91 2c       	mov	r9, r1
    1754:	53 01       	movw	r10, r6
    1756:	13 c0       	rjmp	.+38     	; 0x177e <vfprintf+0x154>
    1758:	28 01       	movw	r4, r16
    175a:	f2 e0       	ldi	r31, 0x02	; 2
    175c:	4f 0e       	add	r4, r31
    175e:	51 1c       	adc	r5, r1
    1760:	f8 01       	movw	r30, r16
    1762:	a0 80       	ld	r10, Z
    1764:	b1 80       	ldd	r11, Z+1	; 0x01
    1766:	36 fe       	sbrs	r3, 6
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <vfprintf+0x146>
    176a:	69 2d       	mov	r22, r9
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x14a>
    1770:	6f ef       	ldi	r22, 0xFF	; 255
    1772:	7f ef       	ldi	r23, 0xFF	; 255
    1774:	c5 01       	movw	r24, r10
    1776:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <strnlen>
    177a:	4c 01       	movw	r8, r24
    177c:	82 01       	movw	r16, r4
    177e:	f3 2d       	mov	r31, r3
    1780:	ff 77       	andi	r31, 0x7F	; 127
    1782:	3f 2e       	mov	r3, r31
    1784:	16 c0       	rjmp	.+44     	; 0x17b2 <vfprintf+0x188>
    1786:	28 01       	movw	r4, r16
    1788:	22 e0       	ldi	r18, 0x02	; 2
    178a:	42 0e       	add	r4, r18
    178c:	51 1c       	adc	r5, r1
    178e:	f8 01       	movw	r30, r16
    1790:	a0 80       	ld	r10, Z
    1792:	b1 80       	ldd	r11, Z+1	; 0x01
    1794:	36 fe       	sbrs	r3, 6
    1796:	03 c0       	rjmp	.+6      	; 0x179e <vfprintf+0x174>
    1798:	69 2d       	mov	r22, r9
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x178>
    179e:	6f ef       	ldi	r22, 0xFF	; 255
    17a0:	7f ef       	ldi	r23, 0xFF	; 255
    17a2:	c5 01       	movw	r24, r10
    17a4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <strnlen_P>
    17a8:	4c 01       	movw	r8, r24
    17aa:	f3 2d       	mov	r31, r3
    17ac:	f0 68       	ori	r31, 0x80	; 128
    17ae:	3f 2e       	mov	r3, r31
    17b0:	82 01       	movw	r16, r4
    17b2:	33 fc       	sbrc	r3, 3
    17b4:	1b c0       	rjmp	.+54     	; 0x17ec <vfprintf+0x1c2>
    17b6:	82 2d       	mov	r24, r2
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	88 16       	cp	r8, r24
    17bc:	99 06       	cpc	r9, r25
    17be:	b0 f4       	brcc	.+44     	; 0x17ec <vfprintf+0x1c2>
    17c0:	b6 01       	movw	r22, r12
    17c2:	80 e2       	ldi	r24, 0x20	; 32
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    17ca:	2a 94       	dec	r2
    17cc:	f4 cf       	rjmp	.-24     	; 0x17b6 <vfprintf+0x18c>
    17ce:	f5 01       	movw	r30, r10
    17d0:	37 fc       	sbrc	r3, 7
    17d2:	85 91       	lpm	r24, Z+
    17d4:	37 fe       	sbrs	r3, 7
    17d6:	81 91       	ld	r24, Z+
    17d8:	5f 01       	movw	r10, r30
    17da:	b6 01       	movw	r22, r12
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    17e2:	21 10       	cpse	r2, r1
    17e4:	2a 94       	dec	r2
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	82 1a       	sub	r8, r18
    17ea:	91 08       	sbc	r9, r1
    17ec:	81 14       	cp	r8, r1
    17ee:	91 04       	cpc	r9, r1
    17f0:	71 f7       	brne	.-36     	; 0x17ce <vfprintf+0x1a4>
    17f2:	e8 c0       	rjmp	.+464    	; 0x19c4 <vfprintf+0x39a>
    17f4:	84 36       	cpi	r24, 0x64	; 100
    17f6:	11 f0       	breq	.+4      	; 0x17fc <vfprintf+0x1d2>
    17f8:	89 36       	cpi	r24, 0x69	; 105
    17fa:	41 f5       	brne	.+80     	; 0x184c <vfprintf+0x222>
    17fc:	f8 01       	movw	r30, r16
    17fe:	37 fe       	sbrs	r3, 7
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <vfprintf+0x1e6>
    1802:	60 81       	ld	r22, Z
    1804:	71 81       	ldd	r23, Z+1	; 0x01
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	0c 5f       	subi	r16, 0xFC	; 252
    180c:	1f 4f       	sbci	r17, 0xFF	; 255
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <vfprintf+0x1f6>
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	07 2e       	mov	r0, r23
    1816:	00 0c       	add	r0, r0
    1818:	88 0b       	sbc	r24, r24
    181a:	99 0b       	sbc	r25, r25
    181c:	0e 5f       	subi	r16, 0xFE	; 254
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	f3 2d       	mov	r31, r3
    1822:	ff 76       	andi	r31, 0x6F	; 111
    1824:	3f 2e       	mov	r3, r31
    1826:	97 ff       	sbrs	r25, 7
    1828:	09 c0       	rjmp	.+18     	; 0x183c <vfprintf+0x212>
    182a:	90 95       	com	r25
    182c:	80 95       	com	r24
    182e:	70 95       	com	r23
    1830:	61 95       	neg	r22
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	8f 4f       	sbci	r24, 0xFF	; 255
    1836:	9f 4f       	sbci	r25, 0xFF	; 255
    1838:	f0 68       	ori	r31, 0x80	; 128
    183a:	3f 2e       	mov	r3, r31
    183c:	2a e0       	ldi	r18, 0x0A	; 10
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	a3 01       	movw	r20, r6
    1842:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__ultoa_invert>
    1846:	88 2e       	mov	r8, r24
    1848:	86 18       	sub	r8, r6
    184a:	45 c0       	rjmp	.+138    	; 0x18d6 <vfprintf+0x2ac>
    184c:	85 37       	cpi	r24, 0x75	; 117
    184e:	31 f4       	brne	.+12     	; 0x185c <vfprintf+0x232>
    1850:	23 2d       	mov	r18, r3
    1852:	2f 7e       	andi	r18, 0xEF	; 239
    1854:	b2 2e       	mov	r11, r18
    1856:	2a e0       	ldi	r18, 0x0A	; 10
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	25 c0       	rjmp	.+74     	; 0x18a6 <vfprintf+0x27c>
    185c:	93 2d       	mov	r25, r3
    185e:	99 7f       	andi	r25, 0xF9	; 249
    1860:	b9 2e       	mov	r11, r25
    1862:	8f 36       	cpi	r24, 0x6F	; 111
    1864:	c1 f0       	breq	.+48     	; 0x1896 <vfprintf+0x26c>
    1866:	18 f4       	brcc	.+6      	; 0x186e <vfprintf+0x244>
    1868:	88 35       	cpi	r24, 0x58	; 88
    186a:	79 f0       	breq	.+30     	; 0x188a <vfprintf+0x260>
    186c:	b5 c0       	rjmp	.+362    	; 0x19d8 <vfprintf+0x3ae>
    186e:	80 37       	cpi	r24, 0x70	; 112
    1870:	19 f0       	breq	.+6      	; 0x1878 <vfprintf+0x24e>
    1872:	88 37       	cpi	r24, 0x78	; 120
    1874:	21 f0       	breq	.+8      	; 0x187e <vfprintf+0x254>
    1876:	b0 c0       	rjmp	.+352    	; 0x19d8 <vfprintf+0x3ae>
    1878:	e9 2f       	mov	r30, r25
    187a:	e0 61       	ori	r30, 0x10	; 16
    187c:	be 2e       	mov	r11, r30
    187e:	b4 fe       	sbrs	r11, 4
    1880:	0d c0       	rjmp	.+26     	; 0x189c <vfprintf+0x272>
    1882:	fb 2d       	mov	r31, r11
    1884:	f4 60       	ori	r31, 0x04	; 4
    1886:	bf 2e       	mov	r11, r31
    1888:	09 c0       	rjmp	.+18     	; 0x189c <vfprintf+0x272>
    188a:	34 fe       	sbrs	r3, 4
    188c:	0a c0       	rjmp	.+20     	; 0x18a2 <vfprintf+0x278>
    188e:	29 2f       	mov	r18, r25
    1890:	26 60       	ori	r18, 0x06	; 6
    1892:	b2 2e       	mov	r11, r18
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <vfprintf+0x278>
    1896:	28 e0       	ldi	r18, 0x08	; 8
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <vfprintf+0x27c>
    189c:	20 e1       	ldi	r18, 0x10	; 16
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <vfprintf+0x27c>
    18a2:	20 e1       	ldi	r18, 0x10	; 16
    18a4:	32 e0       	ldi	r19, 0x02	; 2
    18a6:	f8 01       	movw	r30, r16
    18a8:	b7 fe       	sbrs	r11, 7
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <vfprintf+0x290>
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	0c 5f       	subi	r16, 0xFC	; 252
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	06 c0       	rjmp	.+12     	; 0x18c6 <vfprintf+0x29c>
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 5f       	subi	r16, 0xFE	; 254
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	a3 01       	movw	r20, r6
    18c8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__ultoa_invert>
    18cc:	88 2e       	mov	r8, r24
    18ce:	86 18       	sub	r8, r6
    18d0:	fb 2d       	mov	r31, r11
    18d2:	ff 77       	andi	r31, 0x7F	; 127
    18d4:	3f 2e       	mov	r3, r31
    18d6:	36 fe       	sbrs	r3, 6
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <vfprintf+0x2ca>
    18da:	23 2d       	mov	r18, r3
    18dc:	2e 7f       	andi	r18, 0xFE	; 254
    18de:	a2 2e       	mov	r10, r18
    18e0:	89 14       	cp	r8, r9
    18e2:	58 f4       	brcc	.+22     	; 0x18fa <vfprintf+0x2d0>
    18e4:	34 fe       	sbrs	r3, 4
    18e6:	0b c0       	rjmp	.+22     	; 0x18fe <vfprintf+0x2d4>
    18e8:	32 fc       	sbrc	r3, 2
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <vfprintf+0x2d4>
    18ec:	83 2d       	mov	r24, r3
    18ee:	8e 7e       	andi	r24, 0xEE	; 238
    18f0:	a8 2e       	mov	r10, r24
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <vfprintf+0x2d4>
    18f4:	b8 2c       	mov	r11, r8
    18f6:	a3 2c       	mov	r10, r3
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <vfprintf+0x2d6>
    18fa:	b8 2c       	mov	r11, r8
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <vfprintf+0x2d6>
    18fe:	b9 2c       	mov	r11, r9
    1900:	a4 fe       	sbrs	r10, 4
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <vfprintf+0x2f8>
    1904:	fe 01       	movw	r30, r28
    1906:	e8 0d       	add	r30, r8
    1908:	f1 1d       	adc	r31, r1
    190a:	80 81       	ld	r24, Z
    190c:	80 33       	cpi	r24, 0x30	; 48
    190e:	21 f4       	brne	.+8      	; 0x1918 <vfprintf+0x2ee>
    1910:	9a 2d       	mov	r25, r10
    1912:	99 7e       	andi	r25, 0xE9	; 233
    1914:	a9 2e       	mov	r10, r25
    1916:	09 c0       	rjmp	.+18     	; 0x192a <vfprintf+0x300>
    1918:	a2 fe       	sbrs	r10, 2
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <vfprintf+0x2fe>
    191c:	b3 94       	inc	r11
    191e:	b3 94       	inc	r11
    1920:	04 c0       	rjmp	.+8      	; 0x192a <vfprintf+0x300>
    1922:	8a 2d       	mov	r24, r10
    1924:	86 78       	andi	r24, 0x86	; 134
    1926:	09 f0       	breq	.+2      	; 0x192a <vfprintf+0x300>
    1928:	b3 94       	inc	r11
    192a:	a3 fc       	sbrc	r10, 3
    192c:	11 c0       	rjmp	.+34     	; 0x1950 <vfprintf+0x326>
    192e:	a0 fe       	sbrs	r10, 0
    1930:	06 c0       	rjmp	.+12     	; 0x193e <vfprintf+0x314>
    1932:	b2 14       	cp	r11, r2
    1934:	88 f4       	brcc	.+34     	; 0x1958 <vfprintf+0x32e>
    1936:	28 0c       	add	r2, r8
    1938:	92 2c       	mov	r9, r2
    193a:	9b 18       	sub	r9, r11
    193c:	0e c0       	rjmp	.+28     	; 0x195a <vfprintf+0x330>
    193e:	b2 14       	cp	r11, r2
    1940:	60 f4       	brcc	.+24     	; 0x195a <vfprintf+0x330>
    1942:	b6 01       	movw	r22, r12
    1944:	80 e2       	ldi	r24, 0x20	; 32
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    194c:	b3 94       	inc	r11
    194e:	f7 cf       	rjmp	.-18     	; 0x193e <vfprintf+0x314>
    1950:	b2 14       	cp	r11, r2
    1952:	18 f4       	brcc	.+6      	; 0x195a <vfprintf+0x330>
    1954:	2b 18       	sub	r2, r11
    1956:	02 c0       	rjmp	.+4      	; 0x195c <vfprintf+0x332>
    1958:	98 2c       	mov	r9, r8
    195a:	21 2c       	mov	r2, r1
    195c:	a4 fe       	sbrs	r10, 4
    195e:	10 c0       	rjmp	.+32     	; 0x1980 <vfprintf+0x356>
    1960:	b6 01       	movw	r22, r12
    1962:	80 e3       	ldi	r24, 0x30	; 48
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    196a:	a2 fe       	sbrs	r10, 2
    196c:	17 c0       	rjmp	.+46     	; 0x199c <vfprintf+0x372>
    196e:	a1 fc       	sbrc	r10, 1
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <vfprintf+0x34e>
    1972:	88 e7       	ldi	r24, 0x78	; 120
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 c0       	rjmp	.+4      	; 0x197c <vfprintf+0x352>
    1978:	88 e5       	ldi	r24, 0x58	; 88
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	b6 01       	movw	r22, r12
    197e:	0c c0       	rjmp	.+24     	; 0x1998 <vfprintf+0x36e>
    1980:	8a 2d       	mov	r24, r10
    1982:	86 78       	andi	r24, 0x86	; 134
    1984:	59 f0       	breq	.+22     	; 0x199c <vfprintf+0x372>
    1986:	a1 fe       	sbrs	r10, 1
    1988:	02 c0       	rjmp	.+4      	; 0x198e <vfprintf+0x364>
    198a:	8b e2       	ldi	r24, 0x2B	; 43
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <vfprintf+0x366>
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	a7 fc       	sbrc	r10, 7
    1992:	8d e2       	ldi	r24, 0x2D	; 45
    1994:	b6 01       	movw	r22, r12
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    199c:	89 14       	cp	r8, r9
    199e:	38 f4       	brcc	.+14     	; 0x19ae <vfprintf+0x384>
    19a0:	b6 01       	movw	r22, r12
    19a2:	80 e3       	ldi	r24, 0x30	; 48
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    19aa:	9a 94       	dec	r9
    19ac:	f7 cf       	rjmp	.-18     	; 0x199c <vfprintf+0x372>
    19ae:	8a 94       	dec	r8
    19b0:	f3 01       	movw	r30, r6
    19b2:	e8 0d       	add	r30, r8
    19b4:	f1 1d       	adc	r31, r1
    19b6:	80 81       	ld	r24, Z
    19b8:	b6 01       	movw	r22, r12
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    19c0:	81 10       	cpse	r8, r1
    19c2:	f5 cf       	rjmp	.-22     	; 0x19ae <vfprintf+0x384>
    19c4:	22 20       	and	r2, r2
    19c6:	09 f4       	brne	.+2      	; 0x19ca <vfprintf+0x3a0>
    19c8:	42 ce       	rjmp	.-892    	; 0x164e <vfprintf+0x24>
    19ca:	b6 01       	movw	r22, r12
    19cc:	80 e2       	ldi	r24, 0x20	; 32
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    19d4:	2a 94       	dec	r2
    19d6:	f6 cf       	rjmp	.-20     	; 0x19c4 <vfprintf+0x39a>
    19d8:	f6 01       	movw	r30, r12
    19da:	86 81       	ldd	r24, Z+6	; 0x06
    19dc:	97 81       	ldd	r25, Z+7	; 0x07
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <vfprintf+0x3ba>
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	9f ef       	ldi	r25, 0xFF	; 255
    19e4:	2b 96       	adiw	r28, 0x0b	; 11
    19e6:	e2 e1       	ldi	r30, 0x12	; 18
    19e8:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__epilogue_restores__>

000019ec <calloc>:
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	86 9f       	mul	r24, r22
    19f6:	80 01       	movw	r16, r0
    19f8:	87 9f       	mul	r24, r23
    19fa:	10 0d       	add	r17, r0
    19fc:	96 9f       	mul	r25, r22
    19fe:	10 0d       	add	r17, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	c8 01       	movw	r24, r16
    1a04:	0e 94 30 09 	call	0x1260	; 0x1260 <malloc>
    1a08:	ec 01       	movw	r28, r24
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <calloc+0x2c>
    1a0e:	a8 01       	movw	r20, r16
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <memset>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <strnlen_P>:
    1a24:	fc 01       	movw	r30, r24
    1a26:	05 90       	lpm	r0, Z+
    1a28:	61 50       	subi	r22, 0x01	; 1
    1a2a:	70 40       	sbci	r23, 0x00	; 0
    1a2c:	01 10       	cpse	r0, r1
    1a2e:	d8 f7       	brcc	.-10     	; 0x1a26 <strnlen_P+0x2>
    1a30:	80 95       	com	r24
    1a32:	90 95       	com	r25
    1a34:	8e 0f       	add	r24, r30
    1a36:	9f 1f       	adc	r25, r31
    1a38:	08 95       	ret

00001a3a <memset>:
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <memset+0x6>
    1a3e:	6d 93       	st	X+, r22
    1a40:	41 50       	subi	r20, 0x01	; 1
    1a42:	50 40       	sbci	r21, 0x00	; 0
    1a44:	e0 f7       	brcc	.-8      	; 0x1a3e <memset+0x4>
    1a46:	08 95       	ret

00001a48 <strnlen>:
    1a48:	fc 01       	movw	r30, r24
    1a4a:	61 50       	subi	r22, 0x01	; 1
    1a4c:	70 40       	sbci	r23, 0x00	; 0
    1a4e:	01 90       	ld	r0, Z+
    1a50:	01 10       	cpse	r0, r1
    1a52:	d8 f7       	brcc	.-10     	; 0x1a4a <strnlen+0x2>
    1a54:	80 95       	com	r24
    1a56:	90 95       	com	r25
    1a58:	8e 0f       	add	r24, r30
    1a5a:	9f 1f       	adc	r25, r31
    1a5c:	08 95       	ret

00001a5e <fputc>:
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	fb 01       	movw	r30, r22
    1a68:	23 81       	ldd	r18, Z+3	; 0x03
    1a6a:	21 fd       	sbrc	r18, 1
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <fputc+0x16>
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	2c c0       	rjmp	.+88     	; 0x1acc <fputc+0x6e>
    1a74:	22 ff       	sbrs	r18, 2
    1a76:	16 c0       	rjmp	.+44     	; 0x1aa4 <fputc+0x46>
    1a78:	46 81       	ldd	r20, Z+6	; 0x06
    1a7a:	57 81       	ldd	r21, Z+7	; 0x07
    1a7c:	24 81       	ldd	r18, Z+4	; 0x04
    1a7e:	35 81       	ldd	r19, Z+5	; 0x05
    1a80:	42 17       	cp	r20, r18
    1a82:	53 07       	cpc	r21, r19
    1a84:	44 f4       	brge	.+16     	; 0x1a96 <fputc+0x38>
    1a86:	a0 81       	ld	r26, Z
    1a88:	b1 81       	ldd	r27, Z+1	; 0x01
    1a8a:	9d 01       	movw	r18, r26
    1a8c:	2f 5f       	subi	r18, 0xFF	; 255
    1a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a90:	31 83       	std	Z+1, r19	; 0x01
    1a92:	20 83       	st	Z, r18
    1a94:	8c 93       	st	X, r24
    1a96:	26 81       	ldd	r18, Z+6	; 0x06
    1a98:	37 81       	ldd	r19, Z+7	; 0x07
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	37 83       	std	Z+7, r19	; 0x07
    1aa0:	26 83       	std	Z+6, r18	; 0x06
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <fputc+0x6e>
    1aa4:	8b 01       	movw	r16, r22
    1aa6:	ec 01       	movw	r28, r24
    1aa8:	fb 01       	movw	r30, r22
    1aaa:	00 84       	ldd	r0, Z+8	; 0x08
    1aac:	f1 85       	ldd	r31, Z+9	; 0x09
    1aae:	e0 2d       	mov	r30, r0
    1ab0:	09 95       	icall
    1ab2:	89 2b       	or	r24, r25
    1ab4:	e1 f6       	brne	.-72     	; 0x1a6e <fputc+0x10>
    1ab6:	d8 01       	movw	r26, r16
    1ab8:	16 96       	adiw	r26, 0x06	; 6
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	17 97       	sbiw	r26, 0x07	; 7
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	17 96       	adiw	r26, 0x07	; 7
    1ac4:	9c 93       	st	X, r25
    1ac6:	8e 93       	st	-X, r24
    1ac8:	16 97       	sbiw	r26, 0x06	; 6
    1aca:	ce 01       	movw	r24, r28
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <__ultoa_invert>:
    1ad6:	fa 01       	movw	r30, r20
    1ad8:	aa 27       	eor	r26, r26
    1ada:	28 30       	cpi	r18, 0x08	; 8
    1adc:	51 f1       	breq	.+84     	; 0x1b32 <__ultoa_invert+0x5c>
    1ade:	20 31       	cpi	r18, 0x10	; 16
    1ae0:	81 f1       	breq	.+96     	; 0x1b42 <__ultoa_invert+0x6c>
    1ae2:	e8 94       	clt
    1ae4:	6f 93       	push	r22
    1ae6:	6e 7f       	andi	r22, 0xFE	; 254
    1ae8:	6e 5f       	subi	r22, 0xFE	; 254
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	8f 4f       	sbci	r24, 0xFF	; 255
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	af 4f       	sbci	r26, 0xFF	; 255
    1af2:	b1 e0       	ldi	r27, 0x01	; 1
    1af4:	3e d0       	rcall	.+124    	; 0x1b72 <__ultoa_invert+0x9c>
    1af6:	b4 e0       	ldi	r27, 0x04	; 4
    1af8:	3c d0       	rcall	.+120    	; 0x1b72 <__ultoa_invert+0x9c>
    1afa:	67 0f       	add	r22, r23
    1afc:	78 1f       	adc	r23, r24
    1afe:	89 1f       	adc	r24, r25
    1b00:	9a 1f       	adc	r25, r26
    1b02:	a1 1d       	adc	r26, r1
    1b04:	68 0f       	add	r22, r24
    1b06:	79 1f       	adc	r23, r25
    1b08:	8a 1f       	adc	r24, r26
    1b0a:	91 1d       	adc	r25, r1
    1b0c:	a1 1d       	adc	r26, r1
    1b0e:	6a 0f       	add	r22, r26
    1b10:	71 1d       	adc	r23, r1
    1b12:	81 1d       	adc	r24, r1
    1b14:	91 1d       	adc	r25, r1
    1b16:	a1 1d       	adc	r26, r1
    1b18:	20 d0       	rcall	.+64     	; 0x1b5a <__ultoa_invert+0x84>
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <__ultoa_invert+0x48>
    1b1c:	68 94       	set
    1b1e:	3f 91       	pop	r19
    1b20:	2a e0       	ldi	r18, 0x0A	; 10
    1b22:	26 9f       	mul	r18, r22
    1b24:	11 24       	eor	r1, r1
    1b26:	30 19       	sub	r19, r0
    1b28:	30 5d       	subi	r19, 0xD0	; 208
    1b2a:	31 93       	st	Z+, r19
    1b2c:	de f6       	brtc	.-74     	; 0x1ae4 <__ultoa_invert+0xe>
    1b2e:	cf 01       	movw	r24, r30
    1b30:	08 95       	ret
    1b32:	46 2f       	mov	r20, r22
    1b34:	47 70       	andi	r20, 0x07	; 7
    1b36:	40 5d       	subi	r20, 0xD0	; 208
    1b38:	41 93       	st	Z+, r20
    1b3a:	b3 e0       	ldi	r27, 0x03	; 3
    1b3c:	0f d0       	rcall	.+30     	; 0x1b5c <__ultoa_invert+0x86>
    1b3e:	c9 f7       	brne	.-14     	; 0x1b32 <__ultoa_invert+0x5c>
    1b40:	f6 cf       	rjmp	.-20     	; 0x1b2e <__ultoa_invert+0x58>
    1b42:	46 2f       	mov	r20, r22
    1b44:	4f 70       	andi	r20, 0x0F	; 15
    1b46:	40 5d       	subi	r20, 0xD0	; 208
    1b48:	4a 33       	cpi	r20, 0x3A	; 58
    1b4a:	18 f0       	brcs	.+6      	; 0x1b52 <__ultoa_invert+0x7c>
    1b4c:	49 5d       	subi	r20, 0xD9	; 217
    1b4e:	31 fd       	sbrc	r19, 1
    1b50:	40 52       	subi	r20, 0x20	; 32
    1b52:	41 93       	st	Z+, r20
    1b54:	02 d0       	rcall	.+4      	; 0x1b5a <__ultoa_invert+0x84>
    1b56:	a9 f7       	brne	.-22     	; 0x1b42 <__ultoa_invert+0x6c>
    1b58:	ea cf       	rjmp	.-44     	; 0x1b2e <__ultoa_invert+0x58>
    1b5a:	b4 e0       	ldi	r27, 0x04	; 4
    1b5c:	a6 95       	lsr	r26
    1b5e:	97 95       	ror	r25
    1b60:	87 95       	ror	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	ba 95       	dec	r27
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__ultoa_invert+0x86>
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	61 05       	cpc	r22, r1
    1b6e:	71 05       	cpc	r23, r1
    1b70:	08 95       	ret
    1b72:	9b 01       	movw	r18, r22
    1b74:	ac 01       	movw	r20, r24
    1b76:	0a 2e       	mov	r0, r26
    1b78:	06 94       	lsr	r0
    1b7a:	57 95       	ror	r21
    1b7c:	47 95       	ror	r20
    1b7e:	37 95       	ror	r19
    1b80:	27 95       	ror	r18
    1b82:	ba 95       	dec	r27
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__ultoa_invert+0xa2>
    1b86:	62 0f       	add	r22, r18
    1b88:	73 1f       	adc	r23, r19
    1b8a:	84 1f       	adc	r24, r20
    1b8c:	95 1f       	adc	r25, r21
    1b8e:	a0 1d       	adc	r26, r0
    1b90:	08 95       	ret

00001b92 <__divmodsi4>:
    1b92:	05 2e       	mov	r0, r21
    1b94:	97 fb       	bst	r25, 7
    1b96:	1e f4       	brtc	.+6      	; 0x1b9e <__divmodsi4+0xc>
    1b98:	00 94       	com	r0
    1b9a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__negsi2>
    1b9e:	57 fd       	sbrc	r21, 7
    1ba0:	07 d0       	rcall	.+14     	; 0x1bb0 <__divmodsi4_neg2>
    1ba2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__udivmodsi4>
    1ba6:	07 fc       	sbrc	r0, 7
    1ba8:	03 d0       	rcall	.+6      	; 0x1bb0 <__divmodsi4_neg2>
    1baa:	4e f4       	brtc	.+18     	; 0x1bbe <__divmodsi4_exit>
    1bac:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__negsi2>

00001bb0 <__divmodsi4_neg2>:
    1bb0:	50 95       	com	r21
    1bb2:	40 95       	com	r20
    1bb4:	30 95       	com	r19
    1bb6:	21 95       	neg	r18
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	4f 4f       	sbci	r20, 0xFF	; 255
    1bbc:	5f 4f       	sbci	r21, 0xFF	; 255

00001bbe <__divmodsi4_exit>:
    1bbe:	08 95       	ret

00001bc0 <__negsi2>:
    1bc0:	90 95       	com	r25
    1bc2:	80 95       	com	r24
    1bc4:	70 95       	com	r23
    1bc6:	61 95       	neg	r22
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	8f 4f       	sbci	r24, 0xFF	; 255
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	08 95       	ret

00001bd0 <__muluhisi3>:
    1bd0:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__umulhisi3>
    1bd4:	a5 9f       	mul	r26, r21
    1bd6:	90 0d       	add	r25, r0
    1bd8:	b4 9f       	mul	r27, r20
    1bda:	90 0d       	add	r25, r0
    1bdc:	a4 9f       	mul	r26, r20
    1bde:	80 0d       	add	r24, r0
    1be0:	91 1d       	adc	r25, r1
    1be2:	11 24       	eor	r1, r1
    1be4:	08 95       	ret

00001be6 <__mulshisi3>:
    1be6:	b7 ff       	sbrs	r27, 7
    1be8:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__muluhisi3>

00001bec <__mulohisi3>:
    1bec:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__muluhisi3>
    1bf0:	82 1b       	sub	r24, r18
    1bf2:	93 0b       	sbc	r25, r19
    1bf4:	08 95       	ret

00001bf6 <__prologue_saves__>:
    1bf6:	2f 92       	push	r2
    1bf8:	3f 92       	push	r3
    1bfa:	4f 92       	push	r4
    1bfc:	5f 92       	push	r5
    1bfe:	6f 92       	push	r6
    1c00:	7f 92       	push	r7
    1c02:	8f 92       	push	r8
    1c04:	9f 92       	push	r9
    1c06:	af 92       	push	r10
    1c08:	bf 92       	push	r11
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	ca 1b       	sub	r28, r26
    1c20:	db 0b       	sbc	r29, r27
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	09 94       	ijmp

00001c2e <__epilogue_restores__>:
    1c2e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c30:	39 88       	ldd	r3, Y+17	; 0x11
    1c32:	48 88       	ldd	r4, Y+16	; 0x10
    1c34:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c36:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c38:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c40:	b9 84       	ldd	r11, Y+9	; 0x09
    1c42:	c8 84       	ldd	r12, Y+8	; 0x08
    1c44:	df 80       	ldd	r13, Y+7	; 0x07
    1c46:	ee 80       	ldd	r14, Y+6	; 0x06
    1c48:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c4c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c4e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c50:	b9 81       	ldd	r27, Y+1	; 0x01
    1c52:	ce 0f       	add	r28, r30
    1c54:	d1 1d       	adc	r29, r1
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	ed 01       	movw	r28, r26
    1c62:	08 95       	ret

00001c64 <__udivmodsi4>:
    1c64:	a1 e2       	ldi	r26, 0x21	; 33
    1c66:	1a 2e       	mov	r1, r26
    1c68:	aa 1b       	sub	r26, r26
    1c6a:	bb 1b       	sub	r27, r27
    1c6c:	fd 01       	movw	r30, r26
    1c6e:	0d c0       	rjmp	.+26     	; 0x1c8a <__udivmodsi4_ep>

00001c70 <__udivmodsi4_loop>:
    1c70:	aa 1f       	adc	r26, r26
    1c72:	bb 1f       	adc	r27, r27
    1c74:	ee 1f       	adc	r30, r30
    1c76:	ff 1f       	adc	r31, r31
    1c78:	a2 17       	cp	r26, r18
    1c7a:	b3 07       	cpc	r27, r19
    1c7c:	e4 07       	cpc	r30, r20
    1c7e:	f5 07       	cpc	r31, r21
    1c80:	20 f0       	brcs	.+8      	; 0x1c8a <__udivmodsi4_ep>
    1c82:	a2 1b       	sub	r26, r18
    1c84:	b3 0b       	sbc	r27, r19
    1c86:	e4 0b       	sbc	r30, r20
    1c88:	f5 0b       	sbc	r31, r21

00001c8a <__udivmodsi4_ep>:
    1c8a:	66 1f       	adc	r22, r22
    1c8c:	77 1f       	adc	r23, r23
    1c8e:	88 1f       	adc	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	1a 94       	dec	r1
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <__udivmodsi4_loop>
    1c96:	60 95       	com	r22
    1c98:	70 95       	com	r23
    1c9a:	80 95       	com	r24
    1c9c:	90 95       	com	r25
    1c9e:	9b 01       	movw	r18, r22
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	bd 01       	movw	r22, r26
    1ca4:	cf 01       	movw	r24, r30
    1ca6:	08 95       	ret

00001ca8 <__umulhisi3>:
    1ca8:	a2 9f       	mul	r26, r18
    1caa:	b0 01       	movw	r22, r0
    1cac:	b3 9f       	mul	r27, r19
    1cae:	c0 01       	movw	r24, r0
    1cb0:	a3 9f       	mul	r26, r19
    1cb2:	70 0d       	add	r23, r0
    1cb4:	81 1d       	adc	r24, r1
    1cb6:	11 24       	eor	r1, r1
    1cb8:	91 1d       	adc	r25, r1
    1cba:	b2 9f       	mul	r27, r18
    1cbc:	70 0d       	add	r23, r0
    1cbe:	81 1d       	adc	r24, r1
    1cc0:	11 24       	eor	r1, r1
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	08 95       	ret

00001cc6 <_exit>:
    1cc6:	f8 94       	cli

00001cc8 <__stop_program>:
    1cc8:	ff cf       	rjmp	.-2      	; 0x1cc8 <__stop_program>
