
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  00001f26  00001fba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800292  00800292  0000214c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000358c  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016e9  00000000  00000000  00005a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000176c  00000000  00000000  00007161  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  000088d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009de  00000000  00000000  00008fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000154d  00000000  00000000  0000997e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000aecb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <addChild+0x2a>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e6 e2       	ldi	r30, 0x26	; 38
     3aa:	ff e1       	ldi	r31, 0x1F	; 31
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a2 39       	cpi	r26, 0x92	; 146
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	a2 e9       	ldi	r26, 0x92	; 146
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	aa 3b       	cpi	r26, 0xBA	; 186
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1146>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1146>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "pwm.h"
#include "music.h"
#include "CAN.h"
volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	//cli();
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <__data_end>
	
	
	
	//sei();
	
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:


int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
	setupInit();
     41a:	0e 94 5e 07 	call	0xebc	; 0xebc <setupInit>
	
	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     41e:	87 e5       	ldi	r24, 0x57	; 87
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	9a 87       	std	Y+10, r25	; 0x0a
     424:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     42a:	8d e0       	ldi	r24, 0x0D	; 13
     42c:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     42e:	86 e1       	ldi	r24, 0x16	; 22
     430:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     432:	81 e2       	ldi	r24, 0x21	; 33
     434:	8b 83       	std	Y+3, r24	; 0x03
	
	printf("Starting program\n\n\n\n\n\n\n\n\n\n\r");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
	printf("---------------------------------------\n\r");
     442:	88 e2       	ldi	r24, 0x28	; 40
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	97 e0       	ldi	r25, 0x07	; 7
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x4e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x58>
     45e:	00 00       	nop
	_delay_ms(500);
	CAN_transmit_message(&message);
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <CAN_transmit_message>
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
				
		_delay_ms(500);	

		CAN_transmit_message(&message);
		_delay_ms(500);	
		printf("\n\r-------------------------------------------\n\r");
     470:	02 e2       	ldi	r16, 0x22	; 34
     472:	11 e0       	ldi	r17, 0x01	; 1
	//pwm_init();
	//music_playLisaGikk();                 
	while (1) {
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     474:	0e 94 c0 04 	call	0x980	; 0x980 <sleep_now>
		if (!strcmp(currentMenu.currentMenuItem->children[currentMenu.childIndex]->name, "Rick")) {
		}
		if (flag) {
     478:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     47c:	88 23       	and	r24, r24
     47e:	71 f0       	breq	.+28     	; 0x49c <main+0x96>
			//printf("Message received");
			CAN_receiveMessage(&received_message);
     480:	81 ea       	ldi	r24, 0xA1	; 161
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	0e 94 77 03 	call	0x6ee	; 0x6ee <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	6c e2       	ldi	r22, 0x2C	; 44
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
			flag=0;
     498:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <__data_end>
     49c:	2f ef       	ldi	r18, 0xFF	; 255
     49e:	8f e7       	ldi	r24, 0x7F	; 127
     4a0:	97 e0       	ldi	r25, 0x07	; 7
     4a2:	21 50       	subi	r18, 0x01	; 1
     4a4:	80 40       	sbci	r24, 0x00	; 0
     4a6:	90 40       	sbci	r25, 0x00	; 0
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <main+0x9c>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <main+0xa6>
     4ac:	00 00       	nop
		//test_resetMenu();
		//test_outputControllers(joystick_pos, slider_pos, buttons);
				
		_delay_ms(500);	

		CAN_transmit_message(&message);
     4ae:	ce 01       	movw	r24, r28
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <CAN_transmit_message>
     4b6:	2f ef       	ldi	r18, 0xFF	; 255
     4b8:	8f e7       	ldi	r24, 0x7F	; 127
     4ba:	97 e0       	ldi	r25, 0x07	; 7
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	90 40       	sbci	r25, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <main+0xb6>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0xc0>
     4c6:	00 00       	nop
		_delay_ms(500);	
		printf("\n\r-------------------------------------------\n\r");
     4c8:	1f 93       	push	r17
     4ca:	0f 93       	push	r16
     4cc:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
		
		
		
	}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	cf cf       	rjmp	.-98     	; 0x474 <main+0x6e>

000004d6 <CAN_transmit_message>:
	
	
	
	
}
void CAN_transmit_message(CAN_message_t *message) {
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	8c 01       	movw	r16, r24
	printf("Transmitting message");
     4e6:	82 e5       	ldi	r24, 0x52	; 82
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     4f2:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <buffer_number.2112>
     4f6:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <buffer_number.2112+0x1>
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	63 e0       	ldi	r22, 0x03	; 3
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     504:	28 2f       	mov	r18, r24
     506:	39 2f       	mov	r19, r25
     508:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <buffer_number.2112>
     50c:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <buffer_number.2112+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	21 30       	cpi	r18, 0x01	; 1
     516:	31 05       	cpc	r19, r1
     518:	81 f1       	breq	.+96     	; 0x57a <__stack+0x7b>
     51a:	22 30       	cpi	r18, 0x02	; 2
     51c:	31 05       	cpc	r19, r1
     51e:	09 f4       	brne	.+2      	; 0x522 <__stack+0x23>
     520:	46 c0       	rjmp	.+140    	; 0x5ae <__stack+0xaf>
     522:	23 2b       	or	r18, r19
     524:	09 f0       	breq	.+2      	; 0x528 <__stack+0x29>
     526:	5c c0       	rjmp	.+184    	; 0x5e0 <__stack+0xe1>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     528:	f8 01       	movw	r30, r16
     52a:	40 85       	ldd	r20, Z+8	; 0x08
     52c:	51 85       	ldd	r21, Z+9	; 0x09
     52e:	42 95       	swap	r20
     530:	44 0f       	add	r20, r20
     532:	40 7e       	andi	r20, 0xE0	; 224
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	62 e3       	ldi	r22, 0x32	; 50
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 ee       	ldi	r24, 0xE0	; 224
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     542:	f8 01       	movw	r30, r16
     544:	60 85       	ldd	r22, Z+8	; 0x08
     546:	71 85       	ldd	r23, Z+9	; 0x09
     548:	76 95       	lsr	r23
     54a:	67 95       	ror	r22
     54c:	76 95       	lsr	r23
     54e:	67 95       	ror	r22
     550:	76 95       	lsr	r23
     552:	67 95       	ror	r22
     554:	81 e3       	ldi	r24, 0x31	; 49
     556:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <CAN_controller_write>
				
				printf("Sending whole id: %i", message->ID );
     55a:	f8 01       	movw	r30, r16
     55c:	80 85       	ldd	r24, Z+8	; 0x08
     55e:	91 85       	ldd	r25, Z+9	; 0x09
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	87 e6       	ldi	r24, 0x67	; 103
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>


				break;
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	33 c0       	rjmp	.+102    	; 0x5e0 <__stack+0xe1>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     57a:	f8 01       	movw	r30, r16
     57c:	40 85       	ldd	r20, Z+8	; 0x08
     57e:	51 85       	ldd	r21, Z+9	; 0x09
     580:	42 95       	swap	r20
     582:	44 0f       	add	r20, r20
     584:	40 7e       	andi	r20, 0xE0	; 224
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	62 e4       	ldi	r22, 0x42	; 66
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 ee       	ldi	r24, 0xE0	; 224
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     594:	f8 01       	movw	r30, r16
     596:	60 85       	ldd	r22, Z+8	; 0x08
     598:	71 85       	ldd	r23, Z+9	; 0x09
     59a:	76 95       	lsr	r23
     59c:	67 95       	ror	r22
     59e:	76 95       	lsr	r23
     5a0:	67 95       	ror	r22
     5a2:	76 95       	lsr	r23
     5a4:	67 95       	ror	r22
     5a6:	81 e4       	ldi	r24, 0x41	; 65
     5a8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <CAN_controller_write>
				
				break;
     5ac:	19 c0       	rjmp	.+50     	; 0x5e0 <__stack+0xe1>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     5ae:	f8 01       	movw	r30, r16
     5b0:	40 85       	ldd	r20, Z+8	; 0x08
     5b2:	51 85       	ldd	r21, Z+9	; 0x09
     5b4:	42 95       	swap	r20
     5b6:	44 0f       	add	r20, r20
     5b8:	40 7e       	andi	r20, 0xE0	; 224
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	62 e5       	ldi	r22, 0x52	; 82
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 ee       	ldi	r24, 0xE0	; 224
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     5c8:	f8 01       	movw	r30, r16
     5ca:	60 85       	ldd	r22, Z+8	; 0x08
     5cc:	71 85       	ldd	r23, Z+9	; 0x09
     5ce:	76 95       	lsr	r23
     5d0:	67 95       	ror	r22
     5d2:	76 95       	lsr	r23
     5d4:	67 95       	ror	r22
     5d6:	76 95       	lsr	r23
     5d8:	67 95       	ror	r22
     5da:	81 e5       	ldi	r24, 0x51	; 81
     5dc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     5e0:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <buffer_number.2112>
     5e4:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <buffer_number.2112+0x1>
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	91 05       	cpc	r25, r1
     5ec:	e9 f0       	breq	.+58     	; 0x628 <__stack+0x129>
     5ee:	82 30       	cpi	r24, 0x02	; 2
     5f0:	91 05       	cpc	r25, r1
     5f2:	21 f1       	breq	.+72     	; 0x63c <__stack+0x13d>
     5f4:	89 2b       	or	r24, r25
     5f6:	59 f5       	brne	.+86     	; 0x64e <__stack+0x14f>
			case 0:
				printf("\n\rtransmitting data length: %i\n\r", message->data_length);
     5f8:	f8 01       	movw	r30, r16
     5fa:	82 85       	ldd	r24, Z+10	; 0x0a
     5fc:	1f 92       	push	r1
     5fe:	8f 93       	push	r24
     600:	8c e7       	ldi	r24, 0x7C	; 124
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     60c:	f8 01       	movw	r30, r16
     60e:	42 85       	ldd	r20, Z+10	; 0x0a
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	65 e3       	ldi	r22, 0x35	; 53
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	8f e0       	ldi	r24, 0x0F	; 15
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
				break;
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	13 c0       	rjmp	.+38     	; 0x64e <__stack+0x14f>
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     628:	f8 01       	movw	r30, r16
     62a:	42 85       	ldd	r20, Z+10	; 0x0a
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	65 e4       	ldi	r22, 0x45	; 69
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	8f e0       	ldi	r24, 0x0F	; 15
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
				break;
     63a:	09 c0       	rjmp	.+18     	; 0x64e <__stack+0x14f>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     63c:	f8 01       	movw	r30, r16
     63e:	42 85       	ldd	r20, Z+10	; 0x0a
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	65 e5       	ldi	r22, 0x55	; 85
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	8f e0       	ldi	r24, 0x0F	; 15
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     64e:	f8 01       	movw	r30, r16
     650:	82 85       	ldd	r24, Z+10	; 0x0a
     652:	88 23       	and	r24, r24
     654:	09 f4       	brne	.+2      	; 0x658 <__stack+0x159>
     656:	3f c0       	rjmp	.+126    	; 0x6d6 <__stack+0x1d7>
     658:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     65a:	0f 2e       	mov	r0, r31
     65c:	fd e9       	ldi	r31, 0x9D	; 157
     65e:	cf 2e       	mov	r12, r31
     660:	f1 e0       	ldi	r31, 0x01	; 1
     662:	df 2e       	mov	r13, r31
     664:	f0 2d       	mov	r31, r0
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
		switch(buffer_number) {
     666:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <buffer_number.2112>
     66a:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <buffer_number.2112+0x1>
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	91 05       	cpc	r25, r1
     672:	d9 f0       	breq	.+54     	; 0x6aa <__stack+0x1ab>
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	91 05       	cpc	r25, r1
     678:	09 f1       	breq	.+66     	; 0x6bc <__stack+0x1bd>
     67a:	89 2b       	or	r24, r25
     67c:	39 f5       	brne	.+78     	; 0x6cc <__stack+0x1cd>
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     67e:	78 01       	movw	r14, r16
     680:	ec 0e       	add	r14, r28
     682:	f1 1c       	adc	r15, r1
     684:	f7 01       	movw	r30, r14
     686:	80 81       	ld	r24, Z
     688:	1f 92       	push	r1
     68a:	8f 93       	push	r24
     68c:	df 92       	push	r13
     68e:	cf 92       	push	r12
     690:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     694:	f7 01       	movw	r30, r14
     696:	60 81       	ld	r22, Z
     698:	86 e3       	ldi	r24, 0x36	; 54
     69a:	8c 0f       	add	r24, r28
     69c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <CAN_controller_write>
				break;
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	11 c0       	rjmp	.+34     	; 0x6cc <__stack+0x1cd>
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     6aa:	f8 01       	movw	r30, r16
     6ac:	ec 0f       	add	r30, r28
     6ae:	f1 1d       	adc	r31, r1
     6b0:	60 81       	ld	r22, Z
     6b2:	86 e4       	ldi	r24, 0x46	; 70
     6b4:	8c 0f       	add	r24, r28
     6b6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <CAN_controller_write>
				break;
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <__stack+0x1cd>
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     6bc:	f8 01       	movw	r30, r16
     6be:	ec 0f       	add	r30, r28
     6c0:	f1 1d       	adc	r31, r1
     6c2:	60 81       	ld	r22, Z
     6c4:	86 e5       	ldi	r24, 0x56	; 86
     6c6:	8c 0f       	add	r24, r28
     6c8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <CAN_controller_write>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     6cc:	cf 5f       	subi	r28, 0xFF	; 255
     6ce:	f8 01       	movw	r30, r16
     6d0:	82 85       	ldd	r24, Z+10	; 0x0a
     6d2:	8c 13       	cpse	r24, r28
     6d4:	c8 cf       	rjmp	.-112    	; 0x666 <__stack+0x167>
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     6d6:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <buffer_number.2112>
     6da:	0e 94 a2 04 	call	0x944	; 0x944 <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     6fe:	82 e6       	ldi	r24, 0x62	; 98
     700:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <CAN_controller_read>
     704:	c8 2f       	mov	r28, r24
     706:	81 e6       	ldi	r24, 0x61	; 97
     708:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <CAN_controller_read>
     70c:	c2 95       	swap	r28
     70e:	c6 95       	lsr	r28
     710:	c7 70       	andi	r28, 0x07	; 7
     712:	28 e0       	ldi	r18, 0x08	; 8
     714:	82 9f       	mul	r24, r18
     716:	c0 01       	movw	r24, r0
     718:	11 24       	eor	r1, r1
     71a:	8c 0f       	add	r24, r28
     71c:	91 1d       	adc	r25, r1
     71e:	f7 01       	movw	r30, r14
     720:	91 87       	std	Z+9, r25	; 0x09
     722:	80 87       	std	Z+8, r24	; 0x08
				
				printf("Whole id: %i\n\r", received_message->ID);
     724:	80 85       	ldd	r24, Z+8	; 0x08
     726:	91 85       	ldd	r25, Z+9	; 0x09
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	84 eb       	ldi	r24, 0xB4	; 180
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     738:	85 e6       	ldi	r24, 0x65	; 101
     73a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <CAN_controller_read>
     73e:	8f 70       	andi	r24, 0x0F	; 15
     740:	f7 01       	movw	r30, r14
     742:	82 87       	std	Z+10, r24	; 0x0a
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
     744:	85 e6       	ldi	r24, 0x65	; 101
     746:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <CAN_controller_read>
     74a:	8f 70       	andi	r24, 0x0F	; 15
     74c:	1f 92       	push	r1
     74e:	8f 93       	push	r24
     750:	83 ec       	ldi	r24, 0xC3	; 195
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     75c:	f7 01       	movw	r30, r14
     75e:	82 85       	ldd	r24, Z+10	; 0x0a
     760:	2d b7       	in	r18, 0x3d	; 61
     762:	3e b7       	in	r19, 0x3e	; 62
     764:	28 5f       	subi	r18, 0xF8	; 248
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	3e bf       	out	0x3e, r19	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	2d bf       	out	0x3d, r18	; 61
     772:	88 23       	and	r24, r24
     774:	09 f1       	breq	.+66     	; 0x7b8 <CAN_receiveMessage+0xca>
     776:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
					printf("data: %i\t", received_message->data[i]);
     778:	0f 2e       	mov	r0, r31
     77a:	fa ea       	ldi	r31, 0xAA	; 170
     77c:	cf 2e       	mov	r12, r31
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	df 2e       	mov	r13, r31
     782:	f0 2d       	mov	r31, r0
				
				printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     784:	0c 2f       	mov	r16, r28
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	86 e6       	ldi	r24, 0x66	; 102
     78a:	8c 0f       	add	r24, r28
     78c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <CAN_controller_read>
     790:	f7 01       	movw	r30, r14
     792:	e0 0f       	add	r30, r16
     794:	f1 1f       	adc	r31, r17
     796:	80 83       	st	Z, r24
					printf("data: %i\t", received_message->data[i]);
     798:	80 81       	ld	r24, Z
     79a:	1f 92       	push	r1
     79c:	8f 93       	push	r24
     79e:	df 92       	push	r13
     7a0:	cf 92       	push	r12
     7a2:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     7a6:	cf 5f       	subi	r28, 0xFF	; 255
     7a8:	f7 01       	movw	r30, r14
     7aa:	82 85       	ldd	r24, Z+10	; 0x0a
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	8c 13       	cpse	r24, r28
     7b6:	e6 cf       	rjmp	.-52     	; 0x784 <CAN_receiveMessage+0x96>
	}
	
	
	
	
}
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	08 95       	ret

000007c8 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     7c8:	cf 93       	push	r28
     7ca:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	84 e0       	ldi	r24, 0x04	; 4
     7d0:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
	SPI_masterWrite(addr);
     7da:	8c 2f       	mov	r24, r28
     7dc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     7e0:	0e 94 93 07 	call	0xf26	; 0xf26 <SPI_masterRead>
     7e4:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
	
	return data;
}
     7ee:	8c 2f       	mov	r24, r28
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	d8 2f       	mov	r29, r24
     7fa:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
	SPI_masterWrite(addr);
     80a:	8d 2f       	mov	r24, r29
     80c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
	SPI_masterWrite(data);
     810:	8c 2f       	mov	r24, r28
     812:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	84 e0       	ldi	r24, 0x04	; 4
     81a:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
	
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	d8 2f       	mov	r29, r24
     82c:	16 2f       	mov	r17, r22
     82e:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     838:	85 e0       	ldi	r24, 0x05	; 5
     83a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
		SPI_masterWrite(addr);
     83e:	81 2f       	mov	r24, r17
     840:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
		SPI_masterWrite(mask);
     844:	8d 2f       	mov	r24, r29
     846:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
		SPI_masterWrite(data);
     84a:	8c 2f       	mov	r24, r28
     84c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	84 e0       	ldi	r24, 0x04	; 4
     854:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>

}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	08 95       	ret

00000860 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	84 e0       	ldi	r24, 0x04	; 4
     864:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
	printf("Before spi write");
     868:	8a ed       	ldi	r24, 0xDA	; 218
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	9f 93       	push	r25
     86e:	8f 93       	push	r24
     870:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
	SPI_masterWrite(MCP_RESET);
     874:	80 ec       	ldi	r24, 0xC0	; 192
     876:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
}
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	08 95       	ret

00000888 <CAN_controller_init>:
void CAN_controller_init() {
	
	
	SPI_masterInit();
     888:	0e 94 86 07 	call	0xf0c	; 0xf0c <SPI_masterInit>
	
	//reset with spi command
	CAN_controller_reset();
     88c:	0e 94 30 04 	call	0x860	; 0x860 <CAN_controller_reset>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	9f e5       	ldi	r25, 0x5F	; 95
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <CAN_controller_init+0xc>
     898:	00 c0       	rjmp	.+0      	; 0x89a <CAN_controller_init+0x12>
     89a:	00 00       	nop
	//printf("After spi write\n");
	_delay_ms(20);
	
	//Check CANSTAT register
	
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     89c:	8e e0       	ldi	r24, 0x0E	; 14
     89e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <CAN_controller_read>
     8a2:	ef ef       	ldi	r30, 0xFF	; 255
     8a4:	ff e5       	ldi	r31, 0x5F	; 95
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <CAN_controller_init+0x1e>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <CAN_controller_init+0x24>
     8ac:	00 00       	nop
	_delay_ms(20);
	
	//uint8_t data = 0x44;
	uint8_t mode_bits = (status & MODE_MASK);
     8ae:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     8b0:	80 38       	cpi	r24, 0x80	; 128
     8b2:	61 f0       	breq	.+24     	; 0x8cc <CAN_controller_init+0x44>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     8b4:	1f 92       	push	r1
     8b6:	8f 93       	push	r24
     8b8:	8b ee       	ldi	r24, 0xEB	; 235
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	9f 93       	push	r25
     8be:	8f 93       	push	r24
     8c0:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, MODE_LOOPBACK | (0b1100));
     8cc:	4c e4       	ldi	r20, 0x4C	; 76
     8ce:	6f e0       	ldi	r22, 0x0F	; 15
     8d0:	8e ee       	ldi	r24, 0xEE	; 238
     8d2:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     8d6:	40 e6       	ldi	r20, 0x60	; 96
     8d8:	60 e6       	ldi	r22, 0x60	; 96
     8da:	80 e6       	ldi	r24, 0x60	; 96
     8dc:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	6b e2       	ldi	r22, 0x2B	; 43
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	0e 94 12 04 	call	0x824	; 0x824 <CAN_controller_bitModify>
	
	//set interrupt on atm162
	 GICR |= (1<< INT0); //turn on interrupt 0
     8ea:	8b b7       	in	r24, 0x3b	; 59
     8ec:	80 64       	ori	r24, 0x40	; 64
     8ee:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     8f0:	85 b7       	in	r24, 0x35	; 53
     8f2:	82 60       	ori	r24, 0x02	; 2
     8f4:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     8f6:	85 b7       	in	r24, 0x35	; 53
     8f8:	8e 7f       	andi	r24, 0xFE	; 254
     8fa:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     8fc:	81 b3       	in	r24, 0x11	; 17
     8fe:	84 70       	andi	r24, 0x04	; 4
     900:	81 bb       	out	0x11, r24	; 17
     902:	ff ef       	ldi	r31, 0xFF	; 255
     904:	2f ef       	ldi	r18, 0xFF	; 255
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	f1 50       	subi	r31, 0x01	; 1
     90a:	20 40       	sbci	r18, 0x00	; 0
     90c:	80 40       	sbci	r24, 0x00	; 0
     90e:	e1 f7       	brne	.-8      	; 0x908 <CAN_controller_init+0x80>
     910:	00 c0       	rjmp	.+0      	; 0x912 <CAN_controller_init+0x8a>
     912:	00 c0       	rjmp	.+0      	; 0x914 <CAN_controller_init+0x8c>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
	
	//Check CANSTAT register
	status = CAN_controller_read(MCP_CANSTAT);
     920:	8e e0       	ldi	r24, 0x0E	; 14
     922:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     926:	1f 92       	push	r1
     928:	8f 93       	push	r24
     92a:	8f e1       	ldi	r24, 0x1F	; 31
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>

}
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	08 95       	ret

00000944 <CAN_controller_RTS>:

void CAN_controller_RTS(uint8_t buffer) {
     944:	cf 93       	push	r28
     946:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	84 e0       	ldi	r24, 0x04	; 4
     94c:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
	switch (buffer) {
     950:	c1 30       	cpi	r28, 0x01	; 1
     952:	41 f0       	breq	.+16     	; 0x964 <CAN_controller_RTS+0x20>
     954:	18 f0       	brcs	.+6      	; 0x95c <CAN_controller_RTS+0x18>
     956:	c2 30       	cpi	r28, 0x02	; 2
     958:	49 f0       	breq	.+18     	; 0x96c <CAN_controller_RTS+0x28>
     95a:	0b c0       	rjmp	.+22     	; 0x972 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     95c:	81 e8       	ldi	r24, 0x81	; 129
     95e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
			break;
     962:	07 c0       	rjmp	.+14     	; 0x972 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     964:	82 e8       	ldi	r24, 0x82	; 130
     966:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
			break;
     96a:	03 c0       	rjmp	.+6      	; 0x972 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     96c:	84 e8       	ldi	r24, 0x84	; 132
     96e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	0e 94 98 07 	call	0xf30	; 0xf30 <SPI_setChipSelect>
}
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <sleep_init>:

#include "sleep.h"
#include <avr/sleep.h>
#include <avr/interrupt.h>

void sleep_init() {
     97e:	08 95       	ret

00000980 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     980:	88 b1       	in	r24, 0x08	; 8
     982:	88 68       	ori	r24, 0x88	; 136
     984:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     986:	85 b7       	in	r24, 0x35	; 53
     988:	80 62       	ori	r24, 0x20	; 32
     98a:	85 bf       	out	0x35, r24	; 53
     98c:	88 95       	sleep
     98e:	85 b7       	in	r24, 0x35	; 53
     990:	8f 7d       	andi	r24, 0xDF	; 223
     992:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     994:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     996:	85 b7       	in	r24, 0x35	; 53
     998:	8f 7d       	andi	r24, 0xDF	; 223
     99a:	85 bf       	out	0x35, r24	; 53
     99c:	08 95       	ret

0000099e <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     9a4:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     9ae:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <joystickOffsetY>
     9b2:	08 95       	ret

000009b4 <joystick_readPosition>:
}
void joystick_readPosition() {
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     9c6:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     9ce:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     9d0:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <joystickOffsetX>
     9d4:	c6 17       	cp	r28, r22
     9d6:	80 f4       	brcc	.+32     	; 0x9f8 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	2c 2f       	mov	r18, r28
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	26 1b       	sub	r18, r22
     9e0:	37 0b       	sbc	r19, r23
     9e2:	44 e6       	ldi	r20, 0x64	; 100
     9e4:	42 9f       	mul	r20, r18
     9e6:	c0 01       	movw	r24, r0
     9e8:	43 9f       	mul	r20, r19
     9ea:	90 0d       	add	r25, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     9f2:	60 93 95 02 	sts	0x0295, r22	; 0x800295 <joystick_pos>
     9f6:	14 c0       	rjmp	.+40     	; 0xa20 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     9f8:	46 2f       	mov	r20, r22
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	2c 2f       	mov	r18, r28
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	24 1b       	sub	r18, r20
     a02:	35 0b       	sbc	r19, r21
     a04:	64 e6       	ldi	r22, 0x64	; 100
     a06:	62 9f       	mul	r22, r18
     a08:	c0 01       	movw	r24, r0
     a0a:	63 9f       	mul	r22, r19
     a0c:	90 0d       	add	r25, r0
     a0e:	11 24       	eor	r1, r1
     a10:	6f ef       	ldi	r22, 0xFF	; 255
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	64 1b       	sub	r22, r20
     a16:	75 0b       	sbc	r23, r21
     a18:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     a1c:	60 93 95 02 	sts	0x0295, r22	; 0x800295 <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
     a20:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <joystickOffsetY>
     a24:	e2 17       	cp	r30, r18
     a26:	88 f4       	brcc	.+34     	; 0xa4a <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     a28:	62 2f       	mov	r22, r18
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	4e 2f       	mov	r20, r30
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	46 1b       	sub	r20, r22
     a32:	57 0b       	sbc	r21, r23
     a34:	24 e6       	ldi	r18, 0x64	; 100
     a36:	24 9f       	mul	r18, r20
     a38:	c0 01       	movw	r24, r0
     a3a:	25 9f       	mul	r18, r21
     a3c:	90 0d       	add	r25, r0
     a3e:	11 24       	eor	r1, r1
     a40:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     a44:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <joystick_pos+0x1>
     a48:	13 c0       	rjmp	.+38     	; 0xa70 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	4e 2f       	mov	r20, r30
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	42 1b       	sub	r20, r18
     a52:	53 0b       	sbc	r21, r19
     a54:	64 e6       	ldi	r22, 0x64	; 100
     a56:	64 9f       	mul	r22, r20
     a58:	c0 01       	movw	r24, r0
     a5a:	65 9f       	mul	r22, r21
     a5c:	90 0d       	add	r25, r0
     a5e:	11 24       	eor	r1, r1
     a60:	6f ef       	ldi	r22, 0xFF	; 255
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	62 1b       	sub	r22, r18
     a66:	73 0b       	sbc	r23, r19
     a68:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     a6c:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     a70:	c5 e9       	ldi	r28, 0x95	; 149
     a72:	d2 e0       	ldi	r29, 0x02	; 2
     a74:	68 81       	ld	r22, Y
     a76:	06 2e       	mov	r0, r22
     a78:	00 0c       	add	r0, r0
     a7a:	77 0b       	sbc	r23, r23
     a7c:	88 0b       	sbc	r24, r24
     a7e:	99 0b       	sbc	r25, r25
     a80:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__floatsisf>
     a84:	6b 01       	movw	r12, r22
     a86:	7c 01       	movw	r14, r24
     a88:	69 81       	ldd	r22, Y+1	; 0x01
     a8a:	06 2e       	mov	r0, r22
     a8c:	00 0c       	add	r0, r0
     a8e:	77 0b       	sbc	r23, r23
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__floatsisf>
     a98:	a7 01       	movw	r20, r14
     a9a:	96 01       	movw	r18, r12
     a9c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <atan2>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	44 eb       	ldi	r20, 0xB4	; 180
     aa6:	53 e4       	ldi	r21, 0x43	; 67
     aa8:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	5f e3       	ldi	r21, 0x3F	; 63
     ab4:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     ab8:	23 ec       	ldi	r18, 0xC3	; 195
     aba:	35 ef       	ldi	r19, 0xF5	; 245
     abc:	48 e4       	ldi	r20, 0x48	; 72
     abe:	50 e4       	ldi	r21, 0x40	; 64
     ac0:	0e 94 b2 08 	call	0x1164	; 0x1164 <__divsf3>
     ac4:	0e 94 24 09 	call	0x1248	; 0x1248 <__fixsfsi>
     ac8:	7b 83       	std	Y+3, r23	; 0x03
     aca:	6a 83       	std	Y+2, r22	; 0x02
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	08 95       	ret

00000ada <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     ada:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     adc:	80 81       	ld	r24, Z
     ade:	94 e0       	ldi	r25, 0x04	; 4
     ae0:	98 0f       	add	r25, r24
     ae2:	99 30       	cpi	r25, 0x09	; 9
     ae4:	20 f4       	brcc	.+8      	; 0xaee <joystick_getDirection+0x14>
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	9c 5f       	subi	r25, 0xFC	; 252
     aea:	99 30       	cpi	r25, 0x09	; 9
     aec:	90 f0       	brcs	.+36     	; 0xb12 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     aee:	85 30       	cpi	r24, 0x05	; 5
     af0:	2c f0       	brlt	.+10     	; 0xafc <joystick_getDirection+0x22>
     af2:	81 81       	ldd	r24, Z+1	; 0x01
     af4:	8f 5c       	subi	r24, 0xCF	; 207
     af6:	83 36       	cpi	r24, 0x63	; 99
     af8:	38 f4       	brcc	.+14     	; 0xb08 <joystick_getDirection+0x2e>
     afa:	0d c0       	rjmp	.+26     	; 0xb16 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     afc:	8c 3f       	cpi	r24, 0xFC	; 252
     afe:	24 f4       	brge	.+8      	; 0xb08 <joystick_getDirection+0x2e>
     b00:	81 81       	ldd	r24, Z+1	; 0x01
     b02:	8f 5c       	subi	r24, 0xCF	; 207
     b04:	83 36       	cpi	r24, 0x63	; 99
     b06:	48 f0       	brcs	.+18     	; 0xb1a <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     b08:	81 81       	ldd	r24, Z+1	; 0x01
     b0a:	8c 3f       	cpi	r24, 0xFC	; 252
     b0c:	44 f0       	brlt	.+16     	; 0xb1e <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     b1e:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     b20:	08 95       	ret

00000b22 <mainMenuInit>:
#include <avr/interrupt.h>



MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     b22:	8f e1       	ldi	r24, 0x1F	; 31
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 1d 0b 	call	0x163a	; 0x163a <malloc>
	ptr->numChildren = 0;
     b2a:	fc 01       	movw	r30, r24
     b2c:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     b2e:	2a e0       	ldi	r18, 0x0A	; 10
     b30:	ea e2       	ldi	r30, 0x2A	; 42
     b32:	f2 e0       	ldi	r31, 0x02	; 2
     b34:	dc 01       	movw	r26, r24
     b36:	01 90       	ld	r0, Z+
     b38:	0d 92       	st	X+, r0
     b3a:	2a 95       	dec	r18
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <mainMenuInit+0x14>
	ptr->parent = NULL;
     b3e:	fc 01       	movw	r30, r24
     b40:	11 8a       	std	Z+17, r1	; 0x11
     b42:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     b44:	08 95       	ret

00000b46 <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	7c 01       	movw	r14, r24
     b56:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     b58:	8f e1       	ldi	r24, 0x1F	; 31
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 1d 0b 	call	0x163a	; 0x163a <malloc>
     b60:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     b62:	d7 01       	movw	r26, r14
     b64:	5e 96       	adiw	r26, 0x1e	; 30
     b66:	ec 91       	ld	r30, X
     b68:	5e 97       	sbiw	r26, 0x1e	; 30
     b6a:	c1 e0       	ldi	r28, 0x01	; 1
     b6c:	ce 0f       	add	r28, r30
     b6e:	5e 96       	adiw	r26, 0x1e	; 30
     b70:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     b72:	b6 01       	movw	r22, r12
     b74:	0e 94 3e 0c 	call	0x187c	; 0x187c <strcpy>
	childPtr->parent = parent;
     b78:	f8 01       	movw	r30, r16
     b7a:	f1 8a       	std	Z+17, r15	; 0x11
     b7c:	e0 8a       	std	Z+16, r14	; 0x10
	//printf("Added child: %s\n\r", childPtr->name);

	if (parent->numChildren > MAXCHILDREN) {
     b7e:	c7 30       	cpi	r28, 0x07	; 7
     b80:	58 f0       	brcs	.+22     	; 0xb98 <addChild+0x52>
		printf("REached max: \n\r");
     b82:	84 e3       	ldi	r24, 0x34	; 52
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	9f 93       	push	r25
     b88:	8f 93       	push	r24
     b8a:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
		return NULL;
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <addChild+0x6e>
	} 
	parent->children[parent->numChildren-1]=childPtr;
     b98:	ec 2f       	mov	r30, r28
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	38 96       	adiw	r30, 0x08	; 8
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	ee 0d       	add	r30, r14
     ba4:	ff 1d       	adc	r31, r15
     ba6:	11 83       	std	Z+1, r17	; 0x01
     ba8:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     baa:	d8 01       	movw	r26, r16
     bac:	5e 96       	adiw	r26, 0x1e	; 30
     bae:	1c 92       	st	X, r1
	return childPtr;
     bb0:	80 2f       	mov	r24, r16
     bb2:	91 2f       	mov	r25, r17
}
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	08 95       	ret

00000bc4 <menuInit>:

MenuNode* menuInit(void)
{
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     bd0:	0e 94 91 05 	call	0xb22	; 0xb22 <mainMenuInit>
     bd4:	8c 01       	movw	r16, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     bd6:	64 e4       	ldi	r22, 0x44	; 68
     bd8:	72 e0       	ldi	r23, 0x02	; 2
     bda:	0e 94 a3 05 	call	0xb46	; 0xb46 <addChild>
     bde:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     be0:	6e e4       	ldi	r22, 0x4E	; 78
     be2:	72 e0       	ldi	r23, 0x02	; 2
     be4:	0e 94 a3 05 	call	0xb46	; 0xb46 <addChild>
	addChild(childPlayGame,"GAME 2");
     be8:	65 e5       	ldi	r22, 0x55	; 85
     bea:	72 e0       	ldi	r23, 0x02	; 2
     bec:	ce 01       	movw	r24, r28
     bee:	0e 94 a3 05 	call	0xb46	; 0xb46 <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     bf2:	6c e5       	ldi	r22, 0x5C	; 92
     bf4:	72 e0       	ldi	r23, 0x02	; 2
     bf6:	c8 01       	movw	r24, r16
     bf8:	0e 94 a3 05 	call	0xb46	; 0xb46 <addChild>
     bfc:	7c 01       	movw	r14, r24
     bfe:	c5 e0       	ldi	r28, 0x05	; 5
     c00:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     c02:	66 e6       	ldi	r22, 0x66	; 102
     c04:	72 e0       	ldi	r23, 0x02	; 2
     c06:	c7 01       	movw	r24, r14
     c08:	0e 94 a3 05 	call	0xb46	; 0xb46 <addChild>
     c0c:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     c0e:	c9 f7       	brne	.-14     	; 0xc02 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	//MenuNode* childSettings = addChild(mainMenu,"Settings");
	
	MenuNode* childMusic = addChild(mainMenu,"Music");
     c10:	6e e6       	ldi	r22, 0x6E	; 110
     c12:	72 e0       	ldi	r23, 0x02	; 2
     c14:	c8 01       	movw	r24, r16
     c16:	0e 94 a3 05 	call	0xb46	; 0xb46 <addChild>
	addChild(childMusic, "Rick");
     c1a:	64 e7       	ldi	r22, 0x74	; 116
     c1c:	72 e0       	ldi	r23, 0x02	; 2
     c1e:	0e 94 a3 05 	call	0xb46	; 0xb46 <addChild>
	
	
	//addChild(childSettings, "No sett");
	
	
	printf("Number of children: %i\n\r",mainMenu->numChildren);
     c22:	f8 01       	movw	r30, r16
     c24:	86 8d       	ldd	r24, Z+30	; 0x1e
     c26:	1f 92       	push	r1
     c28:	8f 93       	push	r24
     c2a:	89 e7       	ldi	r24, 0x79	; 121
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	0e 94 90 0c 	call	0x1920	; 0x1920 <printf>
	/*
	MenuNode* childSettings = addChild(mainMenu,"Settings");
	addChild(childSettings, "No sett");
	printf("Number of children: %i\n\r",childSettings->numChildren);
	*/
	currentMenu.currentMenuItem = mainMenu;
     c36:	e9 e9       	ldi	r30, 0x99	; 153
     c38:	f2 e0       	ldi	r31, 0x02	; 2
     c3a:	11 83       	std	Z+1, r17	; 0x01
     c3c:	00 83       	st	Z, r16
	currentMenu.childIndex = 0;
     c3e:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	83 83       	std	Z+3, r24	; 0x03
	
	return mainMenu;
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
}
     c4c:	c8 01       	movw	r24, r16
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	08 95       	ret

00000c5c <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     c5c:	0e 94 6d 05 	call	0xada	; 0xada <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     c60:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <currentMenu+0x3>
     c64:	94 30       	cpi	r25, 0x04	; 4
     c66:	09 f0       	breq	.+2      	; 0xc6a <navigateMenu+0xe>
     c68:	58 c0       	rjmp	.+176    	; 0xd1a <navigateMenu+0xbe>
			switch (dir) {
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	e1 f1       	breq	.+120    	; 0xce6 <navigateMenu+0x8a>
     c6e:	60 f1       	brcs	.+88     	; 0xcc8 <navigateMenu+0x6c>
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	c9 f0       	breq	.+50     	; 0xca6 <navigateMenu+0x4a>
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	09 f0       	breq	.+2      	; 0xc7a <navigateMenu+0x1e>
     c78:	50 c0       	rjmp	.+160    	; 0xd1a <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     c7a:	e9 e9       	ldi	r30, 0x99	; 153
     c7c:	f2 e0       	ldi	r31, 0x02	; 2
     c7e:	92 81       	ldd	r25, Z+2	; 0x02
     c80:	49 2f       	mov	r20, r25
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	01 90       	ld	r0, Z+
     c86:	f0 81       	ld	r31, Z
     c88:	e0 2d       	mov	r30, r0
     c8a:	26 8d       	ldd	r18, Z+30	; 0x1e
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	21 50       	subi	r18, 0x01	; 1
     c90:	31 09       	sbc	r19, r1
     c92:	42 17       	cp	r20, r18
     c94:	53 07       	cpc	r21, r19
     c96:	24 f4       	brge	.+8      	; 0xca0 <navigateMenu+0x44>
					currentMenu.childIndex++;
     c98:	9f 5f       	subi	r25, 0xFF	; 255
     c9a:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <currentMenu+0x2>
     c9e:	3d c0       	rjmp	.+122    	; 0xd1a <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     ca0:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <currentMenu+0x2>
     ca4:	3a c0       	rjmp	.+116    	; 0xd1a <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     ca6:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <currentMenu+0x2>
     caa:	99 23       	and	r25, r25
     cac:	21 f0       	breq	.+8      	; 0xcb6 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     cae:	91 50       	subi	r25, 0x01	; 1
     cb0:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <currentMenu+0x2>
     cb4:	32 c0       	rjmp	.+100    	; 0xd1a <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     cb6:	e9 e9       	ldi	r30, 0x99	; 153
     cb8:	f2 e0       	ldi	r31, 0x02	; 2
     cba:	a0 81       	ld	r26, Z
     cbc:	b1 81       	ldd	r27, Z+1	; 0x01
     cbe:	5e 96       	adiw	r26, 0x1e	; 30
     cc0:	9c 91       	ld	r25, X
     cc2:	91 50       	subi	r25, 0x01	; 1
     cc4:	92 83       	std	Z+2, r25	; 0x02
     cc6:	29 c0       	rjmp	.+82     	; 0xd1a <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     cc8:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <currentMenu>
     ccc:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <currentMenu+0x1>
     cd0:	20 89       	ldd	r18, Z+16	; 0x10
     cd2:	31 89       	ldd	r19, Z+17	; 0x11
     cd4:	21 15       	cp	r18, r1
     cd6:	31 05       	cpc	r19, r1
     cd8:	01 f1       	breq	.+64     	; 0xd1a <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     cda:	e9 e9       	ldi	r30, 0x99	; 153
     cdc:	f2 e0       	ldi	r31, 0x02	; 2
     cde:	31 83       	std	Z+1, r19	; 0x01
     ce0:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     ce2:	12 82       	std	Z+2, r1	; 0x02
     ce4:	1a c0       	rjmp	.+52     	; 0xd1a <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     ce6:	a9 e9       	ldi	r26, 0x99	; 153
     ce8:	b2 e0       	ldi	r27, 0x02	; 2
     cea:	2d 91       	ld	r18, X+
     cec:	3c 91       	ld	r19, X
     cee:	11 97       	sbiw	r26, 0x01	; 1
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	9c 91       	ld	r25, X
     cf4:	12 97       	sbiw	r26, 0x02	; 2
     cf6:	e9 2f       	mov	r30, r25
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	39 96       	adiw	r30, 0x09	; 9
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	e2 0f       	add	r30, r18
     d02:	f3 1f       	adc	r31, r19
     d04:	01 90       	ld	r0, Z+
     d06:	f0 81       	ld	r31, Z
     d08:	e0 2d       	mov	r30, r0
     d0a:	96 8d       	ldd	r25, Z+30	; 0x1e
     d0c:	99 23       	and	r25, r25
     d0e:	29 f0       	breq	.+10     	; 0xd1a <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	fc 93       	st	X, r31
     d14:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     d16:	12 96       	adiw	r26, 0x02	; 2
     d18:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     d1a:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <currentMenu+0x3>
     d1e:	08 95       	ret

00000d20 <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
	oled_reset();
     d28:	0e 94 da 06 	call	0xdb4	; 0xdb4 <oled_reset>
	oled_home();
     d2c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     d30:	c9 e9       	ldi	r28, 0x99	; 153
     d32:	d2 e0       	ldi	r29, 0x02	; 2
     d34:	88 81       	ld	r24, Y
     d36:	99 81       	ldd	r25, Y+1	; 0x01
     d38:	0e 94 36 07 	call	0xe6c	; 0xe6c <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d3c:	e8 81       	ld	r30, Y
     d3e:	f9 81       	ldd	r31, Y+1	; 0x01
     d40:	86 8d       	ldd	r24, Z+30	; 0x1e
     d42:	88 23       	and	r24, r24
     d44:	31 f1       	breq	.+76     	; 0xd92 <menu_printCurrentMenu+0x72>
     d46:	c0 e0       	ldi	r28, 0x00	; 0
     d48:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d4a:	09 e9       	ldi	r16, 0x99	; 153
     d4c:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     d4e:	ce 01       	movw	r24, r28
     d50:	02 96       	adiw	r24, 0x02	; 2
     d52:	0e 94 32 07 	call	0xe64	; 0xe64 <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     d56:	d8 01       	movw	r26, r16
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	fe 01       	movw	r30, r28
     d5e:	39 96       	adiw	r30, 0x09	; 9
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	e8 0f       	add	r30, r24
     d66:	f9 1f       	adc	r31, r25
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	0e 94 36 07 	call	0xe6c	; 0xe6c <oled_print>
		if (currentMenu.childIndex == i) {
     d70:	f8 01       	movw	r30, r16
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	8c 17       	cp	r24, r28
     d78:	9d 07       	cpc	r25, r29
     d7a:	11 f4       	brne	.+4      	; 0xd80 <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     d7c:	0e 94 f0 06 	call	0xde0	; 0xde0 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     d80:	21 96       	adiw	r28, 0x01	; 1
     d82:	d8 01       	movw	r26, r16
     d84:	ed 91       	ld	r30, X+
     d86:	fc 91       	ld	r31, X
     d88:	86 8d       	ldd	r24, Z+30	; 0x1e
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	c8 17       	cp	r28, r24
     d8e:	d9 07       	cpc	r29, r25
     d90:	f4 f2       	brlt	.-68     	; 0xd4e <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     d9c:	80 55       	subi	r24, 0x50	; 80
     d9e:	e0 e0       	ldi	r30, 0x00	; 0
     da0:	f0 e1       	ldi	r31, 0x10	; 16
     da2:	80 83       	st	Z, r24
     da4:	86 2f       	mov	r24, r22
     da6:	8f 70       	andi	r24, 0x0F	; 15
     da8:	80 83       	st	Z, r24
     daa:	62 95       	swap	r22
     dac:	6f 70       	andi	r22, 0x0F	; 15
     dae:	60 61       	ori	r22, 0x10	; 16
     db0:	60 83       	st	Z, r22
     db2:	08 95       	ret

00000db4 <oled_reset>:
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	c0 e0       	ldi	r28, 0x00	; 0
     dbe:	d2 e1       	ldi	r29, 0x12	; 18
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	81 2f       	mov	r24, r17
     dc4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <oled_pos>
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	18 82       	st	Y, r1
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	e9 f7       	brne	.-6      	; 0xdcc <oled_reset+0x18>
     dd2:	1f 5f       	subi	r17, 0xFF	; 255
     dd4:	18 30       	cpi	r17, 0x08	; 8
     dd6:	a1 f7       	brne	.-24     	; 0xdc0 <oled_reset+0xc>
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	08 95       	ret

00000de0 <oled_print_arrow>:
     de0:	e0 e0       	ldi	r30, 0x00	; 0
     de2:	f2 e1       	ldi	r31, 0x12	; 18
     de4:	88 e1       	ldi	r24, 0x18	; 24
     de6:	80 83       	st	Z, r24
     de8:	9c e3       	ldi	r25, 0x3C	; 60
     dea:	90 83       	st	Z, r25
     dec:	9e e7       	ldi	r25, 0x7E	; 126
     dee:	90 83       	st	Z, r25
     df0:	80 83       	st	Z, r24
     df2:	80 83       	st	Z, r24
     df4:	08 95       	ret

00000df6 <oled_home>:
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	0e 94 ce 06 	call	0xd9c	; 0xd9c <oled_pos>
     dfe:	08 95       	ret

00000e00 <oled_init>:
     e00:	e0 e0       	ldi	r30, 0x00	; 0
     e02:	f0 e1       	ldi	r31, 0x10	; 16
     e04:	8e ea       	ldi	r24, 0xAE	; 174
     e06:	80 83       	st	Z, r24
     e08:	81 ea       	ldi	r24, 0xA1	; 161
     e0a:	80 83       	st	Z, r24
     e0c:	8a ed       	ldi	r24, 0xDA	; 218
     e0e:	80 83       	st	Z, r24
     e10:	82 e1       	ldi	r24, 0x12	; 18
     e12:	80 83       	st	Z, r24
     e14:	88 ec       	ldi	r24, 0xC8	; 200
     e16:	80 83       	st	Z, r24
     e18:	88 ea       	ldi	r24, 0xA8	; 168
     e1a:	80 83       	st	Z, r24
     e1c:	8f e3       	ldi	r24, 0x3F	; 63
     e1e:	80 83       	st	Z, r24
     e20:	85 ed       	ldi	r24, 0xD5	; 213
     e22:	80 83       	st	Z, r24
     e24:	80 e8       	ldi	r24, 0x80	; 128
     e26:	80 83       	st	Z, r24
     e28:	81 e8       	ldi	r24, 0x81	; 129
     e2a:	80 83       	st	Z, r24
     e2c:	80 e5       	ldi	r24, 0x50	; 80
     e2e:	80 83       	st	Z, r24
     e30:	89 ed       	ldi	r24, 0xD9	; 217
     e32:	80 83       	st	Z, r24
     e34:	81 e2       	ldi	r24, 0x21	; 33
     e36:	80 83       	st	Z, r24
     e38:	80 e2       	ldi	r24, 0x20	; 32
     e3a:	80 83       	st	Z, r24
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	80 83       	st	Z, r24
     e40:	8b ed       	ldi	r24, 0xDB	; 219
     e42:	80 83       	st	Z, r24
     e44:	80 e3       	ldi	r24, 0x30	; 48
     e46:	80 83       	st	Z, r24
     e48:	8d ea       	ldi	r24, 0xAD	; 173
     e4a:	80 83       	st	Z, r24
     e4c:	10 82       	st	Z, r1
     e4e:	84 ea       	ldi	r24, 0xA4	; 164
     e50:	80 83       	st	Z, r24
     e52:	86 ea       	ldi	r24, 0xA6	; 166
     e54:	80 83       	st	Z, r24
     e56:	8f ea       	ldi	r24, 0xAF	; 175
     e58:	80 83       	st	Z, r24
     e5a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <oled_reset>
     e5e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_home>
     e62:	08 95       	ret

00000e64 <oled_gotoLine>:
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	0e 94 ce 06 	call	0xd9c	; 0xd9c <oled_pos>
     e6a:	08 95       	ret

00000e6c <oled_print>:

void oled_print(char* character){
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	dc 01       	movw	r26, r24
	while (*character != '\0')
     e72:	8c 91       	ld	r24, X
     e74:	81 11       	cpse	r24, r1
     e76:	1a c0       	rjmp	.+52     	; 0xeac <oled_print+0x40>
     e78:	1e c0       	rjmp	.+60     	; 0xeb6 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     e7a:	ec 91       	ld	r30, X
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	b0 97       	sbiw	r30, 0x20	; 32
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e2 0f       	add	r30, r18
     e8e:	f3 1f       	adc	r31, r19
     e90:	e2 56       	subi	r30, 0x62	; 98
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     e96:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     e98:	2f 5f       	subi	r18, 0xFF	; 255
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
     e9c:	28 30       	cpi	r18, 0x08	; 8
     e9e:	31 05       	cpc	r19, r1
     ea0:	61 f7       	brne	.-40     	; 0xe7a <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     ea2:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     ea4:	8c 91       	ld	r24, X
     ea6:	81 11       	cpse	r24, r1
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <oled_print+0x44>
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     eac:	c0 e0       	ldi	r28, 0x00	; 0
     eae:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	e2 cf       	rjmp	.-60     	; 0xe7a <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <setupInit>:
#include "oled.h"
#include "timer.h"
#include "sleep.h"

	void setupInit(void){
	cli();
     ebc:	f8 94       	cli
	xmem_init();
     ebe:	0e 94 39 08 	call	0x1072	; 0x1072 <xmem_init>
	USART_init(MYUBRR);
     ec2:	8f e1       	ldi	r24, 0x1F	; 31
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 28 08 	call	0x1050	; 0x1050 <USART_init>
	adcInit();
     eca:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     ece:	0e 94 cf 04 	call	0x99e	; 0x99e <joystickInit>
	touchButton_init();
     ed2:	0e 94 fb 07 	call	0xff6	; 0xff6 <touchButton_init>
	oled_init();
     ed6:	0e 94 00 07 	call	0xe00	; 0xe00 <oled_init>
	timer_init();
     eda:	0e 94 ed 07 	call	0xfda	; 0xfda <timer_init>
	sleep_init();
     ede:	0e 94 bf 04 	call	0x97e	; 0x97e <sleep_init>
	menuInit();
     ee2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <menuInit>
	CAN_controller_init();
     ee6:	0e 94 44 04 	call	0x888	; 0x888 <CAN_controller_init>
	sei();
     eea:	78 94       	sei
     eec:	08 95       	ret

00000eee <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     ef8:	cf e9       	ldi	r28, 0x9F	; 159
     efa:	d2 e0       	ldi	r29, 0x02	; 2
     efc:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     f0c:	87 b3       	in	r24, 0x17	; 23
     f0e:	80 6a       	ori	r24, 0xA0	; 160
     f10:	87 bb       	out	0x17, r24	; 23
     f12:	bc 9a       	sbi	0x17, 4	; 23
     f14:	8d b1       	in	r24, 0x0d	; 13
     f16:	81 65       	ori	r24, 0x51	; 81
     f18:	8d b9       	out	0x0d, r24	; 13
     f1a:	c4 9a       	sbi	0x18, 4	; 24
     f1c:	08 95       	ret

00000f1e <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     f1e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     f20:	77 9b       	sbis	0x0e, 7	; 14
     f22:	fe cf       	rjmp	.-4      	; 0xf20 <SPI_masterWrite+0x2>

}
     f24:	08 95       	ret

00000f26 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     f26:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     f28:	77 9b       	sbis	0x0e, 7	; 14
     f2a:	fe cf       	rjmp	.-4      	; 0xf28 <SPI_masterRead+0x2>
	return SPDR;
     f2c:	8f b1       	in	r24, 0x0f	; 15
}
     f2e:	08 95       	ret

00000f30 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     f30:	66 23       	and	r22, r22
     f32:	69 f0       	breq	.+26     	; 0xf4e <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     f34:	48 b3       	in	r20, 0x18	; 24
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	b9 01       	movw	r22, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <SPI_setChipSelect+0x12>
     f3e:	66 0f       	add	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	8a 95       	dec	r24
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <SPI_setChipSelect+0xe>
     f46:	cb 01       	movw	r24, r22
     f48:	84 2b       	or	r24, r20
     f4a:	88 bb       	out	0x18, r24	; 24
     f4c:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     f4e:	48 b3       	in	r20, 0x18	; 24
     f50:	21 e0       	ldi	r18, 0x01	; 1
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	b9 01       	movw	r22, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <SPI_setChipSelect+0x2c>
     f58:	66 0f       	add	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	8a 95       	dec	r24
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <SPI_setChipSelect+0x28>
     f60:	cb 01       	movw	r24, r22
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	88 bb       	out	0x18, r24	; 24
     f68:	08 95       	ret

00000f6a <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	ef 93       	push	r30
     f8a:	ff 93       	push	r31
	cli();
     f8c:	f8 94       	cli
	TCNT1 = 0x00;
     f8e:	1d bc       	out	0x2d, r1	; 45
     f90:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     f92:	85 e9       	ldi	r24, 0x95	; 149
     f94:	92 e0       	ldi	r25, 0x02	; 2
     f96:	0e 94 da 04 	call	0x9b4	; 0x9b4 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     f9a:	8f e9       	ldi	r24, 0x9F	; 159
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	0e 94 77 07 	call	0xeee	; 0xeee <slider_readPosition>
	touchButton_readButtons(&buttons);
     fa2:	8d e9       	ldi	r24, 0x9D	; 157
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0e 94 14 08 	call	0x1028	; 0x1028 <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     faa:	85 e9       	ldi	r24, 0x95	; 149
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0e 94 2e 06 	call	0xc5c	; 0xc5c <navigateMenu>
	menu_printCurrentMenu();
     fb2:	0e 94 90 06 	call	0xd20	; 0xd20 <menu_printCurrentMenu>
	sei();
     fb6:	78 94       	sei
}
     fb8:	ff 91       	pop	r31
     fba:	ef 91       	pop	r30
     fbc:	bf 91       	pop	r27
     fbe:	af 91       	pop	r26
     fc0:	9f 91       	pop	r25
     fc2:	8f 91       	pop	r24
     fc4:	7f 91       	pop	r23
     fc6:	6f 91       	pop	r22
     fc8:	5f 91       	pop	r21
     fca:	4f 91       	pop	r20
     fcc:	3f 91       	pop	r19
     fce:	2f 91       	pop	r18
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	0f 90       	pop	r0
     fd6:	1f 90       	pop	r1
     fd8:	18 95       	reti

00000fda <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     fda:	89 b7       	in	r24, 0x39	; 57
     fdc:	80 62       	ori	r24, 0x20	; 32
     fde:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     fe0:	1d bc       	out	0x2d, r1	; 45
     fe2:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     fe4:	80 e3       	ldi	r24, 0x30	; 48
     fe6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     fe8:	85 e0       	ldi	r24, 0x05	; 5
     fea:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     fec:	80 ef       	ldi	r24, 0xF0	; 240
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	99 bd       	out	0x29, r25	; 41
     ff2:	88 bd       	out	0x28, r24	; 40
     ff4:	08 95       	ret

00000ff6 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     ff6:	36 b3       	in	r19, 0x16	; 22
     ff8:	26 b3       	in	r18, 0x16	; 22
     ffa:	47 b3       	in	r20, 0x17	; 23
     ffc:	32 70       	andi	r19, 0x02	; 2
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	bc 01       	movw	r22, r24
    1004:	02 c0       	rjmp	.+4      	; 0x100a <touchButton_init+0x14>
    1006:	66 0f       	add	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	3a 95       	dec	r19
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <touchButton_init+0x10>
    100e:	24 70       	andi	r18, 0x04	; 4
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <touchButton_init+0x20>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	2a 95       	dec	r18
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <touchButton_init+0x1c>
    101a:	86 2b       	or	r24, r22
    101c:	97 2b       	or	r25, r23
    101e:	80 95       	com	r24
    1020:	90 95       	com	r25
    1022:	84 23       	and	r24, r20
    1024:	87 bb       	out	0x17, r24	; 23
    1026:	08 95       	ret

00001028 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
    1028:	86 b3       	in	r24, 0x16	; 22
    102a:	ed e9       	ldi	r30, 0x9D	; 157
    102c:	f2 e0       	ldi	r31, 0x02	; 2
    102e:	86 95       	lsr	r24
    1030:	81 70       	andi	r24, 0x01	; 1
    1032:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
    1034:	86 b3       	in	r24, 0x16	; 22
    1036:	82 fb       	bst	r24, 2
    1038:	88 27       	eor	r24, r24
    103a:	80 f9       	bld	r24, 0
    103c:	81 83       	std	Z+1, r24	; 0x01
    103e:	08 95       	ret

00001040 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
    1040:	5d 9b       	sbis	0x0b, 5	; 11
    1042:	fe cf       	rjmp	.-4      	; 0x1040 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
    1044:	8c b9       	out	0x0c, r24	; 12
    1046:	08 95       	ret

00001048 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
    1048:	5f 9b       	sbis	0x0b, 7	; 11
    104a:	fe cf       	rjmp	.-4      	; 0x1048 <USART_receiveChar>
		;
	
	return UDR0;
    104c:	8c b1       	in	r24, 0x0c	; 12
    104e:	08 95       	ret

00001050 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
    1050:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
    1052:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
    1054:	88 e1       	ldi	r24, 0x18	; 24
    1056:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1058:	8e e8       	ldi	r24, 0x8E	; 142
    105a:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
    105c:	64 e2       	ldi	r22, 0x24	; 36
    105e:	78 e0       	ldi	r23, 0x08	; 8
    1060:	80 e2       	ldi	r24, 0x20	; 32
    1062:	98 e0       	ldi	r25, 0x08	; 8
    1064:	0e 94 45 0c 	call	0x188a	; 0x188a <fdevopen>
    1068:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <uart+0x1>
    106c:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <uart>
    1070:	08 95       	ret

00001072 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
    1072:	85 b7       	in	r24, 0x35	; 53
    1074:	80 68       	ori	r24, 0x80	; 128
    1076:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
    1078:	80 b7       	in	r24, 0x30	; 48
    107a:	88 60       	ori	r24, 0x08	; 8
    107c:	80 bf       	out	0x30, r24	; 48
    107e:	08 95       	ret
    1080:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_pscA>
    1084:	60 f0       	brcs	.+24     	; 0x109e <xmem_init+0x2c>
    1086:	80 e8       	ldi	r24, 0x80	; 128
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	09 f4       	brne	.+2      	; 0x108e <xmem_init+0x1c>
    108c:	9e ef       	ldi	r25, 0xFE	; 254
    108e:	0e 94 ce 09 	call	0x139c	; 0x139c <__fp_pscB>
    1092:	28 f0       	brcs	.+10     	; 0x109e <xmem_init+0x2c>
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	51 e0       	ldi	r21, 0x01	; 1
    1098:	71 f4       	brne	.+28     	; 0x10b6 <atan2+0x10>
    109a:	5e ef       	ldi	r21, 0xFE	; 254
    109c:	0c c0       	rjmp	.+24     	; 0x10b6 <atan2+0x10>
    109e:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>
    10a2:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_zero>

000010a6 <atan2>:
    10a6:	e9 2f       	mov	r30, r25
    10a8:	e0 78       	andi	r30, 0x80	; 128
    10aa:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_split3>
    10ae:	40 f3       	brcs	.-48     	; 0x1080 <xmem_init+0xe>
    10b0:	09 2e       	mov	r0, r25
    10b2:	05 2a       	or	r0, r21
    10b4:	b1 f3       	breq	.-20     	; 0x10a2 <xmem_init+0x30>
    10b6:	26 17       	cp	r18, r22
    10b8:	37 07       	cpc	r19, r23
    10ba:	48 07       	cpc	r20, r24
    10bc:	59 07       	cpc	r21, r25
    10be:	38 f0       	brcs	.+14     	; 0x10ce <atan2+0x28>
    10c0:	0e 2e       	mov	r0, r30
    10c2:	07 f8       	bld	r0, 7
    10c4:	e0 25       	eor	r30, r0
    10c6:	69 f0       	breq	.+26     	; 0x10e2 <atan2+0x3c>
    10c8:	e0 25       	eor	r30, r0
    10ca:	e0 64       	ori	r30, 0x40	; 64
    10cc:	0a c0       	rjmp	.+20     	; 0x10e2 <atan2+0x3c>
    10ce:	ef 63       	ori	r30, 0x3F	; 63
    10d0:	07 f8       	bld	r0, 7
    10d2:	00 94       	com	r0
    10d4:	07 fa       	bst	r0, 7
    10d6:	db 01       	movw	r26, r22
    10d8:	b9 01       	movw	r22, r18
    10da:	9d 01       	movw	r18, r26
    10dc:	dc 01       	movw	r26, r24
    10de:	ca 01       	movw	r24, r20
    10e0:	ad 01       	movw	r20, r26
    10e2:	ef 93       	push	r30
    10e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <__divsf3_pse>
    10e8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fp_round>
    10ec:	0e 94 83 08 	call	0x1106	; 0x1106 <atan>
    10f0:	5f 91       	pop	r21
    10f2:	55 23       	and	r21, r21
    10f4:	39 f0       	breq	.+14     	; 0x1104 <atan2+0x5e>
    10f6:	2b ed       	ldi	r18, 0xDB	; 219
    10f8:	3f e0       	ldi	r19, 0x0F	; 15
    10fa:	49 e4       	ldi	r20, 0x49	; 73
    10fc:	50 fd       	sbrc	r21, 0
    10fe:	49 ec       	ldi	r20, 0xC9	; 201
    1100:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__addsf3>
    1104:	08 95       	ret

00001106 <atan>:
    1106:	df 93       	push	r29
    1108:	dd 27       	eor	r29, r29
    110a:	b9 2f       	mov	r27, r25
    110c:	bf 77       	andi	r27, 0x7F	; 127
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	48 07       	cpc	r20, r24
    1118:	5b 07       	cpc	r21, r27
    111a:	18 f4       	brcc	.+6      	; 0x1122 <atan+0x1c>
    111c:	d9 2f       	mov	r29, r25
    111e:	0e 94 0f 0a 	call	0x141e	; 0x141e <inverse>
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	7f 93       	push	r23
    1128:	6f 93       	push	r22
    112a:	0e 94 84 0a 	call	0x1508	; 0x1508 <square>
    112e:	e0 e7       	ldi	r30, 0x70	; 112
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	0e 94 a0 09 	call	0x1340	; 0x1340 <__fp_powser>
    1136:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fp_round>
    113a:	2f 91       	pop	r18
    113c:	3f 91       	pop	r19
    113e:	4f 91       	pop	r20
    1140:	5f 91       	pop	r21
    1142:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3x>
    1146:	dd 23       	and	r29, r29
    1148:	51 f0       	breq	.+20     	; 0x115e <atan+0x58>
    114a:	90 58       	subi	r25, 0x80	; 128
    114c:	a2 ea       	ldi	r26, 0xA2	; 162
    114e:	2a ed       	ldi	r18, 0xDA	; 218
    1150:	3f e0       	ldi	r19, 0x0F	; 15
    1152:	49 ec       	ldi	r20, 0xC9	; 201
    1154:	5f e3       	ldi	r21, 0x3F	; 63
    1156:	d0 78       	andi	r29, 0x80	; 128
    1158:	5d 27       	eor	r21, r29
    115a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__addsf3x>
    115e:	df 91       	pop	r29
    1160:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_round>

00001164 <__divsf3>:
    1164:	0e 94 c6 08 	call	0x118c	; 0x118c <__divsf3x>
    1168:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_round>
    116c:	0e 94 ce 09 	call	0x139c	; 0x139c <__fp_pscB>
    1170:	58 f0       	brcs	.+22     	; 0x1188 <__divsf3+0x24>
    1172:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_pscA>
    1176:	40 f0       	brcs	.+16     	; 0x1188 <__divsf3+0x24>
    1178:	29 f4       	brne	.+10     	; 0x1184 <__divsf3+0x20>
    117a:	5f 3f       	cpi	r21, 0xFF	; 255
    117c:	29 f0       	breq	.+10     	; 0x1188 <__divsf3+0x24>
    117e:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    1182:	51 11       	cpse	r21, r1
    1184:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_szero>
    1188:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>

0000118c <__divsf3x>:
    118c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_split3>
    1190:	68 f3       	brcs	.-38     	; 0x116c <__divsf3+0x8>

00001192 <__divsf3_pse>:
    1192:	99 23       	and	r25, r25
    1194:	b1 f3       	breq	.-20     	; 0x1182 <__divsf3+0x1e>
    1196:	55 23       	and	r21, r21
    1198:	91 f3       	breq	.-28     	; 0x117e <__divsf3+0x1a>
    119a:	95 1b       	sub	r25, r21
    119c:	55 0b       	sbc	r21, r21
    119e:	bb 27       	eor	r27, r27
    11a0:	aa 27       	eor	r26, r26
    11a2:	62 17       	cp	r22, r18
    11a4:	73 07       	cpc	r23, r19
    11a6:	84 07       	cpc	r24, r20
    11a8:	38 f0       	brcs	.+14     	; 0x11b8 <__divsf3_pse+0x26>
    11aa:	9f 5f       	subi	r25, 0xFF	; 255
    11ac:	5f 4f       	sbci	r21, 0xFF	; 255
    11ae:	22 0f       	add	r18, r18
    11b0:	33 1f       	adc	r19, r19
    11b2:	44 1f       	adc	r20, r20
    11b4:	aa 1f       	adc	r26, r26
    11b6:	a9 f3       	breq	.-22     	; 0x11a2 <__divsf3_pse+0x10>
    11b8:	35 d0       	rcall	.+106    	; 0x1224 <__divsf3_pse+0x92>
    11ba:	0e 2e       	mov	r0, r30
    11bc:	3a f0       	brmi	.+14     	; 0x11cc <__divsf3_pse+0x3a>
    11be:	e0 e8       	ldi	r30, 0x80	; 128
    11c0:	32 d0       	rcall	.+100    	; 0x1226 <__divsf3_pse+0x94>
    11c2:	91 50       	subi	r25, 0x01	; 1
    11c4:	50 40       	sbci	r21, 0x00	; 0
    11c6:	e6 95       	lsr	r30
    11c8:	00 1c       	adc	r0, r0
    11ca:	ca f7       	brpl	.-14     	; 0x11be <__divsf3_pse+0x2c>
    11cc:	2b d0       	rcall	.+86     	; 0x1224 <__divsf3_pse+0x92>
    11ce:	fe 2f       	mov	r31, r30
    11d0:	29 d0       	rcall	.+82     	; 0x1224 <__divsf3_pse+0x92>
    11d2:	66 0f       	add	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	bb 1f       	adc	r27, r27
    11da:	26 17       	cp	r18, r22
    11dc:	37 07       	cpc	r19, r23
    11de:	48 07       	cpc	r20, r24
    11e0:	ab 07       	cpc	r26, r27
    11e2:	b0 e8       	ldi	r27, 0x80	; 128
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <__divsf3_pse+0x56>
    11e6:	bb 0b       	sbc	r27, r27
    11e8:	80 2d       	mov	r24, r0
    11ea:	bf 01       	movw	r22, r30
    11ec:	ff 27       	eor	r31, r31
    11ee:	93 58       	subi	r25, 0x83	; 131
    11f0:	5f 4f       	sbci	r21, 0xFF	; 255
    11f2:	3a f0       	brmi	.+14     	; 0x1202 <__divsf3_pse+0x70>
    11f4:	9e 3f       	cpi	r25, 0xFE	; 254
    11f6:	51 05       	cpc	r21, r1
    11f8:	78 f0       	brcs	.+30     	; 0x1218 <__divsf3_pse+0x86>
    11fa:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    11fe:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_szero>
    1202:	5f 3f       	cpi	r21, 0xFF	; 255
    1204:	e4 f3       	brlt	.-8      	; 0x11fe <__divsf3_pse+0x6c>
    1206:	98 3e       	cpi	r25, 0xE8	; 232
    1208:	d4 f3       	brlt	.-12     	; 0x11fe <__divsf3_pse+0x6c>
    120a:	86 95       	lsr	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b7 95       	ror	r27
    1212:	f7 95       	ror	r31
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	c9 f7       	brne	.-14     	; 0x120a <__divsf3_pse+0x78>
    1218:	88 0f       	add	r24, r24
    121a:	91 1d       	adc	r25, r1
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	97 f9       	bld	r25, 7
    1222:	08 95       	ret
    1224:	e1 e0       	ldi	r30, 0x01	; 1
    1226:	66 0f       	add	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	88 1f       	adc	r24, r24
    122c:	bb 1f       	adc	r27, r27
    122e:	62 17       	cp	r22, r18
    1230:	73 07       	cpc	r23, r19
    1232:	84 07       	cpc	r24, r20
    1234:	ba 07       	cpc	r27, r26
    1236:	20 f0       	brcs	.+8      	; 0x1240 <__divsf3_pse+0xae>
    1238:	62 1b       	sub	r22, r18
    123a:	73 0b       	sbc	r23, r19
    123c:	84 0b       	sbc	r24, r20
    123e:	ba 0b       	sbc	r27, r26
    1240:	ee 1f       	adc	r30, r30
    1242:	88 f7       	brcc	.-30     	; 0x1226 <__divsf3_pse+0x94>
    1244:	e0 95       	com	r30
    1246:	08 95       	ret

00001248 <__fixsfsi>:
    1248:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fixunssfsi>
    124c:	68 94       	set
    124e:	b1 11       	cpse	r27, r1
    1250:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_szero>
    1254:	08 95       	ret

00001256 <__fixunssfsi>:
    1256:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_splitA>
    125a:	88 f0       	brcs	.+34     	; 0x127e <__fixunssfsi+0x28>
    125c:	9f 57       	subi	r25, 0x7F	; 127
    125e:	98 f0       	brcs	.+38     	; 0x1286 <__fixunssfsi+0x30>
    1260:	b9 2f       	mov	r27, r25
    1262:	99 27       	eor	r25, r25
    1264:	b7 51       	subi	r27, 0x17	; 23
    1266:	b0 f0       	brcs	.+44     	; 0x1294 <__fixunssfsi+0x3e>
    1268:	e1 f0       	breq	.+56     	; 0x12a2 <__fixunssfsi+0x4c>
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	1a f0       	brmi	.+6      	; 0x127a <__fixunssfsi+0x24>
    1274:	ba 95       	dec	r27
    1276:	c9 f7       	brne	.-14     	; 0x126a <__fixunssfsi+0x14>
    1278:	14 c0       	rjmp	.+40     	; 0x12a2 <__fixunssfsi+0x4c>
    127a:	b1 30       	cpi	r27, 0x01	; 1
    127c:	91 f0       	breq	.+36     	; 0x12a2 <__fixunssfsi+0x4c>
    127e:	0e 94 08 0a 	call	0x1410	; 0x1410 <__fp_zero>
    1282:	b1 e0       	ldi	r27, 0x01	; 1
    1284:	08 95       	ret
    1286:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_zero>
    128a:	67 2f       	mov	r22, r23
    128c:	78 2f       	mov	r23, r24
    128e:	88 27       	eor	r24, r24
    1290:	b8 5f       	subi	r27, 0xF8	; 248
    1292:	39 f0       	breq	.+14     	; 0x12a2 <__fixunssfsi+0x4c>
    1294:	b9 3f       	cpi	r27, 0xF9	; 249
    1296:	cc f3       	brlt	.-14     	; 0x128a <__fixunssfsi+0x34>
    1298:	86 95       	lsr	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b3 95       	inc	r27
    12a0:	d9 f7       	brne	.-10     	; 0x1298 <__fixunssfsi+0x42>
    12a2:	3e f4       	brtc	.+14     	; 0x12b2 <__fixunssfsi+0x5c>
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	08 95       	ret

000012b4 <__floatunsisf>:
    12b4:	e8 94       	clt
    12b6:	09 c0       	rjmp	.+18     	; 0x12ca <__floatsisf+0x12>

000012b8 <__floatsisf>:
    12b8:	97 fb       	bst	r25, 7
    12ba:	3e f4       	brtc	.+14     	; 0x12ca <__floatsisf+0x12>
    12bc:	90 95       	com	r25
    12be:	80 95       	com	r24
    12c0:	70 95       	com	r23
    12c2:	61 95       	neg	r22
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	99 23       	and	r25, r25
    12cc:	a9 f0       	breq	.+42     	; 0x12f8 <__floatsisf+0x40>
    12ce:	f9 2f       	mov	r31, r25
    12d0:	96 e9       	ldi	r25, 0x96	; 150
    12d2:	bb 27       	eor	r27, r27
    12d4:	93 95       	inc	r25
    12d6:	f6 95       	lsr	r31
    12d8:	87 95       	ror	r24
    12da:	77 95       	ror	r23
    12dc:	67 95       	ror	r22
    12de:	b7 95       	ror	r27
    12e0:	f1 11       	cpse	r31, r1
    12e2:	f8 cf       	rjmp	.-16     	; 0x12d4 <__floatsisf+0x1c>
    12e4:	fa f4       	brpl	.+62     	; 0x1324 <__floatsisf+0x6c>
    12e6:	bb 0f       	add	r27, r27
    12e8:	11 f4       	brne	.+4      	; 0x12ee <__floatsisf+0x36>
    12ea:	60 ff       	sbrs	r22, 0
    12ec:	1b c0       	rjmp	.+54     	; 0x1324 <__floatsisf+0x6c>
    12ee:	6f 5f       	subi	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	16 c0       	rjmp	.+44     	; 0x1324 <__floatsisf+0x6c>
    12f8:	88 23       	and	r24, r24
    12fa:	11 f0       	breq	.+4      	; 0x1300 <__floatsisf+0x48>
    12fc:	96 e9       	ldi	r25, 0x96	; 150
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <__floatsisf+0x6a>
    1300:	77 23       	and	r23, r23
    1302:	21 f0       	breq	.+8      	; 0x130c <__floatsisf+0x54>
    1304:	9e e8       	ldi	r25, 0x8E	; 142
    1306:	87 2f       	mov	r24, r23
    1308:	76 2f       	mov	r23, r22
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <__floatsisf+0x5e>
    130c:	66 23       	and	r22, r22
    130e:	71 f0       	breq	.+28     	; 0x132c <__floatsisf+0x74>
    1310:	96 e8       	ldi	r25, 0x86	; 134
    1312:	86 2f       	mov	r24, r22
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	2a f0       	brmi	.+10     	; 0x1324 <__floatsisf+0x6c>
    131a:	9a 95       	dec	r25
    131c:	66 0f       	add	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	da f7       	brpl	.-10     	; 0x131a <__floatsisf+0x62>
    1324:	88 0f       	add	r24, r24
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	97 f9       	bld	r25, 7
    132c:	08 95       	ret

0000132e <__fp_inf>:
    132e:	97 f9       	bld	r25, 7
    1330:	9f 67       	ori	r25, 0x7F	; 127
    1332:	80 e8       	ldi	r24, 0x80	; 128
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	08 95       	ret

0000133a <__fp_nan>:
    133a:	9f ef       	ldi	r25, 0xFF	; 255
    133c:	80 ec       	ldi	r24, 0xC0	; 192
    133e:	08 95       	ret

00001340 <__fp_powser>:
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	1f 93       	push	r17
    1346:	0f 93       	push	r16
    1348:	ff 92       	push	r15
    134a:	ef 92       	push	r14
    134c:	df 92       	push	r13
    134e:	7b 01       	movw	r14, r22
    1350:	8c 01       	movw	r16, r24
    1352:	68 94       	set
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <__fp_powser+0x22>
    1356:	da 2e       	mov	r13, r26
    1358:	ef 01       	movw	r28, r30
    135a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3x>
    135e:	fe 01       	movw	r30, r28
    1360:	e8 94       	clt
    1362:	a5 91       	lpm	r26, Z+
    1364:	25 91       	lpm	r18, Z+
    1366:	35 91       	lpm	r19, Z+
    1368:	45 91       	lpm	r20, Z+
    136a:	55 91       	lpm	r21, Z+
    136c:	a6 f3       	brts	.-24     	; 0x1356 <__fp_powser+0x16>
    136e:	ef 01       	movw	r28, r30
    1370:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__addsf3x>
    1374:	fe 01       	movw	r30, r28
    1376:	97 01       	movw	r18, r14
    1378:	a8 01       	movw	r20, r16
    137a:	da 94       	dec	r13
    137c:	69 f7       	brne	.-38     	; 0x1358 <__fp_powser+0x18>
    137e:	df 90       	pop	r13
    1380:	ef 90       	pop	r14
    1382:	ff 90       	pop	r15
    1384:	0f 91       	pop	r16
    1386:	1f 91       	pop	r17
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <__fp_pscA>:
    138e:	00 24       	eor	r0, r0
    1390:	0a 94       	dec	r0
    1392:	16 16       	cp	r1, r22
    1394:	17 06       	cpc	r1, r23
    1396:	18 06       	cpc	r1, r24
    1398:	09 06       	cpc	r0, r25
    139a:	08 95       	ret

0000139c <__fp_pscB>:
    139c:	00 24       	eor	r0, r0
    139e:	0a 94       	dec	r0
    13a0:	12 16       	cp	r1, r18
    13a2:	13 06       	cpc	r1, r19
    13a4:	14 06       	cpc	r1, r20
    13a6:	05 06       	cpc	r0, r21
    13a8:	08 95       	ret

000013aa <__fp_round>:
    13aa:	09 2e       	mov	r0, r25
    13ac:	03 94       	inc	r0
    13ae:	00 0c       	add	r0, r0
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <__fp_round+0xc>
    13b2:	88 23       	and	r24, r24
    13b4:	52 f0       	brmi	.+20     	; 0x13ca <__fp_round+0x20>
    13b6:	bb 0f       	add	r27, r27
    13b8:	40 f4       	brcc	.+16     	; 0x13ca <__fp_round+0x20>
    13ba:	bf 2b       	or	r27, r31
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <__fp_round+0x18>
    13be:	60 ff       	sbrs	r22, 0
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <__fp_round+0x20>
    13c2:	6f 5f       	subi	r22, 0xFF	; 255
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	8f 4f       	sbci	r24, 0xFF	; 255
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	08 95       	ret

000013cc <__fp_split3>:
    13cc:	57 fd       	sbrc	r21, 7
    13ce:	90 58       	subi	r25, 0x80	; 128
    13d0:	44 0f       	add	r20, r20
    13d2:	55 1f       	adc	r21, r21
    13d4:	59 f0       	breq	.+22     	; 0x13ec <__fp_splitA+0x10>
    13d6:	5f 3f       	cpi	r21, 0xFF	; 255
    13d8:	71 f0       	breq	.+28     	; 0x13f6 <__fp_splitA+0x1a>
    13da:	47 95       	ror	r20

000013dc <__fp_splitA>:
    13dc:	88 0f       	add	r24, r24
    13de:	97 fb       	bst	r25, 7
    13e0:	99 1f       	adc	r25, r25
    13e2:	61 f0       	breq	.+24     	; 0x13fc <__fp_splitA+0x20>
    13e4:	9f 3f       	cpi	r25, 0xFF	; 255
    13e6:	79 f0       	breq	.+30     	; 0x1406 <__fp_splitA+0x2a>
    13e8:	87 95       	ror	r24
    13ea:	08 95       	ret
    13ec:	12 16       	cp	r1, r18
    13ee:	13 06       	cpc	r1, r19
    13f0:	14 06       	cpc	r1, r20
    13f2:	55 1f       	adc	r21, r21
    13f4:	f2 cf       	rjmp	.-28     	; 0x13da <__fp_split3+0xe>
    13f6:	46 95       	lsr	r20
    13f8:	f1 df       	rcall	.-30     	; 0x13dc <__fp_splitA>
    13fa:	08 c0       	rjmp	.+16     	; 0x140c <__fp_splitA+0x30>
    13fc:	16 16       	cp	r1, r22
    13fe:	17 06       	cpc	r1, r23
    1400:	18 06       	cpc	r1, r24
    1402:	99 1f       	adc	r25, r25
    1404:	f1 cf       	rjmp	.-30     	; 0x13e8 <__fp_splitA+0xc>
    1406:	86 95       	lsr	r24
    1408:	71 05       	cpc	r23, r1
    140a:	61 05       	cpc	r22, r1
    140c:	08 94       	sec
    140e:	08 95       	ret

00001410 <__fp_zero>:
    1410:	e8 94       	clt

00001412 <__fp_szero>:
    1412:	bb 27       	eor	r27, r27
    1414:	66 27       	eor	r22, r22
    1416:	77 27       	eor	r23, r23
    1418:	cb 01       	movw	r24, r22
    141a:	97 f9       	bld	r25, 7
    141c:	08 95       	ret

0000141e <inverse>:
    141e:	9b 01       	movw	r18, r22
    1420:	ac 01       	movw	r20, r24
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	80 e8       	ldi	r24, 0x80	; 128
    1428:	9f e3       	ldi	r25, 0x3F	; 63
    142a:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__divsf3>

0000142e <__mulsf3>:
    142e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3x>
    1432:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_round>
    1436:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_pscA>
    143a:	38 f0       	brcs	.+14     	; 0x144a <__mulsf3+0x1c>
    143c:	0e 94 ce 09 	call	0x139c	; 0x139c <__fp_pscB>
    1440:	20 f0       	brcs	.+8      	; 0x144a <__mulsf3+0x1c>
    1442:	95 23       	and	r25, r21
    1444:	11 f0       	breq	.+4      	; 0x144a <__mulsf3+0x1c>
    1446:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    144a:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>
    144e:	11 24       	eor	r1, r1
    1450:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_szero>

00001454 <__mulsf3x>:
    1454:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_split3>
    1458:	70 f3       	brcs	.-36     	; 0x1436 <__mulsf3+0x8>

0000145a <__mulsf3_pse>:
    145a:	95 9f       	mul	r25, r21
    145c:	c1 f3       	breq	.-16     	; 0x144e <__mulsf3+0x20>
    145e:	95 0f       	add	r25, r21
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	55 1f       	adc	r21, r21
    1464:	62 9f       	mul	r22, r18
    1466:	f0 01       	movw	r30, r0
    1468:	72 9f       	mul	r23, r18
    146a:	bb 27       	eor	r27, r27
    146c:	f0 0d       	add	r31, r0
    146e:	b1 1d       	adc	r27, r1
    1470:	63 9f       	mul	r22, r19
    1472:	aa 27       	eor	r26, r26
    1474:	f0 0d       	add	r31, r0
    1476:	b1 1d       	adc	r27, r1
    1478:	aa 1f       	adc	r26, r26
    147a:	64 9f       	mul	r22, r20
    147c:	66 27       	eor	r22, r22
    147e:	b0 0d       	add	r27, r0
    1480:	a1 1d       	adc	r26, r1
    1482:	66 1f       	adc	r22, r22
    1484:	82 9f       	mul	r24, r18
    1486:	22 27       	eor	r18, r18
    1488:	b0 0d       	add	r27, r0
    148a:	a1 1d       	adc	r26, r1
    148c:	62 1f       	adc	r22, r18
    148e:	73 9f       	mul	r23, r19
    1490:	b0 0d       	add	r27, r0
    1492:	a1 1d       	adc	r26, r1
    1494:	62 1f       	adc	r22, r18
    1496:	83 9f       	mul	r24, r19
    1498:	a0 0d       	add	r26, r0
    149a:	61 1d       	adc	r22, r1
    149c:	22 1f       	adc	r18, r18
    149e:	74 9f       	mul	r23, r20
    14a0:	33 27       	eor	r19, r19
    14a2:	a0 0d       	add	r26, r0
    14a4:	61 1d       	adc	r22, r1
    14a6:	23 1f       	adc	r18, r19
    14a8:	84 9f       	mul	r24, r20
    14aa:	60 0d       	add	r22, r0
    14ac:	21 1d       	adc	r18, r1
    14ae:	82 2f       	mov	r24, r18
    14b0:	76 2f       	mov	r23, r22
    14b2:	6a 2f       	mov	r22, r26
    14b4:	11 24       	eor	r1, r1
    14b6:	9f 57       	subi	r25, 0x7F	; 127
    14b8:	50 40       	sbci	r21, 0x00	; 0
    14ba:	9a f0       	brmi	.+38     	; 0x14e2 <__mulsf3_pse+0x88>
    14bc:	f1 f0       	breq	.+60     	; 0x14fa <__mulsf3_pse+0xa0>
    14be:	88 23       	and	r24, r24
    14c0:	4a f0       	brmi	.+18     	; 0x14d4 <__mulsf3_pse+0x7a>
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	bb 1f       	adc	r27, r27
    14c8:	66 1f       	adc	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	91 50       	subi	r25, 0x01	; 1
    14d0:	50 40       	sbci	r21, 0x00	; 0
    14d2:	a9 f7       	brne	.-22     	; 0x14be <__mulsf3_pse+0x64>
    14d4:	9e 3f       	cpi	r25, 0xFE	; 254
    14d6:	51 05       	cpc	r21, r1
    14d8:	80 f0       	brcs	.+32     	; 0x14fa <__mulsf3_pse+0xa0>
    14da:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    14de:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_szero>
    14e2:	5f 3f       	cpi	r21, 0xFF	; 255
    14e4:	e4 f3       	brlt	.-8      	; 0x14de <__mulsf3_pse+0x84>
    14e6:	98 3e       	cpi	r25, 0xE8	; 232
    14e8:	d4 f3       	brlt	.-12     	; 0x14de <__mulsf3_pse+0x84>
    14ea:	86 95       	lsr	r24
    14ec:	77 95       	ror	r23
    14ee:	67 95       	ror	r22
    14f0:	b7 95       	ror	r27
    14f2:	f7 95       	ror	r31
    14f4:	e7 95       	ror	r30
    14f6:	9f 5f       	subi	r25, 0xFF	; 255
    14f8:	c1 f7       	brne	.-16     	; 0x14ea <__mulsf3_pse+0x90>
    14fa:	fe 2b       	or	r31, r30
    14fc:	88 0f       	add	r24, r24
    14fe:	91 1d       	adc	r25, r1
    1500:	96 95       	lsr	r25
    1502:	87 95       	ror	r24
    1504:	97 f9       	bld	r25, 7
    1506:	08 95       	ret

00001508 <square>:
    1508:	9b 01       	movw	r18, r22
    150a:	ac 01       	movw	r20, r24
    150c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__mulsf3>

00001510 <__subsf3>:
    1510:	50 58       	subi	r21, 0x80	; 128

00001512 <__addsf3>:
    1512:	bb 27       	eor	r27, r27
    1514:	aa 27       	eor	r26, r26
    1516:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__addsf3x>
    151a:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_round>
    151e:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_pscA>
    1522:	38 f0       	brcs	.+14     	; 0x1532 <__addsf3+0x20>
    1524:	0e 94 ce 09 	call	0x139c	; 0x139c <__fp_pscB>
    1528:	20 f0       	brcs	.+8      	; 0x1532 <__addsf3+0x20>
    152a:	39 f4       	brne	.+14     	; 0x153a <__addsf3+0x28>
    152c:	9f 3f       	cpi	r25, 0xFF	; 255
    152e:	19 f4       	brne	.+6      	; 0x1536 <__addsf3+0x24>
    1530:	26 f4       	brtc	.+8      	; 0x153a <__addsf3+0x28>
    1532:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>
    1536:	0e f4       	brtc	.+2      	; 0x153a <__addsf3+0x28>
    1538:	e0 95       	com	r30
    153a:	e7 fb       	bst	r30, 7
    153c:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>

00001540 <__addsf3x>:
    1540:	e9 2f       	mov	r30, r25
    1542:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_split3>
    1546:	58 f3       	brcs	.-42     	; 0x151e <__addsf3+0xc>
    1548:	ba 17       	cp	r27, r26
    154a:	62 07       	cpc	r22, r18
    154c:	73 07       	cpc	r23, r19
    154e:	84 07       	cpc	r24, r20
    1550:	95 07       	cpc	r25, r21
    1552:	20 f0       	brcs	.+8      	; 0x155c <__addsf3x+0x1c>
    1554:	79 f4       	brne	.+30     	; 0x1574 <__addsf3x+0x34>
    1556:	a6 f5       	brtc	.+104    	; 0x15c0 <__addsf3x+0x80>
    1558:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_zero>
    155c:	0e f4       	brtc	.+2      	; 0x1560 <__addsf3x+0x20>
    155e:	e0 95       	com	r30
    1560:	0b 2e       	mov	r0, r27
    1562:	ba 2f       	mov	r27, r26
    1564:	a0 2d       	mov	r26, r0
    1566:	0b 01       	movw	r0, r22
    1568:	b9 01       	movw	r22, r18
    156a:	90 01       	movw	r18, r0
    156c:	0c 01       	movw	r0, r24
    156e:	ca 01       	movw	r24, r20
    1570:	a0 01       	movw	r20, r0
    1572:	11 24       	eor	r1, r1
    1574:	ff 27       	eor	r31, r31
    1576:	59 1b       	sub	r21, r25
    1578:	99 f0       	breq	.+38     	; 0x15a0 <__addsf3x+0x60>
    157a:	59 3f       	cpi	r21, 0xF9	; 249
    157c:	50 f4       	brcc	.+20     	; 0x1592 <__addsf3x+0x52>
    157e:	50 3e       	cpi	r21, 0xE0	; 224
    1580:	68 f1       	brcs	.+90     	; 0x15dc <__addsf3x+0x9c>
    1582:	1a 16       	cp	r1, r26
    1584:	f0 40       	sbci	r31, 0x00	; 0
    1586:	a2 2f       	mov	r26, r18
    1588:	23 2f       	mov	r18, r19
    158a:	34 2f       	mov	r19, r20
    158c:	44 27       	eor	r20, r20
    158e:	58 5f       	subi	r21, 0xF8	; 248
    1590:	f3 cf       	rjmp	.-26     	; 0x1578 <__addsf3x+0x38>
    1592:	46 95       	lsr	r20
    1594:	37 95       	ror	r19
    1596:	27 95       	ror	r18
    1598:	a7 95       	ror	r26
    159a:	f0 40       	sbci	r31, 0x00	; 0
    159c:	53 95       	inc	r21
    159e:	c9 f7       	brne	.-14     	; 0x1592 <__addsf3x+0x52>
    15a0:	7e f4       	brtc	.+30     	; 0x15c0 <__addsf3x+0x80>
    15a2:	1f 16       	cp	r1, r31
    15a4:	ba 0b       	sbc	r27, r26
    15a6:	62 0b       	sbc	r22, r18
    15a8:	73 0b       	sbc	r23, r19
    15aa:	84 0b       	sbc	r24, r20
    15ac:	ba f0       	brmi	.+46     	; 0x15dc <__addsf3x+0x9c>
    15ae:	91 50       	subi	r25, 0x01	; 1
    15b0:	a1 f0       	breq	.+40     	; 0x15da <__addsf3x+0x9a>
    15b2:	ff 0f       	add	r31, r31
    15b4:	bb 1f       	adc	r27, r27
    15b6:	66 1f       	adc	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	88 1f       	adc	r24, r24
    15bc:	c2 f7       	brpl	.-16     	; 0x15ae <__addsf3x+0x6e>
    15be:	0e c0       	rjmp	.+28     	; 0x15dc <__addsf3x+0x9c>
    15c0:	ba 0f       	add	r27, r26
    15c2:	62 1f       	adc	r22, r18
    15c4:	73 1f       	adc	r23, r19
    15c6:	84 1f       	adc	r24, r20
    15c8:	48 f4       	brcc	.+18     	; 0x15dc <__addsf3x+0x9c>
    15ca:	87 95       	ror	r24
    15cc:	77 95       	ror	r23
    15ce:	67 95       	ror	r22
    15d0:	b7 95       	ror	r27
    15d2:	f7 95       	ror	r31
    15d4:	9e 3f       	cpi	r25, 0xFE	; 254
    15d6:	08 f0       	brcs	.+2      	; 0x15da <__addsf3x+0x9a>
    15d8:	b0 cf       	rjmp	.-160    	; 0x153a <__addsf3+0x28>
    15da:	93 95       	inc	r25
    15dc:	88 0f       	add	r24, r24
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <__addsf3x+0xa2>
    15e0:	99 27       	eor	r25, r25
    15e2:	ee 0f       	add	r30, r30
    15e4:	97 95       	ror	r25
    15e6:	87 95       	ror	r24
    15e8:	08 95       	ret

000015ea <__divmodhi4>:
    15ea:	97 fb       	bst	r25, 7
    15ec:	07 2e       	mov	r0, r23
    15ee:	16 f4       	brtc	.+4      	; 0x15f4 <__divmodhi4+0xa>
    15f0:	00 94       	com	r0
    15f2:	07 d0       	rcall	.+14     	; 0x1602 <__divmodhi4_neg1>
    15f4:	77 fd       	sbrc	r23, 7
    15f6:	09 d0       	rcall	.+18     	; 0x160a <__divmodhi4_neg2>
    15f8:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
    15fc:	07 fc       	sbrc	r0, 7
    15fe:	05 d0       	rcall	.+10     	; 0x160a <__divmodhi4_neg2>
    1600:	3e f4       	brtc	.+14     	; 0x1610 <__divmodhi4_exit>

00001602 <__divmodhi4_neg1>:
    1602:	90 95       	com	r25
    1604:	81 95       	neg	r24
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	08 95       	ret

0000160a <__divmodhi4_neg2>:
    160a:	70 95       	com	r23
    160c:	61 95       	neg	r22
    160e:	7f 4f       	sbci	r23, 0xFF	; 255

00001610 <__divmodhi4_exit>:
    1610:	08 95       	ret

00001612 <__udivmodhi4>:
    1612:	aa 1b       	sub	r26, r26
    1614:	bb 1b       	sub	r27, r27
    1616:	51 e1       	ldi	r21, 0x11	; 17
    1618:	07 c0       	rjmp	.+14     	; 0x1628 <__udivmodhi4_ep>

0000161a <__udivmodhi4_loop>:
    161a:	aa 1f       	adc	r26, r26
    161c:	bb 1f       	adc	r27, r27
    161e:	a6 17       	cp	r26, r22
    1620:	b7 07       	cpc	r27, r23
    1622:	10 f0       	brcs	.+4      	; 0x1628 <__udivmodhi4_ep>
    1624:	a6 1b       	sub	r26, r22
    1626:	b7 0b       	sbc	r27, r23

00001628 <__udivmodhi4_ep>:
    1628:	88 1f       	adc	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	5a 95       	dec	r21
    162e:	a9 f7       	brne	.-22     	; 0x161a <__udivmodhi4_loop>
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	08 95       	ret

0000163a <malloc>:
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	82 30       	cpi	r24, 0x02	; 2
    1644:	91 05       	cpc	r25, r1
    1646:	10 f4       	brcc	.+4      	; 0x164c <malloc+0x12>
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <__flp>
    1650:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <__flp+0x1>
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	a0 e0       	ldi	r26, 0x00	; 0
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	30 97       	sbiw	r30, 0x00	; 0
    165e:	19 f1       	breq	.+70     	; 0x16a6 <malloc+0x6c>
    1660:	40 81       	ld	r20, Z
    1662:	51 81       	ldd	r21, Z+1	; 0x01
    1664:	02 81       	ldd	r16, Z+2	; 0x02
    1666:	13 81       	ldd	r17, Z+3	; 0x03
    1668:	48 17       	cp	r20, r24
    166a:	59 07       	cpc	r21, r25
    166c:	c8 f0       	brcs	.+50     	; 0x16a0 <malloc+0x66>
    166e:	84 17       	cp	r24, r20
    1670:	95 07       	cpc	r25, r21
    1672:	69 f4       	brne	.+26     	; 0x168e <malloc+0x54>
    1674:	10 97       	sbiw	r26, 0x00	; 0
    1676:	31 f0       	breq	.+12     	; 0x1684 <malloc+0x4a>
    1678:	12 96       	adiw	r26, 0x02	; 2
    167a:	0c 93       	st	X, r16
    167c:	12 97       	sbiw	r26, 0x02	; 2
    167e:	13 96       	adiw	r26, 0x03	; 3
    1680:	1c 93       	st	X, r17
    1682:	27 c0       	rjmp	.+78     	; 0x16d2 <malloc+0x98>
    1684:	00 93 b2 02 	sts	0x02B2, r16	; 0x8002b2 <__flp>
    1688:	10 93 b3 02 	sts	0x02B3, r17	; 0x8002b3 <__flp+0x1>
    168c:	22 c0       	rjmp	.+68     	; 0x16d2 <malloc+0x98>
    168e:	21 15       	cp	r18, r1
    1690:	31 05       	cpc	r19, r1
    1692:	19 f0       	breq	.+6      	; 0x169a <malloc+0x60>
    1694:	42 17       	cp	r20, r18
    1696:	53 07       	cpc	r21, r19
    1698:	18 f4       	brcc	.+6      	; 0x16a0 <malloc+0x66>
    169a:	9a 01       	movw	r18, r20
    169c:	bd 01       	movw	r22, r26
    169e:	ef 01       	movw	r28, r30
    16a0:	df 01       	movw	r26, r30
    16a2:	f8 01       	movw	r30, r16
    16a4:	db cf       	rjmp	.-74     	; 0x165c <malloc+0x22>
    16a6:	21 15       	cp	r18, r1
    16a8:	31 05       	cpc	r19, r1
    16aa:	f9 f0       	breq	.+62     	; 0x16ea <malloc+0xb0>
    16ac:	28 1b       	sub	r18, r24
    16ae:	39 0b       	sbc	r19, r25
    16b0:	24 30       	cpi	r18, 0x04	; 4
    16b2:	31 05       	cpc	r19, r1
    16b4:	80 f4       	brcc	.+32     	; 0x16d6 <malloc+0x9c>
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	61 15       	cp	r22, r1
    16bc:	71 05       	cpc	r23, r1
    16be:	21 f0       	breq	.+8      	; 0x16c8 <malloc+0x8e>
    16c0:	fb 01       	movw	r30, r22
    16c2:	93 83       	std	Z+3, r25	; 0x03
    16c4:	82 83       	std	Z+2, r24	; 0x02
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <malloc+0x96>
    16c8:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <__flp+0x1>
    16cc:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <__flp>
    16d0:	fe 01       	movw	r30, r28
    16d2:	32 96       	adiw	r30, 0x02	; 2
    16d4:	44 c0       	rjmp	.+136    	; 0x175e <malloc+0x124>
    16d6:	fe 01       	movw	r30, r28
    16d8:	e2 0f       	add	r30, r18
    16da:	f3 1f       	adc	r31, r19
    16dc:	81 93       	st	Z+, r24
    16de:	91 93       	st	Z+, r25
    16e0:	22 50       	subi	r18, 0x02	; 2
    16e2:	31 09       	sbc	r19, r1
    16e4:	39 83       	std	Y+1, r19	; 0x01
    16e6:	28 83       	st	Y, r18
    16e8:	3a c0       	rjmp	.+116    	; 0x175e <malloc+0x124>
    16ea:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__brkval>
    16ee:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__brkval+0x1>
    16f2:	23 2b       	or	r18, r19
    16f4:	41 f4       	brne	.+16     	; 0x1706 <malloc+0xcc>
    16f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    16fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    16fe:	30 93 b1 02 	sts	0x02B1, r19	; 0x8002b1 <__brkval+0x1>
    1702:	20 93 b0 02 	sts	0x02B0, r18	; 0x8002b0 <__brkval>
    1706:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    170a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    170e:	21 15       	cp	r18, r1
    1710:	31 05       	cpc	r19, r1
    1712:	41 f4       	brne	.+16     	; 0x1724 <malloc+0xea>
    1714:	2d b7       	in	r18, 0x3d	; 61
    1716:	3e b7       	in	r19, 0x3e	; 62
    1718:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    171c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1720:	24 1b       	sub	r18, r20
    1722:	35 0b       	sbc	r19, r21
    1724:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <__brkval>
    1728:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <__brkval+0x1>
    172c:	e2 17       	cp	r30, r18
    172e:	f3 07       	cpc	r31, r19
    1730:	a0 f4       	brcc	.+40     	; 0x175a <malloc+0x120>
    1732:	2e 1b       	sub	r18, r30
    1734:	3f 0b       	sbc	r19, r31
    1736:	28 17       	cp	r18, r24
    1738:	39 07       	cpc	r19, r25
    173a:	78 f0       	brcs	.+30     	; 0x175a <malloc+0x120>
    173c:	ac 01       	movw	r20, r24
    173e:	4e 5f       	subi	r20, 0xFE	; 254
    1740:	5f 4f       	sbci	r21, 0xFF	; 255
    1742:	24 17       	cp	r18, r20
    1744:	35 07       	cpc	r19, r21
    1746:	48 f0       	brcs	.+18     	; 0x175a <malloc+0x120>
    1748:	4e 0f       	add	r20, r30
    174a:	5f 1f       	adc	r21, r31
    174c:	50 93 b1 02 	sts	0x02B1, r21	; 0x8002b1 <__brkval+0x1>
    1750:	40 93 b0 02 	sts	0x02B0, r20	; 0x8002b0 <__brkval>
    1754:	81 93       	st	Z+, r24
    1756:	91 93       	st	Z+, r25
    1758:	02 c0       	rjmp	.+4      	; 0x175e <malloc+0x124>
    175a:	e0 e0       	ldi	r30, 0x00	; 0
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	cf 01       	movw	r24, r30
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	08 95       	ret

0000176a <free>:
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	09 f4       	brne	.+2      	; 0x1774 <free+0xa>
    1772:	81 c0       	rjmp	.+258    	; 0x1876 <free+0x10c>
    1774:	fc 01       	movw	r30, r24
    1776:	32 97       	sbiw	r30, 0x02	; 2
    1778:	13 82       	std	Z+3, r1	; 0x03
    177a:	12 82       	std	Z+2, r1	; 0x02
    177c:	a0 91 b2 02 	lds	r26, 0x02B2	; 0x8002b2 <__flp>
    1780:	b0 91 b3 02 	lds	r27, 0x02B3	; 0x8002b3 <__flp+0x1>
    1784:	10 97       	sbiw	r26, 0x00	; 0
    1786:	81 f4       	brne	.+32     	; 0x17a8 <free+0x3e>
    1788:	20 81       	ld	r18, Z
    178a:	31 81       	ldd	r19, Z+1	; 0x01
    178c:	82 0f       	add	r24, r18
    178e:	93 1f       	adc	r25, r19
    1790:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__brkval>
    1794:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__brkval+0x1>
    1798:	28 17       	cp	r18, r24
    179a:	39 07       	cpc	r19, r25
    179c:	51 f5       	brne	.+84     	; 0x17f2 <free+0x88>
    179e:	f0 93 b1 02 	sts	0x02B1, r31	; 0x8002b1 <__brkval+0x1>
    17a2:	e0 93 b0 02 	sts	0x02B0, r30	; 0x8002b0 <__brkval>
    17a6:	67 c0       	rjmp	.+206    	; 0x1876 <free+0x10c>
    17a8:	ed 01       	movw	r28, r26
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	ce 17       	cp	r28, r30
    17b0:	df 07       	cpc	r29, r31
    17b2:	40 f4       	brcc	.+16     	; 0x17c4 <free+0x5a>
    17b4:	4a 81       	ldd	r20, Y+2	; 0x02
    17b6:	5b 81       	ldd	r21, Y+3	; 0x03
    17b8:	9e 01       	movw	r18, r28
    17ba:	41 15       	cp	r20, r1
    17bc:	51 05       	cpc	r21, r1
    17be:	f1 f0       	breq	.+60     	; 0x17fc <free+0x92>
    17c0:	ea 01       	movw	r28, r20
    17c2:	f5 cf       	rjmp	.-22     	; 0x17ae <free+0x44>
    17c4:	d3 83       	std	Z+3, r29	; 0x03
    17c6:	c2 83       	std	Z+2, r28	; 0x02
    17c8:	40 81       	ld	r20, Z
    17ca:	51 81       	ldd	r21, Z+1	; 0x01
    17cc:	84 0f       	add	r24, r20
    17ce:	95 1f       	adc	r25, r21
    17d0:	c8 17       	cp	r28, r24
    17d2:	d9 07       	cpc	r29, r25
    17d4:	59 f4       	brne	.+22     	; 0x17ec <free+0x82>
    17d6:	88 81       	ld	r24, Y
    17d8:	99 81       	ldd	r25, Y+1	; 0x01
    17da:	84 0f       	add	r24, r20
    17dc:	95 1f       	adc	r25, r21
    17de:	02 96       	adiw	r24, 0x02	; 2
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	93 83       	std	Z+3, r25	; 0x03
    17ea:	82 83       	std	Z+2, r24	; 0x02
    17ec:	21 15       	cp	r18, r1
    17ee:	31 05       	cpc	r19, r1
    17f0:	29 f4       	brne	.+10     	; 0x17fc <free+0x92>
    17f2:	f0 93 b3 02 	sts	0x02B3, r31	; 0x8002b3 <__flp+0x1>
    17f6:	e0 93 b2 02 	sts	0x02B2, r30	; 0x8002b2 <__flp>
    17fa:	3d c0       	rjmp	.+122    	; 0x1876 <free+0x10c>
    17fc:	e9 01       	movw	r28, r18
    17fe:	fb 83       	std	Y+3, r31	; 0x03
    1800:	ea 83       	std	Y+2, r30	; 0x02
    1802:	49 91       	ld	r20, Y+
    1804:	59 91       	ld	r21, Y+
    1806:	c4 0f       	add	r28, r20
    1808:	d5 1f       	adc	r29, r21
    180a:	ec 17       	cp	r30, r28
    180c:	fd 07       	cpc	r31, r29
    180e:	61 f4       	brne	.+24     	; 0x1828 <free+0xbe>
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	84 0f       	add	r24, r20
    1816:	95 1f       	adc	r25, r21
    1818:	02 96       	adiw	r24, 0x02	; 2
    181a:	e9 01       	movw	r28, r18
    181c:	99 83       	std	Y+1, r25	; 0x01
    181e:	88 83       	st	Y, r24
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	9b 83       	std	Y+3, r25	; 0x03
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	e0 e0       	ldi	r30, 0x00	; 0
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	12 96       	adiw	r26, 0x02	; 2
    182e:	8d 91       	ld	r24, X+
    1830:	9c 91       	ld	r25, X
    1832:	13 97       	sbiw	r26, 0x03	; 3
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	19 f0       	breq	.+6      	; 0x183e <free+0xd4>
    1838:	fd 01       	movw	r30, r26
    183a:	dc 01       	movw	r26, r24
    183c:	f7 cf       	rjmp	.-18     	; 0x182c <free+0xc2>
    183e:	8d 91       	ld	r24, X+
    1840:	9c 91       	ld	r25, X
    1842:	11 97       	sbiw	r26, 0x01	; 1
    1844:	9d 01       	movw	r18, r26
    1846:	2e 5f       	subi	r18, 0xFE	; 254
    1848:	3f 4f       	sbci	r19, 0xFF	; 255
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__brkval>
    1852:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__brkval+0x1>
    1856:	28 17       	cp	r18, r24
    1858:	39 07       	cpc	r19, r25
    185a:	69 f4       	brne	.+26     	; 0x1876 <free+0x10c>
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	29 f4       	brne	.+10     	; 0x186a <free+0x100>
    1860:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <__flp+0x1>
    1864:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <__flp>
    1868:	02 c0       	rjmp	.+4      	; 0x186e <free+0x104>
    186a:	13 82       	std	Z+3, r1	; 0x03
    186c:	12 82       	std	Z+2, r1	; 0x02
    186e:	b0 93 b1 02 	sts	0x02B1, r27	; 0x8002b1 <__brkval+0x1>
    1872:	a0 93 b0 02 	sts	0x02B0, r26	; 0x8002b0 <__brkval>
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <strcpy>:
    187c:	fb 01       	movw	r30, r22
    187e:	dc 01       	movw	r26, r24
    1880:	01 90       	ld	r0, Z+
    1882:	0d 92       	st	X+, r0
    1884:	00 20       	and	r0, r0
    1886:	e1 f7       	brne	.-8      	; 0x1880 <strcpy+0x4>
    1888:	08 95       	ret

0000188a <fdevopen>:
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	31 f4       	brne	.+12     	; 0x18a2 <fdevopen+0x18>
    1896:	61 15       	cp	r22, r1
    1898:	71 05       	cpc	r23, r1
    189a:	19 f4       	brne	.+6      	; 0x18a2 <fdevopen+0x18>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	3a c0       	rjmp	.+116    	; 0x1916 <fdevopen+0x8c>
    18a2:	8b 01       	movw	r16, r22
    18a4:	ec 01       	movw	r28, r24
    18a6:	6e e0       	ldi	r22, 0x0E	; 14
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <calloc>
    18b2:	fc 01       	movw	r30, r24
    18b4:	89 2b       	or	r24, r25
    18b6:	91 f3       	breq	.-28     	; 0x189c <fdevopen+0x12>
    18b8:	80 e8       	ldi	r24, 0x80	; 128
    18ba:	83 83       	std	Z+3, r24	; 0x03
    18bc:	01 15       	cp	r16, r1
    18be:	11 05       	cpc	r17, r1
    18c0:	71 f0       	breq	.+28     	; 0x18de <fdevopen+0x54>
    18c2:	13 87       	std	Z+11, r17	; 0x0b
    18c4:	02 87       	std	Z+10, r16	; 0x0a
    18c6:	81 e8       	ldi	r24, 0x81	; 129
    18c8:	83 83       	std	Z+3, r24	; 0x03
    18ca:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__iob>
    18ce:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__iob+0x1>
    18d2:	89 2b       	or	r24, r25
    18d4:	21 f4       	brne	.+8      	; 0x18de <fdevopen+0x54>
    18d6:	f0 93 b5 02 	sts	0x02B5, r31	; 0x8002b5 <__iob+0x1>
    18da:	e0 93 b4 02 	sts	0x02B4, r30	; 0x8002b4 <__iob>
    18de:	20 97       	sbiw	r28, 0x00	; 0
    18e0:	c9 f0       	breq	.+50     	; 0x1914 <fdevopen+0x8a>
    18e2:	d1 87       	std	Z+9, r29	; 0x09
    18e4:	c0 87       	std	Z+8, r28	; 0x08
    18e6:	83 81       	ldd	r24, Z+3	; 0x03
    18e8:	82 60       	ori	r24, 0x02	; 2
    18ea:	83 83       	std	Z+3, r24	; 0x03
    18ec:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__iob+0x2>
    18f0:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__iob+0x3>
    18f4:	89 2b       	or	r24, r25
    18f6:	71 f4       	brne	.+28     	; 0x1914 <fdevopen+0x8a>
    18f8:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <__iob+0x3>
    18fc:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <__iob+0x2>
    1900:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__iob+0x4>
    1904:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__iob+0x5>
    1908:	89 2b       	or	r24, r25
    190a:	21 f4       	brne	.+8      	; 0x1914 <fdevopen+0x8a>
    190c:	f0 93 b9 02 	sts	0x02B9, r31	; 0x8002b9 <__iob+0x5>
    1910:	e0 93 b8 02 	sts	0x02B8, r30	; 0x8002b8 <__iob+0x4>
    1914:	cf 01       	movw	r24, r30
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	08 95       	ret

00001920 <printf>:
    1920:	a0 e0       	ldi	r26, 0x00	; 0
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e6 e9       	ldi	r30, 0x96	; 150
    1926:	fc e0       	ldi	r31, 0x0C	; 12
    1928:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__prologue_saves__+0x20>
    192c:	ae 01       	movw	r20, r28
    192e:	4b 5f       	subi	r20, 0xFB	; 251
    1930:	5f 4f       	sbci	r21, 0xFF	; 255
    1932:	fa 01       	movw	r30, r20
    1934:	61 91       	ld	r22, Z+
    1936:	71 91       	ld	r23, Z+
    1938:	af 01       	movw	r20, r30
    193a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__iob+0x2>
    193e:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__iob+0x3>
    1942:	0e 94 a6 0c 	call	0x194c	; 0x194c <vfprintf>
    1946:	e2 e0       	ldi	r30, 0x02	; 2
    1948:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x20>

0000194c <vfprintf>:
    194c:	ab e0       	ldi	r26, 0x0B	; 11
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ec ea       	ldi	r30, 0xAC	; 172
    1952:	fc e0       	ldi	r31, 0x0C	; 12
    1954:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__prologue_saves__>
    1958:	6c 01       	movw	r12, r24
    195a:	7b 01       	movw	r14, r22
    195c:	8a 01       	movw	r16, r20
    195e:	fc 01       	movw	r30, r24
    1960:	17 82       	std	Z+7, r1	; 0x07
    1962:	16 82       	std	Z+6, r1	; 0x06
    1964:	83 81       	ldd	r24, Z+3	; 0x03
    1966:	81 ff       	sbrs	r24, 1
    1968:	cc c1       	rjmp	.+920    	; 0x1d02 <vfprintf+0x3b6>
    196a:	ce 01       	movw	r24, r28
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	3c 01       	movw	r6, r24
    1970:	f6 01       	movw	r30, r12
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	f7 01       	movw	r30, r14
    1976:	93 fd       	sbrc	r25, 3
    1978:	85 91       	lpm	r24, Z+
    197a:	93 ff       	sbrs	r25, 3
    197c:	81 91       	ld	r24, Z+
    197e:	7f 01       	movw	r14, r30
    1980:	88 23       	and	r24, r24
    1982:	09 f4       	brne	.+2      	; 0x1986 <vfprintf+0x3a>
    1984:	ba c1       	rjmp	.+884    	; 0x1cfa <vfprintf+0x3ae>
    1986:	85 32       	cpi	r24, 0x25	; 37
    1988:	39 f4       	brne	.+14     	; 0x1998 <vfprintf+0x4c>
    198a:	93 fd       	sbrc	r25, 3
    198c:	85 91       	lpm	r24, Z+
    198e:	93 ff       	sbrs	r25, 3
    1990:	81 91       	ld	r24, Z+
    1992:	7f 01       	movw	r14, r30
    1994:	85 32       	cpi	r24, 0x25	; 37
    1996:	29 f4       	brne	.+10     	; 0x19a2 <vfprintf+0x56>
    1998:	b6 01       	movw	r22, r12
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    19a0:	e7 cf       	rjmp	.-50     	; 0x1970 <vfprintf+0x24>
    19a2:	91 2c       	mov	r9, r1
    19a4:	21 2c       	mov	r2, r1
    19a6:	31 2c       	mov	r3, r1
    19a8:	ff e1       	ldi	r31, 0x1F	; 31
    19aa:	f3 15       	cp	r31, r3
    19ac:	d8 f0       	brcs	.+54     	; 0x19e4 <vfprintf+0x98>
    19ae:	8b 32       	cpi	r24, 0x2B	; 43
    19b0:	79 f0       	breq	.+30     	; 0x19d0 <vfprintf+0x84>
    19b2:	38 f4       	brcc	.+14     	; 0x19c2 <vfprintf+0x76>
    19b4:	80 32       	cpi	r24, 0x20	; 32
    19b6:	79 f0       	breq	.+30     	; 0x19d6 <vfprintf+0x8a>
    19b8:	83 32       	cpi	r24, 0x23	; 35
    19ba:	a1 f4       	brne	.+40     	; 0x19e4 <vfprintf+0x98>
    19bc:	23 2d       	mov	r18, r3
    19be:	20 61       	ori	r18, 0x10	; 16
    19c0:	1d c0       	rjmp	.+58     	; 0x19fc <vfprintf+0xb0>
    19c2:	8d 32       	cpi	r24, 0x2D	; 45
    19c4:	61 f0       	breq	.+24     	; 0x19de <vfprintf+0x92>
    19c6:	80 33       	cpi	r24, 0x30	; 48
    19c8:	69 f4       	brne	.+26     	; 0x19e4 <vfprintf+0x98>
    19ca:	23 2d       	mov	r18, r3
    19cc:	21 60       	ori	r18, 0x01	; 1
    19ce:	16 c0       	rjmp	.+44     	; 0x19fc <vfprintf+0xb0>
    19d0:	83 2d       	mov	r24, r3
    19d2:	82 60       	ori	r24, 0x02	; 2
    19d4:	38 2e       	mov	r3, r24
    19d6:	e3 2d       	mov	r30, r3
    19d8:	e4 60       	ori	r30, 0x04	; 4
    19da:	3e 2e       	mov	r3, r30
    19dc:	2a c0       	rjmp	.+84     	; 0x1a32 <vfprintf+0xe6>
    19de:	f3 2d       	mov	r31, r3
    19e0:	f8 60       	ori	r31, 0x08	; 8
    19e2:	1d c0       	rjmp	.+58     	; 0x1a1e <vfprintf+0xd2>
    19e4:	37 fc       	sbrc	r3, 7
    19e6:	2d c0       	rjmp	.+90     	; 0x1a42 <vfprintf+0xf6>
    19e8:	20 ed       	ldi	r18, 0xD0	; 208
    19ea:	28 0f       	add	r18, r24
    19ec:	2a 30       	cpi	r18, 0x0A	; 10
    19ee:	40 f0       	brcs	.+16     	; 0x1a00 <vfprintf+0xb4>
    19f0:	8e 32       	cpi	r24, 0x2E	; 46
    19f2:	b9 f4       	brne	.+46     	; 0x1a22 <vfprintf+0xd6>
    19f4:	36 fc       	sbrc	r3, 6
    19f6:	81 c1       	rjmp	.+770    	; 0x1cfa <vfprintf+0x3ae>
    19f8:	23 2d       	mov	r18, r3
    19fa:	20 64       	ori	r18, 0x40	; 64
    19fc:	32 2e       	mov	r3, r18
    19fe:	19 c0       	rjmp	.+50     	; 0x1a32 <vfprintf+0xe6>
    1a00:	36 fe       	sbrs	r3, 6
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <vfprintf+0xc4>
    1a04:	8a e0       	ldi	r24, 0x0A	; 10
    1a06:	98 9e       	mul	r9, r24
    1a08:	20 0d       	add	r18, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	92 2e       	mov	r9, r18
    1a0e:	11 c0       	rjmp	.+34     	; 0x1a32 <vfprintf+0xe6>
    1a10:	ea e0       	ldi	r30, 0x0A	; 10
    1a12:	2e 9e       	mul	r2, r30
    1a14:	20 0d       	add	r18, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	22 2e       	mov	r2, r18
    1a1a:	f3 2d       	mov	r31, r3
    1a1c:	f0 62       	ori	r31, 0x20	; 32
    1a1e:	3f 2e       	mov	r3, r31
    1a20:	08 c0       	rjmp	.+16     	; 0x1a32 <vfprintf+0xe6>
    1a22:	8c 36       	cpi	r24, 0x6C	; 108
    1a24:	21 f4       	brne	.+8      	; 0x1a2e <vfprintf+0xe2>
    1a26:	83 2d       	mov	r24, r3
    1a28:	80 68       	ori	r24, 0x80	; 128
    1a2a:	38 2e       	mov	r3, r24
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <vfprintf+0xe6>
    1a2e:	88 36       	cpi	r24, 0x68	; 104
    1a30:	41 f4       	brne	.+16     	; 0x1a42 <vfprintf+0xf6>
    1a32:	f7 01       	movw	r30, r14
    1a34:	93 fd       	sbrc	r25, 3
    1a36:	85 91       	lpm	r24, Z+
    1a38:	93 ff       	sbrs	r25, 3
    1a3a:	81 91       	ld	r24, Z+
    1a3c:	7f 01       	movw	r14, r30
    1a3e:	81 11       	cpse	r24, r1
    1a40:	b3 cf       	rjmp	.-154    	; 0x19a8 <vfprintf+0x5c>
    1a42:	98 2f       	mov	r25, r24
    1a44:	9f 7d       	andi	r25, 0xDF	; 223
    1a46:	95 54       	subi	r25, 0x45	; 69
    1a48:	93 30       	cpi	r25, 0x03	; 3
    1a4a:	28 f4       	brcc	.+10     	; 0x1a56 <vfprintf+0x10a>
    1a4c:	0c 5f       	subi	r16, 0xFC	; 252
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	9f e3       	ldi	r25, 0x3F	; 63
    1a52:	99 83       	std	Y+1, r25	; 0x01
    1a54:	0d c0       	rjmp	.+26     	; 0x1a70 <vfprintf+0x124>
    1a56:	83 36       	cpi	r24, 0x63	; 99
    1a58:	31 f0       	breq	.+12     	; 0x1a66 <vfprintf+0x11a>
    1a5a:	83 37       	cpi	r24, 0x73	; 115
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <vfprintf+0x12e>
    1a5e:	83 35       	cpi	r24, 0x53	; 83
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <vfprintf+0x118>
    1a62:	59 c0       	rjmp	.+178    	; 0x1b16 <vfprintf+0x1ca>
    1a64:	21 c0       	rjmp	.+66     	; 0x1aa8 <vfprintf+0x15c>
    1a66:	f8 01       	movw	r30, r16
    1a68:	80 81       	ld	r24, Z
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	0e 5f       	subi	r16, 0xFE	; 254
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	88 24       	eor	r8, r8
    1a72:	83 94       	inc	r8
    1a74:	91 2c       	mov	r9, r1
    1a76:	53 01       	movw	r10, r6
    1a78:	13 c0       	rjmp	.+38     	; 0x1aa0 <vfprintf+0x154>
    1a7a:	28 01       	movw	r4, r16
    1a7c:	f2 e0       	ldi	r31, 0x02	; 2
    1a7e:	4f 0e       	add	r4, r31
    1a80:	51 1c       	adc	r5, r1
    1a82:	f8 01       	movw	r30, r16
    1a84:	a0 80       	ld	r10, Z
    1a86:	b1 80       	ldd	r11, Z+1	; 0x01
    1a88:	36 fe       	sbrs	r3, 6
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <vfprintf+0x146>
    1a8c:	69 2d       	mov	r22, r9
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <vfprintf+0x14a>
    1a92:	6f ef       	ldi	r22, 0xFF	; 255
    1a94:	7f ef       	ldi	r23, 0xFF	; 255
    1a96:	c5 01       	movw	r24, r10
    1a98:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <strnlen>
    1a9c:	4c 01       	movw	r8, r24
    1a9e:	82 01       	movw	r16, r4
    1aa0:	f3 2d       	mov	r31, r3
    1aa2:	ff 77       	andi	r31, 0x7F	; 127
    1aa4:	3f 2e       	mov	r3, r31
    1aa6:	16 c0       	rjmp	.+44     	; 0x1ad4 <vfprintf+0x188>
    1aa8:	28 01       	movw	r4, r16
    1aaa:	22 e0       	ldi	r18, 0x02	; 2
    1aac:	42 0e       	add	r4, r18
    1aae:	51 1c       	adc	r5, r1
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	a0 80       	ld	r10, Z
    1ab4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ab6:	36 fe       	sbrs	r3, 6
    1ab8:	03 c0       	rjmp	.+6      	; 0x1ac0 <vfprintf+0x174>
    1aba:	69 2d       	mov	r22, r9
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <vfprintf+0x178>
    1ac0:	6f ef       	ldi	r22, 0xFF	; 255
    1ac2:	7f ef       	ldi	r23, 0xFF	; 255
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <strnlen_P>
    1aca:	4c 01       	movw	r8, r24
    1acc:	f3 2d       	mov	r31, r3
    1ace:	f0 68       	ori	r31, 0x80	; 128
    1ad0:	3f 2e       	mov	r3, r31
    1ad2:	82 01       	movw	r16, r4
    1ad4:	33 fc       	sbrc	r3, 3
    1ad6:	1b c0       	rjmp	.+54     	; 0x1b0e <vfprintf+0x1c2>
    1ad8:	82 2d       	mov	r24, r2
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	88 16       	cp	r8, r24
    1ade:	99 06       	cpc	r9, r25
    1ae0:	b0 f4       	brcc	.+44     	; 0x1b0e <vfprintf+0x1c2>
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	80 e2       	ldi	r24, 0x20	; 32
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    1aec:	2a 94       	dec	r2
    1aee:	f4 cf       	rjmp	.-24     	; 0x1ad8 <vfprintf+0x18c>
    1af0:	f5 01       	movw	r30, r10
    1af2:	37 fc       	sbrc	r3, 7
    1af4:	85 91       	lpm	r24, Z+
    1af6:	37 fe       	sbrs	r3, 7
    1af8:	81 91       	ld	r24, Z+
    1afa:	5f 01       	movw	r10, r30
    1afc:	b6 01       	movw	r22, r12
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    1b04:	21 10       	cpse	r2, r1
    1b06:	2a 94       	dec	r2
    1b08:	21 e0       	ldi	r18, 0x01	; 1
    1b0a:	82 1a       	sub	r8, r18
    1b0c:	91 08       	sbc	r9, r1
    1b0e:	81 14       	cp	r8, r1
    1b10:	91 04       	cpc	r9, r1
    1b12:	71 f7       	brne	.-36     	; 0x1af0 <vfprintf+0x1a4>
    1b14:	e8 c0       	rjmp	.+464    	; 0x1ce6 <vfprintf+0x39a>
    1b16:	84 36       	cpi	r24, 0x64	; 100
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <vfprintf+0x1d2>
    1b1a:	89 36       	cpi	r24, 0x69	; 105
    1b1c:	41 f5       	brne	.+80     	; 0x1b6e <vfprintf+0x222>
    1b1e:	f8 01       	movw	r30, r16
    1b20:	37 fe       	sbrs	r3, 7
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <vfprintf+0x1e6>
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	0c 5f       	subi	r16, 0xFC	; 252
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <vfprintf+0x1f6>
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	07 2e       	mov	r0, r23
    1b38:	00 0c       	add	r0, r0
    1b3a:	88 0b       	sbc	r24, r24
    1b3c:	99 0b       	sbc	r25, r25
    1b3e:	0e 5f       	subi	r16, 0xFE	; 254
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	f3 2d       	mov	r31, r3
    1b44:	ff 76       	andi	r31, 0x6F	; 111
    1b46:	3f 2e       	mov	r3, r31
    1b48:	97 ff       	sbrs	r25, 7
    1b4a:	09 c0       	rjmp	.+18     	; 0x1b5e <vfprintf+0x212>
    1b4c:	90 95       	com	r25
    1b4e:	80 95       	com	r24
    1b50:	70 95       	com	r23
    1b52:	61 95       	neg	r22
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	8f 4f       	sbci	r24, 0xFF	; 255
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	f0 68       	ori	r31, 0x80	; 128
    1b5c:	3f 2e       	mov	r3, r31
    1b5e:	2a e0       	ldi	r18, 0x0A	; 10
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	a3 01       	movw	r20, r6
    1b64:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__ultoa_invert>
    1b68:	88 2e       	mov	r8, r24
    1b6a:	86 18       	sub	r8, r6
    1b6c:	45 c0       	rjmp	.+138    	; 0x1bf8 <vfprintf+0x2ac>
    1b6e:	85 37       	cpi	r24, 0x75	; 117
    1b70:	31 f4       	brne	.+12     	; 0x1b7e <vfprintf+0x232>
    1b72:	23 2d       	mov	r18, r3
    1b74:	2f 7e       	andi	r18, 0xEF	; 239
    1b76:	b2 2e       	mov	r11, r18
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	25 c0       	rjmp	.+74     	; 0x1bc8 <vfprintf+0x27c>
    1b7e:	93 2d       	mov	r25, r3
    1b80:	99 7f       	andi	r25, 0xF9	; 249
    1b82:	b9 2e       	mov	r11, r25
    1b84:	8f 36       	cpi	r24, 0x6F	; 111
    1b86:	c1 f0       	breq	.+48     	; 0x1bb8 <vfprintf+0x26c>
    1b88:	18 f4       	brcc	.+6      	; 0x1b90 <vfprintf+0x244>
    1b8a:	88 35       	cpi	r24, 0x58	; 88
    1b8c:	79 f0       	breq	.+30     	; 0x1bac <vfprintf+0x260>
    1b8e:	b5 c0       	rjmp	.+362    	; 0x1cfa <vfprintf+0x3ae>
    1b90:	80 37       	cpi	r24, 0x70	; 112
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <vfprintf+0x24e>
    1b94:	88 37       	cpi	r24, 0x78	; 120
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <vfprintf+0x254>
    1b98:	b0 c0       	rjmp	.+352    	; 0x1cfa <vfprintf+0x3ae>
    1b9a:	e9 2f       	mov	r30, r25
    1b9c:	e0 61       	ori	r30, 0x10	; 16
    1b9e:	be 2e       	mov	r11, r30
    1ba0:	b4 fe       	sbrs	r11, 4
    1ba2:	0d c0       	rjmp	.+26     	; 0x1bbe <vfprintf+0x272>
    1ba4:	fb 2d       	mov	r31, r11
    1ba6:	f4 60       	ori	r31, 0x04	; 4
    1ba8:	bf 2e       	mov	r11, r31
    1baa:	09 c0       	rjmp	.+18     	; 0x1bbe <vfprintf+0x272>
    1bac:	34 fe       	sbrs	r3, 4
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <vfprintf+0x278>
    1bb0:	29 2f       	mov	r18, r25
    1bb2:	26 60       	ori	r18, 0x06	; 6
    1bb4:	b2 2e       	mov	r11, r18
    1bb6:	06 c0       	rjmp	.+12     	; 0x1bc4 <vfprintf+0x278>
    1bb8:	28 e0       	ldi	r18, 0x08	; 8
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <vfprintf+0x27c>
    1bbe:	20 e1       	ldi	r18, 0x10	; 16
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <vfprintf+0x27c>
    1bc4:	20 e1       	ldi	r18, 0x10	; 16
    1bc6:	32 e0       	ldi	r19, 0x02	; 2
    1bc8:	f8 01       	movw	r30, r16
    1bca:	b7 fe       	sbrs	r11, 7
    1bcc:	07 c0       	rjmp	.+14     	; 0x1bdc <vfprintf+0x290>
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	0c 5f       	subi	r16, 0xFC	; 252
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <vfprintf+0x29c>
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 5f       	subi	r16, 0xFE	; 254
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	a3 01       	movw	r20, r6
    1bea:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__ultoa_invert>
    1bee:	88 2e       	mov	r8, r24
    1bf0:	86 18       	sub	r8, r6
    1bf2:	fb 2d       	mov	r31, r11
    1bf4:	ff 77       	andi	r31, 0x7F	; 127
    1bf6:	3f 2e       	mov	r3, r31
    1bf8:	36 fe       	sbrs	r3, 6
    1bfa:	0d c0       	rjmp	.+26     	; 0x1c16 <vfprintf+0x2ca>
    1bfc:	23 2d       	mov	r18, r3
    1bfe:	2e 7f       	andi	r18, 0xFE	; 254
    1c00:	a2 2e       	mov	r10, r18
    1c02:	89 14       	cp	r8, r9
    1c04:	58 f4       	brcc	.+22     	; 0x1c1c <vfprintf+0x2d0>
    1c06:	34 fe       	sbrs	r3, 4
    1c08:	0b c0       	rjmp	.+22     	; 0x1c20 <vfprintf+0x2d4>
    1c0a:	32 fc       	sbrc	r3, 2
    1c0c:	09 c0       	rjmp	.+18     	; 0x1c20 <vfprintf+0x2d4>
    1c0e:	83 2d       	mov	r24, r3
    1c10:	8e 7e       	andi	r24, 0xEE	; 238
    1c12:	a8 2e       	mov	r10, r24
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <vfprintf+0x2d4>
    1c16:	b8 2c       	mov	r11, r8
    1c18:	a3 2c       	mov	r10, r3
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfprintf+0x2d6>
    1c1c:	b8 2c       	mov	r11, r8
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <vfprintf+0x2d6>
    1c20:	b9 2c       	mov	r11, r9
    1c22:	a4 fe       	sbrs	r10, 4
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <vfprintf+0x2f8>
    1c26:	fe 01       	movw	r30, r28
    1c28:	e8 0d       	add	r30, r8
    1c2a:	f1 1d       	adc	r31, r1
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 33       	cpi	r24, 0x30	; 48
    1c30:	21 f4       	brne	.+8      	; 0x1c3a <vfprintf+0x2ee>
    1c32:	9a 2d       	mov	r25, r10
    1c34:	99 7e       	andi	r25, 0xE9	; 233
    1c36:	a9 2e       	mov	r10, r25
    1c38:	09 c0       	rjmp	.+18     	; 0x1c4c <vfprintf+0x300>
    1c3a:	a2 fe       	sbrs	r10, 2
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <vfprintf+0x2fe>
    1c3e:	b3 94       	inc	r11
    1c40:	b3 94       	inc	r11
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <vfprintf+0x300>
    1c44:	8a 2d       	mov	r24, r10
    1c46:	86 78       	andi	r24, 0x86	; 134
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <vfprintf+0x300>
    1c4a:	b3 94       	inc	r11
    1c4c:	a3 fc       	sbrc	r10, 3
    1c4e:	11 c0       	rjmp	.+34     	; 0x1c72 <vfprintf+0x326>
    1c50:	a0 fe       	sbrs	r10, 0
    1c52:	06 c0       	rjmp	.+12     	; 0x1c60 <vfprintf+0x314>
    1c54:	b2 14       	cp	r11, r2
    1c56:	88 f4       	brcc	.+34     	; 0x1c7a <vfprintf+0x32e>
    1c58:	28 0c       	add	r2, r8
    1c5a:	92 2c       	mov	r9, r2
    1c5c:	9b 18       	sub	r9, r11
    1c5e:	0e c0       	rjmp	.+28     	; 0x1c7c <vfprintf+0x330>
    1c60:	b2 14       	cp	r11, r2
    1c62:	60 f4       	brcc	.+24     	; 0x1c7c <vfprintf+0x330>
    1c64:	b6 01       	movw	r22, r12
    1c66:	80 e2       	ldi	r24, 0x20	; 32
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    1c6e:	b3 94       	inc	r11
    1c70:	f7 cf       	rjmp	.-18     	; 0x1c60 <vfprintf+0x314>
    1c72:	b2 14       	cp	r11, r2
    1c74:	18 f4       	brcc	.+6      	; 0x1c7c <vfprintf+0x330>
    1c76:	2b 18       	sub	r2, r11
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <vfprintf+0x332>
    1c7a:	98 2c       	mov	r9, r8
    1c7c:	21 2c       	mov	r2, r1
    1c7e:	a4 fe       	sbrs	r10, 4
    1c80:	10 c0       	rjmp	.+32     	; 0x1ca2 <vfprintf+0x356>
    1c82:	b6 01       	movw	r22, r12
    1c84:	80 e3       	ldi	r24, 0x30	; 48
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    1c8c:	a2 fe       	sbrs	r10, 2
    1c8e:	17 c0       	rjmp	.+46     	; 0x1cbe <vfprintf+0x372>
    1c90:	a1 fc       	sbrc	r10, 1
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <vfprintf+0x34e>
    1c94:	88 e7       	ldi	r24, 0x78	; 120
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <vfprintf+0x352>
    1c9a:	88 e5       	ldi	r24, 0x58	; 88
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	b6 01       	movw	r22, r12
    1ca0:	0c c0       	rjmp	.+24     	; 0x1cba <vfprintf+0x36e>
    1ca2:	8a 2d       	mov	r24, r10
    1ca4:	86 78       	andi	r24, 0x86	; 134
    1ca6:	59 f0       	breq	.+22     	; 0x1cbe <vfprintf+0x372>
    1ca8:	a1 fe       	sbrs	r10, 1
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <vfprintf+0x364>
    1cac:	8b e2       	ldi	r24, 0x2B	; 43
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <vfprintf+0x366>
    1cb0:	80 e2       	ldi	r24, 0x20	; 32
    1cb2:	a7 fc       	sbrc	r10, 7
    1cb4:	8d e2       	ldi	r24, 0x2D	; 45
    1cb6:	b6 01       	movw	r22, r12
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    1cbe:	89 14       	cp	r8, r9
    1cc0:	38 f4       	brcc	.+14     	; 0x1cd0 <vfprintf+0x384>
    1cc2:	b6 01       	movw	r22, r12
    1cc4:	80 e3       	ldi	r24, 0x30	; 48
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    1ccc:	9a 94       	dec	r9
    1cce:	f7 cf       	rjmp	.-18     	; 0x1cbe <vfprintf+0x372>
    1cd0:	8a 94       	dec	r8
    1cd2:	f3 01       	movw	r30, r6
    1cd4:	e8 0d       	add	r30, r8
    1cd6:	f1 1d       	adc	r31, r1
    1cd8:	80 81       	ld	r24, Z
    1cda:	b6 01       	movw	r22, r12
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    1ce2:	81 10       	cpse	r8, r1
    1ce4:	f5 cf       	rjmp	.-22     	; 0x1cd0 <vfprintf+0x384>
    1ce6:	22 20       	and	r2, r2
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <vfprintf+0x3a0>
    1cea:	42 ce       	rjmp	.-892    	; 0x1970 <vfprintf+0x24>
    1cec:	b6 01       	movw	r22, r12
    1cee:	80 e2       	ldi	r24, 0x20	; 32
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <fputc>
    1cf6:	2a 94       	dec	r2
    1cf8:	f6 cf       	rjmp	.-20     	; 0x1ce6 <vfprintf+0x39a>
    1cfa:	f6 01       	movw	r30, r12
    1cfc:	86 81       	ldd	r24, Z+6	; 0x06
    1cfe:	97 81       	ldd	r25, Z+7	; 0x07
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <vfprintf+0x3ba>
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
    1d06:	2b 96       	adiw	r28, 0x0b	; 11
    1d08:	e2 e1       	ldi	r30, 0x12	; 18
    1d0a:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__epilogue_restores__>

00001d0e <calloc>:
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	86 9f       	mul	r24, r22
    1d18:	80 01       	movw	r16, r0
    1d1a:	87 9f       	mul	r24, r23
    1d1c:	10 0d       	add	r17, r0
    1d1e:	96 9f       	mul	r25, r22
    1d20:	10 0d       	add	r17, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	c8 01       	movw	r24, r16
    1d26:	0e 94 1d 0b 	call	0x163a	; 0x163a <malloc>
    1d2a:	ec 01       	movw	r28, r24
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	29 f0       	breq	.+10     	; 0x1d3a <calloc+0x2c>
    1d30:	a8 01       	movw	r20, r16
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <memset>
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	08 95       	ret

00001d46 <strnlen_P>:
    1d46:	fc 01       	movw	r30, r24
    1d48:	05 90       	lpm	r0, Z+
    1d4a:	61 50       	subi	r22, 0x01	; 1
    1d4c:	70 40       	sbci	r23, 0x00	; 0
    1d4e:	01 10       	cpse	r0, r1
    1d50:	d8 f7       	brcc	.-10     	; 0x1d48 <strnlen_P+0x2>
    1d52:	80 95       	com	r24
    1d54:	90 95       	com	r25
    1d56:	8e 0f       	add	r24, r30
    1d58:	9f 1f       	adc	r25, r31
    1d5a:	08 95       	ret

00001d5c <memset>:
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <memset+0x6>
    1d60:	6d 93       	st	X+, r22
    1d62:	41 50       	subi	r20, 0x01	; 1
    1d64:	50 40       	sbci	r21, 0x00	; 0
    1d66:	e0 f7       	brcc	.-8      	; 0x1d60 <memset+0x4>
    1d68:	08 95       	ret

00001d6a <strnlen>:
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	61 50       	subi	r22, 0x01	; 1
    1d6e:	70 40       	sbci	r23, 0x00	; 0
    1d70:	01 90       	ld	r0, Z+
    1d72:	01 10       	cpse	r0, r1
    1d74:	d8 f7       	brcc	.-10     	; 0x1d6c <strnlen+0x2>
    1d76:	80 95       	com	r24
    1d78:	90 95       	com	r25
    1d7a:	8e 0f       	add	r24, r30
    1d7c:	9f 1f       	adc	r25, r31
    1d7e:	08 95       	ret

00001d80 <fputc>:
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	fb 01       	movw	r30, r22
    1d8a:	23 81       	ldd	r18, Z+3	; 0x03
    1d8c:	21 fd       	sbrc	r18, 1
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <fputc+0x16>
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	9f ef       	ldi	r25, 0xFF	; 255
    1d94:	2c c0       	rjmp	.+88     	; 0x1dee <fputc+0x6e>
    1d96:	22 ff       	sbrs	r18, 2
    1d98:	16 c0       	rjmp	.+44     	; 0x1dc6 <fputc+0x46>
    1d9a:	46 81       	ldd	r20, Z+6	; 0x06
    1d9c:	57 81       	ldd	r21, Z+7	; 0x07
    1d9e:	24 81       	ldd	r18, Z+4	; 0x04
    1da0:	35 81       	ldd	r19, Z+5	; 0x05
    1da2:	42 17       	cp	r20, r18
    1da4:	53 07       	cpc	r21, r19
    1da6:	44 f4       	brge	.+16     	; 0x1db8 <fputc+0x38>
    1da8:	a0 81       	ld	r26, Z
    1daa:	b1 81       	ldd	r27, Z+1	; 0x01
    1dac:	9d 01       	movw	r18, r26
    1dae:	2f 5f       	subi	r18, 0xFF	; 255
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
    1db2:	31 83       	std	Z+1, r19	; 0x01
    1db4:	20 83       	st	Z, r18
    1db6:	8c 93       	st	X, r24
    1db8:	26 81       	ldd	r18, Z+6	; 0x06
    1dba:	37 81       	ldd	r19, Z+7	; 0x07
    1dbc:	2f 5f       	subi	r18, 0xFF	; 255
    1dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc0:	37 83       	std	Z+7, r19	; 0x07
    1dc2:	26 83       	std	Z+6, r18	; 0x06
    1dc4:	14 c0       	rjmp	.+40     	; 0x1dee <fputc+0x6e>
    1dc6:	8b 01       	movw	r16, r22
    1dc8:	ec 01       	movw	r28, r24
    1dca:	fb 01       	movw	r30, r22
    1dcc:	00 84       	ldd	r0, Z+8	; 0x08
    1dce:	f1 85       	ldd	r31, Z+9	; 0x09
    1dd0:	e0 2d       	mov	r30, r0
    1dd2:	09 95       	icall
    1dd4:	89 2b       	or	r24, r25
    1dd6:	e1 f6       	brne	.-72     	; 0x1d90 <fputc+0x10>
    1dd8:	d8 01       	movw	r26, r16
    1dda:	16 96       	adiw	r26, 0x06	; 6
    1ddc:	8d 91       	ld	r24, X+
    1dde:	9c 91       	ld	r25, X
    1de0:	17 97       	sbiw	r26, 0x07	; 7
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	17 96       	adiw	r26, 0x07	; 7
    1de6:	9c 93       	st	X, r25
    1de8:	8e 93       	st	-X, r24
    1dea:	16 97       	sbiw	r26, 0x06	; 6
    1dec:	ce 01       	movw	r24, r28
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	08 95       	ret

00001df8 <__ultoa_invert>:
    1df8:	fa 01       	movw	r30, r20
    1dfa:	aa 27       	eor	r26, r26
    1dfc:	28 30       	cpi	r18, 0x08	; 8
    1dfe:	51 f1       	breq	.+84     	; 0x1e54 <__ultoa_invert+0x5c>
    1e00:	20 31       	cpi	r18, 0x10	; 16
    1e02:	81 f1       	breq	.+96     	; 0x1e64 <__ultoa_invert+0x6c>
    1e04:	e8 94       	clt
    1e06:	6f 93       	push	r22
    1e08:	6e 7f       	andi	r22, 0xFE	; 254
    1e0a:	6e 5f       	subi	r22, 0xFE	; 254
    1e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e10:	9f 4f       	sbci	r25, 0xFF	; 255
    1e12:	af 4f       	sbci	r26, 0xFF	; 255
    1e14:	b1 e0       	ldi	r27, 0x01	; 1
    1e16:	3e d0       	rcall	.+124    	; 0x1e94 <__ultoa_invert+0x9c>
    1e18:	b4 e0       	ldi	r27, 0x04	; 4
    1e1a:	3c d0       	rcall	.+120    	; 0x1e94 <__ultoa_invert+0x9c>
    1e1c:	67 0f       	add	r22, r23
    1e1e:	78 1f       	adc	r23, r24
    1e20:	89 1f       	adc	r24, r25
    1e22:	9a 1f       	adc	r25, r26
    1e24:	a1 1d       	adc	r26, r1
    1e26:	68 0f       	add	r22, r24
    1e28:	79 1f       	adc	r23, r25
    1e2a:	8a 1f       	adc	r24, r26
    1e2c:	91 1d       	adc	r25, r1
    1e2e:	a1 1d       	adc	r26, r1
    1e30:	6a 0f       	add	r22, r26
    1e32:	71 1d       	adc	r23, r1
    1e34:	81 1d       	adc	r24, r1
    1e36:	91 1d       	adc	r25, r1
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	20 d0       	rcall	.+64     	; 0x1e7c <__ultoa_invert+0x84>
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <__ultoa_invert+0x48>
    1e3e:	68 94       	set
    1e40:	3f 91       	pop	r19
    1e42:	2a e0       	ldi	r18, 0x0A	; 10
    1e44:	26 9f       	mul	r18, r22
    1e46:	11 24       	eor	r1, r1
    1e48:	30 19       	sub	r19, r0
    1e4a:	30 5d       	subi	r19, 0xD0	; 208
    1e4c:	31 93       	st	Z+, r19
    1e4e:	de f6       	brtc	.-74     	; 0x1e06 <__ultoa_invert+0xe>
    1e50:	cf 01       	movw	r24, r30
    1e52:	08 95       	ret
    1e54:	46 2f       	mov	r20, r22
    1e56:	47 70       	andi	r20, 0x07	; 7
    1e58:	40 5d       	subi	r20, 0xD0	; 208
    1e5a:	41 93       	st	Z+, r20
    1e5c:	b3 e0       	ldi	r27, 0x03	; 3
    1e5e:	0f d0       	rcall	.+30     	; 0x1e7e <__ultoa_invert+0x86>
    1e60:	c9 f7       	brne	.-14     	; 0x1e54 <__ultoa_invert+0x5c>
    1e62:	f6 cf       	rjmp	.-20     	; 0x1e50 <__ultoa_invert+0x58>
    1e64:	46 2f       	mov	r20, r22
    1e66:	4f 70       	andi	r20, 0x0F	; 15
    1e68:	40 5d       	subi	r20, 0xD0	; 208
    1e6a:	4a 33       	cpi	r20, 0x3A	; 58
    1e6c:	18 f0       	brcs	.+6      	; 0x1e74 <__ultoa_invert+0x7c>
    1e6e:	49 5d       	subi	r20, 0xD9	; 217
    1e70:	31 fd       	sbrc	r19, 1
    1e72:	40 52       	subi	r20, 0x20	; 32
    1e74:	41 93       	st	Z+, r20
    1e76:	02 d0       	rcall	.+4      	; 0x1e7c <__ultoa_invert+0x84>
    1e78:	a9 f7       	brne	.-22     	; 0x1e64 <__ultoa_invert+0x6c>
    1e7a:	ea cf       	rjmp	.-44     	; 0x1e50 <__ultoa_invert+0x58>
    1e7c:	b4 e0       	ldi	r27, 0x04	; 4
    1e7e:	a6 95       	lsr	r26
    1e80:	97 95       	ror	r25
    1e82:	87 95       	ror	r24
    1e84:	77 95       	ror	r23
    1e86:	67 95       	ror	r22
    1e88:	ba 95       	dec	r27
    1e8a:	c9 f7       	brne	.-14     	; 0x1e7e <__ultoa_invert+0x86>
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	61 05       	cpc	r22, r1
    1e90:	71 05       	cpc	r23, r1
    1e92:	08 95       	ret
    1e94:	9b 01       	movw	r18, r22
    1e96:	ac 01       	movw	r20, r24
    1e98:	0a 2e       	mov	r0, r26
    1e9a:	06 94       	lsr	r0
    1e9c:	57 95       	ror	r21
    1e9e:	47 95       	ror	r20
    1ea0:	37 95       	ror	r19
    1ea2:	27 95       	ror	r18
    1ea4:	ba 95       	dec	r27
    1ea6:	c9 f7       	brne	.-14     	; 0x1e9a <__ultoa_invert+0xa2>
    1ea8:	62 0f       	add	r22, r18
    1eaa:	73 1f       	adc	r23, r19
    1eac:	84 1f       	adc	r24, r20
    1eae:	95 1f       	adc	r25, r21
    1eb0:	a0 1d       	adc	r26, r0
    1eb2:	08 95       	ret

00001eb4 <__prologue_saves__>:
    1eb4:	2f 92       	push	r2
    1eb6:	3f 92       	push	r3
    1eb8:	4f 92       	push	r4
    1eba:	5f 92       	push	r5
    1ebc:	6f 92       	push	r6
    1ebe:	7f 92       	push	r7
    1ec0:	8f 92       	push	r8
    1ec2:	9f 92       	push	r9
    1ec4:	af 92       	push	r10
    1ec6:	bf 92       	push	r11
    1ec8:	cf 92       	push	r12
    1eca:	df 92       	push	r13
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	ca 1b       	sub	r28, r26
    1ede:	db 0b       	sbc	r29, r27
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	09 94       	ijmp

00001eec <__epilogue_restores__>:
    1eec:	2a 88       	ldd	r2, Y+18	; 0x12
    1eee:	39 88       	ldd	r3, Y+17	; 0x11
    1ef0:	48 88       	ldd	r4, Y+16	; 0x10
    1ef2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ef4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ef6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ef8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1efa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1efc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1efe:	b9 84       	ldd	r11, Y+9	; 0x09
    1f00:	c8 84       	ldd	r12, Y+8	; 0x08
    1f02:	df 80       	ldd	r13, Y+7	; 0x07
    1f04:	ee 80       	ldd	r14, Y+6	; 0x06
    1f06:	fd 80       	ldd	r15, Y+5	; 0x05
    1f08:	0c 81       	ldd	r16, Y+4	; 0x04
    1f0a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f0c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f0e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f10:	ce 0f       	add	r28, r30
    1f12:	d1 1d       	adc	r29, r1
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	ed 01       	movw	r28, r26
    1f20:	08 95       	ret

00001f22 <_exit>:
    1f22:	f8 94       	cli

00001f24 <__stop_program>:
    1f24:	ff cf       	rjmp	.-2      	; 0x1f24 <__stop_program>
