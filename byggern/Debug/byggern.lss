
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00001dfc  00001e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800268  00800268  00001ff8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003397  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001662  00000000  00000000  0000572f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b2  00000000  00000000  00006d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ac  00000000  00000000  00008444  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009de  00000000  00000000  00008af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d2  00000000  00000000  000094ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <navigateMenu+0x3e>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	ec ef       	ldi	r30, 0xFC	; 252
     3aa:	fd e1       	ldi	r31, 0x1D	; 29
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a8 36       	cpi	r26, 0x68	; 104
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	a8 e6       	ldi	r26, 0x68	; 104
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a0 39       	cpi	r26, 0x90	; 144
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 03 02 	call	0x406	; 0x406 <main>
     3cc:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1170>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1170>
     3e6:	08 95       	ret

000003e8 <__vector_1>:
#include "pwm.h"
#include "music.h"
#include "CAN.h"
CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT0_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	8f 93       	push	r24
	//cli();
	flag= 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end>
	
	
	
	//sei();
	
}
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <main>:


int main(void)
//p.23 for can read instructions
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2b 97       	sbiw	r28, 0x0b	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
	setupInit();
     41a:	0e 94 c9 06 	call	0xd92	; 0xd92 <setupInit>
	
	//test_SRAM();
	CAN_message_t message;
	message.ID = 3;
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	9a 83       	std	Y+2, r25	; 0x02
     424:	89 83       	std	Y+1, r24	; 0x01
	message.data_length = 1;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	8b 83       	std	Y+3, r24	; 0x03
	message.data[0] = (uint8_t) 8;
     42a:	88 e0       	ldi	r24, 0x08	; 8
     42c:	8c 83       	std	Y+4, r24	; 0x04
	CAN_transmit_message(&message);
     42e:	ce 01       	movw	r24, r28
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	0e 94 40 02 	call	0x480	; 0x480 <CAN_transmit_message>
	

	

	printf("Starting program\n\n\n\n\n\n\n\n\n\n\r");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
	printf("---------------------------------------\n\r");
     442:	82 e2       	ldi	r24, 0x22	; 34
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
	//pwm_init();
	//music_playLisaGikk();                 
	while (1) {
		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     456:	0e 94 2b 04 	call	0x856	; 0x856 <sleep_now>
		if (!strcmp(currentMenu.currentMenuItem->children[currentMenu.childIndex]->name, "Rick")) {
		}
		if (flag) {
     45a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     45e:	88 23       	and	r24, r24
     460:	d1 f3       	breq	.-12     	; 0x456 <main+0x50>
			//printf("Message received");
			CAN_receiveMessage(&received_message);
     462:	87 e7       	ldi	r24, 0x77	; 119
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 05 03 	call	0x60a	; 0x60a <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	6c e2       	ldi	r22, 0x2C	; 44
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 7d 03 	call	0x6fa	; 0x6fa <CAN_controller_bitModify>
			flag=0;
     47a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
     47e:	eb cf       	rjmp	.-42     	; 0x456 <main+0x50>

00000480 <CAN_transmit_message>:
	
	
	
	
}
void CAN_transmit_message(CAN_message_t *message) {
     480:	bf 92       	push	r11
     482:	cf 92       	push	r12
     484:	df 92       	push	r13
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	7c 01       	movw	r14, r24
	printf("Transmitting message");
     494:	8c e4       	ldi	r24, 0x4C	; 76
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
	
	buffer_number = 0;
     4a0:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <buffer_number.1985+0x1>
     4a4:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <buffer_number.1985>
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
	
	//while TXBnCTRL. TXREQ not clear, wait
	switch(buffer_number) {
		case 0:
			while (CAN_controller_read(TXB0CTRL) & 1 << TXREQ);
     4ac:	80 e3       	ldi	r24, 0x30	; 48
     4ae:	0e 94 4c 03 	call	0x698	; 0x698 <CAN_controller_read>
     4b2:	83 fd       	sbrc	r24, 3
     4b4:	fb cf       	rjmp	.-10     	; 0x4ac <CAN_transmit_message+0x2c>
	
	
	
	
	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     4b6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <buffer_number.1985>
     4ba:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <buffer_number.1985+0x1>
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	91 05       	cpc	r25, r1
     4c2:	81 f0       	breq	.+32     	; 0x4e4 <CAN_transmit_message+0x64>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	91 05       	cpc	r25, r1
     4c8:	b9 f0       	breq	.+46     	; 0x4f8 <CAN_transmit_message+0x78>
     4ca:	89 2b       	or	r24, r25
     4cc:	f1 f4       	brne	.+60     	; 0x50a <__stack+0xb>
			case 0:
				CAN_controller_write(TXB0SIDL, (uint8_t) message->ID);
     4ce:	f7 01       	movw	r30, r14
     4d0:	60 81       	ld	r22, Z
     4d2:	82 e3       	ldi	r24, 0x32	; 50
     4d4:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				CAN_controller_write(TXB0SIDH, (uint8_t) (message->ID >> 8));
     4d8:	f7 01       	movw	r30, r14
     4da:	61 81       	ldd	r22, Z+1	; 0x01
     4dc:	81 e3       	ldi	r24, 0x31	; 49
     4de:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				break;
     4e2:	13 c0       	rjmp	.+38     	; 0x50a <__stack+0xb>
			case 1:
				CAN_controller_write(TXB1SIDL, (uint8_t) message->ID);
     4e4:	f7 01       	movw	r30, r14
     4e6:	60 81       	ld	r22, Z
     4e8:	82 e4       	ldi	r24, 0x42	; 66
     4ea:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				CAN_controller_write(TXB1SIDH, (uint8_t)  message->ID >> 8);
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	81 e4       	ldi	r24, 0x41	; 65
     4f2:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				break;
     4f6:	09 c0       	rjmp	.+18     	; 0x50a <__stack+0xb>
			case 2:
				CAN_controller_write(TXB2SIDL, (uint8_t) message->ID);
     4f8:	f7 01       	movw	r30, r14
     4fa:	60 81       	ld	r22, Z
     4fc:	82 e5       	ldi	r24, 0x52	; 82
     4fe:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				CAN_controller_write(TXB2SIDH, (uint8_t) message->ID >> 8);
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	81 e5       	ldi	r24, 0x51	; 81
     506:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
			
	}
	
	//Load length in register TXBnDLC
	
	switch(buffer_number) {
     50a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <buffer_number.1985>
     50e:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <buffer_number.1985+0x1>
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	91 05       	cpc	r25, r1
     516:	c9 f0       	breq	.+50     	; 0x54a <__stack+0x4b>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	91 05       	cpc	r25, r1
     51c:	e1 f0       	breq	.+56     	; 0x556 <__stack+0x57>
     51e:	89 2b       	or	r24, r25
     520:	f9 f4       	brne	.+62     	; 0x560 <__stack+0x61>
			case 0:
				printf("\n\rtransmitting data length: %i\n\r", message->data_length);
     522:	f7 01       	movw	r30, r14
     524:	82 81       	ldd	r24, Z+2	; 0x02
     526:	1f 92       	push	r1
     528:	8f 93       	push	r24
     52a:	81 e6       	ldi	r24, 0x61	; 97
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
				CAN_controller_write(TXB0DLC,message->data_length);
     536:	f7 01       	movw	r30, r14
     538:	62 81       	ldd	r22, Z+2	; 0x02
     53a:	85 e3       	ldi	r24, 0x35	; 53
     53c:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				break;
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0b c0       	rjmp	.+22     	; 0x560 <__stack+0x61>
			case 1:
				CAN_controller_write(TXB1DLC,message->data_length);
     54a:	f7 01       	movw	r30, r14
     54c:	62 81       	ldd	r22, Z+2	; 0x02
     54e:	85 e4       	ldi	r24, 0x45	; 69
     550:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				break;
     554:	05 c0       	rjmp	.+10     	; 0x560 <__stack+0x61>
			case 2:
				CAN_controller_write(TXB2DLC,message->data_length);
     556:	f7 01       	movw	r30, r14
     558:	62 81       	ldd	r22, Z+2	; 0x02
     55a:	85 e5       	ldi	r24, 0x55	; 85
     55c:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				break;
			
			
	}
	//iterate in for loop length = message.length and load TXBnDm
	for (int i = 0; i != message->data_length; i++) {
     560:	f7 01       	movw	r30, r14
     562:	82 81       	ldd	r24, Z+2	; 0x02
     564:	88 23       	and	r24, r24
     566:	09 f4       	brne	.+2      	; 0x56a <__stack+0x6b>
     568:	42 c0       	rjmp	.+132    	; 0x5ee <__stack+0xef>
     56a:	87 01       	movw	r16, r14
     56c:	0f 2e       	mov	r0, r31
     56e:	f6 e3       	ldi	r31, 0x36	; 54
     570:	bf 2e       	mov	r11, r31
     572:	f0 2d       	mov	r31, r0
     574:	c0 e0       	ldi	r28, 0x00	; 0
     576:	d0 e0       	ldi	r29, 0x00	; 0
		switch(buffer_number) {
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     578:	0f 2e       	mov	r0, r31
     57a:	f2 e8       	ldi	r31, 0x82	; 130
     57c:	cf 2e       	mov	r12, r31
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	df 2e       	mov	r13, r31
     582:	f0 2d       	mov	r31, r0
			
			
	}
	//iterate in for loop length = message.length and load TXBnDm
	for (int i = 0; i != message->data_length; i++) {
		switch(buffer_number) {
     584:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <buffer_number.1985>
     588:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <buffer_number.1985+0x1>
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	91 05       	cpc	r25, r1
     590:	b9 f0       	breq	.+46     	; 0x5c0 <__stack+0xc1>
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	91 05       	cpc	r25, r1
     596:	d9 f0       	breq	.+54     	; 0x5ce <__stack+0xcf>
     598:	89 2b       	or	r24, r25
     59a:	f9 f4       	brne	.+62     	; 0x5da <__stack+0xdb>
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     59c:	f8 01       	movw	r30, r16
     59e:	83 81       	ldd	r24, Z+3	; 0x03
     5a0:	1f 92       	push	r1
     5a2:	8f 93       	push	r24
     5a4:	df 92       	push	r13
     5a6:	cf 92       	push	r12
     5a8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     5ac:	f8 01       	movw	r30, r16
     5ae:	63 81       	ldd	r22, Z+3	; 0x03
     5b0:	8b 2d       	mov	r24, r11
     5b2:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				break;
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0d c0       	rjmp	.+26     	; 0x5da <__stack+0xdb>
			case 1:
				CAN_controller_write(TXB1D0 +i, message->data[i]);
     5c0:	f8 01       	movw	r30, r16
     5c2:	63 81       	ldd	r22, Z+3	; 0x03
     5c4:	80 e1       	ldi	r24, 0x10	; 16
     5c6:	8b 0d       	add	r24, r11
     5c8:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				break;
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <__stack+0xdb>
			case 2:
				CAN_controller_write(TXB2D0 +i, message->data[i]);
     5ce:	f8 01       	movw	r30, r16
     5d0:	63 81       	ldd	r22, Z+3	; 0x03
     5d2:	80 e2       	ldi	r24, 0x20	; 32
     5d4:	8b 0d       	add	r24, r11
     5d6:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_controller_write>
				break;
			
			
	}
	//iterate in for loop length = message.length and load TXBnDm
	for (int i = 0; i != message->data_length; i++) {
     5da:	21 96       	adiw	r28, 0x01	; 1
     5dc:	0f 5f       	subi	r16, 0xFF	; 255
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
     5e0:	b3 94       	inc	r11
     5e2:	f7 01       	movw	r30, r14
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	8c 17       	cp	r24, r28
     5ea:	9d 07       	cpc	r25, r29
     5ec:	59 f6       	brne	.-106    	; 0x584 <__stack+0x85>
	
	
	
	//request_to_send

	CAN_controller_RTS(buffer_number);
     5ee:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <buffer_number.1985>
     5f2:	0e 94 0d 04 	call	0x81a	; 0x81a <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	08 95       	ret

0000060a <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	6c 01       	movw	r12, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = CAN_controller_read(MCP_RXB0SIDH << 8)+CAN_controller_read(MCP_RXB0SIDL) ; 
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 4c 03 	call	0x698	; 0x698 <CAN_controller_read>
     620:	c8 2f       	mov	r28, r24
     622:	82 e6       	ldi	r24, 0x62	; 98
     624:	0e 94 4c 03 	call	0x698	; 0x698 <CAN_controller_read>
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	8c 0f       	add	r24, r28
     62c:	91 1d       	adc	r25, r1
     62e:	f6 01       	movw	r30, r12
     630:	91 83       	std	Z+1, r25	; 0x01
     632:	80 83       	st	Z, r24
				received_message->data_length = CAN_controller_read(MCP_RXB0DLC);
     634:	85 e6       	ldi	r24, 0x65	; 101
     636:	0e 94 4c 03 	call	0x698	; 0x698 <CAN_controller_read>
     63a:	f6 01       	movw	r30, r12
     63c:	82 83       	std	Z+2, r24	; 0x02
				printf("data length read: %i\n\r", received_message->data_length);
     63e:	1f 92       	push	r1
     640:	8f 93       	push	r24
     642:	89 e9       	ldi	r24, 0x99	; 153
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
				for (int i = 0; i != received_message->data_length; i++) {
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	f6 01       	movw	r30, r12
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	88 23       	and	r24, r24
     65c:	a9 f0       	breq	.+42     	; 0x688 <CAN_receiveMessage+0x7e>
     65e:	76 01       	movw	r14, r12
     660:	f3 e0       	ldi	r31, 0x03	; 3
     662:	ef 0e       	add	r14, r31
     664:	f1 1c       	adc	r15, r1
     666:	16 e6       	ldi	r17, 0x66	; 102
     668:	c0 e0       	ldi	r28, 0x00	; 0
     66a:	d0 e0       	ldi	r29, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     66c:	81 2f       	mov	r24, r17
     66e:	0e 94 4c 03 	call	0x698	; 0x698 <CAN_controller_read>
     672:	f7 01       	movw	r30, r14
     674:	81 93       	st	Z+, r24
     676:	7f 01       	movw	r14, r30
	switch (buffer) {
		case 0:
				received_message->ID = CAN_controller_read(MCP_RXB0SIDH << 8)+CAN_controller_read(MCP_RXB0SIDL) ; 
				received_message->data_length = CAN_controller_read(MCP_RXB0DLC);
				printf("data length read: %i\n\r", received_message->data_length);
				for (int i = 0; i != received_message->data_length; i++) {
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	1f 5f       	subi	r17, 0xFF	; 255
     67c:	f6 01       	movw	r30, r12
     67e:	82 81       	ldd	r24, Z+2	; 0x02
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	8c 17       	cp	r24, r28
     684:	9d 07       	cpc	r25, r29
     686:	91 f7       	brne	.-28     	; 0x66c <CAN_receiveMessage+0x62>
	}
	
	
	
	
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	08 95       	ret

00000698 <CAN_controller_read>:
#include <stdlib.h>
#include <stdio.h>
#include <util/delay.h>
#include "CAN_controller.h"
#include "SPI.h"
uint8_t CAN_controller_read(uint8_t addr) {
     698:	cf 93       	push	r28
     69a:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
	SPI_masterWrite(addr);
     6aa:	8c 2f       	mov	r24, r28
     6ac:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
	SPI_masterWrite(0);
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     6b6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <SPI_masterRead>
     6ba:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
	
	return data;
}
     6c4:	8c 2f       	mov	r24, r28
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <CAN_controller_write>:

void CAN_controller_write(uint8_t addr, uint8_t data) {
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	d8 2f       	mov	r29, r24
     6d0:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	84 e0       	ldi	r24, 0x04	; 4
     6d6:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
	SPI_masterWrite(addr);
     6e0:	8d 2f       	mov	r24, r29
     6e2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
	SPI_masterWrite(data);
     6e6:	8c 2f       	mov	r24, r28
     6e8:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
	
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <CAN_controller_bitModify>:
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	d8 2f       	mov	r29, r24
     702:	16 2f       	mov	r17, r22
     704:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     70e:	85 e0       	ldi	r24, 0x05	; 5
     710:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
		SPI_masterWrite(addr);
     714:	81 2f       	mov	r24, r17
     716:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
		SPI_masterWrite(mask);
     71a:	8d 2f       	mov	r24, r29
     71c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
		SPI_masterWrite(data);
     720:	8c 2f       	mov	r24, r28
     722:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>

}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	08 95       	ret

00000736 <CAN_controller_reset>:
CAN_controller_reset() {
	SPI_setChipSelect(PB4, 0);
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	84 e0       	ldi	r24, 0x04	; 4
     73a:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
	printf("Before spi write");
     73e:	80 eb       	ldi	r24, 0xB0	; 176
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
	SPI_masterWrite(MCP_RESET);
     74a:	80 ec       	ldi	r24, 0xC0	; 192
     74c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	08 95       	ret

0000075e <CAN_controller_init>:
void CAN_controller_init() {
	
	
	SPI_masterInit();
     75e:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_masterInit>
	
	//reset with spi command
	CAN_controller_reset();
     762:	0e 94 9b 03 	call	0x736	; 0x736 <CAN_controller_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	9f e5       	ldi	r25, 0x5F	; 95
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <CAN_controller_init+0xc>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <CAN_controller_init+0x12>
     770:	00 00       	nop
	//printf("After spi write\n");
	_delay_ms(20);
	
	//Check CANSTAT register
	
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     772:	8e e0       	ldi	r24, 0x0E	; 14
     774:	0e 94 4c 03 	call	0x698	; 0x698 <CAN_controller_read>
     778:	ef ef       	ldi	r30, 0xFF	; 255
     77a:	ff e5       	ldi	r31, 0x5F	; 95
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <CAN_controller_init+0x1e>
     780:	00 c0       	rjmp	.+0      	; 0x782 <CAN_controller_init+0x24>
     782:	00 00       	nop
	_delay_ms(20);
	
	//uint8_t data = 0x44;
	uint8_t mode_bits = (status & MODE_MASK);
     784:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     786:	80 38       	cpi	r24, 0x80	; 128
     788:	61 f0       	breq	.+24     	; 0x7a2 <CAN_controller_init+0x44>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     78a:	1f 92       	push	r1
     78c:	8f 93       	push	r24
     78e:	81 ec       	ldi	r24, 0xC1	; 193
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	9f 93       	push	r25
     794:	8f 93       	push	r24
     796:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11100000, MCP_CANCTRL, MODE_LOOPBACK);
     7a2:	40 e4       	ldi	r20, 0x40	; 64
     7a4:	6f e0       	ldi	r22, 0x0F	; 15
     7a6:	80 ee       	ldi	r24, 0xE0	; 224
     7a8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     7ac:	40 e6       	ldi	r20, 0x60	; 96
     7ae:	60 e6       	ldi	r22, 0x60	; 96
     7b0:	80 e6       	ldi	r24, 0x60	; 96
     7b2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b11);
     7b6:	43 e0       	ldi	r20, 0x03	; 3
     7b8:	6b e2       	ldi	r22, 0x2B	; 43
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <CAN_controller_bitModify>
	
	//set interrupt on atm162
	 GICR |= (1<< INT0); //turn on interrupt 0
     7c0:	8b b7       	in	r24, 0x3b	; 59
     7c2:	80 64       	ori	r24, 0x40	; 64
     7c4:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01); //Turn on falling edge
     7c6:	85 b7       	in	r24, 0x35	; 53
     7c8:	82 60       	ori	r24, 0x02	; 2
     7ca:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     7cc:	85 b7       	in	r24, 0x35	; 53
     7ce:	8e 7f       	andi	r24, 0xFE	; 254
     7d0:	85 bf       	out	0x35, r24	; 53
//set PD2 as input
	DDRD  &= (1 << PD2); //set as input.
     7d2:	81 b3       	in	r24, 0x11	; 17
     7d4:	84 70       	andi	r24, 0x04	; 4
     7d6:	81 bb       	out	0x11, r24	; 17
     7d8:	ff ef       	ldi	r31, 0xFF	; 255
     7da:	2f ef       	ldi	r18, 0xFF	; 255
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	f1 50       	subi	r31, 0x01	; 1
     7e0:	20 40       	sbci	r18, 0x00	; 0
     7e2:	80 40       	sbci	r24, 0x00	; 0
     7e4:	e1 f7       	brne	.-8      	; 0x7de <CAN_controller_init+0x80>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <CAN_controller_init+0x8a>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <CAN_controller_init+0x8c>
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     7ea:	8c ed       	ldi	r24, 0xDC	; 220
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	9f 93       	push	r25
     7f0:	8f 93       	push	r24
     7f2:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
	
	//Check CANSTAT register
	status = CAN_controller_read(MCP_CANSTAT);
     7f6:	8e e0       	ldi	r24, 0x0E	; 14
     7f8:	0e 94 4c 03 	call	0x698	; 0x698 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     7fc:	1f 92       	push	r1
     7fe:	8f 93       	push	r24
     800:	85 ef       	ldi	r24, 0xF5	; 245
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>

}
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	08 95       	ret

0000081a <CAN_controller_RTS>:

void CAN_controller_RTS(uint8_t buffer) {
     81a:	cf 93       	push	r28
     81c:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0);
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
	switch (buffer) {
     826:	c1 30       	cpi	r28, 0x01	; 1
     828:	41 f0       	breq	.+16     	; 0x83a <CAN_controller_RTS+0x20>
     82a:	18 f0       	brcs	.+6      	; 0x832 <CAN_controller_RTS+0x18>
     82c:	c2 30       	cpi	r28, 0x02	; 2
     82e:	49 f0       	breq	.+18     	; 0x842 <CAN_controller_RTS+0x28>
     830:	0b c0       	rjmp	.+22     	; 0x848 <CAN_controller_RTS+0x2e>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     832:	81 e8       	ldi	r24, 0x81	; 129
     834:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
			break;
     838:	07 c0       	rjmp	.+14     	; 0x848 <CAN_controller_RTS+0x2e>
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     83a:	82 e8       	ldi	r24, 0x82	; 130
     83c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
			break;
     840:	03 c0       	rjmp	.+6      	; 0x848 <CAN_controller_RTS+0x2e>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     842:	84 e8       	ldi	r24, 0x84	; 132
     844:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SPI_masterWrite>
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB4, 1);
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	84 e0       	ldi	r24, 0x04	; 4
     84c:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_setChipSelect>
}
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <sleep_init>:

#include "sleep.h"
#include <avr/sleep.h>
#include <avr/interrupt.h>

void sleep_init() {
     854:	08 95       	ret

00000856 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     856:	88 b1       	in	r24, 0x08	; 8
     858:	88 68       	ori	r24, 0x88	; 136
     85a:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     85c:	85 b7       	in	r24, 0x35	; 53
     85e:	80 62       	ori	r24, 0x20	; 32
     860:	85 bf       	out	0x35, r24	; 53
     862:	88 95       	sleep
     864:	85 b7       	in	r24, 0x35	; 53
     866:	8f 7d       	andi	r24, 0xDF	; 223
     868:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     86a:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     86c:	85 b7       	in	r24, 0x35	; 53
     86e:	8f 7d       	andi	r24, 0xDF	; 223
     870:	85 bf       	out	0x35, r24	; 53
     872:	08 95       	ret

00000874 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     87a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     884:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <joystickOffsetY>
     888:	08 95       	ret

0000088a <joystick_readPosition>:
}
void joystick_readPosition() {
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     89c:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     8a4:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     8a6:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <joystickOffsetX>
     8aa:	c6 17       	cp	r28, r22
     8ac:	80 f4       	brcc	.+32     	; 0x8ce <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	2c 2f       	mov	r18, r28
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	26 1b       	sub	r18, r22
     8b6:	37 0b       	sbc	r19, r23
     8b8:	44 e6       	ldi	r20, 0x64	; 100
     8ba:	42 9f       	mul	r20, r18
     8bc:	c0 01       	movw	r24, r0
     8be:	43 9f       	mul	r20, r19
     8c0:	90 0d       	add	r25, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__divmodhi4>
     8c8:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <joystick_pos>
     8cc:	14 c0       	rjmp	.+40     	; 0x8f6 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     8ce:	46 2f       	mov	r20, r22
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	2c 2f       	mov	r18, r28
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	24 1b       	sub	r18, r20
     8d8:	35 0b       	sbc	r19, r21
     8da:	64 e6       	ldi	r22, 0x64	; 100
     8dc:	62 9f       	mul	r22, r18
     8de:	c0 01       	movw	r24, r0
     8e0:	63 9f       	mul	r22, r19
     8e2:	90 0d       	add	r25, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	6f ef       	ldi	r22, 0xFF	; 255
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	64 1b       	sub	r22, r20
     8ec:	75 0b       	sbc	r23, r21
     8ee:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__divmodhi4>
     8f2:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <joystick_pos>
	}
	if (y_pos < joystickOffsetY) {
     8f6:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <joystickOffsetY>
     8fa:	e2 17       	cp	r30, r18
     8fc:	88 f4       	brcc	.+34     	; 0x920 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     8fe:	62 2f       	mov	r22, r18
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	4e 2f       	mov	r20, r30
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	46 1b       	sub	r20, r22
     908:	57 0b       	sbc	r21, r23
     90a:	24 e6       	ldi	r18, 0x64	; 100
     90c:	24 9f       	mul	r18, r20
     90e:	c0 01       	movw	r24, r0
     910:	25 9f       	mul	r18, r21
     912:	90 0d       	add	r25, r0
     914:	11 24       	eor	r1, r1
     916:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__divmodhi4>
     91a:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <joystick_pos+0x1>
     91e:	13 c0       	rjmp	.+38     	; 0x946 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	4e 2f       	mov	r20, r30
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	42 1b       	sub	r20, r18
     928:	53 0b       	sbc	r21, r19
     92a:	64 e6       	ldi	r22, 0x64	; 100
     92c:	64 9f       	mul	r22, r20
     92e:	c0 01       	movw	r24, r0
     930:	65 9f       	mul	r22, r21
     932:	90 0d       	add	r25, r0
     934:	11 24       	eor	r1, r1
     936:	6f ef       	ldi	r22, 0xFF	; 255
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	62 1b       	sub	r22, r18
     93c:	73 0b       	sbc	r23, r19
     93e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__divmodhi4>
     942:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <joystick_pos+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     946:	cb e6       	ldi	r28, 0x6B	; 107
     948:	d2 e0       	ldi	r29, 0x02	; 2
     94a:	68 81       	ld	r22, Y
     94c:	06 2e       	mov	r0, r22
     94e:	00 0c       	add	r0, r0
     950:	77 0b       	sbc	r23, r23
     952:	88 0b       	sbc	r24, r24
     954:	99 0b       	sbc	r25, r25
     956:	0e 94 c7 08 	call	0x118e	; 0x118e <__floatsisf>
     95a:	6b 01       	movw	r12, r22
     95c:	7c 01       	movw	r14, r24
     95e:	69 81       	ldd	r22, Y+1	; 0x01
     960:	06 2e       	mov	r0, r22
     962:	00 0c       	add	r0, r0
     964:	77 0b       	sbc	r23, r23
     966:	88 0b       	sbc	r24, r24
     968:	99 0b       	sbc	r25, r25
     96a:	0e 94 c7 08 	call	0x118e	; 0x118e <__floatsisf>
     96e:	a7 01       	movw	r20, r14
     970:	96 01       	movw	r18, r12
     972:	0e 94 be 07 	call	0xf7c	; 0xf7c <atan2>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	44 eb       	ldi	r20, 0xB4	; 180
     97c:	53 e4       	ldi	r21, 0x43	; 67
     97e:	0e 94 82 09 	call	0x1304	; 0x1304 <__mulsf3>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	5f e3       	ldi	r21, 0x3F	; 63
     98a:	0e 94 82 09 	call	0x1304	; 0x1304 <__mulsf3>
     98e:	23 ec       	ldi	r18, 0xC3	; 195
     990:	35 ef       	ldi	r19, 0xF5	; 245
     992:	48 e4       	ldi	r20, 0x48	; 72
     994:	50 e4       	ldi	r21, 0x40	; 64
     996:	0e 94 1d 08 	call	0x103a	; 0x103a <__divsf3>
     99a:	0e 94 8f 08 	call	0x111e	; 0x111e <__fixsfsi>
     99e:	7b 83       	std	Y+3, r23	; 0x03
     9a0:	6a 83       	std	Y+2, r22	; 0x02
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	08 95       	ret

000009b0 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     9b0:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     9b2:	80 81       	ld	r24, Z
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	98 0f       	add	r25, r24
     9b8:	99 30       	cpi	r25, 0x09	; 9
     9ba:	20 f4       	brcc	.+8      	; 0x9c4 <joystick_getDirection+0x14>
     9bc:	91 81       	ldd	r25, Z+1	; 0x01
     9be:	9c 5f       	subi	r25, 0xFC	; 252
     9c0:	99 30       	cpi	r25, 0x09	; 9
     9c2:	90 f0       	brcs	.+36     	; 0x9e8 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     9c4:	85 30       	cpi	r24, 0x05	; 5
     9c6:	2c f0       	brlt	.+10     	; 0x9d2 <joystick_getDirection+0x22>
     9c8:	81 81       	ldd	r24, Z+1	; 0x01
     9ca:	8f 5c       	subi	r24, 0xCF	; 207
     9cc:	83 36       	cpi	r24, 0x63	; 99
     9ce:	38 f4       	brcc	.+14     	; 0x9de <joystick_getDirection+0x2e>
     9d0:	0d c0       	rjmp	.+26     	; 0x9ec <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     9d2:	8c 3f       	cpi	r24, 0xFC	; 252
     9d4:	24 f4       	brge	.+8      	; 0x9de <joystick_getDirection+0x2e>
     9d6:	81 81       	ldd	r24, Z+1	; 0x01
     9d8:	8f 5c       	subi	r24, 0xCF	; 207
     9da:	83 36       	cpi	r24, 0x63	; 99
     9dc:	48 f0       	brcs	.+18     	; 0x9f0 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     9de:	81 81       	ldd	r24, Z+1	; 0x01
     9e0:	8c 3f       	cpi	r24, 0xFC	; 252
     9e2:	44 f0       	brlt	.+16     	; 0x9f4 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     9f4:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     9f6:	08 95       	ret

000009f8 <mainMenuInit>:
#include <avr/interrupt.h>



MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     9f8:	8f e1       	ldi	r24, 0x1F	; 31
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 88 0a 	call	0x1510	; 0x1510 <malloc>
	ptr->numChildren = 0;
     a00:	fc 01       	movw	r30, r24
     a02:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     a04:	2a e0       	ldi	r18, 0x0A	; 10
     a06:	e0 e0       	ldi	r30, 0x00	; 0
     a08:	f2 e0       	ldi	r31, 0x02	; 2
     a0a:	dc 01       	movw	r26, r24
     a0c:	01 90       	ld	r0, Z+
     a0e:	0d 92       	st	X+, r0
     a10:	2a 95       	dec	r18
     a12:	e1 f7       	brne	.-8      	; 0xa0c <mainMenuInit+0x14>
	ptr->parent = NULL;
     a14:	fc 01       	movw	r30, r24
     a16:	11 8a       	std	Z+17, r1	; 0x11
     a18:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     a1a:	08 95       	ret

00000a1c <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	7c 01       	movw	r14, r24
     a2c:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     a2e:	8f e1       	ldi	r24, 0x1F	; 31
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 88 0a 	call	0x1510	; 0x1510 <malloc>
     a36:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     a38:	d7 01       	movw	r26, r14
     a3a:	5e 96       	adiw	r26, 0x1e	; 30
     a3c:	ec 91       	ld	r30, X
     a3e:	5e 97       	sbiw	r26, 0x1e	; 30
     a40:	c1 e0       	ldi	r28, 0x01	; 1
     a42:	ce 0f       	add	r28, r30
     a44:	5e 96       	adiw	r26, 0x1e	; 30
     a46:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     a48:	b6 01       	movw	r22, r12
     a4a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <strcpy>
	childPtr->parent = parent;
     a4e:	f8 01       	movw	r30, r16
     a50:	f1 8a       	std	Z+17, r15	; 0x11
     a52:	e0 8a       	std	Z+16, r14	; 0x10
	//printf("Added child: %s\n\r", childPtr->name);

	if (parent->numChildren > MAXCHILDREN) {
     a54:	c7 30       	cpi	r28, 0x07	; 7
     a56:	58 f0       	brcs	.+22     	; 0xa6e <addChild+0x52>
		printf("REached max: \n\r");
     a58:	8a e0       	ldi	r24, 0x0A	; 10
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
		return NULL;
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e c0       	rjmp	.+28     	; 0xa8a <addChild+0x6e>
	} 
	parent->children[parent->numChildren-1]=childPtr;
     a6e:	ec 2f       	mov	r30, r28
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	38 96       	adiw	r30, 0x08	; 8
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	ee 0d       	add	r30, r14
     a7a:	ff 1d       	adc	r31, r15
     a7c:	11 83       	std	Z+1, r17	; 0x01
     a7e:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     a80:	d8 01       	movw	r26, r16
     a82:	5e 96       	adiw	r26, 0x1e	; 30
     a84:	1c 92       	st	X, r1
	return childPtr;
     a86:	80 2f       	mov	r24, r16
     a88:	91 2f       	mov	r25, r17
}
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	08 95       	ret

00000a9a <menuInit>:

MenuNode* menuInit(void)
{
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     aa6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <mainMenuInit>
     aaa:	8c 01       	movw	r16, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     aac:	6a e1       	ldi	r22, 0x1A	; 26
     aae:	72 e0       	ldi	r23, 0x02	; 2
     ab0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <addChild>
     ab4:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     ab6:	64 e2       	ldi	r22, 0x24	; 36
     ab8:	72 e0       	ldi	r23, 0x02	; 2
     aba:	0e 94 0e 05 	call	0xa1c	; 0xa1c <addChild>
	addChild(childPlayGame,"GAME 2");
     abe:	6b e2       	ldi	r22, 0x2B	; 43
     ac0:	72 e0       	ldi	r23, 0x02	; 2
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     ac8:	62 e3       	ldi	r22, 0x32	; 50
     aca:	72 e0       	ldi	r23, 0x02	; 2
     acc:	c8 01       	movw	r24, r16
     ace:	0e 94 0e 05 	call	0xa1c	; 0xa1c <addChild>
     ad2:	7c 01       	movw	r14, r24
     ad4:	c5 e0       	ldi	r28, 0x05	; 5
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     ad8:	6c e3       	ldi	r22, 0x3C	; 60
     ada:	72 e0       	ldi	r23, 0x02	; 2
     adc:	c7 01       	movw	r24, r14
     ade:	0e 94 0e 05 	call	0xa1c	; 0xa1c <addChild>
     ae2:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     ae4:	c9 f7       	brne	.-14     	; 0xad8 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	//MenuNode* childSettings = addChild(mainMenu,"Settings");
	
	MenuNode* childMusic = addChild(mainMenu,"Music");
     ae6:	64 e4       	ldi	r22, 0x44	; 68
     ae8:	72 e0       	ldi	r23, 0x02	; 2
     aea:	c8 01       	movw	r24, r16
     aec:	0e 94 0e 05 	call	0xa1c	; 0xa1c <addChild>
	addChild(childMusic, "Rick");
     af0:	6a e4       	ldi	r22, 0x4A	; 74
     af2:	72 e0       	ldi	r23, 0x02	; 2
     af4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <addChild>
	
	
	//addChild(childSettings, "No sett");
	
	
	printf("Number of children: %i\n\r",mainMenu->numChildren);
     af8:	f8 01       	movw	r30, r16
     afa:	86 8d       	ldd	r24, Z+30	; 0x1e
     afc:	1f 92       	push	r1
     afe:	8f 93       	push	r24
     b00:	8f e4       	ldi	r24, 0x4F	; 79
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <printf>
	/*
	MenuNode* childSettings = addChild(mainMenu,"Settings");
	addChild(childSettings, "No sett");
	printf("Number of children: %i\n\r",childSettings->numChildren);
	*/
	currentMenu.currentMenuItem = mainMenu;
     b0c:	ef e6       	ldi	r30, 0x6F	; 111
     b0e:	f2 e0       	ldi	r31, 0x02	; 2
     b10:	11 83       	std	Z+1, r17	; 0x01
     b12:	00 83       	st	Z, r16
	currentMenu.childIndex = 0;
     b14:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     b16:	84 e0       	ldi	r24, 0x04	; 4
     b18:	83 83       	std	Z+3, r24	; 0x03
	
	return mainMenu;
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
}
     b22:	c8 01       	movw	r24, r16
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     b32:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     b36:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <currentMenu+0x3>
     b3a:	94 30       	cpi	r25, 0x04	; 4
     b3c:	09 f0       	breq	.+2      	; 0xb40 <navigateMenu+0xe>
     b3e:	58 c0       	rjmp	.+176    	; 0xbf0 <navigateMenu+0xbe>
			switch (dir) {
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	e1 f1       	breq	.+120    	; 0xbbc <navigateMenu+0x8a>
     b44:	60 f1       	brcs	.+88     	; 0xb9e <navigateMenu+0x6c>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	c9 f0       	breq	.+50     	; 0xb7c <navigateMenu+0x4a>
     b4a:	83 30       	cpi	r24, 0x03	; 3
     b4c:	09 f0       	breq	.+2      	; 0xb50 <navigateMenu+0x1e>
     b4e:	50 c0       	rjmp	.+160    	; 0xbf0 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     b50:	ef e6       	ldi	r30, 0x6F	; 111
     b52:	f2 e0       	ldi	r31, 0x02	; 2
     b54:	92 81       	ldd	r25, Z+2	; 0x02
     b56:	49 2f       	mov	r20, r25
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	01 90       	ld	r0, Z+
     b5c:	f0 81       	ld	r31, Z
     b5e:	e0 2d       	mov	r30, r0
     b60:	26 8d       	ldd	r18, Z+30	; 0x1e
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	21 50       	subi	r18, 0x01	; 1
     b66:	31 09       	sbc	r19, r1
     b68:	42 17       	cp	r20, r18
     b6a:	53 07       	cpc	r21, r19
     b6c:	24 f4       	brge	.+8      	; 0xb76 <navigateMenu+0x44>
					currentMenu.childIndex++;
     b6e:	9f 5f       	subi	r25, 0xFF	; 255
     b70:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <currentMenu+0x2>
     b74:	3d c0       	rjmp	.+122    	; 0xbf0 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     b76:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <currentMenu+0x2>
     b7a:	3a c0       	rjmp	.+116    	; 0xbf0 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     b7c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <currentMenu+0x2>
     b80:	99 23       	and	r25, r25
     b82:	21 f0       	breq	.+8      	; 0xb8c <navigateMenu+0x5a>
					currentMenu.childIndex--;
     b84:	91 50       	subi	r25, 0x01	; 1
     b86:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <currentMenu+0x2>
     b8a:	32 c0       	rjmp	.+100    	; 0xbf0 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     b8c:	ef e6       	ldi	r30, 0x6F	; 111
     b8e:	f2 e0       	ldi	r31, 0x02	; 2
     b90:	a0 81       	ld	r26, Z
     b92:	b1 81       	ldd	r27, Z+1	; 0x01
     b94:	5e 96       	adiw	r26, 0x1e	; 30
     b96:	9c 91       	ld	r25, X
     b98:	91 50       	subi	r25, 0x01	; 1
     b9a:	92 83       	std	Z+2, r25	; 0x02
     b9c:	29 c0       	rjmp	.+82     	; 0xbf0 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     b9e:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <currentMenu>
     ba2:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <currentMenu+0x1>
     ba6:	20 89       	ldd	r18, Z+16	; 0x10
     ba8:	31 89       	ldd	r19, Z+17	; 0x11
     baa:	21 15       	cp	r18, r1
     bac:	31 05       	cpc	r19, r1
     bae:	01 f1       	breq	.+64     	; 0xbf0 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     bb0:	ef e6       	ldi	r30, 0x6F	; 111
     bb2:	f2 e0       	ldi	r31, 0x02	; 2
     bb4:	31 83       	std	Z+1, r19	; 0x01
     bb6:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     bb8:	12 82       	std	Z+2, r1	; 0x02
     bba:	1a c0       	rjmp	.+52     	; 0xbf0 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     bbc:	af e6       	ldi	r26, 0x6F	; 111
     bbe:	b2 e0       	ldi	r27, 0x02	; 2
     bc0:	2d 91       	ld	r18, X+
     bc2:	3c 91       	ld	r19, X
     bc4:	11 97       	sbiw	r26, 0x01	; 1
     bc6:	12 96       	adiw	r26, 0x02	; 2
     bc8:	9c 91       	ld	r25, X
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	e9 2f       	mov	r30, r25
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	39 96       	adiw	r30, 0x09	; 9
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	e2 0f       	add	r30, r18
     bd8:	f3 1f       	adc	r31, r19
     bda:	01 90       	ld	r0, Z+
     bdc:	f0 81       	ld	r31, Z
     bde:	e0 2d       	mov	r30, r0
     be0:	96 8d       	ldd	r25, Z+30	; 0x1e
     be2:	99 23       	and	r25, r25
     be4:	29 f0       	breq	.+10     	; 0xbf0 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     be6:	11 96       	adiw	r26, 0x01	; 1
     be8:	fc 93       	st	X, r31
     bea:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     bec:	12 96       	adiw	r26, 0x02	; 2
     bee:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     bf0:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <currentMenu+0x3>
     bf4:	08 95       	ret

00000bf6 <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
	oled_reset();
     bfe:	0e 94 45 06 	call	0xc8a	; 0xc8a <oled_reset>
	oled_home();
     c02:	0e 94 66 06 	call	0xccc	; 0xccc <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     c06:	cf e6       	ldi	r28, 0x6F	; 111
     c08:	d2 e0       	ldi	r29, 0x02	; 2
     c0a:	88 81       	ld	r24, Y
     c0c:	99 81       	ldd	r25, Y+1	; 0x01
     c0e:	0e 94 a1 06 	call	0xd42	; 0xd42 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     c12:	e8 81       	ld	r30, Y
     c14:	f9 81       	ldd	r31, Y+1	; 0x01
     c16:	86 8d       	ldd	r24, Z+30	; 0x1e
     c18:	88 23       	and	r24, r24
     c1a:	31 f1       	breq	.+76     	; 0xc68 <menu_printCurrentMenu+0x72>
     c1c:	c0 e0       	ldi	r28, 0x00	; 0
     c1e:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     c20:	0f e6       	ldi	r16, 0x6F	; 111
     c22:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     c24:	ce 01       	movw	r24, r28
     c26:	02 96       	adiw	r24, 0x02	; 2
     c28:	0e 94 9d 06 	call	0xd3a	; 0xd3a <oled_gotoLine>
		oled_print(currentMenu.currentMenuItem->children[i]->name);
     c2c:	d8 01       	movw	r26, r16
     c2e:	8d 91       	ld	r24, X+
     c30:	9c 91       	ld	r25, X
     c32:	fe 01       	movw	r30, r28
     c34:	39 96       	adiw	r30, 0x09	; 9
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e8 0f       	add	r30, r24
     c3c:	f9 1f       	adc	r31, r25
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	0e 94 a1 06 	call	0xd42	; 0xd42 <oled_print>
		if (currentMenu.childIndex == i) {
     c46:	f8 01       	movw	r30, r16
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	8c 17       	cp	r24, r28
     c4e:	9d 07       	cpc	r25, r29
     c50:	11 f4       	brne	.+4      	; 0xc56 <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     c52:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     c56:	21 96       	adiw	r28, 0x01	; 1
     c58:	d8 01       	movw	r26, r16
     c5a:	ed 91       	ld	r30, X+
     c5c:	fc 91       	ld	r31, X
     c5e:	86 8d       	ldd	r24, Z+30	; 0x1e
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	c8 17       	cp	r28, r24
     c64:	d9 07       	cpc	r29, r25
     c66:	f4 f2       	brlt	.-68     	; 0xc24 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     c72:	80 55       	subi	r24, 0x50	; 80
     c74:	e0 e0       	ldi	r30, 0x00	; 0
     c76:	f0 e1       	ldi	r31, 0x10	; 16
     c78:	80 83       	st	Z, r24
     c7a:	86 2f       	mov	r24, r22
     c7c:	8f 70       	andi	r24, 0x0F	; 15
     c7e:	80 83       	st	Z, r24
     c80:	62 95       	swap	r22
     c82:	6f 70       	andi	r22, 0x0F	; 15
     c84:	60 61       	ori	r22, 0x10	; 16
     c86:	60 83       	st	Z, r22
     c88:	08 95       	ret

00000c8a <oled_reset>:
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	10 e0       	ldi	r17, 0x00	; 0
     c92:	c0 e0       	ldi	r28, 0x00	; 0
     c94:	d2 e1       	ldi	r29, 0x12	; 18
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	81 2f       	mov	r24, r17
     c9a:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_pos>
     c9e:	80 e8       	ldi	r24, 0x80	; 128
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	18 82       	st	Y, r1
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	e9 f7       	brne	.-6      	; 0xca2 <oled_reset+0x18>
     ca8:	1f 5f       	subi	r17, 0xFF	; 255
     caa:	18 30       	cpi	r17, 0x08	; 8
     cac:	a1 f7       	brne	.-24     	; 0xc96 <oled_reset+0xc>
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	08 95       	ret

00000cb6 <oled_print_arrow>:
     cb6:	e0 e0       	ldi	r30, 0x00	; 0
     cb8:	f2 e1       	ldi	r31, 0x12	; 18
     cba:	88 e1       	ldi	r24, 0x18	; 24
     cbc:	80 83       	st	Z, r24
     cbe:	9c e3       	ldi	r25, 0x3C	; 60
     cc0:	90 83       	st	Z, r25
     cc2:	9e e7       	ldi	r25, 0x7E	; 126
     cc4:	90 83       	st	Z, r25
     cc6:	80 83       	st	Z, r24
     cc8:	80 83       	st	Z, r24
     cca:	08 95       	ret

00000ccc <oled_home>:
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_pos>
     cd4:	08 95       	ret

00000cd6 <oled_init>:
     cd6:	e0 e0       	ldi	r30, 0x00	; 0
     cd8:	f0 e1       	ldi	r31, 0x10	; 16
     cda:	8e ea       	ldi	r24, 0xAE	; 174
     cdc:	80 83       	st	Z, r24
     cde:	81 ea       	ldi	r24, 0xA1	; 161
     ce0:	80 83       	st	Z, r24
     ce2:	8a ed       	ldi	r24, 0xDA	; 218
     ce4:	80 83       	st	Z, r24
     ce6:	82 e1       	ldi	r24, 0x12	; 18
     ce8:	80 83       	st	Z, r24
     cea:	88 ec       	ldi	r24, 0xC8	; 200
     cec:	80 83       	st	Z, r24
     cee:	88 ea       	ldi	r24, 0xA8	; 168
     cf0:	80 83       	st	Z, r24
     cf2:	8f e3       	ldi	r24, 0x3F	; 63
     cf4:	80 83       	st	Z, r24
     cf6:	85 ed       	ldi	r24, 0xD5	; 213
     cf8:	80 83       	st	Z, r24
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	80 83       	st	Z, r24
     cfe:	81 e8       	ldi	r24, 0x81	; 129
     d00:	80 83       	st	Z, r24
     d02:	80 e5       	ldi	r24, 0x50	; 80
     d04:	80 83       	st	Z, r24
     d06:	89 ed       	ldi	r24, 0xD9	; 217
     d08:	80 83       	st	Z, r24
     d0a:	81 e2       	ldi	r24, 0x21	; 33
     d0c:	80 83       	st	Z, r24
     d0e:	80 e2       	ldi	r24, 0x20	; 32
     d10:	80 83       	st	Z, r24
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	80 83       	st	Z, r24
     d16:	8b ed       	ldi	r24, 0xDB	; 219
     d18:	80 83       	st	Z, r24
     d1a:	80 e3       	ldi	r24, 0x30	; 48
     d1c:	80 83       	st	Z, r24
     d1e:	8d ea       	ldi	r24, 0xAD	; 173
     d20:	80 83       	st	Z, r24
     d22:	10 82       	st	Z, r1
     d24:	84 ea       	ldi	r24, 0xA4	; 164
     d26:	80 83       	st	Z, r24
     d28:	86 ea       	ldi	r24, 0xA6	; 166
     d2a:	80 83       	st	Z, r24
     d2c:	8f ea       	ldi	r24, 0xAF	; 175
     d2e:	80 83       	st	Z, r24
     d30:	0e 94 45 06 	call	0xc8a	; 0xc8a <oled_reset>
     d34:	0e 94 66 06 	call	0xccc	; 0xccc <oled_home>
     d38:	08 95       	ret

00000d3a <oled_gotoLine>:
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_pos>
     d40:	08 95       	ret

00000d42 <oled_print>:

void oled_print(char* character){
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	dc 01       	movw	r26, r24
	while (*character != '\0')
     d48:	8c 91       	ld	r24, X
     d4a:	81 11       	cpse	r24, r1
     d4c:	1a c0       	rjmp	.+52     	; 0xd82 <oled_print+0x40>
     d4e:	1e c0       	rjmp	.+60     	; 0xd8c <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     d50:	ec 91       	ld	r30, X
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	b0 97       	sbiw	r30, 0x20	; 32
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	e2 56       	subi	r30, 0x62	; 98
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     d6c:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     d6e:	2f 5f       	subi	r18, 0xFF	; 255
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	28 30       	cpi	r18, 0x08	; 8
     d74:	31 05       	cpc	r19, r1
     d76:	61 f7       	brne	.-40     	; 0xd50 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     d78:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     d7a:	8c 91       	ld	r24, X
     d7c:	81 11       	cpse	r24, r1
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <oled_print+0x44>
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     d82:	c0 e0       	ldi	r28, 0x00	; 0
     d84:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	e2 cf       	rjmp	.-60     	; 0xd50 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <setupInit>:
#include "oled.h"
#include "timer.h"
#include "sleep.h"

	void setupInit(void){
	cli();
     d92:	f8 94       	cli
	xmem_init();
     d94:	0e 94 a4 07 	call	0xf48	; 0xf48 <xmem_init>
	USART_init(MYUBRR);
     d98:	8f e1       	ldi	r24, 0x1F	; 31
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 93 07 	call	0xf26	; 0xf26 <USART_init>
	adcInit();
     da0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     da4:	0e 94 3a 04 	call	0x874	; 0x874 <joystickInit>
	touchButton_init();
     da8:	0e 94 66 07 	call	0xecc	; 0xecc <touchButton_init>
	oled_init();
     dac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <oled_init>
	timer_init();
     db0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <timer_init>
	sleep_init();
     db4:	0e 94 2a 04 	call	0x854	; 0x854 <sleep_init>
	menuInit();
     db8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <menuInit>
	CAN_controller_init();
     dbc:	0e 94 af 03 	call	0x75e	; 0x75e <CAN_controller_init>
	sei();
     dc0:	78 94       	sei
     dc2:	08 95       	ret

00000dc4 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     dce:	c5 e7       	ldi	r28, 0x75	; 117
     dd0:	d2 e0       	ldi	r29, 0x02	; 2
     dd2:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     de2:	87 b3       	in	r24, 0x17	; 23
     de4:	80 6a       	ori	r24, 0xA0	; 160
     de6:	87 bb       	out	0x17, r24	; 23
     de8:	bc 9a       	sbi	0x17, 4	; 23
     dea:	8d b1       	in	r24, 0x0d	; 13
     dec:	81 65       	ori	r24, 0x51	; 81
     dee:	8d b9       	out	0x0d, r24	; 13
     df0:	c4 9a       	sbi	0x18, 4	; 24
     df2:	08 95       	ret

00000df4 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     df4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     df6:	77 9b       	sbis	0x0e, 7	; 14
     df8:	fe cf       	rjmp	.-4      	; 0xdf6 <SPI_masterWrite+0x2>

}
     dfa:	08 95       	ret

00000dfc <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     dfc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     dfe:	77 9b       	sbis	0x0e, 7	; 14
     e00:	fe cf       	rjmp	.-4      	; 0xdfe <SPI_masterRead+0x2>
	return SPDR;
     e02:	8f b1       	in	r24, 0x0f	; 15
}
     e04:	08 95       	ret

00000e06 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     e06:	66 23       	and	r22, r22
     e08:	69 f0       	breq	.+26     	; 0xe24 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     e0a:	48 b3       	in	r20, 0x18	; 24
     e0c:	21 e0       	ldi	r18, 0x01	; 1
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	b9 01       	movw	r22, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <SPI_setChipSelect+0x12>
     e14:	66 0f       	add	r22, r22
     e16:	77 1f       	adc	r23, r23
     e18:	8a 95       	dec	r24
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <SPI_setChipSelect+0xe>
     e1c:	cb 01       	movw	r24, r22
     e1e:	84 2b       	or	r24, r20
     e20:	88 bb       	out	0x18, r24	; 24
     e22:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     e24:	48 b3       	in	r20, 0x18	; 24
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	b9 01       	movw	r22, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <SPI_setChipSelect+0x2c>
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <SPI_setChipSelect+0x28>
     e36:	cb 01       	movw	r24, r22
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	88 bb       	out	0x18, r24	; 24
     e3e:	08 95       	ret

00000e40 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
	cli();
     e62:	f8 94       	cli
	TCNT1 = 0x00;
     e64:	1d bc       	out	0x2d, r1	; 45
     e66:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     e68:	8b e6       	ldi	r24, 0x6B	; 107
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	0e 94 45 04 	call	0x88a	; 0x88a <joystick_readPosition>
	slider_readPosition(&slider_pos);
     e70:	85 e7       	ldi	r24, 0x75	; 117
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <slider_readPosition>
	touchButton_readButtons(&buttons);
     e78:	83 e7       	ldi	r24, 0x73	; 115
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 7f 07 	call	0xefe	; 0xefe <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     e80:	8b e6       	ldi	r24, 0x6B	; 107
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	0e 94 99 05 	call	0xb32	; 0xb32 <navigateMenu>
	menu_printCurrentMenu();
     e88:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <menu_printCurrentMenu>
	sei();
     e8c:	78 94       	sei
}
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     eb0:	89 b7       	in	r24, 0x39	; 57
     eb2:	80 62       	ori	r24, 0x20	; 32
     eb4:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     eb6:	1d bc       	out	0x2d, r1	; 45
     eb8:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     eba:	80 e3       	ldi	r24, 0x30	; 48
     ebc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     ec2:	80 ef       	ldi	r24, 0xF0	; 240
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	99 bd       	out	0x29, r25	; 41
     ec8:	88 bd       	out	0x28, r24	; 40
     eca:	08 95       	ret

00000ecc <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     ecc:	36 b3       	in	r19, 0x16	; 22
     ece:	26 b3       	in	r18, 0x16	; 22
     ed0:	47 b3       	in	r20, 0x17	; 23
     ed2:	32 70       	andi	r19, 0x02	; 2
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	bc 01       	movw	r22, r24
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <touchButton_init+0x14>
     edc:	66 0f       	add	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	3a 95       	dec	r19
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <touchButton_init+0x10>
     ee4:	24 70       	andi	r18, 0x04	; 4
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <touchButton_init+0x20>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	2a 95       	dec	r18
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <touchButton_init+0x1c>
     ef0:	86 2b       	or	r24, r22
     ef2:	97 2b       	or	r25, r23
     ef4:	80 95       	com	r24
     ef6:	90 95       	com	r25
     ef8:	84 23       	and	r24, r20
     efa:	87 bb       	out	0x17, r24	; 23
     efc:	08 95       	ret

00000efe <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     efe:	86 b3       	in	r24, 0x16	; 22
     f00:	e3 e7       	ldi	r30, 0x73	; 115
     f02:	f2 e0       	ldi	r31, 0x02	; 2
     f04:	86 95       	lsr	r24
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     f0a:	86 b3       	in	r24, 0x16	; 22
     f0c:	82 fb       	bst	r24, 2
     f0e:	88 27       	eor	r24, r24
     f10:	80 f9       	bld	r24, 0
     f12:	81 83       	std	Z+1, r24	; 0x01
     f14:	08 95       	ret

00000f16 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     f16:	5d 9b       	sbis	0x0b, 5	; 11
     f18:	fe cf       	rjmp	.-4      	; 0xf16 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     f1a:	8c b9       	out	0x0c, r24	; 12
     f1c:	08 95       	ret

00000f1e <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     f1e:	5f 9b       	sbis	0x0b, 7	; 11
     f20:	fe cf       	rjmp	.-4      	; 0xf1e <USART_receiveChar>
		;
	
	return UDR0;
     f22:	8c b1       	in	r24, 0x0c	; 12
     f24:	08 95       	ret

00000f26 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     f26:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     f28:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     f2a:	88 e1       	ldi	r24, 0x18	; 24
     f2c:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     f2e:	8e e8       	ldi	r24, 0x8E	; 142
     f30:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     f32:	6f e8       	ldi	r22, 0x8F	; 143
     f34:	77 e0       	ldi	r23, 0x07	; 7
     f36:	8b e8       	ldi	r24, 0x8B	; 139
     f38:	97 e0       	ldi	r25, 0x07	; 7
     f3a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <fdevopen>
     f3e:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <uart+0x1>
     f42:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <uart>
     f46:	08 95       	ret

00000f48 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     f48:	85 b7       	in	r24, 0x35	; 53
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     f4e:	80 b7       	in	r24, 0x30	; 48
     f50:	88 60       	ori	r24, 0x08	; 8
     f52:	80 bf       	out	0x30, r24	; 48
     f54:	08 95       	ret
     f56:	0e 94 32 09 	call	0x1264	; 0x1264 <__fp_pscA>
     f5a:	60 f0       	brcs	.+24     	; 0xf74 <xmem_init+0x2c>
     f5c:	80 e8       	ldi	r24, 0x80	; 128
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	09 f4       	brne	.+2      	; 0xf64 <xmem_init+0x1c>
     f62:	9e ef       	ldi	r25, 0xFE	; 254
     f64:	0e 94 39 09 	call	0x1272	; 0x1272 <__fp_pscB>
     f68:	28 f0       	brcs	.+10     	; 0xf74 <xmem_init+0x2c>
     f6a:	40 e8       	ldi	r20, 0x80	; 128
     f6c:	51 e0       	ldi	r21, 0x01	; 1
     f6e:	71 f4       	brne	.+28     	; 0xf8c <atan2+0x10>
     f70:	5e ef       	ldi	r21, 0xFE	; 254
     f72:	0c c0       	rjmp	.+24     	; 0xf8c <atan2+0x10>
     f74:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_nan>
     f78:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__fp_zero>

00000f7c <atan2>:
     f7c:	e9 2f       	mov	r30, r25
     f7e:	e0 78       	andi	r30, 0x80	; 128
     f80:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fp_split3>
     f84:	40 f3       	brcs	.-48     	; 0xf56 <xmem_init+0xe>
     f86:	09 2e       	mov	r0, r25
     f88:	05 2a       	or	r0, r21
     f8a:	b1 f3       	breq	.-20     	; 0xf78 <xmem_init+0x30>
     f8c:	26 17       	cp	r18, r22
     f8e:	37 07       	cpc	r19, r23
     f90:	48 07       	cpc	r20, r24
     f92:	59 07       	cpc	r21, r25
     f94:	38 f0       	brcs	.+14     	; 0xfa4 <atan2+0x28>
     f96:	0e 2e       	mov	r0, r30
     f98:	07 f8       	bld	r0, 7
     f9a:	e0 25       	eor	r30, r0
     f9c:	69 f0       	breq	.+26     	; 0xfb8 <atan2+0x3c>
     f9e:	e0 25       	eor	r30, r0
     fa0:	e0 64       	ori	r30, 0x40	; 64
     fa2:	0a c0       	rjmp	.+20     	; 0xfb8 <atan2+0x3c>
     fa4:	ef 63       	ori	r30, 0x3F	; 63
     fa6:	07 f8       	bld	r0, 7
     fa8:	00 94       	com	r0
     faa:	07 fa       	bst	r0, 7
     fac:	db 01       	movw	r26, r22
     fae:	b9 01       	movw	r22, r18
     fb0:	9d 01       	movw	r18, r26
     fb2:	dc 01       	movw	r26, r24
     fb4:	ca 01       	movw	r24, r20
     fb6:	ad 01       	movw	r20, r26
     fb8:	ef 93       	push	r30
     fba:	0e 94 34 08 	call	0x1068	; 0x1068 <__divsf3_pse>
     fbe:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_round>
     fc2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <atan>
     fc6:	5f 91       	pop	r21
     fc8:	55 23       	and	r21, r21
     fca:	39 f0       	breq	.+14     	; 0xfda <atan2+0x5e>
     fcc:	2b ed       	ldi	r18, 0xDB	; 219
     fce:	3f e0       	ldi	r19, 0x0F	; 15
     fd0:	49 e4       	ldi	r20, 0x49	; 73
     fd2:	50 fd       	sbrc	r21, 0
     fd4:	49 ec       	ldi	r20, 0xC9	; 201
     fd6:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__addsf3>
     fda:	08 95       	ret

00000fdc <atan>:
     fdc:	df 93       	push	r29
     fde:	dd 27       	eor	r29, r29
     fe0:	b9 2f       	mov	r27, r25
     fe2:	bf 77       	andi	r27, 0x7F	; 127
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	5f e3       	ldi	r21, 0x3F	; 63
     fe8:	16 16       	cp	r1, r22
     fea:	17 06       	cpc	r1, r23
     fec:	48 07       	cpc	r20, r24
     fee:	5b 07       	cpc	r21, r27
     ff0:	18 f4       	brcc	.+6      	; 0xff8 <atan+0x1c>
     ff2:	d9 2f       	mov	r29, r25
     ff4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <inverse>
     ff8:	9f 93       	push	r25
     ffa:	8f 93       	push	r24
     ffc:	7f 93       	push	r23
     ffe:	6f 93       	push	r22
    1000:	0e 94 ef 09 	call	0x13de	; 0x13de <square>
    1004:	e0 e7       	ldi	r30, 0x70	; 112
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	0e 94 0b 09 	call	0x1216	; 0x1216 <__fp_powser>
    100c:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_round>
    1010:	2f 91       	pop	r18
    1012:	3f 91       	pop	r19
    1014:	4f 91       	pop	r20
    1016:	5f 91       	pop	r21
    1018:	0e 94 95 09 	call	0x132a	; 0x132a <__mulsf3x>
    101c:	dd 23       	and	r29, r29
    101e:	51 f0       	breq	.+20     	; 0x1034 <atan+0x58>
    1020:	90 58       	subi	r25, 0x80	; 128
    1022:	a2 ea       	ldi	r26, 0xA2	; 162
    1024:	2a ed       	ldi	r18, 0xDA	; 218
    1026:	3f e0       	ldi	r19, 0x0F	; 15
    1028:	49 ec       	ldi	r20, 0xC9	; 201
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	d0 78       	andi	r29, 0x80	; 128
    102e:	5d 27       	eor	r21, r29
    1030:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__addsf3x>
    1034:	df 91       	pop	r29
    1036:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_round>

0000103a <__divsf3>:
    103a:	0e 94 31 08 	call	0x1062	; 0x1062 <__divsf3x>
    103e:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_round>
    1042:	0e 94 39 09 	call	0x1272	; 0x1272 <__fp_pscB>
    1046:	58 f0       	brcs	.+22     	; 0x105e <__divsf3+0x24>
    1048:	0e 94 32 09 	call	0x1264	; 0x1264 <__fp_pscA>
    104c:	40 f0       	brcs	.+16     	; 0x105e <__divsf3+0x24>
    104e:	29 f4       	brne	.+10     	; 0x105a <__divsf3+0x20>
    1050:	5f 3f       	cpi	r21, 0xFF	; 255
    1052:	29 f0       	breq	.+10     	; 0x105e <__divsf3+0x24>
    1054:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_inf>
    1058:	51 11       	cpse	r21, r1
    105a:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_szero>
    105e:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_nan>

00001062 <__divsf3x>:
    1062:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fp_split3>
    1066:	68 f3       	brcs	.-38     	; 0x1042 <__divsf3+0x8>

00001068 <__divsf3_pse>:
    1068:	99 23       	and	r25, r25
    106a:	b1 f3       	breq	.-20     	; 0x1058 <__divsf3+0x1e>
    106c:	55 23       	and	r21, r21
    106e:	91 f3       	breq	.-28     	; 0x1054 <__divsf3+0x1a>
    1070:	95 1b       	sub	r25, r21
    1072:	55 0b       	sbc	r21, r21
    1074:	bb 27       	eor	r27, r27
    1076:	aa 27       	eor	r26, r26
    1078:	62 17       	cp	r22, r18
    107a:	73 07       	cpc	r23, r19
    107c:	84 07       	cpc	r24, r20
    107e:	38 f0       	brcs	.+14     	; 0x108e <__divsf3_pse+0x26>
    1080:	9f 5f       	subi	r25, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	44 1f       	adc	r20, r20
    108a:	aa 1f       	adc	r26, r26
    108c:	a9 f3       	breq	.-22     	; 0x1078 <__divsf3_pse+0x10>
    108e:	35 d0       	rcall	.+106    	; 0x10fa <__divsf3_pse+0x92>
    1090:	0e 2e       	mov	r0, r30
    1092:	3a f0       	brmi	.+14     	; 0x10a2 <__divsf3_pse+0x3a>
    1094:	e0 e8       	ldi	r30, 0x80	; 128
    1096:	32 d0       	rcall	.+100    	; 0x10fc <__divsf3_pse+0x94>
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	50 40       	sbci	r21, 0x00	; 0
    109c:	e6 95       	lsr	r30
    109e:	00 1c       	adc	r0, r0
    10a0:	ca f7       	brpl	.-14     	; 0x1094 <__divsf3_pse+0x2c>
    10a2:	2b d0       	rcall	.+86     	; 0x10fa <__divsf3_pse+0x92>
    10a4:	fe 2f       	mov	r31, r30
    10a6:	29 d0       	rcall	.+82     	; 0x10fa <__divsf3_pse+0x92>
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	bb 1f       	adc	r27, r27
    10b0:	26 17       	cp	r18, r22
    10b2:	37 07       	cpc	r19, r23
    10b4:	48 07       	cpc	r20, r24
    10b6:	ab 07       	cpc	r26, r27
    10b8:	b0 e8       	ldi	r27, 0x80	; 128
    10ba:	09 f0       	breq	.+2      	; 0x10be <__divsf3_pse+0x56>
    10bc:	bb 0b       	sbc	r27, r27
    10be:	80 2d       	mov	r24, r0
    10c0:	bf 01       	movw	r22, r30
    10c2:	ff 27       	eor	r31, r31
    10c4:	93 58       	subi	r25, 0x83	; 131
    10c6:	5f 4f       	sbci	r21, 0xFF	; 255
    10c8:	3a f0       	brmi	.+14     	; 0x10d8 <__divsf3_pse+0x70>
    10ca:	9e 3f       	cpi	r25, 0xFE	; 254
    10cc:	51 05       	cpc	r21, r1
    10ce:	78 f0       	brcs	.+30     	; 0x10ee <__divsf3_pse+0x86>
    10d0:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_inf>
    10d4:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_szero>
    10d8:	5f 3f       	cpi	r21, 0xFF	; 255
    10da:	e4 f3       	brlt	.-8      	; 0x10d4 <__divsf3_pse+0x6c>
    10dc:	98 3e       	cpi	r25, 0xE8	; 232
    10de:	d4 f3       	brlt	.-12     	; 0x10d4 <__divsf3_pse+0x6c>
    10e0:	86 95       	lsr	r24
    10e2:	77 95       	ror	r23
    10e4:	67 95       	ror	r22
    10e6:	b7 95       	ror	r27
    10e8:	f7 95       	ror	r31
    10ea:	9f 5f       	subi	r25, 0xFF	; 255
    10ec:	c9 f7       	brne	.-14     	; 0x10e0 <__divsf3_pse+0x78>
    10ee:	88 0f       	add	r24, r24
    10f0:	91 1d       	adc	r25, r1
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	97 f9       	bld	r25, 7
    10f8:	08 95       	ret
    10fa:	e1 e0       	ldi	r30, 0x01	; 1
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	bb 1f       	adc	r27, r27
    1104:	62 17       	cp	r22, r18
    1106:	73 07       	cpc	r23, r19
    1108:	84 07       	cpc	r24, r20
    110a:	ba 07       	cpc	r27, r26
    110c:	20 f0       	brcs	.+8      	; 0x1116 <__divsf3_pse+0xae>
    110e:	62 1b       	sub	r22, r18
    1110:	73 0b       	sbc	r23, r19
    1112:	84 0b       	sbc	r24, r20
    1114:	ba 0b       	sbc	r27, r26
    1116:	ee 1f       	adc	r30, r30
    1118:	88 f7       	brcc	.-30     	; 0x10fc <__divsf3_pse+0x94>
    111a:	e0 95       	com	r30
    111c:	08 95       	ret

0000111e <__fixsfsi>:
    111e:	0e 94 96 08 	call	0x112c	; 0x112c <__fixunssfsi>
    1122:	68 94       	set
    1124:	b1 11       	cpse	r27, r1
    1126:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_szero>
    112a:	08 95       	ret

0000112c <__fixunssfsi>:
    112c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fp_splitA>
    1130:	88 f0       	brcs	.+34     	; 0x1154 <__fixunssfsi+0x28>
    1132:	9f 57       	subi	r25, 0x7F	; 127
    1134:	98 f0       	brcs	.+38     	; 0x115c <__fixunssfsi+0x30>
    1136:	b9 2f       	mov	r27, r25
    1138:	99 27       	eor	r25, r25
    113a:	b7 51       	subi	r27, 0x17	; 23
    113c:	b0 f0       	brcs	.+44     	; 0x116a <__fixunssfsi+0x3e>
    113e:	e1 f0       	breq	.+56     	; 0x1178 <__fixunssfsi+0x4c>
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	1a f0       	brmi	.+6      	; 0x1150 <__fixunssfsi+0x24>
    114a:	ba 95       	dec	r27
    114c:	c9 f7       	brne	.-14     	; 0x1140 <__fixunssfsi+0x14>
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <__fixunssfsi+0x4c>
    1150:	b1 30       	cpi	r27, 0x01	; 1
    1152:	91 f0       	breq	.+36     	; 0x1178 <__fixunssfsi+0x4c>
    1154:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fp_zero>
    1158:	b1 e0       	ldi	r27, 0x01	; 1
    115a:	08 95       	ret
    115c:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__fp_zero>
    1160:	67 2f       	mov	r22, r23
    1162:	78 2f       	mov	r23, r24
    1164:	88 27       	eor	r24, r24
    1166:	b8 5f       	subi	r27, 0xF8	; 248
    1168:	39 f0       	breq	.+14     	; 0x1178 <__fixunssfsi+0x4c>
    116a:	b9 3f       	cpi	r27, 0xF9	; 249
    116c:	cc f3       	brlt	.-14     	; 0x1160 <__fixunssfsi+0x34>
    116e:	86 95       	lsr	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b3 95       	inc	r27
    1176:	d9 f7       	brne	.-10     	; 0x116e <__fixunssfsi+0x42>
    1178:	3e f4       	brtc	.+14     	; 0x1188 <__fixunssfsi+0x5c>
    117a:	90 95       	com	r25
    117c:	80 95       	com	r24
    117e:	70 95       	com	r23
    1180:	61 95       	neg	r22
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	08 95       	ret

0000118a <__floatunsisf>:
    118a:	e8 94       	clt
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <__floatsisf+0x12>

0000118e <__floatsisf>:
    118e:	97 fb       	bst	r25, 7
    1190:	3e f4       	brtc	.+14     	; 0x11a0 <__floatsisf+0x12>
    1192:	90 95       	com	r25
    1194:	80 95       	com	r24
    1196:	70 95       	com	r23
    1198:	61 95       	neg	r22
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	8f 4f       	sbci	r24, 0xFF	; 255
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	99 23       	and	r25, r25
    11a2:	a9 f0       	breq	.+42     	; 0x11ce <__floatsisf+0x40>
    11a4:	f9 2f       	mov	r31, r25
    11a6:	96 e9       	ldi	r25, 0x96	; 150
    11a8:	bb 27       	eor	r27, r27
    11aa:	93 95       	inc	r25
    11ac:	f6 95       	lsr	r31
    11ae:	87 95       	ror	r24
    11b0:	77 95       	ror	r23
    11b2:	67 95       	ror	r22
    11b4:	b7 95       	ror	r27
    11b6:	f1 11       	cpse	r31, r1
    11b8:	f8 cf       	rjmp	.-16     	; 0x11aa <__floatsisf+0x1c>
    11ba:	fa f4       	brpl	.+62     	; 0x11fa <__floatsisf+0x6c>
    11bc:	bb 0f       	add	r27, r27
    11be:	11 f4       	brne	.+4      	; 0x11c4 <__floatsisf+0x36>
    11c0:	60 ff       	sbrs	r22, 0
    11c2:	1b c0       	rjmp	.+54     	; 0x11fa <__floatsisf+0x6c>
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ca:	9f 4f       	sbci	r25, 0xFF	; 255
    11cc:	16 c0       	rjmp	.+44     	; 0x11fa <__floatsisf+0x6c>
    11ce:	88 23       	and	r24, r24
    11d0:	11 f0       	breq	.+4      	; 0x11d6 <__floatsisf+0x48>
    11d2:	96 e9       	ldi	r25, 0x96	; 150
    11d4:	11 c0       	rjmp	.+34     	; 0x11f8 <__floatsisf+0x6a>
    11d6:	77 23       	and	r23, r23
    11d8:	21 f0       	breq	.+8      	; 0x11e2 <__floatsisf+0x54>
    11da:	9e e8       	ldi	r25, 0x8E	; 142
    11dc:	87 2f       	mov	r24, r23
    11de:	76 2f       	mov	r23, r22
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <__floatsisf+0x5e>
    11e2:	66 23       	and	r22, r22
    11e4:	71 f0       	breq	.+28     	; 0x1202 <__floatsisf+0x74>
    11e6:	96 e8       	ldi	r25, 0x86	; 134
    11e8:	86 2f       	mov	r24, r22
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	2a f0       	brmi	.+10     	; 0x11fa <__floatsisf+0x6c>
    11f0:	9a 95       	dec	r25
    11f2:	66 0f       	add	r22, r22
    11f4:	77 1f       	adc	r23, r23
    11f6:	88 1f       	adc	r24, r24
    11f8:	da f7       	brpl	.-10     	; 0x11f0 <__floatsisf+0x62>
    11fa:	88 0f       	add	r24, r24
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret

00001204 <__fp_inf>:
    1204:	97 f9       	bld	r25, 7
    1206:	9f 67       	ori	r25, 0x7F	; 127
    1208:	80 e8       	ldi	r24, 0x80	; 128
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	08 95       	ret

00001210 <__fp_nan>:
    1210:	9f ef       	ldi	r25, 0xFF	; 255
    1212:	80 ec       	ldi	r24, 0xC0	; 192
    1214:	08 95       	ret

00001216 <__fp_powser>:
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	1f 93       	push	r17
    121c:	0f 93       	push	r16
    121e:	ff 92       	push	r15
    1220:	ef 92       	push	r14
    1222:	df 92       	push	r13
    1224:	7b 01       	movw	r14, r22
    1226:	8c 01       	movw	r16, r24
    1228:	68 94       	set
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <__fp_powser+0x22>
    122c:	da 2e       	mov	r13, r26
    122e:	ef 01       	movw	r28, r30
    1230:	0e 94 95 09 	call	0x132a	; 0x132a <__mulsf3x>
    1234:	fe 01       	movw	r30, r28
    1236:	e8 94       	clt
    1238:	a5 91       	lpm	r26, Z+
    123a:	25 91       	lpm	r18, Z+
    123c:	35 91       	lpm	r19, Z+
    123e:	45 91       	lpm	r20, Z+
    1240:	55 91       	lpm	r21, Z+
    1242:	a6 f3       	brts	.-24     	; 0x122c <__fp_powser+0x16>
    1244:	ef 01       	movw	r28, r30
    1246:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__addsf3x>
    124a:	fe 01       	movw	r30, r28
    124c:	97 01       	movw	r18, r14
    124e:	a8 01       	movw	r20, r16
    1250:	da 94       	dec	r13
    1252:	69 f7       	brne	.-38     	; 0x122e <__fp_powser+0x18>
    1254:	df 90       	pop	r13
    1256:	ef 90       	pop	r14
    1258:	ff 90       	pop	r15
    125a:	0f 91       	pop	r16
    125c:	1f 91       	pop	r17
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <__fp_pscA>:
    1264:	00 24       	eor	r0, r0
    1266:	0a 94       	dec	r0
    1268:	16 16       	cp	r1, r22
    126a:	17 06       	cpc	r1, r23
    126c:	18 06       	cpc	r1, r24
    126e:	09 06       	cpc	r0, r25
    1270:	08 95       	ret

00001272 <__fp_pscB>:
    1272:	00 24       	eor	r0, r0
    1274:	0a 94       	dec	r0
    1276:	12 16       	cp	r1, r18
    1278:	13 06       	cpc	r1, r19
    127a:	14 06       	cpc	r1, r20
    127c:	05 06       	cpc	r0, r21
    127e:	08 95       	ret

00001280 <__fp_round>:
    1280:	09 2e       	mov	r0, r25
    1282:	03 94       	inc	r0
    1284:	00 0c       	add	r0, r0
    1286:	11 f4       	brne	.+4      	; 0x128c <__fp_round+0xc>
    1288:	88 23       	and	r24, r24
    128a:	52 f0       	brmi	.+20     	; 0x12a0 <__fp_round+0x20>
    128c:	bb 0f       	add	r27, r27
    128e:	40 f4       	brcc	.+16     	; 0x12a0 <__fp_round+0x20>
    1290:	bf 2b       	or	r27, r31
    1292:	11 f4       	brne	.+4      	; 0x1298 <__fp_round+0x18>
    1294:	60 ff       	sbrs	r22, 0
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <__fp_round+0x20>
    1298:	6f 5f       	subi	r22, 0xFF	; 255
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	8f 4f       	sbci	r24, 0xFF	; 255
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	08 95       	ret

000012a2 <__fp_split3>:
    12a2:	57 fd       	sbrc	r21, 7
    12a4:	90 58       	subi	r25, 0x80	; 128
    12a6:	44 0f       	add	r20, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	59 f0       	breq	.+22     	; 0x12c2 <__fp_splitA+0x10>
    12ac:	5f 3f       	cpi	r21, 0xFF	; 255
    12ae:	71 f0       	breq	.+28     	; 0x12cc <__fp_splitA+0x1a>
    12b0:	47 95       	ror	r20

000012b2 <__fp_splitA>:
    12b2:	88 0f       	add	r24, r24
    12b4:	97 fb       	bst	r25, 7
    12b6:	99 1f       	adc	r25, r25
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <__fp_splitA+0x20>
    12ba:	9f 3f       	cpi	r25, 0xFF	; 255
    12bc:	79 f0       	breq	.+30     	; 0x12dc <__fp_splitA+0x2a>
    12be:	87 95       	ror	r24
    12c0:	08 95       	ret
    12c2:	12 16       	cp	r1, r18
    12c4:	13 06       	cpc	r1, r19
    12c6:	14 06       	cpc	r1, r20
    12c8:	55 1f       	adc	r21, r21
    12ca:	f2 cf       	rjmp	.-28     	; 0x12b0 <__fp_split3+0xe>
    12cc:	46 95       	lsr	r20
    12ce:	f1 df       	rcall	.-30     	; 0x12b2 <__fp_splitA>
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <__fp_splitA+0x30>
    12d2:	16 16       	cp	r1, r22
    12d4:	17 06       	cpc	r1, r23
    12d6:	18 06       	cpc	r1, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	f1 cf       	rjmp	.-30     	; 0x12be <__fp_splitA+0xc>
    12dc:	86 95       	lsr	r24
    12de:	71 05       	cpc	r23, r1
    12e0:	61 05       	cpc	r22, r1
    12e2:	08 94       	sec
    12e4:	08 95       	ret

000012e6 <__fp_zero>:
    12e6:	e8 94       	clt

000012e8 <__fp_szero>:
    12e8:	bb 27       	eor	r27, r27
    12ea:	66 27       	eor	r22, r22
    12ec:	77 27       	eor	r23, r23
    12ee:	cb 01       	movw	r24, r22
    12f0:	97 f9       	bld	r25, 7
    12f2:	08 95       	ret

000012f4 <inverse>:
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	80 e8       	ldi	r24, 0x80	; 128
    12fe:	9f e3       	ldi	r25, 0x3F	; 63
    1300:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__divsf3>

00001304 <__mulsf3>:
    1304:	0e 94 95 09 	call	0x132a	; 0x132a <__mulsf3x>
    1308:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_round>
    130c:	0e 94 32 09 	call	0x1264	; 0x1264 <__fp_pscA>
    1310:	38 f0       	brcs	.+14     	; 0x1320 <__mulsf3+0x1c>
    1312:	0e 94 39 09 	call	0x1272	; 0x1272 <__fp_pscB>
    1316:	20 f0       	brcs	.+8      	; 0x1320 <__mulsf3+0x1c>
    1318:	95 23       	and	r25, r21
    131a:	11 f0       	breq	.+4      	; 0x1320 <__mulsf3+0x1c>
    131c:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_inf>
    1320:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_nan>
    1324:	11 24       	eor	r1, r1
    1326:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_szero>

0000132a <__mulsf3x>:
    132a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fp_split3>
    132e:	70 f3       	brcs	.-36     	; 0x130c <__mulsf3+0x8>

00001330 <__mulsf3_pse>:
    1330:	95 9f       	mul	r25, r21
    1332:	c1 f3       	breq	.-16     	; 0x1324 <__mulsf3+0x20>
    1334:	95 0f       	add	r25, r21
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	55 1f       	adc	r21, r21
    133a:	62 9f       	mul	r22, r18
    133c:	f0 01       	movw	r30, r0
    133e:	72 9f       	mul	r23, r18
    1340:	bb 27       	eor	r27, r27
    1342:	f0 0d       	add	r31, r0
    1344:	b1 1d       	adc	r27, r1
    1346:	63 9f       	mul	r22, r19
    1348:	aa 27       	eor	r26, r26
    134a:	f0 0d       	add	r31, r0
    134c:	b1 1d       	adc	r27, r1
    134e:	aa 1f       	adc	r26, r26
    1350:	64 9f       	mul	r22, r20
    1352:	66 27       	eor	r22, r22
    1354:	b0 0d       	add	r27, r0
    1356:	a1 1d       	adc	r26, r1
    1358:	66 1f       	adc	r22, r22
    135a:	82 9f       	mul	r24, r18
    135c:	22 27       	eor	r18, r18
    135e:	b0 0d       	add	r27, r0
    1360:	a1 1d       	adc	r26, r1
    1362:	62 1f       	adc	r22, r18
    1364:	73 9f       	mul	r23, r19
    1366:	b0 0d       	add	r27, r0
    1368:	a1 1d       	adc	r26, r1
    136a:	62 1f       	adc	r22, r18
    136c:	83 9f       	mul	r24, r19
    136e:	a0 0d       	add	r26, r0
    1370:	61 1d       	adc	r22, r1
    1372:	22 1f       	adc	r18, r18
    1374:	74 9f       	mul	r23, r20
    1376:	33 27       	eor	r19, r19
    1378:	a0 0d       	add	r26, r0
    137a:	61 1d       	adc	r22, r1
    137c:	23 1f       	adc	r18, r19
    137e:	84 9f       	mul	r24, r20
    1380:	60 0d       	add	r22, r0
    1382:	21 1d       	adc	r18, r1
    1384:	82 2f       	mov	r24, r18
    1386:	76 2f       	mov	r23, r22
    1388:	6a 2f       	mov	r22, r26
    138a:	11 24       	eor	r1, r1
    138c:	9f 57       	subi	r25, 0x7F	; 127
    138e:	50 40       	sbci	r21, 0x00	; 0
    1390:	9a f0       	brmi	.+38     	; 0x13b8 <__mulsf3_pse+0x88>
    1392:	f1 f0       	breq	.+60     	; 0x13d0 <__mulsf3_pse+0xa0>
    1394:	88 23       	and	r24, r24
    1396:	4a f0       	brmi	.+18     	; 0x13aa <__mulsf3_pse+0x7a>
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	bb 1f       	adc	r27, r27
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	91 50       	subi	r25, 0x01	; 1
    13a6:	50 40       	sbci	r21, 0x00	; 0
    13a8:	a9 f7       	brne	.-22     	; 0x1394 <__mulsf3_pse+0x64>
    13aa:	9e 3f       	cpi	r25, 0xFE	; 254
    13ac:	51 05       	cpc	r21, r1
    13ae:	80 f0       	brcs	.+32     	; 0x13d0 <__mulsf3_pse+0xa0>
    13b0:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_inf>
    13b4:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_szero>
    13b8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ba:	e4 f3       	brlt	.-8      	; 0x13b4 <__mulsf3_pse+0x84>
    13bc:	98 3e       	cpi	r25, 0xE8	; 232
    13be:	d4 f3       	brlt	.-12     	; 0x13b4 <__mulsf3_pse+0x84>
    13c0:	86 95       	lsr	r24
    13c2:	77 95       	ror	r23
    13c4:	67 95       	ror	r22
    13c6:	b7 95       	ror	r27
    13c8:	f7 95       	ror	r31
    13ca:	e7 95       	ror	r30
    13cc:	9f 5f       	subi	r25, 0xFF	; 255
    13ce:	c1 f7       	brne	.-16     	; 0x13c0 <__mulsf3_pse+0x90>
    13d0:	fe 2b       	or	r31, r30
    13d2:	88 0f       	add	r24, r24
    13d4:	91 1d       	adc	r25, r1
    13d6:	96 95       	lsr	r25
    13d8:	87 95       	ror	r24
    13da:	97 f9       	bld	r25, 7
    13dc:	08 95       	ret

000013de <square>:
    13de:	9b 01       	movw	r18, r22
    13e0:	ac 01       	movw	r20, r24
    13e2:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__mulsf3>

000013e6 <__subsf3>:
    13e6:	50 58       	subi	r21, 0x80	; 128

000013e8 <__addsf3>:
    13e8:	bb 27       	eor	r27, r27
    13ea:	aa 27       	eor	r26, r26
    13ec:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__addsf3x>
    13f0:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_round>
    13f4:	0e 94 32 09 	call	0x1264	; 0x1264 <__fp_pscA>
    13f8:	38 f0       	brcs	.+14     	; 0x1408 <__addsf3+0x20>
    13fa:	0e 94 39 09 	call	0x1272	; 0x1272 <__fp_pscB>
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__addsf3+0x20>
    1400:	39 f4       	brne	.+14     	; 0x1410 <__addsf3+0x28>
    1402:	9f 3f       	cpi	r25, 0xFF	; 255
    1404:	19 f4       	brne	.+6      	; 0x140c <__addsf3+0x24>
    1406:	26 f4       	brtc	.+8      	; 0x1410 <__addsf3+0x28>
    1408:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_nan>
    140c:	0e f4       	brtc	.+2      	; 0x1410 <__addsf3+0x28>
    140e:	e0 95       	com	r30
    1410:	e7 fb       	bst	r30, 7
    1412:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_inf>

00001416 <__addsf3x>:
    1416:	e9 2f       	mov	r30, r25
    1418:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fp_split3>
    141c:	58 f3       	brcs	.-42     	; 0x13f4 <__addsf3+0xc>
    141e:	ba 17       	cp	r27, r26
    1420:	62 07       	cpc	r22, r18
    1422:	73 07       	cpc	r23, r19
    1424:	84 07       	cpc	r24, r20
    1426:	95 07       	cpc	r25, r21
    1428:	20 f0       	brcs	.+8      	; 0x1432 <__addsf3x+0x1c>
    142a:	79 f4       	brne	.+30     	; 0x144a <__addsf3x+0x34>
    142c:	a6 f5       	brtc	.+104    	; 0x1496 <__addsf3x+0x80>
    142e:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__fp_zero>
    1432:	0e f4       	brtc	.+2      	; 0x1436 <__addsf3x+0x20>
    1434:	e0 95       	com	r30
    1436:	0b 2e       	mov	r0, r27
    1438:	ba 2f       	mov	r27, r26
    143a:	a0 2d       	mov	r26, r0
    143c:	0b 01       	movw	r0, r22
    143e:	b9 01       	movw	r22, r18
    1440:	90 01       	movw	r18, r0
    1442:	0c 01       	movw	r0, r24
    1444:	ca 01       	movw	r24, r20
    1446:	a0 01       	movw	r20, r0
    1448:	11 24       	eor	r1, r1
    144a:	ff 27       	eor	r31, r31
    144c:	59 1b       	sub	r21, r25
    144e:	99 f0       	breq	.+38     	; 0x1476 <__addsf3x+0x60>
    1450:	59 3f       	cpi	r21, 0xF9	; 249
    1452:	50 f4       	brcc	.+20     	; 0x1468 <__addsf3x+0x52>
    1454:	50 3e       	cpi	r21, 0xE0	; 224
    1456:	68 f1       	brcs	.+90     	; 0x14b2 <__addsf3x+0x9c>
    1458:	1a 16       	cp	r1, r26
    145a:	f0 40       	sbci	r31, 0x00	; 0
    145c:	a2 2f       	mov	r26, r18
    145e:	23 2f       	mov	r18, r19
    1460:	34 2f       	mov	r19, r20
    1462:	44 27       	eor	r20, r20
    1464:	58 5f       	subi	r21, 0xF8	; 248
    1466:	f3 cf       	rjmp	.-26     	; 0x144e <__addsf3x+0x38>
    1468:	46 95       	lsr	r20
    146a:	37 95       	ror	r19
    146c:	27 95       	ror	r18
    146e:	a7 95       	ror	r26
    1470:	f0 40       	sbci	r31, 0x00	; 0
    1472:	53 95       	inc	r21
    1474:	c9 f7       	brne	.-14     	; 0x1468 <__addsf3x+0x52>
    1476:	7e f4       	brtc	.+30     	; 0x1496 <__addsf3x+0x80>
    1478:	1f 16       	cp	r1, r31
    147a:	ba 0b       	sbc	r27, r26
    147c:	62 0b       	sbc	r22, r18
    147e:	73 0b       	sbc	r23, r19
    1480:	84 0b       	sbc	r24, r20
    1482:	ba f0       	brmi	.+46     	; 0x14b2 <__addsf3x+0x9c>
    1484:	91 50       	subi	r25, 0x01	; 1
    1486:	a1 f0       	breq	.+40     	; 0x14b0 <__addsf3x+0x9a>
    1488:	ff 0f       	add	r31, r31
    148a:	bb 1f       	adc	r27, r27
    148c:	66 1f       	adc	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	88 1f       	adc	r24, r24
    1492:	c2 f7       	brpl	.-16     	; 0x1484 <__addsf3x+0x6e>
    1494:	0e c0       	rjmp	.+28     	; 0x14b2 <__addsf3x+0x9c>
    1496:	ba 0f       	add	r27, r26
    1498:	62 1f       	adc	r22, r18
    149a:	73 1f       	adc	r23, r19
    149c:	84 1f       	adc	r24, r20
    149e:	48 f4       	brcc	.+18     	; 0x14b2 <__addsf3x+0x9c>
    14a0:	87 95       	ror	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f7 95       	ror	r31
    14aa:	9e 3f       	cpi	r25, 0xFE	; 254
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <__addsf3x+0x9a>
    14ae:	b0 cf       	rjmp	.-160    	; 0x1410 <__addsf3+0x28>
    14b0:	93 95       	inc	r25
    14b2:	88 0f       	add	r24, r24
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <__addsf3x+0xa2>
    14b6:	99 27       	eor	r25, r25
    14b8:	ee 0f       	add	r30, r30
    14ba:	97 95       	ror	r25
    14bc:	87 95       	ror	r24
    14be:	08 95       	ret

000014c0 <__divmodhi4>:
    14c0:	97 fb       	bst	r25, 7
    14c2:	07 2e       	mov	r0, r23
    14c4:	16 f4       	brtc	.+4      	; 0x14ca <__divmodhi4+0xa>
    14c6:	00 94       	com	r0
    14c8:	07 d0       	rcall	.+14     	; 0x14d8 <__divmodhi4_neg1>
    14ca:	77 fd       	sbrc	r23, 7
    14cc:	09 d0       	rcall	.+18     	; 0x14e0 <__divmodhi4_neg2>
    14ce:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__udivmodhi4>
    14d2:	07 fc       	sbrc	r0, 7
    14d4:	05 d0       	rcall	.+10     	; 0x14e0 <__divmodhi4_neg2>
    14d6:	3e f4       	brtc	.+14     	; 0x14e6 <__divmodhi4_exit>

000014d8 <__divmodhi4_neg1>:
    14d8:	90 95       	com	r25
    14da:	81 95       	neg	r24
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	08 95       	ret

000014e0 <__divmodhi4_neg2>:
    14e0:	70 95       	com	r23
    14e2:	61 95       	neg	r22
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255

000014e6 <__divmodhi4_exit>:
    14e6:	08 95       	ret

000014e8 <__udivmodhi4>:
    14e8:	aa 1b       	sub	r26, r26
    14ea:	bb 1b       	sub	r27, r27
    14ec:	51 e1       	ldi	r21, 0x11	; 17
    14ee:	07 c0       	rjmp	.+14     	; 0x14fe <__udivmodhi4_ep>

000014f0 <__udivmodhi4_loop>:
    14f0:	aa 1f       	adc	r26, r26
    14f2:	bb 1f       	adc	r27, r27
    14f4:	a6 17       	cp	r26, r22
    14f6:	b7 07       	cpc	r27, r23
    14f8:	10 f0       	brcs	.+4      	; 0x14fe <__udivmodhi4_ep>
    14fa:	a6 1b       	sub	r26, r22
    14fc:	b7 0b       	sbc	r27, r23

000014fe <__udivmodhi4_ep>:
    14fe:	88 1f       	adc	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	5a 95       	dec	r21
    1504:	a9 f7       	brne	.-22     	; 0x14f0 <__udivmodhi4_loop>
    1506:	80 95       	com	r24
    1508:	90 95       	com	r25
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	08 95       	ret

00001510 <malloc>:
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	91 05       	cpc	r25, r1
    151c:	10 f4       	brcc	.+4      	; 0x1522 <malloc+0x12>
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__flp>
    1526:	f0 91 89 02 	lds	r31, 0x0289	; 0x800289 <__flp+0x1>
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	a0 e0       	ldi	r26, 0x00	; 0
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	30 97       	sbiw	r30, 0x00	; 0
    1534:	19 f1       	breq	.+70     	; 0x157c <malloc+0x6c>
    1536:	40 81       	ld	r20, Z
    1538:	51 81       	ldd	r21, Z+1	; 0x01
    153a:	02 81       	ldd	r16, Z+2	; 0x02
    153c:	13 81       	ldd	r17, Z+3	; 0x03
    153e:	48 17       	cp	r20, r24
    1540:	59 07       	cpc	r21, r25
    1542:	c8 f0       	brcs	.+50     	; 0x1576 <malloc+0x66>
    1544:	84 17       	cp	r24, r20
    1546:	95 07       	cpc	r25, r21
    1548:	69 f4       	brne	.+26     	; 0x1564 <malloc+0x54>
    154a:	10 97       	sbiw	r26, 0x00	; 0
    154c:	31 f0       	breq	.+12     	; 0x155a <malloc+0x4a>
    154e:	12 96       	adiw	r26, 0x02	; 2
    1550:	0c 93       	st	X, r16
    1552:	12 97       	sbiw	r26, 0x02	; 2
    1554:	13 96       	adiw	r26, 0x03	; 3
    1556:	1c 93       	st	X, r17
    1558:	27 c0       	rjmp	.+78     	; 0x15a8 <malloc+0x98>
    155a:	00 93 88 02 	sts	0x0288, r16	; 0x800288 <__flp>
    155e:	10 93 89 02 	sts	0x0289, r17	; 0x800289 <__flp+0x1>
    1562:	22 c0       	rjmp	.+68     	; 0x15a8 <malloc+0x98>
    1564:	21 15       	cp	r18, r1
    1566:	31 05       	cpc	r19, r1
    1568:	19 f0       	breq	.+6      	; 0x1570 <malloc+0x60>
    156a:	42 17       	cp	r20, r18
    156c:	53 07       	cpc	r21, r19
    156e:	18 f4       	brcc	.+6      	; 0x1576 <malloc+0x66>
    1570:	9a 01       	movw	r18, r20
    1572:	bd 01       	movw	r22, r26
    1574:	ef 01       	movw	r28, r30
    1576:	df 01       	movw	r26, r30
    1578:	f8 01       	movw	r30, r16
    157a:	db cf       	rjmp	.-74     	; 0x1532 <malloc+0x22>
    157c:	21 15       	cp	r18, r1
    157e:	31 05       	cpc	r19, r1
    1580:	f9 f0       	breq	.+62     	; 0x15c0 <malloc+0xb0>
    1582:	28 1b       	sub	r18, r24
    1584:	39 0b       	sbc	r19, r25
    1586:	24 30       	cpi	r18, 0x04	; 4
    1588:	31 05       	cpc	r19, r1
    158a:	80 f4       	brcc	.+32     	; 0x15ac <malloc+0x9c>
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	9b 81       	ldd	r25, Y+3	; 0x03
    1590:	61 15       	cp	r22, r1
    1592:	71 05       	cpc	r23, r1
    1594:	21 f0       	breq	.+8      	; 0x159e <malloc+0x8e>
    1596:	fb 01       	movw	r30, r22
    1598:	93 83       	std	Z+3, r25	; 0x03
    159a:	82 83       	std	Z+2, r24	; 0x02
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <malloc+0x96>
    159e:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__flp+0x1>
    15a2:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__flp>
    15a6:	fe 01       	movw	r30, r28
    15a8:	32 96       	adiw	r30, 0x02	; 2
    15aa:	44 c0       	rjmp	.+136    	; 0x1634 <malloc+0x124>
    15ac:	fe 01       	movw	r30, r28
    15ae:	e2 0f       	add	r30, r18
    15b0:	f3 1f       	adc	r31, r19
    15b2:	81 93       	st	Z+, r24
    15b4:	91 93       	st	Z+, r25
    15b6:	22 50       	subi	r18, 0x02	; 2
    15b8:	31 09       	sbc	r19, r1
    15ba:	39 83       	std	Y+1, r19	; 0x01
    15bc:	28 83       	st	Y, r18
    15be:	3a c0       	rjmp	.+116    	; 0x1634 <malloc+0x124>
    15c0:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    15c4:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    15c8:	23 2b       	or	r18, r19
    15ca:	41 f4       	brne	.+16     	; 0x15dc <malloc+0xcc>
    15cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    15d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    15d4:	30 93 87 02 	sts	0x0287, r19	; 0x800287 <__brkval+0x1>
    15d8:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <__brkval>
    15dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    15e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    15e4:	21 15       	cp	r18, r1
    15e6:	31 05       	cpc	r19, r1
    15e8:	41 f4       	brne	.+16     	; 0x15fa <malloc+0xea>
    15ea:	2d b7       	in	r18, 0x3d	; 61
    15ec:	3e b7       	in	r19, 0x3e	; 62
    15ee:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    15f2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    15f6:	24 1b       	sub	r18, r20
    15f8:	35 0b       	sbc	r19, r21
    15fa:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <__brkval>
    15fe:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <__brkval+0x1>
    1602:	e2 17       	cp	r30, r18
    1604:	f3 07       	cpc	r31, r19
    1606:	a0 f4       	brcc	.+40     	; 0x1630 <malloc+0x120>
    1608:	2e 1b       	sub	r18, r30
    160a:	3f 0b       	sbc	r19, r31
    160c:	28 17       	cp	r18, r24
    160e:	39 07       	cpc	r19, r25
    1610:	78 f0       	brcs	.+30     	; 0x1630 <malloc+0x120>
    1612:	ac 01       	movw	r20, r24
    1614:	4e 5f       	subi	r20, 0xFE	; 254
    1616:	5f 4f       	sbci	r21, 0xFF	; 255
    1618:	24 17       	cp	r18, r20
    161a:	35 07       	cpc	r19, r21
    161c:	48 f0       	brcs	.+18     	; 0x1630 <malloc+0x120>
    161e:	4e 0f       	add	r20, r30
    1620:	5f 1f       	adc	r21, r31
    1622:	50 93 87 02 	sts	0x0287, r21	; 0x800287 <__brkval+0x1>
    1626:	40 93 86 02 	sts	0x0286, r20	; 0x800286 <__brkval>
    162a:	81 93       	st	Z+, r24
    162c:	91 93       	st	Z+, r25
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <malloc+0x124>
    1630:	e0 e0       	ldi	r30, 0x00	; 0
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	cf 01       	movw	r24, r30
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	08 95       	ret

00001640 <free>:
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	09 f4       	brne	.+2      	; 0x164a <free+0xa>
    1648:	81 c0       	rjmp	.+258    	; 0x174c <free+0x10c>
    164a:	fc 01       	movw	r30, r24
    164c:	32 97       	sbiw	r30, 0x02	; 2
    164e:	13 82       	std	Z+3, r1	; 0x03
    1650:	12 82       	std	Z+2, r1	; 0x02
    1652:	a0 91 88 02 	lds	r26, 0x0288	; 0x800288 <__flp>
    1656:	b0 91 89 02 	lds	r27, 0x0289	; 0x800289 <__flp+0x1>
    165a:	10 97       	sbiw	r26, 0x00	; 0
    165c:	81 f4       	brne	.+32     	; 0x167e <free+0x3e>
    165e:	20 81       	ld	r18, Z
    1660:	31 81       	ldd	r19, Z+1	; 0x01
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    166a:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    166e:	28 17       	cp	r18, r24
    1670:	39 07       	cpc	r19, r25
    1672:	51 f5       	brne	.+84     	; 0x16c8 <free+0x88>
    1674:	f0 93 87 02 	sts	0x0287, r31	; 0x800287 <__brkval+0x1>
    1678:	e0 93 86 02 	sts	0x0286, r30	; 0x800286 <__brkval>
    167c:	67 c0       	rjmp	.+206    	; 0x174c <free+0x10c>
    167e:	ed 01       	movw	r28, r26
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	ce 17       	cp	r28, r30
    1686:	df 07       	cpc	r29, r31
    1688:	40 f4       	brcc	.+16     	; 0x169a <free+0x5a>
    168a:	4a 81       	ldd	r20, Y+2	; 0x02
    168c:	5b 81       	ldd	r21, Y+3	; 0x03
    168e:	9e 01       	movw	r18, r28
    1690:	41 15       	cp	r20, r1
    1692:	51 05       	cpc	r21, r1
    1694:	f1 f0       	breq	.+60     	; 0x16d2 <free+0x92>
    1696:	ea 01       	movw	r28, r20
    1698:	f5 cf       	rjmp	.-22     	; 0x1684 <free+0x44>
    169a:	d3 83       	std	Z+3, r29	; 0x03
    169c:	c2 83       	std	Z+2, r28	; 0x02
    169e:	40 81       	ld	r20, Z
    16a0:	51 81       	ldd	r21, Z+1	; 0x01
    16a2:	84 0f       	add	r24, r20
    16a4:	95 1f       	adc	r25, r21
    16a6:	c8 17       	cp	r28, r24
    16a8:	d9 07       	cpc	r29, r25
    16aa:	59 f4       	brne	.+22     	; 0x16c2 <free+0x82>
    16ac:	88 81       	ld	r24, Y
    16ae:	99 81       	ldd	r25, Y+1	; 0x01
    16b0:	84 0f       	add	r24, r20
    16b2:	95 1f       	adc	r25, r21
    16b4:	02 96       	adiw	r24, 0x02	; 2
    16b6:	91 83       	std	Z+1, r25	; 0x01
    16b8:	80 83       	st	Z, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	93 83       	std	Z+3, r25	; 0x03
    16c0:	82 83       	std	Z+2, r24	; 0x02
    16c2:	21 15       	cp	r18, r1
    16c4:	31 05       	cpc	r19, r1
    16c6:	29 f4       	brne	.+10     	; 0x16d2 <free+0x92>
    16c8:	f0 93 89 02 	sts	0x0289, r31	; 0x800289 <__flp+0x1>
    16cc:	e0 93 88 02 	sts	0x0288, r30	; 0x800288 <__flp>
    16d0:	3d c0       	rjmp	.+122    	; 0x174c <free+0x10c>
    16d2:	e9 01       	movw	r28, r18
    16d4:	fb 83       	std	Y+3, r31	; 0x03
    16d6:	ea 83       	std	Y+2, r30	; 0x02
    16d8:	49 91       	ld	r20, Y+
    16da:	59 91       	ld	r21, Y+
    16dc:	c4 0f       	add	r28, r20
    16de:	d5 1f       	adc	r29, r21
    16e0:	ec 17       	cp	r30, r28
    16e2:	fd 07       	cpc	r31, r29
    16e4:	61 f4       	brne	.+24     	; 0x16fe <free+0xbe>
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	84 0f       	add	r24, r20
    16ec:	95 1f       	adc	r25, r21
    16ee:	02 96       	adiw	r24, 0x02	; 2
    16f0:	e9 01       	movw	r28, r18
    16f2:	99 83       	std	Y+1, r25	; 0x01
    16f4:	88 83       	st	Y, r24
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	9b 83       	std	Y+3, r25	; 0x03
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	e0 e0       	ldi	r30, 0x00	; 0
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	12 96       	adiw	r26, 0x02	; 2
    1704:	8d 91       	ld	r24, X+
    1706:	9c 91       	ld	r25, X
    1708:	13 97       	sbiw	r26, 0x03	; 3
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	19 f0       	breq	.+6      	; 0x1714 <free+0xd4>
    170e:	fd 01       	movw	r30, r26
    1710:	dc 01       	movw	r26, r24
    1712:	f7 cf       	rjmp	.-18     	; 0x1702 <free+0xc2>
    1714:	8d 91       	ld	r24, X+
    1716:	9c 91       	ld	r25, X
    1718:	11 97       	sbiw	r26, 0x01	; 1
    171a:	9d 01       	movw	r18, r26
    171c:	2e 5f       	subi	r18, 0xFE	; 254
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	82 0f       	add	r24, r18
    1722:	93 1f       	adc	r25, r19
    1724:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    1728:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    172c:	28 17       	cp	r18, r24
    172e:	39 07       	cpc	r19, r25
    1730:	69 f4       	brne	.+26     	; 0x174c <free+0x10c>
    1732:	30 97       	sbiw	r30, 0x00	; 0
    1734:	29 f4       	brne	.+10     	; 0x1740 <free+0x100>
    1736:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <__flp+0x1>
    173a:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__flp>
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <free+0x104>
    1740:	13 82       	std	Z+3, r1	; 0x03
    1742:	12 82       	std	Z+2, r1	; 0x02
    1744:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <__brkval+0x1>
    1748:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <__brkval>
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <strcpy>:
    1752:	fb 01       	movw	r30, r22
    1754:	dc 01       	movw	r26, r24
    1756:	01 90       	ld	r0, Z+
    1758:	0d 92       	st	X+, r0
    175a:	00 20       	and	r0, r0
    175c:	e1 f7       	brne	.-8      	; 0x1756 <strcpy+0x4>
    175e:	08 95       	ret

00001760 <fdevopen>:
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	31 f4       	brne	.+12     	; 0x1778 <fdevopen+0x18>
    176c:	61 15       	cp	r22, r1
    176e:	71 05       	cpc	r23, r1
    1770:	19 f4       	brne	.+6      	; 0x1778 <fdevopen+0x18>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	3a c0       	rjmp	.+116    	; 0x17ec <fdevopen+0x8c>
    1778:	8b 01       	movw	r16, r22
    177a:	ec 01       	movw	r28, r24
    177c:	6e e0       	ldi	r22, 0x0E	; 14
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <calloc>
    1788:	fc 01       	movw	r30, r24
    178a:	89 2b       	or	r24, r25
    178c:	91 f3       	breq	.-28     	; 0x1772 <fdevopen+0x12>
    178e:	80 e8       	ldi	r24, 0x80	; 128
    1790:	83 83       	std	Z+3, r24	; 0x03
    1792:	01 15       	cp	r16, r1
    1794:	11 05       	cpc	r17, r1
    1796:	71 f0       	breq	.+28     	; 0x17b4 <fdevopen+0x54>
    1798:	13 87       	std	Z+11, r17	; 0x0b
    179a:	02 87       	std	Z+10, r16	; 0x0a
    179c:	81 e8       	ldi	r24, 0x81	; 129
    179e:	83 83       	std	Z+3, r24	; 0x03
    17a0:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__iob>
    17a4:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <__iob+0x1>
    17a8:	89 2b       	or	r24, r25
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <fdevopen+0x54>
    17ac:	f0 93 8b 02 	sts	0x028B, r31	; 0x80028b <__iob+0x1>
    17b0:	e0 93 8a 02 	sts	0x028A, r30	; 0x80028a <__iob>
    17b4:	20 97       	sbiw	r28, 0x00	; 0
    17b6:	c9 f0       	breq	.+50     	; 0x17ea <fdevopen+0x8a>
    17b8:	d1 87       	std	Z+9, r29	; 0x09
    17ba:	c0 87       	std	Z+8, r28	; 0x08
    17bc:	83 81       	ldd	r24, Z+3	; 0x03
    17be:	82 60       	ori	r24, 0x02	; 2
    17c0:	83 83       	std	Z+3, r24	; 0x03
    17c2:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <__iob+0x2>
    17c6:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <__iob+0x3>
    17ca:	89 2b       	or	r24, r25
    17cc:	71 f4       	brne	.+28     	; 0x17ea <fdevopen+0x8a>
    17ce:	f0 93 8d 02 	sts	0x028D, r31	; 0x80028d <__iob+0x3>
    17d2:	e0 93 8c 02 	sts	0x028C, r30	; 0x80028c <__iob+0x2>
    17d6:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__iob+0x4>
    17da:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__iob+0x5>
    17de:	89 2b       	or	r24, r25
    17e0:	21 f4       	brne	.+8      	; 0x17ea <fdevopen+0x8a>
    17e2:	f0 93 8f 02 	sts	0x028F, r31	; 0x80028f <__iob+0x5>
    17e6:	e0 93 8e 02 	sts	0x028E, r30	; 0x80028e <__iob+0x4>
    17ea:	cf 01       	movw	r24, r30
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <printf>:
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e0       	ldi	r30, 0x01	; 1
    17fc:	fc e0       	ldi	r31, 0x0C	; 12
    17fe:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__prologue_saves__+0x20>
    1802:	ae 01       	movw	r20, r28
    1804:	4b 5f       	subi	r20, 0xFB	; 251
    1806:	5f 4f       	sbci	r21, 0xFF	; 255
    1808:	fa 01       	movw	r30, r20
    180a:	61 91       	ld	r22, Z+
    180c:	71 91       	ld	r23, Z+
    180e:	af 01       	movw	r20, r30
    1810:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <__iob+0x2>
    1814:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <__iob+0x3>
    1818:	0e 94 11 0c 	call	0x1822	; 0x1822 <vfprintf>
    181c:	e2 e0       	ldi	r30, 0x02	; 2
    181e:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__epilogue_restores__+0x20>

00001822 <vfprintf>:
    1822:	ab e0       	ldi	r26, 0x0B	; 11
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e7 e1       	ldi	r30, 0x17	; 23
    1828:	fc e0       	ldi	r31, 0x0C	; 12
    182a:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__prologue_saves__>
    182e:	6c 01       	movw	r12, r24
    1830:	7b 01       	movw	r14, r22
    1832:	8a 01       	movw	r16, r20
    1834:	fc 01       	movw	r30, r24
    1836:	17 82       	std	Z+7, r1	; 0x07
    1838:	16 82       	std	Z+6, r1	; 0x06
    183a:	83 81       	ldd	r24, Z+3	; 0x03
    183c:	81 ff       	sbrs	r24, 1
    183e:	cc c1       	rjmp	.+920    	; 0x1bd8 <vfprintf+0x3b6>
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	3c 01       	movw	r6, r24
    1846:	f6 01       	movw	r30, r12
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	f7 01       	movw	r30, r14
    184c:	93 fd       	sbrc	r25, 3
    184e:	85 91       	lpm	r24, Z+
    1850:	93 ff       	sbrs	r25, 3
    1852:	81 91       	ld	r24, Z+
    1854:	7f 01       	movw	r14, r30
    1856:	88 23       	and	r24, r24
    1858:	09 f4       	brne	.+2      	; 0x185c <vfprintf+0x3a>
    185a:	ba c1       	rjmp	.+884    	; 0x1bd0 <vfprintf+0x3ae>
    185c:	85 32       	cpi	r24, 0x25	; 37
    185e:	39 f4       	brne	.+14     	; 0x186e <vfprintf+0x4c>
    1860:	93 fd       	sbrc	r25, 3
    1862:	85 91       	lpm	r24, Z+
    1864:	93 ff       	sbrs	r25, 3
    1866:	81 91       	ld	r24, Z+
    1868:	7f 01       	movw	r14, r30
    186a:	85 32       	cpi	r24, 0x25	; 37
    186c:	29 f4       	brne	.+10     	; 0x1878 <vfprintf+0x56>
    186e:	b6 01       	movw	r22, r12
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1876:	e7 cf       	rjmp	.-50     	; 0x1846 <vfprintf+0x24>
    1878:	91 2c       	mov	r9, r1
    187a:	21 2c       	mov	r2, r1
    187c:	31 2c       	mov	r3, r1
    187e:	ff e1       	ldi	r31, 0x1F	; 31
    1880:	f3 15       	cp	r31, r3
    1882:	d8 f0       	brcs	.+54     	; 0x18ba <vfprintf+0x98>
    1884:	8b 32       	cpi	r24, 0x2B	; 43
    1886:	79 f0       	breq	.+30     	; 0x18a6 <vfprintf+0x84>
    1888:	38 f4       	brcc	.+14     	; 0x1898 <vfprintf+0x76>
    188a:	80 32       	cpi	r24, 0x20	; 32
    188c:	79 f0       	breq	.+30     	; 0x18ac <vfprintf+0x8a>
    188e:	83 32       	cpi	r24, 0x23	; 35
    1890:	a1 f4       	brne	.+40     	; 0x18ba <vfprintf+0x98>
    1892:	23 2d       	mov	r18, r3
    1894:	20 61       	ori	r18, 0x10	; 16
    1896:	1d c0       	rjmp	.+58     	; 0x18d2 <vfprintf+0xb0>
    1898:	8d 32       	cpi	r24, 0x2D	; 45
    189a:	61 f0       	breq	.+24     	; 0x18b4 <vfprintf+0x92>
    189c:	80 33       	cpi	r24, 0x30	; 48
    189e:	69 f4       	brne	.+26     	; 0x18ba <vfprintf+0x98>
    18a0:	23 2d       	mov	r18, r3
    18a2:	21 60       	ori	r18, 0x01	; 1
    18a4:	16 c0       	rjmp	.+44     	; 0x18d2 <vfprintf+0xb0>
    18a6:	83 2d       	mov	r24, r3
    18a8:	82 60       	ori	r24, 0x02	; 2
    18aa:	38 2e       	mov	r3, r24
    18ac:	e3 2d       	mov	r30, r3
    18ae:	e4 60       	ori	r30, 0x04	; 4
    18b0:	3e 2e       	mov	r3, r30
    18b2:	2a c0       	rjmp	.+84     	; 0x1908 <vfprintf+0xe6>
    18b4:	f3 2d       	mov	r31, r3
    18b6:	f8 60       	ori	r31, 0x08	; 8
    18b8:	1d c0       	rjmp	.+58     	; 0x18f4 <vfprintf+0xd2>
    18ba:	37 fc       	sbrc	r3, 7
    18bc:	2d c0       	rjmp	.+90     	; 0x1918 <vfprintf+0xf6>
    18be:	20 ed       	ldi	r18, 0xD0	; 208
    18c0:	28 0f       	add	r18, r24
    18c2:	2a 30       	cpi	r18, 0x0A	; 10
    18c4:	40 f0       	brcs	.+16     	; 0x18d6 <vfprintf+0xb4>
    18c6:	8e 32       	cpi	r24, 0x2E	; 46
    18c8:	b9 f4       	brne	.+46     	; 0x18f8 <vfprintf+0xd6>
    18ca:	36 fc       	sbrc	r3, 6
    18cc:	81 c1       	rjmp	.+770    	; 0x1bd0 <vfprintf+0x3ae>
    18ce:	23 2d       	mov	r18, r3
    18d0:	20 64       	ori	r18, 0x40	; 64
    18d2:	32 2e       	mov	r3, r18
    18d4:	19 c0       	rjmp	.+50     	; 0x1908 <vfprintf+0xe6>
    18d6:	36 fe       	sbrs	r3, 6
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <vfprintf+0xc4>
    18da:	8a e0       	ldi	r24, 0x0A	; 10
    18dc:	98 9e       	mul	r9, r24
    18de:	20 0d       	add	r18, r0
    18e0:	11 24       	eor	r1, r1
    18e2:	92 2e       	mov	r9, r18
    18e4:	11 c0       	rjmp	.+34     	; 0x1908 <vfprintf+0xe6>
    18e6:	ea e0       	ldi	r30, 0x0A	; 10
    18e8:	2e 9e       	mul	r2, r30
    18ea:	20 0d       	add	r18, r0
    18ec:	11 24       	eor	r1, r1
    18ee:	22 2e       	mov	r2, r18
    18f0:	f3 2d       	mov	r31, r3
    18f2:	f0 62       	ori	r31, 0x20	; 32
    18f4:	3f 2e       	mov	r3, r31
    18f6:	08 c0       	rjmp	.+16     	; 0x1908 <vfprintf+0xe6>
    18f8:	8c 36       	cpi	r24, 0x6C	; 108
    18fa:	21 f4       	brne	.+8      	; 0x1904 <vfprintf+0xe2>
    18fc:	83 2d       	mov	r24, r3
    18fe:	80 68       	ori	r24, 0x80	; 128
    1900:	38 2e       	mov	r3, r24
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <vfprintf+0xe6>
    1904:	88 36       	cpi	r24, 0x68	; 104
    1906:	41 f4       	brne	.+16     	; 0x1918 <vfprintf+0xf6>
    1908:	f7 01       	movw	r30, r14
    190a:	93 fd       	sbrc	r25, 3
    190c:	85 91       	lpm	r24, Z+
    190e:	93 ff       	sbrs	r25, 3
    1910:	81 91       	ld	r24, Z+
    1912:	7f 01       	movw	r14, r30
    1914:	81 11       	cpse	r24, r1
    1916:	b3 cf       	rjmp	.-154    	; 0x187e <vfprintf+0x5c>
    1918:	98 2f       	mov	r25, r24
    191a:	9f 7d       	andi	r25, 0xDF	; 223
    191c:	95 54       	subi	r25, 0x45	; 69
    191e:	93 30       	cpi	r25, 0x03	; 3
    1920:	28 f4       	brcc	.+10     	; 0x192c <vfprintf+0x10a>
    1922:	0c 5f       	subi	r16, 0xFC	; 252
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	9f e3       	ldi	r25, 0x3F	; 63
    1928:	99 83       	std	Y+1, r25	; 0x01
    192a:	0d c0       	rjmp	.+26     	; 0x1946 <vfprintf+0x124>
    192c:	83 36       	cpi	r24, 0x63	; 99
    192e:	31 f0       	breq	.+12     	; 0x193c <vfprintf+0x11a>
    1930:	83 37       	cpi	r24, 0x73	; 115
    1932:	71 f0       	breq	.+28     	; 0x1950 <vfprintf+0x12e>
    1934:	83 35       	cpi	r24, 0x53	; 83
    1936:	09 f0       	breq	.+2      	; 0x193a <vfprintf+0x118>
    1938:	59 c0       	rjmp	.+178    	; 0x19ec <vfprintf+0x1ca>
    193a:	21 c0       	rjmp	.+66     	; 0x197e <vfprintf+0x15c>
    193c:	f8 01       	movw	r30, r16
    193e:	80 81       	ld	r24, Z
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	0e 5f       	subi	r16, 0xFE	; 254
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	88 24       	eor	r8, r8
    1948:	83 94       	inc	r8
    194a:	91 2c       	mov	r9, r1
    194c:	53 01       	movw	r10, r6
    194e:	13 c0       	rjmp	.+38     	; 0x1976 <vfprintf+0x154>
    1950:	28 01       	movw	r4, r16
    1952:	f2 e0       	ldi	r31, 0x02	; 2
    1954:	4f 0e       	add	r4, r31
    1956:	51 1c       	adc	r5, r1
    1958:	f8 01       	movw	r30, r16
    195a:	a0 80       	ld	r10, Z
    195c:	b1 80       	ldd	r11, Z+1	; 0x01
    195e:	36 fe       	sbrs	r3, 6
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <vfprintf+0x146>
    1962:	69 2d       	mov	r22, r9
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	02 c0       	rjmp	.+4      	; 0x196c <vfprintf+0x14a>
    1968:	6f ef       	ldi	r22, 0xFF	; 255
    196a:	7f ef       	ldi	r23, 0xFF	; 255
    196c:	c5 01       	movw	r24, r10
    196e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <strnlen>
    1972:	4c 01       	movw	r8, r24
    1974:	82 01       	movw	r16, r4
    1976:	f3 2d       	mov	r31, r3
    1978:	ff 77       	andi	r31, 0x7F	; 127
    197a:	3f 2e       	mov	r3, r31
    197c:	16 c0       	rjmp	.+44     	; 0x19aa <vfprintf+0x188>
    197e:	28 01       	movw	r4, r16
    1980:	22 e0       	ldi	r18, 0x02	; 2
    1982:	42 0e       	add	r4, r18
    1984:	51 1c       	adc	r5, r1
    1986:	f8 01       	movw	r30, r16
    1988:	a0 80       	ld	r10, Z
    198a:	b1 80       	ldd	r11, Z+1	; 0x01
    198c:	36 fe       	sbrs	r3, 6
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <vfprintf+0x174>
    1990:	69 2d       	mov	r22, r9
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0x178>
    1996:	6f ef       	ldi	r22, 0xFF	; 255
    1998:	7f ef       	ldi	r23, 0xFF	; 255
    199a:	c5 01       	movw	r24, r10
    199c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <strnlen_P>
    19a0:	4c 01       	movw	r8, r24
    19a2:	f3 2d       	mov	r31, r3
    19a4:	f0 68       	ori	r31, 0x80	; 128
    19a6:	3f 2e       	mov	r3, r31
    19a8:	82 01       	movw	r16, r4
    19aa:	33 fc       	sbrc	r3, 3
    19ac:	1b c0       	rjmp	.+54     	; 0x19e4 <vfprintf+0x1c2>
    19ae:	82 2d       	mov	r24, r2
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	88 16       	cp	r8, r24
    19b4:	99 06       	cpc	r9, r25
    19b6:	b0 f4       	brcc	.+44     	; 0x19e4 <vfprintf+0x1c2>
    19b8:	b6 01       	movw	r22, r12
    19ba:	80 e2       	ldi	r24, 0x20	; 32
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    19c2:	2a 94       	dec	r2
    19c4:	f4 cf       	rjmp	.-24     	; 0x19ae <vfprintf+0x18c>
    19c6:	f5 01       	movw	r30, r10
    19c8:	37 fc       	sbrc	r3, 7
    19ca:	85 91       	lpm	r24, Z+
    19cc:	37 fe       	sbrs	r3, 7
    19ce:	81 91       	ld	r24, Z+
    19d0:	5f 01       	movw	r10, r30
    19d2:	b6 01       	movw	r22, r12
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    19da:	21 10       	cpse	r2, r1
    19dc:	2a 94       	dec	r2
    19de:	21 e0       	ldi	r18, 0x01	; 1
    19e0:	82 1a       	sub	r8, r18
    19e2:	91 08       	sbc	r9, r1
    19e4:	81 14       	cp	r8, r1
    19e6:	91 04       	cpc	r9, r1
    19e8:	71 f7       	brne	.-36     	; 0x19c6 <vfprintf+0x1a4>
    19ea:	e8 c0       	rjmp	.+464    	; 0x1bbc <vfprintf+0x39a>
    19ec:	84 36       	cpi	r24, 0x64	; 100
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <vfprintf+0x1d2>
    19f0:	89 36       	cpi	r24, 0x69	; 105
    19f2:	41 f5       	brne	.+80     	; 0x1a44 <vfprintf+0x222>
    19f4:	f8 01       	movw	r30, r16
    19f6:	37 fe       	sbrs	r3, 7
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <vfprintf+0x1e6>
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	0c 5f       	subi	r16, 0xFC	; 252
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	08 c0       	rjmp	.+16     	; 0x1a18 <vfprintf+0x1f6>
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	07 2e       	mov	r0, r23
    1a0e:	00 0c       	add	r0, r0
    1a10:	88 0b       	sbc	r24, r24
    1a12:	99 0b       	sbc	r25, r25
    1a14:	0e 5f       	subi	r16, 0xFE	; 254
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	f3 2d       	mov	r31, r3
    1a1a:	ff 76       	andi	r31, 0x6F	; 111
    1a1c:	3f 2e       	mov	r3, r31
    1a1e:	97 ff       	sbrs	r25, 7
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <vfprintf+0x212>
    1a22:	90 95       	com	r25
    1a24:	80 95       	com	r24
    1a26:	70 95       	com	r23
    1a28:	61 95       	neg	r22
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	f0 68       	ori	r31, 0x80	; 128
    1a32:	3f 2e       	mov	r3, r31
    1a34:	2a e0       	ldi	r18, 0x0A	; 10
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	a3 01       	movw	r20, r6
    1a3a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__ultoa_invert>
    1a3e:	88 2e       	mov	r8, r24
    1a40:	86 18       	sub	r8, r6
    1a42:	45 c0       	rjmp	.+138    	; 0x1ace <vfprintf+0x2ac>
    1a44:	85 37       	cpi	r24, 0x75	; 117
    1a46:	31 f4       	brne	.+12     	; 0x1a54 <vfprintf+0x232>
    1a48:	23 2d       	mov	r18, r3
    1a4a:	2f 7e       	andi	r18, 0xEF	; 239
    1a4c:	b2 2e       	mov	r11, r18
    1a4e:	2a e0       	ldi	r18, 0x0A	; 10
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	25 c0       	rjmp	.+74     	; 0x1a9e <vfprintf+0x27c>
    1a54:	93 2d       	mov	r25, r3
    1a56:	99 7f       	andi	r25, 0xF9	; 249
    1a58:	b9 2e       	mov	r11, r25
    1a5a:	8f 36       	cpi	r24, 0x6F	; 111
    1a5c:	c1 f0       	breq	.+48     	; 0x1a8e <vfprintf+0x26c>
    1a5e:	18 f4       	brcc	.+6      	; 0x1a66 <vfprintf+0x244>
    1a60:	88 35       	cpi	r24, 0x58	; 88
    1a62:	79 f0       	breq	.+30     	; 0x1a82 <vfprintf+0x260>
    1a64:	b5 c0       	rjmp	.+362    	; 0x1bd0 <vfprintf+0x3ae>
    1a66:	80 37       	cpi	r24, 0x70	; 112
    1a68:	19 f0       	breq	.+6      	; 0x1a70 <vfprintf+0x24e>
    1a6a:	88 37       	cpi	r24, 0x78	; 120
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <vfprintf+0x254>
    1a6e:	b0 c0       	rjmp	.+352    	; 0x1bd0 <vfprintf+0x3ae>
    1a70:	e9 2f       	mov	r30, r25
    1a72:	e0 61       	ori	r30, 0x10	; 16
    1a74:	be 2e       	mov	r11, r30
    1a76:	b4 fe       	sbrs	r11, 4
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <vfprintf+0x272>
    1a7a:	fb 2d       	mov	r31, r11
    1a7c:	f4 60       	ori	r31, 0x04	; 4
    1a7e:	bf 2e       	mov	r11, r31
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <vfprintf+0x272>
    1a82:	34 fe       	sbrs	r3, 4
    1a84:	0a c0       	rjmp	.+20     	; 0x1a9a <vfprintf+0x278>
    1a86:	29 2f       	mov	r18, r25
    1a88:	26 60       	ori	r18, 0x06	; 6
    1a8a:	b2 2e       	mov	r11, r18
    1a8c:	06 c0       	rjmp	.+12     	; 0x1a9a <vfprintf+0x278>
    1a8e:	28 e0       	ldi	r18, 0x08	; 8
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <vfprintf+0x27c>
    1a94:	20 e1       	ldi	r18, 0x10	; 16
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <vfprintf+0x27c>
    1a9a:	20 e1       	ldi	r18, 0x10	; 16
    1a9c:	32 e0       	ldi	r19, 0x02	; 2
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	b7 fe       	sbrs	r11, 7
    1aa2:	07 c0       	rjmp	.+14     	; 0x1ab2 <vfprintf+0x290>
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	0c 5f       	subi	r16, 0xFC	; 252
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <vfprintf+0x29c>
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 5f       	subi	r16, 0xFE	; 254
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	a3 01       	movw	r20, r6
    1ac0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__ultoa_invert>
    1ac4:	88 2e       	mov	r8, r24
    1ac6:	86 18       	sub	r8, r6
    1ac8:	fb 2d       	mov	r31, r11
    1aca:	ff 77       	andi	r31, 0x7F	; 127
    1acc:	3f 2e       	mov	r3, r31
    1ace:	36 fe       	sbrs	r3, 6
    1ad0:	0d c0       	rjmp	.+26     	; 0x1aec <vfprintf+0x2ca>
    1ad2:	23 2d       	mov	r18, r3
    1ad4:	2e 7f       	andi	r18, 0xFE	; 254
    1ad6:	a2 2e       	mov	r10, r18
    1ad8:	89 14       	cp	r8, r9
    1ada:	58 f4       	brcc	.+22     	; 0x1af2 <vfprintf+0x2d0>
    1adc:	34 fe       	sbrs	r3, 4
    1ade:	0b c0       	rjmp	.+22     	; 0x1af6 <vfprintf+0x2d4>
    1ae0:	32 fc       	sbrc	r3, 2
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <vfprintf+0x2d4>
    1ae4:	83 2d       	mov	r24, r3
    1ae6:	8e 7e       	andi	r24, 0xEE	; 238
    1ae8:	a8 2e       	mov	r10, r24
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <vfprintf+0x2d4>
    1aec:	b8 2c       	mov	r11, r8
    1aee:	a3 2c       	mov	r10, r3
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <vfprintf+0x2d6>
    1af2:	b8 2c       	mov	r11, r8
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <vfprintf+0x2d6>
    1af6:	b9 2c       	mov	r11, r9
    1af8:	a4 fe       	sbrs	r10, 4
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <vfprintf+0x2f8>
    1afc:	fe 01       	movw	r30, r28
    1afe:	e8 0d       	add	r30, r8
    1b00:	f1 1d       	adc	r31, r1
    1b02:	80 81       	ld	r24, Z
    1b04:	80 33       	cpi	r24, 0x30	; 48
    1b06:	21 f4       	brne	.+8      	; 0x1b10 <vfprintf+0x2ee>
    1b08:	9a 2d       	mov	r25, r10
    1b0a:	99 7e       	andi	r25, 0xE9	; 233
    1b0c:	a9 2e       	mov	r10, r25
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <vfprintf+0x300>
    1b10:	a2 fe       	sbrs	r10, 2
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <vfprintf+0x2fe>
    1b14:	b3 94       	inc	r11
    1b16:	b3 94       	inc	r11
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <vfprintf+0x300>
    1b1a:	8a 2d       	mov	r24, r10
    1b1c:	86 78       	andi	r24, 0x86	; 134
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <vfprintf+0x300>
    1b20:	b3 94       	inc	r11
    1b22:	a3 fc       	sbrc	r10, 3
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <vfprintf+0x326>
    1b26:	a0 fe       	sbrs	r10, 0
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <vfprintf+0x314>
    1b2a:	b2 14       	cp	r11, r2
    1b2c:	88 f4       	brcc	.+34     	; 0x1b50 <vfprintf+0x32e>
    1b2e:	28 0c       	add	r2, r8
    1b30:	92 2c       	mov	r9, r2
    1b32:	9b 18       	sub	r9, r11
    1b34:	0e c0       	rjmp	.+28     	; 0x1b52 <vfprintf+0x330>
    1b36:	b2 14       	cp	r11, r2
    1b38:	60 f4       	brcc	.+24     	; 0x1b52 <vfprintf+0x330>
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	80 e2       	ldi	r24, 0x20	; 32
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1b44:	b3 94       	inc	r11
    1b46:	f7 cf       	rjmp	.-18     	; 0x1b36 <vfprintf+0x314>
    1b48:	b2 14       	cp	r11, r2
    1b4a:	18 f4       	brcc	.+6      	; 0x1b52 <vfprintf+0x330>
    1b4c:	2b 18       	sub	r2, r11
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <vfprintf+0x332>
    1b50:	98 2c       	mov	r9, r8
    1b52:	21 2c       	mov	r2, r1
    1b54:	a4 fe       	sbrs	r10, 4
    1b56:	10 c0       	rjmp	.+32     	; 0x1b78 <vfprintf+0x356>
    1b58:	b6 01       	movw	r22, r12
    1b5a:	80 e3       	ldi	r24, 0x30	; 48
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1b62:	a2 fe       	sbrs	r10, 2
    1b64:	17 c0       	rjmp	.+46     	; 0x1b94 <vfprintf+0x372>
    1b66:	a1 fc       	sbrc	r10, 1
    1b68:	03 c0       	rjmp	.+6      	; 0x1b70 <vfprintf+0x34e>
    1b6a:	88 e7       	ldi	r24, 0x78	; 120
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x352>
    1b70:	88 e5       	ldi	r24, 0x58	; 88
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	b6 01       	movw	r22, r12
    1b76:	0c c0       	rjmp	.+24     	; 0x1b90 <vfprintf+0x36e>
    1b78:	8a 2d       	mov	r24, r10
    1b7a:	86 78       	andi	r24, 0x86	; 134
    1b7c:	59 f0       	breq	.+22     	; 0x1b94 <vfprintf+0x372>
    1b7e:	a1 fe       	sbrs	r10, 1
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <vfprintf+0x364>
    1b82:	8b e2       	ldi	r24, 0x2B	; 43
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <vfprintf+0x366>
    1b86:	80 e2       	ldi	r24, 0x20	; 32
    1b88:	a7 fc       	sbrc	r10, 7
    1b8a:	8d e2       	ldi	r24, 0x2D	; 45
    1b8c:	b6 01       	movw	r22, r12
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1b94:	89 14       	cp	r8, r9
    1b96:	38 f4       	brcc	.+14     	; 0x1ba6 <vfprintf+0x384>
    1b98:	b6 01       	movw	r22, r12
    1b9a:	80 e3       	ldi	r24, 0x30	; 48
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1ba2:	9a 94       	dec	r9
    1ba4:	f7 cf       	rjmp	.-18     	; 0x1b94 <vfprintf+0x372>
    1ba6:	8a 94       	dec	r8
    1ba8:	f3 01       	movw	r30, r6
    1baa:	e8 0d       	add	r30, r8
    1bac:	f1 1d       	adc	r31, r1
    1bae:	80 81       	ld	r24, Z
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1bb8:	81 10       	cpse	r8, r1
    1bba:	f5 cf       	rjmp	.-22     	; 0x1ba6 <vfprintf+0x384>
    1bbc:	22 20       	and	r2, r2
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <vfprintf+0x3a0>
    1bc0:	42 ce       	rjmp	.-892    	; 0x1846 <vfprintf+0x24>
    1bc2:	b6 01       	movw	r22, r12
    1bc4:	80 e2       	ldi	r24, 0x20	; 32
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1bcc:	2a 94       	dec	r2
    1bce:	f6 cf       	rjmp	.-20     	; 0x1bbc <vfprintf+0x39a>
    1bd0:	f6 01       	movw	r30, r12
    1bd2:	86 81       	ldd	r24, Z+6	; 0x06
    1bd4:	97 81       	ldd	r25, Z+7	; 0x07
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <vfprintf+0x3ba>
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	9f ef       	ldi	r25, 0xFF	; 255
    1bdc:	2b 96       	adiw	r28, 0x0b	; 11
    1bde:	e2 e1       	ldi	r30, 0x12	; 18
    1be0:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__epilogue_restores__>

00001be4 <calloc>:
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	86 9f       	mul	r24, r22
    1bee:	80 01       	movw	r16, r0
    1bf0:	87 9f       	mul	r24, r23
    1bf2:	10 0d       	add	r17, r0
    1bf4:	96 9f       	mul	r25, r22
    1bf6:	10 0d       	add	r17, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	0e 94 88 0a 	call	0x1510	; 0x1510 <malloc>
    1c00:	ec 01       	movw	r28, r24
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	29 f0       	breq	.+10     	; 0x1c10 <calloc+0x2c>
    1c06:	a8 01       	movw	r20, r16
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <memset>
    1c10:	ce 01       	movw	r24, r28
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <strnlen_P>:
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	05 90       	lpm	r0, Z+
    1c20:	61 50       	subi	r22, 0x01	; 1
    1c22:	70 40       	sbci	r23, 0x00	; 0
    1c24:	01 10       	cpse	r0, r1
    1c26:	d8 f7       	brcc	.-10     	; 0x1c1e <strnlen_P+0x2>
    1c28:	80 95       	com	r24
    1c2a:	90 95       	com	r25
    1c2c:	8e 0f       	add	r24, r30
    1c2e:	9f 1f       	adc	r25, r31
    1c30:	08 95       	ret

00001c32 <memset>:
    1c32:	dc 01       	movw	r26, r24
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <memset+0x6>
    1c36:	6d 93       	st	X+, r22
    1c38:	41 50       	subi	r20, 0x01	; 1
    1c3a:	50 40       	sbci	r21, 0x00	; 0
    1c3c:	e0 f7       	brcc	.-8      	; 0x1c36 <memset+0x4>
    1c3e:	08 95       	ret

00001c40 <strnlen>:
    1c40:	fc 01       	movw	r30, r24
    1c42:	61 50       	subi	r22, 0x01	; 1
    1c44:	70 40       	sbci	r23, 0x00	; 0
    1c46:	01 90       	ld	r0, Z+
    1c48:	01 10       	cpse	r0, r1
    1c4a:	d8 f7       	brcc	.-10     	; 0x1c42 <strnlen+0x2>
    1c4c:	80 95       	com	r24
    1c4e:	90 95       	com	r25
    1c50:	8e 0f       	add	r24, r30
    1c52:	9f 1f       	adc	r25, r31
    1c54:	08 95       	ret

00001c56 <fputc>:
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	fb 01       	movw	r30, r22
    1c60:	23 81       	ldd	r18, Z+3	; 0x03
    1c62:	21 fd       	sbrc	r18, 1
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <fputc+0x16>
    1c66:	8f ef       	ldi	r24, 0xFF	; 255
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	2c c0       	rjmp	.+88     	; 0x1cc4 <fputc+0x6e>
    1c6c:	22 ff       	sbrs	r18, 2
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <fputc+0x46>
    1c70:	46 81       	ldd	r20, Z+6	; 0x06
    1c72:	57 81       	ldd	r21, Z+7	; 0x07
    1c74:	24 81       	ldd	r18, Z+4	; 0x04
    1c76:	35 81       	ldd	r19, Z+5	; 0x05
    1c78:	42 17       	cp	r20, r18
    1c7a:	53 07       	cpc	r21, r19
    1c7c:	44 f4       	brge	.+16     	; 0x1c8e <fputc+0x38>
    1c7e:	a0 81       	ld	r26, Z
    1c80:	b1 81       	ldd	r27, Z+1	; 0x01
    1c82:	9d 01       	movw	r18, r26
    1c84:	2f 5f       	subi	r18, 0xFF	; 255
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	31 83       	std	Z+1, r19	; 0x01
    1c8a:	20 83       	st	Z, r18
    1c8c:	8c 93       	st	X, r24
    1c8e:	26 81       	ldd	r18, Z+6	; 0x06
    1c90:	37 81       	ldd	r19, Z+7	; 0x07
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	37 83       	std	Z+7, r19	; 0x07
    1c98:	26 83       	std	Z+6, r18	; 0x06
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <fputc+0x6e>
    1c9c:	8b 01       	movw	r16, r22
    1c9e:	ec 01       	movw	r28, r24
    1ca0:	fb 01       	movw	r30, r22
    1ca2:	00 84       	ldd	r0, Z+8	; 0x08
    1ca4:	f1 85       	ldd	r31, Z+9	; 0x09
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	09 95       	icall
    1caa:	89 2b       	or	r24, r25
    1cac:	e1 f6       	brne	.-72     	; 0x1c66 <fputc+0x10>
    1cae:	d8 01       	movw	r26, r16
    1cb0:	16 96       	adiw	r26, 0x06	; 6
    1cb2:	8d 91       	ld	r24, X+
    1cb4:	9c 91       	ld	r25, X
    1cb6:	17 97       	sbiw	r26, 0x07	; 7
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	17 96       	adiw	r26, 0x07	; 7
    1cbc:	9c 93       	st	X, r25
    1cbe:	8e 93       	st	-X, r24
    1cc0:	16 97       	sbiw	r26, 0x06	; 6
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	08 95       	ret

00001cce <__ultoa_invert>:
    1cce:	fa 01       	movw	r30, r20
    1cd0:	aa 27       	eor	r26, r26
    1cd2:	28 30       	cpi	r18, 0x08	; 8
    1cd4:	51 f1       	breq	.+84     	; 0x1d2a <__ultoa_invert+0x5c>
    1cd6:	20 31       	cpi	r18, 0x10	; 16
    1cd8:	81 f1       	breq	.+96     	; 0x1d3a <__ultoa_invert+0x6c>
    1cda:	e8 94       	clt
    1cdc:	6f 93       	push	r22
    1cde:	6e 7f       	andi	r22, 0xFE	; 254
    1ce0:	6e 5f       	subi	r22, 0xFE	; 254
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce8:	af 4f       	sbci	r26, 0xFF	; 255
    1cea:	b1 e0       	ldi	r27, 0x01	; 1
    1cec:	3e d0       	rcall	.+124    	; 0x1d6a <__ultoa_invert+0x9c>
    1cee:	b4 e0       	ldi	r27, 0x04	; 4
    1cf0:	3c d0       	rcall	.+120    	; 0x1d6a <__ultoa_invert+0x9c>
    1cf2:	67 0f       	add	r22, r23
    1cf4:	78 1f       	adc	r23, r24
    1cf6:	89 1f       	adc	r24, r25
    1cf8:	9a 1f       	adc	r25, r26
    1cfa:	a1 1d       	adc	r26, r1
    1cfc:	68 0f       	add	r22, r24
    1cfe:	79 1f       	adc	r23, r25
    1d00:	8a 1f       	adc	r24, r26
    1d02:	91 1d       	adc	r25, r1
    1d04:	a1 1d       	adc	r26, r1
    1d06:	6a 0f       	add	r22, r26
    1d08:	71 1d       	adc	r23, r1
    1d0a:	81 1d       	adc	r24, r1
    1d0c:	91 1d       	adc	r25, r1
    1d0e:	a1 1d       	adc	r26, r1
    1d10:	20 d0       	rcall	.+64     	; 0x1d52 <__ultoa_invert+0x84>
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <__ultoa_invert+0x48>
    1d14:	68 94       	set
    1d16:	3f 91       	pop	r19
    1d18:	2a e0       	ldi	r18, 0x0A	; 10
    1d1a:	26 9f       	mul	r18, r22
    1d1c:	11 24       	eor	r1, r1
    1d1e:	30 19       	sub	r19, r0
    1d20:	30 5d       	subi	r19, 0xD0	; 208
    1d22:	31 93       	st	Z+, r19
    1d24:	de f6       	brtc	.-74     	; 0x1cdc <__ultoa_invert+0xe>
    1d26:	cf 01       	movw	r24, r30
    1d28:	08 95       	ret
    1d2a:	46 2f       	mov	r20, r22
    1d2c:	47 70       	andi	r20, 0x07	; 7
    1d2e:	40 5d       	subi	r20, 0xD0	; 208
    1d30:	41 93       	st	Z+, r20
    1d32:	b3 e0       	ldi	r27, 0x03	; 3
    1d34:	0f d0       	rcall	.+30     	; 0x1d54 <__ultoa_invert+0x86>
    1d36:	c9 f7       	brne	.-14     	; 0x1d2a <__ultoa_invert+0x5c>
    1d38:	f6 cf       	rjmp	.-20     	; 0x1d26 <__ultoa_invert+0x58>
    1d3a:	46 2f       	mov	r20, r22
    1d3c:	4f 70       	andi	r20, 0x0F	; 15
    1d3e:	40 5d       	subi	r20, 0xD0	; 208
    1d40:	4a 33       	cpi	r20, 0x3A	; 58
    1d42:	18 f0       	brcs	.+6      	; 0x1d4a <__ultoa_invert+0x7c>
    1d44:	49 5d       	subi	r20, 0xD9	; 217
    1d46:	31 fd       	sbrc	r19, 1
    1d48:	40 52       	subi	r20, 0x20	; 32
    1d4a:	41 93       	st	Z+, r20
    1d4c:	02 d0       	rcall	.+4      	; 0x1d52 <__ultoa_invert+0x84>
    1d4e:	a9 f7       	brne	.-22     	; 0x1d3a <__ultoa_invert+0x6c>
    1d50:	ea cf       	rjmp	.-44     	; 0x1d26 <__ultoa_invert+0x58>
    1d52:	b4 e0       	ldi	r27, 0x04	; 4
    1d54:	a6 95       	lsr	r26
    1d56:	97 95       	ror	r25
    1d58:	87 95       	ror	r24
    1d5a:	77 95       	ror	r23
    1d5c:	67 95       	ror	r22
    1d5e:	ba 95       	dec	r27
    1d60:	c9 f7       	brne	.-14     	; 0x1d54 <__ultoa_invert+0x86>
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	61 05       	cpc	r22, r1
    1d66:	71 05       	cpc	r23, r1
    1d68:	08 95       	ret
    1d6a:	9b 01       	movw	r18, r22
    1d6c:	ac 01       	movw	r20, r24
    1d6e:	0a 2e       	mov	r0, r26
    1d70:	06 94       	lsr	r0
    1d72:	57 95       	ror	r21
    1d74:	47 95       	ror	r20
    1d76:	37 95       	ror	r19
    1d78:	27 95       	ror	r18
    1d7a:	ba 95       	dec	r27
    1d7c:	c9 f7       	brne	.-14     	; 0x1d70 <__ultoa_invert+0xa2>
    1d7e:	62 0f       	add	r22, r18
    1d80:	73 1f       	adc	r23, r19
    1d82:	84 1f       	adc	r24, r20
    1d84:	95 1f       	adc	r25, r21
    1d86:	a0 1d       	adc	r26, r0
    1d88:	08 95       	ret

00001d8a <__prologue_saves__>:
    1d8a:	2f 92       	push	r2
    1d8c:	3f 92       	push	r3
    1d8e:	4f 92       	push	r4
    1d90:	5f 92       	push	r5
    1d92:	6f 92       	push	r6
    1d94:	7f 92       	push	r7
    1d96:	8f 92       	push	r8
    1d98:	9f 92       	push	r9
    1d9a:	af 92       	push	r10
    1d9c:	bf 92       	push	r11
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	ca 1b       	sub	r28, r26
    1db4:	db 0b       	sbc	r29, r27
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	09 94       	ijmp

00001dc2 <__epilogue_restores__>:
    1dc2:	2a 88       	ldd	r2, Y+18	; 0x12
    1dc4:	39 88       	ldd	r3, Y+17	; 0x11
    1dc6:	48 88       	ldd	r4, Y+16	; 0x10
    1dc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dca:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dce:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1dd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dd4:	b9 84       	ldd	r11, Y+9	; 0x09
    1dd6:	c8 84       	ldd	r12, Y+8	; 0x08
    1dd8:	df 80       	ldd	r13, Y+7	; 0x07
    1dda:	ee 80       	ldd	r14, Y+6	; 0x06
    1ddc:	fd 80       	ldd	r15, Y+5	; 0x05
    1dde:	0c 81       	ldd	r16, Y+4	; 0x04
    1de0:	1b 81       	ldd	r17, Y+3	; 0x03
    1de2:	aa 81       	ldd	r26, Y+2	; 0x02
    1de4:	b9 81       	ldd	r27, Y+1	; 0x01
    1de6:	ce 0f       	add	r28, r30
    1de8:	d1 1d       	adc	r29, r1
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	ed 01       	movw	r28, r26
    1df6:	08 95       	ret

00001df8 <_exit>:
    1df8:	f8 94       	cli

00001dfa <__stop_program>:
    1dfa:	ff cf       	rjmp	.-2      	; 0x1dfa <__stop_program>
