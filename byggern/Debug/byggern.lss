
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ee  00800100  00001d8a  00001e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008002ee  008002ee  0000200c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f58  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000154a  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001506  00000000  00000000  0000680e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000604  00000000  00000000  00007d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a8  00000000  00000000  00008318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013b6  00000000  00000000  00008cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000a076  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_14>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      58:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      5c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      60:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      64:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      68:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      6c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	0a 0a       	sbc	r0, r26
      a0:	0a 01       	movw	r0, r20
      a2:	0a 1e       	adc	r0, r26
      a4:	01 1e       	adc	r0, r17
      a6:	3c 0a       	sbc	r3, r28
      a8:	01 0a       	sbc	r0, r17
      aa:	0a 01       	movw	r0, r20
      ac:	0a 1e       	adc	r0, r26
      ae:	00 1e       	adc	r0, r16
      b0:	1e 0a       	sbc	r1, r30
      b2:	14 0a       	sbc	r1, r20
      b4:	01 0a       	sbc	r0, r17
      b6:	01 0a       	sbc	r0, r17
      b8:	01 0a       	sbc	r0, r17
      ba:	01 1e       	adc	r0, r17
      bc:	01 1e       	adc	r0, r17
      be:	1e 0a       	sbc	r1, r30
      c0:	14 01       	movw	r2, r8
      c2:	14 01       	movw	r2, r8
      c4:	14 28       	or	r1, r4
      c6:	50 0a       	sbc	r5, r16
      c8:	01 0a       	sbc	r0, r17
      ca:	0a 0a       	sbc	r0, r26
      cc:	1e 01       	movw	r2, r28
      ce:	1e 3c       	cpi	r17, 0xCE	; 206
      d0:	0a 01       	movw	r0, r20
      d2:	0a 0a       	sbc	r0, r26
      d4:	01 0a       	sbc	r0, r17
      d6:	01 1e       	adc	r0, r17
      d8:	1e 1e       	adc	r1, r30
      da:	0a 14       	cp	r0, r10
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 0a       	sbc	r0, r26
      e2:	01 1e       	adc	r0, r17
      e4:	1e 1e       	adc	r1, r30
      e6:	0a 14       	cp	r0, r10
      e8:	14 14       	cp	r1, r4
      ea:	28 50       	subi	r18, 0x08	; 8
      ec:	28 d2       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <song1_chorus_melody>:
      ed:	d2 01 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
      fd:	9f 01 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10d:	6e 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     n...............
     11d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     12d:	00 00 00 00 6e 02 00 00 2a 02 00 00 0b 02 00 00     ....n...*.......
     13d:	d2 01 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     14d:	00 00 00 00 2a 02 00 00 00 00 00 00 2a 02 00 00     ....*.......*...
     15d:	00 00 00 00 2a 02 00 00 00 00 00 00 6e 02 00 00     ....*.......n...
     16d:	0b 02 00 00 d2 01 00 00 9f 01 00 00 00 00 00 00     ................
     17d:	9f 01 00 00 00 00 00 00 9f 01 00 00 6e 02 00 00     ............n...
     18d:	2a 02 00 00 d2 01 00 00 00 00 00 00 d2 01 00 00     *...............
     19d:	9f 01 00 00 9f 01 00 00 ba 02 00 00 00 00 00 00     ................
     1ad:	ba 02 00 00 6e 02 00 00 d2 01 00 00 00 00 00 00     ....n...........
     1bd:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     1cd:	00 00 00 00 9f 01 00 00 0b 02 00 00 2a 02 00 00     ............*...
     1dd:	0b 02 00 00 d2 01 00 00 2a 02 00 00 00 00 00 00     ........*.......
     1ed:	2a 02 00 00 00 00 00 00 2a 02 00 00 2a 02 00 00     *.......*...*...
     1fd:	00 00 00 00 2a 02 00 00 6e 02 00 00 0b 02 00 00     ....*...n.......
     20d:	d2 01 00 00 9f 01 00 00 00 00 00 00 9f 01 00 00     ................
     21d:	6e 02 00 00 2a 02 00 00 00 00 00 00                 n...*.......

00000229 <font8>:
	...
     231:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     241:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     251:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     261:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     271:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     281:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     291:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2a1:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2b1:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2c1:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2d1:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     2e1:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     2f1:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     301:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     311:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     321:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     331:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     341:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     351:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     361:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     371:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     381:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     391:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3a1:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3b1:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3c1:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3d1:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     3e1:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     3f1:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     401:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     411:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     421:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     431:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     441:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     451:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     461:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     471:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     481:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     491:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4a1:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4b1:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4c1:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4d1:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     4e1:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     4f1:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     501:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     511:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	12 e0       	ldi	r17, 0x02	; 2
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	ea e8       	ldi	r30, 0x8A	; 138
     536:	fd e1       	ldi	r31, 0x1D	; 29
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	ae 3e       	cpi	r26, 0xEE	; 238
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	23 e0       	ldi	r18, 0x03	; 3
     546:	ae ee       	ldi	r26, 0xEE	; 238
     548:	b2 e0       	ldi	r27, 0x02	; 2
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a8 30       	cpi	r26, 0x08	; 8
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 ba 02 	call	0x574	; 0x574 <main>
     558:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     560:	30 98       	cbi	0x06, 0	; 6
     562:	08 95       	ret

00000564 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     564:	84 60       	ori	r24, 0x04	; 4
     566:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x10f8>
	

	while (test_bit(PINE, PINE0)) {
     56a:	28 99       	sbic	0x05, 0	; 5
     56c:	fe cf       	rjmp	.-4      	; 0x56a <readAdc+0x6>

	}
	
	return *adc;
     56e:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x10f8>
     572:	08 95       	ret

00000574 <main>:
#include "pwm.h"
#include "music.h"

int main(void)
{
	setupInit();
     574:	0e 94 5d 06 	call	0xcba	; 0xcba <setupInit>
	printf("Starting program\n\n\n\n\n\n\n\n\n\n");
     578:	84 ea       	ldi	r24, 0xA4	; 164
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <puts>
	//test_SRAM();
	//pwm_testPlayNote();
	pwm_init();
     580:	0e 94 3e 03 	call	0x67c	; 0x67c <pwm_init>
	//music_playLisaGikk();                 
	while (1) {
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
		if (!strcmp(currentMenu.currentMenuItem->children[currentMenu.childIndex]->name, "Rick")) {
     584:	c2 ef       	ldi	r28, 0xF2	; 242
     586:	d2 e0       	ldi	r29, 0x02	; 2
	//pwm_testPlayNote();
	pwm_init();
	//music_playLisaGikk();                 
	while (1) {
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     588:	0e 94 bf 03 	call	0x77e	; 0x77e <sleep_now>
		if (!strcmp(currentMenu.currentMenuItem->children[currentMenu.childIndex]->name, "Rick")) {
     58c:	28 81       	ld	r18, Y
     58e:	39 81       	ldd	r19, Y+1	; 0x01
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	e8 2f       	mov	r30, r24
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	39 96       	adiw	r30, 0x09	; 9
     598:	ee 0f       	add	r30, r30
     59a:	ff 1f       	adc	r31, r31
     59c:	e2 0f       	add	r30, r18
     59e:	f3 1f       	adc	r31, r19
     5a0:	6e eb       	ldi	r22, 0xBE	; 190
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	0e 94 37 0b 	call	0x166e	; 0x166e <strcmp>
     5ac:	89 2b       	or	r24, r25
     5ae:	61 f7       	brne	.-40     	; 0x588 <main+0x14>
			music_playRick();
     5b0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <music_playRick>
     5b4:	e9 cf       	rjmp	.-46     	; 0x588 <main+0x14>

000005b6 <music_playRick>:
	}
	pwm_setFreq(0);
	sei();

}
void music_playRick() {
     5b6:	bf 92       	push	r11
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
	
	printf("You got rickrolled\n\n\r");
     5c8:	86 e0       	ldi	r24, 0x06	; 6
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 92 0b 	call	0x1724	; 0x1724 <printf>
     5d4:	c6 e0       	ldi	r28, 0x06	; 6
     5d6:	d1 e0       	ldi	r29, 0x01	; 1
     5d8:	0f 2e       	mov	r0, r31
     5da:	fd ee       	ldi	r31, 0xED	; 237
     5dc:	ef 2e       	mov	r14, r31
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	ff 2e       	mov	r15, r31
     5e2:	f0 2d       	mov	r31, r0
     5e4:	0e e9       	ldi	r16, 0x9E	; 158
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	0f 2e       	mov	r0, r31
     5ea:	f4 ea       	ldi	r31, 0xA4	; 164
     5ec:	cf 2e       	mov	r12, r31
     5ee:	f1 e0       	ldi	r31, 0x01	; 1
     5f0:	df 2e       	mov	r13, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		printf(lyrics_chorus[i]);
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f4 e1       	ldi	r31, 0x14	; 20
     5fc:	bf 2e       	mov	r11, r31
     5fe:	f0 2d       	mov	r31, r0
}
void music_playRick() {
	
	printf("You got rickrolled\n\n\r");
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
		printf(lyrics_chorus[i]);
     600:	88 81       	ld	r24, Y
     602:	99 81       	ldd	r25, Y+1	; 0x01
     604:	22 96       	adiw	r28, 0x02	; 2
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	0e 94 92 0b 	call	0x1724	; 0x1724 <printf>
		pwm_setFreq(pgm_read_word(&(song1_chorus_melody[i])));
     60e:	f7 01       	movw	r30, r14
     610:	65 91       	lpm	r22, Z+
     612:	74 91       	lpm	r23, Z
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 4e 03 	call	0x69c	; 0x69c <pwm_setFreq>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
     61c:	f8 01       	movw	r30, r16
     61e:	84 91       	lpm	r24, Z
     620:	b8 9e       	mul	r11, r24
     622:	c0 01       	movw	r24, r0
     624:	11 24       	eor	r1, r1
     626:	09 2e       	mov	r0, r25
     628:	00 0c       	add	r0, r0
     62a:	aa 0b       	sbc	r26, r26
     62c:	bb 0b       	sbc	r27, r27
		while (duration--) {
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	00 97       	sbiw	r24, 0x00	; 0
     634:	a1 05       	cpc	r26, r1
     636:	b1 05       	cpc	r27, r1
     638:	51 f0       	breq	.+20     	; 0x64e <music_playRick+0x98>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63a:	ec ec       	ldi	r30, 0xCC	; 204
     63c:	f4 e0       	ldi	r31, 0x04	; 4
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <music_playRick+0x88>
     642:	00 c0       	rjmp	.+0      	; 0x644 <music_playRick+0x8e>
     644:	00 00       	nop
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	a1 09       	sbc	r26, r1
     64a:	b1 09       	sbc	r27, r1
     64c:	b1 f7       	brne	.-20     	; 0x63a <music_playRick+0x84>
     64e:	f4 e0       	ldi	r31, 0x04	; 4
     650:	ef 0e       	add	r14, r31
     652:	f1 1c       	adc	r15, r1
     654:	0f 5f       	subi	r16, 0xFF	; 255
     656:	1f 4f       	sbci	r17, 0xFF	; 255

}
void music_playRick() {
	
	printf("You got rickrolled\n\n\r");
	for (int i = 0; i< sizeof(song1_chorus_melody)/sizeof(uint32_t); i++) {
     658:	cc 15       	cp	r28, r12
     65a:	dd 05       	cpc	r29, r13
     65c:	89 f6       	brne	.-94     	; 0x600 <music_playRick+0x4a>
		uint32_t duration = 20*pgm_read_byte(&(song1_chorus_rhythmn[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	cb 01       	movw	r24, r22
     664:	0e 94 4e 03 	call	0x69c	; 0x69c <pwm_setFreq>
	

     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	bf 90       	pop	r11
     67a:	08 95       	ret

0000067c <pwm_init>:
    PRESC_1024 =   (1 << CS02)  |               (1 << CS00)
} prescaling;

void pwm_init() {
    //set output pin
    DDRB = (1 << PB0); 
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	87 bb       	out	0x17, r24	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	81 bf       	out	0x31, r24	; 49
    
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
     684:	80 e8       	ldi	r24, 0x80	; 128
     686:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
     688:	83 b7       	in	r24, 0x33	; 51
     68a:	88 60       	ori	r24, 0x08	; 8
     68c:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
     68e:	83 b7       	in	r24, 0x33	; 51
     690:	80 61       	ori	r24, 0x10	; 16
     692:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 &= PRESC_OFF;
     694:	83 b7       	in	r24, 0x33	; 51
     696:	88 7f       	andi	r24, 0xF8	; 248
     698:	83 bf       	out	0x33, r24	; 51
     69a:	08 95       	ret

0000069c <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
    if (freq == 0) {
     6a0:	67 2b       	or	r22, r23
     6a2:	68 2b       	or	r22, r24
     6a4:	69 2b       	or	r22, r25
     6a6:	21 f4       	brne	.+8      	; 0x6b0 <pwm_setFreq+0x14>
        TCCR0 &= PRESC_OFF;
     6a8:	83 b7       	in	r24, 0x33	; 51
     6aa:	88 7f       	andi	r24, 0xF8	; 248
     6ac:	83 bf       	out	0x33, r24	; 51
        return;
     6ae:	08 95       	ret
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e8       	ldi	r23, 0x80	; 128
     6b4:	85 e2       	ldi	r24, 0x25	; 37
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__udivmodsi4>
     6bc:	da 01       	movw	r26, r20
     6be:	c9 01       	movw	r24, r18

    if (ocr_plus_one > 255+1) {
     6c0:	21 30       	cpi	r18, 0x01	; 1
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	36 07       	cpc	r19, r22
     6c6:	41 05       	cpc	r20, r1
     6c8:	51 05       	cpc	r21, r1
     6ca:	a8 f1       	brcs	.+106    	; 0x736 <pwm_setFreq+0x9a>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
     6cc:	68 94       	set
     6ce:	12 f8       	bld	r1, 2
     6d0:	b6 95       	lsr	r27
     6d2:	a7 95       	ror	r26
     6d4:	97 95       	ror	r25
     6d6:	87 95       	ror	r24
     6d8:	16 94       	lsr	r1
     6da:	d1 f7       	brne	.-12     	; 0x6d0 <pwm_setFreq+0x34>

        if (ocr_plus_one > 255+1) {
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	96 07       	cpc	r25, r22
     6e2:	a1 05       	cpc	r26, r1
     6e4:	b1 05       	cpc	r27, r1
     6e6:	48 f1       	brcs	.+82     	; 0x73a <pwm_setFreq+0x9e>
            prescaler = PRESC_64;
			presc_num *=8;
            ocr_plus_one /= 8;
     6e8:	da 01       	movw	r26, r20
     6ea:	c9 01       	movw	r24, r18
     6ec:	68 94       	set
     6ee:	15 f8       	bld	r1, 5
     6f0:	b6 95       	lsr	r27
     6f2:	a7 95       	ror	r26
     6f4:	97 95       	ror	r25
     6f6:	87 95       	ror	r24
     6f8:	16 94       	lsr	r1
     6fa:	d1 f7       	brne	.-12     	; 0x6f0 <pwm_setFreq+0x54>
            
            if (ocr_plus_one > 255+1) {
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	96 07       	cpc	r25, r22
     702:	a1 05       	cpc	r26, r1
     704:	b1 05       	cpc	r27, r1
     706:	d8 f0       	brcs	.+54     	; 0x73e <pwm_setFreq+0xa2>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
     708:	bb 27       	eor	r27, r27
     70a:	a5 2f       	mov	r26, r21
     70c:	94 2f       	mov	r25, r20
     70e:	83 2f       	mov	r24, r19
                    
                if (ocr_plus_one > 255+1) {
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	96 07       	cpc	r25, r22
     716:	a1 05       	cpc	r26, r1
     718:	b1 05       	cpc	r27, r1
     71a:	98 f0       	brcs	.+38     	; 0x742 <pwm_setFreq+0xa6>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
     71c:	da 01       	movw	r26, r20
     71e:	c9 01       	movw	r24, r18
     720:	07 2e       	mov	r0, r23
     722:	7a e0       	ldi	r23, 0x0A	; 10
     724:	b6 95       	lsr	r27
     726:	a7 95       	ror	r26
     728:	97 95       	ror	r25
     72a:	87 95       	ror	r24
     72c:	7a 95       	dec	r23
     72e:	d1 f7       	brne	.-12     	; 0x724 <pwm_setFreq+0x88>
     730:	70 2d       	mov	r23, r0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
     732:	35 e0       	ldi	r19, 0x05	; 5
     734:	07 c0       	rjmp	.+14     	; 0x744 <pwm_setFreq+0xa8>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
     736:	31 e0       	ldi	r19, 0x01	; 1
     738:	05 c0       	rjmp	.+10     	; 0x744 <pwm_setFreq+0xa8>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
     73a:	32 e0       	ldi	r19, 0x02	; 2
     73c:	03 c0       	rjmp	.+6      	; 0x744 <pwm_setFreq+0xa8>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
     73e:	33 e0       	ldi	r19, 0x03	; 3
     740:	01 c0       	rjmp	.+2      	; 0x744 <pwm_setFreq+0xa8>
			presc_num *=8;
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
     742:	34 e0       	ldi	r19, 0x04	; 4
	//printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
	//printf("ocr:  %i\n\r", ocr_plus_one-1);
	//uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	//printf("frequency obtained: %i\n\n\r", frequency);
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
     744:	23 b7       	in	r18, 0x33	; 51
     746:	28 7f       	andi	r18, 0xF8	; 248
     748:	23 bf       	out	0x33, r18	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
     74a:	23 b7       	in	r18, 0x33	; 51
     74c:	23 2b       	or	r18, r19
     74e:	23 bf       	out	0x33, r18	; 51
	OCR0 = ocr_plus_one-1;
     750:	81 50       	subi	r24, 0x01	; 1
     752:	81 bf       	out	0x31, r24	; 49
     754:	08 95       	ret

00000756 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     756:	85 b7       	in	r24, 0x35	; 53
     758:	8f 7e       	andi	r24, 0xEF	; 239
     75a:	85 bf       	out	0x35, r24	; 53
     75c:	84 b7       	in	r24, 0x34	; 52
     75e:	8f 7d       	andi	r24, 0xDF	; 223
     760:	84 bf       	out	0x34, r24	; 52
     762:	86 b7       	in	r24, 0x36	; 54
     764:	8f 77       	andi	r24, 0x7F	; 127
     766:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     768:	85 b7       	in	r24, 0x35	; 53
     76a:	80 62       	ori	r24, 0x20	; 32
     76c:	85 bf       	out	0x35, r24	; 53
     76e:	88 95       	sleep
     770:	85 b7       	in	r24, 0x35	; 53
     772:	8f 7d       	andi	r24, 0xDF	; 223
     774:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     776:	85 b7       	in	r24, 0x35	; 53
     778:	80 62       	ori	r24, 0x20	; 32
     77a:	85 bf       	out	0x35, r24	; 53
     77c:	08 95       	ret

0000077e <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     77e:	88 b1       	in	r24, 0x08	; 8
     780:	88 68       	ori	r24, 0x88	; 136
     782:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     784:	85 b7       	in	r24, 0x35	; 53
     786:	80 62       	ori	r24, 0x20	; 32
     788:	85 bf       	out	0x35, r24	; 53
     78a:	88 95       	sleep
     78c:	85 b7       	in	r24, 0x35	; 53
     78e:	8f 7d       	andi	r24, 0xDF	; 223
     790:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     792:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     794:	85 b7       	in	r24, 0x35	; 53
     796:	8f 7d       	andi	r24, 0xDF	; 223
     798:	85 bf       	out	0x35, r24	; 53
     79a:	08 95       	ret

0000079c <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     7a2:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     7ac:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <joystickOffsetY>
     7b0:	08 95       	ret

000007b2 <joystick_readPosition>:
}
void joystick_readPosition() {
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     7c4:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     7cc:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     7ce:	60 91 fb 02 	lds	r22, 0x02FB	; 0x8002fb <joystickOffsetX>
     7d2:	c6 17       	cp	r28, r22
     7d4:	80 f4       	brcc	.+32     	; 0x7f6 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	2c 2f       	mov	r18, r28
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	26 1b       	sub	r18, r22
     7de:	37 0b       	sbc	r19, r23
     7e0:	44 e6       	ldi	r20, 0x64	; 100
     7e2:	42 9f       	mul	r20, r18
     7e4:	c0 01       	movw	r24, r0
     7e6:	43 9f       	mul	r20, r19
     7e8:	90 0d       	add	r25, r0
     7ea:	11 24       	eor	r1, r1
     7ec:	0e 94 cc 09 	call	0x1398	; 0x1398 <__divmodhi4>
     7f0:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <__data_end>
     7f4:	14 c0       	rjmp	.+40     	; 0x81e <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     7f6:	46 2f       	mov	r20, r22
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	2c 2f       	mov	r18, r28
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	24 1b       	sub	r18, r20
     800:	35 0b       	sbc	r19, r21
     802:	64 e6       	ldi	r22, 0x64	; 100
     804:	62 9f       	mul	r22, r18
     806:	c0 01       	movw	r24, r0
     808:	63 9f       	mul	r22, r19
     80a:	90 0d       	add	r25, r0
     80c:	11 24       	eor	r1, r1
     80e:	6f ef       	ldi	r22, 0xFF	; 255
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	64 1b       	sub	r22, r20
     814:	75 0b       	sbc	r23, r21
     816:	0e 94 cc 09 	call	0x1398	; 0x1398 <__divmodhi4>
     81a:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     81e:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <joystickOffsetY>
     822:	e2 17       	cp	r30, r18
     824:	88 f4       	brcc	.+34     	; 0x848 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     826:	62 2f       	mov	r22, r18
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	4e 2f       	mov	r20, r30
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	46 1b       	sub	r20, r22
     830:	57 0b       	sbc	r21, r23
     832:	24 e6       	ldi	r18, 0x64	; 100
     834:	24 9f       	mul	r18, r20
     836:	c0 01       	movw	r24, r0
     838:	25 9f       	mul	r18, r21
     83a:	90 0d       	add	r25, r0
     83c:	11 24       	eor	r1, r1
     83e:	0e 94 cc 09 	call	0x1398	; 0x1398 <__divmodhi4>
     842:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <__data_end+0x1>
     846:	13 c0       	rjmp	.+38     	; 0x86e <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	4e 2f       	mov	r20, r30
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	42 1b       	sub	r20, r18
     850:	53 0b       	sbc	r21, r19
     852:	64 e6       	ldi	r22, 0x64	; 100
     854:	64 9f       	mul	r22, r20
     856:	c0 01       	movw	r24, r0
     858:	65 9f       	mul	r22, r21
     85a:	90 0d       	add	r25, r0
     85c:	11 24       	eor	r1, r1
     85e:	6f ef       	ldi	r22, 0xFF	; 255
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	62 1b       	sub	r22, r18
     864:	73 0b       	sbc	r23, r19
     866:	0e 94 cc 09 	call	0x1398	; 0x1398 <__divmodhi4>
     86a:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     86e:	ce ee       	ldi	r28, 0xEE	; 238
     870:	d2 e0       	ldi	r29, 0x02	; 2
     872:	68 81       	ld	r22, Y
     874:	06 2e       	mov	r0, r22
     876:	00 0c       	add	r0, r0
     878:	77 0b       	sbc	r23, r23
     87a:	88 0b       	sbc	r24, r24
     87c:	99 0b       	sbc	r25, r25
     87e:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
     882:	6b 01       	movw	r12, r22
     884:	7c 01       	movw	r14, r24
     886:	69 81       	ldd	r22, Y+1	; 0x01
     888:	06 2e       	mov	r0, r22
     88a:	00 0c       	add	r0, r0
     88c:	77 0b       	sbc	r23, r23
     88e:	88 0b       	sbc	r24, r24
     890:	99 0b       	sbc	r25, r25
     892:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
     896:	a7 01       	movw	r20, r14
     898:	96 01       	movw	r18, r12
     89a:	0e 94 2a 07 	call	0xe54	; 0xe54 <atan2>
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	44 eb       	ldi	r20, 0xB4	; 180
     8a4:	53 e4       	ldi	r21, 0x43	; 67
     8a6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	5f e3       	ldi	r21, 0x3F	; 63
     8b2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3>
     8b6:	23 ec       	ldi	r18, 0xC3	; 195
     8b8:	35 ef       	ldi	r19, 0xF5	; 245
     8ba:	48 e4       	ldi	r20, 0x48	; 72
     8bc:	50 e4       	ldi	r21, 0x40	; 64
     8be:	0e 94 89 07 	call	0xf12	; 0xf12 <__divsf3>
     8c2:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fixsfsi>
     8c6:	7b 83       	std	Y+3, r23	; 0x03
     8c8:	6a 83       	std	Y+2, r22	; 0x02
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	08 95       	ret

000008d8 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     8d8:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     8da:	80 81       	ld	r24, Z
     8dc:	94 e0       	ldi	r25, 0x04	; 4
     8de:	98 0f       	add	r25, r24
     8e0:	99 30       	cpi	r25, 0x09	; 9
     8e2:	20 f4       	brcc	.+8      	; 0x8ec <joystick_getDirection+0x14>
     8e4:	91 81       	ldd	r25, Z+1	; 0x01
     8e6:	9c 5f       	subi	r25, 0xFC	; 252
     8e8:	99 30       	cpi	r25, 0x09	; 9
     8ea:	90 f0       	brcs	.+36     	; 0x910 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     8ec:	85 30       	cpi	r24, 0x05	; 5
     8ee:	2c f0       	brlt	.+10     	; 0x8fa <joystick_getDirection+0x22>
     8f0:	81 81       	ldd	r24, Z+1	; 0x01
     8f2:	8f 5c       	subi	r24, 0xCF	; 207
     8f4:	83 36       	cpi	r24, 0x63	; 99
     8f6:	38 f4       	brcc	.+14     	; 0x906 <joystick_getDirection+0x2e>
     8f8:	0d c0       	rjmp	.+26     	; 0x914 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     8fa:	8c 3f       	cpi	r24, 0xFC	; 252
     8fc:	24 f4       	brge	.+8      	; 0x906 <joystick_getDirection+0x2e>
     8fe:	81 81       	ldd	r24, Z+1	; 0x01
     900:	8f 5c       	subi	r24, 0xCF	; 207
     902:	83 36       	cpi	r24, 0x63	; 99
     904:	48 f0       	brcs	.+18     	; 0x918 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     906:	81 81       	ldd	r24, Z+1	; 0x01
     908:	8c 3f       	cpi	r24, 0xFC	; 252
     90a:	44 f0       	brlt	.+16     	; 0x91c <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     910:	84 e0       	ldi	r24, 0x04	; 4
     912:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     91c:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     91e:	08 95       	ret

00000920 <mainMenuInit>:
#include <avr/interrupt.h>



MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     920:	8f e1       	ldi	r24, 0x1F	; 31
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 16 0a 	call	0x142c	; 0x142c <malloc>
	ptr->numChildren = 0;
     928:	fc 01       	movw	r30, r24
     92a:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     92c:	2a e0       	ldi	r18, 0x0A	; 10
     92e:	eb e8       	ldi	r30, 0x8B	; 139
     930:	f2 e0       	ldi	r31, 0x02	; 2
     932:	dc 01       	movw	r26, r24
     934:	01 90       	ld	r0, Z+
     936:	0d 92       	st	X+, r0
     938:	2a 95       	dec	r18
     93a:	e1 f7       	brne	.-8      	; 0x934 <mainMenuInit+0x14>
	ptr->parent = NULL;
     93c:	fc 01       	movw	r30, r24
     93e:	11 8a       	std	Z+17, r1	; 0x11
     940:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     942:	08 95       	ret

00000944 <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	7c 01       	movw	r14, r24
     954:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     956:	8f e1       	ldi	r24, 0x1F	; 31
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 16 0a 	call	0x142c	; 0x142c <malloc>
     95e:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     960:	d7 01       	movw	r26, r14
     962:	5e 96       	adiw	r26, 0x1e	; 30
     964:	ec 91       	ld	r30, X
     966:	5e 97       	sbiw	r26, 0x1e	; 30
     968:	c1 e0       	ldi	r28, 0x01	; 1
     96a:	ce 0f       	add	r28, r30
     96c:	5e 96       	adiw	r26, 0x1e	; 30
     96e:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     970:	b6 01       	movw	r22, r12
     972:	0e 94 40 0b 	call	0x1680	; 0x1680 <strcpy>
	childPtr->parent = parent;
     976:	f8 01       	movw	r30, r16
     978:	f1 8a       	std	Z+17, r15	; 0x11
     97a:	e0 8a       	std	Z+16, r14	; 0x10
	//printf("Added child: %s\n\r", childPtr->name);

	if (parent->numChildren > MAXCHILDREN) {
     97c:	c7 30       	cpi	r28, 0x07	; 7
     97e:	58 f0       	brcs	.+22     	; 0x996 <addChild+0x52>
		printf("REached max: \n\r");
     980:	85 e9       	ldi	r24, 0x95	; 149
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	0e 94 92 0b 	call	0x1724	; 0x1724 <printf>
		return NULL;
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e c0       	rjmp	.+28     	; 0x9b2 <addChild+0x6e>
	} 
	parent->children[parent->numChildren-1]=childPtr;
     996:	ec 2f       	mov	r30, r28
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	38 96       	adiw	r30, 0x08	; 8
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	ee 0d       	add	r30, r14
     9a2:	ff 1d       	adc	r31, r15
     9a4:	11 83       	std	Z+1, r17	; 0x01
     9a6:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     9a8:	d8 01       	movw	r26, r16
     9aa:	5e 96       	adiw	r26, 0x1e	; 30
     9ac:	1c 92       	st	X, r1
	return childPtr;
     9ae:	80 2f       	mov	r24, r16
     9b0:	91 2f       	mov	r25, r17
}
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
     9c0:	08 95       	ret

000009c2 <menuInit>:

MenuNode* menuInit(void)
{
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     9ce:	0e 94 90 04 	call	0x920	; 0x920 <mainMenuInit>
     9d2:	8c 01       	movw	r16, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     9d4:	65 ea       	ldi	r22, 0xA5	; 165
     9d6:	72 e0       	ldi	r23, 0x02	; 2
     9d8:	0e 94 a2 04 	call	0x944	; 0x944 <addChild>
     9dc:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     9de:	6f ea       	ldi	r22, 0xAF	; 175
     9e0:	72 e0       	ldi	r23, 0x02	; 2
     9e2:	0e 94 a2 04 	call	0x944	; 0x944 <addChild>
	addChild(childPlayGame,"GAME 2");
     9e6:	66 eb       	ldi	r22, 0xB6	; 182
     9e8:	72 e0       	ldi	r23, 0x02	; 2
     9ea:	ce 01       	movw	r24, r28
     9ec:	0e 94 a2 04 	call	0x944	; 0x944 <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     9f0:	6d eb       	ldi	r22, 0xBD	; 189
     9f2:	72 e0       	ldi	r23, 0x02	; 2
     9f4:	c8 01       	movw	r24, r16
     9f6:	0e 94 a2 04 	call	0x944	; 0x944 <addChild>
     9fa:	7c 01       	movw	r14, r24
     9fc:	c5 e0       	ldi	r28, 0x05	; 5
     9fe:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     a00:	67 ec       	ldi	r22, 0xC7	; 199
     a02:	72 e0       	ldi	r23, 0x02	; 2
     a04:	c7 01       	movw	r24, r14
     a06:	0e 94 a2 04 	call	0x944	; 0x944 <addChild>
     a0a:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     a0c:	c9 f7       	brne	.-14     	; 0xa00 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	//MenuNode* childSettings = addChild(mainMenu,"Settings");
	
	MenuNode* childMusic = addChild(mainMenu,"Music");
     a0e:	6f ec       	ldi	r22, 0xCF	; 207
     a10:	72 e0       	ldi	r23, 0x02	; 2
     a12:	c8 01       	movw	r24, r16
     a14:	0e 94 a2 04 	call	0x944	; 0x944 <addChild>
	addChild(childMusic, "Rick");
     a18:	6e eb       	ldi	r22, 0xBE	; 190
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	0e 94 a2 04 	call	0x944	; 0x944 <addChild>
	
	
	//addChild(childSettings, "No sett");
	
	
	printf("Number of children: %i\n\r",mainMenu->numChildren);
     a20:	f8 01       	movw	r30, r16
     a22:	86 8d       	ldd	r24, Z+30	; 0x1e
     a24:	1f 92       	push	r1
     a26:	8f 93       	push	r24
     a28:	85 ed       	ldi	r24, 0xD5	; 213
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	9f 93       	push	r25
     a2e:	8f 93       	push	r24
     a30:	0e 94 92 0b 	call	0x1724	; 0x1724 <printf>
	/*
	MenuNode* childSettings = addChild(mainMenu,"Settings");
	addChild(childSettings, "No sett");
	printf("Number of children: %i\n\r",childSettings->numChildren);
	*/
	currentMenu.currentMenuItem = mainMenu;
     a34:	e2 ef       	ldi	r30, 0xF2	; 242
     a36:	f2 e0       	ldi	r31, 0x02	; 2
     a38:	11 83       	std	Z+1, r17	; 0x01
     a3a:	00 83       	st	Z, r16
	currentMenu.childIndex = 0;
     a3c:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	83 83       	std	Z+3, r24	; 0x03
	
	return mainMenu;
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
}
     a4a:	c8 01       	movw	r24, r16
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	08 95       	ret

00000a5a <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     a5a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     a5e:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <currentMenu+0x3>
     a62:	94 30       	cpi	r25, 0x04	; 4
     a64:	09 f0       	breq	.+2      	; 0xa68 <navigateMenu+0xe>
     a66:	58 c0       	rjmp	.+176    	; 0xb18 <navigateMenu+0xbe>
			switch (dir) {
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	e1 f1       	breq	.+120    	; 0xae4 <navigateMenu+0x8a>
     a6c:	60 f1       	brcs	.+88     	; 0xac6 <navigateMenu+0x6c>
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	c9 f0       	breq	.+50     	; 0xaa4 <navigateMenu+0x4a>
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	09 f0       	breq	.+2      	; 0xa78 <navigateMenu+0x1e>
     a76:	50 c0       	rjmp	.+160    	; 0xb18 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     a78:	e2 ef       	ldi	r30, 0xF2	; 242
     a7a:	f2 e0       	ldi	r31, 0x02	; 2
     a7c:	92 81       	ldd	r25, Z+2	; 0x02
     a7e:	49 2f       	mov	r20, r25
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	01 90       	ld	r0, Z+
     a84:	f0 81       	ld	r31, Z
     a86:	e0 2d       	mov	r30, r0
     a88:	26 8d       	ldd	r18, Z+30	; 0x1e
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	21 50       	subi	r18, 0x01	; 1
     a8e:	31 09       	sbc	r19, r1
     a90:	42 17       	cp	r20, r18
     a92:	53 07       	cpc	r21, r19
     a94:	24 f4       	brge	.+8      	; 0xa9e <navigateMenu+0x44>
					currentMenu.childIndex++;
     a96:	9f 5f       	subi	r25, 0xFF	; 255
     a98:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <currentMenu+0x2>
     a9c:	3d c0       	rjmp	.+122    	; 0xb18 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     a9e:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <currentMenu+0x2>
     aa2:	3a c0       	rjmp	.+116    	; 0xb18 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     aa4:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <currentMenu+0x2>
     aa8:	99 23       	and	r25, r25
     aaa:	21 f0       	breq	.+8      	; 0xab4 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     aac:	91 50       	subi	r25, 0x01	; 1
     aae:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <currentMenu+0x2>
     ab2:	32 c0       	rjmp	.+100    	; 0xb18 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     ab4:	e2 ef       	ldi	r30, 0xF2	; 242
     ab6:	f2 e0       	ldi	r31, 0x02	; 2
     ab8:	a0 81       	ld	r26, Z
     aba:	b1 81       	ldd	r27, Z+1	; 0x01
     abc:	5e 96       	adiw	r26, 0x1e	; 30
     abe:	9c 91       	ld	r25, X
     ac0:	91 50       	subi	r25, 0x01	; 1
     ac2:	92 83       	std	Z+2, r25	; 0x02
     ac4:	29 c0       	rjmp	.+82     	; 0xb18 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     ac6:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <currentMenu>
     aca:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <currentMenu+0x1>
     ace:	20 89       	ldd	r18, Z+16	; 0x10
     ad0:	31 89       	ldd	r19, Z+17	; 0x11
     ad2:	21 15       	cp	r18, r1
     ad4:	31 05       	cpc	r19, r1
     ad6:	01 f1       	breq	.+64     	; 0xb18 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     ad8:	e2 ef       	ldi	r30, 0xF2	; 242
     ada:	f2 e0       	ldi	r31, 0x02	; 2
     adc:	31 83       	std	Z+1, r19	; 0x01
     ade:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     ae0:	12 82       	std	Z+2, r1	; 0x02
     ae2:	1a c0       	rjmp	.+52     	; 0xb18 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     ae4:	a2 ef       	ldi	r26, 0xF2	; 242
     ae6:	b2 e0       	ldi	r27, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	11 97       	sbiw	r26, 0x01	; 1
     aee:	12 96       	adiw	r26, 0x02	; 2
     af0:	9c 91       	ld	r25, X
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	e9 2f       	mov	r30, r25
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	39 96       	adiw	r30, 0x09	; 9
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	e2 0f       	add	r30, r18
     b00:	f3 1f       	adc	r31, r19
     b02:	01 90       	ld	r0, Z+
     b04:	f0 81       	ld	r31, Z
     b06:	e0 2d       	mov	r30, r0
     b08:	96 8d       	ldd	r25, Z+30	; 0x1e
     b0a:	99 23       	and	r25, r25
     b0c:	29 f0       	breq	.+10     	; 0xb18 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     b0e:	11 96       	adiw	r26, 0x01	; 1
     b10:	fc 93       	st	X, r31
     b12:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     b14:	12 96       	adiw	r26, 0x02	; 2
     b16:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     b18:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <currentMenu+0x3>
     b1c:	08 95       	ret

00000b1e <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
	oled_reset();
     b26:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <oled_reset>
	oled_home();
     b2a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     b2e:	c2 ef       	ldi	r28, 0xF2	; 242
     b30:	d2 e0       	ldi	r29, 0x02	; 2
     b32:	88 81       	ld	r24, Y
     b34:	99 81       	ldd	r25, Y+1	; 0x01
     b36:	0e 94 35 06 	call	0xc6a	; 0xc6a <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     b3a:	e8 81       	ld	r30, Y
     b3c:	f9 81       	ldd	r31, Y+1	; 0x01
     b3e:	86 8d       	ldd	r24, Z+30	; 0x1e
     b40:	88 23       	and	r24, r24
     b42:	31 f1       	breq	.+76     	; 0xb90 <menu_printCurrentMenu+0x72>
     b44:	c0 e0       	ldi	r28, 0x00	; 0
     b46:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     b48:	02 ef       	ldi	r16, 0xF2	; 242
     b4a:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     b4c:	ce 01       	movw	r24, r28
     b4e:	02 96       	adiw	r24, 0x02	; 2
     b50:	0e 94 31 06 	call	0xc62	; 0xc62 <oled_gotoLine>
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     b54:	d8 01       	movw	r26, r16
     b56:	8d 91       	ld	r24, X+
     b58:	9c 91       	ld	r25, X
     b5a:	fe 01       	movw	r30, r28
     b5c:	39 96       	adiw	r30, 0x09	; 9
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	e8 0f       	add	r30, r24
     b64:	f9 1f       	adc	r31, r25
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	0e 94 35 06 	call	0xc6a	; 0xc6a <oled_print>
		if (currentMenu.childIndex == i) {
     b6e:	f8 01       	movw	r30, r16
     b70:	82 81       	ldd	r24, Z+2	; 0x02
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	8c 17       	cp	r24, r28
     b76:	9d 07       	cpc	r25, r29
     b78:	11 f4       	brne	.+4      	; 0xb7e <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     b7a:	0e 94 ef 05 	call	0xbde	; 0xbde <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     b7e:	21 96       	adiw	r28, 0x01	; 1
     b80:	d8 01       	movw	r26, r16
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	86 8d       	ldd	r24, Z+30	; 0x1e
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	c8 17       	cp	r28, r24
     b8c:	d9 07       	cpc	r29, r25
     b8e:	f4 f2       	brlt	.-68     	; 0xb4c <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	08 95       	ret

00000b9a <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     b9a:	80 55       	subi	r24, 0x50	; 80
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f0 e1       	ldi	r31, 0x10	; 16
     ba0:	80 83       	st	Z, r24
     ba2:	86 2f       	mov	r24, r22
     ba4:	8f 70       	andi	r24, 0x0F	; 15
     ba6:	80 83       	st	Z, r24
     ba8:	62 95       	swap	r22
     baa:	6f 70       	andi	r22, 0x0F	; 15
     bac:	60 61       	ori	r22, 0x10	; 16
     bae:	60 83       	st	Z, r22
     bb0:	08 95       	ret

00000bb2 <oled_reset>:
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	d2 e1       	ldi	r29, 0x12	; 18
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	81 2f       	mov	r24, r17
     bc2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <oled_pos>
     bc6:	80 e8       	ldi	r24, 0x80	; 128
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	18 82       	st	Y, r1
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	e9 f7       	brne	.-6      	; 0xbca <oled_reset+0x18>
     bd0:	1f 5f       	subi	r17, 0xFF	; 255
     bd2:	18 30       	cpi	r17, 0x08	; 8
     bd4:	a1 f7       	brne	.-24     	; 0xbbe <oled_reset+0xc>
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	08 95       	ret

00000bde <oled_print_arrow>:
     bde:	e0 e0       	ldi	r30, 0x00	; 0
     be0:	f2 e1       	ldi	r31, 0x12	; 18
     be2:	88 e1       	ldi	r24, 0x18	; 24
     be4:	80 83       	st	Z, r24
     be6:	9c e3       	ldi	r25, 0x3C	; 60
     be8:	90 83       	st	Z, r25
     bea:	9e e7       	ldi	r25, 0x7E	; 126
     bec:	90 83       	st	Z, r25
     bee:	80 83       	st	Z, r24
     bf0:	80 83       	st	Z, r24
     bf2:	08 95       	ret

00000bf4 <oled_home>:
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <oled_pos>
     bfc:	08 95       	ret

00000bfe <oled_init>:
     bfe:	e0 e0       	ldi	r30, 0x00	; 0
     c00:	f0 e1       	ldi	r31, 0x10	; 16
     c02:	8e ea       	ldi	r24, 0xAE	; 174
     c04:	80 83       	st	Z, r24
     c06:	81 ea       	ldi	r24, 0xA1	; 161
     c08:	80 83       	st	Z, r24
     c0a:	8a ed       	ldi	r24, 0xDA	; 218
     c0c:	80 83       	st	Z, r24
     c0e:	82 e1       	ldi	r24, 0x12	; 18
     c10:	80 83       	st	Z, r24
     c12:	88 ec       	ldi	r24, 0xC8	; 200
     c14:	80 83       	st	Z, r24
     c16:	88 ea       	ldi	r24, 0xA8	; 168
     c18:	80 83       	st	Z, r24
     c1a:	8f e3       	ldi	r24, 0x3F	; 63
     c1c:	80 83       	st	Z, r24
     c1e:	85 ed       	ldi	r24, 0xD5	; 213
     c20:	80 83       	st	Z, r24
     c22:	80 e8       	ldi	r24, 0x80	; 128
     c24:	80 83       	st	Z, r24
     c26:	81 e8       	ldi	r24, 0x81	; 129
     c28:	80 83       	st	Z, r24
     c2a:	80 e5       	ldi	r24, 0x50	; 80
     c2c:	80 83       	st	Z, r24
     c2e:	89 ed       	ldi	r24, 0xD9	; 217
     c30:	80 83       	st	Z, r24
     c32:	81 e2       	ldi	r24, 0x21	; 33
     c34:	80 83       	st	Z, r24
     c36:	80 e2       	ldi	r24, 0x20	; 32
     c38:	80 83       	st	Z, r24
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	80 83       	st	Z, r24
     c3e:	8b ed       	ldi	r24, 0xDB	; 219
     c40:	80 83       	st	Z, r24
     c42:	80 e3       	ldi	r24, 0x30	; 48
     c44:	80 83       	st	Z, r24
     c46:	8d ea       	ldi	r24, 0xAD	; 173
     c48:	80 83       	st	Z, r24
     c4a:	10 82       	st	Z, r1
     c4c:	84 ea       	ldi	r24, 0xA4	; 164
     c4e:	80 83       	st	Z, r24
     c50:	86 ea       	ldi	r24, 0xA6	; 166
     c52:	80 83       	st	Z, r24
     c54:	8f ea       	ldi	r24, 0xAF	; 175
     c56:	80 83       	st	Z, r24
     c58:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <oled_reset>
     c5c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <oled_home>
     c60:	08 95       	ret

00000c62 <oled_gotoLine>:
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	0e 94 cd 05 	call	0xb9a	; 0xb9a <oled_pos>
     c68:	08 95       	ret

00000c6a <oled_print>:

void oled_print(char* character){
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	dc 01       	movw	r26, r24
	while (*character != '\0')
     c70:	8c 91       	ld	r24, X
     c72:	81 11       	cpse	r24, r1
     c74:	1a c0       	rjmp	.+52     	; 0xcaa <oled_print+0x40>
     c76:	1e c0       	rjmp	.+60     	; 0xcb4 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     c78:	ec 91       	ld	r30, X
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	b0 97       	sbiw	r30, 0x20	; 32
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	e2 0f       	add	r30, r18
     c8c:	f3 1f       	adc	r31, r19
     c8e:	e7 5d       	subi	r30, 0xD7	; 215
     c90:	fd 4f       	sbci	r31, 0xFD	; 253
     c92:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     c94:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     c96:	2f 5f       	subi	r18, 0xFF	; 255
     c98:	3f 4f       	sbci	r19, 0xFF	; 255
     c9a:	28 30       	cpi	r18, 0x08	; 8
     c9c:	31 05       	cpc	r19, r1
     c9e:	61 f7       	brne	.-40     	; 0xc78 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     ca0:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     ca2:	8c 91       	ld	r24, X
     ca4:	81 11       	cpse	r24, r1
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <oled_print+0x44>
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     caa:	c0 e0       	ldi	r28, 0x00	; 0
     cac:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	e2 cf       	rjmp	.-60     	; 0xc78 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "SPI.h"

	void setupInit(void){
	xmem_init();
     cba:	0e 94 10 07 	call	0xe20	; 0xe20 <xmem_init>
	USART_init(MYUBRR);
     cbe:	8f e1       	ldi	r24, 0x1F	; 31
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <USART_init>
	adcInit();
     cc6:	0e 94 b0 02 	call	0x560	; 0x560 <adcInit>
	joystickInit();
     cca:	0e 94 ce 03 	call	0x79c	; 0x79c <joystickInit>
	touchButton_init();
     cce:	0e 94 d2 06 	call	0xda4	; 0xda4 <touchButton_init>
	oled_init();
     cd2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_init>
	timer_init();
     cd6:	0e 94 c2 06 	call	0xd84	; 0xd84 <timer_init>
	sleep_init();
     cda:	0e 94 ab 03 	call	0x756	; 0x756 <sleep_init>
	menuInit();
     cde:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <menuInit>
	SPI_MasterInit();
     ce2:	0e 94 83 06 	call	0xd06	; 0xd06 <SPI_MasterInit>
     ce6:	08 95       	ret

00000ce8 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     cf2:	c8 ef       	ldi	r28, 0xF8	; 248
     cf4:	d2 e0       	ldi	r29, 0x02	; 2
     cf6:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	0e 94 b2 02 	call	0x564	; 0x564 <readAdc>
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	//select slave output
	DDRB = (1 << PB4);
     d06:	80 e1       	ldi	r24, 0x10	; 16
     d08:	87 bb       	out	0x17, r24	; 23
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5) | (1 << PB7);
     d0a:	80 ea       	ldi	r24, 0xA0	; 160
     d0c:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     d0e:	81 e5       	ldi	r24, 0x51	; 81
     d10:	8d b9       	out	0x0d, r24	; 13
     d12:	08 95       	ret

00000d14 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
	cli();
     d36:	f8 94       	cli
	TCNT1 = 0x00;
     d38:	1d bc       	out	0x2d, r1	; 45
     d3a:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     d3c:	8e ee       	ldi	r24, 0xEE	; 238
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     d44:	88 ef       	ldi	r24, 0xF8	; 248
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	0e 94 74 06 	call	0xce8	; 0xce8 <slider_readPosition>
	touchButton_readButtons(&buttons);
     d4c:	86 ef       	ldi	r24, 0xF6	; 246
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <touchButton_readButtons>
	navigateMenu(&joystick_pos);
     d54:	8e ee       	ldi	r24, 0xEE	; 238
     d56:	92 e0       	ldi	r25, 0x02	; 2
     d58:	0e 94 2d 05 	call	0xa5a	; 0xa5a <navigateMenu>
	menu_printCurrentMenu();
     d5c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <menu_printCurrentMenu>
	sei();
     d60:	78 94       	sei
}
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	bf 91       	pop	r27
     d68:	af 91       	pop	r26
     d6a:	9f 91       	pop	r25
     d6c:	8f 91       	pop	r24
     d6e:	7f 91       	pop	r23
     d70:	6f 91       	pop	r22
     d72:	5f 91       	pop	r21
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <timer_init>:
}

*/
void timer_init() {
	//Disable global interrupts
	cli();
     d84:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     d86:	89 b7       	in	r24, 0x39	; 57
     d88:	80 62       	ori	r24, 0x20	; 32
     d8a:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     d8c:	1d bc       	out	0x2d, r1	; 45
     d8e:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     d90:	80 e3       	ldi	r24, 0x30	; 48
     d92:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     d94:	85 e0       	ldi	r24, 0x05	; 5
     d96:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     d98:	80 ef       	ldi	r24, 0xF0	; 240
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	99 bd       	out	0x29, r25	; 41
     d9e:	88 bd       	out	0x28, r24	; 40
	
	OCR0 = TIMER0_RESET;
	*/
	
	//Enable global interrupts
	sei();
     da0:	78 94       	sei
     da2:	08 95       	ret

00000da4 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     da4:	36 b3       	in	r19, 0x16	; 22
     da6:	26 b3       	in	r18, 0x16	; 22
     da8:	47 b3       	in	r20, 0x17	; 23
     daa:	32 70       	andi	r19, 0x02	; 2
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	bc 01       	movw	r22, r24
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <touchButton_init+0x14>
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	3a 95       	dec	r19
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <touchButton_init+0x10>
     dbc:	24 70       	andi	r18, 0x04	; 4
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <touchButton_init+0x20>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	2a 95       	dec	r18
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <touchButton_init+0x1c>
     dc8:	86 2b       	or	r24, r22
     dca:	97 2b       	or	r25, r23
     dcc:	80 95       	com	r24
     dce:	90 95       	com	r25
     dd0:	84 23       	and	r24, r20
     dd2:	87 bb       	out	0x17, r24	; 23
     dd4:	08 95       	ret

00000dd6 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     dd6:	86 b3       	in	r24, 0x16	; 22
     dd8:	e6 ef       	ldi	r30, 0xF6	; 246
     dda:	f2 e0       	ldi	r31, 0x02	; 2
     ddc:	86 95       	lsr	r24
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     de2:	86 b3       	in	r24, 0x16	; 22
     de4:	82 fb       	bst	r24, 2
     de6:	88 27       	eor	r24, r24
     de8:	80 f9       	bld	r24, 0
     dea:	81 83       	std	Z+1, r24	; 0x01
     dec:	08 95       	ret

00000dee <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     dee:	5d 9b       	sbis	0x0b, 5	; 11
     df0:	fe cf       	rjmp	.-4      	; 0xdee <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     df2:	8c b9       	out	0x0c, r24	; 12
     df4:	08 95       	ret

00000df6 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     df6:	5f 9b       	sbis	0x0b, 7	; 11
     df8:	fe cf       	rjmp	.-4      	; 0xdf6 <USART_receiveChar>
		;
	
	return UDR0;
     dfa:	8c b1       	in	r24, 0x0c	; 12
     dfc:	08 95       	ret

00000dfe <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     dfe:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     e00:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     e02:	88 e1       	ldi	r24, 0x18	; 24
     e04:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     e06:	8e e8       	ldi	r24, 0x8E	; 142
     e08:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     e0a:	6b ef       	ldi	r22, 0xFB	; 251
     e0c:	76 e0       	ldi	r23, 0x06	; 6
     e0e:	87 ef       	ldi	r24, 0xF7	; 247
     e10:	96 e0       	ldi	r25, 0x06	; 6
     e12:	0e 94 47 0b 	call	0x168e	; 0x168e <fdevopen>
     e16:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <uart+0x1>
     e1a:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <uart>
     e1e:	08 95       	ret

00000e20 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     e20:	85 b7       	in	r24, 0x35	; 53
     e22:	80 68       	ori	r24, 0x80	; 128
     e24:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     e26:	80 b7       	in	r24, 0x30	; 48
     e28:	88 60       	ori	r24, 0x08	; 8
     e2a:	80 bf       	out	0x30, r24	; 48
     e2c:	08 95       	ret
     e2e:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_pscA>
     e32:	60 f0       	brcs	.+24     	; 0xe4c <xmem_init+0x2c>
     e34:	80 e8       	ldi	r24, 0x80	; 128
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	09 f4       	brne	.+2      	; 0xe3c <xmem_init+0x1c>
     e3a:	9e ef       	ldi	r25, 0xFE	; 254
     e3c:	0e 94 a5 08 	call	0x114a	; 0x114a <__fp_pscB>
     e40:	28 f0       	brcs	.+10     	; 0xe4c <xmem_init+0x2c>
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	51 e0       	ldi	r21, 0x01	; 1
     e46:	71 f4       	brne	.+28     	; 0xe64 <atan2+0x10>
     e48:	5e ef       	ldi	r21, 0xFE	; 254
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <atan2+0x10>
     e4c:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>
     e50:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_zero>

00000e54 <atan2>:
     e54:	e9 2f       	mov	r30, r25
     e56:	e0 78       	andi	r30, 0x80	; 128
     e58:	0e 94 bd 08 	call	0x117a	; 0x117a <__fp_split3>
     e5c:	40 f3       	brcs	.-48     	; 0xe2e <xmem_init+0xe>
     e5e:	09 2e       	mov	r0, r25
     e60:	05 2a       	or	r0, r21
     e62:	b1 f3       	breq	.-20     	; 0xe50 <xmem_init+0x30>
     e64:	26 17       	cp	r18, r22
     e66:	37 07       	cpc	r19, r23
     e68:	48 07       	cpc	r20, r24
     e6a:	59 07       	cpc	r21, r25
     e6c:	38 f0       	brcs	.+14     	; 0xe7c <atan2+0x28>
     e6e:	0e 2e       	mov	r0, r30
     e70:	07 f8       	bld	r0, 7
     e72:	e0 25       	eor	r30, r0
     e74:	69 f0       	breq	.+26     	; 0xe90 <atan2+0x3c>
     e76:	e0 25       	eor	r30, r0
     e78:	e0 64       	ori	r30, 0x40	; 64
     e7a:	0a c0       	rjmp	.+20     	; 0xe90 <atan2+0x3c>
     e7c:	ef 63       	ori	r30, 0x3F	; 63
     e7e:	07 f8       	bld	r0, 7
     e80:	00 94       	com	r0
     e82:	07 fa       	bst	r0, 7
     e84:	db 01       	movw	r26, r22
     e86:	b9 01       	movw	r22, r18
     e88:	9d 01       	movw	r18, r26
     e8a:	dc 01       	movw	r26, r24
     e8c:	ca 01       	movw	r24, r20
     e8e:	ad 01       	movw	r20, r26
     e90:	ef 93       	push	r30
     e92:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divsf3_pse>
     e96:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_round>
     e9a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <atan>
     e9e:	5f 91       	pop	r21
     ea0:	55 23       	and	r21, r21
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <atan2+0x5e>
     ea4:	2b ed       	ldi	r18, 0xDB	; 219
     ea6:	3f e0       	ldi	r19, 0x0F	; 15
     ea8:	49 e4       	ldi	r20, 0x49	; 73
     eaa:	50 fd       	sbrc	r21, 0
     eac:	49 ec       	ldi	r20, 0xC9	; 201
     eae:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__addsf3>
     eb2:	08 95       	ret

00000eb4 <atan>:
     eb4:	df 93       	push	r29
     eb6:	dd 27       	eor	r29, r29
     eb8:	b9 2f       	mov	r27, r25
     eba:	bf 77       	andi	r27, 0x7F	; 127
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	16 16       	cp	r1, r22
     ec2:	17 06       	cpc	r1, r23
     ec4:	48 07       	cpc	r20, r24
     ec6:	5b 07       	cpc	r21, r27
     ec8:	18 f4       	brcc	.+6      	; 0xed0 <atan+0x1c>
     eca:	d9 2f       	mov	r29, r25
     ecc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <inverse>
     ed0:	9f 93       	push	r25
     ed2:	8f 93       	push	r24
     ed4:	7f 93       	push	r23
     ed6:	6f 93       	push	r22
     ed8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <square>
     edc:	e0 e7       	ldi	r30, 0x70	; 112
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_powser>
     ee4:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_round>
     ee8:	2f 91       	pop	r18
     eea:	3f 91       	pop	r19
     eec:	4f 91       	pop	r20
     eee:	5f 91       	pop	r21
     ef0:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3x>
     ef4:	dd 23       	and	r29, r29
     ef6:	51 f0       	breq	.+20     	; 0xf0c <atan+0x58>
     ef8:	90 58       	subi	r25, 0x80	; 128
     efa:	a2 ea       	ldi	r26, 0xA2	; 162
     efc:	2a ed       	ldi	r18, 0xDA	; 218
     efe:	3f e0       	ldi	r19, 0x0F	; 15
     f00:	49 ec       	ldi	r20, 0xC9	; 201
     f02:	5f e3       	ldi	r21, 0x3F	; 63
     f04:	d0 78       	andi	r29, 0x80	; 128
     f06:	5d 27       	eor	r21, r29
     f08:	0e 94 77 09 	call	0x12ee	; 0x12ee <__addsf3x>
     f0c:	df 91       	pop	r29
     f0e:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_round>

00000f12 <__divsf3>:
     f12:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__divsf3x>
     f16:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_round>
     f1a:	0e 94 a5 08 	call	0x114a	; 0x114a <__fp_pscB>
     f1e:	58 f0       	brcs	.+22     	; 0xf36 <__divsf3+0x24>
     f20:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_pscA>
     f24:	40 f0       	brcs	.+16     	; 0xf36 <__divsf3+0x24>
     f26:	29 f4       	brne	.+10     	; 0xf32 <__divsf3+0x20>
     f28:	5f 3f       	cpi	r21, 0xFF	; 255
     f2a:	29 f0       	breq	.+10     	; 0xf36 <__divsf3+0x24>
     f2c:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
     f30:	51 11       	cpse	r21, r1
     f32:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_szero>
     f36:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>

00000f3a <__divsf3x>:
     f3a:	0e 94 bd 08 	call	0x117a	; 0x117a <__fp_split3>
     f3e:	68 f3       	brcs	.-38     	; 0xf1a <__divsf3+0x8>

00000f40 <__divsf3_pse>:
     f40:	99 23       	and	r25, r25
     f42:	b1 f3       	breq	.-20     	; 0xf30 <__divsf3+0x1e>
     f44:	55 23       	and	r21, r21
     f46:	91 f3       	breq	.-28     	; 0xf2c <__divsf3+0x1a>
     f48:	95 1b       	sub	r25, r21
     f4a:	55 0b       	sbc	r21, r21
     f4c:	bb 27       	eor	r27, r27
     f4e:	aa 27       	eor	r26, r26
     f50:	62 17       	cp	r22, r18
     f52:	73 07       	cpc	r23, r19
     f54:	84 07       	cpc	r24, r20
     f56:	38 f0       	brcs	.+14     	; 0xf66 <__divsf3_pse+0x26>
     f58:	9f 5f       	subi	r25, 0xFF	; 255
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	22 0f       	add	r18, r18
     f5e:	33 1f       	adc	r19, r19
     f60:	44 1f       	adc	r20, r20
     f62:	aa 1f       	adc	r26, r26
     f64:	a9 f3       	breq	.-22     	; 0xf50 <__divsf3_pse+0x10>
     f66:	35 d0       	rcall	.+106    	; 0xfd2 <__divsf3_pse+0x92>
     f68:	0e 2e       	mov	r0, r30
     f6a:	3a f0       	brmi	.+14     	; 0xf7a <__divsf3_pse+0x3a>
     f6c:	e0 e8       	ldi	r30, 0x80	; 128
     f6e:	32 d0       	rcall	.+100    	; 0xfd4 <__divsf3_pse+0x94>
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	50 40       	sbci	r21, 0x00	; 0
     f74:	e6 95       	lsr	r30
     f76:	00 1c       	adc	r0, r0
     f78:	ca f7       	brpl	.-14     	; 0xf6c <__divsf3_pse+0x2c>
     f7a:	2b d0       	rcall	.+86     	; 0xfd2 <__divsf3_pse+0x92>
     f7c:	fe 2f       	mov	r31, r30
     f7e:	29 d0       	rcall	.+82     	; 0xfd2 <__divsf3_pse+0x92>
     f80:	66 0f       	add	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	bb 1f       	adc	r27, r27
     f88:	26 17       	cp	r18, r22
     f8a:	37 07       	cpc	r19, r23
     f8c:	48 07       	cpc	r20, r24
     f8e:	ab 07       	cpc	r26, r27
     f90:	b0 e8       	ldi	r27, 0x80	; 128
     f92:	09 f0       	breq	.+2      	; 0xf96 <__divsf3_pse+0x56>
     f94:	bb 0b       	sbc	r27, r27
     f96:	80 2d       	mov	r24, r0
     f98:	bf 01       	movw	r22, r30
     f9a:	ff 27       	eor	r31, r31
     f9c:	93 58       	subi	r25, 0x83	; 131
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255
     fa0:	3a f0       	brmi	.+14     	; 0xfb0 <__divsf3_pse+0x70>
     fa2:	9e 3f       	cpi	r25, 0xFE	; 254
     fa4:	51 05       	cpc	r21, r1
     fa6:	78 f0       	brcs	.+30     	; 0xfc6 <__divsf3_pse+0x86>
     fa8:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
     fac:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_szero>
     fb0:	5f 3f       	cpi	r21, 0xFF	; 255
     fb2:	e4 f3       	brlt	.-8      	; 0xfac <__divsf3_pse+0x6c>
     fb4:	98 3e       	cpi	r25, 0xE8	; 232
     fb6:	d4 f3       	brlt	.-12     	; 0xfac <__divsf3_pse+0x6c>
     fb8:	86 95       	lsr	r24
     fba:	77 95       	ror	r23
     fbc:	67 95       	ror	r22
     fbe:	b7 95       	ror	r27
     fc0:	f7 95       	ror	r31
     fc2:	9f 5f       	subi	r25, 0xFF	; 255
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__divsf3_pse+0x78>
     fc6:	88 0f       	add	r24, r24
     fc8:	91 1d       	adc	r25, r1
     fca:	96 95       	lsr	r25
     fcc:	87 95       	ror	r24
     fce:	97 f9       	bld	r25, 7
     fd0:	08 95       	ret
     fd2:	e1 e0       	ldi	r30, 0x01	; 1
     fd4:	66 0f       	add	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	88 1f       	adc	r24, r24
     fda:	bb 1f       	adc	r27, r27
     fdc:	62 17       	cp	r22, r18
     fde:	73 07       	cpc	r23, r19
     fe0:	84 07       	cpc	r24, r20
     fe2:	ba 07       	cpc	r27, r26
     fe4:	20 f0       	brcs	.+8      	; 0xfee <__divsf3_pse+0xae>
     fe6:	62 1b       	sub	r22, r18
     fe8:	73 0b       	sbc	r23, r19
     fea:	84 0b       	sbc	r24, r20
     fec:	ba 0b       	sbc	r27, r26
     fee:	ee 1f       	adc	r30, r30
     ff0:	88 f7       	brcc	.-30     	; 0xfd4 <__divsf3_pse+0x94>
     ff2:	e0 95       	com	r30
     ff4:	08 95       	ret

00000ff6 <__fixsfsi>:
     ff6:	0e 94 02 08 	call	0x1004	; 0x1004 <__fixunssfsi>
     ffa:	68 94       	set
     ffc:	b1 11       	cpse	r27, r1
     ffe:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_szero>
    1002:	08 95       	ret

00001004 <__fixunssfsi>:
    1004:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_splitA>
    1008:	88 f0       	brcs	.+34     	; 0x102c <__fixunssfsi+0x28>
    100a:	9f 57       	subi	r25, 0x7F	; 127
    100c:	98 f0       	brcs	.+38     	; 0x1034 <__fixunssfsi+0x30>
    100e:	b9 2f       	mov	r27, r25
    1010:	99 27       	eor	r25, r25
    1012:	b7 51       	subi	r27, 0x17	; 23
    1014:	b0 f0       	brcs	.+44     	; 0x1042 <__fixunssfsi+0x3e>
    1016:	e1 f0       	breq	.+56     	; 0x1050 <__fixunssfsi+0x4c>
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	1a f0       	brmi	.+6      	; 0x1028 <__fixunssfsi+0x24>
    1022:	ba 95       	dec	r27
    1024:	c9 f7       	brne	.-14     	; 0x1018 <__fixunssfsi+0x14>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <__fixunssfsi+0x4c>
    1028:	b1 30       	cpi	r27, 0x01	; 1
    102a:	91 f0       	breq	.+36     	; 0x1050 <__fixunssfsi+0x4c>
    102c:	0e 94 df 08 	call	0x11be	; 0x11be <__fp_zero>
    1030:	b1 e0       	ldi	r27, 0x01	; 1
    1032:	08 95       	ret
    1034:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_zero>
    1038:	67 2f       	mov	r22, r23
    103a:	78 2f       	mov	r23, r24
    103c:	88 27       	eor	r24, r24
    103e:	b8 5f       	subi	r27, 0xF8	; 248
    1040:	39 f0       	breq	.+14     	; 0x1050 <__fixunssfsi+0x4c>
    1042:	b9 3f       	cpi	r27, 0xF9	; 249
    1044:	cc f3       	brlt	.-14     	; 0x1038 <__fixunssfsi+0x34>
    1046:	86 95       	lsr	r24
    1048:	77 95       	ror	r23
    104a:	67 95       	ror	r22
    104c:	b3 95       	inc	r27
    104e:	d9 f7       	brne	.-10     	; 0x1046 <__fixunssfsi+0x42>
    1050:	3e f4       	brtc	.+14     	; 0x1060 <__fixunssfsi+0x5c>
    1052:	90 95       	com	r25
    1054:	80 95       	com	r24
    1056:	70 95       	com	r23
    1058:	61 95       	neg	r22
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	08 95       	ret

00001062 <__floatunsisf>:
    1062:	e8 94       	clt
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <__floatsisf+0x12>

00001066 <__floatsisf>:
    1066:	97 fb       	bst	r25, 7
    1068:	3e f4       	brtc	.+14     	; 0x1078 <__floatsisf+0x12>
    106a:	90 95       	com	r25
    106c:	80 95       	com	r24
    106e:	70 95       	com	r23
    1070:	61 95       	neg	r22
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	8f 4f       	sbci	r24, 0xFF	; 255
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	99 23       	and	r25, r25
    107a:	a9 f0       	breq	.+42     	; 0x10a6 <__floatsisf+0x40>
    107c:	f9 2f       	mov	r31, r25
    107e:	96 e9       	ldi	r25, 0x96	; 150
    1080:	bb 27       	eor	r27, r27
    1082:	93 95       	inc	r25
    1084:	f6 95       	lsr	r31
    1086:	87 95       	ror	r24
    1088:	77 95       	ror	r23
    108a:	67 95       	ror	r22
    108c:	b7 95       	ror	r27
    108e:	f1 11       	cpse	r31, r1
    1090:	f8 cf       	rjmp	.-16     	; 0x1082 <__floatsisf+0x1c>
    1092:	fa f4       	brpl	.+62     	; 0x10d2 <__floatsisf+0x6c>
    1094:	bb 0f       	add	r27, r27
    1096:	11 f4       	brne	.+4      	; 0x109c <__floatsisf+0x36>
    1098:	60 ff       	sbrs	r22, 0
    109a:	1b c0       	rjmp	.+54     	; 0x10d2 <__floatsisf+0x6c>
    109c:	6f 5f       	subi	r22, 0xFF	; 255
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <__floatsisf+0x6c>
    10a6:	88 23       	and	r24, r24
    10a8:	11 f0       	breq	.+4      	; 0x10ae <__floatsisf+0x48>
    10aa:	96 e9       	ldi	r25, 0x96	; 150
    10ac:	11 c0       	rjmp	.+34     	; 0x10d0 <__floatsisf+0x6a>
    10ae:	77 23       	and	r23, r23
    10b0:	21 f0       	breq	.+8      	; 0x10ba <__floatsisf+0x54>
    10b2:	9e e8       	ldi	r25, 0x8E	; 142
    10b4:	87 2f       	mov	r24, r23
    10b6:	76 2f       	mov	r23, r22
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <__floatsisf+0x5e>
    10ba:	66 23       	and	r22, r22
    10bc:	71 f0       	breq	.+28     	; 0x10da <__floatsisf+0x74>
    10be:	96 e8       	ldi	r25, 0x86	; 134
    10c0:	86 2f       	mov	r24, r22
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	2a f0       	brmi	.+10     	; 0x10d2 <__floatsisf+0x6c>
    10c8:	9a 95       	dec	r25
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	da f7       	brpl	.-10     	; 0x10c8 <__floatsisf+0x62>
    10d2:	88 0f       	add	r24, r24
    10d4:	96 95       	lsr	r25
    10d6:	87 95       	ror	r24
    10d8:	97 f9       	bld	r25, 7
    10da:	08 95       	ret

000010dc <__fp_inf>:
    10dc:	97 f9       	bld	r25, 7
    10de:	9f 67       	ori	r25, 0x7F	; 127
    10e0:	80 e8       	ldi	r24, 0x80	; 128
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	08 95       	ret

000010e8 <__fp_nan>:
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	80 ec       	ldi	r24, 0xC0	; 192
    10ec:	08 95       	ret

000010ee <__fp_powser>:
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	1f 93       	push	r17
    10f4:	0f 93       	push	r16
    10f6:	ff 92       	push	r15
    10f8:	ef 92       	push	r14
    10fa:	df 92       	push	r13
    10fc:	7b 01       	movw	r14, r22
    10fe:	8c 01       	movw	r16, r24
    1100:	68 94       	set
    1102:	06 c0       	rjmp	.+12     	; 0x1110 <__fp_powser+0x22>
    1104:	da 2e       	mov	r13, r26
    1106:	ef 01       	movw	r28, r30
    1108:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3x>
    110c:	fe 01       	movw	r30, r28
    110e:	e8 94       	clt
    1110:	a5 91       	lpm	r26, Z+
    1112:	25 91       	lpm	r18, Z+
    1114:	35 91       	lpm	r19, Z+
    1116:	45 91       	lpm	r20, Z+
    1118:	55 91       	lpm	r21, Z+
    111a:	a6 f3       	brts	.-24     	; 0x1104 <__fp_powser+0x16>
    111c:	ef 01       	movw	r28, r30
    111e:	0e 94 77 09 	call	0x12ee	; 0x12ee <__addsf3x>
    1122:	fe 01       	movw	r30, r28
    1124:	97 01       	movw	r18, r14
    1126:	a8 01       	movw	r20, r16
    1128:	da 94       	dec	r13
    112a:	69 f7       	brne	.-38     	; 0x1106 <__fp_powser+0x18>
    112c:	df 90       	pop	r13
    112e:	ef 90       	pop	r14
    1130:	ff 90       	pop	r15
    1132:	0f 91       	pop	r16
    1134:	1f 91       	pop	r17
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <__fp_pscA>:
    113c:	00 24       	eor	r0, r0
    113e:	0a 94       	dec	r0
    1140:	16 16       	cp	r1, r22
    1142:	17 06       	cpc	r1, r23
    1144:	18 06       	cpc	r1, r24
    1146:	09 06       	cpc	r0, r25
    1148:	08 95       	ret

0000114a <__fp_pscB>:
    114a:	00 24       	eor	r0, r0
    114c:	0a 94       	dec	r0
    114e:	12 16       	cp	r1, r18
    1150:	13 06       	cpc	r1, r19
    1152:	14 06       	cpc	r1, r20
    1154:	05 06       	cpc	r0, r21
    1156:	08 95       	ret

00001158 <__fp_round>:
    1158:	09 2e       	mov	r0, r25
    115a:	03 94       	inc	r0
    115c:	00 0c       	add	r0, r0
    115e:	11 f4       	brne	.+4      	; 0x1164 <__fp_round+0xc>
    1160:	88 23       	and	r24, r24
    1162:	52 f0       	brmi	.+20     	; 0x1178 <__fp_round+0x20>
    1164:	bb 0f       	add	r27, r27
    1166:	40 f4       	brcc	.+16     	; 0x1178 <__fp_round+0x20>
    1168:	bf 2b       	or	r27, r31
    116a:	11 f4       	brne	.+4      	; 0x1170 <__fp_round+0x18>
    116c:	60 ff       	sbrs	r22, 0
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <__fp_round+0x20>
    1170:	6f 5f       	subi	r22, 0xFF	; 255
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	08 95       	ret

0000117a <__fp_split3>:
    117a:	57 fd       	sbrc	r21, 7
    117c:	90 58       	subi	r25, 0x80	; 128
    117e:	44 0f       	add	r20, r20
    1180:	55 1f       	adc	r21, r21
    1182:	59 f0       	breq	.+22     	; 0x119a <__fp_splitA+0x10>
    1184:	5f 3f       	cpi	r21, 0xFF	; 255
    1186:	71 f0       	breq	.+28     	; 0x11a4 <__fp_splitA+0x1a>
    1188:	47 95       	ror	r20

0000118a <__fp_splitA>:
    118a:	88 0f       	add	r24, r24
    118c:	97 fb       	bst	r25, 7
    118e:	99 1f       	adc	r25, r25
    1190:	61 f0       	breq	.+24     	; 0x11aa <__fp_splitA+0x20>
    1192:	9f 3f       	cpi	r25, 0xFF	; 255
    1194:	79 f0       	breq	.+30     	; 0x11b4 <__fp_splitA+0x2a>
    1196:	87 95       	ror	r24
    1198:	08 95       	ret
    119a:	12 16       	cp	r1, r18
    119c:	13 06       	cpc	r1, r19
    119e:	14 06       	cpc	r1, r20
    11a0:	55 1f       	adc	r21, r21
    11a2:	f2 cf       	rjmp	.-28     	; 0x1188 <__fp_split3+0xe>
    11a4:	46 95       	lsr	r20
    11a6:	f1 df       	rcall	.-30     	; 0x118a <__fp_splitA>
    11a8:	08 c0       	rjmp	.+16     	; 0x11ba <__fp_splitA+0x30>
    11aa:	16 16       	cp	r1, r22
    11ac:	17 06       	cpc	r1, r23
    11ae:	18 06       	cpc	r1, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	f1 cf       	rjmp	.-30     	; 0x1196 <__fp_splitA+0xc>
    11b4:	86 95       	lsr	r24
    11b6:	71 05       	cpc	r23, r1
    11b8:	61 05       	cpc	r22, r1
    11ba:	08 94       	sec
    11bc:	08 95       	ret

000011be <__fp_zero>:
    11be:	e8 94       	clt

000011c0 <__fp_szero>:
    11c0:	bb 27       	eor	r27, r27
    11c2:	66 27       	eor	r22, r22
    11c4:	77 27       	eor	r23, r23
    11c6:	cb 01       	movw	r24, r22
    11c8:	97 f9       	bld	r25, 7
    11ca:	08 95       	ret

000011cc <inverse>:
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	80 e8       	ldi	r24, 0x80	; 128
    11d6:	9f e3       	ldi	r25, 0x3F	; 63
    11d8:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__divsf3>

000011dc <__mulsf3>:
    11dc:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3x>
    11e0:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_round>
    11e4:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_pscA>
    11e8:	38 f0       	brcs	.+14     	; 0x11f8 <__mulsf3+0x1c>
    11ea:	0e 94 a5 08 	call	0x114a	; 0x114a <__fp_pscB>
    11ee:	20 f0       	brcs	.+8      	; 0x11f8 <__mulsf3+0x1c>
    11f0:	95 23       	and	r25, r21
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <__mulsf3+0x1c>
    11f4:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
    11f8:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>
    11fc:	11 24       	eor	r1, r1
    11fe:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_szero>

00001202 <__mulsf3x>:
    1202:	0e 94 bd 08 	call	0x117a	; 0x117a <__fp_split3>
    1206:	70 f3       	brcs	.-36     	; 0x11e4 <__mulsf3+0x8>

00001208 <__mulsf3_pse>:
    1208:	95 9f       	mul	r25, r21
    120a:	c1 f3       	breq	.-16     	; 0x11fc <__mulsf3+0x20>
    120c:	95 0f       	add	r25, r21
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	55 1f       	adc	r21, r21
    1212:	62 9f       	mul	r22, r18
    1214:	f0 01       	movw	r30, r0
    1216:	72 9f       	mul	r23, r18
    1218:	bb 27       	eor	r27, r27
    121a:	f0 0d       	add	r31, r0
    121c:	b1 1d       	adc	r27, r1
    121e:	63 9f       	mul	r22, r19
    1220:	aa 27       	eor	r26, r26
    1222:	f0 0d       	add	r31, r0
    1224:	b1 1d       	adc	r27, r1
    1226:	aa 1f       	adc	r26, r26
    1228:	64 9f       	mul	r22, r20
    122a:	66 27       	eor	r22, r22
    122c:	b0 0d       	add	r27, r0
    122e:	a1 1d       	adc	r26, r1
    1230:	66 1f       	adc	r22, r22
    1232:	82 9f       	mul	r24, r18
    1234:	22 27       	eor	r18, r18
    1236:	b0 0d       	add	r27, r0
    1238:	a1 1d       	adc	r26, r1
    123a:	62 1f       	adc	r22, r18
    123c:	73 9f       	mul	r23, r19
    123e:	b0 0d       	add	r27, r0
    1240:	a1 1d       	adc	r26, r1
    1242:	62 1f       	adc	r22, r18
    1244:	83 9f       	mul	r24, r19
    1246:	a0 0d       	add	r26, r0
    1248:	61 1d       	adc	r22, r1
    124a:	22 1f       	adc	r18, r18
    124c:	74 9f       	mul	r23, r20
    124e:	33 27       	eor	r19, r19
    1250:	a0 0d       	add	r26, r0
    1252:	61 1d       	adc	r22, r1
    1254:	23 1f       	adc	r18, r19
    1256:	84 9f       	mul	r24, r20
    1258:	60 0d       	add	r22, r0
    125a:	21 1d       	adc	r18, r1
    125c:	82 2f       	mov	r24, r18
    125e:	76 2f       	mov	r23, r22
    1260:	6a 2f       	mov	r22, r26
    1262:	11 24       	eor	r1, r1
    1264:	9f 57       	subi	r25, 0x7F	; 127
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	9a f0       	brmi	.+38     	; 0x1290 <__mulsf3_pse+0x88>
    126a:	f1 f0       	breq	.+60     	; 0x12a8 <__mulsf3_pse+0xa0>
    126c:	88 23       	and	r24, r24
    126e:	4a f0       	brmi	.+18     	; 0x1282 <__mulsf3_pse+0x7a>
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	bb 1f       	adc	r27, r27
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	91 50       	subi	r25, 0x01	; 1
    127e:	50 40       	sbci	r21, 0x00	; 0
    1280:	a9 f7       	brne	.-22     	; 0x126c <__mulsf3_pse+0x64>
    1282:	9e 3f       	cpi	r25, 0xFE	; 254
    1284:	51 05       	cpc	r21, r1
    1286:	80 f0       	brcs	.+32     	; 0x12a8 <__mulsf3_pse+0xa0>
    1288:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
    128c:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_szero>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	e4 f3       	brlt	.-8      	; 0x128c <__mulsf3_pse+0x84>
    1294:	98 3e       	cpi	r25, 0xE8	; 232
    1296:	d4 f3       	brlt	.-12     	; 0x128c <__mulsf3_pse+0x84>
    1298:	86 95       	lsr	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	f7 95       	ror	r31
    12a2:	e7 95       	ror	r30
    12a4:	9f 5f       	subi	r25, 0xFF	; 255
    12a6:	c1 f7       	brne	.-16     	; 0x1298 <__mulsf3_pse+0x90>
    12a8:	fe 2b       	or	r31, r30
    12aa:	88 0f       	add	r24, r24
    12ac:	91 1d       	adc	r25, r1
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	97 f9       	bld	r25, 7
    12b4:	08 95       	ret

000012b6 <square>:
    12b6:	9b 01       	movw	r18, r22
    12b8:	ac 01       	movw	r20, r24
    12ba:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__mulsf3>

000012be <__subsf3>:
    12be:	50 58       	subi	r21, 0x80	; 128

000012c0 <__addsf3>:
    12c0:	bb 27       	eor	r27, r27
    12c2:	aa 27       	eor	r26, r26
    12c4:	0e 94 77 09 	call	0x12ee	; 0x12ee <__addsf3x>
    12c8:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_round>
    12cc:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_pscA>
    12d0:	38 f0       	brcs	.+14     	; 0x12e0 <__addsf3+0x20>
    12d2:	0e 94 a5 08 	call	0x114a	; 0x114a <__fp_pscB>
    12d6:	20 f0       	brcs	.+8      	; 0x12e0 <__addsf3+0x20>
    12d8:	39 f4       	brne	.+14     	; 0x12e8 <__addsf3+0x28>
    12da:	9f 3f       	cpi	r25, 0xFF	; 255
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <__addsf3+0x24>
    12de:	26 f4       	brtc	.+8      	; 0x12e8 <__addsf3+0x28>
    12e0:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>
    12e4:	0e f4       	brtc	.+2      	; 0x12e8 <__addsf3+0x28>
    12e6:	e0 95       	com	r30
    12e8:	e7 fb       	bst	r30, 7
    12ea:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>

000012ee <__addsf3x>:
    12ee:	e9 2f       	mov	r30, r25
    12f0:	0e 94 bd 08 	call	0x117a	; 0x117a <__fp_split3>
    12f4:	58 f3       	brcs	.-42     	; 0x12cc <__addsf3+0xc>
    12f6:	ba 17       	cp	r27, r26
    12f8:	62 07       	cpc	r22, r18
    12fa:	73 07       	cpc	r23, r19
    12fc:	84 07       	cpc	r24, r20
    12fe:	95 07       	cpc	r25, r21
    1300:	20 f0       	brcs	.+8      	; 0x130a <__addsf3x+0x1c>
    1302:	79 f4       	brne	.+30     	; 0x1322 <__addsf3x+0x34>
    1304:	a6 f5       	brtc	.+104    	; 0x136e <__addsf3x+0x80>
    1306:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_zero>
    130a:	0e f4       	brtc	.+2      	; 0x130e <__addsf3x+0x20>
    130c:	e0 95       	com	r30
    130e:	0b 2e       	mov	r0, r27
    1310:	ba 2f       	mov	r27, r26
    1312:	a0 2d       	mov	r26, r0
    1314:	0b 01       	movw	r0, r22
    1316:	b9 01       	movw	r22, r18
    1318:	90 01       	movw	r18, r0
    131a:	0c 01       	movw	r0, r24
    131c:	ca 01       	movw	r24, r20
    131e:	a0 01       	movw	r20, r0
    1320:	11 24       	eor	r1, r1
    1322:	ff 27       	eor	r31, r31
    1324:	59 1b       	sub	r21, r25
    1326:	99 f0       	breq	.+38     	; 0x134e <__addsf3x+0x60>
    1328:	59 3f       	cpi	r21, 0xF9	; 249
    132a:	50 f4       	brcc	.+20     	; 0x1340 <__addsf3x+0x52>
    132c:	50 3e       	cpi	r21, 0xE0	; 224
    132e:	68 f1       	brcs	.+90     	; 0x138a <__addsf3x+0x9c>
    1330:	1a 16       	cp	r1, r26
    1332:	f0 40       	sbci	r31, 0x00	; 0
    1334:	a2 2f       	mov	r26, r18
    1336:	23 2f       	mov	r18, r19
    1338:	34 2f       	mov	r19, r20
    133a:	44 27       	eor	r20, r20
    133c:	58 5f       	subi	r21, 0xF8	; 248
    133e:	f3 cf       	rjmp	.-26     	; 0x1326 <__addsf3x+0x38>
    1340:	46 95       	lsr	r20
    1342:	37 95       	ror	r19
    1344:	27 95       	ror	r18
    1346:	a7 95       	ror	r26
    1348:	f0 40       	sbci	r31, 0x00	; 0
    134a:	53 95       	inc	r21
    134c:	c9 f7       	brne	.-14     	; 0x1340 <__addsf3x+0x52>
    134e:	7e f4       	brtc	.+30     	; 0x136e <__addsf3x+0x80>
    1350:	1f 16       	cp	r1, r31
    1352:	ba 0b       	sbc	r27, r26
    1354:	62 0b       	sbc	r22, r18
    1356:	73 0b       	sbc	r23, r19
    1358:	84 0b       	sbc	r24, r20
    135a:	ba f0       	brmi	.+46     	; 0x138a <__addsf3x+0x9c>
    135c:	91 50       	subi	r25, 0x01	; 1
    135e:	a1 f0       	breq	.+40     	; 0x1388 <__addsf3x+0x9a>
    1360:	ff 0f       	add	r31, r31
    1362:	bb 1f       	adc	r27, r27
    1364:	66 1f       	adc	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	c2 f7       	brpl	.-16     	; 0x135c <__addsf3x+0x6e>
    136c:	0e c0       	rjmp	.+28     	; 0x138a <__addsf3x+0x9c>
    136e:	ba 0f       	add	r27, r26
    1370:	62 1f       	adc	r22, r18
    1372:	73 1f       	adc	r23, r19
    1374:	84 1f       	adc	r24, r20
    1376:	48 f4       	brcc	.+18     	; 0x138a <__addsf3x+0x9c>
    1378:	87 95       	ror	r24
    137a:	77 95       	ror	r23
    137c:	67 95       	ror	r22
    137e:	b7 95       	ror	r27
    1380:	f7 95       	ror	r31
    1382:	9e 3f       	cpi	r25, 0xFE	; 254
    1384:	08 f0       	brcs	.+2      	; 0x1388 <__addsf3x+0x9a>
    1386:	b0 cf       	rjmp	.-160    	; 0x12e8 <__addsf3+0x28>
    1388:	93 95       	inc	r25
    138a:	88 0f       	add	r24, r24
    138c:	08 f0       	brcs	.+2      	; 0x1390 <__addsf3x+0xa2>
    138e:	99 27       	eor	r25, r25
    1390:	ee 0f       	add	r30, r30
    1392:	97 95       	ror	r25
    1394:	87 95       	ror	r24
    1396:	08 95       	ret

00001398 <__divmodhi4>:
    1398:	97 fb       	bst	r25, 7
    139a:	07 2e       	mov	r0, r23
    139c:	16 f4       	brtc	.+4      	; 0x13a2 <__divmodhi4+0xa>
    139e:	00 94       	com	r0
    13a0:	07 d0       	rcall	.+14     	; 0x13b0 <__divmodhi4_neg1>
    13a2:	77 fd       	sbrc	r23, 7
    13a4:	09 d0       	rcall	.+18     	; 0x13b8 <__divmodhi4_neg2>
    13a6:	0e 94 02 0a 	call	0x1404	; 0x1404 <__udivmodhi4>
    13aa:	07 fc       	sbrc	r0, 7
    13ac:	05 d0       	rcall	.+10     	; 0x13b8 <__divmodhi4_neg2>
    13ae:	3e f4       	brtc	.+14     	; 0x13be <__divmodhi4_exit>

000013b0 <__divmodhi4_neg1>:
    13b0:	90 95       	com	r25
    13b2:	81 95       	neg	r24
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	08 95       	ret

000013b8 <__divmodhi4_neg2>:
    13b8:	70 95       	com	r23
    13ba:	61 95       	neg	r22
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255

000013be <__divmodhi4_exit>:
    13be:	08 95       	ret

000013c0 <__udivmodsi4>:
    13c0:	a1 e2       	ldi	r26, 0x21	; 33
    13c2:	1a 2e       	mov	r1, r26
    13c4:	aa 1b       	sub	r26, r26
    13c6:	bb 1b       	sub	r27, r27
    13c8:	fd 01       	movw	r30, r26
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <__udivmodsi4_ep>

000013cc <__udivmodsi4_loop>:
    13cc:	aa 1f       	adc	r26, r26
    13ce:	bb 1f       	adc	r27, r27
    13d0:	ee 1f       	adc	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	a2 17       	cp	r26, r18
    13d6:	b3 07       	cpc	r27, r19
    13d8:	e4 07       	cpc	r30, r20
    13da:	f5 07       	cpc	r31, r21
    13dc:	20 f0       	brcs	.+8      	; 0x13e6 <__udivmodsi4_ep>
    13de:	a2 1b       	sub	r26, r18
    13e0:	b3 0b       	sbc	r27, r19
    13e2:	e4 0b       	sbc	r30, r20
    13e4:	f5 0b       	sbc	r31, r21

000013e6 <__udivmodsi4_ep>:
    13e6:	66 1f       	adc	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	1a 94       	dec	r1
    13f0:	69 f7       	brne	.-38     	; 0x13cc <__udivmodsi4_loop>
    13f2:	60 95       	com	r22
    13f4:	70 95       	com	r23
    13f6:	80 95       	com	r24
    13f8:	90 95       	com	r25
    13fa:	9b 01       	movw	r18, r22
    13fc:	ac 01       	movw	r20, r24
    13fe:	bd 01       	movw	r22, r26
    1400:	cf 01       	movw	r24, r30
    1402:	08 95       	ret

00001404 <__udivmodhi4>:
    1404:	aa 1b       	sub	r26, r26
    1406:	bb 1b       	sub	r27, r27
    1408:	51 e1       	ldi	r21, 0x11	; 17
    140a:	07 c0       	rjmp	.+14     	; 0x141a <__udivmodhi4_ep>

0000140c <__udivmodhi4_loop>:
    140c:	aa 1f       	adc	r26, r26
    140e:	bb 1f       	adc	r27, r27
    1410:	a6 17       	cp	r26, r22
    1412:	b7 07       	cpc	r27, r23
    1414:	10 f0       	brcs	.+4      	; 0x141a <__udivmodhi4_ep>
    1416:	a6 1b       	sub	r26, r22
    1418:	b7 0b       	sbc	r27, r23

0000141a <__udivmodhi4_ep>:
    141a:	88 1f       	adc	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	5a 95       	dec	r21
    1420:	a9 f7       	brne	.-22     	; 0x140c <__udivmodhi4_loop>
    1422:	80 95       	com	r24
    1424:	90 95       	com	r25
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	08 95       	ret

0000142c <malloc>:
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	91 05       	cpc	r25, r1
    1438:	10 f4       	brcc	.+4      	; 0x143e <malloc+0x12>
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <__flp>
    1442:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <__flp+0x1>
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	a0 e0       	ldi	r26, 0x00	; 0
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	30 97       	sbiw	r30, 0x00	; 0
    1450:	19 f1       	breq	.+70     	; 0x1498 <malloc+0x6c>
    1452:	40 81       	ld	r20, Z
    1454:	51 81       	ldd	r21, Z+1	; 0x01
    1456:	02 81       	ldd	r16, Z+2	; 0x02
    1458:	13 81       	ldd	r17, Z+3	; 0x03
    145a:	48 17       	cp	r20, r24
    145c:	59 07       	cpc	r21, r25
    145e:	c8 f0       	brcs	.+50     	; 0x1492 <malloc+0x66>
    1460:	84 17       	cp	r24, r20
    1462:	95 07       	cpc	r25, r21
    1464:	69 f4       	brne	.+26     	; 0x1480 <malloc+0x54>
    1466:	10 97       	sbiw	r26, 0x00	; 0
    1468:	31 f0       	breq	.+12     	; 0x1476 <malloc+0x4a>
    146a:	12 96       	adiw	r26, 0x02	; 2
    146c:	0c 93       	st	X, r16
    146e:	12 97       	sbiw	r26, 0x02	; 2
    1470:	13 96       	adiw	r26, 0x03	; 3
    1472:	1c 93       	st	X, r17
    1474:	27 c0       	rjmp	.+78     	; 0x14c4 <malloc+0x98>
    1476:	00 93 00 03 	sts	0x0300, r16	; 0x800300 <__flp>
    147a:	10 93 01 03 	sts	0x0301, r17	; 0x800301 <__flp+0x1>
    147e:	22 c0       	rjmp	.+68     	; 0x14c4 <malloc+0x98>
    1480:	21 15       	cp	r18, r1
    1482:	31 05       	cpc	r19, r1
    1484:	19 f0       	breq	.+6      	; 0x148c <malloc+0x60>
    1486:	42 17       	cp	r20, r18
    1488:	53 07       	cpc	r21, r19
    148a:	18 f4       	brcc	.+6      	; 0x1492 <malloc+0x66>
    148c:	9a 01       	movw	r18, r20
    148e:	bd 01       	movw	r22, r26
    1490:	ef 01       	movw	r28, r30
    1492:	df 01       	movw	r26, r30
    1494:	f8 01       	movw	r30, r16
    1496:	db cf       	rjmp	.-74     	; 0x144e <malloc+0x22>
    1498:	21 15       	cp	r18, r1
    149a:	31 05       	cpc	r19, r1
    149c:	f9 f0       	breq	.+62     	; 0x14dc <malloc+0xb0>
    149e:	28 1b       	sub	r18, r24
    14a0:	39 0b       	sbc	r19, r25
    14a2:	24 30       	cpi	r18, 0x04	; 4
    14a4:	31 05       	cpc	r19, r1
    14a6:	80 f4       	brcc	.+32     	; 0x14c8 <malloc+0x9c>
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	9b 81       	ldd	r25, Y+3	; 0x03
    14ac:	61 15       	cp	r22, r1
    14ae:	71 05       	cpc	r23, r1
    14b0:	21 f0       	breq	.+8      	; 0x14ba <malloc+0x8e>
    14b2:	fb 01       	movw	r30, r22
    14b4:	93 83       	std	Z+3, r25	; 0x03
    14b6:	82 83       	std	Z+2, r24	; 0x02
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <malloc+0x96>
    14ba:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <__flp+0x1>
    14be:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__flp>
    14c2:	fe 01       	movw	r30, r28
    14c4:	32 96       	adiw	r30, 0x02	; 2
    14c6:	44 c0       	rjmp	.+136    	; 0x1550 <malloc+0x124>
    14c8:	fe 01       	movw	r30, r28
    14ca:	e2 0f       	add	r30, r18
    14cc:	f3 1f       	adc	r31, r19
    14ce:	81 93       	st	Z+, r24
    14d0:	91 93       	st	Z+, r25
    14d2:	22 50       	subi	r18, 0x02	; 2
    14d4:	31 09       	sbc	r19, r1
    14d6:	39 83       	std	Y+1, r19	; 0x01
    14d8:	28 83       	st	Y, r18
    14da:	3a c0       	rjmp	.+116    	; 0x1550 <malloc+0x124>
    14dc:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <__brkval>
    14e0:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <__brkval+0x1>
    14e4:	23 2b       	or	r18, r19
    14e6:	41 f4       	brne	.+16     	; 0x14f8 <malloc+0xcc>
    14e8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    14ec:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    14f0:	30 93 ff 02 	sts	0x02FF, r19	; 0x8002ff <__brkval+0x1>
    14f4:	20 93 fe 02 	sts	0x02FE, r18	; 0x8002fe <__brkval>
    14f8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    14fc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1500:	21 15       	cp	r18, r1
    1502:	31 05       	cpc	r19, r1
    1504:	41 f4       	brne	.+16     	; 0x1516 <malloc+0xea>
    1506:	2d b7       	in	r18, 0x3d	; 61
    1508:	3e b7       	in	r19, 0x3e	; 62
    150a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    150e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1512:	24 1b       	sub	r18, r20
    1514:	35 0b       	sbc	r19, r21
    1516:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <__brkval>
    151a:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <__brkval+0x1>
    151e:	e2 17       	cp	r30, r18
    1520:	f3 07       	cpc	r31, r19
    1522:	a0 f4       	brcc	.+40     	; 0x154c <malloc+0x120>
    1524:	2e 1b       	sub	r18, r30
    1526:	3f 0b       	sbc	r19, r31
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	78 f0       	brcs	.+30     	; 0x154c <malloc+0x120>
    152e:	ac 01       	movw	r20, r24
    1530:	4e 5f       	subi	r20, 0xFE	; 254
    1532:	5f 4f       	sbci	r21, 0xFF	; 255
    1534:	24 17       	cp	r18, r20
    1536:	35 07       	cpc	r19, r21
    1538:	48 f0       	brcs	.+18     	; 0x154c <malloc+0x120>
    153a:	4e 0f       	add	r20, r30
    153c:	5f 1f       	adc	r21, r31
    153e:	50 93 ff 02 	sts	0x02FF, r21	; 0x8002ff <__brkval+0x1>
    1542:	40 93 fe 02 	sts	0x02FE, r20	; 0x8002fe <__brkval>
    1546:	81 93       	st	Z+, r24
    1548:	91 93       	st	Z+, r25
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <malloc+0x124>
    154c:	e0 e0       	ldi	r30, 0x00	; 0
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	cf 01       	movw	r24, r30
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <free>:
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	09 f4       	brne	.+2      	; 0x1566 <free+0xa>
    1564:	81 c0       	rjmp	.+258    	; 0x1668 <free+0x10c>
    1566:	fc 01       	movw	r30, r24
    1568:	32 97       	sbiw	r30, 0x02	; 2
    156a:	13 82       	std	Z+3, r1	; 0x03
    156c:	12 82       	std	Z+2, r1	; 0x02
    156e:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <__flp>
    1572:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <__flp+0x1>
    1576:	10 97       	sbiw	r26, 0x00	; 0
    1578:	81 f4       	brne	.+32     	; 0x159a <free+0x3e>
    157a:	20 81       	ld	r18, Z
    157c:	31 81       	ldd	r19, Z+1	; 0x01
    157e:	82 0f       	add	r24, r18
    1580:	93 1f       	adc	r25, r19
    1582:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <__brkval>
    1586:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <__brkval+0x1>
    158a:	28 17       	cp	r18, r24
    158c:	39 07       	cpc	r19, r25
    158e:	51 f5       	brne	.+84     	; 0x15e4 <free+0x88>
    1590:	f0 93 ff 02 	sts	0x02FF, r31	; 0x8002ff <__brkval+0x1>
    1594:	e0 93 fe 02 	sts	0x02FE, r30	; 0x8002fe <__brkval>
    1598:	67 c0       	rjmp	.+206    	; 0x1668 <free+0x10c>
    159a:	ed 01       	movw	r28, r26
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	ce 17       	cp	r28, r30
    15a2:	df 07       	cpc	r29, r31
    15a4:	40 f4       	brcc	.+16     	; 0x15b6 <free+0x5a>
    15a6:	4a 81       	ldd	r20, Y+2	; 0x02
    15a8:	5b 81       	ldd	r21, Y+3	; 0x03
    15aa:	9e 01       	movw	r18, r28
    15ac:	41 15       	cp	r20, r1
    15ae:	51 05       	cpc	r21, r1
    15b0:	f1 f0       	breq	.+60     	; 0x15ee <free+0x92>
    15b2:	ea 01       	movw	r28, r20
    15b4:	f5 cf       	rjmp	.-22     	; 0x15a0 <free+0x44>
    15b6:	d3 83       	std	Z+3, r29	; 0x03
    15b8:	c2 83       	std	Z+2, r28	; 0x02
    15ba:	40 81       	ld	r20, Z
    15bc:	51 81       	ldd	r21, Z+1	; 0x01
    15be:	84 0f       	add	r24, r20
    15c0:	95 1f       	adc	r25, r21
    15c2:	c8 17       	cp	r28, r24
    15c4:	d9 07       	cpc	r29, r25
    15c6:	59 f4       	brne	.+22     	; 0x15de <free+0x82>
    15c8:	88 81       	ld	r24, Y
    15ca:	99 81       	ldd	r25, Y+1	; 0x01
    15cc:	84 0f       	add	r24, r20
    15ce:	95 1f       	adc	r25, r21
    15d0:	02 96       	adiw	r24, 0x02	; 2
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	9b 81       	ldd	r25, Y+3	; 0x03
    15da:	93 83       	std	Z+3, r25	; 0x03
    15dc:	82 83       	std	Z+2, r24	; 0x02
    15de:	21 15       	cp	r18, r1
    15e0:	31 05       	cpc	r19, r1
    15e2:	29 f4       	brne	.+10     	; 0x15ee <free+0x92>
    15e4:	f0 93 01 03 	sts	0x0301, r31	; 0x800301 <__flp+0x1>
    15e8:	e0 93 00 03 	sts	0x0300, r30	; 0x800300 <__flp>
    15ec:	3d c0       	rjmp	.+122    	; 0x1668 <free+0x10c>
    15ee:	e9 01       	movw	r28, r18
    15f0:	fb 83       	std	Y+3, r31	; 0x03
    15f2:	ea 83       	std	Y+2, r30	; 0x02
    15f4:	49 91       	ld	r20, Y+
    15f6:	59 91       	ld	r21, Y+
    15f8:	c4 0f       	add	r28, r20
    15fa:	d5 1f       	adc	r29, r21
    15fc:	ec 17       	cp	r30, r28
    15fe:	fd 07       	cpc	r31, r29
    1600:	61 f4       	brne	.+24     	; 0x161a <free+0xbe>
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	84 0f       	add	r24, r20
    1608:	95 1f       	adc	r25, r21
    160a:	02 96       	adiw	r24, 0x02	; 2
    160c:	e9 01       	movw	r28, r18
    160e:	99 83       	std	Y+1, r25	; 0x01
    1610:	88 83       	st	Y, r24
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	9b 83       	std	Y+3, r25	; 0x03
    1618:	8a 83       	std	Y+2, r24	; 0x02
    161a:	e0 e0       	ldi	r30, 0x00	; 0
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	12 96       	adiw	r26, 0x02	; 2
    1620:	8d 91       	ld	r24, X+
    1622:	9c 91       	ld	r25, X
    1624:	13 97       	sbiw	r26, 0x03	; 3
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	19 f0       	breq	.+6      	; 0x1630 <free+0xd4>
    162a:	fd 01       	movw	r30, r26
    162c:	dc 01       	movw	r26, r24
    162e:	f7 cf       	rjmp	.-18     	; 0x161e <free+0xc2>
    1630:	8d 91       	ld	r24, X+
    1632:	9c 91       	ld	r25, X
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	9d 01       	movw	r18, r26
    1638:	2e 5f       	subi	r18, 0xFE	; 254
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	82 0f       	add	r24, r18
    163e:	93 1f       	adc	r25, r19
    1640:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <__brkval>
    1644:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <__brkval+0x1>
    1648:	28 17       	cp	r18, r24
    164a:	39 07       	cpc	r19, r25
    164c:	69 f4       	brne	.+26     	; 0x1668 <free+0x10c>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	29 f4       	brne	.+10     	; 0x165c <free+0x100>
    1652:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <__flp+0x1>
    1656:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__flp>
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <free+0x104>
    165c:	13 82       	std	Z+3, r1	; 0x03
    165e:	12 82       	std	Z+2, r1	; 0x02
    1660:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <__brkval+0x1>
    1664:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <__brkval>
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <strcmp>:
    166e:	fb 01       	movw	r30, r22
    1670:	dc 01       	movw	r26, r24
    1672:	8d 91       	ld	r24, X+
    1674:	01 90       	ld	r0, Z+
    1676:	80 19       	sub	r24, r0
    1678:	01 10       	cpse	r0, r1
    167a:	d9 f3       	breq	.-10     	; 0x1672 <strcmp+0x4>
    167c:	99 0b       	sbc	r25, r25
    167e:	08 95       	ret

00001680 <strcpy>:
    1680:	fb 01       	movw	r30, r22
    1682:	dc 01       	movw	r26, r24
    1684:	01 90       	ld	r0, Z+
    1686:	0d 92       	st	X+, r0
    1688:	00 20       	and	r0, r0
    168a:	e1 f7       	brne	.-8      	; 0x1684 <strcpy+0x4>
    168c:	08 95       	ret

0000168e <fdevopen>:
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	31 f4       	brne	.+12     	; 0x16a6 <fdevopen+0x18>
    169a:	61 15       	cp	r22, r1
    169c:	71 05       	cpc	r23, r1
    169e:	19 f4       	brne	.+6      	; 0x16a6 <fdevopen+0x18>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	3a c0       	rjmp	.+116    	; 0x171a <fdevopen+0x8c>
    16a6:	8b 01       	movw	r16, r22
    16a8:	ec 01       	movw	r28, r24
    16aa:	6e e0       	ldi	r22, 0x0E	; 14
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <calloc>
    16b6:	fc 01       	movw	r30, r24
    16b8:	89 2b       	or	r24, r25
    16ba:	91 f3       	breq	.-28     	; 0x16a0 <fdevopen+0x12>
    16bc:	80 e8       	ldi	r24, 0x80	; 128
    16be:	83 83       	std	Z+3, r24	; 0x03
    16c0:	01 15       	cp	r16, r1
    16c2:	11 05       	cpc	r17, r1
    16c4:	71 f0       	breq	.+28     	; 0x16e2 <fdevopen+0x54>
    16c6:	13 87       	std	Z+11, r17	; 0x0b
    16c8:	02 87       	std	Z+10, r16	; 0x0a
    16ca:	81 e8       	ldi	r24, 0x81	; 129
    16cc:	83 83       	std	Z+3, r24	; 0x03
    16ce:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <__iob>
    16d2:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <__iob+0x1>
    16d6:	89 2b       	or	r24, r25
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <fdevopen+0x54>
    16da:	f0 93 03 03 	sts	0x0303, r31	; 0x800303 <__iob+0x1>
    16de:	e0 93 02 03 	sts	0x0302, r30	; 0x800302 <__iob>
    16e2:	20 97       	sbiw	r28, 0x00	; 0
    16e4:	c9 f0       	breq	.+50     	; 0x1718 <fdevopen+0x8a>
    16e6:	d1 87       	std	Z+9, r29	; 0x09
    16e8:	c0 87       	std	Z+8, r28	; 0x08
    16ea:	83 81       	ldd	r24, Z+3	; 0x03
    16ec:	82 60       	ori	r24, 0x02	; 2
    16ee:	83 83       	std	Z+3, r24	; 0x03
    16f0:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <__iob+0x2>
    16f4:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <__iob+0x3>
    16f8:	89 2b       	or	r24, r25
    16fa:	71 f4       	brne	.+28     	; 0x1718 <fdevopen+0x8a>
    16fc:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <__iob+0x3>
    1700:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <__iob+0x2>
    1704:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__iob+0x4>
    1708:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <__iob+0x5>
    170c:	89 2b       	or	r24, r25
    170e:	21 f4       	brne	.+8      	; 0x1718 <fdevopen+0x8a>
    1710:	f0 93 07 03 	sts	0x0307, r31	; 0x800307 <__iob+0x5>
    1714:	e0 93 06 03 	sts	0x0306, r30	; 0x800306 <__iob+0x4>
    1718:	cf 01       	movw	r24, r30
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	08 95       	ret

00001724 <printf>:
    1724:	a0 e0       	ldi	r26, 0x00	; 0
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e8 e9       	ldi	r30, 0x98	; 152
    172a:	fb e0       	ldi	r31, 0x0B	; 11
    172c:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__prologue_saves__+0x20>
    1730:	ae 01       	movw	r20, r28
    1732:	4b 5f       	subi	r20, 0xFB	; 251
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	fa 01       	movw	r30, r20
    1738:	61 91       	ld	r22, Z+
    173a:	71 91       	ld	r23, Z+
    173c:	af 01       	movw	r20, r30
    173e:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <__iob+0x2>
    1742:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <__iob+0x3>
    1746:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vfprintf>
    174a:	e2 e0       	ldi	r30, 0x02	; 2
    174c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__epilogue_restores__+0x20>

00001750 <puts>:
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <__iob+0x2>
    175c:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <__iob+0x3>
    1760:	23 81       	ldd	r18, Z+3	; 0x03
    1762:	21 ff       	sbrs	r18, 1
    1764:	1b c0       	rjmp	.+54     	; 0x179c <puts+0x4c>
    1766:	8c 01       	movw	r16, r24
    1768:	d0 e0       	ldi	r29, 0x00	; 0
    176a:	c0 e0       	ldi	r28, 0x00	; 0
    176c:	f8 01       	movw	r30, r16
    176e:	81 91       	ld	r24, Z+
    1770:	8f 01       	movw	r16, r30
    1772:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <__iob+0x2>
    1776:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <__iob+0x3>
    177a:	db 01       	movw	r26, r22
    177c:	18 96       	adiw	r26, 0x08	; 8
    177e:	ed 91       	ld	r30, X+
    1780:	fc 91       	ld	r31, X
    1782:	19 97       	sbiw	r26, 0x09	; 9
    1784:	88 23       	and	r24, r24
    1786:	31 f0       	breq	.+12     	; 0x1794 <puts+0x44>
    1788:	09 95       	icall
    178a:	89 2b       	or	r24, r25
    178c:	79 f3       	breq	.-34     	; 0x176c <puts+0x1c>
    178e:	df ef       	ldi	r29, 0xFF	; 255
    1790:	cf ef       	ldi	r28, 0xFF	; 255
    1792:	ec cf       	rjmp	.-40     	; 0x176c <puts+0x1c>
    1794:	8a e0       	ldi	r24, 0x0A	; 10
    1796:	09 95       	icall
    1798:	89 2b       	or	r24, r25
    179a:	19 f0       	breq	.+6      	; 0x17a2 <puts+0x52>
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	9f ef       	ldi	r25, 0xFF	; 255
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <puts+0x56>
    17a2:	8d 2f       	mov	r24, r29
    17a4:	9c 2f       	mov	r25, r28
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <vfprintf>:
    17b0:	ab e0       	ldi	r26, 0x0B	; 11
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ee ed       	ldi	r30, 0xDE	; 222
    17b6:	fb e0       	ldi	r31, 0x0B	; 11
    17b8:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__prologue_saves__>
    17bc:	6c 01       	movw	r12, r24
    17be:	7b 01       	movw	r14, r22
    17c0:	8a 01       	movw	r16, r20
    17c2:	fc 01       	movw	r30, r24
    17c4:	17 82       	std	Z+7, r1	; 0x07
    17c6:	16 82       	std	Z+6, r1	; 0x06
    17c8:	83 81       	ldd	r24, Z+3	; 0x03
    17ca:	81 ff       	sbrs	r24, 1
    17cc:	cc c1       	rjmp	.+920    	; 0x1b66 <vfprintf+0x3b6>
    17ce:	ce 01       	movw	r24, r28
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	3c 01       	movw	r6, r24
    17d4:	f6 01       	movw	r30, r12
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	f7 01       	movw	r30, r14
    17da:	93 fd       	sbrc	r25, 3
    17dc:	85 91       	lpm	r24, Z+
    17de:	93 ff       	sbrs	r25, 3
    17e0:	81 91       	ld	r24, Z+
    17e2:	7f 01       	movw	r14, r30
    17e4:	88 23       	and	r24, r24
    17e6:	09 f4       	brne	.+2      	; 0x17ea <vfprintf+0x3a>
    17e8:	ba c1       	rjmp	.+884    	; 0x1b5e <vfprintf+0x3ae>
    17ea:	85 32       	cpi	r24, 0x25	; 37
    17ec:	39 f4       	brne	.+14     	; 0x17fc <vfprintf+0x4c>
    17ee:	93 fd       	sbrc	r25, 3
    17f0:	85 91       	lpm	r24, Z+
    17f2:	93 ff       	sbrs	r25, 3
    17f4:	81 91       	ld	r24, Z+
    17f6:	7f 01       	movw	r14, r30
    17f8:	85 32       	cpi	r24, 0x25	; 37
    17fa:	29 f4       	brne	.+10     	; 0x1806 <vfprintf+0x56>
    17fc:	b6 01       	movw	r22, r12
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1804:	e7 cf       	rjmp	.-50     	; 0x17d4 <vfprintf+0x24>
    1806:	91 2c       	mov	r9, r1
    1808:	21 2c       	mov	r2, r1
    180a:	31 2c       	mov	r3, r1
    180c:	ff e1       	ldi	r31, 0x1F	; 31
    180e:	f3 15       	cp	r31, r3
    1810:	d8 f0       	brcs	.+54     	; 0x1848 <vfprintf+0x98>
    1812:	8b 32       	cpi	r24, 0x2B	; 43
    1814:	79 f0       	breq	.+30     	; 0x1834 <vfprintf+0x84>
    1816:	38 f4       	brcc	.+14     	; 0x1826 <vfprintf+0x76>
    1818:	80 32       	cpi	r24, 0x20	; 32
    181a:	79 f0       	breq	.+30     	; 0x183a <vfprintf+0x8a>
    181c:	83 32       	cpi	r24, 0x23	; 35
    181e:	a1 f4       	brne	.+40     	; 0x1848 <vfprintf+0x98>
    1820:	23 2d       	mov	r18, r3
    1822:	20 61       	ori	r18, 0x10	; 16
    1824:	1d c0       	rjmp	.+58     	; 0x1860 <vfprintf+0xb0>
    1826:	8d 32       	cpi	r24, 0x2D	; 45
    1828:	61 f0       	breq	.+24     	; 0x1842 <vfprintf+0x92>
    182a:	80 33       	cpi	r24, 0x30	; 48
    182c:	69 f4       	brne	.+26     	; 0x1848 <vfprintf+0x98>
    182e:	23 2d       	mov	r18, r3
    1830:	21 60       	ori	r18, 0x01	; 1
    1832:	16 c0       	rjmp	.+44     	; 0x1860 <vfprintf+0xb0>
    1834:	83 2d       	mov	r24, r3
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	38 2e       	mov	r3, r24
    183a:	e3 2d       	mov	r30, r3
    183c:	e4 60       	ori	r30, 0x04	; 4
    183e:	3e 2e       	mov	r3, r30
    1840:	2a c0       	rjmp	.+84     	; 0x1896 <vfprintf+0xe6>
    1842:	f3 2d       	mov	r31, r3
    1844:	f8 60       	ori	r31, 0x08	; 8
    1846:	1d c0       	rjmp	.+58     	; 0x1882 <vfprintf+0xd2>
    1848:	37 fc       	sbrc	r3, 7
    184a:	2d c0       	rjmp	.+90     	; 0x18a6 <vfprintf+0xf6>
    184c:	20 ed       	ldi	r18, 0xD0	; 208
    184e:	28 0f       	add	r18, r24
    1850:	2a 30       	cpi	r18, 0x0A	; 10
    1852:	40 f0       	brcs	.+16     	; 0x1864 <vfprintf+0xb4>
    1854:	8e 32       	cpi	r24, 0x2E	; 46
    1856:	b9 f4       	brne	.+46     	; 0x1886 <vfprintf+0xd6>
    1858:	36 fc       	sbrc	r3, 6
    185a:	81 c1       	rjmp	.+770    	; 0x1b5e <vfprintf+0x3ae>
    185c:	23 2d       	mov	r18, r3
    185e:	20 64       	ori	r18, 0x40	; 64
    1860:	32 2e       	mov	r3, r18
    1862:	19 c0       	rjmp	.+50     	; 0x1896 <vfprintf+0xe6>
    1864:	36 fe       	sbrs	r3, 6
    1866:	06 c0       	rjmp	.+12     	; 0x1874 <vfprintf+0xc4>
    1868:	8a e0       	ldi	r24, 0x0A	; 10
    186a:	98 9e       	mul	r9, r24
    186c:	20 0d       	add	r18, r0
    186e:	11 24       	eor	r1, r1
    1870:	92 2e       	mov	r9, r18
    1872:	11 c0       	rjmp	.+34     	; 0x1896 <vfprintf+0xe6>
    1874:	ea e0       	ldi	r30, 0x0A	; 10
    1876:	2e 9e       	mul	r2, r30
    1878:	20 0d       	add	r18, r0
    187a:	11 24       	eor	r1, r1
    187c:	22 2e       	mov	r2, r18
    187e:	f3 2d       	mov	r31, r3
    1880:	f0 62       	ori	r31, 0x20	; 32
    1882:	3f 2e       	mov	r3, r31
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <vfprintf+0xe6>
    1886:	8c 36       	cpi	r24, 0x6C	; 108
    1888:	21 f4       	brne	.+8      	; 0x1892 <vfprintf+0xe2>
    188a:	83 2d       	mov	r24, r3
    188c:	80 68       	ori	r24, 0x80	; 128
    188e:	38 2e       	mov	r3, r24
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <vfprintf+0xe6>
    1892:	88 36       	cpi	r24, 0x68	; 104
    1894:	41 f4       	brne	.+16     	; 0x18a6 <vfprintf+0xf6>
    1896:	f7 01       	movw	r30, r14
    1898:	93 fd       	sbrc	r25, 3
    189a:	85 91       	lpm	r24, Z+
    189c:	93 ff       	sbrs	r25, 3
    189e:	81 91       	ld	r24, Z+
    18a0:	7f 01       	movw	r14, r30
    18a2:	81 11       	cpse	r24, r1
    18a4:	b3 cf       	rjmp	.-154    	; 0x180c <vfprintf+0x5c>
    18a6:	98 2f       	mov	r25, r24
    18a8:	9f 7d       	andi	r25, 0xDF	; 223
    18aa:	95 54       	subi	r25, 0x45	; 69
    18ac:	93 30       	cpi	r25, 0x03	; 3
    18ae:	28 f4       	brcc	.+10     	; 0x18ba <vfprintf+0x10a>
    18b0:	0c 5f       	subi	r16, 0xFC	; 252
    18b2:	1f 4f       	sbci	r17, 0xFF	; 255
    18b4:	9f e3       	ldi	r25, 0x3F	; 63
    18b6:	99 83       	std	Y+1, r25	; 0x01
    18b8:	0d c0       	rjmp	.+26     	; 0x18d4 <vfprintf+0x124>
    18ba:	83 36       	cpi	r24, 0x63	; 99
    18bc:	31 f0       	breq	.+12     	; 0x18ca <vfprintf+0x11a>
    18be:	83 37       	cpi	r24, 0x73	; 115
    18c0:	71 f0       	breq	.+28     	; 0x18de <vfprintf+0x12e>
    18c2:	83 35       	cpi	r24, 0x53	; 83
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <vfprintf+0x118>
    18c6:	59 c0       	rjmp	.+178    	; 0x197a <vfprintf+0x1ca>
    18c8:	21 c0       	rjmp	.+66     	; 0x190c <vfprintf+0x15c>
    18ca:	f8 01       	movw	r30, r16
    18cc:	80 81       	ld	r24, Z
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	0e 5f       	subi	r16, 0xFE	; 254
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	88 24       	eor	r8, r8
    18d6:	83 94       	inc	r8
    18d8:	91 2c       	mov	r9, r1
    18da:	53 01       	movw	r10, r6
    18dc:	13 c0       	rjmp	.+38     	; 0x1904 <vfprintf+0x154>
    18de:	28 01       	movw	r4, r16
    18e0:	f2 e0       	ldi	r31, 0x02	; 2
    18e2:	4f 0e       	add	r4, r31
    18e4:	51 1c       	adc	r5, r1
    18e6:	f8 01       	movw	r30, r16
    18e8:	a0 80       	ld	r10, Z
    18ea:	b1 80       	ldd	r11, Z+1	; 0x01
    18ec:	36 fe       	sbrs	r3, 6
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <vfprintf+0x146>
    18f0:	69 2d       	mov	r22, r9
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <vfprintf+0x14a>
    18f6:	6f ef       	ldi	r22, 0xFF	; 255
    18f8:	7f ef       	ldi	r23, 0xFF	; 255
    18fa:	c5 01       	movw	r24, r10
    18fc:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <strnlen>
    1900:	4c 01       	movw	r8, r24
    1902:	82 01       	movw	r16, r4
    1904:	f3 2d       	mov	r31, r3
    1906:	ff 77       	andi	r31, 0x7F	; 127
    1908:	3f 2e       	mov	r3, r31
    190a:	16 c0       	rjmp	.+44     	; 0x1938 <vfprintf+0x188>
    190c:	28 01       	movw	r4, r16
    190e:	22 e0       	ldi	r18, 0x02	; 2
    1910:	42 0e       	add	r4, r18
    1912:	51 1c       	adc	r5, r1
    1914:	f8 01       	movw	r30, r16
    1916:	a0 80       	ld	r10, Z
    1918:	b1 80       	ldd	r11, Z+1	; 0x01
    191a:	36 fe       	sbrs	r3, 6
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <vfprintf+0x174>
    191e:	69 2d       	mov	r22, r9
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x178>
    1924:	6f ef       	ldi	r22, 0xFF	; 255
    1926:	7f ef       	ldi	r23, 0xFF	; 255
    1928:	c5 01       	movw	r24, r10
    192a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <strnlen_P>
    192e:	4c 01       	movw	r8, r24
    1930:	f3 2d       	mov	r31, r3
    1932:	f0 68       	ori	r31, 0x80	; 128
    1934:	3f 2e       	mov	r3, r31
    1936:	82 01       	movw	r16, r4
    1938:	33 fc       	sbrc	r3, 3
    193a:	1b c0       	rjmp	.+54     	; 0x1972 <vfprintf+0x1c2>
    193c:	82 2d       	mov	r24, r2
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	88 16       	cp	r8, r24
    1942:	99 06       	cpc	r9, r25
    1944:	b0 f4       	brcc	.+44     	; 0x1972 <vfprintf+0x1c2>
    1946:	b6 01       	movw	r22, r12
    1948:	80 e2       	ldi	r24, 0x20	; 32
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1950:	2a 94       	dec	r2
    1952:	f4 cf       	rjmp	.-24     	; 0x193c <vfprintf+0x18c>
    1954:	f5 01       	movw	r30, r10
    1956:	37 fc       	sbrc	r3, 7
    1958:	85 91       	lpm	r24, Z+
    195a:	37 fe       	sbrs	r3, 7
    195c:	81 91       	ld	r24, Z+
    195e:	5f 01       	movw	r10, r30
    1960:	b6 01       	movw	r22, r12
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1968:	21 10       	cpse	r2, r1
    196a:	2a 94       	dec	r2
    196c:	21 e0       	ldi	r18, 0x01	; 1
    196e:	82 1a       	sub	r8, r18
    1970:	91 08       	sbc	r9, r1
    1972:	81 14       	cp	r8, r1
    1974:	91 04       	cpc	r9, r1
    1976:	71 f7       	brne	.-36     	; 0x1954 <vfprintf+0x1a4>
    1978:	e8 c0       	rjmp	.+464    	; 0x1b4a <vfprintf+0x39a>
    197a:	84 36       	cpi	r24, 0x64	; 100
    197c:	11 f0       	breq	.+4      	; 0x1982 <vfprintf+0x1d2>
    197e:	89 36       	cpi	r24, 0x69	; 105
    1980:	41 f5       	brne	.+80     	; 0x19d2 <vfprintf+0x222>
    1982:	f8 01       	movw	r30, r16
    1984:	37 fe       	sbrs	r3, 7
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <vfprintf+0x1e6>
    1988:	60 81       	ld	r22, Z
    198a:	71 81       	ldd	r23, Z+1	; 0x01
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	0c 5f       	subi	r16, 0xFC	; 252
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	08 c0       	rjmp	.+16     	; 0x19a6 <vfprintf+0x1f6>
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	07 2e       	mov	r0, r23
    199c:	00 0c       	add	r0, r0
    199e:	88 0b       	sbc	r24, r24
    19a0:	99 0b       	sbc	r25, r25
    19a2:	0e 5f       	subi	r16, 0xFE	; 254
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	f3 2d       	mov	r31, r3
    19a8:	ff 76       	andi	r31, 0x6F	; 111
    19aa:	3f 2e       	mov	r3, r31
    19ac:	97 ff       	sbrs	r25, 7
    19ae:	09 c0       	rjmp	.+18     	; 0x19c2 <vfprintf+0x212>
    19b0:	90 95       	com	r25
    19b2:	80 95       	com	r24
    19b4:	70 95       	com	r23
    19b6:	61 95       	neg	r22
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	8f 4f       	sbci	r24, 0xFF	; 255
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	f0 68       	ori	r31, 0x80	; 128
    19c0:	3f 2e       	mov	r3, r31
    19c2:	2a e0       	ldi	r18, 0x0A	; 10
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	a3 01       	movw	r20, r6
    19c8:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__ultoa_invert>
    19cc:	88 2e       	mov	r8, r24
    19ce:	86 18       	sub	r8, r6
    19d0:	45 c0       	rjmp	.+138    	; 0x1a5c <vfprintf+0x2ac>
    19d2:	85 37       	cpi	r24, 0x75	; 117
    19d4:	31 f4       	brne	.+12     	; 0x19e2 <vfprintf+0x232>
    19d6:	23 2d       	mov	r18, r3
    19d8:	2f 7e       	andi	r18, 0xEF	; 239
    19da:	b2 2e       	mov	r11, r18
    19dc:	2a e0       	ldi	r18, 0x0A	; 10
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	25 c0       	rjmp	.+74     	; 0x1a2c <vfprintf+0x27c>
    19e2:	93 2d       	mov	r25, r3
    19e4:	99 7f       	andi	r25, 0xF9	; 249
    19e6:	b9 2e       	mov	r11, r25
    19e8:	8f 36       	cpi	r24, 0x6F	; 111
    19ea:	c1 f0       	breq	.+48     	; 0x1a1c <vfprintf+0x26c>
    19ec:	18 f4       	brcc	.+6      	; 0x19f4 <vfprintf+0x244>
    19ee:	88 35       	cpi	r24, 0x58	; 88
    19f0:	79 f0       	breq	.+30     	; 0x1a10 <vfprintf+0x260>
    19f2:	b5 c0       	rjmp	.+362    	; 0x1b5e <vfprintf+0x3ae>
    19f4:	80 37       	cpi	r24, 0x70	; 112
    19f6:	19 f0       	breq	.+6      	; 0x19fe <vfprintf+0x24e>
    19f8:	88 37       	cpi	r24, 0x78	; 120
    19fa:	21 f0       	breq	.+8      	; 0x1a04 <vfprintf+0x254>
    19fc:	b0 c0       	rjmp	.+352    	; 0x1b5e <vfprintf+0x3ae>
    19fe:	e9 2f       	mov	r30, r25
    1a00:	e0 61       	ori	r30, 0x10	; 16
    1a02:	be 2e       	mov	r11, r30
    1a04:	b4 fe       	sbrs	r11, 4
    1a06:	0d c0       	rjmp	.+26     	; 0x1a22 <vfprintf+0x272>
    1a08:	fb 2d       	mov	r31, r11
    1a0a:	f4 60       	ori	r31, 0x04	; 4
    1a0c:	bf 2e       	mov	r11, r31
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <vfprintf+0x272>
    1a10:	34 fe       	sbrs	r3, 4
    1a12:	0a c0       	rjmp	.+20     	; 0x1a28 <vfprintf+0x278>
    1a14:	29 2f       	mov	r18, r25
    1a16:	26 60       	ori	r18, 0x06	; 6
    1a18:	b2 2e       	mov	r11, r18
    1a1a:	06 c0       	rjmp	.+12     	; 0x1a28 <vfprintf+0x278>
    1a1c:	28 e0       	ldi	r18, 0x08	; 8
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	05 c0       	rjmp	.+10     	; 0x1a2c <vfprintf+0x27c>
    1a22:	20 e1       	ldi	r18, 0x10	; 16
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <vfprintf+0x27c>
    1a28:	20 e1       	ldi	r18, 0x10	; 16
    1a2a:	32 e0       	ldi	r19, 0x02	; 2
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	b7 fe       	sbrs	r11, 7
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <vfprintf+0x290>
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	0c 5f       	subi	r16, 0xFC	; 252
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	06 c0       	rjmp	.+12     	; 0x1a4c <vfprintf+0x29c>
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 5f       	subi	r16, 0xFE	; 254
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	a3 01       	movw	r20, r6
    1a4e:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__ultoa_invert>
    1a52:	88 2e       	mov	r8, r24
    1a54:	86 18       	sub	r8, r6
    1a56:	fb 2d       	mov	r31, r11
    1a58:	ff 77       	andi	r31, 0x7F	; 127
    1a5a:	3f 2e       	mov	r3, r31
    1a5c:	36 fe       	sbrs	r3, 6
    1a5e:	0d c0       	rjmp	.+26     	; 0x1a7a <vfprintf+0x2ca>
    1a60:	23 2d       	mov	r18, r3
    1a62:	2e 7f       	andi	r18, 0xFE	; 254
    1a64:	a2 2e       	mov	r10, r18
    1a66:	89 14       	cp	r8, r9
    1a68:	58 f4       	brcc	.+22     	; 0x1a80 <vfprintf+0x2d0>
    1a6a:	34 fe       	sbrs	r3, 4
    1a6c:	0b c0       	rjmp	.+22     	; 0x1a84 <vfprintf+0x2d4>
    1a6e:	32 fc       	sbrc	r3, 2
    1a70:	09 c0       	rjmp	.+18     	; 0x1a84 <vfprintf+0x2d4>
    1a72:	83 2d       	mov	r24, r3
    1a74:	8e 7e       	andi	r24, 0xEE	; 238
    1a76:	a8 2e       	mov	r10, r24
    1a78:	05 c0       	rjmp	.+10     	; 0x1a84 <vfprintf+0x2d4>
    1a7a:	b8 2c       	mov	r11, r8
    1a7c:	a3 2c       	mov	r10, r3
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <vfprintf+0x2d6>
    1a80:	b8 2c       	mov	r11, r8
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <vfprintf+0x2d6>
    1a84:	b9 2c       	mov	r11, r9
    1a86:	a4 fe       	sbrs	r10, 4
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <vfprintf+0x2f8>
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e8 0d       	add	r30, r8
    1a8e:	f1 1d       	adc	r31, r1
    1a90:	80 81       	ld	r24, Z
    1a92:	80 33       	cpi	r24, 0x30	; 48
    1a94:	21 f4       	brne	.+8      	; 0x1a9e <vfprintf+0x2ee>
    1a96:	9a 2d       	mov	r25, r10
    1a98:	99 7e       	andi	r25, 0xE9	; 233
    1a9a:	a9 2e       	mov	r10, r25
    1a9c:	09 c0       	rjmp	.+18     	; 0x1ab0 <vfprintf+0x300>
    1a9e:	a2 fe       	sbrs	r10, 2
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <vfprintf+0x2fe>
    1aa2:	b3 94       	inc	r11
    1aa4:	b3 94       	inc	r11
    1aa6:	04 c0       	rjmp	.+8      	; 0x1ab0 <vfprintf+0x300>
    1aa8:	8a 2d       	mov	r24, r10
    1aaa:	86 78       	andi	r24, 0x86	; 134
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <vfprintf+0x300>
    1aae:	b3 94       	inc	r11
    1ab0:	a3 fc       	sbrc	r10, 3
    1ab2:	11 c0       	rjmp	.+34     	; 0x1ad6 <vfprintf+0x326>
    1ab4:	a0 fe       	sbrs	r10, 0
    1ab6:	06 c0       	rjmp	.+12     	; 0x1ac4 <vfprintf+0x314>
    1ab8:	b2 14       	cp	r11, r2
    1aba:	88 f4       	brcc	.+34     	; 0x1ade <vfprintf+0x32e>
    1abc:	28 0c       	add	r2, r8
    1abe:	92 2c       	mov	r9, r2
    1ac0:	9b 18       	sub	r9, r11
    1ac2:	0e c0       	rjmp	.+28     	; 0x1ae0 <vfprintf+0x330>
    1ac4:	b2 14       	cp	r11, r2
    1ac6:	60 f4       	brcc	.+24     	; 0x1ae0 <vfprintf+0x330>
    1ac8:	b6 01       	movw	r22, r12
    1aca:	80 e2       	ldi	r24, 0x20	; 32
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1ad2:	b3 94       	inc	r11
    1ad4:	f7 cf       	rjmp	.-18     	; 0x1ac4 <vfprintf+0x314>
    1ad6:	b2 14       	cp	r11, r2
    1ad8:	18 f4       	brcc	.+6      	; 0x1ae0 <vfprintf+0x330>
    1ada:	2b 18       	sub	r2, r11
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x332>
    1ade:	98 2c       	mov	r9, r8
    1ae0:	21 2c       	mov	r2, r1
    1ae2:	a4 fe       	sbrs	r10, 4
    1ae4:	10 c0       	rjmp	.+32     	; 0x1b06 <vfprintf+0x356>
    1ae6:	b6 01       	movw	r22, r12
    1ae8:	80 e3       	ldi	r24, 0x30	; 48
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1af0:	a2 fe       	sbrs	r10, 2
    1af2:	17 c0       	rjmp	.+46     	; 0x1b22 <vfprintf+0x372>
    1af4:	a1 fc       	sbrc	r10, 1
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <vfprintf+0x34e>
    1af8:	88 e7       	ldi	r24, 0x78	; 120
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <vfprintf+0x352>
    1afe:	88 e5       	ldi	r24, 0x58	; 88
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	b6 01       	movw	r22, r12
    1b04:	0c c0       	rjmp	.+24     	; 0x1b1e <vfprintf+0x36e>
    1b06:	8a 2d       	mov	r24, r10
    1b08:	86 78       	andi	r24, 0x86	; 134
    1b0a:	59 f0       	breq	.+22     	; 0x1b22 <vfprintf+0x372>
    1b0c:	a1 fe       	sbrs	r10, 1
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <vfprintf+0x364>
    1b10:	8b e2       	ldi	r24, 0x2B	; 43
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <vfprintf+0x366>
    1b14:	80 e2       	ldi	r24, 0x20	; 32
    1b16:	a7 fc       	sbrc	r10, 7
    1b18:	8d e2       	ldi	r24, 0x2D	; 45
    1b1a:	b6 01       	movw	r22, r12
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1b22:	89 14       	cp	r8, r9
    1b24:	38 f4       	brcc	.+14     	; 0x1b34 <vfprintf+0x384>
    1b26:	b6 01       	movw	r22, r12
    1b28:	80 e3       	ldi	r24, 0x30	; 48
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1b30:	9a 94       	dec	r9
    1b32:	f7 cf       	rjmp	.-18     	; 0x1b22 <vfprintf+0x372>
    1b34:	8a 94       	dec	r8
    1b36:	f3 01       	movw	r30, r6
    1b38:	e8 0d       	add	r30, r8
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	80 81       	ld	r24, Z
    1b3e:	b6 01       	movw	r22, r12
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1b46:	81 10       	cpse	r8, r1
    1b48:	f5 cf       	rjmp	.-22     	; 0x1b34 <vfprintf+0x384>
    1b4a:	22 20       	and	r2, r2
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <vfprintf+0x3a0>
    1b4e:	42 ce       	rjmp	.-892    	; 0x17d4 <vfprintf+0x24>
    1b50:	b6 01       	movw	r22, r12
    1b52:	80 e2       	ldi	r24, 0x20	; 32
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <fputc>
    1b5a:	2a 94       	dec	r2
    1b5c:	f6 cf       	rjmp	.-20     	; 0x1b4a <vfprintf+0x39a>
    1b5e:	f6 01       	movw	r30, r12
    1b60:	86 81       	ldd	r24, Z+6	; 0x06
    1b62:	97 81       	ldd	r25, Z+7	; 0x07
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <vfprintf+0x3ba>
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	9f ef       	ldi	r25, 0xFF	; 255
    1b6a:	2b 96       	adiw	r28, 0x0b	; 11
    1b6c:	e2 e1       	ldi	r30, 0x12	; 18
    1b6e:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__epilogue_restores__>

00001b72 <calloc>:
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	86 9f       	mul	r24, r22
    1b7c:	80 01       	movw	r16, r0
    1b7e:	87 9f       	mul	r24, r23
    1b80:	10 0d       	add	r17, r0
    1b82:	96 9f       	mul	r25, r22
    1b84:	10 0d       	add	r17, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	c8 01       	movw	r24, r16
    1b8a:	0e 94 16 0a 	call	0x142c	; 0x142c <malloc>
    1b8e:	ec 01       	movw	r28, r24
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	29 f0       	breq	.+10     	; 0x1b9e <calloc+0x2c>
    1b94:	a8 01       	movw	r20, r16
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <memset>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	08 95       	ret

00001baa <strnlen_P>:
    1baa:	fc 01       	movw	r30, r24
    1bac:	05 90       	lpm	r0, Z+
    1bae:	61 50       	subi	r22, 0x01	; 1
    1bb0:	70 40       	sbci	r23, 0x00	; 0
    1bb2:	01 10       	cpse	r0, r1
    1bb4:	d8 f7       	brcc	.-10     	; 0x1bac <strnlen_P+0x2>
    1bb6:	80 95       	com	r24
    1bb8:	90 95       	com	r25
    1bba:	8e 0f       	add	r24, r30
    1bbc:	9f 1f       	adc	r25, r31
    1bbe:	08 95       	ret

00001bc0 <memset>:
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <memset+0x6>
    1bc4:	6d 93       	st	X+, r22
    1bc6:	41 50       	subi	r20, 0x01	; 1
    1bc8:	50 40       	sbci	r21, 0x00	; 0
    1bca:	e0 f7       	brcc	.-8      	; 0x1bc4 <memset+0x4>
    1bcc:	08 95       	ret

00001bce <strnlen>:
    1bce:	fc 01       	movw	r30, r24
    1bd0:	61 50       	subi	r22, 0x01	; 1
    1bd2:	70 40       	sbci	r23, 0x00	; 0
    1bd4:	01 90       	ld	r0, Z+
    1bd6:	01 10       	cpse	r0, r1
    1bd8:	d8 f7       	brcc	.-10     	; 0x1bd0 <strnlen+0x2>
    1bda:	80 95       	com	r24
    1bdc:	90 95       	com	r25
    1bde:	8e 0f       	add	r24, r30
    1be0:	9f 1f       	adc	r25, r31
    1be2:	08 95       	ret

00001be4 <fputc>:
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	fb 01       	movw	r30, r22
    1bee:	23 81       	ldd	r18, Z+3	; 0x03
    1bf0:	21 fd       	sbrc	r18, 1
    1bf2:	03 c0       	rjmp	.+6      	; 0x1bfa <fputc+0x16>
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	9f ef       	ldi	r25, 0xFF	; 255
    1bf8:	2c c0       	rjmp	.+88     	; 0x1c52 <fputc+0x6e>
    1bfa:	22 ff       	sbrs	r18, 2
    1bfc:	16 c0       	rjmp	.+44     	; 0x1c2a <fputc+0x46>
    1bfe:	46 81       	ldd	r20, Z+6	; 0x06
    1c00:	57 81       	ldd	r21, Z+7	; 0x07
    1c02:	24 81       	ldd	r18, Z+4	; 0x04
    1c04:	35 81       	ldd	r19, Z+5	; 0x05
    1c06:	42 17       	cp	r20, r18
    1c08:	53 07       	cpc	r21, r19
    1c0a:	44 f4       	brge	.+16     	; 0x1c1c <fputc+0x38>
    1c0c:	a0 81       	ld	r26, Z
    1c0e:	b1 81       	ldd	r27, Z+1	; 0x01
    1c10:	9d 01       	movw	r18, r26
    1c12:	2f 5f       	subi	r18, 0xFF	; 255
    1c14:	3f 4f       	sbci	r19, 0xFF	; 255
    1c16:	31 83       	std	Z+1, r19	; 0x01
    1c18:	20 83       	st	Z, r18
    1c1a:	8c 93       	st	X, r24
    1c1c:	26 81       	ldd	r18, Z+6	; 0x06
    1c1e:	37 81       	ldd	r19, Z+7	; 0x07
    1c20:	2f 5f       	subi	r18, 0xFF	; 255
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	37 83       	std	Z+7, r19	; 0x07
    1c26:	26 83       	std	Z+6, r18	; 0x06
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <fputc+0x6e>
    1c2a:	8b 01       	movw	r16, r22
    1c2c:	ec 01       	movw	r28, r24
    1c2e:	fb 01       	movw	r30, r22
    1c30:	00 84       	ldd	r0, Z+8	; 0x08
    1c32:	f1 85       	ldd	r31, Z+9	; 0x09
    1c34:	e0 2d       	mov	r30, r0
    1c36:	09 95       	icall
    1c38:	89 2b       	or	r24, r25
    1c3a:	e1 f6       	brne	.-72     	; 0x1bf4 <fputc+0x10>
    1c3c:	d8 01       	movw	r26, r16
    1c3e:	16 96       	adiw	r26, 0x06	; 6
    1c40:	8d 91       	ld	r24, X+
    1c42:	9c 91       	ld	r25, X
    1c44:	17 97       	sbiw	r26, 0x07	; 7
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	17 96       	adiw	r26, 0x07	; 7
    1c4a:	9c 93       	st	X, r25
    1c4c:	8e 93       	st	-X, r24
    1c4e:	16 97       	sbiw	r26, 0x06	; 6
    1c50:	ce 01       	movw	r24, r28
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <__ultoa_invert>:
    1c5c:	fa 01       	movw	r30, r20
    1c5e:	aa 27       	eor	r26, r26
    1c60:	28 30       	cpi	r18, 0x08	; 8
    1c62:	51 f1       	breq	.+84     	; 0x1cb8 <__ultoa_invert+0x5c>
    1c64:	20 31       	cpi	r18, 0x10	; 16
    1c66:	81 f1       	breq	.+96     	; 0x1cc8 <__ultoa_invert+0x6c>
    1c68:	e8 94       	clt
    1c6a:	6f 93       	push	r22
    1c6c:	6e 7f       	andi	r22, 0xFE	; 254
    1c6e:	6e 5f       	subi	r22, 0xFE	; 254
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	8f 4f       	sbci	r24, 0xFF	; 255
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	af 4f       	sbci	r26, 0xFF	; 255
    1c78:	b1 e0       	ldi	r27, 0x01	; 1
    1c7a:	3e d0       	rcall	.+124    	; 0x1cf8 <__ultoa_invert+0x9c>
    1c7c:	b4 e0       	ldi	r27, 0x04	; 4
    1c7e:	3c d0       	rcall	.+120    	; 0x1cf8 <__ultoa_invert+0x9c>
    1c80:	67 0f       	add	r22, r23
    1c82:	78 1f       	adc	r23, r24
    1c84:	89 1f       	adc	r24, r25
    1c86:	9a 1f       	adc	r25, r26
    1c88:	a1 1d       	adc	r26, r1
    1c8a:	68 0f       	add	r22, r24
    1c8c:	79 1f       	adc	r23, r25
    1c8e:	8a 1f       	adc	r24, r26
    1c90:	91 1d       	adc	r25, r1
    1c92:	a1 1d       	adc	r26, r1
    1c94:	6a 0f       	add	r22, r26
    1c96:	71 1d       	adc	r23, r1
    1c98:	81 1d       	adc	r24, r1
    1c9a:	91 1d       	adc	r25, r1
    1c9c:	a1 1d       	adc	r26, r1
    1c9e:	20 d0       	rcall	.+64     	; 0x1ce0 <__ultoa_invert+0x84>
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <__ultoa_invert+0x48>
    1ca2:	68 94       	set
    1ca4:	3f 91       	pop	r19
    1ca6:	2a e0       	ldi	r18, 0x0A	; 10
    1ca8:	26 9f       	mul	r18, r22
    1caa:	11 24       	eor	r1, r1
    1cac:	30 19       	sub	r19, r0
    1cae:	30 5d       	subi	r19, 0xD0	; 208
    1cb0:	31 93       	st	Z+, r19
    1cb2:	de f6       	brtc	.-74     	; 0x1c6a <__ultoa_invert+0xe>
    1cb4:	cf 01       	movw	r24, r30
    1cb6:	08 95       	ret
    1cb8:	46 2f       	mov	r20, r22
    1cba:	47 70       	andi	r20, 0x07	; 7
    1cbc:	40 5d       	subi	r20, 0xD0	; 208
    1cbe:	41 93       	st	Z+, r20
    1cc0:	b3 e0       	ldi	r27, 0x03	; 3
    1cc2:	0f d0       	rcall	.+30     	; 0x1ce2 <__ultoa_invert+0x86>
    1cc4:	c9 f7       	brne	.-14     	; 0x1cb8 <__ultoa_invert+0x5c>
    1cc6:	f6 cf       	rjmp	.-20     	; 0x1cb4 <__ultoa_invert+0x58>
    1cc8:	46 2f       	mov	r20, r22
    1cca:	4f 70       	andi	r20, 0x0F	; 15
    1ccc:	40 5d       	subi	r20, 0xD0	; 208
    1cce:	4a 33       	cpi	r20, 0x3A	; 58
    1cd0:	18 f0       	brcs	.+6      	; 0x1cd8 <__ultoa_invert+0x7c>
    1cd2:	49 5d       	subi	r20, 0xD9	; 217
    1cd4:	31 fd       	sbrc	r19, 1
    1cd6:	40 52       	subi	r20, 0x20	; 32
    1cd8:	41 93       	st	Z+, r20
    1cda:	02 d0       	rcall	.+4      	; 0x1ce0 <__ultoa_invert+0x84>
    1cdc:	a9 f7       	brne	.-22     	; 0x1cc8 <__ultoa_invert+0x6c>
    1cde:	ea cf       	rjmp	.-44     	; 0x1cb4 <__ultoa_invert+0x58>
    1ce0:	b4 e0       	ldi	r27, 0x04	; 4
    1ce2:	a6 95       	lsr	r26
    1ce4:	97 95       	ror	r25
    1ce6:	87 95       	ror	r24
    1ce8:	77 95       	ror	r23
    1cea:	67 95       	ror	r22
    1cec:	ba 95       	dec	r27
    1cee:	c9 f7       	brne	.-14     	; 0x1ce2 <__ultoa_invert+0x86>
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	61 05       	cpc	r22, r1
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	08 95       	ret
    1cf8:	9b 01       	movw	r18, r22
    1cfa:	ac 01       	movw	r20, r24
    1cfc:	0a 2e       	mov	r0, r26
    1cfe:	06 94       	lsr	r0
    1d00:	57 95       	ror	r21
    1d02:	47 95       	ror	r20
    1d04:	37 95       	ror	r19
    1d06:	27 95       	ror	r18
    1d08:	ba 95       	dec	r27
    1d0a:	c9 f7       	brne	.-14     	; 0x1cfe <__ultoa_invert+0xa2>
    1d0c:	62 0f       	add	r22, r18
    1d0e:	73 1f       	adc	r23, r19
    1d10:	84 1f       	adc	r24, r20
    1d12:	95 1f       	adc	r25, r21
    1d14:	a0 1d       	adc	r26, r0
    1d16:	08 95       	ret

00001d18 <__prologue_saves__>:
    1d18:	2f 92       	push	r2
    1d1a:	3f 92       	push	r3
    1d1c:	4f 92       	push	r4
    1d1e:	5f 92       	push	r5
    1d20:	6f 92       	push	r6
    1d22:	7f 92       	push	r7
    1d24:	8f 92       	push	r8
    1d26:	9f 92       	push	r9
    1d28:	af 92       	push	r10
    1d2a:	bf 92       	push	r11
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	ca 1b       	sub	r28, r26
    1d42:	db 0b       	sbc	r29, r27
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	09 94       	ijmp

00001d50 <__epilogue_restores__>:
    1d50:	2a 88       	ldd	r2, Y+18	; 0x12
    1d52:	39 88       	ldd	r3, Y+17	; 0x11
    1d54:	48 88       	ldd	r4, Y+16	; 0x10
    1d56:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d58:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d60:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d62:	b9 84       	ldd	r11, Y+9	; 0x09
    1d64:	c8 84       	ldd	r12, Y+8	; 0x08
    1d66:	df 80       	ldd	r13, Y+7	; 0x07
    1d68:	ee 80       	ldd	r14, Y+6	; 0x06
    1d6a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d6e:	1b 81       	ldd	r17, Y+3	; 0x03
    1d70:	aa 81       	ldd	r26, Y+2	; 0x02
    1d72:	b9 81       	ldd	r27, Y+1	; 0x01
    1d74:	ce 0f       	add	r28, r30
    1d76:	d1 1d       	adc	r29, r1
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	ed 01       	movw	r28, r26
    1d84:	08 95       	ret

00001d86 <_exit>:
    1d86:	f8 94       	cli

00001d88 <__stop_program>:
    1d88:	ff cf       	rjmp	.-2      	; 0x1d88 <__stop_program>
