
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  00001cdc  00001d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080027a  0080027a  00001eea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001eea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c45  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000140c  00000000  00000000  00004e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133b  00000000  00000000  0000627d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  000075b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c2  00000000  00000000  00007bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001067  00000000  00000000  0000848e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  000094f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_16>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <__vector_14+0x2a>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	ec ed       	ldi	r30, 0xDC	; 220
     3aa:	fc e1       	ldi	r31, 0x1C	; 28
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	aa 37       	cpi	r26, 0x7A	; 122
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	aa e7       	ldi	r26, 0x7A	; 122
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a4 39       	cpi	r26, 0x94	; 148
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
     3cc:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x116c>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x116c>
     3e6:	08 95       	ret

000003e8 <main>:
#include "test.h"
#include "SPI.h"

int main(void)
{
	setupInit();
     3e8:	0e 94 ab 04 	call	0x956	; 0x956 <setupInit>
	test_SRAM();
     3ec:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <test_SRAM>
	

	while (1) {
		//Put microcontroller to sleep until next interrupt. 
		sleep_now();
     3f0:	0e 94 23 02 	call	0x446	; 0x446 <sleep_now>
		                         
		
		
		test_resetMenu();
     3f4:	0e 94 a2 05 	call	0xb44	; 0xb44 <test_resetMenu>
		test_outputControllers(joystick_pos, slider_pos, buttons);		
     3f8:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <buttons>
     3fc:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <buttons+0x1>
     400:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <slider_pos>
     404:	50 91 85 02 	lds	r21, 0x0285	; 0x800285 <slider_pos+0x1>
     408:	60 91 7a 02 	lds	r22, 0x027A	; 0x80027a <__data_end>
     40c:	70 91 7b 02 	lds	r23, 0x027B	; 0x80027b <__data_end+0x1>
     410:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end+0x2>
     414:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <__data_end+0x3>
     418:	0e 94 5f 05 	call	0xabe	; 0xabe <test_outputControllers>
     41c:	e9 cf       	rjmp	.-46     	; 0x3f0 <main+0x8>

0000041e <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     41e:	85 b7       	in	r24, 0x35	; 53
     420:	8f 7e       	andi	r24, 0xEF	; 239
     422:	85 bf       	out	0x35, r24	; 53
     424:	84 b7       	in	r24, 0x34	; 52
     426:	8f 7d       	andi	r24, 0xDF	; 223
     428:	84 bf       	out	0x34, r24	; 52
     42a:	86 b7       	in	r24, 0x36	; 54
     42c:	8f 77       	andi	r24, 0x7F	; 127
     42e:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     430:	85 b7       	in	r24, 0x35	; 53
     432:	80 62       	ori	r24, 0x20	; 32
     434:	85 bf       	out	0x35, r24	; 53
     436:	88 95       	sleep
     438:	85 b7       	in	r24, 0x35	; 53
     43a:	8f 7d       	andi	r24, 0xDF	; 223
     43c:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     43e:	85 b7       	in	r24, 0x35	; 53
     440:	80 62       	ori	r24, 0x20	; 32
     442:	85 bf       	out	0x35, r24	; 53
     444:	08 95       	ret

00000446 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     446:	88 b1       	in	r24, 0x08	; 8
     448:	88 68       	ori	r24, 0x88	; 136
     44a:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     44c:	85 b7       	in	r24, 0x35	; 53
     44e:	80 62       	ori	r24, 0x20	; 32
     450:	85 bf       	out	0x35, r24	; 53
     452:	88 95       	sleep
     454:	85 b7       	in	r24, 0x35	; 53
     456:	8f 7d       	andi	r24, 0xDF	; 223
     458:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     45a:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	8f 7d       	andi	r24, 0xDF	; 223
     460:	85 bf       	out	0x35, r24	; 53
     462:	08 95       	ret

00000464 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     46a:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     474:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <joystickOffsetY>
     478:	08 95       	ret

0000047a <joystick_readPosition>:
}
void joystick_readPosition() {
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     48c:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     494:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     496:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <joystickOffsetX>
     49a:	c6 17       	cp	r28, r22
     49c:	80 f4       	brcc	.+32     	; 0x4be <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	2c 2f       	mov	r18, r28
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	26 1b       	sub	r18, r22
     4a6:	37 0b       	sbc	r19, r23
     4a8:	44 e6       	ldi	r20, 0x64	; 100
     4aa:	42 9f       	mul	r20, r18
     4ac:	c0 01       	movw	r24, r0
     4ae:	43 9f       	mul	r20, r19
     4b0:	90 0d       	add	r25, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	0e 94 11 09 	call	0x1222	; 0x1222 <__divmodhi4>
     4b8:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <__data_end>
     4bc:	14 c0       	rjmp	.+40     	; 0x4e6 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     4be:	46 2f       	mov	r20, r22
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	2c 2f       	mov	r18, r28
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	24 1b       	sub	r18, r20
     4c8:	35 0b       	sbc	r19, r21
     4ca:	64 e6       	ldi	r22, 0x64	; 100
     4cc:	62 9f       	mul	r22, r18
     4ce:	c0 01       	movw	r24, r0
     4d0:	63 9f       	mul	r22, r19
     4d2:	90 0d       	add	r25, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	6f ef       	ldi	r22, 0xFF	; 255
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	64 1b       	sub	r22, r20
     4dc:	75 0b       	sbc	r23, r21
     4de:	0e 94 11 09 	call	0x1222	; 0x1222 <__divmodhi4>
     4e2:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     4e6:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <joystickOffsetY>
     4ea:	e2 17       	cp	r30, r18
     4ec:	88 f4       	brcc	.+34     	; 0x510 <__stack+0x11>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     4ee:	62 2f       	mov	r22, r18
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	4e 2f       	mov	r20, r30
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	46 1b       	sub	r20, r22
     4f8:	57 0b       	sbc	r21, r23
     4fa:	24 e6       	ldi	r18, 0x64	; 100
     4fc:	24 9f       	mul	r18, r20
     4fe:	c0 01       	movw	r24, r0
     500:	25 9f       	mul	r18, r21
     502:	90 0d       	add	r25, r0
     504:	11 24       	eor	r1, r1
     506:	0e 94 11 09 	call	0x1222	; 0x1222 <__divmodhi4>
     50a:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <__data_end+0x1>
     50e:	13 c0       	rjmp	.+38     	; 0x536 <__stack+0x37>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	4e 2f       	mov	r20, r30
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	42 1b       	sub	r20, r18
     518:	53 0b       	sbc	r21, r19
     51a:	64 e6       	ldi	r22, 0x64	; 100
     51c:	64 9f       	mul	r22, r20
     51e:	c0 01       	movw	r24, r0
     520:	65 9f       	mul	r22, r21
     522:	90 0d       	add	r25, r0
     524:	11 24       	eor	r1, r1
     526:	6f ef       	ldi	r22, 0xFF	; 255
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	62 1b       	sub	r22, r18
     52c:	73 0b       	sbc	r23, r19
     52e:	0e 94 11 09 	call	0x1222	; 0x1222 <__divmodhi4>
     532:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     536:	ca e7       	ldi	r28, 0x7A	; 122
     538:	d2 e0       	ldi	r29, 0x02	; 2
     53a:	68 81       	ld	r22, Y
     53c:	06 2e       	mov	r0, r22
     53e:	00 0c       	add	r0, r0
     540:	77 0b       	sbc	r23, r23
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25
     546:	0e 94 78 07 	call	0xef0	; 0xef0 <__floatsisf>
     54a:	6b 01       	movw	r12, r22
     54c:	7c 01       	movw	r14, r24
     54e:	69 81       	ldd	r22, Y+1	; 0x01
     550:	06 2e       	mov	r0, r22
     552:	00 0c       	add	r0, r0
     554:	77 0b       	sbc	r23, r23
     556:	88 0b       	sbc	r24, r24
     558:	99 0b       	sbc	r25, r25
     55a:	0e 94 78 07 	call	0xef0	; 0xef0 <__floatsisf>
     55e:	a7 01       	movw	r20, r14
     560:	96 01       	movw	r18, r12
     562:	0e 94 6f 06 	call	0xcde	; 0xcde <atan2>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	44 eb       	ldi	r20, 0xB4	; 180
     56c:	53 e4       	ldi	r21, 0x43	; 67
     56e:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	5f e3       	ldi	r21, 0x3F	; 63
     57a:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     57e:	23 ec       	ldi	r18, 0xC3	; 195
     580:	35 ef       	ldi	r19, 0xF5	; 245
     582:	48 e4       	ldi	r20, 0x48	; 72
     584:	50 e4       	ldi	r21, 0x40	; 64
     586:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__divsf3>
     58a:	0e 94 40 07 	call	0xe80	; 0xe80 <__fixsfsi>
     58e:	7b 83       	std	Y+3, r23	; 0x03
     590:	6a 83       	std	Y+2, r22	; 0x02
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
     59e:	08 95       	ret

000005a0 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     5a0:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     5a2:	80 81       	ld	r24, Z
     5a4:	94 e0       	ldi	r25, 0x04	; 4
     5a6:	98 0f       	add	r25, r24
     5a8:	99 30       	cpi	r25, 0x09	; 9
     5aa:	20 f4       	brcc	.+8      	; 0x5b4 <joystick_getDirection+0x14>
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	9c 5f       	subi	r25, 0xFC	; 252
     5b0:	99 30       	cpi	r25, 0x09	; 9
     5b2:	90 f0       	brcs	.+36     	; 0x5d8 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     5b4:	85 30       	cpi	r24, 0x05	; 5
     5b6:	2c f0       	brlt	.+10     	; 0x5c2 <joystick_getDirection+0x22>
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
     5ba:	8f 5c       	subi	r24, 0xCF	; 207
     5bc:	83 36       	cpi	r24, 0x63	; 99
     5be:	38 f4       	brcc	.+14     	; 0x5ce <joystick_getDirection+0x2e>
     5c0:	0d c0       	rjmp	.+26     	; 0x5dc <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     5c2:	8c 3f       	cpi	r24, 0xFC	; 252
     5c4:	24 f4       	brge	.+8      	; 0x5ce <joystick_getDirection+0x2e>
     5c6:	81 81       	ldd	r24, Z+1	; 0x01
     5c8:	8f 5c       	subi	r24, 0xCF	; 207
     5ca:	83 36       	cpi	r24, 0x63	; 99
     5cc:	48 f0       	brcs	.+18     	; 0x5e0 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     5ce:	81 81       	ldd	r24, Z+1	; 0x01
     5d0:	8c 3f       	cpi	r24, 0xFC	; 252
     5d2:	44 f0       	brlt	.+16     	; 0x5e4 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     5d8:	84 e0       	ldi	r24, 0x04	; 4
     5da:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     5e4:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     5e6:	08 95       	ret

000005e8 <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     5e8:	8f e1       	ldi	r24, 0x1F	; 31
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 39 09 	call	0x1272	; 0x1272 <malloc>
	ptr->numChildren = 0;
     5f0:	fc 01       	movw	r30, r24
     5f2:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     5f4:	2a e0       	ldi	r18, 0x0A	; 10
     5f6:	ea e0       	ldi	r30, 0x0A	; 10
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	dc 01       	movw	r26, r24
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	2a 95       	dec	r18
     602:	e1 f7       	brne	.-8      	; 0x5fc <mainMenuInit+0x14>
	ptr->parent = NULL;
     604:	fc 01       	movw	r30, r24
     606:	11 8a       	std	Z+17, r1	; 0x11
     608:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     60a:	08 95       	ret

0000060c <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	7c 01       	movw	r14, r24
     61c:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     61e:	8f e1       	ldi	r24, 0x1F	; 31
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 39 09 	call	0x1272	; 0x1272 <malloc>
     626:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     628:	d7 01       	movw	r26, r14
     62a:	5e 96       	adiw	r26, 0x1e	; 30
     62c:	ec 91       	ld	r30, X
     62e:	5e 97       	sbiw	r26, 0x1e	; 30
     630:	c1 e0       	ldi	r28, 0x01	; 1
     632:	ce 0f       	add	r28, r30
     634:	5e 96       	adiw	r26, 0x1e	; 30
     636:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     638:	b6 01       	movw	r22, r12
     63a:	0e 94 b6 0a 	call	0x156c	; 0x156c <strcpy>
	childPtr->parent = parent;
     63e:	f8 01       	movw	r30, r16
     640:	f1 8a       	std	Z+17, r15	; 0x11
     642:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     644:	c7 30       	cpi	r28, 0x07	; 7
     646:	78 f4       	brcc	.+30     	; 0x666 <addChild+0x5a>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     648:	ec 2f       	mov	r30, r28
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	38 96       	adiw	r30, 0x08	; 8
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	ee 0d       	add	r30, r14
     654:	ff 1d       	adc	r31, r15
     656:	11 83       	std	Z+1, r17	; 0x01
     658:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     65a:	d8 01       	movw	r26, r16
     65c:	5e 96       	adiw	r26, 0x1e	; 30
     65e:	1c 92       	st	X, r1
	return childPtr;
     660:	80 2f       	mov	r24, r16
     662:	91 2f       	mov	r25, r17
     664:	02 c0       	rjmp	.+4      	; 0x66a <addChild+0x5e>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	08 95       	ret

0000067a <menuInit>:

MenuNode* menuInit(void)
{
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     686:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <mainMenuInit>
     68a:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     68c:	64 e1       	ldi	r22, 0x14	; 20
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
     694:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     696:	6e e1       	ldi	r22, 0x1E	; 30
     698:	71 e0       	ldi	r23, 0x01	; 1
     69a:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
	addChild(childPlayGame,"GAME 2");
     69e:	65 e2       	ldi	r22, 0x25	; 37
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	ce 01       	movw	r24, r28
     6a4:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     6a8:	6c e2       	ldi	r22, 0x2C	; 44
     6aa:	71 e0       	ldi	r23, 0x01	; 1
     6ac:	c7 01       	movw	r24, r14
     6ae:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
     6b2:	8c 01       	movw	r16, r24
     6b4:	c5 e0       	ldi	r28, 0x05	; 5
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     6b8:	66 e3       	ldi	r22, 0x36	; 54
     6ba:	71 e0       	ldi	r23, 0x01	; 1
     6bc:	c8 01       	movw	r24, r16
     6be:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
     6c2:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     6c4:	c9 f7       	brne	.-14     	; 0x6b8 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     6c6:	6e e3       	ldi	r22, 0x3E	; 62
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	c7 01       	movw	r24, r14
     6cc:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     6d0:	67 e4       	ldi	r22, 0x47	; 71
     6d2:	71 e0       	ldi	r23, 0x01	; 1
     6d4:	0e 94 06 03 	call	0x60c	; 0x60c <addChild>
	currentMenu.currentMenuItem = mainMenu;
     6d8:	ee e7       	ldi	r30, 0x7E	; 126
     6da:	f2 e0       	ldi	r31, 0x02	; 2
     6dc:	f1 82       	std	Z+1, r15	; 0x01
     6de:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     6e0:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     6e6:	c7 01       	movw	r24, r14
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	08 95       	ret

000006f6 <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     6f6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     6fa:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <currentMenu+0x3>
     6fe:	94 30       	cpi	r25, 0x04	; 4
     700:	09 f0       	breq	.+2      	; 0x704 <navigateMenu+0xe>
     702:	58 c0       	rjmp	.+176    	; 0x7b4 <navigateMenu+0xbe>
			switch (dir) {
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	e1 f1       	breq	.+120    	; 0x780 <navigateMenu+0x8a>
     708:	60 f1       	brcs	.+88     	; 0x762 <navigateMenu+0x6c>
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	c9 f0       	breq	.+50     	; 0x740 <navigateMenu+0x4a>
     70e:	83 30       	cpi	r24, 0x03	; 3
     710:	09 f0       	breq	.+2      	; 0x714 <navigateMenu+0x1e>
     712:	50 c0       	rjmp	.+160    	; 0x7b4 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     714:	ee e7       	ldi	r30, 0x7E	; 126
     716:	f2 e0       	ldi	r31, 0x02	; 2
     718:	92 81       	ldd	r25, Z+2	; 0x02
     71a:	49 2f       	mov	r20, r25
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	01 90       	ld	r0, Z+
     720:	f0 81       	ld	r31, Z
     722:	e0 2d       	mov	r30, r0
     724:	26 8d       	ldd	r18, Z+30	; 0x1e
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	31 09       	sbc	r19, r1
     72c:	42 17       	cp	r20, r18
     72e:	53 07       	cpc	r21, r19
     730:	24 f4       	brge	.+8      	; 0x73a <navigateMenu+0x44>
					currentMenu.childIndex++;
     732:	9f 5f       	subi	r25, 0xFF	; 255
     734:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <currentMenu+0x2>
     738:	3d c0       	rjmp	.+122    	; 0x7b4 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     73a:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <currentMenu+0x2>
     73e:	3a c0       	rjmp	.+116    	; 0x7b4 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     740:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <currentMenu+0x2>
     744:	99 23       	and	r25, r25
     746:	21 f0       	breq	.+8      	; 0x750 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     748:	91 50       	subi	r25, 0x01	; 1
     74a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <currentMenu+0x2>
     74e:	32 c0       	rjmp	.+100    	; 0x7b4 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     750:	ee e7       	ldi	r30, 0x7E	; 126
     752:	f2 e0       	ldi	r31, 0x02	; 2
     754:	a0 81       	ld	r26, Z
     756:	b1 81       	ldd	r27, Z+1	; 0x01
     758:	5e 96       	adiw	r26, 0x1e	; 30
     75a:	9c 91       	ld	r25, X
     75c:	91 50       	subi	r25, 0x01	; 1
     75e:	92 83       	std	Z+2, r25	; 0x02
     760:	29 c0       	rjmp	.+82     	; 0x7b4 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     762:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <currentMenu>
     766:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <currentMenu+0x1>
     76a:	20 89       	ldd	r18, Z+16	; 0x10
     76c:	31 89       	ldd	r19, Z+17	; 0x11
     76e:	21 15       	cp	r18, r1
     770:	31 05       	cpc	r19, r1
     772:	01 f1       	breq	.+64     	; 0x7b4 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     774:	ee e7       	ldi	r30, 0x7E	; 126
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	31 83       	std	Z+1, r19	; 0x01
     77a:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     77c:	12 82       	std	Z+2, r1	; 0x02
     77e:	1a c0       	rjmp	.+52     	; 0x7b4 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     780:	ae e7       	ldi	r26, 0x7E	; 126
     782:	b2 e0       	ldi	r27, 0x02	; 2
     784:	2d 91       	ld	r18, X+
     786:	3c 91       	ld	r19, X
     788:	11 97       	sbiw	r26, 0x01	; 1
     78a:	12 96       	adiw	r26, 0x02	; 2
     78c:	9c 91       	ld	r25, X
     78e:	12 97       	sbiw	r26, 0x02	; 2
     790:	e9 2f       	mov	r30, r25
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	39 96       	adiw	r30, 0x09	; 9
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	e2 0f       	add	r30, r18
     79c:	f3 1f       	adc	r31, r19
     79e:	01 90       	ld	r0, Z+
     7a0:	f0 81       	ld	r31, Z
     7a2:	e0 2d       	mov	r30, r0
     7a4:	96 8d       	ldd	r25, Z+30	; 0x1e
     7a6:	99 23       	and	r25, r25
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	fc 93       	st	X, r31
     7ae:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     7b0:	12 96       	adiw	r26, 0x02	; 2
     7b2:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     7b4:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <currentMenu+0x3>
     7b8:	08 95       	ret

000007ba <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
	oled_reset();
     7c2:	0e 94 27 04 	call	0x84e	; 0x84e <oled_reset>
	oled_home();
     7c6:	0e 94 48 04 	call	0x890	; 0x890 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     7ca:	ce e7       	ldi	r28, 0x7E	; 126
     7cc:	d2 e0       	ldi	r29, 0x02	; 2
     7ce:	88 81       	ld	r24, Y
     7d0:	99 81       	ldd	r25, Y+1	; 0x01
     7d2:	0e 94 83 04 	call	0x906	; 0x906 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     7d6:	e8 81       	ld	r30, Y
     7d8:	f9 81       	ldd	r31, Y+1	; 0x01
     7da:	86 8d       	ldd	r24, Z+30	; 0x1e
     7dc:	88 23       	and	r24, r24
     7de:	31 f1       	breq	.+76     	; 0x82c <menu_printCurrentMenu+0x72>
     7e0:	c0 e0       	ldi	r28, 0x00	; 0
     7e2:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     7e4:	0e e7       	ldi	r16, 0x7E	; 126
     7e6:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     7e8:	ce 01       	movw	r24, r28
     7ea:	02 96       	adiw	r24, 0x02	; 2
     7ec:	0e 94 7f 04 	call	0x8fe	; 0x8fe <oled_gotoLine>
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     7f0:	d8 01       	movw	r26, r16
     7f2:	8d 91       	ld	r24, X+
     7f4:	9c 91       	ld	r25, X
     7f6:	fe 01       	movw	r30, r28
     7f8:	39 96       	adiw	r30, 0x09	; 9
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	80 81       	ld	r24, Z
     804:	91 81       	ldd	r25, Z+1	; 0x01
     806:	0e 94 83 04 	call	0x906	; 0x906 <oled_print>
		if (currentMenu.childIndex == i) {
     80a:	f8 01       	movw	r30, r16
     80c:	82 81       	ldd	r24, Z+2	; 0x02
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	8c 17       	cp	r24, r28
     812:	9d 07       	cpc	r25, r29
     814:	11 f4       	brne	.+4      	; 0x81a <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     816:	0e 94 3d 04 	call	0x87a	; 0x87a <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     81a:	21 96       	adiw	r28, 0x01	; 1
     81c:	d8 01       	movw	r26, r16
     81e:	ed 91       	ld	r30, X+
     820:	fc 91       	ld	r31, X
     822:	86 8d       	ldd	r24, Z+30	; 0x1e
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	c8 17       	cp	r28, r24
     828:	d9 07       	cpc	r29, r25
     82a:	f4 f2       	brlt	.-68     	; 0x7e8 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     836:	80 55       	subi	r24, 0x50	; 80
     838:	e0 e0       	ldi	r30, 0x00	; 0
     83a:	f0 e1       	ldi	r31, 0x10	; 16
     83c:	80 83       	st	Z, r24
     83e:	86 2f       	mov	r24, r22
     840:	8f 70       	andi	r24, 0x0F	; 15
     842:	80 83       	st	Z, r24
     844:	62 95       	swap	r22
     846:	6f 70       	andi	r22, 0x0F	; 15
     848:	60 61       	ori	r22, 0x10	; 16
     84a:	60 83       	st	Z, r22
     84c:	08 95       	ret

0000084e <oled_reset>:
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	d2 e1       	ldi	r29, 0x12	; 18
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	81 2f       	mov	r24, r17
     85e:	0e 94 1b 04 	call	0x836	; 0x836 <oled_pos>
     862:	80 e8       	ldi	r24, 0x80	; 128
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	18 82       	st	Y, r1
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	e9 f7       	brne	.-6      	; 0x866 <oled_reset+0x18>
     86c:	1f 5f       	subi	r17, 0xFF	; 255
     86e:	18 30       	cpi	r17, 0x08	; 8
     870:	a1 f7       	brne	.-24     	; 0x85a <oled_reset+0xc>
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	08 95       	ret

0000087a <oled_print_arrow>:
     87a:	e0 e0       	ldi	r30, 0x00	; 0
     87c:	f2 e1       	ldi	r31, 0x12	; 18
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	80 83       	st	Z, r24
     882:	9c e3       	ldi	r25, 0x3C	; 60
     884:	90 83       	st	Z, r25
     886:	9e e7       	ldi	r25, 0x7E	; 126
     888:	90 83       	st	Z, r25
     88a:	80 83       	st	Z, r24
     88c:	80 83       	st	Z, r24
     88e:	08 95       	ret

00000890 <oled_home>:
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 1b 04 	call	0x836	; 0x836 <oled_pos>
     898:	08 95       	ret

0000089a <oled_init>:
     89a:	e0 e0       	ldi	r30, 0x00	; 0
     89c:	f0 e1       	ldi	r31, 0x10	; 16
     89e:	8e ea       	ldi	r24, 0xAE	; 174
     8a0:	80 83       	st	Z, r24
     8a2:	81 ea       	ldi	r24, 0xA1	; 161
     8a4:	80 83       	st	Z, r24
     8a6:	8a ed       	ldi	r24, 0xDA	; 218
     8a8:	80 83       	st	Z, r24
     8aa:	82 e1       	ldi	r24, 0x12	; 18
     8ac:	80 83       	st	Z, r24
     8ae:	88 ec       	ldi	r24, 0xC8	; 200
     8b0:	80 83       	st	Z, r24
     8b2:	88 ea       	ldi	r24, 0xA8	; 168
     8b4:	80 83       	st	Z, r24
     8b6:	8f e3       	ldi	r24, 0x3F	; 63
     8b8:	80 83       	st	Z, r24
     8ba:	85 ed       	ldi	r24, 0xD5	; 213
     8bc:	80 83       	st	Z, r24
     8be:	80 e8       	ldi	r24, 0x80	; 128
     8c0:	80 83       	st	Z, r24
     8c2:	81 e8       	ldi	r24, 0x81	; 129
     8c4:	80 83       	st	Z, r24
     8c6:	80 e5       	ldi	r24, 0x50	; 80
     8c8:	80 83       	st	Z, r24
     8ca:	89 ed       	ldi	r24, 0xD9	; 217
     8cc:	80 83       	st	Z, r24
     8ce:	81 e2       	ldi	r24, 0x21	; 33
     8d0:	80 83       	st	Z, r24
     8d2:	80 e2       	ldi	r24, 0x20	; 32
     8d4:	80 83       	st	Z, r24
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	80 83       	st	Z, r24
     8da:	8b ed       	ldi	r24, 0xDB	; 219
     8dc:	80 83       	st	Z, r24
     8de:	80 e3       	ldi	r24, 0x30	; 48
     8e0:	80 83       	st	Z, r24
     8e2:	8d ea       	ldi	r24, 0xAD	; 173
     8e4:	80 83       	st	Z, r24
     8e6:	10 82       	st	Z, r1
     8e8:	84 ea       	ldi	r24, 0xA4	; 164
     8ea:	80 83       	st	Z, r24
     8ec:	86 ea       	ldi	r24, 0xA6	; 166
     8ee:	80 83       	st	Z, r24
     8f0:	8f ea       	ldi	r24, 0xAF	; 175
     8f2:	80 83       	st	Z, r24
     8f4:	0e 94 27 04 	call	0x84e	; 0x84e <oled_reset>
     8f8:	0e 94 48 04 	call	0x890	; 0x890 <oled_home>
     8fc:	08 95       	ret

000008fe <oled_gotoLine>:
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	0e 94 1b 04 	call	0x836	; 0x836 <oled_pos>
     904:	08 95       	ret

00000906 <oled_print>:

void oled_print(char* character){
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	dc 01       	movw	r26, r24
	while (*character != '\0')
     90c:	8c 91       	ld	r24, X
     90e:	81 11       	cpse	r24, r1
     910:	1a c0       	rjmp	.+52     	; 0x946 <oled_print+0x40>
     912:	1e c0       	rjmp	.+60     	; 0x950 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     914:	ec 91       	ld	r30, X
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	b0 97       	sbiw	r30, 0x20	; 32
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	e2 0f       	add	r30, r18
     928:	f3 1f       	adc	r31, r19
     92a:	e2 56       	subi	r30, 0x62	; 98
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     930:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	28 30       	cpi	r18, 0x08	; 8
     938:	31 05       	cpc	r19, r1
     93a:	61 f7       	brne	.-40     	; 0x914 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     93c:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     93e:	8c 91       	ld	r24, X
     940:	81 11       	cpse	r24, r1
     942:	03 c0       	rjmp	.+6      	; 0x94a <oled_print+0x44>
     944:	05 c0       	rjmp	.+10     	; 0x950 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     946:	c0 e0       	ldi	r28, 0x00	; 0
     948:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	e2 cf       	rjmp	.-60     	; 0x914 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "SPI.h"

	void setupInit(void){
	xmem_init();
     956:	0e 94 55 06 	call	0xcaa	; 0xcaa <xmem_init>
	USART_init(MYUBRR);
     95a:	8f e1       	ldi	r24, 0x1F	; 31
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 44 06 	call	0xc88	; 0xc88 <USART_init>
	adcInit();
     962:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     966:	0e 94 32 02 	call	0x464	; 0x464 <joystickInit>
	touchButton_init();
     96a:	0e 94 19 06 	call	0xc32	; 0xc32 <touchButton_init>
	oled_init();
     96e:	0e 94 4d 04 	call	0x89a	; 0x89a <oled_init>
	timer_init();
     972:	0e 94 01 06 	call	0xc02	; 0xc02 <timer_init>
	sleep_init();
     976:	0e 94 0f 02 	call	0x41e	; 0x41e <sleep_init>
	menuInit();
     97a:	0e 94 3d 03 	call	0x67a	; 0x67a <menuInit>
	SPI_MasterInit();
     97e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <SPI_MasterInit>
     982:	08 95       	ret

00000984 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     98e:	c4 e8       	ldi	r28, 0x84	; 132
     990:	d2 e0       	ldi	r29, 0x02	; 2
     992:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	//select slave output
	DDRB = (1 << PB4);
     9a2:	80 e1       	ldi	r24, 0x10	; 16
     9a4:	87 bb       	out	0x17, r24	; 23
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5) | (1 << PB7);
     9a6:	80 ea       	ldi	r24, 0xA0	; 160
     9a8:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     9aa:	81 e5       	ldi	r24, 0x51	; 81
     9ac:	8d b9       	out	0x0d, r24	; 13
     9ae:	08 95       	ret

000009b0 <test_SRAM>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "menu.h"

void test_SRAM(void)
{
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     9c0:	8f e4       	ldi	r24, 0x4F	; 79
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	0e 94 08 0b 	call	0x1610	; 0x1610 <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     9cc:	0e 94 a6 0a 	call	0x154c	; 0x154c <rand>
     9d0:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9d2:	0e 94 ab 0a 	call	0x1556	; 0x1556 <srand>
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9da:	c1 2c       	mov	r12, r1
     9dc:	d1 2c       	mov	r13, r1

void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9de:	00 e0       	ldi	r16, 0x00	; 0
     9e0:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     9e2:	c7 e6       	ldi	r28, 0x67	; 103
     9e4:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9e6:	0e 94 a6 0a 	call	0x154c	; 0x154c <rand>
     9ea:	f6 01       	movw	r30, r12
     9ec:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9ee:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9f0:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9f2:	28 17       	cp	r18, r24
     9f4:	a9 f0       	breq	.+42     	; 0xa20 <test_SRAM+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     9f6:	99 27       	eor	r25, r25
     9f8:	9f 93       	push	r25
     9fa:	8f 93       	push	r24
     9fc:	1f 92       	push	r1
     9fe:	2f 93       	push	r18
     a00:	df 92       	push	r13
     a02:	cf 92       	push	r12
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	0e 94 08 0b 	call	0x1610	; 0x1610 <printf>
			write_errors++;
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	8d b7       	in	r24, 0x3d	; 61
     a12:	9e b7       	in	r25, 0x3e	; 62
     a14:	08 96       	adiw	r24, 0x08	; 8
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	9e bf       	out	0x3e, r25	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a20:	9f ef       	ldi	r25, 0xFF	; 255
     a22:	c9 1a       	sub	r12, r25
     a24:	d9 0a       	sbc	r13, r25
     a26:	c1 14       	cp	r12, r1
     a28:	88 e0       	ldi	r24, 0x08	; 8
     a2a:	d8 06       	cpc	r13, r24
     a2c:	e1 f6       	brne	.-72     	; 0x9e6 <test_SRAM+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     a2e:	c7 01       	movw	r24, r14
     a30:	0e 94 ab 0a 	call	0x1556	; 0x1556 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a34:	c0 e0       	ldi	r28, 0x00	; 0
     a36:	d0 e0       	ldi	r29, 0x00	; 0
void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a38:	e1 2c       	mov	r14, r1
     a3a:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     a3c:	0f 2e       	mov	r0, r31
     a3e:	f1 ea       	ldi	r31, 0xA1	; 161
     a40:	cf 2e       	mov	r12, r31
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	df 2e       	mov	r13, r31
     a46:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a48:	0e 94 a6 0a 	call	0x154c	; 0x154c <rand>
     a4c:	fe 01       	movw	r30, r28
     a4e:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a50:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a52:	28 17       	cp	r18, r24
     a54:	b1 f0       	breq	.+44     	; 0xa82 <test_SRAM+0xd2>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     a56:	99 27       	eor	r25, r25
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	1f 92       	push	r1
     a5e:	2f 93       	push	r18
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	df 92       	push	r13
     a66:	cf 92       	push	r12
     a68:	0e 94 08 0b 	call	0x1610	; 0x1610 <printf>
			i, retreived_value, some_value);
			retrieval_errors++;
     a6c:	9f ef       	ldi	r25, 0xFF	; 255
     a6e:	e9 1a       	sub	r14, r25
     a70:	f9 0a       	sbc	r15, r25
     a72:	8d b7       	in	r24, 0x3d	; 61
     a74:	9e b7       	in	r25, 0x3e	; 62
     a76:	08 96       	adiw	r24, 0x08	; 8
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	9e bf       	out	0x3e, r25	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a82:	21 96       	adiw	r28, 0x01	; 1
     a84:	c1 15       	cp	r28, r1
     a86:	98 e0       	ldi	r25, 0x08	; 8
     a88:	d9 07       	cpc	r29, r25
     a8a:	f1 f6       	brne	.-68     	; 0xa48 <test_SRAM+0x98>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
			i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
     a8c:	ff 92       	push	r15
     a8e:	ef 92       	push	r14
     a90:	1f 93       	push	r17
     a92:	0f 93       	push	r16
     a94:	8f ed       	ldi	r24, 0xDF	; 223
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	0e 94 08 0b 	call	0x1610	; 0x1610 <printf>
}
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	08 95       	ret

00000abe <test_outputControllers>:

void test_outputControllers(joystick_position_t joystick_pos, slider_position_t slider_pos, buttonValues_t buttons) {
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	c6 2f       	mov	r28, r22
     ad0:	d7 2f       	mov	r29, r23
     ad2:	d8 2e       	mov	r13, r24
     ad4:	c9 2e       	mov	r12, r25
     ad6:	14 2f       	mov	r17, r20
     ad8:	05 2f       	mov	r16, r21
     ada:	f2 2e       	mov	r15, r18
     adc:	e3 2e       	mov	r14, r19
	
	//clear terminal
	printf("\033\143");
     ade:	8a e3       	ldi	r24, 0x3A	; 58
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	9f 93       	push	r25
     ae4:	8f 93       	push	r24
     ae6:	0e 94 08 0b 	call	0x1610	; 0x1610 <printf>
		
	printf("x: %i y: %i\n\rSl L: %i SL R: %i\n\rB L: %i B R: %i\n\rAngle: %i\n", joystick_pos.x_pos, joystick_pos.y_pos, slider_pos.left_pos, slider_pos.right_pos,  buttons.left_button, buttons.right_button, joystick_pos.angle);
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	1f 92       	push	r1
     af0:	ef 92       	push	r14
     af2:	1f 92       	push	r1
     af4:	ff 92       	push	r15
     af6:	1f 92       	push	r1
     af8:	0f 93       	push	r16
     afa:	1f 92       	push	r1
     afc:	1f 93       	push	r17
     afe:	8d 2f       	mov	r24, r29
     b00:	0d 2e       	mov	r0, r29
     b02:	00 0c       	add	r0, r0
     b04:	99 0b       	sbc	r25, r25
     b06:	9f 93       	push	r25
     b08:	df 93       	push	r29
     b0a:	8c 2f       	mov	r24, r28
     b0c:	0c 2e       	mov	r0, r28
     b0e:	00 0c       	add	r0, r0
     b10:	99 0b       	sbc	r25, r25
     b12:	9f 93       	push	r25
     b14:	cf 93       	push	r28
     b16:	8d e3       	ldi	r24, 0x3D	; 61
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	9f 93       	push	r25
     b1c:	8f 93       	push	r24
     b1e:	0e 94 08 0b 	call	0x1610	; 0x1610 <printf>

	
}
     b22:	8d b7       	in	r24, 0x3d	; 61
     b24:	9e b7       	in	r25, 0x3e	; 62
     b26:	42 96       	adiw	r24, 0x12	; 18
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	9e bf       	out	0x3e, r25	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	8d bf       	out	0x3d, r24	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <test_resetMenu>:


void test_resetMenu(void) {
     b44:	08 95       	ret

00000b46 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
	cli();
     b68:	f8 94       	cli
	TCNT1 = 0x00;
     b6a:	1d bc       	out	0x2d, r1	; 45
     b6c:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     b6e:	8a e7       	ldi	r24, 0x7A	; 122
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 3d 02 	call	0x47a	; 0x47a <joystick_readPosition>
	slider_readPosition(&slider_pos);
     b76:	84 e8       	ldi	r24, 0x84	; 132
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	0e 94 c2 04 	call	0x984	; 0x984 <slider_readPosition>
	touchButton_readButtons(&buttons);
     b7e:	82 e8       	ldi	r24, 0x82	; 130
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 32 06 	call	0xc64	; 0xc64 <touchButton_readButtons>
	sei();
     b86:	78 94       	sei
}
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	7f 91       	pop	r23
     b96:	6f 91       	pop	r22
     b98:	5f 91       	pop	r21
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <__vector_16>:

ISR (TIMER0_COMP_vect) {
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	2f 93       	push	r18
     bb6:	3f 93       	push	r19
     bb8:	4f 93       	push	r20
     bba:	5f 93       	push	r21
     bbc:	6f 93       	push	r22
     bbe:	7f 93       	push	r23
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	af 93       	push	r26
     bc6:	bf 93       	push	r27
     bc8:	ef 93       	push	r30
     bca:	ff 93       	push	r31
	cli();
     bcc:	f8 94       	cli
	TCNT1 = 0x00;
     bce:	1d bc       	out	0x2d, r1	; 45
     bd0:	1c bc       	out	0x2c, r1	; 44
	navigateMenu(&joystick_pos);
     bd2:	8a e7       	ldi	r24, 0x7A	; 122
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <navigateMenu>
	menu_printCurrentMenu();
     bda:	0e 94 dd 03 	call	0x7ba	; 0x7ba <menu_printCurrentMenu>
	sei();
     bde:	78 94       	sei
}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <timer_init>:


void timer_init() {
	//Disable global interrupts
	cli();
     c02:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     c04:	89 b7       	in	r24, 0x39	; 57
     c06:	80 62       	ori	r24, 0x20	; 32
     c08:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     c0a:	1d bc       	out	0x2d, r1	; 45
     c0c:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     c0e:	80 e3       	ldi	r24, 0x30	; 48
     c10:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     c12:	85 e0       	ldi	r24, 0x05	; 5
     c14:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     c16:	80 ef       	ldi	r24, 0xF0	; 240
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	99 bd       	out	0x29, r25	; 41
     c1c:	88 bd       	out	0x28, r24	; 40
	
	
	////////////////////////TIMER 0////////////////////////////////////
	
	TIMSK |= (1 << OCIE0);
     c1e:	89 b7       	in	r24, 0x39	; 57
     c20:	81 60       	ori	r24, 0x01	; 1
     c22:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0x0; 
     c24:	12 be       	out	0x32, r1	; 50
	
	TCCR0 = (1 << COM01 | 1 << COM00 | 1 << CS02 | 1 << CS00);
     c26:	85 e3       	ldi	r24, 0x35	; 53
     c28:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = TIMER0_RESET;
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	81 bf       	out	0x31, r24	; 49
	
	
	//Enable global interrupts
	sei();
     c2e:	78 94       	sei
     c30:	08 95       	ret

00000c32 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     c32:	36 b3       	in	r19, 0x16	; 22
     c34:	26 b3       	in	r18, 0x16	; 22
     c36:	47 b3       	in	r20, 0x17	; 23
     c38:	31 70       	andi	r19, 0x01	; 1
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	bc 01       	movw	r22, r24
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <touchButton_init+0x14>
     c42:	66 0f       	add	r22, r22
     c44:	77 1f       	adc	r23, r23
     c46:	3a 95       	dec	r19
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <touchButton_init+0x10>
     c4a:	22 70       	andi	r18, 0x02	; 2
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <touchButton_init+0x20>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	2a 95       	dec	r18
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <touchButton_init+0x1c>
     c56:	86 2b       	or	r24, r22
     c58:	97 2b       	or	r25, r23
     c5a:	80 95       	com	r24
     c5c:	90 95       	com	r25
     c5e:	84 23       	and	r24, r20
     c60:	87 bb       	out	0x17, r24	; 23
     c62:	08 95       	ret

00000c64 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     c64:	86 b3       	in	r24, 0x16	; 22
     c66:	e2 e8       	ldi	r30, 0x82	; 130
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	81 70       	andi	r24, 0x01	; 1
     c6c:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     c6e:	86 b3       	in	r24, 0x16	; 22
     c70:	86 95       	lsr	r24
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	81 83       	std	Z+1, r24	; 0x01
     c76:	08 95       	ret

00000c78 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     c78:	5d 9b       	sbis	0x0b, 5	; 11
     c7a:	fe cf       	rjmp	.-4      	; 0xc78 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     c7c:	8c b9       	out	0x0c, r24	; 12
     c7e:	08 95       	ret

00000c80 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     c80:	5f 9b       	sbis	0x0b, 7	; 11
     c82:	fe cf       	rjmp	.-4      	; 0xc80 <USART_receiveChar>
		;
	
	return UDR0;
     c84:	8c b1       	in	r24, 0x0c	; 12
     c86:	08 95       	ret

00000c88 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     c88:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     c8a:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     c8c:	88 e1       	ldi	r24, 0x18	; 24
     c8e:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     c90:	8e e8       	ldi	r24, 0x8E	; 142
     c92:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     c94:	60 e4       	ldi	r22, 0x40	; 64
     c96:	76 e0       	ldi	r23, 0x06	; 6
     c98:	8c e3       	ldi	r24, 0x3C	; 60
     c9a:	96 e0       	ldi	r25, 0x06	; 6
     c9c:	0e 94 bd 0a 	call	0x157a	; 0x157a <fdevopen>
     ca0:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <uart+0x1>
     ca4:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <uart>
     ca8:	08 95       	ret

00000caa <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     caa:	85 b7       	in	r24, 0x35	; 53
     cac:	80 68       	ori	r24, 0x80	; 128
     cae:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     cb0:	80 b7       	in	r24, 0x30	; 48
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	80 bf       	out	0x30, r24	; 48
     cb6:	08 95       	ret
     cb8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscA>
     cbc:	60 f0       	brcs	.+24     	; 0xcd6 <xmem_init+0x2c>
     cbe:	80 e8       	ldi	r24, 0x80	; 128
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <xmem_init+0x1c>
     cc4:	9e ef       	ldi	r25, 0xFE	; 254
     cc6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_pscB>
     cca:	28 f0       	brcs	.+10     	; 0xcd6 <xmem_init+0x2c>
     ccc:	40 e8       	ldi	r20, 0x80	; 128
     cce:	51 e0       	ldi	r21, 0x01	; 1
     cd0:	71 f4       	brne	.+28     	; 0xcee <atan2+0x10>
     cd2:	5e ef       	ldi	r21, 0xFE	; 254
     cd4:	0c c0       	rjmp	.+24     	; 0xcee <atan2+0x10>
     cd6:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_nan>
     cda:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__fp_zero>

00000cde <atan2>:
     cde:	e9 2f       	mov	r30, r25
     ce0:	e0 78       	andi	r30, 0x80	; 128
     ce2:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_split3>
     ce6:	40 f3       	brcs	.-48     	; 0xcb8 <xmem_init+0xe>
     ce8:	09 2e       	mov	r0, r25
     cea:	05 2a       	or	r0, r21
     cec:	b1 f3       	breq	.-20     	; 0xcda <xmem_init+0x30>
     cee:	26 17       	cp	r18, r22
     cf0:	37 07       	cpc	r19, r23
     cf2:	48 07       	cpc	r20, r24
     cf4:	59 07       	cpc	r21, r25
     cf6:	38 f0       	brcs	.+14     	; 0xd06 <atan2+0x28>
     cf8:	0e 2e       	mov	r0, r30
     cfa:	07 f8       	bld	r0, 7
     cfc:	e0 25       	eor	r30, r0
     cfe:	69 f0       	breq	.+26     	; 0xd1a <atan2+0x3c>
     d00:	e0 25       	eor	r30, r0
     d02:	e0 64       	ori	r30, 0x40	; 64
     d04:	0a c0       	rjmp	.+20     	; 0xd1a <atan2+0x3c>
     d06:	ef 63       	ori	r30, 0x3F	; 63
     d08:	07 f8       	bld	r0, 7
     d0a:	00 94       	com	r0
     d0c:	07 fa       	bst	r0, 7
     d0e:	db 01       	movw	r26, r22
     d10:	b9 01       	movw	r22, r18
     d12:	9d 01       	movw	r18, r26
     d14:	dc 01       	movw	r26, r24
     d16:	ca 01       	movw	r24, r20
     d18:	ad 01       	movw	r20, r26
     d1a:	ef 93       	push	r30
     d1c:	0e 94 e5 06 	call	0xdca	; 0xdca <__divsf3_pse>
     d20:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_round>
     d24:	0e 94 9f 06 	call	0xd3e	; 0xd3e <atan>
     d28:	5f 91       	pop	r21
     d2a:	55 23       	and	r21, r21
     d2c:	39 f0       	breq	.+14     	; 0xd3c <atan2+0x5e>
     d2e:	2b ed       	ldi	r18, 0xDB	; 219
     d30:	3f e0       	ldi	r19, 0x0F	; 15
     d32:	49 e4       	ldi	r20, 0x49	; 73
     d34:	50 fd       	sbrc	r21, 0
     d36:	49 ec       	ldi	r20, 0xC9	; 201
     d38:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__addsf3>
     d3c:	08 95       	ret

00000d3e <atan>:
     d3e:	df 93       	push	r29
     d40:	dd 27       	eor	r29, r29
     d42:	b9 2f       	mov	r27, r25
     d44:	bf 77       	andi	r27, 0x7F	; 127
     d46:	40 e8       	ldi	r20, 0x80	; 128
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	16 16       	cp	r1, r22
     d4c:	17 06       	cpc	r1, r23
     d4e:	48 07       	cpc	r20, r24
     d50:	5b 07       	cpc	r21, r27
     d52:	18 f4       	brcc	.+6      	; 0xd5a <atan+0x1c>
     d54:	d9 2f       	mov	r29, r25
     d56:	0e 94 2b 08 	call	0x1056	; 0x1056 <inverse>
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	7f 93       	push	r23
     d60:	6f 93       	push	r22
     d62:	0e 94 a0 08 	call	0x1140	; 0x1140 <square>
     d66:	e0 e7       	ldi	r30, 0x70	; 112
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_powser>
     d6e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_round>
     d72:	2f 91       	pop	r18
     d74:	3f 91       	pop	r19
     d76:	4f 91       	pop	r20
     d78:	5f 91       	pop	r21
     d7a:	0e 94 46 08 	call	0x108c	; 0x108c <__mulsf3x>
     d7e:	dd 23       	and	r29, r29
     d80:	51 f0       	breq	.+20     	; 0xd96 <atan+0x58>
     d82:	90 58       	subi	r25, 0x80	; 128
     d84:	a2 ea       	ldi	r26, 0xA2	; 162
     d86:	2a ed       	ldi	r18, 0xDA	; 218
     d88:	3f e0       	ldi	r19, 0x0F	; 15
     d8a:	49 ec       	ldi	r20, 0xC9	; 201
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	d0 78       	andi	r29, 0x80	; 128
     d90:	5d 27       	eor	r21, r29
     d92:	0e 94 bc 08 	call	0x1178	; 0x1178 <__addsf3x>
     d96:	df 91       	pop	r29
     d98:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_round>

00000d9c <__divsf3>:
     d9c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__divsf3x>
     da0:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_round>
     da4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_pscB>
     da8:	58 f0       	brcs	.+22     	; 0xdc0 <__divsf3+0x24>
     daa:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscA>
     dae:	40 f0       	brcs	.+16     	; 0xdc0 <__divsf3+0x24>
     db0:	29 f4       	brne	.+10     	; 0xdbc <__divsf3+0x20>
     db2:	5f 3f       	cpi	r21, 0xFF	; 255
     db4:	29 f0       	breq	.+10     	; 0xdc0 <__divsf3+0x24>
     db6:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_inf>
     dba:	51 11       	cpse	r21, r1
     dbc:	0c 94 25 08 	jmp	0x104a	; 0x104a <__fp_szero>
     dc0:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_nan>

00000dc4 <__divsf3x>:
     dc4:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_split3>
     dc8:	68 f3       	brcs	.-38     	; 0xda4 <__divsf3+0x8>

00000dca <__divsf3_pse>:
     dca:	99 23       	and	r25, r25
     dcc:	b1 f3       	breq	.-20     	; 0xdba <__divsf3+0x1e>
     dce:	55 23       	and	r21, r21
     dd0:	91 f3       	breq	.-28     	; 0xdb6 <__divsf3+0x1a>
     dd2:	95 1b       	sub	r25, r21
     dd4:	55 0b       	sbc	r21, r21
     dd6:	bb 27       	eor	r27, r27
     dd8:	aa 27       	eor	r26, r26
     dda:	62 17       	cp	r22, r18
     ddc:	73 07       	cpc	r23, r19
     dde:	84 07       	cpc	r24, r20
     de0:	38 f0       	brcs	.+14     	; 0xdf0 <__divsf3_pse+0x26>
     de2:	9f 5f       	subi	r25, 0xFF	; 255
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	44 1f       	adc	r20, r20
     dec:	aa 1f       	adc	r26, r26
     dee:	a9 f3       	breq	.-22     	; 0xdda <__divsf3_pse+0x10>
     df0:	35 d0       	rcall	.+106    	; 0xe5c <__divsf3_pse+0x92>
     df2:	0e 2e       	mov	r0, r30
     df4:	3a f0       	brmi	.+14     	; 0xe04 <__divsf3_pse+0x3a>
     df6:	e0 e8       	ldi	r30, 0x80	; 128
     df8:	32 d0       	rcall	.+100    	; 0xe5e <__divsf3_pse+0x94>
     dfa:	91 50       	subi	r25, 0x01	; 1
     dfc:	50 40       	sbci	r21, 0x00	; 0
     dfe:	e6 95       	lsr	r30
     e00:	00 1c       	adc	r0, r0
     e02:	ca f7       	brpl	.-14     	; 0xdf6 <__divsf3_pse+0x2c>
     e04:	2b d0       	rcall	.+86     	; 0xe5c <__divsf3_pse+0x92>
     e06:	fe 2f       	mov	r31, r30
     e08:	29 d0       	rcall	.+82     	; 0xe5c <__divsf3_pse+0x92>
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	bb 1f       	adc	r27, r27
     e12:	26 17       	cp	r18, r22
     e14:	37 07       	cpc	r19, r23
     e16:	48 07       	cpc	r20, r24
     e18:	ab 07       	cpc	r26, r27
     e1a:	b0 e8       	ldi	r27, 0x80	; 128
     e1c:	09 f0       	breq	.+2      	; 0xe20 <__divsf3_pse+0x56>
     e1e:	bb 0b       	sbc	r27, r27
     e20:	80 2d       	mov	r24, r0
     e22:	bf 01       	movw	r22, r30
     e24:	ff 27       	eor	r31, r31
     e26:	93 58       	subi	r25, 0x83	; 131
     e28:	5f 4f       	sbci	r21, 0xFF	; 255
     e2a:	3a f0       	brmi	.+14     	; 0xe3a <__divsf3_pse+0x70>
     e2c:	9e 3f       	cpi	r25, 0xFE	; 254
     e2e:	51 05       	cpc	r21, r1
     e30:	78 f0       	brcs	.+30     	; 0xe50 <__divsf3_pse+0x86>
     e32:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_inf>
     e36:	0c 94 25 08 	jmp	0x104a	; 0x104a <__fp_szero>
     e3a:	5f 3f       	cpi	r21, 0xFF	; 255
     e3c:	e4 f3       	brlt	.-8      	; 0xe36 <__divsf3_pse+0x6c>
     e3e:	98 3e       	cpi	r25, 0xE8	; 232
     e40:	d4 f3       	brlt	.-12     	; 0xe36 <__divsf3_pse+0x6c>
     e42:	86 95       	lsr	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b7 95       	ror	r27
     e4a:	f7 95       	ror	r31
     e4c:	9f 5f       	subi	r25, 0xFF	; 255
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__divsf3_pse+0x78>
     e50:	88 0f       	add	r24, r24
     e52:	91 1d       	adc	r25, r1
     e54:	96 95       	lsr	r25
     e56:	87 95       	ror	r24
     e58:	97 f9       	bld	r25, 7
     e5a:	08 95       	ret
     e5c:	e1 e0       	ldi	r30, 0x01	; 1
     e5e:	66 0f       	add	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	88 1f       	adc	r24, r24
     e64:	bb 1f       	adc	r27, r27
     e66:	62 17       	cp	r22, r18
     e68:	73 07       	cpc	r23, r19
     e6a:	84 07       	cpc	r24, r20
     e6c:	ba 07       	cpc	r27, r26
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <__divsf3_pse+0xae>
     e70:	62 1b       	sub	r22, r18
     e72:	73 0b       	sbc	r23, r19
     e74:	84 0b       	sbc	r24, r20
     e76:	ba 0b       	sbc	r27, r26
     e78:	ee 1f       	adc	r30, r30
     e7a:	88 f7       	brcc	.-30     	; 0xe5e <__divsf3_pse+0x94>
     e7c:	e0 95       	com	r30
     e7e:	08 95       	ret

00000e80 <__fixsfsi>:
     e80:	0e 94 47 07 	call	0xe8e	; 0xe8e <__fixunssfsi>
     e84:	68 94       	set
     e86:	b1 11       	cpse	r27, r1
     e88:	0c 94 25 08 	jmp	0x104a	; 0x104a <__fp_szero>
     e8c:	08 95       	ret

00000e8e <__fixunssfsi>:
     e8e:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_splitA>
     e92:	88 f0       	brcs	.+34     	; 0xeb6 <__fixunssfsi+0x28>
     e94:	9f 57       	subi	r25, 0x7F	; 127
     e96:	98 f0       	brcs	.+38     	; 0xebe <__fixunssfsi+0x30>
     e98:	b9 2f       	mov	r27, r25
     e9a:	99 27       	eor	r25, r25
     e9c:	b7 51       	subi	r27, 0x17	; 23
     e9e:	b0 f0       	brcs	.+44     	; 0xecc <__fixunssfsi+0x3e>
     ea0:	e1 f0       	breq	.+56     	; 0xeda <__fixunssfsi+0x4c>
     ea2:	66 0f       	add	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	1a f0       	brmi	.+6      	; 0xeb2 <__fixunssfsi+0x24>
     eac:	ba 95       	dec	r27
     eae:	c9 f7       	brne	.-14     	; 0xea2 <__fixunssfsi+0x14>
     eb0:	14 c0       	rjmp	.+40     	; 0xeda <__fixunssfsi+0x4c>
     eb2:	b1 30       	cpi	r27, 0x01	; 1
     eb4:	91 f0       	breq	.+36     	; 0xeda <__fixunssfsi+0x4c>
     eb6:	0e 94 24 08 	call	0x1048	; 0x1048 <__fp_zero>
     eba:	b1 e0       	ldi	r27, 0x01	; 1
     ebc:	08 95       	ret
     ebe:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__fp_zero>
     ec2:	67 2f       	mov	r22, r23
     ec4:	78 2f       	mov	r23, r24
     ec6:	88 27       	eor	r24, r24
     ec8:	b8 5f       	subi	r27, 0xF8	; 248
     eca:	39 f0       	breq	.+14     	; 0xeda <__fixunssfsi+0x4c>
     ecc:	b9 3f       	cpi	r27, 0xF9	; 249
     ece:	cc f3       	brlt	.-14     	; 0xec2 <__fixunssfsi+0x34>
     ed0:	86 95       	lsr	r24
     ed2:	77 95       	ror	r23
     ed4:	67 95       	ror	r22
     ed6:	b3 95       	inc	r27
     ed8:	d9 f7       	brne	.-10     	; 0xed0 <__fixunssfsi+0x42>
     eda:	3e f4       	brtc	.+14     	; 0xeea <__fixunssfsi+0x5c>
     edc:	90 95       	com	r25
     ede:	80 95       	com	r24
     ee0:	70 95       	com	r23
     ee2:	61 95       	neg	r22
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	8f 4f       	sbci	r24, 0xFF	; 255
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	08 95       	ret

00000eec <__floatunsisf>:
     eec:	e8 94       	clt
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <__floatsisf+0x12>

00000ef0 <__floatsisf>:
     ef0:	97 fb       	bst	r25, 7
     ef2:	3e f4       	brtc	.+14     	; 0xf02 <__floatsisf+0x12>
     ef4:	90 95       	com	r25
     ef6:	80 95       	com	r24
     ef8:	70 95       	com	r23
     efa:	61 95       	neg	r22
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	8f 4f       	sbci	r24, 0xFF	; 255
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	99 23       	and	r25, r25
     f04:	a9 f0       	breq	.+42     	; 0xf30 <__floatsisf+0x40>
     f06:	f9 2f       	mov	r31, r25
     f08:	96 e9       	ldi	r25, 0x96	; 150
     f0a:	bb 27       	eor	r27, r27
     f0c:	93 95       	inc	r25
     f0e:	f6 95       	lsr	r31
     f10:	87 95       	ror	r24
     f12:	77 95       	ror	r23
     f14:	67 95       	ror	r22
     f16:	b7 95       	ror	r27
     f18:	f1 11       	cpse	r31, r1
     f1a:	f8 cf       	rjmp	.-16     	; 0xf0c <__floatsisf+0x1c>
     f1c:	fa f4       	brpl	.+62     	; 0xf5c <__floatsisf+0x6c>
     f1e:	bb 0f       	add	r27, r27
     f20:	11 f4       	brne	.+4      	; 0xf26 <__floatsisf+0x36>
     f22:	60 ff       	sbrs	r22, 0
     f24:	1b c0       	rjmp	.+54     	; 0xf5c <__floatsisf+0x6c>
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	16 c0       	rjmp	.+44     	; 0xf5c <__floatsisf+0x6c>
     f30:	88 23       	and	r24, r24
     f32:	11 f0       	breq	.+4      	; 0xf38 <__floatsisf+0x48>
     f34:	96 e9       	ldi	r25, 0x96	; 150
     f36:	11 c0       	rjmp	.+34     	; 0xf5a <__floatsisf+0x6a>
     f38:	77 23       	and	r23, r23
     f3a:	21 f0       	breq	.+8      	; 0xf44 <__floatsisf+0x54>
     f3c:	9e e8       	ldi	r25, 0x8E	; 142
     f3e:	87 2f       	mov	r24, r23
     f40:	76 2f       	mov	r23, r22
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <__floatsisf+0x5e>
     f44:	66 23       	and	r22, r22
     f46:	71 f0       	breq	.+28     	; 0xf64 <__floatsisf+0x74>
     f48:	96 e8       	ldi	r25, 0x86	; 134
     f4a:	86 2f       	mov	r24, r22
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	2a f0       	brmi	.+10     	; 0xf5c <__floatsisf+0x6c>
     f52:	9a 95       	dec	r25
     f54:	66 0f       	add	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	da f7       	brpl	.-10     	; 0xf52 <__floatsisf+0x62>
     f5c:	88 0f       	add	r24, r24
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret

00000f66 <__fp_inf>:
     f66:	97 f9       	bld	r25, 7
     f68:	9f 67       	ori	r25, 0x7F	; 127
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	08 95       	ret

00000f72 <__fp_nan>:
     f72:	9f ef       	ldi	r25, 0xFF	; 255
     f74:	80 ec       	ldi	r24, 0xC0	; 192
     f76:	08 95       	ret

00000f78 <__fp_powser>:
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	1f 93       	push	r17
     f7e:	0f 93       	push	r16
     f80:	ff 92       	push	r15
     f82:	ef 92       	push	r14
     f84:	df 92       	push	r13
     f86:	7b 01       	movw	r14, r22
     f88:	8c 01       	movw	r16, r24
     f8a:	68 94       	set
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <__fp_powser+0x22>
     f8e:	da 2e       	mov	r13, r26
     f90:	ef 01       	movw	r28, r30
     f92:	0e 94 46 08 	call	0x108c	; 0x108c <__mulsf3x>
     f96:	fe 01       	movw	r30, r28
     f98:	e8 94       	clt
     f9a:	a5 91       	lpm	r26, Z+
     f9c:	25 91       	lpm	r18, Z+
     f9e:	35 91       	lpm	r19, Z+
     fa0:	45 91       	lpm	r20, Z+
     fa2:	55 91       	lpm	r21, Z+
     fa4:	a6 f3       	brts	.-24     	; 0xf8e <__fp_powser+0x16>
     fa6:	ef 01       	movw	r28, r30
     fa8:	0e 94 bc 08 	call	0x1178	; 0x1178 <__addsf3x>
     fac:	fe 01       	movw	r30, r28
     fae:	97 01       	movw	r18, r14
     fb0:	a8 01       	movw	r20, r16
     fb2:	da 94       	dec	r13
     fb4:	69 f7       	brne	.-38     	; 0xf90 <__fp_powser+0x18>
     fb6:	df 90       	pop	r13
     fb8:	ef 90       	pop	r14
     fba:	ff 90       	pop	r15
     fbc:	0f 91       	pop	r16
     fbe:	1f 91       	pop	r17
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <__fp_pscA>:
     fc6:	00 24       	eor	r0, r0
     fc8:	0a 94       	dec	r0
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	18 06       	cpc	r1, r24
     fd0:	09 06       	cpc	r0, r25
     fd2:	08 95       	ret

00000fd4 <__fp_pscB>:
     fd4:	00 24       	eor	r0, r0
     fd6:	0a 94       	dec	r0
     fd8:	12 16       	cp	r1, r18
     fda:	13 06       	cpc	r1, r19
     fdc:	14 06       	cpc	r1, r20
     fde:	05 06       	cpc	r0, r21
     fe0:	08 95       	ret

00000fe2 <__fp_round>:
     fe2:	09 2e       	mov	r0, r25
     fe4:	03 94       	inc	r0
     fe6:	00 0c       	add	r0, r0
     fe8:	11 f4       	brne	.+4      	; 0xfee <__fp_round+0xc>
     fea:	88 23       	and	r24, r24
     fec:	52 f0       	brmi	.+20     	; 0x1002 <__fp_round+0x20>
     fee:	bb 0f       	add	r27, r27
     ff0:	40 f4       	brcc	.+16     	; 0x1002 <__fp_round+0x20>
     ff2:	bf 2b       	or	r27, r31
     ff4:	11 f4       	brne	.+4      	; 0xffa <__fp_round+0x18>
     ff6:	60 ff       	sbrs	r22, 0
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <__fp_round+0x20>
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	08 95       	ret

00001004 <__fp_split3>:
    1004:	57 fd       	sbrc	r21, 7
    1006:	90 58       	subi	r25, 0x80	; 128
    1008:	44 0f       	add	r20, r20
    100a:	55 1f       	adc	r21, r21
    100c:	59 f0       	breq	.+22     	; 0x1024 <__fp_splitA+0x10>
    100e:	5f 3f       	cpi	r21, 0xFF	; 255
    1010:	71 f0       	breq	.+28     	; 0x102e <__fp_splitA+0x1a>
    1012:	47 95       	ror	r20

00001014 <__fp_splitA>:
    1014:	88 0f       	add	r24, r24
    1016:	97 fb       	bst	r25, 7
    1018:	99 1f       	adc	r25, r25
    101a:	61 f0       	breq	.+24     	; 0x1034 <__fp_splitA+0x20>
    101c:	9f 3f       	cpi	r25, 0xFF	; 255
    101e:	79 f0       	breq	.+30     	; 0x103e <__fp_splitA+0x2a>
    1020:	87 95       	ror	r24
    1022:	08 95       	ret
    1024:	12 16       	cp	r1, r18
    1026:	13 06       	cpc	r1, r19
    1028:	14 06       	cpc	r1, r20
    102a:	55 1f       	adc	r21, r21
    102c:	f2 cf       	rjmp	.-28     	; 0x1012 <__fp_split3+0xe>
    102e:	46 95       	lsr	r20
    1030:	f1 df       	rcall	.-30     	; 0x1014 <__fp_splitA>
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <__fp_splitA+0x30>
    1034:	16 16       	cp	r1, r22
    1036:	17 06       	cpc	r1, r23
    1038:	18 06       	cpc	r1, r24
    103a:	99 1f       	adc	r25, r25
    103c:	f1 cf       	rjmp	.-30     	; 0x1020 <__fp_splitA+0xc>
    103e:	86 95       	lsr	r24
    1040:	71 05       	cpc	r23, r1
    1042:	61 05       	cpc	r22, r1
    1044:	08 94       	sec
    1046:	08 95       	ret

00001048 <__fp_zero>:
    1048:	e8 94       	clt

0000104a <__fp_szero>:
    104a:	bb 27       	eor	r27, r27
    104c:	66 27       	eor	r22, r22
    104e:	77 27       	eor	r23, r23
    1050:	cb 01       	movw	r24, r22
    1052:	97 f9       	bld	r25, 7
    1054:	08 95       	ret

00001056 <inverse>:
    1056:	9b 01       	movw	r18, r22
    1058:	ac 01       	movw	r20, r24
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e8       	ldi	r24, 0x80	; 128
    1060:	9f e3       	ldi	r25, 0x3F	; 63
    1062:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__divsf3>

00001066 <__mulsf3>:
    1066:	0e 94 46 08 	call	0x108c	; 0x108c <__mulsf3x>
    106a:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_round>
    106e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscA>
    1072:	38 f0       	brcs	.+14     	; 0x1082 <__mulsf3+0x1c>
    1074:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_pscB>
    1078:	20 f0       	brcs	.+8      	; 0x1082 <__mulsf3+0x1c>
    107a:	95 23       	and	r25, r21
    107c:	11 f0       	breq	.+4      	; 0x1082 <__mulsf3+0x1c>
    107e:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_inf>
    1082:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_nan>
    1086:	11 24       	eor	r1, r1
    1088:	0c 94 25 08 	jmp	0x104a	; 0x104a <__fp_szero>

0000108c <__mulsf3x>:
    108c:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_split3>
    1090:	70 f3       	brcs	.-36     	; 0x106e <__mulsf3+0x8>

00001092 <__mulsf3_pse>:
    1092:	95 9f       	mul	r25, r21
    1094:	c1 f3       	breq	.-16     	; 0x1086 <__mulsf3+0x20>
    1096:	95 0f       	add	r25, r21
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	55 1f       	adc	r21, r21
    109c:	62 9f       	mul	r22, r18
    109e:	f0 01       	movw	r30, r0
    10a0:	72 9f       	mul	r23, r18
    10a2:	bb 27       	eor	r27, r27
    10a4:	f0 0d       	add	r31, r0
    10a6:	b1 1d       	adc	r27, r1
    10a8:	63 9f       	mul	r22, r19
    10aa:	aa 27       	eor	r26, r26
    10ac:	f0 0d       	add	r31, r0
    10ae:	b1 1d       	adc	r27, r1
    10b0:	aa 1f       	adc	r26, r26
    10b2:	64 9f       	mul	r22, r20
    10b4:	66 27       	eor	r22, r22
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	66 1f       	adc	r22, r22
    10bc:	82 9f       	mul	r24, r18
    10be:	22 27       	eor	r18, r18
    10c0:	b0 0d       	add	r27, r0
    10c2:	a1 1d       	adc	r26, r1
    10c4:	62 1f       	adc	r22, r18
    10c6:	73 9f       	mul	r23, r19
    10c8:	b0 0d       	add	r27, r0
    10ca:	a1 1d       	adc	r26, r1
    10cc:	62 1f       	adc	r22, r18
    10ce:	83 9f       	mul	r24, r19
    10d0:	a0 0d       	add	r26, r0
    10d2:	61 1d       	adc	r22, r1
    10d4:	22 1f       	adc	r18, r18
    10d6:	74 9f       	mul	r23, r20
    10d8:	33 27       	eor	r19, r19
    10da:	a0 0d       	add	r26, r0
    10dc:	61 1d       	adc	r22, r1
    10de:	23 1f       	adc	r18, r19
    10e0:	84 9f       	mul	r24, r20
    10e2:	60 0d       	add	r22, r0
    10e4:	21 1d       	adc	r18, r1
    10e6:	82 2f       	mov	r24, r18
    10e8:	76 2f       	mov	r23, r22
    10ea:	6a 2f       	mov	r22, r26
    10ec:	11 24       	eor	r1, r1
    10ee:	9f 57       	subi	r25, 0x7F	; 127
    10f0:	50 40       	sbci	r21, 0x00	; 0
    10f2:	9a f0       	brmi	.+38     	; 0x111a <__mulsf3_pse+0x88>
    10f4:	f1 f0       	breq	.+60     	; 0x1132 <__mulsf3_pse+0xa0>
    10f6:	88 23       	and	r24, r24
    10f8:	4a f0       	brmi	.+18     	; 0x110c <__mulsf3_pse+0x7a>
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	bb 1f       	adc	r27, r27
    1100:	66 1f       	adc	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	a9 f7       	brne	.-22     	; 0x10f6 <__mulsf3_pse+0x64>
    110c:	9e 3f       	cpi	r25, 0xFE	; 254
    110e:	51 05       	cpc	r21, r1
    1110:	80 f0       	brcs	.+32     	; 0x1132 <__mulsf3_pse+0xa0>
    1112:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_inf>
    1116:	0c 94 25 08 	jmp	0x104a	; 0x104a <__fp_szero>
    111a:	5f 3f       	cpi	r21, 0xFF	; 255
    111c:	e4 f3       	brlt	.-8      	; 0x1116 <__mulsf3_pse+0x84>
    111e:	98 3e       	cpi	r25, 0xE8	; 232
    1120:	d4 f3       	brlt	.-12     	; 0x1116 <__mulsf3_pse+0x84>
    1122:	86 95       	lsr	r24
    1124:	77 95       	ror	r23
    1126:	67 95       	ror	r22
    1128:	b7 95       	ror	r27
    112a:	f7 95       	ror	r31
    112c:	e7 95       	ror	r30
    112e:	9f 5f       	subi	r25, 0xFF	; 255
    1130:	c1 f7       	brne	.-16     	; 0x1122 <__mulsf3_pse+0x90>
    1132:	fe 2b       	or	r31, r30
    1134:	88 0f       	add	r24, r24
    1136:	91 1d       	adc	r25, r1
    1138:	96 95       	lsr	r25
    113a:	87 95       	ror	r24
    113c:	97 f9       	bld	r25, 7
    113e:	08 95       	ret

00001140 <square>:
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__mulsf3>

00001148 <__subsf3>:
    1148:	50 58       	subi	r21, 0x80	; 128

0000114a <__addsf3>:
    114a:	bb 27       	eor	r27, r27
    114c:	aa 27       	eor	r26, r26
    114e:	0e 94 bc 08 	call	0x1178	; 0x1178 <__addsf3x>
    1152:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_round>
    1156:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscA>
    115a:	38 f0       	brcs	.+14     	; 0x116a <__addsf3+0x20>
    115c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_pscB>
    1160:	20 f0       	brcs	.+8      	; 0x116a <__addsf3+0x20>
    1162:	39 f4       	brne	.+14     	; 0x1172 <__addsf3+0x28>
    1164:	9f 3f       	cpi	r25, 0xFF	; 255
    1166:	19 f4       	brne	.+6      	; 0x116e <__addsf3+0x24>
    1168:	26 f4       	brtc	.+8      	; 0x1172 <__addsf3+0x28>
    116a:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_nan>
    116e:	0e f4       	brtc	.+2      	; 0x1172 <__addsf3+0x28>
    1170:	e0 95       	com	r30
    1172:	e7 fb       	bst	r30, 7
    1174:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_inf>

00001178 <__addsf3x>:
    1178:	e9 2f       	mov	r30, r25
    117a:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_split3>
    117e:	58 f3       	brcs	.-42     	; 0x1156 <__addsf3+0xc>
    1180:	ba 17       	cp	r27, r26
    1182:	62 07       	cpc	r22, r18
    1184:	73 07       	cpc	r23, r19
    1186:	84 07       	cpc	r24, r20
    1188:	95 07       	cpc	r25, r21
    118a:	20 f0       	brcs	.+8      	; 0x1194 <__addsf3x+0x1c>
    118c:	79 f4       	brne	.+30     	; 0x11ac <__addsf3x+0x34>
    118e:	a6 f5       	brtc	.+104    	; 0x11f8 <__addsf3x+0x80>
    1190:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__fp_zero>
    1194:	0e f4       	brtc	.+2      	; 0x1198 <__addsf3x+0x20>
    1196:	e0 95       	com	r30
    1198:	0b 2e       	mov	r0, r27
    119a:	ba 2f       	mov	r27, r26
    119c:	a0 2d       	mov	r26, r0
    119e:	0b 01       	movw	r0, r22
    11a0:	b9 01       	movw	r22, r18
    11a2:	90 01       	movw	r18, r0
    11a4:	0c 01       	movw	r0, r24
    11a6:	ca 01       	movw	r24, r20
    11a8:	a0 01       	movw	r20, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	ff 27       	eor	r31, r31
    11ae:	59 1b       	sub	r21, r25
    11b0:	99 f0       	breq	.+38     	; 0x11d8 <__addsf3x+0x60>
    11b2:	59 3f       	cpi	r21, 0xF9	; 249
    11b4:	50 f4       	brcc	.+20     	; 0x11ca <__addsf3x+0x52>
    11b6:	50 3e       	cpi	r21, 0xE0	; 224
    11b8:	68 f1       	brcs	.+90     	; 0x1214 <__addsf3x+0x9c>
    11ba:	1a 16       	cp	r1, r26
    11bc:	f0 40       	sbci	r31, 0x00	; 0
    11be:	a2 2f       	mov	r26, r18
    11c0:	23 2f       	mov	r18, r19
    11c2:	34 2f       	mov	r19, r20
    11c4:	44 27       	eor	r20, r20
    11c6:	58 5f       	subi	r21, 0xF8	; 248
    11c8:	f3 cf       	rjmp	.-26     	; 0x11b0 <__addsf3x+0x38>
    11ca:	46 95       	lsr	r20
    11cc:	37 95       	ror	r19
    11ce:	27 95       	ror	r18
    11d0:	a7 95       	ror	r26
    11d2:	f0 40       	sbci	r31, 0x00	; 0
    11d4:	53 95       	inc	r21
    11d6:	c9 f7       	brne	.-14     	; 0x11ca <__addsf3x+0x52>
    11d8:	7e f4       	brtc	.+30     	; 0x11f8 <__addsf3x+0x80>
    11da:	1f 16       	cp	r1, r31
    11dc:	ba 0b       	sbc	r27, r26
    11de:	62 0b       	sbc	r22, r18
    11e0:	73 0b       	sbc	r23, r19
    11e2:	84 0b       	sbc	r24, r20
    11e4:	ba f0       	brmi	.+46     	; 0x1214 <__addsf3x+0x9c>
    11e6:	91 50       	subi	r25, 0x01	; 1
    11e8:	a1 f0       	breq	.+40     	; 0x1212 <__addsf3x+0x9a>
    11ea:	ff 0f       	add	r31, r31
    11ec:	bb 1f       	adc	r27, r27
    11ee:	66 1f       	adc	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	88 1f       	adc	r24, r24
    11f4:	c2 f7       	brpl	.-16     	; 0x11e6 <__addsf3x+0x6e>
    11f6:	0e c0       	rjmp	.+28     	; 0x1214 <__addsf3x+0x9c>
    11f8:	ba 0f       	add	r27, r26
    11fa:	62 1f       	adc	r22, r18
    11fc:	73 1f       	adc	r23, r19
    11fe:	84 1f       	adc	r24, r20
    1200:	48 f4       	brcc	.+18     	; 0x1214 <__addsf3x+0x9c>
    1202:	87 95       	ror	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b7 95       	ror	r27
    120a:	f7 95       	ror	r31
    120c:	9e 3f       	cpi	r25, 0xFE	; 254
    120e:	08 f0       	brcs	.+2      	; 0x1212 <__addsf3x+0x9a>
    1210:	b0 cf       	rjmp	.-160    	; 0x1172 <__addsf3+0x28>
    1212:	93 95       	inc	r25
    1214:	88 0f       	add	r24, r24
    1216:	08 f0       	brcs	.+2      	; 0x121a <__addsf3x+0xa2>
    1218:	99 27       	eor	r25, r25
    121a:	ee 0f       	add	r30, r30
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	08 95       	ret

00001222 <__divmodhi4>:
    1222:	97 fb       	bst	r25, 7
    1224:	07 2e       	mov	r0, r23
    1226:	16 f4       	brtc	.+4      	; 0x122c <__divmodhi4+0xa>
    1228:	00 94       	com	r0
    122a:	07 d0       	rcall	.+14     	; 0x123a <__divmodhi4_neg1>
    122c:	77 fd       	sbrc	r23, 7
    122e:	09 d0       	rcall	.+18     	; 0x1242 <__divmodhi4_neg2>
    1230:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodhi4>
    1234:	07 fc       	sbrc	r0, 7
    1236:	05 d0       	rcall	.+10     	; 0x1242 <__divmodhi4_neg2>
    1238:	3e f4       	brtc	.+14     	; 0x1248 <__divmodhi4_exit>

0000123a <__divmodhi4_neg1>:
    123a:	90 95       	com	r25
    123c:	81 95       	neg	r24
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	08 95       	ret

00001242 <__divmodhi4_neg2>:
    1242:	70 95       	com	r23
    1244:	61 95       	neg	r22
    1246:	7f 4f       	sbci	r23, 0xFF	; 255

00001248 <__divmodhi4_exit>:
    1248:	08 95       	ret

0000124a <__udivmodhi4>:
    124a:	aa 1b       	sub	r26, r26
    124c:	bb 1b       	sub	r27, r27
    124e:	51 e1       	ldi	r21, 0x11	; 17
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <__udivmodhi4_ep>

00001252 <__udivmodhi4_loop>:
    1252:	aa 1f       	adc	r26, r26
    1254:	bb 1f       	adc	r27, r27
    1256:	a6 17       	cp	r26, r22
    1258:	b7 07       	cpc	r27, r23
    125a:	10 f0       	brcs	.+4      	; 0x1260 <__udivmodhi4_ep>
    125c:	a6 1b       	sub	r26, r22
    125e:	b7 0b       	sbc	r27, r23

00001260 <__udivmodhi4_ep>:
    1260:	88 1f       	adc	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	5a 95       	dec	r21
    1266:	a9 f7       	brne	.-22     	; 0x1252 <__udivmodhi4_loop>
    1268:	80 95       	com	r24
    126a:	90 95       	com	r25
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	08 95       	ret

00001272 <malloc>:
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	91 05       	cpc	r25, r1
    127e:	10 f4       	brcc	.+4      	; 0x1284 <malloc+0x12>
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <__flp>
    1288:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <__flp+0x1>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	a0 e0       	ldi	r26, 0x00	; 0
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	30 97       	sbiw	r30, 0x00	; 0
    1296:	19 f1       	breq	.+70     	; 0x12de <malloc+0x6c>
    1298:	40 81       	ld	r20, Z
    129a:	51 81       	ldd	r21, Z+1	; 0x01
    129c:	02 81       	ldd	r16, Z+2	; 0x02
    129e:	13 81       	ldd	r17, Z+3	; 0x03
    12a0:	48 17       	cp	r20, r24
    12a2:	59 07       	cpc	r21, r25
    12a4:	c8 f0       	brcs	.+50     	; 0x12d8 <malloc+0x66>
    12a6:	84 17       	cp	r24, r20
    12a8:	95 07       	cpc	r25, r21
    12aa:	69 f4       	brne	.+26     	; 0x12c6 <malloc+0x54>
    12ac:	10 97       	sbiw	r26, 0x00	; 0
    12ae:	31 f0       	breq	.+12     	; 0x12bc <malloc+0x4a>
    12b0:	12 96       	adiw	r26, 0x02	; 2
    12b2:	0c 93       	st	X, r16
    12b4:	12 97       	sbiw	r26, 0x02	; 2
    12b6:	13 96       	adiw	r26, 0x03	; 3
    12b8:	1c 93       	st	X, r17
    12ba:	27 c0       	rjmp	.+78     	; 0x130a <malloc+0x98>
    12bc:	00 93 8c 02 	sts	0x028C, r16	; 0x80028c <__flp>
    12c0:	10 93 8d 02 	sts	0x028D, r17	; 0x80028d <__flp+0x1>
    12c4:	22 c0       	rjmp	.+68     	; 0x130a <malloc+0x98>
    12c6:	21 15       	cp	r18, r1
    12c8:	31 05       	cpc	r19, r1
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <malloc+0x60>
    12cc:	42 17       	cp	r20, r18
    12ce:	53 07       	cpc	r21, r19
    12d0:	18 f4       	brcc	.+6      	; 0x12d8 <malloc+0x66>
    12d2:	9a 01       	movw	r18, r20
    12d4:	bd 01       	movw	r22, r26
    12d6:	ef 01       	movw	r28, r30
    12d8:	df 01       	movw	r26, r30
    12da:	f8 01       	movw	r30, r16
    12dc:	db cf       	rjmp	.-74     	; 0x1294 <malloc+0x22>
    12de:	21 15       	cp	r18, r1
    12e0:	31 05       	cpc	r19, r1
    12e2:	f9 f0       	breq	.+62     	; 0x1322 <malloc+0xb0>
    12e4:	28 1b       	sub	r18, r24
    12e6:	39 0b       	sbc	r19, r25
    12e8:	24 30       	cpi	r18, 0x04	; 4
    12ea:	31 05       	cpc	r19, r1
    12ec:	80 f4       	brcc	.+32     	; 0x130e <malloc+0x9c>
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	61 15       	cp	r22, r1
    12f4:	71 05       	cpc	r23, r1
    12f6:	21 f0       	breq	.+8      	; 0x1300 <malloc+0x8e>
    12f8:	fb 01       	movw	r30, r22
    12fa:	93 83       	std	Z+3, r25	; 0x03
    12fc:	82 83       	std	Z+2, r24	; 0x02
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <malloc+0x96>
    1300:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <__flp+0x1>
    1304:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <__flp>
    1308:	fe 01       	movw	r30, r28
    130a:	32 96       	adiw	r30, 0x02	; 2
    130c:	44 c0       	rjmp	.+136    	; 0x1396 <malloc+0x124>
    130e:	fe 01       	movw	r30, r28
    1310:	e2 0f       	add	r30, r18
    1312:	f3 1f       	adc	r31, r19
    1314:	81 93       	st	Z+, r24
    1316:	91 93       	st	Z+, r25
    1318:	22 50       	subi	r18, 0x02	; 2
    131a:	31 09       	sbc	r19, r1
    131c:	39 83       	std	Y+1, r19	; 0x01
    131e:	28 83       	st	Y, r18
    1320:	3a c0       	rjmp	.+116    	; 0x1396 <malloc+0x124>
    1322:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <__brkval>
    1326:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <__brkval+0x1>
    132a:	23 2b       	or	r18, r19
    132c:	41 f4       	brne	.+16     	; 0x133e <malloc+0xcc>
    132e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1332:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1336:	30 93 8b 02 	sts	0x028B, r19	; 0x80028b <__brkval+0x1>
    133a:	20 93 8a 02 	sts	0x028A, r18	; 0x80028a <__brkval>
    133e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1342:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1346:	21 15       	cp	r18, r1
    1348:	31 05       	cpc	r19, r1
    134a:	41 f4       	brne	.+16     	; 0x135c <malloc+0xea>
    134c:	2d b7       	in	r18, 0x3d	; 61
    134e:	3e b7       	in	r19, 0x3e	; 62
    1350:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1354:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1358:	24 1b       	sub	r18, r20
    135a:	35 0b       	sbc	r19, r21
    135c:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <__brkval>
    1360:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <__brkval+0x1>
    1364:	e2 17       	cp	r30, r18
    1366:	f3 07       	cpc	r31, r19
    1368:	a0 f4       	brcc	.+40     	; 0x1392 <malloc+0x120>
    136a:	2e 1b       	sub	r18, r30
    136c:	3f 0b       	sbc	r19, r31
    136e:	28 17       	cp	r18, r24
    1370:	39 07       	cpc	r19, r25
    1372:	78 f0       	brcs	.+30     	; 0x1392 <malloc+0x120>
    1374:	ac 01       	movw	r20, r24
    1376:	4e 5f       	subi	r20, 0xFE	; 254
    1378:	5f 4f       	sbci	r21, 0xFF	; 255
    137a:	24 17       	cp	r18, r20
    137c:	35 07       	cpc	r19, r21
    137e:	48 f0       	brcs	.+18     	; 0x1392 <malloc+0x120>
    1380:	4e 0f       	add	r20, r30
    1382:	5f 1f       	adc	r21, r31
    1384:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <__brkval+0x1>
    1388:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <__brkval>
    138c:	81 93       	st	Z+, r24
    138e:	91 93       	st	Z+, r25
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <malloc+0x124>
    1392:	e0 e0       	ldi	r30, 0x00	; 0
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	cf 01       	movw	r24, r30
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <free>:
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	09 f4       	brne	.+2      	; 0x13ac <free+0xa>
    13aa:	81 c0       	rjmp	.+258    	; 0x14ae <free+0x10c>
    13ac:	fc 01       	movw	r30, r24
    13ae:	32 97       	sbiw	r30, 0x02	; 2
    13b0:	13 82       	std	Z+3, r1	; 0x03
    13b2:	12 82       	std	Z+2, r1	; 0x02
    13b4:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <__flp>
    13b8:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <__flp+0x1>
    13bc:	10 97       	sbiw	r26, 0x00	; 0
    13be:	81 f4       	brne	.+32     	; 0x13e0 <free+0x3e>
    13c0:	20 81       	ld	r18, Z
    13c2:	31 81       	ldd	r19, Z+1	; 0x01
    13c4:	82 0f       	add	r24, r18
    13c6:	93 1f       	adc	r25, r19
    13c8:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <__brkval>
    13cc:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <__brkval+0x1>
    13d0:	28 17       	cp	r18, r24
    13d2:	39 07       	cpc	r19, r25
    13d4:	51 f5       	brne	.+84     	; 0x142a <free+0x88>
    13d6:	f0 93 8b 02 	sts	0x028B, r31	; 0x80028b <__brkval+0x1>
    13da:	e0 93 8a 02 	sts	0x028A, r30	; 0x80028a <__brkval>
    13de:	67 c0       	rjmp	.+206    	; 0x14ae <free+0x10c>
    13e0:	ed 01       	movw	r28, r26
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	ce 17       	cp	r28, r30
    13e8:	df 07       	cpc	r29, r31
    13ea:	40 f4       	brcc	.+16     	; 0x13fc <free+0x5a>
    13ec:	4a 81       	ldd	r20, Y+2	; 0x02
    13ee:	5b 81       	ldd	r21, Y+3	; 0x03
    13f0:	9e 01       	movw	r18, r28
    13f2:	41 15       	cp	r20, r1
    13f4:	51 05       	cpc	r21, r1
    13f6:	f1 f0       	breq	.+60     	; 0x1434 <free+0x92>
    13f8:	ea 01       	movw	r28, r20
    13fa:	f5 cf       	rjmp	.-22     	; 0x13e6 <free+0x44>
    13fc:	d3 83       	std	Z+3, r29	; 0x03
    13fe:	c2 83       	std	Z+2, r28	; 0x02
    1400:	40 81       	ld	r20, Z
    1402:	51 81       	ldd	r21, Z+1	; 0x01
    1404:	84 0f       	add	r24, r20
    1406:	95 1f       	adc	r25, r21
    1408:	c8 17       	cp	r28, r24
    140a:	d9 07       	cpc	r29, r25
    140c:	59 f4       	brne	.+22     	; 0x1424 <free+0x82>
    140e:	88 81       	ld	r24, Y
    1410:	99 81       	ldd	r25, Y+1	; 0x01
    1412:	84 0f       	add	r24, r20
    1414:	95 1f       	adc	r25, r21
    1416:	02 96       	adiw	r24, 0x02	; 2
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	80 83       	st	Z, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	93 83       	std	Z+3, r25	; 0x03
    1422:	82 83       	std	Z+2, r24	; 0x02
    1424:	21 15       	cp	r18, r1
    1426:	31 05       	cpc	r19, r1
    1428:	29 f4       	brne	.+10     	; 0x1434 <free+0x92>
    142a:	f0 93 8d 02 	sts	0x028D, r31	; 0x80028d <__flp+0x1>
    142e:	e0 93 8c 02 	sts	0x028C, r30	; 0x80028c <__flp>
    1432:	3d c0       	rjmp	.+122    	; 0x14ae <free+0x10c>
    1434:	e9 01       	movw	r28, r18
    1436:	fb 83       	std	Y+3, r31	; 0x03
    1438:	ea 83       	std	Y+2, r30	; 0x02
    143a:	49 91       	ld	r20, Y+
    143c:	59 91       	ld	r21, Y+
    143e:	c4 0f       	add	r28, r20
    1440:	d5 1f       	adc	r29, r21
    1442:	ec 17       	cp	r30, r28
    1444:	fd 07       	cpc	r31, r29
    1446:	61 f4       	brne	.+24     	; 0x1460 <free+0xbe>
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	84 0f       	add	r24, r20
    144e:	95 1f       	adc	r25, r21
    1450:	02 96       	adiw	r24, 0x02	; 2
    1452:	e9 01       	movw	r28, r18
    1454:	99 83       	std	Y+1, r25	; 0x01
    1456:	88 83       	st	Y, r24
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	9b 83       	std	Y+3, r25	; 0x03
    145e:	8a 83       	std	Y+2, r24	; 0x02
    1460:	e0 e0       	ldi	r30, 0x00	; 0
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	12 96       	adiw	r26, 0x02	; 2
    1466:	8d 91       	ld	r24, X+
    1468:	9c 91       	ld	r25, X
    146a:	13 97       	sbiw	r26, 0x03	; 3
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	19 f0       	breq	.+6      	; 0x1476 <free+0xd4>
    1470:	fd 01       	movw	r30, r26
    1472:	dc 01       	movw	r26, r24
    1474:	f7 cf       	rjmp	.-18     	; 0x1464 <free+0xc2>
    1476:	8d 91       	ld	r24, X+
    1478:	9c 91       	ld	r25, X
    147a:	11 97       	sbiw	r26, 0x01	; 1
    147c:	9d 01       	movw	r18, r26
    147e:	2e 5f       	subi	r18, 0xFE	; 254
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	82 0f       	add	r24, r18
    1484:	93 1f       	adc	r25, r19
    1486:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <__brkval>
    148a:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <__brkval+0x1>
    148e:	28 17       	cp	r18, r24
    1490:	39 07       	cpc	r19, r25
    1492:	69 f4       	brne	.+26     	; 0x14ae <free+0x10c>
    1494:	30 97       	sbiw	r30, 0x00	; 0
    1496:	29 f4       	brne	.+10     	; 0x14a2 <free+0x100>
    1498:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <__flp+0x1>
    149c:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <__flp>
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <free+0x104>
    14a2:	13 82       	std	Z+3, r1	; 0x03
    14a4:	12 82       	std	Z+2, r1	; 0x02
    14a6:	b0 93 8b 02 	sts	0x028B, r27	; 0x80028b <__brkval+0x1>
    14aa:	a0 93 8a 02 	sts	0x028A, r26	; 0x80028a <__brkval>
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <do_rand>:
    14b4:	8f 92       	push	r8
    14b6:	9f 92       	push	r9
    14b8:	af 92       	push	r10
    14ba:	bf 92       	push	r11
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	ec 01       	movw	r28, r24
    14ca:	68 81       	ld	r22, Y
    14cc:	79 81       	ldd	r23, Y+1	; 0x01
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	9b 81       	ldd	r25, Y+3	; 0x03
    14d2:	61 15       	cp	r22, r1
    14d4:	71 05       	cpc	r23, r1
    14d6:	81 05       	cpc	r24, r1
    14d8:	91 05       	cpc	r25, r1
    14da:	21 f4       	brne	.+8      	; 0x14e4 <do_rand+0x30>
    14dc:	64 e2       	ldi	r22, 0x24	; 36
    14de:	79 ed       	ldi	r23, 0xD9	; 217
    14e0:	8b e5       	ldi	r24, 0x5B	; 91
    14e2:	97 e0       	ldi	r25, 0x07	; 7
    14e4:	2d e1       	ldi	r18, 0x1D	; 29
    14e6:	33 ef       	ldi	r19, 0xF3	; 243
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__divmodsi4>
    14f0:	49 01       	movw	r8, r18
    14f2:	5a 01       	movw	r10, r20
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
    14f8:	a7 ea       	ldi	r26, 0xA7	; 167
    14fa:	b1 e4       	ldi	r27, 0x41	; 65
    14fc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__muluhisi3>
    1500:	6b 01       	movw	r12, r22
    1502:	7c 01       	movw	r14, r24
    1504:	ac ee       	ldi	r26, 0xEC	; 236
    1506:	b4 ef       	ldi	r27, 0xF4	; 244
    1508:	a5 01       	movw	r20, r10
    150a:	94 01       	movw	r18, r8
    150c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__mulohisi3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	8c 0d       	add	r24, r12
    1516:	9d 1d       	adc	r25, r13
    1518:	ae 1d       	adc	r26, r14
    151a:	bf 1d       	adc	r27, r15
    151c:	b7 ff       	sbrs	r27, 7
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <do_rand+0x72>
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	a1 09       	sbc	r26, r1
    1524:	b0 48       	sbci	r27, 0x80	; 128
    1526:	88 83       	st	Y, r24
    1528:	99 83       	std	Y+1, r25	; 0x01
    152a:	aa 83       	std	Y+2, r26	; 0x02
    152c:	bb 83       	std	Y+3, r27	; 0x03
    152e:	9f 77       	andi	r25, 0x7F	; 127
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	bf 90       	pop	r11
    153e:	af 90       	pop	r10
    1540:	9f 90       	pop	r9
    1542:	8f 90       	pop	r8
    1544:	08 95       	ret

00001546 <rand_r>:
    1546:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <do_rand>
    154a:	08 95       	ret

0000154c <rand>:
    154c:	86 e0       	ldi	r24, 0x06	; 6
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <do_rand>
    1554:	08 95       	ret

00001556 <srand>:
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    155e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1562:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1566:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    156a:	08 95       	ret

0000156c <strcpy>:
    156c:	fb 01       	movw	r30, r22
    156e:	dc 01       	movw	r26, r24
    1570:	01 90       	ld	r0, Z+
    1572:	0d 92       	st	X+, r0
    1574:	00 20       	and	r0, r0
    1576:	e1 f7       	brne	.-8      	; 0x1570 <strcpy+0x4>
    1578:	08 95       	ret

0000157a <fdevopen>:
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	31 f4       	brne	.+12     	; 0x1592 <fdevopen+0x18>
    1586:	61 15       	cp	r22, r1
    1588:	71 05       	cpc	r23, r1
    158a:	19 f4       	brne	.+6      	; 0x1592 <fdevopen+0x18>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	3a c0       	rjmp	.+116    	; 0x1606 <fdevopen+0x8c>
    1592:	8b 01       	movw	r16, r22
    1594:	ec 01       	movw	r28, r24
    1596:	6e e0       	ldi	r22, 0x0E	; 14
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <calloc>
    15a2:	fc 01       	movw	r30, r24
    15a4:	89 2b       	or	r24, r25
    15a6:	91 f3       	breq	.-28     	; 0x158c <fdevopen+0x12>
    15a8:	80 e8       	ldi	r24, 0x80	; 128
    15aa:	83 83       	std	Z+3, r24	; 0x03
    15ac:	01 15       	cp	r16, r1
    15ae:	11 05       	cpc	r17, r1
    15b0:	71 f0       	breq	.+28     	; 0x15ce <fdevopen+0x54>
    15b2:	13 87       	std	Z+11, r17	; 0x0b
    15b4:	02 87       	std	Z+10, r16	; 0x0a
    15b6:	81 e8       	ldi	r24, 0x81	; 129
    15b8:	83 83       	std	Z+3, r24	; 0x03
    15ba:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__iob>
    15be:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__iob+0x1>
    15c2:	89 2b       	or	r24, r25
    15c4:	21 f4       	brne	.+8      	; 0x15ce <fdevopen+0x54>
    15c6:	f0 93 8f 02 	sts	0x028F, r31	; 0x80028f <__iob+0x1>
    15ca:	e0 93 8e 02 	sts	0x028E, r30	; 0x80028e <__iob>
    15ce:	20 97       	sbiw	r28, 0x00	; 0
    15d0:	c9 f0       	breq	.+50     	; 0x1604 <fdevopen+0x8a>
    15d2:	d1 87       	std	Z+9, r29	; 0x09
    15d4:	c0 87       	std	Z+8, r28	; 0x08
    15d6:	83 81       	ldd	r24, Z+3	; 0x03
    15d8:	82 60       	ori	r24, 0x02	; 2
    15da:	83 83       	std	Z+3, r24	; 0x03
    15dc:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__iob+0x2>
    15e0:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__iob+0x3>
    15e4:	89 2b       	or	r24, r25
    15e6:	71 f4       	brne	.+28     	; 0x1604 <fdevopen+0x8a>
    15e8:	f0 93 91 02 	sts	0x0291, r31	; 0x800291 <__iob+0x3>
    15ec:	e0 93 90 02 	sts	0x0290, r30	; 0x800290 <__iob+0x2>
    15f0:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__iob+0x4>
    15f4:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__iob+0x5>
    15f8:	89 2b       	or	r24, r25
    15fa:	21 f4       	brne	.+8      	; 0x1604 <fdevopen+0x8a>
    15fc:	f0 93 93 02 	sts	0x0293, r31	; 0x800293 <__iob+0x5>
    1600:	e0 93 92 02 	sts	0x0292, r30	; 0x800292 <__iob+0x4>
    1604:	cf 01       	movw	r24, r30
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	08 95       	ret

00001610 <printf>:
    1610:	a0 e0       	ldi	r26, 0x00	; 0
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e0       	ldi	r30, 0x0E	; 14
    1616:	fb e0       	ldi	r31, 0x0B	; 11
    1618:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__prologue_saves__+0x20>
    161c:	ae 01       	movw	r20, r28
    161e:	4b 5f       	subi	r20, 0xFB	; 251
    1620:	5f 4f       	sbci	r21, 0xFF	; 255
    1622:	fa 01       	movw	r30, r20
    1624:	61 91       	ld	r22, Z+
    1626:	71 91       	ld	r23, Z+
    1628:	af 01       	movw	r20, r30
    162a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__iob+0x2>
    162e:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__iob+0x3>
    1632:	0e 94 1e 0b 	call	0x163c	; 0x163c <vfprintf>
    1636:	e2 e0       	ldi	r30, 0x02	; 2
    1638:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__epilogue_restores__+0x20>

0000163c <vfprintf>:
    163c:	ab e0       	ldi	r26, 0x0B	; 11
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e4 e2       	ldi	r30, 0x24	; 36
    1642:	fb e0       	ldi	r31, 0x0B	; 11
    1644:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__prologue_saves__>
    1648:	6c 01       	movw	r12, r24
    164a:	7b 01       	movw	r14, r22
    164c:	8a 01       	movw	r16, r20
    164e:	fc 01       	movw	r30, r24
    1650:	17 82       	std	Z+7, r1	; 0x07
    1652:	16 82       	std	Z+6, r1	; 0x06
    1654:	83 81       	ldd	r24, Z+3	; 0x03
    1656:	81 ff       	sbrs	r24, 1
    1658:	cc c1       	rjmp	.+920    	; 0x19f2 <vfprintf+0x3b6>
    165a:	ce 01       	movw	r24, r28
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	3c 01       	movw	r6, r24
    1660:	f6 01       	movw	r30, r12
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	f7 01       	movw	r30, r14
    1666:	93 fd       	sbrc	r25, 3
    1668:	85 91       	lpm	r24, Z+
    166a:	93 ff       	sbrs	r25, 3
    166c:	81 91       	ld	r24, Z+
    166e:	7f 01       	movw	r14, r30
    1670:	88 23       	and	r24, r24
    1672:	09 f4       	brne	.+2      	; 0x1676 <vfprintf+0x3a>
    1674:	ba c1       	rjmp	.+884    	; 0x19ea <vfprintf+0x3ae>
    1676:	85 32       	cpi	r24, 0x25	; 37
    1678:	39 f4       	brne	.+14     	; 0x1688 <vfprintf+0x4c>
    167a:	93 fd       	sbrc	r25, 3
    167c:	85 91       	lpm	r24, Z+
    167e:	93 ff       	sbrs	r25, 3
    1680:	81 91       	ld	r24, Z+
    1682:	7f 01       	movw	r14, r30
    1684:	85 32       	cpi	r24, 0x25	; 37
    1686:	29 f4       	brne	.+10     	; 0x1692 <vfprintf+0x56>
    1688:	b6 01       	movw	r22, r12
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    1690:	e7 cf       	rjmp	.-50     	; 0x1660 <vfprintf+0x24>
    1692:	91 2c       	mov	r9, r1
    1694:	21 2c       	mov	r2, r1
    1696:	31 2c       	mov	r3, r1
    1698:	ff e1       	ldi	r31, 0x1F	; 31
    169a:	f3 15       	cp	r31, r3
    169c:	d8 f0       	brcs	.+54     	; 0x16d4 <vfprintf+0x98>
    169e:	8b 32       	cpi	r24, 0x2B	; 43
    16a0:	79 f0       	breq	.+30     	; 0x16c0 <vfprintf+0x84>
    16a2:	38 f4       	brcc	.+14     	; 0x16b2 <vfprintf+0x76>
    16a4:	80 32       	cpi	r24, 0x20	; 32
    16a6:	79 f0       	breq	.+30     	; 0x16c6 <vfprintf+0x8a>
    16a8:	83 32       	cpi	r24, 0x23	; 35
    16aa:	a1 f4       	brne	.+40     	; 0x16d4 <vfprintf+0x98>
    16ac:	23 2d       	mov	r18, r3
    16ae:	20 61       	ori	r18, 0x10	; 16
    16b0:	1d c0       	rjmp	.+58     	; 0x16ec <vfprintf+0xb0>
    16b2:	8d 32       	cpi	r24, 0x2D	; 45
    16b4:	61 f0       	breq	.+24     	; 0x16ce <vfprintf+0x92>
    16b6:	80 33       	cpi	r24, 0x30	; 48
    16b8:	69 f4       	brne	.+26     	; 0x16d4 <vfprintf+0x98>
    16ba:	23 2d       	mov	r18, r3
    16bc:	21 60       	ori	r18, 0x01	; 1
    16be:	16 c0       	rjmp	.+44     	; 0x16ec <vfprintf+0xb0>
    16c0:	83 2d       	mov	r24, r3
    16c2:	82 60       	ori	r24, 0x02	; 2
    16c4:	38 2e       	mov	r3, r24
    16c6:	e3 2d       	mov	r30, r3
    16c8:	e4 60       	ori	r30, 0x04	; 4
    16ca:	3e 2e       	mov	r3, r30
    16cc:	2a c0       	rjmp	.+84     	; 0x1722 <vfprintf+0xe6>
    16ce:	f3 2d       	mov	r31, r3
    16d0:	f8 60       	ori	r31, 0x08	; 8
    16d2:	1d c0       	rjmp	.+58     	; 0x170e <vfprintf+0xd2>
    16d4:	37 fc       	sbrc	r3, 7
    16d6:	2d c0       	rjmp	.+90     	; 0x1732 <vfprintf+0xf6>
    16d8:	20 ed       	ldi	r18, 0xD0	; 208
    16da:	28 0f       	add	r18, r24
    16dc:	2a 30       	cpi	r18, 0x0A	; 10
    16de:	40 f0       	brcs	.+16     	; 0x16f0 <vfprintf+0xb4>
    16e0:	8e 32       	cpi	r24, 0x2E	; 46
    16e2:	b9 f4       	brne	.+46     	; 0x1712 <vfprintf+0xd6>
    16e4:	36 fc       	sbrc	r3, 6
    16e6:	81 c1       	rjmp	.+770    	; 0x19ea <vfprintf+0x3ae>
    16e8:	23 2d       	mov	r18, r3
    16ea:	20 64       	ori	r18, 0x40	; 64
    16ec:	32 2e       	mov	r3, r18
    16ee:	19 c0       	rjmp	.+50     	; 0x1722 <vfprintf+0xe6>
    16f0:	36 fe       	sbrs	r3, 6
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <vfprintf+0xc4>
    16f4:	8a e0       	ldi	r24, 0x0A	; 10
    16f6:	98 9e       	mul	r9, r24
    16f8:	20 0d       	add	r18, r0
    16fa:	11 24       	eor	r1, r1
    16fc:	92 2e       	mov	r9, r18
    16fe:	11 c0       	rjmp	.+34     	; 0x1722 <vfprintf+0xe6>
    1700:	ea e0       	ldi	r30, 0x0A	; 10
    1702:	2e 9e       	mul	r2, r30
    1704:	20 0d       	add	r18, r0
    1706:	11 24       	eor	r1, r1
    1708:	22 2e       	mov	r2, r18
    170a:	f3 2d       	mov	r31, r3
    170c:	f0 62       	ori	r31, 0x20	; 32
    170e:	3f 2e       	mov	r3, r31
    1710:	08 c0       	rjmp	.+16     	; 0x1722 <vfprintf+0xe6>
    1712:	8c 36       	cpi	r24, 0x6C	; 108
    1714:	21 f4       	brne	.+8      	; 0x171e <vfprintf+0xe2>
    1716:	83 2d       	mov	r24, r3
    1718:	80 68       	ori	r24, 0x80	; 128
    171a:	38 2e       	mov	r3, r24
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <vfprintf+0xe6>
    171e:	88 36       	cpi	r24, 0x68	; 104
    1720:	41 f4       	brne	.+16     	; 0x1732 <vfprintf+0xf6>
    1722:	f7 01       	movw	r30, r14
    1724:	93 fd       	sbrc	r25, 3
    1726:	85 91       	lpm	r24, Z+
    1728:	93 ff       	sbrs	r25, 3
    172a:	81 91       	ld	r24, Z+
    172c:	7f 01       	movw	r14, r30
    172e:	81 11       	cpse	r24, r1
    1730:	b3 cf       	rjmp	.-154    	; 0x1698 <vfprintf+0x5c>
    1732:	98 2f       	mov	r25, r24
    1734:	9f 7d       	andi	r25, 0xDF	; 223
    1736:	95 54       	subi	r25, 0x45	; 69
    1738:	93 30       	cpi	r25, 0x03	; 3
    173a:	28 f4       	brcc	.+10     	; 0x1746 <vfprintf+0x10a>
    173c:	0c 5f       	subi	r16, 0xFC	; 252
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	9f e3       	ldi	r25, 0x3F	; 63
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <vfprintf+0x124>
    1746:	83 36       	cpi	r24, 0x63	; 99
    1748:	31 f0       	breq	.+12     	; 0x1756 <vfprintf+0x11a>
    174a:	83 37       	cpi	r24, 0x73	; 115
    174c:	71 f0       	breq	.+28     	; 0x176a <vfprintf+0x12e>
    174e:	83 35       	cpi	r24, 0x53	; 83
    1750:	09 f0       	breq	.+2      	; 0x1754 <vfprintf+0x118>
    1752:	59 c0       	rjmp	.+178    	; 0x1806 <vfprintf+0x1ca>
    1754:	21 c0       	rjmp	.+66     	; 0x1798 <vfprintf+0x15c>
    1756:	f8 01       	movw	r30, r16
    1758:	80 81       	ld	r24, Z
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	0e 5f       	subi	r16, 0xFE	; 254
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	88 24       	eor	r8, r8
    1762:	83 94       	inc	r8
    1764:	91 2c       	mov	r9, r1
    1766:	53 01       	movw	r10, r6
    1768:	13 c0       	rjmp	.+38     	; 0x1790 <vfprintf+0x154>
    176a:	28 01       	movw	r4, r16
    176c:	f2 e0       	ldi	r31, 0x02	; 2
    176e:	4f 0e       	add	r4, r31
    1770:	51 1c       	adc	r5, r1
    1772:	f8 01       	movw	r30, r16
    1774:	a0 80       	ld	r10, Z
    1776:	b1 80       	ldd	r11, Z+1	; 0x01
    1778:	36 fe       	sbrs	r3, 6
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <vfprintf+0x146>
    177c:	69 2d       	mov	r22, r9
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <vfprintf+0x14a>
    1782:	6f ef       	ldi	r22, 0xFF	; 255
    1784:	7f ef       	ldi	r23, 0xFF	; 255
    1786:	c5 01       	movw	r24, r10
    1788:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <strnlen>
    178c:	4c 01       	movw	r8, r24
    178e:	82 01       	movw	r16, r4
    1790:	f3 2d       	mov	r31, r3
    1792:	ff 77       	andi	r31, 0x7F	; 127
    1794:	3f 2e       	mov	r3, r31
    1796:	16 c0       	rjmp	.+44     	; 0x17c4 <vfprintf+0x188>
    1798:	28 01       	movw	r4, r16
    179a:	22 e0       	ldi	r18, 0x02	; 2
    179c:	42 0e       	add	r4, r18
    179e:	51 1c       	adc	r5, r1
    17a0:	f8 01       	movw	r30, r16
    17a2:	a0 80       	ld	r10, Z
    17a4:	b1 80       	ldd	r11, Z+1	; 0x01
    17a6:	36 fe       	sbrs	r3, 6
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <vfprintf+0x174>
    17aa:	69 2d       	mov	r22, r9
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <vfprintf+0x178>
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	7f ef       	ldi	r23, 0xFF	; 255
    17b4:	c5 01       	movw	r24, r10
    17b6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <strnlen_P>
    17ba:	4c 01       	movw	r8, r24
    17bc:	f3 2d       	mov	r31, r3
    17be:	f0 68       	ori	r31, 0x80	; 128
    17c0:	3f 2e       	mov	r3, r31
    17c2:	82 01       	movw	r16, r4
    17c4:	33 fc       	sbrc	r3, 3
    17c6:	1b c0       	rjmp	.+54     	; 0x17fe <vfprintf+0x1c2>
    17c8:	82 2d       	mov	r24, r2
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	88 16       	cp	r8, r24
    17ce:	99 06       	cpc	r9, r25
    17d0:	b0 f4       	brcc	.+44     	; 0x17fe <vfprintf+0x1c2>
    17d2:	b6 01       	movw	r22, r12
    17d4:	80 e2       	ldi	r24, 0x20	; 32
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    17dc:	2a 94       	dec	r2
    17de:	f4 cf       	rjmp	.-24     	; 0x17c8 <vfprintf+0x18c>
    17e0:	f5 01       	movw	r30, r10
    17e2:	37 fc       	sbrc	r3, 7
    17e4:	85 91       	lpm	r24, Z+
    17e6:	37 fe       	sbrs	r3, 7
    17e8:	81 91       	ld	r24, Z+
    17ea:	5f 01       	movw	r10, r30
    17ec:	b6 01       	movw	r22, r12
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    17f4:	21 10       	cpse	r2, r1
    17f6:	2a 94       	dec	r2
    17f8:	21 e0       	ldi	r18, 0x01	; 1
    17fa:	82 1a       	sub	r8, r18
    17fc:	91 08       	sbc	r9, r1
    17fe:	81 14       	cp	r8, r1
    1800:	91 04       	cpc	r9, r1
    1802:	71 f7       	brne	.-36     	; 0x17e0 <vfprintf+0x1a4>
    1804:	e8 c0       	rjmp	.+464    	; 0x19d6 <vfprintf+0x39a>
    1806:	84 36       	cpi	r24, 0x64	; 100
    1808:	11 f0       	breq	.+4      	; 0x180e <vfprintf+0x1d2>
    180a:	89 36       	cpi	r24, 0x69	; 105
    180c:	41 f5       	brne	.+80     	; 0x185e <vfprintf+0x222>
    180e:	f8 01       	movw	r30, r16
    1810:	37 fe       	sbrs	r3, 7
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <vfprintf+0x1e6>
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	0c 5f       	subi	r16, 0xFC	; 252
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	08 c0       	rjmp	.+16     	; 0x1832 <vfprintf+0x1f6>
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	07 2e       	mov	r0, r23
    1828:	00 0c       	add	r0, r0
    182a:	88 0b       	sbc	r24, r24
    182c:	99 0b       	sbc	r25, r25
    182e:	0e 5f       	subi	r16, 0xFE	; 254
    1830:	1f 4f       	sbci	r17, 0xFF	; 255
    1832:	f3 2d       	mov	r31, r3
    1834:	ff 76       	andi	r31, 0x6F	; 111
    1836:	3f 2e       	mov	r3, r31
    1838:	97 ff       	sbrs	r25, 7
    183a:	09 c0       	rjmp	.+18     	; 0x184e <vfprintf+0x212>
    183c:	90 95       	com	r25
    183e:	80 95       	com	r24
    1840:	70 95       	com	r23
    1842:	61 95       	neg	r22
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	8f 4f       	sbci	r24, 0xFF	; 255
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	f0 68       	ori	r31, 0x80	; 128
    184c:	3f 2e       	mov	r3, r31
    184e:	2a e0       	ldi	r18, 0x0A	; 10
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	a3 01       	movw	r20, r6
    1854:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__ultoa_invert>
    1858:	88 2e       	mov	r8, r24
    185a:	86 18       	sub	r8, r6
    185c:	45 c0       	rjmp	.+138    	; 0x18e8 <vfprintf+0x2ac>
    185e:	85 37       	cpi	r24, 0x75	; 117
    1860:	31 f4       	brne	.+12     	; 0x186e <vfprintf+0x232>
    1862:	23 2d       	mov	r18, r3
    1864:	2f 7e       	andi	r18, 0xEF	; 239
    1866:	b2 2e       	mov	r11, r18
    1868:	2a e0       	ldi	r18, 0x0A	; 10
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	25 c0       	rjmp	.+74     	; 0x18b8 <vfprintf+0x27c>
    186e:	93 2d       	mov	r25, r3
    1870:	99 7f       	andi	r25, 0xF9	; 249
    1872:	b9 2e       	mov	r11, r25
    1874:	8f 36       	cpi	r24, 0x6F	; 111
    1876:	c1 f0       	breq	.+48     	; 0x18a8 <vfprintf+0x26c>
    1878:	18 f4       	brcc	.+6      	; 0x1880 <vfprintf+0x244>
    187a:	88 35       	cpi	r24, 0x58	; 88
    187c:	79 f0       	breq	.+30     	; 0x189c <vfprintf+0x260>
    187e:	b5 c0       	rjmp	.+362    	; 0x19ea <vfprintf+0x3ae>
    1880:	80 37       	cpi	r24, 0x70	; 112
    1882:	19 f0       	breq	.+6      	; 0x188a <vfprintf+0x24e>
    1884:	88 37       	cpi	r24, 0x78	; 120
    1886:	21 f0       	breq	.+8      	; 0x1890 <vfprintf+0x254>
    1888:	b0 c0       	rjmp	.+352    	; 0x19ea <vfprintf+0x3ae>
    188a:	e9 2f       	mov	r30, r25
    188c:	e0 61       	ori	r30, 0x10	; 16
    188e:	be 2e       	mov	r11, r30
    1890:	b4 fe       	sbrs	r11, 4
    1892:	0d c0       	rjmp	.+26     	; 0x18ae <vfprintf+0x272>
    1894:	fb 2d       	mov	r31, r11
    1896:	f4 60       	ori	r31, 0x04	; 4
    1898:	bf 2e       	mov	r11, r31
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <vfprintf+0x272>
    189c:	34 fe       	sbrs	r3, 4
    189e:	0a c0       	rjmp	.+20     	; 0x18b4 <vfprintf+0x278>
    18a0:	29 2f       	mov	r18, r25
    18a2:	26 60       	ori	r18, 0x06	; 6
    18a4:	b2 2e       	mov	r11, r18
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <vfprintf+0x278>
    18a8:	28 e0       	ldi	r18, 0x08	; 8
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <vfprintf+0x27c>
    18ae:	20 e1       	ldi	r18, 0x10	; 16
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <vfprintf+0x27c>
    18b4:	20 e1       	ldi	r18, 0x10	; 16
    18b6:	32 e0       	ldi	r19, 0x02	; 2
    18b8:	f8 01       	movw	r30, r16
    18ba:	b7 fe       	sbrs	r11, 7
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <vfprintf+0x290>
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	0c 5f       	subi	r16, 0xFC	; 252
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <vfprintf+0x29c>
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 5f       	subi	r16, 0xFE	; 254
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	a3 01       	movw	r20, r6
    18da:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__ultoa_invert>
    18de:	88 2e       	mov	r8, r24
    18e0:	86 18       	sub	r8, r6
    18e2:	fb 2d       	mov	r31, r11
    18e4:	ff 77       	andi	r31, 0x7F	; 127
    18e6:	3f 2e       	mov	r3, r31
    18e8:	36 fe       	sbrs	r3, 6
    18ea:	0d c0       	rjmp	.+26     	; 0x1906 <vfprintf+0x2ca>
    18ec:	23 2d       	mov	r18, r3
    18ee:	2e 7f       	andi	r18, 0xFE	; 254
    18f0:	a2 2e       	mov	r10, r18
    18f2:	89 14       	cp	r8, r9
    18f4:	58 f4       	brcc	.+22     	; 0x190c <vfprintf+0x2d0>
    18f6:	34 fe       	sbrs	r3, 4
    18f8:	0b c0       	rjmp	.+22     	; 0x1910 <vfprintf+0x2d4>
    18fa:	32 fc       	sbrc	r3, 2
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <vfprintf+0x2d4>
    18fe:	83 2d       	mov	r24, r3
    1900:	8e 7e       	andi	r24, 0xEE	; 238
    1902:	a8 2e       	mov	r10, r24
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <vfprintf+0x2d4>
    1906:	b8 2c       	mov	r11, r8
    1908:	a3 2c       	mov	r10, r3
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <vfprintf+0x2d6>
    190c:	b8 2c       	mov	r11, r8
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <vfprintf+0x2d6>
    1910:	b9 2c       	mov	r11, r9
    1912:	a4 fe       	sbrs	r10, 4
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <vfprintf+0x2f8>
    1916:	fe 01       	movw	r30, r28
    1918:	e8 0d       	add	r30, r8
    191a:	f1 1d       	adc	r31, r1
    191c:	80 81       	ld	r24, Z
    191e:	80 33       	cpi	r24, 0x30	; 48
    1920:	21 f4       	brne	.+8      	; 0x192a <vfprintf+0x2ee>
    1922:	9a 2d       	mov	r25, r10
    1924:	99 7e       	andi	r25, 0xE9	; 233
    1926:	a9 2e       	mov	r10, r25
    1928:	09 c0       	rjmp	.+18     	; 0x193c <vfprintf+0x300>
    192a:	a2 fe       	sbrs	r10, 2
    192c:	06 c0       	rjmp	.+12     	; 0x193a <vfprintf+0x2fe>
    192e:	b3 94       	inc	r11
    1930:	b3 94       	inc	r11
    1932:	04 c0       	rjmp	.+8      	; 0x193c <vfprintf+0x300>
    1934:	8a 2d       	mov	r24, r10
    1936:	86 78       	andi	r24, 0x86	; 134
    1938:	09 f0       	breq	.+2      	; 0x193c <vfprintf+0x300>
    193a:	b3 94       	inc	r11
    193c:	a3 fc       	sbrc	r10, 3
    193e:	11 c0       	rjmp	.+34     	; 0x1962 <vfprintf+0x326>
    1940:	a0 fe       	sbrs	r10, 0
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <vfprintf+0x314>
    1944:	b2 14       	cp	r11, r2
    1946:	88 f4       	brcc	.+34     	; 0x196a <vfprintf+0x32e>
    1948:	28 0c       	add	r2, r8
    194a:	92 2c       	mov	r9, r2
    194c:	9b 18       	sub	r9, r11
    194e:	0e c0       	rjmp	.+28     	; 0x196c <vfprintf+0x330>
    1950:	b2 14       	cp	r11, r2
    1952:	60 f4       	brcc	.+24     	; 0x196c <vfprintf+0x330>
    1954:	b6 01       	movw	r22, r12
    1956:	80 e2       	ldi	r24, 0x20	; 32
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    195e:	b3 94       	inc	r11
    1960:	f7 cf       	rjmp	.-18     	; 0x1950 <vfprintf+0x314>
    1962:	b2 14       	cp	r11, r2
    1964:	18 f4       	brcc	.+6      	; 0x196c <vfprintf+0x330>
    1966:	2b 18       	sub	r2, r11
    1968:	02 c0       	rjmp	.+4      	; 0x196e <vfprintf+0x332>
    196a:	98 2c       	mov	r9, r8
    196c:	21 2c       	mov	r2, r1
    196e:	a4 fe       	sbrs	r10, 4
    1970:	10 c0       	rjmp	.+32     	; 0x1992 <vfprintf+0x356>
    1972:	b6 01       	movw	r22, r12
    1974:	80 e3       	ldi	r24, 0x30	; 48
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    197c:	a2 fe       	sbrs	r10, 2
    197e:	17 c0       	rjmp	.+46     	; 0x19ae <vfprintf+0x372>
    1980:	a1 fc       	sbrc	r10, 1
    1982:	03 c0       	rjmp	.+6      	; 0x198a <vfprintf+0x34e>
    1984:	88 e7       	ldi	r24, 0x78	; 120
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 c0       	rjmp	.+4      	; 0x198e <vfprintf+0x352>
    198a:	88 e5       	ldi	r24, 0x58	; 88
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	b6 01       	movw	r22, r12
    1990:	0c c0       	rjmp	.+24     	; 0x19aa <vfprintf+0x36e>
    1992:	8a 2d       	mov	r24, r10
    1994:	86 78       	andi	r24, 0x86	; 134
    1996:	59 f0       	breq	.+22     	; 0x19ae <vfprintf+0x372>
    1998:	a1 fe       	sbrs	r10, 1
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <vfprintf+0x364>
    199c:	8b e2       	ldi	r24, 0x2B	; 43
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <vfprintf+0x366>
    19a0:	80 e2       	ldi	r24, 0x20	; 32
    19a2:	a7 fc       	sbrc	r10, 7
    19a4:	8d e2       	ldi	r24, 0x2D	; 45
    19a6:	b6 01       	movw	r22, r12
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    19ae:	89 14       	cp	r8, r9
    19b0:	38 f4       	brcc	.+14     	; 0x19c0 <vfprintf+0x384>
    19b2:	b6 01       	movw	r22, r12
    19b4:	80 e3       	ldi	r24, 0x30	; 48
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    19bc:	9a 94       	dec	r9
    19be:	f7 cf       	rjmp	.-18     	; 0x19ae <vfprintf+0x372>
    19c0:	8a 94       	dec	r8
    19c2:	f3 01       	movw	r30, r6
    19c4:	e8 0d       	add	r30, r8
    19c6:	f1 1d       	adc	r31, r1
    19c8:	80 81       	ld	r24, Z
    19ca:	b6 01       	movw	r22, r12
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    19d2:	81 10       	cpse	r8, r1
    19d4:	f5 cf       	rjmp	.-22     	; 0x19c0 <vfprintf+0x384>
    19d6:	22 20       	and	r2, r2
    19d8:	09 f4       	brne	.+2      	; 0x19dc <vfprintf+0x3a0>
    19da:	42 ce       	rjmp	.-892    	; 0x1660 <vfprintf+0x24>
    19dc:	b6 01       	movw	r22, r12
    19de:	80 e2       	ldi	r24, 0x20	; 32
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fputc>
    19e6:	2a 94       	dec	r2
    19e8:	f6 cf       	rjmp	.-20     	; 0x19d6 <vfprintf+0x39a>
    19ea:	f6 01       	movw	r30, r12
    19ec:	86 81       	ldd	r24, Z+6	; 0x06
    19ee:	97 81       	ldd	r25, Z+7	; 0x07
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <vfprintf+0x3ba>
    19f2:	8f ef       	ldi	r24, 0xFF	; 255
    19f4:	9f ef       	ldi	r25, 0xFF	; 255
    19f6:	2b 96       	adiw	r28, 0x0b	; 11
    19f8:	e2 e1       	ldi	r30, 0x12	; 18
    19fa:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__epilogue_restores__>

000019fe <calloc>:
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	86 9f       	mul	r24, r22
    1a08:	80 01       	movw	r16, r0
    1a0a:	87 9f       	mul	r24, r23
    1a0c:	10 0d       	add	r17, r0
    1a0e:	96 9f       	mul	r25, r22
    1a10:	10 0d       	add	r17, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	c8 01       	movw	r24, r16
    1a16:	0e 94 39 09 	call	0x1272	; 0x1272 <malloc>
    1a1a:	ec 01       	movw	r28, r24
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	29 f0       	breq	.+10     	; 0x1a2a <calloc+0x2c>
    1a20:	a8 01       	movw	r20, r16
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <memset>
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	08 95       	ret

00001a36 <strnlen_P>:
    1a36:	fc 01       	movw	r30, r24
    1a38:	05 90       	lpm	r0, Z+
    1a3a:	61 50       	subi	r22, 0x01	; 1
    1a3c:	70 40       	sbci	r23, 0x00	; 0
    1a3e:	01 10       	cpse	r0, r1
    1a40:	d8 f7       	brcc	.-10     	; 0x1a38 <strnlen_P+0x2>
    1a42:	80 95       	com	r24
    1a44:	90 95       	com	r25
    1a46:	8e 0f       	add	r24, r30
    1a48:	9f 1f       	adc	r25, r31
    1a4a:	08 95       	ret

00001a4c <memset>:
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <memset+0x6>
    1a50:	6d 93       	st	X+, r22
    1a52:	41 50       	subi	r20, 0x01	; 1
    1a54:	50 40       	sbci	r21, 0x00	; 0
    1a56:	e0 f7       	brcc	.-8      	; 0x1a50 <memset+0x4>
    1a58:	08 95       	ret

00001a5a <strnlen>:
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	61 50       	subi	r22, 0x01	; 1
    1a5e:	70 40       	sbci	r23, 0x00	; 0
    1a60:	01 90       	ld	r0, Z+
    1a62:	01 10       	cpse	r0, r1
    1a64:	d8 f7       	brcc	.-10     	; 0x1a5c <strnlen+0x2>
    1a66:	80 95       	com	r24
    1a68:	90 95       	com	r25
    1a6a:	8e 0f       	add	r24, r30
    1a6c:	9f 1f       	adc	r25, r31
    1a6e:	08 95       	ret

00001a70 <fputc>:
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	fb 01       	movw	r30, r22
    1a7a:	23 81       	ldd	r18, Z+3	; 0x03
    1a7c:	21 fd       	sbrc	r18, 1
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <fputc+0x16>
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	9f ef       	ldi	r25, 0xFF	; 255
    1a84:	2c c0       	rjmp	.+88     	; 0x1ade <fputc+0x6e>
    1a86:	22 ff       	sbrs	r18, 2
    1a88:	16 c0       	rjmp	.+44     	; 0x1ab6 <fputc+0x46>
    1a8a:	46 81       	ldd	r20, Z+6	; 0x06
    1a8c:	57 81       	ldd	r21, Z+7	; 0x07
    1a8e:	24 81       	ldd	r18, Z+4	; 0x04
    1a90:	35 81       	ldd	r19, Z+5	; 0x05
    1a92:	42 17       	cp	r20, r18
    1a94:	53 07       	cpc	r21, r19
    1a96:	44 f4       	brge	.+16     	; 0x1aa8 <fputc+0x38>
    1a98:	a0 81       	ld	r26, Z
    1a9a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a9c:	9d 01       	movw	r18, r26
    1a9e:	2f 5f       	subi	r18, 0xFF	; 255
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	31 83       	std	Z+1, r19	; 0x01
    1aa4:	20 83       	st	Z, r18
    1aa6:	8c 93       	st	X, r24
    1aa8:	26 81       	ldd	r18, Z+6	; 0x06
    1aaa:	37 81       	ldd	r19, Z+7	; 0x07
    1aac:	2f 5f       	subi	r18, 0xFF	; 255
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	37 83       	std	Z+7, r19	; 0x07
    1ab2:	26 83       	std	Z+6, r18	; 0x06
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <fputc+0x6e>
    1ab6:	8b 01       	movw	r16, r22
    1ab8:	ec 01       	movw	r28, r24
    1aba:	fb 01       	movw	r30, r22
    1abc:	00 84       	ldd	r0, Z+8	; 0x08
    1abe:	f1 85       	ldd	r31, Z+9	; 0x09
    1ac0:	e0 2d       	mov	r30, r0
    1ac2:	09 95       	icall
    1ac4:	89 2b       	or	r24, r25
    1ac6:	e1 f6       	brne	.-72     	; 0x1a80 <fputc+0x10>
    1ac8:	d8 01       	movw	r26, r16
    1aca:	16 96       	adiw	r26, 0x06	; 6
    1acc:	8d 91       	ld	r24, X+
    1ace:	9c 91       	ld	r25, X
    1ad0:	17 97       	sbiw	r26, 0x07	; 7
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	17 96       	adiw	r26, 0x07	; 7
    1ad6:	9c 93       	st	X, r25
    1ad8:	8e 93       	st	-X, r24
    1ada:	16 97       	sbiw	r26, 0x06	; 6
    1adc:	ce 01       	movw	r24, r28
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <__ultoa_invert>:
    1ae8:	fa 01       	movw	r30, r20
    1aea:	aa 27       	eor	r26, r26
    1aec:	28 30       	cpi	r18, 0x08	; 8
    1aee:	51 f1       	breq	.+84     	; 0x1b44 <__ultoa_invert+0x5c>
    1af0:	20 31       	cpi	r18, 0x10	; 16
    1af2:	81 f1       	breq	.+96     	; 0x1b54 <__ultoa_invert+0x6c>
    1af4:	e8 94       	clt
    1af6:	6f 93       	push	r22
    1af8:	6e 7f       	andi	r22, 0xFE	; 254
    1afa:	6e 5f       	subi	r22, 0xFE	; 254
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	8f 4f       	sbci	r24, 0xFF	; 255
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	af 4f       	sbci	r26, 0xFF	; 255
    1b04:	b1 e0       	ldi	r27, 0x01	; 1
    1b06:	3e d0       	rcall	.+124    	; 0x1b84 <__ultoa_invert+0x9c>
    1b08:	b4 e0       	ldi	r27, 0x04	; 4
    1b0a:	3c d0       	rcall	.+120    	; 0x1b84 <__ultoa_invert+0x9c>
    1b0c:	67 0f       	add	r22, r23
    1b0e:	78 1f       	adc	r23, r24
    1b10:	89 1f       	adc	r24, r25
    1b12:	9a 1f       	adc	r25, r26
    1b14:	a1 1d       	adc	r26, r1
    1b16:	68 0f       	add	r22, r24
    1b18:	79 1f       	adc	r23, r25
    1b1a:	8a 1f       	adc	r24, r26
    1b1c:	91 1d       	adc	r25, r1
    1b1e:	a1 1d       	adc	r26, r1
    1b20:	6a 0f       	add	r22, r26
    1b22:	71 1d       	adc	r23, r1
    1b24:	81 1d       	adc	r24, r1
    1b26:	91 1d       	adc	r25, r1
    1b28:	a1 1d       	adc	r26, r1
    1b2a:	20 d0       	rcall	.+64     	; 0x1b6c <__ultoa_invert+0x84>
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <__ultoa_invert+0x48>
    1b2e:	68 94       	set
    1b30:	3f 91       	pop	r19
    1b32:	2a e0       	ldi	r18, 0x0A	; 10
    1b34:	26 9f       	mul	r18, r22
    1b36:	11 24       	eor	r1, r1
    1b38:	30 19       	sub	r19, r0
    1b3a:	30 5d       	subi	r19, 0xD0	; 208
    1b3c:	31 93       	st	Z+, r19
    1b3e:	de f6       	brtc	.-74     	; 0x1af6 <__ultoa_invert+0xe>
    1b40:	cf 01       	movw	r24, r30
    1b42:	08 95       	ret
    1b44:	46 2f       	mov	r20, r22
    1b46:	47 70       	andi	r20, 0x07	; 7
    1b48:	40 5d       	subi	r20, 0xD0	; 208
    1b4a:	41 93       	st	Z+, r20
    1b4c:	b3 e0       	ldi	r27, 0x03	; 3
    1b4e:	0f d0       	rcall	.+30     	; 0x1b6e <__ultoa_invert+0x86>
    1b50:	c9 f7       	brne	.-14     	; 0x1b44 <__ultoa_invert+0x5c>
    1b52:	f6 cf       	rjmp	.-20     	; 0x1b40 <__ultoa_invert+0x58>
    1b54:	46 2f       	mov	r20, r22
    1b56:	4f 70       	andi	r20, 0x0F	; 15
    1b58:	40 5d       	subi	r20, 0xD0	; 208
    1b5a:	4a 33       	cpi	r20, 0x3A	; 58
    1b5c:	18 f0       	brcs	.+6      	; 0x1b64 <__ultoa_invert+0x7c>
    1b5e:	49 5d       	subi	r20, 0xD9	; 217
    1b60:	31 fd       	sbrc	r19, 1
    1b62:	40 52       	subi	r20, 0x20	; 32
    1b64:	41 93       	st	Z+, r20
    1b66:	02 d0       	rcall	.+4      	; 0x1b6c <__ultoa_invert+0x84>
    1b68:	a9 f7       	brne	.-22     	; 0x1b54 <__ultoa_invert+0x6c>
    1b6a:	ea cf       	rjmp	.-44     	; 0x1b40 <__ultoa_invert+0x58>
    1b6c:	b4 e0       	ldi	r27, 0x04	; 4
    1b6e:	a6 95       	lsr	r26
    1b70:	97 95       	ror	r25
    1b72:	87 95       	ror	r24
    1b74:	77 95       	ror	r23
    1b76:	67 95       	ror	r22
    1b78:	ba 95       	dec	r27
    1b7a:	c9 f7       	brne	.-14     	; 0x1b6e <__ultoa_invert+0x86>
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	61 05       	cpc	r22, r1
    1b80:	71 05       	cpc	r23, r1
    1b82:	08 95       	ret
    1b84:	9b 01       	movw	r18, r22
    1b86:	ac 01       	movw	r20, r24
    1b88:	0a 2e       	mov	r0, r26
    1b8a:	06 94       	lsr	r0
    1b8c:	57 95       	ror	r21
    1b8e:	47 95       	ror	r20
    1b90:	37 95       	ror	r19
    1b92:	27 95       	ror	r18
    1b94:	ba 95       	dec	r27
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__ultoa_invert+0xa2>
    1b98:	62 0f       	add	r22, r18
    1b9a:	73 1f       	adc	r23, r19
    1b9c:	84 1f       	adc	r24, r20
    1b9e:	95 1f       	adc	r25, r21
    1ba0:	a0 1d       	adc	r26, r0
    1ba2:	08 95       	ret

00001ba4 <__divmodsi4>:
    1ba4:	05 2e       	mov	r0, r21
    1ba6:	97 fb       	bst	r25, 7
    1ba8:	1e f4       	brtc	.+6      	; 0x1bb0 <__divmodsi4+0xc>
    1baa:	00 94       	com	r0
    1bac:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__negsi2>
    1bb0:	57 fd       	sbrc	r21, 7
    1bb2:	07 d0       	rcall	.+14     	; 0x1bc2 <__divmodsi4_neg2>
    1bb4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__udivmodsi4>
    1bb8:	07 fc       	sbrc	r0, 7
    1bba:	03 d0       	rcall	.+6      	; 0x1bc2 <__divmodsi4_neg2>
    1bbc:	4e f4       	brtc	.+18     	; 0x1bd0 <__divmodsi4_exit>
    1bbe:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__negsi2>

00001bc2 <__divmodsi4_neg2>:
    1bc2:	50 95       	com	r21
    1bc4:	40 95       	com	r20
    1bc6:	30 95       	com	r19
    1bc8:	21 95       	neg	r18
    1bca:	3f 4f       	sbci	r19, 0xFF	; 255
    1bcc:	4f 4f       	sbci	r20, 0xFF	; 255
    1bce:	5f 4f       	sbci	r21, 0xFF	; 255

00001bd0 <__divmodsi4_exit>:
    1bd0:	08 95       	ret

00001bd2 <__negsi2>:
    1bd2:	90 95       	com	r25
    1bd4:	80 95       	com	r24
    1bd6:	70 95       	com	r23
    1bd8:	61 95       	neg	r22
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	08 95       	ret

00001be2 <__muluhisi3>:
    1be2:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__umulhisi3>
    1be6:	a5 9f       	mul	r26, r21
    1be8:	90 0d       	add	r25, r0
    1bea:	b4 9f       	mul	r27, r20
    1bec:	90 0d       	add	r25, r0
    1bee:	a4 9f       	mul	r26, r20
    1bf0:	80 0d       	add	r24, r0
    1bf2:	91 1d       	adc	r25, r1
    1bf4:	11 24       	eor	r1, r1
    1bf6:	08 95       	ret

00001bf8 <__mulshisi3>:
    1bf8:	b7 ff       	sbrs	r27, 7
    1bfa:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__muluhisi3>

00001bfe <__mulohisi3>:
    1bfe:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__muluhisi3>
    1c02:	82 1b       	sub	r24, r18
    1c04:	93 0b       	sbc	r25, r19
    1c06:	08 95       	ret

00001c08 <__prologue_saves__>:
    1c08:	2f 92       	push	r2
    1c0a:	3f 92       	push	r3
    1c0c:	4f 92       	push	r4
    1c0e:	5f 92       	push	r5
    1c10:	6f 92       	push	r6
    1c12:	7f 92       	push	r7
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	ca 1b       	sub	r28, r26
    1c32:	db 0b       	sbc	r29, r27
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	09 94       	ijmp

00001c40 <__epilogue_restores__>:
    1c40:	2a 88       	ldd	r2, Y+18	; 0x12
    1c42:	39 88       	ldd	r3, Y+17	; 0x11
    1c44:	48 88       	ldd	r4, Y+16	; 0x10
    1c46:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c48:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c50:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c52:	b9 84       	ldd	r11, Y+9	; 0x09
    1c54:	c8 84       	ldd	r12, Y+8	; 0x08
    1c56:	df 80       	ldd	r13, Y+7	; 0x07
    1c58:	ee 80       	ldd	r14, Y+6	; 0x06
    1c5a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c5c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c5e:	1b 81       	ldd	r17, Y+3	; 0x03
    1c60:	aa 81       	ldd	r26, Y+2	; 0x02
    1c62:	b9 81       	ldd	r27, Y+1	; 0x01
    1c64:	ce 0f       	add	r28, r30
    1c66:	d1 1d       	adc	r29, r1
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	ed 01       	movw	r28, r26
    1c74:	08 95       	ret

00001c76 <__udivmodsi4>:
    1c76:	a1 e2       	ldi	r26, 0x21	; 33
    1c78:	1a 2e       	mov	r1, r26
    1c7a:	aa 1b       	sub	r26, r26
    1c7c:	bb 1b       	sub	r27, r27
    1c7e:	fd 01       	movw	r30, r26
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <__udivmodsi4_ep>

00001c82 <__udivmodsi4_loop>:
    1c82:	aa 1f       	adc	r26, r26
    1c84:	bb 1f       	adc	r27, r27
    1c86:	ee 1f       	adc	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	a2 17       	cp	r26, r18
    1c8c:	b3 07       	cpc	r27, r19
    1c8e:	e4 07       	cpc	r30, r20
    1c90:	f5 07       	cpc	r31, r21
    1c92:	20 f0       	brcs	.+8      	; 0x1c9c <__udivmodsi4_ep>
    1c94:	a2 1b       	sub	r26, r18
    1c96:	b3 0b       	sbc	r27, r19
    1c98:	e4 0b       	sbc	r30, r20
    1c9a:	f5 0b       	sbc	r31, r21

00001c9c <__udivmodsi4_ep>:
    1c9c:	66 1f       	adc	r22, r22
    1c9e:	77 1f       	adc	r23, r23
    1ca0:	88 1f       	adc	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	1a 94       	dec	r1
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <__udivmodsi4_loop>
    1ca8:	60 95       	com	r22
    1caa:	70 95       	com	r23
    1cac:	80 95       	com	r24
    1cae:	90 95       	com	r25
    1cb0:	9b 01       	movw	r18, r22
    1cb2:	ac 01       	movw	r20, r24
    1cb4:	bd 01       	movw	r22, r26
    1cb6:	cf 01       	movw	r24, r30
    1cb8:	08 95       	ret

00001cba <__umulhisi3>:
    1cba:	a2 9f       	mul	r26, r18
    1cbc:	b0 01       	movw	r22, r0
    1cbe:	b3 9f       	mul	r27, r19
    1cc0:	c0 01       	movw	r24, r0
    1cc2:	a3 9f       	mul	r26, r19
    1cc4:	70 0d       	add	r23, r0
    1cc6:	81 1d       	adc	r24, r1
    1cc8:	11 24       	eor	r1, r1
    1cca:	91 1d       	adc	r25, r1
    1ccc:	b2 9f       	mul	r27, r18
    1cce:	70 0d       	add	r23, r0
    1cd0:	81 1d       	adc	r24, r1
    1cd2:	11 24       	eor	r1, r1
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	08 95       	ret

00001cd8 <_exit>:
    1cd8:	f8 94       	cli

00001cda <__stop_program>:
    1cda:	ff cf       	rjmp	.-2      	; 0x1cda <__stop_program>
