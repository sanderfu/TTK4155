
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800100  000017ec  00001880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080029c  0080029c  00001a1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d20  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ef  00000000  00000000  00004aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000145d  00000000  00000000  00005f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  000073f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094f  00000000  00000000  00007a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001067  00000000  00000000  00008377  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  000093de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf ef       	ldi	r28, 0xFF	; 255
      a4:	d4 e0       	ldi	r29, 0x04	; 4
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	12 e0       	ldi	r17, 0x02	; 2
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	ec ee       	ldi	r30, 0xEC	; 236
      b2:	f7 e1       	ldi	r31, 0x17	; 23
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ac 39       	cpi	r26, 0x9C	; 156
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	22 e0       	ldi	r18, 0x02	; 2
      c2:	ac e9       	ldi	r26, 0x9C	; 156
      c4:	b2 e0       	ldi	r27, 0x02	; 2
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a6 3b       	cpi	r26, 0xB6	; 182
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
      d4:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
      dc:	30 98       	cbi	0x06, 0	; 6
      de:	08 95       	ret

000000e0 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
      e0:	84 60       	ori	r24, 0x04	; 4
      e2:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x114a>
	

	while (test_bit(PINE, PINE0)) {
      e6:	28 99       	sbic	0x05, 0	; 5
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <readAdc+0x6>

	}
	
	return *adc;
      ea:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x114a>
      ee:	08 95       	ret

000000f0 <main>:
#include "SPI.h"
#include "pwm.h"

int main(void)
{
	setupInit();
      f0:	0e 94 a9 02 	call	0x552	; 0x552 <setupInit>
	test_SRAM();
      f4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <test_SRAM>
	pwm_testPlayNote();
      f8:	0e 94 10 01 	call	0x220	; 0x220 <pwm_testPlayNote>
	pwm_init();
      fc:	0e 94 81 00 	call	0x102	; 0x102 <pwm_init>
     100:	ff cf       	rjmp	.-2      	; 0x100 <main+0x10>

00000102 <pwm_init>:
    PRESC_1024 = (1 << CS02) | (1 << CS01) | (1 << CS01)
} prescaling;

void pwm_init() {
    //set output pin
    DDRB = (1 << PB0); 
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	87 bb       	out	0x17, r24	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	81 bf       	out	0x31, r24	; 49
    
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
     10a:	80 e8       	ldi	r24, 0x80	; 128
     10c:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
     10e:	83 b7       	in	r24, 0x33	; 51
     110:	88 60       	ori	r24, 0x08	; 8
     112:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
     114:	83 b7       	in	r24, 0x33	; 51
     116:	80 61       	ori	r24, 0x10	; 16
     118:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 |= PRESC_1;
     11a:	83 b7       	in	r24, 0x33	; 51
     11c:	81 60       	ori	r24, 0x01	; 1
     11e:	83 bf       	out	0x33, r24	; 51
     120:	08 95       	ret

00000122 <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
     122:	cf 92       	push	r12
     124:	df 92       	push	r13
     126:	ef 92       	push	r14
     128:	ff 92       	push	r15
     12a:	cf 93       	push	r28
     12c:	9b 01       	movw	r18, r22
     12e:	ac 01       	movw	r20, r24
    if (freq == 0) {
     130:	67 2b       	or	r22, r23
     132:	68 2b       	or	r22, r24
     134:	69 2b       	or	r22, r25
     136:	21 f4       	brne	.+8      	; 0x140 <pwm_setFreq+0x1e>
        TCCR0 &= PRESC_OFF;
     138:	83 b7       	in	r24, 0x33	; 51
     13a:	88 7f       	andi	r24, 0xF8	; 248
     13c:	83 bf       	out	0x33, r24	; 51
        return;
     13e:	6a c0       	rjmp	.+212    	; 0x214 <pwm_setFreq+0xf2>
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
    uint32_t ocr_plus_one = F_CPU/(2*prescaler)/freq;
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	70 e8       	ldi	r23, 0x80	; 128
     144:	85 e2       	ldi	r24, 0x25	; 37
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__udivmodsi4>
     14c:	69 01       	movw	r12, r18
     14e:	7a 01       	movw	r14, r20

    if (ocr_plus_one > 255+1) {
     150:	21 30       	cpi	r18, 0x01	; 1
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	38 07       	cpc	r19, r24
     156:	41 05       	cpc	r20, r1
     158:	51 05       	cpc	r21, r1
     15a:	a8 f1       	brcs	.+106    	; 0x1c6 <pwm_setFreq+0xa4>
        prescaler = PRESC_8;
        ocr_plus_one /= 8;
     15c:	68 94       	set
     15e:	12 f8       	bld	r1, 2
     160:	f6 94       	lsr	r15
     162:	e7 94       	ror	r14
     164:	d7 94       	ror	r13
     166:	c7 94       	ror	r12
     168:	16 94       	lsr	r1
     16a:	d1 f7       	brne	.-12     	; 0x160 <pwm_setFreq+0x3e>

        if (ocr_plus_one > 255+1) {
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	c9 16       	cp	r12, r25
     170:	d9 06       	cpc	r13, r25
     172:	e1 04       	cpc	r14, r1
     174:	f1 04       	cpc	r15, r1
     176:	48 f1       	brcs	.+82     	; 0x1ca <pwm_setFreq+0xa8>
            prescaler = PRESC_64;
            ocr_plus_one /= 8;
     178:	69 01       	movw	r12, r18
     17a:	7a 01       	movw	r14, r20
     17c:	68 94       	set
     17e:	15 f8       	bld	r1, 5
     180:	f6 94       	lsr	r15
     182:	e7 94       	ror	r14
     184:	d7 94       	ror	r13
     186:	c7 94       	ror	r12
     188:	16 94       	lsr	r1
     18a:	d1 f7       	brne	.-12     	; 0x180 <pwm_setFreq+0x5e>
            
            if (ocr_plus_one > 255+1) {
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	c8 16       	cp	r12, r24
     190:	d8 06       	cpc	r13, r24
     192:	e1 04       	cpc	r14, r1
     194:	f1 04       	cpc	r15, r1
     196:	d8 f0       	brcs	.+54     	; 0x1ce <pwm_setFreq+0xac>
                prescaler = PRESC_256;
                ocr_plus_one /= 4;
     198:	c3 2e       	mov	r12, r19
     19a:	d4 2e       	mov	r13, r20
     19c:	e5 2e       	mov	r14, r21
     19e:	ff 24       	eor	r15, r15
                    
                if (ocr_plus_one > 255+1) {
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	c9 16       	cp	r12, r25
     1a4:	d9 06       	cpc	r13, r25
     1a6:	e1 04       	cpc	r14, r1
     1a8:	f1 04       	cpc	r15, r1
     1aa:	98 f0       	brcs	.+38     	; 0x1d2 <pwm_setFreq+0xb0>
                    prescaler = PRESC_1024;
                    ocr_plus_one /= 4;
     1ac:	69 01       	movw	r12, r18
     1ae:	7a 01       	movw	r14, r20
     1b0:	0b 2e       	mov	r0, r27
     1b2:	ba e0       	ldi	r27, 0x0A	; 10
     1b4:	f6 94       	lsr	r15
     1b6:	e7 94       	ror	r14
     1b8:	d7 94       	ror	r13
     1ba:	c7 94       	ror	r12
     1bc:	ba 95       	dec	r27
     1be:	d1 f7       	brne	.-12     	; 0x1b4 <pwm_setFreq+0x92>
     1c0:	b0 2d       	mov	r27, r0
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
     1c2:	c6 e0       	ldi	r28, 0x06	; 6
     1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <pwm_setFreq+0xb2>
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
     1c6:	c1 e0       	ldi	r28, 0x01	; 1
     1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <pwm_setFreq+0xb2>
    uint32_t ocr_plus_one = F_CPU/(2*prescaler)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
     1ca:	c4 e0       	ldi	r28, 0x04	; 4
     1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <pwm_setFreq+0xb2>
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
     1ce:	c3 e0       	ldi	r28, 0x03	; 3
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <pwm_setFreq+0xb2>
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
     1d2:	c5 e0       	ldi	r28, 0x05	; 5
                    ocr_plus_one /= 4;
                }
            }
        }
    }
	printf("Prescaler, %i, ocr_plus_one %i\n\n\r", prescaler, ocr_plus_one);
     1d4:	ff 92       	push	r15
     1d6:	ef 92       	push	r14
     1d8:	df 92       	push	r13
     1da:	cf 92       	push	r12
     1dc:	8c 2f       	mov	r24, r28
     1de:	0c 2e       	mov	r0, r28
     1e0:	00 0c       	add	r0, r0
     1e2:	99 0b       	sbc	r25, r25
     1e4:	9f 93       	push	r25
     1e6:	cf 93       	push	r28
     1e8:	8a e0       	ldi	r24, 0x0A	; 10
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	9f 93       	push	r25
     1ee:	8f 93       	push	r24
     1f0:	0e 94 b2 08 	call	0x1164	; 0x1164 <printf>
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
     1f4:	83 b7       	in	r24, 0x33	; 51
     1f6:	88 7f       	andi	r24, 0xF8	; 248
     1f8:	83 bf       	out	0x33, r24	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
     1fa:	83 b7       	in	r24, 0x33	; 51
     1fc:	c8 2b       	or	r28, r24
     1fe:	c3 bf       	out	0x33, r28	; 51
	OCR0 = ocr_plus_one-1;
     200:	ca 94       	dec	r12
     202:	c1 be       	out	0x31, r12	; 49
     204:	8d b7       	in	r24, 0x3d	; 61
     206:	9e b7       	in	r25, 0x3e	; 62
     208:	08 96       	adiw	r24, 0x08	; 8
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	9e bf       	out	0x3e, r25	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	8d bf       	out	0x3d, r24	; 61
	
    
}
     214:	cf 91       	pop	r28
     216:	ff 90       	pop	r15
     218:	ef 90       	pop	r14
     21a:	df 90       	pop	r13
     21c:	cf 90       	pop	r12
     21e:	08 95       	ret

00000220 <pwm_testPlayNote>:
void pwm_testPlayNote() {
    pwm_setFreq(NOTE_A2);
     220:	6e e6       	ldi	r22, 0x6E	; 110
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 91 00 	call	0x122	; 0x122 <pwm_setFreq>
     22c:	08 95       	ret

0000022e <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     22e:	85 b7       	in	r24, 0x35	; 53
     230:	8f 7e       	andi	r24, 0xEF	; 239
     232:	85 bf       	out	0x35, r24	; 53
     234:	84 b7       	in	r24, 0x34	; 52
     236:	8f 7d       	andi	r24, 0xDF	; 223
     238:	84 bf       	out	0x34, r24	; 52
     23a:	86 b7       	in	r24, 0x36	; 54
     23c:	8f 77       	andi	r24, 0x7F	; 127
     23e:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     240:	85 b7       	in	r24, 0x35	; 53
     242:	80 62       	ori	r24, 0x20	; 32
     244:	85 bf       	out	0x35, r24	; 53
     246:	88 95       	sleep
     248:	85 b7       	in	r24, 0x35	; 53
     24a:	8f 7d       	andi	r24, 0xDF	; 223
     24c:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     24e:	85 b7       	in	r24, 0x35	; 53
     250:	80 62       	ori	r24, 0x20	; 32
     252:	85 bf       	out	0x35, r24	; 53
     254:	08 95       	ret

00000256 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     25c:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     266:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <joystickOffsetY>
     26a:	08 95       	ret

0000026c <joystick_readPosition>:
}
void joystick_readPosition() {
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     27e:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     286:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     288:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <joystickOffsetX>
     28c:	c6 17       	cp	r28, r22
     28e:	80 f4       	brcc	.+32     	; 0x2b0 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	2c 2f       	mov	r18, r28
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	26 1b       	sub	r18, r22
     298:	37 0b       	sbc	r19, r23
     29a:	44 e6       	ldi	r20, 0x64	; 100
     29c:	42 9f       	mul	r20, r18
     29e:	c0 01       	movw	r24, r0
     2a0:	43 9f       	mul	r20, r19
     2a2:	90 0d       	add	r25, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	0e 94 99 06 	call	0xd32	; 0xd32 <__divmodhi4>
     2aa:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <__data_end>
     2ae:	14 c0       	rjmp	.+40     	; 0x2d8 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     2b0:	46 2f       	mov	r20, r22
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	2c 2f       	mov	r18, r28
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	24 1b       	sub	r18, r20
     2ba:	35 0b       	sbc	r19, r21
     2bc:	64 e6       	ldi	r22, 0x64	; 100
     2be:	62 9f       	mul	r22, r18
     2c0:	c0 01       	movw	r24, r0
     2c2:	63 9f       	mul	r22, r19
     2c4:	90 0d       	add	r25, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	6f ef       	ldi	r22, 0xFF	; 255
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	64 1b       	sub	r22, r20
     2ce:	75 0b       	sbc	r23, r21
     2d0:	0e 94 99 06 	call	0xd32	; 0xd32 <__divmodhi4>
     2d4:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     2d8:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <joystickOffsetY>
     2dc:	e2 17       	cp	r30, r18
     2de:	88 f4       	brcc	.+34     	; 0x302 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     2e0:	62 2f       	mov	r22, r18
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	4e 2f       	mov	r20, r30
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	46 1b       	sub	r20, r22
     2ea:	57 0b       	sbc	r21, r23
     2ec:	24 e6       	ldi	r18, 0x64	; 100
     2ee:	24 9f       	mul	r18, r20
     2f0:	c0 01       	movw	r24, r0
     2f2:	25 9f       	mul	r18, r21
     2f4:	90 0d       	add	r25, r0
     2f6:	11 24       	eor	r1, r1
     2f8:	0e 94 99 06 	call	0xd32	; 0xd32 <__divmodhi4>
     2fc:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <__data_end+0x1>
     300:	13 c0       	rjmp	.+38     	; 0x328 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	4e 2f       	mov	r20, r30
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	42 1b       	sub	r20, r18
     30a:	53 0b       	sbc	r21, r19
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	64 9f       	mul	r22, r20
     310:	c0 01       	movw	r24, r0
     312:	65 9f       	mul	r22, r21
     314:	90 0d       	add	r25, r0
     316:	11 24       	eor	r1, r1
     318:	6f ef       	ldi	r22, 0xFF	; 255
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	62 1b       	sub	r22, r18
     31e:	73 0b       	sbc	r23, r19
     320:	0e 94 99 06 	call	0xd32	; 0xd32 <__divmodhi4>
     324:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     328:	cc e9       	ldi	r28, 0x9C	; 156
     32a:	d2 e0       	ldi	r29, 0x02	; 2
     32c:	68 81       	ld	r22, Y
     32e:	06 2e       	mov	r0, r22
     330:	00 0c       	add	r0, r0
     332:	77 0b       	sbc	r23, r23
     334:	88 0b       	sbc	r24, r24
     336:	99 0b       	sbc	r25, r25
     338:	0e 94 00 05 	call	0xa00	; 0xa00 <__floatsisf>
     33c:	6b 01       	movw	r12, r22
     33e:	7c 01       	movw	r14, r24
     340:	69 81       	ldd	r22, Y+1	; 0x01
     342:	06 2e       	mov	r0, r22
     344:	00 0c       	add	r0, r0
     346:	77 0b       	sbc	r23, r23
     348:	88 0b       	sbc	r24, r24
     34a:	99 0b       	sbc	r25, r25
     34c:	0e 94 00 05 	call	0xa00	; 0xa00 <__floatsisf>
     350:	a7 01       	movw	r20, r14
     352:	96 01       	movw	r18, r12
     354:	0e 94 f7 03 	call	0x7ee	; 0x7ee <atan2>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	44 eb       	ldi	r20, 0xB4	; 180
     35e:	53 e4       	ldi	r21, 0x43	; 67
     360:	0e 94 bb 05 	call	0xb76	; 0xb76 <__mulsf3>
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	5f e3       	ldi	r21, 0x3F	; 63
     36c:	0e 94 bb 05 	call	0xb76	; 0xb76 <__mulsf3>
     370:	23 ec       	ldi	r18, 0xC3	; 195
     372:	35 ef       	ldi	r19, 0xF5	; 245
     374:	48 e4       	ldi	r20, 0x48	; 72
     376:	50 e4       	ldi	r21, 0x40	; 64
     378:	0e 94 56 04 	call	0x8ac	; 0x8ac <__divsf3>
     37c:	0e 94 c8 04 	call	0x990	; 0x990 <__fixsfsi>
     380:	7b 83       	std	Y+3, r23	; 0x03
     382:	6a 83       	std	Y+2, r22	; 0x02
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	08 95       	ret

00000392 <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     392:	8f e1       	ldi	r24, 0x1F	; 31
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <malloc>
	ptr->numChildren = 0;
     39a:	fc 01       	movw	r30, r24
     39c:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     39e:	2a e0       	ldi	r18, 0x0A	; 10
     3a0:	ec e2       	ldi	r30, 0x2C	; 44
     3a2:	f1 e0       	ldi	r31, 0x01	; 1
     3a4:	dc 01       	movw	r26, r24
     3a6:	01 90       	ld	r0, Z+
     3a8:	0d 92       	st	X+, r0
     3aa:	2a 95       	dec	r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <mainMenuInit+0x14>
	ptr->parent = NULL;
     3ae:	fc 01       	movw	r30, r24
     3b0:	11 8a       	std	Z+17, r1	; 0x11
     3b2:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     3b4:	08 95       	ret

000003b6 <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     3b6:	cf 92       	push	r12
     3b8:	df 92       	push	r13
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	7c 01       	movw	r14, r24
     3c6:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     3c8:	8f e1       	ldi	r24, 0x1F	; 31
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <malloc>
     3d0:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     3d2:	d7 01       	movw	r26, r14
     3d4:	5e 96       	adiw	r26, 0x1e	; 30
     3d6:	ec 91       	ld	r30, X
     3d8:	5e 97       	sbiw	r26, 0x1e	; 30
     3da:	c1 e0       	ldi	r28, 0x01	; 1
     3dc:	ce 0f       	add	r28, r30
     3de:	5e 96       	adiw	r26, 0x1e	; 30
     3e0:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     3e2:	b6 01       	movw	r22, r12
     3e4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <strcpy>
	childPtr->parent = parent;
     3e8:	f8 01       	movw	r30, r16
     3ea:	f1 8a       	std	Z+17, r15	; 0x11
     3ec:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     3ee:	c7 30       	cpi	r28, 0x07	; 7
     3f0:	78 f4       	brcc	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     3f2:	ec 2f       	mov	r30, r28
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	38 96       	adiw	r30, 0x08	; 8
     3f8:	ee 0f       	add	r30, r30
     3fa:	ff 1f       	adc	r31, r31
     3fc:	ee 0d       	add	r30, r14
     3fe:	ff 1d       	adc	r31, r15
     400:	11 83       	std	Z+1, r17	; 0x01
     402:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     404:	d8 01       	movw	r26, r16
     406:	5e 96       	adiw	r26, 0x1e	; 30
     408:	1c 92       	st	X, r1
	return childPtr;
     40a:	80 2f       	mov	r24, r16
     40c:	91 2f       	mov	r25, r17
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	08 95       	ret

00000424 <menuInit>:

MenuNode* menuInit(void)
{
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     430:	0e 94 c9 01 	call	0x392	; 0x392 <mainMenuInit>
     434:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     436:	66 e3       	ldi	r22, 0x36	; 54
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <addChild>
     43e:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     440:	60 e4       	ldi	r22, 0x40	; 64
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	0e 94 db 01 	call	0x3b6	; 0x3b6 <addChild>
	addChild(childPlayGame,"GAME 2");
     448:	67 e4       	ldi	r22, 0x47	; 71
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	ce 01       	movw	r24, r28
     44e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     452:	6e e4       	ldi	r22, 0x4E	; 78
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	c7 01       	movw	r24, r14
     458:	0e 94 db 01 	call	0x3b6	; 0x3b6 <addChild>
     45c:	8c 01       	movw	r16, r24
     45e:	c5 e0       	ldi	r28, 0x05	; 5
     460:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     462:	68 e5       	ldi	r22, 0x58	; 88
     464:	71 e0       	ldi	r23, 0x01	; 1
     466:	c8 01       	movw	r24, r16
     468:	0e 94 db 01 	call	0x3b6	; 0x3b6 <addChild>
     46c:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     46e:	c9 f7       	brne	.-14     	; 0x462 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     470:	60 e6       	ldi	r22, 0x60	; 96
     472:	71 e0       	ldi	r23, 0x01	; 1
     474:	c7 01       	movw	r24, r14
     476:	0e 94 db 01 	call	0x3b6	; 0x3b6 <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     47a:	69 e6       	ldi	r22, 0x69	; 105
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <addChild>
	currentMenu.currentMenuItem = mainMenu;
     482:	e0 ea       	ldi	r30, 0xA0	; 160
     484:	f2 e0       	ldi	r31, 0x02	; 2
     486:	f1 82       	std	Z+1, r15	; 0x01
     488:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     48a:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     48c:	84 e0       	ldi	r24, 0x04	; 4
     48e:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     490:	c7 01       	movw	r24, r14
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	08 95       	ret

000004a0 <oled_pos>:
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     4a0:	80 55       	subi	r24, 0x50	; 80
     4a2:	e0 e0       	ldi	r30, 0x00	; 0
     4a4:	f0 e1       	ldi	r31, 0x10	; 16
     4a6:	80 83       	st	Z, r24
     4a8:	86 2f       	mov	r24, r22
     4aa:	8f 70       	andi	r24, 0x0F	; 15
     4ac:	80 83       	st	Z, r24
     4ae:	62 95       	swap	r22
     4b0:	6f 70       	andi	r22, 0x0F	; 15
     4b2:	60 61       	ori	r22, 0x10	; 16
     4b4:	60 83       	st	Z, r22
     4b6:	08 95       	ret

000004b8 <oled_reset>:
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	10 e0       	ldi	r17, 0x00	; 0
     4c0:	c0 e0       	ldi	r28, 0x00	; 0
     4c2:	d2 e1       	ldi	r29, 0x12	; 18
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	81 2f       	mov	r24, r17
     4c8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <oled_pos>
     4cc:	80 e8       	ldi	r24, 0x80	; 128
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	18 82       	st	Y, r1
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	e9 f7       	brne	.-6      	; 0x4d0 <oled_reset+0x18>
     4d6:	1f 5f       	subi	r17, 0xFF	; 255
     4d8:	18 30       	cpi	r17, 0x08	; 8
     4da:	a1 f7       	brne	.-24     	; 0x4c4 <oled_reset+0xc>
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	08 95       	ret

000004e4 <oled_home>:
	oled_write_d(0b00011000);
	oled_write_d(0b00011000);
}

void oled_home() {
	oled_pos(0,0);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <oled_pos>
     4ec:	08 95       	ret

000004ee <oled_init>:
#define OLED_COMMAND_BASE_ADDRESS 0x1000
#define OLED_DATA_BASE_ADDRESS 0x1200
//#include <util/delay.h>
void oled_write_c(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f0 e1       	ldi	r31, 0x10	; 16
     4f2:	8e ea       	ldi	r24, 0xAE	; 174
     4f4:	80 83       	st	Z, r24
     4f6:	81 ea       	ldi	r24, 0xA1	; 161
     4f8:	80 83       	st	Z, r24
     4fa:	8a ed       	ldi	r24, 0xDA	; 218
     4fc:	80 83       	st	Z, r24
     4fe:	82 e1       	ldi	r24, 0x12	; 18
     500:	80 83       	st	Z, r24
     502:	88 ec       	ldi	r24, 0xC8	; 200
     504:	80 83       	st	Z, r24
     506:	88 ea       	ldi	r24, 0xA8	; 168
     508:	80 83       	st	Z, r24
     50a:	8f e3       	ldi	r24, 0x3F	; 63
     50c:	80 83       	st	Z, r24
     50e:	85 ed       	ldi	r24, 0xD5	; 213
     510:	80 83       	st	Z, r24
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	80 83       	st	Z, r24
     516:	81 e8       	ldi	r24, 0x81	; 129
     518:	80 83       	st	Z, r24
     51a:	80 e5       	ldi	r24, 0x50	; 80
     51c:	80 83       	st	Z, r24
     51e:	89 ed       	ldi	r24, 0xD9	; 217
     520:	80 83       	st	Z, r24
     522:	81 e2       	ldi	r24, 0x21	; 33
     524:	80 83       	st	Z, r24
     526:	80 e2       	ldi	r24, 0x20	; 32
     528:	80 83       	st	Z, r24
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	80 83       	st	Z, r24
     52e:	8b ed       	ldi	r24, 0xDB	; 219
     530:	80 83       	st	Z, r24
     532:	80 e3       	ldi	r24, 0x30	; 48
     534:	80 83       	st	Z, r24
     536:	8d ea       	ldi	r24, 0xAD	; 173
     538:	80 83       	st	Z, r24
     53a:	10 82       	st	Z, r1
     53c:	84 ea       	ldi	r24, 0xA4	; 164
     53e:	80 83       	st	Z, r24
     540:	86 ea       	ldi	r24, 0xA6	; 166
     542:	80 83       	st	Z, r24
     544:	8f ea       	ldi	r24, 0xAF	; 175
     546:	80 83       	st	Z, r24
	oled_write_c(0xa6); //set normal display
	oled_write_c(0xaf); // display on
	
	//oled_write_c(0xa5);
	//_delay_ms(100);
	oled_reset();
     548:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <oled_reset>
	oled_home();
     54c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <oled_home>
     550:	08 95       	ret

00000552 <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "SPI.h"

	void setupInit(void){
	xmem_init();
     552:	0e 94 dd 03 	call	0x7ba	; 0x7ba <xmem_init>
	USART_init(MYUBRR);
     556:	8f e1       	ldi	r24, 0x1F	; 31
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 cc 03 	call	0x798	; 0x798 <USART_init>
	adcInit();
     55e:	0e 94 6e 00 	call	0xdc	; 0xdc <adcInit>
	joystickInit();
     562:	0e 94 2b 01 	call	0x256	; 0x256 <joystickInit>
	touchButton_init();
     566:	0e 94 9f 03 	call	0x73e	; 0x73e <touchButton_init>
	oled_init();
     56a:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_init>
	timer_init();
     56e:	0e 94 8f 03 	call	0x71e	; 0x71e <timer_init>
	sleep_init();
     572:	0e 94 17 01 	call	0x22e	; 0x22e <sleep_init>
	menuInit();
     576:	0e 94 12 02 	call	0x424	; 0x424 <menuInit>
	SPI_MasterInit();
     57a:	0e 94 cf 02 	call	0x59e	; 0x59e <SPI_MasterInit>
     57e:	08 95       	ret

00000580 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     58a:	c6 ea       	ldi	r28, 0xA6	; 166
     58c:	d2 e0       	ldi	r29, 0x02	; 2
     58e:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	0e 94 70 00 	call	0xe0	; 0xe0 <readAdc>
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	//select slave output
	DDRB = (1 << PB4);
     59e:	80 e1       	ldi	r24, 0x10	; 16
     5a0:	87 bb       	out	0x17, r24	; 23
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5) | (1 << PB7);
     5a2:	80 ea       	ldi	r24, 0xA0	; 160
     5a4:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     5a6:	81 e5       	ldi	r24, 0x51	; 81
     5a8:	8d b9       	out	0x0d, r24	; 13
     5aa:	08 95       	ret

000005ac <test_SRAM>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "menu.h"

void test_SRAM(void)
{
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     5bc:	81 e7       	ldi	r24, 0x71	; 113
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	0e 94 b2 08 	call	0x1164	; 0x1164 <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     5c8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rand>
     5cc:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     5ce:	0e 94 55 08 	call	0x10aa	; 0x10aa <srand>
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     5d6:	c1 2c       	mov	r12, r1
     5d8:	d1 2c       	mov	r13, r1

void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     5da:	00 e0       	ldi	r16, 0x00	; 0
     5dc:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     5de:	c9 e8       	ldi	r28, 0x89	; 137
     5e0:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     5e2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rand>
     5e6:	f6 01       	movw	r30, r12
     5e8:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     5ea:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     5ec:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     5ee:	28 17       	cp	r18, r24
     5f0:	a9 f0       	breq	.+42     	; 0x61c <test_SRAM+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     5f2:	99 27       	eor	r25, r25
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	1f 92       	push	r1
     5fa:	2f 93       	push	r18
     5fc:	df 92       	push	r13
     5fe:	cf 92       	push	r12
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	0e 94 b2 08 	call	0x1164	; 0x1164 <printf>
			write_errors++;
     608:	0f 5f       	subi	r16, 0xFF	; 255
     60a:	1f 4f       	sbci	r17, 0xFF	; 255
     60c:	8d b7       	in	r24, 0x3d	; 61
     60e:	9e b7       	in	r25, 0x3e	; 62
     610:	08 96       	adiw	r24, 0x08	; 8
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	9e bf       	out	0x3e, r25	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     61c:	9f ef       	ldi	r25, 0xFF	; 255
     61e:	c9 1a       	sub	r12, r25
     620:	d9 0a       	sbc	r13, r25
     622:	c1 14       	cp	r12, r1
     624:	88 e0       	ldi	r24, 0x08	; 8
     626:	d8 06       	cpc	r13, r24
     628:	e1 f6       	brne	.-72     	; 0x5e2 <test_SRAM+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     62a:	c7 01       	movw	r24, r14
     62c:	0e 94 55 08 	call	0x10aa	; 0x10aa <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     630:	c0 e0       	ldi	r28, 0x00	; 0
     632:	d0 e0       	ldi	r29, 0x00	; 0
void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     634:	e1 2c       	mov	r14, r1
     636:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     638:	0f 2e       	mov	r0, r31
     63a:	f3 ec       	ldi	r31, 0xC3	; 195
     63c:	cf 2e       	mov	r12, r31
     63e:	f1 e0       	ldi	r31, 0x01	; 1
     640:	df 2e       	mov	r13, r31
     642:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     644:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rand>
     648:	fe 01       	movw	r30, r28
     64a:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     64c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     64e:	28 17       	cp	r18, r24
     650:	b1 f0       	breq	.+44     	; 0x67e <test_SRAM+0xd2>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     652:	99 27       	eor	r25, r25
     654:	9f 93       	push	r25
     656:	8f 93       	push	r24
     658:	1f 92       	push	r1
     65a:	2f 93       	push	r18
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	df 92       	push	r13
     662:	cf 92       	push	r12
     664:	0e 94 b2 08 	call	0x1164	; 0x1164 <printf>
			i, retreived_value, some_value);
			retrieval_errors++;
     668:	9f ef       	ldi	r25, 0xFF	; 255
     66a:	e9 1a       	sub	r14, r25
     66c:	f9 0a       	sbc	r15, r25
     66e:	8d b7       	in	r24, 0x3d	; 61
     670:	9e b7       	in	r25, 0x3e	; 62
     672:	08 96       	adiw	r24, 0x08	; 8
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	9e bf       	out	0x3e, r25	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     67e:	21 96       	adiw	r28, 0x01	; 1
     680:	c1 15       	cp	r28, r1
     682:	98 e0       	ldi	r25, 0x08	; 8
     684:	d9 07       	cpc	r29, r25
     686:	f1 f6       	brne	.-68     	; 0x644 <test_SRAM+0x98>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
			i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
     688:	ff 92       	push	r15
     68a:	ef 92       	push	r14
     68c:	1f 93       	push	r17
     68e:	0f 93       	push	r16
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	0e 94 b2 08 	call	0x1164	; 0x1164 <printf>
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	08 95       	ret

000006ba <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
	cli();
     6dc:	f8 94       	cli
	TCNT1 = 0x00;
     6de:	1d bc       	out	0x2d, r1	; 45
     6e0:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     6e2:	8c e9       	ldi	r24, 0x9C	; 156
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0e 94 36 01 	call	0x26c	; 0x26c <joystick_readPosition>
	slider_readPosition(&slider_pos);
     6ea:	86 ea       	ldi	r24, 0xA6	; 166
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	0e 94 c0 02 	call	0x580	; 0x580 <slider_readPosition>
	touchButton_readButtons(&buttons);
     6f2:	84 ea       	ldi	r24, 0xA4	; 164
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	0e 94 b8 03 	call	0x770	; 0x770 <touchButton_readButtons>
	sei();
     6fa:	78 94       	sei
}
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <timer_init>:
}

*/
void timer_init() {
	//Disable global interrupts
	cli();
     71e:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     720:	89 b7       	in	r24, 0x39	; 57
     722:	80 62       	ori	r24, 0x20	; 32
     724:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     726:	1d bc       	out	0x2d, r1	; 45
     728:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     72a:	80 e3       	ldi	r24, 0x30	; 48
     72c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     72e:	85 e0       	ldi	r24, 0x05	; 5
     730:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     732:	80 ef       	ldi	r24, 0xF0	; 240
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	99 bd       	out	0x29, r25	; 41
     738:	88 bd       	out	0x28, r24	; 40
	
	OCR0 = TIMER0_RESET;
	*/
	
	//Enable global interrupts
	sei();
     73a:	78 94       	sei
     73c:	08 95       	ret

0000073e <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     73e:	36 b3       	in	r19, 0x16	; 22
     740:	26 b3       	in	r18, 0x16	; 22
     742:	47 b3       	in	r20, 0x17	; 23
     744:	32 70       	andi	r19, 0x02	; 2
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	bc 01       	movw	r22, r24
     74c:	02 c0       	rjmp	.+4      	; 0x752 <touchButton_init+0x14>
     74e:	66 0f       	add	r22, r22
     750:	77 1f       	adc	r23, r23
     752:	3a 95       	dec	r19
     754:	e2 f7       	brpl	.-8      	; 0x74e <touchButton_init+0x10>
     756:	24 70       	andi	r18, 0x04	; 4
     758:	02 c0       	rjmp	.+4      	; 0x75e <touchButton_init+0x20>
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	2a 95       	dec	r18
     760:	e2 f7       	brpl	.-8      	; 0x75a <touchButton_init+0x1c>
     762:	86 2b       	or	r24, r22
     764:	97 2b       	or	r25, r23
     766:	80 95       	com	r24
     768:	90 95       	com	r25
     76a:	84 23       	and	r24, r20
     76c:	87 bb       	out	0x17, r24	; 23
     76e:	08 95       	ret

00000770 <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     770:	86 b3       	in	r24, 0x16	; 22
     772:	e4 ea       	ldi	r30, 0xA4	; 164
     774:	f2 e0       	ldi	r31, 0x02	; 2
     776:	86 95       	lsr	r24
     778:	81 70       	andi	r24, 0x01	; 1
     77a:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     77c:	86 b3       	in	r24, 0x16	; 22
     77e:	82 fb       	bst	r24, 2
     780:	88 27       	eor	r24, r24
     782:	80 f9       	bld	r24, 0
     784:	81 83       	std	Z+1, r24	; 0x01
     786:	08 95       	ret

00000788 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     788:	5d 9b       	sbis	0x0b, 5	; 11
     78a:	fe cf       	rjmp	.-4      	; 0x788 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     78c:	8c b9       	out	0x0c, r24	; 12
     78e:	08 95       	ret

00000790 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     790:	5f 9b       	sbis	0x0b, 7	; 11
     792:	fe cf       	rjmp	.-4      	; 0x790 <USART_receiveChar>
		;
	
	return UDR0;
     794:	8c b1       	in	r24, 0x0c	; 12
     796:	08 95       	ret

00000798 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     798:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     79a:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     79c:	88 e1       	ldi	r24, 0x18	; 24
     79e:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     7a0:	8e e8       	ldi	r24, 0x8E	; 142
     7a2:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     7a4:	68 ec       	ldi	r22, 0xC8	; 200
     7a6:	73 e0       	ldi	r23, 0x03	; 3
     7a8:	84 ec       	ldi	r24, 0xC4	; 196
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	0e 94 67 08 	call	0x10ce	; 0x10ce <fdevopen>
     7b0:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <uart+0x1>
     7b4:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <uart>
     7b8:	08 95       	ret

000007ba <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     7ba:	85 b7       	in	r24, 0x35	; 53
     7bc:	80 68       	ori	r24, 0x80	; 128
     7be:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     7c0:	80 b7       	in	r24, 0x30	; 48
     7c2:	88 60       	ori	r24, 0x08	; 8
     7c4:	80 bf       	out	0x30, r24	; 48
     7c6:	08 95       	ret
     7c8:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_pscA>
     7cc:	60 f0       	brcs	.+24     	; 0x7e6 <xmem_init+0x2c>
     7ce:	80 e8       	ldi	r24, 0x80	; 128
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <xmem_init+0x1c>
     7d4:	9e ef       	ldi	r25, 0xFE	; 254
     7d6:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscB>
     7da:	28 f0       	brcs	.+10     	; 0x7e6 <xmem_init+0x2c>
     7dc:	40 e8       	ldi	r20, 0x80	; 128
     7de:	51 e0       	ldi	r21, 0x01	; 1
     7e0:	71 f4       	brne	.+28     	; 0x7fe <atan2+0x10>
     7e2:	5e ef       	ldi	r21, 0xFE	; 254
     7e4:	0c c0       	rjmp	.+24     	; 0x7fe <atan2+0x10>
     7e6:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_nan>
     7ea:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_zero>

000007ee <atan2>:
     7ee:	e9 2f       	mov	r30, r25
     7f0:	e0 78       	andi	r30, 0x80	; 128
     7f2:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_split3>
     7f6:	40 f3       	brcs	.-48     	; 0x7c8 <xmem_init+0xe>
     7f8:	09 2e       	mov	r0, r25
     7fa:	05 2a       	or	r0, r21
     7fc:	b1 f3       	breq	.-20     	; 0x7ea <xmem_init+0x30>
     7fe:	26 17       	cp	r18, r22
     800:	37 07       	cpc	r19, r23
     802:	48 07       	cpc	r20, r24
     804:	59 07       	cpc	r21, r25
     806:	38 f0       	brcs	.+14     	; 0x816 <atan2+0x28>
     808:	0e 2e       	mov	r0, r30
     80a:	07 f8       	bld	r0, 7
     80c:	e0 25       	eor	r30, r0
     80e:	69 f0       	breq	.+26     	; 0x82a <atan2+0x3c>
     810:	e0 25       	eor	r30, r0
     812:	e0 64       	ori	r30, 0x40	; 64
     814:	0a c0       	rjmp	.+20     	; 0x82a <atan2+0x3c>
     816:	ef 63       	ori	r30, 0x3F	; 63
     818:	07 f8       	bld	r0, 7
     81a:	00 94       	com	r0
     81c:	07 fa       	bst	r0, 7
     81e:	db 01       	movw	r26, r22
     820:	b9 01       	movw	r22, r18
     822:	9d 01       	movw	r18, r26
     824:	dc 01       	movw	r26, r24
     826:	ca 01       	movw	r24, r20
     828:	ad 01       	movw	r20, r26
     82a:	ef 93       	push	r30
     82c:	0e 94 6d 04 	call	0x8da	; 0x8da <__divsf3_pse>
     830:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_round>
     834:	0e 94 27 04 	call	0x84e	; 0x84e <atan>
     838:	5f 91       	pop	r21
     83a:	55 23       	and	r21, r21
     83c:	39 f0       	breq	.+14     	; 0x84c <atan2+0x5e>
     83e:	2b ed       	ldi	r18, 0xDB	; 219
     840:	3f e0       	ldi	r19, 0x0F	; 15
     842:	49 e4       	ldi	r20, 0x49	; 73
     844:	50 fd       	sbrc	r21, 0
     846:	49 ec       	ldi	r20, 0xC9	; 201
     848:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__addsf3>
     84c:	08 95       	ret

0000084e <atan>:
     84e:	df 93       	push	r29
     850:	dd 27       	eor	r29, r29
     852:	b9 2f       	mov	r27, r25
     854:	bf 77       	andi	r27, 0x7F	; 127
     856:	40 e8       	ldi	r20, 0x80	; 128
     858:	5f e3       	ldi	r21, 0x3F	; 63
     85a:	16 16       	cp	r1, r22
     85c:	17 06       	cpc	r1, r23
     85e:	48 07       	cpc	r20, r24
     860:	5b 07       	cpc	r21, r27
     862:	18 f4       	brcc	.+6      	; 0x86a <atan+0x1c>
     864:	d9 2f       	mov	r29, r25
     866:	0e 94 b3 05 	call	0xb66	; 0xb66 <inverse>
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	7f 93       	push	r23
     870:	6f 93       	push	r22
     872:	0e 94 28 06 	call	0xc50	; 0xc50 <square>
     876:	e0 e7       	ldi	r30, 0x70	; 112
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_powser>
     87e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_round>
     882:	2f 91       	pop	r18
     884:	3f 91       	pop	r19
     886:	4f 91       	pop	r20
     888:	5f 91       	pop	r21
     88a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__mulsf3x>
     88e:	dd 23       	and	r29, r29
     890:	51 f0       	breq	.+20     	; 0x8a6 <atan+0x58>
     892:	90 58       	subi	r25, 0x80	; 128
     894:	a2 ea       	ldi	r26, 0xA2	; 162
     896:	2a ed       	ldi	r18, 0xDA	; 218
     898:	3f e0       	ldi	r19, 0x0F	; 15
     89a:	49 ec       	ldi	r20, 0xC9	; 201
     89c:	5f e3       	ldi	r21, 0x3F	; 63
     89e:	d0 78       	andi	r29, 0x80	; 128
     8a0:	5d 27       	eor	r21, r29
     8a2:	0e 94 44 06 	call	0xc88	; 0xc88 <__addsf3x>
     8a6:	df 91       	pop	r29
     8a8:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_round>

000008ac <__divsf3>:
     8ac:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3x>
     8b0:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_round>
     8b4:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscB>
     8b8:	58 f0       	brcs	.+22     	; 0x8d0 <__divsf3+0x24>
     8ba:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_pscA>
     8be:	40 f0       	brcs	.+16     	; 0x8d0 <__divsf3+0x24>
     8c0:	29 f4       	brne	.+10     	; 0x8cc <__divsf3+0x20>
     8c2:	5f 3f       	cpi	r21, 0xFF	; 255
     8c4:	29 f0       	breq	.+10     	; 0x8d0 <__divsf3+0x24>
     8c6:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
     8ca:	51 11       	cpse	r21, r1
     8cc:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_szero>
     8d0:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_nan>

000008d4 <__divsf3x>:
     8d4:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_split3>
     8d8:	68 f3       	brcs	.-38     	; 0x8b4 <__divsf3+0x8>

000008da <__divsf3_pse>:
     8da:	99 23       	and	r25, r25
     8dc:	b1 f3       	breq	.-20     	; 0x8ca <__divsf3+0x1e>
     8de:	55 23       	and	r21, r21
     8e0:	91 f3       	breq	.-28     	; 0x8c6 <__divsf3+0x1a>
     8e2:	95 1b       	sub	r25, r21
     8e4:	55 0b       	sbc	r21, r21
     8e6:	bb 27       	eor	r27, r27
     8e8:	aa 27       	eor	r26, r26
     8ea:	62 17       	cp	r22, r18
     8ec:	73 07       	cpc	r23, r19
     8ee:	84 07       	cpc	r24, r20
     8f0:	38 f0       	brcs	.+14     	; 0x900 <__divsf3_pse+0x26>
     8f2:	9f 5f       	subi	r25, 0xFF	; 255
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
     8f6:	22 0f       	add	r18, r18
     8f8:	33 1f       	adc	r19, r19
     8fa:	44 1f       	adc	r20, r20
     8fc:	aa 1f       	adc	r26, r26
     8fe:	a9 f3       	breq	.-22     	; 0x8ea <__divsf3_pse+0x10>
     900:	35 d0       	rcall	.+106    	; 0x96c <__divsf3_pse+0x92>
     902:	0e 2e       	mov	r0, r30
     904:	3a f0       	brmi	.+14     	; 0x914 <__divsf3_pse+0x3a>
     906:	e0 e8       	ldi	r30, 0x80	; 128
     908:	32 d0       	rcall	.+100    	; 0x96e <__divsf3_pse+0x94>
     90a:	91 50       	subi	r25, 0x01	; 1
     90c:	50 40       	sbci	r21, 0x00	; 0
     90e:	e6 95       	lsr	r30
     910:	00 1c       	adc	r0, r0
     912:	ca f7       	brpl	.-14     	; 0x906 <__divsf3_pse+0x2c>
     914:	2b d0       	rcall	.+86     	; 0x96c <__divsf3_pse+0x92>
     916:	fe 2f       	mov	r31, r30
     918:	29 d0       	rcall	.+82     	; 0x96c <__divsf3_pse+0x92>
     91a:	66 0f       	add	r22, r22
     91c:	77 1f       	adc	r23, r23
     91e:	88 1f       	adc	r24, r24
     920:	bb 1f       	adc	r27, r27
     922:	26 17       	cp	r18, r22
     924:	37 07       	cpc	r19, r23
     926:	48 07       	cpc	r20, r24
     928:	ab 07       	cpc	r26, r27
     92a:	b0 e8       	ldi	r27, 0x80	; 128
     92c:	09 f0       	breq	.+2      	; 0x930 <__divsf3_pse+0x56>
     92e:	bb 0b       	sbc	r27, r27
     930:	80 2d       	mov	r24, r0
     932:	bf 01       	movw	r22, r30
     934:	ff 27       	eor	r31, r31
     936:	93 58       	subi	r25, 0x83	; 131
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	3a f0       	brmi	.+14     	; 0x94a <__divsf3_pse+0x70>
     93c:	9e 3f       	cpi	r25, 0xFE	; 254
     93e:	51 05       	cpc	r21, r1
     940:	78 f0       	brcs	.+30     	; 0x960 <__divsf3_pse+0x86>
     942:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
     946:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_szero>
     94a:	5f 3f       	cpi	r21, 0xFF	; 255
     94c:	e4 f3       	brlt	.-8      	; 0x946 <__divsf3_pse+0x6c>
     94e:	98 3e       	cpi	r25, 0xE8	; 232
     950:	d4 f3       	brlt	.-12     	; 0x946 <__divsf3_pse+0x6c>
     952:	86 95       	lsr	r24
     954:	77 95       	ror	r23
     956:	67 95       	ror	r22
     958:	b7 95       	ror	r27
     95a:	f7 95       	ror	r31
     95c:	9f 5f       	subi	r25, 0xFF	; 255
     95e:	c9 f7       	brne	.-14     	; 0x952 <__divsf3_pse+0x78>
     960:	88 0f       	add	r24, r24
     962:	91 1d       	adc	r25, r1
     964:	96 95       	lsr	r25
     966:	87 95       	ror	r24
     968:	97 f9       	bld	r25, 7
     96a:	08 95       	ret
     96c:	e1 e0       	ldi	r30, 0x01	; 1
     96e:	66 0f       	add	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	88 1f       	adc	r24, r24
     974:	bb 1f       	adc	r27, r27
     976:	62 17       	cp	r22, r18
     978:	73 07       	cpc	r23, r19
     97a:	84 07       	cpc	r24, r20
     97c:	ba 07       	cpc	r27, r26
     97e:	20 f0       	brcs	.+8      	; 0x988 <__divsf3_pse+0xae>
     980:	62 1b       	sub	r22, r18
     982:	73 0b       	sbc	r23, r19
     984:	84 0b       	sbc	r24, r20
     986:	ba 0b       	sbc	r27, r26
     988:	ee 1f       	adc	r30, r30
     98a:	88 f7       	brcc	.-30     	; 0x96e <__divsf3_pse+0x94>
     98c:	e0 95       	com	r30
     98e:	08 95       	ret

00000990 <__fixsfsi>:
     990:	0e 94 cf 04 	call	0x99e	; 0x99e <__fixunssfsi>
     994:	68 94       	set
     996:	b1 11       	cpse	r27, r1
     998:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_szero>
     99c:	08 95       	ret

0000099e <__fixunssfsi>:
     99e:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_splitA>
     9a2:	88 f0       	brcs	.+34     	; 0x9c6 <__fixunssfsi+0x28>
     9a4:	9f 57       	subi	r25, 0x7F	; 127
     9a6:	98 f0       	brcs	.+38     	; 0x9ce <__fixunssfsi+0x30>
     9a8:	b9 2f       	mov	r27, r25
     9aa:	99 27       	eor	r25, r25
     9ac:	b7 51       	subi	r27, 0x17	; 23
     9ae:	b0 f0       	brcs	.+44     	; 0x9dc <__fixunssfsi+0x3e>
     9b0:	e1 f0       	breq	.+56     	; 0x9ea <__fixunssfsi+0x4c>
     9b2:	66 0f       	add	r22, r22
     9b4:	77 1f       	adc	r23, r23
     9b6:	88 1f       	adc	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	1a f0       	brmi	.+6      	; 0x9c2 <__fixunssfsi+0x24>
     9bc:	ba 95       	dec	r27
     9be:	c9 f7       	brne	.-14     	; 0x9b2 <__fixunssfsi+0x14>
     9c0:	14 c0       	rjmp	.+40     	; 0x9ea <__fixunssfsi+0x4c>
     9c2:	b1 30       	cpi	r27, 0x01	; 1
     9c4:	91 f0       	breq	.+36     	; 0x9ea <__fixunssfsi+0x4c>
     9c6:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_zero>
     9ca:	b1 e0       	ldi	r27, 0x01	; 1
     9cc:	08 95       	ret
     9ce:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_zero>
     9d2:	67 2f       	mov	r22, r23
     9d4:	78 2f       	mov	r23, r24
     9d6:	88 27       	eor	r24, r24
     9d8:	b8 5f       	subi	r27, 0xF8	; 248
     9da:	39 f0       	breq	.+14     	; 0x9ea <__fixunssfsi+0x4c>
     9dc:	b9 3f       	cpi	r27, 0xF9	; 249
     9de:	cc f3       	brlt	.-14     	; 0x9d2 <__fixunssfsi+0x34>
     9e0:	86 95       	lsr	r24
     9e2:	77 95       	ror	r23
     9e4:	67 95       	ror	r22
     9e6:	b3 95       	inc	r27
     9e8:	d9 f7       	brne	.-10     	; 0x9e0 <__fixunssfsi+0x42>
     9ea:	3e f4       	brtc	.+14     	; 0x9fa <__fixunssfsi+0x5c>
     9ec:	90 95       	com	r25
     9ee:	80 95       	com	r24
     9f0:	70 95       	com	r23
     9f2:	61 95       	neg	r22
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	8f 4f       	sbci	r24, 0xFF	; 255
     9f8:	9f 4f       	sbci	r25, 0xFF	; 255
     9fa:	08 95       	ret

000009fc <__floatunsisf>:
     9fc:	e8 94       	clt
     9fe:	09 c0       	rjmp	.+18     	; 0xa12 <__floatsisf+0x12>

00000a00 <__floatsisf>:
     a00:	97 fb       	bst	r25, 7
     a02:	3e f4       	brtc	.+14     	; 0xa12 <__floatsisf+0x12>
     a04:	90 95       	com	r25
     a06:	80 95       	com	r24
     a08:	70 95       	com	r23
     a0a:	61 95       	neg	r22
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	8f 4f       	sbci	r24, 0xFF	; 255
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	99 23       	and	r25, r25
     a14:	a9 f0       	breq	.+42     	; 0xa40 <__floatsisf+0x40>
     a16:	f9 2f       	mov	r31, r25
     a18:	96 e9       	ldi	r25, 0x96	; 150
     a1a:	bb 27       	eor	r27, r27
     a1c:	93 95       	inc	r25
     a1e:	f6 95       	lsr	r31
     a20:	87 95       	ror	r24
     a22:	77 95       	ror	r23
     a24:	67 95       	ror	r22
     a26:	b7 95       	ror	r27
     a28:	f1 11       	cpse	r31, r1
     a2a:	f8 cf       	rjmp	.-16     	; 0xa1c <__floatsisf+0x1c>
     a2c:	fa f4       	brpl	.+62     	; 0xa6c <__floatsisf+0x6c>
     a2e:	bb 0f       	add	r27, r27
     a30:	11 f4       	brne	.+4      	; 0xa36 <__floatsisf+0x36>
     a32:	60 ff       	sbrs	r22, 0
     a34:	1b c0       	rjmp	.+54     	; 0xa6c <__floatsisf+0x6c>
     a36:	6f 5f       	subi	r22, 0xFF	; 255
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	8f 4f       	sbci	r24, 0xFF	; 255
     a3c:	9f 4f       	sbci	r25, 0xFF	; 255
     a3e:	16 c0       	rjmp	.+44     	; 0xa6c <__floatsisf+0x6c>
     a40:	88 23       	and	r24, r24
     a42:	11 f0       	breq	.+4      	; 0xa48 <__floatsisf+0x48>
     a44:	96 e9       	ldi	r25, 0x96	; 150
     a46:	11 c0       	rjmp	.+34     	; 0xa6a <__floatsisf+0x6a>
     a48:	77 23       	and	r23, r23
     a4a:	21 f0       	breq	.+8      	; 0xa54 <__floatsisf+0x54>
     a4c:	9e e8       	ldi	r25, 0x8E	; 142
     a4e:	87 2f       	mov	r24, r23
     a50:	76 2f       	mov	r23, r22
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <__floatsisf+0x5e>
     a54:	66 23       	and	r22, r22
     a56:	71 f0       	breq	.+28     	; 0xa74 <__floatsisf+0x74>
     a58:	96 e8       	ldi	r25, 0x86	; 134
     a5a:	86 2f       	mov	r24, r22
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	2a f0       	brmi	.+10     	; 0xa6c <__floatsisf+0x6c>
     a62:	9a 95       	dec	r25
     a64:	66 0f       	add	r22, r22
     a66:	77 1f       	adc	r23, r23
     a68:	88 1f       	adc	r24, r24
     a6a:	da f7       	brpl	.-10     	; 0xa62 <__floatsisf+0x62>
     a6c:	88 0f       	add	r24, r24
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24
     a72:	97 f9       	bld	r25, 7
     a74:	08 95       	ret

00000a76 <__fp_inf>:
     a76:	97 f9       	bld	r25, 7
     a78:	9f 67       	ori	r25, 0x7F	; 127
     a7a:	80 e8       	ldi	r24, 0x80	; 128
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	08 95       	ret

00000a82 <__fp_nan>:
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	80 ec       	ldi	r24, 0xC0	; 192
     a86:	08 95       	ret

00000a88 <__fp_powser>:
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	1f 93       	push	r17
     a8e:	0f 93       	push	r16
     a90:	ff 92       	push	r15
     a92:	ef 92       	push	r14
     a94:	df 92       	push	r13
     a96:	7b 01       	movw	r14, r22
     a98:	8c 01       	movw	r16, r24
     a9a:	68 94       	set
     a9c:	06 c0       	rjmp	.+12     	; 0xaaa <__fp_powser+0x22>
     a9e:	da 2e       	mov	r13, r26
     aa0:	ef 01       	movw	r28, r30
     aa2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__mulsf3x>
     aa6:	fe 01       	movw	r30, r28
     aa8:	e8 94       	clt
     aaa:	a5 91       	lpm	r26, Z+
     aac:	25 91       	lpm	r18, Z+
     aae:	35 91       	lpm	r19, Z+
     ab0:	45 91       	lpm	r20, Z+
     ab2:	55 91       	lpm	r21, Z+
     ab4:	a6 f3       	brts	.-24     	; 0xa9e <__fp_powser+0x16>
     ab6:	ef 01       	movw	r28, r30
     ab8:	0e 94 44 06 	call	0xc88	; 0xc88 <__addsf3x>
     abc:	fe 01       	movw	r30, r28
     abe:	97 01       	movw	r18, r14
     ac0:	a8 01       	movw	r20, r16
     ac2:	da 94       	dec	r13
     ac4:	69 f7       	brne	.-38     	; 0xaa0 <__fp_powser+0x18>
     ac6:	df 90       	pop	r13
     ac8:	ef 90       	pop	r14
     aca:	ff 90       	pop	r15
     acc:	0f 91       	pop	r16
     ace:	1f 91       	pop	r17
     ad0:	cf 91       	pop	r28
     ad2:	df 91       	pop	r29
     ad4:	08 95       	ret

00000ad6 <__fp_pscA>:
     ad6:	00 24       	eor	r0, r0
     ad8:	0a 94       	dec	r0
     ada:	16 16       	cp	r1, r22
     adc:	17 06       	cpc	r1, r23
     ade:	18 06       	cpc	r1, r24
     ae0:	09 06       	cpc	r0, r25
     ae2:	08 95       	ret

00000ae4 <__fp_pscB>:
     ae4:	00 24       	eor	r0, r0
     ae6:	0a 94       	dec	r0
     ae8:	12 16       	cp	r1, r18
     aea:	13 06       	cpc	r1, r19
     aec:	14 06       	cpc	r1, r20
     aee:	05 06       	cpc	r0, r21
     af0:	08 95       	ret

00000af2 <__fp_round>:
     af2:	09 2e       	mov	r0, r25
     af4:	03 94       	inc	r0
     af6:	00 0c       	add	r0, r0
     af8:	11 f4       	brne	.+4      	; 0xafe <__fp_round+0xc>
     afa:	88 23       	and	r24, r24
     afc:	52 f0       	brmi	.+20     	; 0xb12 <__fp_round+0x20>
     afe:	bb 0f       	add	r27, r27
     b00:	40 f4       	brcc	.+16     	; 0xb12 <__fp_round+0x20>
     b02:	bf 2b       	or	r27, r31
     b04:	11 f4       	brne	.+4      	; 0xb0a <__fp_round+0x18>
     b06:	60 ff       	sbrs	r22, 0
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <__fp_round+0x20>
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	8f 4f       	sbci	r24, 0xFF	; 255
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	08 95       	ret

00000b14 <__fp_split3>:
     b14:	57 fd       	sbrc	r21, 7
     b16:	90 58       	subi	r25, 0x80	; 128
     b18:	44 0f       	add	r20, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	59 f0       	breq	.+22     	; 0xb34 <__fp_splitA+0x10>
     b1e:	5f 3f       	cpi	r21, 0xFF	; 255
     b20:	71 f0       	breq	.+28     	; 0xb3e <__fp_splitA+0x1a>
     b22:	47 95       	ror	r20

00000b24 <__fp_splitA>:
     b24:	88 0f       	add	r24, r24
     b26:	97 fb       	bst	r25, 7
     b28:	99 1f       	adc	r25, r25
     b2a:	61 f0       	breq	.+24     	; 0xb44 <__fp_splitA+0x20>
     b2c:	9f 3f       	cpi	r25, 0xFF	; 255
     b2e:	79 f0       	breq	.+30     	; 0xb4e <__fp_splitA+0x2a>
     b30:	87 95       	ror	r24
     b32:	08 95       	ret
     b34:	12 16       	cp	r1, r18
     b36:	13 06       	cpc	r1, r19
     b38:	14 06       	cpc	r1, r20
     b3a:	55 1f       	adc	r21, r21
     b3c:	f2 cf       	rjmp	.-28     	; 0xb22 <__fp_split3+0xe>
     b3e:	46 95       	lsr	r20
     b40:	f1 df       	rcall	.-30     	; 0xb24 <__fp_splitA>
     b42:	08 c0       	rjmp	.+16     	; 0xb54 <__fp_splitA+0x30>
     b44:	16 16       	cp	r1, r22
     b46:	17 06       	cpc	r1, r23
     b48:	18 06       	cpc	r1, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	f1 cf       	rjmp	.-30     	; 0xb30 <__fp_splitA+0xc>
     b4e:	86 95       	lsr	r24
     b50:	71 05       	cpc	r23, r1
     b52:	61 05       	cpc	r22, r1
     b54:	08 94       	sec
     b56:	08 95       	ret

00000b58 <__fp_zero>:
     b58:	e8 94       	clt

00000b5a <__fp_szero>:
     b5a:	bb 27       	eor	r27, r27
     b5c:	66 27       	eor	r22, r22
     b5e:	77 27       	eor	r23, r23
     b60:	cb 01       	movw	r24, r22
     b62:	97 f9       	bld	r25, 7
     b64:	08 95       	ret

00000b66 <inverse>:
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e8       	ldi	r24, 0x80	; 128
     b70:	9f e3       	ldi	r25, 0x3F	; 63
     b72:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__divsf3>

00000b76 <__mulsf3>:
     b76:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__mulsf3x>
     b7a:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_round>
     b7e:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_pscA>
     b82:	38 f0       	brcs	.+14     	; 0xb92 <__mulsf3+0x1c>
     b84:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscB>
     b88:	20 f0       	brcs	.+8      	; 0xb92 <__mulsf3+0x1c>
     b8a:	95 23       	and	r25, r21
     b8c:	11 f0       	breq	.+4      	; 0xb92 <__mulsf3+0x1c>
     b8e:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
     b92:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_nan>
     b96:	11 24       	eor	r1, r1
     b98:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_szero>

00000b9c <__mulsf3x>:
     b9c:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_split3>
     ba0:	70 f3       	brcs	.-36     	; 0xb7e <__mulsf3+0x8>

00000ba2 <__mulsf3_pse>:
     ba2:	95 9f       	mul	r25, r21
     ba4:	c1 f3       	breq	.-16     	; 0xb96 <__mulsf3+0x20>
     ba6:	95 0f       	add	r25, r21
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	55 1f       	adc	r21, r21
     bac:	62 9f       	mul	r22, r18
     bae:	f0 01       	movw	r30, r0
     bb0:	72 9f       	mul	r23, r18
     bb2:	bb 27       	eor	r27, r27
     bb4:	f0 0d       	add	r31, r0
     bb6:	b1 1d       	adc	r27, r1
     bb8:	63 9f       	mul	r22, r19
     bba:	aa 27       	eor	r26, r26
     bbc:	f0 0d       	add	r31, r0
     bbe:	b1 1d       	adc	r27, r1
     bc0:	aa 1f       	adc	r26, r26
     bc2:	64 9f       	mul	r22, r20
     bc4:	66 27       	eor	r22, r22
     bc6:	b0 0d       	add	r27, r0
     bc8:	a1 1d       	adc	r26, r1
     bca:	66 1f       	adc	r22, r22
     bcc:	82 9f       	mul	r24, r18
     bce:	22 27       	eor	r18, r18
     bd0:	b0 0d       	add	r27, r0
     bd2:	a1 1d       	adc	r26, r1
     bd4:	62 1f       	adc	r22, r18
     bd6:	73 9f       	mul	r23, r19
     bd8:	b0 0d       	add	r27, r0
     bda:	a1 1d       	adc	r26, r1
     bdc:	62 1f       	adc	r22, r18
     bde:	83 9f       	mul	r24, r19
     be0:	a0 0d       	add	r26, r0
     be2:	61 1d       	adc	r22, r1
     be4:	22 1f       	adc	r18, r18
     be6:	74 9f       	mul	r23, r20
     be8:	33 27       	eor	r19, r19
     bea:	a0 0d       	add	r26, r0
     bec:	61 1d       	adc	r22, r1
     bee:	23 1f       	adc	r18, r19
     bf0:	84 9f       	mul	r24, r20
     bf2:	60 0d       	add	r22, r0
     bf4:	21 1d       	adc	r18, r1
     bf6:	82 2f       	mov	r24, r18
     bf8:	76 2f       	mov	r23, r22
     bfa:	6a 2f       	mov	r22, r26
     bfc:	11 24       	eor	r1, r1
     bfe:	9f 57       	subi	r25, 0x7F	; 127
     c00:	50 40       	sbci	r21, 0x00	; 0
     c02:	9a f0       	brmi	.+38     	; 0xc2a <__mulsf3_pse+0x88>
     c04:	f1 f0       	breq	.+60     	; 0xc42 <__mulsf3_pse+0xa0>
     c06:	88 23       	and	r24, r24
     c08:	4a f0       	brmi	.+18     	; 0xc1c <__mulsf3_pse+0x7a>
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	bb 1f       	adc	r27, r27
     c10:	66 1f       	adc	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	88 1f       	adc	r24, r24
     c16:	91 50       	subi	r25, 0x01	; 1
     c18:	50 40       	sbci	r21, 0x00	; 0
     c1a:	a9 f7       	brne	.-22     	; 0xc06 <__mulsf3_pse+0x64>
     c1c:	9e 3f       	cpi	r25, 0xFE	; 254
     c1e:	51 05       	cpc	r21, r1
     c20:	80 f0       	brcs	.+32     	; 0xc42 <__mulsf3_pse+0xa0>
     c22:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
     c26:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_szero>
     c2a:	5f 3f       	cpi	r21, 0xFF	; 255
     c2c:	e4 f3       	brlt	.-8      	; 0xc26 <__mulsf3_pse+0x84>
     c2e:	98 3e       	cpi	r25, 0xE8	; 232
     c30:	d4 f3       	brlt	.-12     	; 0xc26 <__mulsf3_pse+0x84>
     c32:	86 95       	lsr	r24
     c34:	77 95       	ror	r23
     c36:	67 95       	ror	r22
     c38:	b7 95       	ror	r27
     c3a:	f7 95       	ror	r31
     c3c:	e7 95       	ror	r30
     c3e:	9f 5f       	subi	r25, 0xFF	; 255
     c40:	c1 f7       	brne	.-16     	; 0xc32 <__mulsf3_pse+0x90>
     c42:	fe 2b       	or	r31, r30
     c44:	88 0f       	add	r24, r24
     c46:	91 1d       	adc	r25, r1
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	97 f9       	bld	r25, 7
     c4e:	08 95       	ret

00000c50 <square>:
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__mulsf3>

00000c58 <__subsf3>:
     c58:	50 58       	subi	r21, 0x80	; 128

00000c5a <__addsf3>:
     c5a:	bb 27       	eor	r27, r27
     c5c:	aa 27       	eor	r26, r26
     c5e:	0e 94 44 06 	call	0xc88	; 0xc88 <__addsf3x>
     c62:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_round>
     c66:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_pscA>
     c6a:	38 f0       	brcs	.+14     	; 0xc7a <__addsf3+0x20>
     c6c:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscB>
     c70:	20 f0       	brcs	.+8      	; 0xc7a <__addsf3+0x20>
     c72:	39 f4       	brne	.+14     	; 0xc82 <__addsf3+0x28>
     c74:	9f 3f       	cpi	r25, 0xFF	; 255
     c76:	19 f4       	brne	.+6      	; 0xc7e <__addsf3+0x24>
     c78:	26 f4       	brtc	.+8      	; 0xc82 <__addsf3+0x28>
     c7a:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_nan>
     c7e:	0e f4       	brtc	.+2      	; 0xc82 <__addsf3+0x28>
     c80:	e0 95       	com	r30
     c82:	e7 fb       	bst	r30, 7
     c84:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>

00000c88 <__addsf3x>:
     c88:	e9 2f       	mov	r30, r25
     c8a:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_split3>
     c8e:	58 f3       	brcs	.-42     	; 0xc66 <__addsf3+0xc>
     c90:	ba 17       	cp	r27, r26
     c92:	62 07       	cpc	r22, r18
     c94:	73 07       	cpc	r23, r19
     c96:	84 07       	cpc	r24, r20
     c98:	95 07       	cpc	r25, r21
     c9a:	20 f0       	brcs	.+8      	; 0xca4 <__addsf3x+0x1c>
     c9c:	79 f4       	brne	.+30     	; 0xcbc <__addsf3x+0x34>
     c9e:	a6 f5       	brtc	.+104    	; 0xd08 <__addsf3x+0x80>
     ca0:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_zero>
     ca4:	0e f4       	brtc	.+2      	; 0xca8 <__addsf3x+0x20>
     ca6:	e0 95       	com	r30
     ca8:	0b 2e       	mov	r0, r27
     caa:	ba 2f       	mov	r27, r26
     cac:	a0 2d       	mov	r26, r0
     cae:	0b 01       	movw	r0, r22
     cb0:	b9 01       	movw	r22, r18
     cb2:	90 01       	movw	r18, r0
     cb4:	0c 01       	movw	r0, r24
     cb6:	ca 01       	movw	r24, r20
     cb8:	a0 01       	movw	r20, r0
     cba:	11 24       	eor	r1, r1
     cbc:	ff 27       	eor	r31, r31
     cbe:	59 1b       	sub	r21, r25
     cc0:	99 f0       	breq	.+38     	; 0xce8 <__addsf3x+0x60>
     cc2:	59 3f       	cpi	r21, 0xF9	; 249
     cc4:	50 f4       	brcc	.+20     	; 0xcda <__addsf3x+0x52>
     cc6:	50 3e       	cpi	r21, 0xE0	; 224
     cc8:	68 f1       	brcs	.+90     	; 0xd24 <__addsf3x+0x9c>
     cca:	1a 16       	cp	r1, r26
     ccc:	f0 40       	sbci	r31, 0x00	; 0
     cce:	a2 2f       	mov	r26, r18
     cd0:	23 2f       	mov	r18, r19
     cd2:	34 2f       	mov	r19, r20
     cd4:	44 27       	eor	r20, r20
     cd6:	58 5f       	subi	r21, 0xF8	; 248
     cd8:	f3 cf       	rjmp	.-26     	; 0xcc0 <__addsf3x+0x38>
     cda:	46 95       	lsr	r20
     cdc:	37 95       	ror	r19
     cde:	27 95       	ror	r18
     ce0:	a7 95       	ror	r26
     ce2:	f0 40       	sbci	r31, 0x00	; 0
     ce4:	53 95       	inc	r21
     ce6:	c9 f7       	brne	.-14     	; 0xcda <__addsf3x+0x52>
     ce8:	7e f4       	brtc	.+30     	; 0xd08 <__addsf3x+0x80>
     cea:	1f 16       	cp	r1, r31
     cec:	ba 0b       	sbc	r27, r26
     cee:	62 0b       	sbc	r22, r18
     cf0:	73 0b       	sbc	r23, r19
     cf2:	84 0b       	sbc	r24, r20
     cf4:	ba f0       	brmi	.+46     	; 0xd24 <__addsf3x+0x9c>
     cf6:	91 50       	subi	r25, 0x01	; 1
     cf8:	a1 f0       	breq	.+40     	; 0xd22 <__addsf3x+0x9a>
     cfa:	ff 0f       	add	r31, r31
     cfc:	bb 1f       	adc	r27, r27
     cfe:	66 1f       	adc	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	88 1f       	adc	r24, r24
     d04:	c2 f7       	brpl	.-16     	; 0xcf6 <__addsf3x+0x6e>
     d06:	0e c0       	rjmp	.+28     	; 0xd24 <__addsf3x+0x9c>
     d08:	ba 0f       	add	r27, r26
     d0a:	62 1f       	adc	r22, r18
     d0c:	73 1f       	adc	r23, r19
     d0e:	84 1f       	adc	r24, r20
     d10:	48 f4       	brcc	.+18     	; 0xd24 <__addsf3x+0x9c>
     d12:	87 95       	ror	r24
     d14:	77 95       	ror	r23
     d16:	67 95       	ror	r22
     d18:	b7 95       	ror	r27
     d1a:	f7 95       	ror	r31
     d1c:	9e 3f       	cpi	r25, 0xFE	; 254
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <__addsf3x+0x9a>
     d20:	b0 cf       	rjmp	.-160    	; 0xc82 <__addsf3+0x28>
     d22:	93 95       	inc	r25
     d24:	88 0f       	add	r24, r24
     d26:	08 f0       	brcs	.+2      	; 0xd2a <__addsf3x+0xa2>
     d28:	99 27       	eor	r25, r25
     d2a:	ee 0f       	add	r30, r30
     d2c:	97 95       	ror	r25
     d2e:	87 95       	ror	r24
     d30:	08 95       	ret

00000d32 <__divmodhi4>:
     d32:	97 fb       	bst	r25, 7
     d34:	07 2e       	mov	r0, r23
     d36:	16 f4       	brtc	.+4      	; 0xd3c <__divmodhi4+0xa>
     d38:	00 94       	com	r0
     d3a:	07 d0       	rcall	.+14     	; 0xd4a <__divmodhi4_neg1>
     d3c:	77 fd       	sbrc	r23, 7
     d3e:	09 d0       	rcall	.+18     	; 0xd52 <__divmodhi4_neg2>
     d40:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__udivmodhi4>
     d44:	07 fc       	sbrc	r0, 7
     d46:	05 d0       	rcall	.+10     	; 0xd52 <__divmodhi4_neg2>
     d48:	3e f4       	brtc	.+14     	; 0xd58 <__divmodhi4_exit>

00000d4a <__divmodhi4_neg1>:
     d4a:	90 95       	com	r25
     d4c:	81 95       	neg	r24
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	08 95       	ret

00000d52 <__divmodhi4_neg2>:
     d52:	70 95       	com	r23
     d54:	61 95       	neg	r22
     d56:	7f 4f       	sbci	r23, 0xFF	; 255

00000d58 <__divmodhi4_exit>:
     d58:	08 95       	ret

00000d5a <__udivmodsi4>:
     d5a:	a1 e2       	ldi	r26, 0x21	; 33
     d5c:	1a 2e       	mov	r1, r26
     d5e:	aa 1b       	sub	r26, r26
     d60:	bb 1b       	sub	r27, r27
     d62:	fd 01       	movw	r30, r26
     d64:	0d c0       	rjmp	.+26     	; 0xd80 <__udivmodsi4_ep>

00000d66 <__udivmodsi4_loop>:
     d66:	aa 1f       	adc	r26, r26
     d68:	bb 1f       	adc	r27, r27
     d6a:	ee 1f       	adc	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	a2 17       	cp	r26, r18
     d70:	b3 07       	cpc	r27, r19
     d72:	e4 07       	cpc	r30, r20
     d74:	f5 07       	cpc	r31, r21
     d76:	20 f0       	brcs	.+8      	; 0xd80 <__udivmodsi4_ep>
     d78:	a2 1b       	sub	r26, r18
     d7a:	b3 0b       	sbc	r27, r19
     d7c:	e4 0b       	sbc	r30, r20
     d7e:	f5 0b       	sbc	r31, r21

00000d80 <__udivmodsi4_ep>:
     d80:	66 1f       	adc	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	88 1f       	adc	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	1a 94       	dec	r1
     d8a:	69 f7       	brne	.-38     	; 0xd66 <__udivmodsi4_loop>
     d8c:	60 95       	com	r22
     d8e:	70 95       	com	r23
     d90:	80 95       	com	r24
     d92:	90 95       	com	r25
     d94:	9b 01       	movw	r18, r22
     d96:	ac 01       	movw	r20, r24
     d98:	bd 01       	movw	r22, r26
     d9a:	cf 01       	movw	r24, r30
     d9c:	08 95       	ret

00000d9e <__udivmodhi4>:
     d9e:	aa 1b       	sub	r26, r26
     da0:	bb 1b       	sub	r27, r27
     da2:	51 e1       	ldi	r21, 0x11	; 17
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <__udivmodhi4_ep>

00000da6 <__udivmodhi4_loop>:
     da6:	aa 1f       	adc	r26, r26
     da8:	bb 1f       	adc	r27, r27
     daa:	a6 17       	cp	r26, r22
     dac:	b7 07       	cpc	r27, r23
     dae:	10 f0       	brcs	.+4      	; 0xdb4 <__udivmodhi4_ep>
     db0:	a6 1b       	sub	r26, r22
     db2:	b7 0b       	sbc	r27, r23

00000db4 <__udivmodhi4_ep>:
     db4:	88 1f       	adc	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	5a 95       	dec	r21
     dba:	a9 f7       	brne	.-22     	; 0xda6 <__udivmodhi4_loop>
     dbc:	80 95       	com	r24
     dbe:	90 95       	com	r25
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	08 95       	ret

00000dc6 <malloc>:
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	91 05       	cpc	r25, r1
     dd2:	10 f4       	brcc	.+4      	; 0xdd8 <malloc+0x12>
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <__flp>
     ddc:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <__flp+0x1>
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	30 97       	sbiw	r30, 0x00	; 0
     dea:	19 f1       	breq	.+70     	; 0xe32 <malloc+0x6c>
     dec:	40 81       	ld	r20, Z
     dee:	51 81       	ldd	r21, Z+1	; 0x01
     df0:	02 81       	ldd	r16, Z+2	; 0x02
     df2:	13 81       	ldd	r17, Z+3	; 0x03
     df4:	48 17       	cp	r20, r24
     df6:	59 07       	cpc	r21, r25
     df8:	c8 f0       	brcs	.+50     	; 0xe2c <malloc+0x66>
     dfa:	84 17       	cp	r24, r20
     dfc:	95 07       	cpc	r25, r21
     dfe:	69 f4       	brne	.+26     	; 0xe1a <malloc+0x54>
     e00:	10 97       	sbiw	r26, 0x00	; 0
     e02:	31 f0       	breq	.+12     	; 0xe10 <malloc+0x4a>
     e04:	12 96       	adiw	r26, 0x02	; 2
     e06:	0c 93       	st	X, r16
     e08:	12 97       	sbiw	r26, 0x02	; 2
     e0a:	13 96       	adiw	r26, 0x03	; 3
     e0c:	1c 93       	st	X, r17
     e0e:	27 c0       	rjmp	.+78     	; 0xe5e <malloc+0x98>
     e10:	00 93 ae 02 	sts	0x02AE, r16	; 0x8002ae <__flp>
     e14:	10 93 af 02 	sts	0x02AF, r17	; 0x8002af <__flp+0x1>
     e18:	22 c0       	rjmp	.+68     	; 0xe5e <malloc+0x98>
     e1a:	21 15       	cp	r18, r1
     e1c:	31 05       	cpc	r19, r1
     e1e:	19 f0       	breq	.+6      	; 0xe26 <malloc+0x60>
     e20:	42 17       	cp	r20, r18
     e22:	53 07       	cpc	r21, r19
     e24:	18 f4       	brcc	.+6      	; 0xe2c <malloc+0x66>
     e26:	9a 01       	movw	r18, r20
     e28:	bd 01       	movw	r22, r26
     e2a:	ef 01       	movw	r28, r30
     e2c:	df 01       	movw	r26, r30
     e2e:	f8 01       	movw	r30, r16
     e30:	db cf       	rjmp	.-74     	; 0xde8 <malloc+0x22>
     e32:	21 15       	cp	r18, r1
     e34:	31 05       	cpc	r19, r1
     e36:	f9 f0       	breq	.+62     	; 0xe76 <malloc+0xb0>
     e38:	28 1b       	sub	r18, r24
     e3a:	39 0b       	sbc	r19, r25
     e3c:	24 30       	cpi	r18, 0x04	; 4
     e3e:	31 05       	cpc	r19, r1
     e40:	80 f4       	brcc	.+32     	; 0xe62 <malloc+0x9c>
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	61 15       	cp	r22, r1
     e48:	71 05       	cpc	r23, r1
     e4a:	21 f0       	breq	.+8      	; 0xe54 <malloc+0x8e>
     e4c:	fb 01       	movw	r30, r22
     e4e:	93 83       	std	Z+3, r25	; 0x03
     e50:	82 83       	std	Z+2, r24	; 0x02
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <malloc+0x96>
     e54:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <__flp+0x1>
     e58:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__flp>
     e5c:	fe 01       	movw	r30, r28
     e5e:	32 96       	adiw	r30, 0x02	; 2
     e60:	44 c0       	rjmp	.+136    	; 0xeea <malloc+0x124>
     e62:	fe 01       	movw	r30, r28
     e64:	e2 0f       	add	r30, r18
     e66:	f3 1f       	adc	r31, r19
     e68:	81 93       	st	Z+, r24
     e6a:	91 93       	st	Z+, r25
     e6c:	22 50       	subi	r18, 0x02	; 2
     e6e:	31 09       	sbc	r19, r1
     e70:	39 83       	std	Y+1, r19	; 0x01
     e72:	28 83       	st	Y, r18
     e74:	3a c0       	rjmp	.+116    	; 0xeea <malloc+0x124>
     e76:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <__brkval>
     e7a:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <__brkval+0x1>
     e7e:	23 2b       	or	r18, r19
     e80:	41 f4       	brne	.+16     	; 0xe92 <malloc+0xcc>
     e82:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e86:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e8a:	30 93 ad 02 	sts	0x02AD, r19	; 0x8002ad <__brkval+0x1>
     e8e:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <__brkval>
     e92:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     e96:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     e9a:	21 15       	cp	r18, r1
     e9c:	31 05       	cpc	r19, r1
     e9e:	41 f4       	brne	.+16     	; 0xeb0 <malloc+0xea>
     ea0:	2d b7       	in	r18, 0x3d	; 61
     ea2:	3e b7       	in	r19, 0x3e	; 62
     ea4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     ea8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     eac:	24 1b       	sub	r18, r20
     eae:	35 0b       	sbc	r19, r21
     eb0:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <__brkval>
     eb4:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <__brkval+0x1>
     eb8:	e2 17       	cp	r30, r18
     eba:	f3 07       	cpc	r31, r19
     ebc:	a0 f4       	brcc	.+40     	; 0xee6 <malloc+0x120>
     ebe:	2e 1b       	sub	r18, r30
     ec0:	3f 0b       	sbc	r19, r31
     ec2:	28 17       	cp	r18, r24
     ec4:	39 07       	cpc	r19, r25
     ec6:	78 f0       	brcs	.+30     	; 0xee6 <malloc+0x120>
     ec8:	ac 01       	movw	r20, r24
     eca:	4e 5f       	subi	r20, 0xFE	; 254
     ecc:	5f 4f       	sbci	r21, 0xFF	; 255
     ece:	24 17       	cp	r18, r20
     ed0:	35 07       	cpc	r19, r21
     ed2:	48 f0       	brcs	.+18     	; 0xee6 <malloc+0x120>
     ed4:	4e 0f       	add	r20, r30
     ed6:	5f 1f       	adc	r21, r31
     ed8:	50 93 ad 02 	sts	0x02AD, r21	; 0x8002ad <__brkval+0x1>
     edc:	40 93 ac 02 	sts	0x02AC, r20	; 0x8002ac <__brkval>
     ee0:	81 93       	st	Z+, r24
     ee2:	91 93       	st	Z+, r25
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <malloc+0x124>
     ee6:	e0 e0       	ldi	r30, 0x00	; 0
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	cf 01       	movw	r24, r30
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <free>:
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	09 f4       	brne	.+2      	; 0xf00 <free+0xa>
     efe:	81 c0       	rjmp	.+258    	; 0x1002 <free+0x10c>
     f00:	fc 01       	movw	r30, r24
     f02:	32 97       	sbiw	r30, 0x02	; 2
     f04:	13 82       	std	Z+3, r1	; 0x03
     f06:	12 82       	std	Z+2, r1	; 0x02
     f08:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <__flp>
     f0c:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <__flp+0x1>
     f10:	10 97       	sbiw	r26, 0x00	; 0
     f12:	81 f4       	brne	.+32     	; 0xf34 <free+0x3e>
     f14:	20 81       	ld	r18, Z
     f16:	31 81       	ldd	r19, Z+1	; 0x01
     f18:	82 0f       	add	r24, r18
     f1a:	93 1f       	adc	r25, r19
     f1c:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <__brkval>
     f20:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <__brkval+0x1>
     f24:	28 17       	cp	r18, r24
     f26:	39 07       	cpc	r19, r25
     f28:	51 f5       	brne	.+84     	; 0xf7e <free+0x88>
     f2a:	f0 93 ad 02 	sts	0x02AD, r31	; 0x8002ad <__brkval+0x1>
     f2e:	e0 93 ac 02 	sts	0x02AC, r30	; 0x8002ac <__brkval>
     f32:	67 c0       	rjmp	.+206    	; 0x1002 <free+0x10c>
     f34:	ed 01       	movw	r28, r26
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	ce 17       	cp	r28, r30
     f3c:	df 07       	cpc	r29, r31
     f3e:	40 f4       	brcc	.+16     	; 0xf50 <free+0x5a>
     f40:	4a 81       	ldd	r20, Y+2	; 0x02
     f42:	5b 81       	ldd	r21, Y+3	; 0x03
     f44:	9e 01       	movw	r18, r28
     f46:	41 15       	cp	r20, r1
     f48:	51 05       	cpc	r21, r1
     f4a:	f1 f0       	breq	.+60     	; 0xf88 <free+0x92>
     f4c:	ea 01       	movw	r28, r20
     f4e:	f5 cf       	rjmp	.-22     	; 0xf3a <free+0x44>
     f50:	d3 83       	std	Z+3, r29	; 0x03
     f52:	c2 83       	std	Z+2, r28	; 0x02
     f54:	40 81       	ld	r20, Z
     f56:	51 81       	ldd	r21, Z+1	; 0x01
     f58:	84 0f       	add	r24, r20
     f5a:	95 1f       	adc	r25, r21
     f5c:	c8 17       	cp	r28, r24
     f5e:	d9 07       	cpc	r29, r25
     f60:	59 f4       	brne	.+22     	; 0xf78 <free+0x82>
     f62:	88 81       	ld	r24, Y
     f64:	99 81       	ldd	r25, Y+1	; 0x01
     f66:	84 0f       	add	r24, r20
     f68:	95 1f       	adc	r25, r21
     f6a:	02 96       	adiw	r24, 0x02	; 2
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	9b 81       	ldd	r25, Y+3	; 0x03
     f74:	93 83       	std	Z+3, r25	; 0x03
     f76:	82 83       	std	Z+2, r24	; 0x02
     f78:	21 15       	cp	r18, r1
     f7a:	31 05       	cpc	r19, r1
     f7c:	29 f4       	brne	.+10     	; 0xf88 <free+0x92>
     f7e:	f0 93 af 02 	sts	0x02AF, r31	; 0x8002af <__flp+0x1>
     f82:	e0 93 ae 02 	sts	0x02AE, r30	; 0x8002ae <__flp>
     f86:	3d c0       	rjmp	.+122    	; 0x1002 <free+0x10c>
     f88:	e9 01       	movw	r28, r18
     f8a:	fb 83       	std	Y+3, r31	; 0x03
     f8c:	ea 83       	std	Y+2, r30	; 0x02
     f8e:	49 91       	ld	r20, Y+
     f90:	59 91       	ld	r21, Y+
     f92:	c4 0f       	add	r28, r20
     f94:	d5 1f       	adc	r29, r21
     f96:	ec 17       	cp	r30, r28
     f98:	fd 07       	cpc	r31, r29
     f9a:	61 f4       	brne	.+24     	; 0xfb4 <free+0xbe>
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	84 0f       	add	r24, r20
     fa2:	95 1f       	adc	r25, r21
     fa4:	02 96       	adiw	r24, 0x02	; 2
     fa6:	e9 01       	movw	r28, r18
     fa8:	99 83       	std	Y+1, r25	; 0x01
     faa:	88 83       	st	Y, r24
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	93 81       	ldd	r25, Z+3	; 0x03
     fb0:	9b 83       	std	Y+3, r25	; 0x03
     fb2:	8a 83       	std	Y+2, r24	; 0x02
     fb4:	e0 e0       	ldi	r30, 0x00	; 0
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	12 96       	adiw	r26, 0x02	; 2
     fba:	8d 91       	ld	r24, X+
     fbc:	9c 91       	ld	r25, X
     fbe:	13 97       	sbiw	r26, 0x03	; 3
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	19 f0       	breq	.+6      	; 0xfca <free+0xd4>
     fc4:	fd 01       	movw	r30, r26
     fc6:	dc 01       	movw	r26, r24
     fc8:	f7 cf       	rjmp	.-18     	; 0xfb8 <free+0xc2>
     fca:	8d 91       	ld	r24, X+
     fcc:	9c 91       	ld	r25, X
     fce:	11 97       	sbiw	r26, 0x01	; 1
     fd0:	9d 01       	movw	r18, r26
     fd2:	2e 5f       	subi	r18, 0xFE	; 254
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	82 0f       	add	r24, r18
     fd8:	93 1f       	adc	r25, r19
     fda:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <__brkval>
     fde:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <__brkval+0x1>
     fe2:	28 17       	cp	r18, r24
     fe4:	39 07       	cpc	r19, r25
     fe6:	69 f4       	brne	.+26     	; 0x1002 <free+0x10c>
     fe8:	30 97       	sbiw	r30, 0x00	; 0
     fea:	29 f4       	brne	.+10     	; 0xff6 <free+0x100>
     fec:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <__flp+0x1>
     ff0:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <__flp>
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <free+0x104>
     ff6:	13 82       	std	Z+3, r1	; 0x03
     ff8:	12 82       	std	Z+2, r1	; 0x02
     ffa:	b0 93 ad 02 	sts	0x02AD, r27	; 0x8002ad <__brkval+0x1>
     ffe:	a0 93 ac 02 	sts	0x02AC, r26	; 0x8002ac <__brkval>
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <do_rand>:
    1008:	8f 92       	push	r8
    100a:	9f 92       	push	r9
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	ec 01       	movw	r28, r24
    101e:	68 81       	ld	r22, Y
    1020:	79 81       	ldd	r23, Y+1	; 0x01
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	9b 81       	ldd	r25, Y+3	; 0x03
    1026:	61 15       	cp	r22, r1
    1028:	71 05       	cpc	r23, r1
    102a:	81 05       	cpc	r24, r1
    102c:	91 05       	cpc	r25, r1
    102e:	21 f4       	brne	.+8      	; 0x1038 <do_rand+0x30>
    1030:	64 e2       	ldi	r22, 0x24	; 36
    1032:	79 ed       	ldi	r23, 0xD9	; 217
    1034:	8b e5       	ldi	r24, 0x5B	; 91
    1036:	97 e0       	ldi	r25, 0x07	; 7
    1038:	2d e1       	ldi	r18, 0x1D	; 29
    103a:	33 ef       	ldi	r19, 0xF3	; 243
    103c:	41 e0       	ldi	r20, 0x01	; 1
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__divmodsi4>
    1044:	49 01       	movw	r8, r18
    1046:	5a 01       	movw	r10, r20
    1048:	9b 01       	movw	r18, r22
    104a:	ac 01       	movw	r20, r24
    104c:	a7 ea       	ldi	r26, 0xA7	; 167
    104e:	b1 e4       	ldi	r27, 0x41	; 65
    1050:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__muluhisi3>
    1054:	6b 01       	movw	r12, r22
    1056:	7c 01       	movw	r14, r24
    1058:	ac ee       	ldi	r26, 0xEC	; 236
    105a:	b4 ef       	ldi	r27, 0xF4	; 244
    105c:	a5 01       	movw	r20, r10
    105e:	94 01       	movw	r18, r8
    1060:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulohisi3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	8c 0d       	add	r24, r12
    106a:	9d 1d       	adc	r25, r13
    106c:	ae 1d       	adc	r26, r14
    106e:	bf 1d       	adc	r27, r15
    1070:	b7 ff       	sbrs	r27, 7
    1072:	03 c0       	rjmp	.+6      	; 0x107a <do_rand+0x72>
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	a1 09       	sbc	r26, r1
    1078:	b0 48       	sbci	r27, 0x80	; 128
    107a:	88 83       	st	Y, r24
    107c:	99 83       	std	Y+1, r25	; 0x01
    107e:	aa 83       	std	Y+2, r26	; 0x02
    1080:	bb 83       	std	Y+3, r27	; 0x03
    1082:	9f 77       	andi	r25, 0x7F	; 127
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	bf 90       	pop	r11
    1092:	af 90       	pop	r10
    1094:	9f 90       	pop	r9
    1096:	8f 90       	pop	r8
    1098:	08 95       	ret

0000109a <rand_r>:
    109a:	0e 94 04 08 	call	0x1008	; 0x1008 <do_rand>
    109e:	08 95       	ret

000010a0 <rand>:
    10a0:	86 e0       	ldi	r24, 0x06	; 6
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 04 08 	call	0x1008	; 0x1008 <do_rand>
    10a8:	08 95       	ret

000010aa <srand>:
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    10b2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    10b6:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    10ba:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    10be:	08 95       	ret

000010c0 <strcpy>:
    10c0:	fb 01       	movw	r30, r22
    10c2:	dc 01       	movw	r26, r24
    10c4:	01 90       	ld	r0, Z+
    10c6:	0d 92       	st	X+, r0
    10c8:	00 20       	and	r0, r0
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <strcpy+0x4>
    10cc:	08 95       	ret

000010ce <fdevopen>:
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	31 f4       	brne	.+12     	; 0x10e6 <fdevopen+0x18>
    10da:	61 15       	cp	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	19 f4       	brne	.+6      	; 0x10e6 <fdevopen+0x18>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	3a c0       	rjmp	.+116    	; 0x115a <fdevopen+0x8c>
    10e6:	8b 01       	movw	r16, r22
    10e8:	ec 01       	movw	r28, r24
    10ea:	6e e0       	ldi	r22, 0x0E	; 14
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <calloc>
    10f6:	fc 01       	movw	r30, r24
    10f8:	89 2b       	or	r24, r25
    10fa:	91 f3       	breq	.-28     	; 0x10e0 <fdevopen+0x12>
    10fc:	80 e8       	ldi	r24, 0x80	; 128
    10fe:	83 83       	std	Z+3, r24	; 0x03
    1100:	01 15       	cp	r16, r1
    1102:	11 05       	cpc	r17, r1
    1104:	71 f0       	breq	.+28     	; 0x1122 <fdevopen+0x54>
    1106:	13 87       	std	Z+11, r17	; 0x0b
    1108:	02 87       	std	Z+10, r16	; 0x0a
    110a:	81 e8       	ldi	r24, 0x81	; 129
    110c:	83 83       	std	Z+3, r24	; 0x03
    110e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__iob>
    1112:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <__iob+0x1>
    1116:	89 2b       	or	r24, r25
    1118:	21 f4       	brne	.+8      	; 0x1122 <fdevopen+0x54>
    111a:	f0 93 b1 02 	sts	0x02B1, r31	; 0x8002b1 <__iob+0x1>
    111e:	e0 93 b0 02 	sts	0x02B0, r30	; 0x8002b0 <__iob>
    1122:	20 97       	sbiw	r28, 0x00	; 0
    1124:	c9 f0       	breq	.+50     	; 0x1158 <fdevopen+0x8a>
    1126:	d1 87       	std	Z+9, r29	; 0x09
    1128:	c0 87       	std	Z+8, r28	; 0x08
    112a:	83 81       	ldd	r24, Z+3	; 0x03
    112c:	82 60       	ori	r24, 0x02	; 2
    112e:	83 83       	std	Z+3, r24	; 0x03
    1130:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__iob+0x2>
    1134:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <__iob+0x3>
    1138:	89 2b       	or	r24, r25
    113a:	71 f4       	brne	.+28     	; 0x1158 <fdevopen+0x8a>
    113c:	f0 93 b3 02 	sts	0x02B3, r31	; 0x8002b3 <__iob+0x3>
    1140:	e0 93 b2 02 	sts	0x02B2, r30	; 0x8002b2 <__iob+0x2>
    1144:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__iob+0x4>
    1148:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__iob+0x5>
    114c:	89 2b       	or	r24, r25
    114e:	21 f4       	brne	.+8      	; 0x1158 <fdevopen+0x8a>
    1150:	f0 93 b5 02 	sts	0x02B5, r31	; 0x8002b5 <__iob+0x5>
    1154:	e0 93 b4 02 	sts	0x02B4, r30	; 0x8002b4 <__iob+0x4>
    1158:	cf 01       	movw	r24, r30
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	08 95       	ret

00001164 <printf>:
    1164:	a0 e0       	ldi	r26, 0x00	; 0
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 eb       	ldi	r30, 0xB8	; 184
    116a:	f8 e0       	ldi	r31, 0x08	; 8
    116c:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__prologue_saves__+0x20>
    1170:	ae 01       	movw	r20, r28
    1172:	4b 5f       	subi	r20, 0xFB	; 251
    1174:	5f 4f       	sbci	r21, 0xFF	; 255
    1176:	fa 01       	movw	r30, r20
    1178:	61 91       	ld	r22, Z+
    117a:	71 91       	ld	r23, Z+
    117c:	af 01       	movw	r20, r30
    117e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__iob+0x2>
    1182:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <__iob+0x3>
    1186:	0e 94 c8 08 	call	0x1190	; 0x1190 <vfprintf>
    118a:	e2 e0       	ldi	r30, 0x02	; 2
    118c:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__epilogue_restores__+0x20>

00001190 <vfprintf>:
    1190:	ab e0       	ldi	r26, 0x0B	; 11
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ee ec       	ldi	r30, 0xCE	; 206
    1196:	f8 e0       	ldi	r31, 0x08	; 8
    1198:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__prologue_saves__>
    119c:	6c 01       	movw	r12, r24
    119e:	7b 01       	movw	r14, r22
    11a0:	8a 01       	movw	r16, r20
    11a2:	fc 01       	movw	r30, r24
    11a4:	17 82       	std	Z+7, r1	; 0x07
    11a6:	16 82       	std	Z+6, r1	; 0x06
    11a8:	83 81       	ldd	r24, Z+3	; 0x03
    11aa:	81 ff       	sbrs	r24, 1
    11ac:	cc c1       	rjmp	.+920    	; 0x1546 <vfprintf+0x3b6>
    11ae:	ce 01       	movw	r24, r28
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	3c 01       	movw	r6, r24
    11b4:	f6 01       	movw	r30, r12
    11b6:	93 81       	ldd	r25, Z+3	; 0x03
    11b8:	f7 01       	movw	r30, r14
    11ba:	93 fd       	sbrc	r25, 3
    11bc:	85 91       	lpm	r24, Z+
    11be:	93 ff       	sbrs	r25, 3
    11c0:	81 91       	ld	r24, Z+
    11c2:	7f 01       	movw	r14, r30
    11c4:	88 23       	and	r24, r24
    11c6:	09 f4       	brne	.+2      	; 0x11ca <vfprintf+0x3a>
    11c8:	ba c1       	rjmp	.+884    	; 0x153e <vfprintf+0x3ae>
    11ca:	85 32       	cpi	r24, 0x25	; 37
    11cc:	39 f4       	brne	.+14     	; 0x11dc <vfprintf+0x4c>
    11ce:	93 fd       	sbrc	r25, 3
    11d0:	85 91       	lpm	r24, Z+
    11d2:	93 ff       	sbrs	r25, 3
    11d4:	81 91       	ld	r24, Z+
    11d6:	7f 01       	movw	r14, r30
    11d8:	85 32       	cpi	r24, 0x25	; 37
    11da:	29 f4       	brne	.+10     	; 0x11e6 <vfprintf+0x56>
    11dc:	b6 01       	movw	r22, r12
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    11e4:	e7 cf       	rjmp	.-50     	; 0x11b4 <vfprintf+0x24>
    11e6:	91 2c       	mov	r9, r1
    11e8:	21 2c       	mov	r2, r1
    11ea:	31 2c       	mov	r3, r1
    11ec:	ff e1       	ldi	r31, 0x1F	; 31
    11ee:	f3 15       	cp	r31, r3
    11f0:	d8 f0       	brcs	.+54     	; 0x1228 <vfprintf+0x98>
    11f2:	8b 32       	cpi	r24, 0x2B	; 43
    11f4:	79 f0       	breq	.+30     	; 0x1214 <vfprintf+0x84>
    11f6:	38 f4       	brcc	.+14     	; 0x1206 <vfprintf+0x76>
    11f8:	80 32       	cpi	r24, 0x20	; 32
    11fa:	79 f0       	breq	.+30     	; 0x121a <vfprintf+0x8a>
    11fc:	83 32       	cpi	r24, 0x23	; 35
    11fe:	a1 f4       	brne	.+40     	; 0x1228 <vfprintf+0x98>
    1200:	23 2d       	mov	r18, r3
    1202:	20 61       	ori	r18, 0x10	; 16
    1204:	1d c0       	rjmp	.+58     	; 0x1240 <vfprintf+0xb0>
    1206:	8d 32       	cpi	r24, 0x2D	; 45
    1208:	61 f0       	breq	.+24     	; 0x1222 <vfprintf+0x92>
    120a:	80 33       	cpi	r24, 0x30	; 48
    120c:	69 f4       	brne	.+26     	; 0x1228 <vfprintf+0x98>
    120e:	23 2d       	mov	r18, r3
    1210:	21 60       	ori	r18, 0x01	; 1
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <vfprintf+0xb0>
    1214:	83 2d       	mov	r24, r3
    1216:	82 60       	ori	r24, 0x02	; 2
    1218:	38 2e       	mov	r3, r24
    121a:	e3 2d       	mov	r30, r3
    121c:	e4 60       	ori	r30, 0x04	; 4
    121e:	3e 2e       	mov	r3, r30
    1220:	2a c0       	rjmp	.+84     	; 0x1276 <vfprintf+0xe6>
    1222:	f3 2d       	mov	r31, r3
    1224:	f8 60       	ori	r31, 0x08	; 8
    1226:	1d c0       	rjmp	.+58     	; 0x1262 <vfprintf+0xd2>
    1228:	37 fc       	sbrc	r3, 7
    122a:	2d c0       	rjmp	.+90     	; 0x1286 <vfprintf+0xf6>
    122c:	20 ed       	ldi	r18, 0xD0	; 208
    122e:	28 0f       	add	r18, r24
    1230:	2a 30       	cpi	r18, 0x0A	; 10
    1232:	40 f0       	brcs	.+16     	; 0x1244 <vfprintf+0xb4>
    1234:	8e 32       	cpi	r24, 0x2E	; 46
    1236:	b9 f4       	brne	.+46     	; 0x1266 <vfprintf+0xd6>
    1238:	36 fc       	sbrc	r3, 6
    123a:	81 c1       	rjmp	.+770    	; 0x153e <vfprintf+0x3ae>
    123c:	23 2d       	mov	r18, r3
    123e:	20 64       	ori	r18, 0x40	; 64
    1240:	32 2e       	mov	r3, r18
    1242:	19 c0       	rjmp	.+50     	; 0x1276 <vfprintf+0xe6>
    1244:	36 fe       	sbrs	r3, 6
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0xc4>
    1248:	8a e0       	ldi	r24, 0x0A	; 10
    124a:	98 9e       	mul	r9, r24
    124c:	20 0d       	add	r18, r0
    124e:	11 24       	eor	r1, r1
    1250:	92 2e       	mov	r9, r18
    1252:	11 c0       	rjmp	.+34     	; 0x1276 <vfprintf+0xe6>
    1254:	ea e0       	ldi	r30, 0x0A	; 10
    1256:	2e 9e       	mul	r2, r30
    1258:	20 0d       	add	r18, r0
    125a:	11 24       	eor	r1, r1
    125c:	22 2e       	mov	r2, r18
    125e:	f3 2d       	mov	r31, r3
    1260:	f0 62       	ori	r31, 0x20	; 32
    1262:	3f 2e       	mov	r3, r31
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <vfprintf+0xe6>
    1266:	8c 36       	cpi	r24, 0x6C	; 108
    1268:	21 f4       	brne	.+8      	; 0x1272 <vfprintf+0xe2>
    126a:	83 2d       	mov	r24, r3
    126c:	80 68       	ori	r24, 0x80	; 128
    126e:	38 2e       	mov	r3, r24
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <vfprintf+0xe6>
    1272:	88 36       	cpi	r24, 0x68	; 104
    1274:	41 f4       	brne	.+16     	; 0x1286 <vfprintf+0xf6>
    1276:	f7 01       	movw	r30, r14
    1278:	93 fd       	sbrc	r25, 3
    127a:	85 91       	lpm	r24, Z+
    127c:	93 ff       	sbrs	r25, 3
    127e:	81 91       	ld	r24, Z+
    1280:	7f 01       	movw	r14, r30
    1282:	81 11       	cpse	r24, r1
    1284:	b3 cf       	rjmp	.-154    	; 0x11ec <vfprintf+0x5c>
    1286:	98 2f       	mov	r25, r24
    1288:	9f 7d       	andi	r25, 0xDF	; 223
    128a:	95 54       	subi	r25, 0x45	; 69
    128c:	93 30       	cpi	r25, 0x03	; 3
    128e:	28 f4       	brcc	.+10     	; 0x129a <vfprintf+0x10a>
    1290:	0c 5f       	subi	r16, 0xFC	; 252
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	9f e3       	ldi	r25, 0x3F	; 63
    1296:	99 83       	std	Y+1, r25	; 0x01
    1298:	0d c0       	rjmp	.+26     	; 0x12b4 <vfprintf+0x124>
    129a:	83 36       	cpi	r24, 0x63	; 99
    129c:	31 f0       	breq	.+12     	; 0x12aa <vfprintf+0x11a>
    129e:	83 37       	cpi	r24, 0x73	; 115
    12a0:	71 f0       	breq	.+28     	; 0x12be <vfprintf+0x12e>
    12a2:	83 35       	cpi	r24, 0x53	; 83
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <vfprintf+0x118>
    12a6:	59 c0       	rjmp	.+178    	; 0x135a <vfprintf+0x1ca>
    12a8:	21 c0       	rjmp	.+66     	; 0x12ec <vfprintf+0x15c>
    12aa:	f8 01       	movw	r30, r16
    12ac:	80 81       	ld	r24, Z
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	0e 5f       	subi	r16, 0xFE	; 254
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
    12b4:	88 24       	eor	r8, r8
    12b6:	83 94       	inc	r8
    12b8:	91 2c       	mov	r9, r1
    12ba:	53 01       	movw	r10, r6
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <vfprintf+0x154>
    12be:	28 01       	movw	r4, r16
    12c0:	f2 e0       	ldi	r31, 0x02	; 2
    12c2:	4f 0e       	add	r4, r31
    12c4:	51 1c       	adc	r5, r1
    12c6:	f8 01       	movw	r30, r16
    12c8:	a0 80       	ld	r10, Z
    12ca:	b1 80       	ldd	r11, Z+1	; 0x01
    12cc:	36 fe       	sbrs	r3, 6
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <vfprintf+0x146>
    12d0:	69 2d       	mov	r22, r9
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <vfprintf+0x14a>
    12d6:	6f ef       	ldi	r22, 0xFF	; 255
    12d8:	7f ef       	ldi	r23, 0xFF	; 255
    12da:	c5 01       	movw	r24, r10
    12dc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <strnlen>
    12e0:	4c 01       	movw	r8, r24
    12e2:	82 01       	movw	r16, r4
    12e4:	f3 2d       	mov	r31, r3
    12e6:	ff 77       	andi	r31, 0x7F	; 127
    12e8:	3f 2e       	mov	r3, r31
    12ea:	16 c0       	rjmp	.+44     	; 0x1318 <vfprintf+0x188>
    12ec:	28 01       	movw	r4, r16
    12ee:	22 e0       	ldi	r18, 0x02	; 2
    12f0:	42 0e       	add	r4, r18
    12f2:	51 1c       	adc	r5, r1
    12f4:	f8 01       	movw	r30, r16
    12f6:	a0 80       	ld	r10, Z
    12f8:	b1 80       	ldd	r11, Z+1	; 0x01
    12fa:	36 fe       	sbrs	r3, 6
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <vfprintf+0x174>
    12fe:	69 2d       	mov	r22, r9
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vfprintf+0x178>
    1304:	6f ef       	ldi	r22, 0xFF	; 255
    1306:	7f ef       	ldi	r23, 0xFF	; 255
    1308:	c5 01       	movw	r24, r10
    130a:	0e 94 c5 0a 	call	0x158a	; 0x158a <strnlen_P>
    130e:	4c 01       	movw	r8, r24
    1310:	f3 2d       	mov	r31, r3
    1312:	f0 68       	ori	r31, 0x80	; 128
    1314:	3f 2e       	mov	r3, r31
    1316:	82 01       	movw	r16, r4
    1318:	33 fc       	sbrc	r3, 3
    131a:	1b c0       	rjmp	.+54     	; 0x1352 <vfprintf+0x1c2>
    131c:	82 2d       	mov	r24, r2
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	88 16       	cp	r8, r24
    1322:	99 06       	cpc	r9, r25
    1324:	b0 f4       	brcc	.+44     	; 0x1352 <vfprintf+0x1c2>
    1326:	b6 01       	movw	r22, r12
    1328:	80 e2       	ldi	r24, 0x20	; 32
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    1330:	2a 94       	dec	r2
    1332:	f4 cf       	rjmp	.-24     	; 0x131c <vfprintf+0x18c>
    1334:	f5 01       	movw	r30, r10
    1336:	37 fc       	sbrc	r3, 7
    1338:	85 91       	lpm	r24, Z+
    133a:	37 fe       	sbrs	r3, 7
    133c:	81 91       	ld	r24, Z+
    133e:	5f 01       	movw	r10, r30
    1340:	b6 01       	movw	r22, r12
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    1348:	21 10       	cpse	r2, r1
    134a:	2a 94       	dec	r2
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	82 1a       	sub	r8, r18
    1350:	91 08       	sbc	r9, r1
    1352:	81 14       	cp	r8, r1
    1354:	91 04       	cpc	r9, r1
    1356:	71 f7       	brne	.-36     	; 0x1334 <vfprintf+0x1a4>
    1358:	e8 c0       	rjmp	.+464    	; 0x152a <vfprintf+0x39a>
    135a:	84 36       	cpi	r24, 0x64	; 100
    135c:	11 f0       	breq	.+4      	; 0x1362 <vfprintf+0x1d2>
    135e:	89 36       	cpi	r24, 0x69	; 105
    1360:	41 f5       	brne	.+80     	; 0x13b2 <vfprintf+0x222>
    1362:	f8 01       	movw	r30, r16
    1364:	37 fe       	sbrs	r3, 7
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <vfprintf+0x1e6>
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	0c 5f       	subi	r16, 0xFC	; 252
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <vfprintf+0x1f6>
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	07 2e       	mov	r0, r23
    137c:	00 0c       	add	r0, r0
    137e:	88 0b       	sbc	r24, r24
    1380:	99 0b       	sbc	r25, r25
    1382:	0e 5f       	subi	r16, 0xFE	; 254
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	f3 2d       	mov	r31, r3
    1388:	ff 76       	andi	r31, 0x6F	; 111
    138a:	3f 2e       	mov	r3, r31
    138c:	97 ff       	sbrs	r25, 7
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <vfprintf+0x212>
    1390:	90 95       	com	r25
    1392:	80 95       	com	r24
    1394:	70 95       	com	r23
    1396:	61 95       	neg	r22
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	8f 4f       	sbci	r24, 0xFF	; 255
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	f0 68       	ori	r31, 0x80	; 128
    13a0:	3f 2e       	mov	r3, r31
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	a3 01       	movw	r20, r6
    13a8:	0e 94 1e 0b 	call	0x163c	; 0x163c <__ultoa_invert>
    13ac:	88 2e       	mov	r8, r24
    13ae:	86 18       	sub	r8, r6
    13b0:	45 c0       	rjmp	.+138    	; 0x143c <vfprintf+0x2ac>
    13b2:	85 37       	cpi	r24, 0x75	; 117
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <vfprintf+0x232>
    13b6:	23 2d       	mov	r18, r3
    13b8:	2f 7e       	andi	r18, 0xEF	; 239
    13ba:	b2 2e       	mov	r11, r18
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	25 c0       	rjmp	.+74     	; 0x140c <vfprintf+0x27c>
    13c2:	93 2d       	mov	r25, r3
    13c4:	99 7f       	andi	r25, 0xF9	; 249
    13c6:	b9 2e       	mov	r11, r25
    13c8:	8f 36       	cpi	r24, 0x6F	; 111
    13ca:	c1 f0       	breq	.+48     	; 0x13fc <vfprintf+0x26c>
    13cc:	18 f4       	brcc	.+6      	; 0x13d4 <vfprintf+0x244>
    13ce:	88 35       	cpi	r24, 0x58	; 88
    13d0:	79 f0       	breq	.+30     	; 0x13f0 <vfprintf+0x260>
    13d2:	b5 c0       	rjmp	.+362    	; 0x153e <vfprintf+0x3ae>
    13d4:	80 37       	cpi	r24, 0x70	; 112
    13d6:	19 f0       	breq	.+6      	; 0x13de <vfprintf+0x24e>
    13d8:	88 37       	cpi	r24, 0x78	; 120
    13da:	21 f0       	breq	.+8      	; 0x13e4 <vfprintf+0x254>
    13dc:	b0 c0       	rjmp	.+352    	; 0x153e <vfprintf+0x3ae>
    13de:	e9 2f       	mov	r30, r25
    13e0:	e0 61       	ori	r30, 0x10	; 16
    13e2:	be 2e       	mov	r11, r30
    13e4:	b4 fe       	sbrs	r11, 4
    13e6:	0d c0       	rjmp	.+26     	; 0x1402 <vfprintf+0x272>
    13e8:	fb 2d       	mov	r31, r11
    13ea:	f4 60       	ori	r31, 0x04	; 4
    13ec:	bf 2e       	mov	r11, r31
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <vfprintf+0x272>
    13f0:	34 fe       	sbrs	r3, 4
    13f2:	0a c0       	rjmp	.+20     	; 0x1408 <vfprintf+0x278>
    13f4:	29 2f       	mov	r18, r25
    13f6:	26 60       	ori	r18, 0x06	; 6
    13f8:	b2 2e       	mov	r11, r18
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <vfprintf+0x278>
    13fc:	28 e0       	ldi	r18, 0x08	; 8
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	05 c0       	rjmp	.+10     	; 0x140c <vfprintf+0x27c>
    1402:	20 e1       	ldi	r18, 0x10	; 16
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <vfprintf+0x27c>
    1408:	20 e1       	ldi	r18, 0x10	; 16
    140a:	32 e0       	ldi	r19, 0x02	; 2
    140c:	f8 01       	movw	r30, r16
    140e:	b7 fe       	sbrs	r11, 7
    1410:	07 c0       	rjmp	.+14     	; 0x1420 <vfprintf+0x290>
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	0c 5f       	subi	r16, 0xFC	; 252
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	06 c0       	rjmp	.+12     	; 0x142c <vfprintf+0x29c>
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 5f       	subi	r16, 0xFE	; 254
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	a3 01       	movw	r20, r6
    142e:	0e 94 1e 0b 	call	0x163c	; 0x163c <__ultoa_invert>
    1432:	88 2e       	mov	r8, r24
    1434:	86 18       	sub	r8, r6
    1436:	fb 2d       	mov	r31, r11
    1438:	ff 77       	andi	r31, 0x7F	; 127
    143a:	3f 2e       	mov	r3, r31
    143c:	36 fe       	sbrs	r3, 6
    143e:	0d c0       	rjmp	.+26     	; 0x145a <vfprintf+0x2ca>
    1440:	23 2d       	mov	r18, r3
    1442:	2e 7f       	andi	r18, 0xFE	; 254
    1444:	a2 2e       	mov	r10, r18
    1446:	89 14       	cp	r8, r9
    1448:	58 f4       	brcc	.+22     	; 0x1460 <vfprintf+0x2d0>
    144a:	34 fe       	sbrs	r3, 4
    144c:	0b c0       	rjmp	.+22     	; 0x1464 <vfprintf+0x2d4>
    144e:	32 fc       	sbrc	r3, 2
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <vfprintf+0x2d4>
    1452:	83 2d       	mov	r24, r3
    1454:	8e 7e       	andi	r24, 0xEE	; 238
    1456:	a8 2e       	mov	r10, r24
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <vfprintf+0x2d4>
    145a:	b8 2c       	mov	r11, r8
    145c:	a3 2c       	mov	r10, r3
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <vfprintf+0x2d6>
    1460:	b8 2c       	mov	r11, r8
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <vfprintf+0x2d6>
    1464:	b9 2c       	mov	r11, r9
    1466:	a4 fe       	sbrs	r10, 4
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <vfprintf+0x2f8>
    146a:	fe 01       	movw	r30, r28
    146c:	e8 0d       	add	r30, r8
    146e:	f1 1d       	adc	r31, r1
    1470:	80 81       	ld	r24, Z
    1472:	80 33       	cpi	r24, 0x30	; 48
    1474:	21 f4       	brne	.+8      	; 0x147e <vfprintf+0x2ee>
    1476:	9a 2d       	mov	r25, r10
    1478:	99 7e       	andi	r25, 0xE9	; 233
    147a:	a9 2e       	mov	r10, r25
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <vfprintf+0x300>
    147e:	a2 fe       	sbrs	r10, 2
    1480:	06 c0       	rjmp	.+12     	; 0x148e <vfprintf+0x2fe>
    1482:	b3 94       	inc	r11
    1484:	b3 94       	inc	r11
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <vfprintf+0x300>
    1488:	8a 2d       	mov	r24, r10
    148a:	86 78       	andi	r24, 0x86	; 134
    148c:	09 f0       	breq	.+2      	; 0x1490 <vfprintf+0x300>
    148e:	b3 94       	inc	r11
    1490:	a3 fc       	sbrc	r10, 3
    1492:	11 c0       	rjmp	.+34     	; 0x14b6 <vfprintf+0x326>
    1494:	a0 fe       	sbrs	r10, 0
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <vfprintf+0x314>
    1498:	b2 14       	cp	r11, r2
    149a:	88 f4       	brcc	.+34     	; 0x14be <vfprintf+0x32e>
    149c:	28 0c       	add	r2, r8
    149e:	92 2c       	mov	r9, r2
    14a0:	9b 18       	sub	r9, r11
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <vfprintf+0x330>
    14a4:	b2 14       	cp	r11, r2
    14a6:	60 f4       	brcc	.+24     	; 0x14c0 <vfprintf+0x330>
    14a8:	b6 01       	movw	r22, r12
    14aa:	80 e2       	ldi	r24, 0x20	; 32
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    14b2:	b3 94       	inc	r11
    14b4:	f7 cf       	rjmp	.-18     	; 0x14a4 <vfprintf+0x314>
    14b6:	b2 14       	cp	r11, r2
    14b8:	18 f4       	brcc	.+6      	; 0x14c0 <vfprintf+0x330>
    14ba:	2b 18       	sub	r2, r11
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x332>
    14be:	98 2c       	mov	r9, r8
    14c0:	21 2c       	mov	r2, r1
    14c2:	a4 fe       	sbrs	r10, 4
    14c4:	10 c0       	rjmp	.+32     	; 0x14e6 <vfprintf+0x356>
    14c6:	b6 01       	movw	r22, r12
    14c8:	80 e3       	ldi	r24, 0x30	; 48
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    14d0:	a2 fe       	sbrs	r10, 2
    14d2:	17 c0       	rjmp	.+46     	; 0x1502 <vfprintf+0x372>
    14d4:	a1 fc       	sbrc	r10, 1
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <vfprintf+0x34e>
    14d8:	88 e7       	ldi	r24, 0x78	; 120
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <vfprintf+0x352>
    14de:	88 e5       	ldi	r24, 0x58	; 88
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	b6 01       	movw	r22, r12
    14e4:	0c c0       	rjmp	.+24     	; 0x14fe <vfprintf+0x36e>
    14e6:	8a 2d       	mov	r24, r10
    14e8:	86 78       	andi	r24, 0x86	; 134
    14ea:	59 f0       	breq	.+22     	; 0x1502 <vfprintf+0x372>
    14ec:	a1 fe       	sbrs	r10, 1
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <vfprintf+0x364>
    14f0:	8b e2       	ldi	r24, 0x2B	; 43
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <vfprintf+0x366>
    14f4:	80 e2       	ldi	r24, 0x20	; 32
    14f6:	a7 fc       	sbrc	r10, 7
    14f8:	8d e2       	ldi	r24, 0x2D	; 45
    14fa:	b6 01       	movw	r22, r12
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    1502:	89 14       	cp	r8, r9
    1504:	38 f4       	brcc	.+14     	; 0x1514 <vfprintf+0x384>
    1506:	b6 01       	movw	r22, r12
    1508:	80 e3       	ldi	r24, 0x30	; 48
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    1510:	9a 94       	dec	r9
    1512:	f7 cf       	rjmp	.-18     	; 0x1502 <vfprintf+0x372>
    1514:	8a 94       	dec	r8
    1516:	f3 01       	movw	r30, r6
    1518:	e8 0d       	add	r30, r8
    151a:	f1 1d       	adc	r31, r1
    151c:	80 81       	ld	r24, Z
    151e:	b6 01       	movw	r22, r12
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    1526:	81 10       	cpse	r8, r1
    1528:	f5 cf       	rjmp	.-22     	; 0x1514 <vfprintf+0x384>
    152a:	22 20       	and	r2, r2
    152c:	09 f4       	brne	.+2      	; 0x1530 <vfprintf+0x3a0>
    152e:	42 ce       	rjmp	.-892    	; 0x11b4 <vfprintf+0x24>
    1530:	b6 01       	movw	r22, r12
    1532:	80 e2       	ldi	r24, 0x20	; 32
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fputc>
    153a:	2a 94       	dec	r2
    153c:	f6 cf       	rjmp	.-20     	; 0x152a <vfprintf+0x39a>
    153e:	f6 01       	movw	r30, r12
    1540:	86 81       	ldd	r24, Z+6	; 0x06
    1542:	97 81       	ldd	r25, Z+7	; 0x07
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x3ba>
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	9f ef       	ldi	r25, 0xFF	; 255
    154a:	2b 96       	adiw	r28, 0x0b	; 11
    154c:	e2 e1       	ldi	r30, 0x12	; 18
    154e:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__epilogue_restores__>

00001552 <calloc>:
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	86 9f       	mul	r24, r22
    155c:	80 01       	movw	r16, r0
    155e:	87 9f       	mul	r24, r23
    1560:	10 0d       	add	r17, r0
    1562:	96 9f       	mul	r25, r22
    1564:	10 0d       	add	r17, r0
    1566:	11 24       	eor	r1, r1
    1568:	c8 01       	movw	r24, r16
    156a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <malloc>
    156e:	ec 01       	movw	r28, r24
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	29 f0       	breq	.+10     	; 0x157e <calloc+0x2c>
    1574:	a8 01       	movw	r20, r16
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <memset>
    157e:	ce 01       	movw	r24, r28
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	08 95       	ret

0000158a <strnlen_P>:
    158a:	fc 01       	movw	r30, r24
    158c:	05 90       	lpm	r0, Z+
    158e:	61 50       	subi	r22, 0x01	; 1
    1590:	70 40       	sbci	r23, 0x00	; 0
    1592:	01 10       	cpse	r0, r1
    1594:	d8 f7       	brcc	.-10     	; 0x158c <strnlen_P+0x2>
    1596:	80 95       	com	r24
    1598:	90 95       	com	r25
    159a:	8e 0f       	add	r24, r30
    159c:	9f 1f       	adc	r25, r31
    159e:	08 95       	ret

000015a0 <memset>:
    15a0:	dc 01       	movw	r26, r24
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <memset+0x6>
    15a4:	6d 93       	st	X+, r22
    15a6:	41 50       	subi	r20, 0x01	; 1
    15a8:	50 40       	sbci	r21, 0x00	; 0
    15aa:	e0 f7       	brcc	.-8      	; 0x15a4 <memset+0x4>
    15ac:	08 95       	ret

000015ae <strnlen>:
    15ae:	fc 01       	movw	r30, r24
    15b0:	61 50       	subi	r22, 0x01	; 1
    15b2:	70 40       	sbci	r23, 0x00	; 0
    15b4:	01 90       	ld	r0, Z+
    15b6:	01 10       	cpse	r0, r1
    15b8:	d8 f7       	brcc	.-10     	; 0x15b0 <strnlen+0x2>
    15ba:	80 95       	com	r24
    15bc:	90 95       	com	r25
    15be:	8e 0f       	add	r24, r30
    15c0:	9f 1f       	adc	r25, r31
    15c2:	08 95       	ret

000015c4 <fputc>:
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	fb 01       	movw	r30, r22
    15ce:	23 81       	ldd	r18, Z+3	; 0x03
    15d0:	21 fd       	sbrc	r18, 1
    15d2:	03 c0       	rjmp	.+6      	; 0x15da <fputc+0x16>
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	9f ef       	ldi	r25, 0xFF	; 255
    15d8:	2c c0       	rjmp	.+88     	; 0x1632 <fputc+0x6e>
    15da:	22 ff       	sbrs	r18, 2
    15dc:	16 c0       	rjmp	.+44     	; 0x160a <fputc+0x46>
    15de:	46 81       	ldd	r20, Z+6	; 0x06
    15e0:	57 81       	ldd	r21, Z+7	; 0x07
    15e2:	24 81       	ldd	r18, Z+4	; 0x04
    15e4:	35 81       	ldd	r19, Z+5	; 0x05
    15e6:	42 17       	cp	r20, r18
    15e8:	53 07       	cpc	r21, r19
    15ea:	44 f4       	brge	.+16     	; 0x15fc <fputc+0x38>
    15ec:	a0 81       	ld	r26, Z
    15ee:	b1 81       	ldd	r27, Z+1	; 0x01
    15f0:	9d 01       	movw	r18, r26
    15f2:	2f 5f       	subi	r18, 0xFF	; 255
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	31 83       	std	Z+1, r19	; 0x01
    15f8:	20 83       	st	Z, r18
    15fa:	8c 93       	st	X, r24
    15fc:	26 81       	ldd	r18, Z+6	; 0x06
    15fe:	37 81       	ldd	r19, Z+7	; 0x07
    1600:	2f 5f       	subi	r18, 0xFF	; 255
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	37 83       	std	Z+7, r19	; 0x07
    1606:	26 83       	std	Z+6, r18	; 0x06
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <fputc+0x6e>
    160a:	8b 01       	movw	r16, r22
    160c:	ec 01       	movw	r28, r24
    160e:	fb 01       	movw	r30, r22
    1610:	00 84       	ldd	r0, Z+8	; 0x08
    1612:	f1 85       	ldd	r31, Z+9	; 0x09
    1614:	e0 2d       	mov	r30, r0
    1616:	09 95       	icall
    1618:	89 2b       	or	r24, r25
    161a:	e1 f6       	brne	.-72     	; 0x15d4 <fputc+0x10>
    161c:	d8 01       	movw	r26, r16
    161e:	16 96       	adiw	r26, 0x06	; 6
    1620:	8d 91       	ld	r24, X+
    1622:	9c 91       	ld	r25, X
    1624:	17 97       	sbiw	r26, 0x07	; 7
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	17 96       	adiw	r26, 0x07	; 7
    162a:	9c 93       	st	X, r25
    162c:	8e 93       	st	-X, r24
    162e:	16 97       	sbiw	r26, 0x06	; 6
    1630:	ce 01       	movw	r24, r28
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	08 95       	ret

0000163c <__ultoa_invert>:
    163c:	fa 01       	movw	r30, r20
    163e:	aa 27       	eor	r26, r26
    1640:	28 30       	cpi	r18, 0x08	; 8
    1642:	51 f1       	breq	.+84     	; 0x1698 <__ultoa_invert+0x5c>
    1644:	20 31       	cpi	r18, 0x10	; 16
    1646:	81 f1       	breq	.+96     	; 0x16a8 <__ultoa_invert+0x6c>
    1648:	e8 94       	clt
    164a:	6f 93       	push	r22
    164c:	6e 7f       	andi	r22, 0xFE	; 254
    164e:	6e 5f       	subi	r22, 0xFE	; 254
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	af 4f       	sbci	r26, 0xFF	; 255
    1658:	b1 e0       	ldi	r27, 0x01	; 1
    165a:	3e d0       	rcall	.+124    	; 0x16d8 <__ultoa_invert+0x9c>
    165c:	b4 e0       	ldi	r27, 0x04	; 4
    165e:	3c d0       	rcall	.+120    	; 0x16d8 <__ultoa_invert+0x9c>
    1660:	67 0f       	add	r22, r23
    1662:	78 1f       	adc	r23, r24
    1664:	89 1f       	adc	r24, r25
    1666:	9a 1f       	adc	r25, r26
    1668:	a1 1d       	adc	r26, r1
    166a:	68 0f       	add	r22, r24
    166c:	79 1f       	adc	r23, r25
    166e:	8a 1f       	adc	r24, r26
    1670:	91 1d       	adc	r25, r1
    1672:	a1 1d       	adc	r26, r1
    1674:	6a 0f       	add	r22, r26
    1676:	71 1d       	adc	r23, r1
    1678:	81 1d       	adc	r24, r1
    167a:	91 1d       	adc	r25, r1
    167c:	a1 1d       	adc	r26, r1
    167e:	20 d0       	rcall	.+64     	; 0x16c0 <__ultoa_invert+0x84>
    1680:	09 f4       	brne	.+2      	; 0x1684 <__ultoa_invert+0x48>
    1682:	68 94       	set
    1684:	3f 91       	pop	r19
    1686:	2a e0       	ldi	r18, 0x0A	; 10
    1688:	26 9f       	mul	r18, r22
    168a:	11 24       	eor	r1, r1
    168c:	30 19       	sub	r19, r0
    168e:	30 5d       	subi	r19, 0xD0	; 208
    1690:	31 93       	st	Z+, r19
    1692:	de f6       	brtc	.-74     	; 0x164a <__ultoa_invert+0xe>
    1694:	cf 01       	movw	r24, r30
    1696:	08 95       	ret
    1698:	46 2f       	mov	r20, r22
    169a:	47 70       	andi	r20, 0x07	; 7
    169c:	40 5d       	subi	r20, 0xD0	; 208
    169e:	41 93       	st	Z+, r20
    16a0:	b3 e0       	ldi	r27, 0x03	; 3
    16a2:	0f d0       	rcall	.+30     	; 0x16c2 <__ultoa_invert+0x86>
    16a4:	c9 f7       	brne	.-14     	; 0x1698 <__ultoa_invert+0x5c>
    16a6:	f6 cf       	rjmp	.-20     	; 0x1694 <__ultoa_invert+0x58>
    16a8:	46 2f       	mov	r20, r22
    16aa:	4f 70       	andi	r20, 0x0F	; 15
    16ac:	40 5d       	subi	r20, 0xD0	; 208
    16ae:	4a 33       	cpi	r20, 0x3A	; 58
    16b0:	18 f0       	brcs	.+6      	; 0x16b8 <__ultoa_invert+0x7c>
    16b2:	49 5d       	subi	r20, 0xD9	; 217
    16b4:	31 fd       	sbrc	r19, 1
    16b6:	40 52       	subi	r20, 0x20	; 32
    16b8:	41 93       	st	Z+, r20
    16ba:	02 d0       	rcall	.+4      	; 0x16c0 <__ultoa_invert+0x84>
    16bc:	a9 f7       	brne	.-22     	; 0x16a8 <__ultoa_invert+0x6c>
    16be:	ea cf       	rjmp	.-44     	; 0x1694 <__ultoa_invert+0x58>
    16c0:	b4 e0       	ldi	r27, 0x04	; 4
    16c2:	a6 95       	lsr	r26
    16c4:	97 95       	ror	r25
    16c6:	87 95       	ror	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	ba 95       	dec	r27
    16ce:	c9 f7       	brne	.-14     	; 0x16c2 <__ultoa_invert+0x86>
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	61 05       	cpc	r22, r1
    16d4:	71 05       	cpc	r23, r1
    16d6:	08 95       	ret
    16d8:	9b 01       	movw	r18, r22
    16da:	ac 01       	movw	r20, r24
    16dc:	0a 2e       	mov	r0, r26
    16de:	06 94       	lsr	r0
    16e0:	57 95       	ror	r21
    16e2:	47 95       	ror	r20
    16e4:	37 95       	ror	r19
    16e6:	27 95       	ror	r18
    16e8:	ba 95       	dec	r27
    16ea:	c9 f7       	brne	.-14     	; 0x16de <__ultoa_invert+0xa2>
    16ec:	62 0f       	add	r22, r18
    16ee:	73 1f       	adc	r23, r19
    16f0:	84 1f       	adc	r24, r20
    16f2:	95 1f       	adc	r25, r21
    16f4:	a0 1d       	adc	r26, r0
    16f6:	08 95       	ret

000016f8 <__divmodsi4>:
    16f8:	05 2e       	mov	r0, r21
    16fa:	97 fb       	bst	r25, 7
    16fc:	1e f4       	brtc	.+6      	; 0x1704 <__divmodsi4+0xc>
    16fe:	00 94       	com	r0
    1700:	0e 94 93 0b 	call	0x1726	; 0x1726 <__negsi2>
    1704:	57 fd       	sbrc	r21, 7
    1706:	07 d0       	rcall	.+14     	; 0x1716 <__divmodsi4_neg2>
    1708:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__udivmodsi4>
    170c:	07 fc       	sbrc	r0, 7
    170e:	03 d0       	rcall	.+6      	; 0x1716 <__divmodsi4_neg2>
    1710:	4e f4       	brtc	.+18     	; 0x1724 <__divmodsi4_exit>
    1712:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__negsi2>

00001716 <__divmodsi4_neg2>:
    1716:	50 95       	com	r21
    1718:	40 95       	com	r20
    171a:	30 95       	com	r19
    171c:	21 95       	neg	r18
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	4f 4f       	sbci	r20, 0xFF	; 255
    1722:	5f 4f       	sbci	r21, 0xFF	; 255

00001724 <__divmodsi4_exit>:
    1724:	08 95       	ret

00001726 <__negsi2>:
    1726:	90 95       	com	r25
    1728:	80 95       	com	r24
    172a:	70 95       	com	r23
    172c:	61 95       	neg	r22
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	08 95       	ret

00001736 <__muluhisi3>:
    1736:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__umulhisi3>
    173a:	a5 9f       	mul	r26, r21
    173c:	90 0d       	add	r25, r0
    173e:	b4 9f       	mul	r27, r20
    1740:	90 0d       	add	r25, r0
    1742:	a4 9f       	mul	r26, r20
    1744:	80 0d       	add	r24, r0
    1746:	91 1d       	adc	r25, r1
    1748:	11 24       	eor	r1, r1
    174a:	08 95       	ret

0000174c <__mulshisi3>:
    174c:	b7 ff       	sbrs	r27, 7
    174e:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__muluhisi3>

00001752 <__mulohisi3>:
    1752:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__muluhisi3>
    1756:	82 1b       	sub	r24, r18
    1758:	93 0b       	sbc	r25, r19
    175a:	08 95       	ret

0000175c <__prologue_saves__>:
    175c:	2f 92       	push	r2
    175e:	3f 92       	push	r3
    1760:	4f 92       	push	r4
    1762:	5f 92       	push	r5
    1764:	6f 92       	push	r6
    1766:	7f 92       	push	r7
    1768:	8f 92       	push	r8
    176a:	9f 92       	push	r9
    176c:	af 92       	push	r10
    176e:	bf 92       	push	r11
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	ca 1b       	sub	r28, r26
    1786:	db 0b       	sbc	r29, r27
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	09 94       	ijmp

00001794 <__epilogue_restores__>:
    1794:	2a 88       	ldd	r2, Y+18	; 0x12
    1796:	39 88       	ldd	r3, Y+17	; 0x11
    1798:	48 88       	ldd	r4, Y+16	; 0x10
    179a:	5f 84       	ldd	r5, Y+15	; 0x0f
    179c:	6e 84       	ldd	r6, Y+14	; 0x0e
    179e:	7d 84       	ldd	r7, Y+13	; 0x0d
    17a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17a6:	b9 84       	ldd	r11, Y+9	; 0x09
    17a8:	c8 84       	ldd	r12, Y+8	; 0x08
    17aa:	df 80       	ldd	r13, Y+7	; 0x07
    17ac:	ee 80       	ldd	r14, Y+6	; 0x06
    17ae:	fd 80       	ldd	r15, Y+5	; 0x05
    17b0:	0c 81       	ldd	r16, Y+4	; 0x04
    17b2:	1b 81       	ldd	r17, Y+3	; 0x03
    17b4:	aa 81       	ldd	r26, Y+2	; 0x02
    17b6:	b9 81       	ldd	r27, Y+1	; 0x01
    17b8:	ce 0f       	add	r28, r30
    17ba:	d1 1d       	adc	r29, r1
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	ed 01       	movw	r28, r26
    17c8:	08 95       	ret

000017ca <__umulhisi3>:
    17ca:	a2 9f       	mul	r26, r18
    17cc:	b0 01       	movw	r22, r0
    17ce:	b3 9f       	mul	r27, r19
    17d0:	c0 01       	movw	r24, r0
    17d2:	a3 9f       	mul	r26, r19
    17d4:	70 0d       	add	r23, r0
    17d6:	81 1d       	adc	r24, r1
    17d8:	11 24       	eor	r1, r1
    17da:	91 1d       	adc	r25, r1
    17dc:	b2 9f       	mul	r27, r18
    17de:	70 0d       	add	r23, r0
    17e0:	81 1d       	adc	r24, r1
    17e2:	11 24       	eor	r1, r1
    17e4:	91 1d       	adc	r25, r1
    17e6:	08 95       	ret

000017e8 <_exit>:
    17e8:	f8 94       	cli

000017ea <__stop_program>:
    17ea:	ff cf       	rjmp	.-2      	; 0x17ea <__stop_program>
