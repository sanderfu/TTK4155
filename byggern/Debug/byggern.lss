
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00001dda  00001e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008002d8  008002d8  00002046  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032b2  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001622  00000000  00000000  0000568a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d5  00000000  00000000  00006cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f0  00000000  00000000  00008284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097b  00000000  00000000  00008974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001469  00000000  00000000  000092ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000a758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_16>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <test_SRAM+0x3a>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	ea ed       	ldi	r30, 0xDA	; 218
     3aa:	fd e1       	ldi	r31, 0x1D	; 29
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a8 3d       	cpi	r26, 0xD8	; 216
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	a8 ed       	ldi	r26, 0xD8	; 216
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a2 3f       	cpi	r26, 0xF2	; 242
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
     3cc:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x110e>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x110e>
     3e6:	08 95       	ret

000003e8 <main>:
#include "MCP2515.h"

int main(void)
//p.23 for can read instructions
{
	setupInit();
     3e8:	0e 94 43 05 	call	0xa86	; 0xa86 <setupInit>
	test_SRAM();
     3ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <test_SRAM>
	
	CAN_write(0x31, 5);
     3f0:	65 e0       	ldi	r22, 0x05	; 5
     3f2:	81 e3       	ldi	r24, 0x31	; 49
     3f4:	0e 94 33 02 	call	0x466	; 0x466 <CAN_write>
	SPI_setChipSelect(PB4, 0);
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>
	SPI_masterWrite(MCP_RTS_TX0);
     400:	81 e8       	ldi	r24, 0x81	; 129
     402:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>

	uint8_t i = CAN_read(0x61);
     40e:	81 e6       	ldi	r24, 0x61	; 97
     410:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_read>
	
	printf("This is my integer: %i",i);
     414:	1f 92       	push	r1
     416:	8f 93       	push	r24
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	9f 93       	push	r25
     41e:	8f 93       	push	r24
     420:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	ff cf       	rjmp	.-2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

0000042e <CAN_read>:
#include "MCP2515.h"
#include <stdlib.h>
#include <util/delay.h>


uint8_t CAN_read(uint8_t addr) {
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 0); 
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
	SPI_masterWrite(addr);
     446:	8c 2f       	mov	r24, r28
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     44e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SPI_masterRead>
     452:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB4, 1);
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>
	
	return data;
}
     460:	8c 2f       	mov	r24, r28
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <CAN_write>:

void CAN_write(uint8_t addr, uint8_t data) {
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	d8 2f       	mov	r29, r24
     46c:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB4, 0);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
	SPI_masterWrite(addr);
     482:	8d 2f       	mov	r24, r29
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
	SPI_masterWrite(data);
     48a:	8c 2f       	mov	r24, r28
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
	
	SPI_setChipSelect(PB4, 1); 
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>
	
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <CAN_bitModify>:
void CAN_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	d8 2f       	mov	r29, r24
     4ac:	16 2f       	mov	r17, r22
     4ae:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB4, 0);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     4bc:	85 e0       	ldi	r24, 0x05	; 5
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
		SPI_masterWrite(addr);
     4c4:	81 2f       	mov	r24, r17
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
		SPI_masterWrite(mask);
     4cc:	8d 2f       	mov	r24, r29
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
		SPI_masterWrite(data);
     4d4:	8c 2f       	mov	r24, r28
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
		
		SPI_setChipSelect(PB4, 1);
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	84 e0       	ldi	r24, 0x04	; 4
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>

}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	08 95       	ret

000004f0 <CAN_init>:

void CAN_init() {
	//reset with spi command
	SPI_setChipSelect(PB4, 0);
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>
	printf("Before spi write");
     4fc:	81 e2       	ldi	r24, 0x21	; 33
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
	SPI_masterWrite(MCP_RESET);
     508:	80 ec       	ldi	r24, 0xC0	; 192
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_masterWrite>
	SPI_setChipSelect(PB4, 1);
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	84 e0       	ldi	r24, 0x04	; 4
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_setChipSelect>
	printf("After spi write\n\r");
     51c:	82 e3       	ldi	r24, 0x32	; 50
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	9f 93       	push	r25
     522:	8f 93       	push	r24
     524:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	8f e4       	ldi	r24, 0x4F	; 79
     52a:	93 ec       	ldi	r25, 0xC3	; 195
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <__stack+0x2d>
     530:	00 c0       	rjmp	.+0      	; 0x532 <__stack+0x33>
     532:	00 00       	nop
	_delay_ms(200);
	
	 //set in loopback mode p.60 MCP2515
	CAN_bitModify(0b11100000, MCP_CANCTRL, MODE_LOOPBACK);
     534:	40 e4       	ldi	r20, 0x40	; 64
     536:	6f e0       	ldi	r22, 0x0F	; 15
     538:	80 ee       	ldi	r24, 0xE0	; 224
     53a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CAN_bitModify>
	CAN_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     53e:	40 e6       	ldi	r20, 0x60	; 96
     540:	60 e6       	ldi	r22, 0x60	; 96
     542:	80 e6       	ldi	r24, 0x60	; 96
     544:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CAN_bitModify>
	CAN_bitModify(0b1, MCP_CANINTE, 0b1);
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	6b e2       	ldi	r22, 0x2B	; 43
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CAN_bitModify>
     552:	8f e4       	ldi	r24, 0x4F	; 79
     554:	93 ec       	ldi	r25, 0xC3	; 195
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <__stack+0x57>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <__stack+0x5d>
     55c:	00 00       	nop
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     55e:	84 e4       	ldi	r24, 0x44	; 68
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
	
	//Check CANSTAT register
	uint8_t data = CAN_read(MCP_CANSTAT);
     56a:	8e e0       	ldi	r24, 0x0E	; 14
     56c:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_read>
	printf("Data: %i\n\r", data);
     570:	1f 92       	push	r1
     572:	8f 93       	push	r24
     574:	8d e5       	ldi	r24, 0x5D	; 93
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
     580:	8d b7       	in	r24, 0x3d	; 61
     582:	9e b7       	in	r25, 0x3e	; 62
     584:	0a 96       	adiw	r24, 0x0a	; 10
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	9e bf       	out	0x3e, r25	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	8d bf       	out	0x3d, r24	; 61
     590:	08 95       	ret

00000592 <sleep_init>:

#include "sleep.h"
#include <avr/sleep.h>
#include <avr/interrupt.h>

void sleep_init() {
     592:	08 95       	ret

00000594 <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     59a:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     5a4:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <joystickOffsetY>
     5a8:	08 95       	ret

000005aa <joystick_readPosition>:
}
void joystick_readPosition() {
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     5bc:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     5c4:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     5c6:	60 91 e5 02 	lds	r22, 0x02E5	; 0x8002e5 <joystickOffsetX>
     5ca:	c6 17       	cp	r28, r22
     5cc:	80 f4       	brcc	.+32     	; 0x5ee <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	2c 2f       	mov	r18, r28
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	26 1b       	sub	r18, r22
     5d6:	37 0b       	sbc	r19, r23
     5d8:	44 e6       	ldi	r20, 0x64	; 100
     5da:	42 9f       	mul	r20, r18
     5dc:	c0 01       	movw	r24, r0
     5de:	43 9f       	mul	r20, r19
     5e0:	90 0d       	add	r25, r0
     5e2:	11 24       	eor	r1, r1
     5e4:	0e 94 90 09 	call	0x1320	; 0x1320 <__divmodhi4>
     5e8:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <__data_end>
     5ec:	14 c0       	rjmp	.+40     	; 0x616 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     5ee:	46 2f       	mov	r20, r22
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	2c 2f       	mov	r18, r28
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	24 1b       	sub	r18, r20
     5f8:	35 0b       	sbc	r19, r21
     5fa:	64 e6       	ldi	r22, 0x64	; 100
     5fc:	62 9f       	mul	r22, r18
     5fe:	c0 01       	movw	r24, r0
     600:	63 9f       	mul	r22, r19
     602:	90 0d       	add	r25, r0
     604:	11 24       	eor	r1, r1
     606:	6f ef       	ldi	r22, 0xFF	; 255
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	64 1b       	sub	r22, r20
     60c:	75 0b       	sbc	r23, r21
     60e:	0e 94 90 09 	call	0x1320	; 0x1320 <__divmodhi4>
     612:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     616:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <joystickOffsetY>
     61a:	e2 17       	cp	r30, r18
     61c:	88 f4       	brcc	.+34     	; 0x640 <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     61e:	62 2f       	mov	r22, r18
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	4e 2f       	mov	r20, r30
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	46 1b       	sub	r20, r22
     628:	57 0b       	sbc	r21, r23
     62a:	24 e6       	ldi	r18, 0x64	; 100
     62c:	24 9f       	mul	r18, r20
     62e:	c0 01       	movw	r24, r0
     630:	25 9f       	mul	r18, r21
     632:	90 0d       	add	r25, r0
     634:	11 24       	eor	r1, r1
     636:	0e 94 90 09 	call	0x1320	; 0x1320 <__divmodhi4>
     63a:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <__data_end+0x1>
     63e:	13 c0       	rjmp	.+38     	; 0x666 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	4e 2f       	mov	r20, r30
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	42 1b       	sub	r20, r18
     648:	53 0b       	sbc	r21, r19
     64a:	64 e6       	ldi	r22, 0x64	; 100
     64c:	64 9f       	mul	r22, r20
     64e:	c0 01       	movw	r24, r0
     650:	65 9f       	mul	r22, r21
     652:	90 0d       	add	r25, r0
     654:	11 24       	eor	r1, r1
     656:	6f ef       	ldi	r22, 0xFF	; 255
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	62 1b       	sub	r22, r18
     65c:	73 0b       	sbc	r23, r19
     65e:	0e 94 90 09 	call	0x1320	; 0x1320 <__divmodhi4>
     662:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     666:	c8 ed       	ldi	r28, 0xD8	; 216
     668:	d2 e0       	ldi	r29, 0x02	; 2
     66a:	68 81       	ld	r22, Y
     66c:	06 2e       	mov	r0, r22
     66e:	00 0c       	add	r0, r0
     670:	77 0b       	sbc	r23, r23
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 f7 07 	call	0xfee	; 0xfee <__floatsisf>
     67a:	6b 01       	movw	r12, r22
     67c:	7c 01       	movw	r14, r24
     67e:	69 81       	ldd	r22, Y+1	; 0x01
     680:	06 2e       	mov	r0, r22
     682:	00 0c       	add	r0, r0
     684:	77 0b       	sbc	r23, r23
     686:	88 0b       	sbc	r24, r24
     688:	99 0b       	sbc	r25, r25
     68a:	0e 94 f7 07 	call	0xfee	; 0xfee <__floatsisf>
     68e:	a7 01       	movw	r20, r14
     690:	96 01       	movw	r18, r12
     692:	0e 94 ee 06 	call	0xddc	; 0xddc <atan2>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	44 eb       	ldi	r20, 0xB4	; 180
     69c:	53 e4       	ldi	r21, 0x43	; 67
     69e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	5f e3       	ldi	r21, 0x3F	; 63
     6aa:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     6ae:	23 ec       	ldi	r18, 0xC3	; 195
     6b0:	35 ef       	ldi	r19, 0xF5	; 245
     6b2:	48 e4       	ldi	r20, 0x48	; 72
     6b4:	50 e4       	ldi	r21, 0x40	; 64
     6b6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__divsf3>
     6ba:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fixsfsi>
     6be:	7b 83       	std	Y+3, r23	; 0x03
     6c0:	6a 83       	std	Y+2, r22	; 0x02
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	08 95       	ret

000006d0 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     6d0:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     6d2:	80 81       	ld	r24, Z
     6d4:	94 e0       	ldi	r25, 0x04	; 4
     6d6:	98 0f       	add	r25, r24
     6d8:	99 30       	cpi	r25, 0x09	; 9
     6da:	20 f4       	brcc	.+8      	; 0x6e4 <joystick_getDirection+0x14>
     6dc:	91 81       	ldd	r25, Z+1	; 0x01
     6de:	9c 5f       	subi	r25, 0xFC	; 252
     6e0:	99 30       	cpi	r25, 0x09	; 9
     6e2:	90 f0       	brcs	.+36     	; 0x708 <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     6e4:	85 30       	cpi	r24, 0x05	; 5
     6e6:	2c f0       	brlt	.+10     	; 0x6f2 <joystick_getDirection+0x22>
     6e8:	81 81       	ldd	r24, Z+1	; 0x01
     6ea:	8f 5c       	subi	r24, 0xCF	; 207
     6ec:	83 36       	cpi	r24, 0x63	; 99
     6ee:	38 f4       	brcc	.+14     	; 0x6fe <joystick_getDirection+0x2e>
     6f0:	0d c0       	rjmp	.+26     	; 0x70c <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     6f2:	8c 3f       	cpi	r24, 0xFC	; 252
     6f4:	24 f4       	brge	.+8      	; 0x6fe <joystick_getDirection+0x2e>
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	8f 5c       	subi	r24, 0xCF	; 207
     6fa:	83 36       	cpi	r24, 0x63	; 99
     6fc:	48 f0       	brcs	.+18     	; 0x710 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     6fe:	81 81       	ldd	r24, Z+1	; 0x01
     700:	8c 3f       	cpi	r24, 0xFC	; 252
     702:	44 f0       	brlt	.+16     	; 0x714 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	08 95       	ret
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     714:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     716:	08 95       	ret

00000718 <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     718:	8f e1       	ldi	r24, 0x1F	; 31
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 b8 09 	call	0x1370	; 0x1370 <malloc>
	ptr->numChildren = 0;
     720:	fc 01       	movw	r30, r24
     722:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     724:	2a e0       	ldi	r18, 0x0A	; 10
     726:	e8 e6       	ldi	r30, 0x68	; 104
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	dc 01       	movw	r26, r24
     72c:	01 90       	ld	r0, Z+
     72e:	0d 92       	st	X+, r0
     730:	2a 95       	dec	r18
     732:	e1 f7       	brne	.-8      	; 0x72c <mainMenuInit+0x14>
	ptr->parent = NULL;
     734:	fc 01       	movw	r30, r24
     736:	11 8a       	std	Z+17, r1	; 0x11
     738:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     73a:	08 95       	ret

0000073c <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	7c 01       	movw	r14, r24
     74c:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     74e:	8f e1       	ldi	r24, 0x1F	; 31
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 b8 09 	call	0x1370	; 0x1370 <malloc>
     756:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     758:	d7 01       	movw	r26, r14
     75a:	5e 96       	adiw	r26, 0x1e	; 30
     75c:	ec 91       	ld	r30, X
     75e:	5e 97       	sbiw	r26, 0x1e	; 30
     760:	c1 e0       	ldi	r28, 0x01	; 1
     762:	ce 0f       	add	r28, r30
     764:	5e 96       	adiw	r26, 0x1e	; 30
     766:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     768:	b6 01       	movw	r22, r12
     76a:	0e 94 35 0b 	call	0x166a	; 0x166a <strcpy>
	childPtr->parent = parent;
     76e:	f8 01       	movw	r30, r16
     770:	f1 8a       	std	Z+17, r15	; 0x11
     772:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     774:	c7 30       	cpi	r28, 0x07	; 7
     776:	78 f4       	brcc	.+30     	; 0x796 <addChild+0x5a>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     778:	ec 2f       	mov	r30, r28
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	38 96       	adiw	r30, 0x08	; 8
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	ee 0d       	add	r30, r14
     784:	ff 1d       	adc	r31, r15
     786:	11 83       	std	Z+1, r17	; 0x01
     788:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     78a:	d8 01       	movw	r26, r16
     78c:	5e 96       	adiw	r26, 0x1e	; 30
     78e:	1c 92       	st	X, r1
	return childPtr;
     790:	80 2f       	mov	r24, r16
     792:	91 2f       	mov	r25, r17
     794:	02 c0       	rjmp	.+4      	; 0x79a <addChild+0x5e>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	08 95       	ret

000007aa <menuInit>:

MenuNode* menuInit(void)
{
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     7b6:	0e 94 8c 03 	call	0x718	; 0x718 <mainMenuInit>
     7ba:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     7bc:	62 e7       	ldi	r22, 0x72	; 114
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	0e 94 9e 03 	call	0x73c	; 0x73c <addChild>
     7c4:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     7c6:	6c e7       	ldi	r22, 0x7C	; 124
     7c8:	71 e0       	ldi	r23, 0x01	; 1
     7ca:	0e 94 9e 03 	call	0x73c	; 0x73c <addChild>
	addChild(childPlayGame,"GAME 2");
     7ce:	63 e8       	ldi	r22, 0x83	; 131
     7d0:	71 e0       	ldi	r23, 0x01	; 1
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 9e 03 	call	0x73c	; 0x73c <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     7d8:	6a e8       	ldi	r22, 0x8A	; 138
     7da:	71 e0       	ldi	r23, 0x01	; 1
     7dc:	c7 01       	movw	r24, r14
     7de:	0e 94 9e 03 	call	0x73c	; 0x73c <addChild>
     7e2:	8c 01       	movw	r16, r24
     7e4:	c5 e0       	ldi	r28, 0x05	; 5
     7e6:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     7e8:	64 e9       	ldi	r22, 0x94	; 148
     7ea:	71 e0       	ldi	r23, 0x01	; 1
     7ec:	c8 01       	movw	r24, r16
     7ee:	0e 94 9e 03 	call	0x73c	; 0x73c <addChild>
     7f2:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     7f4:	c9 f7       	brne	.-14     	; 0x7e8 <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     7f6:	6c e9       	ldi	r22, 0x9C	; 156
     7f8:	71 e0       	ldi	r23, 0x01	; 1
     7fa:	c7 01       	movw	r24, r14
     7fc:	0e 94 9e 03 	call	0x73c	; 0x73c <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     800:	65 ea       	ldi	r22, 0xA5	; 165
     802:	71 e0       	ldi	r23, 0x01	; 1
     804:	0e 94 9e 03 	call	0x73c	; 0x73c <addChild>
	currentMenu.currentMenuItem = mainMenu;
     808:	ec ed       	ldi	r30, 0xDC	; 220
     80a:	f2 e0       	ldi	r31, 0x02	; 2
     80c:	f1 82       	std	Z+1, r15	; 0x01
     80e:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     810:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     812:	84 e0       	ldi	r24, 0x04	; 4
     814:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     816:	c7 01       	movw	r24, r14
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	08 95       	ret

00000826 <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     826:	0e 94 68 03 	call	0x6d0	; 0x6d0 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     82a:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <currentMenu+0x3>
     82e:	94 30       	cpi	r25, 0x04	; 4
     830:	09 f0       	breq	.+2      	; 0x834 <navigateMenu+0xe>
     832:	58 c0       	rjmp	.+176    	; 0x8e4 <navigateMenu+0xbe>
			switch (dir) {
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	e1 f1       	breq	.+120    	; 0x8b0 <navigateMenu+0x8a>
     838:	60 f1       	brcs	.+88     	; 0x892 <navigateMenu+0x6c>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	c9 f0       	breq	.+50     	; 0x870 <navigateMenu+0x4a>
     83e:	83 30       	cpi	r24, 0x03	; 3
     840:	09 f0       	breq	.+2      	; 0x844 <navigateMenu+0x1e>
     842:	50 c0       	rjmp	.+160    	; 0x8e4 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     844:	ec ed       	ldi	r30, 0xDC	; 220
     846:	f2 e0       	ldi	r31, 0x02	; 2
     848:	92 81       	ldd	r25, Z+2	; 0x02
     84a:	49 2f       	mov	r20, r25
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	01 90       	ld	r0, Z+
     850:	f0 81       	ld	r31, Z
     852:	e0 2d       	mov	r30, r0
     854:	26 8d       	ldd	r18, Z+30	; 0x1e
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	21 50       	subi	r18, 0x01	; 1
     85a:	31 09       	sbc	r19, r1
     85c:	42 17       	cp	r20, r18
     85e:	53 07       	cpc	r21, r19
     860:	24 f4       	brge	.+8      	; 0x86a <navigateMenu+0x44>
					currentMenu.childIndex++;
     862:	9f 5f       	subi	r25, 0xFF	; 255
     864:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <currentMenu+0x2>
     868:	3d c0       	rjmp	.+122    	; 0x8e4 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     86a:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <currentMenu+0x2>
     86e:	3a c0       	rjmp	.+116    	; 0x8e4 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     870:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <currentMenu+0x2>
     874:	99 23       	and	r25, r25
     876:	21 f0       	breq	.+8      	; 0x880 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     878:	91 50       	subi	r25, 0x01	; 1
     87a:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <currentMenu+0x2>
     87e:	32 c0       	rjmp	.+100    	; 0x8e4 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     880:	ec ed       	ldi	r30, 0xDC	; 220
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	a0 81       	ld	r26, Z
     886:	b1 81       	ldd	r27, Z+1	; 0x01
     888:	5e 96       	adiw	r26, 0x1e	; 30
     88a:	9c 91       	ld	r25, X
     88c:	91 50       	subi	r25, 0x01	; 1
     88e:	92 83       	std	Z+2, r25	; 0x02
     890:	29 c0       	rjmp	.+82     	; 0x8e4 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     892:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <currentMenu>
     896:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <currentMenu+0x1>
     89a:	20 89       	ldd	r18, Z+16	; 0x10
     89c:	31 89       	ldd	r19, Z+17	; 0x11
     89e:	21 15       	cp	r18, r1
     8a0:	31 05       	cpc	r19, r1
     8a2:	01 f1       	breq	.+64     	; 0x8e4 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     8a4:	ec ed       	ldi	r30, 0xDC	; 220
     8a6:	f2 e0       	ldi	r31, 0x02	; 2
     8a8:	31 83       	std	Z+1, r19	; 0x01
     8aa:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     8ac:	12 82       	std	Z+2, r1	; 0x02
     8ae:	1a c0       	rjmp	.+52     	; 0x8e4 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     8b0:	ac ed       	ldi	r26, 0xDC	; 220
     8b2:	b2 e0       	ldi	r27, 0x02	; 2
     8b4:	2d 91       	ld	r18, X+
     8b6:	3c 91       	ld	r19, X
     8b8:	11 97       	sbiw	r26, 0x01	; 1
     8ba:	12 96       	adiw	r26, 0x02	; 2
     8bc:	9c 91       	ld	r25, X
     8be:	12 97       	sbiw	r26, 0x02	; 2
     8c0:	e9 2f       	mov	r30, r25
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	39 96       	adiw	r30, 0x09	; 9
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	e2 0f       	add	r30, r18
     8cc:	f3 1f       	adc	r31, r19
     8ce:	01 90       	ld	r0, Z+
     8d0:	f0 81       	ld	r31, Z
     8d2:	e0 2d       	mov	r30, r0
     8d4:	96 8d       	ldd	r25, Z+30	; 0x1e
     8d6:	99 23       	and	r25, r25
     8d8:	29 f0       	breq	.+10     	; 0x8e4 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     8da:	11 96       	adiw	r26, 0x01	; 1
     8dc:	fc 93       	st	X, r31
     8de:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     8e0:	12 96       	adiw	r26, 0x02	; 2
     8e2:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     8e4:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <currentMenu+0x3>
     8e8:	08 95       	ret

000008ea <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
	oled_reset();
     8f2:	0e 94 bf 04 	call	0x97e	; 0x97e <oled_reset>
	oled_home();
     8f6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     8fa:	cc ed       	ldi	r28, 0xDC	; 220
     8fc:	d2 e0       	ldi	r29, 0x02	; 2
     8fe:	88 81       	ld	r24, Y
     900:	99 81       	ldd	r25, Y+1	; 0x01
     902:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     906:	e8 81       	ld	r30, Y
     908:	f9 81       	ldd	r31, Y+1	; 0x01
     90a:	86 8d       	ldd	r24, Z+30	; 0x1e
     90c:	88 23       	and	r24, r24
     90e:	31 f1       	breq	.+76     	; 0x95c <menu_printCurrentMenu+0x72>
     910:	c0 e0       	ldi	r28, 0x00	; 0
     912:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     914:	0c ed       	ldi	r16, 0xDC	; 220
     916:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     918:	ce 01       	movw	r24, r28
     91a:	02 96       	adiw	r24, 0x02	; 2
     91c:	0e 94 17 05 	call	0xa2e	; 0xa2e <oled_gotoLine>
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     920:	d8 01       	movw	r26, r16
     922:	8d 91       	ld	r24, X+
     924:	9c 91       	ld	r25, X
     926:	fe 01       	movw	r30, r28
     928:	39 96       	adiw	r30, 0x09	; 9
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	e8 0f       	add	r30, r24
     930:	f9 1f       	adc	r31, r25
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_print>
		if (currentMenu.childIndex == i) {
     93a:	f8 01       	movw	r30, r16
     93c:	82 81       	ldd	r24, Z+2	; 0x02
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	8c 17       	cp	r24, r28
     942:	9d 07       	cpc	r25, r29
     944:	11 f4       	brne	.+4      	; 0x94a <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     946:	0e 94 d5 04 	call	0x9aa	; 0x9aa <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     94a:	21 96       	adiw	r28, 0x01	; 1
     94c:	d8 01       	movw	r26, r16
     94e:	ed 91       	ld	r30, X+
     950:	fc 91       	ld	r31, X
     952:	86 8d       	ldd	r24, Z+30	; 0x1e
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	c8 17       	cp	r28, r24
     958:	d9 07       	cpc	r29, r25
     95a:	f4 f2       	brlt	.-68     	; 0x918 <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     966:	80 55       	subi	r24, 0x50	; 80
     968:	e0 e0       	ldi	r30, 0x00	; 0
     96a:	f0 e1       	ldi	r31, 0x10	; 16
     96c:	80 83       	st	Z, r24
     96e:	86 2f       	mov	r24, r22
     970:	8f 70       	andi	r24, 0x0F	; 15
     972:	80 83       	st	Z, r24
     974:	62 95       	swap	r22
     976:	6f 70       	andi	r22, 0x0F	; 15
     978:	60 61       	ori	r22, 0x10	; 16
     97a:	60 83       	st	Z, r22
     97c:	08 95       	ret

0000097e <oled_reset>:
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	d2 e1       	ldi	r29, 0x12	; 18
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	81 2f       	mov	r24, r17
     98e:	0e 94 b3 04 	call	0x966	; 0x966 <oled_pos>
     992:	80 e8       	ldi	r24, 0x80	; 128
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	18 82       	st	Y, r1
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	e9 f7       	brne	.-6      	; 0x996 <oled_reset+0x18>
     99c:	1f 5f       	subi	r17, 0xFF	; 255
     99e:	18 30       	cpi	r17, 0x08	; 8
     9a0:	a1 f7       	brne	.-24     	; 0x98a <oled_reset+0xc>
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	08 95       	ret

000009aa <oled_print_arrow>:
     9aa:	e0 e0       	ldi	r30, 0x00	; 0
     9ac:	f2 e1       	ldi	r31, 0x12	; 18
     9ae:	88 e1       	ldi	r24, 0x18	; 24
     9b0:	80 83       	st	Z, r24
     9b2:	9c e3       	ldi	r25, 0x3C	; 60
     9b4:	90 83       	st	Z, r25
     9b6:	9e e7       	ldi	r25, 0x7E	; 126
     9b8:	90 83       	st	Z, r25
     9ba:	80 83       	st	Z, r24
     9bc:	80 83       	st	Z, r24
     9be:	08 95       	ret

000009c0 <oled_home>:
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 b3 04 	call	0x966	; 0x966 <oled_pos>
     9c8:	08 95       	ret

000009ca <oled_init>:
     9ca:	e0 e0       	ldi	r30, 0x00	; 0
     9cc:	f0 e1       	ldi	r31, 0x10	; 16
     9ce:	8e ea       	ldi	r24, 0xAE	; 174
     9d0:	80 83       	st	Z, r24
     9d2:	81 ea       	ldi	r24, 0xA1	; 161
     9d4:	80 83       	st	Z, r24
     9d6:	8a ed       	ldi	r24, 0xDA	; 218
     9d8:	80 83       	st	Z, r24
     9da:	82 e1       	ldi	r24, 0x12	; 18
     9dc:	80 83       	st	Z, r24
     9de:	88 ec       	ldi	r24, 0xC8	; 200
     9e0:	80 83       	st	Z, r24
     9e2:	88 ea       	ldi	r24, 0xA8	; 168
     9e4:	80 83       	st	Z, r24
     9e6:	8f e3       	ldi	r24, 0x3F	; 63
     9e8:	80 83       	st	Z, r24
     9ea:	85 ed       	ldi	r24, 0xD5	; 213
     9ec:	80 83       	st	Z, r24
     9ee:	80 e8       	ldi	r24, 0x80	; 128
     9f0:	80 83       	st	Z, r24
     9f2:	81 e8       	ldi	r24, 0x81	; 129
     9f4:	80 83       	st	Z, r24
     9f6:	80 e5       	ldi	r24, 0x50	; 80
     9f8:	80 83       	st	Z, r24
     9fa:	89 ed       	ldi	r24, 0xD9	; 217
     9fc:	80 83       	st	Z, r24
     9fe:	81 e2       	ldi	r24, 0x21	; 33
     a00:	80 83       	st	Z, r24
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	80 83       	st	Z, r24
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	80 83       	st	Z, r24
     a0a:	8b ed       	ldi	r24, 0xDB	; 219
     a0c:	80 83       	st	Z, r24
     a0e:	80 e3       	ldi	r24, 0x30	; 48
     a10:	80 83       	st	Z, r24
     a12:	8d ea       	ldi	r24, 0xAD	; 173
     a14:	80 83       	st	Z, r24
     a16:	10 82       	st	Z, r1
     a18:	84 ea       	ldi	r24, 0xA4	; 164
     a1a:	80 83       	st	Z, r24
     a1c:	86 ea       	ldi	r24, 0xA6	; 166
     a1e:	80 83       	st	Z, r24
     a20:	8f ea       	ldi	r24, 0xAF	; 175
     a22:	80 83       	st	Z, r24
     a24:	0e 94 bf 04 	call	0x97e	; 0x97e <oled_reset>
     a28:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <oled_home>
     a2c:	08 95       	ret

00000a2e <oled_gotoLine>:
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	0e 94 b3 04 	call	0x966	; 0x966 <oled_pos>
     a34:	08 95       	ret

00000a36 <oled_print>:

void oled_print(char* character){
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	dc 01       	movw	r26, r24
	while (*character != '\0')
     a3c:	8c 91       	ld	r24, X
     a3e:	81 11       	cpse	r24, r1
     a40:	1a c0       	rjmp	.+52     	; 0xa76 <oled_print+0x40>
     a42:	1e c0       	rjmp	.+60     	; 0xa80 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     a44:	ec 91       	ld	r30, X
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	b0 97       	sbiw	r30, 0x20	; 32
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	e2 0f       	add	r30, r18
     a58:	f3 1f       	adc	r31, r19
     a5a:	e2 56       	subi	r30, 0x62	; 98
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     a60:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     a62:	2f 5f       	subi	r18, 0xFF	; 255
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	28 30       	cpi	r18, 0x08	; 8
     a68:	31 05       	cpc	r19, r1
     a6a:	61 f7       	brne	.-40     	; 0xa44 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     a6c:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     a6e:	8c 91       	ld	r24, X
     a70:	81 11       	cpse	r24, r1
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <oled_print+0x44>
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     a76:	c0 e0       	ldi	r28, 0x00	; 0
     a78:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	e2 cf       	rjmp	.-60     	; 0xa44 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <setupInit>:
#include "sleep.h"
#include "SPI.h"
#include "CAN.h"

	void setupInit(void){
		cli();
     a86:	f8 94       	cli
	xmem_init();
     a88:	0e 94 d4 06 	call	0xda8	; 0xda8 <xmem_init>
	USART_init(MYUBRR);
     a8c:	8f e1       	ldi	r24, 0x1F	; 31
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 c3 06 	call	0xd86	; 0xd86 <USART_init>
	adcInit();
     a94:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     a98:	0e 94 ca 02 	call	0x594	; 0x594 <joystickInit>
	touchButton_init();
     a9c:	0e 94 96 06 	call	0xd2c	; 0xd2c <touchButton_init>
	oled_init();
     aa0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <oled_init>
	timer_init();
     aa4:	0e 94 80 06 	call	0xd00	; 0xd00 <timer_init>
	sleep_init();
     aa8:	0e 94 c9 02 	call	0x592	; 0x592 <sleep_init>
	menuInit();
     aac:	0e 94 d5 03 	call	0x7aa	; 0x7aa <menuInit>
	SPI_masterInit();
     ab0:	0e 94 6d 05 	call	0xada	; 0xada <SPI_masterInit>
	CAN_init();
     ab4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <CAN_init>
		sei();
     ab8:	78 94       	sei
     aba:	08 95       	ret

00000abc <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     ac6:	c2 ee       	ldi	r28, 0xE2	; 226
     ac8:	d2 e0       	ldi	r29, 0x02	; 2
     aca:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     ad2:	89 83       	std	Y+1, r24	; 0x01
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <SPI_masterInit>:
	SPI_setChipSelect(PB4, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB6);
	SPCR = (1 << SPE);
     ada:	80 ea       	ldi	r24, 0xA0	; 160
     adc:	87 bb       	out	0x17, r24	; 23
     ade:	bc 9a       	sbi	0x17, 4	; 23
     ae0:	8d b1       	in	r24, 0x0d	; 13
     ae2:	81 65       	ori	r24, 0x51	; 81
     ae4:	8d b9       	out	0x0d, r24	; 13
     ae6:	c4 9a       	sbi	0x18, 4	; 24
     ae8:	08 95       	ret

00000aea <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     aea:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     aec:	77 9b       	sbis	0x0e, 7	; 14
     aee:	fe cf       	rjmp	.-4      	; 0xaec <SPI_masterWrite+0x2>

}
     af0:	08 95       	ret

00000af2 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     af2:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
     af4:	77 9b       	sbis	0x0e, 7	; 14
     af6:	fe cf       	rjmp	.-4      	; 0xaf4 <SPI_masterRead+0x2>
	return SPDR;
     af8:	8f b1       	in	r24, 0x0f	; 15
}
     afa:	08 95       	ret

00000afc <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     afc:	66 23       	and	r22, r22
     afe:	69 f0       	breq	.+26     	; 0xb1a <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     b00:	48 b3       	in	r20, 0x18	; 24
     b02:	21 e0       	ldi	r18, 0x01	; 1
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	b9 01       	movw	r22, r18
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <SPI_setChipSelect+0x12>
     b0a:	66 0f       	add	r22, r22
     b0c:	77 1f       	adc	r23, r23
     b0e:	8a 95       	dec	r24
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <SPI_setChipSelect+0xe>
     b12:	cb 01       	movw	r24, r22
     b14:	84 2b       	or	r24, r20
     b16:	88 bb       	out	0x18, r24	; 24
     b18:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     b1a:	48 b3       	in	r20, 0x18	; 24
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	b9 01       	movw	r22, r18
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <SPI_setChipSelect+0x2c>
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	8a 95       	dec	r24
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <SPI_setChipSelect+0x28>
     b2c:	cb 01       	movw	r24, r22
     b2e:	80 95       	com	r24
     b30:	84 23       	and	r24, r20
     b32:	88 bb       	out	0x18, r24	; 24
     b34:	08 95       	ret

00000b36 <test_SRAM>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "menu.h"

void test_SRAM(void)
{
     b36:	cf 92       	push	r12
     b38:	df 92       	push	r13
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     b46:	8d ea       	ldi	r24, 0xAD	; 173
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     b52:	0e 94 25 0b 	call	0x164a	; 0x164a <rand>
     b56:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     b58:	0e 94 2a 0b 	call	0x1654	; 0x1654 <srand>
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b60:	c1 2c       	mov	r12, r1
     b62:	d1 2c       	mov	r13, r1

void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     b64:	00 e0       	ldi	r16, 0x00	; 0
     b66:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     b68:	c5 ec       	ldi	r28, 0xC5	; 197
     b6a:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     b6c:	0e 94 25 0b 	call	0x164a	; 0x164a <rand>
     b70:	f6 01       	movw	r30, r12
     b72:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     b74:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     b76:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     b78:	28 17       	cp	r18, r24
     b7a:	a9 f0       	breq	.+42     	; 0xba6 <test_SRAM+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     b7c:	99 27       	eor	r25, r25
     b7e:	9f 93       	push	r25
     b80:	8f 93       	push	r24
     b82:	1f 92       	push	r1
     b84:	2f 93       	push	r18
     b86:	df 92       	push	r13
     b88:	cf 92       	push	r12
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
			write_errors++;
     b92:	0f 5f       	subi	r16, 0xFF	; 255
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	8d b7       	in	r24, 0x3d	; 61
     b98:	9e b7       	in	r25, 0x3e	; 62
     b9a:	08 96       	adiw	r24, 0x08	; 8
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	9e bf       	out	0x3e, r25	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     ba6:	9f ef       	ldi	r25, 0xFF	; 255
     ba8:	c9 1a       	sub	r12, r25
     baa:	d9 0a       	sbc	r13, r25
     bac:	c1 14       	cp	r12, r1
     bae:	88 e0       	ldi	r24, 0x08	; 8
     bb0:	d8 06       	cpc	r13, r24
     bb2:	e1 f6       	brne	.-72     	; 0xb6c <test_SRAM+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     bb4:	c7 01       	movw	r24, r14
     bb6:	0e 94 2a 0b 	call	0x1654	; 0x1654 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     bbe:	e1 2c       	mov	r14, r1
     bc0:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     bc2:	0f 2e       	mov	r0, r31
     bc4:	ff ef       	ldi	r31, 0xFF	; 255
     bc6:	cf 2e       	mov	r12, r31
     bc8:	f1 e0       	ldi	r31, 0x01	; 1
     bca:	df 2e       	mov	r13, r31
     bcc:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     bce:	0e 94 25 0b 	call	0x164a	; 0x164a <rand>
     bd2:	fe 01       	movw	r30, r28
     bd4:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     bd6:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     bd8:	28 17       	cp	r18, r24
     bda:	b1 f0       	breq	.+44     	; 0xc08 <test_SRAM+0xd2>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     bdc:	99 27       	eor	r25, r25
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	1f 92       	push	r1
     be4:	2f 93       	push	r18
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	df 92       	push	r13
     bec:	cf 92       	push	r12
     bee:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
			i, retreived_value, some_value);
			retrieval_errors++;
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	e9 1a       	sub	r14, r25
     bf6:	f9 0a       	sbc	r15, r25
     bf8:	8d b7       	in	r24, 0x3d	; 61
     bfa:	9e b7       	in	r25, 0x3e	; 62
     bfc:	08 96       	adiw	r24, 0x08	; 8
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	9e bf       	out	0x3e, r25	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c08:	21 96       	adiw	r28, 0x01	; 1
     c0a:	c1 15       	cp	r28, r1
     c0c:	98 e0       	ldi	r25, 0x08	; 8
     c0e:	d9 07       	cpc	r29, r25
     c10:	f1 f6       	brne	.-68     	; 0xbce <test_SRAM+0x98>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
			i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
     c12:	ff 92       	push	r15
     c14:	ef 92       	push	r14
     c16:	1f 93       	push	r17
     c18:	0f 93       	push	r16
     c1a:	8d e3       	ldi	r24, 0x3D	; 61
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	9f 93       	push	r25
     c20:	8f 93       	push	r24
     c22:	0e 94 87 0b 	call	0x170e	; 0x170e <printf>
}
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	08 95       	ret

00000c44 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
	cli();
     c66:	f8 94       	cli
	TCNT1 = 0x00;
     c68:	1d bc       	out	0x2d, r1	; 45
     c6a:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     c6c:	88 ed       	ldi	r24, 0xD8	; 216
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	0e 94 d5 02 	call	0x5aa	; 0x5aa <joystick_readPosition>
	slider_readPosition(&slider_pos);
     c74:	82 ee       	ldi	r24, 0xE2	; 226
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	0e 94 5e 05 	call	0xabc	; 0xabc <slider_readPosition>
	touchButton_readButtons(&buttons);
     c7c:	80 ee       	ldi	r24, 0xE0	; 224
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	0e 94 af 06 	call	0xd5e	; 0xd5e <touchButton_readButtons>
	sei();
     c84:	78 94       	sei
}
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_16>:

ISR (TIMER0_COMP_vect) {
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	4f 93       	push	r20
     cb8:	5f 93       	push	r21
     cba:	6f 93       	push	r22
     cbc:	7f 93       	push	r23
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
	cli();
     cca:	f8 94       	cli
	TCNT1 = 0x00;
     ccc:	1d bc       	out	0x2d, r1	; 45
     cce:	1c bc       	out	0x2c, r1	; 44
	navigateMenu(&joystick_pos);
     cd0:	88 ed       	ldi	r24, 0xD8	; 216
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 13 04 	call	0x826	; 0x826 <navigateMenu>
	menu_printCurrentMenu();
     cd8:	0e 94 75 04 	call	0x8ea	; 0x8ea <menu_printCurrentMenu>
	sei();
     cdc:	78 94       	sei
}
     cde:	ff 91       	pop	r31
     ce0:	ef 91       	pop	r30
     ce2:	bf 91       	pop	r27
     ce4:	af 91       	pop	r26
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	7f 91       	pop	r23
     cec:	6f 91       	pop	r22
     cee:	5f 91       	pop	r21
     cf0:	4f 91       	pop	r20
     cf2:	3f 91       	pop	r19
     cf4:	2f 91       	pop	r18
     cf6:	0f 90       	pop	r0
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0f 90       	pop	r0
     cfc:	1f 90       	pop	r1
     cfe:	18 95       	reti

00000d00 <timer_init>:

	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     d00:	89 b7       	in	r24, 0x39	; 57
     d02:	80 62       	ori	r24, 0x20	; 32
     d04:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     d06:	1d bc       	out	0x2d, r1	; 45
     d08:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     d0a:	80 e3       	ldi	r24, 0x30	; 48
     d0c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     d0e:	85 e0       	ldi	r24, 0x05	; 5
     d10:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     d12:	80 ef       	ldi	r24, 0xF0	; 240
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	99 bd       	out	0x29, r25	; 41
     d18:	88 bd       	out	0x28, r24	; 40
	
	
	////////////////////////TIMER 0////////////////////////////////////
	
	TIMSK |= (1 << OCIE0);
     d1a:	89 b7       	in	r24, 0x39	; 57
     d1c:	81 60       	ori	r24, 0x01	; 1
     d1e:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0x0; 
     d20:	12 be       	out	0x32, r1	; 50
	
	TCCR0 = (1 << COM01 | 1 << COM00 | 1 << CS02 | 1 << CS00);
     d22:	85 e3       	ldi	r24, 0x35	; 53
     d24:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = TIMER0_RESET;
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	81 bf       	out	0x31, r24	; 49
     d2a:	08 95       	ret

00000d2c <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     d2c:	36 b3       	in	r19, 0x16	; 22
     d2e:	26 b3       	in	r18, 0x16	; 22
     d30:	47 b3       	in	r20, 0x17	; 23
     d32:	32 70       	andi	r19, 0x02	; 2
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	bc 01       	movw	r22, r24
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <touchButton_init+0x14>
     d3c:	66 0f       	add	r22, r22
     d3e:	77 1f       	adc	r23, r23
     d40:	3a 95       	dec	r19
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <touchButton_init+0x10>
     d44:	24 70       	andi	r18, 0x04	; 4
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <touchButton_init+0x20>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	2a 95       	dec	r18
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <touchButton_init+0x1c>
     d50:	86 2b       	or	r24, r22
     d52:	97 2b       	or	r25, r23
     d54:	80 95       	com	r24
     d56:	90 95       	com	r25
     d58:	84 23       	and	r24, r20
     d5a:	87 bb       	out	0x17, r24	; 23
     d5c:	08 95       	ret

00000d5e <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     d5e:	86 b3       	in	r24, 0x16	; 22
     d60:	e0 ee       	ldi	r30, 0xE0	; 224
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	86 95       	lsr	r24
     d66:	81 70       	andi	r24, 0x01	; 1
     d68:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     d6a:	86 b3       	in	r24, 0x16	; 22
     d6c:	82 fb       	bst	r24, 2
     d6e:	88 27       	eor	r24, r24
     d70:	80 f9       	bld	r24, 0
     d72:	81 83       	std	Z+1, r24	; 0x01
     d74:	08 95       	ret

00000d76 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     d76:	5d 9b       	sbis	0x0b, 5	; 11
     d78:	fe cf       	rjmp	.-4      	; 0xd76 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     d7a:	8c b9       	out	0x0c, r24	; 12
     d7c:	08 95       	ret

00000d7e <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     d7e:	5f 9b       	sbis	0x0b, 7	; 11
     d80:	fe cf       	rjmp	.-4      	; 0xd7e <USART_receiveChar>
		;
	
	return UDR0;
     d82:	8c b1       	in	r24, 0x0c	; 12
     d84:	08 95       	ret

00000d86 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     d86:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     d88:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     d8a:	88 e1       	ldi	r24, 0x18	; 24
     d8c:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     d8e:	8e e8       	ldi	r24, 0x8E	; 142
     d90:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     d92:	6f eb       	ldi	r22, 0xBF	; 191
     d94:	76 e0       	ldi	r23, 0x06	; 6
     d96:	8b eb       	ldi	r24, 0xBB	; 187
     d98:	96 e0       	ldi	r25, 0x06	; 6
     d9a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <fdevopen>
     d9e:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <uart+0x1>
     da2:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <uart>
     da6:	08 95       	ret

00000da8 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     da8:	85 b7       	in	r24, 0x35	; 53
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     dae:	80 b7       	in	r24, 0x30	; 48
     db0:	88 60       	ori	r24, 0x08	; 8
     db2:	80 bf       	out	0x30, r24	; 48
     db4:	08 95       	ret
     db6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscA>
     dba:	60 f0       	brcs	.+24     	; 0xdd4 <xmem_init+0x2c>
     dbc:	80 e8       	ldi	r24, 0x80	; 128
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <xmem_init+0x1c>
     dc2:	9e ef       	ldi	r25, 0xFE	; 254
     dc4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscB>
     dc8:	28 f0       	brcs	.+10     	; 0xdd4 <xmem_init+0x2c>
     dca:	40 e8       	ldi	r20, 0x80	; 128
     dcc:	51 e0       	ldi	r21, 0x01	; 1
     dce:	71 f4       	brne	.+28     	; 0xdec <atan2+0x10>
     dd0:	5e ef       	ldi	r21, 0xFE	; 254
     dd2:	0c c0       	rjmp	.+24     	; 0xdec <atan2+0x10>
     dd4:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>
     dd8:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_zero>

00000ddc <atan2>:
     ddc:	e9 2f       	mov	r30, r25
     dde:	e0 78       	andi	r30, 0x80	; 128
     de0:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_split3>
     de4:	40 f3       	brcs	.-48     	; 0xdb6 <xmem_init+0xe>
     de6:	09 2e       	mov	r0, r25
     de8:	05 2a       	or	r0, r21
     dea:	b1 f3       	breq	.-20     	; 0xdd8 <xmem_init+0x30>
     dec:	26 17       	cp	r18, r22
     dee:	37 07       	cpc	r19, r23
     df0:	48 07       	cpc	r20, r24
     df2:	59 07       	cpc	r21, r25
     df4:	38 f0       	brcs	.+14     	; 0xe04 <atan2+0x28>
     df6:	0e 2e       	mov	r0, r30
     df8:	07 f8       	bld	r0, 7
     dfa:	e0 25       	eor	r30, r0
     dfc:	69 f0       	breq	.+26     	; 0xe18 <atan2+0x3c>
     dfe:	e0 25       	eor	r30, r0
     e00:	e0 64       	ori	r30, 0x40	; 64
     e02:	0a c0       	rjmp	.+20     	; 0xe18 <atan2+0x3c>
     e04:	ef 63       	ori	r30, 0x3F	; 63
     e06:	07 f8       	bld	r0, 7
     e08:	00 94       	com	r0
     e0a:	07 fa       	bst	r0, 7
     e0c:	db 01       	movw	r26, r22
     e0e:	b9 01       	movw	r22, r18
     e10:	9d 01       	movw	r18, r26
     e12:	dc 01       	movw	r26, r24
     e14:	ca 01       	movw	r24, r20
     e16:	ad 01       	movw	r20, r26
     e18:	ef 93       	push	r30
     e1a:	0e 94 64 07 	call	0xec8	; 0xec8 <__divsf3_pse>
     e1e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_round>
     e22:	0e 94 1e 07 	call	0xe3c	; 0xe3c <atan>
     e26:	5f 91       	pop	r21
     e28:	55 23       	and	r21, r21
     e2a:	39 f0       	breq	.+14     	; 0xe3a <atan2+0x5e>
     e2c:	2b ed       	ldi	r18, 0xDB	; 219
     e2e:	3f e0       	ldi	r19, 0x0F	; 15
     e30:	49 e4       	ldi	r20, 0x49	; 73
     e32:	50 fd       	sbrc	r21, 0
     e34:	49 ec       	ldi	r20, 0xC9	; 201
     e36:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__addsf3>
     e3a:	08 95       	ret

00000e3c <atan>:
     e3c:	df 93       	push	r29
     e3e:	dd 27       	eor	r29, r29
     e40:	b9 2f       	mov	r27, r25
     e42:	bf 77       	andi	r27, 0x7F	; 127
     e44:	40 e8       	ldi	r20, 0x80	; 128
     e46:	5f e3       	ldi	r21, 0x3F	; 63
     e48:	16 16       	cp	r1, r22
     e4a:	17 06       	cpc	r1, r23
     e4c:	48 07       	cpc	r20, r24
     e4e:	5b 07       	cpc	r21, r27
     e50:	18 f4       	brcc	.+6      	; 0xe58 <atan+0x1c>
     e52:	d9 2f       	mov	r29, r25
     e54:	0e 94 aa 08 	call	0x1154	; 0x1154 <inverse>
     e58:	9f 93       	push	r25
     e5a:	8f 93       	push	r24
     e5c:	7f 93       	push	r23
     e5e:	6f 93       	push	r22
     e60:	0e 94 1f 09 	call	0x123e	; 0x123e <square>
     e64:	e0 e7       	ldi	r30, 0x70	; 112
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_powser>
     e6c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_round>
     e70:	2f 91       	pop	r18
     e72:	3f 91       	pop	r19
     e74:	4f 91       	pop	r20
     e76:	5f 91       	pop	r21
     e78:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
     e7c:	dd 23       	and	r29, r29
     e7e:	51 f0       	breq	.+20     	; 0xe94 <atan+0x58>
     e80:	90 58       	subi	r25, 0x80	; 128
     e82:	a2 ea       	ldi	r26, 0xA2	; 162
     e84:	2a ed       	ldi	r18, 0xDA	; 218
     e86:	3f e0       	ldi	r19, 0x0F	; 15
     e88:	49 ec       	ldi	r20, 0xC9	; 201
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	d0 78       	andi	r29, 0x80	; 128
     e8e:	5d 27       	eor	r21, r29
     e90:	0e 94 3b 09 	call	0x1276	; 0x1276 <__addsf3x>
     e94:	df 91       	pop	r29
     e96:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_round>

00000e9a <__divsf3>:
     e9a:	0e 94 61 07 	call	0xec2	; 0xec2 <__divsf3x>
     e9e:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_round>
     ea2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscB>
     ea6:	58 f0       	brcs	.+22     	; 0xebe <__divsf3+0x24>
     ea8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscA>
     eac:	40 f0       	brcs	.+16     	; 0xebe <__divsf3+0x24>
     eae:	29 f4       	brne	.+10     	; 0xeba <__divsf3+0x20>
     eb0:	5f 3f       	cpi	r21, 0xFF	; 255
     eb2:	29 f0       	breq	.+10     	; 0xebe <__divsf3+0x24>
     eb4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>
     eb8:	51 11       	cpse	r21, r1
     eba:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>
     ebe:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>

00000ec2 <__divsf3x>:
     ec2:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_split3>
     ec6:	68 f3       	brcs	.-38     	; 0xea2 <__divsf3+0x8>

00000ec8 <__divsf3_pse>:
     ec8:	99 23       	and	r25, r25
     eca:	b1 f3       	breq	.-20     	; 0xeb8 <__divsf3+0x1e>
     ecc:	55 23       	and	r21, r21
     ece:	91 f3       	breq	.-28     	; 0xeb4 <__divsf3+0x1a>
     ed0:	95 1b       	sub	r25, r21
     ed2:	55 0b       	sbc	r21, r21
     ed4:	bb 27       	eor	r27, r27
     ed6:	aa 27       	eor	r26, r26
     ed8:	62 17       	cp	r22, r18
     eda:	73 07       	cpc	r23, r19
     edc:	84 07       	cpc	r24, r20
     ede:	38 f0       	brcs	.+14     	; 0xeee <__divsf3_pse+0x26>
     ee0:	9f 5f       	subi	r25, 0xFF	; 255
     ee2:	5f 4f       	sbci	r21, 0xFF	; 255
     ee4:	22 0f       	add	r18, r18
     ee6:	33 1f       	adc	r19, r19
     ee8:	44 1f       	adc	r20, r20
     eea:	aa 1f       	adc	r26, r26
     eec:	a9 f3       	breq	.-22     	; 0xed8 <__divsf3_pse+0x10>
     eee:	35 d0       	rcall	.+106    	; 0xf5a <__divsf3_pse+0x92>
     ef0:	0e 2e       	mov	r0, r30
     ef2:	3a f0       	brmi	.+14     	; 0xf02 <__divsf3_pse+0x3a>
     ef4:	e0 e8       	ldi	r30, 0x80	; 128
     ef6:	32 d0       	rcall	.+100    	; 0xf5c <__divsf3_pse+0x94>
     ef8:	91 50       	subi	r25, 0x01	; 1
     efa:	50 40       	sbci	r21, 0x00	; 0
     efc:	e6 95       	lsr	r30
     efe:	00 1c       	adc	r0, r0
     f00:	ca f7       	brpl	.-14     	; 0xef4 <__divsf3_pse+0x2c>
     f02:	2b d0       	rcall	.+86     	; 0xf5a <__divsf3_pse+0x92>
     f04:	fe 2f       	mov	r31, r30
     f06:	29 d0       	rcall	.+82     	; 0xf5a <__divsf3_pse+0x92>
     f08:	66 0f       	add	r22, r22
     f0a:	77 1f       	adc	r23, r23
     f0c:	88 1f       	adc	r24, r24
     f0e:	bb 1f       	adc	r27, r27
     f10:	26 17       	cp	r18, r22
     f12:	37 07       	cpc	r19, r23
     f14:	48 07       	cpc	r20, r24
     f16:	ab 07       	cpc	r26, r27
     f18:	b0 e8       	ldi	r27, 0x80	; 128
     f1a:	09 f0       	breq	.+2      	; 0xf1e <__divsf3_pse+0x56>
     f1c:	bb 0b       	sbc	r27, r27
     f1e:	80 2d       	mov	r24, r0
     f20:	bf 01       	movw	r22, r30
     f22:	ff 27       	eor	r31, r31
     f24:	93 58       	subi	r25, 0x83	; 131
     f26:	5f 4f       	sbci	r21, 0xFF	; 255
     f28:	3a f0       	brmi	.+14     	; 0xf38 <__divsf3_pse+0x70>
     f2a:	9e 3f       	cpi	r25, 0xFE	; 254
     f2c:	51 05       	cpc	r21, r1
     f2e:	78 f0       	brcs	.+30     	; 0xf4e <__divsf3_pse+0x86>
     f30:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>
     f34:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>
     f38:	5f 3f       	cpi	r21, 0xFF	; 255
     f3a:	e4 f3       	brlt	.-8      	; 0xf34 <__divsf3_pse+0x6c>
     f3c:	98 3e       	cpi	r25, 0xE8	; 232
     f3e:	d4 f3       	brlt	.-12     	; 0xf34 <__divsf3_pse+0x6c>
     f40:	86 95       	lsr	r24
     f42:	77 95       	ror	r23
     f44:	67 95       	ror	r22
     f46:	b7 95       	ror	r27
     f48:	f7 95       	ror	r31
     f4a:	9f 5f       	subi	r25, 0xFF	; 255
     f4c:	c9 f7       	brne	.-14     	; 0xf40 <__divsf3_pse+0x78>
     f4e:	88 0f       	add	r24, r24
     f50:	91 1d       	adc	r25, r1
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	97 f9       	bld	r25, 7
     f58:	08 95       	ret
     f5a:	e1 e0       	ldi	r30, 0x01	; 1
     f5c:	66 0f       	add	r22, r22
     f5e:	77 1f       	adc	r23, r23
     f60:	88 1f       	adc	r24, r24
     f62:	bb 1f       	adc	r27, r27
     f64:	62 17       	cp	r22, r18
     f66:	73 07       	cpc	r23, r19
     f68:	84 07       	cpc	r24, r20
     f6a:	ba 07       	cpc	r27, r26
     f6c:	20 f0       	brcs	.+8      	; 0xf76 <__divsf3_pse+0xae>
     f6e:	62 1b       	sub	r22, r18
     f70:	73 0b       	sbc	r23, r19
     f72:	84 0b       	sbc	r24, r20
     f74:	ba 0b       	sbc	r27, r26
     f76:	ee 1f       	adc	r30, r30
     f78:	88 f7       	brcc	.-30     	; 0xf5c <__divsf3_pse+0x94>
     f7a:	e0 95       	com	r30
     f7c:	08 95       	ret

00000f7e <__fixsfsi>:
     f7e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixunssfsi>
     f82:	68 94       	set
     f84:	b1 11       	cpse	r27, r1
     f86:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>
     f8a:	08 95       	ret

00000f8c <__fixunssfsi>:
     f8c:	0e 94 89 08 	call	0x1112	; 0x1112 <__fp_splitA>
     f90:	88 f0       	brcs	.+34     	; 0xfb4 <__fixunssfsi+0x28>
     f92:	9f 57       	subi	r25, 0x7F	; 127
     f94:	98 f0       	brcs	.+38     	; 0xfbc <__fixunssfsi+0x30>
     f96:	b9 2f       	mov	r27, r25
     f98:	99 27       	eor	r25, r25
     f9a:	b7 51       	subi	r27, 0x17	; 23
     f9c:	b0 f0       	brcs	.+44     	; 0xfca <__fixunssfsi+0x3e>
     f9e:	e1 f0       	breq	.+56     	; 0xfd8 <__fixunssfsi+0x4c>
     fa0:	66 0f       	add	r22, r22
     fa2:	77 1f       	adc	r23, r23
     fa4:	88 1f       	adc	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	1a f0       	brmi	.+6      	; 0xfb0 <__fixunssfsi+0x24>
     faa:	ba 95       	dec	r27
     fac:	c9 f7       	brne	.-14     	; 0xfa0 <__fixunssfsi+0x14>
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <__fixunssfsi+0x4c>
     fb0:	b1 30       	cpi	r27, 0x01	; 1
     fb2:	91 f0       	breq	.+36     	; 0xfd8 <__fixunssfsi+0x4c>
     fb4:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_zero>
     fb8:	b1 e0       	ldi	r27, 0x01	; 1
     fba:	08 95       	ret
     fbc:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_zero>
     fc0:	67 2f       	mov	r22, r23
     fc2:	78 2f       	mov	r23, r24
     fc4:	88 27       	eor	r24, r24
     fc6:	b8 5f       	subi	r27, 0xF8	; 248
     fc8:	39 f0       	breq	.+14     	; 0xfd8 <__fixunssfsi+0x4c>
     fca:	b9 3f       	cpi	r27, 0xF9	; 249
     fcc:	cc f3       	brlt	.-14     	; 0xfc0 <__fixunssfsi+0x34>
     fce:	86 95       	lsr	r24
     fd0:	77 95       	ror	r23
     fd2:	67 95       	ror	r22
     fd4:	b3 95       	inc	r27
     fd6:	d9 f7       	brne	.-10     	; 0xfce <__fixunssfsi+0x42>
     fd8:	3e f4       	brtc	.+14     	; 0xfe8 <__fixunssfsi+0x5c>
     fda:	90 95       	com	r25
     fdc:	80 95       	com	r24
     fde:	70 95       	com	r23
     fe0:	61 95       	neg	r22
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	08 95       	ret

00000fea <__floatunsisf>:
     fea:	e8 94       	clt
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <__floatsisf+0x12>

00000fee <__floatsisf>:
     fee:	97 fb       	bst	r25, 7
     ff0:	3e f4       	brtc	.+14     	; 0x1000 <__floatsisf+0x12>
     ff2:	90 95       	com	r25
     ff4:	80 95       	com	r24
     ff6:	70 95       	com	r23
     ff8:	61 95       	neg	r22
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	8f 4f       	sbci	r24, 0xFF	; 255
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	99 23       	and	r25, r25
    1002:	a9 f0       	breq	.+42     	; 0x102e <__floatsisf+0x40>
    1004:	f9 2f       	mov	r31, r25
    1006:	96 e9       	ldi	r25, 0x96	; 150
    1008:	bb 27       	eor	r27, r27
    100a:	93 95       	inc	r25
    100c:	f6 95       	lsr	r31
    100e:	87 95       	ror	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b7 95       	ror	r27
    1016:	f1 11       	cpse	r31, r1
    1018:	f8 cf       	rjmp	.-16     	; 0x100a <__floatsisf+0x1c>
    101a:	fa f4       	brpl	.+62     	; 0x105a <__floatsisf+0x6c>
    101c:	bb 0f       	add	r27, r27
    101e:	11 f4       	brne	.+4      	; 0x1024 <__floatsisf+0x36>
    1020:	60 ff       	sbrs	r22, 0
    1022:	1b c0       	rjmp	.+54     	; 0x105a <__floatsisf+0x6c>
    1024:	6f 5f       	subi	r22, 0xFF	; 255
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	16 c0       	rjmp	.+44     	; 0x105a <__floatsisf+0x6c>
    102e:	88 23       	and	r24, r24
    1030:	11 f0       	breq	.+4      	; 0x1036 <__floatsisf+0x48>
    1032:	96 e9       	ldi	r25, 0x96	; 150
    1034:	11 c0       	rjmp	.+34     	; 0x1058 <__floatsisf+0x6a>
    1036:	77 23       	and	r23, r23
    1038:	21 f0       	breq	.+8      	; 0x1042 <__floatsisf+0x54>
    103a:	9e e8       	ldi	r25, 0x8E	; 142
    103c:	87 2f       	mov	r24, r23
    103e:	76 2f       	mov	r23, r22
    1040:	05 c0       	rjmp	.+10     	; 0x104c <__floatsisf+0x5e>
    1042:	66 23       	and	r22, r22
    1044:	71 f0       	breq	.+28     	; 0x1062 <__floatsisf+0x74>
    1046:	96 e8       	ldi	r25, 0x86	; 134
    1048:	86 2f       	mov	r24, r22
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	2a f0       	brmi	.+10     	; 0x105a <__floatsisf+0x6c>
    1050:	9a 95       	dec	r25
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	da f7       	brpl	.-10     	; 0x1050 <__floatsisf+0x62>
    105a:	88 0f       	add	r24, r24
    105c:	96 95       	lsr	r25
    105e:	87 95       	ror	r24
    1060:	97 f9       	bld	r25, 7
    1062:	08 95       	ret

00001064 <__fp_inf>:
    1064:	97 f9       	bld	r25, 7
    1066:	9f 67       	ori	r25, 0x7F	; 127
    1068:	80 e8       	ldi	r24, 0x80	; 128
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	08 95       	ret

00001070 <__fp_nan>:
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	80 ec       	ldi	r24, 0xC0	; 192
    1074:	08 95       	ret

00001076 <__fp_powser>:
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	1f 93       	push	r17
    107c:	0f 93       	push	r16
    107e:	ff 92       	push	r15
    1080:	ef 92       	push	r14
    1082:	df 92       	push	r13
    1084:	7b 01       	movw	r14, r22
    1086:	8c 01       	movw	r16, r24
    1088:	68 94       	set
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <__fp_powser+0x22>
    108c:	da 2e       	mov	r13, r26
    108e:	ef 01       	movw	r28, r30
    1090:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
    1094:	fe 01       	movw	r30, r28
    1096:	e8 94       	clt
    1098:	a5 91       	lpm	r26, Z+
    109a:	25 91       	lpm	r18, Z+
    109c:	35 91       	lpm	r19, Z+
    109e:	45 91       	lpm	r20, Z+
    10a0:	55 91       	lpm	r21, Z+
    10a2:	a6 f3       	brts	.-24     	; 0x108c <__fp_powser+0x16>
    10a4:	ef 01       	movw	r28, r30
    10a6:	0e 94 3b 09 	call	0x1276	; 0x1276 <__addsf3x>
    10aa:	fe 01       	movw	r30, r28
    10ac:	97 01       	movw	r18, r14
    10ae:	a8 01       	movw	r20, r16
    10b0:	da 94       	dec	r13
    10b2:	69 f7       	brne	.-38     	; 0x108e <__fp_powser+0x18>
    10b4:	df 90       	pop	r13
    10b6:	ef 90       	pop	r14
    10b8:	ff 90       	pop	r15
    10ba:	0f 91       	pop	r16
    10bc:	1f 91       	pop	r17
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <__fp_pscA>:
    10c4:	00 24       	eor	r0, r0
    10c6:	0a 94       	dec	r0
    10c8:	16 16       	cp	r1, r22
    10ca:	17 06       	cpc	r1, r23
    10cc:	18 06       	cpc	r1, r24
    10ce:	09 06       	cpc	r0, r25
    10d0:	08 95       	ret

000010d2 <__fp_pscB>:
    10d2:	00 24       	eor	r0, r0
    10d4:	0a 94       	dec	r0
    10d6:	12 16       	cp	r1, r18
    10d8:	13 06       	cpc	r1, r19
    10da:	14 06       	cpc	r1, r20
    10dc:	05 06       	cpc	r0, r21
    10de:	08 95       	ret

000010e0 <__fp_round>:
    10e0:	09 2e       	mov	r0, r25
    10e2:	03 94       	inc	r0
    10e4:	00 0c       	add	r0, r0
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__fp_round+0xc>
    10e8:	88 23       	and	r24, r24
    10ea:	52 f0       	brmi	.+20     	; 0x1100 <__fp_round+0x20>
    10ec:	bb 0f       	add	r27, r27
    10ee:	40 f4       	brcc	.+16     	; 0x1100 <__fp_round+0x20>
    10f0:	bf 2b       	or	r27, r31
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <__fp_round+0x18>
    10f4:	60 ff       	sbrs	r22, 0
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <__fp_round+0x20>
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	08 95       	ret

00001102 <__fp_split3>:
    1102:	57 fd       	sbrc	r21, 7
    1104:	90 58       	subi	r25, 0x80	; 128
    1106:	44 0f       	add	r20, r20
    1108:	55 1f       	adc	r21, r21
    110a:	59 f0       	breq	.+22     	; 0x1122 <__fp_splitA+0x10>
    110c:	5f 3f       	cpi	r21, 0xFF	; 255
    110e:	71 f0       	breq	.+28     	; 0x112c <__fp_splitA+0x1a>
    1110:	47 95       	ror	r20

00001112 <__fp_splitA>:
    1112:	88 0f       	add	r24, r24
    1114:	97 fb       	bst	r25, 7
    1116:	99 1f       	adc	r25, r25
    1118:	61 f0       	breq	.+24     	; 0x1132 <__fp_splitA+0x20>
    111a:	9f 3f       	cpi	r25, 0xFF	; 255
    111c:	79 f0       	breq	.+30     	; 0x113c <__fp_splitA+0x2a>
    111e:	87 95       	ror	r24
    1120:	08 95       	ret
    1122:	12 16       	cp	r1, r18
    1124:	13 06       	cpc	r1, r19
    1126:	14 06       	cpc	r1, r20
    1128:	55 1f       	adc	r21, r21
    112a:	f2 cf       	rjmp	.-28     	; 0x1110 <__fp_split3+0xe>
    112c:	46 95       	lsr	r20
    112e:	f1 df       	rcall	.-30     	; 0x1112 <__fp_splitA>
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <__fp_splitA+0x30>
    1132:	16 16       	cp	r1, r22
    1134:	17 06       	cpc	r1, r23
    1136:	18 06       	cpc	r1, r24
    1138:	99 1f       	adc	r25, r25
    113a:	f1 cf       	rjmp	.-30     	; 0x111e <__fp_splitA+0xc>
    113c:	86 95       	lsr	r24
    113e:	71 05       	cpc	r23, r1
    1140:	61 05       	cpc	r22, r1
    1142:	08 94       	sec
    1144:	08 95       	ret

00001146 <__fp_zero>:
    1146:	e8 94       	clt

00001148 <__fp_szero>:
    1148:	bb 27       	eor	r27, r27
    114a:	66 27       	eor	r22, r22
    114c:	77 27       	eor	r23, r23
    114e:	cb 01       	movw	r24, r22
    1150:	97 f9       	bld	r25, 7
    1152:	08 95       	ret

00001154 <inverse>:
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	80 e8       	ldi	r24, 0x80	; 128
    115e:	9f e3       	ldi	r25, 0x3F	; 63
    1160:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__divsf3>

00001164 <__mulsf3>:
    1164:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
    1168:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_round>
    116c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscA>
    1170:	38 f0       	brcs	.+14     	; 0x1180 <__mulsf3+0x1c>
    1172:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscB>
    1176:	20 f0       	brcs	.+8      	; 0x1180 <__mulsf3+0x1c>
    1178:	95 23       	and	r25, r21
    117a:	11 f0       	breq	.+4      	; 0x1180 <__mulsf3+0x1c>
    117c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>
    1180:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>
    1184:	11 24       	eor	r1, r1
    1186:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>

0000118a <__mulsf3x>:
    118a:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_split3>
    118e:	70 f3       	brcs	.-36     	; 0x116c <__mulsf3+0x8>

00001190 <__mulsf3_pse>:
    1190:	95 9f       	mul	r25, r21
    1192:	c1 f3       	breq	.-16     	; 0x1184 <__mulsf3+0x20>
    1194:	95 0f       	add	r25, r21
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	55 1f       	adc	r21, r21
    119a:	62 9f       	mul	r22, r18
    119c:	f0 01       	movw	r30, r0
    119e:	72 9f       	mul	r23, r18
    11a0:	bb 27       	eor	r27, r27
    11a2:	f0 0d       	add	r31, r0
    11a4:	b1 1d       	adc	r27, r1
    11a6:	63 9f       	mul	r22, r19
    11a8:	aa 27       	eor	r26, r26
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	aa 1f       	adc	r26, r26
    11b0:	64 9f       	mul	r22, r20
    11b2:	66 27       	eor	r22, r22
    11b4:	b0 0d       	add	r27, r0
    11b6:	a1 1d       	adc	r26, r1
    11b8:	66 1f       	adc	r22, r22
    11ba:	82 9f       	mul	r24, r18
    11bc:	22 27       	eor	r18, r18
    11be:	b0 0d       	add	r27, r0
    11c0:	a1 1d       	adc	r26, r1
    11c2:	62 1f       	adc	r22, r18
    11c4:	73 9f       	mul	r23, r19
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	83 9f       	mul	r24, r19
    11ce:	a0 0d       	add	r26, r0
    11d0:	61 1d       	adc	r22, r1
    11d2:	22 1f       	adc	r18, r18
    11d4:	74 9f       	mul	r23, r20
    11d6:	33 27       	eor	r19, r19
    11d8:	a0 0d       	add	r26, r0
    11da:	61 1d       	adc	r22, r1
    11dc:	23 1f       	adc	r18, r19
    11de:	84 9f       	mul	r24, r20
    11e0:	60 0d       	add	r22, r0
    11e2:	21 1d       	adc	r18, r1
    11e4:	82 2f       	mov	r24, r18
    11e6:	76 2f       	mov	r23, r22
    11e8:	6a 2f       	mov	r22, r26
    11ea:	11 24       	eor	r1, r1
    11ec:	9f 57       	subi	r25, 0x7F	; 127
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	9a f0       	brmi	.+38     	; 0x1218 <__mulsf3_pse+0x88>
    11f2:	f1 f0       	breq	.+60     	; 0x1230 <__mulsf3_pse+0xa0>
    11f4:	88 23       	and	r24, r24
    11f6:	4a f0       	brmi	.+18     	; 0x120a <__mulsf3_pse+0x7a>
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	bb 1f       	adc	r27, r27
    11fe:	66 1f       	adc	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	91 50       	subi	r25, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <__mulsf3_pse+0x64>
    120a:	9e 3f       	cpi	r25, 0xFE	; 254
    120c:	51 05       	cpc	r21, r1
    120e:	80 f0       	brcs	.+32     	; 0x1230 <__mulsf3_pse+0xa0>
    1210:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>
    1214:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>
    1218:	5f 3f       	cpi	r21, 0xFF	; 255
    121a:	e4 f3       	brlt	.-8      	; 0x1214 <__mulsf3_pse+0x84>
    121c:	98 3e       	cpi	r25, 0xE8	; 232
    121e:	d4 f3       	brlt	.-12     	; 0x1214 <__mulsf3_pse+0x84>
    1220:	86 95       	lsr	r24
    1222:	77 95       	ror	r23
    1224:	67 95       	ror	r22
    1226:	b7 95       	ror	r27
    1228:	f7 95       	ror	r31
    122a:	e7 95       	ror	r30
    122c:	9f 5f       	subi	r25, 0xFF	; 255
    122e:	c1 f7       	brne	.-16     	; 0x1220 <__mulsf3_pse+0x90>
    1230:	fe 2b       	or	r31, r30
    1232:	88 0f       	add	r24, r24
    1234:	91 1d       	adc	r25, r1
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	97 f9       	bld	r25, 7
    123c:	08 95       	ret

0000123e <square>:
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__mulsf3>

00001246 <__subsf3>:
    1246:	50 58       	subi	r21, 0x80	; 128

00001248 <__addsf3>:
    1248:	bb 27       	eor	r27, r27
    124a:	aa 27       	eor	r26, r26
    124c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__addsf3x>
    1250:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_round>
    1254:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscA>
    1258:	38 f0       	brcs	.+14     	; 0x1268 <__addsf3+0x20>
    125a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscB>
    125e:	20 f0       	brcs	.+8      	; 0x1268 <__addsf3+0x20>
    1260:	39 f4       	brne	.+14     	; 0x1270 <__addsf3+0x28>
    1262:	9f 3f       	cpi	r25, 0xFF	; 255
    1264:	19 f4       	brne	.+6      	; 0x126c <__addsf3+0x24>
    1266:	26 f4       	brtc	.+8      	; 0x1270 <__addsf3+0x28>
    1268:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>
    126c:	0e f4       	brtc	.+2      	; 0x1270 <__addsf3+0x28>
    126e:	e0 95       	com	r30
    1270:	e7 fb       	bst	r30, 7
    1272:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>

00001276 <__addsf3x>:
    1276:	e9 2f       	mov	r30, r25
    1278:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_split3>
    127c:	58 f3       	brcs	.-42     	; 0x1254 <__addsf3+0xc>
    127e:	ba 17       	cp	r27, r26
    1280:	62 07       	cpc	r22, r18
    1282:	73 07       	cpc	r23, r19
    1284:	84 07       	cpc	r24, r20
    1286:	95 07       	cpc	r25, r21
    1288:	20 f0       	brcs	.+8      	; 0x1292 <__addsf3x+0x1c>
    128a:	79 f4       	brne	.+30     	; 0x12aa <__addsf3x+0x34>
    128c:	a6 f5       	brtc	.+104    	; 0x12f6 <__addsf3x+0x80>
    128e:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_zero>
    1292:	0e f4       	brtc	.+2      	; 0x1296 <__addsf3x+0x20>
    1294:	e0 95       	com	r30
    1296:	0b 2e       	mov	r0, r27
    1298:	ba 2f       	mov	r27, r26
    129a:	a0 2d       	mov	r26, r0
    129c:	0b 01       	movw	r0, r22
    129e:	b9 01       	movw	r22, r18
    12a0:	90 01       	movw	r18, r0
    12a2:	0c 01       	movw	r0, r24
    12a4:	ca 01       	movw	r24, r20
    12a6:	a0 01       	movw	r20, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	ff 27       	eor	r31, r31
    12ac:	59 1b       	sub	r21, r25
    12ae:	99 f0       	breq	.+38     	; 0x12d6 <__addsf3x+0x60>
    12b0:	59 3f       	cpi	r21, 0xF9	; 249
    12b2:	50 f4       	brcc	.+20     	; 0x12c8 <__addsf3x+0x52>
    12b4:	50 3e       	cpi	r21, 0xE0	; 224
    12b6:	68 f1       	brcs	.+90     	; 0x1312 <__addsf3x+0x9c>
    12b8:	1a 16       	cp	r1, r26
    12ba:	f0 40       	sbci	r31, 0x00	; 0
    12bc:	a2 2f       	mov	r26, r18
    12be:	23 2f       	mov	r18, r19
    12c0:	34 2f       	mov	r19, r20
    12c2:	44 27       	eor	r20, r20
    12c4:	58 5f       	subi	r21, 0xF8	; 248
    12c6:	f3 cf       	rjmp	.-26     	; 0x12ae <__addsf3x+0x38>
    12c8:	46 95       	lsr	r20
    12ca:	37 95       	ror	r19
    12cc:	27 95       	ror	r18
    12ce:	a7 95       	ror	r26
    12d0:	f0 40       	sbci	r31, 0x00	; 0
    12d2:	53 95       	inc	r21
    12d4:	c9 f7       	brne	.-14     	; 0x12c8 <__addsf3x+0x52>
    12d6:	7e f4       	brtc	.+30     	; 0x12f6 <__addsf3x+0x80>
    12d8:	1f 16       	cp	r1, r31
    12da:	ba 0b       	sbc	r27, r26
    12dc:	62 0b       	sbc	r22, r18
    12de:	73 0b       	sbc	r23, r19
    12e0:	84 0b       	sbc	r24, r20
    12e2:	ba f0       	brmi	.+46     	; 0x1312 <__addsf3x+0x9c>
    12e4:	91 50       	subi	r25, 0x01	; 1
    12e6:	a1 f0       	breq	.+40     	; 0x1310 <__addsf3x+0x9a>
    12e8:	ff 0f       	add	r31, r31
    12ea:	bb 1f       	adc	r27, r27
    12ec:	66 1f       	adc	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	c2 f7       	brpl	.-16     	; 0x12e4 <__addsf3x+0x6e>
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <__addsf3x+0x9c>
    12f6:	ba 0f       	add	r27, r26
    12f8:	62 1f       	adc	r22, r18
    12fa:	73 1f       	adc	r23, r19
    12fc:	84 1f       	adc	r24, r20
    12fe:	48 f4       	brcc	.+18     	; 0x1312 <__addsf3x+0x9c>
    1300:	87 95       	ror	r24
    1302:	77 95       	ror	r23
    1304:	67 95       	ror	r22
    1306:	b7 95       	ror	r27
    1308:	f7 95       	ror	r31
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	08 f0       	brcs	.+2      	; 0x1310 <__addsf3x+0x9a>
    130e:	b0 cf       	rjmp	.-160    	; 0x1270 <__addsf3+0x28>
    1310:	93 95       	inc	r25
    1312:	88 0f       	add	r24, r24
    1314:	08 f0       	brcs	.+2      	; 0x1318 <__addsf3x+0xa2>
    1316:	99 27       	eor	r25, r25
    1318:	ee 0f       	add	r30, r30
    131a:	97 95       	ror	r25
    131c:	87 95       	ror	r24
    131e:	08 95       	ret

00001320 <__divmodhi4>:
    1320:	97 fb       	bst	r25, 7
    1322:	07 2e       	mov	r0, r23
    1324:	16 f4       	brtc	.+4      	; 0x132a <__divmodhi4+0xa>
    1326:	00 94       	com	r0
    1328:	07 d0       	rcall	.+14     	; 0x1338 <__divmodhi4_neg1>
    132a:	77 fd       	sbrc	r23, 7
    132c:	09 d0       	rcall	.+18     	; 0x1340 <__divmodhi4_neg2>
    132e:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
    1332:	07 fc       	sbrc	r0, 7
    1334:	05 d0       	rcall	.+10     	; 0x1340 <__divmodhi4_neg2>
    1336:	3e f4       	brtc	.+14     	; 0x1346 <__divmodhi4_exit>

00001338 <__divmodhi4_neg1>:
    1338:	90 95       	com	r25
    133a:	81 95       	neg	r24
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	08 95       	ret

00001340 <__divmodhi4_neg2>:
    1340:	70 95       	com	r23
    1342:	61 95       	neg	r22
    1344:	7f 4f       	sbci	r23, 0xFF	; 255

00001346 <__divmodhi4_exit>:
    1346:	08 95       	ret

00001348 <__udivmodhi4>:
    1348:	aa 1b       	sub	r26, r26
    134a:	bb 1b       	sub	r27, r27
    134c:	51 e1       	ldi	r21, 0x11	; 17
    134e:	07 c0       	rjmp	.+14     	; 0x135e <__udivmodhi4_ep>

00001350 <__udivmodhi4_loop>:
    1350:	aa 1f       	adc	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	a6 17       	cp	r26, r22
    1356:	b7 07       	cpc	r27, r23
    1358:	10 f0       	brcs	.+4      	; 0x135e <__udivmodhi4_ep>
    135a:	a6 1b       	sub	r26, r22
    135c:	b7 0b       	sbc	r27, r23

0000135e <__udivmodhi4_ep>:
    135e:	88 1f       	adc	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	5a 95       	dec	r21
    1364:	a9 f7       	brne	.-22     	; 0x1350 <__udivmodhi4_loop>
    1366:	80 95       	com	r24
    1368:	90 95       	com	r25
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	08 95       	ret

00001370 <malloc>:
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	91 05       	cpc	r25, r1
    137c:	10 f4       	brcc	.+4      	; 0x1382 <malloc+0x12>
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <__flp>
    1386:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <__flp+0x1>
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	a0 e0       	ldi	r26, 0x00	; 0
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	30 97       	sbiw	r30, 0x00	; 0
    1394:	19 f1       	breq	.+70     	; 0x13dc <malloc+0x6c>
    1396:	40 81       	ld	r20, Z
    1398:	51 81       	ldd	r21, Z+1	; 0x01
    139a:	02 81       	ldd	r16, Z+2	; 0x02
    139c:	13 81       	ldd	r17, Z+3	; 0x03
    139e:	48 17       	cp	r20, r24
    13a0:	59 07       	cpc	r21, r25
    13a2:	c8 f0       	brcs	.+50     	; 0x13d6 <malloc+0x66>
    13a4:	84 17       	cp	r24, r20
    13a6:	95 07       	cpc	r25, r21
    13a8:	69 f4       	brne	.+26     	; 0x13c4 <malloc+0x54>
    13aa:	10 97       	sbiw	r26, 0x00	; 0
    13ac:	31 f0       	breq	.+12     	; 0x13ba <malloc+0x4a>
    13ae:	12 96       	adiw	r26, 0x02	; 2
    13b0:	0c 93       	st	X, r16
    13b2:	12 97       	sbiw	r26, 0x02	; 2
    13b4:	13 96       	adiw	r26, 0x03	; 3
    13b6:	1c 93       	st	X, r17
    13b8:	27 c0       	rjmp	.+78     	; 0x1408 <malloc+0x98>
    13ba:	00 93 ea 02 	sts	0x02EA, r16	; 0x8002ea <__flp>
    13be:	10 93 eb 02 	sts	0x02EB, r17	; 0x8002eb <__flp+0x1>
    13c2:	22 c0       	rjmp	.+68     	; 0x1408 <malloc+0x98>
    13c4:	21 15       	cp	r18, r1
    13c6:	31 05       	cpc	r19, r1
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <malloc+0x60>
    13ca:	42 17       	cp	r20, r18
    13cc:	53 07       	cpc	r21, r19
    13ce:	18 f4       	brcc	.+6      	; 0x13d6 <malloc+0x66>
    13d0:	9a 01       	movw	r18, r20
    13d2:	bd 01       	movw	r22, r26
    13d4:	ef 01       	movw	r28, r30
    13d6:	df 01       	movw	r26, r30
    13d8:	f8 01       	movw	r30, r16
    13da:	db cf       	rjmp	.-74     	; 0x1392 <malloc+0x22>
    13dc:	21 15       	cp	r18, r1
    13de:	31 05       	cpc	r19, r1
    13e0:	f9 f0       	breq	.+62     	; 0x1420 <malloc+0xb0>
    13e2:	28 1b       	sub	r18, r24
    13e4:	39 0b       	sbc	r19, r25
    13e6:	24 30       	cpi	r18, 0x04	; 4
    13e8:	31 05       	cpc	r19, r1
    13ea:	80 f4       	brcc	.+32     	; 0x140c <malloc+0x9c>
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	61 15       	cp	r22, r1
    13f2:	71 05       	cpc	r23, r1
    13f4:	21 f0       	breq	.+8      	; 0x13fe <malloc+0x8e>
    13f6:	fb 01       	movw	r30, r22
    13f8:	93 83       	std	Z+3, r25	; 0x03
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <malloc+0x96>
    13fe:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <__flp+0x1>
    1402:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__flp>
    1406:	fe 01       	movw	r30, r28
    1408:	32 96       	adiw	r30, 0x02	; 2
    140a:	44 c0       	rjmp	.+136    	; 0x1494 <malloc+0x124>
    140c:	fe 01       	movw	r30, r28
    140e:	e2 0f       	add	r30, r18
    1410:	f3 1f       	adc	r31, r19
    1412:	81 93       	st	Z+, r24
    1414:	91 93       	st	Z+, r25
    1416:	22 50       	subi	r18, 0x02	; 2
    1418:	31 09       	sbc	r19, r1
    141a:	39 83       	std	Y+1, r19	; 0x01
    141c:	28 83       	st	Y, r18
    141e:	3a c0       	rjmp	.+116    	; 0x1494 <malloc+0x124>
    1420:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <__brkval>
    1424:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <__brkval+0x1>
    1428:	23 2b       	or	r18, r19
    142a:	41 f4       	brne	.+16     	; 0x143c <malloc+0xcc>
    142c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1430:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1434:	30 93 e9 02 	sts	0x02E9, r19	; 0x8002e9 <__brkval+0x1>
    1438:	20 93 e8 02 	sts	0x02E8, r18	; 0x8002e8 <__brkval>
    143c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1440:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	41 f4       	brne	.+16     	; 0x145a <malloc+0xea>
    144a:	2d b7       	in	r18, 0x3d	; 61
    144c:	3e b7       	in	r19, 0x3e	; 62
    144e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1452:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1456:	24 1b       	sub	r18, r20
    1458:	35 0b       	sbc	r19, r21
    145a:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <__brkval>
    145e:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <__brkval+0x1>
    1462:	e2 17       	cp	r30, r18
    1464:	f3 07       	cpc	r31, r19
    1466:	a0 f4       	brcc	.+40     	; 0x1490 <malloc+0x120>
    1468:	2e 1b       	sub	r18, r30
    146a:	3f 0b       	sbc	r19, r31
    146c:	28 17       	cp	r18, r24
    146e:	39 07       	cpc	r19, r25
    1470:	78 f0       	brcs	.+30     	; 0x1490 <malloc+0x120>
    1472:	ac 01       	movw	r20, r24
    1474:	4e 5f       	subi	r20, 0xFE	; 254
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	24 17       	cp	r18, r20
    147a:	35 07       	cpc	r19, r21
    147c:	48 f0       	brcs	.+18     	; 0x1490 <malloc+0x120>
    147e:	4e 0f       	add	r20, r30
    1480:	5f 1f       	adc	r21, r31
    1482:	50 93 e9 02 	sts	0x02E9, r21	; 0x8002e9 <__brkval+0x1>
    1486:	40 93 e8 02 	sts	0x02E8, r20	; 0x8002e8 <__brkval>
    148a:	81 93       	st	Z+, r24
    148c:	91 93       	st	Z+, r25
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <malloc+0x124>
    1490:	e0 e0       	ldi	r30, 0x00	; 0
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	cf 01       	movw	r24, r30
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <free>:
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	09 f4       	brne	.+2      	; 0x14aa <free+0xa>
    14a8:	81 c0       	rjmp	.+258    	; 0x15ac <free+0x10c>
    14aa:	fc 01       	movw	r30, r24
    14ac:	32 97       	sbiw	r30, 0x02	; 2
    14ae:	13 82       	std	Z+3, r1	; 0x03
    14b0:	12 82       	std	Z+2, r1	; 0x02
    14b2:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <__flp>
    14b6:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <__flp+0x1>
    14ba:	10 97       	sbiw	r26, 0x00	; 0
    14bc:	81 f4       	brne	.+32     	; 0x14de <free+0x3e>
    14be:	20 81       	ld	r18, Z
    14c0:	31 81       	ldd	r19, Z+1	; 0x01
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <__brkval>
    14ca:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <__brkval+0x1>
    14ce:	28 17       	cp	r18, r24
    14d0:	39 07       	cpc	r19, r25
    14d2:	51 f5       	brne	.+84     	; 0x1528 <free+0x88>
    14d4:	f0 93 e9 02 	sts	0x02E9, r31	; 0x8002e9 <__brkval+0x1>
    14d8:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <__brkval>
    14dc:	67 c0       	rjmp	.+206    	; 0x15ac <free+0x10c>
    14de:	ed 01       	movw	r28, r26
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	ce 17       	cp	r28, r30
    14e6:	df 07       	cpc	r29, r31
    14e8:	40 f4       	brcc	.+16     	; 0x14fa <free+0x5a>
    14ea:	4a 81       	ldd	r20, Y+2	; 0x02
    14ec:	5b 81       	ldd	r21, Y+3	; 0x03
    14ee:	9e 01       	movw	r18, r28
    14f0:	41 15       	cp	r20, r1
    14f2:	51 05       	cpc	r21, r1
    14f4:	f1 f0       	breq	.+60     	; 0x1532 <free+0x92>
    14f6:	ea 01       	movw	r28, r20
    14f8:	f5 cf       	rjmp	.-22     	; 0x14e4 <free+0x44>
    14fa:	d3 83       	std	Z+3, r29	; 0x03
    14fc:	c2 83       	std	Z+2, r28	; 0x02
    14fe:	40 81       	ld	r20, Z
    1500:	51 81       	ldd	r21, Z+1	; 0x01
    1502:	84 0f       	add	r24, r20
    1504:	95 1f       	adc	r25, r21
    1506:	c8 17       	cp	r28, r24
    1508:	d9 07       	cpc	r29, r25
    150a:	59 f4       	brne	.+22     	; 0x1522 <free+0x82>
    150c:	88 81       	ld	r24, Y
    150e:	99 81       	ldd	r25, Y+1	; 0x01
    1510:	84 0f       	add	r24, r20
    1512:	95 1f       	adc	r25, r21
    1514:	02 96       	adiw	r24, 0x02	; 2
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	9b 81       	ldd	r25, Y+3	; 0x03
    151e:	93 83       	std	Z+3, r25	; 0x03
    1520:	82 83       	std	Z+2, r24	; 0x02
    1522:	21 15       	cp	r18, r1
    1524:	31 05       	cpc	r19, r1
    1526:	29 f4       	brne	.+10     	; 0x1532 <free+0x92>
    1528:	f0 93 eb 02 	sts	0x02EB, r31	; 0x8002eb <__flp+0x1>
    152c:	e0 93 ea 02 	sts	0x02EA, r30	; 0x8002ea <__flp>
    1530:	3d c0       	rjmp	.+122    	; 0x15ac <free+0x10c>
    1532:	e9 01       	movw	r28, r18
    1534:	fb 83       	std	Y+3, r31	; 0x03
    1536:	ea 83       	std	Y+2, r30	; 0x02
    1538:	49 91       	ld	r20, Y+
    153a:	59 91       	ld	r21, Y+
    153c:	c4 0f       	add	r28, r20
    153e:	d5 1f       	adc	r29, r21
    1540:	ec 17       	cp	r30, r28
    1542:	fd 07       	cpc	r31, r29
    1544:	61 f4       	brne	.+24     	; 0x155e <free+0xbe>
    1546:	80 81       	ld	r24, Z
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	84 0f       	add	r24, r20
    154c:	95 1f       	adc	r25, r21
    154e:	02 96       	adiw	r24, 0x02	; 2
    1550:	e9 01       	movw	r28, r18
    1552:	99 83       	std	Y+1, r25	; 0x01
    1554:	88 83       	st	Y, r24
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	9b 83       	std	Y+3, r25	; 0x03
    155c:	8a 83       	std	Y+2, r24	; 0x02
    155e:	e0 e0       	ldi	r30, 0x00	; 0
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	12 96       	adiw	r26, 0x02	; 2
    1564:	8d 91       	ld	r24, X+
    1566:	9c 91       	ld	r25, X
    1568:	13 97       	sbiw	r26, 0x03	; 3
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	19 f0       	breq	.+6      	; 0x1574 <free+0xd4>
    156e:	fd 01       	movw	r30, r26
    1570:	dc 01       	movw	r26, r24
    1572:	f7 cf       	rjmp	.-18     	; 0x1562 <free+0xc2>
    1574:	8d 91       	ld	r24, X+
    1576:	9c 91       	ld	r25, X
    1578:	11 97       	sbiw	r26, 0x01	; 1
    157a:	9d 01       	movw	r18, r26
    157c:	2e 5f       	subi	r18, 0xFE	; 254
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
    1580:	82 0f       	add	r24, r18
    1582:	93 1f       	adc	r25, r19
    1584:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <__brkval>
    1588:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <__brkval+0x1>
    158c:	28 17       	cp	r18, r24
    158e:	39 07       	cpc	r19, r25
    1590:	69 f4       	brne	.+26     	; 0x15ac <free+0x10c>
    1592:	30 97       	sbiw	r30, 0x00	; 0
    1594:	29 f4       	brne	.+10     	; 0x15a0 <free+0x100>
    1596:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <__flp+0x1>
    159a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <__flp>
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <free+0x104>
    15a0:	13 82       	std	Z+3, r1	; 0x03
    15a2:	12 82       	std	Z+2, r1	; 0x02
    15a4:	b0 93 e9 02 	sts	0x02E9, r27	; 0x8002e9 <__brkval+0x1>
    15a8:	a0 93 e8 02 	sts	0x02E8, r26	; 0x8002e8 <__brkval>
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <do_rand>:
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	ec 01       	movw	r28, r24
    15c8:	68 81       	ld	r22, Y
    15ca:	79 81       	ldd	r23, Y+1	; 0x01
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	9b 81       	ldd	r25, Y+3	; 0x03
    15d0:	61 15       	cp	r22, r1
    15d2:	71 05       	cpc	r23, r1
    15d4:	81 05       	cpc	r24, r1
    15d6:	91 05       	cpc	r25, r1
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <do_rand+0x30>
    15da:	64 e2       	ldi	r22, 0x24	; 36
    15dc:	79 ed       	ldi	r23, 0xD9	; 217
    15de:	8b e5       	ldi	r24, 0x5B	; 91
    15e0:	97 e0       	ldi	r25, 0x07	; 7
    15e2:	2d e1       	ldi	r18, 0x1D	; 29
    15e4:	33 ef       	ldi	r19, 0xF3	; 243
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__divmodsi4>
    15ee:	49 01       	movw	r8, r18
    15f0:	5a 01       	movw	r10, r20
    15f2:	9b 01       	movw	r18, r22
    15f4:	ac 01       	movw	r20, r24
    15f6:	a7 ea       	ldi	r26, 0xA7	; 167
    15f8:	b1 e4       	ldi	r27, 0x41	; 65
    15fa:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__muluhisi3>
    15fe:	6b 01       	movw	r12, r22
    1600:	7c 01       	movw	r14, r24
    1602:	ac ee       	ldi	r26, 0xEC	; 236
    1604:	b4 ef       	ldi	r27, 0xF4	; 244
    1606:	a5 01       	movw	r20, r10
    1608:	94 01       	movw	r18, r8
    160a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__mulohisi3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8c 0d       	add	r24, r12
    1614:	9d 1d       	adc	r25, r13
    1616:	ae 1d       	adc	r26, r14
    1618:	bf 1d       	adc	r27, r15
    161a:	b7 ff       	sbrs	r27, 7
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <do_rand+0x72>
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	a1 09       	sbc	r26, r1
    1622:	b0 48       	sbci	r27, 0x80	; 128
    1624:	88 83       	st	Y, r24
    1626:	99 83       	std	Y+1, r25	; 0x01
    1628:	aa 83       	std	Y+2, r26	; 0x02
    162a:	bb 83       	std	Y+3, r27	; 0x03
    162c:	9f 77       	andi	r25, 0x7F	; 127
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	08 95       	ret

00001644 <rand_r>:
    1644:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <do_rand>
    1648:	08 95       	ret

0000164a <rand>:
    164a:	86 e0       	ldi	r24, 0x06	; 6
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <do_rand>
    1652:	08 95       	ret

00001654 <srand>:
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    165c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1660:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1664:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1668:	08 95       	ret

0000166a <strcpy>:
    166a:	fb 01       	movw	r30, r22
    166c:	dc 01       	movw	r26, r24
    166e:	01 90       	ld	r0, Z+
    1670:	0d 92       	st	X+, r0
    1672:	00 20       	and	r0, r0
    1674:	e1 f7       	brne	.-8      	; 0x166e <strcpy+0x4>
    1676:	08 95       	ret

00001678 <fdevopen>:
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	31 f4       	brne	.+12     	; 0x1690 <fdevopen+0x18>
    1684:	61 15       	cp	r22, r1
    1686:	71 05       	cpc	r23, r1
    1688:	19 f4       	brne	.+6      	; 0x1690 <fdevopen+0x18>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	3a c0       	rjmp	.+116    	; 0x1704 <fdevopen+0x8c>
    1690:	8b 01       	movw	r16, r22
    1692:	ec 01       	movw	r28, r24
    1694:	6e e0       	ldi	r22, 0x0E	; 14
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <calloc>
    16a0:	fc 01       	movw	r30, r24
    16a2:	89 2b       	or	r24, r25
    16a4:	91 f3       	breq	.-28     	; 0x168a <fdevopen+0x12>
    16a6:	80 e8       	ldi	r24, 0x80	; 128
    16a8:	83 83       	std	Z+3, r24	; 0x03
    16aa:	01 15       	cp	r16, r1
    16ac:	11 05       	cpc	r17, r1
    16ae:	71 f0       	breq	.+28     	; 0x16cc <fdevopen+0x54>
    16b0:	13 87       	std	Z+11, r17	; 0x0b
    16b2:	02 87       	std	Z+10, r16	; 0x0a
    16b4:	81 e8       	ldi	r24, 0x81	; 129
    16b6:	83 83       	std	Z+3, r24	; 0x03
    16b8:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <__iob>
    16bc:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <__iob+0x1>
    16c0:	89 2b       	or	r24, r25
    16c2:	21 f4       	brne	.+8      	; 0x16cc <fdevopen+0x54>
    16c4:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <__iob+0x1>
    16c8:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <__iob>
    16cc:	20 97       	sbiw	r28, 0x00	; 0
    16ce:	c9 f0       	breq	.+50     	; 0x1702 <fdevopen+0x8a>
    16d0:	d1 87       	std	Z+9, r29	; 0x09
    16d2:	c0 87       	std	Z+8, r28	; 0x08
    16d4:	83 81       	ldd	r24, Z+3	; 0x03
    16d6:	82 60       	ori	r24, 0x02	; 2
    16d8:	83 83       	std	Z+3, r24	; 0x03
    16da:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <__iob+0x2>
    16de:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <__iob+0x3>
    16e2:	89 2b       	or	r24, r25
    16e4:	71 f4       	brne	.+28     	; 0x1702 <fdevopen+0x8a>
    16e6:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <__iob+0x3>
    16ea:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <__iob+0x2>
    16ee:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <__iob+0x4>
    16f2:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <__iob+0x5>
    16f6:	89 2b       	or	r24, r25
    16f8:	21 f4       	brne	.+8      	; 0x1702 <fdevopen+0x8a>
    16fa:	f0 93 f1 02 	sts	0x02F1, r31	; 0x8002f1 <__iob+0x5>
    16fe:	e0 93 f0 02 	sts	0x02F0, r30	; 0x8002f0 <__iob+0x4>
    1702:	cf 01       	movw	r24, r30
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	08 95       	ret

0000170e <printf>:
    170e:	a0 e0       	ldi	r26, 0x00	; 0
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	ed e8       	ldi	r30, 0x8D	; 141
    1714:	fb e0       	ldi	r31, 0x0B	; 11
    1716:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__prologue_saves__+0x20>
    171a:	ae 01       	movw	r20, r28
    171c:	4b 5f       	subi	r20, 0xFB	; 251
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	fa 01       	movw	r30, r20
    1722:	61 91       	ld	r22, Z+
    1724:	71 91       	ld	r23, Z+
    1726:	af 01       	movw	r20, r30
    1728:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <__iob+0x2>
    172c:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <__iob+0x3>
    1730:	0e 94 9d 0b 	call	0x173a	; 0x173a <vfprintf>
    1734:	e2 e0       	ldi	r30, 0x02	; 2
    1736:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__epilogue_restores__+0x20>

0000173a <vfprintf>:
    173a:	ab e0       	ldi	r26, 0x0B	; 11
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 ea       	ldi	r30, 0xA3	; 163
    1740:	fb e0       	ldi	r31, 0x0B	; 11
    1742:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__prologue_saves__>
    1746:	6c 01       	movw	r12, r24
    1748:	7b 01       	movw	r14, r22
    174a:	8a 01       	movw	r16, r20
    174c:	fc 01       	movw	r30, r24
    174e:	17 82       	std	Z+7, r1	; 0x07
    1750:	16 82       	std	Z+6, r1	; 0x06
    1752:	83 81       	ldd	r24, Z+3	; 0x03
    1754:	81 ff       	sbrs	r24, 1
    1756:	cc c1       	rjmp	.+920    	; 0x1af0 <vfprintf+0x3b6>
    1758:	ce 01       	movw	r24, r28
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	3c 01       	movw	r6, r24
    175e:	f6 01       	movw	r30, r12
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	f7 01       	movw	r30, r14
    1764:	93 fd       	sbrc	r25, 3
    1766:	85 91       	lpm	r24, Z+
    1768:	93 ff       	sbrs	r25, 3
    176a:	81 91       	ld	r24, Z+
    176c:	7f 01       	movw	r14, r30
    176e:	88 23       	and	r24, r24
    1770:	09 f4       	brne	.+2      	; 0x1774 <vfprintf+0x3a>
    1772:	ba c1       	rjmp	.+884    	; 0x1ae8 <vfprintf+0x3ae>
    1774:	85 32       	cpi	r24, 0x25	; 37
    1776:	39 f4       	brne	.+14     	; 0x1786 <vfprintf+0x4c>
    1778:	93 fd       	sbrc	r25, 3
    177a:	85 91       	lpm	r24, Z+
    177c:	93 ff       	sbrs	r25, 3
    177e:	81 91       	ld	r24, Z+
    1780:	7f 01       	movw	r14, r30
    1782:	85 32       	cpi	r24, 0x25	; 37
    1784:	29 f4       	brne	.+10     	; 0x1790 <vfprintf+0x56>
    1786:	b6 01       	movw	r22, r12
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    178e:	e7 cf       	rjmp	.-50     	; 0x175e <vfprintf+0x24>
    1790:	91 2c       	mov	r9, r1
    1792:	21 2c       	mov	r2, r1
    1794:	31 2c       	mov	r3, r1
    1796:	ff e1       	ldi	r31, 0x1F	; 31
    1798:	f3 15       	cp	r31, r3
    179a:	d8 f0       	brcs	.+54     	; 0x17d2 <vfprintf+0x98>
    179c:	8b 32       	cpi	r24, 0x2B	; 43
    179e:	79 f0       	breq	.+30     	; 0x17be <vfprintf+0x84>
    17a0:	38 f4       	brcc	.+14     	; 0x17b0 <vfprintf+0x76>
    17a2:	80 32       	cpi	r24, 0x20	; 32
    17a4:	79 f0       	breq	.+30     	; 0x17c4 <vfprintf+0x8a>
    17a6:	83 32       	cpi	r24, 0x23	; 35
    17a8:	a1 f4       	brne	.+40     	; 0x17d2 <vfprintf+0x98>
    17aa:	23 2d       	mov	r18, r3
    17ac:	20 61       	ori	r18, 0x10	; 16
    17ae:	1d c0       	rjmp	.+58     	; 0x17ea <vfprintf+0xb0>
    17b0:	8d 32       	cpi	r24, 0x2D	; 45
    17b2:	61 f0       	breq	.+24     	; 0x17cc <vfprintf+0x92>
    17b4:	80 33       	cpi	r24, 0x30	; 48
    17b6:	69 f4       	brne	.+26     	; 0x17d2 <vfprintf+0x98>
    17b8:	23 2d       	mov	r18, r3
    17ba:	21 60       	ori	r18, 0x01	; 1
    17bc:	16 c0       	rjmp	.+44     	; 0x17ea <vfprintf+0xb0>
    17be:	83 2d       	mov	r24, r3
    17c0:	82 60       	ori	r24, 0x02	; 2
    17c2:	38 2e       	mov	r3, r24
    17c4:	e3 2d       	mov	r30, r3
    17c6:	e4 60       	ori	r30, 0x04	; 4
    17c8:	3e 2e       	mov	r3, r30
    17ca:	2a c0       	rjmp	.+84     	; 0x1820 <vfprintf+0xe6>
    17cc:	f3 2d       	mov	r31, r3
    17ce:	f8 60       	ori	r31, 0x08	; 8
    17d0:	1d c0       	rjmp	.+58     	; 0x180c <vfprintf+0xd2>
    17d2:	37 fc       	sbrc	r3, 7
    17d4:	2d c0       	rjmp	.+90     	; 0x1830 <vfprintf+0xf6>
    17d6:	20 ed       	ldi	r18, 0xD0	; 208
    17d8:	28 0f       	add	r18, r24
    17da:	2a 30       	cpi	r18, 0x0A	; 10
    17dc:	40 f0       	brcs	.+16     	; 0x17ee <vfprintf+0xb4>
    17de:	8e 32       	cpi	r24, 0x2E	; 46
    17e0:	b9 f4       	brne	.+46     	; 0x1810 <vfprintf+0xd6>
    17e2:	36 fc       	sbrc	r3, 6
    17e4:	81 c1       	rjmp	.+770    	; 0x1ae8 <vfprintf+0x3ae>
    17e6:	23 2d       	mov	r18, r3
    17e8:	20 64       	ori	r18, 0x40	; 64
    17ea:	32 2e       	mov	r3, r18
    17ec:	19 c0       	rjmp	.+50     	; 0x1820 <vfprintf+0xe6>
    17ee:	36 fe       	sbrs	r3, 6
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <vfprintf+0xc4>
    17f2:	8a e0       	ldi	r24, 0x0A	; 10
    17f4:	98 9e       	mul	r9, r24
    17f6:	20 0d       	add	r18, r0
    17f8:	11 24       	eor	r1, r1
    17fa:	92 2e       	mov	r9, r18
    17fc:	11 c0       	rjmp	.+34     	; 0x1820 <vfprintf+0xe6>
    17fe:	ea e0       	ldi	r30, 0x0A	; 10
    1800:	2e 9e       	mul	r2, r30
    1802:	20 0d       	add	r18, r0
    1804:	11 24       	eor	r1, r1
    1806:	22 2e       	mov	r2, r18
    1808:	f3 2d       	mov	r31, r3
    180a:	f0 62       	ori	r31, 0x20	; 32
    180c:	3f 2e       	mov	r3, r31
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <vfprintf+0xe6>
    1810:	8c 36       	cpi	r24, 0x6C	; 108
    1812:	21 f4       	brne	.+8      	; 0x181c <vfprintf+0xe2>
    1814:	83 2d       	mov	r24, r3
    1816:	80 68       	ori	r24, 0x80	; 128
    1818:	38 2e       	mov	r3, r24
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <vfprintf+0xe6>
    181c:	88 36       	cpi	r24, 0x68	; 104
    181e:	41 f4       	brne	.+16     	; 0x1830 <vfprintf+0xf6>
    1820:	f7 01       	movw	r30, r14
    1822:	93 fd       	sbrc	r25, 3
    1824:	85 91       	lpm	r24, Z+
    1826:	93 ff       	sbrs	r25, 3
    1828:	81 91       	ld	r24, Z+
    182a:	7f 01       	movw	r14, r30
    182c:	81 11       	cpse	r24, r1
    182e:	b3 cf       	rjmp	.-154    	; 0x1796 <vfprintf+0x5c>
    1830:	98 2f       	mov	r25, r24
    1832:	9f 7d       	andi	r25, 0xDF	; 223
    1834:	95 54       	subi	r25, 0x45	; 69
    1836:	93 30       	cpi	r25, 0x03	; 3
    1838:	28 f4       	brcc	.+10     	; 0x1844 <vfprintf+0x10a>
    183a:	0c 5f       	subi	r16, 0xFC	; 252
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	9f e3       	ldi	r25, 0x3F	; 63
    1840:	99 83       	std	Y+1, r25	; 0x01
    1842:	0d c0       	rjmp	.+26     	; 0x185e <vfprintf+0x124>
    1844:	83 36       	cpi	r24, 0x63	; 99
    1846:	31 f0       	breq	.+12     	; 0x1854 <vfprintf+0x11a>
    1848:	83 37       	cpi	r24, 0x73	; 115
    184a:	71 f0       	breq	.+28     	; 0x1868 <vfprintf+0x12e>
    184c:	83 35       	cpi	r24, 0x53	; 83
    184e:	09 f0       	breq	.+2      	; 0x1852 <vfprintf+0x118>
    1850:	59 c0       	rjmp	.+178    	; 0x1904 <vfprintf+0x1ca>
    1852:	21 c0       	rjmp	.+66     	; 0x1896 <vfprintf+0x15c>
    1854:	f8 01       	movw	r30, r16
    1856:	80 81       	ld	r24, Z
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	0e 5f       	subi	r16, 0xFE	; 254
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	88 24       	eor	r8, r8
    1860:	83 94       	inc	r8
    1862:	91 2c       	mov	r9, r1
    1864:	53 01       	movw	r10, r6
    1866:	13 c0       	rjmp	.+38     	; 0x188e <vfprintf+0x154>
    1868:	28 01       	movw	r4, r16
    186a:	f2 e0       	ldi	r31, 0x02	; 2
    186c:	4f 0e       	add	r4, r31
    186e:	51 1c       	adc	r5, r1
    1870:	f8 01       	movw	r30, r16
    1872:	a0 80       	ld	r10, Z
    1874:	b1 80       	ldd	r11, Z+1	; 0x01
    1876:	36 fe       	sbrs	r3, 6
    1878:	03 c0       	rjmp	.+6      	; 0x1880 <vfprintf+0x146>
    187a:	69 2d       	mov	r22, r9
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <vfprintf+0x14a>
    1880:	6f ef       	ldi	r22, 0xFF	; 255
    1882:	7f ef       	ldi	r23, 0xFF	; 255
    1884:	c5 01       	movw	r24, r10
    1886:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <strnlen>
    188a:	4c 01       	movw	r8, r24
    188c:	82 01       	movw	r16, r4
    188e:	f3 2d       	mov	r31, r3
    1890:	ff 77       	andi	r31, 0x7F	; 127
    1892:	3f 2e       	mov	r3, r31
    1894:	16 c0       	rjmp	.+44     	; 0x18c2 <vfprintf+0x188>
    1896:	28 01       	movw	r4, r16
    1898:	22 e0       	ldi	r18, 0x02	; 2
    189a:	42 0e       	add	r4, r18
    189c:	51 1c       	adc	r5, r1
    189e:	f8 01       	movw	r30, r16
    18a0:	a0 80       	ld	r10, Z
    18a2:	b1 80       	ldd	r11, Z+1	; 0x01
    18a4:	36 fe       	sbrs	r3, 6
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <vfprintf+0x174>
    18a8:	69 2d       	mov	r22, r9
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <vfprintf+0x178>
    18ae:	6f ef       	ldi	r22, 0xFF	; 255
    18b0:	7f ef       	ldi	r23, 0xFF	; 255
    18b2:	c5 01       	movw	r24, r10
    18b4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <strnlen_P>
    18b8:	4c 01       	movw	r8, r24
    18ba:	f3 2d       	mov	r31, r3
    18bc:	f0 68       	ori	r31, 0x80	; 128
    18be:	3f 2e       	mov	r3, r31
    18c0:	82 01       	movw	r16, r4
    18c2:	33 fc       	sbrc	r3, 3
    18c4:	1b c0       	rjmp	.+54     	; 0x18fc <vfprintf+0x1c2>
    18c6:	82 2d       	mov	r24, r2
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	88 16       	cp	r8, r24
    18cc:	99 06       	cpc	r9, r25
    18ce:	b0 f4       	brcc	.+44     	; 0x18fc <vfprintf+0x1c2>
    18d0:	b6 01       	movw	r22, r12
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    18da:	2a 94       	dec	r2
    18dc:	f4 cf       	rjmp	.-24     	; 0x18c6 <vfprintf+0x18c>
    18de:	f5 01       	movw	r30, r10
    18e0:	37 fc       	sbrc	r3, 7
    18e2:	85 91       	lpm	r24, Z+
    18e4:	37 fe       	sbrs	r3, 7
    18e6:	81 91       	ld	r24, Z+
    18e8:	5f 01       	movw	r10, r30
    18ea:	b6 01       	movw	r22, r12
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    18f2:	21 10       	cpse	r2, r1
    18f4:	2a 94       	dec	r2
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	82 1a       	sub	r8, r18
    18fa:	91 08       	sbc	r9, r1
    18fc:	81 14       	cp	r8, r1
    18fe:	91 04       	cpc	r9, r1
    1900:	71 f7       	brne	.-36     	; 0x18de <vfprintf+0x1a4>
    1902:	e8 c0       	rjmp	.+464    	; 0x1ad4 <vfprintf+0x39a>
    1904:	84 36       	cpi	r24, 0x64	; 100
    1906:	11 f0       	breq	.+4      	; 0x190c <vfprintf+0x1d2>
    1908:	89 36       	cpi	r24, 0x69	; 105
    190a:	41 f5       	brne	.+80     	; 0x195c <vfprintf+0x222>
    190c:	f8 01       	movw	r30, r16
    190e:	37 fe       	sbrs	r3, 7
    1910:	07 c0       	rjmp	.+14     	; 0x1920 <vfprintf+0x1e6>
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	0c 5f       	subi	r16, 0xFC	; 252
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <vfprintf+0x1f6>
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	07 2e       	mov	r0, r23
    1926:	00 0c       	add	r0, r0
    1928:	88 0b       	sbc	r24, r24
    192a:	99 0b       	sbc	r25, r25
    192c:	0e 5f       	subi	r16, 0xFE	; 254
    192e:	1f 4f       	sbci	r17, 0xFF	; 255
    1930:	f3 2d       	mov	r31, r3
    1932:	ff 76       	andi	r31, 0x6F	; 111
    1934:	3f 2e       	mov	r3, r31
    1936:	97 ff       	sbrs	r25, 7
    1938:	09 c0       	rjmp	.+18     	; 0x194c <vfprintf+0x212>
    193a:	90 95       	com	r25
    193c:	80 95       	com	r24
    193e:	70 95       	com	r23
    1940:	61 95       	neg	r22
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	8f 4f       	sbci	r24, 0xFF	; 255
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	f0 68       	ori	r31, 0x80	; 128
    194a:	3f 2e       	mov	r3, r31
    194c:	2a e0       	ldi	r18, 0x0A	; 10
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	a3 01       	movw	r20, r6
    1952:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ultoa_invert>
    1956:	88 2e       	mov	r8, r24
    1958:	86 18       	sub	r8, r6
    195a:	45 c0       	rjmp	.+138    	; 0x19e6 <vfprintf+0x2ac>
    195c:	85 37       	cpi	r24, 0x75	; 117
    195e:	31 f4       	brne	.+12     	; 0x196c <vfprintf+0x232>
    1960:	23 2d       	mov	r18, r3
    1962:	2f 7e       	andi	r18, 0xEF	; 239
    1964:	b2 2e       	mov	r11, r18
    1966:	2a e0       	ldi	r18, 0x0A	; 10
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	25 c0       	rjmp	.+74     	; 0x19b6 <vfprintf+0x27c>
    196c:	93 2d       	mov	r25, r3
    196e:	99 7f       	andi	r25, 0xF9	; 249
    1970:	b9 2e       	mov	r11, r25
    1972:	8f 36       	cpi	r24, 0x6F	; 111
    1974:	c1 f0       	breq	.+48     	; 0x19a6 <vfprintf+0x26c>
    1976:	18 f4       	brcc	.+6      	; 0x197e <vfprintf+0x244>
    1978:	88 35       	cpi	r24, 0x58	; 88
    197a:	79 f0       	breq	.+30     	; 0x199a <vfprintf+0x260>
    197c:	b5 c0       	rjmp	.+362    	; 0x1ae8 <vfprintf+0x3ae>
    197e:	80 37       	cpi	r24, 0x70	; 112
    1980:	19 f0       	breq	.+6      	; 0x1988 <vfprintf+0x24e>
    1982:	88 37       	cpi	r24, 0x78	; 120
    1984:	21 f0       	breq	.+8      	; 0x198e <vfprintf+0x254>
    1986:	b0 c0       	rjmp	.+352    	; 0x1ae8 <vfprintf+0x3ae>
    1988:	e9 2f       	mov	r30, r25
    198a:	e0 61       	ori	r30, 0x10	; 16
    198c:	be 2e       	mov	r11, r30
    198e:	b4 fe       	sbrs	r11, 4
    1990:	0d c0       	rjmp	.+26     	; 0x19ac <vfprintf+0x272>
    1992:	fb 2d       	mov	r31, r11
    1994:	f4 60       	ori	r31, 0x04	; 4
    1996:	bf 2e       	mov	r11, r31
    1998:	09 c0       	rjmp	.+18     	; 0x19ac <vfprintf+0x272>
    199a:	34 fe       	sbrs	r3, 4
    199c:	0a c0       	rjmp	.+20     	; 0x19b2 <vfprintf+0x278>
    199e:	29 2f       	mov	r18, r25
    19a0:	26 60       	ori	r18, 0x06	; 6
    19a2:	b2 2e       	mov	r11, r18
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <vfprintf+0x278>
    19a6:	28 e0       	ldi	r18, 0x08	; 8
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	05 c0       	rjmp	.+10     	; 0x19b6 <vfprintf+0x27c>
    19ac:	20 e1       	ldi	r18, 0x10	; 16
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <vfprintf+0x27c>
    19b2:	20 e1       	ldi	r18, 0x10	; 16
    19b4:	32 e0       	ldi	r19, 0x02	; 2
    19b6:	f8 01       	movw	r30, r16
    19b8:	b7 fe       	sbrs	r11, 7
    19ba:	07 c0       	rjmp	.+14     	; 0x19ca <vfprintf+0x290>
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	0c 5f       	subi	r16, 0xFC	; 252
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	06 c0       	rjmp	.+12     	; 0x19d6 <vfprintf+0x29c>
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 5f       	subi	r16, 0xFE	; 254
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	a3 01       	movw	r20, r6
    19d8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ultoa_invert>
    19dc:	88 2e       	mov	r8, r24
    19de:	86 18       	sub	r8, r6
    19e0:	fb 2d       	mov	r31, r11
    19e2:	ff 77       	andi	r31, 0x7F	; 127
    19e4:	3f 2e       	mov	r3, r31
    19e6:	36 fe       	sbrs	r3, 6
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <vfprintf+0x2ca>
    19ea:	23 2d       	mov	r18, r3
    19ec:	2e 7f       	andi	r18, 0xFE	; 254
    19ee:	a2 2e       	mov	r10, r18
    19f0:	89 14       	cp	r8, r9
    19f2:	58 f4       	brcc	.+22     	; 0x1a0a <vfprintf+0x2d0>
    19f4:	34 fe       	sbrs	r3, 4
    19f6:	0b c0       	rjmp	.+22     	; 0x1a0e <vfprintf+0x2d4>
    19f8:	32 fc       	sbrc	r3, 2
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <vfprintf+0x2d4>
    19fc:	83 2d       	mov	r24, r3
    19fe:	8e 7e       	andi	r24, 0xEE	; 238
    1a00:	a8 2e       	mov	r10, r24
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <vfprintf+0x2d4>
    1a04:	b8 2c       	mov	r11, r8
    1a06:	a3 2c       	mov	r10, r3
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <vfprintf+0x2d6>
    1a0a:	b8 2c       	mov	r11, r8
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <vfprintf+0x2d6>
    1a0e:	b9 2c       	mov	r11, r9
    1a10:	a4 fe       	sbrs	r10, 4
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <vfprintf+0x2f8>
    1a14:	fe 01       	movw	r30, r28
    1a16:	e8 0d       	add	r30, r8
    1a18:	f1 1d       	adc	r31, r1
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 33       	cpi	r24, 0x30	; 48
    1a1e:	21 f4       	brne	.+8      	; 0x1a28 <vfprintf+0x2ee>
    1a20:	9a 2d       	mov	r25, r10
    1a22:	99 7e       	andi	r25, 0xE9	; 233
    1a24:	a9 2e       	mov	r10, r25
    1a26:	09 c0       	rjmp	.+18     	; 0x1a3a <vfprintf+0x300>
    1a28:	a2 fe       	sbrs	r10, 2
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <vfprintf+0x2fe>
    1a2c:	b3 94       	inc	r11
    1a2e:	b3 94       	inc	r11
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <vfprintf+0x300>
    1a32:	8a 2d       	mov	r24, r10
    1a34:	86 78       	andi	r24, 0x86	; 134
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <vfprintf+0x300>
    1a38:	b3 94       	inc	r11
    1a3a:	a3 fc       	sbrc	r10, 3
    1a3c:	11 c0       	rjmp	.+34     	; 0x1a60 <vfprintf+0x326>
    1a3e:	a0 fe       	sbrs	r10, 0
    1a40:	06 c0       	rjmp	.+12     	; 0x1a4e <vfprintf+0x314>
    1a42:	b2 14       	cp	r11, r2
    1a44:	88 f4       	brcc	.+34     	; 0x1a68 <vfprintf+0x32e>
    1a46:	28 0c       	add	r2, r8
    1a48:	92 2c       	mov	r9, r2
    1a4a:	9b 18       	sub	r9, r11
    1a4c:	0e c0       	rjmp	.+28     	; 0x1a6a <vfprintf+0x330>
    1a4e:	b2 14       	cp	r11, r2
    1a50:	60 f4       	brcc	.+24     	; 0x1a6a <vfprintf+0x330>
    1a52:	b6 01       	movw	r22, r12
    1a54:	80 e2       	ldi	r24, 0x20	; 32
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    1a5c:	b3 94       	inc	r11
    1a5e:	f7 cf       	rjmp	.-18     	; 0x1a4e <vfprintf+0x314>
    1a60:	b2 14       	cp	r11, r2
    1a62:	18 f4       	brcc	.+6      	; 0x1a6a <vfprintf+0x330>
    1a64:	2b 18       	sub	r2, r11
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <vfprintf+0x332>
    1a68:	98 2c       	mov	r9, r8
    1a6a:	21 2c       	mov	r2, r1
    1a6c:	a4 fe       	sbrs	r10, 4
    1a6e:	10 c0       	rjmp	.+32     	; 0x1a90 <vfprintf+0x356>
    1a70:	b6 01       	movw	r22, r12
    1a72:	80 e3       	ldi	r24, 0x30	; 48
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    1a7a:	a2 fe       	sbrs	r10, 2
    1a7c:	17 c0       	rjmp	.+46     	; 0x1aac <vfprintf+0x372>
    1a7e:	a1 fc       	sbrc	r10, 1
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <vfprintf+0x34e>
    1a82:	88 e7       	ldi	r24, 0x78	; 120
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <vfprintf+0x352>
    1a88:	88 e5       	ldi	r24, 0x58	; 88
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	b6 01       	movw	r22, r12
    1a8e:	0c c0       	rjmp	.+24     	; 0x1aa8 <vfprintf+0x36e>
    1a90:	8a 2d       	mov	r24, r10
    1a92:	86 78       	andi	r24, 0x86	; 134
    1a94:	59 f0       	breq	.+22     	; 0x1aac <vfprintf+0x372>
    1a96:	a1 fe       	sbrs	r10, 1
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <vfprintf+0x364>
    1a9a:	8b e2       	ldi	r24, 0x2B	; 43
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <vfprintf+0x366>
    1a9e:	80 e2       	ldi	r24, 0x20	; 32
    1aa0:	a7 fc       	sbrc	r10, 7
    1aa2:	8d e2       	ldi	r24, 0x2D	; 45
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    1aac:	89 14       	cp	r8, r9
    1aae:	38 f4       	brcc	.+14     	; 0x1abe <vfprintf+0x384>
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	80 e3       	ldi	r24, 0x30	; 48
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    1aba:	9a 94       	dec	r9
    1abc:	f7 cf       	rjmp	.-18     	; 0x1aac <vfprintf+0x372>
    1abe:	8a 94       	dec	r8
    1ac0:	f3 01       	movw	r30, r6
    1ac2:	e8 0d       	add	r30, r8
    1ac4:	f1 1d       	adc	r31, r1
    1ac6:	80 81       	ld	r24, Z
    1ac8:	b6 01       	movw	r22, r12
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    1ad0:	81 10       	cpse	r8, r1
    1ad2:	f5 cf       	rjmp	.-22     	; 0x1abe <vfprintf+0x384>
    1ad4:	22 20       	and	r2, r2
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <vfprintf+0x3a0>
    1ad8:	42 ce       	rjmp	.-892    	; 0x175e <vfprintf+0x24>
    1ada:	b6 01       	movw	r22, r12
    1adc:	80 e2       	ldi	r24, 0x20	; 32
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <fputc>
    1ae4:	2a 94       	dec	r2
    1ae6:	f6 cf       	rjmp	.-20     	; 0x1ad4 <vfprintf+0x39a>
    1ae8:	f6 01       	movw	r30, r12
    1aea:	86 81       	ldd	r24, Z+6	; 0x06
    1aec:	97 81       	ldd	r25, Z+7	; 0x07
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <vfprintf+0x3ba>
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	2b 96       	adiw	r28, 0x0b	; 11
    1af6:	e2 e1       	ldi	r30, 0x12	; 18
    1af8:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__epilogue_restores__>

00001afc <calloc>:
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	86 9f       	mul	r24, r22
    1b06:	80 01       	movw	r16, r0
    1b08:	87 9f       	mul	r24, r23
    1b0a:	10 0d       	add	r17, r0
    1b0c:	96 9f       	mul	r25, r22
    1b0e:	10 0d       	add	r17, r0
    1b10:	11 24       	eor	r1, r1
    1b12:	c8 01       	movw	r24, r16
    1b14:	0e 94 b8 09 	call	0x1370	; 0x1370 <malloc>
    1b18:	ec 01       	movw	r28, r24
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	29 f0       	breq	.+10     	; 0x1b28 <calloc+0x2c>
    1b1e:	a8 01       	movw	r20, r16
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <memset>
    1b28:	ce 01       	movw	r24, r28
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <strnlen_P>:
    1b34:	fc 01       	movw	r30, r24
    1b36:	05 90       	lpm	r0, Z+
    1b38:	61 50       	subi	r22, 0x01	; 1
    1b3a:	70 40       	sbci	r23, 0x00	; 0
    1b3c:	01 10       	cpse	r0, r1
    1b3e:	d8 f7       	brcc	.-10     	; 0x1b36 <strnlen_P+0x2>
    1b40:	80 95       	com	r24
    1b42:	90 95       	com	r25
    1b44:	8e 0f       	add	r24, r30
    1b46:	9f 1f       	adc	r25, r31
    1b48:	08 95       	ret

00001b4a <memset>:
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <memset+0x6>
    1b4e:	6d 93       	st	X+, r22
    1b50:	41 50       	subi	r20, 0x01	; 1
    1b52:	50 40       	sbci	r21, 0x00	; 0
    1b54:	e0 f7       	brcc	.-8      	; 0x1b4e <memset+0x4>
    1b56:	08 95       	ret

00001b58 <strnlen>:
    1b58:	fc 01       	movw	r30, r24
    1b5a:	61 50       	subi	r22, 0x01	; 1
    1b5c:	70 40       	sbci	r23, 0x00	; 0
    1b5e:	01 90       	ld	r0, Z+
    1b60:	01 10       	cpse	r0, r1
    1b62:	d8 f7       	brcc	.-10     	; 0x1b5a <strnlen+0x2>
    1b64:	80 95       	com	r24
    1b66:	90 95       	com	r25
    1b68:	8e 0f       	add	r24, r30
    1b6a:	9f 1f       	adc	r25, r31
    1b6c:	08 95       	ret

00001b6e <fputc>:
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	fb 01       	movw	r30, r22
    1b78:	23 81       	ldd	r18, Z+3	; 0x03
    1b7a:	21 fd       	sbrc	r18, 1
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <fputc+0x16>
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	9f ef       	ldi	r25, 0xFF	; 255
    1b82:	2c c0       	rjmp	.+88     	; 0x1bdc <fputc+0x6e>
    1b84:	22 ff       	sbrs	r18, 2
    1b86:	16 c0       	rjmp	.+44     	; 0x1bb4 <fputc+0x46>
    1b88:	46 81       	ldd	r20, Z+6	; 0x06
    1b8a:	57 81       	ldd	r21, Z+7	; 0x07
    1b8c:	24 81       	ldd	r18, Z+4	; 0x04
    1b8e:	35 81       	ldd	r19, Z+5	; 0x05
    1b90:	42 17       	cp	r20, r18
    1b92:	53 07       	cpc	r21, r19
    1b94:	44 f4       	brge	.+16     	; 0x1ba6 <fputc+0x38>
    1b96:	a0 81       	ld	r26, Z
    1b98:	b1 81       	ldd	r27, Z+1	; 0x01
    1b9a:	9d 01       	movw	r18, r26
    1b9c:	2f 5f       	subi	r18, 0xFF	; 255
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	31 83       	std	Z+1, r19	; 0x01
    1ba2:	20 83       	st	Z, r18
    1ba4:	8c 93       	st	X, r24
    1ba6:	26 81       	ldd	r18, Z+6	; 0x06
    1ba8:	37 81       	ldd	r19, Z+7	; 0x07
    1baa:	2f 5f       	subi	r18, 0xFF	; 255
    1bac:	3f 4f       	sbci	r19, 0xFF	; 255
    1bae:	37 83       	std	Z+7, r19	; 0x07
    1bb0:	26 83       	std	Z+6, r18	; 0x06
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <fputc+0x6e>
    1bb4:	8b 01       	movw	r16, r22
    1bb6:	ec 01       	movw	r28, r24
    1bb8:	fb 01       	movw	r30, r22
    1bba:	00 84       	ldd	r0, Z+8	; 0x08
    1bbc:	f1 85       	ldd	r31, Z+9	; 0x09
    1bbe:	e0 2d       	mov	r30, r0
    1bc0:	09 95       	icall
    1bc2:	89 2b       	or	r24, r25
    1bc4:	e1 f6       	brne	.-72     	; 0x1b7e <fputc+0x10>
    1bc6:	d8 01       	movw	r26, r16
    1bc8:	16 96       	adiw	r26, 0x06	; 6
    1bca:	8d 91       	ld	r24, X+
    1bcc:	9c 91       	ld	r25, X
    1bce:	17 97       	sbiw	r26, 0x07	; 7
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	17 96       	adiw	r26, 0x07	; 7
    1bd4:	9c 93       	st	X, r25
    1bd6:	8e 93       	st	-X, r24
    1bd8:	16 97       	sbiw	r26, 0x06	; 6
    1bda:	ce 01       	movw	r24, r28
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <__ultoa_invert>:
    1be6:	fa 01       	movw	r30, r20
    1be8:	aa 27       	eor	r26, r26
    1bea:	28 30       	cpi	r18, 0x08	; 8
    1bec:	51 f1       	breq	.+84     	; 0x1c42 <__ultoa_invert+0x5c>
    1bee:	20 31       	cpi	r18, 0x10	; 16
    1bf0:	81 f1       	breq	.+96     	; 0x1c52 <__ultoa_invert+0x6c>
    1bf2:	e8 94       	clt
    1bf4:	6f 93       	push	r22
    1bf6:	6e 7f       	andi	r22, 0xFE	; 254
    1bf8:	6e 5f       	subi	r22, 0xFE	; 254
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1c00:	af 4f       	sbci	r26, 0xFF	; 255
    1c02:	b1 e0       	ldi	r27, 0x01	; 1
    1c04:	3e d0       	rcall	.+124    	; 0x1c82 <__ultoa_invert+0x9c>
    1c06:	b4 e0       	ldi	r27, 0x04	; 4
    1c08:	3c d0       	rcall	.+120    	; 0x1c82 <__ultoa_invert+0x9c>
    1c0a:	67 0f       	add	r22, r23
    1c0c:	78 1f       	adc	r23, r24
    1c0e:	89 1f       	adc	r24, r25
    1c10:	9a 1f       	adc	r25, r26
    1c12:	a1 1d       	adc	r26, r1
    1c14:	68 0f       	add	r22, r24
    1c16:	79 1f       	adc	r23, r25
    1c18:	8a 1f       	adc	r24, r26
    1c1a:	91 1d       	adc	r25, r1
    1c1c:	a1 1d       	adc	r26, r1
    1c1e:	6a 0f       	add	r22, r26
    1c20:	71 1d       	adc	r23, r1
    1c22:	81 1d       	adc	r24, r1
    1c24:	91 1d       	adc	r25, r1
    1c26:	a1 1d       	adc	r26, r1
    1c28:	20 d0       	rcall	.+64     	; 0x1c6a <__ultoa_invert+0x84>
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <__ultoa_invert+0x48>
    1c2c:	68 94       	set
    1c2e:	3f 91       	pop	r19
    1c30:	2a e0       	ldi	r18, 0x0A	; 10
    1c32:	26 9f       	mul	r18, r22
    1c34:	11 24       	eor	r1, r1
    1c36:	30 19       	sub	r19, r0
    1c38:	30 5d       	subi	r19, 0xD0	; 208
    1c3a:	31 93       	st	Z+, r19
    1c3c:	de f6       	brtc	.-74     	; 0x1bf4 <__ultoa_invert+0xe>
    1c3e:	cf 01       	movw	r24, r30
    1c40:	08 95       	ret
    1c42:	46 2f       	mov	r20, r22
    1c44:	47 70       	andi	r20, 0x07	; 7
    1c46:	40 5d       	subi	r20, 0xD0	; 208
    1c48:	41 93       	st	Z+, r20
    1c4a:	b3 e0       	ldi	r27, 0x03	; 3
    1c4c:	0f d0       	rcall	.+30     	; 0x1c6c <__ultoa_invert+0x86>
    1c4e:	c9 f7       	brne	.-14     	; 0x1c42 <__ultoa_invert+0x5c>
    1c50:	f6 cf       	rjmp	.-20     	; 0x1c3e <__ultoa_invert+0x58>
    1c52:	46 2f       	mov	r20, r22
    1c54:	4f 70       	andi	r20, 0x0F	; 15
    1c56:	40 5d       	subi	r20, 0xD0	; 208
    1c58:	4a 33       	cpi	r20, 0x3A	; 58
    1c5a:	18 f0       	brcs	.+6      	; 0x1c62 <__ultoa_invert+0x7c>
    1c5c:	49 5d       	subi	r20, 0xD9	; 217
    1c5e:	31 fd       	sbrc	r19, 1
    1c60:	40 52       	subi	r20, 0x20	; 32
    1c62:	41 93       	st	Z+, r20
    1c64:	02 d0       	rcall	.+4      	; 0x1c6a <__ultoa_invert+0x84>
    1c66:	a9 f7       	brne	.-22     	; 0x1c52 <__ultoa_invert+0x6c>
    1c68:	ea cf       	rjmp	.-44     	; 0x1c3e <__ultoa_invert+0x58>
    1c6a:	b4 e0       	ldi	r27, 0x04	; 4
    1c6c:	a6 95       	lsr	r26
    1c6e:	97 95       	ror	r25
    1c70:	87 95       	ror	r24
    1c72:	77 95       	ror	r23
    1c74:	67 95       	ror	r22
    1c76:	ba 95       	dec	r27
    1c78:	c9 f7       	brne	.-14     	; 0x1c6c <__ultoa_invert+0x86>
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	61 05       	cpc	r22, r1
    1c7e:	71 05       	cpc	r23, r1
    1c80:	08 95       	ret
    1c82:	9b 01       	movw	r18, r22
    1c84:	ac 01       	movw	r20, r24
    1c86:	0a 2e       	mov	r0, r26
    1c88:	06 94       	lsr	r0
    1c8a:	57 95       	ror	r21
    1c8c:	47 95       	ror	r20
    1c8e:	37 95       	ror	r19
    1c90:	27 95       	ror	r18
    1c92:	ba 95       	dec	r27
    1c94:	c9 f7       	brne	.-14     	; 0x1c88 <__ultoa_invert+0xa2>
    1c96:	62 0f       	add	r22, r18
    1c98:	73 1f       	adc	r23, r19
    1c9a:	84 1f       	adc	r24, r20
    1c9c:	95 1f       	adc	r25, r21
    1c9e:	a0 1d       	adc	r26, r0
    1ca0:	08 95       	ret

00001ca2 <__divmodsi4>:
    1ca2:	05 2e       	mov	r0, r21
    1ca4:	97 fb       	bst	r25, 7
    1ca6:	1e f4       	brtc	.+6      	; 0x1cae <__divmodsi4+0xc>
    1ca8:	00 94       	com	r0
    1caa:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__negsi2>
    1cae:	57 fd       	sbrc	r21, 7
    1cb0:	07 d0       	rcall	.+14     	; 0x1cc0 <__divmodsi4_neg2>
    1cb2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__udivmodsi4>
    1cb6:	07 fc       	sbrc	r0, 7
    1cb8:	03 d0       	rcall	.+6      	; 0x1cc0 <__divmodsi4_neg2>
    1cba:	4e f4       	brtc	.+18     	; 0x1cce <__divmodsi4_exit>
    1cbc:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__negsi2>

00001cc0 <__divmodsi4_neg2>:
    1cc0:	50 95       	com	r21
    1cc2:	40 95       	com	r20
    1cc4:	30 95       	com	r19
    1cc6:	21 95       	neg	r18
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	4f 4f       	sbci	r20, 0xFF	; 255
    1ccc:	5f 4f       	sbci	r21, 0xFF	; 255

00001cce <__divmodsi4_exit>:
    1cce:	08 95       	ret

00001cd0 <__negsi2>:
    1cd0:	90 95       	com	r25
    1cd2:	80 95       	com	r24
    1cd4:	70 95       	com	r23
    1cd6:	61 95       	neg	r22
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	8f 4f       	sbci	r24, 0xFF	; 255
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	08 95       	ret

00001ce0 <__muluhisi3>:
    1ce0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__umulhisi3>
    1ce4:	a5 9f       	mul	r26, r21
    1ce6:	90 0d       	add	r25, r0
    1ce8:	b4 9f       	mul	r27, r20
    1cea:	90 0d       	add	r25, r0
    1cec:	a4 9f       	mul	r26, r20
    1cee:	80 0d       	add	r24, r0
    1cf0:	91 1d       	adc	r25, r1
    1cf2:	11 24       	eor	r1, r1
    1cf4:	08 95       	ret

00001cf6 <__mulshisi3>:
    1cf6:	b7 ff       	sbrs	r27, 7
    1cf8:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__muluhisi3>

00001cfc <__mulohisi3>:
    1cfc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__muluhisi3>
    1d00:	82 1b       	sub	r24, r18
    1d02:	93 0b       	sbc	r25, r19
    1d04:	08 95       	ret

00001d06 <__prologue_saves__>:
    1d06:	2f 92       	push	r2
    1d08:	3f 92       	push	r3
    1d0a:	4f 92       	push	r4
    1d0c:	5f 92       	push	r5
    1d0e:	6f 92       	push	r6
    1d10:	7f 92       	push	r7
    1d12:	8f 92       	push	r8
    1d14:	9f 92       	push	r9
    1d16:	af 92       	push	r10
    1d18:	bf 92       	push	r11
    1d1a:	cf 92       	push	r12
    1d1c:	df 92       	push	r13
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	ca 1b       	sub	r28, r26
    1d30:	db 0b       	sbc	r29, r27
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	09 94       	ijmp

00001d3e <__epilogue_restores__>:
    1d3e:	2a 88       	ldd	r2, Y+18	; 0x12
    1d40:	39 88       	ldd	r3, Y+17	; 0x11
    1d42:	48 88       	ldd	r4, Y+16	; 0x10
    1d44:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d46:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d48:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d50:	b9 84       	ldd	r11, Y+9	; 0x09
    1d52:	c8 84       	ldd	r12, Y+8	; 0x08
    1d54:	df 80       	ldd	r13, Y+7	; 0x07
    1d56:	ee 80       	ldd	r14, Y+6	; 0x06
    1d58:	fd 80       	ldd	r15, Y+5	; 0x05
    1d5a:	0c 81       	ldd	r16, Y+4	; 0x04
    1d5c:	1b 81       	ldd	r17, Y+3	; 0x03
    1d5e:	aa 81       	ldd	r26, Y+2	; 0x02
    1d60:	b9 81       	ldd	r27, Y+1	; 0x01
    1d62:	ce 0f       	add	r28, r30
    1d64:	d1 1d       	adc	r29, r1
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	ed 01       	movw	r28, r26
    1d72:	08 95       	ret

00001d74 <__udivmodsi4>:
    1d74:	a1 e2       	ldi	r26, 0x21	; 33
    1d76:	1a 2e       	mov	r1, r26
    1d78:	aa 1b       	sub	r26, r26
    1d7a:	bb 1b       	sub	r27, r27
    1d7c:	fd 01       	movw	r30, r26
    1d7e:	0d c0       	rjmp	.+26     	; 0x1d9a <__udivmodsi4_ep>

00001d80 <__udivmodsi4_loop>:
    1d80:	aa 1f       	adc	r26, r26
    1d82:	bb 1f       	adc	r27, r27
    1d84:	ee 1f       	adc	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	a2 17       	cp	r26, r18
    1d8a:	b3 07       	cpc	r27, r19
    1d8c:	e4 07       	cpc	r30, r20
    1d8e:	f5 07       	cpc	r31, r21
    1d90:	20 f0       	brcs	.+8      	; 0x1d9a <__udivmodsi4_ep>
    1d92:	a2 1b       	sub	r26, r18
    1d94:	b3 0b       	sbc	r27, r19
    1d96:	e4 0b       	sbc	r30, r20
    1d98:	f5 0b       	sbc	r31, r21

00001d9a <__udivmodsi4_ep>:
    1d9a:	66 1f       	adc	r22, r22
    1d9c:	77 1f       	adc	r23, r23
    1d9e:	88 1f       	adc	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	1a 94       	dec	r1
    1da4:	69 f7       	brne	.-38     	; 0x1d80 <__udivmodsi4_loop>
    1da6:	60 95       	com	r22
    1da8:	70 95       	com	r23
    1daa:	80 95       	com	r24
    1dac:	90 95       	com	r25
    1dae:	9b 01       	movw	r18, r22
    1db0:	ac 01       	movw	r20, r24
    1db2:	bd 01       	movw	r22, r26
    1db4:	cf 01       	movw	r24, r30
    1db6:	08 95       	ret

00001db8 <__umulhisi3>:
    1db8:	a2 9f       	mul	r26, r18
    1dba:	b0 01       	movw	r22, r0
    1dbc:	b3 9f       	mul	r27, r19
    1dbe:	c0 01       	movw	r24, r0
    1dc0:	a3 9f       	mul	r26, r19
    1dc2:	70 0d       	add	r23, r0
    1dc4:	81 1d       	adc	r24, r1
    1dc6:	11 24       	eor	r1, r1
    1dc8:	91 1d       	adc	r25, r1
    1dca:	b2 9f       	mul	r27, r18
    1dcc:	70 0d       	add	r23, r0
    1dce:	81 1d       	adc	r24, r1
    1dd0:	11 24       	eor	r1, r1
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	08 95       	ret

00001dd6 <_exit>:
    1dd6:	f8 94       	cli

00001dd8 <__stop_program>:
    1dd8:	ff cf       	rjmp	.-2      	; 0x1dd8 <__stop_program>
