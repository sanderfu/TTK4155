
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018e  00800100  00001ce6  00001d7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ce6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080028e  0080028e  00001f08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027ee  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001285  00000000  00000000  00004a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c6  00000000  00000000  00005c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  00006e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000889  00000000  00000000  0000743c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e5  00000000  00000000  00007cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00008daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_14>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_16>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <test_SRAM+0xf4>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e6 ee       	ldi	r30, 0xE6	; 230
     3aa:	fc e1       	ldi	r31, 0x1C	; 28
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	ae 38       	cpi	r26, 0x8E	; 142
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	ae e8       	ldi	r26, 0x8E	; 142
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a8 3a       	cpi	r26, 0xA8	; 168
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
     3cc:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     3d4:	30 98       	cbi	0x06, 0	; 6
     3d6:	08 95       	ret

000003d8 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1158>
	

	while (test_bit(PINE, PINE0)) {
     3de:	28 99       	sbic	0x05, 0	; 5
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <readAdc+0x6>

	}
	
	return *adc;
     3e2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1158>
     3e6:	08 95       	ret

000003e8 <__vector_14>:
slider_position_t slider_pos;
buttonValues_t buttons;



ISR (TIMER1_COMPB_vect) {
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	2f 93       	push	r18
     3f4:	3f 93       	push	r19
     3f6:	4f 93       	push	r20
     3f8:	5f 93       	push	r21
     3fa:	6f 93       	push	r22
     3fc:	7f 93       	push	r23
     3fe:	8f 93       	push	r24
     400:	9f 93       	push	r25
     402:	af 93       	push	r26
     404:	bf 93       	push	r27
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
	cli();
     40a:	f8 94       	cli
	TCNT1 = 0x00;
     40c:	1d bc       	out	0x2d, r1	; 45
     40e:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     410:	8e e8       	ldi	r24, 0x8E	; 142
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	0e 94 b2 02 	call	0x564	; 0x564 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     418:	88 e9       	ldi	r24, 0x98	; 152
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	0e 94 30 05 	call	0xa60	; 0xa60 <slider_readPosition>
	touchButton_readButtons(&buttons);
     420:	86 e9       	ldi	r24, 0x96	; 150
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	0e 94 38 06 	call	0xc70	; 0xc70 <touchButton_readButtons>
	sei();
     428:	78 94       	sei
}
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <__vector_16>:

ISR (TIMER0_COMP_vect) {
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	2f 93       	push	r18
     458:	3f 93       	push	r19
     45a:	4f 93       	push	r20
     45c:	5f 93       	push	r21
     45e:	6f 93       	push	r22
     460:	7f 93       	push	r23
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	af 93       	push	r26
     468:	bf 93       	push	r27
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
	cli();
     46e:	f8 94       	cli
	TCNT1 = 0x00;
     470:	1d bc       	out	0x2d, r1	; 45
     472:	1c bc       	out	0x2c, r1	; 44
	navigateMenu(&joystick_pos);
     474:	8e e8       	ldi	r24, 0x8E	; 142
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 ed 03 	call	0x7da	; 0x7da <navigateMenu>
	menu_printCurrentMenu();
     47c:	0e 94 4f 04 	call	0x89e	; 0x89e <menu_printCurrentMenu>
	sei();
     480:	78 94       	sei
}
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	bf 91       	pop	r27
     488:	af 91       	pop	r26
     48a:	9f 91       	pop	r25
     48c:	8f 91       	pop	r24
     48e:	7f 91       	pop	r23
     490:	6f 91       	pop	r22
     492:	5f 91       	pop	r21
     494:	4f 91       	pop	r20
     496:	3f 91       	pop	r19
     498:	2f 91       	pop	r18
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <main>:

int main(void)
{
	setupInit();
     4a4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <setupInit>
	test_SRAM();
     4a8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <test_SRAM>
	printf("Hello, world!\n\r");
     4ac:	8a e0       	ldi	r24, 0x0A	; 10
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	0e 94 0d 0b 	call	0x161a	; 0x161a <printf>
	MenuNode* gameMenu = menuInit();
     4b8:	0e 94 af 03 	call	0x75e	; 0x75e <menuInit>
	menu_printCurrentMenu();
     4bc:	0e 94 4f 04 	call	0x89e	; 0x89e <menu_printCurrentMenu>
	
	
	oled_home();
     4c0:	0e 94 ba 04 	call	0x974	; 0x974 <oled_home>
	oled_gotoLine(2);
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <oled_gotoLine>
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
		//disable analog 
		sleep_now();
		                  
		//sleep_disable();         
		//clear terminal
		printf("hei");
     4ce:	ca e1       	ldi	r28, 0x1A	; 26
     4d0:	d1 e0       	ldi	r29, 0x01	; 1
	
	
	
	while (1) {
		//disable analog 
		sleep_now();
     4d2:	0e 94 98 02 	call	0x530	; 0x530 <sleep_now>
		                  
		//sleep_disable();         
		//clear terminal
		printf("hei");
     4d6:	df 93       	push	r29
     4d8:	cf 93       	push	r28
     4da:	0e 94 0d 0b 	call	0x161a	; 0x161a <printf>
		} else {
			
		}
		*/

		test_outputControllers(joystick_pos, slider_pos, buttons);		
     4de:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <buttons>
     4e2:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <buttons+0x1>
     4e6:	40 91 98 02 	lds	r20, 0x0298	; 0x800298 <slider_pos>
     4ea:	50 91 99 02 	lds	r21, 0x0299	; 0x800299 <slider_pos+0x1>
     4ee:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <__data_end>
     4f2:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <__data_end+0x1>
     4f6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end+0x2>
     4fa:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__data_end+0x3>
     4fe:	0e 94 c5 05 	call	0xb8a	; 0xb8a <test_outputControllers>
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	e5 cf       	rjmp	.-54     	; 0x4d2 <main+0x2e>

00000508 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     508:	85 b7       	in	r24, 0x35	; 53
     50a:	8f 7e       	andi	r24, 0xEF	; 239
     50c:	85 bf       	out	0x35, r24	; 53
     50e:	84 b7       	in	r24, 0x34	; 52
     510:	8f 7d       	andi	r24, 0xDF	; 223
     512:	84 bf       	out	0x34, r24	; 52
     514:	86 b7       	in	r24, 0x36	; 54
     516:	8f 77       	andi	r24, 0x7F	; 127
     518:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     51a:	85 b7       	in	r24, 0x35	; 53
     51c:	80 62       	ori	r24, 0x20	; 32
     51e:	85 bf       	out	0x35, r24	; 53
     520:	88 95       	sleep
     522:	85 b7       	in	r24, 0x35	; 53
     524:	8f 7d       	andi	r24, 0xDF	; 223
     526:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     528:	85 b7       	in	r24, 0x35	; 53
     52a:	80 62       	ori	r24, 0x20	; 32
     52c:	85 bf       	out	0x35, r24	; 53
     52e:	08 95       	ret

00000530 <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     530:	88 b1       	in	r24, 0x08	; 8
     532:	88 68       	ori	r24, 0x88	; 136
     534:	88 b9       	out	0x08, r24	; 8



	// Put the device to sleep:
	sleep_mode();
     536:	85 b7       	in	r24, 0x35	; 53
     538:	80 62       	ori	r24, 0x20	; 32
     53a:	85 bf       	out	0x35, r24	; 53
     53c:	88 95       	sleep
     53e:	85 b7       	in	r24, 0x35	; 53
     540:	8f 7d       	andi	r24, 0xDF	; 223
     542:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
     544:	88 95       	sleep

	// Upon waking up, sketch continues from this point.
	sleep_disable();
     546:	85 b7       	in	r24, 0x35	; 53
     548:	8f 7d       	andi	r24, 0xDF	; 223
     54a:	85 bf       	out	0x35, r24	; 53
     54c:	08 95       	ret

0000054e <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     554:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     55e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <joystickOffsetY>
     562:	08 95       	ret

00000564 <joystick_readPosition>:
}
void joystick_readPosition(joystick_position_t * pos) {
     564:	cf 92       	push	r12
     566:	df 92       	push	r13
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     57a:	18 2f       	mov	r17, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     582:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     584:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <joystickOffsetX>
     588:	16 17       	cp	r17, r22
     58a:	78 f4       	brcc	.+30     	; 0x5aa <joystick_readPosition+0x46>
		pos->x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	21 2f       	mov	r18, r17
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	26 1b       	sub	r18, r22
     594:	37 0b       	sbc	r19, r23
     596:	44 e6       	ldi	r20, 0x64	; 100
     598:	42 9f       	mul	r20, r18
     59a:	c0 01       	movw	r24, r0
     59c:	43 9f       	mul	r20, r19
     59e:	90 0d       	add	r25, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	0e 94 16 09 	call	0x122c	; 0x122c <__divmodhi4>
     5a6:	68 83       	st	Y, r22
     5a8:	13 c0       	rjmp	.+38     	; 0x5d0 <joystick_readPosition+0x6c>
	} else {
		pos->x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     5aa:	46 2f       	mov	r20, r22
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	21 2f       	mov	r18, r17
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	24 1b       	sub	r18, r20
     5b4:	35 0b       	sbc	r19, r21
     5b6:	64 e6       	ldi	r22, 0x64	; 100
     5b8:	62 9f       	mul	r22, r18
     5ba:	c0 01       	movw	r24, r0
     5bc:	63 9f       	mul	r22, r19
     5be:	90 0d       	add	r25, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	6f ef       	ldi	r22, 0xFF	; 255
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	64 1b       	sub	r22, r20
     5c8:	75 0b       	sbc	r23, r21
     5ca:	0e 94 16 09 	call	0x122c	; 0x122c <__divmodhi4>
     5ce:	68 83       	st	Y, r22
	}
	if (y_pos < joystickOffsetY) {
     5d0:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <joystickOffsetY>
     5d4:	e2 17       	cp	r30, r18
     5d6:	80 f4       	brcc	.+32     	; 0x5f8 <joystick_readPosition+0x94>
		pos->y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     5d8:	62 2f       	mov	r22, r18
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	4e 2f       	mov	r20, r30
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	46 1b       	sub	r20, r22
     5e2:	57 0b       	sbc	r21, r23
     5e4:	24 e6       	ldi	r18, 0x64	; 100
     5e6:	24 9f       	mul	r18, r20
     5e8:	c0 01       	movw	r24, r0
     5ea:	25 9f       	mul	r18, r21
     5ec:	90 0d       	add	r25, r0
     5ee:	11 24       	eor	r1, r1
     5f0:	0e 94 16 09 	call	0x122c	; 0x122c <__divmodhi4>
     5f4:	69 83       	std	Y+1, r22	; 0x01
     5f6:	12 c0       	rjmp	.+36     	; 0x61c <joystick_readPosition+0xb8>
	} else {
		pos->y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	4e 2f       	mov	r20, r30
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	42 1b       	sub	r20, r18
     600:	53 0b       	sbc	r21, r19
     602:	64 e6       	ldi	r22, 0x64	; 100
     604:	64 9f       	mul	r22, r20
     606:	c0 01       	movw	r24, r0
     608:	65 9f       	mul	r22, r21
     60a:	90 0d       	add	r25, r0
     60c:	11 24       	eor	r1, r1
     60e:	6f ef       	ldi	r22, 0xFF	; 255
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	62 1b       	sub	r22, r18
     614:	73 0b       	sbc	r23, r19
     616:	0e 94 16 09 	call	0x122c	; 0x122c <__divmodhi4>
     61a:	69 83       	std	Y+1, r22	; 0x01
	}
	pos->angle = atan2(pos->y_pos, pos->x_pos)*360/2.0/3.14;
     61c:	68 81       	ld	r22, Y
     61e:	06 2e       	mov	r0, r22
     620:	00 0c       	add	r0, r0
     622:	77 0b       	sbc	r23, r23
     624:	88 0b       	sbc	r24, r24
     626:	99 0b       	sbc	r25, r25
     628:	0e 94 7d 07 	call	0xefa	; 0xefa <__floatsisf>
     62c:	6b 01       	movw	r12, r22
     62e:	7c 01       	movw	r14, r24
     630:	69 81       	ldd	r22, Y+1	; 0x01
     632:	06 2e       	mov	r0, r22
     634:	00 0c       	add	r0, r0
     636:	77 0b       	sbc	r23, r23
     638:	88 0b       	sbc	r24, r24
     63a:	99 0b       	sbc	r25, r25
     63c:	0e 94 7d 07 	call	0xefa	; 0xefa <__floatsisf>
     640:	a7 01       	movw	r20, r14
     642:	96 01       	movw	r18, r12
     644:	0e 94 74 06 	call	0xce8	; 0xce8 <atan2>
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	44 eb       	ldi	r20, 0xB4	; 180
     64e:	53 e4       	ldi	r21, 0x43	; 67
     650:	0e 94 38 08 	call	0x1070	; 0x1070 <__mulsf3>
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	5f e3       	ldi	r21, 0x3F	; 63
     65c:	0e 94 38 08 	call	0x1070	; 0x1070 <__mulsf3>
     660:	23 ec       	ldi	r18, 0xC3	; 195
     662:	35 ef       	ldi	r19, 0xF5	; 245
     664:	48 e4       	ldi	r20, 0x48	; 72
     666:	50 e4       	ldi	r21, 0x40	; 64
     668:	0e 94 d3 06 	call	0xda6	; 0xda6 <__divsf3>
     66c:	0e 94 45 07 	call	0xe8a	; 0xe8a <__fixsfsi>
     670:	7b 83       	std	Y+3, r23	; 0x03
     672:	6a 83       	std	Y+2, r22	; 0x02
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	08 95       	ret

00000684 <joystick_getDirection>:

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
     684:	fc 01       	movw	r30, r24
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
     686:	80 81       	ld	r24, Z
     688:	94 e0       	ldi	r25, 0x04	; 4
     68a:	98 0f       	add	r25, r24
     68c:	99 30       	cpi	r25, 0x09	; 9
     68e:	20 f4       	brcc	.+8      	; 0x698 <joystick_getDirection+0x14>
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	9c 5f       	subi	r25, 0xFC	; 252
     694:	99 30       	cpi	r25, 0x09	; 9
     696:	90 f0       	brcs	.+36     	; 0x6bc <joystick_getDirection+0x38>
		return NEUTRAL;
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
     698:	85 30       	cpi	r24, 0x05	; 5
     69a:	2c f0       	brlt	.+10     	; 0x6a6 <joystick_getDirection+0x22>
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	8f 5c       	subi	r24, 0xCF	; 207
     6a0:	83 36       	cpi	r24, 0x63	; 99
     6a2:	38 f4       	brcc	.+14     	; 0x6b2 <joystick_getDirection+0x2e>
     6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <joystick_getDirection+0x3c>
		return RIGHT;
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
     6a6:	8c 3f       	cpi	r24, 0xFC	; 252
     6a8:	24 f4       	brge	.+8      	; 0x6b2 <joystick_getDirection+0x2e>
     6aa:	81 81       	ldd	r24, Z+1	; 0x01
     6ac:	8f 5c       	subi	r24, 0xCF	; 207
     6ae:	83 36       	cpi	r24, 0x63	; 99
     6b0:	48 f0       	brcs	.+18     	; 0x6c4 <joystick_getDirection+0x40>
		return LEFT;
	}
	
	if (pos->y_pos <= -5) {
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
     6b4:	8c 3f       	cpi	r24, 0xFC	; 252
     6b6:	44 f0       	brlt	.+16     	; 0x6c8 <joystick_getDirection+0x44>
		return DOWN;
	}
	else {
		return UP;
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	08 95       	ret
	pos->angle = atan2(pos->y_pos, pos->x_pos)*360/2.0/3.14;
}

DIRECTION_t joystick_getDirection(joystick_position_t * pos) {
	if (abs(pos->x_pos) < 5 && abs(pos->y_pos) <5) {
		return NEUTRAL;
     6bc:	84 e0       	ldi	r24, 0x04	; 4
     6be:	08 95       	ret
	}
	if (pos->x_pos >= 5 && abs(pos->y_pos) < 50) {
		return RIGHT;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	08 95       	ret
	}
	if (pos->x_pos <= -5 && abs(pos->y_pos) < 50) {
		return LEFT;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	08 95       	ret
	}
	
	if (pos->y_pos <= -5) {
		return DOWN;
     6c8:	83 e0       	ldi	r24, 0x03	; 3
	}
	else {
		return UP;
	}
	
} 
     6ca:	08 95       	ret

000006cc <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     6cc:	8f e1       	ldi	r24, 0x1F	; 31
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 3e 09 	call	0x127c	; 0x127c <malloc>
	ptr->numChildren = 0;
     6d4:	fc 01       	movw	r30, r24
     6d6:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     6d8:	2a e0       	ldi	r18, 0x0A	; 10
     6da:	ee e1       	ldi	r30, 0x1E	; 30
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	dc 01       	movw	r26, r24
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	2a 95       	dec	r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <mainMenuInit+0x14>
	ptr->parent = NULL;
     6e8:	fc 01       	movw	r30, r24
     6ea:	11 8a       	std	Z+17, r1	; 0x11
     6ec:	10 8a       	std	Z+16, r1	; 0x10
	for (int i = 0; i< MAXCHILDREN; i++) {
		ptr->children[i] = NULL;
	}
	*/
	return ptr;
}
     6ee:	08 95       	ret

000006f0 <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	7c 01       	movw	r14, r24
     700:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     702:	8f e1       	ldi	r24, 0x1F	; 31
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 3e 09 	call	0x127c	; 0x127c <malloc>
     70a:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     70c:	d7 01       	movw	r26, r14
     70e:	5e 96       	adiw	r26, 0x1e	; 30
     710:	ec 91       	ld	r30, X
     712:	5e 97       	sbiw	r26, 0x1e	; 30
     714:	c1 e0       	ldi	r28, 0x01	; 1
     716:	ce 0f       	add	r28, r30
     718:	5e 96       	adiw	r26, 0x1e	; 30
     71a:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     71c:	b6 01       	movw	r22, r12
     71e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <strcpy>
	childPtr->parent = parent;
     722:	f8 01       	movw	r30, r16
     724:	f1 8a       	std	Z+17, r15	; 0x11
     726:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     728:	c7 30       	cpi	r28, 0x07	; 7
     72a:	78 f4       	brcc	.+30     	; 0x74a <addChild+0x5a>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     72c:	ec 2f       	mov	r30, r28
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	38 96       	adiw	r30, 0x08	; 8
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	ee 0d       	add	r30, r14
     738:	ff 1d       	adc	r31, r15
     73a:	11 83       	std	Z+1, r17	; 0x01
     73c:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     73e:	d8 01       	movw	r26, r16
     740:	5e 96       	adiw	r26, 0x1e	; 30
     742:	1c 92       	st	X, r1
	return childPtr;
     744:	80 2f       	mov	r24, r16
     746:	91 2f       	mov	r25, r17
     748:	02 c0       	rjmp	.+4      	; 0x74e <addChild+0x5e>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	08 95       	ret

0000075e <menuInit>:

MenuNode* menuInit(void)
{
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     76a:	0e 94 66 03 	call	0x6cc	; 0x6cc <mainMenuInit>
     76e:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     770:	68 e2       	ldi	r22, 0x28	; 40
     772:	71 e0       	ldi	r23, 0x01	; 1
     774:	0e 94 78 03 	call	0x6f0	; 0x6f0 <addChild>
     778:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     77a:	62 e3       	ldi	r22, 0x32	; 50
     77c:	71 e0       	ldi	r23, 0x01	; 1
     77e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <addChild>
	addChild(childPlayGame,"GAME 2");
     782:	69 e3       	ldi	r22, 0x39	; 57
     784:	71 e0       	ldi	r23, 0x01	; 1
     786:	ce 01       	movw	r24, r28
     788:	0e 94 78 03 	call	0x6f0	; 0x6f0 <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     78c:	60 e4       	ldi	r22, 0x40	; 64
     78e:	71 e0       	ldi	r23, 0x01	; 1
     790:	c7 01       	movw	r24, r14
     792:	0e 94 78 03 	call	0x6f0	; 0x6f0 <addChild>
     796:	8c 01       	movw	r16, r24
     798:	c5 e0       	ldi	r28, 0x05	; 5
     79a:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     79c:	6a e4       	ldi	r22, 0x4A	; 74
     79e:	71 e0       	ldi	r23, 0x01	; 1
     7a0:	c8 01       	movw	r24, r16
     7a2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <addChild>
     7a6:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     7a8:	c9 f7       	brne	.-14     	; 0x79c <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     7aa:	62 e5       	ldi	r22, 0x52	; 82
     7ac:	71 e0       	ldi	r23, 0x01	; 1
     7ae:	c7 01       	movw	r24, r14
     7b0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     7b4:	6b e5       	ldi	r22, 0x5B	; 91
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <addChild>
	currentMenu.currentMenuItem = mainMenu;
     7bc:	e2 e9       	ldi	r30, 0x92	; 146
     7be:	f2 e0       	ldi	r31, 0x02	; 2
     7c0:	f1 82       	std	Z+1, r15	; 0x01
     7c2:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     7c4:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     7ca:	c7 01       	movw	r24, r14
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	08 95       	ret

000007da <navigateMenu>:

void navigateMenu(joystick_position_t * joystick_position_p) {
	DIRECTION_t dir = joystick_getDirection(joystick_position_p);
     7da:	0e 94 42 03 	call	0x684	; 0x684 <joystick_getDirection>
	if (currentMenu.lastDir == NEUTRAL) {
     7de:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <currentMenu+0x3>
     7e2:	94 30       	cpi	r25, 0x04	; 4
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <navigateMenu+0xe>
     7e6:	58 c0       	rjmp	.+176    	; 0x898 <navigateMenu+0xbe>
			switch (dir) {
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	e1 f1       	breq	.+120    	; 0x864 <navigateMenu+0x8a>
     7ec:	60 f1       	brcs	.+88     	; 0x846 <navigateMenu+0x6c>
     7ee:	82 30       	cpi	r24, 0x02	; 2
     7f0:	c9 f0       	breq	.+50     	; 0x824 <navigateMenu+0x4a>
     7f2:	83 30       	cpi	r24, 0x03	; 3
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <navigateMenu+0x1e>
     7f6:	50 c0       	rjmp	.+160    	; 0x898 <navigateMenu+0xbe>
			case DOWN:
				if (currentMenu.childIndex < currentMenu.currentMenuItem->numChildren -1 ) {
     7f8:	e2 e9       	ldi	r30, 0x92	; 146
     7fa:	f2 e0       	ldi	r31, 0x02	; 2
     7fc:	92 81       	ldd	r25, Z+2	; 0x02
     7fe:	49 2f       	mov	r20, r25
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	01 90       	ld	r0, Z+
     804:	f0 81       	ld	r31, Z
     806:	e0 2d       	mov	r30, r0
     808:	26 8d       	ldd	r18, Z+30	; 0x1e
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	21 50       	subi	r18, 0x01	; 1
     80e:	31 09       	sbc	r19, r1
     810:	42 17       	cp	r20, r18
     812:	53 07       	cpc	r21, r19
     814:	24 f4       	brge	.+8      	; 0x81e <navigateMenu+0x44>
					currentMenu.childIndex++;
     816:	9f 5f       	subi	r25, 0xFF	; 255
     818:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <currentMenu+0x2>
     81c:	3d c0       	rjmp	.+122    	; 0x898 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = 0;
     81e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <currentMenu+0x2>
     822:	3a c0       	rjmp	.+116    	; 0x898 <navigateMenu+0xbe>
				}
				break;
			case UP:
				if (currentMenu.childIndex > 0 ) {
     824:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <currentMenu+0x2>
     828:	99 23       	and	r25, r25
     82a:	21 f0       	breq	.+8      	; 0x834 <navigateMenu+0x5a>
					currentMenu.childIndex--;
     82c:	91 50       	subi	r25, 0x01	; 1
     82e:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <currentMenu+0x2>
     832:	32 c0       	rjmp	.+100    	; 0x898 <navigateMenu+0xbe>
				} else {
					currentMenu.childIndex = currentMenu.currentMenuItem->numChildren-1;
     834:	e2 e9       	ldi	r30, 0x92	; 146
     836:	f2 e0       	ldi	r31, 0x02	; 2
     838:	a0 81       	ld	r26, Z
     83a:	b1 81       	ldd	r27, Z+1	; 0x01
     83c:	5e 96       	adiw	r26, 0x1e	; 30
     83e:	9c 91       	ld	r25, X
     840:	91 50       	subi	r25, 0x01	; 1
     842:	92 83       	std	Z+2, r25	; 0x02
     844:	29 c0       	rjmp	.+82     	; 0x898 <navigateMenu+0xbe>
				}
				break;
			case LEFT:
				if (currentMenu.currentMenuItem->parent != NULL) {
     846:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <currentMenu>
     84a:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <currentMenu+0x1>
     84e:	20 89       	ldd	r18, Z+16	; 0x10
     850:	31 89       	ldd	r19, Z+17	; 0x11
     852:	21 15       	cp	r18, r1
     854:	31 05       	cpc	r19, r1
     856:	01 f1       	breq	.+64     	; 0x898 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->parent;
     858:	e2 e9       	ldi	r30, 0x92	; 146
     85a:	f2 e0       	ldi	r31, 0x02	; 2
     85c:	31 83       	std	Z+1, r19	; 0x01
     85e:	20 83       	st	Z, r18
					currentMenu.childIndex = 0;
     860:	12 82       	std	Z+2, r1	; 0x02
     862:	1a c0       	rjmp	.+52     	; 0x898 <navigateMenu+0xbe>
				}
				
				break;
			case RIGHT:
				if (currentMenu.currentMenuItem->children[currentMenu.childIndex]->numChildren != 0) {
     864:	a2 e9       	ldi	r26, 0x92	; 146
     866:	b2 e0       	ldi	r27, 0x02	; 2
     868:	2d 91       	ld	r18, X+
     86a:	3c 91       	ld	r19, X
     86c:	11 97       	sbiw	r26, 0x01	; 1
     86e:	12 96       	adiw	r26, 0x02	; 2
     870:	9c 91       	ld	r25, X
     872:	12 97       	sbiw	r26, 0x02	; 2
     874:	e9 2f       	mov	r30, r25
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	39 96       	adiw	r30, 0x09	; 9
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	e2 0f       	add	r30, r18
     880:	f3 1f       	adc	r31, r19
     882:	01 90       	ld	r0, Z+
     884:	f0 81       	ld	r31, Z
     886:	e0 2d       	mov	r30, r0
     888:	96 8d       	ldd	r25, Z+30	; 0x1e
     88a:	99 23       	and	r25, r25
     88c:	29 f0       	breq	.+10     	; 0x898 <navigateMenu+0xbe>
					currentMenu.currentMenuItem = currentMenu.currentMenuItem->children[currentMenu.childIndex];
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	fc 93       	st	X, r31
     892:	ee 93       	st	-X, r30
					currentMenu.childIndex = 0;
     894:	12 96       	adiw	r26, 0x02	; 2
     896:	1c 92       	st	X, r1
				break;
		
		}
	}
	
	currentMenu.lastDir = dir;
     898:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <currentMenu+0x3>
     89c:	08 95       	ret

0000089e <menu_printCurrentMenu>:
	
}

void menu_printCurrentMenu() {
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
	oled_reset();
     8a6:	0e 94 99 04 	call	0x932	; 0x932 <oled_reset>
	oled_home();
     8aa:	0e 94 ba 04 	call	0x974	; 0x974 <oled_home>
	oled_print(currentMenu.currentMenuItem->name);
     8ae:	c2 e9       	ldi	r28, 0x92	; 146
     8b0:	d2 e0       	ldi	r29, 0x02	; 2
     8b2:	88 81       	ld	r24, Y
     8b4:	99 81       	ldd	r25, Y+1	; 0x01
     8b6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <oled_print>
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     8ba:	e8 81       	ld	r30, Y
     8bc:	f9 81       	ldd	r31, Y+1	; 0x01
     8be:	86 8d       	ldd	r24, Z+30	; 0x1e
     8c0:	88 23       	and	r24, r24
     8c2:	31 f1       	breq	.+76     	; 0x910 <menu_printCurrentMenu+0x72>
     8c4:	c0 e0       	ldi	r28, 0x00	; 0
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
		oled_gotoLine(i+2);
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     8c8:	02 e9       	ldi	r16, 0x92	; 146
     8ca:	12 e0       	ldi	r17, 0x02	; 2
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
		oled_gotoLine(i+2);
     8cc:	ce 01       	movw	r24, r28
     8ce:	02 96       	adiw	r24, 0x02	; 2
     8d0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <oled_gotoLine>
		oled_print(((currentMenu.currentMenuItem->children)[i])->name);
     8d4:	d8 01       	movw	r26, r16
     8d6:	8d 91       	ld	r24, X+
     8d8:	9c 91       	ld	r25, X
     8da:	fe 01       	movw	r30, r28
     8dc:	39 96       	adiw	r30, 0x09	; 9
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e8 0f       	add	r30, r24
     8e4:	f9 1f       	adc	r31, r25
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	0e 94 f5 04 	call	0x9ea	; 0x9ea <oled_print>
		if (currentMenu.childIndex == i) {
     8ee:	f8 01       	movw	r30, r16
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	8c 17       	cp	r24, r28
     8f6:	9d 07       	cpc	r25, r29
     8f8:	11 f4       	brne	.+4      	; 0x8fe <menu_printCurrentMenu+0x60>
			oled_print_arrow();
     8fa:	0e 94 af 04 	call	0x95e	; 0x95e <oled_print_arrow>
void menu_printCurrentMenu() {
	oled_reset();
	oled_home();
	oled_print(currentMenu.currentMenuItem->name);
	
	for (int i = 0; i<currentMenu.currentMenuItem->numChildren; i++) {
     8fe:	21 96       	adiw	r28, 0x01	; 1
     900:	d8 01       	movw	r26, r16
     902:	ed 91       	ld	r30, X+
     904:	fc 91       	ld	r31, X
     906:	86 8d       	ldd	r24, Z+30	; 0x1e
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	c8 17       	cp	r28, r24
     90c:	d9 07       	cpc	r29, r25
     90e:	f4 f2       	brlt	.-68     	; 0x8cc <menu_printCurrentMenu+0x2e>
		if (currentMenu.childIndex == i) {
			oled_print_arrow();
		}
	}
	
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <oled_pos>:
void oled_clearLine(uint8_t page){
	oled_pos(page, 0);
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}
     91a:	80 55       	subi	r24, 0x50	; 80
     91c:	e0 e0       	ldi	r30, 0x00	; 0
     91e:	f0 e1       	ldi	r31, 0x10	; 16
     920:	80 83       	st	Z, r24
     922:	86 2f       	mov	r24, r22
     924:	8f 70       	andi	r24, 0x0F	; 15
     926:	80 83       	st	Z, r24
     928:	62 95       	swap	r22
     92a:	6f 70       	andi	r22, 0x0F	; 15
     92c:	60 61       	ori	r22, 0x10	; 16
     92e:	60 83       	st	Z, r22
     930:	08 95       	ret

00000932 <oled_reset>:
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	c0 e0       	ldi	r28, 0x00	; 0
     93c:	d2 e1       	ldi	r29, 0x12	; 18
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	81 2f       	mov	r24, r17
     942:	0e 94 8d 04 	call	0x91a	; 0x91a <oled_pos>
     946:	80 e8       	ldi	r24, 0x80	; 128
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	18 82       	st	Y, r1
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	e9 f7       	brne	.-6      	; 0x94a <oled_reset+0x18>
     950:	1f 5f       	subi	r17, 0xFF	; 255
     952:	18 30       	cpi	r17, 0x08	; 8
     954:	a1 f7       	brne	.-24     	; 0x93e <oled_reset+0xc>
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	08 95       	ret

0000095e <oled_print_arrow>:
     95e:	e0 e0       	ldi	r30, 0x00	; 0
     960:	f2 e1       	ldi	r31, 0x12	; 18
     962:	88 e1       	ldi	r24, 0x18	; 24
     964:	80 83       	st	Z, r24
     966:	9c e3       	ldi	r25, 0x3C	; 60
     968:	90 83       	st	Z, r25
     96a:	9e e7       	ldi	r25, 0x7E	; 126
     96c:	90 83       	st	Z, r25
     96e:	80 83       	st	Z, r24
     970:	80 83       	st	Z, r24
     972:	08 95       	ret

00000974 <oled_home>:
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 8d 04 	call	0x91a	; 0x91a <oled_pos>
     97c:	08 95       	ret

0000097e <oled_init>:
     97e:	e0 e0       	ldi	r30, 0x00	; 0
     980:	f0 e1       	ldi	r31, 0x10	; 16
     982:	8e ea       	ldi	r24, 0xAE	; 174
     984:	80 83       	st	Z, r24
     986:	81 ea       	ldi	r24, 0xA1	; 161
     988:	80 83       	st	Z, r24
     98a:	8a ed       	ldi	r24, 0xDA	; 218
     98c:	80 83       	st	Z, r24
     98e:	82 e1       	ldi	r24, 0x12	; 18
     990:	80 83       	st	Z, r24
     992:	88 ec       	ldi	r24, 0xC8	; 200
     994:	80 83       	st	Z, r24
     996:	88 ea       	ldi	r24, 0xA8	; 168
     998:	80 83       	st	Z, r24
     99a:	8f e3       	ldi	r24, 0x3F	; 63
     99c:	80 83       	st	Z, r24
     99e:	85 ed       	ldi	r24, 0xD5	; 213
     9a0:	80 83       	st	Z, r24
     9a2:	80 e8       	ldi	r24, 0x80	; 128
     9a4:	80 83       	st	Z, r24
     9a6:	81 e8       	ldi	r24, 0x81	; 129
     9a8:	80 83       	st	Z, r24
     9aa:	80 e5       	ldi	r24, 0x50	; 80
     9ac:	80 83       	st	Z, r24
     9ae:	89 ed       	ldi	r24, 0xD9	; 217
     9b0:	80 83       	st	Z, r24
     9b2:	81 e2       	ldi	r24, 0x21	; 33
     9b4:	80 83       	st	Z, r24
     9b6:	80 e2       	ldi	r24, 0x20	; 32
     9b8:	80 83       	st	Z, r24
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	80 83       	st	Z, r24
     9be:	8b ed       	ldi	r24, 0xDB	; 219
     9c0:	80 83       	st	Z, r24
     9c2:	80 e3       	ldi	r24, 0x30	; 48
     9c4:	80 83       	st	Z, r24
     9c6:	8d ea       	ldi	r24, 0xAD	; 173
     9c8:	80 83       	st	Z, r24
     9ca:	10 82       	st	Z, r1
     9cc:	84 ea       	ldi	r24, 0xA4	; 164
     9ce:	80 83       	st	Z, r24
     9d0:	86 ea       	ldi	r24, 0xA6	; 166
     9d2:	80 83       	st	Z, r24
     9d4:	8f ea       	ldi	r24, 0xAF	; 175
     9d6:	80 83       	st	Z, r24
     9d8:	0e 94 99 04 	call	0x932	; 0x932 <oled_reset>
     9dc:	0e 94 ba 04 	call	0x974	; 0x974 <oled_home>
     9e0:	08 95       	ret

000009e2 <oled_gotoLine>:
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	0e 94 8d 04 	call	0x91a	; 0x91a <oled_pos>
     9e8:	08 95       	ret

000009ea <oled_print>:

void oled_print(char* character){
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	dc 01       	movw	r26, r24
	while (*character != '\0')
     9f0:	8c 91       	ld	r24, X
     9f2:	81 11       	cpse	r24, r1
     9f4:	1a c0       	rjmp	.+52     	; 0xa2a <oled_print+0x40>
     9f6:	1e c0       	rjmp	.+60     	; 0xa34 <oled_print+0x4a>
	{
		for (int col = 0; col < 8; col++ ) {
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
     9f8:	ec 91       	ld	r30, X
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	b0 97       	sbiw	r30, 0x20	; 32
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	e2 0f       	add	r30, r18
     a0c:	f3 1f       	adc	r31, r19
     a0e:	e2 56       	subi	r30, 0x62	; 98
     a10:	ff 4f       	sbci	r31, 0xFF	; 255
     a12:	e4 91       	lpm	r30, Z
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     a14:	e8 83       	st	Y, r30
}

void oled_print(char* character){
	while (*character != '\0')
	{
		for (int col = 0; col < 8; col++ ) {
     a16:	2f 5f       	subi	r18, 0xFF	; 255
     a18:	3f 4f       	sbci	r19, 0xFF	; 255
     a1a:	28 30       	cpi	r18, 0x08	; 8
     a1c:	31 05       	cpc	r19, r1
     a1e:	61 f7       	brne	.-40     	; 0x9f8 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
     a20:	11 96       	adiw	r26, 0x01	; 1
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
	while (*character != '\0')
     a22:	8c 91       	ld	r24, X
     a24:	81 11       	cpse	r24, r1
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <oled_print+0x44>
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <oled_print+0x4a>
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	d2 e1       	ldi	r29, 0x12	; 18
	for (int col = 0; col < 128; col++ ) {
		oled_write_d(0x00);
	}
}

void oled_print(char* character){
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	e2 cf       	rjmp	.-60     	; 0x9f8 <oled_print+0xe>
			oled_write_d(pgm_read_byte(&(font8[*character-ASCII_SPACE][col])));
		}
		character++;
	}
	
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <setupInit>:
#include "setup.h"
#include "oled.h"
#include "timer.h"
#include "sleep.h"
	void setupInit(void){
	xmem_init();
     a3a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <xmem_init>
	USART_init(MYUBRR);
     a3e:	8f e1       	ldi	r24, 0x1F	; 31
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 49 06 	call	0xc92	; 0xc92 <USART_init>
	adcInit();
     a46:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adcInit>
	joystickInit();
     a4a:	0e 94 a7 02 	call	0x54e	; 0x54e <joystickInit>
	touchButton_init();
     a4e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <touchButton_init>
	oled_init();
     a52:	0e 94 bf 04 	call	0x97e	; 0x97e <oled_init>
	timer_init();
     a56:	0e 94 08 06 	call	0xc10	; 0xc10 <timer_init>
	sleep_init();
     a5a:	0e 94 84 02 	call	0x508	; 0x508 <sleep_init>
     a5e:	08 95       	ret

00000a60 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
	pos->left_pos = readAdc(LEFT_POS_CHANNEL);
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     a6c:	88 83       	st	Y, r24
	pos->right_pos = readAdc(RIGHT_POS_CHANNEL);
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <readAdc>
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <test_SRAM>:
#include <avr/io.h>
#include <stdio.h>
#include <stdlib.h>

void test_SRAM(void)
{
     a7c:	cf 92       	push	r12
     a7e:	df 92       	push	r13
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     a8c:	83 e6       	ldi	r24, 0x63	; 99
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	0e 94 0d 0b 	call	0x161a	; 0x161a <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     a98:	0e 94 ab 0a 	call	0x1556	; 0x1556 <rand>
     a9c:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     a9e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <srand>
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     aa6:	c1 2c       	mov	r12, r1
     aa8:	d1 2c       	mov	r13, r1

void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     aaa:	00 e0       	ldi	r16, 0x00	; 0
     aac:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     aae:	cb e7       	ldi	r28, 0x7B	; 123
     ab0:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     ab2:	0e 94 ab 0a 	call	0x1556	; 0x1556 <rand>
     ab6:	f6 01       	movw	r30, r12
     ab8:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     aba:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     abc:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     abe:	28 17       	cp	r18, r24
     ac0:	a9 f0       	breq	.+42     	; 0xaec <test_SRAM+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     ac2:	99 27       	eor	r25, r25
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	1f 92       	push	r1
     aca:	2f 93       	push	r18
     acc:	df 92       	push	r13
     ace:	cf 92       	push	r12
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	0e 94 0d 0b 	call	0x161a	; 0x161a <printf>
			write_errors++;
     ad8:	0f 5f       	subi	r16, 0xFF	; 255
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	8d b7       	in	r24, 0x3d	; 61
     ade:	9e b7       	in	r25, 0x3e	; 62
     ae0:	08 96       	adiw	r24, 0x08	; 8
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	9e bf       	out	0x3e, r25	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	c9 1a       	sub	r12, r25
     af0:	d9 0a       	sbc	r13, r25
     af2:	c1 14       	cp	r12, r1
     af4:	88 e0       	ldi	r24, 0x08	; 8
     af6:	d8 06       	cpc	r13, r24
     af8:	e1 f6       	brne	.-72     	; 0xab2 <test_SRAM+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     afa:	c7 01       	movw	r24, r14
     afc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b00:	c0 e0       	ldi	r28, 0x00	; 0
     b02:	d0 e0       	ldi	r29, 0x00	; 0
void test_SRAM(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     b04:	e1 2c       	mov	r14, r1
     b06:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     b08:	0f 2e       	mov	r0, r31
     b0a:	f5 eb       	ldi	r31, 0xB5	; 181
     b0c:	cf 2e       	mov	r12, r31
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	df 2e       	mov	r13, r31
     b12:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     b14:	0e 94 ab 0a 	call	0x1556	; 0x1556 <rand>
     b18:	fe 01       	movw	r30, r28
     b1a:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     b1c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     b1e:	28 17       	cp	r18, r24
     b20:	b1 f0       	breq	.+44     	; 0xb4e <test_SRAM+0xd2>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
     b22:	99 27       	eor	r25, r25
     b24:	9f 93       	push	r25
     b26:	8f 93       	push	r24
     b28:	1f 92       	push	r1
     b2a:	2f 93       	push	r18
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	df 92       	push	r13
     b32:	cf 92       	push	r12
     b34:	0e 94 0d 0b 	call	0x161a	; 0x161a <printf>
			i, retreived_value, some_value);
			retrieval_errors++;
     b38:	9f ef       	ldi	r25, 0xFF	; 255
     b3a:	e9 1a       	sub	r14, r25
     b3c:	f9 0a       	sbc	r15, r25
     b3e:	8d b7       	in	r24, 0x3d	; 61
     b40:	9e b7       	in	r25, 0x3e	; 62
     b42:	08 96       	adiw	r24, 0x08	; 8
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	9e bf       	out	0x3e, r25	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b4e:	21 96       	adiw	r28, 0x01	; 1
     b50:	c1 15       	cp	r28, r1
     b52:	98 e0       	ldi	r25, 0x08	; 8
     b54:	d9 07       	cpc	r29, r25
     b56:	f1 f6       	brne	.-68     	; 0xb14 <test_SRAM+0x98>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r",
			i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
     b58:	ff 92       	push	r15
     b5a:	ef 92       	push	r14
     b5c:	1f 93       	push	r17
     b5e:	0f 93       	push	r16
     b60:	83 ef       	ldi	r24, 0xF3	; 243
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	0e 94 0d 0b 	call	0x161a	; 0x161a <printf>
}
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	08 95       	ret

00000b8a <test_outputControllers>:

void test_outputControllers(joystick_position_t joystick_pos, slider_position_t slider_pos, buttonValues_t buttons) {
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	c6 2f       	mov	r28, r22
     b9c:	d7 2f       	mov	r29, r23
     b9e:	d8 2e       	mov	r13, r24
     ba0:	c9 2e       	mov	r12, r25
     ba2:	14 2f       	mov	r17, r20
     ba4:	05 2f       	mov	r16, r21
     ba6:	f2 2e       	mov	r15, r18
     ba8:	e3 2e       	mov	r14, r19
	
	printf("\033\143");
     baa:	8e e4       	ldi	r24, 0x4E	; 78
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	9f 93       	push	r25
     bb0:	8f 93       	push	r24
     bb2:	0e 94 0d 0b 	call	0x161a	; 0x161a <printf>
		
	printf("x: %i y: %i\n\rSl L: %i SL R: %i\n\rB L: %i B R: %i\n\rAngle: %i\n", joystick_pos.x_pos, joystick_pos.y_pos, slider_pos.left_pos, slider_pos.right_pos,  buttons.left_button, buttons.right_button, joystick_pos.angle);
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	1f 92       	push	r1
     bbc:	ef 92       	push	r14
     bbe:	1f 92       	push	r1
     bc0:	ff 92       	push	r15
     bc2:	1f 92       	push	r1
     bc4:	0f 93       	push	r16
     bc6:	1f 92       	push	r1
     bc8:	1f 93       	push	r17
     bca:	8d 2f       	mov	r24, r29
     bcc:	0d 2e       	mov	r0, r29
     bce:	00 0c       	add	r0, r0
     bd0:	99 0b       	sbc	r25, r25
     bd2:	9f 93       	push	r25
     bd4:	df 93       	push	r29
     bd6:	8c 2f       	mov	r24, r28
     bd8:	0c 2e       	mov	r0, r28
     bda:	00 0c       	add	r0, r0
     bdc:	99 0b       	sbc	r25, r25
     bde:	9f 93       	push	r25
     be0:	cf 93       	push	r28
     be2:	81 e5       	ldi	r24, 0x51	; 81
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	9f 93       	push	r25
     be8:	8f 93       	push	r24
     bea:	0e 94 0d 0b 	call	0x161a	; 0x161a <printf>

	
     bee:	8d b7       	in	r24, 0x3d	; 61
     bf0:	9e b7       	in	r25, 0x3e	; 62
     bf2:	42 96       	adiw	r24, 0x12	; 18
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	9e bf       	out	0x3e, r25	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	8d bf       	out	0x3d, r24	; 61
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	08 95       	ret

00000c10 <timer_init>:
#include "timer.h"


void timer_init() {
	//Disable global interrupts
	cli();
     c10:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     c12:	89 b7       	in	r24, 0x39	; 57
     c14:	80 62       	ori	r24, 0x20	; 32
     c16:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     c18:	1d bc       	out	0x2d, r1	; 45
     c1a:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     c1c:	80 e3       	ldi	r24, 0x30	; 48
     c1e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     c20:	85 e0       	ldi	r24, 0x05	; 5
     c22:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     c24:	80 ef       	ldi	r24, 0xF0	; 240
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	99 bd       	out	0x29, r25	; 41
     c2a:	88 bd       	out	0x28, r24	; 40
	
	
	////////////////////////TIMER 0////////////////////////////////////
	
	TIMSK |= (1 << OCIE0);
     c2c:	89 b7       	in	r24, 0x39	; 57
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0x0; 
     c32:	12 be       	out	0x32, r1	; 50
	
	TCCR0 = (1 << COM01 | 1 << COM00 | 1 << CS02 | 1 << CS00);
     c34:	85 e3       	ldi	r24, 0x35	; 53
     c36:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = TIMER0_RESET;
     c38:	11 be       	out	0x31, r1	; 49
	
	
	
	
	//Enable global interrupts
	sei();
     c3a:	78 94       	sei
     c3c:	08 95       	ret

00000c3e <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     c3e:	36 b3       	in	r19, 0x16	; 22
     c40:	26 b3       	in	r18, 0x16	; 22
     c42:	47 b3       	in	r20, 0x17	; 23
     c44:	31 70       	andi	r19, 0x01	; 1
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	bc 01       	movw	r22, r24
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <touchButton_init+0x14>
     c4e:	66 0f       	add	r22, r22
     c50:	77 1f       	adc	r23, r23
     c52:	3a 95       	dec	r19
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <touchButton_init+0x10>
     c56:	22 70       	andi	r18, 0x02	; 2
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <touchButton_init+0x20>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	2a 95       	dec	r18
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <touchButton_init+0x1c>
     c62:	86 2b       	or	r24, r22
     c64:	97 2b       	or	r25, r23
     c66:	80 95       	com	r24
     c68:	90 95       	com	r25
     c6a:	84 23       	and	r24, r20
     c6c:	87 bb       	out	0x17, r24	; 23
     c6e:	08 95       	ret

00000c70 <touchButton_readButtons>:
}
touchButton_readButtons(buttonValues_t * buttons) {
     c70:	fc 01       	movw	r30, r24
	buttons->left_button = !!(BUTTON_LEFT);
     c72:	96 b3       	in	r25, 0x16	; 22
     c74:	91 70       	andi	r25, 0x01	; 1
     c76:	90 83       	st	Z, r25
	buttons->right_button = !!(BUTTON_RIGHT);
     c78:	96 b3       	in	r25, 0x16	; 22
     c7a:	96 95       	lsr	r25
     c7c:	91 70       	andi	r25, 0x01	; 1
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	08 95       	ret

00000c82 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     c82:	5d 9b       	sbis	0x0b, 5	; 11
     c84:	fe cf       	rjmp	.-4      	; 0xc82 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     c86:	8c b9       	out	0x0c, r24	; 12
     c88:	08 95       	ret

00000c8a <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     c8a:	5f 9b       	sbis	0x0b, 7	; 11
     c8c:	fe cf       	rjmp	.-4      	; 0xc8a <USART_receiveChar>
		;
	
	return UDR0;
     c8e:	8c b1       	in	r24, 0x0c	; 12
     c90:	08 95       	ret

00000c92 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     c92:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     c94:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     c96:	88 e1       	ldi	r24, 0x18	; 24
     c98:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     c9a:	8e e8       	ldi	r24, 0x8E	; 142
     c9c:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     c9e:	65 e4       	ldi	r22, 0x45	; 69
     ca0:	76 e0       	ldi	r23, 0x06	; 6
     ca2:	81 e4       	ldi	r24, 0x41	; 65
     ca4:	96 e0       	ldi	r25, 0x06	; 6
     ca6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fdevopen>
     caa:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <uart+0x1>
     cae:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <uart>
     cb2:	08 95       	ret

00000cb4 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     cb4:	85 b7       	in	r24, 0x35	; 53
     cb6:	80 68       	ori	r24, 0x80	; 128
     cb8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     cba:	80 b7       	in	r24, 0x30	; 48
     cbc:	88 60       	ori	r24, 0x08	; 8
     cbe:	80 bf       	out	0x30, r24	; 48
     cc0:	08 95       	ret
     cc2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscA>
     cc6:	60 f0       	brcs	.+24     	; 0xce0 <xmem_init+0x2c>
     cc8:	80 e8       	ldi	r24, 0x80	; 128
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <xmem_init+0x1c>
     cce:	9e ef       	ldi	r25, 0xFE	; 254
     cd0:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscB>
     cd4:	28 f0       	brcs	.+10     	; 0xce0 <xmem_init+0x2c>
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	51 e0       	ldi	r21, 0x01	; 1
     cda:	71 f4       	brne	.+28     	; 0xcf8 <atan2+0x10>
     cdc:	5e ef       	ldi	r21, 0xFE	; 254
     cde:	0c c0       	rjmp	.+24     	; 0xcf8 <atan2+0x10>
     ce0:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>
     ce4:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_zero>

00000ce8 <atan2>:
     ce8:	e9 2f       	mov	r30, r25
     cea:	e0 78       	andi	r30, 0x80	; 128
     cec:	0e 94 07 08 	call	0x100e	; 0x100e <__fp_split3>
     cf0:	40 f3       	brcs	.-48     	; 0xcc2 <xmem_init+0xe>
     cf2:	09 2e       	mov	r0, r25
     cf4:	05 2a       	or	r0, r21
     cf6:	b1 f3       	breq	.-20     	; 0xce4 <xmem_init+0x30>
     cf8:	26 17       	cp	r18, r22
     cfa:	37 07       	cpc	r19, r23
     cfc:	48 07       	cpc	r20, r24
     cfe:	59 07       	cpc	r21, r25
     d00:	38 f0       	brcs	.+14     	; 0xd10 <atan2+0x28>
     d02:	0e 2e       	mov	r0, r30
     d04:	07 f8       	bld	r0, 7
     d06:	e0 25       	eor	r30, r0
     d08:	69 f0       	breq	.+26     	; 0xd24 <atan2+0x3c>
     d0a:	e0 25       	eor	r30, r0
     d0c:	e0 64       	ori	r30, 0x40	; 64
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <atan2+0x3c>
     d10:	ef 63       	ori	r30, 0x3F	; 63
     d12:	07 f8       	bld	r0, 7
     d14:	00 94       	com	r0
     d16:	07 fa       	bst	r0, 7
     d18:	db 01       	movw	r26, r22
     d1a:	b9 01       	movw	r22, r18
     d1c:	9d 01       	movw	r18, r26
     d1e:	dc 01       	movw	r26, r24
     d20:	ca 01       	movw	r24, r20
     d22:	ad 01       	movw	r20, r26
     d24:	ef 93       	push	r30
     d26:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divsf3_pse>
     d2a:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_round>
     d2e:	0e 94 a4 06 	call	0xd48	; 0xd48 <atan>
     d32:	5f 91       	pop	r21
     d34:	55 23       	and	r21, r21
     d36:	39 f0       	breq	.+14     	; 0xd46 <atan2+0x5e>
     d38:	2b ed       	ldi	r18, 0xDB	; 219
     d3a:	3f e0       	ldi	r19, 0x0F	; 15
     d3c:	49 e4       	ldi	r20, 0x49	; 73
     d3e:	50 fd       	sbrc	r21, 0
     d40:	49 ec       	ldi	r20, 0xC9	; 201
     d42:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__addsf3>
     d46:	08 95       	ret

00000d48 <atan>:
     d48:	df 93       	push	r29
     d4a:	dd 27       	eor	r29, r29
     d4c:	b9 2f       	mov	r27, r25
     d4e:	bf 77       	andi	r27, 0x7F	; 127
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	16 16       	cp	r1, r22
     d56:	17 06       	cpc	r1, r23
     d58:	48 07       	cpc	r20, r24
     d5a:	5b 07       	cpc	r21, r27
     d5c:	18 f4       	brcc	.+6      	; 0xd64 <atan+0x1c>
     d5e:	d9 2f       	mov	r29, r25
     d60:	0e 94 30 08 	call	0x1060	; 0x1060 <inverse>
     d64:	9f 93       	push	r25
     d66:	8f 93       	push	r24
     d68:	7f 93       	push	r23
     d6a:	6f 93       	push	r22
     d6c:	0e 94 a5 08 	call	0x114a	; 0x114a <square>
     d70:	e0 e7       	ldi	r30, 0x70	; 112
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_powser>
     d78:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_round>
     d7c:	2f 91       	pop	r18
     d7e:	3f 91       	pop	r19
     d80:	4f 91       	pop	r20
     d82:	5f 91       	pop	r21
     d84:	0e 94 4b 08 	call	0x1096	; 0x1096 <__mulsf3x>
     d88:	dd 23       	and	r29, r29
     d8a:	51 f0       	breq	.+20     	; 0xda0 <atan+0x58>
     d8c:	90 58       	subi	r25, 0x80	; 128
     d8e:	a2 ea       	ldi	r26, 0xA2	; 162
     d90:	2a ed       	ldi	r18, 0xDA	; 218
     d92:	3f e0       	ldi	r19, 0x0F	; 15
     d94:	49 ec       	ldi	r20, 0xC9	; 201
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	d0 78       	andi	r29, 0x80	; 128
     d9a:	5d 27       	eor	r21, r29
     d9c:	0e 94 c1 08 	call	0x1182	; 0x1182 <__addsf3x>
     da0:	df 91       	pop	r29
     da2:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_round>

00000da6 <__divsf3>:
     da6:	0e 94 e7 06 	call	0xdce	; 0xdce <__divsf3x>
     daa:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_round>
     dae:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscB>
     db2:	58 f0       	brcs	.+22     	; 0xdca <__divsf3+0x24>
     db4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscA>
     db8:	40 f0       	brcs	.+16     	; 0xdca <__divsf3+0x24>
     dba:	29 f4       	brne	.+10     	; 0xdc6 <__divsf3+0x20>
     dbc:	5f 3f       	cpi	r21, 0xFF	; 255
     dbe:	29 f0       	breq	.+10     	; 0xdca <__divsf3+0x24>
     dc0:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
     dc4:	51 11       	cpse	r21, r1
     dc6:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__fp_szero>
     dca:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>

00000dce <__divsf3x>:
     dce:	0e 94 07 08 	call	0x100e	; 0x100e <__fp_split3>
     dd2:	68 f3       	brcs	.-38     	; 0xdae <__divsf3+0x8>

00000dd4 <__divsf3_pse>:
     dd4:	99 23       	and	r25, r25
     dd6:	b1 f3       	breq	.-20     	; 0xdc4 <__divsf3+0x1e>
     dd8:	55 23       	and	r21, r21
     dda:	91 f3       	breq	.-28     	; 0xdc0 <__divsf3+0x1a>
     ddc:	95 1b       	sub	r25, r21
     dde:	55 0b       	sbc	r21, r21
     de0:	bb 27       	eor	r27, r27
     de2:	aa 27       	eor	r26, r26
     de4:	62 17       	cp	r22, r18
     de6:	73 07       	cpc	r23, r19
     de8:	84 07       	cpc	r24, r20
     dea:	38 f0       	brcs	.+14     	; 0xdfa <__divsf3_pse+0x26>
     dec:	9f 5f       	subi	r25, 0xFF	; 255
     dee:	5f 4f       	sbci	r21, 0xFF	; 255
     df0:	22 0f       	add	r18, r18
     df2:	33 1f       	adc	r19, r19
     df4:	44 1f       	adc	r20, r20
     df6:	aa 1f       	adc	r26, r26
     df8:	a9 f3       	breq	.-22     	; 0xde4 <__divsf3_pse+0x10>
     dfa:	35 d0       	rcall	.+106    	; 0xe66 <__divsf3_pse+0x92>
     dfc:	0e 2e       	mov	r0, r30
     dfe:	3a f0       	brmi	.+14     	; 0xe0e <__divsf3_pse+0x3a>
     e00:	e0 e8       	ldi	r30, 0x80	; 128
     e02:	32 d0       	rcall	.+100    	; 0xe68 <__divsf3_pse+0x94>
     e04:	91 50       	subi	r25, 0x01	; 1
     e06:	50 40       	sbci	r21, 0x00	; 0
     e08:	e6 95       	lsr	r30
     e0a:	00 1c       	adc	r0, r0
     e0c:	ca f7       	brpl	.-14     	; 0xe00 <__divsf3_pse+0x2c>
     e0e:	2b d0       	rcall	.+86     	; 0xe66 <__divsf3_pse+0x92>
     e10:	fe 2f       	mov	r31, r30
     e12:	29 d0       	rcall	.+82     	; 0xe66 <__divsf3_pse+0x92>
     e14:	66 0f       	add	r22, r22
     e16:	77 1f       	adc	r23, r23
     e18:	88 1f       	adc	r24, r24
     e1a:	bb 1f       	adc	r27, r27
     e1c:	26 17       	cp	r18, r22
     e1e:	37 07       	cpc	r19, r23
     e20:	48 07       	cpc	r20, r24
     e22:	ab 07       	cpc	r26, r27
     e24:	b0 e8       	ldi	r27, 0x80	; 128
     e26:	09 f0       	breq	.+2      	; 0xe2a <__divsf3_pse+0x56>
     e28:	bb 0b       	sbc	r27, r27
     e2a:	80 2d       	mov	r24, r0
     e2c:	bf 01       	movw	r22, r30
     e2e:	ff 27       	eor	r31, r31
     e30:	93 58       	subi	r25, 0x83	; 131
     e32:	5f 4f       	sbci	r21, 0xFF	; 255
     e34:	3a f0       	brmi	.+14     	; 0xe44 <__divsf3_pse+0x70>
     e36:	9e 3f       	cpi	r25, 0xFE	; 254
     e38:	51 05       	cpc	r21, r1
     e3a:	78 f0       	brcs	.+30     	; 0xe5a <__divsf3_pse+0x86>
     e3c:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
     e40:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__fp_szero>
     e44:	5f 3f       	cpi	r21, 0xFF	; 255
     e46:	e4 f3       	brlt	.-8      	; 0xe40 <__divsf3_pse+0x6c>
     e48:	98 3e       	cpi	r25, 0xE8	; 232
     e4a:	d4 f3       	brlt	.-12     	; 0xe40 <__divsf3_pse+0x6c>
     e4c:	86 95       	lsr	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	b7 95       	ror	r27
     e54:	f7 95       	ror	r31
     e56:	9f 5f       	subi	r25, 0xFF	; 255
     e58:	c9 f7       	brne	.-14     	; 0xe4c <__divsf3_pse+0x78>
     e5a:	88 0f       	add	r24, r24
     e5c:	91 1d       	adc	r25, r1
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	97 f9       	bld	r25, 7
     e64:	08 95       	ret
     e66:	e1 e0       	ldi	r30, 0x01	; 1
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	bb 1f       	adc	r27, r27
     e70:	62 17       	cp	r22, r18
     e72:	73 07       	cpc	r23, r19
     e74:	84 07       	cpc	r24, r20
     e76:	ba 07       	cpc	r27, r26
     e78:	20 f0       	brcs	.+8      	; 0xe82 <__divsf3_pse+0xae>
     e7a:	62 1b       	sub	r22, r18
     e7c:	73 0b       	sbc	r23, r19
     e7e:	84 0b       	sbc	r24, r20
     e80:	ba 0b       	sbc	r27, r26
     e82:	ee 1f       	adc	r30, r30
     e84:	88 f7       	brcc	.-30     	; 0xe68 <__divsf3_pse+0x94>
     e86:	e0 95       	com	r30
     e88:	08 95       	ret

00000e8a <__fixsfsi>:
     e8a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fixunssfsi>
     e8e:	68 94       	set
     e90:	b1 11       	cpse	r27, r1
     e92:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__fp_szero>
     e96:	08 95       	ret

00000e98 <__fixunssfsi>:
     e98:	0e 94 0f 08 	call	0x101e	; 0x101e <__fp_splitA>
     e9c:	88 f0       	brcs	.+34     	; 0xec0 <__fixunssfsi+0x28>
     e9e:	9f 57       	subi	r25, 0x7F	; 127
     ea0:	98 f0       	brcs	.+38     	; 0xec8 <__fixunssfsi+0x30>
     ea2:	b9 2f       	mov	r27, r25
     ea4:	99 27       	eor	r25, r25
     ea6:	b7 51       	subi	r27, 0x17	; 23
     ea8:	b0 f0       	brcs	.+44     	; 0xed6 <__fixunssfsi+0x3e>
     eaa:	e1 f0       	breq	.+56     	; 0xee4 <__fixunssfsi+0x4c>
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	1a f0       	brmi	.+6      	; 0xebc <__fixunssfsi+0x24>
     eb6:	ba 95       	dec	r27
     eb8:	c9 f7       	brne	.-14     	; 0xeac <__fixunssfsi+0x14>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <__fixunssfsi+0x4c>
     ebc:	b1 30       	cpi	r27, 0x01	; 1
     ebe:	91 f0       	breq	.+36     	; 0xee4 <__fixunssfsi+0x4c>
     ec0:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_zero>
     ec4:	b1 e0       	ldi	r27, 0x01	; 1
     ec6:	08 95       	ret
     ec8:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_zero>
     ecc:	67 2f       	mov	r22, r23
     ece:	78 2f       	mov	r23, r24
     ed0:	88 27       	eor	r24, r24
     ed2:	b8 5f       	subi	r27, 0xF8	; 248
     ed4:	39 f0       	breq	.+14     	; 0xee4 <__fixunssfsi+0x4c>
     ed6:	b9 3f       	cpi	r27, 0xF9	; 249
     ed8:	cc f3       	brlt	.-14     	; 0xecc <__fixunssfsi+0x34>
     eda:	86 95       	lsr	r24
     edc:	77 95       	ror	r23
     ede:	67 95       	ror	r22
     ee0:	b3 95       	inc	r27
     ee2:	d9 f7       	brne	.-10     	; 0xeda <__fixunssfsi+0x42>
     ee4:	3e f4       	brtc	.+14     	; 0xef4 <__fixunssfsi+0x5c>
     ee6:	90 95       	com	r25
     ee8:	80 95       	com	r24
     eea:	70 95       	com	r23
     eec:	61 95       	neg	r22
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	8f 4f       	sbci	r24, 0xFF	; 255
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	08 95       	ret

00000ef6 <__floatunsisf>:
     ef6:	e8 94       	clt
     ef8:	09 c0       	rjmp	.+18     	; 0xf0c <__floatsisf+0x12>

00000efa <__floatsisf>:
     efa:	97 fb       	bst	r25, 7
     efc:	3e f4       	brtc	.+14     	; 0xf0c <__floatsisf+0x12>
     efe:	90 95       	com	r25
     f00:	80 95       	com	r24
     f02:	70 95       	com	r23
     f04:	61 95       	neg	r22
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	99 23       	and	r25, r25
     f0e:	a9 f0       	breq	.+42     	; 0xf3a <__floatsisf+0x40>
     f10:	f9 2f       	mov	r31, r25
     f12:	96 e9       	ldi	r25, 0x96	; 150
     f14:	bb 27       	eor	r27, r27
     f16:	93 95       	inc	r25
     f18:	f6 95       	lsr	r31
     f1a:	87 95       	ror	r24
     f1c:	77 95       	ror	r23
     f1e:	67 95       	ror	r22
     f20:	b7 95       	ror	r27
     f22:	f1 11       	cpse	r31, r1
     f24:	f8 cf       	rjmp	.-16     	; 0xf16 <__floatsisf+0x1c>
     f26:	fa f4       	brpl	.+62     	; 0xf66 <__floatsisf+0x6c>
     f28:	bb 0f       	add	r27, r27
     f2a:	11 f4       	brne	.+4      	; 0xf30 <__floatsisf+0x36>
     f2c:	60 ff       	sbrs	r22, 0
     f2e:	1b c0       	rjmp	.+54     	; 0xf66 <__floatsisf+0x6c>
     f30:	6f 5f       	subi	r22, 0xFF	; 255
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	8f 4f       	sbci	r24, 0xFF	; 255
     f36:	9f 4f       	sbci	r25, 0xFF	; 255
     f38:	16 c0       	rjmp	.+44     	; 0xf66 <__floatsisf+0x6c>
     f3a:	88 23       	and	r24, r24
     f3c:	11 f0       	breq	.+4      	; 0xf42 <__floatsisf+0x48>
     f3e:	96 e9       	ldi	r25, 0x96	; 150
     f40:	11 c0       	rjmp	.+34     	; 0xf64 <__floatsisf+0x6a>
     f42:	77 23       	and	r23, r23
     f44:	21 f0       	breq	.+8      	; 0xf4e <__floatsisf+0x54>
     f46:	9e e8       	ldi	r25, 0x8E	; 142
     f48:	87 2f       	mov	r24, r23
     f4a:	76 2f       	mov	r23, r22
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <__floatsisf+0x5e>
     f4e:	66 23       	and	r22, r22
     f50:	71 f0       	breq	.+28     	; 0xf6e <__floatsisf+0x74>
     f52:	96 e8       	ldi	r25, 0x86	; 134
     f54:	86 2f       	mov	r24, r22
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	2a f0       	brmi	.+10     	; 0xf66 <__floatsisf+0x6c>
     f5c:	9a 95       	dec	r25
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	da f7       	brpl	.-10     	; 0xf5c <__floatsisf+0x62>
     f66:	88 0f       	add	r24, r24
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	97 f9       	bld	r25, 7
     f6e:	08 95       	ret

00000f70 <__fp_inf>:
     f70:	97 f9       	bld	r25, 7
     f72:	9f 67       	ori	r25, 0x7F	; 127
     f74:	80 e8       	ldi	r24, 0x80	; 128
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	08 95       	ret

00000f7c <__fp_nan>:
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	80 ec       	ldi	r24, 0xC0	; 192
     f80:	08 95       	ret

00000f82 <__fp_powser>:
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	1f 93       	push	r17
     f88:	0f 93       	push	r16
     f8a:	ff 92       	push	r15
     f8c:	ef 92       	push	r14
     f8e:	df 92       	push	r13
     f90:	7b 01       	movw	r14, r22
     f92:	8c 01       	movw	r16, r24
     f94:	68 94       	set
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <__fp_powser+0x22>
     f98:	da 2e       	mov	r13, r26
     f9a:	ef 01       	movw	r28, r30
     f9c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__mulsf3x>
     fa0:	fe 01       	movw	r30, r28
     fa2:	e8 94       	clt
     fa4:	a5 91       	lpm	r26, Z+
     fa6:	25 91       	lpm	r18, Z+
     fa8:	35 91       	lpm	r19, Z+
     faa:	45 91       	lpm	r20, Z+
     fac:	55 91       	lpm	r21, Z+
     fae:	a6 f3       	brts	.-24     	; 0xf98 <__fp_powser+0x16>
     fb0:	ef 01       	movw	r28, r30
     fb2:	0e 94 c1 08 	call	0x1182	; 0x1182 <__addsf3x>
     fb6:	fe 01       	movw	r30, r28
     fb8:	97 01       	movw	r18, r14
     fba:	a8 01       	movw	r20, r16
     fbc:	da 94       	dec	r13
     fbe:	69 f7       	brne	.-38     	; 0xf9a <__fp_powser+0x18>
     fc0:	df 90       	pop	r13
     fc2:	ef 90       	pop	r14
     fc4:	ff 90       	pop	r15
     fc6:	0f 91       	pop	r16
     fc8:	1f 91       	pop	r17
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <__fp_pscA>:
     fd0:	00 24       	eor	r0, r0
     fd2:	0a 94       	dec	r0
     fd4:	16 16       	cp	r1, r22
     fd6:	17 06       	cpc	r1, r23
     fd8:	18 06       	cpc	r1, r24
     fda:	09 06       	cpc	r0, r25
     fdc:	08 95       	ret

00000fde <__fp_pscB>:
     fde:	00 24       	eor	r0, r0
     fe0:	0a 94       	dec	r0
     fe2:	12 16       	cp	r1, r18
     fe4:	13 06       	cpc	r1, r19
     fe6:	14 06       	cpc	r1, r20
     fe8:	05 06       	cpc	r0, r21
     fea:	08 95       	ret

00000fec <__fp_round>:
     fec:	09 2e       	mov	r0, r25
     fee:	03 94       	inc	r0
     ff0:	00 0c       	add	r0, r0
     ff2:	11 f4       	brne	.+4      	; 0xff8 <__fp_round+0xc>
     ff4:	88 23       	and	r24, r24
     ff6:	52 f0       	brmi	.+20     	; 0x100c <__fp_round+0x20>
     ff8:	bb 0f       	add	r27, r27
     ffa:	40 f4       	brcc	.+16     	; 0x100c <__fp_round+0x20>
     ffc:	bf 2b       	or	r27, r31
     ffe:	11 f4       	brne	.+4      	; 0x1004 <__fp_round+0x18>
    1000:	60 ff       	sbrs	r22, 0
    1002:	04 c0       	rjmp	.+8      	; 0x100c <__fp_round+0x20>
    1004:	6f 5f       	subi	r22, 0xFF	; 255
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	08 95       	ret

0000100e <__fp_split3>:
    100e:	57 fd       	sbrc	r21, 7
    1010:	90 58       	subi	r25, 0x80	; 128
    1012:	44 0f       	add	r20, r20
    1014:	55 1f       	adc	r21, r21
    1016:	59 f0       	breq	.+22     	; 0x102e <__fp_splitA+0x10>
    1018:	5f 3f       	cpi	r21, 0xFF	; 255
    101a:	71 f0       	breq	.+28     	; 0x1038 <__fp_splitA+0x1a>
    101c:	47 95       	ror	r20

0000101e <__fp_splitA>:
    101e:	88 0f       	add	r24, r24
    1020:	97 fb       	bst	r25, 7
    1022:	99 1f       	adc	r25, r25
    1024:	61 f0       	breq	.+24     	; 0x103e <__fp_splitA+0x20>
    1026:	9f 3f       	cpi	r25, 0xFF	; 255
    1028:	79 f0       	breq	.+30     	; 0x1048 <__fp_splitA+0x2a>
    102a:	87 95       	ror	r24
    102c:	08 95       	ret
    102e:	12 16       	cp	r1, r18
    1030:	13 06       	cpc	r1, r19
    1032:	14 06       	cpc	r1, r20
    1034:	55 1f       	adc	r21, r21
    1036:	f2 cf       	rjmp	.-28     	; 0x101c <__fp_split3+0xe>
    1038:	46 95       	lsr	r20
    103a:	f1 df       	rcall	.-30     	; 0x101e <__fp_splitA>
    103c:	08 c0       	rjmp	.+16     	; 0x104e <__fp_splitA+0x30>
    103e:	16 16       	cp	r1, r22
    1040:	17 06       	cpc	r1, r23
    1042:	18 06       	cpc	r1, r24
    1044:	99 1f       	adc	r25, r25
    1046:	f1 cf       	rjmp	.-30     	; 0x102a <__fp_splitA+0xc>
    1048:	86 95       	lsr	r24
    104a:	71 05       	cpc	r23, r1
    104c:	61 05       	cpc	r22, r1
    104e:	08 94       	sec
    1050:	08 95       	ret

00001052 <__fp_zero>:
    1052:	e8 94       	clt

00001054 <__fp_szero>:
    1054:	bb 27       	eor	r27, r27
    1056:	66 27       	eor	r22, r22
    1058:	77 27       	eor	r23, r23
    105a:	cb 01       	movw	r24, r22
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <inverse>:
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	80 e8       	ldi	r24, 0x80	; 128
    106a:	9f e3       	ldi	r25, 0x3F	; 63
    106c:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__divsf3>

00001070 <__mulsf3>:
    1070:	0e 94 4b 08 	call	0x1096	; 0x1096 <__mulsf3x>
    1074:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_round>
    1078:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscA>
    107c:	38 f0       	brcs	.+14     	; 0x108c <__mulsf3+0x1c>
    107e:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscB>
    1082:	20 f0       	brcs	.+8      	; 0x108c <__mulsf3+0x1c>
    1084:	95 23       	and	r25, r21
    1086:	11 f0       	breq	.+4      	; 0x108c <__mulsf3+0x1c>
    1088:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
    108c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>
    1090:	11 24       	eor	r1, r1
    1092:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__fp_szero>

00001096 <__mulsf3x>:
    1096:	0e 94 07 08 	call	0x100e	; 0x100e <__fp_split3>
    109a:	70 f3       	brcs	.-36     	; 0x1078 <__mulsf3+0x8>

0000109c <__mulsf3_pse>:
    109c:	95 9f       	mul	r25, r21
    109e:	c1 f3       	breq	.-16     	; 0x1090 <__mulsf3+0x20>
    10a0:	95 0f       	add	r25, r21
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	55 1f       	adc	r21, r21
    10a6:	62 9f       	mul	r22, r18
    10a8:	f0 01       	movw	r30, r0
    10aa:	72 9f       	mul	r23, r18
    10ac:	bb 27       	eor	r27, r27
    10ae:	f0 0d       	add	r31, r0
    10b0:	b1 1d       	adc	r27, r1
    10b2:	63 9f       	mul	r22, r19
    10b4:	aa 27       	eor	r26, r26
    10b6:	f0 0d       	add	r31, r0
    10b8:	b1 1d       	adc	r27, r1
    10ba:	aa 1f       	adc	r26, r26
    10bc:	64 9f       	mul	r22, r20
    10be:	66 27       	eor	r22, r22
    10c0:	b0 0d       	add	r27, r0
    10c2:	a1 1d       	adc	r26, r1
    10c4:	66 1f       	adc	r22, r22
    10c6:	82 9f       	mul	r24, r18
    10c8:	22 27       	eor	r18, r18
    10ca:	b0 0d       	add	r27, r0
    10cc:	a1 1d       	adc	r26, r1
    10ce:	62 1f       	adc	r22, r18
    10d0:	73 9f       	mul	r23, r19
    10d2:	b0 0d       	add	r27, r0
    10d4:	a1 1d       	adc	r26, r1
    10d6:	62 1f       	adc	r22, r18
    10d8:	83 9f       	mul	r24, r19
    10da:	a0 0d       	add	r26, r0
    10dc:	61 1d       	adc	r22, r1
    10de:	22 1f       	adc	r18, r18
    10e0:	74 9f       	mul	r23, r20
    10e2:	33 27       	eor	r19, r19
    10e4:	a0 0d       	add	r26, r0
    10e6:	61 1d       	adc	r22, r1
    10e8:	23 1f       	adc	r18, r19
    10ea:	84 9f       	mul	r24, r20
    10ec:	60 0d       	add	r22, r0
    10ee:	21 1d       	adc	r18, r1
    10f0:	82 2f       	mov	r24, r18
    10f2:	76 2f       	mov	r23, r22
    10f4:	6a 2f       	mov	r22, r26
    10f6:	11 24       	eor	r1, r1
    10f8:	9f 57       	subi	r25, 0x7F	; 127
    10fa:	50 40       	sbci	r21, 0x00	; 0
    10fc:	9a f0       	brmi	.+38     	; 0x1124 <__mulsf3_pse+0x88>
    10fe:	f1 f0       	breq	.+60     	; 0x113c <__mulsf3_pse+0xa0>
    1100:	88 23       	and	r24, r24
    1102:	4a f0       	brmi	.+18     	; 0x1116 <__mulsf3_pse+0x7a>
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	bb 1f       	adc	r27, r27
    110a:	66 1f       	adc	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	91 50       	subi	r25, 0x01	; 1
    1112:	50 40       	sbci	r21, 0x00	; 0
    1114:	a9 f7       	brne	.-22     	; 0x1100 <__mulsf3_pse+0x64>
    1116:	9e 3f       	cpi	r25, 0xFE	; 254
    1118:	51 05       	cpc	r21, r1
    111a:	80 f0       	brcs	.+32     	; 0x113c <__mulsf3_pse+0xa0>
    111c:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
    1120:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__fp_szero>
    1124:	5f 3f       	cpi	r21, 0xFF	; 255
    1126:	e4 f3       	brlt	.-8      	; 0x1120 <__mulsf3_pse+0x84>
    1128:	98 3e       	cpi	r25, 0xE8	; 232
    112a:	d4 f3       	brlt	.-12     	; 0x1120 <__mulsf3_pse+0x84>
    112c:	86 95       	lsr	r24
    112e:	77 95       	ror	r23
    1130:	67 95       	ror	r22
    1132:	b7 95       	ror	r27
    1134:	f7 95       	ror	r31
    1136:	e7 95       	ror	r30
    1138:	9f 5f       	subi	r25, 0xFF	; 255
    113a:	c1 f7       	brne	.-16     	; 0x112c <__mulsf3_pse+0x90>
    113c:	fe 2b       	or	r31, r30
    113e:	88 0f       	add	r24, r24
    1140:	91 1d       	adc	r25, r1
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret

0000114a <square>:
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__mulsf3>

00001152 <__subsf3>:
    1152:	50 58       	subi	r21, 0x80	; 128

00001154 <__addsf3>:
    1154:	bb 27       	eor	r27, r27
    1156:	aa 27       	eor	r26, r26
    1158:	0e 94 c1 08 	call	0x1182	; 0x1182 <__addsf3x>
    115c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_round>
    1160:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscA>
    1164:	38 f0       	brcs	.+14     	; 0x1174 <__addsf3+0x20>
    1166:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscB>
    116a:	20 f0       	brcs	.+8      	; 0x1174 <__addsf3+0x20>
    116c:	39 f4       	brne	.+14     	; 0x117c <__addsf3+0x28>
    116e:	9f 3f       	cpi	r25, 0xFF	; 255
    1170:	19 f4       	brne	.+6      	; 0x1178 <__addsf3+0x24>
    1172:	26 f4       	brtc	.+8      	; 0x117c <__addsf3+0x28>
    1174:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>
    1178:	0e f4       	brtc	.+2      	; 0x117c <__addsf3+0x28>
    117a:	e0 95       	com	r30
    117c:	e7 fb       	bst	r30, 7
    117e:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>

00001182 <__addsf3x>:
    1182:	e9 2f       	mov	r30, r25
    1184:	0e 94 07 08 	call	0x100e	; 0x100e <__fp_split3>
    1188:	58 f3       	brcs	.-42     	; 0x1160 <__addsf3+0xc>
    118a:	ba 17       	cp	r27, r26
    118c:	62 07       	cpc	r22, r18
    118e:	73 07       	cpc	r23, r19
    1190:	84 07       	cpc	r24, r20
    1192:	95 07       	cpc	r25, r21
    1194:	20 f0       	brcs	.+8      	; 0x119e <__addsf3x+0x1c>
    1196:	79 f4       	brne	.+30     	; 0x11b6 <__addsf3x+0x34>
    1198:	a6 f5       	brtc	.+104    	; 0x1202 <__addsf3x+0x80>
    119a:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_zero>
    119e:	0e f4       	brtc	.+2      	; 0x11a2 <__addsf3x+0x20>
    11a0:	e0 95       	com	r30
    11a2:	0b 2e       	mov	r0, r27
    11a4:	ba 2f       	mov	r27, r26
    11a6:	a0 2d       	mov	r26, r0
    11a8:	0b 01       	movw	r0, r22
    11aa:	b9 01       	movw	r22, r18
    11ac:	90 01       	movw	r18, r0
    11ae:	0c 01       	movw	r0, r24
    11b0:	ca 01       	movw	r24, r20
    11b2:	a0 01       	movw	r20, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	ff 27       	eor	r31, r31
    11b8:	59 1b       	sub	r21, r25
    11ba:	99 f0       	breq	.+38     	; 0x11e2 <__addsf3x+0x60>
    11bc:	59 3f       	cpi	r21, 0xF9	; 249
    11be:	50 f4       	brcc	.+20     	; 0x11d4 <__addsf3x+0x52>
    11c0:	50 3e       	cpi	r21, 0xE0	; 224
    11c2:	68 f1       	brcs	.+90     	; 0x121e <__addsf3x+0x9c>
    11c4:	1a 16       	cp	r1, r26
    11c6:	f0 40       	sbci	r31, 0x00	; 0
    11c8:	a2 2f       	mov	r26, r18
    11ca:	23 2f       	mov	r18, r19
    11cc:	34 2f       	mov	r19, r20
    11ce:	44 27       	eor	r20, r20
    11d0:	58 5f       	subi	r21, 0xF8	; 248
    11d2:	f3 cf       	rjmp	.-26     	; 0x11ba <__addsf3x+0x38>
    11d4:	46 95       	lsr	r20
    11d6:	37 95       	ror	r19
    11d8:	27 95       	ror	r18
    11da:	a7 95       	ror	r26
    11dc:	f0 40       	sbci	r31, 0x00	; 0
    11de:	53 95       	inc	r21
    11e0:	c9 f7       	brne	.-14     	; 0x11d4 <__addsf3x+0x52>
    11e2:	7e f4       	brtc	.+30     	; 0x1202 <__addsf3x+0x80>
    11e4:	1f 16       	cp	r1, r31
    11e6:	ba 0b       	sbc	r27, r26
    11e8:	62 0b       	sbc	r22, r18
    11ea:	73 0b       	sbc	r23, r19
    11ec:	84 0b       	sbc	r24, r20
    11ee:	ba f0       	brmi	.+46     	; 0x121e <__addsf3x+0x9c>
    11f0:	91 50       	subi	r25, 0x01	; 1
    11f2:	a1 f0       	breq	.+40     	; 0x121c <__addsf3x+0x9a>
    11f4:	ff 0f       	add	r31, r31
    11f6:	bb 1f       	adc	r27, r27
    11f8:	66 1f       	adc	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	c2 f7       	brpl	.-16     	; 0x11f0 <__addsf3x+0x6e>
    1200:	0e c0       	rjmp	.+28     	; 0x121e <__addsf3x+0x9c>
    1202:	ba 0f       	add	r27, r26
    1204:	62 1f       	adc	r22, r18
    1206:	73 1f       	adc	r23, r19
    1208:	84 1f       	adc	r24, r20
    120a:	48 f4       	brcc	.+18     	; 0x121e <__addsf3x+0x9c>
    120c:	87 95       	ror	r24
    120e:	77 95       	ror	r23
    1210:	67 95       	ror	r22
    1212:	b7 95       	ror	r27
    1214:	f7 95       	ror	r31
    1216:	9e 3f       	cpi	r25, 0xFE	; 254
    1218:	08 f0       	brcs	.+2      	; 0x121c <__addsf3x+0x9a>
    121a:	b0 cf       	rjmp	.-160    	; 0x117c <__addsf3+0x28>
    121c:	93 95       	inc	r25
    121e:	88 0f       	add	r24, r24
    1220:	08 f0       	brcs	.+2      	; 0x1224 <__addsf3x+0xa2>
    1222:	99 27       	eor	r25, r25
    1224:	ee 0f       	add	r30, r30
    1226:	97 95       	ror	r25
    1228:	87 95       	ror	r24
    122a:	08 95       	ret

0000122c <__divmodhi4>:
    122c:	97 fb       	bst	r25, 7
    122e:	07 2e       	mov	r0, r23
    1230:	16 f4       	brtc	.+4      	; 0x1236 <__divmodhi4+0xa>
    1232:	00 94       	com	r0
    1234:	07 d0       	rcall	.+14     	; 0x1244 <__divmodhi4_neg1>
    1236:	77 fd       	sbrc	r23, 7
    1238:	09 d0       	rcall	.+18     	; 0x124c <__divmodhi4_neg2>
    123a:	0e 94 2a 09 	call	0x1254	; 0x1254 <__udivmodhi4>
    123e:	07 fc       	sbrc	r0, 7
    1240:	05 d0       	rcall	.+10     	; 0x124c <__divmodhi4_neg2>
    1242:	3e f4       	brtc	.+14     	; 0x1252 <__divmodhi4_exit>

00001244 <__divmodhi4_neg1>:
    1244:	90 95       	com	r25
    1246:	81 95       	neg	r24
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	08 95       	ret

0000124c <__divmodhi4_neg2>:
    124c:	70 95       	com	r23
    124e:	61 95       	neg	r22
    1250:	7f 4f       	sbci	r23, 0xFF	; 255

00001252 <__divmodhi4_exit>:
    1252:	08 95       	ret

00001254 <__udivmodhi4>:
    1254:	aa 1b       	sub	r26, r26
    1256:	bb 1b       	sub	r27, r27
    1258:	51 e1       	ldi	r21, 0x11	; 17
    125a:	07 c0       	rjmp	.+14     	; 0x126a <__udivmodhi4_ep>

0000125c <__udivmodhi4_loop>:
    125c:	aa 1f       	adc	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	a6 17       	cp	r26, r22
    1262:	b7 07       	cpc	r27, r23
    1264:	10 f0       	brcs	.+4      	; 0x126a <__udivmodhi4_ep>
    1266:	a6 1b       	sub	r26, r22
    1268:	b7 0b       	sbc	r27, r23

0000126a <__udivmodhi4_ep>:
    126a:	88 1f       	adc	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	5a 95       	dec	r21
    1270:	a9 f7       	brne	.-22     	; 0x125c <__udivmodhi4_loop>
    1272:	80 95       	com	r24
    1274:	90 95       	com	r25
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	08 95       	ret

0000127c <malloc>:
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	91 05       	cpc	r25, r1
    1288:	10 f4       	brcc	.+4      	; 0x128e <malloc+0x12>
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__flp>
    1292:	f0 91 a1 02 	lds	r31, 0x02A1	; 0x8002a1 <__flp+0x1>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	a0 e0       	ldi	r26, 0x00	; 0
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	30 97       	sbiw	r30, 0x00	; 0
    12a0:	19 f1       	breq	.+70     	; 0x12e8 <malloc+0x6c>
    12a2:	40 81       	ld	r20, Z
    12a4:	51 81       	ldd	r21, Z+1	; 0x01
    12a6:	02 81       	ldd	r16, Z+2	; 0x02
    12a8:	13 81       	ldd	r17, Z+3	; 0x03
    12aa:	48 17       	cp	r20, r24
    12ac:	59 07       	cpc	r21, r25
    12ae:	c8 f0       	brcs	.+50     	; 0x12e2 <malloc+0x66>
    12b0:	84 17       	cp	r24, r20
    12b2:	95 07       	cpc	r25, r21
    12b4:	69 f4       	brne	.+26     	; 0x12d0 <malloc+0x54>
    12b6:	10 97       	sbiw	r26, 0x00	; 0
    12b8:	31 f0       	breq	.+12     	; 0x12c6 <malloc+0x4a>
    12ba:	12 96       	adiw	r26, 0x02	; 2
    12bc:	0c 93       	st	X, r16
    12be:	12 97       	sbiw	r26, 0x02	; 2
    12c0:	13 96       	adiw	r26, 0x03	; 3
    12c2:	1c 93       	st	X, r17
    12c4:	27 c0       	rjmp	.+78     	; 0x1314 <malloc+0x98>
    12c6:	00 93 a0 02 	sts	0x02A0, r16	; 0x8002a0 <__flp>
    12ca:	10 93 a1 02 	sts	0x02A1, r17	; 0x8002a1 <__flp+0x1>
    12ce:	22 c0       	rjmp	.+68     	; 0x1314 <malloc+0x98>
    12d0:	21 15       	cp	r18, r1
    12d2:	31 05       	cpc	r19, r1
    12d4:	19 f0       	breq	.+6      	; 0x12dc <malloc+0x60>
    12d6:	42 17       	cp	r20, r18
    12d8:	53 07       	cpc	r21, r19
    12da:	18 f4       	brcc	.+6      	; 0x12e2 <malloc+0x66>
    12dc:	9a 01       	movw	r18, r20
    12de:	bd 01       	movw	r22, r26
    12e0:	ef 01       	movw	r28, r30
    12e2:	df 01       	movw	r26, r30
    12e4:	f8 01       	movw	r30, r16
    12e6:	db cf       	rjmp	.-74     	; 0x129e <malloc+0x22>
    12e8:	21 15       	cp	r18, r1
    12ea:	31 05       	cpc	r19, r1
    12ec:	f9 f0       	breq	.+62     	; 0x132c <malloc+0xb0>
    12ee:	28 1b       	sub	r18, r24
    12f0:	39 0b       	sbc	r19, r25
    12f2:	24 30       	cpi	r18, 0x04	; 4
    12f4:	31 05       	cpc	r19, r1
    12f6:	80 f4       	brcc	.+32     	; 0x1318 <malloc+0x9c>
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	9b 81       	ldd	r25, Y+3	; 0x03
    12fc:	61 15       	cp	r22, r1
    12fe:	71 05       	cpc	r23, r1
    1300:	21 f0       	breq	.+8      	; 0x130a <malloc+0x8e>
    1302:	fb 01       	movw	r30, r22
    1304:	93 83       	std	Z+3, r25	; 0x03
    1306:	82 83       	std	Z+2, r24	; 0x02
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <malloc+0x96>
    130a:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <__flp+0x1>
    130e:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__flp>
    1312:	fe 01       	movw	r30, r28
    1314:	32 96       	adiw	r30, 0x02	; 2
    1316:	44 c0       	rjmp	.+136    	; 0x13a0 <malloc+0x124>
    1318:	fe 01       	movw	r30, r28
    131a:	e2 0f       	add	r30, r18
    131c:	f3 1f       	adc	r31, r19
    131e:	81 93       	st	Z+, r24
    1320:	91 93       	st	Z+, r25
    1322:	22 50       	subi	r18, 0x02	; 2
    1324:	31 09       	sbc	r19, r1
    1326:	39 83       	std	Y+1, r19	; 0x01
    1328:	28 83       	st	Y, r18
    132a:	3a c0       	rjmp	.+116    	; 0x13a0 <malloc+0x124>
    132c:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <__brkval>
    1330:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <__brkval+0x1>
    1334:	23 2b       	or	r18, r19
    1336:	41 f4       	brne	.+16     	; 0x1348 <malloc+0xcc>
    1338:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    133c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1340:	30 93 9f 02 	sts	0x029F, r19	; 0x80029f <__brkval+0x1>
    1344:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <__brkval>
    1348:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    134c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1350:	21 15       	cp	r18, r1
    1352:	31 05       	cpc	r19, r1
    1354:	41 f4       	brne	.+16     	; 0x1366 <malloc+0xea>
    1356:	2d b7       	in	r18, 0x3d	; 61
    1358:	3e b7       	in	r19, 0x3e	; 62
    135a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    135e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1362:	24 1b       	sub	r18, r20
    1364:	35 0b       	sbc	r19, r21
    1366:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <__brkval>
    136a:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <__brkval+0x1>
    136e:	e2 17       	cp	r30, r18
    1370:	f3 07       	cpc	r31, r19
    1372:	a0 f4       	brcc	.+40     	; 0x139c <malloc+0x120>
    1374:	2e 1b       	sub	r18, r30
    1376:	3f 0b       	sbc	r19, r31
    1378:	28 17       	cp	r18, r24
    137a:	39 07       	cpc	r19, r25
    137c:	78 f0       	brcs	.+30     	; 0x139c <malloc+0x120>
    137e:	ac 01       	movw	r20, r24
    1380:	4e 5f       	subi	r20, 0xFE	; 254
    1382:	5f 4f       	sbci	r21, 0xFF	; 255
    1384:	24 17       	cp	r18, r20
    1386:	35 07       	cpc	r19, r21
    1388:	48 f0       	brcs	.+18     	; 0x139c <malloc+0x120>
    138a:	4e 0f       	add	r20, r30
    138c:	5f 1f       	adc	r21, r31
    138e:	50 93 9f 02 	sts	0x029F, r21	; 0x80029f <__brkval+0x1>
    1392:	40 93 9e 02 	sts	0x029E, r20	; 0x80029e <__brkval>
    1396:	81 93       	st	Z+, r24
    1398:	91 93       	st	Z+, r25
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <malloc+0x124>
    139c:	e0 e0       	ldi	r30, 0x00	; 0
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	cf 01       	movw	r24, r30
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <free>:
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <free+0xa>
    13b4:	81 c0       	rjmp	.+258    	; 0x14b8 <free+0x10c>
    13b6:	fc 01       	movw	r30, r24
    13b8:	32 97       	sbiw	r30, 0x02	; 2
    13ba:	13 82       	std	Z+3, r1	; 0x03
    13bc:	12 82       	std	Z+2, r1	; 0x02
    13be:	a0 91 a0 02 	lds	r26, 0x02A0	; 0x8002a0 <__flp>
    13c2:	b0 91 a1 02 	lds	r27, 0x02A1	; 0x8002a1 <__flp+0x1>
    13c6:	10 97       	sbiw	r26, 0x00	; 0
    13c8:	81 f4       	brne	.+32     	; 0x13ea <free+0x3e>
    13ca:	20 81       	ld	r18, Z
    13cc:	31 81       	ldd	r19, Z+1	; 0x01
    13ce:	82 0f       	add	r24, r18
    13d0:	93 1f       	adc	r25, r19
    13d2:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <__brkval>
    13d6:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <__brkval+0x1>
    13da:	28 17       	cp	r18, r24
    13dc:	39 07       	cpc	r19, r25
    13de:	51 f5       	brne	.+84     	; 0x1434 <free+0x88>
    13e0:	f0 93 9f 02 	sts	0x029F, r31	; 0x80029f <__brkval+0x1>
    13e4:	e0 93 9e 02 	sts	0x029E, r30	; 0x80029e <__brkval>
    13e8:	67 c0       	rjmp	.+206    	; 0x14b8 <free+0x10c>
    13ea:	ed 01       	movw	r28, r26
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	ce 17       	cp	r28, r30
    13f2:	df 07       	cpc	r29, r31
    13f4:	40 f4       	brcc	.+16     	; 0x1406 <free+0x5a>
    13f6:	4a 81       	ldd	r20, Y+2	; 0x02
    13f8:	5b 81       	ldd	r21, Y+3	; 0x03
    13fa:	9e 01       	movw	r18, r28
    13fc:	41 15       	cp	r20, r1
    13fe:	51 05       	cpc	r21, r1
    1400:	f1 f0       	breq	.+60     	; 0x143e <free+0x92>
    1402:	ea 01       	movw	r28, r20
    1404:	f5 cf       	rjmp	.-22     	; 0x13f0 <free+0x44>
    1406:	d3 83       	std	Z+3, r29	; 0x03
    1408:	c2 83       	std	Z+2, r28	; 0x02
    140a:	40 81       	ld	r20, Z
    140c:	51 81       	ldd	r21, Z+1	; 0x01
    140e:	84 0f       	add	r24, r20
    1410:	95 1f       	adc	r25, r21
    1412:	c8 17       	cp	r28, r24
    1414:	d9 07       	cpc	r29, r25
    1416:	59 f4       	brne	.+22     	; 0x142e <free+0x82>
    1418:	88 81       	ld	r24, Y
    141a:	99 81       	ldd	r25, Y+1	; 0x01
    141c:	84 0f       	add	r24, r20
    141e:	95 1f       	adc	r25, r21
    1420:	02 96       	adiw	r24, 0x02	; 2
    1422:	91 83       	std	Z+1, r25	; 0x01
    1424:	80 83       	st	Z, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	9b 81       	ldd	r25, Y+3	; 0x03
    142a:	93 83       	std	Z+3, r25	; 0x03
    142c:	82 83       	std	Z+2, r24	; 0x02
    142e:	21 15       	cp	r18, r1
    1430:	31 05       	cpc	r19, r1
    1432:	29 f4       	brne	.+10     	; 0x143e <free+0x92>
    1434:	f0 93 a1 02 	sts	0x02A1, r31	; 0x8002a1 <__flp+0x1>
    1438:	e0 93 a0 02 	sts	0x02A0, r30	; 0x8002a0 <__flp>
    143c:	3d c0       	rjmp	.+122    	; 0x14b8 <free+0x10c>
    143e:	e9 01       	movw	r28, r18
    1440:	fb 83       	std	Y+3, r31	; 0x03
    1442:	ea 83       	std	Y+2, r30	; 0x02
    1444:	49 91       	ld	r20, Y+
    1446:	59 91       	ld	r21, Y+
    1448:	c4 0f       	add	r28, r20
    144a:	d5 1f       	adc	r29, r21
    144c:	ec 17       	cp	r30, r28
    144e:	fd 07       	cpc	r31, r29
    1450:	61 f4       	brne	.+24     	; 0x146a <free+0xbe>
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	84 0f       	add	r24, r20
    1458:	95 1f       	adc	r25, r21
    145a:	02 96       	adiw	r24, 0x02	; 2
    145c:	e9 01       	movw	r28, r18
    145e:	99 83       	std	Y+1, r25	; 0x01
    1460:	88 83       	st	Y, r24
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	9b 83       	std	Y+3, r25	; 0x03
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	e0 e0       	ldi	r30, 0x00	; 0
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	12 96       	adiw	r26, 0x02	; 2
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	13 97       	sbiw	r26, 0x03	; 3
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	19 f0       	breq	.+6      	; 0x1480 <free+0xd4>
    147a:	fd 01       	movw	r30, r26
    147c:	dc 01       	movw	r26, r24
    147e:	f7 cf       	rjmp	.-18     	; 0x146e <free+0xc2>
    1480:	8d 91       	ld	r24, X+
    1482:	9c 91       	ld	r25, X
    1484:	11 97       	sbiw	r26, 0x01	; 1
    1486:	9d 01       	movw	r18, r26
    1488:	2e 5f       	subi	r18, 0xFE	; 254
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <__brkval>
    1494:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <__brkval+0x1>
    1498:	28 17       	cp	r18, r24
    149a:	39 07       	cpc	r19, r25
    149c:	69 f4       	brne	.+26     	; 0x14b8 <free+0x10c>
    149e:	30 97       	sbiw	r30, 0x00	; 0
    14a0:	29 f4       	brne	.+10     	; 0x14ac <free+0x100>
    14a2:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <__flp+0x1>
    14a6:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__flp>
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <free+0x104>
    14ac:	13 82       	std	Z+3, r1	; 0x03
    14ae:	12 82       	std	Z+2, r1	; 0x02
    14b0:	b0 93 9f 02 	sts	0x029F, r27	; 0x80029f <__brkval+0x1>
    14b4:	a0 93 9e 02 	sts	0x029E, r26	; 0x80029e <__brkval>
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <do_rand>:
    14be:	8f 92       	push	r8
    14c0:	9f 92       	push	r9
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	ec 01       	movw	r28, r24
    14d4:	68 81       	ld	r22, Y
    14d6:	79 81       	ldd	r23, Y+1	; 0x01
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	61 15       	cp	r22, r1
    14de:	71 05       	cpc	r23, r1
    14e0:	81 05       	cpc	r24, r1
    14e2:	91 05       	cpc	r25, r1
    14e4:	21 f4       	brne	.+8      	; 0x14ee <do_rand+0x30>
    14e6:	64 e2       	ldi	r22, 0x24	; 36
    14e8:	79 ed       	ldi	r23, 0xD9	; 217
    14ea:	8b e5       	ldi	r24, 0x5B	; 91
    14ec:	97 e0       	ldi	r25, 0x07	; 7
    14ee:	2d e1       	ldi	r18, 0x1D	; 29
    14f0:	33 ef       	ldi	r19, 0xF3	; 243
    14f2:	41 e0       	ldi	r20, 0x01	; 1
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__divmodsi4>
    14fa:	49 01       	movw	r8, r18
    14fc:	5a 01       	movw	r10, r20
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	a7 ea       	ldi	r26, 0xA7	; 167
    1504:	b1 e4       	ldi	r27, 0x41	; 65
    1506:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__muluhisi3>
    150a:	6b 01       	movw	r12, r22
    150c:	7c 01       	movw	r14, r24
    150e:	ac ee       	ldi	r26, 0xEC	; 236
    1510:	b4 ef       	ldi	r27, 0xF4	; 244
    1512:	a5 01       	movw	r20, r10
    1514:	94 01       	movw	r18, r8
    1516:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulohisi3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	8c 0d       	add	r24, r12
    1520:	9d 1d       	adc	r25, r13
    1522:	ae 1d       	adc	r26, r14
    1524:	bf 1d       	adc	r27, r15
    1526:	b7 ff       	sbrs	r27, 7
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <do_rand+0x72>
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	a1 09       	sbc	r26, r1
    152e:	b0 48       	sbci	r27, 0x80	; 128
    1530:	88 83       	st	Y, r24
    1532:	99 83       	std	Y+1, r25	; 0x01
    1534:	aa 83       	std	Y+2, r26	; 0x02
    1536:	bb 83       	std	Y+3, r27	; 0x03
    1538:	9f 77       	andi	r25, 0x7F	; 127
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	cf 90       	pop	r12
    1546:	bf 90       	pop	r11
    1548:	af 90       	pop	r10
    154a:	9f 90       	pop	r9
    154c:	8f 90       	pop	r8
    154e:	08 95       	ret

00001550 <rand_r>:
    1550:	0e 94 5f 0a 	call	0x14be	; 0x14be <do_rand>
    1554:	08 95       	ret

00001556 <rand>:
    1556:	86 e0       	ldi	r24, 0x06	; 6
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 5f 0a 	call	0x14be	; 0x14be <do_rand>
    155e:	08 95       	ret

00001560 <srand>:
    1560:	a0 e0       	ldi	r26, 0x00	; 0
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1568:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    156c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1570:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1574:	08 95       	ret

00001576 <strcpy>:
    1576:	fb 01       	movw	r30, r22
    1578:	dc 01       	movw	r26, r24
    157a:	01 90       	ld	r0, Z+
    157c:	0d 92       	st	X+, r0
    157e:	00 20       	and	r0, r0
    1580:	e1 f7       	brne	.-8      	; 0x157a <strcpy+0x4>
    1582:	08 95       	ret

00001584 <fdevopen>:
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	31 f4       	brne	.+12     	; 0x159c <fdevopen+0x18>
    1590:	61 15       	cp	r22, r1
    1592:	71 05       	cpc	r23, r1
    1594:	19 f4       	brne	.+6      	; 0x159c <fdevopen+0x18>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	3a c0       	rjmp	.+116    	; 0x1610 <fdevopen+0x8c>
    159c:	8b 01       	movw	r16, r22
    159e:	ec 01       	movw	r28, r24
    15a0:	6e e0       	ldi	r22, 0x0E	; 14
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <calloc>
    15ac:	fc 01       	movw	r30, r24
    15ae:	89 2b       	or	r24, r25
    15b0:	91 f3       	breq	.-28     	; 0x1596 <fdevopen+0x12>
    15b2:	80 e8       	ldi	r24, 0x80	; 128
    15b4:	83 83       	std	Z+3, r24	; 0x03
    15b6:	01 15       	cp	r16, r1
    15b8:	11 05       	cpc	r17, r1
    15ba:	71 f0       	breq	.+28     	; 0x15d8 <fdevopen+0x54>
    15bc:	13 87       	std	Z+11, r17	; 0x0b
    15be:	02 87       	std	Z+10, r16	; 0x0a
    15c0:	81 e8       	ldi	r24, 0x81	; 129
    15c2:	83 83       	std	Z+3, r24	; 0x03
    15c4:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__iob>
    15c8:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <__iob+0x1>
    15cc:	89 2b       	or	r24, r25
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <fdevopen+0x54>
    15d0:	f0 93 a3 02 	sts	0x02A3, r31	; 0x8002a3 <__iob+0x1>
    15d4:	e0 93 a2 02 	sts	0x02A2, r30	; 0x8002a2 <__iob>
    15d8:	20 97       	sbiw	r28, 0x00	; 0
    15da:	c9 f0       	breq	.+50     	; 0x160e <fdevopen+0x8a>
    15dc:	d1 87       	std	Z+9, r29	; 0x09
    15de:	c0 87       	std	Z+8, r28	; 0x08
    15e0:	83 81       	ldd	r24, Z+3	; 0x03
    15e2:	82 60       	ori	r24, 0x02	; 2
    15e4:	83 83       	std	Z+3, r24	; 0x03
    15e6:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__iob+0x2>
    15ea:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <__iob+0x3>
    15ee:	89 2b       	or	r24, r25
    15f0:	71 f4       	brne	.+28     	; 0x160e <fdevopen+0x8a>
    15f2:	f0 93 a5 02 	sts	0x02A5, r31	; 0x8002a5 <__iob+0x3>
    15f6:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <__iob+0x2>
    15fa:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <__iob+0x4>
    15fe:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <__iob+0x5>
    1602:	89 2b       	or	r24, r25
    1604:	21 f4       	brne	.+8      	; 0x160e <fdevopen+0x8a>
    1606:	f0 93 a7 02 	sts	0x02A7, r31	; 0x8002a7 <__iob+0x5>
    160a:	e0 93 a6 02 	sts	0x02A6, r30	; 0x8002a6 <__iob+0x4>
    160e:	cf 01       	movw	r24, r30
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret

0000161a <printf>:
    161a:	a0 e0       	ldi	r26, 0x00	; 0
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e3 e1       	ldi	r30, 0x13	; 19
    1620:	fb e0       	ldi	r31, 0x0B	; 11
    1622:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__prologue_saves__+0x20>
    1626:	ae 01       	movw	r20, r28
    1628:	4b 5f       	subi	r20, 0xFB	; 251
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	fa 01       	movw	r30, r20
    162e:	61 91       	ld	r22, Z+
    1630:	71 91       	ld	r23, Z+
    1632:	af 01       	movw	r20, r30
    1634:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__iob+0x2>
    1638:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <__iob+0x3>
    163c:	0e 94 23 0b 	call	0x1646	; 0x1646 <vfprintf>
    1640:	e2 e0       	ldi	r30, 0x02	; 2
    1642:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__epilogue_restores__+0x20>

00001646 <vfprintf>:
    1646:	ab e0       	ldi	r26, 0x0B	; 11
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e9 e2       	ldi	r30, 0x29	; 41
    164c:	fb e0       	ldi	r31, 0x0B	; 11
    164e:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__prologue_saves__>
    1652:	6c 01       	movw	r12, r24
    1654:	7b 01       	movw	r14, r22
    1656:	8a 01       	movw	r16, r20
    1658:	fc 01       	movw	r30, r24
    165a:	17 82       	std	Z+7, r1	; 0x07
    165c:	16 82       	std	Z+6, r1	; 0x06
    165e:	83 81       	ldd	r24, Z+3	; 0x03
    1660:	81 ff       	sbrs	r24, 1
    1662:	cc c1       	rjmp	.+920    	; 0x19fc <vfprintf+0x3b6>
    1664:	ce 01       	movw	r24, r28
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	3c 01       	movw	r6, r24
    166a:	f6 01       	movw	r30, r12
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	f7 01       	movw	r30, r14
    1670:	93 fd       	sbrc	r25, 3
    1672:	85 91       	lpm	r24, Z+
    1674:	93 ff       	sbrs	r25, 3
    1676:	81 91       	ld	r24, Z+
    1678:	7f 01       	movw	r14, r30
    167a:	88 23       	and	r24, r24
    167c:	09 f4       	brne	.+2      	; 0x1680 <vfprintf+0x3a>
    167e:	ba c1       	rjmp	.+884    	; 0x19f4 <vfprintf+0x3ae>
    1680:	85 32       	cpi	r24, 0x25	; 37
    1682:	39 f4       	brne	.+14     	; 0x1692 <vfprintf+0x4c>
    1684:	93 fd       	sbrc	r25, 3
    1686:	85 91       	lpm	r24, Z+
    1688:	93 ff       	sbrs	r25, 3
    168a:	81 91       	ld	r24, Z+
    168c:	7f 01       	movw	r14, r30
    168e:	85 32       	cpi	r24, 0x25	; 37
    1690:	29 f4       	brne	.+10     	; 0x169c <vfprintf+0x56>
    1692:	b6 01       	movw	r22, r12
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    169a:	e7 cf       	rjmp	.-50     	; 0x166a <vfprintf+0x24>
    169c:	91 2c       	mov	r9, r1
    169e:	21 2c       	mov	r2, r1
    16a0:	31 2c       	mov	r3, r1
    16a2:	ff e1       	ldi	r31, 0x1F	; 31
    16a4:	f3 15       	cp	r31, r3
    16a6:	d8 f0       	brcs	.+54     	; 0x16de <vfprintf+0x98>
    16a8:	8b 32       	cpi	r24, 0x2B	; 43
    16aa:	79 f0       	breq	.+30     	; 0x16ca <vfprintf+0x84>
    16ac:	38 f4       	brcc	.+14     	; 0x16bc <vfprintf+0x76>
    16ae:	80 32       	cpi	r24, 0x20	; 32
    16b0:	79 f0       	breq	.+30     	; 0x16d0 <vfprintf+0x8a>
    16b2:	83 32       	cpi	r24, 0x23	; 35
    16b4:	a1 f4       	brne	.+40     	; 0x16de <vfprintf+0x98>
    16b6:	23 2d       	mov	r18, r3
    16b8:	20 61       	ori	r18, 0x10	; 16
    16ba:	1d c0       	rjmp	.+58     	; 0x16f6 <vfprintf+0xb0>
    16bc:	8d 32       	cpi	r24, 0x2D	; 45
    16be:	61 f0       	breq	.+24     	; 0x16d8 <vfprintf+0x92>
    16c0:	80 33       	cpi	r24, 0x30	; 48
    16c2:	69 f4       	brne	.+26     	; 0x16de <vfprintf+0x98>
    16c4:	23 2d       	mov	r18, r3
    16c6:	21 60       	ori	r18, 0x01	; 1
    16c8:	16 c0       	rjmp	.+44     	; 0x16f6 <vfprintf+0xb0>
    16ca:	83 2d       	mov	r24, r3
    16cc:	82 60       	ori	r24, 0x02	; 2
    16ce:	38 2e       	mov	r3, r24
    16d0:	e3 2d       	mov	r30, r3
    16d2:	e4 60       	ori	r30, 0x04	; 4
    16d4:	3e 2e       	mov	r3, r30
    16d6:	2a c0       	rjmp	.+84     	; 0x172c <vfprintf+0xe6>
    16d8:	f3 2d       	mov	r31, r3
    16da:	f8 60       	ori	r31, 0x08	; 8
    16dc:	1d c0       	rjmp	.+58     	; 0x1718 <vfprintf+0xd2>
    16de:	37 fc       	sbrc	r3, 7
    16e0:	2d c0       	rjmp	.+90     	; 0x173c <vfprintf+0xf6>
    16e2:	20 ed       	ldi	r18, 0xD0	; 208
    16e4:	28 0f       	add	r18, r24
    16e6:	2a 30       	cpi	r18, 0x0A	; 10
    16e8:	40 f0       	brcs	.+16     	; 0x16fa <vfprintf+0xb4>
    16ea:	8e 32       	cpi	r24, 0x2E	; 46
    16ec:	b9 f4       	brne	.+46     	; 0x171c <vfprintf+0xd6>
    16ee:	36 fc       	sbrc	r3, 6
    16f0:	81 c1       	rjmp	.+770    	; 0x19f4 <vfprintf+0x3ae>
    16f2:	23 2d       	mov	r18, r3
    16f4:	20 64       	ori	r18, 0x40	; 64
    16f6:	32 2e       	mov	r3, r18
    16f8:	19 c0       	rjmp	.+50     	; 0x172c <vfprintf+0xe6>
    16fa:	36 fe       	sbrs	r3, 6
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <vfprintf+0xc4>
    16fe:	8a e0       	ldi	r24, 0x0A	; 10
    1700:	98 9e       	mul	r9, r24
    1702:	20 0d       	add	r18, r0
    1704:	11 24       	eor	r1, r1
    1706:	92 2e       	mov	r9, r18
    1708:	11 c0       	rjmp	.+34     	; 0x172c <vfprintf+0xe6>
    170a:	ea e0       	ldi	r30, 0x0A	; 10
    170c:	2e 9e       	mul	r2, r30
    170e:	20 0d       	add	r18, r0
    1710:	11 24       	eor	r1, r1
    1712:	22 2e       	mov	r2, r18
    1714:	f3 2d       	mov	r31, r3
    1716:	f0 62       	ori	r31, 0x20	; 32
    1718:	3f 2e       	mov	r3, r31
    171a:	08 c0       	rjmp	.+16     	; 0x172c <vfprintf+0xe6>
    171c:	8c 36       	cpi	r24, 0x6C	; 108
    171e:	21 f4       	brne	.+8      	; 0x1728 <vfprintf+0xe2>
    1720:	83 2d       	mov	r24, r3
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	38 2e       	mov	r3, r24
    1726:	02 c0       	rjmp	.+4      	; 0x172c <vfprintf+0xe6>
    1728:	88 36       	cpi	r24, 0x68	; 104
    172a:	41 f4       	brne	.+16     	; 0x173c <vfprintf+0xf6>
    172c:	f7 01       	movw	r30, r14
    172e:	93 fd       	sbrc	r25, 3
    1730:	85 91       	lpm	r24, Z+
    1732:	93 ff       	sbrs	r25, 3
    1734:	81 91       	ld	r24, Z+
    1736:	7f 01       	movw	r14, r30
    1738:	81 11       	cpse	r24, r1
    173a:	b3 cf       	rjmp	.-154    	; 0x16a2 <vfprintf+0x5c>
    173c:	98 2f       	mov	r25, r24
    173e:	9f 7d       	andi	r25, 0xDF	; 223
    1740:	95 54       	subi	r25, 0x45	; 69
    1742:	93 30       	cpi	r25, 0x03	; 3
    1744:	28 f4       	brcc	.+10     	; 0x1750 <vfprintf+0x10a>
    1746:	0c 5f       	subi	r16, 0xFC	; 252
    1748:	1f 4f       	sbci	r17, 0xFF	; 255
    174a:	9f e3       	ldi	r25, 0x3F	; 63
    174c:	99 83       	std	Y+1, r25	; 0x01
    174e:	0d c0       	rjmp	.+26     	; 0x176a <vfprintf+0x124>
    1750:	83 36       	cpi	r24, 0x63	; 99
    1752:	31 f0       	breq	.+12     	; 0x1760 <vfprintf+0x11a>
    1754:	83 37       	cpi	r24, 0x73	; 115
    1756:	71 f0       	breq	.+28     	; 0x1774 <vfprintf+0x12e>
    1758:	83 35       	cpi	r24, 0x53	; 83
    175a:	09 f0       	breq	.+2      	; 0x175e <vfprintf+0x118>
    175c:	59 c0       	rjmp	.+178    	; 0x1810 <vfprintf+0x1ca>
    175e:	21 c0       	rjmp	.+66     	; 0x17a2 <vfprintf+0x15c>
    1760:	f8 01       	movw	r30, r16
    1762:	80 81       	ld	r24, Z
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	0e 5f       	subi	r16, 0xFE	; 254
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	88 24       	eor	r8, r8
    176c:	83 94       	inc	r8
    176e:	91 2c       	mov	r9, r1
    1770:	53 01       	movw	r10, r6
    1772:	13 c0       	rjmp	.+38     	; 0x179a <vfprintf+0x154>
    1774:	28 01       	movw	r4, r16
    1776:	f2 e0       	ldi	r31, 0x02	; 2
    1778:	4f 0e       	add	r4, r31
    177a:	51 1c       	adc	r5, r1
    177c:	f8 01       	movw	r30, r16
    177e:	a0 80       	ld	r10, Z
    1780:	b1 80       	ldd	r11, Z+1	; 0x01
    1782:	36 fe       	sbrs	r3, 6
    1784:	03 c0       	rjmp	.+6      	; 0x178c <vfprintf+0x146>
    1786:	69 2d       	mov	r22, r9
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <vfprintf+0x14a>
    178c:	6f ef       	ldi	r22, 0xFF	; 255
    178e:	7f ef       	ldi	r23, 0xFF	; 255
    1790:	c5 01       	movw	r24, r10
    1792:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <strnlen>
    1796:	4c 01       	movw	r8, r24
    1798:	82 01       	movw	r16, r4
    179a:	f3 2d       	mov	r31, r3
    179c:	ff 77       	andi	r31, 0x7F	; 127
    179e:	3f 2e       	mov	r3, r31
    17a0:	16 c0       	rjmp	.+44     	; 0x17ce <vfprintf+0x188>
    17a2:	28 01       	movw	r4, r16
    17a4:	22 e0       	ldi	r18, 0x02	; 2
    17a6:	42 0e       	add	r4, r18
    17a8:	51 1c       	adc	r5, r1
    17aa:	f8 01       	movw	r30, r16
    17ac:	a0 80       	ld	r10, Z
    17ae:	b1 80       	ldd	r11, Z+1	; 0x01
    17b0:	36 fe       	sbrs	r3, 6
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <vfprintf+0x174>
    17b4:	69 2d       	mov	r22, r9
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <vfprintf+0x178>
    17ba:	6f ef       	ldi	r22, 0xFF	; 255
    17bc:	7f ef       	ldi	r23, 0xFF	; 255
    17be:	c5 01       	movw	r24, r10
    17c0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <strnlen_P>
    17c4:	4c 01       	movw	r8, r24
    17c6:	f3 2d       	mov	r31, r3
    17c8:	f0 68       	ori	r31, 0x80	; 128
    17ca:	3f 2e       	mov	r3, r31
    17cc:	82 01       	movw	r16, r4
    17ce:	33 fc       	sbrc	r3, 3
    17d0:	1b c0       	rjmp	.+54     	; 0x1808 <vfprintf+0x1c2>
    17d2:	82 2d       	mov	r24, r2
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	88 16       	cp	r8, r24
    17d8:	99 06       	cpc	r9, r25
    17da:	b0 f4       	brcc	.+44     	; 0x1808 <vfprintf+0x1c2>
    17dc:	b6 01       	movw	r22, r12
    17de:	80 e2       	ldi	r24, 0x20	; 32
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    17e6:	2a 94       	dec	r2
    17e8:	f4 cf       	rjmp	.-24     	; 0x17d2 <vfprintf+0x18c>
    17ea:	f5 01       	movw	r30, r10
    17ec:	37 fc       	sbrc	r3, 7
    17ee:	85 91       	lpm	r24, Z+
    17f0:	37 fe       	sbrs	r3, 7
    17f2:	81 91       	ld	r24, Z+
    17f4:	5f 01       	movw	r10, r30
    17f6:	b6 01       	movw	r22, r12
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    17fe:	21 10       	cpse	r2, r1
    1800:	2a 94       	dec	r2
    1802:	21 e0       	ldi	r18, 0x01	; 1
    1804:	82 1a       	sub	r8, r18
    1806:	91 08       	sbc	r9, r1
    1808:	81 14       	cp	r8, r1
    180a:	91 04       	cpc	r9, r1
    180c:	71 f7       	brne	.-36     	; 0x17ea <vfprintf+0x1a4>
    180e:	e8 c0       	rjmp	.+464    	; 0x19e0 <vfprintf+0x39a>
    1810:	84 36       	cpi	r24, 0x64	; 100
    1812:	11 f0       	breq	.+4      	; 0x1818 <vfprintf+0x1d2>
    1814:	89 36       	cpi	r24, 0x69	; 105
    1816:	41 f5       	brne	.+80     	; 0x1868 <vfprintf+0x222>
    1818:	f8 01       	movw	r30, r16
    181a:	37 fe       	sbrs	r3, 7
    181c:	07 c0       	rjmp	.+14     	; 0x182c <vfprintf+0x1e6>
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	0c 5f       	subi	r16, 0xFC	; 252
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	08 c0       	rjmp	.+16     	; 0x183c <vfprintf+0x1f6>
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	07 2e       	mov	r0, r23
    1832:	00 0c       	add	r0, r0
    1834:	88 0b       	sbc	r24, r24
    1836:	99 0b       	sbc	r25, r25
    1838:	0e 5f       	subi	r16, 0xFE	; 254
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	f3 2d       	mov	r31, r3
    183e:	ff 76       	andi	r31, 0x6F	; 111
    1840:	3f 2e       	mov	r3, r31
    1842:	97 ff       	sbrs	r25, 7
    1844:	09 c0       	rjmp	.+18     	; 0x1858 <vfprintf+0x212>
    1846:	90 95       	com	r25
    1848:	80 95       	com	r24
    184a:	70 95       	com	r23
    184c:	61 95       	neg	r22
    184e:	7f 4f       	sbci	r23, 0xFF	; 255
    1850:	8f 4f       	sbci	r24, 0xFF	; 255
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	f0 68       	ori	r31, 0x80	; 128
    1856:	3f 2e       	mov	r3, r31
    1858:	2a e0       	ldi	r18, 0x0A	; 10
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	a3 01       	movw	r20, r6
    185e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__ultoa_invert>
    1862:	88 2e       	mov	r8, r24
    1864:	86 18       	sub	r8, r6
    1866:	45 c0       	rjmp	.+138    	; 0x18f2 <vfprintf+0x2ac>
    1868:	85 37       	cpi	r24, 0x75	; 117
    186a:	31 f4       	brne	.+12     	; 0x1878 <vfprintf+0x232>
    186c:	23 2d       	mov	r18, r3
    186e:	2f 7e       	andi	r18, 0xEF	; 239
    1870:	b2 2e       	mov	r11, r18
    1872:	2a e0       	ldi	r18, 0x0A	; 10
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	25 c0       	rjmp	.+74     	; 0x18c2 <vfprintf+0x27c>
    1878:	93 2d       	mov	r25, r3
    187a:	99 7f       	andi	r25, 0xF9	; 249
    187c:	b9 2e       	mov	r11, r25
    187e:	8f 36       	cpi	r24, 0x6F	; 111
    1880:	c1 f0       	breq	.+48     	; 0x18b2 <vfprintf+0x26c>
    1882:	18 f4       	brcc	.+6      	; 0x188a <vfprintf+0x244>
    1884:	88 35       	cpi	r24, 0x58	; 88
    1886:	79 f0       	breq	.+30     	; 0x18a6 <vfprintf+0x260>
    1888:	b5 c0       	rjmp	.+362    	; 0x19f4 <vfprintf+0x3ae>
    188a:	80 37       	cpi	r24, 0x70	; 112
    188c:	19 f0       	breq	.+6      	; 0x1894 <vfprintf+0x24e>
    188e:	88 37       	cpi	r24, 0x78	; 120
    1890:	21 f0       	breq	.+8      	; 0x189a <vfprintf+0x254>
    1892:	b0 c0       	rjmp	.+352    	; 0x19f4 <vfprintf+0x3ae>
    1894:	e9 2f       	mov	r30, r25
    1896:	e0 61       	ori	r30, 0x10	; 16
    1898:	be 2e       	mov	r11, r30
    189a:	b4 fe       	sbrs	r11, 4
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <vfprintf+0x272>
    189e:	fb 2d       	mov	r31, r11
    18a0:	f4 60       	ori	r31, 0x04	; 4
    18a2:	bf 2e       	mov	r11, r31
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <vfprintf+0x272>
    18a6:	34 fe       	sbrs	r3, 4
    18a8:	0a c0       	rjmp	.+20     	; 0x18be <vfprintf+0x278>
    18aa:	29 2f       	mov	r18, r25
    18ac:	26 60       	ori	r18, 0x06	; 6
    18ae:	b2 2e       	mov	r11, r18
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <vfprintf+0x278>
    18b2:	28 e0       	ldi	r18, 0x08	; 8
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <vfprintf+0x27c>
    18b8:	20 e1       	ldi	r18, 0x10	; 16
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <vfprintf+0x27c>
    18be:	20 e1       	ldi	r18, 0x10	; 16
    18c0:	32 e0       	ldi	r19, 0x02	; 2
    18c2:	f8 01       	movw	r30, r16
    18c4:	b7 fe       	sbrs	r11, 7
    18c6:	07 c0       	rjmp	.+14     	; 0x18d6 <vfprintf+0x290>
    18c8:	60 81       	ld	r22, Z
    18ca:	71 81       	ldd	r23, Z+1	; 0x01
    18cc:	82 81       	ldd	r24, Z+2	; 0x02
    18ce:	93 81       	ldd	r25, Z+3	; 0x03
    18d0:	0c 5f       	subi	r16, 0xFC	; 252
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	06 c0       	rjmp	.+12     	; 0x18e2 <vfprintf+0x29c>
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 5f       	subi	r16, 0xFE	; 254
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	a3 01       	movw	r20, r6
    18e4:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__ultoa_invert>
    18e8:	88 2e       	mov	r8, r24
    18ea:	86 18       	sub	r8, r6
    18ec:	fb 2d       	mov	r31, r11
    18ee:	ff 77       	andi	r31, 0x7F	; 127
    18f0:	3f 2e       	mov	r3, r31
    18f2:	36 fe       	sbrs	r3, 6
    18f4:	0d c0       	rjmp	.+26     	; 0x1910 <vfprintf+0x2ca>
    18f6:	23 2d       	mov	r18, r3
    18f8:	2e 7f       	andi	r18, 0xFE	; 254
    18fa:	a2 2e       	mov	r10, r18
    18fc:	89 14       	cp	r8, r9
    18fe:	58 f4       	brcc	.+22     	; 0x1916 <vfprintf+0x2d0>
    1900:	34 fe       	sbrs	r3, 4
    1902:	0b c0       	rjmp	.+22     	; 0x191a <vfprintf+0x2d4>
    1904:	32 fc       	sbrc	r3, 2
    1906:	09 c0       	rjmp	.+18     	; 0x191a <vfprintf+0x2d4>
    1908:	83 2d       	mov	r24, r3
    190a:	8e 7e       	andi	r24, 0xEE	; 238
    190c:	a8 2e       	mov	r10, r24
    190e:	05 c0       	rjmp	.+10     	; 0x191a <vfprintf+0x2d4>
    1910:	b8 2c       	mov	r11, r8
    1912:	a3 2c       	mov	r10, r3
    1914:	03 c0       	rjmp	.+6      	; 0x191c <vfprintf+0x2d6>
    1916:	b8 2c       	mov	r11, r8
    1918:	01 c0       	rjmp	.+2      	; 0x191c <vfprintf+0x2d6>
    191a:	b9 2c       	mov	r11, r9
    191c:	a4 fe       	sbrs	r10, 4
    191e:	0f c0       	rjmp	.+30     	; 0x193e <vfprintf+0x2f8>
    1920:	fe 01       	movw	r30, r28
    1922:	e8 0d       	add	r30, r8
    1924:	f1 1d       	adc	r31, r1
    1926:	80 81       	ld	r24, Z
    1928:	80 33       	cpi	r24, 0x30	; 48
    192a:	21 f4       	brne	.+8      	; 0x1934 <vfprintf+0x2ee>
    192c:	9a 2d       	mov	r25, r10
    192e:	99 7e       	andi	r25, 0xE9	; 233
    1930:	a9 2e       	mov	r10, r25
    1932:	09 c0       	rjmp	.+18     	; 0x1946 <vfprintf+0x300>
    1934:	a2 fe       	sbrs	r10, 2
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <vfprintf+0x2fe>
    1938:	b3 94       	inc	r11
    193a:	b3 94       	inc	r11
    193c:	04 c0       	rjmp	.+8      	; 0x1946 <vfprintf+0x300>
    193e:	8a 2d       	mov	r24, r10
    1940:	86 78       	andi	r24, 0x86	; 134
    1942:	09 f0       	breq	.+2      	; 0x1946 <vfprintf+0x300>
    1944:	b3 94       	inc	r11
    1946:	a3 fc       	sbrc	r10, 3
    1948:	11 c0       	rjmp	.+34     	; 0x196c <vfprintf+0x326>
    194a:	a0 fe       	sbrs	r10, 0
    194c:	06 c0       	rjmp	.+12     	; 0x195a <vfprintf+0x314>
    194e:	b2 14       	cp	r11, r2
    1950:	88 f4       	brcc	.+34     	; 0x1974 <vfprintf+0x32e>
    1952:	28 0c       	add	r2, r8
    1954:	92 2c       	mov	r9, r2
    1956:	9b 18       	sub	r9, r11
    1958:	0e c0       	rjmp	.+28     	; 0x1976 <vfprintf+0x330>
    195a:	b2 14       	cp	r11, r2
    195c:	60 f4       	brcc	.+24     	; 0x1976 <vfprintf+0x330>
    195e:	b6 01       	movw	r22, r12
    1960:	80 e2       	ldi	r24, 0x20	; 32
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    1968:	b3 94       	inc	r11
    196a:	f7 cf       	rjmp	.-18     	; 0x195a <vfprintf+0x314>
    196c:	b2 14       	cp	r11, r2
    196e:	18 f4       	brcc	.+6      	; 0x1976 <vfprintf+0x330>
    1970:	2b 18       	sub	r2, r11
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <vfprintf+0x332>
    1974:	98 2c       	mov	r9, r8
    1976:	21 2c       	mov	r2, r1
    1978:	a4 fe       	sbrs	r10, 4
    197a:	10 c0       	rjmp	.+32     	; 0x199c <vfprintf+0x356>
    197c:	b6 01       	movw	r22, r12
    197e:	80 e3       	ldi	r24, 0x30	; 48
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    1986:	a2 fe       	sbrs	r10, 2
    1988:	17 c0       	rjmp	.+46     	; 0x19b8 <vfprintf+0x372>
    198a:	a1 fc       	sbrc	r10, 1
    198c:	03 c0       	rjmp	.+6      	; 0x1994 <vfprintf+0x34e>
    198e:	88 e7       	ldi	r24, 0x78	; 120
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <vfprintf+0x352>
    1994:	88 e5       	ldi	r24, 0x58	; 88
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	b6 01       	movw	r22, r12
    199a:	0c c0       	rjmp	.+24     	; 0x19b4 <vfprintf+0x36e>
    199c:	8a 2d       	mov	r24, r10
    199e:	86 78       	andi	r24, 0x86	; 134
    19a0:	59 f0       	breq	.+22     	; 0x19b8 <vfprintf+0x372>
    19a2:	a1 fe       	sbrs	r10, 1
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <vfprintf+0x364>
    19a6:	8b e2       	ldi	r24, 0x2B	; 43
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <vfprintf+0x366>
    19aa:	80 e2       	ldi	r24, 0x20	; 32
    19ac:	a7 fc       	sbrc	r10, 7
    19ae:	8d e2       	ldi	r24, 0x2D	; 45
    19b0:	b6 01       	movw	r22, r12
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    19b8:	89 14       	cp	r8, r9
    19ba:	38 f4       	brcc	.+14     	; 0x19ca <vfprintf+0x384>
    19bc:	b6 01       	movw	r22, r12
    19be:	80 e3       	ldi	r24, 0x30	; 48
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    19c6:	9a 94       	dec	r9
    19c8:	f7 cf       	rjmp	.-18     	; 0x19b8 <vfprintf+0x372>
    19ca:	8a 94       	dec	r8
    19cc:	f3 01       	movw	r30, r6
    19ce:	e8 0d       	add	r30, r8
    19d0:	f1 1d       	adc	r31, r1
    19d2:	80 81       	ld	r24, Z
    19d4:	b6 01       	movw	r22, r12
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    19dc:	81 10       	cpse	r8, r1
    19de:	f5 cf       	rjmp	.-22     	; 0x19ca <vfprintf+0x384>
    19e0:	22 20       	and	r2, r2
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <vfprintf+0x3a0>
    19e4:	42 ce       	rjmp	.-892    	; 0x166a <vfprintf+0x24>
    19e6:	b6 01       	movw	r22, r12
    19e8:	80 e2       	ldi	r24, 0x20	; 32
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    19f0:	2a 94       	dec	r2
    19f2:	f6 cf       	rjmp	.-20     	; 0x19e0 <vfprintf+0x39a>
    19f4:	f6 01       	movw	r30, r12
    19f6:	86 81       	ldd	r24, Z+6	; 0x06
    19f8:	97 81       	ldd	r25, Z+7	; 0x07
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <vfprintf+0x3ba>
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	9f ef       	ldi	r25, 0xFF	; 255
    1a00:	2b 96       	adiw	r28, 0x0b	; 11
    1a02:	e2 e1       	ldi	r30, 0x12	; 18
    1a04:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__epilogue_restores__>

00001a08 <calloc>:
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	86 9f       	mul	r24, r22
    1a12:	80 01       	movw	r16, r0
    1a14:	87 9f       	mul	r24, r23
    1a16:	10 0d       	add	r17, r0
    1a18:	96 9f       	mul	r25, r22
    1a1a:	10 0d       	add	r17, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	c8 01       	movw	r24, r16
    1a20:	0e 94 3e 09 	call	0x127c	; 0x127c <malloc>
    1a24:	ec 01       	movw	r28, r24
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	29 f0       	breq	.+10     	; 0x1a34 <calloc+0x2c>
    1a2a:	a8 01       	movw	r20, r16
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <memset>
    1a34:	ce 01       	movw	r24, r28
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <strnlen_P>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	05 90       	lpm	r0, Z+
    1a44:	61 50       	subi	r22, 0x01	; 1
    1a46:	70 40       	sbci	r23, 0x00	; 0
    1a48:	01 10       	cpse	r0, r1
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <strnlen_P+0x2>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	8e 0f       	add	r24, r30
    1a52:	9f 1f       	adc	r25, r31
    1a54:	08 95       	ret

00001a56 <memset>:
    1a56:	dc 01       	movw	r26, r24
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <memset+0x6>
    1a5a:	6d 93       	st	X+, r22
    1a5c:	41 50       	subi	r20, 0x01	; 1
    1a5e:	50 40       	sbci	r21, 0x00	; 0
    1a60:	e0 f7       	brcc	.-8      	; 0x1a5a <memset+0x4>
    1a62:	08 95       	ret

00001a64 <strnlen>:
    1a64:	fc 01       	movw	r30, r24
    1a66:	61 50       	subi	r22, 0x01	; 1
    1a68:	70 40       	sbci	r23, 0x00	; 0
    1a6a:	01 90       	ld	r0, Z+
    1a6c:	01 10       	cpse	r0, r1
    1a6e:	d8 f7       	brcc	.-10     	; 0x1a66 <strnlen+0x2>
    1a70:	80 95       	com	r24
    1a72:	90 95       	com	r25
    1a74:	8e 0f       	add	r24, r30
    1a76:	9f 1f       	adc	r25, r31
    1a78:	08 95       	ret

00001a7a <fputc>:
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	fb 01       	movw	r30, r22
    1a84:	23 81       	ldd	r18, Z+3	; 0x03
    1a86:	21 fd       	sbrc	r18, 1
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <fputc+0x16>
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	9f ef       	ldi	r25, 0xFF	; 255
    1a8e:	2c c0       	rjmp	.+88     	; 0x1ae8 <fputc+0x6e>
    1a90:	22 ff       	sbrs	r18, 2
    1a92:	16 c0       	rjmp	.+44     	; 0x1ac0 <fputc+0x46>
    1a94:	46 81       	ldd	r20, Z+6	; 0x06
    1a96:	57 81       	ldd	r21, Z+7	; 0x07
    1a98:	24 81       	ldd	r18, Z+4	; 0x04
    1a9a:	35 81       	ldd	r19, Z+5	; 0x05
    1a9c:	42 17       	cp	r20, r18
    1a9e:	53 07       	cpc	r21, r19
    1aa0:	44 f4       	brge	.+16     	; 0x1ab2 <fputc+0x38>
    1aa2:	a0 81       	ld	r26, Z
    1aa4:	b1 81       	ldd	r27, Z+1	; 0x01
    1aa6:	9d 01       	movw	r18, r26
    1aa8:	2f 5f       	subi	r18, 0xFF	; 255
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	31 83       	std	Z+1, r19	; 0x01
    1aae:	20 83       	st	Z, r18
    1ab0:	8c 93       	st	X, r24
    1ab2:	26 81       	ldd	r18, Z+6	; 0x06
    1ab4:	37 81       	ldd	r19, Z+7	; 0x07
    1ab6:	2f 5f       	subi	r18, 0xFF	; 255
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aba:	37 83       	std	Z+7, r19	; 0x07
    1abc:	26 83       	std	Z+6, r18	; 0x06
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <fputc+0x6e>
    1ac0:	8b 01       	movw	r16, r22
    1ac2:	ec 01       	movw	r28, r24
    1ac4:	fb 01       	movw	r30, r22
    1ac6:	00 84       	ldd	r0, Z+8	; 0x08
    1ac8:	f1 85       	ldd	r31, Z+9	; 0x09
    1aca:	e0 2d       	mov	r30, r0
    1acc:	09 95       	icall
    1ace:	89 2b       	or	r24, r25
    1ad0:	e1 f6       	brne	.-72     	; 0x1a8a <fputc+0x10>
    1ad2:	d8 01       	movw	r26, r16
    1ad4:	16 96       	adiw	r26, 0x06	; 6
    1ad6:	8d 91       	ld	r24, X+
    1ad8:	9c 91       	ld	r25, X
    1ada:	17 97       	sbiw	r26, 0x07	; 7
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	17 96       	adiw	r26, 0x07	; 7
    1ae0:	9c 93       	st	X, r25
    1ae2:	8e 93       	st	-X, r24
    1ae4:	16 97       	sbiw	r26, 0x06	; 6
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <__ultoa_invert>:
    1af2:	fa 01       	movw	r30, r20
    1af4:	aa 27       	eor	r26, r26
    1af6:	28 30       	cpi	r18, 0x08	; 8
    1af8:	51 f1       	breq	.+84     	; 0x1b4e <__ultoa_invert+0x5c>
    1afa:	20 31       	cpi	r18, 0x10	; 16
    1afc:	81 f1       	breq	.+96     	; 0x1b5e <__ultoa_invert+0x6c>
    1afe:	e8 94       	clt
    1b00:	6f 93       	push	r22
    1b02:	6e 7f       	andi	r22, 0xFE	; 254
    1b04:	6e 5f       	subi	r22, 0xFE	; 254
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0c:	af 4f       	sbci	r26, 0xFF	; 255
    1b0e:	b1 e0       	ldi	r27, 0x01	; 1
    1b10:	3e d0       	rcall	.+124    	; 0x1b8e <__ultoa_invert+0x9c>
    1b12:	b4 e0       	ldi	r27, 0x04	; 4
    1b14:	3c d0       	rcall	.+120    	; 0x1b8e <__ultoa_invert+0x9c>
    1b16:	67 0f       	add	r22, r23
    1b18:	78 1f       	adc	r23, r24
    1b1a:	89 1f       	adc	r24, r25
    1b1c:	9a 1f       	adc	r25, r26
    1b1e:	a1 1d       	adc	r26, r1
    1b20:	68 0f       	add	r22, r24
    1b22:	79 1f       	adc	r23, r25
    1b24:	8a 1f       	adc	r24, r26
    1b26:	91 1d       	adc	r25, r1
    1b28:	a1 1d       	adc	r26, r1
    1b2a:	6a 0f       	add	r22, r26
    1b2c:	71 1d       	adc	r23, r1
    1b2e:	81 1d       	adc	r24, r1
    1b30:	91 1d       	adc	r25, r1
    1b32:	a1 1d       	adc	r26, r1
    1b34:	20 d0       	rcall	.+64     	; 0x1b76 <__ultoa_invert+0x84>
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__ultoa_invert+0x48>
    1b38:	68 94       	set
    1b3a:	3f 91       	pop	r19
    1b3c:	2a e0       	ldi	r18, 0x0A	; 10
    1b3e:	26 9f       	mul	r18, r22
    1b40:	11 24       	eor	r1, r1
    1b42:	30 19       	sub	r19, r0
    1b44:	30 5d       	subi	r19, 0xD0	; 208
    1b46:	31 93       	st	Z+, r19
    1b48:	de f6       	brtc	.-74     	; 0x1b00 <__ultoa_invert+0xe>
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	08 95       	ret
    1b4e:	46 2f       	mov	r20, r22
    1b50:	47 70       	andi	r20, 0x07	; 7
    1b52:	40 5d       	subi	r20, 0xD0	; 208
    1b54:	41 93       	st	Z+, r20
    1b56:	b3 e0       	ldi	r27, 0x03	; 3
    1b58:	0f d0       	rcall	.+30     	; 0x1b78 <__ultoa_invert+0x86>
    1b5a:	c9 f7       	brne	.-14     	; 0x1b4e <__ultoa_invert+0x5c>
    1b5c:	f6 cf       	rjmp	.-20     	; 0x1b4a <__ultoa_invert+0x58>
    1b5e:	46 2f       	mov	r20, r22
    1b60:	4f 70       	andi	r20, 0x0F	; 15
    1b62:	40 5d       	subi	r20, 0xD0	; 208
    1b64:	4a 33       	cpi	r20, 0x3A	; 58
    1b66:	18 f0       	brcs	.+6      	; 0x1b6e <__ultoa_invert+0x7c>
    1b68:	49 5d       	subi	r20, 0xD9	; 217
    1b6a:	31 fd       	sbrc	r19, 1
    1b6c:	40 52       	subi	r20, 0x20	; 32
    1b6e:	41 93       	st	Z+, r20
    1b70:	02 d0       	rcall	.+4      	; 0x1b76 <__ultoa_invert+0x84>
    1b72:	a9 f7       	brne	.-22     	; 0x1b5e <__ultoa_invert+0x6c>
    1b74:	ea cf       	rjmp	.-44     	; 0x1b4a <__ultoa_invert+0x58>
    1b76:	b4 e0       	ldi	r27, 0x04	; 4
    1b78:	a6 95       	lsr	r26
    1b7a:	97 95       	ror	r25
    1b7c:	87 95       	ror	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	ba 95       	dec	r27
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__ultoa_invert+0x86>
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	61 05       	cpc	r22, r1
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	08 95       	ret
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	0a 2e       	mov	r0, r26
    1b94:	06 94       	lsr	r0
    1b96:	57 95       	ror	r21
    1b98:	47 95       	ror	r20
    1b9a:	37 95       	ror	r19
    1b9c:	27 95       	ror	r18
    1b9e:	ba 95       	dec	r27
    1ba0:	c9 f7       	brne	.-14     	; 0x1b94 <__ultoa_invert+0xa2>
    1ba2:	62 0f       	add	r22, r18
    1ba4:	73 1f       	adc	r23, r19
    1ba6:	84 1f       	adc	r24, r20
    1ba8:	95 1f       	adc	r25, r21
    1baa:	a0 1d       	adc	r26, r0
    1bac:	08 95       	ret

00001bae <__divmodsi4>:
    1bae:	05 2e       	mov	r0, r21
    1bb0:	97 fb       	bst	r25, 7
    1bb2:	1e f4       	brtc	.+6      	; 0x1bba <__divmodsi4+0xc>
    1bb4:	00 94       	com	r0
    1bb6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__negsi2>
    1bba:	57 fd       	sbrc	r21, 7
    1bbc:	07 d0       	rcall	.+14     	; 0x1bcc <__divmodsi4_neg2>
    1bbe:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__udivmodsi4>
    1bc2:	07 fc       	sbrc	r0, 7
    1bc4:	03 d0       	rcall	.+6      	; 0x1bcc <__divmodsi4_neg2>
    1bc6:	4e f4       	brtc	.+18     	; 0x1bda <__divmodsi4_exit>
    1bc8:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__negsi2>

00001bcc <__divmodsi4_neg2>:
    1bcc:	50 95       	com	r21
    1bce:	40 95       	com	r20
    1bd0:	30 95       	com	r19
    1bd2:	21 95       	neg	r18
    1bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd6:	4f 4f       	sbci	r20, 0xFF	; 255
    1bd8:	5f 4f       	sbci	r21, 0xFF	; 255

00001bda <__divmodsi4_exit>:
    1bda:	08 95       	ret

00001bdc <__negsi2>:
    1bdc:	90 95       	com	r25
    1bde:	80 95       	com	r24
    1be0:	70 95       	com	r23
    1be2:	61 95       	neg	r22
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	8f 4f       	sbci	r24, 0xFF	; 255
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	08 95       	ret

00001bec <__muluhisi3>:
    1bec:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__umulhisi3>
    1bf0:	a5 9f       	mul	r26, r21
    1bf2:	90 0d       	add	r25, r0
    1bf4:	b4 9f       	mul	r27, r20
    1bf6:	90 0d       	add	r25, r0
    1bf8:	a4 9f       	mul	r26, r20
    1bfa:	80 0d       	add	r24, r0
    1bfc:	91 1d       	adc	r25, r1
    1bfe:	11 24       	eor	r1, r1
    1c00:	08 95       	ret

00001c02 <__mulshisi3>:
    1c02:	b7 ff       	sbrs	r27, 7
    1c04:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__muluhisi3>

00001c08 <__mulohisi3>:
    1c08:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__muluhisi3>
    1c0c:	82 1b       	sub	r24, r18
    1c0e:	93 0b       	sbc	r25, r19
    1c10:	08 95       	ret

00001c12 <__prologue_saves__>:
    1c12:	2f 92       	push	r2
    1c14:	3f 92       	push	r3
    1c16:	4f 92       	push	r4
    1c18:	5f 92       	push	r5
    1c1a:	6f 92       	push	r6
    1c1c:	7f 92       	push	r7
    1c1e:	8f 92       	push	r8
    1c20:	9f 92       	push	r9
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	ca 1b       	sub	r28, r26
    1c3c:	db 0b       	sbc	r29, r27
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	09 94       	ijmp

00001c4a <__epilogue_restores__>:
    1c4a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c4c:	39 88       	ldd	r3, Y+17	; 0x11
    1c4e:	48 88       	ldd	r4, Y+16	; 0x10
    1c50:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c52:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c54:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c56:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c58:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c5c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c5e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c60:	df 80       	ldd	r13, Y+7	; 0x07
    1c62:	ee 80       	ldd	r14, Y+6	; 0x06
    1c64:	fd 80       	ldd	r15, Y+5	; 0x05
    1c66:	0c 81       	ldd	r16, Y+4	; 0x04
    1c68:	1b 81       	ldd	r17, Y+3	; 0x03
    1c6a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c6c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c6e:	ce 0f       	add	r28, r30
    1c70:	d1 1d       	adc	r29, r1
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	ed 01       	movw	r28, r26
    1c7e:	08 95       	ret

00001c80 <__udivmodsi4>:
    1c80:	a1 e2       	ldi	r26, 0x21	; 33
    1c82:	1a 2e       	mov	r1, r26
    1c84:	aa 1b       	sub	r26, r26
    1c86:	bb 1b       	sub	r27, r27
    1c88:	fd 01       	movw	r30, r26
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <__udivmodsi4_ep>

00001c8c <__udivmodsi4_loop>:
    1c8c:	aa 1f       	adc	r26, r26
    1c8e:	bb 1f       	adc	r27, r27
    1c90:	ee 1f       	adc	r30, r30
    1c92:	ff 1f       	adc	r31, r31
    1c94:	a2 17       	cp	r26, r18
    1c96:	b3 07       	cpc	r27, r19
    1c98:	e4 07       	cpc	r30, r20
    1c9a:	f5 07       	cpc	r31, r21
    1c9c:	20 f0       	brcs	.+8      	; 0x1ca6 <__udivmodsi4_ep>
    1c9e:	a2 1b       	sub	r26, r18
    1ca0:	b3 0b       	sbc	r27, r19
    1ca2:	e4 0b       	sbc	r30, r20
    1ca4:	f5 0b       	sbc	r31, r21

00001ca6 <__udivmodsi4_ep>:
    1ca6:	66 1f       	adc	r22, r22
    1ca8:	77 1f       	adc	r23, r23
    1caa:	88 1f       	adc	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	1a 94       	dec	r1
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <__udivmodsi4_loop>
    1cb2:	60 95       	com	r22
    1cb4:	70 95       	com	r23
    1cb6:	80 95       	com	r24
    1cb8:	90 95       	com	r25
    1cba:	9b 01       	movw	r18, r22
    1cbc:	ac 01       	movw	r20, r24
    1cbe:	bd 01       	movw	r22, r26
    1cc0:	cf 01       	movw	r24, r30
    1cc2:	08 95       	ret

00001cc4 <__umulhisi3>:
    1cc4:	a2 9f       	mul	r26, r18
    1cc6:	b0 01       	movw	r22, r0
    1cc8:	b3 9f       	mul	r27, r19
    1cca:	c0 01       	movw	r24, r0
    1ccc:	a3 9f       	mul	r26, r19
    1cce:	70 0d       	add	r23, r0
    1cd0:	81 1d       	adc	r24, r1
    1cd2:	11 24       	eor	r1, r1
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	b2 9f       	mul	r27, r18
    1cd8:	70 0d       	add	r23, r0
    1cda:	81 1d       	adc	r24, r1
    1cdc:	11 24       	eor	r1, r1
    1cde:	91 1d       	adc	r25, r1
    1ce0:	08 95       	ret

00001ce2 <_exit>:
    1ce2:	f8 94       	cli

00001ce4 <__stop_program>:
    1ce4:	ff cf       	rjmp	.-2      	; 0x1ce4 <__stop_program>
