
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  00001a90  00001b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080024e  0080024e  00001c72  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e46  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f6  00000000  00000000  00004e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001503  00000000  00000000  00006310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000658  00000000  00000000  00007814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000986  00000000  00000000  00007e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001328  00000000  00000000  000087f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00009b1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__ctors_end>
       4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
       8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
       c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      10:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      14:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      1c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      20:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      24:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      28:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      2c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      30:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      34:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      38:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__vector_14>
      3c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      40:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      44:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      48:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      4c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      50:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      54:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      58:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      5c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      60:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      64:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      68:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      6c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	64 64       	ori	r22, 0x44	; 68
      a0:	64 64       	ori	r22, 0x44	; 68
      a2:	c8 0a       	sbc	r12, r24
      a4:	c8 64       	ori	r28, 0x48	; 72
      a6:	05 64       	ori	r16, 0x45	; 69
      a8:	05 64       	ori	r16, 0x45	; 69
      aa:	05 64       	ori	r16, 0x45	; 69
      ac:	c8 64       	ori	r28, 0x48	; 72
      ae:	05 64       	ori	r16, 0x45	; 69
      b0:	05 64       	ori	r16, 0x45	; 69
      b2:	05 64       	ori	r16, 0x45	; 69
      b4:	c8 05       	cpc	r28, r8
      b6:	c8 64       	ori	r28, 0x48	; 72
      b8:	05 64       	ori	r16, 0x45	; 69
      ba:	05 64       	ori	r16, 0x45	; 69
      bc:	05 64       	ori	r16, 0x45	; 69
      be:	c8 0b       	Address 0x000000be is out of bounds.
.word	0xffff	; ????

000000bf <lisaMelody>:
      bf:	0b 02 00 00 4b 02 00 00 93 02 00 00 ba 02 00 00     ....K...........
      cf:	10 03 00 00 00 00 00 00 10 03 00 00 70 03 00 00     ............p...
      df:	00 00 00 00 70 03 00 00 00 00 00 00 70 03 00 00     ....p.......p...
      ef:	00 00 00 00 70 03 00 00 10 03 00 00 ba 02 00 00     ....p...........
      ff:	00 00 00 00 ba 02 00 00 00 00 00 00 ba 02 00 00     ................
     10f:	00 00 00 00 ba 02 00 00 93 02 00 00 00 00 00 00     ................
     11f:	93 02 00 00 4b 02 00 00 00 00 00 00 4b 02 00 00     ....K.......K...
     12f:	00 00 00 00 4b 02 00 00 00 00 00 00 4b 02 00 00     ....K.......K...
     13f:	0b 02 00 00                                         ....

00000143 <tempo>:
     143:	6c 78 88 73 80 70 7c 84 73 80 80 70 7c 04 70 7c     lx.s.p|.s..p|.p|
     153:	04 70 7c 04 70 7c 04 73 80 70 7c 84 73 80 73 80     .p|.p|.s.p|.s.s.
     163:	73 80 73 80 73 80 73 80 73 80 73 80 73 80 73 80     s.s.s.s.s.s.s.s.
     173:	73 80 73 80 73 80 73 80 73 80 73 80 73 80 80 73     s.s.s.s.s.s.s..s
     183:	80 73 80 73 80 73 80 80 73 80 80 73 80 73 80 73     .s.s.s..s..s.s.s
	...

00000195 <melody>:
     195:	b8 01 00 00 00 00 00 00 00 00 00 00 b8 01 00 00     ................
     1a5:	00 00 00 00 b8 01 00 00 00 00 00 00 00 00 00 00     ................
     1b5:	b8 01 00 00 00 00 00 00 00 00 00 00 b8 01 00 00     ................
	...
     1cd:	b8 01 00 00 00 00 00 00 00 00 00 00 72 01 00 00     ............r...
	...
     1e5:	3f 03 00 00 00 00 00 00 00 00 00 00 dc 03 00 00     ?...............
     1f5:	00 00 00 00 2a 02 00 00 00 00 00 00 00 00 00 00     ....*...........
     205:	72 01 00 00 00 00 00 00 93 02 00 00 00 00 00 00     r...............
     215:	54 04 00 00 00 00 00 00 db 03 00 00 00 00 00 00     T...............
     225:	54 04 00 00 00 00 00 00 e3 02 00 00 00 00 00 00     T...............
     235:	26 05 00 00 00 00 00 00 54 04 00 00 00 00 00 00     &.......T.......
     245:	db 03 00 00 00 00 00 00 2a 02 00 00 00 00 00 00     ........*.......
     255:	71 01 00 00 00 00 00 00 49 01 00 00 00 00 00 00     q.......I.......
     265:	15 01 00 00 00 00 00 00 ed 01 00 00 00 00 00 00     ................
     275:	54 04 00 00 00 00 00 00 c7 05 00 00 00 00 00 00     T...............
     285:	26 05 00 00 00 00 00 00 00 00 00 00 26 05 00 00     &...........&...
     295:	00 00 00 00 54 04 00 00 00 00 00 00 dc 04 00 00     ....T...........
     2a5:	00 00 00 00 93 02 00 00 00 00 00 00 00 00 00 00     ................
     2b5:	26 05 00 00 00 00 00 00 00 00 00 00 26 05 00 00     &...........&...
     2c5:	00 00 00 00 93 02 00 00 00 00 00 00 9f 01 00 00     ................
	...

000002d6 <__ctors_end>:
     2d6:	11 24       	eor	r1, r1
     2d8:	1f be       	out	0x3f, r1	; 63
     2da:	cf ef       	ldi	r28, 0xFF	; 255
     2dc:	d4 e0       	ldi	r29, 0x04	; 4
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	cd bf       	out	0x3d, r28	; 61

000002e2 <__do_copy_data>:
     2e2:	12 e0       	ldi	r17, 0x02	; 2
     2e4:	a0 e0       	ldi	r26, 0x00	; 0
     2e6:	b1 e0       	ldi	r27, 0x01	; 1
     2e8:	e0 e9       	ldi	r30, 0x90	; 144
     2ea:	fa e1       	ldi	r31, 0x1A	; 26
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x10>
     2ee:	05 90       	lpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ae 34       	cpi	r26, 0x4E	; 78
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0xc>

000002f8 <__do_clear_bss>:
     2f8:	22 e0       	ldi	r18, 0x02	; 2
     2fa:	ae e4       	ldi	r26, 0x4E	; 78
     2fc:	b2 e0       	ldi	r27, 0x02	; 2
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a8 36       	cpi	r26, 0x68	; 104
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 94 01 	call	0x328	; 0x328 <main>
     30c:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <_exit>

00000310 <__bad_interrupt>:
     310:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000314 <adcInit>:



void adcInit(void) {
	
	DDRE &= ~(1<<PINE0);
     314:	30 98       	cbi	0x06, 0	; 6
     316:	08 95       	ret

00000318 <readAdc>:

 
uint8_t readAdc(uint8_t channel){ //for ch1 channel = 0;
	volatile char * adc = (char *) 0x1400;
	
	*adc = 0x04 | channel;
     318:	84 60       	ori	r24, 0x04	; 4
     31a:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1198>
	

	while (test_bit(PINE, PINE0)) {
     31e:	28 99       	sbic	0x05, 0	; 5
     320:	fe cf       	rjmp	.-4      	; 0x31e <readAdc+0x6>

	}
	
	return *adc;
     322:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1198>
     326:	08 95       	ret

00000328 <main>:
#include "pwm.h"
#include "music.h"

int main(void)
{
	setupInit();
     328:	0e 94 c5 04 	call	0x98a	; 0x98a <setupInit>
	printf("Starting program\n\n\n\n\n\n\n\n\n\n");
     32c:	86 e0       	ldi	r24, 0x06	; 6
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 2b 0a 	call	0x1456	; 0x1456 <puts>
	//test_SRAM();
	//pwm_testPlayNote();
	pwm_init();
     334:	0e 94 58 02 	call	0x4b0	; 0x4b0 <pwm_init>
	music_playLisaGikk();                 
     338:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <music_playLisaGikk>

	while (1) {
		//Put microcontroller to sleep until next interrupt. 
		//sleep_now();
		music_playAfrica();
     33c:	0e 94 a1 01 	call	0x342	; 0x342 <music_playAfrica>
     340:	fd cf       	rjmp	.-6      	; 0x33c <main+0x14>

00000342 <music_playAfrica>:
	
	200

};

void music_playAfrica() {
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
    cli(); 
     34e:	f8 94       	cli
	printf("playing Africa, by Toto\n\n\r");
     350:	80 e2       	ldi	r24, 0x20	; 32
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	0e 94 15 0a 	call	0x142a	; 0x142a <printf>
     35c:	05 e9       	ldi	r16, 0x95	; 149
     35e:	11 e0       	ldi	r17, 0x01	; 1
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	c0 e0       	ldi	r28, 0x00	; 0
     366:	d0 e0       	ldi	r29, 0x00	; 0
   for (int i = 0; i< sizeof(melody)/sizeof(uint32_t); i++) {
	   printf("Playing note or silence: %i", i);
     368:	0f 2e       	mov	r0, r31
     36a:	fb e3       	ldi	r31, 0x3B	; 59
     36c:	ef 2e       	mov	r14, r31
     36e:	f1 e0       	ldi	r31, 0x01	; 1
     370:	ff 2e       	mov	r15, r31
     372:	f0 2d       	mov	r31, r0
     374:	df 93       	push	r29
     376:	cf 93       	push	r28
     378:	ff 92       	push	r15
     37a:	ef 92       	push	r14
     37c:	0e 94 15 0a 	call	0x142a	; 0x142a <printf>
	 
       pwm_setFreq(pgm_read_word(&(melody[i])));
     380:	f8 01       	movw	r30, r16
     382:	65 91       	lpm	r22, Z+
     384:	74 91       	lpm	r23, Z
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pwm_setFreq>
       uint32_t duration = pgm_read_byte(&(tempo[i]));
     38e:	fe 01       	movw	r30, r28
     390:	ed 5b       	subi	r30, 0xBD	; 189
     392:	fe 4f       	sbci	r31, 0xFE	; 254
     394:	e4 91       	lpm	r30, Z
     396:	8e 2f       	mov	r24, r30
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e0       	ldi	r27, 0x00	; 0
       while (duration--) {
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	a1 05       	cpc	r26, r1
     3aa:	b1 05       	cpc	r27, r1
     3ac:	51 f0       	breq	.+20     	; 0x3c2 <music_playAfrica+0x80>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ae:	ec ec       	ldi	r30, 0xCC	; 204
     3b0:	f4 e0       	ldi	r31, 0x04	; 4
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <music_playAfrica+0x70>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <music_playAfrica+0x76>
     3b8:	00 00       	nop
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	a1 09       	sbc	r26, r1
     3be:	b1 09       	sbc	r27, r1
     3c0:	b1 f7       	brne	.-20     	; 0x3ae <music_playAfrica+0x6c>
};

void music_playAfrica() {
    cli(); 
	printf("playing Africa, by Toto\n\n\r");
   for (int i = 0; i< sizeof(melody)/sizeof(uint32_t); i++) {
     3c2:	21 96       	adiw	r28, 0x01	; 1
     3c4:	0c 5f       	subi	r16, 0xFC	; 252
     3c6:	1f 4f       	sbci	r17, 0xFF	; 255
     3c8:	c0 35       	cpi	r28, 0x50	; 80
     3ca:	d1 05       	cpc	r29, r1
     3cc:	99 f6       	brne	.-90     	; 0x374 <music_playAfrica+0x32>
       uint32_t duration = pgm_read_byte(&(tempo[i]));
       while (duration--) {
           _delay_ms(1);
       }
   }
   pwm_setFreq(0);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	cb 01       	movw	r24, r22
     3d4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pwm_setFreq>
   sei();
     3d8:	78 94       	sei

}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <music_playLisaGikk>:
void music_playLisaGikk() {
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
	cli();
     3f8:	f8 94       	cli
	printf("playing Lisa Gikk til Skolen, not by Toto\n\n\r");
     3fa:	87 e5       	ldi	r24, 0x57	; 87
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	9f 93       	push	r25
     400:	8f 93       	push	r24
     402:	0e 94 15 0a 	call	0x142a	; 0x142a <printf>
     406:	cf eb       	ldi	r28, 0xBF	; 191
     408:	d0 e0       	ldi	r29, 0x00	; 0
     40a:	0e e9       	ldi	r16, 0x9E	; 158
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	0f 2e       	mov	r0, r31
     410:	f3 e4       	ldi	r31, 0x43	; 67
     412:	cf 2e       	mov	r12, r31
     414:	f1 e0       	ldi	r31, 0x01	; 1
     416:	df 2e       	mov	r13, r31
     418:	f0 2d       	mov	r31, r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
	for (int i = 0; i< sizeof(lisaMelody)/sizeof(uint32_t); i++) {
		printf("Playing frequency: %i", pgm_read_word(&(lisaMelody[i])));
     41e:	0f 2e       	mov	r0, r31
     420:	f4 e8       	ldi	r31, 0x84	; 132
     422:	ef 2e       	mov	r14, r31
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	ff 2e       	mov	r15, r31
     428:	f0 2d       	mov	r31, r0
     42a:	fe 01       	movw	r30, r28
     42c:	85 91       	lpm	r24, Z+
     42e:	94 91       	lpm	r25, Z
     430:	9f 93       	push	r25
     432:	8f 93       	push	r24
     434:	ff 92       	push	r15
     436:	ef 92       	push	r14
     438:	0e 94 15 0a 	call	0x142a	; 0x142a <printf>
		pwm_setFreq(pgm_read_word(&(lisaMelody[i])));
     43c:	fe 01       	movw	r30, r28
     43e:	65 91       	lpm	r22, Z+
     440:	74 91       	lpm	r23, Z
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pwm_setFreq>
		uint32_t duration = 4*pgm_read_byte(&(lisaTempo[i]));
     44a:	f8 01       	movw	r30, r16
     44c:	84 91       	lpm	r24, Z
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	09 2e       	mov	r0, r25
     45a:	00 0c       	add	r0, r0
     45c:	aa 0b       	sbc	r26, r26
     45e:	bb 0b       	sbc	r27, r27
		while (duration--) {
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	a1 05       	cpc	r26, r1
     46c:	b1 05       	cpc	r27, r1
     46e:	51 f0       	breq	.+20     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     470:	ec ec       	ldi	r30, 0xCC	; 204
     472:	f4 e0       	ldi	r31, 0x04	; 4
     474:	31 97       	sbiw	r30, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     478:	00 c0       	rjmp	.+0      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     47a:	00 00       	nop
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	a1 09       	sbc	r26, r1
     480:	b1 09       	sbc	r27, r1
     482:	b1 f7       	brne	.-20     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     484:	24 96       	adiw	r28, 0x04	; 4
     486:	0f 5f       	subi	r16, 0xFF	; 255
     488:	1f 4f       	sbci	r17, 0xFF	; 255

}
void music_playLisaGikk() {
	cli();
	printf("playing Lisa Gikk til Skolen, not by Toto\n\n\r");
	for (int i = 0; i< sizeof(lisaMelody)/sizeof(uint32_t); i++) {
     48a:	cc 15       	cp	r28, r12
     48c:	dd 05       	cpc	r29, r13
     48e:	09 f0       	breq	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	cc cf       	rjmp	.-104    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		uint32_t duration = 4*pgm_read_byte(&(lisaTempo[i]));
		while (duration--) {
			_delay_ms(1);
		}
	}
	pwm_setFreq(0);
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	cb 01       	movw	r24, r22
     498:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pwm_setFreq>
	sei();
     49c:	78 94       	sei

     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	08 95       	ret

000004b0 <pwm_init>:
    PRESC_1024 =   (1 << CS02)  |               (1 << CS00)
} prescaling;

void pwm_init() {
    //set output pin
    DDRB = (1 << PB0); 
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	87 bb       	out	0x17, r24	; 23


    //set ocr0 register as something
    OCR0 = 0xFF;
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	81 bf       	out	0x31, r24	; 49
    
    //set foc0 in tcr0
    TCCR0 = (1 << FOC0);
     4b8:	80 e8       	ldi	r24, 0x80	; 128
     4ba:	83 bf       	out	0x33, r24	; 51

    //set tct mode
    TCCR0 |= (1 << WGM01) ;
     4bc:	83 b7       	in	r24, 0x33	; 51
     4be:	88 60       	ori	r24, 0x08	; 8
     4c0:	83 bf       	out	0x33, r24	; 51
    
    //set toggle output mode
    TCCR0 |= (1 << COM00); //and 0 << COM00;
     4c2:	83 b7       	in	r24, 0x33	; 51
     4c4:	80 61       	ori	r24, 0x10	; 16
     4c6:	83 bf       	out	0x33, r24	; 51
    
    TCCR0 |= PRESC_1;
     4c8:	83 b7       	in	r24, 0x33	; 51
     4ca:	81 60       	ori	r24, 0x01	; 1
     4cc:	83 bf       	out	0x33, r24	; 51
     4ce:	08 95       	ret

000004d0 <pwm_setFreq>:

}

void pwm_setFreq(uint32_t freq) {
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	9b 01       	movw	r18, r22
     4e4:	ac 01       	movw	r20, r24
    if (freq == 0) {
     4e6:	67 2b       	or	r22, r23
     4e8:	68 2b       	or	r22, r24
     4ea:	69 2b       	or	r22, r25
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <pwm_setFreq+0x26>
        TCCR0 &= PRESC_OFF;
     4ee:	83 b7       	in	r24, 0x33	; 51
     4f0:	88 7f       	andi	r24, 0xF8	; 248
     4f2:	83 bf       	out	0x33, r24	; 51
        return;
     4f4:	ae c0       	rjmp	.+348    	; 0x652 <__stack+0x153>
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e8       	ldi	r23, 0x80	; 128
     4fa:	85 e2       	ldi	r24, 0x25	; 37
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__udivmodsi4>
     502:	69 01       	movw	r12, r18
     504:	7a 01       	movw	r14, r20

    if (ocr_plus_one > 255+1) {
     506:	21 30       	cpi	r18, 0x01	; 1
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	38 07       	cpc	r19, r24
     50c:	41 05       	cpc	r20, r1
     50e:	51 05       	cpc	r21, r1
     510:	c8 f1       	brcs	.+114    	; 0x584 <__stack+0x85>
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;
     512:	68 94       	set
     514:	12 f8       	bld	r1, 2
     516:	f6 94       	lsr	r15
     518:	e7 94       	ror	r14
     51a:	d7 94       	ror	r13
     51c:	c7 94       	ror	r12
     51e:	16 94       	lsr	r1
     520:	d1 f7       	brne	.-12     	; 0x516 <__stack+0x17>

        if (ocr_plus_one > 255+1) {
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	c9 16       	cp	r12, r25
     526:	d9 06       	cpc	r13, r25
     528:	e1 04       	cpc	r14, r1
     52a:	f1 04       	cpc	r15, r1
     52c:	90 f1       	brcs	.+100    	; 0x592 <__stack+0x93>
            prescaler = PRESC_64;
			presc_num *=8;
			
            ocr_plus_one /= 8;
     52e:	69 01       	movw	r12, r18
     530:	7a 01       	movw	r14, r20
     532:	68 94       	set
     534:	15 f8       	bld	r1, 5
     536:	f6 94       	lsr	r15
     538:	e7 94       	ror	r14
     53a:	d7 94       	ror	r13
     53c:	c7 94       	ror	r12
     53e:	16 94       	lsr	r1
     540:	d1 f7       	brne	.-12     	; 0x536 <__stack+0x37>
            
            if (ocr_plus_one > 255+1) {
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	c8 16       	cp	r12, r24
     546:	d8 06       	cpc	r13, r24
     548:	e1 04       	cpc	r14, r1
     54a:	f1 04       	cpc	r15, r1
     54c:	50 f1       	brcs	.+84     	; 0x5a2 <__stack+0xa3>
                prescaler = PRESC_256;
				presc_num *=4;

                ocr_plus_one /= 4;
     54e:	c3 2e       	mov	r12, r19
     550:	d4 2e       	mov	r13, r20
     552:	e5 2e       	mov	r14, r21
     554:	ff 24       	eor	r15, r15
                    
                if (ocr_plus_one > 255+1) {
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	c9 16       	cp	r12, r25
     55a:	d9 06       	cpc	r13, r25
     55c:	e1 04       	cpc	r14, r1
     55e:	f1 04       	cpc	r15, r1
     560:	40 f1       	brcs	.+80     	; 0x5b2 <__stack+0xb3>
                    prescaler = PRESC_1024;
					presc_num *=4;
                    ocr_plus_one /= 4;
     562:	69 01       	movw	r12, r18
     564:	7a 01       	movw	r14, r20
     566:	0b 2e       	mov	r0, r27
     568:	ba e0       	ldi	r27, 0x0A	; 10
     56a:	f6 94       	lsr	r15
     56c:	e7 94       	ror	r14
     56e:	d7 94       	ror	r13
     570:	c7 94       	ror	r12
     572:	ba 95       	dec	r27
     574:	d1 f7       	brne	.-12     	; 0x56a <__stack+0x6b>
     576:	b0 2d       	mov	r27, r0

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
					presc_num *=4;
     578:	b1 2c       	mov	r11, r1
     57a:	04 e0       	ldi	r16, 0x04	; 4
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	d0 e0       	ldi	r29, 0x00	; 0
				presc_num *=4;

                ocr_plus_one /= 4;
                    
                if (ocr_plus_one > 255+1) {
                    prescaler = PRESC_1024;
     580:	c5 e0       	ldi	r28, 0x05	; 5
     582:	1c c0       	rjmp	.+56     	; 0x5bc <__stack+0xbd>
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
     584:	bb 24       	eor	r11, r11
     586:	b3 94       	inc	r11
     588:	00 e0       	ldi	r16, 0x00	; 0
     58a:	10 e0       	ldi	r17, 0x00	; 0
     58c:	d0 e0       	ldi	r29, 0x00	; 0
    if (freq == 0) {
        TCCR0 &= PRESC_OFF;
        return;
    }
    //first calculate for prescaling type 1
    prescaling prescaler = PRESC_1;
     58e:	c1 e0       	ldi	r28, 0x01	; 1
     590:	15 c0       	rjmp	.+42     	; 0x5bc <__stack+0xbd>
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
		presc_num *=8;
     592:	68 94       	set
     594:	bb 24       	eor	r11, r11
     596:	b3 f8       	bld	r11, 3
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	d0 e0       	ldi	r29, 0x00	; 0
    prescaling prescaler = PRESC_1;
	uint32_t presc_num = 1;
    uint32_t ocr_plus_one = F_CPU/(2*1)/freq;

    if (ocr_plus_one > 255+1) {
        prescaler = PRESC_8;
     59e:	c2 e0       	ldi	r28, 0x02	; 2
     5a0:	0d c0       	rjmp	.+26     	; 0x5bc <__stack+0xbd>
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
			presc_num *=8;
     5a2:	68 94       	set
     5a4:	bb 24       	eor	r11, r11
     5a6:	b6 f8       	bld	r11, 6
     5a8:	00 e0       	ldi	r16, 0x00	; 0
     5aa:	10 e0       	ldi	r17, 0x00	; 0
     5ac:	d0 e0       	ldi	r29, 0x00	; 0
        prescaler = PRESC_8;
		presc_num *=8;
        ocr_plus_one /= 8;

        if (ocr_plus_one > 255+1) {
            prescaler = PRESC_64;
     5ae:	c3 e0       	ldi	r28, 0x03	; 3
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <__stack+0xbd>
			
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
				presc_num *=4;
     5b2:	b1 2c       	mov	r11, r1
     5b4:	01 e0       	ldi	r16, 0x01	; 1
     5b6:	10 e0       	ldi	r17, 0x00	; 0
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
			presc_num *=8;
			
            ocr_plus_one /= 8;
            
            if (ocr_plus_one > 255+1) {
                prescaler = PRESC_256;
     5ba:	c4 e0       	ldi	r28, 0x04	; 4
                    ocr_plus_one /= 4;
                }
            }
        }
    }
	printf("Prescaler: %i\t ocr_plus_one: %i\n\r", presc_num, ocr_plus_one);
     5bc:	ff 92       	push	r15
     5be:	ef 92       	push	r14
     5c0:	df 92       	push	r13
     5c2:	cf 92       	push	r12
     5c4:	df 93       	push	r29
     5c6:	1f 93       	push	r17
     5c8:	0f 93       	push	r16
     5ca:	bf 92       	push	r11
     5cc:	8a e9       	ldi	r24, 0x9A	; 154
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	0e 94 15 0a 	call	0x142a	; 0x142a <printf>
	printf("ocr:  %i\n\r", ocr_plus_one-1);
     5d8:	d7 01       	movw	r26, r14
     5da:	c6 01       	movw	r24, r12
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	a1 09       	sbc	r26, r1
     5e0:	b1 09       	sbc	r27, r1
     5e2:	bf 93       	push	r27
     5e4:	af 93       	push	r26
     5e6:	9f 93       	push	r25
     5e8:	8f 93       	push	r24
     5ea:	8c eb       	ldi	r24, 0xBC	; 188
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	0e 94 15 0a 	call	0x142a	; 0x142a <printf>
	uint32_t frequency = F_CPU/(2*presc_num*(ocr_plus_one));
	printf("frequency obtained: %i\n\n\r", frequency);
     5f6:	2b 2d       	mov	r18, r11
     5f8:	30 2f       	mov	r19, r16
     5fa:	41 2f       	mov	r20, r17
     5fc:	5d 2f       	mov	r21, r29
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsi3>
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	22 0f       	add	r18, r18
     60c:	33 1f       	adc	r19, r19
     60e:	44 1f       	adc	r20, r20
     610:	55 1f       	adc	r21, r21
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	8b e4       	ldi	r24, 0x4B	; 75
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__udivmodsi4>
     61e:	5f 93       	push	r21
     620:	4f 93       	push	r20
     622:	3f 93       	push	r19
     624:	2f 93       	push	r18
     626:	87 ec       	ldi	r24, 0xC7	; 199
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	9f 93       	push	r25
     62c:	8f 93       	push	r24
     62e:	0e 94 15 0a 	call	0x142a	; 0x142a <printf>
    //set prescaler bits to 0 first to reset
    TCCR0 &= PRESC_OFF; 
     632:	83 b7       	in	r24, 0x33	; 51
     634:	88 7f       	andi	r24, 0xF8	; 248
     636:	83 bf       	out	0x33, r24	; 51
    //set correct prescaler    
    TCCR0 |= prescaler;
     638:	83 b7       	in	r24, 0x33	; 51
     63a:	c8 2b       	or	r28, r24
     63c:	c3 bf       	out	0x33, r28	; 51
	OCR0 = ocr_plus_one-1;
     63e:	ca 94       	dec	r12
     640:	c1 be       	out	0x31, r12	; 49
     642:	8d b7       	in	r24, 0x3d	; 61
     644:	9e b7       	in	r25, 0x3e	; 62
     646:	46 96       	adiw	r24, 0x16	; 22
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	9e bf       	out	0x3e, r25	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	8d bf       	out	0x3d, r24	; 61
	
    
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	bf 90       	pop	r11
     664:	08 95       	ret

00000666 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     666:	85 b7       	in	r24, 0x35	; 53
     668:	8f 7e       	andi	r24, 0xEF	; 239
     66a:	85 bf       	out	0x35, r24	; 53
     66c:	84 b7       	in	r24, 0x34	; 52
     66e:	8f 7d       	andi	r24, 0xDF	; 223
     670:	84 bf       	out	0x34, r24	; 52
     672:	86 b7       	in	r24, 0x36	; 54
     674:	8f 77       	andi	r24, 0x7F	; 127
     676:	86 bf       	out	0x36, r24	; 54
	
	//Set sleep mode
	sleep_mode();
     678:	85 b7       	in	r24, 0x35	; 53
     67a:	80 62       	ori	r24, 0x20	; 32
     67c:	85 bf       	out	0x35, r24	; 53
     67e:	88 95       	sleep
     680:	85 b7       	in	r24, 0x35	; 53
     682:	8f 7d       	andi	r24, 0xDF	; 223
     684:	85 bf       	out	0x35, r24	; 53
	
	//Enable sleep
	sleep_enable();
     686:	85 b7       	in	r24, 0x35	; 53
     688:	80 62       	ori	r24, 0x20	; 32
     68a:	85 bf       	out	0x35, r24	; 53
     68c:	08 95       	ret

0000068e <joystickInit>:
uint8_t joystickOffsetX;
uint8_t joystickOffsetY;


void joystickInit() {
	joystickOffsetX = readAdc(X_POS_CHANNEL);
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 8c 01 	call	0x318	; 0x318 <readAdc>
     694:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <joystickOffsetX>
	joystickOffsetY = readAdc(Y_POS_CHANNEL);
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 8c 01 	call	0x318	; 0x318 <readAdc>
     69e:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <joystickOffsetY>
     6a2:	08 95       	ret

000006a4 <joystick_readPosition>:
}
void joystick_readPosition() {
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
	uint8_t x_pos = readAdc(X_POS_CHANNEL);
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 8c 01 	call	0x318	; 0x318 <readAdc>
     6b6:	c8 2f       	mov	r28, r24
	uint8_t y_pos = readAdc(Y_POS_CHANNEL);
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 8c 01 	call	0x318	; 0x318 <readAdc>
     6be:	e8 2f       	mov	r30, r24
	if (x_pos < joystickOffsetX) {
     6c0:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <joystickOffsetX>
     6c4:	c6 17       	cp	r28, r22
     6c6:	80 f4       	brcc	.+32     	; 0x6e8 <joystick_readPosition+0x44>
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(joystickOffsetX);
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	2c 2f       	mov	r18, r28
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	26 1b       	sub	r18, r22
     6d0:	37 0b       	sbc	r19, r23
     6d2:	44 e6       	ldi	r20, 0x64	; 100
     6d4:	42 9f       	mul	r20, r18
     6d6:	c0 01       	movw	r24, r0
     6d8:	43 9f       	mul	r20, r19
     6da:	90 0d       	add	r25, r0
     6dc:	11 24       	eor	r1, r1
     6de:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodhi4>
     6e2:	60 93 4e 02 	sts	0x024E, r22	; 0x80024e <__data_end>
     6e6:	14 c0       	rjmp	.+40     	; 0x710 <joystick_readPosition+0x6c>
	} else {
		joystick_pos.x_pos = ((x_pos - joystickOffsetX)*100)/(255-joystickOffsetX);
     6e8:	46 2f       	mov	r20, r22
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	2c 2f       	mov	r18, r28
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	24 1b       	sub	r18, r20
     6f2:	35 0b       	sbc	r19, r21
     6f4:	64 e6       	ldi	r22, 0x64	; 100
     6f6:	62 9f       	mul	r22, r18
     6f8:	c0 01       	movw	r24, r0
     6fa:	63 9f       	mul	r22, r19
     6fc:	90 0d       	add	r25, r0
     6fe:	11 24       	eor	r1, r1
     700:	6f ef       	ldi	r22, 0xFF	; 255
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	64 1b       	sub	r22, r20
     706:	75 0b       	sbc	r23, r21
     708:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodhi4>
     70c:	60 93 4e 02 	sts	0x024E, r22	; 0x80024e <__data_end>
	}
	if (y_pos < joystickOffsetY) {
     710:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <joystickOffsetY>
     714:	e2 17       	cp	r30, r18
     716:	88 f4       	brcc	.+34     	; 0x73a <joystick_readPosition+0x96>
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(joystickOffsetY);
     718:	62 2f       	mov	r22, r18
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	4e 2f       	mov	r20, r30
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	46 1b       	sub	r20, r22
     722:	57 0b       	sbc	r21, r23
     724:	24 e6       	ldi	r18, 0x64	; 100
     726:	24 9f       	mul	r18, r20
     728:	c0 01       	movw	r24, r0
     72a:	25 9f       	mul	r18, r21
     72c:	90 0d       	add	r25, r0
     72e:	11 24       	eor	r1, r1
     730:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodhi4>
     734:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <__data_end+0x1>
     738:	13 c0       	rjmp	.+38     	; 0x760 <joystick_readPosition+0xbc>
	} else {
		joystick_pos.y_pos = ((y_pos - joystickOffsetY)*100)/(255-joystickOffsetY);
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	4e 2f       	mov	r20, r30
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	42 1b       	sub	r20, r18
     742:	53 0b       	sbc	r21, r19
     744:	64 e6       	ldi	r22, 0x64	; 100
     746:	64 9f       	mul	r22, r20
     748:	c0 01       	movw	r24, r0
     74a:	65 9f       	mul	r22, r21
     74c:	90 0d       	add	r25, r0
     74e:	11 24       	eor	r1, r1
     750:	6f ef       	ldi	r22, 0xFF	; 255
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	62 1b       	sub	r22, r18
     756:	73 0b       	sbc	r23, r19
     758:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodhi4>
     75c:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <__data_end+0x1>
	}
	joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     760:	ce e4       	ldi	r28, 0x4E	; 78
     762:	d2 e0       	ldi	r29, 0x02	; 2
     764:	68 81       	ld	r22, Y
     766:	06 2e       	mov	r0, r22
     768:	00 0c       	add	r0, r0
     76a:	77 0b       	sbc	r23, r23
     76c:	88 0b       	sbc	r24, r24
     76e:	99 0b       	sbc	r25, r25
     770:	0e 94 95 06 	call	0xd2a	; 0xd2a <__floatsisf>
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
     778:	69 81       	ldd	r22, Y+1	; 0x01
     77a:	06 2e       	mov	r0, r22
     77c:	00 0c       	add	r0, r0
     77e:	77 0b       	sbc	r23, r23
     780:	88 0b       	sbc	r24, r24
     782:	99 0b       	sbc	r25, r25
     784:	0e 94 95 06 	call	0xd2a	; 0xd2a <__floatsisf>
     788:	a7 01       	movw	r20, r14
     78a:	96 01       	movw	r18, r12
     78c:	0e 94 8c 05 	call	0xb18	; 0xb18 <atan2>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	44 eb       	ldi	r20, 0xB4	; 180
     796:	53 e4       	ldi	r21, 0x43	; 67
     798:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsf3>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	5f e3       	ldi	r21, 0x3F	; 63
     7a4:	0e 94 50 07 	call	0xea0	; 0xea0 <__mulsf3>
     7a8:	23 ec       	ldi	r18, 0xC3	; 195
     7aa:	35 ef       	ldi	r19, 0xF5	; 245
     7ac:	48 e4       	ldi	r20, 0x48	; 72
     7ae:	50 e4       	ldi	r21, 0x40	; 64
     7b0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divsf3>
     7b4:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
     7b8:	7b 83       	std	Y+3, r23	; 0x03
     7ba:	6a 83       	std	Y+2, r22	; 0x02
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	08 95       	ret

000007ca <mainMenuInit>:




MenuNode* mainMenuInit (void){
	MenuNode* ptr = (MenuNode*) malloc(sizeof(MenuNode));
     7ca:	8f e1       	ldi	r24, 0x1F	; 31
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 a2 08 	call	0x1144	; 0x1144 <malloc>
	ptr->numChildren = 0;
     7d2:	fc 01       	movw	r30, r24
     7d4:	16 8e       	std	Z+30, r1	; 0x1e
	strcpy(ptr->name, "Main menu");
     7d6:	2a e0       	ldi	r18, 0x0A	; 10
     7d8:	e8 e0       	ldi	r30, 0x08	; 8
     7da:	f2 e0       	ldi	r31, 0x02	; 2
     7dc:	dc 01       	movw	r26, r24
     7de:	01 90       	ld	r0, Z+
     7e0:	0d 92       	st	X+, r0
     7e2:	2a 95       	dec	r18
     7e4:	e1 f7       	brne	.-8      	; 0x7de <mainMenuInit+0x14>
	ptr->parent = NULL;
     7e6:	fc 01       	movw	r30, r24
     7e8:	11 8a       	std	Z+17, r1	; 0x11
     7ea:	10 8a       	std	Z+16, r1	; 0x10
	
	return ptr;
}
     7ec:	08 95       	ret

000007ee <addChild>:

MenuNode * addChild(MenuNode* parent, char* child_name)
{
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	7c 01       	movw	r14, r24
     7fe:	6b 01       	movw	r12, r22
	MenuNode* childPtr = (MenuNode*) malloc(sizeof(MenuNode));
     800:	8f e1       	ldi	r24, 0x1F	; 31
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 a2 08 	call	0x1144	; 0x1144 <malloc>
     808:	8c 01       	movw	r16, r24
	
	parent->numChildren++;
     80a:	d7 01       	movw	r26, r14
     80c:	5e 96       	adiw	r26, 0x1e	; 30
     80e:	ec 91       	ld	r30, X
     810:	5e 97       	sbiw	r26, 0x1e	; 30
     812:	c1 e0       	ldi	r28, 0x01	; 1
     814:	ce 0f       	add	r28, r30
     816:	5e 96       	adiw	r26, 0x1e	; 30
     818:	cc 93       	st	X, r28
	strcpy(childPtr->name, child_name);
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcpy>
	childPtr->parent = parent;
     820:	f8 01       	movw	r30, r16
     822:	f1 8a       	std	Z+17, r15	; 0x11
     824:	e0 8a       	std	Z+16, r14	; 0x10
	
	if (parent->numChildren > MAXCHILDREN) {
     826:	c7 30       	cpi	r28, 0x07	; 7
     828:	78 f4       	brcc	.+30     	; 0x848 <addChild+0x5a>
		return NULL;
	} 
	parent->children[parent->numChildren-1]=childPtr;
     82a:	ec 2f       	mov	r30, r28
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	38 96       	adiw	r30, 0x08	; 8
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	ee 0d       	add	r30, r14
     836:	ff 1d       	adc	r31, r15
     838:	11 83       	std	Z+1, r17	; 0x01
     83a:	00 83       	st	Z, r16
	parent->children[parent->numChildren-1]->numChildren = 0;
     83c:	d8 01       	movw	r26, r16
     83e:	5e 96       	adiw	r26, 0x1e	; 30
     840:	1c 92       	st	X, r1
	return childPtr;
     842:	80 2f       	mov	r24, r16
     844:	91 2f       	mov	r25, r17
     846:	02 c0       	rjmp	.+4      	; 0x84c <addChild+0x5e>
	parent->numChildren++;
	strcpy(childPtr->name, child_name);
	childPtr->parent = parent;
	
	if (parent->numChildren > MAXCHILDREN) {
		return NULL;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
	} 
	parent->children[parent->numChildren-1]=childPtr;
	parent->children[parent->numChildren-1]->numChildren = 0;
	return childPtr;
}
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	08 95       	ret

0000085c <menuInit>:

MenuNode* menuInit(void)
{
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
	MenuNode* mainMenu = mainMenuInit();
     868:	0e 94 e5 03 	call	0x7ca	; 0x7ca <mainMenuInit>
     86c:	7c 01       	movw	r14, r24
		
	MenuNode * childPlayGame = addChild(mainMenu,"Play game");
     86e:	62 e1       	ldi	r22, 0x12	; 18
     870:	72 e0       	ldi	r23, 0x02	; 2
     872:	0e 94 f7 03 	call	0x7ee	; 0x7ee <addChild>
     876:	ec 01       	movw	r28, r24
	addChild(childPlayGame,"GAME 1");
     878:	6c e1       	ldi	r22, 0x1C	; 28
     87a:	72 e0       	ldi	r23, 0x02	; 2
     87c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <addChild>
	addChild(childPlayGame,"GAME 2");
     880:	63 e2       	ldi	r22, 0x23	; 35
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	ce 01       	movw	r24, r28
     886:	0e 94 f7 03 	call	0x7ee	; 0x7ee <addChild>
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
     88a:	6a e2       	ldi	r22, 0x2A	; 42
     88c:	72 e0       	ldi	r23, 0x02	; 2
     88e:	c7 01       	movw	r24, r14
     890:	0e 94 f7 03 	call	0x7ee	; 0x7ee <addChild>
     894:	8c 01       	movw	r16, r24
     896:	c5 e0       	ldi	r28, 0x05	; 5
     898:	d0 e0       	ldi	r29, 0x00	; 0
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
		addChild(childHighscore, "High: 1");
     89a:	64 e3       	ldi	r22, 0x34	; 52
     89c:	72 e0       	ldi	r23, 0x02	; 2
     89e:	c8 01       	movw	r24, r16
     8a0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <addChild>
     8a4:	21 97       	sbiw	r28, 0x01	; 1
	
	
	MenuNode * childHighscore = addChild(mainMenu,"Highscore");
	//childHighscore->numChildren = 5;
	
	for (int i = 0; i< 5; i++) {
     8a6:	c9 f7       	brne	.-14     	; 0x89a <menuInit+0x3e>
		addChild(childHighscore, "High: 1");
	}
	
	MenuNode* childSettings = addChild(mainMenu,"Settings");
     8a8:	6c e3       	ldi	r22, 0x3C	; 60
     8aa:	72 e0       	ldi	r23, 0x02	; 2
     8ac:	c7 01       	movw	r24, r14
     8ae:	0e 94 f7 03 	call	0x7ee	; 0x7ee <addChild>
	//childSettings->numChildren = 1;
	addChild(childSettings, "No sett");
     8b2:	65 e4       	ldi	r22, 0x45	; 69
     8b4:	72 e0       	ldi	r23, 0x02	; 2
     8b6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <addChild>
	currentMenu.currentMenuItem = mainMenu;
     8ba:	e2 e5       	ldi	r30, 0x52	; 82
     8bc:	f2 e0       	ldi	r31, 0x02	; 2
     8be:	f1 82       	std	Z+1, r15	; 0x01
     8c0:	e0 82       	st	Z, r14
	currentMenu.childIndex = 0;
     8c2:	12 82       	std	Z+2, r1	; 0x02
	currentMenu.lastDir = NEUTRAL;
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	83 83       	std	Z+3, r24	; 0x03
	

	return mainMenu;
}
     8c8:	c7 01       	movw	r24, r14
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	08 95       	ret

000008d8 <oled_pos>:
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
}
void oled_write_d(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_DATA_BASE_ADDRESS;
	*ext_mem = data;
     8d8:	80 55       	subi	r24, 0x50	; 80
     8da:	e0 e0       	ldi	r30, 0x00	; 0
     8dc:	f0 e1       	ldi	r31, 0x10	; 16
     8de:	80 83       	st	Z, r24
     8e0:	86 2f       	mov	r24, r22
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	80 83       	st	Z, r24
     8e6:	62 95       	swap	r22
     8e8:	6f 70       	andi	r22, 0x0F	; 15
     8ea:	60 61       	ori	r22, 0x10	; 16
     8ec:	60 83       	st	Z, r22
     8ee:	08 95       	ret

000008f0 <oled_reset>:
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	c0 e0       	ldi	r28, 0x00	; 0
     8fa:	d2 e1       	ldi	r29, 0x12	; 18
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	81 2f       	mov	r24, r17
     900:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <oled_pos>
     904:	80 e8       	ldi	r24, 0x80	; 128
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	18 82       	st	Y, r1
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	e9 f7       	brne	.-6      	; 0x908 <oled_reset+0x18>
     90e:	1f 5f       	subi	r17, 0xFF	; 255
     910:	18 30       	cpi	r17, 0x08	; 8
     912:	a1 f7       	brne	.-24     	; 0x8fc <oled_reset+0xc>
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	08 95       	ret

0000091c <oled_home>:
	oled_write_d(0b00011000);
	oled_write_d(0b00011000);
}

void oled_home() {
	oled_pos(0,0);
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <oled_pos>
     924:	08 95       	ret

00000926 <oled_init>:
#define OLED_COMMAND_BASE_ADDRESS 0x1000
#define OLED_DATA_BASE_ADDRESS 0x1200
//#include <util/delay.h>
void oled_write_c(uint8_t data) {
	volatile char *ext_mem = (char *) OLED_COMMAND_BASE_ADDRESS;
	*ext_mem = data;
     926:	e0 e0       	ldi	r30, 0x00	; 0
     928:	f0 e1       	ldi	r31, 0x10	; 16
     92a:	8e ea       	ldi	r24, 0xAE	; 174
     92c:	80 83       	st	Z, r24
     92e:	81 ea       	ldi	r24, 0xA1	; 161
     930:	80 83       	st	Z, r24
     932:	8a ed       	ldi	r24, 0xDA	; 218
     934:	80 83       	st	Z, r24
     936:	82 e1       	ldi	r24, 0x12	; 18
     938:	80 83       	st	Z, r24
     93a:	88 ec       	ldi	r24, 0xC8	; 200
     93c:	80 83       	st	Z, r24
     93e:	88 ea       	ldi	r24, 0xA8	; 168
     940:	80 83       	st	Z, r24
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	80 83       	st	Z, r24
     946:	85 ed       	ldi	r24, 0xD5	; 213
     948:	80 83       	st	Z, r24
     94a:	80 e8       	ldi	r24, 0x80	; 128
     94c:	80 83       	st	Z, r24
     94e:	81 e8       	ldi	r24, 0x81	; 129
     950:	80 83       	st	Z, r24
     952:	80 e5       	ldi	r24, 0x50	; 80
     954:	80 83       	st	Z, r24
     956:	89 ed       	ldi	r24, 0xD9	; 217
     958:	80 83       	st	Z, r24
     95a:	81 e2       	ldi	r24, 0x21	; 33
     95c:	80 83       	st	Z, r24
     95e:	80 e2       	ldi	r24, 0x20	; 32
     960:	80 83       	st	Z, r24
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	80 83       	st	Z, r24
     966:	8b ed       	ldi	r24, 0xDB	; 219
     968:	80 83       	st	Z, r24
     96a:	80 e3       	ldi	r24, 0x30	; 48
     96c:	80 83       	st	Z, r24
     96e:	8d ea       	ldi	r24, 0xAD	; 173
     970:	80 83       	st	Z, r24
     972:	10 82       	st	Z, r1
     974:	84 ea       	ldi	r24, 0xA4	; 164
     976:	80 83       	st	Z, r24
     978:	86 ea       	ldi	r24, 0xA6	; 166
     97a:	80 83       	st	Z, r24
     97c:	8f ea       	ldi	r24, 0xAF	; 175
     97e:	80 83       	st	Z, r24
	oled_write_c(0xa6); //set normal display
	oled_write_c(0xaf); // display on
	
	//oled_write_c(0xa5);
	//_delay_ms(100);
	oled_reset();
     980:	0e 94 78 04 	call	0x8f0	; 0x8f0 <oled_reset>
	oled_home();
     984:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_home>
     988:	08 95       	ret

0000098a <setupInit>:
#include "timer.h"
#include "sleep.h"
#include "SPI.h"

	void setupInit(void){
	xmem_init();
     98a:	0e 94 72 05 	call	0xae4	; 0xae4 <xmem_init>
	USART_init(MYUBRR);
     98e:	8f e1       	ldi	r24, 0x1F	; 31
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 61 05 	call	0xac2	; 0xac2 <USART_init>
	adcInit();
     996:	0e 94 8a 01 	call	0x314	; 0x314 <adcInit>
	joystickInit();
     99a:	0e 94 47 03 	call	0x68e	; 0x68e <joystickInit>
	touchButton_init();
     99e:	0e 94 34 05 	call	0xa68	; 0xa68 <touchButton_init>
	oled_init();
     9a2:	0e 94 93 04 	call	0x926	; 0x926 <oled_init>
	timer_init();
     9a6:	0e 94 24 05 	call	0xa48	; 0xa48 <timer_init>
	sleep_init();
     9aa:	0e 94 33 03 	call	0x666	; 0x666 <sleep_init>
	menuInit();
     9ae:	0e 94 2e 04 	call	0x85c	; 0x85c <menuInit>
	SPI_MasterInit();
     9b2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <SPI_MasterInit>
     9b6:	08 95       	ret

000009b8 <slider_readPosition>:
#define LEFT_POS_CHANNEL 2
#define RIGHT_POS_CHANNEL 3
#include "slider.h"
#include "adc.h"
void slider_readPosition(slider_position_t * pos) {
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
	slider_pos.left_pos = readAdc(LEFT_POS_CHANNEL);
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	0e 94 8c 01 	call	0x318	; 0x318 <readAdc>
     9c2:	c8 e5       	ldi	r28, 0x58	; 88
     9c4:	d2 e0       	ldi	r29, 0x02	; 2
     9c6:	88 83       	st	Y, r24
	slider_pos.right_pos = readAdc(RIGHT_POS_CHANNEL);
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	0e 94 8c 01 	call	0x318	; 0x318 <readAdc>
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	//select slave output
	DDRB = (1 << PB4);
     9d6:	80 e1       	ldi	r24, 0x10	; 16
     9d8:	87 bb       	out	0x17, r24	; 23
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5) | (1 << PB7);
     9da:	80 ea       	ldi	r24, 0xA0	; 160
     9dc:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     9de:	81 e5       	ldi	r24, 0x51	; 81
     9e0:	8d b9       	out	0x0d, r24	; 13
     9e2:	08 95       	ret

000009e4 <__vector_14>:
#include "slider.h"
#include "touchButton.h"
#include "menu.h"


ISR (TIMER1_COMPB_vect) {
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
	cli();
     a06:	f8 94       	cli
	TCNT1 = 0x00;
     a08:	1d bc       	out	0x2d, r1	; 45
     a0a:	1c bc       	out	0x2c, r1	; 44
	joystick_readPosition(&joystick_pos);
     a0c:	8e e4       	ldi	r24, 0x4E	; 78
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	0e 94 52 03 	call	0x6a4	; 0x6a4 <joystick_readPosition>
	slider_readPosition(&slider_pos);
     a14:	88 e5       	ldi	r24, 0x58	; 88
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <slider_readPosition>
	touchButton_readButtons(&buttons);
     a1c:	86 e5       	ldi	r24, 0x56	; 86
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e 94 4d 05 	call	0xa9a	; 0xa9a <touchButton_readButtons>
	sei();
     a24:	78 94       	sei
}
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	bf 91       	pop	r27
     a2c:	af 91       	pop	r26
     a2e:	9f 91       	pop	r25
     a30:	8f 91       	pop	r24
     a32:	7f 91       	pop	r23
     a34:	6f 91       	pop	r22
     a36:	5f 91       	pop	r21
     a38:	4f 91       	pop	r20
     a3a:	3f 91       	pop	r19
     a3c:	2f 91       	pop	r18
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <timer_init>:
}

*/
void timer_init() {
	//Disable global interrupts
	cli();
     a48:	f8 94       	cli
	
	//////////////////////////TIMER 1 (16 bit)//////////////////////////////////
	
	//Enable "compare output match" interrupt
	TIMSK |= (1 << OCIE1B);
     a4a:	89 b7       	in	r24, 0x39	; 57
     a4c:	80 62       	ori	r24, 0x20	; 32
     a4e:	89 bf       	out	0x39, r24	; 57

	
	//This register cointains counter value
	TCNT1 = 0x00;
     a50:	1d bc       	out	0x2d, r1	; 45
     a52:	1c bc       	out	0x2c, r1	; 44
	
	//set up compare output mode & clock select (prescaling)
	TCCR1A = (1 << COM1B0 | 1 << COM1B1);
     a54:	80 e3       	ldi	r24, 0x30	; 48
     a56:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS12 | 1 << CS00);
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	8e bd       	out	0x2e, r24	; 46
	
	//Output compare register containing value compared to counter
	OCR1B = TIMER1_RESET;
     a5c:	80 ef       	ldi	r24, 0xF0	; 240
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	99 bd       	out	0x29, r25	; 41
     a62:	88 bd       	out	0x28, r24	; 40
	
	OCR0 = TIMER0_RESET;
	*/
	
	//Enable global interrupts
	sei();
     a64:	78 94       	sei
     a66:	08 95       	ret

00000a68 <touchButton_init>:

#include "touchButton.h"
#include "adc.h"

void touchButton_init() {
	DDRB &= ~(1 << BUTTON_LEFT | 1 << BUTTON_RIGHT);
     a68:	36 b3       	in	r19, 0x16	; 22
     a6a:	26 b3       	in	r18, 0x16	; 22
     a6c:	47 b3       	in	r20, 0x17	; 23
     a6e:	32 70       	andi	r19, 0x02	; 2
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	bc 01       	movw	r22, r24
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <touchButton_init+0x14>
     a78:	66 0f       	add	r22, r22
     a7a:	77 1f       	adc	r23, r23
     a7c:	3a 95       	dec	r19
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <touchButton_init+0x10>
     a80:	24 70       	andi	r18, 0x04	; 4
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <touchButton_init+0x20>
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	2a 95       	dec	r18
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <touchButton_init+0x1c>
     a8c:	86 2b       	or	r24, r22
     a8e:	97 2b       	or	r25, r23
     a90:	80 95       	com	r24
     a92:	90 95       	com	r25
     a94:	84 23       	and	r24, r20
     a96:	87 bb       	out	0x17, r24	; 23
     a98:	08 95       	ret

00000a9a <touchButton_readButtons>:
}
void touchButton_readButtons() {
	buttons.left_button = !!(BUTTON_LEFT);
     a9a:	86 b3       	in	r24, 0x16	; 22
     a9c:	e6 e5       	ldi	r30, 0x56	; 86
     a9e:	f2 e0       	ldi	r31, 0x02	; 2
     aa0:	86 95       	lsr	r24
     aa2:	81 70       	andi	r24, 0x01	; 1
     aa4:	80 83       	st	Z, r24
	buttons.right_button = !!(BUTTON_RIGHT);
     aa6:	86 b3       	in	r24, 0x16	; 22
     aa8:	82 fb       	bst	r24, 2
     aaa:	88 27       	eor	r24, r24
     aac:	80 f9       	bld	r24, 0
     aae:	81 83       	std	Z+1, r24	; 0x01
     ab0:	08 95       	ret

00000ab2 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     ab2:	5d 9b       	sbis	0x0b, 5	; 11
     ab4:	fe cf       	rjmp	.-4      	; 0xab2 <USART_transmitChar>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     ab6:	8c b9       	out	0x0c, r24	; 12
     ab8:	08 95       	ret

00000aba <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     aba:	5f 9b       	sbis	0x0b, 7	; 11
     abc:	fe cf       	rjmp	.-4      	; 0xaba <USART_receiveChar>
		;
	
	return UDR0;
     abe:	8c b1       	in	r24, 0x0c	; 12
     ac0:	08 95       	ret

00000ac2 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     ac2:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     ac4:	89 b9       	out	0x09, r24	; 9
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     ac6:	88 e1       	ldi	r24, 0x18	; 24
     ac8:	8a b9       	out	0x0a, r24	; 10
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	UCSR0C = (1 << URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     aca:	8e e8       	ldi	r24, 0x8E	; 142
     acc:	80 bd       	out	0x20, r24	; 32
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     ace:	6d e5       	ldi	r22, 0x5D	; 93
     ad0:	75 e0       	ldi	r23, 0x05	; 5
     ad2:	89 e5       	ldi	r24, 0x59	; 89
     ad4:	95 e0       	ldi	r25, 0x05	; 5
     ad6:	0e 94 ca 09 	call	0x1394	; 0x1394 <fdevopen>
     ada:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <uart+0x1>
     ade:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <uart>
     ae2:	08 95       	ret

00000ae4 <xmem_init>:
#define BASE_ADDRESS 0x1000;
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1<<SRE);
     ae4:	85 b7       	in	r24, 0x35	; 53
     ae6:	80 68       	ori	r24, 0x80	; 128
     ae8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM0);
     aea:	80 b7       	in	r24, 0x30	; 48
     aec:	88 60       	ori	r24, 0x08	; 8
     aee:	80 bf       	out	0x30, r24	; 48
     af0:	08 95       	ret
     af2:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_pscA>
     af6:	60 f0       	brcs	.+24     	; 0xb10 <xmem_init+0x2c>
     af8:	80 e8       	ldi	r24, 0x80	; 128
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	09 f4       	brne	.+2      	; 0xb00 <xmem_init+0x1c>
     afe:	9e ef       	ldi	r25, 0xFE	; 254
     b00:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_pscB>
     b04:	28 f0       	brcs	.+10     	; 0xb10 <xmem_init+0x2c>
     b06:	40 e8       	ldi	r20, 0x80	; 128
     b08:	51 e0       	ldi	r21, 0x01	; 1
     b0a:	71 f4       	brne	.+28     	; 0xb28 <atan2+0x10>
     b0c:	5e ef       	ldi	r21, 0xFE	; 254
     b0e:	0c c0       	rjmp	.+24     	; 0xb28 <atan2+0x10>
     b10:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_nan>
     b14:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_zero>

00000b18 <atan2>:
     b18:	e9 2f       	mov	r30, r25
     b1a:	e0 78       	andi	r30, 0x80	; 128
     b1c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_split3>
     b20:	40 f3       	brcs	.-48     	; 0xaf2 <xmem_init+0xe>
     b22:	09 2e       	mov	r0, r25
     b24:	05 2a       	or	r0, r21
     b26:	b1 f3       	breq	.-20     	; 0xb14 <xmem_init+0x30>
     b28:	26 17       	cp	r18, r22
     b2a:	37 07       	cpc	r19, r23
     b2c:	48 07       	cpc	r20, r24
     b2e:	59 07       	cpc	r21, r25
     b30:	38 f0       	brcs	.+14     	; 0xb40 <atan2+0x28>
     b32:	0e 2e       	mov	r0, r30
     b34:	07 f8       	bld	r0, 7
     b36:	e0 25       	eor	r30, r0
     b38:	69 f0       	breq	.+26     	; 0xb54 <atan2+0x3c>
     b3a:	e0 25       	eor	r30, r0
     b3c:	e0 64       	ori	r30, 0x40	; 64
     b3e:	0a c0       	rjmp	.+20     	; 0xb54 <atan2+0x3c>
     b40:	ef 63       	ori	r30, 0x3F	; 63
     b42:	07 f8       	bld	r0, 7
     b44:	00 94       	com	r0
     b46:	07 fa       	bst	r0, 7
     b48:	db 01       	movw	r26, r22
     b4a:	b9 01       	movw	r22, r18
     b4c:	9d 01       	movw	r18, r26
     b4e:	dc 01       	movw	r26, r24
     b50:	ca 01       	movw	r24, r20
     b52:	ad 01       	movw	r20, r26
     b54:	ef 93       	push	r30
     b56:	0e 94 02 06 	call	0xc04	; 0xc04 <__divsf3_pse>
     b5a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fp_round>
     b5e:	0e 94 bc 05 	call	0xb78	; 0xb78 <atan>
     b62:	5f 91       	pop	r21
     b64:	55 23       	and	r21, r21
     b66:	39 f0       	breq	.+14     	; 0xb76 <atan2+0x5e>
     b68:	2b ed       	ldi	r18, 0xDB	; 219
     b6a:	3f e0       	ldi	r19, 0x0F	; 15
     b6c:	49 e4       	ldi	r20, 0x49	; 73
     b6e:	50 fd       	sbrc	r21, 0
     b70:	49 ec       	ldi	r20, 0xC9	; 201
     b72:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__addsf3>
     b76:	08 95       	ret

00000b78 <atan>:
     b78:	df 93       	push	r29
     b7a:	dd 27       	eor	r29, r29
     b7c:	b9 2f       	mov	r27, r25
     b7e:	bf 77       	andi	r27, 0x7F	; 127
     b80:	40 e8       	ldi	r20, 0x80	; 128
     b82:	5f e3       	ldi	r21, 0x3F	; 63
     b84:	16 16       	cp	r1, r22
     b86:	17 06       	cpc	r1, r23
     b88:	48 07       	cpc	r20, r24
     b8a:	5b 07       	cpc	r21, r27
     b8c:	18 f4       	brcc	.+6      	; 0xb94 <atan+0x1c>
     b8e:	d9 2f       	mov	r29, r25
     b90:	0e 94 48 07 	call	0xe90	; 0xe90 <inverse>
     b94:	9f 93       	push	r25
     b96:	8f 93       	push	r24
     b98:	7f 93       	push	r23
     b9a:	6f 93       	push	r22
     b9c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <square>
     ba0:	e0 e7       	ldi	r30, 0x70	; 112
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_powser>
     ba8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fp_round>
     bac:	2f 91       	pop	r18
     bae:	3f 91       	pop	r19
     bb0:	4f 91       	pop	r20
     bb2:	5f 91       	pop	r21
     bb4:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3x>
     bb8:	dd 23       	and	r29, r29
     bba:	51 f0       	breq	.+20     	; 0xbd0 <atan+0x58>
     bbc:	90 58       	subi	r25, 0x80	; 128
     bbe:	a2 ea       	ldi	r26, 0xA2	; 162
     bc0:	2a ed       	ldi	r18, 0xDA	; 218
     bc2:	3f e0       	ldi	r19, 0x0F	; 15
     bc4:	49 ec       	ldi	r20, 0xC9	; 201
     bc6:	5f e3       	ldi	r21, 0x3F	; 63
     bc8:	d0 78       	andi	r29, 0x80	; 128
     bca:	5d 27       	eor	r21, r29
     bcc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3x>
     bd0:	df 91       	pop	r29
     bd2:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_round>

00000bd6 <__divsf3>:
     bd6:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3x>
     bda:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_round>
     bde:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_pscB>
     be2:	58 f0       	brcs	.+22     	; 0xbfa <__divsf3+0x24>
     be4:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_pscA>
     be8:	40 f0       	brcs	.+16     	; 0xbfa <__divsf3+0x24>
     bea:	29 f4       	brne	.+10     	; 0xbf6 <__divsf3+0x20>
     bec:	5f 3f       	cpi	r21, 0xFF	; 255
     bee:	29 f0       	breq	.+10     	; 0xbfa <__divsf3+0x24>
     bf0:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_inf>
     bf4:	51 11       	cpse	r21, r1
     bf6:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_szero>
     bfa:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_nan>

00000bfe <__divsf3x>:
     bfe:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_split3>
     c02:	68 f3       	brcs	.-38     	; 0xbde <__divsf3+0x8>

00000c04 <__divsf3_pse>:
     c04:	99 23       	and	r25, r25
     c06:	b1 f3       	breq	.-20     	; 0xbf4 <__divsf3+0x1e>
     c08:	55 23       	and	r21, r21
     c0a:	91 f3       	breq	.-28     	; 0xbf0 <__divsf3+0x1a>
     c0c:	95 1b       	sub	r25, r21
     c0e:	55 0b       	sbc	r21, r21
     c10:	bb 27       	eor	r27, r27
     c12:	aa 27       	eor	r26, r26
     c14:	62 17       	cp	r22, r18
     c16:	73 07       	cpc	r23, r19
     c18:	84 07       	cpc	r24, r20
     c1a:	38 f0       	brcs	.+14     	; 0xc2a <__divsf3_pse+0x26>
     c1c:	9f 5f       	subi	r25, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	aa 1f       	adc	r26, r26
     c28:	a9 f3       	breq	.-22     	; 0xc14 <__divsf3_pse+0x10>
     c2a:	35 d0       	rcall	.+106    	; 0xc96 <__divsf3_pse+0x92>
     c2c:	0e 2e       	mov	r0, r30
     c2e:	3a f0       	brmi	.+14     	; 0xc3e <__divsf3_pse+0x3a>
     c30:	e0 e8       	ldi	r30, 0x80	; 128
     c32:	32 d0       	rcall	.+100    	; 0xc98 <__divsf3_pse+0x94>
     c34:	91 50       	subi	r25, 0x01	; 1
     c36:	50 40       	sbci	r21, 0x00	; 0
     c38:	e6 95       	lsr	r30
     c3a:	00 1c       	adc	r0, r0
     c3c:	ca f7       	brpl	.-14     	; 0xc30 <__divsf3_pse+0x2c>
     c3e:	2b d0       	rcall	.+86     	; 0xc96 <__divsf3_pse+0x92>
     c40:	fe 2f       	mov	r31, r30
     c42:	29 d0       	rcall	.+82     	; 0xc96 <__divsf3_pse+0x92>
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	bb 1f       	adc	r27, r27
     c4c:	26 17       	cp	r18, r22
     c4e:	37 07       	cpc	r19, r23
     c50:	48 07       	cpc	r20, r24
     c52:	ab 07       	cpc	r26, r27
     c54:	b0 e8       	ldi	r27, 0x80	; 128
     c56:	09 f0       	breq	.+2      	; 0xc5a <__divsf3_pse+0x56>
     c58:	bb 0b       	sbc	r27, r27
     c5a:	80 2d       	mov	r24, r0
     c5c:	bf 01       	movw	r22, r30
     c5e:	ff 27       	eor	r31, r31
     c60:	93 58       	subi	r25, 0x83	; 131
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
     c64:	3a f0       	brmi	.+14     	; 0xc74 <__divsf3_pse+0x70>
     c66:	9e 3f       	cpi	r25, 0xFE	; 254
     c68:	51 05       	cpc	r21, r1
     c6a:	78 f0       	brcs	.+30     	; 0xc8a <__divsf3_pse+0x86>
     c6c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_inf>
     c70:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_szero>
     c74:	5f 3f       	cpi	r21, 0xFF	; 255
     c76:	e4 f3       	brlt	.-8      	; 0xc70 <__divsf3_pse+0x6c>
     c78:	98 3e       	cpi	r25, 0xE8	; 232
     c7a:	d4 f3       	brlt	.-12     	; 0xc70 <__divsf3_pse+0x6c>
     c7c:	86 95       	lsr	r24
     c7e:	77 95       	ror	r23
     c80:	67 95       	ror	r22
     c82:	b7 95       	ror	r27
     c84:	f7 95       	ror	r31
     c86:	9f 5f       	subi	r25, 0xFF	; 255
     c88:	c9 f7       	brne	.-14     	; 0xc7c <__divsf3_pse+0x78>
     c8a:	88 0f       	add	r24, r24
     c8c:	91 1d       	adc	r25, r1
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	97 f9       	bld	r25, 7
     c94:	08 95       	ret
     c96:	e1 e0       	ldi	r30, 0x01	; 1
     c98:	66 0f       	add	r22, r22
     c9a:	77 1f       	adc	r23, r23
     c9c:	88 1f       	adc	r24, r24
     c9e:	bb 1f       	adc	r27, r27
     ca0:	62 17       	cp	r22, r18
     ca2:	73 07       	cpc	r23, r19
     ca4:	84 07       	cpc	r24, r20
     ca6:	ba 07       	cpc	r27, r26
     ca8:	20 f0       	brcs	.+8      	; 0xcb2 <__divsf3_pse+0xae>
     caa:	62 1b       	sub	r22, r18
     cac:	73 0b       	sbc	r23, r19
     cae:	84 0b       	sbc	r24, r20
     cb0:	ba 0b       	sbc	r27, r26
     cb2:	ee 1f       	adc	r30, r30
     cb4:	88 f7       	brcc	.-30     	; 0xc98 <__divsf3_pse+0x94>
     cb6:	e0 95       	com	r30
     cb8:	08 95       	ret

00000cba <__fixsfsi>:
     cba:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fixunssfsi>
     cbe:	68 94       	set
     cc0:	b1 11       	cpse	r27, r1
     cc2:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_szero>
     cc6:	08 95       	ret

00000cc8 <__fixunssfsi>:
     cc8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fp_splitA>
     ccc:	88 f0       	brcs	.+34     	; 0xcf0 <__fixunssfsi+0x28>
     cce:	9f 57       	subi	r25, 0x7F	; 127
     cd0:	98 f0       	brcs	.+38     	; 0xcf8 <__fixunssfsi+0x30>
     cd2:	b9 2f       	mov	r27, r25
     cd4:	99 27       	eor	r25, r25
     cd6:	b7 51       	subi	r27, 0x17	; 23
     cd8:	b0 f0       	brcs	.+44     	; 0xd06 <__fixunssfsi+0x3e>
     cda:	e1 f0       	breq	.+56     	; 0xd14 <__fixunssfsi+0x4c>
     cdc:	66 0f       	add	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	88 1f       	adc	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	1a f0       	brmi	.+6      	; 0xcec <__fixunssfsi+0x24>
     ce6:	ba 95       	dec	r27
     ce8:	c9 f7       	brne	.-14     	; 0xcdc <__fixunssfsi+0x14>
     cea:	14 c0       	rjmp	.+40     	; 0xd14 <__fixunssfsi+0x4c>
     cec:	b1 30       	cpi	r27, 0x01	; 1
     cee:	91 f0       	breq	.+36     	; 0xd14 <__fixunssfsi+0x4c>
     cf0:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_zero>
     cf4:	b1 e0       	ldi	r27, 0x01	; 1
     cf6:	08 95       	ret
     cf8:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_zero>
     cfc:	67 2f       	mov	r22, r23
     cfe:	78 2f       	mov	r23, r24
     d00:	88 27       	eor	r24, r24
     d02:	b8 5f       	subi	r27, 0xF8	; 248
     d04:	39 f0       	breq	.+14     	; 0xd14 <__fixunssfsi+0x4c>
     d06:	b9 3f       	cpi	r27, 0xF9	; 249
     d08:	cc f3       	brlt	.-14     	; 0xcfc <__fixunssfsi+0x34>
     d0a:	86 95       	lsr	r24
     d0c:	77 95       	ror	r23
     d0e:	67 95       	ror	r22
     d10:	b3 95       	inc	r27
     d12:	d9 f7       	brne	.-10     	; 0xd0a <__fixunssfsi+0x42>
     d14:	3e f4       	brtc	.+14     	; 0xd24 <__fixunssfsi+0x5c>
     d16:	90 95       	com	r25
     d18:	80 95       	com	r24
     d1a:	70 95       	com	r23
     d1c:	61 95       	neg	r22
     d1e:	7f 4f       	sbci	r23, 0xFF	; 255
     d20:	8f 4f       	sbci	r24, 0xFF	; 255
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	08 95       	ret

00000d26 <__floatunsisf>:
     d26:	e8 94       	clt
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <__floatsisf+0x12>

00000d2a <__floatsisf>:
     d2a:	97 fb       	bst	r25, 7
     d2c:	3e f4       	brtc	.+14     	; 0xd3c <__floatsisf+0x12>
     d2e:	90 95       	com	r25
     d30:	80 95       	com	r24
     d32:	70 95       	com	r23
     d34:	61 95       	neg	r22
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	8f 4f       	sbci	r24, 0xFF	; 255
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	99 23       	and	r25, r25
     d3e:	a9 f0       	breq	.+42     	; 0xd6a <__floatsisf+0x40>
     d40:	f9 2f       	mov	r31, r25
     d42:	96 e9       	ldi	r25, 0x96	; 150
     d44:	bb 27       	eor	r27, r27
     d46:	93 95       	inc	r25
     d48:	f6 95       	lsr	r31
     d4a:	87 95       	ror	r24
     d4c:	77 95       	ror	r23
     d4e:	67 95       	ror	r22
     d50:	b7 95       	ror	r27
     d52:	f1 11       	cpse	r31, r1
     d54:	f8 cf       	rjmp	.-16     	; 0xd46 <__floatsisf+0x1c>
     d56:	fa f4       	brpl	.+62     	; 0xd96 <__floatsisf+0x6c>
     d58:	bb 0f       	add	r27, r27
     d5a:	11 f4       	brne	.+4      	; 0xd60 <__floatsisf+0x36>
     d5c:	60 ff       	sbrs	r22, 0
     d5e:	1b c0       	rjmp	.+54     	; 0xd96 <__floatsisf+0x6c>
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	8f 4f       	sbci	r24, 0xFF	; 255
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	16 c0       	rjmp	.+44     	; 0xd96 <__floatsisf+0x6c>
     d6a:	88 23       	and	r24, r24
     d6c:	11 f0       	breq	.+4      	; 0xd72 <__floatsisf+0x48>
     d6e:	96 e9       	ldi	r25, 0x96	; 150
     d70:	11 c0       	rjmp	.+34     	; 0xd94 <__floatsisf+0x6a>
     d72:	77 23       	and	r23, r23
     d74:	21 f0       	breq	.+8      	; 0xd7e <__floatsisf+0x54>
     d76:	9e e8       	ldi	r25, 0x8E	; 142
     d78:	87 2f       	mov	r24, r23
     d7a:	76 2f       	mov	r23, r22
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <__floatsisf+0x5e>
     d7e:	66 23       	and	r22, r22
     d80:	71 f0       	breq	.+28     	; 0xd9e <__floatsisf+0x74>
     d82:	96 e8       	ldi	r25, 0x86	; 134
     d84:	86 2f       	mov	r24, r22
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	2a f0       	brmi	.+10     	; 0xd96 <__floatsisf+0x6c>
     d8c:	9a 95       	dec	r25
     d8e:	66 0f       	add	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	88 1f       	adc	r24, r24
     d94:	da f7       	brpl	.-10     	; 0xd8c <__floatsisf+0x62>
     d96:	88 0f       	add	r24, r24
     d98:	96 95       	lsr	r25
     d9a:	87 95       	ror	r24
     d9c:	97 f9       	bld	r25, 7
     d9e:	08 95       	ret

00000da0 <__fp_inf>:
     da0:	97 f9       	bld	r25, 7
     da2:	9f 67       	ori	r25, 0x7F	; 127
     da4:	80 e8       	ldi	r24, 0x80	; 128
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	08 95       	ret

00000dac <__fp_nan>:
     dac:	9f ef       	ldi	r25, 0xFF	; 255
     dae:	80 ec       	ldi	r24, 0xC0	; 192
     db0:	08 95       	ret

00000db2 <__fp_powser>:
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	1f 93       	push	r17
     db8:	0f 93       	push	r16
     dba:	ff 92       	push	r15
     dbc:	ef 92       	push	r14
     dbe:	df 92       	push	r13
     dc0:	7b 01       	movw	r14, r22
     dc2:	8c 01       	movw	r16, r24
     dc4:	68 94       	set
     dc6:	06 c0       	rjmp	.+12     	; 0xdd4 <__fp_powser+0x22>
     dc8:	da 2e       	mov	r13, r26
     dca:	ef 01       	movw	r28, r30
     dcc:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3x>
     dd0:	fe 01       	movw	r30, r28
     dd2:	e8 94       	clt
     dd4:	a5 91       	lpm	r26, Z+
     dd6:	25 91       	lpm	r18, Z+
     dd8:	35 91       	lpm	r19, Z+
     dda:	45 91       	lpm	r20, Z+
     ddc:	55 91       	lpm	r21, Z+
     dde:	a6 f3       	brts	.-24     	; 0xdc8 <__fp_powser+0x16>
     de0:	ef 01       	movw	r28, r30
     de2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3x>
     de6:	fe 01       	movw	r30, r28
     de8:	97 01       	movw	r18, r14
     dea:	a8 01       	movw	r20, r16
     dec:	da 94       	dec	r13
     dee:	69 f7       	brne	.-38     	; 0xdca <__fp_powser+0x18>
     df0:	df 90       	pop	r13
     df2:	ef 90       	pop	r14
     df4:	ff 90       	pop	r15
     df6:	0f 91       	pop	r16
     df8:	1f 91       	pop	r17
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <__fp_pscA>:
     e00:	00 24       	eor	r0, r0
     e02:	0a 94       	dec	r0
     e04:	16 16       	cp	r1, r22
     e06:	17 06       	cpc	r1, r23
     e08:	18 06       	cpc	r1, r24
     e0a:	09 06       	cpc	r0, r25
     e0c:	08 95       	ret

00000e0e <__fp_pscB>:
     e0e:	00 24       	eor	r0, r0
     e10:	0a 94       	dec	r0
     e12:	12 16       	cp	r1, r18
     e14:	13 06       	cpc	r1, r19
     e16:	14 06       	cpc	r1, r20
     e18:	05 06       	cpc	r0, r21
     e1a:	08 95       	ret

00000e1c <__fp_round>:
     e1c:	09 2e       	mov	r0, r25
     e1e:	03 94       	inc	r0
     e20:	00 0c       	add	r0, r0
     e22:	11 f4       	brne	.+4      	; 0xe28 <__fp_round+0xc>
     e24:	88 23       	and	r24, r24
     e26:	52 f0       	brmi	.+20     	; 0xe3c <__fp_round+0x20>
     e28:	bb 0f       	add	r27, r27
     e2a:	40 f4       	brcc	.+16     	; 0xe3c <__fp_round+0x20>
     e2c:	bf 2b       	or	r27, r31
     e2e:	11 f4       	brne	.+4      	; 0xe34 <__fp_round+0x18>
     e30:	60 ff       	sbrs	r22, 0
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__fp_round+0x20>
     e34:	6f 5f       	subi	r22, 0xFF	; 255
     e36:	7f 4f       	sbci	r23, 0xFF	; 255
     e38:	8f 4f       	sbci	r24, 0xFF	; 255
     e3a:	9f 4f       	sbci	r25, 0xFF	; 255
     e3c:	08 95       	ret

00000e3e <__fp_split3>:
     e3e:	57 fd       	sbrc	r21, 7
     e40:	90 58       	subi	r25, 0x80	; 128
     e42:	44 0f       	add	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	59 f0       	breq	.+22     	; 0xe5e <__fp_splitA+0x10>
     e48:	5f 3f       	cpi	r21, 0xFF	; 255
     e4a:	71 f0       	breq	.+28     	; 0xe68 <__fp_splitA+0x1a>
     e4c:	47 95       	ror	r20

00000e4e <__fp_splitA>:
     e4e:	88 0f       	add	r24, r24
     e50:	97 fb       	bst	r25, 7
     e52:	99 1f       	adc	r25, r25
     e54:	61 f0       	breq	.+24     	; 0xe6e <__fp_splitA+0x20>
     e56:	9f 3f       	cpi	r25, 0xFF	; 255
     e58:	79 f0       	breq	.+30     	; 0xe78 <__fp_splitA+0x2a>
     e5a:	87 95       	ror	r24
     e5c:	08 95       	ret
     e5e:	12 16       	cp	r1, r18
     e60:	13 06       	cpc	r1, r19
     e62:	14 06       	cpc	r1, r20
     e64:	55 1f       	adc	r21, r21
     e66:	f2 cf       	rjmp	.-28     	; 0xe4c <__fp_split3+0xe>
     e68:	46 95       	lsr	r20
     e6a:	f1 df       	rcall	.-30     	; 0xe4e <__fp_splitA>
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <__fp_splitA+0x30>
     e6e:	16 16       	cp	r1, r22
     e70:	17 06       	cpc	r1, r23
     e72:	18 06       	cpc	r1, r24
     e74:	99 1f       	adc	r25, r25
     e76:	f1 cf       	rjmp	.-30     	; 0xe5a <__fp_splitA+0xc>
     e78:	86 95       	lsr	r24
     e7a:	71 05       	cpc	r23, r1
     e7c:	61 05       	cpc	r22, r1
     e7e:	08 94       	sec
     e80:	08 95       	ret

00000e82 <__fp_zero>:
     e82:	e8 94       	clt

00000e84 <__fp_szero>:
     e84:	bb 27       	eor	r27, r27
     e86:	66 27       	eor	r22, r22
     e88:	77 27       	eor	r23, r23
     e8a:	cb 01       	movw	r24, r22
     e8c:	97 f9       	bld	r25, 7
     e8e:	08 95       	ret

00000e90 <inverse>:
     e90:	9b 01       	movw	r18, r22
     e92:	ac 01       	movw	r20, r24
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	80 e8       	ldi	r24, 0x80	; 128
     e9a:	9f e3       	ldi	r25, 0x3F	; 63
     e9c:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__divsf3>

00000ea0 <__mulsf3>:
     ea0:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulsf3x>
     ea4:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_round>
     ea8:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_pscA>
     eac:	38 f0       	brcs	.+14     	; 0xebc <__mulsf3+0x1c>
     eae:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_pscB>
     eb2:	20 f0       	brcs	.+8      	; 0xebc <__mulsf3+0x1c>
     eb4:	95 23       	and	r25, r21
     eb6:	11 f0       	breq	.+4      	; 0xebc <__mulsf3+0x1c>
     eb8:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_inf>
     ebc:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_nan>
     ec0:	11 24       	eor	r1, r1
     ec2:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_szero>

00000ec6 <__mulsf3x>:
     ec6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_split3>
     eca:	70 f3       	brcs	.-36     	; 0xea8 <__mulsf3+0x8>

00000ecc <__mulsf3_pse>:
     ecc:	95 9f       	mul	r25, r21
     ece:	c1 f3       	breq	.-16     	; 0xec0 <__mulsf3+0x20>
     ed0:	95 0f       	add	r25, r21
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	55 1f       	adc	r21, r21
     ed6:	62 9f       	mul	r22, r18
     ed8:	f0 01       	movw	r30, r0
     eda:	72 9f       	mul	r23, r18
     edc:	bb 27       	eor	r27, r27
     ede:	f0 0d       	add	r31, r0
     ee0:	b1 1d       	adc	r27, r1
     ee2:	63 9f       	mul	r22, r19
     ee4:	aa 27       	eor	r26, r26
     ee6:	f0 0d       	add	r31, r0
     ee8:	b1 1d       	adc	r27, r1
     eea:	aa 1f       	adc	r26, r26
     eec:	64 9f       	mul	r22, r20
     eee:	66 27       	eor	r22, r22
     ef0:	b0 0d       	add	r27, r0
     ef2:	a1 1d       	adc	r26, r1
     ef4:	66 1f       	adc	r22, r22
     ef6:	82 9f       	mul	r24, r18
     ef8:	22 27       	eor	r18, r18
     efa:	b0 0d       	add	r27, r0
     efc:	a1 1d       	adc	r26, r1
     efe:	62 1f       	adc	r22, r18
     f00:	73 9f       	mul	r23, r19
     f02:	b0 0d       	add	r27, r0
     f04:	a1 1d       	adc	r26, r1
     f06:	62 1f       	adc	r22, r18
     f08:	83 9f       	mul	r24, r19
     f0a:	a0 0d       	add	r26, r0
     f0c:	61 1d       	adc	r22, r1
     f0e:	22 1f       	adc	r18, r18
     f10:	74 9f       	mul	r23, r20
     f12:	33 27       	eor	r19, r19
     f14:	a0 0d       	add	r26, r0
     f16:	61 1d       	adc	r22, r1
     f18:	23 1f       	adc	r18, r19
     f1a:	84 9f       	mul	r24, r20
     f1c:	60 0d       	add	r22, r0
     f1e:	21 1d       	adc	r18, r1
     f20:	82 2f       	mov	r24, r18
     f22:	76 2f       	mov	r23, r22
     f24:	6a 2f       	mov	r22, r26
     f26:	11 24       	eor	r1, r1
     f28:	9f 57       	subi	r25, 0x7F	; 127
     f2a:	50 40       	sbci	r21, 0x00	; 0
     f2c:	9a f0       	brmi	.+38     	; 0xf54 <__mulsf3_pse+0x88>
     f2e:	f1 f0       	breq	.+60     	; 0xf6c <__mulsf3_pse+0xa0>
     f30:	88 23       	and	r24, r24
     f32:	4a f0       	brmi	.+18     	; 0xf46 <__mulsf3_pse+0x7a>
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	bb 1f       	adc	r27, r27
     f3a:	66 1f       	adc	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	91 50       	subi	r25, 0x01	; 1
     f42:	50 40       	sbci	r21, 0x00	; 0
     f44:	a9 f7       	brne	.-22     	; 0xf30 <__mulsf3_pse+0x64>
     f46:	9e 3f       	cpi	r25, 0xFE	; 254
     f48:	51 05       	cpc	r21, r1
     f4a:	80 f0       	brcs	.+32     	; 0xf6c <__mulsf3_pse+0xa0>
     f4c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_inf>
     f50:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_szero>
     f54:	5f 3f       	cpi	r21, 0xFF	; 255
     f56:	e4 f3       	brlt	.-8      	; 0xf50 <__mulsf3_pse+0x84>
     f58:	98 3e       	cpi	r25, 0xE8	; 232
     f5a:	d4 f3       	brlt	.-12     	; 0xf50 <__mulsf3_pse+0x84>
     f5c:	86 95       	lsr	r24
     f5e:	77 95       	ror	r23
     f60:	67 95       	ror	r22
     f62:	b7 95       	ror	r27
     f64:	f7 95       	ror	r31
     f66:	e7 95       	ror	r30
     f68:	9f 5f       	subi	r25, 0xFF	; 255
     f6a:	c1 f7       	brne	.-16     	; 0xf5c <__mulsf3_pse+0x90>
     f6c:	fe 2b       	or	r31, r30
     f6e:	88 0f       	add	r24, r24
     f70:	91 1d       	adc	r25, r1
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	97 f9       	bld	r25, 7
     f78:	08 95       	ret

00000f7a <square>:
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__mulsf3>

00000f82 <__subsf3>:
     f82:	50 58       	subi	r21, 0x80	; 128

00000f84 <__addsf3>:
     f84:	bb 27       	eor	r27, r27
     f86:	aa 27       	eor	r26, r26
     f88:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3x>
     f8c:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_round>
     f90:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_pscA>
     f94:	38 f0       	brcs	.+14     	; 0xfa4 <__addsf3+0x20>
     f96:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_pscB>
     f9a:	20 f0       	brcs	.+8      	; 0xfa4 <__addsf3+0x20>
     f9c:	39 f4       	brne	.+14     	; 0xfac <__addsf3+0x28>
     f9e:	9f 3f       	cpi	r25, 0xFF	; 255
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <__addsf3+0x24>
     fa2:	26 f4       	brtc	.+8      	; 0xfac <__addsf3+0x28>
     fa4:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_nan>
     fa8:	0e f4       	brtc	.+2      	; 0xfac <__addsf3+0x28>
     faa:	e0 95       	com	r30
     fac:	e7 fb       	bst	r30, 7
     fae:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_inf>

00000fb2 <__addsf3x>:
     fb2:	e9 2f       	mov	r30, r25
     fb4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_split3>
     fb8:	58 f3       	brcs	.-42     	; 0xf90 <__addsf3+0xc>
     fba:	ba 17       	cp	r27, r26
     fbc:	62 07       	cpc	r22, r18
     fbe:	73 07       	cpc	r23, r19
     fc0:	84 07       	cpc	r24, r20
     fc2:	95 07       	cpc	r25, r21
     fc4:	20 f0       	brcs	.+8      	; 0xfce <__addsf3x+0x1c>
     fc6:	79 f4       	brne	.+30     	; 0xfe6 <__addsf3x+0x34>
     fc8:	a6 f5       	brtc	.+104    	; 0x1032 <__addsf3x+0x80>
     fca:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_zero>
     fce:	0e f4       	brtc	.+2      	; 0xfd2 <__addsf3x+0x20>
     fd0:	e0 95       	com	r30
     fd2:	0b 2e       	mov	r0, r27
     fd4:	ba 2f       	mov	r27, r26
     fd6:	a0 2d       	mov	r26, r0
     fd8:	0b 01       	movw	r0, r22
     fda:	b9 01       	movw	r22, r18
     fdc:	90 01       	movw	r18, r0
     fde:	0c 01       	movw	r0, r24
     fe0:	ca 01       	movw	r24, r20
     fe2:	a0 01       	movw	r20, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	ff 27       	eor	r31, r31
     fe8:	59 1b       	sub	r21, r25
     fea:	99 f0       	breq	.+38     	; 0x1012 <__addsf3x+0x60>
     fec:	59 3f       	cpi	r21, 0xF9	; 249
     fee:	50 f4       	brcc	.+20     	; 0x1004 <__addsf3x+0x52>
     ff0:	50 3e       	cpi	r21, 0xE0	; 224
     ff2:	68 f1       	brcs	.+90     	; 0x104e <__addsf3x+0x9c>
     ff4:	1a 16       	cp	r1, r26
     ff6:	f0 40       	sbci	r31, 0x00	; 0
     ff8:	a2 2f       	mov	r26, r18
     ffa:	23 2f       	mov	r18, r19
     ffc:	34 2f       	mov	r19, r20
     ffe:	44 27       	eor	r20, r20
    1000:	58 5f       	subi	r21, 0xF8	; 248
    1002:	f3 cf       	rjmp	.-26     	; 0xfea <__addsf3x+0x38>
    1004:	46 95       	lsr	r20
    1006:	37 95       	ror	r19
    1008:	27 95       	ror	r18
    100a:	a7 95       	ror	r26
    100c:	f0 40       	sbci	r31, 0x00	; 0
    100e:	53 95       	inc	r21
    1010:	c9 f7       	brne	.-14     	; 0x1004 <__addsf3x+0x52>
    1012:	7e f4       	brtc	.+30     	; 0x1032 <__addsf3x+0x80>
    1014:	1f 16       	cp	r1, r31
    1016:	ba 0b       	sbc	r27, r26
    1018:	62 0b       	sbc	r22, r18
    101a:	73 0b       	sbc	r23, r19
    101c:	84 0b       	sbc	r24, r20
    101e:	ba f0       	brmi	.+46     	; 0x104e <__addsf3x+0x9c>
    1020:	91 50       	subi	r25, 0x01	; 1
    1022:	a1 f0       	breq	.+40     	; 0x104c <__addsf3x+0x9a>
    1024:	ff 0f       	add	r31, r31
    1026:	bb 1f       	adc	r27, r27
    1028:	66 1f       	adc	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	c2 f7       	brpl	.-16     	; 0x1020 <__addsf3x+0x6e>
    1030:	0e c0       	rjmp	.+28     	; 0x104e <__addsf3x+0x9c>
    1032:	ba 0f       	add	r27, r26
    1034:	62 1f       	adc	r22, r18
    1036:	73 1f       	adc	r23, r19
    1038:	84 1f       	adc	r24, r20
    103a:	48 f4       	brcc	.+18     	; 0x104e <__addsf3x+0x9c>
    103c:	87 95       	ror	r24
    103e:	77 95       	ror	r23
    1040:	67 95       	ror	r22
    1042:	b7 95       	ror	r27
    1044:	f7 95       	ror	r31
    1046:	9e 3f       	cpi	r25, 0xFE	; 254
    1048:	08 f0       	brcs	.+2      	; 0x104c <__addsf3x+0x9a>
    104a:	b0 cf       	rjmp	.-160    	; 0xfac <__addsf3+0x28>
    104c:	93 95       	inc	r25
    104e:	88 0f       	add	r24, r24
    1050:	08 f0       	brcs	.+2      	; 0x1054 <__addsf3x+0xa2>
    1052:	99 27       	eor	r25, r25
    1054:	ee 0f       	add	r30, r30
    1056:	97 95       	ror	r25
    1058:	87 95       	ror	r24
    105a:	08 95       	ret

0000105c <__mulsi3>:
    105c:	db 01       	movw	r26, r22
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__muluhisi3>
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	a2 9f       	mul	r26, r18
    106c:	80 0d       	add	r24, r0
    106e:	91 1d       	adc	r25, r1
    1070:	a3 9f       	mul	r26, r19
    1072:	90 0d       	add	r25, r0
    1074:	b2 9f       	mul	r27, r18
    1076:	90 0d       	add	r25, r0
    1078:	11 24       	eor	r1, r1
    107a:	08 95       	ret

0000107c <__divmodhi4>:
    107c:	97 fb       	bst	r25, 7
    107e:	07 2e       	mov	r0, r23
    1080:	16 f4       	brtc	.+4      	; 0x1086 <__divmodhi4+0xa>
    1082:	00 94       	com	r0
    1084:	07 d0       	rcall	.+14     	; 0x1094 <__divmodhi4_neg1>
    1086:	77 fd       	sbrc	r23, 7
    1088:	09 d0       	rcall	.+18     	; 0x109c <__divmodhi4_neg2>
    108a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__udivmodhi4>
    108e:	07 fc       	sbrc	r0, 7
    1090:	05 d0       	rcall	.+10     	; 0x109c <__divmodhi4_neg2>
    1092:	3e f4       	brtc	.+14     	; 0x10a2 <__divmodhi4_exit>

00001094 <__divmodhi4_neg1>:
    1094:	90 95       	com	r25
    1096:	81 95       	neg	r24
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	08 95       	ret

0000109c <__divmodhi4_neg2>:
    109c:	70 95       	com	r23
    109e:	61 95       	neg	r22
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255

000010a2 <__divmodhi4_exit>:
    10a2:	08 95       	ret

000010a4 <__udivmodsi4>:
    10a4:	a1 e2       	ldi	r26, 0x21	; 33
    10a6:	1a 2e       	mov	r1, r26
    10a8:	aa 1b       	sub	r26, r26
    10aa:	bb 1b       	sub	r27, r27
    10ac:	fd 01       	movw	r30, r26
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <__udivmodsi4_ep>

000010b0 <__udivmodsi4_loop>:
    10b0:	aa 1f       	adc	r26, r26
    10b2:	bb 1f       	adc	r27, r27
    10b4:	ee 1f       	adc	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	a2 17       	cp	r26, r18
    10ba:	b3 07       	cpc	r27, r19
    10bc:	e4 07       	cpc	r30, r20
    10be:	f5 07       	cpc	r31, r21
    10c0:	20 f0       	brcs	.+8      	; 0x10ca <__udivmodsi4_ep>
    10c2:	a2 1b       	sub	r26, r18
    10c4:	b3 0b       	sbc	r27, r19
    10c6:	e4 0b       	sbc	r30, r20
    10c8:	f5 0b       	sbc	r31, r21

000010ca <__udivmodsi4_ep>:
    10ca:	66 1f       	adc	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	1a 94       	dec	r1
    10d4:	69 f7       	brne	.-38     	; 0x10b0 <__udivmodsi4_loop>
    10d6:	60 95       	com	r22
    10d8:	70 95       	com	r23
    10da:	80 95       	com	r24
    10dc:	90 95       	com	r25
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	bd 01       	movw	r22, r26
    10e4:	cf 01       	movw	r24, r30
    10e6:	08 95       	ret

000010e8 <__muluhisi3>:
    10e8:	0e 94 93 08 	call	0x1126	; 0x1126 <__umulhisi3>
    10ec:	a5 9f       	mul	r26, r21
    10ee:	90 0d       	add	r25, r0
    10f0:	b4 9f       	mul	r27, r20
    10f2:	90 0d       	add	r25, r0
    10f4:	a4 9f       	mul	r26, r20
    10f6:	80 0d       	add	r24, r0
    10f8:	91 1d       	adc	r25, r1
    10fa:	11 24       	eor	r1, r1
    10fc:	08 95       	ret

000010fe <__udivmodhi4>:
    10fe:	aa 1b       	sub	r26, r26
    1100:	bb 1b       	sub	r27, r27
    1102:	51 e1       	ldi	r21, 0x11	; 17
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <__udivmodhi4_ep>

00001106 <__udivmodhi4_loop>:
    1106:	aa 1f       	adc	r26, r26
    1108:	bb 1f       	adc	r27, r27
    110a:	a6 17       	cp	r26, r22
    110c:	b7 07       	cpc	r27, r23
    110e:	10 f0       	brcs	.+4      	; 0x1114 <__udivmodhi4_ep>
    1110:	a6 1b       	sub	r26, r22
    1112:	b7 0b       	sbc	r27, r23

00001114 <__udivmodhi4_ep>:
    1114:	88 1f       	adc	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	5a 95       	dec	r21
    111a:	a9 f7       	brne	.-22     	; 0x1106 <__udivmodhi4_loop>
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	08 95       	ret

00001126 <__umulhisi3>:
    1126:	a2 9f       	mul	r26, r18
    1128:	b0 01       	movw	r22, r0
    112a:	b3 9f       	mul	r27, r19
    112c:	c0 01       	movw	r24, r0
    112e:	a3 9f       	mul	r26, r19
    1130:	70 0d       	add	r23, r0
    1132:	81 1d       	adc	r24, r1
    1134:	11 24       	eor	r1, r1
    1136:	91 1d       	adc	r25, r1
    1138:	b2 9f       	mul	r27, r18
    113a:	70 0d       	add	r23, r0
    113c:	81 1d       	adc	r24, r1
    113e:	11 24       	eor	r1, r1
    1140:	91 1d       	adc	r25, r1
    1142:	08 95       	ret

00001144 <malloc>:
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	91 05       	cpc	r25, r1
    1150:	10 f4       	brcc	.+4      	; 0x1156 <malloc+0x12>
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <__flp>
    115a:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <__flp+0x1>
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	a0 e0       	ldi	r26, 0x00	; 0
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	30 97       	sbiw	r30, 0x00	; 0
    1168:	19 f1       	breq	.+70     	; 0x11b0 <malloc+0x6c>
    116a:	40 81       	ld	r20, Z
    116c:	51 81       	ldd	r21, Z+1	; 0x01
    116e:	02 81       	ldd	r16, Z+2	; 0x02
    1170:	13 81       	ldd	r17, Z+3	; 0x03
    1172:	48 17       	cp	r20, r24
    1174:	59 07       	cpc	r21, r25
    1176:	c8 f0       	brcs	.+50     	; 0x11aa <malloc+0x66>
    1178:	84 17       	cp	r24, r20
    117a:	95 07       	cpc	r25, r21
    117c:	69 f4       	brne	.+26     	; 0x1198 <malloc+0x54>
    117e:	10 97       	sbiw	r26, 0x00	; 0
    1180:	31 f0       	breq	.+12     	; 0x118e <malloc+0x4a>
    1182:	12 96       	adiw	r26, 0x02	; 2
    1184:	0c 93       	st	X, r16
    1186:	12 97       	sbiw	r26, 0x02	; 2
    1188:	13 96       	adiw	r26, 0x03	; 3
    118a:	1c 93       	st	X, r17
    118c:	27 c0       	rjmp	.+78     	; 0x11dc <malloc+0x98>
    118e:	00 93 60 02 	sts	0x0260, r16	; 0x800260 <__flp>
    1192:	10 93 61 02 	sts	0x0261, r17	; 0x800261 <__flp+0x1>
    1196:	22 c0       	rjmp	.+68     	; 0x11dc <malloc+0x98>
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	19 f0       	breq	.+6      	; 0x11a4 <malloc+0x60>
    119e:	42 17       	cp	r20, r18
    11a0:	53 07       	cpc	r21, r19
    11a2:	18 f4       	brcc	.+6      	; 0x11aa <malloc+0x66>
    11a4:	9a 01       	movw	r18, r20
    11a6:	bd 01       	movw	r22, r26
    11a8:	ef 01       	movw	r28, r30
    11aa:	df 01       	movw	r26, r30
    11ac:	f8 01       	movw	r30, r16
    11ae:	db cf       	rjmp	.-74     	; 0x1166 <malloc+0x22>
    11b0:	21 15       	cp	r18, r1
    11b2:	31 05       	cpc	r19, r1
    11b4:	f9 f0       	breq	.+62     	; 0x11f4 <malloc+0xb0>
    11b6:	28 1b       	sub	r18, r24
    11b8:	39 0b       	sbc	r19, r25
    11ba:	24 30       	cpi	r18, 0x04	; 4
    11bc:	31 05       	cpc	r19, r1
    11be:	80 f4       	brcc	.+32     	; 0x11e0 <malloc+0x9c>
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	9b 81       	ldd	r25, Y+3	; 0x03
    11c4:	61 15       	cp	r22, r1
    11c6:	71 05       	cpc	r23, r1
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <malloc+0x8e>
    11ca:	fb 01       	movw	r30, r22
    11cc:	93 83       	std	Z+3, r25	; 0x03
    11ce:	82 83       	std	Z+2, r24	; 0x02
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <malloc+0x96>
    11d2:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__flp+0x1>
    11d6:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__flp>
    11da:	fe 01       	movw	r30, r28
    11dc:	32 96       	adiw	r30, 0x02	; 2
    11de:	44 c0       	rjmp	.+136    	; 0x1268 <malloc+0x124>
    11e0:	fe 01       	movw	r30, r28
    11e2:	e2 0f       	add	r30, r18
    11e4:	f3 1f       	adc	r31, r19
    11e6:	81 93       	st	Z+, r24
    11e8:	91 93       	st	Z+, r25
    11ea:	22 50       	subi	r18, 0x02	; 2
    11ec:	31 09       	sbc	r19, r1
    11ee:	39 83       	std	Y+1, r19	; 0x01
    11f0:	28 83       	st	Y, r18
    11f2:	3a c0       	rjmp	.+116    	; 0x1268 <malloc+0x124>
    11f4:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    11f8:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    11fc:	23 2b       	or	r18, r19
    11fe:	41 f4       	brne	.+16     	; 0x1210 <malloc+0xcc>
    1200:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1204:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1208:	30 93 5f 02 	sts	0x025F, r19	; 0x80025f <__brkval+0x1>
    120c:	20 93 5e 02 	sts	0x025E, r18	; 0x80025e <__brkval>
    1210:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1214:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1218:	21 15       	cp	r18, r1
    121a:	31 05       	cpc	r19, r1
    121c:	41 f4       	brne	.+16     	; 0x122e <malloc+0xea>
    121e:	2d b7       	in	r18, 0x3d	; 61
    1220:	3e b7       	in	r19, 0x3e	; 62
    1222:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1226:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    122a:	24 1b       	sub	r18, r20
    122c:	35 0b       	sbc	r19, r21
    122e:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <__brkval>
    1232:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <__brkval+0x1>
    1236:	e2 17       	cp	r30, r18
    1238:	f3 07       	cpc	r31, r19
    123a:	a0 f4       	brcc	.+40     	; 0x1264 <malloc+0x120>
    123c:	2e 1b       	sub	r18, r30
    123e:	3f 0b       	sbc	r19, r31
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	78 f0       	brcs	.+30     	; 0x1264 <malloc+0x120>
    1246:	ac 01       	movw	r20, r24
    1248:	4e 5f       	subi	r20, 0xFE	; 254
    124a:	5f 4f       	sbci	r21, 0xFF	; 255
    124c:	24 17       	cp	r18, r20
    124e:	35 07       	cpc	r19, r21
    1250:	48 f0       	brcs	.+18     	; 0x1264 <malloc+0x120>
    1252:	4e 0f       	add	r20, r30
    1254:	5f 1f       	adc	r21, r31
    1256:	50 93 5f 02 	sts	0x025F, r21	; 0x80025f <__brkval+0x1>
    125a:	40 93 5e 02 	sts	0x025E, r20	; 0x80025e <__brkval>
    125e:	81 93       	st	Z+, r24
    1260:	91 93       	st	Z+, r25
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <malloc+0x124>
    1264:	e0 e0       	ldi	r30, 0x00	; 0
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	cf 01       	movw	r24, r30
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	08 95       	ret

00001274 <free>:
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	09 f4       	brne	.+2      	; 0x127e <free+0xa>
    127c:	81 c0       	rjmp	.+258    	; 0x1380 <free+0x10c>
    127e:	fc 01       	movw	r30, r24
    1280:	32 97       	sbiw	r30, 0x02	; 2
    1282:	13 82       	std	Z+3, r1	; 0x03
    1284:	12 82       	std	Z+2, r1	; 0x02
    1286:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <__flp>
    128a:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <__flp+0x1>
    128e:	10 97       	sbiw	r26, 0x00	; 0
    1290:	81 f4       	brne	.+32     	; 0x12b2 <free+0x3e>
    1292:	20 81       	ld	r18, Z
    1294:	31 81       	ldd	r19, Z+1	; 0x01
    1296:	82 0f       	add	r24, r18
    1298:	93 1f       	adc	r25, r19
    129a:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    129e:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    12a2:	28 17       	cp	r18, r24
    12a4:	39 07       	cpc	r19, r25
    12a6:	51 f5       	brne	.+84     	; 0x12fc <free+0x88>
    12a8:	f0 93 5f 02 	sts	0x025F, r31	; 0x80025f <__brkval+0x1>
    12ac:	e0 93 5e 02 	sts	0x025E, r30	; 0x80025e <__brkval>
    12b0:	67 c0       	rjmp	.+206    	; 0x1380 <free+0x10c>
    12b2:	ed 01       	movw	r28, r26
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	ce 17       	cp	r28, r30
    12ba:	df 07       	cpc	r29, r31
    12bc:	40 f4       	brcc	.+16     	; 0x12ce <free+0x5a>
    12be:	4a 81       	ldd	r20, Y+2	; 0x02
    12c0:	5b 81       	ldd	r21, Y+3	; 0x03
    12c2:	9e 01       	movw	r18, r28
    12c4:	41 15       	cp	r20, r1
    12c6:	51 05       	cpc	r21, r1
    12c8:	f1 f0       	breq	.+60     	; 0x1306 <free+0x92>
    12ca:	ea 01       	movw	r28, r20
    12cc:	f5 cf       	rjmp	.-22     	; 0x12b8 <free+0x44>
    12ce:	d3 83       	std	Z+3, r29	; 0x03
    12d0:	c2 83       	std	Z+2, r28	; 0x02
    12d2:	40 81       	ld	r20, Z
    12d4:	51 81       	ldd	r21, Z+1	; 0x01
    12d6:	84 0f       	add	r24, r20
    12d8:	95 1f       	adc	r25, r21
    12da:	c8 17       	cp	r28, r24
    12dc:	d9 07       	cpc	r29, r25
    12de:	59 f4       	brne	.+22     	; 0x12f6 <free+0x82>
    12e0:	88 81       	ld	r24, Y
    12e2:	99 81       	ldd	r25, Y+1	; 0x01
    12e4:	84 0f       	add	r24, r20
    12e6:	95 1f       	adc	r25, r21
    12e8:	02 96       	adiw	r24, 0x02	; 2
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	80 83       	st	Z, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	93 83       	std	Z+3, r25	; 0x03
    12f4:	82 83       	std	Z+2, r24	; 0x02
    12f6:	21 15       	cp	r18, r1
    12f8:	31 05       	cpc	r19, r1
    12fa:	29 f4       	brne	.+10     	; 0x1306 <free+0x92>
    12fc:	f0 93 61 02 	sts	0x0261, r31	; 0x800261 <__flp+0x1>
    1300:	e0 93 60 02 	sts	0x0260, r30	; 0x800260 <__flp>
    1304:	3d c0       	rjmp	.+122    	; 0x1380 <free+0x10c>
    1306:	e9 01       	movw	r28, r18
    1308:	fb 83       	std	Y+3, r31	; 0x03
    130a:	ea 83       	std	Y+2, r30	; 0x02
    130c:	49 91       	ld	r20, Y+
    130e:	59 91       	ld	r21, Y+
    1310:	c4 0f       	add	r28, r20
    1312:	d5 1f       	adc	r29, r21
    1314:	ec 17       	cp	r30, r28
    1316:	fd 07       	cpc	r31, r29
    1318:	61 f4       	brne	.+24     	; 0x1332 <free+0xbe>
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	84 0f       	add	r24, r20
    1320:	95 1f       	adc	r25, r21
    1322:	02 96       	adiw	r24, 0x02	; 2
    1324:	e9 01       	movw	r28, r18
    1326:	99 83       	std	Y+1, r25	; 0x01
    1328:	88 83       	st	Y, r24
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	9b 83       	std	Y+3, r25	; 0x03
    1330:	8a 83       	std	Y+2, r24	; 0x02
    1332:	e0 e0       	ldi	r30, 0x00	; 0
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	12 96       	adiw	r26, 0x02	; 2
    1338:	8d 91       	ld	r24, X+
    133a:	9c 91       	ld	r25, X
    133c:	13 97       	sbiw	r26, 0x03	; 3
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	19 f0       	breq	.+6      	; 0x1348 <free+0xd4>
    1342:	fd 01       	movw	r30, r26
    1344:	dc 01       	movw	r26, r24
    1346:	f7 cf       	rjmp	.-18     	; 0x1336 <free+0xc2>
    1348:	8d 91       	ld	r24, X+
    134a:	9c 91       	ld	r25, X
    134c:	11 97       	sbiw	r26, 0x01	; 1
    134e:	9d 01       	movw	r18, r26
    1350:	2e 5f       	subi	r18, 0xFE	; 254
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	82 0f       	add	r24, r18
    1356:	93 1f       	adc	r25, r19
    1358:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    135c:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    1360:	28 17       	cp	r18, r24
    1362:	39 07       	cpc	r19, r25
    1364:	69 f4       	brne	.+26     	; 0x1380 <free+0x10c>
    1366:	30 97       	sbiw	r30, 0x00	; 0
    1368:	29 f4       	brne	.+10     	; 0x1374 <free+0x100>
    136a:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__flp+0x1>
    136e:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__flp>
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <free+0x104>
    1374:	13 82       	std	Z+3, r1	; 0x03
    1376:	12 82       	std	Z+2, r1	; 0x02
    1378:	b0 93 5f 02 	sts	0x025F, r27	; 0x80025f <__brkval+0x1>
    137c:	a0 93 5e 02 	sts	0x025E, r26	; 0x80025e <__brkval>
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <strcpy>:
    1386:	fb 01       	movw	r30, r22
    1388:	dc 01       	movw	r26, r24
    138a:	01 90       	ld	r0, Z+
    138c:	0d 92       	st	X+, r0
    138e:	00 20       	and	r0, r0
    1390:	e1 f7       	brne	.-8      	; 0x138a <strcpy+0x4>
    1392:	08 95       	ret

00001394 <fdevopen>:
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	31 f4       	brne	.+12     	; 0x13ac <fdevopen+0x18>
    13a0:	61 15       	cp	r22, r1
    13a2:	71 05       	cpc	r23, r1
    13a4:	19 f4       	brne	.+6      	; 0x13ac <fdevopen+0x18>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	3a c0       	rjmp	.+116    	; 0x1420 <fdevopen+0x8c>
    13ac:	8b 01       	movw	r16, r22
    13ae:	ec 01       	movw	r28, r24
    13b0:	6e e0       	ldi	r22, 0x0E	; 14
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <calloc>
    13bc:	fc 01       	movw	r30, r24
    13be:	89 2b       	or	r24, r25
    13c0:	91 f3       	breq	.-28     	; 0x13a6 <fdevopen+0x12>
    13c2:	80 e8       	ldi	r24, 0x80	; 128
    13c4:	83 83       	std	Z+3, r24	; 0x03
    13c6:	01 15       	cp	r16, r1
    13c8:	11 05       	cpc	r17, r1
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <fdevopen+0x54>
    13cc:	13 87       	std	Z+11, r17	; 0x0b
    13ce:	02 87       	std	Z+10, r16	; 0x0a
    13d0:	81 e8       	ldi	r24, 0x81	; 129
    13d2:	83 83       	std	Z+3, r24	; 0x03
    13d4:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__iob>
    13d8:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__iob+0x1>
    13dc:	89 2b       	or	r24, r25
    13de:	21 f4       	brne	.+8      	; 0x13e8 <fdevopen+0x54>
    13e0:	f0 93 63 02 	sts	0x0263, r31	; 0x800263 <__iob+0x1>
    13e4:	e0 93 62 02 	sts	0x0262, r30	; 0x800262 <__iob>
    13e8:	20 97       	sbiw	r28, 0x00	; 0
    13ea:	c9 f0       	breq	.+50     	; 0x141e <fdevopen+0x8a>
    13ec:	d1 87       	std	Z+9, r29	; 0x09
    13ee:	c0 87       	std	Z+8, r28	; 0x08
    13f0:	83 81       	ldd	r24, Z+3	; 0x03
    13f2:	82 60       	ori	r24, 0x02	; 2
    13f4:	83 83       	std	Z+3, r24	; 0x03
    13f6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__iob+0x2>
    13fa:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__iob+0x3>
    13fe:	89 2b       	or	r24, r25
    1400:	71 f4       	brne	.+28     	; 0x141e <fdevopen+0x8a>
    1402:	f0 93 65 02 	sts	0x0265, r31	; 0x800265 <__iob+0x3>
    1406:	e0 93 64 02 	sts	0x0264, r30	; 0x800264 <__iob+0x2>
    140a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__iob+0x4>
    140e:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <__iob+0x5>
    1412:	89 2b       	or	r24, r25
    1414:	21 f4       	brne	.+8      	; 0x141e <fdevopen+0x8a>
    1416:	f0 93 67 02 	sts	0x0267, r31	; 0x800267 <__iob+0x5>
    141a:	e0 93 66 02 	sts	0x0266, r30	; 0x800266 <__iob+0x4>
    141e:	cf 01       	movw	r24, r30
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	08 95       	ret

0000142a <printf>:
    142a:	a0 e0       	ldi	r26, 0x00	; 0
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e1       	ldi	r30, 0x1B	; 27
    1430:	fa e0       	ldi	r31, 0x0A	; 10
    1432:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__prologue_saves__+0x20>
    1436:	ae 01       	movw	r20, r28
    1438:	4b 5f       	subi	r20, 0xFB	; 251
    143a:	5f 4f       	sbci	r21, 0xFF	; 255
    143c:	fa 01       	movw	r30, r20
    143e:	61 91       	ld	r22, Z+
    1440:	71 91       	ld	r23, Z+
    1442:	af 01       	movw	r20, r30
    1444:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__iob+0x2>
    1448:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__iob+0x3>
    144c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <vfprintf>
    1450:	e2 e0       	ldi	r30, 0x02	; 2
    1452:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__epilogue_restores__+0x20>

00001456 <puts>:
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <__iob+0x2>
    1462:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <__iob+0x3>
    1466:	23 81       	ldd	r18, Z+3	; 0x03
    1468:	21 ff       	sbrs	r18, 1
    146a:	1b c0       	rjmp	.+54     	; 0x14a2 <puts+0x4c>
    146c:	8c 01       	movw	r16, r24
    146e:	d0 e0       	ldi	r29, 0x00	; 0
    1470:	c0 e0       	ldi	r28, 0x00	; 0
    1472:	f8 01       	movw	r30, r16
    1474:	81 91       	ld	r24, Z+
    1476:	8f 01       	movw	r16, r30
    1478:	60 91 64 02 	lds	r22, 0x0264	; 0x800264 <__iob+0x2>
    147c:	70 91 65 02 	lds	r23, 0x0265	; 0x800265 <__iob+0x3>
    1480:	db 01       	movw	r26, r22
    1482:	18 96       	adiw	r26, 0x08	; 8
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    1488:	19 97       	sbiw	r26, 0x09	; 9
    148a:	88 23       	and	r24, r24
    148c:	31 f0       	breq	.+12     	; 0x149a <puts+0x44>
    148e:	09 95       	icall
    1490:	89 2b       	or	r24, r25
    1492:	79 f3       	breq	.-34     	; 0x1472 <puts+0x1c>
    1494:	df ef       	ldi	r29, 0xFF	; 255
    1496:	cf ef       	ldi	r28, 0xFF	; 255
    1498:	ec cf       	rjmp	.-40     	; 0x1472 <puts+0x1c>
    149a:	8a e0       	ldi	r24, 0x0A	; 10
    149c:	09 95       	icall
    149e:	89 2b       	or	r24, r25
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <puts+0x52>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <puts+0x56>
    14a8:	8d 2f       	mov	r24, r29
    14aa:	9c 2f       	mov	r25, r28
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <vfprintf>:
    14b6:	ab e0       	ldi	r26, 0x0B	; 11
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e1 e6       	ldi	r30, 0x61	; 97
    14bc:	fa e0       	ldi	r31, 0x0A	; 10
    14be:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__prologue_saves__>
    14c2:	6c 01       	movw	r12, r24
    14c4:	7b 01       	movw	r14, r22
    14c6:	8a 01       	movw	r16, r20
    14c8:	fc 01       	movw	r30, r24
    14ca:	17 82       	std	Z+7, r1	; 0x07
    14cc:	16 82       	std	Z+6, r1	; 0x06
    14ce:	83 81       	ldd	r24, Z+3	; 0x03
    14d0:	81 ff       	sbrs	r24, 1
    14d2:	cc c1       	rjmp	.+920    	; 0x186c <vfprintf+0x3b6>
    14d4:	ce 01       	movw	r24, r28
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	3c 01       	movw	r6, r24
    14da:	f6 01       	movw	r30, r12
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	f7 01       	movw	r30, r14
    14e0:	93 fd       	sbrc	r25, 3
    14e2:	85 91       	lpm	r24, Z+
    14e4:	93 ff       	sbrs	r25, 3
    14e6:	81 91       	ld	r24, Z+
    14e8:	7f 01       	movw	r14, r30
    14ea:	88 23       	and	r24, r24
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <vfprintf+0x3a>
    14ee:	ba c1       	rjmp	.+884    	; 0x1864 <vfprintf+0x3ae>
    14f0:	85 32       	cpi	r24, 0x25	; 37
    14f2:	39 f4       	brne	.+14     	; 0x1502 <vfprintf+0x4c>
    14f4:	93 fd       	sbrc	r25, 3
    14f6:	85 91       	lpm	r24, Z+
    14f8:	93 ff       	sbrs	r25, 3
    14fa:	81 91       	ld	r24, Z+
    14fc:	7f 01       	movw	r14, r30
    14fe:	85 32       	cpi	r24, 0x25	; 37
    1500:	29 f4       	brne	.+10     	; 0x150c <vfprintf+0x56>
    1502:	b6 01       	movw	r22, r12
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    150a:	e7 cf       	rjmp	.-50     	; 0x14da <vfprintf+0x24>
    150c:	91 2c       	mov	r9, r1
    150e:	21 2c       	mov	r2, r1
    1510:	31 2c       	mov	r3, r1
    1512:	ff e1       	ldi	r31, 0x1F	; 31
    1514:	f3 15       	cp	r31, r3
    1516:	d8 f0       	brcs	.+54     	; 0x154e <vfprintf+0x98>
    1518:	8b 32       	cpi	r24, 0x2B	; 43
    151a:	79 f0       	breq	.+30     	; 0x153a <vfprintf+0x84>
    151c:	38 f4       	brcc	.+14     	; 0x152c <vfprintf+0x76>
    151e:	80 32       	cpi	r24, 0x20	; 32
    1520:	79 f0       	breq	.+30     	; 0x1540 <vfprintf+0x8a>
    1522:	83 32       	cpi	r24, 0x23	; 35
    1524:	a1 f4       	brne	.+40     	; 0x154e <vfprintf+0x98>
    1526:	23 2d       	mov	r18, r3
    1528:	20 61       	ori	r18, 0x10	; 16
    152a:	1d c0       	rjmp	.+58     	; 0x1566 <vfprintf+0xb0>
    152c:	8d 32       	cpi	r24, 0x2D	; 45
    152e:	61 f0       	breq	.+24     	; 0x1548 <vfprintf+0x92>
    1530:	80 33       	cpi	r24, 0x30	; 48
    1532:	69 f4       	brne	.+26     	; 0x154e <vfprintf+0x98>
    1534:	23 2d       	mov	r18, r3
    1536:	21 60       	ori	r18, 0x01	; 1
    1538:	16 c0       	rjmp	.+44     	; 0x1566 <vfprintf+0xb0>
    153a:	83 2d       	mov	r24, r3
    153c:	82 60       	ori	r24, 0x02	; 2
    153e:	38 2e       	mov	r3, r24
    1540:	e3 2d       	mov	r30, r3
    1542:	e4 60       	ori	r30, 0x04	; 4
    1544:	3e 2e       	mov	r3, r30
    1546:	2a c0       	rjmp	.+84     	; 0x159c <vfprintf+0xe6>
    1548:	f3 2d       	mov	r31, r3
    154a:	f8 60       	ori	r31, 0x08	; 8
    154c:	1d c0       	rjmp	.+58     	; 0x1588 <vfprintf+0xd2>
    154e:	37 fc       	sbrc	r3, 7
    1550:	2d c0       	rjmp	.+90     	; 0x15ac <vfprintf+0xf6>
    1552:	20 ed       	ldi	r18, 0xD0	; 208
    1554:	28 0f       	add	r18, r24
    1556:	2a 30       	cpi	r18, 0x0A	; 10
    1558:	40 f0       	brcs	.+16     	; 0x156a <vfprintf+0xb4>
    155a:	8e 32       	cpi	r24, 0x2E	; 46
    155c:	b9 f4       	brne	.+46     	; 0x158c <vfprintf+0xd6>
    155e:	36 fc       	sbrc	r3, 6
    1560:	81 c1       	rjmp	.+770    	; 0x1864 <vfprintf+0x3ae>
    1562:	23 2d       	mov	r18, r3
    1564:	20 64       	ori	r18, 0x40	; 64
    1566:	32 2e       	mov	r3, r18
    1568:	19 c0       	rjmp	.+50     	; 0x159c <vfprintf+0xe6>
    156a:	36 fe       	sbrs	r3, 6
    156c:	06 c0       	rjmp	.+12     	; 0x157a <vfprintf+0xc4>
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	98 9e       	mul	r9, r24
    1572:	20 0d       	add	r18, r0
    1574:	11 24       	eor	r1, r1
    1576:	92 2e       	mov	r9, r18
    1578:	11 c0       	rjmp	.+34     	; 0x159c <vfprintf+0xe6>
    157a:	ea e0       	ldi	r30, 0x0A	; 10
    157c:	2e 9e       	mul	r2, r30
    157e:	20 0d       	add	r18, r0
    1580:	11 24       	eor	r1, r1
    1582:	22 2e       	mov	r2, r18
    1584:	f3 2d       	mov	r31, r3
    1586:	f0 62       	ori	r31, 0x20	; 32
    1588:	3f 2e       	mov	r3, r31
    158a:	08 c0       	rjmp	.+16     	; 0x159c <vfprintf+0xe6>
    158c:	8c 36       	cpi	r24, 0x6C	; 108
    158e:	21 f4       	brne	.+8      	; 0x1598 <vfprintf+0xe2>
    1590:	83 2d       	mov	r24, r3
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	38 2e       	mov	r3, r24
    1596:	02 c0       	rjmp	.+4      	; 0x159c <vfprintf+0xe6>
    1598:	88 36       	cpi	r24, 0x68	; 104
    159a:	41 f4       	brne	.+16     	; 0x15ac <vfprintf+0xf6>
    159c:	f7 01       	movw	r30, r14
    159e:	93 fd       	sbrc	r25, 3
    15a0:	85 91       	lpm	r24, Z+
    15a2:	93 ff       	sbrs	r25, 3
    15a4:	81 91       	ld	r24, Z+
    15a6:	7f 01       	movw	r14, r30
    15a8:	81 11       	cpse	r24, r1
    15aa:	b3 cf       	rjmp	.-154    	; 0x1512 <vfprintf+0x5c>
    15ac:	98 2f       	mov	r25, r24
    15ae:	9f 7d       	andi	r25, 0xDF	; 223
    15b0:	95 54       	subi	r25, 0x45	; 69
    15b2:	93 30       	cpi	r25, 0x03	; 3
    15b4:	28 f4       	brcc	.+10     	; 0x15c0 <vfprintf+0x10a>
    15b6:	0c 5f       	subi	r16, 0xFC	; 252
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	9f e3       	ldi	r25, 0x3F	; 63
    15bc:	99 83       	std	Y+1, r25	; 0x01
    15be:	0d c0       	rjmp	.+26     	; 0x15da <vfprintf+0x124>
    15c0:	83 36       	cpi	r24, 0x63	; 99
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <vfprintf+0x11a>
    15c4:	83 37       	cpi	r24, 0x73	; 115
    15c6:	71 f0       	breq	.+28     	; 0x15e4 <vfprintf+0x12e>
    15c8:	83 35       	cpi	r24, 0x53	; 83
    15ca:	09 f0       	breq	.+2      	; 0x15ce <vfprintf+0x118>
    15cc:	59 c0       	rjmp	.+178    	; 0x1680 <vfprintf+0x1ca>
    15ce:	21 c0       	rjmp	.+66     	; 0x1612 <vfprintf+0x15c>
    15d0:	f8 01       	movw	r30, r16
    15d2:	80 81       	ld	r24, Z
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	0e 5f       	subi	r16, 0xFE	; 254
    15d8:	1f 4f       	sbci	r17, 0xFF	; 255
    15da:	88 24       	eor	r8, r8
    15dc:	83 94       	inc	r8
    15de:	91 2c       	mov	r9, r1
    15e0:	53 01       	movw	r10, r6
    15e2:	13 c0       	rjmp	.+38     	; 0x160a <vfprintf+0x154>
    15e4:	28 01       	movw	r4, r16
    15e6:	f2 e0       	ldi	r31, 0x02	; 2
    15e8:	4f 0e       	add	r4, r31
    15ea:	51 1c       	adc	r5, r1
    15ec:	f8 01       	movw	r30, r16
    15ee:	a0 80       	ld	r10, Z
    15f0:	b1 80       	ldd	r11, Z+1	; 0x01
    15f2:	36 fe       	sbrs	r3, 6
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <vfprintf+0x146>
    15f6:	69 2d       	mov	r22, r9
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <vfprintf+0x14a>
    15fc:	6f ef       	ldi	r22, 0xFF	; 255
    15fe:	7f ef       	ldi	r23, 0xFF	; 255
    1600:	c5 01       	movw	r24, r10
    1602:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <strnlen>
    1606:	4c 01       	movw	r8, r24
    1608:	82 01       	movw	r16, r4
    160a:	f3 2d       	mov	r31, r3
    160c:	ff 77       	andi	r31, 0x7F	; 127
    160e:	3f 2e       	mov	r3, r31
    1610:	16 c0       	rjmp	.+44     	; 0x163e <vfprintf+0x188>
    1612:	28 01       	movw	r4, r16
    1614:	22 e0       	ldi	r18, 0x02	; 2
    1616:	42 0e       	add	r4, r18
    1618:	51 1c       	adc	r5, r1
    161a:	f8 01       	movw	r30, r16
    161c:	a0 80       	ld	r10, Z
    161e:	b1 80       	ldd	r11, Z+1	; 0x01
    1620:	36 fe       	sbrs	r3, 6
    1622:	03 c0       	rjmp	.+6      	; 0x162a <vfprintf+0x174>
    1624:	69 2d       	mov	r22, r9
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <vfprintf+0x178>
    162a:	6f ef       	ldi	r22, 0xFF	; 255
    162c:	7f ef       	ldi	r23, 0xFF	; 255
    162e:	c5 01       	movw	r24, r10
    1630:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <strnlen_P>
    1634:	4c 01       	movw	r8, r24
    1636:	f3 2d       	mov	r31, r3
    1638:	f0 68       	ori	r31, 0x80	; 128
    163a:	3f 2e       	mov	r3, r31
    163c:	82 01       	movw	r16, r4
    163e:	33 fc       	sbrc	r3, 3
    1640:	1b c0       	rjmp	.+54     	; 0x1678 <vfprintf+0x1c2>
    1642:	82 2d       	mov	r24, r2
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	88 16       	cp	r8, r24
    1648:	99 06       	cpc	r9, r25
    164a:	b0 f4       	brcc	.+44     	; 0x1678 <vfprintf+0x1c2>
    164c:	b6 01       	movw	r22, r12
    164e:	80 e2       	ldi	r24, 0x20	; 32
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    1656:	2a 94       	dec	r2
    1658:	f4 cf       	rjmp	.-24     	; 0x1642 <vfprintf+0x18c>
    165a:	f5 01       	movw	r30, r10
    165c:	37 fc       	sbrc	r3, 7
    165e:	85 91       	lpm	r24, Z+
    1660:	37 fe       	sbrs	r3, 7
    1662:	81 91       	ld	r24, Z+
    1664:	5f 01       	movw	r10, r30
    1666:	b6 01       	movw	r22, r12
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    166e:	21 10       	cpse	r2, r1
    1670:	2a 94       	dec	r2
    1672:	21 e0       	ldi	r18, 0x01	; 1
    1674:	82 1a       	sub	r8, r18
    1676:	91 08       	sbc	r9, r1
    1678:	81 14       	cp	r8, r1
    167a:	91 04       	cpc	r9, r1
    167c:	71 f7       	brne	.-36     	; 0x165a <vfprintf+0x1a4>
    167e:	e8 c0       	rjmp	.+464    	; 0x1850 <vfprintf+0x39a>
    1680:	84 36       	cpi	r24, 0x64	; 100
    1682:	11 f0       	breq	.+4      	; 0x1688 <vfprintf+0x1d2>
    1684:	89 36       	cpi	r24, 0x69	; 105
    1686:	41 f5       	brne	.+80     	; 0x16d8 <vfprintf+0x222>
    1688:	f8 01       	movw	r30, r16
    168a:	37 fe       	sbrs	r3, 7
    168c:	07 c0       	rjmp	.+14     	; 0x169c <vfprintf+0x1e6>
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	0c 5f       	subi	r16, 0xFC	; 252
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <vfprintf+0x1f6>
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	07 2e       	mov	r0, r23
    16a2:	00 0c       	add	r0, r0
    16a4:	88 0b       	sbc	r24, r24
    16a6:	99 0b       	sbc	r25, r25
    16a8:	0e 5f       	subi	r16, 0xFE	; 254
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	f3 2d       	mov	r31, r3
    16ae:	ff 76       	andi	r31, 0x6F	; 111
    16b0:	3f 2e       	mov	r3, r31
    16b2:	97 ff       	sbrs	r25, 7
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <vfprintf+0x212>
    16b6:	90 95       	com	r25
    16b8:	80 95       	com	r24
    16ba:	70 95       	com	r23
    16bc:	61 95       	neg	r22
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	8f 4f       	sbci	r24, 0xFF	; 255
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	f0 68       	ori	r31, 0x80	; 128
    16c6:	3f 2e       	mov	r3, r31
    16c8:	2a e0       	ldi	r18, 0x0A	; 10
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	a3 01       	movw	r20, r6
    16ce:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__ultoa_invert>
    16d2:	88 2e       	mov	r8, r24
    16d4:	86 18       	sub	r8, r6
    16d6:	45 c0       	rjmp	.+138    	; 0x1762 <vfprintf+0x2ac>
    16d8:	85 37       	cpi	r24, 0x75	; 117
    16da:	31 f4       	brne	.+12     	; 0x16e8 <vfprintf+0x232>
    16dc:	23 2d       	mov	r18, r3
    16de:	2f 7e       	andi	r18, 0xEF	; 239
    16e0:	b2 2e       	mov	r11, r18
    16e2:	2a e0       	ldi	r18, 0x0A	; 10
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	25 c0       	rjmp	.+74     	; 0x1732 <vfprintf+0x27c>
    16e8:	93 2d       	mov	r25, r3
    16ea:	99 7f       	andi	r25, 0xF9	; 249
    16ec:	b9 2e       	mov	r11, r25
    16ee:	8f 36       	cpi	r24, 0x6F	; 111
    16f0:	c1 f0       	breq	.+48     	; 0x1722 <vfprintf+0x26c>
    16f2:	18 f4       	brcc	.+6      	; 0x16fa <vfprintf+0x244>
    16f4:	88 35       	cpi	r24, 0x58	; 88
    16f6:	79 f0       	breq	.+30     	; 0x1716 <vfprintf+0x260>
    16f8:	b5 c0       	rjmp	.+362    	; 0x1864 <vfprintf+0x3ae>
    16fa:	80 37       	cpi	r24, 0x70	; 112
    16fc:	19 f0       	breq	.+6      	; 0x1704 <vfprintf+0x24e>
    16fe:	88 37       	cpi	r24, 0x78	; 120
    1700:	21 f0       	breq	.+8      	; 0x170a <vfprintf+0x254>
    1702:	b0 c0       	rjmp	.+352    	; 0x1864 <vfprintf+0x3ae>
    1704:	e9 2f       	mov	r30, r25
    1706:	e0 61       	ori	r30, 0x10	; 16
    1708:	be 2e       	mov	r11, r30
    170a:	b4 fe       	sbrs	r11, 4
    170c:	0d c0       	rjmp	.+26     	; 0x1728 <vfprintf+0x272>
    170e:	fb 2d       	mov	r31, r11
    1710:	f4 60       	ori	r31, 0x04	; 4
    1712:	bf 2e       	mov	r11, r31
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <vfprintf+0x272>
    1716:	34 fe       	sbrs	r3, 4
    1718:	0a c0       	rjmp	.+20     	; 0x172e <vfprintf+0x278>
    171a:	29 2f       	mov	r18, r25
    171c:	26 60       	ori	r18, 0x06	; 6
    171e:	b2 2e       	mov	r11, r18
    1720:	06 c0       	rjmp	.+12     	; 0x172e <vfprintf+0x278>
    1722:	28 e0       	ldi	r18, 0x08	; 8
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <vfprintf+0x27c>
    1728:	20 e1       	ldi	r18, 0x10	; 16
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfprintf+0x27c>
    172e:	20 e1       	ldi	r18, 0x10	; 16
    1730:	32 e0       	ldi	r19, 0x02	; 2
    1732:	f8 01       	movw	r30, r16
    1734:	b7 fe       	sbrs	r11, 7
    1736:	07 c0       	rjmp	.+14     	; 0x1746 <vfprintf+0x290>
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	0c 5f       	subi	r16, 0xFC	; 252
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <vfprintf+0x29c>
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 5f       	subi	r16, 0xFE	; 254
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	a3 01       	movw	r20, r6
    1754:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__ultoa_invert>
    1758:	88 2e       	mov	r8, r24
    175a:	86 18       	sub	r8, r6
    175c:	fb 2d       	mov	r31, r11
    175e:	ff 77       	andi	r31, 0x7F	; 127
    1760:	3f 2e       	mov	r3, r31
    1762:	36 fe       	sbrs	r3, 6
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <vfprintf+0x2ca>
    1766:	23 2d       	mov	r18, r3
    1768:	2e 7f       	andi	r18, 0xFE	; 254
    176a:	a2 2e       	mov	r10, r18
    176c:	89 14       	cp	r8, r9
    176e:	58 f4       	brcc	.+22     	; 0x1786 <vfprintf+0x2d0>
    1770:	34 fe       	sbrs	r3, 4
    1772:	0b c0       	rjmp	.+22     	; 0x178a <vfprintf+0x2d4>
    1774:	32 fc       	sbrc	r3, 2
    1776:	09 c0       	rjmp	.+18     	; 0x178a <vfprintf+0x2d4>
    1778:	83 2d       	mov	r24, r3
    177a:	8e 7e       	andi	r24, 0xEE	; 238
    177c:	a8 2e       	mov	r10, r24
    177e:	05 c0       	rjmp	.+10     	; 0x178a <vfprintf+0x2d4>
    1780:	b8 2c       	mov	r11, r8
    1782:	a3 2c       	mov	r10, r3
    1784:	03 c0       	rjmp	.+6      	; 0x178c <vfprintf+0x2d6>
    1786:	b8 2c       	mov	r11, r8
    1788:	01 c0       	rjmp	.+2      	; 0x178c <vfprintf+0x2d6>
    178a:	b9 2c       	mov	r11, r9
    178c:	a4 fe       	sbrs	r10, 4
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <vfprintf+0x2f8>
    1790:	fe 01       	movw	r30, r28
    1792:	e8 0d       	add	r30, r8
    1794:	f1 1d       	adc	r31, r1
    1796:	80 81       	ld	r24, Z
    1798:	80 33       	cpi	r24, 0x30	; 48
    179a:	21 f4       	brne	.+8      	; 0x17a4 <vfprintf+0x2ee>
    179c:	9a 2d       	mov	r25, r10
    179e:	99 7e       	andi	r25, 0xE9	; 233
    17a0:	a9 2e       	mov	r10, r25
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <vfprintf+0x300>
    17a4:	a2 fe       	sbrs	r10, 2
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <vfprintf+0x2fe>
    17a8:	b3 94       	inc	r11
    17aa:	b3 94       	inc	r11
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <vfprintf+0x300>
    17ae:	8a 2d       	mov	r24, r10
    17b0:	86 78       	andi	r24, 0x86	; 134
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <vfprintf+0x300>
    17b4:	b3 94       	inc	r11
    17b6:	a3 fc       	sbrc	r10, 3
    17b8:	11 c0       	rjmp	.+34     	; 0x17dc <vfprintf+0x326>
    17ba:	a0 fe       	sbrs	r10, 0
    17bc:	06 c0       	rjmp	.+12     	; 0x17ca <vfprintf+0x314>
    17be:	b2 14       	cp	r11, r2
    17c0:	88 f4       	brcc	.+34     	; 0x17e4 <vfprintf+0x32e>
    17c2:	28 0c       	add	r2, r8
    17c4:	92 2c       	mov	r9, r2
    17c6:	9b 18       	sub	r9, r11
    17c8:	0e c0       	rjmp	.+28     	; 0x17e6 <vfprintf+0x330>
    17ca:	b2 14       	cp	r11, r2
    17cc:	60 f4       	brcc	.+24     	; 0x17e6 <vfprintf+0x330>
    17ce:	b6 01       	movw	r22, r12
    17d0:	80 e2       	ldi	r24, 0x20	; 32
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    17d8:	b3 94       	inc	r11
    17da:	f7 cf       	rjmp	.-18     	; 0x17ca <vfprintf+0x314>
    17dc:	b2 14       	cp	r11, r2
    17de:	18 f4       	brcc	.+6      	; 0x17e6 <vfprintf+0x330>
    17e0:	2b 18       	sub	r2, r11
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <vfprintf+0x332>
    17e4:	98 2c       	mov	r9, r8
    17e6:	21 2c       	mov	r2, r1
    17e8:	a4 fe       	sbrs	r10, 4
    17ea:	10 c0       	rjmp	.+32     	; 0x180c <vfprintf+0x356>
    17ec:	b6 01       	movw	r22, r12
    17ee:	80 e3       	ldi	r24, 0x30	; 48
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    17f6:	a2 fe       	sbrs	r10, 2
    17f8:	17 c0       	rjmp	.+46     	; 0x1828 <vfprintf+0x372>
    17fa:	a1 fc       	sbrc	r10, 1
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <vfprintf+0x34e>
    17fe:	88 e7       	ldi	r24, 0x78	; 120
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <vfprintf+0x352>
    1804:	88 e5       	ldi	r24, 0x58	; 88
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	b6 01       	movw	r22, r12
    180a:	0c c0       	rjmp	.+24     	; 0x1824 <vfprintf+0x36e>
    180c:	8a 2d       	mov	r24, r10
    180e:	86 78       	andi	r24, 0x86	; 134
    1810:	59 f0       	breq	.+22     	; 0x1828 <vfprintf+0x372>
    1812:	a1 fe       	sbrs	r10, 1
    1814:	02 c0       	rjmp	.+4      	; 0x181a <vfprintf+0x364>
    1816:	8b e2       	ldi	r24, 0x2B	; 43
    1818:	01 c0       	rjmp	.+2      	; 0x181c <vfprintf+0x366>
    181a:	80 e2       	ldi	r24, 0x20	; 32
    181c:	a7 fc       	sbrc	r10, 7
    181e:	8d e2       	ldi	r24, 0x2D	; 45
    1820:	b6 01       	movw	r22, r12
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    1828:	89 14       	cp	r8, r9
    182a:	38 f4       	brcc	.+14     	; 0x183a <vfprintf+0x384>
    182c:	b6 01       	movw	r22, r12
    182e:	80 e3       	ldi	r24, 0x30	; 48
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    1836:	9a 94       	dec	r9
    1838:	f7 cf       	rjmp	.-18     	; 0x1828 <vfprintf+0x372>
    183a:	8a 94       	dec	r8
    183c:	f3 01       	movw	r30, r6
    183e:	e8 0d       	add	r30, r8
    1840:	f1 1d       	adc	r31, r1
    1842:	80 81       	ld	r24, Z
    1844:	b6 01       	movw	r22, r12
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    184c:	81 10       	cpse	r8, r1
    184e:	f5 cf       	rjmp	.-22     	; 0x183a <vfprintf+0x384>
    1850:	22 20       	and	r2, r2
    1852:	09 f4       	brne	.+2      	; 0x1856 <vfprintf+0x3a0>
    1854:	42 ce       	rjmp	.-892    	; 0x14da <vfprintf+0x24>
    1856:	b6 01       	movw	r22, r12
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    1860:	2a 94       	dec	r2
    1862:	f6 cf       	rjmp	.-20     	; 0x1850 <vfprintf+0x39a>
    1864:	f6 01       	movw	r30, r12
    1866:	86 81       	ldd	r24, Z+6	; 0x06
    1868:	97 81       	ldd	r25, Z+7	; 0x07
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <vfprintf+0x3ba>
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f ef       	ldi	r25, 0xFF	; 255
    1870:	2b 96       	adiw	r28, 0x0b	; 11
    1872:	e2 e1       	ldi	r30, 0x12	; 18
    1874:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__epilogue_restores__>

00001878 <calloc>:
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	86 9f       	mul	r24, r22
    1882:	80 01       	movw	r16, r0
    1884:	87 9f       	mul	r24, r23
    1886:	10 0d       	add	r17, r0
    1888:	96 9f       	mul	r25, r22
    188a:	10 0d       	add	r17, r0
    188c:	11 24       	eor	r1, r1
    188e:	c8 01       	movw	r24, r16
    1890:	0e 94 a2 08 	call	0x1144	; 0x1144 <malloc>
    1894:	ec 01       	movw	r28, r24
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	29 f0       	breq	.+10     	; 0x18a4 <calloc+0x2c>
    189a:	a8 01       	movw	r20, r16
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <memset>
    18a4:	ce 01       	movw	r24, r28
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <strnlen_P>:
    18b0:	fc 01       	movw	r30, r24
    18b2:	05 90       	lpm	r0, Z+
    18b4:	61 50       	subi	r22, 0x01	; 1
    18b6:	70 40       	sbci	r23, 0x00	; 0
    18b8:	01 10       	cpse	r0, r1
    18ba:	d8 f7       	brcc	.-10     	; 0x18b2 <strnlen_P+0x2>
    18bc:	80 95       	com	r24
    18be:	90 95       	com	r25
    18c0:	8e 0f       	add	r24, r30
    18c2:	9f 1f       	adc	r25, r31
    18c4:	08 95       	ret

000018c6 <memset>:
    18c6:	dc 01       	movw	r26, r24
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <memset+0x6>
    18ca:	6d 93       	st	X+, r22
    18cc:	41 50       	subi	r20, 0x01	; 1
    18ce:	50 40       	sbci	r21, 0x00	; 0
    18d0:	e0 f7       	brcc	.-8      	; 0x18ca <memset+0x4>
    18d2:	08 95       	ret

000018d4 <strnlen>:
    18d4:	fc 01       	movw	r30, r24
    18d6:	61 50       	subi	r22, 0x01	; 1
    18d8:	70 40       	sbci	r23, 0x00	; 0
    18da:	01 90       	ld	r0, Z+
    18dc:	01 10       	cpse	r0, r1
    18de:	d8 f7       	brcc	.-10     	; 0x18d6 <strnlen+0x2>
    18e0:	80 95       	com	r24
    18e2:	90 95       	com	r25
    18e4:	8e 0f       	add	r24, r30
    18e6:	9f 1f       	adc	r25, r31
    18e8:	08 95       	ret

000018ea <fputc>:
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	fb 01       	movw	r30, r22
    18f4:	23 81       	ldd	r18, Z+3	; 0x03
    18f6:	21 fd       	sbrc	r18, 1
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <fputc+0x16>
    18fa:	8f ef       	ldi	r24, 0xFF	; 255
    18fc:	9f ef       	ldi	r25, 0xFF	; 255
    18fe:	2c c0       	rjmp	.+88     	; 0x1958 <fputc+0x6e>
    1900:	22 ff       	sbrs	r18, 2
    1902:	16 c0       	rjmp	.+44     	; 0x1930 <fputc+0x46>
    1904:	46 81       	ldd	r20, Z+6	; 0x06
    1906:	57 81       	ldd	r21, Z+7	; 0x07
    1908:	24 81       	ldd	r18, Z+4	; 0x04
    190a:	35 81       	ldd	r19, Z+5	; 0x05
    190c:	42 17       	cp	r20, r18
    190e:	53 07       	cpc	r21, r19
    1910:	44 f4       	brge	.+16     	; 0x1922 <fputc+0x38>
    1912:	a0 81       	ld	r26, Z
    1914:	b1 81       	ldd	r27, Z+1	; 0x01
    1916:	9d 01       	movw	r18, r26
    1918:	2f 5f       	subi	r18, 0xFF	; 255
    191a:	3f 4f       	sbci	r19, 0xFF	; 255
    191c:	31 83       	std	Z+1, r19	; 0x01
    191e:	20 83       	st	Z, r18
    1920:	8c 93       	st	X, r24
    1922:	26 81       	ldd	r18, Z+6	; 0x06
    1924:	37 81       	ldd	r19, Z+7	; 0x07
    1926:	2f 5f       	subi	r18, 0xFF	; 255
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	37 83       	std	Z+7, r19	; 0x07
    192c:	26 83       	std	Z+6, r18	; 0x06
    192e:	14 c0       	rjmp	.+40     	; 0x1958 <fputc+0x6e>
    1930:	8b 01       	movw	r16, r22
    1932:	ec 01       	movw	r28, r24
    1934:	fb 01       	movw	r30, r22
    1936:	00 84       	ldd	r0, Z+8	; 0x08
    1938:	f1 85       	ldd	r31, Z+9	; 0x09
    193a:	e0 2d       	mov	r30, r0
    193c:	09 95       	icall
    193e:	89 2b       	or	r24, r25
    1940:	e1 f6       	brne	.-72     	; 0x18fa <fputc+0x10>
    1942:	d8 01       	movw	r26, r16
    1944:	16 96       	adiw	r26, 0x06	; 6
    1946:	8d 91       	ld	r24, X+
    1948:	9c 91       	ld	r25, X
    194a:	17 97       	sbiw	r26, 0x07	; 7
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	17 96       	adiw	r26, 0x07	; 7
    1950:	9c 93       	st	X, r25
    1952:	8e 93       	st	-X, r24
    1954:	16 97       	sbiw	r26, 0x06	; 6
    1956:	ce 01       	movw	r24, r28
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	08 95       	ret

00001962 <__ultoa_invert>:
    1962:	fa 01       	movw	r30, r20
    1964:	aa 27       	eor	r26, r26
    1966:	28 30       	cpi	r18, 0x08	; 8
    1968:	51 f1       	breq	.+84     	; 0x19be <__ultoa_invert+0x5c>
    196a:	20 31       	cpi	r18, 0x10	; 16
    196c:	81 f1       	breq	.+96     	; 0x19ce <__ultoa_invert+0x6c>
    196e:	e8 94       	clt
    1970:	6f 93       	push	r22
    1972:	6e 7f       	andi	r22, 0xFE	; 254
    1974:	6e 5f       	subi	r22, 0xFE	; 254
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	8f 4f       	sbci	r24, 0xFF	; 255
    197a:	9f 4f       	sbci	r25, 0xFF	; 255
    197c:	af 4f       	sbci	r26, 0xFF	; 255
    197e:	b1 e0       	ldi	r27, 0x01	; 1
    1980:	3e d0       	rcall	.+124    	; 0x19fe <__ultoa_invert+0x9c>
    1982:	b4 e0       	ldi	r27, 0x04	; 4
    1984:	3c d0       	rcall	.+120    	; 0x19fe <__ultoa_invert+0x9c>
    1986:	67 0f       	add	r22, r23
    1988:	78 1f       	adc	r23, r24
    198a:	89 1f       	adc	r24, r25
    198c:	9a 1f       	adc	r25, r26
    198e:	a1 1d       	adc	r26, r1
    1990:	68 0f       	add	r22, r24
    1992:	79 1f       	adc	r23, r25
    1994:	8a 1f       	adc	r24, r26
    1996:	91 1d       	adc	r25, r1
    1998:	a1 1d       	adc	r26, r1
    199a:	6a 0f       	add	r22, r26
    199c:	71 1d       	adc	r23, r1
    199e:	81 1d       	adc	r24, r1
    19a0:	91 1d       	adc	r25, r1
    19a2:	a1 1d       	adc	r26, r1
    19a4:	20 d0       	rcall	.+64     	; 0x19e6 <__ultoa_invert+0x84>
    19a6:	09 f4       	brne	.+2      	; 0x19aa <__ultoa_invert+0x48>
    19a8:	68 94       	set
    19aa:	3f 91       	pop	r19
    19ac:	2a e0       	ldi	r18, 0x0A	; 10
    19ae:	26 9f       	mul	r18, r22
    19b0:	11 24       	eor	r1, r1
    19b2:	30 19       	sub	r19, r0
    19b4:	30 5d       	subi	r19, 0xD0	; 208
    19b6:	31 93       	st	Z+, r19
    19b8:	de f6       	brtc	.-74     	; 0x1970 <__ultoa_invert+0xe>
    19ba:	cf 01       	movw	r24, r30
    19bc:	08 95       	ret
    19be:	46 2f       	mov	r20, r22
    19c0:	47 70       	andi	r20, 0x07	; 7
    19c2:	40 5d       	subi	r20, 0xD0	; 208
    19c4:	41 93       	st	Z+, r20
    19c6:	b3 e0       	ldi	r27, 0x03	; 3
    19c8:	0f d0       	rcall	.+30     	; 0x19e8 <__ultoa_invert+0x86>
    19ca:	c9 f7       	brne	.-14     	; 0x19be <__ultoa_invert+0x5c>
    19cc:	f6 cf       	rjmp	.-20     	; 0x19ba <__ultoa_invert+0x58>
    19ce:	46 2f       	mov	r20, r22
    19d0:	4f 70       	andi	r20, 0x0F	; 15
    19d2:	40 5d       	subi	r20, 0xD0	; 208
    19d4:	4a 33       	cpi	r20, 0x3A	; 58
    19d6:	18 f0       	brcs	.+6      	; 0x19de <__ultoa_invert+0x7c>
    19d8:	49 5d       	subi	r20, 0xD9	; 217
    19da:	31 fd       	sbrc	r19, 1
    19dc:	40 52       	subi	r20, 0x20	; 32
    19de:	41 93       	st	Z+, r20
    19e0:	02 d0       	rcall	.+4      	; 0x19e6 <__ultoa_invert+0x84>
    19e2:	a9 f7       	brne	.-22     	; 0x19ce <__ultoa_invert+0x6c>
    19e4:	ea cf       	rjmp	.-44     	; 0x19ba <__ultoa_invert+0x58>
    19e6:	b4 e0       	ldi	r27, 0x04	; 4
    19e8:	a6 95       	lsr	r26
    19ea:	97 95       	ror	r25
    19ec:	87 95       	ror	r24
    19ee:	77 95       	ror	r23
    19f0:	67 95       	ror	r22
    19f2:	ba 95       	dec	r27
    19f4:	c9 f7       	brne	.-14     	; 0x19e8 <__ultoa_invert+0x86>
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	61 05       	cpc	r22, r1
    19fa:	71 05       	cpc	r23, r1
    19fc:	08 95       	ret
    19fe:	9b 01       	movw	r18, r22
    1a00:	ac 01       	movw	r20, r24
    1a02:	0a 2e       	mov	r0, r26
    1a04:	06 94       	lsr	r0
    1a06:	57 95       	ror	r21
    1a08:	47 95       	ror	r20
    1a0a:	37 95       	ror	r19
    1a0c:	27 95       	ror	r18
    1a0e:	ba 95       	dec	r27
    1a10:	c9 f7       	brne	.-14     	; 0x1a04 <__ultoa_invert+0xa2>
    1a12:	62 0f       	add	r22, r18
    1a14:	73 1f       	adc	r23, r19
    1a16:	84 1f       	adc	r24, r20
    1a18:	95 1f       	adc	r25, r21
    1a1a:	a0 1d       	adc	r26, r0
    1a1c:	08 95       	ret

00001a1e <__prologue_saves__>:
    1a1e:	2f 92       	push	r2
    1a20:	3f 92       	push	r3
    1a22:	4f 92       	push	r4
    1a24:	5f 92       	push	r5
    1a26:	6f 92       	push	r6
    1a28:	7f 92       	push	r7
    1a2a:	8f 92       	push	r8
    1a2c:	9f 92       	push	r9
    1a2e:	af 92       	push	r10
    1a30:	bf 92       	push	r11
    1a32:	cf 92       	push	r12
    1a34:	df 92       	push	r13
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	ca 1b       	sub	r28, r26
    1a48:	db 0b       	sbc	r29, r27
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	09 94       	ijmp

00001a56 <__epilogue_restores__>:
    1a56:	2a 88       	ldd	r2, Y+18	; 0x12
    1a58:	39 88       	ldd	r3, Y+17	; 0x11
    1a5a:	48 88       	ldd	r4, Y+16	; 0x10
    1a5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a60:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a62:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a64:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a66:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a68:	b9 84       	ldd	r11, Y+9	; 0x09
    1a6a:	c8 84       	ldd	r12, Y+8	; 0x08
    1a6c:	df 80       	ldd	r13, Y+7	; 0x07
    1a6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1a70:	fd 80       	ldd	r15, Y+5	; 0x05
    1a72:	0c 81       	ldd	r16, Y+4	; 0x04
    1a74:	1b 81       	ldd	r17, Y+3	; 0x03
    1a76:	aa 81       	ldd	r26, Y+2	; 0x02
    1a78:	b9 81       	ldd	r27, Y+1	; 0x01
    1a7a:	ce 0f       	add	r28, r30
    1a7c:	d1 1d       	adc	r29, r1
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	ed 01       	movw	r28, r26
    1a8a:	08 95       	ret

00001a8c <_exit>:
    1a8c:	f8 94       	cli

00001a8e <__stop_program>:
    1a8e:	ff cf       	rjmp	.-2      	; 0x1a8e <__stop_program>
