
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800200  00001526  000015ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001526  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800348  00800348  00001702  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021f8  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001546  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed2  00000000  00000000  00005096  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00005f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fe  00000000  00000000  00006394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3c  00000000  00000000  00006c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000078ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
       2:	00 00       	nop
       4:	a6 c0       	rjmp	.+332    	; 0x152 <__bad_interrupt>
       6:	00 00       	nop
       8:	a4 c0       	rjmp	.+328    	; 0x152 <__bad_interrupt>
       a:	00 00       	nop
       c:	a2 c0       	rjmp	.+324    	; 0x152 <__bad_interrupt>
       e:	00 00       	nop
      10:	a0 c0       	rjmp	.+320    	; 0x152 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__vector_5>
      16:	00 00       	nop
      18:	9c c0       	rjmp	.+312    	; 0x152 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9a c0       	rjmp	.+308    	; 0x152 <__bad_interrupt>
      1e:	00 00       	nop
      20:	98 c0       	rjmp	.+304    	; 0x152 <__bad_interrupt>
      22:	00 00       	nop
      24:	96 c0       	rjmp	.+300    	; 0x152 <__bad_interrupt>
      26:	00 00       	nop
      28:	94 c0       	rjmp	.+296    	; 0x152 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	92 c0       	rjmp	.+292    	; 0x152 <__bad_interrupt>
      2e:	00 00       	nop
      30:	90 c0       	rjmp	.+288    	; 0x152 <__bad_interrupt>
      32:	00 00       	nop
      34:	8e c0       	rjmp	.+284    	; 0x152 <__bad_interrupt>
      36:	00 00       	nop
      38:	8c c0       	rjmp	.+280    	; 0x152 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8a c0       	rjmp	.+276    	; 0x152 <__bad_interrupt>
      3e:	00 00       	nop
      40:	88 c0       	rjmp	.+272    	; 0x152 <__bad_interrupt>
      42:	00 00       	nop
      44:	86 c0       	rjmp	.+268    	; 0x152 <__bad_interrupt>
      46:	00 00       	nop
      48:	84 c0       	rjmp	.+264    	; 0x152 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	82 c0       	rjmp	.+260    	; 0x152 <__bad_interrupt>
      4e:	00 00       	nop
      50:	80 c0       	rjmp	.+256    	; 0x152 <__bad_interrupt>
      52:	00 00       	nop
      54:	7e c0       	rjmp	.+252    	; 0x152 <__bad_interrupt>
      56:	00 00       	nop
      58:	7c c0       	rjmp	.+248    	; 0x152 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7a c0       	rjmp	.+244    	; 0x152 <__bad_interrupt>
      5e:	00 00       	nop
      60:	78 c0       	rjmp	.+240    	; 0x152 <__bad_interrupt>
      62:	00 00       	nop
      64:	76 c0       	rjmp	.+236    	; 0x152 <__bad_interrupt>
      66:	00 00       	nop
      68:	74 c0       	rjmp	.+232    	; 0x152 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	72 c0       	rjmp	.+228    	; 0x152 <__bad_interrupt>
      6e:	00 00       	nop
      70:	70 c0       	rjmp	.+224    	; 0x152 <__bad_interrupt>
      72:	00 00       	nop
      74:	6e c0       	rjmp	.+220    	; 0x152 <__bad_interrupt>
      76:	00 00       	nop
      78:	6c c0       	rjmp	.+216    	; 0x152 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6a c0       	rjmp	.+212    	; 0x152 <__bad_interrupt>
      7e:	00 00       	nop
      80:	68 c0       	rjmp	.+208    	; 0x152 <__bad_interrupt>
      82:	00 00       	nop
      84:	66 c0       	rjmp	.+204    	; 0x152 <__bad_interrupt>
      86:	00 00       	nop
      88:	64 c0       	rjmp	.+200    	; 0x152 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	62 c0       	rjmp	.+196    	; 0x152 <__bad_interrupt>
      8e:	00 00       	nop
      90:	60 c0       	rjmp	.+192    	; 0x152 <__bad_interrupt>
      92:	00 00       	nop
      94:	5e c0       	rjmp	.+188    	; 0x152 <__bad_interrupt>
      96:	00 00       	nop
      98:	5c c0       	rjmp	.+184    	; 0x152 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5a c0       	rjmp	.+180    	; 0x152 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	58 c0       	rjmp	.+176    	; 0x152 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	56 c0       	rjmp	.+172    	; 0x152 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	54 c0       	rjmp	.+168    	; 0x152 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	52 c0       	rjmp	.+164    	; 0x152 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	50 c0       	rjmp	.+160    	; 0x152 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4e c0       	rjmp	.+156    	; 0x152 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4c c0       	rjmp	.+152    	; 0x152 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4a c0       	rjmp	.+148    	; 0x152 <__bad_interrupt>
      be:	00 00       	nop
      c0:	48 c0       	rjmp	.+144    	; 0x152 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	46 c0       	rjmp	.+140    	; 0x152 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	44 c0       	rjmp	.+136    	; 0x152 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	42 c0       	rjmp	.+132    	; 0x152 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	40 c0       	rjmp	.+128    	; 0x152 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3e c0       	rjmp	.+124    	; 0x152 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3c c0       	rjmp	.+120    	; 0x152 <__bad_interrupt>
      da:	00 00       	nop
      dc:	3a c0       	rjmp	.+116    	; 0x152 <__bad_interrupt>
      de:	00 00       	nop
      e0:	38 c0       	rjmp	.+112    	; 0x152 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e6 e2       	ldi	r30, 0x26	; 38
     12a:	f5 e1       	ldi	r31, 0x15	; 21
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a8 34       	cpi	r26, 0x48	; 72
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	23 e0       	ldi	r18, 0x03	; 3
     13e:	a8 e4       	ldi	r26, 0x48	; 72
     140:	b3 e0       	ldi	r27, 0x03	; 3
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a4 36       	cpi	r26, 0x64	; 100
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	12 d0       	rcall	.+36     	; 0x172 <main>
     14e:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <_exit>

00000152 <__bad_interrupt>:
     152:	56 cf       	rjmp	.-340    	; 0x0 <__vectors>

00000154 <__vector_5>:
#include "IR.h"


volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT4_vect) {
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	8f 93       	push	r24
	//cli();
	flag= 1;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <__data_end>
	
	
	
	//sei();
	
}
     166:	8f 91       	pop	r24
     168:	0f 90       	pop	r0
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	0f 90       	pop	r0
     16e:	1f 90       	pop	r1
     170:	18 95       	reti

00000172 <main>:



int main(void)
//p.23 for can read instructions
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	2b 97       	sbiw	r28, 0x0b	; 11
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
	setupInit();
     186:	72 d2       	rcall	.+1252   	; 0x66c <setupInit>
	printf("\n\r---------------------------------------\n\n\n\n\n\n\r");
     188:	86 e0       	ldi	r24, 0x06	; 6
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	9f 93       	push	r25
     18e:	8f 93       	push	r24
     190:	c6 d5       	rcall	.+2956   	; 0xd1e <printf>


	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     192:	87 e5       	ldi	r24, 0x57	; 87
     194:	95 e0       	ldi	r25, 0x05	; 5
     196:	9a 87       	std	Y+10, r25	; 0x0a
     198:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     19e:	8d e0       	ldi	r24, 0x0D	; 13
     1a0:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     1a2:	86 e1       	ldi	r24, 0x16	; 22
     1a4:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     1a6:	81 e2       	ldi	r24, 0x21	; 33
     1a8:	8b 83       	std	Y+3, r24	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1aa:	2f ef       	ldi	r18, 0xFF	; 255
     1ac:	87 ea       	ldi	r24, 0xA7	; 167
     1ae:	91 e6       	ldi	r25, 0x61	; 97
     1b0:	21 50       	subi	r18, 0x01	; 1
     1b2:	80 40       	sbci	r24, 0x00	; 0
     1b4:	90 40       	sbci	r25, 0x00	; 0
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x3e>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x48>
     1ba:	00 00       	nop
	
	_delay_ms(2000);
	//CAN_controller_setMode(MODE_NORMAL);
	pwm_setPulseWidth(2);
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e4       	ldi	r25, 0x40	; 64
     1c4:	27 d2       	rcall	.+1102   	; 0x614 <pwm_setPulseWidth>
     1c6:	0f 90       	pop	r0
     1c8:	0f 90       	pop	r0
			uint8_t mask = 0b11; 
			
			CAN_controller_bitModify(mask, CANINTF, 0b00);
			
		}
		printf("Analog value: %i\n\r", IR_read());
     1ca:	07 e3       	ldi	r16, 0x37	; 55
     1cc:	12 e0       	ldi	r17, 0x02	; 2
		

		//Put microcontroller to sleep until next interrupt. 

		
		if (flag) {
     1ce:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <__data_end>
     1d2:	88 23       	and	r24, r24
			
			//printf("Message received");
			flag=0;
     1d4:	61 f0       	breq	.+24     	; 0x1ee <main+0x7c>
			
			joystick_readPositionOverCAN();
     1d6:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <__data_end>
			joystick_printPosition();
     1da:	5f d1       	rcall	.+702    	; 0x49a <joystick_readPositionOverCAN>
     1dc:	b3 d1       	rcall	.+870    	; 0x544 <joystick_printPosition>
			joystick_setServo();
     1de:	d4 d1       	rcall	.+936    	; 0x588 <joystick_setServo>
     1e0:	40 e0       	ldi	r20, 0x00	; 0
			uint8_t mask = 0b11; 
			
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	6c e2       	ldi	r22, 0x2C	; 44
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	59 d0       	rcall	.+178    	; 0x2a0 <CAN_controller_bitModify>
			
		}
		printf("Analog value: %i\n\r", IR_read());
     1ee:	21 d1       	rcall	.+578    	; 0x432 <IR_read>
     1f0:	9f 93       	push	r25
     1f2:	8f 93       	push	r24
     1f4:	1f 93       	push	r17
     1f6:	0f 93       	push	r16
     1f8:	92 d5       	rcall	.+2852   	; 0xd1e <printf>
     1fa:	2f ef       	ldi	r18, 0xFF	; 255
     1fc:	89 e6       	ldi	r24, 0x69	; 105
     1fe:	98 e1       	ldi	r25, 0x18	; 24
     200:	21 50       	subi	r18, 0x01	; 1
     202:	80 40       	sbci	r24, 0x00	; 0
     204:	90 40       	sbci	r25, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <main+0x8e>
     208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x98>
     20a:	00 00       	nop
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	dc cf       	rjmp	.-72     	; 0x1ce <main+0x5c>

00000216 <CAN_receiveMessage>:
     216:	ef 92       	push	r14
     218:	ff 92       	push	r15
	CAN_controller_RTS(buffer_number);

	//ERROR HANDLING?	
}

void CAN_receiveMessage(CAN_message_t * received_message) {
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     222:	82 e6       	ldi	r24, 0x62	; 98
     224:	2c d0       	rcall	.+88     	; 0x27e <CAN_controller_read>
     226:	c8 2f       	mov	r28, r24
     228:	81 e6       	ldi	r24, 0x61	; 97
     22a:	29 d0       	rcall	.+82     	; 0x27e <CAN_controller_read>
     22c:	c2 95       	swap	r28
     22e:	c6 95       	lsr	r28
     230:	c7 70       	andi	r28, 0x07	; 7
     232:	28 e0       	ldi	r18, 0x08	; 8
     234:	82 9f       	mul	r24, r18
     236:	c0 01       	movw	r24, r0
     238:	11 24       	eor	r1, r1
     23a:	8c 0f       	add	r24, r28
     23c:	91 1d       	adc	r25, r1
     23e:	f7 01       	movw	r30, r14
     240:	91 87       	std	Z+9, r25	; 0x09
     242:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     244:	85 e6       	ldi	r24, 0x65	; 101
     246:	1b d0       	rcall	.+54     	; 0x27e <CAN_controller_read>
     248:	8f 70       	andi	r24, 0x0F	; 15
     24a:	f7 01       	movw	r30, r14
     24c:	82 87       	std	Z+10, r24	; 0x0a
     24e:	82 85       	ldd	r24, Z+10	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     250:	88 23       	and	r24, r24
     252:	79 f0       	breq	.+30     	; 0x272 <CAN_receiveMessage+0x5c>
     254:	c0 e0       	ldi	r28, 0x00	; 0
     256:	0c 2f       	mov	r16, r28
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	86 e6       	ldi	r24, 0x66	; 102
     25c:	8c 0f       	add	r24, r28
     25e:	0f d0       	rcall	.+30     	; 0x27e <CAN_controller_read>
     260:	f7 01       	movw	r30, r14
     262:	e0 0f       	add	r30, r16
     264:	f1 1f       	adc	r31, r17
     266:	80 83       	st	Z, r24
     268:	cf 5f       	subi	r28, 0xFF	; 255
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     26a:	f7 01       	movw	r30, r14
     26c:	82 85       	ldd	r24, Z+10	; 0x0a
     26e:	8c 13       	cpse	r24, r28
     270:	f2 cf       	rjmp	.-28     	; 0x256 <CAN_receiveMessage+0x40>
     272:	cf 91       	pop	r28
	}
	
	
	
	
}
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	ff 90       	pop	r15
     27a:	ef 90       	pop	r14
     27c:	08 95       	ret

0000027e <CAN_controller_read>:
     27e:	cf 93       	push	r28
		default: 
			break;
			
	}
	SPI_setChipSelect(PB7, 1);
}
     280:	c8 2f       	mov	r28, r24
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	87 e0       	ldi	r24, 0x07	; 7
     286:	0d d2       	rcall	.+1050   	; 0x6a2 <SPI_setChipSelect>
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	00 d2       	rcall	.+1024   	; 0x68c <SPI_masterWrite>
     28c:	8c 2f       	mov	r24, r28
     28e:	fe d1       	rcall	.+1020   	; 0x68c <SPI_masterWrite>
     290:	02 d2       	rcall	.+1028   	; 0x696 <SPI_masterRead>
     292:	c8 2f       	mov	r28, r24
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	87 e0       	ldi	r24, 0x07	; 7
     298:	04 d2       	rcall	.+1032   	; 0x6a2 <SPI_setChipSelect>
     29a:	8c 2f       	mov	r24, r28
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <CAN_controller_bitModify>:
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	d8 2f       	mov	r29, r24
     2a8:	16 2f       	mov	r17, r22
     2aa:	c4 2f       	mov	r28, r20
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	87 e0       	ldi	r24, 0x07	; 7
     2b0:	f8 d1       	rcall	.+1008   	; 0x6a2 <SPI_setChipSelect>
     2b2:	85 e0       	ldi	r24, 0x05	; 5
     2b4:	eb d1       	rcall	.+982    	; 0x68c <SPI_masterWrite>
     2b6:	81 2f       	mov	r24, r17
     2b8:	e9 d1       	rcall	.+978    	; 0x68c <SPI_masterWrite>
     2ba:	8d 2f       	mov	r24, r29
     2bc:	e7 d1       	rcall	.+974    	; 0x68c <SPI_masterWrite>
     2be:	8c 2f       	mov	r24, r28
     2c0:	e5 d1       	rcall	.+970    	; 0x68c <SPI_masterWrite>
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	87 e0       	ldi	r24, 0x07	; 7
     2c6:	ed d1       	rcall	.+986    	; 0x6a2 <SPI_setChipSelect>
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	08 95       	ret

000002d0 <CAN_controller_reset>:
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	87 e0       	ldi	r24, 0x07	; 7
     2d4:	e6 d1       	rcall	.+972    	; 0x6a2 <SPI_setChipSelect>
     2d6:	8a e4       	ldi	r24, 0x4A	; 74
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	9f 93       	push	r25
     2dc:	8f 93       	push	r24
     2de:	1f d5       	rcall	.+2622   	; 0xd1e <printf>
     2e0:	80 ec       	ldi	r24, 0xC0	; 192
     2e2:	d4 d1       	rcall	.+936    	; 0x68c <SPI_masterWrite>
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	dc d1       	rcall	.+952    	; 0x6a2 <SPI_setChipSelect>
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	08 95       	ret

000002f0 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	c8 2f       	mov	r28, r24
	
	
	
	CAN_controller_reset();
     2f6:	ec df       	rcall	.-40     	; 0x2d0 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     2f8:	8e e0       	ldi	r24, 0x0E	; 14
     2fa:	c1 df       	rcall	.-126    	; 0x27e <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     2fc:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     2fe:	80 38       	cpi	r24, 0x80	; 128
     300:	61 f0       	breq	.+24     	; 0x31a <CAN_controller_setMode+0x2a>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     302:	1f 92       	push	r1
     304:	8f 93       	push	r24
     306:	86 e5       	ldi	r24, 0x56	; 86
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	9f 93       	push	r25
     30c:	8f 93       	push	r24
     30e:	07 d5       	rcall	.+2574   	; 0xd1e <printf>
		return;
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	32 c0       	rjmp	.+100    	; 0x37e <CAN_controller_setMode+0x8e>
	}
	
	
	//set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     31a:	4c 2f       	mov	r20, r28
     31c:	4c 60       	ori	r20, 0x0C	; 12
     31e:	6f e0       	ldi	r22, 0x0F	; 15
     320:	8e ee       	ldi	r24, 0xEE	; 238
     322:	be df       	rcall	.-132    	; 0x2a0 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     324:	41 e0       	ldi	r20, 0x01	; 1
     326:	6b e2       	ldi	r22, 0x2B	; 43
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	ba df       	rcall	.-140    	; 0x2a0 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     32c:	40 e6       	ldi	r20, 0x60	; 96
     32e:	60 e6       	ldi	r22, 0x60	; 96
     330:	80 e6       	ldi	r24, 0x60	; 96
     332:	b6 df       	rcall	.-148    	; 0x2a0 <CAN_controller_bitModify>
     334:	2f ef       	ldi	r18, 0xFF	; 255
     336:	83 ec       	ldi	r24, 0xC3	; 195
     338:	99 e0       	ldi	r25, 0x09	; 9
     33a:	21 50       	subi	r18, 0x01	; 1
     33c:	80 40       	sbci	r24, 0x00	; 0
     33e:	90 40       	sbci	r25, 0x00	; 0
     340:	e1 f7       	brne	.-8      	; 0x33a <CAN_controller_setMode+0x4a>
     342:	00 c0       	rjmp	.+0      	; 0x344 <CAN_controller_setMode+0x54>
     344:	00 00       	nop

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     346:	8e e0       	ldi	r24, 0x0E	; 14
     348:	9a df       	rcall	.-204    	; 0x27e <CAN_controller_read>
     34a:	d8 2f       	mov	r29, r24
	mode_bits = (status & MODE_MASK);
     34c:	d0 7e       	andi	r29, 0xE0	; 224
     34e:	cd 17       	cp	r28, r29
	if (mode_bits != mode) {
     350:	59 f0       	breq	.+22     	; 0x368 <CAN_controller_setMode+0x78>
		printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     352:	1f 92       	push	r1
     354:	df 93       	push	r29
     356:	81 e7       	ldi	r24, 0x71	; 113
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	9f 93       	push	r25
     35c:	8f 93       	push	r24
     35e:	df d4       	rcall	.+2494   	; 0xd1e <printf>
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     368:	1f 92       	push	r1
     36a:	df 93       	push	r29
     36c:	81 e9       	ldi	r24, 0x91	; 145
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	9f 93       	push	r25
     372:	8f 93       	push	r24
     374:	d4 d4       	rcall	.+2472   	; 0xd1e <printf>
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	df 91       	pop	r29
}
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <CAN_controller_init>:
     384:	80 ea       	ldi	r24, 0xA0	; 160
	SPI_masterWrite(MCP_RESET);
	SPI_setChipSelect(PB7, 1);
}
void CAN_controller_init() {
	
	printf("Can controller init \n\r");
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	9f 93       	push	r25
     38a:	8f 93       	push	r24
     38c:	c8 d4       	rcall	.+2448   	; 0xd1e <printf>
	SPI_masterInit();
     38e:	75 d1       	rcall	.+746    	; 0x67a <SPI_masterInit>
     390:	87 eb       	ldi	r24, 0xB7	; 183
	printf("SPI master init done \n\r");
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	9f 93       	push	r25
     396:	8f 93       	push	r24
     398:	c2 d4       	rcall	.+2436   	; 0xd1e <printf>

	CAN_controller_setMode(MODE_NORMAL);
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <CAN_controller_setMode>
     39e:	8f ec       	ldi	r24, 0xCF	; 207
	printf("Modes set \n\r");
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	9f 93       	push	r25
     3a4:	8f 93       	push	r24
     3a6:	bb d4       	rcall	.+2422   	; 0xd1e <printf>
     3a8:	78 94       	sei

	//set interrupt on 2560
	//Global interrupt enable
	sei();
     3aa:	ec 9a       	sbi	0x1d, 4	; 29
	//SREG |= (1 << I);
	EIMSK |= 1 << INT4;	//interrupt on pin INT4
     3ac:	ea e6       	ldi	r30, 0x6A	; 106
	EICRB |= 1 << ISC41; //Turn on falling edge
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	82 60       	ori	r24, 0x02	; 2
     3b4:	80 83       	st	Z, r24
     3b6:	80 81       	ld	r24, Z
	EICRB &= ~(1 << ISC40); //....
     3b8:	8e 7f       	andi	r24, 0xFE	; 254
     3ba:	80 83       	st	Z, r24
     3bc:	8d b1       	in	r24, 0x0d	; 13

//set PD2 as input
	DDRE  &= (1 << PE4); //set as input.
     3be:	80 71       	andi	r24, 0x10	; 16
     3c0:	8d b9       	out	0x0d, r24	; 13
     3c2:	2f ef       	ldi	r18, 0xFF	; 255
     3c4:	83 ec       	ldi	r24, 0xC3	; 195
     3c6:	99 e0       	ldi	r25, 0x09	; 9
     3c8:	21 50       	subi	r18, 0x01	; 1
     3ca:	80 40       	sbci	r24, 0x00	; 0
     3cc:	90 40       	sbci	r25, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <CAN_controller_init+0x44>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <CAN_controller_init+0x4e>
     3d2:	00 00       	nop
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     3d4:	8c ed       	ldi	r24, 0xDC	; 220
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	a0 d4       	rcall	.+2368   	; 0xd1e <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     3de:	8e e0       	ldi	r24, 0x0E	; 14
     3e0:	4e df       	rcall	.-356    	; 0x27e <CAN_controller_read>
	printf("Data: %i\n\r", status);
     3e2:	1f 92       	push	r1
     3e4:	8f 93       	push	r24
     3e6:	85 ef       	ldi	r24, 0xF5	; 245
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	9f 93       	push	r25
     3ec:	8f 93       	push	r24
     3ee:	97 d4       	rcall	.+2350   	; 0xd1e <printf>
     3f0:	8d b7       	in	r24, 0x3d	; 61

}
     3f2:	9e b7       	in	r25, 0x3e	; 62
     3f4:	0c 96       	adiw	r24, 0x0c	; 12
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	9e bf       	out	0x3e, r25	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	8d bf       	out	0x3d, r24	; 61
     400:	08 95       	ret

00000402 <IR_init>:
#include "IR.h"
#include <stdio.h>
#include <avr/interrupt.h>
void IR_init() {
	//Set pin ADC0 to input, PF0
	DDRF &= ~(1 << PF0);
     402:	80 98       	cbi	0x10, 0	; 16
	//set ADEN in ADCSRA, enable adc
	ADCSRA |= (1 << ADEN);
     404:	aa e7       	ldi	r26, 0x7A	; 122
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	8c 91       	ld	r24, X
     40a:	80 68       	ori	r24, 0x80	; 128
     40c:	8c 93       	st	X, r24
	
	//Set prescaling in ADCSRA, ADPS bits
	ADCSRA |= (1 << ADPS2 | 1 << ADPS1 | 1 << ADPS0);
     40e:	8c 91       	ld	r24, X
     410:	87 60       	ori	r24, 0x07	; 7
     412:	8c 93       	st	X, r24
	
	
	//Set adlar = 0, right adjusted ADCH
	ADMUX &= ~(1 << ADLAR);
     414:	ec e7       	ldi	r30, 0x7C	; 124
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	8f 7d       	andi	r24, 0xDF	; 223
     41c:	80 83       	st	Z, r24
	
	//enable adc conversion complete interrupt
	ADCSRA |= (1 << ADIE);
     41e:	8c 91       	ld	r24, X
     420:	88 60       	ori	r24, 0x08	; 8
     422:	8c 93       	st	X, r24
	
	
	//Select AVCC as voltage reference
	ADMUX &= ~(1 << REFS1);
     424:	80 81       	ld	r24, Z
     426:	8f 77       	andi	r24, 0x7F	; 127
     428:	80 83       	st	Z, r24
	ADMUX |=  (1 << REFS0);
     42a:	80 81       	ld	r24, Z
     42c:	80 64       	ori	r24, 0x40	; 64
     42e:	80 83       	st	Z, r24
     430:	08 95       	ret

00000432 <IR_read>:
	
}

uint16_t IR_read() {
	//Select channel 0 (ADC0)
	cli();
     432:	f8 94       	cli
	ADMUX &= ~(1 << MUX4 | 1 << MUX3 | 1 << MUX2 | 1 << MUX1 | 1 << MUX0 );
     434:	ec e7       	ldi	r30, 0x7C	; 124
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	80 7e       	andi	r24, 0xE0	; 224
     43c:	80 83       	st	Z, r24
	ADCSRB &= ~(1 << MUX5);
     43e:	eb e7       	ldi	r30, 0x7B	; 123
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	87 7f       	andi	r24, 0xF7	; 247
     446:	80 83       	st	Z, r24
	printf("check 1");
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	93 e0       	ldi	r25, 0x03	; 3
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	66 d4       	rcall	.+2252   	; 0xd1e <printf>
	//Start conversion, set ADSC to 1 (Use single conversion).
	ADCSRA |= (1 << ADSC);
     452:	ea e7       	ldi	r30, 0x7A	; 122
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	80 83       	st	Z, r24
	printf("check 2");
     45c:	88 e0       	ldi	r24, 0x08	; 8
     45e:	93 e0       	ldi	r25, 0x03	; 3
     460:	9f 93       	push	r25
     462:	8f 93       	push	r24
     464:	5c d4       	rcall	.+2232   	; 0xd1e <printf>

	//Wait until conversion complete :
	//While ADIF is not high, wait
	while (!(ADCSRA & (1<<ADIF)));
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	ea e7       	ldi	r30, 0x7A	; 122
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	84 ff       	sbrs	r24, 4
     476:	fd cf       	rjmp	.-6      	; 0x472 <IR_read+0x40>
	printf("check 3");
     478:	80 e1       	ldi	r24, 0x10	; 16
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	4e d4       	rcall	.+2204   	; 0xd1e <printf>
	//result present in ADCH and ADCL
	//Read adcl first, then ADCH
	
	
	uint16_t adcValue = ADCL + (ADCH << 8);
     482:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     486:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	return adcValue;
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	98 2f       	mov	r25, r24
     48e:	88 27       	eor	r24, r24
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
	//adc = v-in*1024/v-ref
	sei();
     494:	82 0f       	add	r24, r18
     496:	91 1d       	adc	r25, r1
     498:	08 95       	ret

0000049a <joystick_readPositionOverCAN>:
#include "CAN.h"
#include "pwm.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
void joystick_readPositionOverCAN() {
     49a:	8f 92       	push	r8
     49c:	9f 92       	push	r9
     49e:	af 92       	push	r10
     4a0:	bf 92       	push	r11
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	2b 97       	sbiw	r28, 0x0b	; 11
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	CAN_receiveMessage(&mess);
     4bc:	ce 01       	movw	r24, r28
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	aa de       	rcall	.-684    	; 0x216 <CAN_receiveMessage>
	
	if (mess.ID = 0x01) {
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	9a 87       	std	Y+10, r25	; 0x0a
     4c8:	89 87       	std	Y+9, r24	; 0x09
		joystick_pos.x_pos = mess.data[0];
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	09 e4       	ldi	r16, 0x49	; 73
     4ce:	13 e0       	ldi	r17, 0x03	; 3
     4d0:	f8 01       	movw	r30, r16
     4d2:	80 83       	st	Z, r24
		joystick_pos.y_pos = mess.data[1];
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	81 83       	std	Z+1, r24	; 0x01
		joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     4d8:	60 81       	ld	r22, Z
     4da:	f1 80       	ldd	r15, Z+1	; 0x01
     4dc:	06 2e       	mov	r0, r22
     4de:	00 0c       	add	r0, r0
     4e0:	77 0b       	sbc	r23, r23
     4e2:	88 0b       	sbc	r24, r24
     4e4:	99 0b       	sbc	r25, r25
     4e6:	8b d2       	rcall	.+1302   	; 0x9fe <__floatsisf>
     4e8:	4b 01       	movw	r8, r22
     4ea:	5c 01       	movw	r10, r24
     4ec:	6f 2d       	mov	r22, r15
     4ee:	ff 0c       	add	r15, r15
     4f0:	77 0b       	sbc	r23, r23
     4f2:	88 0b       	sbc	r24, r24
     4f4:	99 0b       	sbc	r25, r25
     4f6:	83 d2       	rcall	.+1286   	; 0x9fe <__floatsisf>
     4f8:	a5 01       	movw	r20, r10
     4fa:	94 01       	movw	r18, r8
     4fc:	8e d1       	rcall	.+796    	; 0x81a <atan2>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	44 eb       	ldi	r20, 0xB4	; 180
     504:	53 e4       	ldi	r21, 0x43	; 67
     506:	5b d3       	rcall	.+1718   	; 0xbbe <__mulsf3>
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	5f e3       	ldi	r21, 0x3F	; 63
     510:	56 d3       	rcall	.+1708   	; 0xbbe <__mulsf3>
     512:	23 ec       	ldi	r18, 0xC3	; 195
     514:	35 ef       	ldi	r19, 0xF5	; 245
     516:	48 e4       	ldi	r20, 0x48	; 72
     518:	50 e4       	ldi	r21, 0x40	; 64
     51a:	d6 d1       	rcall	.+940    	; 0x8c8 <__divsf3>
     51c:	3d d2       	rcall	.+1146   	; 0x998 <__fixsfsi>
     51e:	f8 01       	movw	r30, r16
     520:	73 83       	std	Z+3, r23	; 0x03
     522:	62 83       	std	Z+2, r22	; 0x02
	}
}
     524:	2b 96       	adiw	r28, 0x0b	; 11
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	8f 90       	pop	r8
     542:	08 95       	ret

00000544 <joystick_printPosition>:

void joystick_printPosition() {
	printf("X: %i\tY: %i\n\rAngle: %i\n\r", joystick_pos.x_pos, joystick_pos.y_pos, joystick_pos.angle);
     544:	e9 e4       	ldi	r30, 0x49	; 73
     546:	f3 e0       	ldi	r31, 0x03	; 3
     548:	22 81       	ldd	r18, Z+2	; 0x02
     54a:	33 81       	ldd	r19, Z+3	; 0x03
     54c:	91 81       	ldd	r25, Z+1	; 0x01
     54e:	80 81       	ld	r24, Z
     550:	3f 93       	push	r19
     552:	2f 93       	push	r18
     554:	29 2f       	mov	r18, r25
     556:	09 2e       	mov	r0, r25
     558:	00 0c       	add	r0, r0
     55a:	33 0b       	sbc	r19, r19
     55c:	3f 93       	push	r19
     55e:	9f 93       	push	r25
     560:	28 2f       	mov	r18, r24
     562:	08 2e       	mov	r0, r24
     564:	00 0c       	add	r0, r0
     566:	33 0b       	sbc	r19, r19
     568:	3f 93       	push	r19
     56a:	8f 93       	push	r24
     56c:	88 e1       	ldi	r24, 0x18	; 24
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	d4 d3       	rcall	.+1960   	; 0xd1e <printf>
}
     576:	8d b7       	in	r24, 0x3d	; 61
     578:	9e b7       	in	r25, 0x3e	; 62
     57a:	08 96       	adiw	r24, 0x08	; 8
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	9e bf       	out	0x3e, r25	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	8d bf       	out	0x3d, r24	; 61
     586:	08 95       	ret

00000588 <joystick_setServo>:

void joystick_setServo() {
		float var = 3-(((float)joystick_pos.x_pos+100.0)/200.0*(2.1-0.9)+0.9);
     588:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <joystick_pos>
		//printf("servo value: %i\n\r",(var*100));
		pwm_setPulseWidth(var);
     58c:	06 2e       	mov	r0, r22
     58e:	00 0c       	add	r0, r0
     590:	77 0b       	sbc	r23, r23
     592:	88 0b       	sbc	r24, r24
     594:	99 0b       	sbc	r25, r25
     596:	33 d2       	rcall	.+1126   	; 0x9fe <__floatsisf>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	48 ec       	ldi	r20, 0xC8	; 200
     59e:	52 e4       	ldi	r21, 0x42	; 66
     5a0:	c9 d0       	rcall	.+402    	; 0x734 <__addsf3>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	48 e4       	ldi	r20, 0x48	; 72
     5a8:	53 e4       	ldi	r21, 0x43	; 67
     5aa:	8e d1       	rcall	.+796    	; 0x8c8 <__divsf3>
     5ac:	29 e9       	ldi	r18, 0x99	; 153
     5ae:	39 e9       	ldi	r19, 0x99	; 153
     5b0:	49 e9       	ldi	r20, 0x99	; 153
     5b2:	5f e3       	ldi	r21, 0x3F	; 63
     5b4:	04 d3       	rcall	.+1544   	; 0xbbe <__mulsf3>
     5b6:	26 e6       	ldi	r18, 0x66	; 102
     5b8:	36 e6       	ldi	r19, 0x66	; 102
     5ba:	46 e6       	ldi	r20, 0x66	; 102
     5bc:	5f e3       	ldi	r21, 0x3F	; 63
     5be:	ba d0       	rcall	.+372    	; 0x734 <__addsf3>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e4       	ldi	r24, 0x40	; 64
     5ca:	90 e4       	ldi	r25, 0x40	; 64
     5cc:	b2 d0       	rcall	.+356    	; 0x732 <__subsf3>
     5ce:	22 c0       	rjmp	.+68     	; 0x614 <pwm_setPulseWidth>
     5d0:	08 95       	ret

000005d2 <pwm_init>:
#define PWM_PRESCALER				8
#define ICR_PERIOD					(F_CPU*PERIOD_MS)/PWM_PRESCALER/1000

void pwm_init() {
	//set output pin
	DDRB |= (1 << PB5);
     5d2:	25 9a       	sbi	0x04, 5	; 4
	
	//Reset prescaler, then set to 8.
	TCCR1B &= PRESC_OFF;
     5d4:	e1 e8       	ldi	r30, 0x81	; 129
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	88 7f       	andi	r24, 0xF8	; 248
     5dc:	80 83       	st	Z, r24
	TCCR1B |= PRESC_8;
     5de:	80 81       	ld	r24, Z
     5e0:	82 60       	ori	r24, 0x02	; 2
     5e2:	80 83       	st	Z, r24

	//set ocr0 register as something
	
	//Timer incremented until counter value matches value in OCR1A
	TCCR1A |= (1 << WGM11 & ~(1 <<WGM10));
     5e4:	a0 e8       	ldi	r26, 0x80	; 128
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	8c 91       	ld	r24, X
     5ea:	82 60       	ori	r24, 0x02	; 2
     5ec:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13 | 1 << WGM12);
     5ee:	80 81       	ld	r24, Z
     5f0:	88 61       	ori	r24, 0x18	; 24
     5f2:	80 83       	st	Z, r24
	
	//Set compare output mode on channel A
	TCCR1A |= (1 << COM1A1 & ~(COM1A0));
     5f4:	8c 91       	ld	r24, X
     5f6:	80 68       	ori	r24, 0x80	; 128
     5f8:	8c 93       	st	X, r24
	
	
	
	//set period to 20ms
	ICR1 = ICR_PERIOD;
     5fa:	80 e4       	ldi	r24, 0x40	; 64
     5fc:	9c e9       	ldi	r25, 0x9C	; 156
     5fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     602:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	

	
	//Set initial pulsewidth
	OCR1A = ICR_PERIOD/(20)*(2.1+0.9)/2;
     606:	88 eb       	ldi	r24, 0xB8	; 184
     608:	9b e0       	ldi	r25, 0x0B	; 11
     60a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     60e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     612:	08 95       	ret

00000614 <pwm_setPulseWidth>:

}

void pwm_setPulseWidth(float width_ms) {
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	6b 01       	movw	r12, r22
     61e:	7c 01       	movw	r14, r24
	
	
	if (width_ms >= 0.9 && width_ms <=2.1) {
     620:	26 e6       	ldi	r18, 0x66	; 102
     622:	36 e6       	ldi	r19, 0x66	; 102
     624:	46 e6       	ldi	r20, 0x66	; 102
     626:	5f e3       	ldi	r21, 0x3F	; 63
     628:	bf d2       	rcall	.+1406   	; 0xba8 <__gesf2>
     62a:	88 23       	and	r24, r24
     62c:	d4 f0       	brlt	.+52     	; 0x662 <pwm_setPulseWidth+0x4e>
     62e:	26 e6       	ldi	r18, 0x66	; 102
     630:	36 e6       	ldi	r19, 0x66	; 102
     632:	46 e0       	ldi	r20, 0x06	; 6
     634:	50 e4       	ldi	r21, 0x40	; 64
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	42 d1       	rcall	.+644    	; 0x8c0 <__cmpsf2>
     63c:	18 16       	cp	r1, r24
     63e:	8c f0       	brlt	.+34     	; 0x662 <pwm_setPulseWidth+0x4e>
		
		
		float dutyCycle = width_ms/PERIOD_MS;
		uint32_t pulse = dutyCycle*(ICR_PERIOD);
		
		OCR1A = pulse;
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 ea       	ldi	r20, 0xA0	; 160
     646:	51 e4       	ldi	r21, 0x41	; 65
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	3d d1       	rcall	.+634    	; 0x8c8 <__divsf3>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e4       	ldi	r19, 0x40	; 64
     652:	4c e1       	ldi	r20, 0x1C	; 28
     654:	57 e4       	ldi	r21, 0x47	; 71
     656:	b3 d2       	rcall	.+1382   	; 0xbbe <__mulsf3>
     658:	a4 d1       	rcall	.+840    	; 0x9a2 <__fixunssfsi>
     65a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     65e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		
	}
	
	
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	08 95       	ret

0000066c <setupInit>:
#include "setup.h"
#include "timer.h"
#include "IR.h"
	void setupInit(void){
	//cli();
	USART_init(MYUBRR);
     66c:	87 e6       	ldi	r24, 0x67	; 103
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	45 d0       	rcall	.+138    	; 0x6fc <USART_init>
	CAN_controller_init();
     672:	88 de       	rcall	.-752    	; 0x384 <CAN_controller_init>
	pwm_init();
     674:	ae df       	rcall	.-164    	; 0x5d2 <pwm_init>
     676:	c5 ce       	rjmp	.-630    	; 0x402 <IR_init>
	IR_init();
     678:	08 95       	ret

0000067a <SPI_masterInit>:
     67a:	84 b1       	in	r24, 0x04	; 4
     67c:	87 60       	ori	r24, 0x07	; 7
	SPI_setChipSelect(PB7, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB3);
	SPCR = (1 << SPE);
     67e:	84 b9       	out	0x04, r24	; 4
     680:	27 9a       	sbi	0x04, 7	; 4
     682:	8c b5       	in	r24, 0x2c	; 44
     684:	81 65       	ori	r24, 0x51	; 81
     686:	8c bd       	out	0x2c, r24	; 44
     688:	2f 9a       	sbi	0x05, 7	; 5
     68a:	08 95       	ret

0000068c <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     68c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     68e:	0d b4       	in	r0, 0x2d	; 45
     690:	07 fe       	sbrs	r0, 7
     692:	fd cf       	rjmp	.-6      	; 0x68e <SPI_masterWrite+0x2>

}
     694:	08 95       	ret

00000696 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     696:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
     698:	0d b4       	in	r0, 0x2d	; 45
     69a:	07 fe       	sbrs	r0, 7
     69c:	fd cf       	rjmp	.-6      	; 0x698 <SPI_masterRead+0x2>
	return SPDR;
     69e:	8e b5       	in	r24, 0x2e	; 46
}
     6a0:	08 95       	ret

000006a2 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     6a2:	66 23       	and	r22, r22
     6a4:	69 f0       	breq	.+26     	; 0x6c0 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     6a6:	45 b1       	in	r20, 0x05	; 5
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	b9 01       	movw	r22, r18
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <SPI_setChipSelect+0x12>
     6b0:	66 0f       	add	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	8a 95       	dec	r24
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <SPI_setChipSelect+0xe>
     6b8:	cb 01       	movw	r24, r22
     6ba:	84 2b       	or	r24, r20
     6bc:	85 b9       	out	0x05, r24	; 5
     6be:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     6c0:	45 b1       	in	r20, 0x05	; 5
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	b9 01       	movw	r22, r18
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <SPI_setChipSelect+0x2c>
     6ca:	66 0f       	add	r22, r22
     6cc:	77 1f       	adc	r23, r23
     6ce:	8a 95       	dec	r24
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <SPI_setChipSelect+0x28>
     6d2:	cb 01       	movw	r24, r22
     6d4:	80 95       	com	r24
     6d6:	84 23       	and	r24, r20
     6d8:	85 b9       	out	0x05, r24	; 5
     6da:	08 95       	ret

000006dc <USART_transmitChar>:
	printf("uart setup finished\n\r");
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     6dc:	e0 ec       	ldi	r30, 0xC0	; 192
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	90 81       	ld	r25, Z
     6e2:	95 ff       	sbrs	r25, 5
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <USART_transmitChar+0x4>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     6e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     6ea:	08 95       	ret

000006ec <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     6ec:	e0 ec       	ldi	r30, 0xC0	; 192
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	88 23       	and	r24, r24
     6f4:	ec f7       	brge	.-6      	; 0x6f0 <USART_receiveChar+0x4>
		;
	
	return UDR0;
     6f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     6fa:	08 95       	ret

000006fc <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     6fc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char) (ubrr);
     700:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     704:	88 e1       	ldi	r24, 0x18	; 24
     706:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	
	
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
     70a:	8e e0       	ldi	r24, 0x0E	; 14
     70c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     710:	66 e7       	ldi	r22, 0x76	; 118
     712:	73 e0       	ldi	r23, 0x03	; 3
     714:	8e e6       	ldi	r24, 0x6E	; 110
     716:	93 e0       	ldi	r25, 0x03	; 3
     718:	b8 d2       	rcall	.+1392   	; 0xc8a <fdevopen>
     71a:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <uart+0x1>
     71e:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <uart>
	printf("uart setup finished\n\r");
     722:	81 e3       	ldi	r24, 0x31	; 49
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	f9 d2       	rcall	.+1522   	; 0xd1e <printf>
}
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	08 95       	ret

00000732 <__subsf3>:
     732:	50 58       	subi	r21, 0x80	; 128

00000734 <__addsf3>:
     734:	bb 27       	eor	r27, r27
     736:	aa 27       	eor	r26, r26
     738:	0e d0       	rcall	.+28     	; 0x756 <__addsf3x>
     73a:	fc c1       	rjmp	.+1016   	; 0xb34 <__fp_round>
     73c:	ed d1       	rcall	.+986    	; 0xb18 <__fp_pscA>
     73e:	30 f0       	brcs	.+12     	; 0x74c <__addsf3+0x18>
     740:	f2 d1       	rcall	.+996    	; 0xb26 <__fp_pscB>
     742:	20 f0       	brcs	.+8      	; 0x74c <__addsf3+0x18>
     744:	31 f4       	brne	.+12     	; 0x752 <__addsf3+0x1e>
     746:	9f 3f       	cpi	r25, 0xFF	; 255
     748:	11 f4       	brne	.+4      	; 0x74e <__addsf3+0x1a>
     74a:	1e f4       	brtc	.+6      	; 0x752 <__addsf3+0x1e>
     74c:	bd c1       	rjmp	.+890    	; 0xac8 <__fp_nan>
     74e:	0e f4       	brtc	.+2      	; 0x752 <__addsf3+0x1e>
     750:	e0 95       	com	r30
     752:	e7 fb       	bst	r30, 7
     754:	b3 c1       	rjmp	.+870    	; 0xabc <__fp_inf>

00000756 <__addsf3x>:
     756:	e9 2f       	mov	r30, r25
     758:	fe d1       	rcall	.+1020   	; 0xb56 <__fp_split3>
     75a:	80 f3       	brcs	.-32     	; 0x73c <__addsf3+0x8>
     75c:	ba 17       	cp	r27, r26
     75e:	62 07       	cpc	r22, r18
     760:	73 07       	cpc	r23, r19
     762:	84 07       	cpc	r24, r20
     764:	95 07       	cpc	r25, r21
     766:	18 f0       	brcs	.+6      	; 0x76e <__addsf3x+0x18>
     768:	71 f4       	brne	.+28     	; 0x786 <__addsf3x+0x30>
     76a:	9e f5       	brtc	.+102    	; 0x7d2 <__addsf3x+0x7c>
     76c:	16 c2       	rjmp	.+1068   	; 0xb9a <__fp_zero>
     76e:	0e f4       	brtc	.+2      	; 0x772 <__addsf3x+0x1c>
     770:	e0 95       	com	r30
     772:	0b 2e       	mov	r0, r27
     774:	ba 2f       	mov	r27, r26
     776:	a0 2d       	mov	r26, r0
     778:	0b 01       	movw	r0, r22
     77a:	b9 01       	movw	r22, r18
     77c:	90 01       	movw	r18, r0
     77e:	0c 01       	movw	r0, r24
     780:	ca 01       	movw	r24, r20
     782:	a0 01       	movw	r20, r0
     784:	11 24       	eor	r1, r1
     786:	ff 27       	eor	r31, r31
     788:	59 1b       	sub	r21, r25
     78a:	99 f0       	breq	.+38     	; 0x7b2 <__addsf3x+0x5c>
     78c:	59 3f       	cpi	r21, 0xF9	; 249
     78e:	50 f4       	brcc	.+20     	; 0x7a4 <__addsf3x+0x4e>
     790:	50 3e       	cpi	r21, 0xE0	; 224
     792:	68 f1       	brcs	.+90     	; 0x7ee <__addsf3x+0x98>
     794:	1a 16       	cp	r1, r26
     796:	f0 40       	sbci	r31, 0x00	; 0
     798:	a2 2f       	mov	r26, r18
     79a:	23 2f       	mov	r18, r19
     79c:	34 2f       	mov	r19, r20
     79e:	44 27       	eor	r20, r20
     7a0:	58 5f       	subi	r21, 0xF8	; 248
     7a2:	f3 cf       	rjmp	.-26     	; 0x78a <__addsf3x+0x34>
     7a4:	46 95       	lsr	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	a7 95       	ror	r26
     7ac:	f0 40       	sbci	r31, 0x00	; 0
     7ae:	53 95       	inc	r21
     7b0:	c9 f7       	brne	.-14     	; 0x7a4 <__addsf3x+0x4e>
     7b2:	7e f4       	brtc	.+30     	; 0x7d2 <__addsf3x+0x7c>
     7b4:	1f 16       	cp	r1, r31
     7b6:	ba 0b       	sbc	r27, r26
     7b8:	62 0b       	sbc	r22, r18
     7ba:	73 0b       	sbc	r23, r19
     7bc:	84 0b       	sbc	r24, r20
     7be:	ba f0       	brmi	.+46     	; 0x7ee <__addsf3x+0x98>
     7c0:	91 50       	subi	r25, 0x01	; 1
     7c2:	a1 f0       	breq	.+40     	; 0x7ec <__addsf3x+0x96>
     7c4:	ff 0f       	add	r31, r31
     7c6:	bb 1f       	adc	r27, r27
     7c8:	66 1f       	adc	r22, r22
     7ca:	77 1f       	adc	r23, r23
     7cc:	88 1f       	adc	r24, r24
     7ce:	c2 f7       	brpl	.-16     	; 0x7c0 <__addsf3x+0x6a>
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__addsf3x+0x98>
     7d2:	ba 0f       	add	r27, r26
     7d4:	62 1f       	adc	r22, r18
     7d6:	73 1f       	adc	r23, r19
     7d8:	84 1f       	adc	r24, r20
     7da:	48 f4       	brcc	.+18     	; 0x7ee <__addsf3x+0x98>
     7dc:	87 95       	ror	r24
     7de:	77 95       	ror	r23
     7e0:	67 95       	ror	r22
     7e2:	b7 95       	ror	r27
     7e4:	f7 95       	ror	r31
     7e6:	9e 3f       	cpi	r25, 0xFE	; 254
     7e8:	08 f0       	brcs	.+2      	; 0x7ec <__addsf3x+0x96>
     7ea:	b3 cf       	rjmp	.-154    	; 0x752 <__addsf3+0x1e>
     7ec:	93 95       	inc	r25
     7ee:	88 0f       	add	r24, r24
     7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__addsf3x+0x9e>
     7f2:	99 27       	eor	r25, r25
     7f4:	ee 0f       	add	r30, r30
     7f6:	97 95       	ror	r25
     7f8:	87 95       	ror	r24
     7fa:	08 95       	ret
     7fc:	8d d1       	rcall	.+794    	; 0xb18 <__fp_pscA>
     7fe:	58 f0       	brcs	.+22     	; 0x816 <__addsf3x+0xc0>
     800:	80 e8       	ldi	r24, 0x80	; 128
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	09 f4       	brne	.+2      	; 0x808 <__addsf3x+0xb2>
     806:	9e ef       	ldi	r25, 0xFE	; 254
     808:	8e d1       	rcall	.+796    	; 0xb26 <__fp_pscB>
     80a:	28 f0       	brcs	.+10     	; 0x816 <__addsf3x+0xc0>
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	51 e0       	ldi	r21, 0x01	; 1
     810:	59 f4       	brne	.+22     	; 0x828 <atan2+0xe>
     812:	5e ef       	ldi	r21, 0xFE	; 254
     814:	09 c0       	rjmp	.+18     	; 0x828 <atan2+0xe>
     816:	58 c1       	rjmp	.+688    	; 0xac8 <__fp_nan>
     818:	c0 c1       	rjmp	.+896    	; 0xb9a <__fp_zero>

0000081a <atan2>:
     81a:	e9 2f       	mov	r30, r25
     81c:	e0 78       	andi	r30, 0x80	; 128
     81e:	9b d1       	rcall	.+822    	; 0xb56 <__fp_split3>
     820:	68 f3       	brcs	.-38     	; 0x7fc <__addsf3x+0xa6>
     822:	09 2e       	mov	r0, r25
     824:	05 2a       	or	r0, r21
     826:	c1 f3       	breq	.-16     	; 0x818 <__addsf3x+0xc2>
     828:	26 17       	cp	r18, r22
     82a:	37 07       	cpc	r19, r23
     82c:	48 07       	cpc	r20, r24
     82e:	59 07       	cpc	r21, r25
     830:	38 f0       	brcs	.+14     	; 0x840 <atan2+0x26>
     832:	0e 2e       	mov	r0, r30
     834:	07 f8       	bld	r0, 7
     836:	e0 25       	eor	r30, r0
     838:	69 f0       	breq	.+26     	; 0x854 <atan2+0x3a>
     83a:	e0 25       	eor	r30, r0
     83c:	e0 64       	ori	r30, 0x40	; 64
     83e:	0a c0       	rjmp	.+20     	; 0x854 <atan2+0x3a>
     840:	ef 63       	ori	r30, 0x3F	; 63
     842:	07 f8       	bld	r0, 7
     844:	00 94       	com	r0
     846:	07 fa       	bst	r0, 7
     848:	db 01       	movw	r26, r22
     84a:	b9 01       	movw	r22, r18
     84c:	9d 01       	movw	r18, r26
     84e:	dc 01       	movw	r26, r24
     850:	ca 01       	movw	r24, r20
     852:	ad 01       	movw	r20, r26
     854:	ef 93       	push	r30
     856:	47 d0       	rcall	.+142    	; 0x8e6 <__divsf3_pse>
     858:	6d d1       	rcall	.+730    	; 0xb34 <__fp_round>
     85a:	0a d0       	rcall	.+20     	; 0x870 <atan>
     85c:	5f 91       	pop	r21
     85e:	55 23       	and	r21, r21
     860:	31 f0       	breq	.+12     	; 0x86e <atan2+0x54>
     862:	2b ed       	ldi	r18, 0xDB	; 219
     864:	3f e0       	ldi	r19, 0x0F	; 15
     866:	49 e4       	ldi	r20, 0x49	; 73
     868:	50 fd       	sbrc	r21, 0
     86a:	49 ec       	ldi	r20, 0xC9	; 201
     86c:	63 cf       	rjmp	.-314    	; 0x734 <__addsf3>
     86e:	08 95       	ret

00000870 <atan>:
     870:	df 93       	push	r29
     872:	dd 27       	eor	r29, r29
     874:	b9 2f       	mov	r27, r25
     876:	bf 77       	andi	r27, 0x7F	; 127
     878:	40 e8       	ldi	r20, 0x80	; 128
     87a:	5f e3       	ldi	r21, 0x3F	; 63
     87c:	16 16       	cp	r1, r22
     87e:	17 06       	cpc	r1, r23
     880:	48 07       	cpc	r20, r24
     882:	5b 07       	cpc	r21, r27
     884:	10 f4       	brcc	.+4      	; 0x88a <atan+0x1a>
     886:	d9 2f       	mov	r29, r25
     888:	93 d1       	rcall	.+806    	; 0xbb0 <inverse>
     88a:	9f 93       	push	r25
     88c:	8f 93       	push	r24
     88e:	7f 93       	push	r23
     890:	6f 93       	push	r22
     892:	f8 d1       	rcall	.+1008   	; 0xc84 <square>
     894:	e4 ee       	ldi	r30, 0xE4	; 228
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	1a d1       	rcall	.+564    	; 0xace <__fp_powser>
     89a:	4c d1       	rcall	.+664    	; 0xb34 <__fp_round>
     89c:	2f 91       	pop	r18
     89e:	3f 91       	pop	r19
     8a0:	4f 91       	pop	r20
     8a2:	5f 91       	pop	r21
     8a4:	98 d1       	rcall	.+816    	; 0xbd6 <__mulsf3x>
     8a6:	dd 23       	and	r29, r29
     8a8:	49 f0       	breq	.+18     	; 0x8bc <atan+0x4c>
     8aa:	90 58       	subi	r25, 0x80	; 128
     8ac:	a2 ea       	ldi	r26, 0xA2	; 162
     8ae:	2a ed       	ldi	r18, 0xDA	; 218
     8b0:	3f e0       	ldi	r19, 0x0F	; 15
     8b2:	49 ec       	ldi	r20, 0xC9	; 201
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	d0 78       	andi	r29, 0x80	; 128
     8b8:	5d 27       	eor	r21, r29
     8ba:	4d df       	rcall	.-358    	; 0x756 <__addsf3x>
     8bc:	df 91       	pop	r29
     8be:	3a c1       	rjmp	.+628    	; 0xb34 <__fp_round>

000008c0 <__cmpsf2>:
     8c0:	d9 d0       	rcall	.+434    	; 0xa74 <__fp_cmp>
     8c2:	08 f4       	brcc	.+2      	; 0x8c6 <__cmpsf2+0x6>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	08 95       	ret

000008c8 <__divsf3>:
     8c8:	0c d0       	rcall	.+24     	; 0x8e2 <__divsf3x>
     8ca:	34 c1       	rjmp	.+616    	; 0xb34 <__fp_round>
     8cc:	2c d1       	rcall	.+600    	; 0xb26 <__fp_pscB>
     8ce:	40 f0       	brcs	.+16     	; 0x8e0 <__divsf3+0x18>
     8d0:	23 d1       	rcall	.+582    	; 0xb18 <__fp_pscA>
     8d2:	30 f0       	brcs	.+12     	; 0x8e0 <__divsf3+0x18>
     8d4:	21 f4       	brne	.+8      	; 0x8de <__divsf3+0x16>
     8d6:	5f 3f       	cpi	r21, 0xFF	; 255
     8d8:	19 f0       	breq	.+6      	; 0x8e0 <__divsf3+0x18>
     8da:	f0 c0       	rjmp	.+480    	; 0xabc <__fp_inf>
     8dc:	51 11       	cpse	r21, r1
     8de:	5e c1       	rjmp	.+700    	; 0xb9c <__fp_szero>
     8e0:	f3 c0       	rjmp	.+486    	; 0xac8 <__fp_nan>

000008e2 <__divsf3x>:
     8e2:	39 d1       	rcall	.+626    	; 0xb56 <__fp_split3>
     8e4:	98 f3       	brcs	.-26     	; 0x8cc <__divsf3+0x4>

000008e6 <__divsf3_pse>:
     8e6:	99 23       	and	r25, r25
     8e8:	c9 f3       	breq	.-14     	; 0x8dc <__divsf3+0x14>
     8ea:	55 23       	and	r21, r21
     8ec:	b1 f3       	breq	.-20     	; 0x8da <__divsf3+0x12>
     8ee:	95 1b       	sub	r25, r21
     8f0:	55 0b       	sbc	r21, r21
     8f2:	bb 27       	eor	r27, r27
     8f4:	aa 27       	eor	r26, r26
     8f6:	62 17       	cp	r22, r18
     8f8:	73 07       	cpc	r23, r19
     8fa:	84 07       	cpc	r24, r20
     8fc:	38 f0       	brcs	.+14     	; 0x90c <__divsf3_pse+0x26>
     8fe:	9f 5f       	subi	r25, 0xFF	; 255
     900:	5f 4f       	sbci	r21, 0xFF	; 255
     902:	22 0f       	add	r18, r18
     904:	33 1f       	adc	r19, r19
     906:	44 1f       	adc	r20, r20
     908:	aa 1f       	adc	r26, r26
     90a:	a9 f3       	breq	.-22     	; 0x8f6 <__divsf3_pse+0x10>
     90c:	33 d0       	rcall	.+102    	; 0x974 <__divsf3_pse+0x8e>
     90e:	0e 2e       	mov	r0, r30
     910:	3a f0       	brmi	.+14     	; 0x920 <__divsf3_pse+0x3a>
     912:	e0 e8       	ldi	r30, 0x80	; 128
     914:	30 d0       	rcall	.+96     	; 0x976 <__divsf3_pse+0x90>
     916:	91 50       	subi	r25, 0x01	; 1
     918:	50 40       	sbci	r21, 0x00	; 0
     91a:	e6 95       	lsr	r30
     91c:	00 1c       	adc	r0, r0
     91e:	ca f7       	brpl	.-14     	; 0x912 <__divsf3_pse+0x2c>
     920:	29 d0       	rcall	.+82     	; 0x974 <__divsf3_pse+0x8e>
     922:	fe 2f       	mov	r31, r30
     924:	27 d0       	rcall	.+78     	; 0x974 <__divsf3_pse+0x8e>
     926:	66 0f       	add	r22, r22
     928:	77 1f       	adc	r23, r23
     92a:	88 1f       	adc	r24, r24
     92c:	bb 1f       	adc	r27, r27
     92e:	26 17       	cp	r18, r22
     930:	37 07       	cpc	r19, r23
     932:	48 07       	cpc	r20, r24
     934:	ab 07       	cpc	r26, r27
     936:	b0 e8       	ldi	r27, 0x80	; 128
     938:	09 f0       	breq	.+2      	; 0x93c <__divsf3_pse+0x56>
     93a:	bb 0b       	sbc	r27, r27
     93c:	80 2d       	mov	r24, r0
     93e:	bf 01       	movw	r22, r30
     940:	ff 27       	eor	r31, r31
     942:	93 58       	subi	r25, 0x83	; 131
     944:	5f 4f       	sbci	r21, 0xFF	; 255
     946:	2a f0       	brmi	.+10     	; 0x952 <__divsf3_pse+0x6c>
     948:	9e 3f       	cpi	r25, 0xFE	; 254
     94a:	51 05       	cpc	r21, r1
     94c:	68 f0       	brcs	.+26     	; 0x968 <__divsf3_pse+0x82>
     94e:	b6 c0       	rjmp	.+364    	; 0xabc <__fp_inf>
     950:	25 c1       	rjmp	.+586    	; 0xb9c <__fp_szero>
     952:	5f 3f       	cpi	r21, 0xFF	; 255
     954:	ec f3       	brlt	.-6      	; 0x950 <__divsf3_pse+0x6a>
     956:	98 3e       	cpi	r25, 0xE8	; 232
     958:	dc f3       	brlt	.-10     	; 0x950 <__divsf3_pse+0x6a>
     95a:	86 95       	lsr	r24
     95c:	77 95       	ror	r23
     95e:	67 95       	ror	r22
     960:	b7 95       	ror	r27
     962:	f7 95       	ror	r31
     964:	9f 5f       	subi	r25, 0xFF	; 255
     966:	c9 f7       	brne	.-14     	; 0x95a <__divsf3_pse+0x74>
     968:	88 0f       	add	r24, r24
     96a:	91 1d       	adc	r25, r1
     96c:	96 95       	lsr	r25
     96e:	87 95       	ror	r24
     970:	97 f9       	bld	r25, 7
     972:	08 95       	ret
     974:	e1 e0       	ldi	r30, 0x01	; 1
     976:	66 0f       	add	r22, r22
     978:	77 1f       	adc	r23, r23
     97a:	88 1f       	adc	r24, r24
     97c:	bb 1f       	adc	r27, r27
     97e:	62 17       	cp	r22, r18
     980:	73 07       	cpc	r23, r19
     982:	84 07       	cpc	r24, r20
     984:	ba 07       	cpc	r27, r26
     986:	20 f0       	brcs	.+8      	; 0x990 <__divsf3_pse+0xaa>
     988:	62 1b       	sub	r22, r18
     98a:	73 0b       	sbc	r23, r19
     98c:	84 0b       	sbc	r24, r20
     98e:	ba 0b       	sbc	r27, r26
     990:	ee 1f       	adc	r30, r30
     992:	88 f7       	brcc	.-30     	; 0x976 <__divsf3_pse+0x90>
     994:	e0 95       	com	r30
     996:	08 95       	ret

00000998 <__fixsfsi>:
     998:	04 d0       	rcall	.+8      	; 0x9a2 <__fixunssfsi>
     99a:	68 94       	set
     99c:	b1 11       	cpse	r27, r1
     99e:	fe c0       	rjmp	.+508    	; 0xb9c <__fp_szero>
     9a0:	08 95       	ret

000009a2 <__fixunssfsi>:
     9a2:	e1 d0       	rcall	.+450    	; 0xb66 <__fp_splitA>
     9a4:	88 f0       	brcs	.+34     	; 0x9c8 <__fixunssfsi+0x26>
     9a6:	9f 57       	subi	r25, 0x7F	; 127
     9a8:	90 f0       	brcs	.+36     	; 0x9ce <__fixunssfsi+0x2c>
     9aa:	b9 2f       	mov	r27, r25
     9ac:	99 27       	eor	r25, r25
     9ae:	b7 51       	subi	r27, 0x17	; 23
     9b0:	a0 f0       	brcs	.+40     	; 0x9da <__fixunssfsi+0x38>
     9b2:	d1 f0       	breq	.+52     	; 0x9e8 <__fixunssfsi+0x46>
     9b4:	66 0f       	add	r22, r22
     9b6:	77 1f       	adc	r23, r23
     9b8:	88 1f       	adc	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	1a f0       	brmi	.+6      	; 0x9c4 <__fixunssfsi+0x22>
     9be:	ba 95       	dec	r27
     9c0:	c9 f7       	brne	.-14     	; 0x9b4 <__fixunssfsi+0x12>
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__fixunssfsi+0x46>
     9c4:	b1 30       	cpi	r27, 0x01	; 1
     9c6:	81 f0       	breq	.+32     	; 0x9e8 <__fixunssfsi+0x46>
     9c8:	e8 d0       	rcall	.+464    	; 0xb9a <__fp_zero>
     9ca:	b1 e0       	ldi	r27, 0x01	; 1
     9cc:	08 95       	ret
     9ce:	e5 c0       	rjmp	.+458    	; 0xb9a <__fp_zero>
     9d0:	67 2f       	mov	r22, r23
     9d2:	78 2f       	mov	r23, r24
     9d4:	88 27       	eor	r24, r24
     9d6:	b8 5f       	subi	r27, 0xF8	; 248
     9d8:	39 f0       	breq	.+14     	; 0x9e8 <__fixunssfsi+0x46>
     9da:	b9 3f       	cpi	r27, 0xF9	; 249
     9dc:	cc f3       	brlt	.-14     	; 0x9d0 <__fixunssfsi+0x2e>
     9de:	86 95       	lsr	r24
     9e0:	77 95       	ror	r23
     9e2:	67 95       	ror	r22
     9e4:	b3 95       	inc	r27
     9e6:	d9 f7       	brne	.-10     	; 0x9de <__fixunssfsi+0x3c>
     9e8:	3e f4       	brtc	.+14     	; 0x9f8 <__fixunssfsi+0x56>
     9ea:	90 95       	com	r25
     9ec:	80 95       	com	r24
     9ee:	70 95       	com	r23
     9f0:	61 95       	neg	r22
     9f2:	7f 4f       	sbci	r23, 0xFF	; 255
     9f4:	8f 4f       	sbci	r24, 0xFF	; 255
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	08 95       	ret

000009fa <__floatunsisf>:
     9fa:	e8 94       	clt
     9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__floatsisf+0x12>

000009fe <__floatsisf>:
     9fe:	97 fb       	bst	r25, 7
     a00:	3e f4       	brtc	.+14     	; 0xa10 <__floatsisf+0x12>
     a02:	90 95       	com	r25
     a04:	80 95       	com	r24
     a06:	70 95       	com	r23
     a08:	61 95       	neg	r22
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	8f 4f       	sbci	r24, 0xFF	; 255
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	99 23       	and	r25, r25
     a12:	a9 f0       	breq	.+42     	; 0xa3e <__floatsisf+0x40>
     a14:	f9 2f       	mov	r31, r25
     a16:	96 e9       	ldi	r25, 0x96	; 150
     a18:	bb 27       	eor	r27, r27
     a1a:	93 95       	inc	r25
     a1c:	f6 95       	lsr	r31
     a1e:	87 95       	ror	r24
     a20:	77 95       	ror	r23
     a22:	67 95       	ror	r22
     a24:	b7 95       	ror	r27
     a26:	f1 11       	cpse	r31, r1
     a28:	f8 cf       	rjmp	.-16     	; 0xa1a <__floatsisf+0x1c>
     a2a:	fa f4       	brpl	.+62     	; 0xa6a <__floatsisf+0x6c>
     a2c:	bb 0f       	add	r27, r27
     a2e:	11 f4       	brne	.+4      	; 0xa34 <__floatsisf+0x36>
     a30:	60 ff       	sbrs	r22, 0
     a32:	1b c0       	rjmp	.+54     	; 0xa6a <__floatsisf+0x6c>
     a34:	6f 5f       	subi	r22, 0xFF	; 255
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	8f 4f       	sbci	r24, 0xFF	; 255
     a3a:	9f 4f       	sbci	r25, 0xFF	; 255
     a3c:	16 c0       	rjmp	.+44     	; 0xa6a <__floatsisf+0x6c>
     a3e:	88 23       	and	r24, r24
     a40:	11 f0       	breq	.+4      	; 0xa46 <__floatsisf+0x48>
     a42:	96 e9       	ldi	r25, 0x96	; 150
     a44:	11 c0       	rjmp	.+34     	; 0xa68 <__floatsisf+0x6a>
     a46:	77 23       	and	r23, r23
     a48:	21 f0       	breq	.+8      	; 0xa52 <__floatsisf+0x54>
     a4a:	9e e8       	ldi	r25, 0x8E	; 142
     a4c:	87 2f       	mov	r24, r23
     a4e:	76 2f       	mov	r23, r22
     a50:	05 c0       	rjmp	.+10     	; 0xa5c <__floatsisf+0x5e>
     a52:	66 23       	and	r22, r22
     a54:	71 f0       	breq	.+28     	; 0xa72 <__floatsisf+0x74>
     a56:	96 e8       	ldi	r25, 0x86	; 134
     a58:	86 2f       	mov	r24, r22
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	2a f0       	brmi	.+10     	; 0xa6a <__floatsisf+0x6c>
     a60:	9a 95       	dec	r25
     a62:	66 0f       	add	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	88 1f       	adc	r24, r24
     a68:	da f7       	brpl	.-10     	; 0xa60 <__floatsisf+0x62>
     a6a:	88 0f       	add	r24, r24
     a6c:	96 95       	lsr	r25
     a6e:	87 95       	ror	r24
     a70:	97 f9       	bld	r25, 7
     a72:	08 95       	ret

00000a74 <__fp_cmp>:
     a74:	99 0f       	add	r25, r25
     a76:	00 08       	sbc	r0, r0
     a78:	55 0f       	add	r21, r21
     a7a:	aa 0b       	sbc	r26, r26
     a7c:	e0 e8       	ldi	r30, 0x80	; 128
     a7e:	fe ef       	ldi	r31, 0xFE	; 254
     a80:	16 16       	cp	r1, r22
     a82:	17 06       	cpc	r1, r23
     a84:	e8 07       	cpc	r30, r24
     a86:	f9 07       	cpc	r31, r25
     a88:	c0 f0       	brcs	.+48     	; 0xaba <__fp_cmp+0x46>
     a8a:	12 16       	cp	r1, r18
     a8c:	13 06       	cpc	r1, r19
     a8e:	e4 07       	cpc	r30, r20
     a90:	f5 07       	cpc	r31, r21
     a92:	98 f0       	brcs	.+38     	; 0xaba <__fp_cmp+0x46>
     a94:	62 1b       	sub	r22, r18
     a96:	73 0b       	sbc	r23, r19
     a98:	84 0b       	sbc	r24, r20
     a9a:	95 0b       	sbc	r25, r21
     a9c:	39 f4       	brne	.+14     	; 0xaac <__fp_cmp+0x38>
     a9e:	0a 26       	eor	r0, r26
     aa0:	61 f0       	breq	.+24     	; 0xaba <__fp_cmp+0x46>
     aa2:	23 2b       	or	r18, r19
     aa4:	24 2b       	or	r18, r20
     aa6:	25 2b       	or	r18, r21
     aa8:	21 f4       	brne	.+8      	; 0xab2 <__fp_cmp+0x3e>
     aaa:	08 95       	ret
     aac:	0a 26       	eor	r0, r26
     aae:	09 f4       	brne	.+2      	; 0xab2 <__fp_cmp+0x3e>
     ab0:	a1 40       	sbci	r26, 0x01	; 1
     ab2:	a6 95       	lsr	r26
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	81 1d       	adc	r24, r1
     ab8:	81 1d       	adc	r24, r1
     aba:	08 95       	ret

00000abc <__fp_inf>:
     abc:	97 f9       	bld	r25, 7
     abe:	9f 67       	ori	r25, 0x7F	; 127
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	08 95       	ret

00000ac8 <__fp_nan>:
     ac8:	9f ef       	ldi	r25, 0xFF	; 255
     aca:	80 ec       	ldi	r24, 0xC0	; 192
     acc:	08 95       	ret

00000ace <__fp_powser>:
     ace:	df 93       	push	r29
     ad0:	cf 93       	push	r28
     ad2:	1f 93       	push	r17
     ad4:	0f 93       	push	r16
     ad6:	ff 92       	push	r15
     ad8:	ef 92       	push	r14
     ada:	df 92       	push	r13
     adc:	7b 01       	movw	r14, r22
     ade:	8c 01       	movw	r16, r24
     ae0:	68 94       	set
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <__fp_powser+0x20>
     ae4:	da 2e       	mov	r13, r26
     ae6:	ef 01       	movw	r28, r30
     ae8:	76 d0       	rcall	.+236    	; 0xbd6 <__mulsf3x>
     aea:	fe 01       	movw	r30, r28
     aec:	e8 94       	clt
     aee:	a5 91       	lpm	r26, Z+
     af0:	25 91       	lpm	r18, Z+
     af2:	35 91       	lpm	r19, Z+
     af4:	45 91       	lpm	r20, Z+
     af6:	55 91       	lpm	r21, Z+
     af8:	ae f3       	brts	.-22     	; 0xae4 <__fp_powser+0x16>
     afa:	ef 01       	movw	r28, r30
     afc:	2c de       	rcall	.-936    	; 0x756 <__addsf3x>
     afe:	fe 01       	movw	r30, r28
     b00:	97 01       	movw	r18, r14
     b02:	a8 01       	movw	r20, r16
     b04:	da 94       	dec	r13
     b06:	79 f7       	brne	.-34     	; 0xae6 <__fp_powser+0x18>
     b08:	df 90       	pop	r13
     b0a:	ef 90       	pop	r14
     b0c:	ff 90       	pop	r15
     b0e:	0f 91       	pop	r16
     b10:	1f 91       	pop	r17
     b12:	cf 91       	pop	r28
     b14:	df 91       	pop	r29
     b16:	08 95       	ret

00000b18 <__fp_pscA>:
     b18:	00 24       	eor	r0, r0
     b1a:	0a 94       	dec	r0
     b1c:	16 16       	cp	r1, r22
     b1e:	17 06       	cpc	r1, r23
     b20:	18 06       	cpc	r1, r24
     b22:	09 06       	cpc	r0, r25
     b24:	08 95       	ret

00000b26 <__fp_pscB>:
     b26:	00 24       	eor	r0, r0
     b28:	0a 94       	dec	r0
     b2a:	12 16       	cp	r1, r18
     b2c:	13 06       	cpc	r1, r19
     b2e:	14 06       	cpc	r1, r20
     b30:	05 06       	cpc	r0, r21
     b32:	08 95       	ret

00000b34 <__fp_round>:
     b34:	09 2e       	mov	r0, r25
     b36:	03 94       	inc	r0
     b38:	00 0c       	add	r0, r0
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0xc>
     b3c:	88 23       	and	r24, r24
     b3e:	52 f0       	brmi	.+20     	; 0xb54 <__fp_round+0x20>
     b40:	bb 0f       	add	r27, r27
     b42:	40 f4       	brcc	.+16     	; 0xb54 <__fp_round+0x20>
     b44:	bf 2b       	or	r27, r31
     b46:	11 f4       	brne	.+4      	; 0xb4c <__fp_round+0x18>
     b48:	60 ff       	sbrs	r22, 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__fp_round+0x20>
     b4c:	6f 5f       	subi	r22, 0xFF	; 255
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	8f 4f       	sbci	r24, 0xFF	; 255
     b52:	9f 4f       	sbci	r25, 0xFF	; 255
     b54:	08 95       	ret

00000b56 <__fp_split3>:
     b56:	57 fd       	sbrc	r21, 7
     b58:	90 58       	subi	r25, 0x80	; 128
     b5a:	44 0f       	add	r20, r20
     b5c:	55 1f       	adc	r21, r21
     b5e:	59 f0       	breq	.+22     	; 0xb76 <__fp_splitA+0x10>
     b60:	5f 3f       	cpi	r21, 0xFF	; 255
     b62:	71 f0       	breq	.+28     	; 0xb80 <__fp_splitA+0x1a>
     b64:	47 95       	ror	r20

00000b66 <__fp_splitA>:
     b66:	88 0f       	add	r24, r24
     b68:	97 fb       	bst	r25, 7
     b6a:	99 1f       	adc	r25, r25
     b6c:	61 f0       	breq	.+24     	; 0xb86 <__fp_splitA+0x20>
     b6e:	9f 3f       	cpi	r25, 0xFF	; 255
     b70:	79 f0       	breq	.+30     	; 0xb90 <__fp_splitA+0x2a>
     b72:	87 95       	ror	r24
     b74:	08 95       	ret
     b76:	12 16       	cp	r1, r18
     b78:	13 06       	cpc	r1, r19
     b7a:	14 06       	cpc	r1, r20
     b7c:	55 1f       	adc	r21, r21
     b7e:	f2 cf       	rjmp	.-28     	; 0xb64 <__fp_split3+0xe>
     b80:	46 95       	lsr	r20
     b82:	f1 df       	rcall	.-30     	; 0xb66 <__fp_splitA>
     b84:	08 c0       	rjmp	.+16     	; 0xb96 <__fp_splitA+0x30>
     b86:	16 16       	cp	r1, r22
     b88:	17 06       	cpc	r1, r23
     b8a:	18 06       	cpc	r1, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	f1 cf       	rjmp	.-30     	; 0xb72 <__fp_splitA+0xc>
     b90:	86 95       	lsr	r24
     b92:	71 05       	cpc	r23, r1
     b94:	61 05       	cpc	r22, r1
     b96:	08 94       	sec
     b98:	08 95       	ret

00000b9a <__fp_zero>:
     b9a:	e8 94       	clt

00000b9c <__fp_szero>:
     b9c:	bb 27       	eor	r27, r27
     b9e:	66 27       	eor	r22, r22
     ba0:	77 27       	eor	r23, r23
     ba2:	cb 01       	movw	r24, r22
     ba4:	97 f9       	bld	r25, 7
     ba6:	08 95       	ret

00000ba8 <__gesf2>:
     ba8:	65 df       	rcall	.-310    	; 0xa74 <__fp_cmp>
     baa:	08 f4       	brcc	.+2      	; 0xbae <__gesf2+0x6>
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	08 95       	ret

00000bb0 <inverse>:
     bb0:	9b 01       	movw	r18, r22
     bb2:	ac 01       	movw	r20, r24
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e8       	ldi	r24, 0x80	; 128
     bba:	9f e3       	ldi	r25, 0x3F	; 63
     bbc:	85 ce       	rjmp	.-758    	; 0x8c8 <__divsf3>

00000bbe <__mulsf3>:
     bbe:	0b d0       	rcall	.+22     	; 0xbd6 <__mulsf3x>
     bc0:	b9 cf       	rjmp	.-142    	; 0xb34 <__fp_round>
     bc2:	aa df       	rcall	.-172    	; 0xb18 <__fp_pscA>
     bc4:	28 f0       	brcs	.+10     	; 0xbd0 <__mulsf3+0x12>
     bc6:	af df       	rcall	.-162    	; 0xb26 <__fp_pscB>
     bc8:	18 f0       	brcs	.+6      	; 0xbd0 <__mulsf3+0x12>
     bca:	95 23       	and	r25, r21
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <__mulsf3+0x12>
     bce:	76 cf       	rjmp	.-276    	; 0xabc <__fp_inf>
     bd0:	7b cf       	rjmp	.-266    	; 0xac8 <__fp_nan>
     bd2:	11 24       	eor	r1, r1
     bd4:	e3 cf       	rjmp	.-58     	; 0xb9c <__fp_szero>

00000bd6 <__mulsf3x>:
     bd6:	bf df       	rcall	.-130    	; 0xb56 <__fp_split3>
     bd8:	a0 f3       	brcs	.-24     	; 0xbc2 <__mulsf3+0x4>

00000bda <__mulsf3_pse>:
     bda:	95 9f       	mul	r25, r21
     bdc:	d1 f3       	breq	.-12     	; 0xbd2 <__mulsf3+0x14>
     bde:	95 0f       	add	r25, r21
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	55 1f       	adc	r21, r21
     be4:	62 9f       	mul	r22, r18
     be6:	f0 01       	movw	r30, r0
     be8:	72 9f       	mul	r23, r18
     bea:	bb 27       	eor	r27, r27
     bec:	f0 0d       	add	r31, r0
     bee:	b1 1d       	adc	r27, r1
     bf0:	63 9f       	mul	r22, r19
     bf2:	aa 27       	eor	r26, r26
     bf4:	f0 0d       	add	r31, r0
     bf6:	b1 1d       	adc	r27, r1
     bf8:	aa 1f       	adc	r26, r26
     bfa:	64 9f       	mul	r22, r20
     bfc:	66 27       	eor	r22, r22
     bfe:	b0 0d       	add	r27, r0
     c00:	a1 1d       	adc	r26, r1
     c02:	66 1f       	adc	r22, r22
     c04:	82 9f       	mul	r24, r18
     c06:	22 27       	eor	r18, r18
     c08:	b0 0d       	add	r27, r0
     c0a:	a1 1d       	adc	r26, r1
     c0c:	62 1f       	adc	r22, r18
     c0e:	73 9f       	mul	r23, r19
     c10:	b0 0d       	add	r27, r0
     c12:	a1 1d       	adc	r26, r1
     c14:	62 1f       	adc	r22, r18
     c16:	83 9f       	mul	r24, r19
     c18:	a0 0d       	add	r26, r0
     c1a:	61 1d       	adc	r22, r1
     c1c:	22 1f       	adc	r18, r18
     c1e:	74 9f       	mul	r23, r20
     c20:	33 27       	eor	r19, r19
     c22:	a0 0d       	add	r26, r0
     c24:	61 1d       	adc	r22, r1
     c26:	23 1f       	adc	r18, r19
     c28:	84 9f       	mul	r24, r20
     c2a:	60 0d       	add	r22, r0
     c2c:	21 1d       	adc	r18, r1
     c2e:	82 2f       	mov	r24, r18
     c30:	76 2f       	mov	r23, r22
     c32:	6a 2f       	mov	r22, r26
     c34:	11 24       	eor	r1, r1
     c36:	9f 57       	subi	r25, 0x7F	; 127
     c38:	50 40       	sbci	r21, 0x00	; 0
     c3a:	8a f0       	brmi	.+34     	; 0xc5e <__mulsf3_pse+0x84>
     c3c:	e1 f0       	breq	.+56     	; 0xc76 <__mulsf3_pse+0x9c>
     c3e:	88 23       	and	r24, r24
     c40:	4a f0       	brmi	.+18     	; 0xc54 <__mulsf3_pse+0x7a>
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	bb 1f       	adc	r27, r27
     c48:	66 1f       	adc	r22, r22
     c4a:	77 1f       	adc	r23, r23
     c4c:	88 1f       	adc	r24, r24
     c4e:	91 50       	subi	r25, 0x01	; 1
     c50:	50 40       	sbci	r21, 0x00	; 0
     c52:	a9 f7       	brne	.-22     	; 0xc3e <__mulsf3_pse+0x64>
     c54:	9e 3f       	cpi	r25, 0xFE	; 254
     c56:	51 05       	cpc	r21, r1
     c58:	70 f0       	brcs	.+28     	; 0xc76 <__mulsf3_pse+0x9c>
     c5a:	30 cf       	rjmp	.-416    	; 0xabc <__fp_inf>
     c5c:	9f cf       	rjmp	.-194    	; 0xb9c <__fp_szero>
     c5e:	5f 3f       	cpi	r21, 0xFF	; 255
     c60:	ec f3       	brlt	.-6      	; 0xc5c <__mulsf3_pse+0x82>
     c62:	98 3e       	cpi	r25, 0xE8	; 232
     c64:	dc f3       	brlt	.-10     	; 0xc5c <__mulsf3_pse+0x82>
     c66:	86 95       	lsr	r24
     c68:	77 95       	ror	r23
     c6a:	67 95       	ror	r22
     c6c:	b7 95       	ror	r27
     c6e:	f7 95       	ror	r31
     c70:	e7 95       	ror	r30
     c72:	9f 5f       	subi	r25, 0xFF	; 255
     c74:	c1 f7       	brne	.-16     	; 0xc66 <__mulsf3_pse+0x8c>
     c76:	fe 2b       	or	r31, r30
     c78:	88 0f       	add	r24, r24
     c7a:	91 1d       	adc	r25, r1
     c7c:	96 95       	lsr	r25
     c7e:	87 95       	ror	r24
     c80:	97 f9       	bld	r25, 7
     c82:	08 95       	ret

00000c84 <square>:
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	9a cf       	rjmp	.-204    	; 0xbbe <__mulsf3>

00000c8a <fdevopen>:
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	31 f4       	brne	.+12     	; 0xca2 <fdevopen+0x18>
     c96:	61 15       	cp	r22, r1
     c98:	71 05       	cpc	r23, r1
     c9a:	19 f4       	brne	.+6      	; 0xca2 <fdevopen+0x18>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	39 c0       	rjmp	.+114    	; 0xd14 <fdevopen+0x8a>
     ca2:	8b 01       	movw	r16, r22
     ca4:	ec 01       	movw	r28, r24
     ca6:	6e e0       	ldi	r22, 0x0E	; 14
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	47 d2       	rcall	.+1166   	; 0x113e <calloc>
     cb0:	fc 01       	movw	r30, r24
     cb2:	89 2b       	or	r24, r25
     cb4:	99 f3       	breq	.-26     	; 0xc9c <fdevopen+0x12>
     cb6:	80 e8       	ldi	r24, 0x80	; 128
     cb8:	83 83       	std	Z+3, r24	; 0x03
     cba:	01 15       	cp	r16, r1
     cbc:	11 05       	cpc	r17, r1
     cbe:	71 f0       	breq	.+28     	; 0xcdc <fdevopen+0x52>
     cc0:	13 87       	std	Z+11, r17	; 0x0b
     cc2:	02 87       	std	Z+10, r16	; 0x0a
     cc4:	81 e8       	ldi	r24, 0x81	; 129
     cc6:	83 83       	std	Z+3, r24	; 0x03
     cc8:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <__iob>
     ccc:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <__iob+0x1>
     cd0:	89 2b       	or	r24, r25
     cd2:	21 f4       	brne	.+8      	; 0xcdc <fdevopen+0x52>
     cd4:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <__iob+0x1>
     cd8:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <__iob>
     cdc:	20 97       	sbiw	r28, 0x00	; 0
     cde:	c9 f0       	breq	.+50     	; 0xd12 <fdevopen+0x88>
     ce0:	d1 87       	std	Z+9, r29	; 0x09
     ce2:	c0 87       	std	Z+8, r28	; 0x08
     ce4:	83 81       	ldd	r24, Z+3	; 0x03
     ce6:	82 60       	ori	r24, 0x02	; 2
     ce8:	83 83       	std	Z+3, r24	; 0x03
     cea:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <__iob+0x2>
     cee:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <__iob+0x3>
     cf2:	89 2b       	or	r24, r25
     cf4:	71 f4       	brne	.+28     	; 0xd12 <fdevopen+0x88>
     cf6:	f0 93 5d 03 	sts	0x035D, r31	; 0x80035d <__iob+0x3>
     cfa:	e0 93 5c 03 	sts	0x035C, r30	; 0x80035c <__iob+0x2>
     cfe:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <__iob+0x4>
     d02:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <__iob+0x5>
     d06:	89 2b       	or	r24, r25
     d08:	21 f4       	brne	.+8      	; 0xd12 <fdevopen+0x88>
     d0a:	f0 93 5f 03 	sts	0x035F, r31	; 0x80035f <__iob+0x5>
     d0e:	e0 93 5e 03 	sts	0x035E, r30	; 0x80035e <__iob+0x4>
     d12:	cf 01       	movw	r24, r30
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	08 95       	ret

00000d1e <printf>:
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	ae 01       	movw	r20, r28
     d28:	4a 5f       	subi	r20, 0xFA	; 250
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	fa 01       	movw	r30, r20
     d2e:	61 91       	ld	r22, Z+
     d30:	71 91       	ld	r23, Z+
     d32:	af 01       	movw	r20, r30
     d34:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <__iob+0x2>
     d38:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <__iob+0x3>
     d3c:	03 d0       	rcall	.+6      	; 0xd44 <vfprintf>
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <vfprintf>:
     d44:	2f 92       	push	r2
     d46:	3f 92       	push	r3
     d48:	4f 92       	push	r4
     d4a:	5f 92       	push	r5
     d4c:	6f 92       	push	r6
     d4e:	7f 92       	push	r7
     d50:	8f 92       	push	r8
     d52:	9f 92       	push	r9
     d54:	af 92       	push	r10
     d56:	bf 92       	push	r11
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	2b 97       	sbiw	r28, 0x0b	; 11
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	6c 01       	movw	r12, r24
     d7a:	7b 01       	movw	r14, r22
     d7c:	8a 01       	movw	r16, r20
     d7e:	fc 01       	movw	r30, r24
     d80:	17 82       	std	Z+7, r1	; 0x07
     d82:	16 82       	std	Z+6, r1	; 0x06
     d84:	83 81       	ldd	r24, Z+3	; 0x03
     d86:	81 ff       	sbrs	r24, 1
     d88:	bf c1       	rjmp	.+894    	; 0x1108 <vfprintf+0x3c4>
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	3c 01       	movw	r6, r24
     d90:	f6 01       	movw	r30, r12
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	f7 01       	movw	r30, r14
     d96:	93 fd       	sbrc	r25, 3
     d98:	85 91       	lpm	r24, Z+
     d9a:	93 ff       	sbrs	r25, 3
     d9c:	81 91       	ld	r24, Z+
     d9e:	7f 01       	movw	r14, r30
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <vfprintf+0x62>
     da4:	ad c1       	rjmp	.+858    	; 0x1100 <vfprintf+0x3bc>
     da6:	85 32       	cpi	r24, 0x25	; 37
     da8:	39 f4       	brne	.+14     	; 0xdb8 <vfprintf+0x74>
     daa:	93 fd       	sbrc	r25, 3
     dac:	85 91       	lpm	r24, Z+
     dae:	93 ff       	sbrs	r25, 3
     db0:	81 91       	ld	r24, Z+
     db2:	7f 01       	movw	r14, r30
     db4:	85 32       	cpi	r24, 0x25	; 37
     db6:	21 f4       	brne	.+8      	; 0xdc0 <vfprintf+0x7c>
     db8:	b6 01       	movw	r22, r12
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	18 d3       	rcall	.+1584   	; 0x13ee <fputc>
     dbe:	e8 cf       	rjmp	.-48     	; 0xd90 <vfprintf+0x4c>
     dc0:	91 2c       	mov	r9, r1
     dc2:	21 2c       	mov	r2, r1
     dc4:	31 2c       	mov	r3, r1
     dc6:	ff e1       	ldi	r31, 0x1F	; 31
     dc8:	f3 15       	cp	r31, r3
     dca:	d8 f0       	brcs	.+54     	; 0xe02 <vfprintf+0xbe>
     dcc:	8b 32       	cpi	r24, 0x2B	; 43
     dce:	79 f0       	breq	.+30     	; 0xdee <vfprintf+0xaa>
     dd0:	38 f4       	brcc	.+14     	; 0xde0 <vfprintf+0x9c>
     dd2:	80 32       	cpi	r24, 0x20	; 32
     dd4:	79 f0       	breq	.+30     	; 0xdf4 <vfprintf+0xb0>
     dd6:	83 32       	cpi	r24, 0x23	; 35
     dd8:	a1 f4       	brne	.+40     	; 0xe02 <vfprintf+0xbe>
     dda:	23 2d       	mov	r18, r3
     ddc:	20 61       	ori	r18, 0x10	; 16
     dde:	1d c0       	rjmp	.+58     	; 0xe1a <vfprintf+0xd6>
     de0:	8d 32       	cpi	r24, 0x2D	; 45
     de2:	61 f0       	breq	.+24     	; 0xdfc <vfprintf+0xb8>
     de4:	80 33       	cpi	r24, 0x30	; 48
     de6:	69 f4       	brne	.+26     	; 0xe02 <vfprintf+0xbe>
     de8:	23 2d       	mov	r18, r3
     dea:	21 60       	ori	r18, 0x01	; 1
     dec:	16 c0       	rjmp	.+44     	; 0xe1a <vfprintf+0xd6>
     dee:	83 2d       	mov	r24, r3
     df0:	82 60       	ori	r24, 0x02	; 2
     df2:	38 2e       	mov	r3, r24
     df4:	e3 2d       	mov	r30, r3
     df6:	e4 60       	ori	r30, 0x04	; 4
     df8:	3e 2e       	mov	r3, r30
     dfa:	2a c0       	rjmp	.+84     	; 0xe50 <vfprintf+0x10c>
     dfc:	f3 2d       	mov	r31, r3
     dfe:	f8 60       	ori	r31, 0x08	; 8
     e00:	1d c0       	rjmp	.+58     	; 0xe3c <vfprintf+0xf8>
     e02:	37 fc       	sbrc	r3, 7
     e04:	2d c0       	rjmp	.+90     	; 0xe60 <vfprintf+0x11c>
     e06:	20 ed       	ldi	r18, 0xD0	; 208
     e08:	28 0f       	add	r18, r24
     e0a:	2a 30       	cpi	r18, 0x0A	; 10
     e0c:	40 f0       	brcs	.+16     	; 0xe1e <vfprintf+0xda>
     e0e:	8e 32       	cpi	r24, 0x2E	; 46
     e10:	b9 f4       	brne	.+46     	; 0xe40 <vfprintf+0xfc>
     e12:	36 fc       	sbrc	r3, 6
     e14:	75 c1       	rjmp	.+746    	; 0x1100 <vfprintf+0x3bc>
     e16:	23 2d       	mov	r18, r3
     e18:	20 64       	ori	r18, 0x40	; 64
     e1a:	32 2e       	mov	r3, r18
     e1c:	19 c0       	rjmp	.+50     	; 0xe50 <vfprintf+0x10c>
     e1e:	36 fe       	sbrs	r3, 6
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <vfprintf+0xea>
     e22:	8a e0       	ldi	r24, 0x0A	; 10
     e24:	98 9e       	mul	r9, r24
     e26:	20 0d       	add	r18, r0
     e28:	11 24       	eor	r1, r1
     e2a:	92 2e       	mov	r9, r18
     e2c:	11 c0       	rjmp	.+34     	; 0xe50 <vfprintf+0x10c>
     e2e:	ea e0       	ldi	r30, 0x0A	; 10
     e30:	2e 9e       	mul	r2, r30
     e32:	20 0d       	add	r18, r0
     e34:	11 24       	eor	r1, r1
     e36:	22 2e       	mov	r2, r18
     e38:	f3 2d       	mov	r31, r3
     e3a:	f0 62       	ori	r31, 0x20	; 32
     e3c:	3f 2e       	mov	r3, r31
     e3e:	08 c0       	rjmp	.+16     	; 0xe50 <vfprintf+0x10c>
     e40:	8c 36       	cpi	r24, 0x6C	; 108
     e42:	21 f4       	brne	.+8      	; 0xe4c <vfprintf+0x108>
     e44:	83 2d       	mov	r24, r3
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	38 2e       	mov	r3, r24
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x10c>
     e4c:	88 36       	cpi	r24, 0x68	; 104
     e4e:	41 f4       	brne	.+16     	; 0xe60 <vfprintf+0x11c>
     e50:	f7 01       	movw	r30, r14
     e52:	93 fd       	sbrc	r25, 3
     e54:	85 91       	lpm	r24, Z+
     e56:	93 ff       	sbrs	r25, 3
     e58:	81 91       	ld	r24, Z+
     e5a:	7f 01       	movw	r14, r30
     e5c:	81 11       	cpse	r24, r1
     e5e:	b3 cf       	rjmp	.-154    	; 0xdc6 <vfprintf+0x82>
     e60:	98 2f       	mov	r25, r24
     e62:	9f 7d       	andi	r25, 0xDF	; 223
     e64:	95 54       	subi	r25, 0x45	; 69
     e66:	93 30       	cpi	r25, 0x03	; 3
     e68:	28 f4       	brcc	.+10     	; 0xe74 <vfprintf+0x130>
     e6a:	0c 5f       	subi	r16, 0xFC	; 252
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	9f e3       	ldi	r25, 0x3F	; 63
     e70:	99 83       	std	Y+1, r25	; 0x01
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <vfprintf+0x14a>
     e74:	83 36       	cpi	r24, 0x63	; 99
     e76:	31 f0       	breq	.+12     	; 0xe84 <vfprintf+0x140>
     e78:	83 37       	cpi	r24, 0x73	; 115
     e7a:	71 f0       	breq	.+28     	; 0xe98 <vfprintf+0x154>
     e7c:	83 35       	cpi	r24, 0x53	; 83
     e7e:	09 f0       	breq	.+2      	; 0xe82 <vfprintf+0x13e>
     e80:	55 c0       	rjmp	.+170    	; 0xf2c <vfprintf+0x1e8>
     e82:	20 c0       	rjmp	.+64     	; 0xec4 <vfprintf+0x180>
     e84:	f8 01       	movw	r30, r16
     e86:	80 81       	ld	r24, Z
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	0e 5f       	subi	r16, 0xFE	; 254
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	88 24       	eor	r8, r8
     e90:	83 94       	inc	r8
     e92:	91 2c       	mov	r9, r1
     e94:	53 01       	movw	r10, r6
     e96:	12 c0       	rjmp	.+36     	; 0xebc <vfprintf+0x178>
     e98:	28 01       	movw	r4, r16
     e9a:	f2 e0       	ldi	r31, 0x02	; 2
     e9c:	4f 0e       	add	r4, r31
     e9e:	51 1c       	adc	r5, r1
     ea0:	f8 01       	movw	r30, r16
     ea2:	a0 80       	ld	r10, Z
     ea4:	b1 80       	ldd	r11, Z+1	; 0x01
     ea6:	36 fe       	sbrs	r3, 6
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <vfprintf+0x16c>
     eaa:	69 2d       	mov	r22, r9
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <vfprintf+0x170>
     eb0:	6f ef       	ldi	r22, 0xFF	; 255
     eb2:	7f ef       	ldi	r23, 0xFF	; 255
     eb4:	c5 01       	movw	r24, r10
     eb6:	90 d2       	rcall	.+1312   	; 0x13d8 <strnlen>
     eb8:	4c 01       	movw	r8, r24
     eba:	82 01       	movw	r16, r4
     ebc:	f3 2d       	mov	r31, r3
     ebe:	ff 77       	andi	r31, 0x7F	; 127
     ec0:	3f 2e       	mov	r3, r31
     ec2:	15 c0       	rjmp	.+42     	; 0xeee <vfprintf+0x1aa>
     ec4:	28 01       	movw	r4, r16
     ec6:	22 e0       	ldi	r18, 0x02	; 2
     ec8:	42 0e       	add	r4, r18
     eca:	51 1c       	adc	r5, r1
     ecc:	f8 01       	movw	r30, r16
     ece:	a0 80       	ld	r10, Z
     ed0:	b1 80       	ldd	r11, Z+1	; 0x01
     ed2:	36 fe       	sbrs	r3, 6
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <vfprintf+0x198>
     ed6:	69 2d       	mov	r22, r9
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <vfprintf+0x19c>
     edc:	6f ef       	ldi	r22, 0xFF	; 255
     ede:	7f ef       	ldi	r23, 0xFF	; 255
     ee0:	c5 01       	movw	r24, r10
     ee2:	68 d2       	rcall	.+1232   	; 0x13b4 <strnlen_P>
     ee4:	4c 01       	movw	r8, r24
     ee6:	f3 2d       	mov	r31, r3
     ee8:	f0 68       	ori	r31, 0x80	; 128
     eea:	3f 2e       	mov	r3, r31
     eec:	82 01       	movw	r16, r4
     eee:	33 fc       	sbrc	r3, 3
     ef0:	19 c0       	rjmp	.+50     	; 0xf24 <vfprintf+0x1e0>
     ef2:	82 2d       	mov	r24, r2
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	88 16       	cp	r8, r24
     ef8:	99 06       	cpc	r9, r25
     efa:	a0 f4       	brcc	.+40     	; 0xf24 <vfprintf+0x1e0>
     efc:	b6 01       	movw	r22, r12
     efe:	80 e2       	ldi	r24, 0x20	; 32
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	75 d2       	rcall	.+1258   	; 0x13ee <fputc>
     f04:	2a 94       	dec	r2
     f06:	f5 cf       	rjmp	.-22     	; 0xef2 <vfprintf+0x1ae>
     f08:	f5 01       	movw	r30, r10
     f0a:	37 fc       	sbrc	r3, 7
     f0c:	85 91       	lpm	r24, Z+
     f0e:	37 fe       	sbrs	r3, 7
     f10:	81 91       	ld	r24, Z+
     f12:	5f 01       	movw	r10, r30
     f14:	b6 01       	movw	r22, r12
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	6a d2       	rcall	.+1236   	; 0x13ee <fputc>
     f1a:	21 10       	cpse	r2, r1
     f1c:	2a 94       	dec	r2
     f1e:	21 e0       	ldi	r18, 0x01	; 1
     f20:	82 1a       	sub	r8, r18
     f22:	91 08       	sbc	r9, r1
     f24:	81 14       	cp	r8, r1
     f26:	91 04       	cpc	r9, r1
     f28:	79 f7       	brne	.-34     	; 0xf08 <vfprintf+0x1c4>
     f2a:	e1 c0       	rjmp	.+450    	; 0x10ee <vfprintf+0x3aa>
     f2c:	84 36       	cpi	r24, 0x64	; 100
     f2e:	11 f0       	breq	.+4      	; 0xf34 <vfprintf+0x1f0>
     f30:	89 36       	cpi	r24, 0x69	; 105
     f32:	39 f5       	brne	.+78     	; 0xf82 <vfprintf+0x23e>
     f34:	f8 01       	movw	r30, r16
     f36:	37 fe       	sbrs	r3, 7
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <vfprintf+0x204>
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	0c 5f       	subi	r16, 0xFC	; 252
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	08 c0       	rjmp	.+16     	; 0xf58 <vfprintf+0x214>
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	07 2e       	mov	r0, r23
     f4e:	00 0c       	add	r0, r0
     f50:	88 0b       	sbc	r24, r24
     f52:	99 0b       	sbc	r25, r25
     f54:	0e 5f       	subi	r16, 0xFE	; 254
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	f3 2d       	mov	r31, r3
     f5a:	ff 76       	andi	r31, 0x6F	; 111
     f5c:	3f 2e       	mov	r3, r31
     f5e:	97 ff       	sbrs	r25, 7
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <vfprintf+0x230>
     f62:	90 95       	com	r25
     f64:	80 95       	com	r24
     f66:	70 95       	com	r23
     f68:	61 95       	neg	r22
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	8f 4f       	sbci	r24, 0xFF	; 255
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	f0 68       	ori	r31, 0x80	; 128
     f72:	3f 2e       	mov	r3, r31
     f74:	2a e0       	ldi	r18, 0x0A	; 10
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	a3 01       	movw	r20, r6
     f7a:	75 d2       	rcall	.+1258   	; 0x1466 <__ultoa_invert>
     f7c:	88 2e       	mov	r8, r24
     f7e:	86 18       	sub	r8, r6
     f80:	44 c0       	rjmp	.+136    	; 0x100a <vfprintf+0x2c6>
     f82:	85 37       	cpi	r24, 0x75	; 117
     f84:	31 f4       	brne	.+12     	; 0xf92 <vfprintf+0x24e>
     f86:	23 2d       	mov	r18, r3
     f88:	2f 7e       	andi	r18, 0xEF	; 239
     f8a:	b2 2e       	mov	r11, r18
     f8c:	2a e0       	ldi	r18, 0x0A	; 10
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	25 c0       	rjmp	.+74     	; 0xfdc <vfprintf+0x298>
     f92:	93 2d       	mov	r25, r3
     f94:	99 7f       	andi	r25, 0xF9	; 249
     f96:	b9 2e       	mov	r11, r25
     f98:	8f 36       	cpi	r24, 0x6F	; 111
     f9a:	c1 f0       	breq	.+48     	; 0xfcc <vfprintf+0x288>
     f9c:	18 f4       	brcc	.+6      	; 0xfa4 <vfprintf+0x260>
     f9e:	88 35       	cpi	r24, 0x58	; 88
     fa0:	79 f0       	breq	.+30     	; 0xfc0 <vfprintf+0x27c>
     fa2:	ae c0       	rjmp	.+348    	; 0x1100 <vfprintf+0x3bc>
     fa4:	80 37       	cpi	r24, 0x70	; 112
     fa6:	19 f0       	breq	.+6      	; 0xfae <vfprintf+0x26a>
     fa8:	88 37       	cpi	r24, 0x78	; 120
     faa:	21 f0       	breq	.+8      	; 0xfb4 <vfprintf+0x270>
     fac:	a9 c0       	rjmp	.+338    	; 0x1100 <vfprintf+0x3bc>
     fae:	e9 2f       	mov	r30, r25
     fb0:	e0 61       	ori	r30, 0x10	; 16
     fb2:	be 2e       	mov	r11, r30
     fb4:	b4 fe       	sbrs	r11, 4
     fb6:	0d c0       	rjmp	.+26     	; 0xfd2 <vfprintf+0x28e>
     fb8:	fb 2d       	mov	r31, r11
     fba:	f4 60       	ori	r31, 0x04	; 4
     fbc:	bf 2e       	mov	r11, r31
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <vfprintf+0x28e>
     fc0:	34 fe       	sbrs	r3, 4
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <vfprintf+0x294>
     fc4:	29 2f       	mov	r18, r25
     fc6:	26 60       	ori	r18, 0x06	; 6
     fc8:	b2 2e       	mov	r11, r18
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <vfprintf+0x294>
     fcc:	28 e0       	ldi	r18, 0x08	; 8
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <vfprintf+0x298>
     fd2:	20 e1       	ldi	r18, 0x10	; 16
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x298>
     fd8:	20 e1       	ldi	r18, 0x10	; 16
     fda:	32 e0       	ldi	r19, 0x02	; 2
     fdc:	f8 01       	movw	r30, r16
     fde:	b7 fe       	sbrs	r11, 7
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <vfprintf+0x2ac>
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	0c 5f       	subi	r16, 0xFC	; 252
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	06 c0       	rjmp	.+12     	; 0xffc <vfprintf+0x2b8>
     ff0:	60 81       	ld	r22, Z
     ff2:	71 81       	ldd	r23, Z+1	; 0x01
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 5f       	subi	r16, 0xFE	; 254
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	a3 01       	movw	r20, r6
     ffe:	33 d2       	rcall	.+1126   	; 0x1466 <__ultoa_invert>
    1000:	88 2e       	mov	r8, r24
    1002:	86 18       	sub	r8, r6
    1004:	fb 2d       	mov	r31, r11
    1006:	ff 77       	andi	r31, 0x7F	; 127
    1008:	3f 2e       	mov	r3, r31
    100a:	36 fe       	sbrs	r3, 6
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <vfprintf+0x2e4>
    100e:	23 2d       	mov	r18, r3
    1010:	2e 7f       	andi	r18, 0xFE	; 254
    1012:	a2 2e       	mov	r10, r18
    1014:	89 14       	cp	r8, r9
    1016:	58 f4       	brcc	.+22     	; 0x102e <vfprintf+0x2ea>
    1018:	34 fe       	sbrs	r3, 4
    101a:	0b c0       	rjmp	.+22     	; 0x1032 <vfprintf+0x2ee>
    101c:	32 fc       	sbrc	r3, 2
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <vfprintf+0x2ee>
    1020:	83 2d       	mov	r24, r3
    1022:	8e 7e       	andi	r24, 0xEE	; 238
    1024:	a8 2e       	mov	r10, r24
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <vfprintf+0x2ee>
    1028:	b8 2c       	mov	r11, r8
    102a:	a3 2c       	mov	r10, r3
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <vfprintf+0x2f0>
    102e:	b8 2c       	mov	r11, r8
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <vfprintf+0x2f0>
    1032:	b9 2c       	mov	r11, r9
    1034:	a4 fe       	sbrs	r10, 4
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <vfprintf+0x312>
    1038:	fe 01       	movw	r30, r28
    103a:	e8 0d       	add	r30, r8
    103c:	f1 1d       	adc	r31, r1
    103e:	80 81       	ld	r24, Z
    1040:	80 33       	cpi	r24, 0x30	; 48
    1042:	21 f4       	brne	.+8      	; 0x104c <vfprintf+0x308>
    1044:	9a 2d       	mov	r25, r10
    1046:	99 7e       	andi	r25, 0xE9	; 233
    1048:	a9 2e       	mov	r10, r25
    104a:	09 c0       	rjmp	.+18     	; 0x105e <vfprintf+0x31a>
    104c:	a2 fe       	sbrs	r10, 2
    104e:	06 c0       	rjmp	.+12     	; 0x105c <vfprintf+0x318>
    1050:	b3 94       	inc	r11
    1052:	b3 94       	inc	r11
    1054:	04 c0       	rjmp	.+8      	; 0x105e <vfprintf+0x31a>
    1056:	8a 2d       	mov	r24, r10
    1058:	86 78       	andi	r24, 0x86	; 134
    105a:	09 f0       	breq	.+2      	; 0x105e <vfprintf+0x31a>
    105c:	b3 94       	inc	r11
    105e:	a3 fc       	sbrc	r10, 3
    1060:	10 c0       	rjmp	.+32     	; 0x1082 <vfprintf+0x33e>
    1062:	a0 fe       	sbrs	r10, 0
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <vfprintf+0x32e>
    1066:	b2 14       	cp	r11, r2
    1068:	80 f4       	brcc	.+32     	; 0x108a <vfprintf+0x346>
    106a:	28 0c       	add	r2, r8
    106c:	92 2c       	mov	r9, r2
    106e:	9b 18       	sub	r9, r11
    1070:	0d c0       	rjmp	.+26     	; 0x108c <vfprintf+0x348>
    1072:	b2 14       	cp	r11, r2
    1074:	58 f4       	brcc	.+22     	; 0x108c <vfprintf+0x348>
    1076:	b6 01       	movw	r22, r12
    1078:	80 e2       	ldi	r24, 0x20	; 32
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	b8 d1       	rcall	.+880    	; 0x13ee <fputc>
    107e:	b3 94       	inc	r11
    1080:	f8 cf       	rjmp	.-16     	; 0x1072 <vfprintf+0x32e>
    1082:	b2 14       	cp	r11, r2
    1084:	18 f4       	brcc	.+6      	; 0x108c <vfprintf+0x348>
    1086:	2b 18       	sub	r2, r11
    1088:	02 c0       	rjmp	.+4      	; 0x108e <vfprintf+0x34a>
    108a:	98 2c       	mov	r9, r8
    108c:	21 2c       	mov	r2, r1
    108e:	a4 fe       	sbrs	r10, 4
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <vfprintf+0x36c>
    1092:	b6 01       	movw	r22, r12
    1094:	80 e3       	ldi	r24, 0x30	; 48
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	aa d1       	rcall	.+852    	; 0x13ee <fputc>
    109a:	a2 fe       	sbrs	r10, 2
    109c:	16 c0       	rjmp	.+44     	; 0x10ca <vfprintf+0x386>
    109e:	a1 fc       	sbrc	r10, 1
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <vfprintf+0x364>
    10a2:	88 e7       	ldi	r24, 0x78	; 120
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <vfprintf+0x368>
    10a8:	88 e5       	ldi	r24, 0x58	; 88
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	b6 01       	movw	r22, r12
    10ae:	0c c0       	rjmp	.+24     	; 0x10c8 <vfprintf+0x384>
    10b0:	8a 2d       	mov	r24, r10
    10b2:	86 78       	andi	r24, 0x86	; 134
    10b4:	51 f0       	breq	.+20     	; 0x10ca <vfprintf+0x386>
    10b6:	a1 fe       	sbrs	r10, 1
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <vfprintf+0x37a>
    10ba:	8b e2       	ldi	r24, 0x2B	; 43
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <vfprintf+0x37c>
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	a7 fc       	sbrc	r10, 7
    10c2:	8d e2       	ldi	r24, 0x2D	; 45
    10c4:	b6 01       	movw	r22, r12
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	92 d1       	rcall	.+804    	; 0x13ee <fputc>
    10ca:	89 14       	cp	r8, r9
    10cc:	30 f4       	brcc	.+12     	; 0x10da <vfprintf+0x396>
    10ce:	b6 01       	movw	r22, r12
    10d0:	80 e3       	ldi	r24, 0x30	; 48
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	8c d1       	rcall	.+792    	; 0x13ee <fputc>
    10d6:	9a 94       	dec	r9
    10d8:	f8 cf       	rjmp	.-16     	; 0x10ca <vfprintf+0x386>
    10da:	8a 94       	dec	r8
    10dc:	f3 01       	movw	r30, r6
    10de:	e8 0d       	add	r30, r8
    10e0:	f1 1d       	adc	r31, r1
    10e2:	80 81       	ld	r24, Z
    10e4:	b6 01       	movw	r22, r12
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	82 d1       	rcall	.+772    	; 0x13ee <fputc>
    10ea:	81 10       	cpse	r8, r1
    10ec:	f6 cf       	rjmp	.-20     	; 0x10da <vfprintf+0x396>
    10ee:	22 20       	and	r2, r2
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <vfprintf+0x3b0>
    10f2:	4e ce       	rjmp	.-868    	; 0xd90 <vfprintf+0x4c>
    10f4:	b6 01       	movw	r22, r12
    10f6:	80 e2       	ldi	r24, 0x20	; 32
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	79 d1       	rcall	.+754    	; 0x13ee <fputc>
    10fc:	2a 94       	dec	r2
    10fe:	f7 cf       	rjmp	.-18     	; 0x10ee <vfprintf+0x3aa>
    1100:	f6 01       	movw	r30, r12
    1102:	86 81       	ldd	r24, Z+6	; 0x06
    1104:	97 81       	ldd	r25, Z+7	; 0x07
    1106:	02 c0       	rjmp	.+4      	; 0x110c <vfprintf+0x3c8>
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	9f ef       	ldi	r25, 0xFF	; 255
    110c:	2b 96       	adiw	r28, 0x0b	; 11
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	8f 90       	pop	r8
    1130:	7f 90       	pop	r7
    1132:	6f 90       	pop	r6
    1134:	5f 90       	pop	r5
    1136:	4f 90       	pop	r4
    1138:	3f 90       	pop	r3
    113a:	2f 90       	pop	r2
    113c:	08 95       	ret

0000113e <calloc>:
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	86 9f       	mul	r24, r22
    1148:	80 01       	movw	r16, r0
    114a:	87 9f       	mul	r24, r23
    114c:	10 0d       	add	r17, r0
    114e:	96 9f       	mul	r25, r22
    1150:	10 0d       	add	r17, r0
    1152:	11 24       	eor	r1, r1
    1154:	c8 01       	movw	r24, r16
    1156:	0d d0       	rcall	.+26     	; 0x1172 <malloc>
    1158:	ec 01       	movw	r28, r24
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	21 f0       	breq	.+8      	; 0x1166 <calloc+0x28>
    115e:	a8 01       	movw	r20, r16
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	32 d1       	rcall	.+612    	; 0x13ca <memset>
    1166:	ce 01       	movw	r24, r28
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <malloc>:
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	82 30       	cpi	r24, 0x02	; 2
    117c:	91 05       	cpc	r25, r1
    117e:	10 f4       	brcc	.+4      	; 0x1184 <malloc+0x12>
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <__flp>
    1188:	f0 91 63 03 	lds	r31, 0x0363	; 0x800363 <__flp+0x1>
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	a0 e0       	ldi	r26, 0x00	; 0
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	30 97       	sbiw	r30, 0x00	; 0
    1196:	19 f1       	breq	.+70     	; 0x11de <malloc+0x6c>
    1198:	40 81       	ld	r20, Z
    119a:	51 81       	ldd	r21, Z+1	; 0x01
    119c:	02 81       	ldd	r16, Z+2	; 0x02
    119e:	13 81       	ldd	r17, Z+3	; 0x03
    11a0:	48 17       	cp	r20, r24
    11a2:	59 07       	cpc	r21, r25
    11a4:	c8 f0       	brcs	.+50     	; 0x11d8 <malloc+0x66>
    11a6:	84 17       	cp	r24, r20
    11a8:	95 07       	cpc	r25, r21
    11aa:	69 f4       	brne	.+26     	; 0x11c6 <malloc+0x54>
    11ac:	10 97       	sbiw	r26, 0x00	; 0
    11ae:	31 f0       	breq	.+12     	; 0x11bc <malloc+0x4a>
    11b0:	12 96       	adiw	r26, 0x02	; 2
    11b2:	0c 93       	st	X, r16
    11b4:	12 97       	sbiw	r26, 0x02	; 2
    11b6:	13 96       	adiw	r26, 0x03	; 3
    11b8:	1c 93       	st	X, r17
    11ba:	27 c0       	rjmp	.+78     	; 0x120a <malloc+0x98>
    11bc:	00 93 62 03 	sts	0x0362, r16	; 0x800362 <__flp>
    11c0:	10 93 63 03 	sts	0x0363, r17	; 0x800363 <__flp+0x1>
    11c4:	22 c0       	rjmp	.+68     	; 0x120a <malloc+0x98>
    11c6:	21 15       	cp	r18, r1
    11c8:	31 05       	cpc	r19, r1
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <malloc+0x60>
    11cc:	42 17       	cp	r20, r18
    11ce:	53 07       	cpc	r21, r19
    11d0:	18 f4       	brcc	.+6      	; 0x11d8 <malloc+0x66>
    11d2:	9a 01       	movw	r18, r20
    11d4:	bd 01       	movw	r22, r26
    11d6:	ef 01       	movw	r28, r30
    11d8:	df 01       	movw	r26, r30
    11da:	f8 01       	movw	r30, r16
    11dc:	db cf       	rjmp	.-74     	; 0x1194 <malloc+0x22>
    11de:	21 15       	cp	r18, r1
    11e0:	31 05       	cpc	r19, r1
    11e2:	f9 f0       	breq	.+62     	; 0x1222 <malloc+0xb0>
    11e4:	28 1b       	sub	r18, r24
    11e6:	39 0b       	sbc	r19, r25
    11e8:	24 30       	cpi	r18, 0x04	; 4
    11ea:	31 05       	cpc	r19, r1
    11ec:	80 f4       	brcc	.+32     	; 0x120e <malloc+0x9c>
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	61 15       	cp	r22, r1
    11f4:	71 05       	cpc	r23, r1
    11f6:	21 f0       	breq	.+8      	; 0x1200 <malloc+0x8e>
    11f8:	fb 01       	movw	r30, r22
    11fa:	93 83       	std	Z+3, r25	; 0x03
    11fc:	82 83       	std	Z+2, r24	; 0x02
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <malloc+0x96>
    1200:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <__flp+0x1>
    1204:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <__flp>
    1208:	fe 01       	movw	r30, r28
    120a:	32 96       	adiw	r30, 0x02	; 2
    120c:	44 c0       	rjmp	.+136    	; 0x1296 <malloc+0x124>
    120e:	fe 01       	movw	r30, r28
    1210:	e2 0f       	add	r30, r18
    1212:	f3 1f       	adc	r31, r19
    1214:	81 93       	st	Z+, r24
    1216:	91 93       	st	Z+, r25
    1218:	22 50       	subi	r18, 0x02	; 2
    121a:	31 09       	sbc	r19, r1
    121c:	39 83       	std	Y+1, r19	; 0x01
    121e:	28 83       	st	Y, r18
    1220:	3a c0       	rjmp	.+116    	; 0x1296 <malloc+0x124>
    1222:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <__brkval>
    1226:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <__brkval+0x1>
    122a:	23 2b       	or	r18, r19
    122c:	41 f4       	brne	.+16     	; 0x123e <malloc+0xcc>
    122e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1232:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1236:	30 93 61 03 	sts	0x0361, r19	; 0x800361 <__brkval+0x1>
    123a:	20 93 60 03 	sts	0x0360, r18	; 0x800360 <__brkval>
    123e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1242:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	41 f4       	brne	.+16     	; 0x125c <malloc+0xea>
    124c:	2d b7       	in	r18, 0x3d	; 61
    124e:	3e b7       	in	r19, 0x3e	; 62
    1250:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1254:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1258:	24 1b       	sub	r18, r20
    125a:	35 0b       	sbc	r19, r21
    125c:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <__brkval>
    1260:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <__brkval+0x1>
    1264:	e2 17       	cp	r30, r18
    1266:	f3 07       	cpc	r31, r19
    1268:	a0 f4       	brcc	.+40     	; 0x1292 <malloc+0x120>
    126a:	2e 1b       	sub	r18, r30
    126c:	3f 0b       	sbc	r19, r31
    126e:	28 17       	cp	r18, r24
    1270:	39 07       	cpc	r19, r25
    1272:	78 f0       	brcs	.+30     	; 0x1292 <malloc+0x120>
    1274:	ac 01       	movw	r20, r24
    1276:	4e 5f       	subi	r20, 0xFE	; 254
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	24 17       	cp	r18, r20
    127c:	35 07       	cpc	r19, r21
    127e:	48 f0       	brcs	.+18     	; 0x1292 <malloc+0x120>
    1280:	4e 0f       	add	r20, r30
    1282:	5f 1f       	adc	r21, r31
    1284:	50 93 61 03 	sts	0x0361, r21	; 0x800361 <__brkval+0x1>
    1288:	40 93 60 03 	sts	0x0360, r20	; 0x800360 <__brkval>
    128c:	81 93       	st	Z+, r24
    128e:	91 93       	st	Z+, r25
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <malloc+0x124>
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	cf 01       	movw	r24, r30
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	08 95       	ret

000012a2 <free>:
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	09 f4       	brne	.+2      	; 0x12ac <free+0xa>
    12aa:	81 c0       	rjmp	.+258    	; 0x13ae <free+0x10c>
    12ac:	fc 01       	movw	r30, r24
    12ae:	32 97       	sbiw	r30, 0x02	; 2
    12b0:	13 82       	std	Z+3, r1	; 0x03
    12b2:	12 82       	std	Z+2, r1	; 0x02
    12b4:	a0 91 62 03 	lds	r26, 0x0362	; 0x800362 <__flp>
    12b8:	b0 91 63 03 	lds	r27, 0x0363	; 0x800363 <__flp+0x1>
    12bc:	10 97       	sbiw	r26, 0x00	; 0
    12be:	81 f4       	brne	.+32     	; 0x12e0 <free+0x3e>
    12c0:	20 81       	ld	r18, Z
    12c2:	31 81       	ldd	r19, Z+1	; 0x01
    12c4:	82 0f       	add	r24, r18
    12c6:	93 1f       	adc	r25, r19
    12c8:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <__brkval>
    12cc:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <__brkval+0x1>
    12d0:	28 17       	cp	r18, r24
    12d2:	39 07       	cpc	r19, r25
    12d4:	51 f5       	brne	.+84     	; 0x132a <free+0x88>
    12d6:	f0 93 61 03 	sts	0x0361, r31	; 0x800361 <__brkval+0x1>
    12da:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <__brkval>
    12de:	67 c0       	rjmp	.+206    	; 0x13ae <free+0x10c>
    12e0:	ed 01       	movw	r28, r26
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	ce 17       	cp	r28, r30
    12e8:	df 07       	cpc	r29, r31
    12ea:	40 f4       	brcc	.+16     	; 0x12fc <free+0x5a>
    12ec:	4a 81       	ldd	r20, Y+2	; 0x02
    12ee:	5b 81       	ldd	r21, Y+3	; 0x03
    12f0:	9e 01       	movw	r18, r28
    12f2:	41 15       	cp	r20, r1
    12f4:	51 05       	cpc	r21, r1
    12f6:	f1 f0       	breq	.+60     	; 0x1334 <free+0x92>
    12f8:	ea 01       	movw	r28, r20
    12fa:	f5 cf       	rjmp	.-22     	; 0x12e6 <free+0x44>
    12fc:	d3 83       	std	Z+3, r29	; 0x03
    12fe:	c2 83       	std	Z+2, r28	; 0x02
    1300:	40 81       	ld	r20, Z
    1302:	51 81       	ldd	r21, Z+1	; 0x01
    1304:	84 0f       	add	r24, r20
    1306:	95 1f       	adc	r25, r21
    1308:	c8 17       	cp	r28, r24
    130a:	d9 07       	cpc	r29, r25
    130c:	59 f4       	brne	.+22     	; 0x1324 <free+0x82>
    130e:	88 81       	ld	r24, Y
    1310:	99 81       	ldd	r25, Y+1	; 0x01
    1312:	84 0f       	add	r24, r20
    1314:	95 1f       	adc	r25, r21
    1316:	02 96       	adiw	r24, 0x02	; 2
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	9b 81       	ldd	r25, Y+3	; 0x03
    1320:	93 83       	std	Z+3, r25	; 0x03
    1322:	82 83       	std	Z+2, r24	; 0x02
    1324:	21 15       	cp	r18, r1
    1326:	31 05       	cpc	r19, r1
    1328:	29 f4       	brne	.+10     	; 0x1334 <free+0x92>
    132a:	f0 93 63 03 	sts	0x0363, r31	; 0x800363 <__flp+0x1>
    132e:	e0 93 62 03 	sts	0x0362, r30	; 0x800362 <__flp>
    1332:	3d c0       	rjmp	.+122    	; 0x13ae <free+0x10c>
    1334:	e9 01       	movw	r28, r18
    1336:	fb 83       	std	Y+3, r31	; 0x03
    1338:	ea 83       	std	Y+2, r30	; 0x02
    133a:	49 91       	ld	r20, Y+
    133c:	59 91       	ld	r21, Y+
    133e:	c4 0f       	add	r28, r20
    1340:	d5 1f       	adc	r29, r21
    1342:	ec 17       	cp	r30, r28
    1344:	fd 07       	cpc	r31, r29
    1346:	61 f4       	brne	.+24     	; 0x1360 <free+0xbe>
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	84 0f       	add	r24, r20
    134e:	95 1f       	adc	r25, r21
    1350:	02 96       	adiw	r24, 0x02	; 2
    1352:	e9 01       	movw	r28, r18
    1354:	99 83       	std	Y+1, r25	; 0x01
    1356:	88 83       	st	Y, r24
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	9b 83       	std	Y+3, r25	; 0x03
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	e0 e0       	ldi	r30, 0x00	; 0
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	8d 91       	ld	r24, X+
    1368:	9c 91       	ld	r25, X
    136a:	13 97       	sbiw	r26, 0x03	; 3
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	19 f0       	breq	.+6      	; 0x1376 <free+0xd4>
    1370:	fd 01       	movw	r30, r26
    1372:	dc 01       	movw	r26, r24
    1374:	f7 cf       	rjmp	.-18     	; 0x1364 <free+0xc2>
    1376:	8d 91       	ld	r24, X+
    1378:	9c 91       	ld	r25, X
    137a:	11 97       	sbiw	r26, 0x01	; 1
    137c:	9d 01       	movw	r18, r26
    137e:	2e 5f       	subi	r18, 0xFE	; 254
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <__brkval>
    138a:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <__brkval+0x1>
    138e:	28 17       	cp	r18, r24
    1390:	39 07       	cpc	r19, r25
    1392:	69 f4       	brne	.+26     	; 0x13ae <free+0x10c>
    1394:	30 97       	sbiw	r30, 0x00	; 0
    1396:	29 f4       	brne	.+10     	; 0x13a2 <free+0x100>
    1398:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <__flp+0x1>
    139c:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__flp>
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <free+0x104>
    13a2:	13 82       	std	Z+3, r1	; 0x03
    13a4:	12 82       	std	Z+2, r1	; 0x02
    13a6:	b0 93 61 03 	sts	0x0361, r27	; 0x800361 <__brkval+0x1>
    13aa:	a0 93 60 03 	sts	0x0360, r26	; 0x800360 <__brkval>
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <strnlen_P>:
    13b4:	fc 01       	movw	r30, r24
    13b6:	05 90       	lpm	r0, Z+
    13b8:	61 50       	subi	r22, 0x01	; 1
    13ba:	70 40       	sbci	r23, 0x00	; 0
    13bc:	01 10       	cpse	r0, r1
    13be:	d8 f7       	brcc	.-10     	; 0x13b6 <strnlen_P+0x2>
    13c0:	80 95       	com	r24
    13c2:	90 95       	com	r25
    13c4:	8e 0f       	add	r24, r30
    13c6:	9f 1f       	adc	r25, r31
    13c8:	08 95       	ret

000013ca <memset>:
    13ca:	dc 01       	movw	r26, r24
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <memset+0x6>
    13ce:	6d 93       	st	X+, r22
    13d0:	41 50       	subi	r20, 0x01	; 1
    13d2:	50 40       	sbci	r21, 0x00	; 0
    13d4:	e0 f7       	brcc	.-8      	; 0x13ce <memset+0x4>
    13d6:	08 95       	ret

000013d8 <strnlen>:
    13d8:	fc 01       	movw	r30, r24
    13da:	61 50       	subi	r22, 0x01	; 1
    13dc:	70 40       	sbci	r23, 0x00	; 0
    13de:	01 90       	ld	r0, Z+
    13e0:	01 10       	cpse	r0, r1
    13e2:	d8 f7       	brcc	.-10     	; 0x13da <strnlen+0x2>
    13e4:	80 95       	com	r24
    13e6:	90 95       	com	r25
    13e8:	8e 0f       	add	r24, r30
    13ea:	9f 1f       	adc	r25, r31
    13ec:	08 95       	ret

000013ee <fputc>:
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	fb 01       	movw	r30, r22
    13f8:	23 81       	ldd	r18, Z+3	; 0x03
    13fa:	21 fd       	sbrc	r18, 1
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <fputc+0x16>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	2c c0       	rjmp	.+88     	; 0x145c <fputc+0x6e>
    1404:	22 ff       	sbrs	r18, 2
    1406:	16 c0       	rjmp	.+44     	; 0x1434 <fputc+0x46>
    1408:	46 81       	ldd	r20, Z+6	; 0x06
    140a:	57 81       	ldd	r21, Z+7	; 0x07
    140c:	24 81       	ldd	r18, Z+4	; 0x04
    140e:	35 81       	ldd	r19, Z+5	; 0x05
    1410:	42 17       	cp	r20, r18
    1412:	53 07       	cpc	r21, r19
    1414:	44 f4       	brge	.+16     	; 0x1426 <fputc+0x38>
    1416:	a0 81       	ld	r26, Z
    1418:	b1 81       	ldd	r27, Z+1	; 0x01
    141a:	9d 01       	movw	r18, r26
    141c:	2f 5f       	subi	r18, 0xFF	; 255
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	31 83       	std	Z+1, r19	; 0x01
    1422:	20 83       	st	Z, r18
    1424:	8c 93       	st	X, r24
    1426:	26 81       	ldd	r18, Z+6	; 0x06
    1428:	37 81       	ldd	r19, Z+7	; 0x07
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	37 83       	std	Z+7, r19	; 0x07
    1430:	26 83       	std	Z+6, r18	; 0x06
    1432:	14 c0       	rjmp	.+40     	; 0x145c <fputc+0x6e>
    1434:	8b 01       	movw	r16, r22
    1436:	ec 01       	movw	r28, r24
    1438:	fb 01       	movw	r30, r22
    143a:	00 84       	ldd	r0, Z+8	; 0x08
    143c:	f1 85       	ldd	r31, Z+9	; 0x09
    143e:	e0 2d       	mov	r30, r0
    1440:	19 95       	eicall
    1442:	89 2b       	or	r24, r25
    1444:	e1 f6       	brne	.-72     	; 0x13fe <fputc+0x10>
    1446:	d8 01       	movw	r26, r16
    1448:	16 96       	adiw	r26, 0x06	; 6
    144a:	8d 91       	ld	r24, X+
    144c:	9c 91       	ld	r25, X
    144e:	17 97       	sbiw	r26, 0x07	; 7
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	17 96       	adiw	r26, 0x07	; 7
    1454:	9c 93       	st	X, r25
    1456:	8e 93       	st	-X, r24
    1458:	16 97       	sbiw	r26, 0x06	; 6
    145a:	ce 01       	movw	r24, r28
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret

00001466 <__ultoa_invert>:
    1466:	fa 01       	movw	r30, r20
    1468:	aa 27       	eor	r26, r26
    146a:	28 30       	cpi	r18, 0x08	; 8
    146c:	51 f1       	breq	.+84     	; 0x14c2 <__ultoa_invert+0x5c>
    146e:	20 31       	cpi	r18, 0x10	; 16
    1470:	81 f1       	breq	.+96     	; 0x14d2 <__ultoa_invert+0x6c>
    1472:	e8 94       	clt
    1474:	6f 93       	push	r22
    1476:	6e 7f       	andi	r22, 0xFE	; 254
    1478:	6e 5f       	subi	r22, 0xFE	; 254
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	af 4f       	sbci	r26, 0xFF	; 255
    1482:	b1 e0       	ldi	r27, 0x01	; 1
    1484:	3e d0       	rcall	.+124    	; 0x1502 <__ultoa_invert+0x9c>
    1486:	b4 e0       	ldi	r27, 0x04	; 4
    1488:	3c d0       	rcall	.+120    	; 0x1502 <__ultoa_invert+0x9c>
    148a:	67 0f       	add	r22, r23
    148c:	78 1f       	adc	r23, r24
    148e:	89 1f       	adc	r24, r25
    1490:	9a 1f       	adc	r25, r26
    1492:	a1 1d       	adc	r26, r1
    1494:	68 0f       	add	r22, r24
    1496:	79 1f       	adc	r23, r25
    1498:	8a 1f       	adc	r24, r26
    149a:	91 1d       	adc	r25, r1
    149c:	a1 1d       	adc	r26, r1
    149e:	6a 0f       	add	r22, r26
    14a0:	71 1d       	adc	r23, r1
    14a2:	81 1d       	adc	r24, r1
    14a4:	91 1d       	adc	r25, r1
    14a6:	a1 1d       	adc	r26, r1
    14a8:	20 d0       	rcall	.+64     	; 0x14ea <__ultoa_invert+0x84>
    14aa:	09 f4       	brne	.+2      	; 0x14ae <__ultoa_invert+0x48>
    14ac:	68 94       	set
    14ae:	3f 91       	pop	r19
    14b0:	2a e0       	ldi	r18, 0x0A	; 10
    14b2:	26 9f       	mul	r18, r22
    14b4:	11 24       	eor	r1, r1
    14b6:	30 19       	sub	r19, r0
    14b8:	30 5d       	subi	r19, 0xD0	; 208
    14ba:	31 93       	st	Z+, r19
    14bc:	de f6       	brtc	.-74     	; 0x1474 <__ultoa_invert+0xe>
    14be:	cf 01       	movw	r24, r30
    14c0:	08 95       	ret
    14c2:	46 2f       	mov	r20, r22
    14c4:	47 70       	andi	r20, 0x07	; 7
    14c6:	40 5d       	subi	r20, 0xD0	; 208
    14c8:	41 93       	st	Z+, r20
    14ca:	b3 e0       	ldi	r27, 0x03	; 3
    14cc:	0f d0       	rcall	.+30     	; 0x14ec <__ultoa_invert+0x86>
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__ultoa_invert+0x5c>
    14d0:	f6 cf       	rjmp	.-20     	; 0x14be <__ultoa_invert+0x58>
    14d2:	46 2f       	mov	r20, r22
    14d4:	4f 70       	andi	r20, 0x0F	; 15
    14d6:	40 5d       	subi	r20, 0xD0	; 208
    14d8:	4a 33       	cpi	r20, 0x3A	; 58
    14da:	18 f0       	brcs	.+6      	; 0x14e2 <__ultoa_invert+0x7c>
    14dc:	49 5d       	subi	r20, 0xD9	; 217
    14de:	31 fd       	sbrc	r19, 1
    14e0:	40 52       	subi	r20, 0x20	; 32
    14e2:	41 93       	st	Z+, r20
    14e4:	02 d0       	rcall	.+4      	; 0x14ea <__ultoa_invert+0x84>
    14e6:	a9 f7       	brne	.-22     	; 0x14d2 <__ultoa_invert+0x6c>
    14e8:	ea cf       	rjmp	.-44     	; 0x14be <__ultoa_invert+0x58>
    14ea:	b4 e0       	ldi	r27, 0x04	; 4
    14ec:	a6 95       	lsr	r26
    14ee:	97 95       	ror	r25
    14f0:	87 95       	ror	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	ba 95       	dec	r27
    14f8:	c9 f7       	brne	.-14     	; 0x14ec <__ultoa_invert+0x86>
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 05       	cpc	r22, r1
    14fe:	71 05       	cpc	r23, r1
    1500:	08 95       	ret
    1502:	9b 01       	movw	r18, r22
    1504:	ac 01       	movw	r20, r24
    1506:	0a 2e       	mov	r0, r26
    1508:	06 94       	lsr	r0
    150a:	57 95       	ror	r21
    150c:	47 95       	ror	r20
    150e:	37 95       	ror	r19
    1510:	27 95       	ror	r18
    1512:	ba 95       	dec	r27
    1514:	c9 f7       	brne	.-14     	; 0x1508 <__ultoa_invert+0xa2>
    1516:	62 0f       	add	r22, r18
    1518:	73 1f       	adc	r23, r19
    151a:	84 1f       	adc	r24, r20
    151c:	95 1f       	adc	r25, r21
    151e:	a0 1d       	adc	r26, r0
    1520:	08 95       	ret

00001522 <_exit>:
    1522:	f8 94       	cli

00001524 <__stop_program>:
    1524:	ff cf       	rjmp	.-2      	; 0x1524 <__stop_program>
