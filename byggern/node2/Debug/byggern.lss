
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800200  00000ee4  00000f78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008002d4  008002d4  0000104c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cad  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001252  00000000  00000000  00002ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b48  00000000  00000000  0000411f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00004c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cb  00000000  00000000  00004f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ab  00000000  00000000  0000573b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000060e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	87 c0       	rjmp	.+270    	; 0x124 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 3d       	cpi	r26, 0xD4	; 212
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 ed       	ldi	r26, 0xD4	; 212
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 3e       	cpi	r26, 0xEE	; 238
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	11 d0       	rcall	.+34     	; 0x142 <main>
 120:	df c6       	rjmp	.+3518   	; 0xee0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_5>:
#include "CAN_controller.h"
#include "MCP2515.h"
#include "CAN.h"
volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT4_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
	//cli();
	flag= 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <__data_end>
	
	
	
	//sei();
	
}
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <main>:


int main(void)
//p.23 for can read instructions
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	2b 97       	sbiw	r28, 0x0b	; 11
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
	setupInit();
 156:	01 d2       	rcall	.+1026   	; 0x55a <setupInit>
	printf("\n\r---------------------------------------\n\n\n\n\n\n\r");
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9f 93       	push	r25
 15e:	8f 93       	push	r24
 160:	bd d2       	rcall	.+1402   	; 0x6dc <printf>


	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
 162:	87 e5       	ldi	r24, 0x57	; 87
 164:	95 e0       	ldi	r25, 0x05	; 5
 166:	9a 87       	std	Y+10, r25	; 0x0a
 168:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
 172:	86 e1       	ldi	r24, 0x16	; 22
 174:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
 176:	81 e2       	ldi	r24, 0x21	; 33
 178:	8b 83       	std	Y+3, r24	; 0x03
	
	
	//CAN_controller_setMode(MODE_NORMAL);
	CAN_transmit_message(&message);
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	3a d0       	rcall	.+116    	; 0x1f4 <CAN_transmit_message>
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
	//pwm_testPlayNote();
	//pwm_init();
	//music_playLisaGikk();                 
	while (1) {
		//
		printf("Mei");
 184:	07 e3       	ldi	r16, 0x37	; 55
 186:	12 e0       	ldi	r17, 0x02	; 2
		_delay_ms(500);
		//Put microcontroller to sleep until next interrupt. 

		
		if (flag) {
			printf("Message received");
 188:	0f 2e       	mov	r0, r31
 18a:	fb e3       	ldi	r31, 0x3B	; 59
 18c:	ef 2e       	mov	r14, r31
 18e:	f2 e0       	ldi	r31, 0x02	; 2
 190:	ff 2e       	mov	r15, r31
	//pwm_testPlayNote();
	//pwm_init();
	//music_playLisaGikk();                 
	while (1) {
		//
		printf("Mei");
 192:	f0 2d       	mov	r31, r0
 194:	1f 93       	push	r17
 196:	0f 93       	push	r16
 198:	a1 d2       	rcall	.+1346   	; 0x6dc <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	89 e6       	ldi	r24, 0x69	; 105
 19e:	98 e1       	ldi	r25, 0x18	; 24
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x5e>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x68>
 1aa:	00 00       	nop
		_delay_ms(500);
		//Put microcontroller to sleep until next interrupt. 

		
		if (flag) {
 1ac:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	88 23       	and	r24, r24
			printf("Message received");
 1b6:	89 f0       	breq	.+34     	; 0x1da <main+0x98>
 1b8:	ff 92       	push	r15
 1ba:	ef 92       	push	r14
			flag=0;
 1bc:	8f d2       	rcall	.+1310   	; 0x6dc <printf>
 1be:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <__data_end>
			CAN_receiveMessage(&received_message);
 1c2:	87 ed       	ldi	r24, 0xD7	; 215
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	10 d1       	rcall	.+544    	; 0x3e8 <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	6c e2       	ldi	r22, 0x2C	; 44
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	92 d1       	rcall	.+804    	; 0x4fa <CAN_controller_bitModify>
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	89 e6       	ldi	r24, 0x69	; 105
 1de:	98 e1       	ldi	r25, 0x18	; 24
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x9e>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0xa8>
			
		}
		_delay_ms(500);	
	
		CAN_transmit_message(&message);
 1ea:	00 00       	nop
 1ec:	ce 01       	movw	r24, r28
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	01 d0       	rcall	.+2      	; 0x1f4 <CAN_transmit_message>
		_delay_ms(500);	
		printf("\n\r-------------------------------------------\n\r");
		
		//CAN_controller_setMode(MODE_LOOPBACK);
		*/
	}
 1f2:	d0 cf       	rjmp	.-96     	; 0x194 <main+0x52>

000001f4 <CAN_transmit_message>:
	
	
	
	
}
void CAN_transmit_message(CAN_message_t *message) {
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	8c 01       	movw	r16, r24
	printf("Transmitting message");
 204:	8c e4       	ldi	r24, 0x4C	; 76
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	9f 93       	push	r25
 20a:	8f 93       	push	r24
 20c:	67 d2       	rcall	.+1230   	; 0x6dc <printf>
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
 20e:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <buffer_number.2114>
 212:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <buffer_number.2114+0x1>
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	63 e0       	ldi	r22, 0x03	; 3
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	ee d1       	rcall	.+988    	; 0x5fa <__divmodhi4>
 21e:	28 2f       	mov	r18, r24
 220:	39 2f       	mov	r19, r25
 222:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <buffer_number.2114>
 226:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <buffer_number.2114+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	21 30       	cpi	r18, 0x01	; 1
 230:	31 05       	cpc	r19, r1
 232:	69 f1       	breq	.+90     	; 0x28e <CAN_transmit_message+0x9a>
 234:	22 30       	cpi	r18, 0x02	; 2
 236:	31 05       	cpc	r19, r1
 238:	09 f4       	brne	.+2      	; 0x23c <CAN_transmit_message+0x48>
 23a:	41 c0       	rjmp	.+130    	; 0x2be <CAN_transmit_message+0xca>
 23c:	23 2b       	or	r18, r19
 23e:	09 f0       	breq	.+2      	; 0x242 <CAN_transmit_message+0x4e>
 240:	55 c0       	rjmp	.+170    	; 0x2ec <CAN_transmit_message+0xf8>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
 242:	f8 01       	movw	r30, r16
 244:	40 85       	ldd	r20, Z+8	; 0x08
 246:	51 85       	ldd	r21, Z+9	; 0x09
 248:	42 95       	swap	r20
 24a:	44 0f       	add	r20, r20
 24c:	40 7e       	andi	r20, 0xE0	; 224
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	62 e3       	ldi	r22, 0x32	; 50
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	80 ee       	ldi	r24, 0xE0	; 224
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	50 d1       	rcall	.+672    	; 0x4fa <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
 25a:	f8 01       	movw	r30, r16
 25c:	60 85       	ldd	r22, Z+8	; 0x08
 25e:	71 85       	ldd	r23, Z+9	; 0x09
 260:	76 95       	lsr	r23
 262:	67 95       	ror	r22
 264:	76 95       	lsr	r23
 266:	67 95       	ror	r22
 268:	76 95       	lsr	r23
 26a:	67 95       	ror	r22
 26c:	81 e3       	ldi	r24, 0x31	; 49
 26e:	32 d1       	rcall	.+612    	; 0x4d4 <CAN_controller_write>
				
				printf("Sending whole id: %i", message->ID );
 270:	f8 01       	movw	r30, r16
 272:	80 85       	ldd	r24, Z+8	; 0x08
 274:	91 85       	ldd	r25, Z+9	; 0x09
 276:	9f 93       	push	r25
 278:	8f 93       	push	r24
 27a:	81 e6       	ldi	r24, 0x61	; 97
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	9f 93       	push	r25
 280:	8f 93       	push	r24
 282:	2c d2       	rcall	.+1112   	; 0x6dc <printf>


				break;
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	2f c0       	rjmp	.+94     	; 0x2ec <CAN_transmit_message+0xf8>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
 28e:	f8 01       	movw	r30, r16
 290:	40 85       	ldd	r20, Z+8	; 0x08
 292:	51 85       	ldd	r21, Z+9	; 0x09
 294:	42 95       	swap	r20
 296:	44 0f       	add	r20, r20
 298:	40 7e       	andi	r20, 0xE0	; 224
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	62 e4       	ldi	r22, 0x42	; 66
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	80 ee       	ldi	r24, 0xE0	; 224
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	2a d1       	rcall	.+596    	; 0x4fa <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
 2a6:	f8 01       	movw	r30, r16
 2a8:	60 85       	ldd	r22, Z+8	; 0x08
 2aa:	71 85       	ldd	r23, Z+9	; 0x09
 2ac:	76 95       	lsr	r23
 2ae:	67 95       	ror	r22
 2b0:	76 95       	lsr	r23
 2b2:	67 95       	ror	r22
 2b4:	76 95       	lsr	r23
 2b6:	67 95       	ror	r22
 2b8:	81 e4       	ldi	r24, 0x41	; 65
 2ba:	0c d1       	rcall	.+536    	; 0x4d4 <CAN_controller_write>
				
				break;
 2bc:	17 c0       	rjmp	.+46     	; 0x2ec <CAN_transmit_message+0xf8>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
 2be:	f8 01       	movw	r30, r16
 2c0:	40 85       	ldd	r20, Z+8	; 0x08
 2c2:	51 85       	ldd	r21, Z+9	; 0x09
 2c4:	42 95       	swap	r20
 2c6:	44 0f       	add	r20, r20
 2c8:	40 7e       	andi	r20, 0xE0	; 224
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	62 e5       	ldi	r22, 0x52	; 82
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 ee       	ldi	r24, 0xE0	; 224
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	12 d1       	rcall	.+548    	; 0x4fa <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
 2d6:	f8 01       	movw	r30, r16
 2d8:	60 85       	ldd	r22, Z+8	; 0x08
 2da:	71 85       	ldd	r23, Z+9	; 0x09
 2dc:	76 95       	lsr	r23
 2de:	67 95       	ror	r22
 2e0:	76 95       	lsr	r23
 2e2:	67 95       	ror	r22
 2e4:	76 95       	lsr	r23
 2e6:	67 95       	ror	r22
 2e8:	81 e5       	ldi	r24, 0x51	; 81
 2ea:	f4 d0       	rcall	.+488    	; 0x4d4 <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
 2ec:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <buffer_number.2114>
 2f0:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <buffer_number.2114+0x1>
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	91 05       	cpc	r25, r1
 2f8:	d9 f0       	breq	.+54     	; 0x330 <CAN_transmit_message+0x13c>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	91 05       	cpc	r25, r1
 2fe:	09 f1       	breq	.+66     	; 0x342 <CAN_transmit_message+0x14e>
 300:	89 2b       	or	r24, r25
			case 0:
				printf("\n\rtransmitting data length: %i\n\r", message->data_length);
 302:	39 f5       	brne	.+78     	; 0x352 <CAN_transmit_message+0x15e>
 304:	f8 01       	movw	r30, r16
 306:	82 85       	ldd	r24, Z+10	; 0x0a
 308:	1f 92       	push	r1
 30a:	8f 93       	push	r24
 30c:	86 e7       	ldi	r24, 0x76	; 118
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	9f 93       	push	r25
 312:	8f 93       	push	r24
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
 314:	e3 d1       	rcall	.+966    	; 0x6dc <printf>
 316:	f8 01       	movw	r30, r16
 318:	42 85       	ldd	r20, Z+10	; 0x0a
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	65 e3       	ldi	r22, 0x35	; 53
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	ea d0       	rcall	.+468    	; 0x4fa <CAN_controller_bitModify>
				break;
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
 32e:	11 c0       	rjmp	.+34     	; 0x352 <CAN_transmit_message+0x15e>
 330:	f8 01       	movw	r30, r16
 332:	42 85       	ldd	r20, Z+10	; 0x0a
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	65 e4       	ldi	r22, 0x45	; 69
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	8f e0       	ldi	r24, 0x0F	; 15
 33c:	90 e0       	ldi	r25, 0x00	; 0
				break;
 33e:	dd d0       	rcall	.+442    	; 0x4fa <CAN_controller_bitModify>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
 340:	08 c0       	rjmp	.+16     	; 0x352 <CAN_transmit_message+0x15e>
 342:	f8 01       	movw	r30, r16
 344:	42 85       	ldd	r20, Z+10	; 0x0a
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	65 e5       	ldi	r22, 0x55	; 85
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	8f e0       	ldi	r24, 0x0F	; 15
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	d4 d0       	rcall	.+424    	; 0x4fa <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
 352:	f8 01       	movw	r30, r16
 354:	82 85       	ldd	r24, Z+10	; 0x0a
 356:	88 23       	and	r24, r24
 358:	09 f4       	brne	.+2      	; 0x35c <CAN_transmit_message+0x168>
 35a:	3b c0       	rjmp	.+118    	; 0x3d2 <CAN_transmit_message+0x1de>
 35c:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
 35e:	0f 2e       	mov	r0, r31
 360:	f7 e9       	ldi	r31, 0x97	; 151
 362:	cf 2e       	mov	r12, r31
 364:	f2 e0       	ldi	r31, 0x02	; 2
 366:	df 2e       	mov	r13, r31
 368:	f0 2d       	mov	r31, r0
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
		switch(buffer_number) {
 36a:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <buffer_number.2114>
 36e:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <buffer_number.2114+0x1>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	91 05       	cpc	r25, r1
 376:	c9 f0       	breq	.+50     	; 0x3aa <CAN_transmit_message+0x1b6>
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	f1 f0       	breq	.+60     	; 0x3ba <CAN_transmit_message+0x1c6>
 37e:	89 2b       	or	r24, r25
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
 380:	19 f5       	brne	.+70     	; 0x3c8 <CAN_transmit_message+0x1d4>
 382:	78 01       	movw	r14, r16
 384:	ec 0e       	add	r14, r28
 386:	f1 1c       	adc	r15, r1
 388:	f7 01       	movw	r30, r14
 38a:	80 81       	ld	r24, Z
 38c:	1f 92       	push	r1
 38e:	8f 93       	push	r24
 390:	df 92       	push	r13
 392:	cf 92       	push	r12
				CAN_controller_write(TXB0D0 + i, message->data[i]);
 394:	a3 d1       	rcall	.+838    	; 0x6dc <printf>
 396:	f7 01       	movw	r30, r14
 398:	60 81       	ld	r22, Z
 39a:	86 e3       	ldi	r24, 0x36	; 54
 39c:	8c 0f       	add	r24, r28
				break;
 39e:	9a d0       	rcall	.+308    	; 0x4d4 <CAN_controller_write>
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
 3a6:	0f 90       	pop	r0
 3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <CAN_transmit_message+0x1d4>
 3aa:	f8 01       	movw	r30, r16
 3ac:	ec 0f       	add	r30, r28
 3ae:	f1 1d       	adc	r31, r1
 3b0:	60 81       	ld	r22, Z
 3b2:	86 e4       	ldi	r24, 0x46	; 70
				break;
 3b4:	8c 0f       	add	r24, r28
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
 3b6:	8e d0       	rcall	.+284    	; 0x4d4 <CAN_controller_write>
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <CAN_transmit_message+0x1d4>
 3ba:	f8 01       	movw	r30, r16
 3bc:	ec 0f       	add	r30, r28
 3be:	f1 1d       	adc	r31, r1
 3c0:	60 81       	ld	r22, Z
 3c2:	86 e5       	ldi	r24, 0x56	; 86
 3c4:	8c 0f       	add	r24, r28
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
 3c6:	86 d0       	rcall	.+268    	; 0x4d4 <CAN_controller_write>
 3c8:	cf 5f       	subi	r28, 0xFF	; 255
 3ca:	f8 01       	movw	r30, r16
 3cc:	82 85       	ldd	r24, Z+10	; 0x0a
 3ce:	8c 13       	cpse	r24, r28
	

	
	//request_to_send

	CAN_controller_RTS(buffer_number);
 3d0:	cc cf       	rjmp	.-104    	; 0x36a <CAN_transmit_message+0x176>
 3d2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <buffer_number.2114>
 3d6:	a9 d0       	rcall	.+338    	; 0x52a <CAN_controller_RTS>
	
	//ERROR HANDLING?	
}
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	08 95       	ret

000003e8 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
 3e8:	cf 92       	push	r12
 3ea:	df 92       	push	r13
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
 3f8:	82 e6       	ldi	r24, 0x62	; 98
 3fa:	5b d0       	rcall	.+182    	; 0x4b2 <CAN_controller_read>
 3fc:	c8 2f       	mov	r28, r24
 3fe:	81 e6       	ldi	r24, 0x61	; 97
 400:	58 d0       	rcall	.+176    	; 0x4b2 <CAN_controller_read>
 402:	c2 95       	swap	r28
 404:	c6 95       	lsr	r28
 406:	c7 70       	andi	r28, 0x07	; 7
 408:	28 e0       	ldi	r18, 0x08	; 8
 40a:	82 9f       	mul	r24, r18
 40c:	c0 01       	movw	r24, r0
 40e:	11 24       	eor	r1, r1
 410:	8c 0f       	add	r24, r28
 412:	91 1d       	adc	r25, r1
 414:	f7 01       	movw	r30, r14
 416:	91 87       	std	Z+9, r25	; 0x09
 418:	80 87       	std	Z+8, r24	; 0x08
				
				printf("Whole id: %i\n\r", received_message->ID);
 41a:	80 85       	ldd	r24, Z+8	; 0x08
 41c:	91 85       	ldd	r25, Z+9	; 0x09
 41e:	9f 93       	push	r25
 420:	8f 93       	push	r24
 422:	8e ea       	ldi	r24, 0xAE	; 174
 424:	92 e0       	ldi	r25, 0x02	; 2
 426:	9f 93       	push	r25
 428:	8f 93       	push	r24
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
 42a:	58 d1       	rcall	.+688    	; 0x6dc <printf>
 42c:	85 e6       	ldi	r24, 0x65	; 101
 42e:	41 d0       	rcall	.+130    	; 0x4b2 <CAN_controller_read>
 430:	8f 70       	andi	r24, 0x0F	; 15
 432:	f7 01       	movw	r30, r14
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
 434:	82 87       	std	Z+10, r24	; 0x0a
 436:	85 e6       	ldi	r24, 0x65	; 101
 438:	3c d0       	rcall	.+120    	; 0x4b2 <CAN_controller_read>
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	1f 92       	push	r1
 43e:	8f 93       	push	r24
 440:	8d eb       	ldi	r24, 0xBD	; 189
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	9f 93       	push	r25
 446:	8f 93       	push	r24
 448:	49 d1       	rcall	.+658    	; 0x6dc <printf>
				for (uint8_t i = 0; i != received_message->data_length; i++) {
 44a:	f7 01       	movw	r30, r14
 44c:	82 85       	ldd	r24, Z+10	; 0x0a
 44e:	2d b7       	in	r18, 0x3d	; 61
 450:	3e b7       	in	r19, 0x3e	; 62
 452:	28 5f       	subi	r18, 0xF8	; 248
 454:	3f 4f       	sbci	r19, 0xFF	; 255
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	3e bf       	out	0x3e, r19	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	2d bf       	out	0x3d, r18	; 61
 460:	88 23       	and	r24, r24
 462:	f9 f0       	breq	.+62     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 464:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
					printf("data: %i\t", received_message->data[i]);
 466:	0f 2e       	mov	r0, r31
 468:	f4 ea       	ldi	r31, 0xA4	; 164
 46a:	cf 2e       	mov	r12, r31
 46c:	f2 e0       	ldi	r31, 0x02	; 2
 46e:	df 2e       	mov	r13, r31
				
				printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
 470:	f0 2d       	mov	r31, r0
 472:	0c 2f       	mov	r16, r28
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	86 e6       	ldi	r24, 0x66	; 102
 478:	8c 0f       	add	r24, r28
 47a:	1b d0       	rcall	.+54     	; 0x4b2 <CAN_controller_read>
 47c:	f7 01       	movw	r30, r14
 47e:	e0 0f       	add	r30, r16
 480:	f1 1f       	adc	r31, r17
					printf("data: %i\t", received_message->data[i]);
 482:	80 83       	st	Z, r24
 484:	80 81       	ld	r24, Z
 486:	1f 92       	push	r1
 488:	8f 93       	push	r24
 48a:	df 92       	push	r13
 48c:	cf 92       	push	r12
 48e:	26 d1       	rcall	.+588    	; 0x6dc <printf>
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
 490:	cf 5f       	subi	r28, 0xFF	; 255
 492:	f7 01       	movw	r30, r14
 494:	82 85       	ldd	r24, Z+10	; 0x0a
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	8c 13       	cpse	r24, r28
 4a0:	e8 cf       	rjmp	.-48     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
	}
	
	
	
	
}
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	08 95       	ret

000004b2 <CAN_controller_read>:
CAN_controller_reset() {
	SPI_setChipSelect(PB0, 0);
	printf("Before spi write");
	SPI_masterWrite(MCP_RESET);
	SPI_setChipSelect(PB0, 1);
}
 4b2:	cf 93       	push	r28
 4b4:	c8 2f       	mov	r28, r24
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	5e d0       	rcall	.+188    	; 0x578 <SPI_setChipSelect>
 4bc:	83 e0       	ldi	r24, 0x03	; 3
 4be:	51 d0       	rcall	.+162    	; 0x562 <SPI_masterWrite>
 4c0:	8c 2f       	mov	r24, r28
 4c2:	4f d0       	rcall	.+158    	; 0x562 <SPI_masterWrite>
 4c4:	53 d0       	rcall	.+166    	; 0x56c <SPI_masterRead>
 4c6:	c8 2f       	mov	r28, r24
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	55 d0       	rcall	.+170    	; 0x578 <SPI_setChipSelect>
 4ce:	8c 2f       	mov	r24, r28
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <CAN_controller_write>:
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	d8 2f       	mov	r29, r24
 4da:	c6 2f       	mov	r28, r22
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	4b d0       	rcall	.+150    	; 0x578 <SPI_setChipSelect>
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	3e d0       	rcall	.+124    	; 0x562 <SPI_masterWrite>
 4e6:	8d 2f       	mov	r24, r29
 4e8:	3c d0       	rcall	.+120    	; 0x562 <SPI_masterWrite>
 4ea:	8c 2f       	mov	r24, r28
 4ec:	3a d0       	rcall	.+116    	; 0x562 <SPI_masterWrite>
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	42 d0       	rcall	.+132    	; 0x578 <SPI_setChipSelect>
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <CAN_controller_bitModify>:
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	d8 2f       	mov	r29, r24
 502:	16 2f       	mov	r17, r22
 504:	c4 2f       	mov	r28, r20
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	36 d0       	rcall	.+108    	; 0x578 <SPI_setChipSelect>
 50c:	85 e0       	ldi	r24, 0x05	; 5
 50e:	29 d0       	rcall	.+82     	; 0x562 <SPI_masterWrite>
 510:	81 2f       	mov	r24, r17
 512:	27 d0       	rcall	.+78     	; 0x562 <SPI_masterWrite>
 514:	8d 2f       	mov	r24, r29
 516:	25 d0       	rcall	.+74     	; 0x562 <SPI_masterWrite>
 518:	8c 2f       	mov	r24, r28
 51a:	23 d0       	rcall	.+70     	; 0x562 <SPI_masterWrite>
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	2b d0       	rcall	.+86     	; 0x578 <SPI_setChipSelect>
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	08 95       	ret

0000052a <CAN_controller_RTS>:
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
 52a:	cf 93       	push	r28
 52c:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB0, 0);
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	22 d0       	rcall	.+68     	; 0x578 <SPI_setChipSelect>
	switch (buffer) {
 534:	c1 30       	cpi	r28, 0x01	; 1
 536:	39 f0       	breq	.+14     	; 0x546 <CAN_controller_RTS+0x1c>
 538:	18 f0       	brcs	.+6      	; 0x540 <CAN_controller_RTS+0x16>
 53a:	c2 30       	cpi	r28, 0x02	; 2
 53c:	39 f0       	breq	.+14     	; 0x54c <CAN_controller_RTS+0x22>
 53e:	08 c0       	rjmp	.+16     	; 0x550 <CAN_controller_RTS+0x26>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
 540:	81 e8       	ldi	r24, 0x81	; 129
 542:	0f d0       	rcall	.+30     	; 0x562 <SPI_masterWrite>
			break;
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
 544:	05 c0       	rjmp	.+10     	; 0x550 <CAN_controller_RTS+0x26>
 546:	82 e8       	ldi	r24, 0x82	; 130
			break;
 548:	0c d0       	rcall	.+24     	; 0x562 <SPI_masterWrite>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
 54a:	02 c0       	rjmp	.+4      	; 0x550 <CAN_controller_RTS+0x26>
 54c:	84 e8       	ldi	r24, 0x84	; 132
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB0, 1);
 54e:	09 d0       	rcall	.+18     	; 0x562 <SPI_masterWrite>
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	11 d0       	rcall	.+34     	; 0x578 <SPI_setChipSelect>
}
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <setupInit>:
#include "setup.h"
#include "timer.h"

	void setupInit(void){
	//cli();
	USART_init(MYUBRR);
 55a:	87 e6       	ldi	r24, 0x67	; 103
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	39 c0       	rjmp	.+114    	; 0x5d2 <USART_init>
 560:	08 95       	ret

00000562 <SPI_masterWrite>:
	SPCR = (1 << SPE);
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
 562:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 564:	0d b4       	in	r0, 0x2d	; 45
 566:	07 fe       	sbrs	r0, 7
 568:	fd cf       	rjmp	.-6      	; 0x564 <SPI_masterWrite+0x2>

}
 56a:	08 95       	ret

0000056c <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
 56c:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 56e:	0d b4       	in	r0, 0x2d	; 45
 570:	07 fe       	sbrs	r0, 7
 572:	fd cf       	rjmp	.-6      	; 0x56e <SPI_masterRead+0x2>
	return SPDR;
 574:	8e b5       	in	r24, 0x2e	; 46
}
 576:	08 95       	ret

00000578 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
 578:	66 23       	and	r22, r22
 57a:	69 f0       	breq	.+26     	; 0x596 <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
 57c:	45 b1       	in	r20, 0x05	; 5
 57e:	21 e0       	ldi	r18, 0x01	; 1
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	b9 01       	movw	r22, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <SPI_setChipSelect+0x12>
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	8a 95       	dec	r24
 58c:	e2 f7       	brpl	.-8      	; 0x586 <SPI_setChipSelect+0xe>
 58e:	cb 01       	movw	r24, r22
 590:	84 2b       	or	r24, r20
 592:	85 b9       	out	0x05, r24	; 5
 594:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
 596:	45 b1       	in	r20, 0x05	; 5
 598:	21 e0       	ldi	r18, 0x01	; 1
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	b9 01       	movw	r22, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <SPI_setChipSelect+0x2c>
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	8a 95       	dec	r24
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <SPI_setChipSelect+0x28>
 5a8:	cb 01       	movw	r24, r22
 5aa:	80 95       	com	r24
 5ac:	84 23       	and	r24, r20
 5ae:	85 b9       	out	0x05, r24	; 5
 5b0:	08 95       	ret

000005b2 <USART_transmitChar>:
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
 5b2:	e0 ec       	ldi	r30, 0xC0	; 192
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	90 81       	ld	r25, Z
 5b8:	95 ff       	sbrs	r25, 5
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <USART_transmitChar+0x4>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
 5bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 5c0:	08 95       	ret

000005c2 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
 5c2:	e0 ec       	ldi	r30, 0xC0	; 192
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	88 23       	and	r24, r24
 5ca:	ec f7       	brge	.-6      	; 0x5c6 <USART_receiveChar+0x4>
		;
	
	return UDR0;
 5cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 5d0:	08 95       	ret

000005d2 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
 5d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char) (ubrr);
 5d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
 5da:	88 e1       	ldi	r24, 0x18	; 24
 5dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	
	
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 5e0:	8e e0       	ldi	r24, 0x0E	; 14
 5e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
 5e6:	61 ee       	ldi	r22, 0xE1	; 225
 5e8:	72 e0       	ldi	r23, 0x02	; 2
 5ea:	89 ed       	ldi	r24, 0xD9	; 217
 5ec:	92 e0       	ldi	r25, 0x02	; 2
 5ee:	2c d0       	rcall	.+88     	; 0x648 <fdevopen>
 5f0:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <uart+0x1>
 5f4:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <uart>
 5f8:	08 95       	ret

000005fa <__divmodhi4>:
 5fa:	97 fb       	bst	r25, 7
 5fc:	07 2e       	mov	r0, r23
 5fe:	16 f4       	brtc	.+4      	; 0x604 <__divmodhi4+0xa>
 600:	00 94       	com	r0
 602:	06 d0       	rcall	.+12     	; 0x610 <__divmodhi4_neg1>
 604:	77 fd       	sbrc	r23, 7
 606:	08 d0       	rcall	.+16     	; 0x618 <__divmodhi4_neg2>
 608:	0b d0       	rcall	.+22     	; 0x620 <__udivmodhi4>
 60a:	07 fc       	sbrc	r0, 7
 60c:	05 d0       	rcall	.+10     	; 0x618 <__divmodhi4_neg2>
 60e:	3e f4       	brtc	.+14     	; 0x61e <__divmodhi4_exit>

00000610 <__divmodhi4_neg1>:
 610:	90 95       	com	r25
 612:	81 95       	neg	r24
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	08 95       	ret

00000618 <__divmodhi4_neg2>:
 618:	70 95       	com	r23
 61a:	61 95       	neg	r22
 61c:	7f 4f       	sbci	r23, 0xFF	; 255

0000061e <__divmodhi4_exit>:
 61e:	08 95       	ret

00000620 <__udivmodhi4>:
 620:	aa 1b       	sub	r26, r26
 622:	bb 1b       	sub	r27, r27
 624:	51 e1       	ldi	r21, 0x11	; 17
 626:	07 c0       	rjmp	.+14     	; 0x636 <__udivmodhi4_ep>

00000628 <__udivmodhi4_loop>:
 628:	aa 1f       	adc	r26, r26
 62a:	bb 1f       	adc	r27, r27
 62c:	a6 17       	cp	r26, r22
 62e:	b7 07       	cpc	r27, r23
 630:	10 f0       	brcs	.+4      	; 0x636 <__udivmodhi4_ep>
 632:	a6 1b       	sub	r26, r22
 634:	b7 0b       	sbc	r27, r23

00000636 <__udivmodhi4_ep>:
 636:	88 1f       	adc	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	5a 95       	dec	r21
 63c:	a9 f7       	brne	.-22     	; 0x628 <__udivmodhi4_loop>
 63e:	80 95       	com	r24
 640:	90 95       	com	r25
 642:	bc 01       	movw	r22, r24
 644:	cd 01       	movw	r24, r26
 646:	08 95       	ret

00000648 <fdevopen>:
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	00 97       	sbiw	r24, 0x00	; 0
 652:	31 f4       	brne	.+12     	; 0x660 <fdevopen+0x18>
 654:	61 15       	cp	r22, r1
 656:	71 05       	cpc	r23, r1
 658:	19 f4       	brne	.+6      	; 0x660 <fdevopen+0x18>
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	39 c0       	rjmp	.+114    	; 0x6d2 <fdevopen+0x8a>
 660:	8b 01       	movw	r16, r22
 662:	ec 01       	movw	r28, r24
 664:	6e e0       	ldi	r22, 0x0E	; 14
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	47 d2       	rcall	.+1166   	; 0xafc <calloc>
 66e:	fc 01       	movw	r30, r24
 670:	89 2b       	or	r24, r25
 672:	99 f3       	breq	.-26     	; 0x65a <fdevopen+0x12>
 674:	80 e8       	ldi	r24, 0x80	; 128
 676:	83 83       	std	Z+3, r24	; 0x03
 678:	01 15       	cp	r16, r1
 67a:	11 05       	cpc	r17, r1
 67c:	71 f0       	breq	.+28     	; 0x69a <fdevopen+0x52>
 67e:	13 87       	std	Z+11, r17	; 0x0b
 680:	02 87       	std	Z+10, r16	; 0x0a
 682:	81 e8       	ldi	r24, 0x81	; 129
 684:	83 83       	std	Z+3, r24	; 0x03
 686:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__iob>
 68a:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <__iob+0x1>
 68e:	89 2b       	or	r24, r25
 690:	21 f4       	brne	.+8      	; 0x69a <fdevopen+0x52>
 692:	f0 93 e5 02 	sts	0x02E5, r31	; 0x8002e5 <__iob+0x1>
 696:	e0 93 e4 02 	sts	0x02E4, r30	; 0x8002e4 <__iob>
 69a:	20 97       	sbiw	r28, 0x00	; 0
 69c:	c9 f0       	breq	.+50     	; 0x6d0 <fdevopen+0x88>
 69e:	d1 87       	std	Z+9, r29	; 0x09
 6a0:	c0 87       	std	Z+8, r28	; 0x08
 6a2:	83 81       	ldd	r24, Z+3	; 0x03
 6a4:	82 60       	ori	r24, 0x02	; 2
 6a6:	83 83       	std	Z+3, r24	; 0x03
 6a8:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__iob+0x2>
 6ac:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <__iob+0x3>
 6b0:	89 2b       	or	r24, r25
 6b2:	71 f4       	brne	.+28     	; 0x6d0 <fdevopen+0x88>
 6b4:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__iob+0x3>
 6b8:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__iob+0x2>
 6bc:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__iob+0x4>
 6c0:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <__iob+0x5>
 6c4:	89 2b       	or	r24, r25
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <fdevopen+0x88>
 6c8:	f0 93 e9 02 	sts	0x02E9, r31	; 0x8002e9 <__iob+0x5>
 6cc:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <__iob+0x4>
 6d0:	cf 01       	movw	r24, r30
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	08 95       	ret

000006dc <printf>:
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	ae 01       	movw	r20, r28
 6e6:	4a 5f       	subi	r20, 0xFA	; 250
 6e8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ea:	fa 01       	movw	r30, r20
 6ec:	61 91       	ld	r22, Z+
 6ee:	71 91       	ld	r23, Z+
 6f0:	af 01       	movw	r20, r30
 6f2:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__iob+0x2>
 6f6:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <__iob+0x3>
 6fa:	03 d0       	rcall	.+6      	; 0x702 <vfprintf>
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <vfprintf>:
 702:	2f 92       	push	r2
 704:	3f 92       	push	r3
 706:	4f 92       	push	r4
 708:	5f 92       	push	r5
 70a:	6f 92       	push	r6
 70c:	7f 92       	push	r7
 70e:	8f 92       	push	r8
 710:	9f 92       	push	r9
 712:	af 92       	push	r10
 714:	bf 92       	push	r11
 716:	cf 92       	push	r12
 718:	df 92       	push	r13
 71a:	ef 92       	push	r14
 71c:	ff 92       	push	r15
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	2b 97       	sbiw	r28, 0x0b	; 11
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	6c 01       	movw	r12, r24
 738:	7b 01       	movw	r14, r22
 73a:	8a 01       	movw	r16, r20
 73c:	fc 01       	movw	r30, r24
 73e:	17 82       	std	Z+7, r1	; 0x07
 740:	16 82       	std	Z+6, r1	; 0x06
 742:	83 81       	ldd	r24, Z+3	; 0x03
 744:	81 ff       	sbrs	r24, 1
 746:	bf c1       	rjmp	.+894    	; 0xac6 <vfprintf+0x3c4>
 748:	ce 01       	movw	r24, r28
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	3c 01       	movw	r6, r24
 74e:	f6 01       	movw	r30, r12
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	f7 01       	movw	r30, r14
 754:	93 fd       	sbrc	r25, 3
 756:	85 91       	lpm	r24, Z+
 758:	93 ff       	sbrs	r25, 3
 75a:	81 91       	ld	r24, Z+
 75c:	7f 01       	movw	r14, r30
 75e:	88 23       	and	r24, r24
 760:	09 f4       	brne	.+2      	; 0x764 <vfprintf+0x62>
 762:	ad c1       	rjmp	.+858    	; 0xabe <vfprintf+0x3bc>
 764:	85 32       	cpi	r24, 0x25	; 37
 766:	39 f4       	brne	.+14     	; 0x776 <vfprintf+0x74>
 768:	93 fd       	sbrc	r25, 3
 76a:	85 91       	lpm	r24, Z+
 76c:	93 ff       	sbrs	r25, 3
 76e:	81 91       	ld	r24, Z+
 770:	7f 01       	movw	r14, r30
 772:	85 32       	cpi	r24, 0x25	; 37
 774:	21 f4       	brne	.+8      	; 0x77e <vfprintf+0x7c>
 776:	b6 01       	movw	r22, r12
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	18 d3       	rcall	.+1584   	; 0xdac <fputc>
 77c:	e8 cf       	rjmp	.-48     	; 0x74e <vfprintf+0x4c>
 77e:	91 2c       	mov	r9, r1
 780:	21 2c       	mov	r2, r1
 782:	31 2c       	mov	r3, r1
 784:	ff e1       	ldi	r31, 0x1F	; 31
 786:	f3 15       	cp	r31, r3
 788:	d8 f0       	brcs	.+54     	; 0x7c0 <vfprintf+0xbe>
 78a:	8b 32       	cpi	r24, 0x2B	; 43
 78c:	79 f0       	breq	.+30     	; 0x7ac <vfprintf+0xaa>
 78e:	38 f4       	brcc	.+14     	; 0x79e <vfprintf+0x9c>
 790:	80 32       	cpi	r24, 0x20	; 32
 792:	79 f0       	breq	.+30     	; 0x7b2 <vfprintf+0xb0>
 794:	83 32       	cpi	r24, 0x23	; 35
 796:	a1 f4       	brne	.+40     	; 0x7c0 <vfprintf+0xbe>
 798:	23 2d       	mov	r18, r3
 79a:	20 61       	ori	r18, 0x10	; 16
 79c:	1d c0       	rjmp	.+58     	; 0x7d8 <vfprintf+0xd6>
 79e:	8d 32       	cpi	r24, 0x2D	; 45
 7a0:	61 f0       	breq	.+24     	; 0x7ba <vfprintf+0xb8>
 7a2:	80 33       	cpi	r24, 0x30	; 48
 7a4:	69 f4       	brne	.+26     	; 0x7c0 <vfprintf+0xbe>
 7a6:	23 2d       	mov	r18, r3
 7a8:	21 60       	ori	r18, 0x01	; 1
 7aa:	16 c0       	rjmp	.+44     	; 0x7d8 <vfprintf+0xd6>
 7ac:	83 2d       	mov	r24, r3
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	38 2e       	mov	r3, r24
 7b2:	e3 2d       	mov	r30, r3
 7b4:	e4 60       	ori	r30, 0x04	; 4
 7b6:	3e 2e       	mov	r3, r30
 7b8:	2a c0       	rjmp	.+84     	; 0x80e <vfprintf+0x10c>
 7ba:	f3 2d       	mov	r31, r3
 7bc:	f8 60       	ori	r31, 0x08	; 8
 7be:	1d c0       	rjmp	.+58     	; 0x7fa <vfprintf+0xf8>
 7c0:	37 fc       	sbrc	r3, 7
 7c2:	2d c0       	rjmp	.+90     	; 0x81e <vfprintf+0x11c>
 7c4:	20 ed       	ldi	r18, 0xD0	; 208
 7c6:	28 0f       	add	r18, r24
 7c8:	2a 30       	cpi	r18, 0x0A	; 10
 7ca:	40 f0       	brcs	.+16     	; 0x7dc <vfprintf+0xda>
 7cc:	8e 32       	cpi	r24, 0x2E	; 46
 7ce:	b9 f4       	brne	.+46     	; 0x7fe <vfprintf+0xfc>
 7d0:	36 fc       	sbrc	r3, 6
 7d2:	75 c1       	rjmp	.+746    	; 0xabe <vfprintf+0x3bc>
 7d4:	23 2d       	mov	r18, r3
 7d6:	20 64       	ori	r18, 0x40	; 64
 7d8:	32 2e       	mov	r3, r18
 7da:	19 c0       	rjmp	.+50     	; 0x80e <vfprintf+0x10c>
 7dc:	36 fe       	sbrs	r3, 6
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0xea>
 7e0:	8a e0       	ldi	r24, 0x0A	; 10
 7e2:	98 9e       	mul	r9, r24
 7e4:	20 0d       	add	r18, r0
 7e6:	11 24       	eor	r1, r1
 7e8:	92 2e       	mov	r9, r18
 7ea:	11 c0       	rjmp	.+34     	; 0x80e <vfprintf+0x10c>
 7ec:	ea e0       	ldi	r30, 0x0A	; 10
 7ee:	2e 9e       	mul	r2, r30
 7f0:	20 0d       	add	r18, r0
 7f2:	11 24       	eor	r1, r1
 7f4:	22 2e       	mov	r2, r18
 7f6:	f3 2d       	mov	r31, r3
 7f8:	f0 62       	ori	r31, 0x20	; 32
 7fa:	3f 2e       	mov	r3, r31
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <vfprintf+0x10c>
 7fe:	8c 36       	cpi	r24, 0x6C	; 108
 800:	21 f4       	brne	.+8      	; 0x80a <vfprintf+0x108>
 802:	83 2d       	mov	r24, r3
 804:	80 68       	ori	r24, 0x80	; 128
 806:	38 2e       	mov	r3, r24
 808:	02 c0       	rjmp	.+4      	; 0x80e <vfprintf+0x10c>
 80a:	88 36       	cpi	r24, 0x68	; 104
 80c:	41 f4       	brne	.+16     	; 0x81e <vfprintf+0x11c>
 80e:	f7 01       	movw	r30, r14
 810:	93 fd       	sbrc	r25, 3
 812:	85 91       	lpm	r24, Z+
 814:	93 ff       	sbrs	r25, 3
 816:	81 91       	ld	r24, Z+
 818:	7f 01       	movw	r14, r30
 81a:	81 11       	cpse	r24, r1
 81c:	b3 cf       	rjmp	.-154    	; 0x784 <vfprintf+0x82>
 81e:	98 2f       	mov	r25, r24
 820:	9f 7d       	andi	r25, 0xDF	; 223
 822:	95 54       	subi	r25, 0x45	; 69
 824:	93 30       	cpi	r25, 0x03	; 3
 826:	28 f4       	brcc	.+10     	; 0x832 <vfprintf+0x130>
 828:	0c 5f       	subi	r16, 0xFC	; 252
 82a:	1f 4f       	sbci	r17, 0xFF	; 255
 82c:	9f e3       	ldi	r25, 0x3F	; 63
 82e:	99 83       	std	Y+1, r25	; 0x01
 830:	0d c0       	rjmp	.+26     	; 0x84c <vfprintf+0x14a>
 832:	83 36       	cpi	r24, 0x63	; 99
 834:	31 f0       	breq	.+12     	; 0x842 <vfprintf+0x140>
 836:	83 37       	cpi	r24, 0x73	; 115
 838:	71 f0       	breq	.+28     	; 0x856 <vfprintf+0x154>
 83a:	83 35       	cpi	r24, 0x53	; 83
 83c:	09 f0       	breq	.+2      	; 0x840 <vfprintf+0x13e>
 83e:	55 c0       	rjmp	.+170    	; 0x8ea <vfprintf+0x1e8>
 840:	20 c0       	rjmp	.+64     	; 0x882 <vfprintf+0x180>
 842:	f8 01       	movw	r30, r16
 844:	80 81       	ld	r24, Z
 846:	89 83       	std	Y+1, r24	; 0x01
 848:	0e 5f       	subi	r16, 0xFE	; 254
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	88 24       	eor	r8, r8
 84e:	83 94       	inc	r8
 850:	91 2c       	mov	r9, r1
 852:	53 01       	movw	r10, r6
 854:	12 c0       	rjmp	.+36     	; 0x87a <vfprintf+0x178>
 856:	28 01       	movw	r4, r16
 858:	f2 e0       	ldi	r31, 0x02	; 2
 85a:	4f 0e       	add	r4, r31
 85c:	51 1c       	adc	r5, r1
 85e:	f8 01       	movw	r30, r16
 860:	a0 80       	ld	r10, Z
 862:	b1 80       	ldd	r11, Z+1	; 0x01
 864:	36 fe       	sbrs	r3, 6
 866:	03 c0       	rjmp	.+6      	; 0x86e <vfprintf+0x16c>
 868:	69 2d       	mov	r22, r9
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <vfprintf+0x170>
 86e:	6f ef       	ldi	r22, 0xFF	; 255
 870:	7f ef       	ldi	r23, 0xFF	; 255
 872:	c5 01       	movw	r24, r10
 874:	90 d2       	rcall	.+1312   	; 0xd96 <strnlen>
 876:	4c 01       	movw	r8, r24
 878:	82 01       	movw	r16, r4
 87a:	f3 2d       	mov	r31, r3
 87c:	ff 77       	andi	r31, 0x7F	; 127
 87e:	3f 2e       	mov	r3, r31
 880:	15 c0       	rjmp	.+42     	; 0x8ac <vfprintf+0x1aa>
 882:	28 01       	movw	r4, r16
 884:	22 e0       	ldi	r18, 0x02	; 2
 886:	42 0e       	add	r4, r18
 888:	51 1c       	adc	r5, r1
 88a:	f8 01       	movw	r30, r16
 88c:	a0 80       	ld	r10, Z
 88e:	b1 80       	ldd	r11, Z+1	; 0x01
 890:	36 fe       	sbrs	r3, 6
 892:	03 c0       	rjmp	.+6      	; 0x89a <vfprintf+0x198>
 894:	69 2d       	mov	r22, r9
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <vfprintf+0x19c>
 89a:	6f ef       	ldi	r22, 0xFF	; 255
 89c:	7f ef       	ldi	r23, 0xFF	; 255
 89e:	c5 01       	movw	r24, r10
 8a0:	68 d2       	rcall	.+1232   	; 0xd72 <strnlen_P>
 8a2:	4c 01       	movw	r8, r24
 8a4:	f3 2d       	mov	r31, r3
 8a6:	f0 68       	ori	r31, 0x80	; 128
 8a8:	3f 2e       	mov	r3, r31
 8aa:	82 01       	movw	r16, r4
 8ac:	33 fc       	sbrc	r3, 3
 8ae:	19 c0       	rjmp	.+50     	; 0x8e2 <vfprintf+0x1e0>
 8b0:	82 2d       	mov	r24, r2
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	88 16       	cp	r8, r24
 8b6:	99 06       	cpc	r9, r25
 8b8:	a0 f4       	brcc	.+40     	; 0x8e2 <vfprintf+0x1e0>
 8ba:	b6 01       	movw	r22, r12
 8bc:	80 e2       	ldi	r24, 0x20	; 32
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	75 d2       	rcall	.+1258   	; 0xdac <fputc>
 8c2:	2a 94       	dec	r2
 8c4:	f5 cf       	rjmp	.-22     	; 0x8b0 <vfprintf+0x1ae>
 8c6:	f5 01       	movw	r30, r10
 8c8:	37 fc       	sbrc	r3, 7
 8ca:	85 91       	lpm	r24, Z+
 8cc:	37 fe       	sbrs	r3, 7
 8ce:	81 91       	ld	r24, Z+
 8d0:	5f 01       	movw	r10, r30
 8d2:	b6 01       	movw	r22, r12
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	6a d2       	rcall	.+1236   	; 0xdac <fputc>
 8d8:	21 10       	cpse	r2, r1
 8da:	2a 94       	dec	r2
 8dc:	21 e0       	ldi	r18, 0x01	; 1
 8de:	82 1a       	sub	r8, r18
 8e0:	91 08       	sbc	r9, r1
 8e2:	81 14       	cp	r8, r1
 8e4:	91 04       	cpc	r9, r1
 8e6:	79 f7       	brne	.-34     	; 0x8c6 <vfprintf+0x1c4>
 8e8:	e1 c0       	rjmp	.+450    	; 0xaac <vfprintf+0x3aa>
 8ea:	84 36       	cpi	r24, 0x64	; 100
 8ec:	11 f0       	breq	.+4      	; 0x8f2 <vfprintf+0x1f0>
 8ee:	89 36       	cpi	r24, 0x69	; 105
 8f0:	39 f5       	brne	.+78     	; 0x940 <vfprintf+0x23e>
 8f2:	f8 01       	movw	r30, r16
 8f4:	37 fe       	sbrs	r3, 7
 8f6:	07 c0       	rjmp	.+14     	; 0x906 <vfprintf+0x204>
 8f8:	60 81       	ld	r22, Z
 8fa:	71 81       	ldd	r23, Z+1	; 0x01
 8fc:	82 81       	ldd	r24, Z+2	; 0x02
 8fe:	93 81       	ldd	r25, Z+3	; 0x03
 900:	0c 5f       	subi	r16, 0xFC	; 252
 902:	1f 4f       	sbci	r17, 0xFF	; 255
 904:	08 c0       	rjmp	.+16     	; 0x916 <vfprintf+0x214>
 906:	60 81       	ld	r22, Z
 908:	71 81       	ldd	r23, Z+1	; 0x01
 90a:	07 2e       	mov	r0, r23
 90c:	00 0c       	add	r0, r0
 90e:	88 0b       	sbc	r24, r24
 910:	99 0b       	sbc	r25, r25
 912:	0e 5f       	subi	r16, 0xFE	; 254
 914:	1f 4f       	sbci	r17, 0xFF	; 255
 916:	f3 2d       	mov	r31, r3
 918:	ff 76       	andi	r31, 0x6F	; 111
 91a:	3f 2e       	mov	r3, r31
 91c:	97 ff       	sbrs	r25, 7
 91e:	09 c0       	rjmp	.+18     	; 0x932 <vfprintf+0x230>
 920:	90 95       	com	r25
 922:	80 95       	com	r24
 924:	70 95       	com	r23
 926:	61 95       	neg	r22
 928:	7f 4f       	sbci	r23, 0xFF	; 255
 92a:	8f 4f       	sbci	r24, 0xFF	; 255
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	f0 68       	ori	r31, 0x80	; 128
 930:	3f 2e       	mov	r3, r31
 932:	2a e0       	ldi	r18, 0x0A	; 10
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	a3 01       	movw	r20, r6
 938:	75 d2       	rcall	.+1258   	; 0xe24 <__ultoa_invert>
 93a:	88 2e       	mov	r8, r24
 93c:	86 18       	sub	r8, r6
 93e:	44 c0       	rjmp	.+136    	; 0x9c8 <vfprintf+0x2c6>
 940:	85 37       	cpi	r24, 0x75	; 117
 942:	31 f4       	brne	.+12     	; 0x950 <vfprintf+0x24e>
 944:	23 2d       	mov	r18, r3
 946:	2f 7e       	andi	r18, 0xEF	; 239
 948:	b2 2e       	mov	r11, r18
 94a:	2a e0       	ldi	r18, 0x0A	; 10
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	25 c0       	rjmp	.+74     	; 0x99a <vfprintf+0x298>
 950:	93 2d       	mov	r25, r3
 952:	99 7f       	andi	r25, 0xF9	; 249
 954:	b9 2e       	mov	r11, r25
 956:	8f 36       	cpi	r24, 0x6F	; 111
 958:	c1 f0       	breq	.+48     	; 0x98a <vfprintf+0x288>
 95a:	18 f4       	brcc	.+6      	; 0x962 <vfprintf+0x260>
 95c:	88 35       	cpi	r24, 0x58	; 88
 95e:	79 f0       	breq	.+30     	; 0x97e <vfprintf+0x27c>
 960:	ae c0       	rjmp	.+348    	; 0xabe <vfprintf+0x3bc>
 962:	80 37       	cpi	r24, 0x70	; 112
 964:	19 f0       	breq	.+6      	; 0x96c <vfprintf+0x26a>
 966:	88 37       	cpi	r24, 0x78	; 120
 968:	21 f0       	breq	.+8      	; 0x972 <vfprintf+0x270>
 96a:	a9 c0       	rjmp	.+338    	; 0xabe <vfprintf+0x3bc>
 96c:	e9 2f       	mov	r30, r25
 96e:	e0 61       	ori	r30, 0x10	; 16
 970:	be 2e       	mov	r11, r30
 972:	b4 fe       	sbrs	r11, 4
 974:	0d c0       	rjmp	.+26     	; 0x990 <vfprintf+0x28e>
 976:	fb 2d       	mov	r31, r11
 978:	f4 60       	ori	r31, 0x04	; 4
 97a:	bf 2e       	mov	r11, r31
 97c:	09 c0       	rjmp	.+18     	; 0x990 <vfprintf+0x28e>
 97e:	34 fe       	sbrs	r3, 4
 980:	0a c0       	rjmp	.+20     	; 0x996 <vfprintf+0x294>
 982:	29 2f       	mov	r18, r25
 984:	26 60       	ori	r18, 0x06	; 6
 986:	b2 2e       	mov	r11, r18
 988:	06 c0       	rjmp	.+12     	; 0x996 <vfprintf+0x294>
 98a:	28 e0       	ldi	r18, 0x08	; 8
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	05 c0       	rjmp	.+10     	; 0x99a <vfprintf+0x298>
 990:	20 e1       	ldi	r18, 0x10	; 16
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	02 c0       	rjmp	.+4      	; 0x99a <vfprintf+0x298>
 996:	20 e1       	ldi	r18, 0x10	; 16
 998:	32 e0       	ldi	r19, 0x02	; 2
 99a:	f8 01       	movw	r30, r16
 99c:	b7 fe       	sbrs	r11, 7
 99e:	07 c0       	rjmp	.+14     	; 0x9ae <vfprintf+0x2ac>
 9a0:	60 81       	ld	r22, Z
 9a2:	71 81       	ldd	r23, Z+1	; 0x01
 9a4:	82 81       	ldd	r24, Z+2	; 0x02
 9a6:	93 81       	ldd	r25, Z+3	; 0x03
 9a8:	0c 5f       	subi	r16, 0xFC	; 252
 9aa:	1f 4f       	sbci	r17, 0xFF	; 255
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <vfprintf+0x2b8>
 9ae:	60 81       	ld	r22, Z
 9b0:	71 81       	ldd	r23, Z+1	; 0x01
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 5f       	subi	r16, 0xFE	; 254
 9b8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ba:	a3 01       	movw	r20, r6
 9bc:	33 d2       	rcall	.+1126   	; 0xe24 <__ultoa_invert>
 9be:	88 2e       	mov	r8, r24
 9c0:	86 18       	sub	r8, r6
 9c2:	fb 2d       	mov	r31, r11
 9c4:	ff 77       	andi	r31, 0x7F	; 127
 9c6:	3f 2e       	mov	r3, r31
 9c8:	36 fe       	sbrs	r3, 6
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <vfprintf+0x2e4>
 9cc:	23 2d       	mov	r18, r3
 9ce:	2e 7f       	andi	r18, 0xFE	; 254
 9d0:	a2 2e       	mov	r10, r18
 9d2:	89 14       	cp	r8, r9
 9d4:	58 f4       	brcc	.+22     	; 0x9ec <vfprintf+0x2ea>
 9d6:	34 fe       	sbrs	r3, 4
 9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <vfprintf+0x2ee>
 9da:	32 fc       	sbrc	r3, 2
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <vfprintf+0x2ee>
 9de:	83 2d       	mov	r24, r3
 9e0:	8e 7e       	andi	r24, 0xEE	; 238
 9e2:	a8 2e       	mov	r10, r24
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <vfprintf+0x2ee>
 9e6:	b8 2c       	mov	r11, r8
 9e8:	a3 2c       	mov	r10, r3
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <vfprintf+0x2f0>
 9ec:	b8 2c       	mov	r11, r8
 9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <vfprintf+0x2f0>
 9f0:	b9 2c       	mov	r11, r9
 9f2:	a4 fe       	sbrs	r10, 4
 9f4:	0f c0       	rjmp	.+30     	; 0xa14 <vfprintf+0x312>
 9f6:	fe 01       	movw	r30, r28
 9f8:	e8 0d       	add	r30, r8
 9fa:	f1 1d       	adc	r31, r1
 9fc:	80 81       	ld	r24, Z
 9fe:	80 33       	cpi	r24, 0x30	; 48
 a00:	21 f4       	brne	.+8      	; 0xa0a <vfprintf+0x308>
 a02:	9a 2d       	mov	r25, r10
 a04:	99 7e       	andi	r25, 0xE9	; 233
 a06:	a9 2e       	mov	r10, r25
 a08:	09 c0       	rjmp	.+18     	; 0xa1c <vfprintf+0x31a>
 a0a:	a2 fe       	sbrs	r10, 2
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <vfprintf+0x318>
 a0e:	b3 94       	inc	r11
 a10:	b3 94       	inc	r11
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <vfprintf+0x31a>
 a14:	8a 2d       	mov	r24, r10
 a16:	86 78       	andi	r24, 0x86	; 134
 a18:	09 f0       	breq	.+2      	; 0xa1c <vfprintf+0x31a>
 a1a:	b3 94       	inc	r11
 a1c:	a3 fc       	sbrc	r10, 3
 a1e:	10 c0       	rjmp	.+32     	; 0xa40 <vfprintf+0x33e>
 a20:	a0 fe       	sbrs	r10, 0
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <vfprintf+0x32e>
 a24:	b2 14       	cp	r11, r2
 a26:	80 f4       	brcc	.+32     	; 0xa48 <vfprintf+0x346>
 a28:	28 0c       	add	r2, r8
 a2a:	92 2c       	mov	r9, r2
 a2c:	9b 18       	sub	r9, r11
 a2e:	0d c0       	rjmp	.+26     	; 0xa4a <vfprintf+0x348>
 a30:	b2 14       	cp	r11, r2
 a32:	58 f4       	brcc	.+22     	; 0xa4a <vfprintf+0x348>
 a34:	b6 01       	movw	r22, r12
 a36:	80 e2       	ldi	r24, 0x20	; 32
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	b8 d1       	rcall	.+880    	; 0xdac <fputc>
 a3c:	b3 94       	inc	r11
 a3e:	f8 cf       	rjmp	.-16     	; 0xa30 <vfprintf+0x32e>
 a40:	b2 14       	cp	r11, r2
 a42:	18 f4       	brcc	.+6      	; 0xa4a <vfprintf+0x348>
 a44:	2b 18       	sub	r2, r11
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <vfprintf+0x34a>
 a48:	98 2c       	mov	r9, r8
 a4a:	21 2c       	mov	r2, r1
 a4c:	a4 fe       	sbrs	r10, 4
 a4e:	0f c0       	rjmp	.+30     	; 0xa6e <vfprintf+0x36c>
 a50:	b6 01       	movw	r22, r12
 a52:	80 e3       	ldi	r24, 0x30	; 48
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	aa d1       	rcall	.+852    	; 0xdac <fputc>
 a58:	a2 fe       	sbrs	r10, 2
 a5a:	16 c0       	rjmp	.+44     	; 0xa88 <vfprintf+0x386>
 a5c:	a1 fc       	sbrc	r10, 1
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <vfprintf+0x364>
 a60:	88 e7       	ldi	r24, 0x78	; 120
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <vfprintf+0x368>
 a66:	88 e5       	ldi	r24, 0x58	; 88
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	b6 01       	movw	r22, r12
 a6c:	0c c0       	rjmp	.+24     	; 0xa86 <vfprintf+0x384>
 a6e:	8a 2d       	mov	r24, r10
 a70:	86 78       	andi	r24, 0x86	; 134
 a72:	51 f0       	breq	.+20     	; 0xa88 <vfprintf+0x386>
 a74:	a1 fe       	sbrs	r10, 1
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <vfprintf+0x37a>
 a78:	8b e2       	ldi	r24, 0x2B	; 43
 a7a:	01 c0       	rjmp	.+2      	; 0xa7e <vfprintf+0x37c>
 a7c:	80 e2       	ldi	r24, 0x20	; 32
 a7e:	a7 fc       	sbrc	r10, 7
 a80:	8d e2       	ldi	r24, 0x2D	; 45
 a82:	b6 01       	movw	r22, r12
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	92 d1       	rcall	.+804    	; 0xdac <fputc>
 a88:	89 14       	cp	r8, r9
 a8a:	30 f4       	brcc	.+12     	; 0xa98 <vfprintf+0x396>
 a8c:	b6 01       	movw	r22, r12
 a8e:	80 e3       	ldi	r24, 0x30	; 48
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	8c d1       	rcall	.+792    	; 0xdac <fputc>
 a94:	9a 94       	dec	r9
 a96:	f8 cf       	rjmp	.-16     	; 0xa88 <vfprintf+0x386>
 a98:	8a 94       	dec	r8
 a9a:	f3 01       	movw	r30, r6
 a9c:	e8 0d       	add	r30, r8
 a9e:	f1 1d       	adc	r31, r1
 aa0:	80 81       	ld	r24, Z
 aa2:	b6 01       	movw	r22, r12
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	82 d1       	rcall	.+772    	; 0xdac <fputc>
 aa8:	81 10       	cpse	r8, r1
 aaa:	f6 cf       	rjmp	.-20     	; 0xa98 <vfprintf+0x396>
 aac:	22 20       	and	r2, r2
 aae:	09 f4       	brne	.+2      	; 0xab2 <vfprintf+0x3b0>
 ab0:	4e ce       	rjmp	.-868    	; 0x74e <vfprintf+0x4c>
 ab2:	b6 01       	movw	r22, r12
 ab4:	80 e2       	ldi	r24, 0x20	; 32
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	79 d1       	rcall	.+754    	; 0xdac <fputc>
 aba:	2a 94       	dec	r2
 abc:	f7 cf       	rjmp	.-18     	; 0xaac <vfprintf+0x3aa>
 abe:	f6 01       	movw	r30, r12
 ac0:	86 81       	ldd	r24, Z+6	; 0x06
 ac2:	97 81       	ldd	r25, Z+7	; 0x07
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <vfprintf+0x3c8>
 ac6:	8f ef       	ldi	r24, 0xFF	; 255
 ac8:	9f ef       	ldi	r25, 0xFF	; 255
 aca:	2b 96       	adiw	r28, 0x0b	; 11
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	f8 94       	cli
 ad0:	de bf       	out	0x3e, r29	; 62
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	cd bf       	out	0x3d, r28	; 61
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	ff 90       	pop	r15
 ae0:	ef 90       	pop	r14
 ae2:	df 90       	pop	r13
 ae4:	cf 90       	pop	r12
 ae6:	bf 90       	pop	r11
 ae8:	af 90       	pop	r10
 aea:	9f 90       	pop	r9
 aec:	8f 90       	pop	r8
 aee:	7f 90       	pop	r7
 af0:	6f 90       	pop	r6
 af2:	5f 90       	pop	r5
 af4:	4f 90       	pop	r4
 af6:	3f 90       	pop	r3
 af8:	2f 90       	pop	r2
 afa:	08 95       	ret

00000afc <calloc>:
 afc:	0f 93       	push	r16
 afe:	1f 93       	push	r17
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
 b04:	86 9f       	mul	r24, r22
 b06:	80 01       	movw	r16, r0
 b08:	87 9f       	mul	r24, r23
 b0a:	10 0d       	add	r17, r0
 b0c:	96 9f       	mul	r25, r22
 b0e:	10 0d       	add	r17, r0
 b10:	11 24       	eor	r1, r1
 b12:	c8 01       	movw	r24, r16
 b14:	0d d0       	rcall	.+26     	; 0xb30 <malloc>
 b16:	ec 01       	movw	r28, r24
 b18:	00 97       	sbiw	r24, 0x00	; 0
 b1a:	21 f0       	breq	.+8      	; 0xb24 <calloc+0x28>
 b1c:	a8 01       	movw	r20, r16
 b1e:	60 e0       	ldi	r22, 0x00	; 0
 b20:	70 e0       	ldi	r23, 0x00	; 0
 b22:	32 d1       	rcall	.+612    	; 0xd88 <memset>
 b24:	ce 01       	movw	r24, r28
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	08 95       	ret

00000b30 <malloc>:
 b30:	0f 93       	push	r16
 b32:	1f 93       	push	r17
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	82 30       	cpi	r24, 0x02	; 2
 b3a:	91 05       	cpc	r25, r1
 b3c:	10 f4       	brcc	.+4      	; 0xb42 <malloc+0x12>
 b3e:	82 e0       	ldi	r24, 0x02	; 2
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <__flp>
 b46:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <__flp+0x1>
 b4a:	20 e0       	ldi	r18, 0x00	; 0
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	a0 e0       	ldi	r26, 0x00	; 0
 b50:	b0 e0       	ldi	r27, 0x00	; 0
 b52:	30 97       	sbiw	r30, 0x00	; 0
 b54:	19 f1       	breq	.+70     	; 0xb9c <malloc+0x6c>
 b56:	40 81       	ld	r20, Z
 b58:	51 81       	ldd	r21, Z+1	; 0x01
 b5a:	02 81       	ldd	r16, Z+2	; 0x02
 b5c:	13 81       	ldd	r17, Z+3	; 0x03
 b5e:	48 17       	cp	r20, r24
 b60:	59 07       	cpc	r21, r25
 b62:	c8 f0       	brcs	.+50     	; 0xb96 <malloc+0x66>
 b64:	84 17       	cp	r24, r20
 b66:	95 07       	cpc	r25, r21
 b68:	69 f4       	brne	.+26     	; 0xb84 <malloc+0x54>
 b6a:	10 97       	sbiw	r26, 0x00	; 0
 b6c:	31 f0       	breq	.+12     	; 0xb7a <malloc+0x4a>
 b6e:	12 96       	adiw	r26, 0x02	; 2
 b70:	0c 93       	st	X, r16
 b72:	12 97       	sbiw	r26, 0x02	; 2
 b74:	13 96       	adiw	r26, 0x03	; 3
 b76:	1c 93       	st	X, r17
 b78:	27 c0       	rjmp	.+78     	; 0xbc8 <malloc+0x98>
 b7a:	00 93 ec 02 	sts	0x02EC, r16	; 0x8002ec <__flp>
 b7e:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <__flp+0x1>
 b82:	22 c0       	rjmp	.+68     	; 0xbc8 <malloc+0x98>
 b84:	21 15       	cp	r18, r1
 b86:	31 05       	cpc	r19, r1
 b88:	19 f0       	breq	.+6      	; 0xb90 <malloc+0x60>
 b8a:	42 17       	cp	r20, r18
 b8c:	53 07       	cpc	r21, r19
 b8e:	18 f4       	brcc	.+6      	; 0xb96 <malloc+0x66>
 b90:	9a 01       	movw	r18, r20
 b92:	bd 01       	movw	r22, r26
 b94:	ef 01       	movw	r28, r30
 b96:	df 01       	movw	r26, r30
 b98:	f8 01       	movw	r30, r16
 b9a:	db cf       	rjmp	.-74     	; 0xb52 <malloc+0x22>
 b9c:	21 15       	cp	r18, r1
 b9e:	31 05       	cpc	r19, r1
 ba0:	f9 f0       	breq	.+62     	; 0xbe0 <malloc+0xb0>
 ba2:	28 1b       	sub	r18, r24
 ba4:	39 0b       	sbc	r19, r25
 ba6:	24 30       	cpi	r18, 0x04	; 4
 ba8:	31 05       	cpc	r19, r1
 baa:	80 f4       	brcc	.+32     	; 0xbcc <malloc+0x9c>
 bac:	8a 81       	ldd	r24, Y+2	; 0x02
 bae:	9b 81       	ldd	r25, Y+3	; 0x03
 bb0:	61 15       	cp	r22, r1
 bb2:	71 05       	cpc	r23, r1
 bb4:	21 f0       	breq	.+8      	; 0xbbe <malloc+0x8e>
 bb6:	fb 01       	movw	r30, r22
 bb8:	93 83       	std	Z+3, r25	; 0x03
 bba:	82 83       	std	Z+2, r24	; 0x02
 bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <malloc+0x96>
 bbe:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <__flp+0x1>
 bc2:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <__flp>
 bc6:	fe 01       	movw	r30, r28
 bc8:	32 96       	adiw	r30, 0x02	; 2
 bca:	44 c0       	rjmp	.+136    	; 0xc54 <malloc+0x124>
 bcc:	fe 01       	movw	r30, r28
 bce:	e2 0f       	add	r30, r18
 bd0:	f3 1f       	adc	r31, r19
 bd2:	81 93       	st	Z+, r24
 bd4:	91 93       	st	Z+, r25
 bd6:	22 50       	subi	r18, 0x02	; 2
 bd8:	31 09       	sbc	r19, r1
 bda:	39 83       	std	Y+1, r19	; 0x01
 bdc:	28 83       	st	Y, r18
 bde:	3a c0       	rjmp	.+116    	; 0xc54 <malloc+0x124>
 be0:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <__brkval>
 be4:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <__brkval+0x1>
 be8:	23 2b       	or	r18, r19
 bea:	41 f4       	brne	.+16     	; 0xbfc <malloc+0xcc>
 bec:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 bf0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 bf4:	30 93 eb 02 	sts	0x02EB, r19	; 0x8002eb <__brkval+0x1>
 bf8:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <__brkval>
 bfc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 c00:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 c04:	21 15       	cp	r18, r1
 c06:	31 05       	cpc	r19, r1
 c08:	41 f4       	brne	.+16     	; 0xc1a <malloc+0xea>
 c0a:	2d b7       	in	r18, 0x3d	; 61
 c0c:	3e b7       	in	r19, 0x3e	; 62
 c0e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 c12:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 c16:	24 1b       	sub	r18, r20
 c18:	35 0b       	sbc	r19, r21
 c1a:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <__brkval>
 c1e:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <__brkval+0x1>
 c22:	e2 17       	cp	r30, r18
 c24:	f3 07       	cpc	r31, r19
 c26:	a0 f4       	brcc	.+40     	; 0xc50 <malloc+0x120>
 c28:	2e 1b       	sub	r18, r30
 c2a:	3f 0b       	sbc	r19, r31
 c2c:	28 17       	cp	r18, r24
 c2e:	39 07       	cpc	r19, r25
 c30:	78 f0       	brcs	.+30     	; 0xc50 <malloc+0x120>
 c32:	ac 01       	movw	r20, r24
 c34:	4e 5f       	subi	r20, 0xFE	; 254
 c36:	5f 4f       	sbci	r21, 0xFF	; 255
 c38:	24 17       	cp	r18, r20
 c3a:	35 07       	cpc	r19, r21
 c3c:	48 f0       	brcs	.+18     	; 0xc50 <malloc+0x120>
 c3e:	4e 0f       	add	r20, r30
 c40:	5f 1f       	adc	r21, r31
 c42:	50 93 eb 02 	sts	0x02EB, r21	; 0x8002eb <__brkval+0x1>
 c46:	40 93 ea 02 	sts	0x02EA, r20	; 0x8002ea <__brkval>
 c4a:	81 93       	st	Z+, r24
 c4c:	91 93       	st	Z+, r25
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <malloc+0x124>
 c50:	e0 e0       	ldi	r30, 0x00	; 0
 c52:	f0 e0       	ldi	r31, 0x00	; 0
 c54:	cf 01       	movw	r24, r30
 c56:	df 91       	pop	r29
 c58:	cf 91       	pop	r28
 c5a:	1f 91       	pop	r17
 c5c:	0f 91       	pop	r16
 c5e:	08 95       	ret

00000c60 <free>:
 c60:	cf 93       	push	r28
 c62:	df 93       	push	r29
 c64:	00 97       	sbiw	r24, 0x00	; 0
 c66:	09 f4       	brne	.+2      	; 0xc6a <free+0xa>
 c68:	81 c0       	rjmp	.+258    	; 0xd6c <free+0x10c>
 c6a:	fc 01       	movw	r30, r24
 c6c:	32 97       	sbiw	r30, 0x02	; 2
 c6e:	13 82       	std	Z+3, r1	; 0x03
 c70:	12 82       	std	Z+2, r1	; 0x02
 c72:	a0 91 ec 02 	lds	r26, 0x02EC	; 0x8002ec <__flp>
 c76:	b0 91 ed 02 	lds	r27, 0x02ED	; 0x8002ed <__flp+0x1>
 c7a:	10 97       	sbiw	r26, 0x00	; 0
 c7c:	81 f4       	brne	.+32     	; 0xc9e <free+0x3e>
 c7e:	20 81       	ld	r18, Z
 c80:	31 81       	ldd	r19, Z+1	; 0x01
 c82:	82 0f       	add	r24, r18
 c84:	93 1f       	adc	r25, r19
 c86:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <__brkval>
 c8a:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <__brkval+0x1>
 c8e:	28 17       	cp	r18, r24
 c90:	39 07       	cpc	r19, r25
 c92:	51 f5       	brne	.+84     	; 0xce8 <free+0x88>
 c94:	f0 93 eb 02 	sts	0x02EB, r31	; 0x8002eb <__brkval+0x1>
 c98:	e0 93 ea 02 	sts	0x02EA, r30	; 0x8002ea <__brkval>
 c9c:	67 c0       	rjmp	.+206    	; 0xd6c <free+0x10c>
 c9e:	ed 01       	movw	r28, r26
 ca0:	20 e0       	ldi	r18, 0x00	; 0
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	ce 17       	cp	r28, r30
 ca6:	df 07       	cpc	r29, r31
 ca8:	40 f4       	brcc	.+16     	; 0xcba <free+0x5a>
 caa:	4a 81       	ldd	r20, Y+2	; 0x02
 cac:	5b 81       	ldd	r21, Y+3	; 0x03
 cae:	9e 01       	movw	r18, r28
 cb0:	41 15       	cp	r20, r1
 cb2:	51 05       	cpc	r21, r1
 cb4:	f1 f0       	breq	.+60     	; 0xcf2 <free+0x92>
 cb6:	ea 01       	movw	r28, r20
 cb8:	f5 cf       	rjmp	.-22     	; 0xca4 <free+0x44>
 cba:	d3 83       	std	Z+3, r29	; 0x03
 cbc:	c2 83       	std	Z+2, r28	; 0x02
 cbe:	40 81       	ld	r20, Z
 cc0:	51 81       	ldd	r21, Z+1	; 0x01
 cc2:	84 0f       	add	r24, r20
 cc4:	95 1f       	adc	r25, r21
 cc6:	c8 17       	cp	r28, r24
 cc8:	d9 07       	cpc	r29, r25
 cca:	59 f4       	brne	.+22     	; 0xce2 <free+0x82>
 ccc:	88 81       	ld	r24, Y
 cce:	99 81       	ldd	r25, Y+1	; 0x01
 cd0:	84 0f       	add	r24, r20
 cd2:	95 1f       	adc	r25, r21
 cd4:	02 96       	adiw	r24, 0x02	; 2
 cd6:	91 83       	std	Z+1, r25	; 0x01
 cd8:	80 83       	st	Z, r24
 cda:	8a 81       	ldd	r24, Y+2	; 0x02
 cdc:	9b 81       	ldd	r25, Y+3	; 0x03
 cde:	93 83       	std	Z+3, r25	; 0x03
 ce0:	82 83       	std	Z+2, r24	; 0x02
 ce2:	21 15       	cp	r18, r1
 ce4:	31 05       	cpc	r19, r1
 ce6:	29 f4       	brne	.+10     	; 0xcf2 <free+0x92>
 ce8:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <__flp+0x1>
 cec:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <__flp>
 cf0:	3d c0       	rjmp	.+122    	; 0xd6c <free+0x10c>
 cf2:	e9 01       	movw	r28, r18
 cf4:	fb 83       	std	Y+3, r31	; 0x03
 cf6:	ea 83       	std	Y+2, r30	; 0x02
 cf8:	49 91       	ld	r20, Y+
 cfa:	59 91       	ld	r21, Y+
 cfc:	c4 0f       	add	r28, r20
 cfe:	d5 1f       	adc	r29, r21
 d00:	ec 17       	cp	r30, r28
 d02:	fd 07       	cpc	r31, r29
 d04:	61 f4       	brne	.+24     	; 0xd1e <free+0xbe>
 d06:	80 81       	ld	r24, Z
 d08:	91 81       	ldd	r25, Z+1	; 0x01
 d0a:	84 0f       	add	r24, r20
 d0c:	95 1f       	adc	r25, r21
 d0e:	02 96       	adiw	r24, 0x02	; 2
 d10:	e9 01       	movw	r28, r18
 d12:	99 83       	std	Y+1, r25	; 0x01
 d14:	88 83       	st	Y, r24
 d16:	82 81       	ldd	r24, Z+2	; 0x02
 d18:	93 81       	ldd	r25, Z+3	; 0x03
 d1a:	9b 83       	std	Y+3, r25	; 0x03
 d1c:	8a 83       	std	Y+2, r24	; 0x02
 d1e:	e0 e0       	ldi	r30, 0x00	; 0
 d20:	f0 e0       	ldi	r31, 0x00	; 0
 d22:	12 96       	adiw	r26, 0x02	; 2
 d24:	8d 91       	ld	r24, X+
 d26:	9c 91       	ld	r25, X
 d28:	13 97       	sbiw	r26, 0x03	; 3
 d2a:	00 97       	sbiw	r24, 0x00	; 0
 d2c:	19 f0       	breq	.+6      	; 0xd34 <free+0xd4>
 d2e:	fd 01       	movw	r30, r26
 d30:	dc 01       	movw	r26, r24
 d32:	f7 cf       	rjmp	.-18     	; 0xd22 <free+0xc2>
 d34:	8d 91       	ld	r24, X+
 d36:	9c 91       	ld	r25, X
 d38:	11 97       	sbiw	r26, 0x01	; 1
 d3a:	9d 01       	movw	r18, r26
 d3c:	2e 5f       	subi	r18, 0xFE	; 254
 d3e:	3f 4f       	sbci	r19, 0xFF	; 255
 d40:	82 0f       	add	r24, r18
 d42:	93 1f       	adc	r25, r19
 d44:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <__brkval>
 d48:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <__brkval+0x1>
 d4c:	28 17       	cp	r18, r24
 d4e:	39 07       	cpc	r19, r25
 d50:	69 f4       	brne	.+26     	; 0xd6c <free+0x10c>
 d52:	30 97       	sbiw	r30, 0x00	; 0
 d54:	29 f4       	brne	.+10     	; 0xd60 <free+0x100>
 d56:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <__flp+0x1>
 d5a:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <__flp>
 d5e:	02 c0       	rjmp	.+4      	; 0xd64 <free+0x104>
 d60:	13 82       	std	Z+3, r1	; 0x03
 d62:	12 82       	std	Z+2, r1	; 0x02
 d64:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <__brkval+0x1>
 d68:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <__brkval>
 d6c:	df 91       	pop	r29
 d6e:	cf 91       	pop	r28
 d70:	08 95       	ret

00000d72 <strnlen_P>:
 d72:	fc 01       	movw	r30, r24
 d74:	05 90       	lpm	r0, Z+
 d76:	61 50       	subi	r22, 0x01	; 1
 d78:	70 40       	sbci	r23, 0x00	; 0
 d7a:	01 10       	cpse	r0, r1
 d7c:	d8 f7       	brcc	.-10     	; 0xd74 <strnlen_P+0x2>
 d7e:	80 95       	com	r24
 d80:	90 95       	com	r25
 d82:	8e 0f       	add	r24, r30
 d84:	9f 1f       	adc	r25, r31
 d86:	08 95       	ret

00000d88 <memset>:
 d88:	dc 01       	movw	r26, r24
 d8a:	01 c0       	rjmp	.+2      	; 0xd8e <memset+0x6>
 d8c:	6d 93       	st	X+, r22
 d8e:	41 50       	subi	r20, 0x01	; 1
 d90:	50 40       	sbci	r21, 0x00	; 0
 d92:	e0 f7       	brcc	.-8      	; 0xd8c <memset+0x4>
 d94:	08 95       	ret

00000d96 <strnlen>:
 d96:	fc 01       	movw	r30, r24
 d98:	61 50       	subi	r22, 0x01	; 1
 d9a:	70 40       	sbci	r23, 0x00	; 0
 d9c:	01 90       	ld	r0, Z+
 d9e:	01 10       	cpse	r0, r1
 da0:	d8 f7       	brcc	.-10     	; 0xd98 <strnlen+0x2>
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	8e 0f       	add	r24, r30
 da8:	9f 1f       	adc	r25, r31
 daa:	08 95       	ret

00000dac <fputc>:
 dac:	0f 93       	push	r16
 dae:	1f 93       	push	r17
 db0:	cf 93       	push	r28
 db2:	df 93       	push	r29
 db4:	fb 01       	movw	r30, r22
 db6:	23 81       	ldd	r18, Z+3	; 0x03
 db8:	21 fd       	sbrc	r18, 1
 dba:	03 c0       	rjmp	.+6      	; 0xdc2 <fputc+0x16>
 dbc:	8f ef       	ldi	r24, 0xFF	; 255
 dbe:	9f ef       	ldi	r25, 0xFF	; 255
 dc0:	2c c0       	rjmp	.+88     	; 0xe1a <fputc+0x6e>
 dc2:	22 ff       	sbrs	r18, 2
 dc4:	16 c0       	rjmp	.+44     	; 0xdf2 <fputc+0x46>
 dc6:	46 81       	ldd	r20, Z+6	; 0x06
 dc8:	57 81       	ldd	r21, Z+7	; 0x07
 dca:	24 81       	ldd	r18, Z+4	; 0x04
 dcc:	35 81       	ldd	r19, Z+5	; 0x05
 dce:	42 17       	cp	r20, r18
 dd0:	53 07       	cpc	r21, r19
 dd2:	44 f4       	brge	.+16     	; 0xde4 <fputc+0x38>
 dd4:	a0 81       	ld	r26, Z
 dd6:	b1 81       	ldd	r27, Z+1	; 0x01
 dd8:	9d 01       	movw	r18, r26
 dda:	2f 5f       	subi	r18, 0xFF	; 255
 ddc:	3f 4f       	sbci	r19, 0xFF	; 255
 dde:	31 83       	std	Z+1, r19	; 0x01
 de0:	20 83       	st	Z, r18
 de2:	8c 93       	st	X, r24
 de4:	26 81       	ldd	r18, Z+6	; 0x06
 de6:	37 81       	ldd	r19, Z+7	; 0x07
 de8:	2f 5f       	subi	r18, 0xFF	; 255
 dea:	3f 4f       	sbci	r19, 0xFF	; 255
 dec:	37 83       	std	Z+7, r19	; 0x07
 dee:	26 83       	std	Z+6, r18	; 0x06
 df0:	14 c0       	rjmp	.+40     	; 0xe1a <fputc+0x6e>
 df2:	8b 01       	movw	r16, r22
 df4:	ec 01       	movw	r28, r24
 df6:	fb 01       	movw	r30, r22
 df8:	00 84       	ldd	r0, Z+8	; 0x08
 dfa:	f1 85       	ldd	r31, Z+9	; 0x09
 dfc:	e0 2d       	mov	r30, r0
 dfe:	19 95       	eicall
 e00:	89 2b       	or	r24, r25
 e02:	e1 f6       	brne	.-72     	; 0xdbc <fputc+0x10>
 e04:	d8 01       	movw	r26, r16
 e06:	16 96       	adiw	r26, 0x06	; 6
 e08:	8d 91       	ld	r24, X+
 e0a:	9c 91       	ld	r25, X
 e0c:	17 97       	sbiw	r26, 0x07	; 7
 e0e:	01 96       	adiw	r24, 0x01	; 1
 e10:	17 96       	adiw	r26, 0x07	; 7
 e12:	9c 93       	st	X, r25
 e14:	8e 93       	st	-X, r24
 e16:	16 97       	sbiw	r26, 0x06	; 6
 e18:	ce 01       	movw	r24, r28
 e1a:	df 91       	pop	r29
 e1c:	cf 91       	pop	r28
 e1e:	1f 91       	pop	r17
 e20:	0f 91       	pop	r16
 e22:	08 95       	ret

00000e24 <__ultoa_invert>:
 e24:	fa 01       	movw	r30, r20
 e26:	aa 27       	eor	r26, r26
 e28:	28 30       	cpi	r18, 0x08	; 8
 e2a:	51 f1       	breq	.+84     	; 0xe80 <__ultoa_invert+0x5c>
 e2c:	20 31       	cpi	r18, 0x10	; 16
 e2e:	81 f1       	breq	.+96     	; 0xe90 <__ultoa_invert+0x6c>
 e30:	e8 94       	clt
 e32:	6f 93       	push	r22
 e34:	6e 7f       	andi	r22, 0xFE	; 254
 e36:	6e 5f       	subi	r22, 0xFE	; 254
 e38:	7f 4f       	sbci	r23, 0xFF	; 255
 e3a:	8f 4f       	sbci	r24, 0xFF	; 255
 e3c:	9f 4f       	sbci	r25, 0xFF	; 255
 e3e:	af 4f       	sbci	r26, 0xFF	; 255
 e40:	b1 e0       	ldi	r27, 0x01	; 1
 e42:	3e d0       	rcall	.+124    	; 0xec0 <__ultoa_invert+0x9c>
 e44:	b4 e0       	ldi	r27, 0x04	; 4
 e46:	3c d0       	rcall	.+120    	; 0xec0 <__ultoa_invert+0x9c>
 e48:	67 0f       	add	r22, r23
 e4a:	78 1f       	adc	r23, r24
 e4c:	89 1f       	adc	r24, r25
 e4e:	9a 1f       	adc	r25, r26
 e50:	a1 1d       	adc	r26, r1
 e52:	68 0f       	add	r22, r24
 e54:	79 1f       	adc	r23, r25
 e56:	8a 1f       	adc	r24, r26
 e58:	91 1d       	adc	r25, r1
 e5a:	a1 1d       	adc	r26, r1
 e5c:	6a 0f       	add	r22, r26
 e5e:	71 1d       	adc	r23, r1
 e60:	81 1d       	adc	r24, r1
 e62:	91 1d       	adc	r25, r1
 e64:	a1 1d       	adc	r26, r1
 e66:	20 d0       	rcall	.+64     	; 0xea8 <__ultoa_invert+0x84>
 e68:	09 f4       	brne	.+2      	; 0xe6c <__ultoa_invert+0x48>
 e6a:	68 94       	set
 e6c:	3f 91       	pop	r19
 e6e:	2a e0       	ldi	r18, 0x0A	; 10
 e70:	26 9f       	mul	r18, r22
 e72:	11 24       	eor	r1, r1
 e74:	30 19       	sub	r19, r0
 e76:	30 5d       	subi	r19, 0xD0	; 208
 e78:	31 93       	st	Z+, r19
 e7a:	de f6       	brtc	.-74     	; 0xe32 <__ultoa_invert+0xe>
 e7c:	cf 01       	movw	r24, r30
 e7e:	08 95       	ret
 e80:	46 2f       	mov	r20, r22
 e82:	47 70       	andi	r20, 0x07	; 7
 e84:	40 5d       	subi	r20, 0xD0	; 208
 e86:	41 93       	st	Z+, r20
 e88:	b3 e0       	ldi	r27, 0x03	; 3
 e8a:	0f d0       	rcall	.+30     	; 0xeaa <__ultoa_invert+0x86>
 e8c:	c9 f7       	brne	.-14     	; 0xe80 <__ultoa_invert+0x5c>
 e8e:	f6 cf       	rjmp	.-20     	; 0xe7c <__ultoa_invert+0x58>
 e90:	46 2f       	mov	r20, r22
 e92:	4f 70       	andi	r20, 0x0F	; 15
 e94:	40 5d       	subi	r20, 0xD0	; 208
 e96:	4a 33       	cpi	r20, 0x3A	; 58
 e98:	18 f0       	brcs	.+6      	; 0xea0 <__ultoa_invert+0x7c>
 e9a:	49 5d       	subi	r20, 0xD9	; 217
 e9c:	31 fd       	sbrc	r19, 1
 e9e:	40 52       	subi	r20, 0x20	; 32
 ea0:	41 93       	st	Z+, r20
 ea2:	02 d0       	rcall	.+4      	; 0xea8 <__ultoa_invert+0x84>
 ea4:	a9 f7       	brne	.-22     	; 0xe90 <__ultoa_invert+0x6c>
 ea6:	ea cf       	rjmp	.-44     	; 0xe7c <__ultoa_invert+0x58>
 ea8:	b4 e0       	ldi	r27, 0x04	; 4
 eaa:	a6 95       	lsr	r26
 eac:	97 95       	ror	r25
 eae:	87 95       	ror	r24
 eb0:	77 95       	ror	r23
 eb2:	67 95       	ror	r22
 eb4:	ba 95       	dec	r27
 eb6:	c9 f7       	brne	.-14     	; 0xeaa <__ultoa_invert+0x86>
 eb8:	00 97       	sbiw	r24, 0x00	; 0
 eba:	61 05       	cpc	r22, r1
 ebc:	71 05       	cpc	r23, r1
 ebe:	08 95       	ret
 ec0:	9b 01       	movw	r18, r22
 ec2:	ac 01       	movw	r20, r24
 ec4:	0a 2e       	mov	r0, r26
 ec6:	06 94       	lsr	r0
 ec8:	57 95       	ror	r21
 eca:	47 95       	ror	r20
 ecc:	37 95       	ror	r19
 ece:	27 95       	ror	r18
 ed0:	ba 95       	dec	r27
 ed2:	c9 f7       	brne	.-14     	; 0xec6 <__ultoa_invert+0xa2>
 ed4:	62 0f       	add	r22, r18
 ed6:	73 1f       	adc	r23, r19
 ed8:	84 1f       	adc	r24, r20
 eda:	95 1f       	adc	r25, r21
 edc:	a0 1d       	adc	r26, r0
 ede:	08 95       	ret

00000ee0 <_exit>:
 ee0:	f8 94       	cli

00000ee2 <__stop_program>:
 ee2:	ff cf       	rjmp	.-2      	; 0xee2 <__stop_program>
