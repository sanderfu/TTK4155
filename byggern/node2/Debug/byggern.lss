
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800200  0000103a  000010ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000103a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008003e6  008003e6  000012b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d0d  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129e  00000000  00000000  00003195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b76  00000000  00000000  00004433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cb  00000000  00000000  000052e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aae  00000000  00000000  00005aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000655d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__vector_5>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e3       	ldi	r30, 0x3A	; 58
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 3e       	cpi	r26, 0xE6	; 230
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a6 ee       	ldi	r26, 0xE6	; 230
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 30       	cpi	r26, 0x00	; 0
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	11 d0       	rcall	.+34     	; 0x142 <main>
     120:	8a c7       	rjmp	.+3860   	; 0x1036 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_5>:
#include "CAN_controller.h"
#include "MCP2515.h"
#include "CAN.h"
volatile CAN_message_t received_message;
volatile uint8_t flag = 0;
ISR (INT4_vect) {
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	8f 93       	push	r24
	//cli();
	flag= 1;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <__data_end>
	
	
	
	//sei();
	
}
     136:	8f 91       	pop	r24
     138:	0f 90       	pop	r0
     13a:	0f be       	out	0x3f, r0	; 63
     13c:	0f 90       	pop	r0
     13e:	1f 90       	pop	r1
     140:	18 95       	reti

00000142 <main>:


int main(void)
//p.23 for can read instructions
{
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	2b 97       	sbiw	r28, 0x0b	; 11
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
	setupInit();
     156:	9b d2       	rcall	.+1334   	; 0x68e <setupInit>
	printf("\n\r---------------------------------------\n\n\n\n\n\n\r");
     158:	86 e0       	ldi	r24, 0x06	; 6
     15a:	92 e0       	ldi	r25, 0x02	; 2
     15c:	9f 93       	push	r25
     15e:	8f 93       	push	r24
     160:	68 d3       	rcall	.+1744   	; 0x832 <printf>


	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     162:	87 e5       	ldi	r24, 0x57	; 87
     164:	95 e0       	ldi	r25, 0x05	; 5
     166:	9a 87       	std	Y+10, r25	; 0x0a
     168:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     16a:	83 e0       	ldi	r24, 0x03	; 3
     16c:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     172:	86 e1       	ldi	r24, 0x16	; 22
     174:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     176:	81 e2       	ldi	r24, 0x21	; 33
     178:	8b 83       	std	Y+3, r24	; 0x03
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
		_delay_ms(500);
		//Put microcontroller to sleep until next interrupt. 

		
		if (flag) {
			printf("Message received");
     17e:	0f 2e       	mov	r0, r31
     180:	f7 e3       	ldi	r31, 0x37	; 55
     182:	ef 2e       	mov	r14, r31
     184:	f2 e0       	ldi	r31, 0x02	; 2
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
			
		}
		_delay_ms(500);	
	
		CAN_transmit_message(&message);
		printf("\n\r-------------------------------------------\n\r");
     18a:	08 e4       	ldi	r16, 0x48	; 72
     18c:	12 e0       	ldi	r17, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18e:	2f ef       	ldi	r18, 0xFF	; 255
     190:	89 e6       	ldi	r24, 0x69	; 105
     192:	98 e1       	ldi	r25, 0x18	; 24
     194:	21 50       	subi	r18, 0x01	; 1
     196:	80 40       	sbci	r24, 0x00	; 0
     198:	90 40       	sbci	r25, 0x00	; 0
     19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x52>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x5c>
     19e:	00 00       	nop
		//
		_delay_ms(500);
		//Put microcontroller to sleep until next interrupt. 

		
		if (flag) {
     1a0:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <__data_end>
     1a4:	88 23       	and	r24, r24
     1a6:	89 f0       	breq	.+34     	; 0x1ca <main+0x88>
			printf("Message received");
     1a8:	ff 92       	push	r15
     1aa:	ef 92       	push	r14
     1ac:	42 d3       	rcall	.+1668   	; 0x832 <printf>
			flag=0;
     1ae:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <__data_end>
			CAN_receiveMessage(&received_message);
     1b2:	89 ee       	ldi	r24, 0xE9	; 233
     1b4:	93 e0       	ldi	r25, 0x03	; 3
     1b6:	15 d1       	rcall	.+554    	; 0x3e2 <CAN_receiveMessage>
			//printf("This is the data: %i", received_message.data);
			uint8_t mask = 0b11; 
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	6c e2       	ldi	r22, 0x2C	; 44
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	83 e0       	ldi	r24, 0x03	; 3
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	97 d1       	rcall	.+814    	; 0x4f4 <CAN_controller_bitModify>
     1c6:	0f 90       	pop	r0
     1c8:	0f 90       	pop	r0
     1ca:	2f ef       	ldi	r18, 0xFF	; 255
     1cc:	89 e6       	ldi	r24, 0x69	; 105
     1ce:	98 e1       	ldi	r25, 0x18	; 24
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	80 40       	sbci	r24, 0x00	; 0
     1d4:	90 40       	sbci	r25, 0x00	; 0
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x8e>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x98>
			
		}
		_delay_ms(500);	
	
		CAN_transmit_message(&message);
     1da:	00 00       	nop
     1dc:	ce 01       	movw	r24, r28
     1de:	01 96       	adiw	r24, 0x01	; 1
		printf("\n\r-------------------------------------------\n\r");
     1e0:	06 d0       	rcall	.+12     	; 0x1ee <CAN_transmit_message>
     1e2:	1f 93       	push	r17
     1e4:	0f 93       	push	r16
     1e6:	25 d3       	rcall	.+1610   	; 0x832 <printf>
		CAN_transmit_message(&message);
		_delay_ms(500);	
		
		//CAN_controller_setMode(MODE_LOOPBACK);
		*/
	}
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	d0 cf       	rjmp	.-96     	; 0x18e <main+0x4c>

000001ee <CAN_transmit_message>:
	
	
	
	
}
void CAN_transmit_message(CAN_message_t *message) {
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	8c 01       	movw	r16, r24
	printf("Transmitting message");
     1fe:	88 e7       	ldi	r24, 0x78	; 120
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	9f 93       	push	r25
     204:	8f 93       	push	r24
     206:	15 d3       	rcall	.+1578   	; 0x832 <printf>
	static int buffer_number = 0;
	
	buffer_number++;
	buffer_number = buffer_number%3;
     208:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <buffer_number.2114>
     20c:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <buffer_number.2114+0x1>
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	63 e0       	ldi	r22, 0x03	; 3
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	9c d2       	rcall	.+1336   	; 0x750 <__divmodhi4>
     218:	28 2f       	mov	r18, r24
     21a:	39 2f       	mov	r19, r25
     21c:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <buffer_number.2114>
     220:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <buffer_number.2114+0x1>
	

	

	//Load id in registers TXBnSIDH and TXBnSIDL
	switch(buffer_number) {
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	21 30       	cpi	r18, 0x01	; 1
     22a:	31 05       	cpc	r19, r1
     22c:	69 f1       	breq	.+90     	; 0x288 <CAN_transmit_message+0x9a>
     22e:	22 30       	cpi	r18, 0x02	; 2
     230:	31 05       	cpc	r19, r1
     232:	09 f4       	brne	.+2      	; 0x236 <CAN_transmit_message+0x48>
     234:	41 c0       	rjmp	.+130    	; 0x2b8 <CAN_transmit_message+0xca>
     236:	23 2b       	or	r18, r19
     238:	09 f0       	breq	.+2      	; 0x23c <CAN_transmit_message+0x4e>
     23a:	55 c0       	rjmp	.+170    	; 0x2e6 <CAN_transmit_message+0xf8>
			case 0:
				CAN_controller_bitModify(0b11100000, TXB0SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     23c:	f8 01       	movw	r30, r16
     23e:	40 85       	ldd	r20, Z+8	; 0x08
     240:	51 85       	ldd	r21, Z+9	; 0x09
     242:	42 95       	swap	r20
     244:	44 0f       	add	r20, r20
     246:	40 7e       	andi	r20, 0xE0	; 224
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	62 e3       	ldi	r22, 0x32	; 50
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	80 ee       	ldi	r24, 0xE0	; 224
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	50 d1       	rcall	.+672    	; 0x4f4 <CAN_controller_bitModify>
				CAN_controller_write(TXB0SIDH, (uint8_t) ( message->ID >> 3) );
     254:	f8 01       	movw	r30, r16
     256:	60 85       	ldd	r22, Z+8	; 0x08
     258:	71 85       	ldd	r23, Z+9	; 0x09
     25a:	76 95       	lsr	r23
     25c:	67 95       	ror	r22
     25e:	76 95       	lsr	r23
     260:	67 95       	ror	r22
     262:	76 95       	lsr	r23
     264:	67 95       	ror	r22
     266:	81 e3       	ldi	r24, 0x31	; 49
     268:	32 d1       	rcall	.+612    	; 0x4ce <CAN_controller_write>
				
				printf("Sending whole id: %i", message->ID );
     26a:	f8 01       	movw	r30, r16
     26c:	80 85       	ldd	r24, Z+8	; 0x08
     26e:	91 85       	ldd	r25, Z+9	; 0x09
     270:	9f 93       	push	r25
     272:	8f 93       	push	r24
     274:	8d e8       	ldi	r24, 0x8D	; 141
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	9f 93       	push	r25
     27a:	8f 93       	push	r24
     27c:	da d2       	rcall	.+1460   	; 0x832 <printf>


				break;
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	2f c0       	rjmp	.+94     	; 0x2e6 <CAN_transmit_message+0xf8>
			case 1:
				CAN_controller_bitModify(0b11100000, TXB1SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     288:	f8 01       	movw	r30, r16
     28a:	40 85       	ldd	r20, Z+8	; 0x08
     28c:	51 85       	ldd	r21, Z+9	; 0x09
     28e:	42 95       	swap	r20
     290:	44 0f       	add	r20, r20
     292:	40 7e       	andi	r20, 0xE0	; 224
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	62 e4       	ldi	r22, 0x42	; 66
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	80 ee       	ldi	r24, 0xE0	; 224
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	2a d1       	rcall	.+596    	; 0x4f4 <CAN_controller_bitModify>
				CAN_controller_write(TXB1SIDH, (uint8_t) ( message->ID >> 3) );
     2a0:	f8 01       	movw	r30, r16
     2a2:	60 85       	ldd	r22, Z+8	; 0x08
     2a4:	71 85       	ldd	r23, Z+9	; 0x09
     2a6:	76 95       	lsr	r23
     2a8:	67 95       	ror	r22
     2aa:	76 95       	lsr	r23
     2ac:	67 95       	ror	r22
     2ae:	76 95       	lsr	r23
     2b0:	67 95       	ror	r22
     2b2:	81 e4       	ldi	r24, 0x41	; 65
     2b4:	0c d1       	rcall	.+536    	; 0x4ce <CAN_controller_write>
				
				break;
     2b6:	17 c0       	rjmp	.+46     	; 0x2e6 <CAN_transmit_message+0xf8>
			case 2:
				CAN_controller_bitModify(0b11100000, TXB2SIDL, (uint8_t) ((message->ID & 0b111) << 5));
     2b8:	f8 01       	movw	r30, r16
     2ba:	40 85       	ldd	r20, Z+8	; 0x08
     2bc:	51 85       	ldd	r21, Z+9	; 0x09
     2be:	42 95       	swap	r20
     2c0:	44 0f       	add	r20, r20
     2c2:	40 7e       	andi	r20, 0xE0	; 224
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	62 e5       	ldi	r22, 0x52	; 82
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	80 ee       	ldi	r24, 0xE0	; 224
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	12 d1       	rcall	.+548    	; 0x4f4 <CAN_controller_bitModify>
				CAN_controller_write(TXB2SIDH, (uint8_t) ( message->ID >> 3) );
     2d0:	f8 01       	movw	r30, r16
     2d2:	60 85       	ldd	r22, Z+8	; 0x08
     2d4:	71 85       	ldd	r23, Z+9	; 0x09
     2d6:	76 95       	lsr	r23
     2d8:	67 95       	ror	r22
     2da:	76 95       	lsr	r23
     2dc:	67 95       	ror	r22
     2de:	76 95       	lsr	r23
     2e0:	67 95       	ror	r22
     2e2:	81 e5       	ldi	r24, 0x51	; 81
     2e4:	f4 d0       	rcall	.+488    	; 0x4ce <CAN_controller_write>
			
			
	}
		
	//Load length in register TXBnDLC
	switch(buffer_number) {
     2e6:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <buffer_number.2114>
     2ea:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <buffer_number.2114+0x1>
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	91 05       	cpc	r25, r1
     2f2:	d9 f0       	breq	.+54     	; 0x32a <CAN_transmit_message+0x13c>
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	91 05       	cpc	r25, r1
     2f8:	09 f1       	breq	.+66     	; 0x33c <CAN_transmit_message+0x14e>
     2fa:	89 2b       	or	r24, r25
			case 0:
				printf("\n\rtransmitting data length: %i\n\r", message->data_length);
     2fc:	39 f5       	brne	.+78     	; 0x34c <CAN_transmit_message+0x15e>
     2fe:	f8 01       	movw	r30, r16
     300:	82 85       	ldd	r24, Z+10	; 0x0a
     302:	1f 92       	push	r1
     304:	8f 93       	push	r24
     306:	82 ea       	ldi	r24, 0xA2	; 162
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	9f 93       	push	r25
     30c:	8f 93       	push	r24
				CAN_controller_bitModify(0b1111, TXB0DLC, message->data_length);
     30e:	91 d2       	rcall	.+1314   	; 0x832 <printf>
     310:	f8 01       	movw	r30, r16
     312:	42 85       	ldd	r20, Z+10	; 0x0a
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	65 e3       	ldi	r22, 0x35	; 53
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	8f e0       	ldi	r24, 0x0F	; 15
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	ea d0       	rcall	.+468    	; 0x4f4 <CAN_controller_bitModify>
				break;
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
			case 1:
				CAN_controller_bitModify(0b1111, TXB1DLC, message->data_length);
     328:	11 c0       	rjmp	.+34     	; 0x34c <CAN_transmit_message+0x15e>
     32a:	f8 01       	movw	r30, r16
     32c:	42 85       	ldd	r20, Z+10	; 0x0a
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	65 e4       	ldi	r22, 0x45	; 69
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	8f e0       	ldi	r24, 0x0F	; 15
     336:	90 e0       	ldi	r25, 0x00	; 0
				break;
     338:	dd d0       	rcall	.+442    	; 0x4f4 <CAN_controller_bitModify>
			case 2:
				CAN_controller_bitModify(0b1111, TXB2DLC, message->data_length);
     33a:	08 c0       	rjmp	.+16     	; 0x34c <CAN_transmit_message+0x15e>
     33c:	f8 01       	movw	r30, r16
     33e:	42 85       	ldd	r20, Z+10	; 0x0a
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	65 e5       	ldi	r22, 0x55	; 85
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	8f e0       	ldi	r24, 0x0F	; 15
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	d4 d0       	rcall	.+424    	; 0x4f4 <CAN_controller_bitModify>
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     34c:	f8 01       	movw	r30, r16
     34e:	82 85       	ldd	r24, Z+10	; 0x0a
     350:	88 23       	and	r24, r24
     352:	09 f4       	brne	.+2      	; 0x356 <CAN_transmit_message+0x168>
     354:	3b c0       	rjmp	.+118    	; 0x3cc <CAN_transmit_message+0x1de>
     356:	c0 e0       	ldi	r28, 0x00	; 0
		switch(buffer_number) {
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     358:	0f 2e       	mov	r0, r31
     35a:	f3 ec       	ldi	r31, 0xC3	; 195
     35c:	cf 2e       	mov	r12, r31
     35e:	f2 e0       	ldi	r31, 0x02	; 2
     360:	df 2e       	mov	r13, r31
     362:	f0 2d       	mov	r31, r0
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
		switch(buffer_number) {
     364:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <buffer_number.2114>
     368:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <buffer_number.2114+0x1>
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	91 05       	cpc	r25, r1
     370:	c9 f0       	breq	.+50     	; 0x3a4 <CAN_transmit_message+0x1b6>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	91 05       	cpc	r25, r1
     376:	f1 f0       	breq	.+60     	; 0x3b4 <CAN_transmit_message+0x1c6>
     378:	89 2b       	or	r24, r25
			case 0:
				printf("transmitting data: %i\t", message->data[i]);
     37a:	19 f5       	brne	.+70     	; 0x3c2 <CAN_transmit_message+0x1d4>
     37c:	78 01       	movw	r14, r16
     37e:	ec 0e       	add	r14, r28
     380:	f1 1c       	adc	r15, r1
     382:	f7 01       	movw	r30, r14
     384:	80 81       	ld	r24, Z
     386:	1f 92       	push	r1
     388:	8f 93       	push	r24
     38a:	df 92       	push	r13
     38c:	cf 92       	push	r12
				CAN_controller_write(TXB0D0 + i, message->data[i]);
     38e:	51 d2       	rcall	.+1186   	; 0x832 <printf>
     390:	f7 01       	movw	r30, r14
     392:	60 81       	ld	r22, Z
     394:	86 e3       	ldi	r24, 0x36	; 54
     396:	8c 0f       	add	r24, r28
				break;
     398:	9a d0       	rcall	.+308    	; 0x4ce <CAN_controller_write>
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
			case 1:
				CAN_controller_write(TXB1D0 + i, message->data[i]);
     3a0:	0f 90       	pop	r0
     3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <CAN_transmit_message+0x1d4>
     3a4:	f8 01       	movw	r30, r16
     3a6:	ec 0f       	add	r30, r28
     3a8:	f1 1d       	adc	r31, r1
     3aa:	60 81       	ld	r22, Z
     3ac:	86 e4       	ldi	r24, 0x46	; 70
				break;
     3ae:	8c 0f       	add	r24, r28
			case 2:
				CAN_controller_write(TXB2D0 + i, message->data[i]);
     3b0:	8e d0       	rcall	.+284    	; 0x4ce <CAN_controller_write>
     3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <CAN_transmit_message+0x1d4>
     3b4:	f8 01       	movw	r30, r16
     3b6:	ec 0f       	add	r30, r28
     3b8:	f1 1d       	adc	r31, r1
     3ba:	60 81       	ld	r22, Z
     3bc:	86 e5       	ldi	r24, 0x56	; 86
     3be:	8c 0f       	add	r24, r28
			
			
	}

	//iterate in for loop length = message.length and load TXBnDm
	for (uint8_t i = 0; i != message->data_length; i++) {
     3c0:	86 d0       	rcall	.+268    	; 0x4ce <CAN_controller_write>
     3c2:	cf 5f       	subi	r28, 0xFF	; 255
     3c4:	f8 01       	movw	r30, r16
     3c6:	82 85       	ldd	r24, Z+10	; 0x0a
     3c8:	8c 13       	cpse	r24, r28
	}
	

	
	//request_to_send
	CAN_controller_RTS(buffer_number);
     3ca:	cc cf       	rjmp	.-104    	; 0x364 <CAN_transmit_message+0x176>
     3cc:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <buffer_number.2114>
     3d0:	b9 d0       	rcall	.+370    	; 0x544 <CAN_controller_RTS>

	//ERROR HANDLING?	
}
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	08 95       	ret

000003e2 <CAN_receiveMessage>:

void CAN_receiveMessage(CAN_message_t * received_message) {
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     3f2:	82 e6       	ldi	r24, 0x62	; 98
     3f4:	5b d0       	rcall	.+182    	; 0x4ac <CAN_controller_read>
     3f6:	c8 2f       	mov	r28, r24
     3f8:	81 e6       	ldi	r24, 0x61	; 97
     3fa:	58 d0       	rcall	.+176    	; 0x4ac <CAN_controller_read>
     3fc:	c2 95       	swap	r28
     3fe:	c6 95       	lsr	r28
     400:	c7 70       	andi	r28, 0x07	; 7
     402:	28 e0       	ldi	r18, 0x08	; 8
     404:	82 9f       	mul	r24, r18
     406:	c0 01       	movw	r24, r0
     408:	11 24       	eor	r1, r1
     40a:	8c 0f       	add	r24, r28
     40c:	91 1d       	adc	r25, r1
     40e:	f7 01       	movw	r30, r14
     410:	91 87       	std	Z+9, r25	; 0x09
     412:	80 87       	std	Z+8, r24	; 0x08
				
				printf("Whole id: %i\n\r", received_message->ID);
     414:	80 85       	ldd	r24, Z+8	; 0x08
     416:	91 85       	ldd	r25, Z+9	; 0x09
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	8a ed       	ldi	r24, 0xDA	; 218
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     424:	06 d2       	rcall	.+1036   	; 0x832 <printf>
     426:	85 e6       	ldi	r24, 0x65	; 101
     428:	41 d0       	rcall	.+130    	; 0x4ac <CAN_controller_read>
     42a:	8f 70       	andi	r24, 0x0F	; 15
     42c:	f7 01       	movw	r30, r14
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
     42e:	82 87       	std	Z+10, r24	; 0x0a
     430:	85 e6       	ldi	r24, 0x65	; 101
     432:	3c d0       	rcall	.+120    	; 0x4ac <CAN_controller_read>
     434:	8f 70       	andi	r24, 0x0F	; 15
     436:	1f 92       	push	r1
     438:	8f 93       	push	r24
     43a:	89 ee       	ldi	r24, 0xE9	; 233
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	f7 d1       	rcall	.+1006   	; 0x832 <printf>
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     444:	f7 01       	movw	r30, r14
     446:	82 85       	ldd	r24, Z+10	; 0x0a
     448:	2d b7       	in	r18, 0x3d	; 61
     44a:	3e b7       	in	r19, 0x3e	; 62
     44c:	28 5f       	subi	r18, 0xF8	; 248
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	3e bf       	out	0x3e, r19	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	2d bf       	out	0x3d, r18	; 61
     45a:	88 23       	and	r24, r24
     45c:	f9 f0       	breq	.+62     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     45e:	c0 e0       	ldi	r28, 0x00	; 0
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
					printf("data: %i\t", received_message->data[i]);
     460:	0f 2e       	mov	r0, r31
     462:	f0 ed       	ldi	r31, 0xD0	; 208
     464:	cf 2e       	mov	r12, r31
     466:	f2 e0       	ldi	r31, 0x02	; 2
     468:	df 2e       	mov	r13, r31
				
				printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     46a:	f0 2d       	mov	r31, r0
     46c:	0c 2f       	mov	r16, r28
     46e:	10 e0       	ldi	r17, 0x00	; 0
     470:	86 e6       	ldi	r24, 0x66	; 102
     472:	8c 0f       	add	r24, r28
     474:	1b d0       	rcall	.+54     	; 0x4ac <CAN_controller_read>
     476:	f7 01       	movw	r30, r14
     478:	e0 0f       	add	r30, r16
     47a:	f1 1f       	adc	r31, r17
					printf("data: %i\t", received_message->data[i]);
     47c:	80 83       	st	Z, r24
     47e:	80 81       	ld	r24, Z
     480:	1f 92       	push	r1
     482:	8f 93       	push	r24
     484:	df 92       	push	r13
     486:	cf 92       	push	r12
     488:	d4 d1       	rcall	.+936    	; 0x832 <printf>
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     48a:	cf 5f       	subi	r28, 0xFF	; 255
     48c:	f7 01       	movw	r30, r14
     48e:	82 85       	ldd	r24, Z+10	; 0x0a
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	8c 13       	cpse	r24, r28
     49a:	e8 cf       	rjmp	.-48     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	}
	
	
	
	
}
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	08 95       	ret

000004ac <CAN_controller_read>:
#include "CAN_controller.h"
#include "SPI.h"

#define I 7

uint8_t CAN_controller_read(uint8_t addr) {
     4ac:	cf 93       	push	r28
     4ae:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB7, 0); 
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	05 d1       	rcall	.+522    	; 0x6c0 <SPI_setChipSelect>
	SPI_masterWrite(MCP_READ);
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	f8 d0       	rcall	.+496    	; 0x6aa <SPI_masterWrite>
	SPI_masterWrite(addr);
     4ba:	8c 2f       	mov	r24, r28
     4bc:	f6 d0       	rcall	.+492    	; 0x6aa <SPI_masterWrite>
	uint8_t data = SPI_masterRead();
     4be:	fa d0       	rcall	.+500    	; 0x6b4 <SPI_masterRead>
     4c0:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB7, 1);
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	87 e0       	ldi	r24, 0x07	; 7
     4c6:	fc d0       	rcall	.+504    	; 0x6c0 <SPI_setChipSelect>
     4c8:	8c 2f       	mov	r24, r28
	
	return data;
}
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <CAN_controller_write>:
     4ce:	cf 93       	push	r28

void CAN_controller_write(uint8_t addr, uint8_t data) {
     4d0:	df 93       	push	r29
     4d2:	d8 2f       	mov	r29, r24
     4d4:	c6 2f       	mov	r28, r22
	SPI_setChipSelect(PB7, 0);
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	87 e0       	ldi	r24, 0x07	; 7
     4da:	f2 d0       	rcall	.+484    	; 0x6c0 <SPI_setChipSelect>
	
	SPI_masterWrite(MCP_WRITE);
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	e5 d0       	rcall	.+458    	; 0x6aa <SPI_masterWrite>
	SPI_masterWrite(addr);
     4e0:	8d 2f       	mov	r24, r29
     4e2:	e3 d0       	rcall	.+454    	; 0x6aa <SPI_masterWrite>
	SPI_masterWrite(data);
     4e4:	8c 2f       	mov	r24, r28
     4e6:	e1 d0       	rcall	.+450    	; 0x6aa <SPI_masterWrite>
	
	SPI_setChipSelect(PB7, 1); 
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	87 e0       	ldi	r24, 0x07	; 7
     4ec:	e9 d0       	rcall	.+466    	; 0x6c0 <SPI_setChipSelect>
     4ee:	df 91       	pop	r29
	
}
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <CAN_controller_bitModify>:
     4f4:	1f 93       	push	r17
void CAN_controller_bitModify(uint8_t mask, uint8_t addr, uint8_t data) {
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	d8 2f       	mov	r29, r24
     4fc:	16 2f       	mov	r17, r22
     4fe:	c4 2f       	mov	r28, r20
		SPI_setChipSelect(PB7, 0);
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	87 e0       	ldi	r24, 0x07	; 7
     504:	dd d0       	rcall	.+442    	; 0x6c0 <SPI_setChipSelect>
		SPI_masterWrite(MCP_BITMOD);
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	d0 d0       	rcall	.+416    	; 0x6aa <SPI_masterWrite>
		SPI_masterWrite(addr);
     50a:	81 2f       	mov	r24, r17
     50c:	ce d0       	rcall	.+412    	; 0x6aa <SPI_masterWrite>
		SPI_masterWrite(mask);
     50e:	8d 2f       	mov	r24, r29
     510:	cc d0       	rcall	.+408    	; 0x6aa <SPI_masterWrite>
		SPI_masterWrite(data);
     512:	8c 2f       	mov	r24, r28
     514:	ca d0       	rcall	.+404    	; 0x6aa <SPI_masterWrite>
		
		SPI_setChipSelect(PB7, 1);
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	87 e0       	ldi	r24, 0x07	; 7
     51a:	d2 d0       	rcall	.+420    	; 0x6c0 <SPI_setChipSelect>
     51c:	df 91       	pop	r29

}
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <CAN_controller_reset>:
     524:	60 e0       	ldi	r22, 0x00	; 0
CAN_controller_reset() {
	SPI_setChipSelect(PB7, 0);
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	cb d0       	rcall	.+406    	; 0x6c0 <SPI_setChipSelect>
	printf("CAN reset\n\r");
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	93 e0       	ldi	r25, 0x03	; 3
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	7f d1       	rcall	.+766    	; 0x832 <printf>
	SPI_masterWrite(MCP_RESET);
     534:	80 ec       	ldi	r24, 0xC0	; 192
     536:	b9 d0       	rcall	.+370    	; 0x6aa <SPI_masterWrite>
	SPI_setChipSelect(PB7, 1);
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	87 e0       	ldi	r24, 0x07	; 7
     53c:	c1 d0       	rcall	.+386    	; 0x6c0 <SPI_setChipSelect>
     53e:	0f 90       	pop	r0
}
     540:	0f 90       	pop	r0
     542:	08 95       	ret

00000544 <CAN_controller_RTS>:
     544:	cf 93       	push	r28
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
	printf("Data: %i\n\r", status);

}

void CAN_controller_RTS(uint8_t buffer) {
     546:	c8 2f       	mov	r28, r24
	SPI_setChipSelect(PB7, 0);
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	87 e0       	ldi	r24, 0x07	; 7
     54c:	b9 d0       	rcall	.+370    	; 0x6c0 <SPI_setChipSelect>
	switch (buffer) {
     54e:	c1 30       	cpi	r28, 0x01	; 1
     550:	39 f0       	breq	.+14     	; 0x560 <CAN_controller_RTS+0x1c>
     552:	18 f0       	brcs	.+6      	; 0x55a <CAN_controller_RTS+0x16>
     554:	c2 30       	cpi	r28, 0x02	; 2
     556:	39 f0       	breq	.+14     	; 0x566 <CAN_controller_RTS+0x22>
     558:	08 c0       	rjmp	.+16     	; 0x56a <CAN_controller_RTS+0x26>
		case 0:
			SPI_masterWrite(MCP_RTS_TX0);
     55a:	81 e8       	ldi	r24, 0x81	; 129
     55c:	a6 d0       	rcall	.+332    	; 0x6aa <SPI_masterWrite>
			break;
		case 1:
			SPI_masterWrite(MCP_RTS_TX1);
     55e:	05 c0       	rjmp	.+10     	; 0x56a <CAN_controller_RTS+0x26>
     560:	82 e8       	ldi	r24, 0x82	; 130
			break;
     562:	a3 d0       	rcall	.+326    	; 0x6aa <SPI_masterWrite>
		case 2:
			SPI_masterWrite(MCP_RTS_TX2);
     564:	02 c0       	rjmp	.+4      	; 0x56a <CAN_controller_RTS+0x26>
     566:	84 e8       	ldi	r24, 0x84	; 132
			break;
		default: 
			break;
			
	}
	SPI_setChipSelect(PB7, 1);
     568:	a0 d0       	rcall	.+320    	; 0x6aa <SPI_masterWrite>
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	87 e0       	ldi	r24, 0x07	; 7
     56e:	a8 d0       	rcall	.+336    	; 0x6c0 <SPI_setChipSelect>
}
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	d8 2f       	mov	r29, r24
	
	CAN_controller_reset();
     57a:	d4 df       	rcall	.-88     	; 0x524 <CAN_controller_reset>
	printf("CAN reset done\n\r");
     57c:	8c e0       	ldi	r24, 0x0C	; 12
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	9f 93       	push	r25
     582:	8f 93       	push	r24
     584:	56 d1       	rcall	.+684    	; 0x832 <printf>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     586:	8e e0       	ldi	r24, 0x0E	; 14
     588:	91 df       	rcall	.-222    	; 0x4ac <CAN_controller_read>
     58a:	c8 2f       	mov	r28, r24
     58c:	8d e1       	ldi	r24, 0x1D	; 29
	printf("Read status register\n\r");
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	4e d1       	rcall	.+668    	; 0x832 <printf>
     596:	8c 2f       	mov	r24, r28
	uint8_t mode_bits = (status & MODE_MASK);
     598:	80 7e       	andi	r24, 0xE0	; 224
     59a:	0f 90       	pop	r0
	if (mode_bits != MODE_CONFIG) {
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	80 38       	cpi	r24, 0x80	; 128
     5a4:	61 f0       	breq	.+24     	; 0x5be <CAN_controller_setMode+0x4a>
     5a6:	1f 92       	push	r1
		printf("Not in config mode, \t %i\n\r", mode_bits);
     5a8:	8f 93       	push	r24
     5aa:	84 e3       	ldi	r24, 0x34	; 52
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	3f d1       	rcall	.+638    	; 0x832 <printf>
     5b4:	0f 90       	pop	r0
		return;
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	1e c0       	rjmp	.+60     	; 0x5fa <CAN_controller_setMode+0x86>
	}
	
	
	 //set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     5be:	4d 2f       	mov	r20, r29
     5c0:	4c 60       	ori	r20, 0x0C	; 12
     5c2:	6f e0       	ldi	r22, 0x0F	; 15
     5c4:	8e ee       	ldi	r24, 0xEE	; 238
     5c6:	96 df       	rcall	.-212    	; 0x4f4 <CAN_controller_bitModify>
     5c8:	2f ef       	ldi	r18, 0xFF	; 255
     5ca:	83 ec       	ldi	r24, 0xC3	; 195
     5cc:	99 e0       	ldi	r25, 0x09	; 9
     5ce:	21 50       	subi	r18, 0x01	; 1
     5d0:	80 40       	sbci	r24, 0x00	; 0
     5d2:	90 40       	sbci	r25, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <CAN_controller_setMode+0x5a>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <CAN_controller_setMode+0x64>
     5d8:	00 00       	nop
	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     5da:	8e e0       	ldi	r24, 0x0E	; 14
     5dc:	67 df       	rcall	.-306    	; 0x4ac <CAN_controller_read>
     5de:	80 7e       	andi	r24, 0xE0	; 224
	mode_bits = (status & MODE_MASK);
     5e0:	d8 17       	cp	r29, r24
	if (mode_bits != mode) {
     5e2:	59 f0       	breq	.+22     	; 0x5fa <CAN_controller_setMode+0x86>
			printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     5e4:	1f 92       	push	r1
     5e6:	8f 93       	push	r24
     5e8:	8f e4       	ldi	r24, 0x4F	; 79
     5ea:	93 e0       	ldi	r25, 0x03	; 3
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	20 d1       	rcall	.+576    	; 0x832 <printf>
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	df 91       	pop	r29

	}

}
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <CAN_controller_init>:
     600:	8f e6       	ldi	r24, 0x6F	; 111
	SPI_masterWrite(MCP_RESET);
	SPI_setChipSelect(PB7, 1);
}
void CAN_controller_init() {
	
	printf("Can controller init \n\r");
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	14 d1       	rcall	.+552    	; 0x832 <printf>
	SPI_masterInit();
     60a:	46 d0       	rcall	.+140    	; 0x698 <SPI_masterInit>
     60c:	86 e8       	ldi	r24, 0x86	; 134
	printf("SPI master init done \n\r");
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	0e d1       	rcall	.+540    	; 0x832 <printf>

	CAN_controller_setMode(MODE_LOOPBACK);
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	ad df       	rcall	.-166    	; 0x574 <CAN_controller_setMode>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     61a:	40 e6       	ldi	r20, 0x60	; 96
     61c:	60 e6       	ldi	r22, 0x60	; 96
     61e:	80 e6       	ldi	r24, 0x60	; 96
     620:	69 df       	rcall	.-302    	; 0x4f4 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	6b e2       	ldi	r22, 0x2B	; 43
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	65 df       	rcall	.-310    	; 0x4f4 <CAN_controller_bitModify>
	printf("Modes set \n\r");
     62a:	8e e9       	ldi	r24, 0x9E	; 158
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	ff d0       	rcall	.+510    	; 0x832 <printf>
     634:	78 94       	sei

	//set interrupt on 2560
	//Global interrupt enable
	sei();
     636:	ec 9a       	sbi	0x1d, 4	; 29
	//SREG |= (1 << I);
	EIMSK |= 1 << INT4;	//interrupt on pin INT4
     638:	ea e6       	ldi	r30, 0x6A	; 106
	EICRB |= 1 << ISC41; //Turn on falling edge
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	82 60       	ori	r24, 0x02	; 2
     640:	80 83       	st	Z, r24
     642:	80 81       	ld	r24, Z
	EICRB &= ~(1 << ISC40); //....
     644:	8e 7f       	andi	r24, 0xFE	; 254
     646:	80 83       	st	Z, r24
     648:	8d b1       	in	r24, 0x0d	; 13

//set PD2 as input
	DDRE  &= (1 << PE4); //set as input.
     64a:	80 71       	andi	r24, 0x10	; 16
     64c:	8d b9       	out	0x0d, r24	; 13
     64e:	2f ef       	ldi	r18, 0xFF	; 255
     650:	83 ec       	ldi	r24, 0xC3	; 195
     652:	99 e0       	ldi	r25, 0x09	; 9
     654:	21 50       	subi	r18, 0x01	; 1
     656:	80 40       	sbci	r24, 0x00	; 0
     658:	90 40       	sbci	r25, 0x00	; 0
     65a:	e1 f7       	brne	.-8      	; 0x654 <CAN_controller_init+0x54>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <CAN_controller_init+0x5e>
     65e:	00 00       	nop
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     660:	8b ea       	ldi	r24, 0xAB	; 171
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	e4 d0       	rcall	.+456    	; 0x832 <printf>
     66a:	8e e0       	ldi	r24, 0x0E	; 14
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     66c:	1f df       	rcall	.-450    	; 0x4ac <CAN_controller_read>
     66e:	1f 92       	push	r1
	printf("Data: %i\n\r", status);
     670:	8f 93       	push	r24
     672:	84 ec       	ldi	r24, 0xC4	; 196
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	db d0       	rcall	.+438    	; 0x832 <printf>
     67c:	8d b7       	in	r24, 0x3d	; 61
     67e:	9e b7       	in	r25, 0x3e	; 62

}
     680:	0c 96       	adiw	r24, 0x0c	; 12
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	9e bf       	out	0x3e, r25	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	8d bf       	out	0x3d, r24	; 61
     68c:	08 95       	ret

0000068e <setupInit>:
#include "setup.h"
#include "timer.h"

	void setupInit(void){
	//cli();
	USART_init(MYUBRR);
     68e:	87 e6       	ldi	r24, 0x67	; 103
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	43 d0       	rcall	.+134    	; 0x71a <USART_init>
	CAN_controller_init();
     694:	b5 cf       	rjmp	.-150    	; 0x600 <CAN_controller_init>
     696:	08 95       	ret

00000698 <SPI_masterInit>:
     698:	84 b1       	in	r24, 0x04	; 4
	SPI_setChipSelect(PB7, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB3);
	SPCR = (1 << SPE);
     69a:	87 60       	ori	r24, 0x07	; 7
     69c:	84 b9       	out	0x04, r24	; 4
     69e:	27 9a       	sbi	0x04, 7	; 4
     6a0:	8c b5       	in	r24, 0x2c	; 44
     6a2:	81 65       	ori	r24, 0x51	; 81
     6a4:	8c bd       	out	0x2c, r24	; 44
     6a6:	2f 9a       	sbi	0x05, 7	; 5
     6a8:	08 95       	ret

000006aa <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     6aa:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     6ac:	0d b4       	in	r0, 0x2d	; 45
     6ae:	07 fe       	sbrs	r0, 7
     6b0:	fd cf       	rjmp	.-6      	; 0x6ac <SPI_masterWrite+0x2>

}
     6b2:	08 95       	ret

000006b4 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     6b4:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <SPI_masterRead+0x2>
	return SPDR;
     6bc:	8e b5       	in	r24, 0x2e	; 46
}
     6be:	08 95       	ret

000006c0 <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     6c0:	66 23       	and	r22, r22
     6c2:	69 f0       	breq	.+26     	; 0x6de <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     6c4:	45 b1       	in	r20, 0x05	; 5
     6c6:	21 e0       	ldi	r18, 0x01	; 1
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	b9 01       	movw	r22, r18
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <SPI_setChipSelect+0x12>
     6ce:	66 0f       	add	r22, r22
     6d0:	77 1f       	adc	r23, r23
     6d2:	8a 95       	dec	r24
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <SPI_setChipSelect+0xe>
     6d6:	cb 01       	movw	r24, r22
     6d8:	84 2b       	or	r24, r20
     6da:	85 b9       	out	0x05, r24	; 5
     6dc:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     6de:	45 b1       	in	r20, 0x05	; 5
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	b9 01       	movw	r22, r18
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <SPI_setChipSelect+0x2c>
     6e8:	66 0f       	add	r22, r22
     6ea:	77 1f       	adc	r23, r23
     6ec:	8a 95       	dec	r24
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <SPI_setChipSelect+0x28>
     6f0:	cb 01       	movw	r24, r22
     6f2:	80 95       	com	r24
     6f4:	84 23       	and	r24, r20
     6f6:	85 b9       	out	0x05, r24	; 5
     6f8:	08 95       	ret

000006fa <USART_transmitChar>:
	printf("uart setup finished\n\r");
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     6fa:	e0 ec       	ldi	r30, 0xC0	; 192
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	90 81       	ld	r25, Z
     700:	95 ff       	sbrs	r25, 5
     702:	fd cf       	rjmp	.-6      	; 0x6fe <USART_transmitChar+0x4>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     704:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     708:	08 95       	ret

0000070a <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     70a:	e0 ec       	ldi	r30, 0xC0	; 192
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	88 23       	and	r24, r24
     712:	ec f7       	brge	.-6      	; 0x70e <USART_receiveChar+0x4>
		;
	
	return UDR0;
     714:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     718:	08 95       	ret

0000071a <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     71a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char) (ubrr);
     71e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     722:	88 e1       	ldi	r24, 0x18	; 24
     724:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	
	
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
     728:	8e e0       	ldi	r24, 0x0E	; 14
     72a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     72e:	65 e8       	ldi	r22, 0x85	; 133
     730:	73 e0       	ldi	r23, 0x03	; 3
     732:	8d e7       	ldi	r24, 0x7D	; 125
     734:	93 e0       	ldi	r25, 0x03	; 3
     736:	33 d0       	rcall	.+102    	; 0x79e <fdevopen>
     738:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <uart+0x1>
     73c:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <uart>
	printf("uart setup finished\n\r");
     740:	8f ec       	ldi	r24, 0xCF	; 207
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	9f 93       	push	r25
     746:	8f 93       	push	r24
     748:	74 d0       	rcall	.+232    	; 0x832 <printf>
}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	08 95       	ret

00000750 <__divmodhi4>:
     750:	97 fb       	bst	r25, 7
     752:	07 2e       	mov	r0, r23
     754:	16 f4       	brtc	.+4      	; 0x75a <__divmodhi4+0xa>
     756:	00 94       	com	r0
     758:	06 d0       	rcall	.+12     	; 0x766 <__divmodhi4_neg1>
     75a:	77 fd       	sbrc	r23, 7
     75c:	08 d0       	rcall	.+16     	; 0x76e <__divmodhi4_neg2>
     75e:	0b d0       	rcall	.+22     	; 0x776 <__udivmodhi4>
     760:	07 fc       	sbrc	r0, 7
     762:	05 d0       	rcall	.+10     	; 0x76e <__divmodhi4_neg2>
     764:	3e f4       	brtc	.+14     	; 0x774 <__divmodhi4_exit>

00000766 <__divmodhi4_neg1>:
     766:	90 95       	com	r25
     768:	81 95       	neg	r24
     76a:	9f 4f       	sbci	r25, 0xFF	; 255
     76c:	08 95       	ret

0000076e <__divmodhi4_neg2>:
     76e:	70 95       	com	r23
     770:	61 95       	neg	r22
     772:	7f 4f       	sbci	r23, 0xFF	; 255

00000774 <__divmodhi4_exit>:
     774:	08 95       	ret

00000776 <__udivmodhi4>:
     776:	aa 1b       	sub	r26, r26
     778:	bb 1b       	sub	r27, r27
     77a:	51 e1       	ldi	r21, 0x11	; 17
     77c:	07 c0       	rjmp	.+14     	; 0x78c <__udivmodhi4_ep>

0000077e <__udivmodhi4_loop>:
     77e:	aa 1f       	adc	r26, r26
     780:	bb 1f       	adc	r27, r27
     782:	a6 17       	cp	r26, r22
     784:	b7 07       	cpc	r27, r23
     786:	10 f0       	brcs	.+4      	; 0x78c <__udivmodhi4_ep>
     788:	a6 1b       	sub	r26, r22
     78a:	b7 0b       	sbc	r27, r23

0000078c <__udivmodhi4_ep>:
     78c:	88 1f       	adc	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	5a 95       	dec	r21
     792:	a9 f7       	brne	.-22     	; 0x77e <__udivmodhi4_loop>
     794:	80 95       	com	r24
     796:	90 95       	com	r25
     798:	bc 01       	movw	r22, r24
     79a:	cd 01       	movw	r24, r26
     79c:	08 95       	ret

0000079e <fdevopen>:
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	31 f4       	brne	.+12     	; 0x7b6 <fdevopen+0x18>
     7aa:	61 15       	cp	r22, r1
     7ac:	71 05       	cpc	r23, r1
     7ae:	19 f4       	brne	.+6      	; 0x7b6 <fdevopen+0x18>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	39 c0       	rjmp	.+114    	; 0x828 <fdevopen+0x8a>
     7b6:	8b 01       	movw	r16, r22
     7b8:	ec 01       	movw	r28, r24
     7ba:	6e e0       	ldi	r22, 0x0E	; 14
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	47 d2       	rcall	.+1166   	; 0xc52 <calloc>
     7c4:	fc 01       	movw	r30, r24
     7c6:	89 2b       	or	r24, r25
     7c8:	99 f3       	breq	.-26     	; 0x7b0 <fdevopen+0x12>
     7ca:	80 e8       	ldi	r24, 0x80	; 128
     7cc:	83 83       	std	Z+3, r24	; 0x03
     7ce:	01 15       	cp	r16, r1
     7d0:	11 05       	cpc	r17, r1
     7d2:	71 f0       	breq	.+28     	; 0x7f0 <fdevopen+0x52>
     7d4:	13 87       	std	Z+11, r17	; 0x0b
     7d6:	02 87       	std	Z+10, r16	; 0x0a
     7d8:	81 e8       	ldi	r24, 0x81	; 129
     7da:	83 83       	std	Z+3, r24	; 0x03
     7dc:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <__iob>
     7e0:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <__iob+0x1>
     7e4:	89 2b       	or	r24, r25
     7e6:	21 f4       	brne	.+8      	; 0x7f0 <fdevopen+0x52>
     7e8:	f0 93 f7 03 	sts	0x03F7, r31	; 0x8003f7 <__iob+0x1>
     7ec:	e0 93 f6 03 	sts	0x03F6, r30	; 0x8003f6 <__iob>
     7f0:	20 97       	sbiw	r28, 0x00	; 0
     7f2:	c9 f0       	breq	.+50     	; 0x826 <fdevopen+0x88>
     7f4:	d1 87       	std	Z+9, r29	; 0x09
     7f6:	c0 87       	std	Z+8, r28	; 0x08
     7f8:	83 81       	ldd	r24, Z+3	; 0x03
     7fa:	82 60       	ori	r24, 0x02	; 2
     7fc:	83 83       	std	Z+3, r24	; 0x03
     7fe:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <__iob+0x2>
     802:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <__iob+0x3>
     806:	89 2b       	or	r24, r25
     808:	71 f4       	brne	.+28     	; 0x826 <fdevopen+0x88>
     80a:	f0 93 f9 03 	sts	0x03F9, r31	; 0x8003f9 <__iob+0x3>
     80e:	e0 93 f8 03 	sts	0x03F8, r30	; 0x8003f8 <__iob+0x2>
     812:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <__iob+0x4>
     816:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <__iob+0x5>
     81a:	89 2b       	or	r24, r25
     81c:	21 f4       	brne	.+8      	; 0x826 <fdevopen+0x88>
     81e:	f0 93 fb 03 	sts	0x03FB, r31	; 0x8003fb <__iob+0x5>
     822:	e0 93 fa 03 	sts	0x03FA, r30	; 0x8003fa <__iob+0x4>
     826:	cf 01       	movw	r24, r30
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	08 95       	ret

00000832 <printf>:
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	ae 01       	movw	r20, r28
     83c:	4a 5f       	subi	r20, 0xFA	; 250
     83e:	5f 4f       	sbci	r21, 0xFF	; 255
     840:	fa 01       	movw	r30, r20
     842:	61 91       	ld	r22, Z+
     844:	71 91       	ld	r23, Z+
     846:	af 01       	movw	r20, r30
     848:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <__iob+0x2>
     84c:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <__iob+0x3>
     850:	03 d0       	rcall	.+6      	; 0x858 <vfprintf>
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <vfprintf>:
     858:	2f 92       	push	r2
     85a:	3f 92       	push	r3
     85c:	4f 92       	push	r4
     85e:	5f 92       	push	r5
     860:	6f 92       	push	r6
     862:	7f 92       	push	r7
     864:	8f 92       	push	r8
     866:	9f 92       	push	r9
     868:	af 92       	push	r10
     86a:	bf 92       	push	r11
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	2b 97       	sbiw	r28, 0x0b	; 11
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	6c 01       	movw	r12, r24
     88e:	7b 01       	movw	r14, r22
     890:	8a 01       	movw	r16, r20
     892:	fc 01       	movw	r30, r24
     894:	17 82       	std	Z+7, r1	; 0x07
     896:	16 82       	std	Z+6, r1	; 0x06
     898:	83 81       	ldd	r24, Z+3	; 0x03
     89a:	81 ff       	sbrs	r24, 1
     89c:	bf c1       	rjmp	.+894    	; 0xc1c <vfprintf+0x3c4>
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	3c 01       	movw	r6, r24
     8a4:	f6 01       	movw	r30, r12
     8a6:	93 81       	ldd	r25, Z+3	; 0x03
     8a8:	f7 01       	movw	r30, r14
     8aa:	93 fd       	sbrc	r25, 3
     8ac:	85 91       	lpm	r24, Z+
     8ae:	93 ff       	sbrs	r25, 3
     8b0:	81 91       	ld	r24, Z+
     8b2:	7f 01       	movw	r14, r30
     8b4:	88 23       	and	r24, r24
     8b6:	09 f4       	brne	.+2      	; 0x8ba <vfprintf+0x62>
     8b8:	ad c1       	rjmp	.+858    	; 0xc14 <vfprintf+0x3bc>
     8ba:	85 32       	cpi	r24, 0x25	; 37
     8bc:	39 f4       	brne	.+14     	; 0x8cc <vfprintf+0x74>
     8be:	93 fd       	sbrc	r25, 3
     8c0:	85 91       	lpm	r24, Z+
     8c2:	93 ff       	sbrs	r25, 3
     8c4:	81 91       	ld	r24, Z+
     8c6:	7f 01       	movw	r14, r30
     8c8:	85 32       	cpi	r24, 0x25	; 37
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <vfprintf+0x7c>
     8cc:	b6 01       	movw	r22, r12
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	18 d3       	rcall	.+1584   	; 0xf02 <fputc>
     8d2:	e8 cf       	rjmp	.-48     	; 0x8a4 <vfprintf+0x4c>
     8d4:	91 2c       	mov	r9, r1
     8d6:	21 2c       	mov	r2, r1
     8d8:	31 2c       	mov	r3, r1
     8da:	ff e1       	ldi	r31, 0x1F	; 31
     8dc:	f3 15       	cp	r31, r3
     8de:	d8 f0       	brcs	.+54     	; 0x916 <vfprintf+0xbe>
     8e0:	8b 32       	cpi	r24, 0x2B	; 43
     8e2:	79 f0       	breq	.+30     	; 0x902 <vfprintf+0xaa>
     8e4:	38 f4       	brcc	.+14     	; 0x8f4 <vfprintf+0x9c>
     8e6:	80 32       	cpi	r24, 0x20	; 32
     8e8:	79 f0       	breq	.+30     	; 0x908 <vfprintf+0xb0>
     8ea:	83 32       	cpi	r24, 0x23	; 35
     8ec:	a1 f4       	brne	.+40     	; 0x916 <vfprintf+0xbe>
     8ee:	23 2d       	mov	r18, r3
     8f0:	20 61       	ori	r18, 0x10	; 16
     8f2:	1d c0       	rjmp	.+58     	; 0x92e <vfprintf+0xd6>
     8f4:	8d 32       	cpi	r24, 0x2D	; 45
     8f6:	61 f0       	breq	.+24     	; 0x910 <vfprintf+0xb8>
     8f8:	80 33       	cpi	r24, 0x30	; 48
     8fa:	69 f4       	brne	.+26     	; 0x916 <vfprintf+0xbe>
     8fc:	23 2d       	mov	r18, r3
     8fe:	21 60       	ori	r18, 0x01	; 1
     900:	16 c0       	rjmp	.+44     	; 0x92e <vfprintf+0xd6>
     902:	83 2d       	mov	r24, r3
     904:	82 60       	ori	r24, 0x02	; 2
     906:	38 2e       	mov	r3, r24
     908:	e3 2d       	mov	r30, r3
     90a:	e4 60       	ori	r30, 0x04	; 4
     90c:	3e 2e       	mov	r3, r30
     90e:	2a c0       	rjmp	.+84     	; 0x964 <vfprintf+0x10c>
     910:	f3 2d       	mov	r31, r3
     912:	f8 60       	ori	r31, 0x08	; 8
     914:	1d c0       	rjmp	.+58     	; 0x950 <vfprintf+0xf8>
     916:	37 fc       	sbrc	r3, 7
     918:	2d c0       	rjmp	.+90     	; 0x974 <vfprintf+0x11c>
     91a:	20 ed       	ldi	r18, 0xD0	; 208
     91c:	28 0f       	add	r18, r24
     91e:	2a 30       	cpi	r18, 0x0A	; 10
     920:	40 f0       	brcs	.+16     	; 0x932 <vfprintf+0xda>
     922:	8e 32       	cpi	r24, 0x2E	; 46
     924:	b9 f4       	brne	.+46     	; 0x954 <vfprintf+0xfc>
     926:	36 fc       	sbrc	r3, 6
     928:	75 c1       	rjmp	.+746    	; 0xc14 <vfprintf+0x3bc>
     92a:	23 2d       	mov	r18, r3
     92c:	20 64       	ori	r18, 0x40	; 64
     92e:	32 2e       	mov	r3, r18
     930:	19 c0       	rjmp	.+50     	; 0x964 <vfprintf+0x10c>
     932:	36 fe       	sbrs	r3, 6
     934:	06 c0       	rjmp	.+12     	; 0x942 <vfprintf+0xea>
     936:	8a e0       	ldi	r24, 0x0A	; 10
     938:	98 9e       	mul	r9, r24
     93a:	20 0d       	add	r18, r0
     93c:	11 24       	eor	r1, r1
     93e:	92 2e       	mov	r9, r18
     940:	11 c0       	rjmp	.+34     	; 0x964 <vfprintf+0x10c>
     942:	ea e0       	ldi	r30, 0x0A	; 10
     944:	2e 9e       	mul	r2, r30
     946:	20 0d       	add	r18, r0
     948:	11 24       	eor	r1, r1
     94a:	22 2e       	mov	r2, r18
     94c:	f3 2d       	mov	r31, r3
     94e:	f0 62       	ori	r31, 0x20	; 32
     950:	3f 2e       	mov	r3, r31
     952:	08 c0       	rjmp	.+16     	; 0x964 <vfprintf+0x10c>
     954:	8c 36       	cpi	r24, 0x6C	; 108
     956:	21 f4       	brne	.+8      	; 0x960 <vfprintf+0x108>
     958:	83 2d       	mov	r24, r3
     95a:	80 68       	ori	r24, 0x80	; 128
     95c:	38 2e       	mov	r3, r24
     95e:	02 c0       	rjmp	.+4      	; 0x964 <vfprintf+0x10c>
     960:	88 36       	cpi	r24, 0x68	; 104
     962:	41 f4       	brne	.+16     	; 0x974 <vfprintf+0x11c>
     964:	f7 01       	movw	r30, r14
     966:	93 fd       	sbrc	r25, 3
     968:	85 91       	lpm	r24, Z+
     96a:	93 ff       	sbrs	r25, 3
     96c:	81 91       	ld	r24, Z+
     96e:	7f 01       	movw	r14, r30
     970:	81 11       	cpse	r24, r1
     972:	b3 cf       	rjmp	.-154    	; 0x8da <vfprintf+0x82>
     974:	98 2f       	mov	r25, r24
     976:	9f 7d       	andi	r25, 0xDF	; 223
     978:	95 54       	subi	r25, 0x45	; 69
     97a:	93 30       	cpi	r25, 0x03	; 3
     97c:	28 f4       	brcc	.+10     	; 0x988 <vfprintf+0x130>
     97e:	0c 5f       	subi	r16, 0xFC	; 252
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	9f e3       	ldi	r25, 0x3F	; 63
     984:	99 83       	std	Y+1, r25	; 0x01
     986:	0d c0       	rjmp	.+26     	; 0x9a2 <vfprintf+0x14a>
     988:	83 36       	cpi	r24, 0x63	; 99
     98a:	31 f0       	breq	.+12     	; 0x998 <vfprintf+0x140>
     98c:	83 37       	cpi	r24, 0x73	; 115
     98e:	71 f0       	breq	.+28     	; 0x9ac <vfprintf+0x154>
     990:	83 35       	cpi	r24, 0x53	; 83
     992:	09 f0       	breq	.+2      	; 0x996 <vfprintf+0x13e>
     994:	55 c0       	rjmp	.+170    	; 0xa40 <vfprintf+0x1e8>
     996:	20 c0       	rjmp	.+64     	; 0x9d8 <vfprintf+0x180>
     998:	f8 01       	movw	r30, r16
     99a:	80 81       	ld	r24, Z
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	0e 5f       	subi	r16, 0xFE	; 254
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	88 24       	eor	r8, r8
     9a4:	83 94       	inc	r8
     9a6:	91 2c       	mov	r9, r1
     9a8:	53 01       	movw	r10, r6
     9aa:	12 c0       	rjmp	.+36     	; 0x9d0 <vfprintf+0x178>
     9ac:	28 01       	movw	r4, r16
     9ae:	f2 e0       	ldi	r31, 0x02	; 2
     9b0:	4f 0e       	add	r4, r31
     9b2:	51 1c       	adc	r5, r1
     9b4:	f8 01       	movw	r30, r16
     9b6:	a0 80       	ld	r10, Z
     9b8:	b1 80       	ldd	r11, Z+1	; 0x01
     9ba:	36 fe       	sbrs	r3, 6
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <vfprintf+0x16c>
     9be:	69 2d       	mov	r22, r9
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <vfprintf+0x170>
     9c4:	6f ef       	ldi	r22, 0xFF	; 255
     9c6:	7f ef       	ldi	r23, 0xFF	; 255
     9c8:	c5 01       	movw	r24, r10
     9ca:	90 d2       	rcall	.+1312   	; 0xeec <strnlen>
     9cc:	4c 01       	movw	r8, r24
     9ce:	82 01       	movw	r16, r4
     9d0:	f3 2d       	mov	r31, r3
     9d2:	ff 77       	andi	r31, 0x7F	; 127
     9d4:	3f 2e       	mov	r3, r31
     9d6:	15 c0       	rjmp	.+42     	; 0xa02 <vfprintf+0x1aa>
     9d8:	28 01       	movw	r4, r16
     9da:	22 e0       	ldi	r18, 0x02	; 2
     9dc:	42 0e       	add	r4, r18
     9de:	51 1c       	adc	r5, r1
     9e0:	f8 01       	movw	r30, r16
     9e2:	a0 80       	ld	r10, Z
     9e4:	b1 80       	ldd	r11, Z+1	; 0x01
     9e6:	36 fe       	sbrs	r3, 6
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <vfprintf+0x198>
     9ea:	69 2d       	mov	r22, r9
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <vfprintf+0x19c>
     9f0:	6f ef       	ldi	r22, 0xFF	; 255
     9f2:	7f ef       	ldi	r23, 0xFF	; 255
     9f4:	c5 01       	movw	r24, r10
     9f6:	68 d2       	rcall	.+1232   	; 0xec8 <strnlen_P>
     9f8:	4c 01       	movw	r8, r24
     9fa:	f3 2d       	mov	r31, r3
     9fc:	f0 68       	ori	r31, 0x80	; 128
     9fe:	3f 2e       	mov	r3, r31
     a00:	82 01       	movw	r16, r4
     a02:	33 fc       	sbrc	r3, 3
     a04:	19 c0       	rjmp	.+50     	; 0xa38 <vfprintf+0x1e0>
     a06:	82 2d       	mov	r24, r2
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	88 16       	cp	r8, r24
     a0c:	99 06       	cpc	r9, r25
     a0e:	a0 f4       	brcc	.+40     	; 0xa38 <vfprintf+0x1e0>
     a10:	b6 01       	movw	r22, r12
     a12:	80 e2       	ldi	r24, 0x20	; 32
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	75 d2       	rcall	.+1258   	; 0xf02 <fputc>
     a18:	2a 94       	dec	r2
     a1a:	f5 cf       	rjmp	.-22     	; 0xa06 <vfprintf+0x1ae>
     a1c:	f5 01       	movw	r30, r10
     a1e:	37 fc       	sbrc	r3, 7
     a20:	85 91       	lpm	r24, Z+
     a22:	37 fe       	sbrs	r3, 7
     a24:	81 91       	ld	r24, Z+
     a26:	5f 01       	movw	r10, r30
     a28:	b6 01       	movw	r22, r12
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	6a d2       	rcall	.+1236   	; 0xf02 <fputc>
     a2e:	21 10       	cpse	r2, r1
     a30:	2a 94       	dec	r2
     a32:	21 e0       	ldi	r18, 0x01	; 1
     a34:	82 1a       	sub	r8, r18
     a36:	91 08       	sbc	r9, r1
     a38:	81 14       	cp	r8, r1
     a3a:	91 04       	cpc	r9, r1
     a3c:	79 f7       	brne	.-34     	; 0xa1c <vfprintf+0x1c4>
     a3e:	e1 c0       	rjmp	.+450    	; 0xc02 <vfprintf+0x3aa>
     a40:	84 36       	cpi	r24, 0x64	; 100
     a42:	11 f0       	breq	.+4      	; 0xa48 <vfprintf+0x1f0>
     a44:	89 36       	cpi	r24, 0x69	; 105
     a46:	39 f5       	brne	.+78     	; 0xa96 <vfprintf+0x23e>
     a48:	f8 01       	movw	r30, r16
     a4a:	37 fe       	sbrs	r3, 7
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <vfprintf+0x204>
     a4e:	60 81       	ld	r22, Z
     a50:	71 81       	ldd	r23, Z+1	; 0x01
     a52:	82 81       	ldd	r24, Z+2	; 0x02
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	0c 5f       	subi	r16, 0xFC	; 252
     a58:	1f 4f       	sbci	r17, 0xFF	; 255
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <vfprintf+0x214>
     a5c:	60 81       	ld	r22, Z
     a5e:	71 81       	ldd	r23, Z+1	; 0x01
     a60:	07 2e       	mov	r0, r23
     a62:	00 0c       	add	r0, r0
     a64:	88 0b       	sbc	r24, r24
     a66:	99 0b       	sbc	r25, r25
     a68:	0e 5f       	subi	r16, 0xFE	; 254
     a6a:	1f 4f       	sbci	r17, 0xFF	; 255
     a6c:	f3 2d       	mov	r31, r3
     a6e:	ff 76       	andi	r31, 0x6F	; 111
     a70:	3f 2e       	mov	r3, r31
     a72:	97 ff       	sbrs	r25, 7
     a74:	09 c0       	rjmp	.+18     	; 0xa88 <vfprintf+0x230>
     a76:	90 95       	com	r25
     a78:	80 95       	com	r24
     a7a:	70 95       	com	r23
     a7c:	61 95       	neg	r22
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	8f 4f       	sbci	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	f0 68       	ori	r31, 0x80	; 128
     a86:	3f 2e       	mov	r3, r31
     a88:	2a e0       	ldi	r18, 0x0A	; 10
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	a3 01       	movw	r20, r6
     a8e:	75 d2       	rcall	.+1258   	; 0xf7a <__ultoa_invert>
     a90:	88 2e       	mov	r8, r24
     a92:	86 18       	sub	r8, r6
     a94:	44 c0       	rjmp	.+136    	; 0xb1e <vfprintf+0x2c6>
     a96:	85 37       	cpi	r24, 0x75	; 117
     a98:	31 f4       	brne	.+12     	; 0xaa6 <vfprintf+0x24e>
     a9a:	23 2d       	mov	r18, r3
     a9c:	2f 7e       	andi	r18, 0xEF	; 239
     a9e:	b2 2e       	mov	r11, r18
     aa0:	2a e0       	ldi	r18, 0x0A	; 10
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	25 c0       	rjmp	.+74     	; 0xaf0 <vfprintf+0x298>
     aa6:	93 2d       	mov	r25, r3
     aa8:	99 7f       	andi	r25, 0xF9	; 249
     aaa:	b9 2e       	mov	r11, r25
     aac:	8f 36       	cpi	r24, 0x6F	; 111
     aae:	c1 f0       	breq	.+48     	; 0xae0 <vfprintf+0x288>
     ab0:	18 f4       	brcc	.+6      	; 0xab8 <vfprintf+0x260>
     ab2:	88 35       	cpi	r24, 0x58	; 88
     ab4:	79 f0       	breq	.+30     	; 0xad4 <vfprintf+0x27c>
     ab6:	ae c0       	rjmp	.+348    	; 0xc14 <vfprintf+0x3bc>
     ab8:	80 37       	cpi	r24, 0x70	; 112
     aba:	19 f0       	breq	.+6      	; 0xac2 <vfprintf+0x26a>
     abc:	88 37       	cpi	r24, 0x78	; 120
     abe:	21 f0       	breq	.+8      	; 0xac8 <vfprintf+0x270>
     ac0:	a9 c0       	rjmp	.+338    	; 0xc14 <vfprintf+0x3bc>
     ac2:	e9 2f       	mov	r30, r25
     ac4:	e0 61       	ori	r30, 0x10	; 16
     ac6:	be 2e       	mov	r11, r30
     ac8:	b4 fe       	sbrs	r11, 4
     aca:	0d c0       	rjmp	.+26     	; 0xae6 <vfprintf+0x28e>
     acc:	fb 2d       	mov	r31, r11
     ace:	f4 60       	ori	r31, 0x04	; 4
     ad0:	bf 2e       	mov	r11, r31
     ad2:	09 c0       	rjmp	.+18     	; 0xae6 <vfprintf+0x28e>
     ad4:	34 fe       	sbrs	r3, 4
     ad6:	0a c0       	rjmp	.+20     	; 0xaec <vfprintf+0x294>
     ad8:	29 2f       	mov	r18, r25
     ada:	26 60       	ori	r18, 0x06	; 6
     adc:	b2 2e       	mov	r11, r18
     ade:	06 c0       	rjmp	.+12     	; 0xaec <vfprintf+0x294>
     ae0:	28 e0       	ldi	r18, 0x08	; 8
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <vfprintf+0x298>
     ae6:	20 e1       	ldi	r18, 0x10	; 16
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <vfprintf+0x298>
     aec:	20 e1       	ldi	r18, 0x10	; 16
     aee:	32 e0       	ldi	r19, 0x02	; 2
     af0:	f8 01       	movw	r30, r16
     af2:	b7 fe       	sbrs	r11, 7
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <vfprintf+0x2ac>
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	93 81       	ldd	r25, Z+3	; 0x03
     afe:	0c 5f       	subi	r16, 0xFC	; 252
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <vfprintf+0x2b8>
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 5f       	subi	r16, 0xFE	; 254
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	a3 01       	movw	r20, r6
     b12:	33 d2       	rcall	.+1126   	; 0xf7a <__ultoa_invert>
     b14:	88 2e       	mov	r8, r24
     b16:	86 18       	sub	r8, r6
     b18:	fb 2d       	mov	r31, r11
     b1a:	ff 77       	andi	r31, 0x7F	; 127
     b1c:	3f 2e       	mov	r3, r31
     b1e:	36 fe       	sbrs	r3, 6
     b20:	0d c0       	rjmp	.+26     	; 0xb3c <vfprintf+0x2e4>
     b22:	23 2d       	mov	r18, r3
     b24:	2e 7f       	andi	r18, 0xFE	; 254
     b26:	a2 2e       	mov	r10, r18
     b28:	89 14       	cp	r8, r9
     b2a:	58 f4       	brcc	.+22     	; 0xb42 <vfprintf+0x2ea>
     b2c:	34 fe       	sbrs	r3, 4
     b2e:	0b c0       	rjmp	.+22     	; 0xb46 <vfprintf+0x2ee>
     b30:	32 fc       	sbrc	r3, 2
     b32:	09 c0       	rjmp	.+18     	; 0xb46 <vfprintf+0x2ee>
     b34:	83 2d       	mov	r24, r3
     b36:	8e 7e       	andi	r24, 0xEE	; 238
     b38:	a8 2e       	mov	r10, r24
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <vfprintf+0x2ee>
     b3c:	b8 2c       	mov	r11, r8
     b3e:	a3 2c       	mov	r10, r3
     b40:	03 c0       	rjmp	.+6      	; 0xb48 <vfprintf+0x2f0>
     b42:	b8 2c       	mov	r11, r8
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <vfprintf+0x2f0>
     b46:	b9 2c       	mov	r11, r9
     b48:	a4 fe       	sbrs	r10, 4
     b4a:	0f c0       	rjmp	.+30     	; 0xb6a <vfprintf+0x312>
     b4c:	fe 01       	movw	r30, r28
     b4e:	e8 0d       	add	r30, r8
     b50:	f1 1d       	adc	r31, r1
     b52:	80 81       	ld	r24, Z
     b54:	80 33       	cpi	r24, 0x30	; 48
     b56:	21 f4       	brne	.+8      	; 0xb60 <vfprintf+0x308>
     b58:	9a 2d       	mov	r25, r10
     b5a:	99 7e       	andi	r25, 0xE9	; 233
     b5c:	a9 2e       	mov	r10, r25
     b5e:	09 c0       	rjmp	.+18     	; 0xb72 <vfprintf+0x31a>
     b60:	a2 fe       	sbrs	r10, 2
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <vfprintf+0x318>
     b64:	b3 94       	inc	r11
     b66:	b3 94       	inc	r11
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <vfprintf+0x31a>
     b6a:	8a 2d       	mov	r24, r10
     b6c:	86 78       	andi	r24, 0x86	; 134
     b6e:	09 f0       	breq	.+2      	; 0xb72 <vfprintf+0x31a>
     b70:	b3 94       	inc	r11
     b72:	a3 fc       	sbrc	r10, 3
     b74:	10 c0       	rjmp	.+32     	; 0xb96 <vfprintf+0x33e>
     b76:	a0 fe       	sbrs	r10, 0
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <vfprintf+0x32e>
     b7a:	b2 14       	cp	r11, r2
     b7c:	80 f4       	brcc	.+32     	; 0xb9e <vfprintf+0x346>
     b7e:	28 0c       	add	r2, r8
     b80:	92 2c       	mov	r9, r2
     b82:	9b 18       	sub	r9, r11
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <vfprintf+0x348>
     b86:	b2 14       	cp	r11, r2
     b88:	58 f4       	brcc	.+22     	; 0xba0 <vfprintf+0x348>
     b8a:	b6 01       	movw	r22, r12
     b8c:	80 e2       	ldi	r24, 0x20	; 32
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	b8 d1       	rcall	.+880    	; 0xf02 <fputc>
     b92:	b3 94       	inc	r11
     b94:	f8 cf       	rjmp	.-16     	; 0xb86 <vfprintf+0x32e>
     b96:	b2 14       	cp	r11, r2
     b98:	18 f4       	brcc	.+6      	; 0xba0 <vfprintf+0x348>
     b9a:	2b 18       	sub	r2, r11
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <vfprintf+0x34a>
     b9e:	98 2c       	mov	r9, r8
     ba0:	21 2c       	mov	r2, r1
     ba2:	a4 fe       	sbrs	r10, 4
     ba4:	0f c0       	rjmp	.+30     	; 0xbc4 <vfprintf+0x36c>
     ba6:	b6 01       	movw	r22, r12
     ba8:	80 e3       	ldi	r24, 0x30	; 48
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	aa d1       	rcall	.+852    	; 0xf02 <fputc>
     bae:	a2 fe       	sbrs	r10, 2
     bb0:	16 c0       	rjmp	.+44     	; 0xbde <vfprintf+0x386>
     bb2:	a1 fc       	sbrc	r10, 1
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <vfprintf+0x364>
     bb6:	88 e7       	ldi	r24, 0x78	; 120
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <vfprintf+0x368>
     bbc:	88 e5       	ldi	r24, 0x58	; 88
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	b6 01       	movw	r22, r12
     bc2:	0c c0       	rjmp	.+24     	; 0xbdc <vfprintf+0x384>
     bc4:	8a 2d       	mov	r24, r10
     bc6:	86 78       	andi	r24, 0x86	; 134
     bc8:	51 f0       	breq	.+20     	; 0xbde <vfprintf+0x386>
     bca:	a1 fe       	sbrs	r10, 1
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <vfprintf+0x37a>
     bce:	8b e2       	ldi	r24, 0x2B	; 43
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <vfprintf+0x37c>
     bd2:	80 e2       	ldi	r24, 0x20	; 32
     bd4:	a7 fc       	sbrc	r10, 7
     bd6:	8d e2       	ldi	r24, 0x2D	; 45
     bd8:	b6 01       	movw	r22, r12
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	92 d1       	rcall	.+804    	; 0xf02 <fputc>
     bde:	89 14       	cp	r8, r9
     be0:	30 f4       	brcc	.+12     	; 0xbee <vfprintf+0x396>
     be2:	b6 01       	movw	r22, r12
     be4:	80 e3       	ldi	r24, 0x30	; 48
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	8c d1       	rcall	.+792    	; 0xf02 <fputc>
     bea:	9a 94       	dec	r9
     bec:	f8 cf       	rjmp	.-16     	; 0xbde <vfprintf+0x386>
     bee:	8a 94       	dec	r8
     bf0:	f3 01       	movw	r30, r6
     bf2:	e8 0d       	add	r30, r8
     bf4:	f1 1d       	adc	r31, r1
     bf6:	80 81       	ld	r24, Z
     bf8:	b6 01       	movw	r22, r12
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	82 d1       	rcall	.+772    	; 0xf02 <fputc>
     bfe:	81 10       	cpse	r8, r1
     c00:	f6 cf       	rjmp	.-20     	; 0xbee <vfprintf+0x396>
     c02:	22 20       	and	r2, r2
     c04:	09 f4       	brne	.+2      	; 0xc08 <vfprintf+0x3b0>
     c06:	4e ce       	rjmp	.-868    	; 0x8a4 <vfprintf+0x4c>
     c08:	b6 01       	movw	r22, r12
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	79 d1       	rcall	.+754    	; 0xf02 <fputc>
     c10:	2a 94       	dec	r2
     c12:	f7 cf       	rjmp	.-18     	; 0xc02 <vfprintf+0x3aa>
     c14:	f6 01       	movw	r30, r12
     c16:	86 81       	ldd	r24, Z+6	; 0x06
     c18:	97 81       	ldd	r25, Z+7	; 0x07
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <vfprintf+0x3c8>
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	9f ef       	ldi	r25, 0xFF	; 255
     c20:	2b 96       	adiw	r28, 0x0b	; 11
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	9f 90       	pop	r9
     c42:	8f 90       	pop	r8
     c44:	7f 90       	pop	r7
     c46:	6f 90       	pop	r6
     c48:	5f 90       	pop	r5
     c4a:	4f 90       	pop	r4
     c4c:	3f 90       	pop	r3
     c4e:	2f 90       	pop	r2
     c50:	08 95       	ret

00000c52 <calloc>:
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	86 9f       	mul	r24, r22
     c5c:	80 01       	movw	r16, r0
     c5e:	87 9f       	mul	r24, r23
     c60:	10 0d       	add	r17, r0
     c62:	96 9f       	mul	r25, r22
     c64:	10 0d       	add	r17, r0
     c66:	11 24       	eor	r1, r1
     c68:	c8 01       	movw	r24, r16
     c6a:	0d d0       	rcall	.+26     	; 0xc86 <malloc>
     c6c:	ec 01       	movw	r28, r24
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	21 f0       	breq	.+8      	; 0xc7a <calloc+0x28>
     c72:	a8 01       	movw	r20, r16
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	32 d1       	rcall	.+612    	; 0xede <memset>
     c7a:	ce 01       	movw	r24, r28
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <malloc>:
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	82 30       	cpi	r24, 0x02	; 2
     c90:	91 05       	cpc	r25, r1
     c92:	10 f4       	brcc	.+4      	; 0xc98 <malloc+0x12>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <__flp>
     c9c:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <__flp+0x1>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	30 97       	sbiw	r30, 0x00	; 0
     caa:	19 f1       	breq	.+70     	; 0xcf2 <malloc+0x6c>
     cac:	40 81       	ld	r20, Z
     cae:	51 81       	ldd	r21, Z+1	; 0x01
     cb0:	02 81       	ldd	r16, Z+2	; 0x02
     cb2:	13 81       	ldd	r17, Z+3	; 0x03
     cb4:	48 17       	cp	r20, r24
     cb6:	59 07       	cpc	r21, r25
     cb8:	c8 f0       	brcs	.+50     	; 0xcec <malloc+0x66>
     cba:	84 17       	cp	r24, r20
     cbc:	95 07       	cpc	r25, r21
     cbe:	69 f4       	brne	.+26     	; 0xcda <malloc+0x54>
     cc0:	10 97       	sbiw	r26, 0x00	; 0
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <malloc+0x4a>
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	0c 93       	st	X, r16
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	13 96       	adiw	r26, 0x03	; 3
     ccc:	1c 93       	st	X, r17
     cce:	27 c0       	rjmp	.+78     	; 0xd1e <malloc+0x98>
     cd0:	00 93 fe 03 	sts	0x03FE, r16	; 0x8003fe <__flp>
     cd4:	10 93 ff 03 	sts	0x03FF, r17	; 0x8003ff <__flp+0x1>
     cd8:	22 c0       	rjmp	.+68     	; 0xd1e <malloc+0x98>
     cda:	21 15       	cp	r18, r1
     cdc:	31 05       	cpc	r19, r1
     cde:	19 f0       	breq	.+6      	; 0xce6 <malloc+0x60>
     ce0:	42 17       	cp	r20, r18
     ce2:	53 07       	cpc	r21, r19
     ce4:	18 f4       	brcc	.+6      	; 0xcec <malloc+0x66>
     ce6:	9a 01       	movw	r18, r20
     ce8:	bd 01       	movw	r22, r26
     cea:	ef 01       	movw	r28, r30
     cec:	df 01       	movw	r26, r30
     cee:	f8 01       	movw	r30, r16
     cf0:	db cf       	rjmp	.-74     	; 0xca8 <malloc+0x22>
     cf2:	21 15       	cp	r18, r1
     cf4:	31 05       	cpc	r19, r1
     cf6:	f9 f0       	breq	.+62     	; 0xd36 <malloc+0xb0>
     cf8:	28 1b       	sub	r18, r24
     cfa:	39 0b       	sbc	r19, r25
     cfc:	24 30       	cpi	r18, 0x04	; 4
     cfe:	31 05       	cpc	r19, r1
     d00:	80 f4       	brcc	.+32     	; 0xd22 <malloc+0x9c>
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
     d06:	61 15       	cp	r22, r1
     d08:	71 05       	cpc	r23, r1
     d0a:	21 f0       	breq	.+8      	; 0xd14 <malloc+0x8e>
     d0c:	fb 01       	movw	r30, r22
     d0e:	93 83       	std	Z+3, r25	; 0x03
     d10:	82 83       	std	Z+2, r24	; 0x02
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <malloc+0x96>
     d14:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <__flp+0x1>
     d18:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <__flp>
     d1c:	fe 01       	movw	r30, r28
     d1e:	32 96       	adiw	r30, 0x02	; 2
     d20:	44 c0       	rjmp	.+136    	; 0xdaa <malloc+0x124>
     d22:	fe 01       	movw	r30, r28
     d24:	e2 0f       	add	r30, r18
     d26:	f3 1f       	adc	r31, r19
     d28:	81 93       	st	Z+, r24
     d2a:	91 93       	st	Z+, r25
     d2c:	22 50       	subi	r18, 0x02	; 2
     d2e:	31 09       	sbc	r19, r1
     d30:	39 83       	std	Y+1, r19	; 0x01
     d32:	28 83       	st	Y, r18
     d34:	3a c0       	rjmp	.+116    	; 0xdaa <malloc+0x124>
     d36:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <__brkval>
     d3a:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <__brkval+0x1>
     d3e:	23 2b       	or	r18, r19
     d40:	41 f4       	brne	.+16     	; 0xd52 <malloc+0xcc>
     d42:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     d46:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     d4a:	30 93 fd 03 	sts	0x03FD, r19	; 0x8003fd <__brkval+0x1>
     d4e:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <__brkval>
     d52:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     d56:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     d5a:	21 15       	cp	r18, r1
     d5c:	31 05       	cpc	r19, r1
     d5e:	41 f4       	brne	.+16     	; 0xd70 <malloc+0xea>
     d60:	2d b7       	in	r18, 0x3d	; 61
     d62:	3e b7       	in	r19, 0x3e	; 62
     d64:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     d68:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     d6c:	24 1b       	sub	r18, r20
     d6e:	35 0b       	sbc	r19, r21
     d70:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <__brkval>
     d74:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <__brkval+0x1>
     d78:	e2 17       	cp	r30, r18
     d7a:	f3 07       	cpc	r31, r19
     d7c:	a0 f4       	brcc	.+40     	; 0xda6 <malloc+0x120>
     d7e:	2e 1b       	sub	r18, r30
     d80:	3f 0b       	sbc	r19, r31
     d82:	28 17       	cp	r18, r24
     d84:	39 07       	cpc	r19, r25
     d86:	78 f0       	brcs	.+30     	; 0xda6 <malloc+0x120>
     d88:	ac 01       	movw	r20, r24
     d8a:	4e 5f       	subi	r20, 0xFE	; 254
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	24 17       	cp	r18, r20
     d90:	35 07       	cpc	r19, r21
     d92:	48 f0       	brcs	.+18     	; 0xda6 <malloc+0x120>
     d94:	4e 0f       	add	r20, r30
     d96:	5f 1f       	adc	r21, r31
     d98:	50 93 fd 03 	sts	0x03FD, r21	; 0x8003fd <__brkval+0x1>
     d9c:	40 93 fc 03 	sts	0x03FC, r20	; 0x8003fc <__brkval>
     da0:	81 93       	st	Z+, r24
     da2:	91 93       	st	Z+, r25
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <malloc+0x124>
     da6:	e0 e0       	ldi	r30, 0x00	; 0
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	cf 01       	movw	r24, r30
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <free>:
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <free+0xa>
     dbe:	81 c0       	rjmp	.+258    	; 0xec2 <free+0x10c>
     dc0:	fc 01       	movw	r30, r24
     dc2:	32 97       	sbiw	r30, 0x02	; 2
     dc4:	13 82       	std	Z+3, r1	; 0x03
     dc6:	12 82       	std	Z+2, r1	; 0x02
     dc8:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <__flp>
     dcc:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <__flp+0x1>
     dd0:	10 97       	sbiw	r26, 0x00	; 0
     dd2:	81 f4       	brne	.+32     	; 0xdf4 <free+0x3e>
     dd4:	20 81       	ld	r18, Z
     dd6:	31 81       	ldd	r19, Z+1	; 0x01
     dd8:	82 0f       	add	r24, r18
     dda:	93 1f       	adc	r25, r19
     ddc:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <__brkval>
     de0:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <__brkval+0x1>
     de4:	28 17       	cp	r18, r24
     de6:	39 07       	cpc	r19, r25
     de8:	51 f5       	brne	.+84     	; 0xe3e <free+0x88>
     dea:	f0 93 fd 03 	sts	0x03FD, r31	; 0x8003fd <__brkval+0x1>
     dee:	e0 93 fc 03 	sts	0x03FC, r30	; 0x8003fc <__brkval>
     df2:	67 c0       	rjmp	.+206    	; 0xec2 <free+0x10c>
     df4:	ed 01       	movw	r28, r26
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	ce 17       	cp	r28, r30
     dfc:	df 07       	cpc	r29, r31
     dfe:	40 f4       	brcc	.+16     	; 0xe10 <free+0x5a>
     e00:	4a 81       	ldd	r20, Y+2	; 0x02
     e02:	5b 81       	ldd	r21, Y+3	; 0x03
     e04:	9e 01       	movw	r18, r28
     e06:	41 15       	cp	r20, r1
     e08:	51 05       	cpc	r21, r1
     e0a:	f1 f0       	breq	.+60     	; 0xe48 <free+0x92>
     e0c:	ea 01       	movw	r28, r20
     e0e:	f5 cf       	rjmp	.-22     	; 0xdfa <free+0x44>
     e10:	d3 83       	std	Z+3, r29	; 0x03
     e12:	c2 83       	std	Z+2, r28	; 0x02
     e14:	40 81       	ld	r20, Z
     e16:	51 81       	ldd	r21, Z+1	; 0x01
     e18:	84 0f       	add	r24, r20
     e1a:	95 1f       	adc	r25, r21
     e1c:	c8 17       	cp	r28, r24
     e1e:	d9 07       	cpc	r29, r25
     e20:	59 f4       	brne	.+22     	; 0xe38 <free+0x82>
     e22:	88 81       	ld	r24, Y
     e24:	99 81       	ldd	r25, Y+1	; 0x01
     e26:	84 0f       	add	r24, r20
     e28:	95 1f       	adc	r25, r21
     e2a:	02 96       	adiw	r24, 0x02	; 2
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	93 83       	std	Z+3, r25	; 0x03
     e36:	82 83       	std	Z+2, r24	; 0x02
     e38:	21 15       	cp	r18, r1
     e3a:	31 05       	cpc	r19, r1
     e3c:	29 f4       	brne	.+10     	; 0xe48 <free+0x92>
     e3e:	f0 93 ff 03 	sts	0x03FF, r31	; 0x8003ff <__flp+0x1>
     e42:	e0 93 fe 03 	sts	0x03FE, r30	; 0x8003fe <__flp>
     e46:	3d c0       	rjmp	.+122    	; 0xec2 <free+0x10c>
     e48:	e9 01       	movw	r28, r18
     e4a:	fb 83       	std	Y+3, r31	; 0x03
     e4c:	ea 83       	std	Y+2, r30	; 0x02
     e4e:	49 91       	ld	r20, Y+
     e50:	59 91       	ld	r21, Y+
     e52:	c4 0f       	add	r28, r20
     e54:	d5 1f       	adc	r29, r21
     e56:	ec 17       	cp	r30, r28
     e58:	fd 07       	cpc	r31, r29
     e5a:	61 f4       	brne	.+24     	; 0xe74 <free+0xbe>
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	84 0f       	add	r24, r20
     e62:	95 1f       	adc	r25, r21
     e64:	02 96       	adiw	r24, 0x02	; 2
     e66:	e9 01       	movw	r28, r18
     e68:	99 83       	std	Y+1, r25	; 0x01
     e6a:	88 83       	st	Y, r24
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	9b 83       	std	Y+3, r25	; 0x03
     e72:	8a 83       	std	Y+2, r24	; 0x02
     e74:	e0 e0       	ldi	r30, 0x00	; 0
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	12 96       	adiw	r26, 0x02	; 2
     e7a:	8d 91       	ld	r24, X+
     e7c:	9c 91       	ld	r25, X
     e7e:	13 97       	sbiw	r26, 0x03	; 3
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	19 f0       	breq	.+6      	; 0xe8a <free+0xd4>
     e84:	fd 01       	movw	r30, r26
     e86:	dc 01       	movw	r26, r24
     e88:	f7 cf       	rjmp	.-18     	; 0xe78 <free+0xc2>
     e8a:	8d 91       	ld	r24, X+
     e8c:	9c 91       	ld	r25, X
     e8e:	11 97       	sbiw	r26, 0x01	; 1
     e90:	9d 01       	movw	r18, r26
     e92:	2e 5f       	subi	r18, 0xFE	; 254
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
     e9a:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <__brkval>
     e9e:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <__brkval+0x1>
     ea2:	28 17       	cp	r18, r24
     ea4:	39 07       	cpc	r19, r25
     ea6:	69 f4       	brne	.+26     	; 0xec2 <free+0x10c>
     ea8:	30 97       	sbiw	r30, 0x00	; 0
     eaa:	29 f4       	brne	.+10     	; 0xeb6 <free+0x100>
     eac:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <__flp+0x1>
     eb0:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <__flp>
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <free+0x104>
     eb6:	13 82       	std	Z+3, r1	; 0x03
     eb8:	12 82       	std	Z+2, r1	; 0x02
     eba:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <__brkval+0x1>
     ebe:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <__brkval>
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <strnlen_P>:
     ec8:	fc 01       	movw	r30, r24
     eca:	05 90       	lpm	r0, Z+
     ecc:	61 50       	subi	r22, 0x01	; 1
     ece:	70 40       	sbci	r23, 0x00	; 0
     ed0:	01 10       	cpse	r0, r1
     ed2:	d8 f7       	brcc	.-10     	; 0xeca <strnlen_P+0x2>
     ed4:	80 95       	com	r24
     ed6:	90 95       	com	r25
     ed8:	8e 0f       	add	r24, r30
     eda:	9f 1f       	adc	r25, r31
     edc:	08 95       	ret

00000ede <memset>:
     ede:	dc 01       	movw	r26, r24
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <memset+0x6>
     ee2:	6d 93       	st	X+, r22
     ee4:	41 50       	subi	r20, 0x01	; 1
     ee6:	50 40       	sbci	r21, 0x00	; 0
     ee8:	e0 f7       	brcc	.-8      	; 0xee2 <memset+0x4>
     eea:	08 95       	ret

00000eec <strnlen>:
     eec:	fc 01       	movw	r30, r24
     eee:	61 50       	subi	r22, 0x01	; 1
     ef0:	70 40       	sbci	r23, 0x00	; 0
     ef2:	01 90       	ld	r0, Z+
     ef4:	01 10       	cpse	r0, r1
     ef6:	d8 f7       	brcc	.-10     	; 0xeee <strnlen+0x2>
     ef8:	80 95       	com	r24
     efa:	90 95       	com	r25
     efc:	8e 0f       	add	r24, r30
     efe:	9f 1f       	adc	r25, r31
     f00:	08 95       	ret

00000f02 <fputc>:
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	fb 01       	movw	r30, r22
     f0c:	23 81       	ldd	r18, Z+3	; 0x03
     f0e:	21 fd       	sbrc	r18, 1
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <fputc+0x16>
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	2c c0       	rjmp	.+88     	; 0xf70 <fputc+0x6e>
     f18:	22 ff       	sbrs	r18, 2
     f1a:	16 c0       	rjmp	.+44     	; 0xf48 <fputc+0x46>
     f1c:	46 81       	ldd	r20, Z+6	; 0x06
     f1e:	57 81       	ldd	r21, Z+7	; 0x07
     f20:	24 81       	ldd	r18, Z+4	; 0x04
     f22:	35 81       	ldd	r19, Z+5	; 0x05
     f24:	42 17       	cp	r20, r18
     f26:	53 07       	cpc	r21, r19
     f28:	44 f4       	brge	.+16     	; 0xf3a <fputc+0x38>
     f2a:	a0 81       	ld	r26, Z
     f2c:	b1 81       	ldd	r27, Z+1	; 0x01
     f2e:	9d 01       	movw	r18, r26
     f30:	2f 5f       	subi	r18, 0xFF	; 255
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	20 83       	st	Z, r18
     f38:	8c 93       	st	X, r24
     f3a:	26 81       	ldd	r18, Z+6	; 0x06
     f3c:	37 81       	ldd	r19, Z+7	; 0x07
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	37 83       	std	Z+7, r19	; 0x07
     f44:	26 83       	std	Z+6, r18	; 0x06
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <fputc+0x6e>
     f48:	8b 01       	movw	r16, r22
     f4a:	ec 01       	movw	r28, r24
     f4c:	fb 01       	movw	r30, r22
     f4e:	00 84       	ldd	r0, Z+8	; 0x08
     f50:	f1 85       	ldd	r31, Z+9	; 0x09
     f52:	e0 2d       	mov	r30, r0
     f54:	19 95       	eicall
     f56:	89 2b       	or	r24, r25
     f58:	e1 f6       	brne	.-72     	; 0xf12 <fputc+0x10>
     f5a:	d8 01       	movw	r26, r16
     f5c:	16 96       	adiw	r26, 0x06	; 6
     f5e:	8d 91       	ld	r24, X+
     f60:	9c 91       	ld	r25, X
     f62:	17 97       	sbiw	r26, 0x07	; 7
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	17 96       	adiw	r26, 0x07	; 7
     f68:	9c 93       	st	X, r25
     f6a:	8e 93       	st	-X, r24
     f6c:	16 97       	sbiw	r26, 0x06	; 6
     f6e:	ce 01       	movw	r24, r28
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	08 95       	ret

00000f7a <__ultoa_invert>:
     f7a:	fa 01       	movw	r30, r20
     f7c:	aa 27       	eor	r26, r26
     f7e:	28 30       	cpi	r18, 0x08	; 8
     f80:	51 f1       	breq	.+84     	; 0xfd6 <__ultoa_invert+0x5c>
     f82:	20 31       	cpi	r18, 0x10	; 16
     f84:	81 f1       	breq	.+96     	; 0xfe6 <__ultoa_invert+0x6c>
     f86:	e8 94       	clt
     f88:	6f 93       	push	r22
     f8a:	6e 7f       	andi	r22, 0xFE	; 254
     f8c:	6e 5f       	subi	r22, 0xFE	; 254
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	8f 4f       	sbci	r24, 0xFF	; 255
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	af 4f       	sbci	r26, 0xFF	; 255
     f96:	b1 e0       	ldi	r27, 0x01	; 1
     f98:	3e d0       	rcall	.+124    	; 0x1016 <__ultoa_invert+0x9c>
     f9a:	b4 e0       	ldi	r27, 0x04	; 4
     f9c:	3c d0       	rcall	.+120    	; 0x1016 <__ultoa_invert+0x9c>
     f9e:	67 0f       	add	r22, r23
     fa0:	78 1f       	adc	r23, r24
     fa2:	89 1f       	adc	r24, r25
     fa4:	9a 1f       	adc	r25, r26
     fa6:	a1 1d       	adc	r26, r1
     fa8:	68 0f       	add	r22, r24
     faa:	79 1f       	adc	r23, r25
     fac:	8a 1f       	adc	r24, r26
     fae:	91 1d       	adc	r25, r1
     fb0:	a1 1d       	adc	r26, r1
     fb2:	6a 0f       	add	r22, r26
     fb4:	71 1d       	adc	r23, r1
     fb6:	81 1d       	adc	r24, r1
     fb8:	91 1d       	adc	r25, r1
     fba:	a1 1d       	adc	r26, r1
     fbc:	20 d0       	rcall	.+64     	; 0xffe <__ultoa_invert+0x84>
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <__ultoa_invert+0x48>
     fc0:	68 94       	set
     fc2:	3f 91       	pop	r19
     fc4:	2a e0       	ldi	r18, 0x0A	; 10
     fc6:	26 9f       	mul	r18, r22
     fc8:	11 24       	eor	r1, r1
     fca:	30 19       	sub	r19, r0
     fcc:	30 5d       	subi	r19, 0xD0	; 208
     fce:	31 93       	st	Z+, r19
     fd0:	de f6       	brtc	.-74     	; 0xf88 <__ultoa_invert+0xe>
     fd2:	cf 01       	movw	r24, r30
     fd4:	08 95       	ret
     fd6:	46 2f       	mov	r20, r22
     fd8:	47 70       	andi	r20, 0x07	; 7
     fda:	40 5d       	subi	r20, 0xD0	; 208
     fdc:	41 93       	st	Z+, r20
     fde:	b3 e0       	ldi	r27, 0x03	; 3
     fe0:	0f d0       	rcall	.+30     	; 0x1000 <__ultoa_invert+0x86>
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__ultoa_invert+0x5c>
     fe4:	f6 cf       	rjmp	.-20     	; 0xfd2 <__ultoa_invert+0x58>
     fe6:	46 2f       	mov	r20, r22
     fe8:	4f 70       	andi	r20, 0x0F	; 15
     fea:	40 5d       	subi	r20, 0xD0	; 208
     fec:	4a 33       	cpi	r20, 0x3A	; 58
     fee:	18 f0       	brcs	.+6      	; 0xff6 <__ultoa_invert+0x7c>
     ff0:	49 5d       	subi	r20, 0xD9	; 217
     ff2:	31 fd       	sbrc	r19, 1
     ff4:	40 52       	subi	r20, 0x20	; 32
     ff6:	41 93       	st	Z+, r20
     ff8:	02 d0       	rcall	.+4      	; 0xffe <__ultoa_invert+0x84>
     ffa:	a9 f7       	brne	.-22     	; 0xfe6 <__ultoa_invert+0x6c>
     ffc:	ea cf       	rjmp	.-44     	; 0xfd2 <__ultoa_invert+0x58>
     ffe:	b4 e0       	ldi	r27, 0x04	; 4
    1000:	a6 95       	lsr	r26
    1002:	97 95       	ror	r25
    1004:	87 95       	ror	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	ba 95       	dec	r27
    100c:	c9 f7       	brne	.-14     	; 0x1000 <__ultoa_invert+0x86>
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	61 05       	cpc	r22, r1
    1012:	71 05       	cpc	r23, r1
    1014:	08 95       	ret
    1016:	9b 01       	movw	r18, r22
    1018:	ac 01       	movw	r20, r24
    101a:	0a 2e       	mov	r0, r26
    101c:	06 94       	lsr	r0
    101e:	57 95       	ror	r21
    1020:	47 95       	ror	r20
    1022:	37 95       	ror	r19
    1024:	27 95       	ror	r18
    1026:	ba 95       	dec	r27
    1028:	c9 f7       	brne	.-14     	; 0x101c <__ultoa_invert+0xa2>
    102a:	62 0f       	add	r22, r18
    102c:	73 1f       	adc	r23, r19
    102e:	84 1f       	adc	r24, r20
    1030:	95 1f       	adc	r25, r21
    1032:	a0 1d       	adc	r26, r0
    1034:	08 95       	ret

00001036 <_exit>:
    1036:	f8 94       	cli

00001038 <__stop_program>:
    1038:	ff cf       	rjmp	.-2      	; 0x1038 <__stop_program>
