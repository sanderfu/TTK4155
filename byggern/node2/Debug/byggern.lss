
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800200  000015ac  00001640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800374  00800374  000017b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000230d  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001599  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000111b  00000000  00000000  000052fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a8  00000000  00000000  0000641c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000959  00000000  00000000  000068c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c98  00000000  00000000  0000721d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007eb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
       2:	00 00       	nop
       4:	a6 c0       	rjmp	.+332    	; 0x152 <__bad_interrupt>
       6:	00 00       	nop
       8:	a4 c0       	rjmp	.+328    	; 0x152 <__bad_interrupt>
       a:	00 00       	nop
       c:	a2 c0       	rjmp	.+324    	; 0x152 <__bad_interrupt>
       e:	00 00       	nop
      10:	a0 c0       	rjmp	.+320    	; 0x152 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__vector_5>
      16:	00 00       	nop
      18:	9c c0       	rjmp	.+312    	; 0x152 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9a c0       	rjmp	.+308    	; 0x152 <__bad_interrupt>
      1e:	00 00       	nop
      20:	98 c0       	rjmp	.+304    	; 0x152 <__bad_interrupt>
      22:	00 00       	nop
      24:	96 c0       	rjmp	.+300    	; 0x152 <__bad_interrupt>
      26:	00 00       	nop
      28:	94 c0       	rjmp	.+296    	; 0x152 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	92 c0       	rjmp	.+292    	; 0x152 <__bad_interrupt>
      2e:	00 00       	nop
      30:	90 c0       	rjmp	.+288    	; 0x152 <__bad_interrupt>
      32:	00 00       	nop
      34:	8e c0       	rjmp	.+284    	; 0x152 <__bad_interrupt>
      36:	00 00       	nop
      38:	8c c0       	rjmp	.+280    	; 0x152 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8a c0       	rjmp	.+276    	; 0x152 <__bad_interrupt>
      3e:	00 00       	nop
      40:	88 c0       	rjmp	.+272    	; 0x152 <__bad_interrupt>
      42:	00 00       	nop
      44:	86 c0       	rjmp	.+268    	; 0x152 <__bad_interrupt>
      46:	00 00       	nop
      48:	84 c0       	rjmp	.+264    	; 0x152 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	82 c0       	rjmp	.+260    	; 0x152 <__bad_interrupt>
      4e:	00 00       	nop
      50:	80 c0       	rjmp	.+256    	; 0x152 <__bad_interrupt>
      52:	00 00       	nop
      54:	7e c0       	rjmp	.+252    	; 0x152 <__bad_interrupt>
      56:	00 00       	nop
      58:	7c c0       	rjmp	.+248    	; 0x152 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7a c0       	rjmp	.+244    	; 0x152 <__bad_interrupt>
      5e:	00 00       	nop
      60:	78 c0       	rjmp	.+240    	; 0x152 <__bad_interrupt>
      62:	00 00       	nop
      64:	76 c0       	rjmp	.+236    	; 0x152 <__bad_interrupt>
      66:	00 00       	nop
      68:	74 c0       	rjmp	.+232    	; 0x152 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	72 c0       	rjmp	.+228    	; 0x152 <__bad_interrupt>
      6e:	00 00       	nop
      70:	70 c0       	rjmp	.+224    	; 0x152 <__bad_interrupt>
      72:	00 00       	nop
      74:	6e c0       	rjmp	.+220    	; 0x152 <__bad_interrupt>
      76:	00 00       	nop
      78:	6c c0       	rjmp	.+216    	; 0x152 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6a c0       	rjmp	.+212    	; 0x152 <__bad_interrupt>
      7e:	00 00       	nop
      80:	68 c0       	rjmp	.+208    	; 0x152 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__vector_33>
      86:	00 00       	nop
      88:	64 c0       	rjmp	.+200    	; 0x152 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	62 c0       	rjmp	.+196    	; 0x152 <__bad_interrupt>
      8e:	00 00       	nop
      90:	60 c0       	rjmp	.+192    	; 0x152 <__bad_interrupt>
      92:	00 00       	nop
      94:	5e c0       	rjmp	.+188    	; 0x152 <__bad_interrupt>
      96:	00 00       	nop
      98:	5c c0       	rjmp	.+184    	; 0x152 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5a c0       	rjmp	.+180    	; 0x152 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	58 c0       	rjmp	.+176    	; 0x152 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	56 c0       	rjmp	.+172    	; 0x152 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	54 c0       	rjmp	.+168    	; 0x152 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	52 c0       	rjmp	.+164    	; 0x152 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	50 c0       	rjmp	.+160    	; 0x152 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4e c0       	rjmp	.+156    	; 0x152 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4c c0       	rjmp	.+152    	; 0x152 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4a c0       	rjmp	.+148    	; 0x152 <__bad_interrupt>
      be:	00 00       	nop
      c0:	48 c0       	rjmp	.+144    	; 0x152 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	46 c0       	rjmp	.+140    	; 0x152 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	44 c0       	rjmp	.+136    	; 0x152 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	42 c0       	rjmp	.+132    	; 0x152 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	40 c0       	rjmp	.+128    	; 0x152 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3e c0       	rjmp	.+124    	; 0x152 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3c c0       	rjmp	.+120    	; 0x152 <__bad_interrupt>
      da:	00 00       	nop
      dc:	3a c0       	rjmp	.+116    	; 0x152 <__bad_interrupt>
      de:	00 00       	nop
      e0:	38 c0       	rjmp	.+112    	; 0x152 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	ec ea       	ldi	r30, 0xAC	; 172
     12a:	f5 e1       	ldi	r31, 0x15	; 21
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 37       	cpi	r26, 0x74	; 116
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	23 e0       	ldi	r18, 0x03	; 3
     13e:	a4 e7       	ldi	r26, 0x74	; 116
     140:	b3 e0       	ldi	r27, 0x03	; 3
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a1 39       	cpi	r26, 0x91	; 145
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	21 d0       	rcall	.+66     	; 0x190 <main>
     14e:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <_exit>

00000152 <__bad_interrupt>:
     152:	56 cf       	rjmp	.-340    	; 0x0 <__vectors>

00000154 <__vector_33>:
#include "pwm.h"
#include "ADC.h"
#include "sleep.h"
uint8_t timerFlag = 0;

ISR (TIMER3_COMPB_vect) {
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	8f 93       	push	r24
	
	
	timerFlag = 1;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <timerFlag>
	
	
}
     166:	8f 91       	pop	r24
     168:	0f 90       	pop	r0
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	0f 90       	pop	r0
     16e:	1f 90       	pop	r1
     170:	18 95       	reti

00000172 <__vector_5>:

volatile CAN_message_t received_message;
volatile uint8_t CANFlag = 0;
ISR (INT4_vect) {
     172:	1f 92       	push	r1
     174:	0f 92       	push	r0
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	0f 92       	push	r0
     17a:	11 24       	eor	r1, r1
     17c:	8f 93       	push	r24
	//cli();
	CANFlag= 1;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <__data_end>
	
	
	
	//sei();
	
}
     184:	8f 91       	pop	r24
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <main>:



int main(void)
//p.23 for can read instructions
{
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
     198:	2b 97       	sbiw	r28, 0x0b	; 11
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	f8 94       	cli
     19e:	de bf       	out	0x3e, r29	; 62
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	cd bf       	out	0x3d, r28	; 61
	setupInit();
     1a4:	59 d2       	rcall	.+1202   	; 0x658 <setupInit>
	printf("\n\r---------------------------------------\n\n\n\n\n\n\r");
     1a6:	86 e0       	ldi	r24, 0x06	; 6
     1a8:	92 e0       	ldi	r25, 0x02	; 2
     1aa:	9f 93       	push	r25
     1ac:	8f 93       	push	r24
     1ae:	fa d5       	rcall	.+3060   	; 0xda4 <printf>


	//test_SRAM();
	volatile CAN_message_t message;
	message.ID = 0b10101010111;
     1b0:	87 e5       	ldi	r24, 0x57	; 87
     1b2:	95 e0       	ldi	r25, 0x05	; 5
     1b4:	9a 87       	std	Y+10, r25	; 0x0a
     1b6:	89 87       	std	Y+9, r24	; 0x09
	message.data_length = 3;
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	8b 87       	std	Y+11, r24	; 0x0b
	message.data[0] = 13;
     1bc:	8d e0       	ldi	r24, 0x0D	; 13
     1be:	89 83       	std	Y+1, r24	; 0x01
	message.data[1] = 22;
     1c0:	86 e1       	ldi	r24, 0x16	; 22
     1c2:	8a 83       	std	Y+2, r24	; 0x02
	message.data[2] = 33;
     1c4:	81 e2       	ldi	r24, 0x21	; 33
     1c6:	8b 83       	std	Y+3, r24	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c8:	2f ef       	ldi	r18, 0xFF	; 255
     1ca:	87 ea       	ldi	r24, 0xA7	; 167
     1cc:	91 e6       	ldi	r25, 0x61	; 97
     1ce:	21 50       	subi	r18, 0x01	; 1
     1d0:	80 40       	sbci	r24, 0x00	; 0
     1d2:	90 40       	sbci	r25, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x3e>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x48>
     1d8:	00 00       	nop
	
	_delay_ms(2000);
	pwm_setPulseWidth(2);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e4       	ldi	r25, 0x40	; 64
    CAN_controller_setMode(MODE_NORMAL);
     1e2:	0e d2       	rcall	.+1052   	; 0x600 <pwm_setPulseWidth>
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	96 d0       	rcall	.+300    	; 0x314 <CAN_controller_setMode>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
			CAN_controller_bitModify(mask, CANINTF, 0b00);
			//sei();
			
		}
		if (timerFlag) {
			TCNT3 = 0x00;
     1ec:	0f 2e       	mov	r0, r31
     1ee:	f4 e9       	ldi	r31, 0x94	; 148
     1f0:	ef 2e       	mov	r14, r31
     1f2:	f1 2c       	mov	r15, r1
			printf("Analog value: %d\n\r", ADC_read());
     1f4:	f0 2d       	mov	r31, r0
     1f6:	07 e3       	ldi	r16, 0x37	; 55
	while (1) {
		

		//Put microcontroller to sleep until next interrupt. 

		sleep_now();
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	59 d2       	rcall	.+1202   	; 0x6ae <sleep_now>
		if (CANFlag) {
     1fc:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <__data_end>
			
			//cli();
			//printf("Message received");
			CANFlag=0;
     200:	88 23       	and	r24, r24
     202:	49 f0       	breq	.+18     	; 0x216 <main+0x86>
			
			joystick_readPositionOverCAN();
     204:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <__data_end>
			joystick_printPosition();
     208:	3e d1       	rcall	.+636    	; 0x486 <joystick_readPositionOverCAN>
			joystick_setServo();
     20a:	92 d1       	rcall	.+804    	; 0x530 <joystick_printPosition>
     20c:	b3 d1       	rcall	.+870    	; 0x574 <joystick_setServo>
			uint8_t mask = 0b11; 
			
			CAN_controller_bitModify(mask, CANINTF, 0b00);
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	6c e2       	ldi	r22, 0x2C	; 44
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	57 d0       	rcall	.+174    	; 0x2c4 <CAN_controller_bitModify>
			//sei();
			
		}
		if (timerFlag) {
     216:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <timerFlag>
     21a:	88 23       	and	r24, r24
			TCNT3 = 0x00;
     21c:	71 f3       	breq	.-36     	; 0x1fa <main+0x6a>
     21e:	f7 01       	movw	r30, r14
     220:	11 82       	std	Z+1, r1	; 0x01
			printf("Analog value: %d\n\r", ADC_read());
     222:	10 82       	st	Z, r1
     224:	14 d1       	rcall	.+552    	; 0x44e <ADC_read>
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	1f 93       	push	r17
     22c:	0f 93       	push	r16
     22e:	ba d5       	rcall	.+2932   	; 0xda4 <printf>
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	e0 cf       	rjmp	.-64     	; 0x1fa <main+0x6a>

0000023a <CAN_receiveMessage>:
     23a:	ef 92       	push	r14
	CAN_controller_RTS(buffer_number);

	//ERROR HANDLING?	
}

void CAN_receiveMessage(CAN_message_t * received_message) {
     23c:	ff 92       	push	r15
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	7c 01       	movw	r14, r24
	
	
	uint8_t buffer = 0;
	switch (buffer) {
		case 0:
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
     246:	82 e6       	ldi	r24, 0x62	; 98
     248:	2c d0       	rcall	.+88     	; 0x2a2 <CAN_controller_read>
     24a:	c8 2f       	mov	r28, r24
     24c:	81 e6       	ldi	r24, 0x61	; 97
     24e:	29 d0       	rcall	.+82     	; 0x2a2 <CAN_controller_read>
     250:	c2 95       	swap	r28
     252:	c6 95       	lsr	r28
     254:	c7 70       	andi	r28, 0x07	; 7
     256:	28 e0       	ldi	r18, 0x08	; 8
     258:	82 9f       	mul	r24, r18
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	8c 0f       	add	r24, r28
     260:	91 1d       	adc	r25, r1
     262:	f7 01       	movw	r30, r14
     264:	91 87       	std	Z+9, r25	; 0x09
     266:	80 87       	std	Z+8, r24	; 0x08
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
     268:	85 e6       	ldi	r24, 0x65	; 101
     26a:	1b d0       	rcall	.+54     	; 0x2a2 <CAN_controller_read>
     26c:	8f 70       	andi	r24, 0x0F	; 15
     26e:	f7 01       	movw	r30, r14
     270:	82 87       	std	Z+10, r24	; 0x0a
     272:	82 85       	ldd	r24, Z+10	; 0x0a
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     274:	88 23       	and	r24, r24
     276:	79 f0       	breq	.+30     	; 0x296 <CAN_receiveMessage+0x5c>
     278:	c0 e0       	ldi	r28, 0x00	; 0
     27a:	0c 2f       	mov	r16, r28
					received_message->data[i] = CAN_controller_read(MCP_RXB0D0 + i);
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	86 e6       	ldi	r24, 0x66	; 102
     280:	8c 0f       	add	r24, r28
     282:	0f d0       	rcall	.+30     	; 0x2a2 <CAN_controller_read>
     284:	f7 01       	movw	r30, r14
     286:	e0 0f       	add	r30, r16
     288:	f1 1f       	adc	r31, r17
     28a:	80 83       	st	Z, r24
     28c:	cf 5f       	subi	r28, 0xFF	; 255
				received_message->ID = ((CAN_controller_read(MCP_RXB0SIDL) & 0b11100000) >> 5) + (CAN_controller_read(MCP_RXB0SIDH) << 3); 
				
				//printf("Whole id: %i\n\r", received_message->ID);
				received_message->data_length = (CAN_controller_read(MCP_RXB0DLC) & 0b00001111);
				//printf("data length read: %i\n\r",(CAN_controller_read(MCP_RXB0DLC) & 0b00001111));
				for (uint8_t i = 0; i != received_message->data_length; i++) {
     28e:	f7 01       	movw	r30, r14
     290:	82 85       	ldd	r24, Z+10	; 0x0a
     292:	8c 13       	cpse	r24, r28
     294:	f2 cf       	rjmp	.-28     	; 0x27a <CAN_receiveMessage+0x40>
     296:	cf 91       	pop	r28
	}
	
	
	
	
}
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	08 95       	ret

000002a2 <CAN_controller_read>:
     2a2:	cf 93       	push	r28
		default: 
			break;
			
	}
	SPI_setChipSelect(PB7, 1);
}
     2a4:	c8 2f       	mov	r28, r24
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	87 e0       	ldi	r24, 0x07	; 7
     2aa:	28 d2       	rcall	.+1104   	; 0x6fc <SPI_setChipSelect>
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	1b d2       	rcall	.+1078   	; 0x6e6 <SPI_masterWrite>
     2b0:	8c 2f       	mov	r24, r28
     2b2:	19 d2       	rcall	.+1074   	; 0x6e6 <SPI_masterWrite>
     2b4:	1d d2       	rcall	.+1082   	; 0x6f0 <SPI_masterRead>
     2b6:	c8 2f       	mov	r28, r24
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	1f d2       	rcall	.+1086   	; 0x6fc <SPI_setChipSelect>
     2be:	8c 2f       	mov	r24, r28
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <CAN_controller_bitModify>:
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	d8 2f       	mov	r29, r24
     2cc:	16 2f       	mov	r17, r22
     2ce:	c4 2f       	mov	r28, r20
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	87 e0       	ldi	r24, 0x07	; 7
     2d4:	13 d2       	rcall	.+1062   	; 0x6fc <SPI_setChipSelect>
     2d6:	85 e0       	ldi	r24, 0x05	; 5
     2d8:	06 d2       	rcall	.+1036   	; 0x6e6 <SPI_masterWrite>
     2da:	81 2f       	mov	r24, r17
     2dc:	04 d2       	rcall	.+1032   	; 0x6e6 <SPI_masterWrite>
     2de:	8d 2f       	mov	r24, r29
     2e0:	02 d2       	rcall	.+1028   	; 0x6e6 <SPI_masterWrite>
     2e2:	8c 2f       	mov	r24, r28
     2e4:	00 d2       	rcall	.+1024   	; 0x6e6 <SPI_masterWrite>
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	87 e0       	ldi	r24, 0x07	; 7
     2ea:	08 d2       	rcall	.+1040   	; 0x6fc <SPI_setChipSelect>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <CAN_controller_reset>:
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	01 d2       	rcall	.+1026   	; 0x6fc <SPI_setChipSelect>
     2fa:	8a e4       	ldi	r24, 0x4A	; 74
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	50 d5       	rcall	.+2720   	; 0xda4 <printf>
     304:	80 ec       	ldi	r24, 0xC0	; 192
     306:	ef d1       	rcall	.+990    	; 0x6e6 <SPI_masterWrite>
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	87 e0       	ldi	r24, 0x07	; 7
     30c:	f7 d1       	rcall	.+1006   	; 0x6fc <SPI_setChipSelect>
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	08 95       	ret

00000314 <CAN_controller_setMode>:

void CAN_controller_setMode(uint8_t mode) {
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	c8 2f       	mov	r28, r24
	
	
	
	CAN_controller_reset();
     31a:	ec df       	rcall	.-40     	; 0x2f4 <CAN_controller_reset>
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     31c:	8e e0       	ldi	r24, 0x0E	; 14
     31e:	c1 df       	rcall	.-126    	; 0x2a2 <CAN_controller_read>
	uint8_t mode_bits = (status & MODE_MASK);
     320:	80 7e       	andi	r24, 0xE0	; 224
	
	if (mode_bits != MODE_CONFIG) {
     322:	80 38       	cpi	r24, 0x80	; 128
     324:	61 f0       	breq	.+24     	; 0x33e <CAN_controller_setMode+0x2a>
		printf("Not in config mode, \t %i\n\r", mode_bits);
     326:	1f 92       	push	r1
     328:	8f 93       	push	r24
     32a:	86 e5       	ldi	r24, 0x56	; 86
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	9f 93       	push	r25
     330:	8f 93       	push	r24
     332:	38 d5       	rcall	.+2672   	; 0xda4 <printf>
		return;
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	32 c0       	rjmp	.+100    	; 0x3a2 <CAN_controller_setMode+0x8e>
	}
	
	
	//set in loopback mode p.60 MCP2515
	CAN_controller_bitModify(0b11101110, MCP_CANCTRL, mode | (0b1100));
     33e:	4c 2f       	mov	r20, r28
     340:	4c 60       	ori	r20, 0x0C	; 12
     342:	6f e0       	ldi	r22, 0x0F	; 15
     344:	8e ee       	ldi	r24, 0xEE	; 238
     346:	be df       	rcall	.-132    	; 0x2c4 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b11111111, MCP_CANINTE, 0b1);
     348:	41 e0       	ldi	r20, 0x01	; 1
     34a:	6b e2       	ldi	r22, 0x2B	; 43
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	ba df       	rcall	.-140    	; 0x2c4 <CAN_controller_bitModify>
	CAN_controller_bitModify(0b01100000, MCP_RXB0CTRL, 0b01100000); //receive any type of message, no filter p. 27
     350:	40 e6       	ldi	r20, 0x60	; 96
     352:	60 e6       	ldi	r22, 0x60	; 96
     354:	80 e6       	ldi	r24, 0x60	; 96
     356:	b6 df       	rcall	.-148    	; 0x2c4 <CAN_controller_bitModify>
     358:	2f ef       	ldi	r18, 0xFF	; 255
     35a:	83 ec       	ldi	r24, 0xC3	; 195
     35c:	99 e0       	ldi	r25, 0x09	; 9
     35e:	21 50       	subi	r18, 0x01	; 1
     360:	80 40       	sbci	r24, 0x00	; 0
     362:	90 40       	sbci	r25, 0x00	; 0
     364:	e1 f7       	brne	.-8      	; 0x35e <CAN_controller_setMode+0x4a>
     366:	00 c0       	rjmp	.+0      	; 0x368 <CAN_controller_setMode+0x54>
     368:	00 00       	nop

	_delay_ms(200);
	status = CAN_controller_read(MCP_CANSTAT);
     36a:	8e e0       	ldi	r24, 0x0E	; 14
     36c:	9a df       	rcall	.-204    	; 0x2a2 <CAN_controller_read>
     36e:	d8 2f       	mov	r29, r24
	mode_bits = (status & MODE_MASK);
     370:	d0 7e       	andi	r29, 0xE0	; 224
     372:	cd 17       	cp	r28, r29
	if (mode_bits != mode) {
     374:	59 f0       	breq	.+22     	; 0x38c <CAN_controller_setMode+0x78>
		printf("Not in correct mode: Mode: %i\n\r", mode_bits);
     376:	1f 92       	push	r1
     378:	df 93       	push	r29
     37a:	81 e7       	ldi	r24, 0x71	; 113
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	9f 93       	push	r25
     380:	8f 93       	push	r24
     382:	10 d5       	rcall	.+2592   	; 0xda4 <printf>
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0

	}
	printf("Mode set: %i\n\r", status & MODE_MASK);
     38c:	1f 92       	push	r1
     38e:	df 93       	push	r29
     390:	81 e9       	ldi	r24, 0x91	; 145
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	9f 93       	push	r25
     396:	8f 93       	push	r24
     398:	05 d5       	rcall	.+2570   	; 0xda4 <printf>
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
}
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <CAN_controller_init>:
     3a8:	80 ea       	ldi	r24, 0xA0	; 160
	printf("CAN reset\n\r");
	SPI_masterWrite(MCP_RESET);
	SPI_setChipSelect(PB7, 1);
}
void CAN_controller_init() {
	printf("Can controller init \n\r");
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	9f 93       	push	r25
     3ae:	8f 93       	push	r24
     3b0:	f9 d4       	rcall	.+2546   	; 0xda4 <printf>
	SPI_masterInit();
     3b2:	90 d1       	rcall	.+800    	; 0x6d4 <SPI_masterInit>
     3b4:	87 eb       	ldi	r24, 0xB7	; 183
	printf("SPI master init done \n\r");
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	f3 d4       	rcall	.+2534   	; 0xda4 <printf>

	CAN_controller_setMode(MODE_NORMAL);
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	a9 df       	rcall	.-174    	; 0x314 <CAN_controller_setMode>
     3c2:	8f ec       	ldi	r24, 0xCF	; 207
	printf("Modes set \n\r");
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	9f 93       	push	r25
     3c8:	8f 93       	push	r24
     3ca:	ec d4       	rcall	.+2520   	; 0xda4 <printf>
     3cc:	ec 9a       	sbi	0x1d, 4	; 29

	//set interrupt on 2560
	
	EIMSK |= 1 << INT4;	//interrupt on pin INT4
     3ce:	ea e6       	ldi	r30, 0x6A	; 106
	EICRB |= 1 << ISC41; //Turn on falling edge
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	82 60       	ori	r24, 0x02	; 2
     3d6:	80 83       	st	Z, r24
     3d8:	80 81       	ld	r24, Z
	EICRB &= ~(1 << ISC40); //....
     3da:	8e 7f       	andi	r24, 0xFE	; 254
     3dc:	80 83       	st	Z, r24
     3de:	8d b1       	in	r24, 0x0d	; 13

//set PD2 as input
	DDRE  &= (1 << PE4); //set as input.
     3e0:	80 71       	andi	r24, 0x10	; 16
     3e2:	8d b9       	out	0x0d, r24	; 13
     3e4:	2f ef       	ldi	r18, 0xFF	; 255
     3e6:	83 ec       	ldi	r24, 0xC3	; 195
     3e8:	99 e0       	ldi	r25, 0x09	; 9
     3ea:	21 50       	subi	r18, 0x01	; 1
     3ec:	80 40       	sbci	r24, 0x00	; 0
     3ee:	90 40       	sbci	r25, 0x00	; 0
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <CAN_controller_init+0x42>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <CAN_controller_init+0x4c>
     3f4:	00 00       	nop
	
	
	
	_delay_ms(200);
	printf("after write to canctrl\n\r");
     3f6:	8c ed       	ldi	r24, 0xDC	; 220
     3f8:	92 e0       	ldi	r25, 0x02	; 2
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	d2 d4       	rcall	.+2468   	; 0xda4 <printf>
	
	//Check CANSTAT register
	uint8_t status = CAN_controller_read(MCP_CANSTAT);
     400:	8e e0       	ldi	r24, 0x0E	; 14
     402:	4f df       	rcall	.-354    	; 0x2a2 <CAN_controller_read>
	printf("Data: %i\n\r", status);
     404:	1f 92       	push	r1
     406:	8f 93       	push	r24
     408:	85 ef       	ldi	r24, 0xF5	; 245
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	c9 d4       	rcall	.+2450   	; 0xda4 <printf>
     412:	8d b7       	in	r24, 0x3d	; 61
}
     414:	9e b7       	in	r25, 0x3e	; 62
     416:	0c 96       	adiw	r24, 0x0c	; 12
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	9e bf       	out	0x3e, r25	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	8d bf       	out	0x3d, r24	; 61
     422:	08 95       	ret

00000424 <ADC_init>:
#include "ADC.h"
#include <stdio.h>
#include <avr/interrupt.h>
void ADC_init() {
	//Set pin ADC0 to input, PF0
	DDRF &= ~(1 << PF0);
     424:	80 98       	cbi	0x10, 0	; 16
	
	//Set prescaling in ADCSRA, ADPS bits
	ADCSRA |= (1 << ADPS2 | 1 << ADPS1 | 1 << ADPS0);
     426:	aa e7       	ldi	r26, 0x7A	; 122
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	8c 91       	ld	r24, X
     42c:	87 60       	ori	r24, 0x07	; 7
     42e:	8c 93       	st	X, r24
	
	
	//Set adlar = 0, right adjusted ADCH
	ADMUX &= ~(1 << ADLAR);
     430:	ec e7       	ldi	r30, 0x7C	; 124
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	8f 7d       	andi	r24, 0xDF	; 223
     438:	80 83       	st	Z, r24
	
	
	
	//Select AVCC as voltage reference
	ADMUX &= ~(1 << REFS1);
     43a:	80 81       	ld	r24, Z
     43c:	8f 77       	andi	r24, 0x7F	; 127
     43e:	80 83       	st	Z, r24
	ADMUX |=  (1 << REFS0);
     440:	80 81       	ld	r24, Z
     442:	80 64       	ori	r24, 0x40	; 64
     444:	80 83       	st	Z, r24
	
	//set ADEN in ADCSRA, enable adc
	ADCSRA |= (1 << ADEN);
     446:	8c 91       	ld	r24, X
     448:	80 68       	ori	r24, 0x80	; 128
     44a:	8c 93       	st	X, r24
     44c:	08 95       	ret

0000044e <ADC_read>:

uint16_t ADC_read() {
	//printf("adc read\n\r");

	//Select channel 0 (ADC0)
	ADMUX &= ~(1 << MUX4 | 1 << MUX3 | 1 << MUX2 | 1 << MUX1 | 1 << MUX0 );
     44e:	ec e7       	ldi	r30, 0x7C	; 124
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	80 81       	ld	r24, Z
     454:	80 7e       	andi	r24, 0xE0	; 224
     456:	80 83       	st	Z, r24
	ADCSRB &= ~(1 << MUX5);
     458:	eb e7       	ldi	r30, 0x7B	; 123
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	87 7f       	andi	r24, 0xF7	; 247
     460:	80 83       	st	Z, r24
	//Start conversion, set ADSC to 1 (Use single conversion).
	ADCSRA |= (1 << ADSC);
     462:	ea e7       	ldi	r30, 0x7A	; 122
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	80 83       	st	Z, r24
	//Wait until conversion complete :
	//While ADIF is not high, wait
	while (!(ADCSRA & (1<<ADIF))){
     46c:	80 81       	ld	r24, Z
     46e:	84 ff       	sbrs	r24, 4
     470:	fd cf       	rjmp	.-6      	; 0x46c <ADC_read+0x1e>
		//printf("in while loop\n");
	}
	//result present in ADCH and ADCL
	//Read adcl first, then ADCH
	uint8_t low = ADCL;
     472:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	uint8_t high = ADCH;
     476:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
	uint16_t adcValue = low + (high << 8);
	return adcValue;/// adcValue;
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	98 2f       	mov	r25, r24
     47e:	88 27       	eor	r24, r24
	//adc = v-in*1024/v-ref
     480:	82 0f       	add	r24, r18
     482:	91 1d       	adc	r25, r1
     484:	08 95       	ret

00000486 <joystick_readPositionOverCAN>:
#include "CAN.h"
#include "pwm.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
void joystick_readPositionOverCAN() {
     486:	8f 92       	push	r8
     488:	9f 92       	push	r9
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	2b 97       	sbiw	r28, 0x0b	; 11
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
	CAN_message_t mess;
	CAN_receiveMessage(&mess);
     4a8:	ce 01       	movw	r24, r28
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	c6 de       	rcall	.-628    	; 0x23a <CAN_receiveMessage>
	
	if (mess.ID = 0x01) {
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	9a 87       	std	Y+10, r25	; 0x0a
     4b4:	89 87       	std	Y+9, r24	; 0x09
		joystick_pos.x_pos = mess.data[0];
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	06 e7       	ldi	r16, 0x76	; 118
     4ba:	13 e0       	ldi	r17, 0x03	; 3
     4bc:	f8 01       	movw	r30, r16
     4be:	80 83       	st	Z, r24
		joystick_pos.y_pos = mess.data[1];
     4c0:	8a 81       	ldd	r24, Y+2	; 0x02
     4c2:	81 83       	std	Z+1, r24	; 0x01
		joystick_pos.angle = atan2(joystick_pos.y_pos, joystick_pos.x_pos)*360/2.0/3.14;
     4c4:	60 81       	ld	r22, Z
     4c6:	f1 80       	ldd	r15, Z+1	; 0x01
     4c8:	06 2e       	mov	r0, r22
     4ca:	00 0c       	add	r0, r0
     4cc:	77 0b       	sbc	r23, r23
     4ce:	88 0b       	sbc	r24, r24
     4d0:	99 0b       	sbc	r25, r25
     4d2:	d8 d2       	rcall	.+1456   	; 0xa84 <__floatsisf>
     4d4:	4b 01       	movw	r8, r22
     4d6:	5c 01       	movw	r10, r24
     4d8:	6f 2d       	mov	r22, r15
     4da:	ff 0c       	add	r15, r15
     4dc:	77 0b       	sbc	r23, r23
     4de:	88 0b       	sbc	r24, r24
     4e0:	99 0b       	sbc	r25, r25
     4e2:	d0 d2       	rcall	.+1440   	; 0xa84 <__floatsisf>
     4e4:	a5 01       	movw	r20, r10
     4e6:	94 01       	movw	r18, r8
     4e8:	db d1       	rcall	.+950    	; 0x8a0 <atan2>
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	44 eb       	ldi	r20, 0xB4	; 180
     4f0:	53 e4       	ldi	r21, 0x43	; 67
     4f2:	a8 d3       	rcall	.+1872   	; 0xc44 <__mulsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	5f e3       	ldi	r21, 0x3F	; 63
     4fc:	a3 d3       	rcall	.+1862   	; 0xc44 <__mulsf3>
     4fe:	23 ec       	ldi	r18, 0xC3	; 195
     500:	35 ef       	ldi	r19, 0xF5	; 245
     502:	48 e4       	ldi	r20, 0x48	; 72
     504:	50 e4       	ldi	r21, 0x40	; 64
     506:	23 d2       	rcall	.+1094   	; 0x94e <__divsf3>
     508:	8a d2       	rcall	.+1300   	; 0xa1e <__fixsfsi>
     50a:	f8 01       	movw	r30, r16
     50c:	73 83       	std	Z+3, r23	; 0x03
     50e:	62 83       	std	Z+2, r22	; 0x02
	}
}
     510:	2b 96       	adiw	r28, 0x0b	; 11
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	bf 90       	pop	r11
     528:	af 90       	pop	r10
     52a:	9f 90       	pop	r9
     52c:	8f 90       	pop	r8
     52e:	08 95       	ret

00000530 <joystick_printPosition>:

void joystick_printPosition() {
	printf("X: %i\tY: %i\n\rAngle: %i\n\r", joystick_pos.x_pos, joystick_pos.y_pos, joystick_pos.angle);
     530:	e6 e7       	ldi	r30, 0x76	; 118
     532:	f3 e0       	ldi	r31, 0x03	; 3
     534:	22 81       	ldd	r18, Z+2	; 0x02
     536:	33 81       	ldd	r19, Z+3	; 0x03
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	80 81       	ld	r24, Z
     53c:	3f 93       	push	r19
     53e:	2f 93       	push	r18
     540:	29 2f       	mov	r18, r25
     542:	09 2e       	mov	r0, r25
     544:	00 0c       	add	r0, r0
     546:	33 0b       	sbc	r19, r19
     548:	3f 93       	push	r19
     54a:	9f 93       	push	r25
     54c:	28 2f       	mov	r18, r24
     54e:	08 2e       	mov	r0, r24
     550:	00 0c       	add	r0, r0
     552:	33 0b       	sbc	r19, r19
     554:	3f 93       	push	r19
     556:	8f 93       	push	r24
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	21 d4       	rcall	.+2114   	; 0xda4 <printf>
}
     562:	8d b7       	in	r24, 0x3d	; 61
     564:	9e b7       	in	r25, 0x3e	; 62
     566:	08 96       	adiw	r24, 0x08	; 8
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	9e bf       	out	0x3e, r25	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	8d bf       	out	0x3d, r24	; 61
     572:	08 95       	ret

00000574 <joystick_setServo>:

void joystick_setServo() {
		float var = 3-(((float)joystick_pos.x_pos+100.0)/200.0*(2.1-0.9)+0.9);
     574:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <joystick_pos>
		//printf("servo value: %i\n\r",(var*100));
		pwm_setPulseWidth(var);
     578:	06 2e       	mov	r0, r22
     57a:	00 0c       	add	r0, r0
     57c:	77 0b       	sbc	r23, r23
     57e:	88 0b       	sbc	r24, r24
     580:	99 0b       	sbc	r25, r25
     582:	80 d2       	rcall	.+1280   	; 0xa84 <__floatsisf>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	48 ec       	ldi	r20, 0xC8	; 200
     58a:	52 e4       	ldi	r21, 0x42	; 66
     58c:	16 d1       	rcall	.+556    	; 0x7ba <__addsf3>
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	48 e4       	ldi	r20, 0x48	; 72
     594:	53 e4       	ldi	r21, 0x43	; 67
     596:	db d1       	rcall	.+950    	; 0x94e <__divsf3>
     598:	29 e9       	ldi	r18, 0x99	; 153
     59a:	39 e9       	ldi	r19, 0x99	; 153
     59c:	49 e9       	ldi	r20, 0x99	; 153
     59e:	5f e3       	ldi	r21, 0x3F	; 63
     5a0:	51 d3       	rcall	.+1698   	; 0xc44 <__mulsf3>
     5a2:	26 e6       	ldi	r18, 0x66	; 102
     5a4:	36 e6       	ldi	r19, 0x66	; 102
     5a6:	46 e6       	ldi	r20, 0x66	; 102
     5a8:	5f e3       	ldi	r21, 0x3F	; 63
     5aa:	07 d1       	rcall	.+526    	; 0x7ba <__addsf3>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 e4       	ldi	r24, 0x40	; 64
     5b6:	90 e4       	ldi	r25, 0x40	; 64
     5b8:	ff d0       	rcall	.+510    	; 0x7b8 <__subsf3>
     5ba:	22 c0       	rjmp	.+68     	; 0x600 <pwm_setPulseWidth>
     5bc:	08 95       	ret

000005be <pwm_init>:
#define PWM_PRESCALER				8
#define ICR_PERIOD					(F_CPU*PERIOD_MS)/PWM_PRESCALER/1000

void pwm_init() {
	//set output pin
	DDRB |= (1 << PB5);
     5be:	25 9a       	sbi	0x04, 5	; 4
	
	//Reset prescaler, then set to 8.
	TCCR1B &= PRESC_OFF;
     5c0:	e1 e8       	ldi	r30, 0x81	; 129
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	88 7f       	andi	r24, 0xF8	; 248
     5c8:	80 83       	st	Z, r24
	TCCR1B |= PRESC_8;
     5ca:	80 81       	ld	r24, Z
     5cc:	82 60       	ori	r24, 0x02	; 2
     5ce:	80 83       	st	Z, r24

	//set ocr0 register as something
	
	//Timer incremented until counter value matches value in OCR1A
	TCCR1A |= (1 << WGM11 & ~(1 <<WGM10));
     5d0:	a0 e8       	ldi	r26, 0x80	; 128
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	8c 91       	ld	r24, X
     5d6:	82 60       	ori	r24, 0x02	; 2
     5d8:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13 | 1 << WGM12);
     5da:	80 81       	ld	r24, Z
     5dc:	88 61       	ori	r24, 0x18	; 24
     5de:	80 83       	st	Z, r24
	
	//Set compare output mode on channel A
	TCCR1A |= (1 << COM1A1 & ~(COM1A0));
     5e0:	8c 91       	ld	r24, X
     5e2:	80 68       	ori	r24, 0x80	; 128
     5e4:	8c 93       	st	X, r24
	
	
	
	//set period to 20ms
	ICR1 = ICR_PERIOD;
     5e6:	80 e4       	ldi	r24, 0x40	; 64
     5e8:	9c e9       	ldi	r25, 0x9C	; 156
     5ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     5ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	

	
	//Set initial pulsewidth
	OCR1A = ICR_PERIOD/(20)*(2.1+0.9)/2;
     5f2:	88 eb       	ldi	r24, 0xB8	; 184
     5f4:	9b e0       	ldi	r25, 0x0B	; 11
     5f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     5fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     5fe:	08 95       	ret

00000600 <pwm_setPulseWidth>:
}

void pwm_setPulseWidth(float width_ms) {
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	6b 01       	movw	r12, r22
     60a:	7c 01       	movw	r14, r24
	
	
	if (width_ms >= 0.9 && width_ms <=2.1) {
     60c:	26 e6       	ldi	r18, 0x66	; 102
     60e:	36 e6       	ldi	r19, 0x66	; 102
     610:	46 e6       	ldi	r20, 0x66	; 102
     612:	5f e3       	ldi	r21, 0x3F	; 63
     614:	0c d3       	rcall	.+1560   	; 0xc2e <__gesf2>
     616:	88 23       	and	r24, r24
     618:	d4 f0       	brlt	.+52     	; 0x64e <pwm_setPulseWidth+0x4e>
     61a:	26 e6       	ldi	r18, 0x66	; 102
     61c:	36 e6       	ldi	r19, 0x66	; 102
     61e:	46 e0       	ldi	r20, 0x06	; 6
     620:	50 e4       	ldi	r21, 0x40	; 64
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	8f d1       	rcall	.+798    	; 0x946 <__cmpsf2>
     628:	18 16       	cp	r1, r24
     62a:	8c f0       	brlt	.+34     	; 0x64e <pwm_setPulseWidth+0x4e>
		
		
		float dutyCycle = width_ms/PERIOD_MS;
		uint32_t pulse = dutyCycle*(ICR_PERIOD);
		
		OCR1A = pulse;
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 ea       	ldi	r20, 0xA0	; 160
     632:	51 e4       	ldi	r21, 0x41	; 65
     634:	c7 01       	movw	r24, r14
     636:	b6 01       	movw	r22, r12
     638:	8a d1       	rcall	.+788    	; 0x94e <__divsf3>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e4       	ldi	r19, 0x40	; 64
     63e:	4c e1       	ldi	r20, 0x1C	; 28
     640:	57 e4       	ldi	r21, 0x47	; 71
     642:	00 d3       	rcall	.+1536   	; 0xc44 <__mulsf3>
     644:	f1 d1       	rcall	.+994    	; 0xa28 <__fixunssfsi>
     646:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     64a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		
	}
	
	
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	08 95       	ret

00000658 <setupInit>:
#include "setup.h"
#include "timer.h"
#include "ADC.h"
#include "sleep.h"
void setupInit(void){
	cli();
     658:	f8 94       	cli
	USART_init(MYUBRR);
     65a:	87 e6       	ldi	r24, 0x67	; 103
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	91 d0       	rcall	.+290    	; 0x782 <USART_init>
	printf("finished uart setup2)");
     660:	89 e1       	ldi	r24, 0x19	; 25
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
	CAN_controller_init();
     668:	9d d3       	rcall	.+1850   	; 0xda4 <printf>
     66a:	9e de       	rcall	.-708    	; 0x3a8 <CAN_controller_init>
	printf("finished can setup");
     66c:	8f e2       	ldi	r24, 0x2F	; 47
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
	pwm_init();
     674:	97 d3       	rcall	.+1838   	; 0xda4 <printf>
	printf("finished pwm");
     676:	a3 df       	rcall	.-186    	; 0x5be <pwm_init>
     678:	82 e4       	ldi	r24, 0x42	; 66
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
	ADC_init();
     680:	91 d3       	rcall	.+1826   	; 0xda4 <printf>
	printf("Finished setup");
     682:	d0 de       	rcall	.-608    	; 0x424 <ADC_init>
     684:	8f e4       	ldi	r24, 0x4F	; 79
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	8b d3       	rcall	.+1814   	; 0xda4 <printf>
	timer_init();
     68e:	53 d0       	rcall	.+166    	; 0x736 <timer_init>
     690:	0a d0       	rcall	.+20     	; 0x6a6 <sleep_init>
	sleep_init();
     692:	78 94       	sei
     694:	8d b7       	in	r24, 0x3d	; 61
	sei();
     696:	9e b7       	in	r25, 0x3e	; 62
     698:	08 96       	adiw	r24, 0x08	; 8
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	9e bf       	out	0x3e, r25	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	8d bf       	out	0x3d, r24	; 61
     6a4:	08 95       	ret

000006a6 <sleep_init>:
#include <avr/interrupt.h>

void sleep_init() {
	
	//Choose sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
     6a6:	83 b7       	in	r24, 0x33	; 51
     6a8:	81 7f       	andi	r24, 0xF1	; 241
     6aa:	83 bf       	out	0x33, r24	; 51
     6ac:	08 95       	ret

000006ae <sleep_now>:
}

void sleep_now() {
	
	//disable analog reading
	ACSR |= (1 << ACD | 1 << ACIE);
     6ae:	80 b7       	in	r24, 0x30	; 48
     6b0:	88 68       	ori	r24, 0x88	; 136
     6b2:	80 bf       	out	0x30, r24	; 48
	
	ADCSRA &= ~(1 << ADEN);
     6b4:	ea e7       	ldi	r30, 0x7A	; 122
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	8f 77       	andi	r24, 0x7F	; 127
     6bc:	80 83       	st	Z, r24

	// Put the device to sleep:
	sleep_mode();
     6be:	83 b7       	in	r24, 0x33	; 51
     6c0:	81 60       	ori	r24, 0x01	; 1
     6c2:	83 bf       	out	0x33, r24	; 51
     6c4:	88 95       	sleep
     6c6:	83 b7       	in	r24, 0x33	; 51
     6c8:	8e 7f       	andi	r24, 0xFE	; 254
     6ca:	83 bf       	out	0x33, r24	; 51
	
	ADCSRA |= (1 << ADEN);
     6cc:	80 81       	ld	r24, Z
     6ce:	80 68       	ori	r24, 0x80	; 128
     6d0:	80 83       	st	Z, r24
     6d2:	08 95       	ret

000006d4 <SPI_masterInit>:
	SPI_setChipSelect(PB7, 1);
}

void SPI_slaveInit(void) {
	DDRB = (1 << PB3);
	SPCR = (1 << SPE);
     6d4:	84 b1       	in	r24, 0x04	; 4
     6d6:	87 60       	ori	r24, 0x07	; 7
     6d8:	84 b9       	out	0x04, r24	; 4
     6da:	27 9a       	sbi	0x04, 7	; 4
     6dc:	8c b5       	in	r24, 0x2c	; 44
     6de:	81 65       	ori	r24, 0x51	; 81
     6e0:	8c bd       	out	0x2c, r24	; 44
     6e2:	2f 9a       	sbi	0x05, 7	; 5
     6e4:	08 95       	ret

000006e6 <SPI_masterWrite>:
	
}
void SPI_masterWrite(char cData)
{
	SPDR = cData;
     6e6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     6e8:	0d b4       	in	r0, 0x2d	; 45
     6ea:	07 fe       	sbrs	r0, 7
     6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <SPI_masterWrite+0x2>

}
     6ee:	08 95       	ret

000006f0 <SPI_masterRead>:

uint8_t SPI_masterRead() {
	SPDR = 0;
     6f0:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
     6f2:	0d b4       	in	r0, 0x2d	; 45
     6f4:	07 fe       	sbrs	r0, 7
     6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <SPI_masterRead+0x2>
	return SPDR;
     6f8:	8e b5       	in	r24, 0x2e	; 46
}
     6fa:	08 95       	ret

000006fc <SPI_setChipSelect>:

void SPI_setChipSelect(uint8_t pin, uint8_t setHigh ) {
	if (setHigh) {
     6fc:	66 23       	and	r22, r22
     6fe:	69 f0       	breq	.+26     	; 0x71a <SPI_setChipSelect+0x1e>
		PORTB |= (1 << pin); //chip select high
     700:	45 b1       	in	r20, 0x05	; 5
     702:	21 e0       	ldi	r18, 0x01	; 1
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	b9 01       	movw	r22, r18
     708:	02 c0       	rjmp	.+4      	; 0x70e <SPI_setChipSelect+0x12>
     70a:	66 0f       	add	r22, r22
     70c:	77 1f       	adc	r23, r23
     70e:	8a 95       	dec	r24
     710:	e2 f7       	brpl	.-8      	; 0x70a <SPI_setChipSelect+0xe>
     712:	cb 01       	movw	r24, r22
     714:	84 2b       	or	r24, r20
     716:	85 b9       	out	0x05, r24	; 5
     718:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << pin); //chip select low
     71a:	45 b1       	in	r20, 0x05	; 5
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	b9 01       	movw	r22, r18
     722:	02 c0       	rjmp	.+4      	; 0x728 <SPI_setChipSelect+0x2c>
     724:	66 0f       	add	r22, r22
     726:	77 1f       	adc	r23, r23
     728:	8a 95       	dec	r24
     72a:	e2 f7       	brpl	.-8      	; 0x724 <SPI_setChipSelect+0x28>
     72c:	cb 01       	movw	r24, r22
     72e:	80 95       	com	r24
     730:	84 23       	and	r24, r20
     732:	85 b9       	out	0x05, r24	; 5
     734:	08 95       	ret

00000736 <timer_init>:
	OCR3AL = val;
	
	*/
	//Enable "compare output match" interrupt
	
	TIMSK3 |= (1 << OCIE3B);
     736:	e1 e7       	ldi	r30, 0x71	; 113
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	84 60       	ori	r24, 0x04	; 4
     73e:	80 83       	st	Z, r24

	
	//This register contains counter value
	TCNT3 = 0x00;
     740:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     744:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	
	//set up compare output mode & clock select (prescaling)
	TCCR3A = (1 << COM3B0 | 1 << COM3B1);
     748:	80 e3       	ldi	r24, 0x30	; 48
     74a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = (1 << CS12 | 1 << CS00);
     74e:	85 e0       	ldi	r24, 0x05	; 5
     750:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	
	//Output compare register containing value compared to counter
	OCR3B = TIMER3_RESET;
     754:	85 e3       	ldi	r24, 0x35	; 53
     756:	9c e0       	ldi	r25, 0x0C	; 12
     758:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     75c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
     760:	08 95       	ret

00000762 <USART_transmitChar>:
	printf("uart setup finished\n\r");
}

void USART_transmitChar(unsigned char data) {
	/* wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)))
     762:	e0 ec       	ldi	r30, 0xC0	; 192
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	90 81       	ld	r25, Z
     768:	95 ff       	sbrs	r25, 5
     76a:	fd cf       	rjmp	.-6      	; 0x766 <USART_transmitChar+0x4>
		;
		
	/* Put data in buffer, send data */
	UDR0 = data;
     76c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     770:	08 95       	ret

00000772 <USART_receiveChar>:
}

unsigned char USART_receiveChar( void ) {
	/* wait for data to be received*/
	while ( !(UCSR0A & (1<<RXC0) ) ) 
     772:	e0 ec       	ldi	r30, 0xC0	; 192
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	88 23       	and	r24, r24
     77a:	ec f7       	brge	.-6      	; 0x776 <USART_receiveChar+0x4>
		;
	
	return UDR0;
     77c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     780:	08 95       	ret

00000782 <USART_init>:

#include "uart.h"
FILE *uart ;
void USART_init(unsigned int ubrr) {
	
	UBRR0H = (unsigned char) (ubrr >> 8);
     782:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char) (ubrr);
     786:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	/*Enable receiver and transmitter*/
	
	UCSR0B = (1<<RXEN0) | (1 <<TXEN0);
     78a:	88 e1       	ldi	r24, 0x18	; 24
     78c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	
	/* SET FRAME FORMAT: 8data, 2 stop bit */
	
	
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
     790:	8e e0       	ldi	r24, 0x0E	; 14
     792:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	uart = fdevopen(&USART_transmitChar, &USART_receiveChar);
     796:	69 eb       	ldi	r22, 0xB9	; 185
     798:	73 e0       	ldi	r23, 0x03	; 3
     79a:	81 eb       	ldi	r24, 0xB1	; 177
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	b8 d2       	rcall	.+1392   	; 0xd10 <fdevopen>
     7a0:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <uart+0x1>
     7a4:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <uart>
	printf("uart setup finished\n\r");
     7a8:	8e e5       	ldi	r24, 0x5E	; 94
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	f9 d2       	rcall	.+1522   	; 0xda4 <printf>
}
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	08 95       	ret

000007b8 <__subsf3>:
     7b8:	50 58       	subi	r21, 0x80	; 128

000007ba <__addsf3>:
     7ba:	bb 27       	eor	r27, r27
     7bc:	aa 27       	eor	r26, r26
     7be:	0e d0       	rcall	.+28     	; 0x7dc <__addsf3x>
     7c0:	fc c1       	rjmp	.+1016   	; 0xbba <__fp_round>
     7c2:	ed d1       	rcall	.+986    	; 0xb9e <__fp_pscA>
     7c4:	30 f0       	brcs	.+12     	; 0x7d2 <__addsf3+0x18>
     7c6:	f2 d1       	rcall	.+996    	; 0xbac <__fp_pscB>
     7c8:	20 f0       	brcs	.+8      	; 0x7d2 <__addsf3+0x18>
     7ca:	31 f4       	brne	.+12     	; 0x7d8 <__addsf3+0x1e>
     7cc:	9f 3f       	cpi	r25, 0xFF	; 255
     7ce:	11 f4       	brne	.+4      	; 0x7d4 <__addsf3+0x1a>
     7d0:	1e f4       	brtc	.+6      	; 0x7d8 <__addsf3+0x1e>
     7d2:	bd c1       	rjmp	.+890    	; 0xb4e <__fp_nan>
     7d4:	0e f4       	brtc	.+2      	; 0x7d8 <__addsf3+0x1e>
     7d6:	e0 95       	com	r30
     7d8:	e7 fb       	bst	r30, 7
     7da:	b3 c1       	rjmp	.+870    	; 0xb42 <__fp_inf>

000007dc <__addsf3x>:
     7dc:	e9 2f       	mov	r30, r25
     7de:	fe d1       	rcall	.+1020   	; 0xbdc <__fp_split3>
     7e0:	80 f3       	brcs	.-32     	; 0x7c2 <__addsf3+0x8>
     7e2:	ba 17       	cp	r27, r26
     7e4:	62 07       	cpc	r22, r18
     7e6:	73 07       	cpc	r23, r19
     7e8:	84 07       	cpc	r24, r20
     7ea:	95 07       	cpc	r25, r21
     7ec:	18 f0       	brcs	.+6      	; 0x7f4 <__addsf3x+0x18>
     7ee:	71 f4       	brne	.+28     	; 0x80c <__addsf3x+0x30>
     7f0:	9e f5       	brtc	.+102    	; 0x858 <__addsf3x+0x7c>
     7f2:	16 c2       	rjmp	.+1068   	; 0xc20 <__fp_zero>
     7f4:	0e f4       	brtc	.+2      	; 0x7f8 <__addsf3x+0x1c>
     7f6:	e0 95       	com	r30
     7f8:	0b 2e       	mov	r0, r27
     7fa:	ba 2f       	mov	r27, r26
     7fc:	a0 2d       	mov	r26, r0
     7fe:	0b 01       	movw	r0, r22
     800:	b9 01       	movw	r22, r18
     802:	90 01       	movw	r18, r0
     804:	0c 01       	movw	r0, r24
     806:	ca 01       	movw	r24, r20
     808:	a0 01       	movw	r20, r0
     80a:	11 24       	eor	r1, r1
     80c:	ff 27       	eor	r31, r31
     80e:	59 1b       	sub	r21, r25
     810:	99 f0       	breq	.+38     	; 0x838 <__addsf3x+0x5c>
     812:	59 3f       	cpi	r21, 0xF9	; 249
     814:	50 f4       	brcc	.+20     	; 0x82a <__addsf3x+0x4e>
     816:	50 3e       	cpi	r21, 0xE0	; 224
     818:	68 f1       	brcs	.+90     	; 0x874 <__addsf3x+0x98>
     81a:	1a 16       	cp	r1, r26
     81c:	f0 40       	sbci	r31, 0x00	; 0
     81e:	a2 2f       	mov	r26, r18
     820:	23 2f       	mov	r18, r19
     822:	34 2f       	mov	r19, r20
     824:	44 27       	eor	r20, r20
     826:	58 5f       	subi	r21, 0xF8	; 248
     828:	f3 cf       	rjmp	.-26     	; 0x810 <__addsf3x+0x34>
     82a:	46 95       	lsr	r20
     82c:	37 95       	ror	r19
     82e:	27 95       	ror	r18
     830:	a7 95       	ror	r26
     832:	f0 40       	sbci	r31, 0x00	; 0
     834:	53 95       	inc	r21
     836:	c9 f7       	brne	.-14     	; 0x82a <__addsf3x+0x4e>
     838:	7e f4       	brtc	.+30     	; 0x858 <__addsf3x+0x7c>
     83a:	1f 16       	cp	r1, r31
     83c:	ba 0b       	sbc	r27, r26
     83e:	62 0b       	sbc	r22, r18
     840:	73 0b       	sbc	r23, r19
     842:	84 0b       	sbc	r24, r20
     844:	ba f0       	brmi	.+46     	; 0x874 <__addsf3x+0x98>
     846:	91 50       	subi	r25, 0x01	; 1
     848:	a1 f0       	breq	.+40     	; 0x872 <__addsf3x+0x96>
     84a:	ff 0f       	add	r31, r31
     84c:	bb 1f       	adc	r27, r27
     84e:	66 1f       	adc	r22, r22
     850:	77 1f       	adc	r23, r23
     852:	88 1f       	adc	r24, r24
     854:	c2 f7       	brpl	.-16     	; 0x846 <__addsf3x+0x6a>
     856:	0e c0       	rjmp	.+28     	; 0x874 <__addsf3x+0x98>
     858:	ba 0f       	add	r27, r26
     85a:	62 1f       	adc	r22, r18
     85c:	73 1f       	adc	r23, r19
     85e:	84 1f       	adc	r24, r20
     860:	48 f4       	brcc	.+18     	; 0x874 <__addsf3x+0x98>
     862:	87 95       	ror	r24
     864:	77 95       	ror	r23
     866:	67 95       	ror	r22
     868:	b7 95       	ror	r27
     86a:	f7 95       	ror	r31
     86c:	9e 3f       	cpi	r25, 0xFE	; 254
     86e:	08 f0       	brcs	.+2      	; 0x872 <__addsf3x+0x96>
     870:	b3 cf       	rjmp	.-154    	; 0x7d8 <__addsf3+0x1e>
     872:	93 95       	inc	r25
     874:	88 0f       	add	r24, r24
     876:	08 f0       	brcs	.+2      	; 0x87a <__addsf3x+0x9e>
     878:	99 27       	eor	r25, r25
     87a:	ee 0f       	add	r30, r30
     87c:	97 95       	ror	r25
     87e:	87 95       	ror	r24
     880:	08 95       	ret
     882:	8d d1       	rcall	.+794    	; 0xb9e <__fp_pscA>
     884:	58 f0       	brcs	.+22     	; 0x89c <__addsf3x+0xc0>
     886:	80 e8       	ldi	r24, 0x80	; 128
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	09 f4       	brne	.+2      	; 0x88e <__addsf3x+0xb2>
     88c:	9e ef       	ldi	r25, 0xFE	; 254
     88e:	8e d1       	rcall	.+796    	; 0xbac <__fp_pscB>
     890:	28 f0       	brcs	.+10     	; 0x89c <__addsf3x+0xc0>
     892:	40 e8       	ldi	r20, 0x80	; 128
     894:	51 e0       	ldi	r21, 0x01	; 1
     896:	59 f4       	brne	.+22     	; 0x8ae <atan2+0xe>
     898:	5e ef       	ldi	r21, 0xFE	; 254
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <atan2+0xe>
     89c:	58 c1       	rjmp	.+688    	; 0xb4e <__fp_nan>
     89e:	c0 c1       	rjmp	.+896    	; 0xc20 <__fp_zero>

000008a0 <atan2>:
     8a0:	e9 2f       	mov	r30, r25
     8a2:	e0 78       	andi	r30, 0x80	; 128
     8a4:	9b d1       	rcall	.+822    	; 0xbdc <__fp_split3>
     8a6:	68 f3       	brcs	.-38     	; 0x882 <__addsf3x+0xa6>
     8a8:	09 2e       	mov	r0, r25
     8aa:	05 2a       	or	r0, r21
     8ac:	c1 f3       	breq	.-16     	; 0x89e <__addsf3x+0xc2>
     8ae:	26 17       	cp	r18, r22
     8b0:	37 07       	cpc	r19, r23
     8b2:	48 07       	cpc	r20, r24
     8b4:	59 07       	cpc	r21, r25
     8b6:	38 f0       	brcs	.+14     	; 0x8c6 <atan2+0x26>
     8b8:	0e 2e       	mov	r0, r30
     8ba:	07 f8       	bld	r0, 7
     8bc:	e0 25       	eor	r30, r0
     8be:	69 f0       	breq	.+26     	; 0x8da <atan2+0x3a>
     8c0:	e0 25       	eor	r30, r0
     8c2:	e0 64       	ori	r30, 0x40	; 64
     8c4:	0a c0       	rjmp	.+20     	; 0x8da <atan2+0x3a>
     8c6:	ef 63       	ori	r30, 0x3F	; 63
     8c8:	07 f8       	bld	r0, 7
     8ca:	00 94       	com	r0
     8cc:	07 fa       	bst	r0, 7
     8ce:	db 01       	movw	r26, r22
     8d0:	b9 01       	movw	r22, r18
     8d2:	9d 01       	movw	r18, r26
     8d4:	dc 01       	movw	r26, r24
     8d6:	ca 01       	movw	r24, r20
     8d8:	ad 01       	movw	r20, r26
     8da:	ef 93       	push	r30
     8dc:	47 d0       	rcall	.+142    	; 0x96c <__divsf3_pse>
     8de:	6d d1       	rcall	.+730    	; 0xbba <__fp_round>
     8e0:	0a d0       	rcall	.+20     	; 0x8f6 <atan>
     8e2:	5f 91       	pop	r21
     8e4:	55 23       	and	r21, r21
     8e6:	31 f0       	breq	.+12     	; 0x8f4 <atan2+0x54>
     8e8:	2b ed       	ldi	r18, 0xDB	; 219
     8ea:	3f e0       	ldi	r19, 0x0F	; 15
     8ec:	49 e4       	ldi	r20, 0x49	; 73
     8ee:	50 fd       	sbrc	r21, 0
     8f0:	49 ec       	ldi	r20, 0xC9	; 201
     8f2:	63 cf       	rjmp	.-314    	; 0x7ba <__addsf3>
     8f4:	08 95       	ret

000008f6 <atan>:
     8f6:	df 93       	push	r29
     8f8:	dd 27       	eor	r29, r29
     8fa:	b9 2f       	mov	r27, r25
     8fc:	bf 77       	andi	r27, 0x7F	; 127
     8fe:	40 e8       	ldi	r20, 0x80	; 128
     900:	5f e3       	ldi	r21, 0x3F	; 63
     902:	16 16       	cp	r1, r22
     904:	17 06       	cpc	r1, r23
     906:	48 07       	cpc	r20, r24
     908:	5b 07       	cpc	r21, r27
     90a:	10 f4       	brcc	.+4      	; 0x910 <atan+0x1a>
     90c:	d9 2f       	mov	r29, r25
     90e:	93 d1       	rcall	.+806    	; 0xc36 <inverse>
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	7f 93       	push	r23
     916:	6f 93       	push	r22
     918:	f8 d1       	rcall	.+1008   	; 0xd0a <square>
     91a:	e4 ee       	ldi	r30, 0xE4	; 228
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	1a d1       	rcall	.+564    	; 0xb54 <__fp_powser>
     920:	4c d1       	rcall	.+664    	; 0xbba <__fp_round>
     922:	2f 91       	pop	r18
     924:	3f 91       	pop	r19
     926:	4f 91       	pop	r20
     928:	5f 91       	pop	r21
     92a:	98 d1       	rcall	.+816    	; 0xc5c <__mulsf3x>
     92c:	dd 23       	and	r29, r29
     92e:	49 f0       	breq	.+18     	; 0x942 <atan+0x4c>
     930:	90 58       	subi	r25, 0x80	; 128
     932:	a2 ea       	ldi	r26, 0xA2	; 162
     934:	2a ed       	ldi	r18, 0xDA	; 218
     936:	3f e0       	ldi	r19, 0x0F	; 15
     938:	49 ec       	ldi	r20, 0xC9	; 201
     93a:	5f e3       	ldi	r21, 0x3F	; 63
     93c:	d0 78       	andi	r29, 0x80	; 128
     93e:	5d 27       	eor	r21, r29
     940:	4d df       	rcall	.-358    	; 0x7dc <__addsf3x>
     942:	df 91       	pop	r29
     944:	3a c1       	rjmp	.+628    	; 0xbba <__fp_round>

00000946 <__cmpsf2>:
     946:	d9 d0       	rcall	.+434    	; 0xafa <__fp_cmp>
     948:	08 f4       	brcc	.+2      	; 0x94c <__cmpsf2+0x6>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	08 95       	ret

0000094e <__divsf3>:
     94e:	0c d0       	rcall	.+24     	; 0x968 <__divsf3x>
     950:	34 c1       	rjmp	.+616    	; 0xbba <__fp_round>
     952:	2c d1       	rcall	.+600    	; 0xbac <__fp_pscB>
     954:	40 f0       	brcs	.+16     	; 0x966 <__divsf3+0x18>
     956:	23 d1       	rcall	.+582    	; 0xb9e <__fp_pscA>
     958:	30 f0       	brcs	.+12     	; 0x966 <__divsf3+0x18>
     95a:	21 f4       	brne	.+8      	; 0x964 <__divsf3+0x16>
     95c:	5f 3f       	cpi	r21, 0xFF	; 255
     95e:	19 f0       	breq	.+6      	; 0x966 <__divsf3+0x18>
     960:	f0 c0       	rjmp	.+480    	; 0xb42 <__fp_inf>
     962:	51 11       	cpse	r21, r1
     964:	5e c1       	rjmp	.+700    	; 0xc22 <__fp_szero>
     966:	f3 c0       	rjmp	.+486    	; 0xb4e <__fp_nan>

00000968 <__divsf3x>:
     968:	39 d1       	rcall	.+626    	; 0xbdc <__fp_split3>
     96a:	98 f3       	brcs	.-26     	; 0x952 <__divsf3+0x4>

0000096c <__divsf3_pse>:
     96c:	99 23       	and	r25, r25
     96e:	c9 f3       	breq	.-14     	; 0x962 <__divsf3+0x14>
     970:	55 23       	and	r21, r21
     972:	b1 f3       	breq	.-20     	; 0x960 <__divsf3+0x12>
     974:	95 1b       	sub	r25, r21
     976:	55 0b       	sbc	r21, r21
     978:	bb 27       	eor	r27, r27
     97a:	aa 27       	eor	r26, r26
     97c:	62 17       	cp	r22, r18
     97e:	73 07       	cpc	r23, r19
     980:	84 07       	cpc	r24, r20
     982:	38 f0       	brcs	.+14     	; 0x992 <__divsf3_pse+0x26>
     984:	9f 5f       	subi	r25, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	22 0f       	add	r18, r18
     98a:	33 1f       	adc	r19, r19
     98c:	44 1f       	adc	r20, r20
     98e:	aa 1f       	adc	r26, r26
     990:	a9 f3       	breq	.-22     	; 0x97c <__divsf3_pse+0x10>
     992:	33 d0       	rcall	.+102    	; 0x9fa <__divsf3_pse+0x8e>
     994:	0e 2e       	mov	r0, r30
     996:	3a f0       	brmi	.+14     	; 0x9a6 <__divsf3_pse+0x3a>
     998:	e0 e8       	ldi	r30, 0x80	; 128
     99a:	30 d0       	rcall	.+96     	; 0x9fc <__divsf3_pse+0x90>
     99c:	91 50       	subi	r25, 0x01	; 1
     99e:	50 40       	sbci	r21, 0x00	; 0
     9a0:	e6 95       	lsr	r30
     9a2:	00 1c       	adc	r0, r0
     9a4:	ca f7       	brpl	.-14     	; 0x998 <__divsf3_pse+0x2c>
     9a6:	29 d0       	rcall	.+82     	; 0x9fa <__divsf3_pse+0x8e>
     9a8:	fe 2f       	mov	r31, r30
     9aa:	27 d0       	rcall	.+78     	; 0x9fa <__divsf3_pse+0x8e>
     9ac:	66 0f       	add	r22, r22
     9ae:	77 1f       	adc	r23, r23
     9b0:	88 1f       	adc	r24, r24
     9b2:	bb 1f       	adc	r27, r27
     9b4:	26 17       	cp	r18, r22
     9b6:	37 07       	cpc	r19, r23
     9b8:	48 07       	cpc	r20, r24
     9ba:	ab 07       	cpc	r26, r27
     9bc:	b0 e8       	ldi	r27, 0x80	; 128
     9be:	09 f0       	breq	.+2      	; 0x9c2 <__divsf3_pse+0x56>
     9c0:	bb 0b       	sbc	r27, r27
     9c2:	80 2d       	mov	r24, r0
     9c4:	bf 01       	movw	r22, r30
     9c6:	ff 27       	eor	r31, r31
     9c8:	93 58       	subi	r25, 0x83	; 131
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	2a f0       	brmi	.+10     	; 0x9d8 <__divsf3_pse+0x6c>
     9ce:	9e 3f       	cpi	r25, 0xFE	; 254
     9d0:	51 05       	cpc	r21, r1
     9d2:	68 f0       	brcs	.+26     	; 0x9ee <__divsf3_pse+0x82>
     9d4:	b6 c0       	rjmp	.+364    	; 0xb42 <__fp_inf>
     9d6:	25 c1       	rjmp	.+586    	; 0xc22 <__fp_szero>
     9d8:	5f 3f       	cpi	r21, 0xFF	; 255
     9da:	ec f3       	brlt	.-6      	; 0x9d6 <__divsf3_pse+0x6a>
     9dc:	98 3e       	cpi	r25, 0xE8	; 232
     9de:	dc f3       	brlt	.-10     	; 0x9d6 <__divsf3_pse+0x6a>
     9e0:	86 95       	lsr	r24
     9e2:	77 95       	ror	r23
     9e4:	67 95       	ror	r22
     9e6:	b7 95       	ror	r27
     9e8:	f7 95       	ror	r31
     9ea:	9f 5f       	subi	r25, 0xFF	; 255
     9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__divsf3_pse+0x74>
     9ee:	88 0f       	add	r24, r24
     9f0:	91 1d       	adc	r25, r1
     9f2:	96 95       	lsr	r25
     9f4:	87 95       	ror	r24
     9f6:	97 f9       	bld	r25, 7
     9f8:	08 95       	ret
     9fa:	e1 e0       	ldi	r30, 0x01	; 1
     9fc:	66 0f       	add	r22, r22
     9fe:	77 1f       	adc	r23, r23
     a00:	88 1f       	adc	r24, r24
     a02:	bb 1f       	adc	r27, r27
     a04:	62 17       	cp	r22, r18
     a06:	73 07       	cpc	r23, r19
     a08:	84 07       	cpc	r24, r20
     a0a:	ba 07       	cpc	r27, r26
     a0c:	20 f0       	brcs	.+8      	; 0xa16 <__divsf3_pse+0xaa>
     a0e:	62 1b       	sub	r22, r18
     a10:	73 0b       	sbc	r23, r19
     a12:	84 0b       	sbc	r24, r20
     a14:	ba 0b       	sbc	r27, r26
     a16:	ee 1f       	adc	r30, r30
     a18:	88 f7       	brcc	.-30     	; 0x9fc <__divsf3_pse+0x90>
     a1a:	e0 95       	com	r30
     a1c:	08 95       	ret

00000a1e <__fixsfsi>:
     a1e:	04 d0       	rcall	.+8      	; 0xa28 <__fixunssfsi>
     a20:	68 94       	set
     a22:	b1 11       	cpse	r27, r1
     a24:	fe c0       	rjmp	.+508    	; 0xc22 <__fp_szero>
     a26:	08 95       	ret

00000a28 <__fixunssfsi>:
     a28:	e1 d0       	rcall	.+450    	; 0xbec <__fp_splitA>
     a2a:	88 f0       	brcs	.+34     	; 0xa4e <__fixunssfsi+0x26>
     a2c:	9f 57       	subi	r25, 0x7F	; 127
     a2e:	90 f0       	brcs	.+36     	; 0xa54 <__fixunssfsi+0x2c>
     a30:	b9 2f       	mov	r27, r25
     a32:	99 27       	eor	r25, r25
     a34:	b7 51       	subi	r27, 0x17	; 23
     a36:	a0 f0       	brcs	.+40     	; 0xa60 <__fixunssfsi+0x38>
     a38:	d1 f0       	breq	.+52     	; 0xa6e <__fixunssfsi+0x46>
     a3a:	66 0f       	add	r22, r22
     a3c:	77 1f       	adc	r23, r23
     a3e:	88 1f       	adc	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	1a f0       	brmi	.+6      	; 0xa4a <__fixunssfsi+0x22>
     a44:	ba 95       	dec	r27
     a46:	c9 f7       	brne	.-14     	; 0xa3a <__fixunssfsi+0x12>
     a48:	12 c0       	rjmp	.+36     	; 0xa6e <__fixunssfsi+0x46>
     a4a:	b1 30       	cpi	r27, 0x01	; 1
     a4c:	81 f0       	breq	.+32     	; 0xa6e <__fixunssfsi+0x46>
     a4e:	e8 d0       	rcall	.+464    	; 0xc20 <__fp_zero>
     a50:	b1 e0       	ldi	r27, 0x01	; 1
     a52:	08 95       	ret
     a54:	e5 c0       	rjmp	.+458    	; 0xc20 <__fp_zero>
     a56:	67 2f       	mov	r22, r23
     a58:	78 2f       	mov	r23, r24
     a5a:	88 27       	eor	r24, r24
     a5c:	b8 5f       	subi	r27, 0xF8	; 248
     a5e:	39 f0       	breq	.+14     	; 0xa6e <__fixunssfsi+0x46>
     a60:	b9 3f       	cpi	r27, 0xF9	; 249
     a62:	cc f3       	brlt	.-14     	; 0xa56 <__fixunssfsi+0x2e>
     a64:	86 95       	lsr	r24
     a66:	77 95       	ror	r23
     a68:	67 95       	ror	r22
     a6a:	b3 95       	inc	r27
     a6c:	d9 f7       	brne	.-10     	; 0xa64 <__fixunssfsi+0x3c>
     a6e:	3e f4       	brtc	.+14     	; 0xa7e <__fixunssfsi+0x56>
     a70:	90 95       	com	r25
     a72:	80 95       	com	r24
     a74:	70 95       	com	r23
     a76:	61 95       	neg	r22
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	8f 4f       	sbci	r24, 0xFF	; 255
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	08 95       	ret

00000a80 <__floatunsisf>:
     a80:	e8 94       	clt
     a82:	09 c0       	rjmp	.+18     	; 0xa96 <__floatsisf+0x12>

00000a84 <__floatsisf>:
     a84:	97 fb       	bst	r25, 7
     a86:	3e f4       	brtc	.+14     	; 0xa96 <__floatsisf+0x12>
     a88:	90 95       	com	r25
     a8a:	80 95       	com	r24
     a8c:	70 95       	com	r23
     a8e:	61 95       	neg	r22
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	8f 4f       	sbci	r24, 0xFF	; 255
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	99 23       	and	r25, r25
     a98:	a9 f0       	breq	.+42     	; 0xac4 <__floatsisf+0x40>
     a9a:	f9 2f       	mov	r31, r25
     a9c:	96 e9       	ldi	r25, 0x96	; 150
     a9e:	bb 27       	eor	r27, r27
     aa0:	93 95       	inc	r25
     aa2:	f6 95       	lsr	r31
     aa4:	87 95       	ror	r24
     aa6:	77 95       	ror	r23
     aa8:	67 95       	ror	r22
     aaa:	b7 95       	ror	r27
     aac:	f1 11       	cpse	r31, r1
     aae:	f8 cf       	rjmp	.-16     	; 0xaa0 <__floatsisf+0x1c>
     ab0:	fa f4       	brpl	.+62     	; 0xaf0 <__floatsisf+0x6c>
     ab2:	bb 0f       	add	r27, r27
     ab4:	11 f4       	brne	.+4      	; 0xaba <__floatsisf+0x36>
     ab6:	60 ff       	sbrs	r22, 0
     ab8:	1b c0       	rjmp	.+54     	; 0xaf0 <__floatsisf+0x6c>
     aba:	6f 5f       	subi	r22, 0xFF	; 255
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	8f 4f       	sbci	r24, 0xFF	; 255
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <__floatsisf+0x6c>
     ac4:	88 23       	and	r24, r24
     ac6:	11 f0       	breq	.+4      	; 0xacc <__floatsisf+0x48>
     ac8:	96 e9       	ldi	r25, 0x96	; 150
     aca:	11 c0       	rjmp	.+34     	; 0xaee <__floatsisf+0x6a>
     acc:	77 23       	and	r23, r23
     ace:	21 f0       	breq	.+8      	; 0xad8 <__floatsisf+0x54>
     ad0:	9e e8       	ldi	r25, 0x8E	; 142
     ad2:	87 2f       	mov	r24, r23
     ad4:	76 2f       	mov	r23, r22
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__floatsisf+0x5e>
     ad8:	66 23       	and	r22, r22
     ada:	71 f0       	breq	.+28     	; 0xaf8 <__floatsisf+0x74>
     adc:	96 e8       	ldi	r25, 0x86	; 134
     ade:	86 2f       	mov	r24, r22
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	2a f0       	brmi	.+10     	; 0xaf0 <__floatsisf+0x6c>
     ae6:	9a 95       	dec	r25
     ae8:	66 0f       	add	r22, r22
     aea:	77 1f       	adc	r23, r23
     aec:	88 1f       	adc	r24, r24
     aee:	da f7       	brpl	.-10     	; 0xae6 <__floatsisf+0x62>
     af0:	88 0f       	add	r24, r24
     af2:	96 95       	lsr	r25
     af4:	87 95       	ror	r24
     af6:	97 f9       	bld	r25, 7
     af8:	08 95       	ret

00000afa <__fp_cmp>:
     afa:	99 0f       	add	r25, r25
     afc:	00 08       	sbc	r0, r0
     afe:	55 0f       	add	r21, r21
     b00:	aa 0b       	sbc	r26, r26
     b02:	e0 e8       	ldi	r30, 0x80	; 128
     b04:	fe ef       	ldi	r31, 0xFE	; 254
     b06:	16 16       	cp	r1, r22
     b08:	17 06       	cpc	r1, r23
     b0a:	e8 07       	cpc	r30, r24
     b0c:	f9 07       	cpc	r31, r25
     b0e:	c0 f0       	brcs	.+48     	; 0xb40 <__fp_cmp+0x46>
     b10:	12 16       	cp	r1, r18
     b12:	13 06       	cpc	r1, r19
     b14:	e4 07       	cpc	r30, r20
     b16:	f5 07       	cpc	r31, r21
     b18:	98 f0       	brcs	.+38     	; 0xb40 <__fp_cmp+0x46>
     b1a:	62 1b       	sub	r22, r18
     b1c:	73 0b       	sbc	r23, r19
     b1e:	84 0b       	sbc	r24, r20
     b20:	95 0b       	sbc	r25, r21
     b22:	39 f4       	brne	.+14     	; 0xb32 <__fp_cmp+0x38>
     b24:	0a 26       	eor	r0, r26
     b26:	61 f0       	breq	.+24     	; 0xb40 <__fp_cmp+0x46>
     b28:	23 2b       	or	r18, r19
     b2a:	24 2b       	or	r18, r20
     b2c:	25 2b       	or	r18, r21
     b2e:	21 f4       	brne	.+8      	; 0xb38 <__fp_cmp+0x3e>
     b30:	08 95       	ret
     b32:	0a 26       	eor	r0, r26
     b34:	09 f4       	brne	.+2      	; 0xb38 <__fp_cmp+0x3e>
     b36:	a1 40       	sbci	r26, 0x01	; 1
     b38:	a6 95       	lsr	r26
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	81 1d       	adc	r24, r1
     b3e:	81 1d       	adc	r24, r1
     b40:	08 95       	ret

00000b42 <__fp_inf>:
     b42:	97 f9       	bld	r25, 7
     b44:	9f 67       	ori	r25, 0x7F	; 127
     b46:	80 e8       	ldi	r24, 0x80	; 128
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	08 95       	ret

00000b4e <__fp_nan>:
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	80 ec       	ldi	r24, 0xC0	; 192
     b52:	08 95       	ret

00000b54 <__fp_powser>:
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	1f 93       	push	r17
     b5a:	0f 93       	push	r16
     b5c:	ff 92       	push	r15
     b5e:	ef 92       	push	r14
     b60:	df 92       	push	r13
     b62:	7b 01       	movw	r14, r22
     b64:	8c 01       	movw	r16, r24
     b66:	68 94       	set
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fp_powser+0x20>
     b6a:	da 2e       	mov	r13, r26
     b6c:	ef 01       	movw	r28, r30
     b6e:	76 d0       	rcall	.+236    	; 0xc5c <__mulsf3x>
     b70:	fe 01       	movw	r30, r28
     b72:	e8 94       	clt
     b74:	a5 91       	lpm	r26, Z+
     b76:	25 91       	lpm	r18, Z+
     b78:	35 91       	lpm	r19, Z+
     b7a:	45 91       	lpm	r20, Z+
     b7c:	55 91       	lpm	r21, Z+
     b7e:	ae f3       	brts	.-22     	; 0xb6a <__fp_powser+0x16>
     b80:	ef 01       	movw	r28, r30
     b82:	2c de       	rcall	.-936    	; 0x7dc <__addsf3x>
     b84:	fe 01       	movw	r30, r28
     b86:	97 01       	movw	r18, r14
     b88:	a8 01       	movw	r20, r16
     b8a:	da 94       	dec	r13
     b8c:	79 f7       	brne	.-34     	; 0xb6c <__fp_powser+0x18>
     b8e:	df 90       	pop	r13
     b90:	ef 90       	pop	r14
     b92:	ff 90       	pop	r15
     b94:	0f 91       	pop	r16
     b96:	1f 91       	pop	r17
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <__fp_pscA>:
     b9e:	00 24       	eor	r0, r0
     ba0:	0a 94       	dec	r0
     ba2:	16 16       	cp	r1, r22
     ba4:	17 06       	cpc	r1, r23
     ba6:	18 06       	cpc	r1, r24
     ba8:	09 06       	cpc	r0, r25
     baa:	08 95       	ret

00000bac <__fp_pscB>:
     bac:	00 24       	eor	r0, r0
     bae:	0a 94       	dec	r0
     bb0:	12 16       	cp	r1, r18
     bb2:	13 06       	cpc	r1, r19
     bb4:	14 06       	cpc	r1, r20
     bb6:	05 06       	cpc	r0, r21
     bb8:	08 95       	ret

00000bba <__fp_round>:
     bba:	09 2e       	mov	r0, r25
     bbc:	03 94       	inc	r0
     bbe:	00 0c       	add	r0, r0
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <__fp_round+0xc>
     bc2:	88 23       	and	r24, r24
     bc4:	52 f0       	brmi	.+20     	; 0xbda <__fp_round+0x20>
     bc6:	bb 0f       	add	r27, r27
     bc8:	40 f4       	brcc	.+16     	; 0xbda <__fp_round+0x20>
     bca:	bf 2b       	or	r27, r31
     bcc:	11 f4       	brne	.+4      	; 0xbd2 <__fp_round+0x18>
     bce:	60 ff       	sbrs	r22, 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__fp_round+0x20>
     bd2:	6f 5f       	subi	r22, 0xFF	; 255
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	8f 4f       	sbci	r24, 0xFF	; 255
     bd8:	9f 4f       	sbci	r25, 0xFF	; 255
     bda:	08 95       	ret

00000bdc <__fp_split3>:
     bdc:	57 fd       	sbrc	r21, 7
     bde:	90 58       	subi	r25, 0x80	; 128
     be0:	44 0f       	add	r20, r20
     be2:	55 1f       	adc	r21, r21
     be4:	59 f0       	breq	.+22     	; 0xbfc <__fp_splitA+0x10>
     be6:	5f 3f       	cpi	r21, 0xFF	; 255
     be8:	71 f0       	breq	.+28     	; 0xc06 <__fp_splitA+0x1a>
     bea:	47 95       	ror	r20

00000bec <__fp_splitA>:
     bec:	88 0f       	add	r24, r24
     bee:	97 fb       	bst	r25, 7
     bf0:	99 1f       	adc	r25, r25
     bf2:	61 f0       	breq	.+24     	; 0xc0c <__fp_splitA+0x20>
     bf4:	9f 3f       	cpi	r25, 0xFF	; 255
     bf6:	79 f0       	breq	.+30     	; 0xc16 <__fp_splitA+0x2a>
     bf8:	87 95       	ror	r24
     bfa:	08 95       	ret
     bfc:	12 16       	cp	r1, r18
     bfe:	13 06       	cpc	r1, r19
     c00:	14 06       	cpc	r1, r20
     c02:	55 1f       	adc	r21, r21
     c04:	f2 cf       	rjmp	.-28     	; 0xbea <__fp_split3+0xe>
     c06:	46 95       	lsr	r20
     c08:	f1 df       	rcall	.-30     	; 0xbec <__fp_splitA>
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <__fp_splitA+0x30>
     c0c:	16 16       	cp	r1, r22
     c0e:	17 06       	cpc	r1, r23
     c10:	18 06       	cpc	r1, r24
     c12:	99 1f       	adc	r25, r25
     c14:	f1 cf       	rjmp	.-30     	; 0xbf8 <__fp_splitA+0xc>
     c16:	86 95       	lsr	r24
     c18:	71 05       	cpc	r23, r1
     c1a:	61 05       	cpc	r22, r1
     c1c:	08 94       	sec
     c1e:	08 95       	ret

00000c20 <__fp_zero>:
     c20:	e8 94       	clt

00000c22 <__fp_szero>:
     c22:	bb 27       	eor	r27, r27
     c24:	66 27       	eor	r22, r22
     c26:	77 27       	eor	r23, r23
     c28:	cb 01       	movw	r24, r22
     c2a:	97 f9       	bld	r25, 7
     c2c:	08 95       	ret

00000c2e <__gesf2>:
     c2e:	65 df       	rcall	.-310    	; 0xafa <__fp_cmp>
     c30:	08 f4       	brcc	.+2      	; 0xc34 <__gesf2+0x6>
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	08 95       	ret

00000c36 <inverse>:
     c36:	9b 01       	movw	r18, r22
     c38:	ac 01       	movw	r20, r24
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	80 e8       	ldi	r24, 0x80	; 128
     c40:	9f e3       	ldi	r25, 0x3F	; 63
     c42:	85 ce       	rjmp	.-758    	; 0x94e <__divsf3>

00000c44 <__mulsf3>:
     c44:	0b d0       	rcall	.+22     	; 0xc5c <__mulsf3x>
     c46:	b9 cf       	rjmp	.-142    	; 0xbba <__fp_round>
     c48:	aa df       	rcall	.-172    	; 0xb9e <__fp_pscA>
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__mulsf3+0x12>
     c4c:	af df       	rcall	.-162    	; 0xbac <__fp_pscB>
     c4e:	18 f0       	brcs	.+6      	; 0xc56 <__mulsf3+0x12>
     c50:	95 23       	and	r25, r21
     c52:	09 f0       	breq	.+2      	; 0xc56 <__mulsf3+0x12>
     c54:	76 cf       	rjmp	.-276    	; 0xb42 <__fp_inf>
     c56:	7b cf       	rjmp	.-266    	; 0xb4e <__fp_nan>
     c58:	11 24       	eor	r1, r1
     c5a:	e3 cf       	rjmp	.-58     	; 0xc22 <__fp_szero>

00000c5c <__mulsf3x>:
     c5c:	bf df       	rcall	.-130    	; 0xbdc <__fp_split3>
     c5e:	a0 f3       	brcs	.-24     	; 0xc48 <__mulsf3+0x4>

00000c60 <__mulsf3_pse>:
     c60:	95 9f       	mul	r25, r21
     c62:	d1 f3       	breq	.-12     	; 0xc58 <__mulsf3+0x14>
     c64:	95 0f       	add	r25, r21
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	55 1f       	adc	r21, r21
     c6a:	62 9f       	mul	r22, r18
     c6c:	f0 01       	movw	r30, r0
     c6e:	72 9f       	mul	r23, r18
     c70:	bb 27       	eor	r27, r27
     c72:	f0 0d       	add	r31, r0
     c74:	b1 1d       	adc	r27, r1
     c76:	63 9f       	mul	r22, r19
     c78:	aa 27       	eor	r26, r26
     c7a:	f0 0d       	add	r31, r0
     c7c:	b1 1d       	adc	r27, r1
     c7e:	aa 1f       	adc	r26, r26
     c80:	64 9f       	mul	r22, r20
     c82:	66 27       	eor	r22, r22
     c84:	b0 0d       	add	r27, r0
     c86:	a1 1d       	adc	r26, r1
     c88:	66 1f       	adc	r22, r22
     c8a:	82 9f       	mul	r24, r18
     c8c:	22 27       	eor	r18, r18
     c8e:	b0 0d       	add	r27, r0
     c90:	a1 1d       	adc	r26, r1
     c92:	62 1f       	adc	r22, r18
     c94:	73 9f       	mul	r23, r19
     c96:	b0 0d       	add	r27, r0
     c98:	a1 1d       	adc	r26, r1
     c9a:	62 1f       	adc	r22, r18
     c9c:	83 9f       	mul	r24, r19
     c9e:	a0 0d       	add	r26, r0
     ca0:	61 1d       	adc	r22, r1
     ca2:	22 1f       	adc	r18, r18
     ca4:	74 9f       	mul	r23, r20
     ca6:	33 27       	eor	r19, r19
     ca8:	a0 0d       	add	r26, r0
     caa:	61 1d       	adc	r22, r1
     cac:	23 1f       	adc	r18, r19
     cae:	84 9f       	mul	r24, r20
     cb0:	60 0d       	add	r22, r0
     cb2:	21 1d       	adc	r18, r1
     cb4:	82 2f       	mov	r24, r18
     cb6:	76 2f       	mov	r23, r22
     cb8:	6a 2f       	mov	r22, r26
     cba:	11 24       	eor	r1, r1
     cbc:	9f 57       	subi	r25, 0x7F	; 127
     cbe:	50 40       	sbci	r21, 0x00	; 0
     cc0:	8a f0       	brmi	.+34     	; 0xce4 <__mulsf3_pse+0x84>
     cc2:	e1 f0       	breq	.+56     	; 0xcfc <__mulsf3_pse+0x9c>
     cc4:	88 23       	and	r24, r24
     cc6:	4a f0       	brmi	.+18     	; 0xcda <__mulsf3_pse+0x7a>
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	bb 1f       	adc	r27, r27
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	88 1f       	adc	r24, r24
     cd4:	91 50       	subi	r25, 0x01	; 1
     cd6:	50 40       	sbci	r21, 0x00	; 0
     cd8:	a9 f7       	brne	.-22     	; 0xcc4 <__mulsf3_pse+0x64>
     cda:	9e 3f       	cpi	r25, 0xFE	; 254
     cdc:	51 05       	cpc	r21, r1
     cde:	70 f0       	brcs	.+28     	; 0xcfc <__mulsf3_pse+0x9c>
     ce0:	30 cf       	rjmp	.-416    	; 0xb42 <__fp_inf>
     ce2:	9f cf       	rjmp	.-194    	; 0xc22 <__fp_szero>
     ce4:	5f 3f       	cpi	r21, 0xFF	; 255
     ce6:	ec f3       	brlt	.-6      	; 0xce2 <__mulsf3_pse+0x82>
     ce8:	98 3e       	cpi	r25, 0xE8	; 232
     cea:	dc f3       	brlt	.-10     	; 0xce2 <__mulsf3_pse+0x82>
     cec:	86 95       	lsr	r24
     cee:	77 95       	ror	r23
     cf0:	67 95       	ror	r22
     cf2:	b7 95       	ror	r27
     cf4:	f7 95       	ror	r31
     cf6:	e7 95       	ror	r30
     cf8:	9f 5f       	subi	r25, 0xFF	; 255
     cfa:	c1 f7       	brne	.-16     	; 0xcec <__mulsf3_pse+0x8c>
     cfc:	fe 2b       	or	r31, r30
     cfe:	88 0f       	add	r24, r24
     d00:	91 1d       	adc	r25, r1
     d02:	96 95       	lsr	r25
     d04:	87 95       	ror	r24
     d06:	97 f9       	bld	r25, 7
     d08:	08 95       	ret

00000d0a <square>:
     d0a:	9b 01       	movw	r18, r22
     d0c:	ac 01       	movw	r20, r24
     d0e:	9a cf       	rjmp	.-204    	; 0xc44 <__mulsf3>

00000d10 <fdevopen>:
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	31 f4       	brne	.+12     	; 0xd28 <fdevopen+0x18>
     d1c:	61 15       	cp	r22, r1
     d1e:	71 05       	cpc	r23, r1
     d20:	19 f4       	brne	.+6      	; 0xd28 <fdevopen+0x18>
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	39 c0       	rjmp	.+114    	; 0xd9a <fdevopen+0x8a>
     d28:	8b 01       	movw	r16, r22
     d2a:	ec 01       	movw	r28, r24
     d2c:	6e e0       	ldi	r22, 0x0E	; 14
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	47 d2       	rcall	.+1166   	; 0x11c4 <calloc>
     d36:	fc 01       	movw	r30, r24
     d38:	89 2b       	or	r24, r25
     d3a:	99 f3       	breq	.-26     	; 0xd22 <fdevopen+0x12>
     d3c:	80 e8       	ldi	r24, 0x80	; 128
     d3e:	83 83       	std	Z+3, r24	; 0x03
     d40:	01 15       	cp	r16, r1
     d42:	11 05       	cpc	r17, r1
     d44:	71 f0       	breq	.+28     	; 0xd62 <fdevopen+0x52>
     d46:	13 87       	std	Z+11, r17	; 0x0b
     d48:	02 87       	std	Z+10, r16	; 0x0a
     d4a:	81 e8       	ldi	r24, 0x81	; 129
     d4c:	83 83       	std	Z+3, r24	; 0x03
     d4e:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__iob>
     d52:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <__iob+0x1>
     d56:	89 2b       	or	r24, r25
     d58:	21 f4       	brne	.+8      	; 0xd62 <fdevopen+0x52>
     d5a:	f0 93 88 03 	sts	0x0388, r31	; 0x800388 <__iob+0x1>
     d5e:	e0 93 87 03 	sts	0x0387, r30	; 0x800387 <__iob>
     d62:	20 97       	sbiw	r28, 0x00	; 0
     d64:	c9 f0       	breq	.+50     	; 0xd98 <fdevopen+0x88>
     d66:	d1 87       	std	Z+9, r29	; 0x09
     d68:	c0 87       	std	Z+8, r28	; 0x08
     d6a:	83 81       	ldd	r24, Z+3	; 0x03
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	83 83       	std	Z+3, r24	; 0x03
     d70:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <__iob+0x2>
     d74:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <__iob+0x3>
     d78:	89 2b       	or	r24, r25
     d7a:	71 f4       	brne	.+28     	; 0xd98 <fdevopen+0x88>
     d7c:	f0 93 8a 03 	sts	0x038A, r31	; 0x80038a <__iob+0x3>
     d80:	e0 93 89 03 	sts	0x0389, r30	; 0x800389 <__iob+0x2>
     d84:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <__iob+0x4>
     d88:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <__iob+0x5>
     d8c:	89 2b       	or	r24, r25
     d8e:	21 f4       	brne	.+8      	; 0xd98 <fdevopen+0x88>
     d90:	f0 93 8c 03 	sts	0x038C, r31	; 0x80038c <__iob+0x5>
     d94:	e0 93 8b 03 	sts	0x038B, r30	; 0x80038b <__iob+0x4>
     d98:	cf 01       	movw	r24, r30
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <printf>:
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	ae 01       	movw	r20, r28
     dae:	4a 5f       	subi	r20, 0xFA	; 250
     db0:	5f 4f       	sbci	r21, 0xFF	; 255
     db2:	fa 01       	movw	r30, r20
     db4:	61 91       	ld	r22, Z+
     db6:	71 91       	ld	r23, Z+
     db8:	af 01       	movw	r20, r30
     dba:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <__iob+0x2>
     dbe:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <__iob+0x3>
     dc2:	03 d0       	rcall	.+6      	; 0xdca <vfprintf>
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <vfprintf>:
     dca:	2f 92       	push	r2
     dcc:	3f 92       	push	r3
     dce:	4f 92       	push	r4
     dd0:	5f 92       	push	r5
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	2b 97       	sbiw	r28, 0x0b	; 11
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	6c 01       	movw	r12, r24
     e00:	7b 01       	movw	r14, r22
     e02:	8a 01       	movw	r16, r20
     e04:	fc 01       	movw	r30, r24
     e06:	17 82       	std	Z+7, r1	; 0x07
     e08:	16 82       	std	Z+6, r1	; 0x06
     e0a:	83 81       	ldd	r24, Z+3	; 0x03
     e0c:	81 ff       	sbrs	r24, 1
     e0e:	bf c1       	rjmp	.+894    	; 0x118e <vfprintf+0x3c4>
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	3c 01       	movw	r6, r24
     e16:	f6 01       	movw	r30, r12
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	f7 01       	movw	r30, r14
     e1c:	93 fd       	sbrc	r25, 3
     e1e:	85 91       	lpm	r24, Z+
     e20:	93 ff       	sbrs	r25, 3
     e22:	81 91       	ld	r24, Z+
     e24:	7f 01       	movw	r14, r30
     e26:	88 23       	and	r24, r24
     e28:	09 f4       	brne	.+2      	; 0xe2c <vfprintf+0x62>
     e2a:	ad c1       	rjmp	.+858    	; 0x1186 <vfprintf+0x3bc>
     e2c:	85 32       	cpi	r24, 0x25	; 37
     e2e:	39 f4       	brne	.+14     	; 0xe3e <vfprintf+0x74>
     e30:	93 fd       	sbrc	r25, 3
     e32:	85 91       	lpm	r24, Z+
     e34:	93 ff       	sbrs	r25, 3
     e36:	81 91       	ld	r24, Z+
     e38:	7f 01       	movw	r14, r30
     e3a:	85 32       	cpi	r24, 0x25	; 37
     e3c:	21 f4       	brne	.+8      	; 0xe46 <vfprintf+0x7c>
     e3e:	b6 01       	movw	r22, r12
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	18 d3       	rcall	.+1584   	; 0x1474 <fputc>
     e44:	e8 cf       	rjmp	.-48     	; 0xe16 <vfprintf+0x4c>
     e46:	91 2c       	mov	r9, r1
     e48:	21 2c       	mov	r2, r1
     e4a:	31 2c       	mov	r3, r1
     e4c:	ff e1       	ldi	r31, 0x1F	; 31
     e4e:	f3 15       	cp	r31, r3
     e50:	d8 f0       	brcs	.+54     	; 0xe88 <vfprintf+0xbe>
     e52:	8b 32       	cpi	r24, 0x2B	; 43
     e54:	79 f0       	breq	.+30     	; 0xe74 <vfprintf+0xaa>
     e56:	38 f4       	brcc	.+14     	; 0xe66 <vfprintf+0x9c>
     e58:	80 32       	cpi	r24, 0x20	; 32
     e5a:	79 f0       	breq	.+30     	; 0xe7a <vfprintf+0xb0>
     e5c:	83 32       	cpi	r24, 0x23	; 35
     e5e:	a1 f4       	brne	.+40     	; 0xe88 <vfprintf+0xbe>
     e60:	23 2d       	mov	r18, r3
     e62:	20 61       	ori	r18, 0x10	; 16
     e64:	1d c0       	rjmp	.+58     	; 0xea0 <vfprintf+0xd6>
     e66:	8d 32       	cpi	r24, 0x2D	; 45
     e68:	61 f0       	breq	.+24     	; 0xe82 <vfprintf+0xb8>
     e6a:	80 33       	cpi	r24, 0x30	; 48
     e6c:	69 f4       	brne	.+26     	; 0xe88 <vfprintf+0xbe>
     e6e:	23 2d       	mov	r18, r3
     e70:	21 60       	ori	r18, 0x01	; 1
     e72:	16 c0       	rjmp	.+44     	; 0xea0 <vfprintf+0xd6>
     e74:	83 2d       	mov	r24, r3
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	38 2e       	mov	r3, r24
     e7a:	e3 2d       	mov	r30, r3
     e7c:	e4 60       	ori	r30, 0x04	; 4
     e7e:	3e 2e       	mov	r3, r30
     e80:	2a c0       	rjmp	.+84     	; 0xed6 <vfprintf+0x10c>
     e82:	f3 2d       	mov	r31, r3
     e84:	f8 60       	ori	r31, 0x08	; 8
     e86:	1d c0       	rjmp	.+58     	; 0xec2 <vfprintf+0xf8>
     e88:	37 fc       	sbrc	r3, 7
     e8a:	2d c0       	rjmp	.+90     	; 0xee6 <vfprintf+0x11c>
     e8c:	20 ed       	ldi	r18, 0xD0	; 208
     e8e:	28 0f       	add	r18, r24
     e90:	2a 30       	cpi	r18, 0x0A	; 10
     e92:	40 f0       	brcs	.+16     	; 0xea4 <vfprintf+0xda>
     e94:	8e 32       	cpi	r24, 0x2E	; 46
     e96:	b9 f4       	brne	.+46     	; 0xec6 <vfprintf+0xfc>
     e98:	36 fc       	sbrc	r3, 6
     e9a:	75 c1       	rjmp	.+746    	; 0x1186 <vfprintf+0x3bc>
     e9c:	23 2d       	mov	r18, r3
     e9e:	20 64       	ori	r18, 0x40	; 64
     ea0:	32 2e       	mov	r3, r18
     ea2:	19 c0       	rjmp	.+50     	; 0xed6 <vfprintf+0x10c>
     ea4:	36 fe       	sbrs	r3, 6
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <vfprintf+0xea>
     ea8:	8a e0       	ldi	r24, 0x0A	; 10
     eaa:	98 9e       	mul	r9, r24
     eac:	20 0d       	add	r18, r0
     eae:	11 24       	eor	r1, r1
     eb0:	92 2e       	mov	r9, r18
     eb2:	11 c0       	rjmp	.+34     	; 0xed6 <vfprintf+0x10c>
     eb4:	ea e0       	ldi	r30, 0x0A	; 10
     eb6:	2e 9e       	mul	r2, r30
     eb8:	20 0d       	add	r18, r0
     eba:	11 24       	eor	r1, r1
     ebc:	22 2e       	mov	r2, r18
     ebe:	f3 2d       	mov	r31, r3
     ec0:	f0 62       	ori	r31, 0x20	; 32
     ec2:	3f 2e       	mov	r3, r31
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <vfprintf+0x10c>
     ec6:	8c 36       	cpi	r24, 0x6C	; 108
     ec8:	21 f4       	brne	.+8      	; 0xed2 <vfprintf+0x108>
     eca:	83 2d       	mov	r24, r3
     ecc:	80 68       	ori	r24, 0x80	; 128
     ece:	38 2e       	mov	r3, r24
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x10c>
     ed2:	88 36       	cpi	r24, 0x68	; 104
     ed4:	41 f4       	brne	.+16     	; 0xee6 <vfprintf+0x11c>
     ed6:	f7 01       	movw	r30, r14
     ed8:	93 fd       	sbrc	r25, 3
     eda:	85 91       	lpm	r24, Z+
     edc:	93 ff       	sbrs	r25, 3
     ede:	81 91       	ld	r24, Z+
     ee0:	7f 01       	movw	r14, r30
     ee2:	81 11       	cpse	r24, r1
     ee4:	b3 cf       	rjmp	.-154    	; 0xe4c <vfprintf+0x82>
     ee6:	98 2f       	mov	r25, r24
     ee8:	9f 7d       	andi	r25, 0xDF	; 223
     eea:	95 54       	subi	r25, 0x45	; 69
     eec:	93 30       	cpi	r25, 0x03	; 3
     eee:	28 f4       	brcc	.+10     	; 0xefa <vfprintf+0x130>
     ef0:	0c 5f       	subi	r16, 0xFC	; 252
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	9f e3       	ldi	r25, 0x3F	; 63
     ef6:	99 83       	std	Y+1, r25	; 0x01
     ef8:	0d c0       	rjmp	.+26     	; 0xf14 <vfprintf+0x14a>
     efa:	83 36       	cpi	r24, 0x63	; 99
     efc:	31 f0       	breq	.+12     	; 0xf0a <vfprintf+0x140>
     efe:	83 37       	cpi	r24, 0x73	; 115
     f00:	71 f0       	breq	.+28     	; 0xf1e <vfprintf+0x154>
     f02:	83 35       	cpi	r24, 0x53	; 83
     f04:	09 f0       	breq	.+2      	; 0xf08 <vfprintf+0x13e>
     f06:	55 c0       	rjmp	.+170    	; 0xfb2 <vfprintf+0x1e8>
     f08:	20 c0       	rjmp	.+64     	; 0xf4a <vfprintf+0x180>
     f0a:	f8 01       	movw	r30, r16
     f0c:	80 81       	ld	r24, Z
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	0e 5f       	subi	r16, 0xFE	; 254
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	88 24       	eor	r8, r8
     f16:	83 94       	inc	r8
     f18:	91 2c       	mov	r9, r1
     f1a:	53 01       	movw	r10, r6
     f1c:	12 c0       	rjmp	.+36     	; 0xf42 <vfprintf+0x178>
     f1e:	28 01       	movw	r4, r16
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	4f 0e       	add	r4, r31
     f24:	51 1c       	adc	r5, r1
     f26:	f8 01       	movw	r30, r16
     f28:	a0 80       	ld	r10, Z
     f2a:	b1 80       	ldd	r11, Z+1	; 0x01
     f2c:	36 fe       	sbrs	r3, 6
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x16c>
     f30:	69 2d       	mov	r22, r9
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x170>
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f ef       	ldi	r23, 0xFF	; 255
     f3a:	c5 01       	movw	r24, r10
     f3c:	90 d2       	rcall	.+1312   	; 0x145e <strnlen>
     f3e:	4c 01       	movw	r8, r24
     f40:	82 01       	movw	r16, r4
     f42:	f3 2d       	mov	r31, r3
     f44:	ff 77       	andi	r31, 0x7F	; 127
     f46:	3f 2e       	mov	r3, r31
     f48:	15 c0       	rjmp	.+42     	; 0xf74 <vfprintf+0x1aa>
     f4a:	28 01       	movw	r4, r16
     f4c:	22 e0       	ldi	r18, 0x02	; 2
     f4e:	42 0e       	add	r4, r18
     f50:	51 1c       	adc	r5, r1
     f52:	f8 01       	movw	r30, r16
     f54:	a0 80       	ld	r10, Z
     f56:	b1 80       	ldd	r11, Z+1	; 0x01
     f58:	36 fe       	sbrs	r3, 6
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <vfprintf+0x198>
     f5c:	69 2d       	mov	r22, r9
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <vfprintf+0x19c>
     f62:	6f ef       	ldi	r22, 0xFF	; 255
     f64:	7f ef       	ldi	r23, 0xFF	; 255
     f66:	c5 01       	movw	r24, r10
     f68:	68 d2       	rcall	.+1232   	; 0x143a <strnlen_P>
     f6a:	4c 01       	movw	r8, r24
     f6c:	f3 2d       	mov	r31, r3
     f6e:	f0 68       	ori	r31, 0x80	; 128
     f70:	3f 2e       	mov	r3, r31
     f72:	82 01       	movw	r16, r4
     f74:	33 fc       	sbrc	r3, 3
     f76:	19 c0       	rjmp	.+50     	; 0xfaa <vfprintf+0x1e0>
     f78:	82 2d       	mov	r24, r2
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	88 16       	cp	r8, r24
     f7e:	99 06       	cpc	r9, r25
     f80:	a0 f4       	brcc	.+40     	; 0xfaa <vfprintf+0x1e0>
     f82:	b6 01       	movw	r22, r12
     f84:	80 e2       	ldi	r24, 0x20	; 32
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	75 d2       	rcall	.+1258   	; 0x1474 <fputc>
     f8a:	2a 94       	dec	r2
     f8c:	f5 cf       	rjmp	.-22     	; 0xf78 <vfprintf+0x1ae>
     f8e:	f5 01       	movw	r30, r10
     f90:	37 fc       	sbrc	r3, 7
     f92:	85 91       	lpm	r24, Z+
     f94:	37 fe       	sbrs	r3, 7
     f96:	81 91       	ld	r24, Z+
     f98:	5f 01       	movw	r10, r30
     f9a:	b6 01       	movw	r22, r12
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	6a d2       	rcall	.+1236   	; 0x1474 <fputc>
     fa0:	21 10       	cpse	r2, r1
     fa2:	2a 94       	dec	r2
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	82 1a       	sub	r8, r18
     fa8:	91 08       	sbc	r9, r1
     faa:	81 14       	cp	r8, r1
     fac:	91 04       	cpc	r9, r1
     fae:	79 f7       	brne	.-34     	; 0xf8e <vfprintf+0x1c4>
     fb0:	e1 c0       	rjmp	.+450    	; 0x1174 <vfprintf+0x3aa>
     fb2:	84 36       	cpi	r24, 0x64	; 100
     fb4:	11 f0       	breq	.+4      	; 0xfba <vfprintf+0x1f0>
     fb6:	89 36       	cpi	r24, 0x69	; 105
     fb8:	39 f5       	brne	.+78     	; 0x1008 <vfprintf+0x23e>
     fba:	f8 01       	movw	r30, r16
     fbc:	37 fe       	sbrs	r3, 7
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <vfprintf+0x204>
     fc0:	60 81       	ld	r22, Z
     fc2:	71 81       	ldd	r23, Z+1	; 0x01
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	0c 5f       	subi	r16, 0xFC	; 252
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	08 c0       	rjmp	.+16     	; 0xfde <vfprintf+0x214>
     fce:	60 81       	ld	r22, Z
     fd0:	71 81       	ldd	r23, Z+1	; 0x01
     fd2:	07 2e       	mov	r0, r23
     fd4:	00 0c       	add	r0, r0
     fd6:	88 0b       	sbc	r24, r24
     fd8:	99 0b       	sbc	r25, r25
     fda:	0e 5f       	subi	r16, 0xFE	; 254
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	f3 2d       	mov	r31, r3
     fe0:	ff 76       	andi	r31, 0x6F	; 111
     fe2:	3f 2e       	mov	r3, r31
     fe4:	97 ff       	sbrs	r25, 7
     fe6:	09 c0       	rjmp	.+18     	; 0xffa <vfprintf+0x230>
     fe8:	90 95       	com	r25
     fea:	80 95       	com	r24
     fec:	70 95       	com	r23
     fee:	61 95       	neg	r22
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	8f 4f       	sbci	r24, 0xFF	; 255
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	f0 68       	ori	r31, 0x80	; 128
     ff8:	3f 2e       	mov	r3, r31
     ffa:	2a e0       	ldi	r18, 0x0A	; 10
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	a3 01       	movw	r20, r6
    1000:	75 d2       	rcall	.+1258   	; 0x14ec <__ultoa_invert>
    1002:	88 2e       	mov	r8, r24
    1004:	86 18       	sub	r8, r6
    1006:	44 c0       	rjmp	.+136    	; 0x1090 <vfprintf+0x2c6>
    1008:	85 37       	cpi	r24, 0x75	; 117
    100a:	31 f4       	brne	.+12     	; 0x1018 <vfprintf+0x24e>
    100c:	23 2d       	mov	r18, r3
    100e:	2f 7e       	andi	r18, 0xEF	; 239
    1010:	b2 2e       	mov	r11, r18
    1012:	2a e0       	ldi	r18, 0x0A	; 10
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	25 c0       	rjmp	.+74     	; 0x1062 <vfprintf+0x298>
    1018:	93 2d       	mov	r25, r3
    101a:	99 7f       	andi	r25, 0xF9	; 249
    101c:	b9 2e       	mov	r11, r25
    101e:	8f 36       	cpi	r24, 0x6F	; 111
    1020:	c1 f0       	breq	.+48     	; 0x1052 <vfprintf+0x288>
    1022:	18 f4       	brcc	.+6      	; 0x102a <vfprintf+0x260>
    1024:	88 35       	cpi	r24, 0x58	; 88
    1026:	79 f0       	breq	.+30     	; 0x1046 <vfprintf+0x27c>
    1028:	ae c0       	rjmp	.+348    	; 0x1186 <vfprintf+0x3bc>
    102a:	80 37       	cpi	r24, 0x70	; 112
    102c:	19 f0       	breq	.+6      	; 0x1034 <vfprintf+0x26a>
    102e:	88 37       	cpi	r24, 0x78	; 120
    1030:	21 f0       	breq	.+8      	; 0x103a <vfprintf+0x270>
    1032:	a9 c0       	rjmp	.+338    	; 0x1186 <vfprintf+0x3bc>
    1034:	e9 2f       	mov	r30, r25
    1036:	e0 61       	ori	r30, 0x10	; 16
    1038:	be 2e       	mov	r11, r30
    103a:	b4 fe       	sbrs	r11, 4
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <vfprintf+0x28e>
    103e:	fb 2d       	mov	r31, r11
    1040:	f4 60       	ori	r31, 0x04	; 4
    1042:	bf 2e       	mov	r11, r31
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <vfprintf+0x28e>
    1046:	34 fe       	sbrs	r3, 4
    1048:	0a c0       	rjmp	.+20     	; 0x105e <vfprintf+0x294>
    104a:	29 2f       	mov	r18, r25
    104c:	26 60       	ori	r18, 0x06	; 6
    104e:	b2 2e       	mov	r11, r18
    1050:	06 c0       	rjmp	.+12     	; 0x105e <vfprintf+0x294>
    1052:	28 e0       	ldi	r18, 0x08	; 8
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <vfprintf+0x298>
    1058:	20 e1       	ldi	r18, 0x10	; 16
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0x298>
    105e:	20 e1       	ldi	r18, 0x10	; 16
    1060:	32 e0       	ldi	r19, 0x02	; 2
    1062:	f8 01       	movw	r30, r16
    1064:	b7 fe       	sbrs	r11, 7
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <vfprintf+0x2ac>
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	0c 5f       	subi	r16, 0xFC	; 252
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <vfprintf+0x2b8>
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 5f       	subi	r16, 0xFE	; 254
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	a3 01       	movw	r20, r6
    1084:	33 d2       	rcall	.+1126   	; 0x14ec <__ultoa_invert>
    1086:	88 2e       	mov	r8, r24
    1088:	86 18       	sub	r8, r6
    108a:	fb 2d       	mov	r31, r11
    108c:	ff 77       	andi	r31, 0x7F	; 127
    108e:	3f 2e       	mov	r3, r31
    1090:	36 fe       	sbrs	r3, 6
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <vfprintf+0x2e4>
    1094:	23 2d       	mov	r18, r3
    1096:	2e 7f       	andi	r18, 0xFE	; 254
    1098:	a2 2e       	mov	r10, r18
    109a:	89 14       	cp	r8, r9
    109c:	58 f4       	brcc	.+22     	; 0x10b4 <vfprintf+0x2ea>
    109e:	34 fe       	sbrs	r3, 4
    10a0:	0b c0       	rjmp	.+22     	; 0x10b8 <vfprintf+0x2ee>
    10a2:	32 fc       	sbrc	r3, 2
    10a4:	09 c0       	rjmp	.+18     	; 0x10b8 <vfprintf+0x2ee>
    10a6:	83 2d       	mov	r24, r3
    10a8:	8e 7e       	andi	r24, 0xEE	; 238
    10aa:	a8 2e       	mov	r10, r24
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <vfprintf+0x2ee>
    10ae:	b8 2c       	mov	r11, r8
    10b0:	a3 2c       	mov	r10, r3
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <vfprintf+0x2f0>
    10b4:	b8 2c       	mov	r11, r8
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <vfprintf+0x2f0>
    10b8:	b9 2c       	mov	r11, r9
    10ba:	a4 fe       	sbrs	r10, 4
    10bc:	0f c0       	rjmp	.+30     	; 0x10dc <vfprintf+0x312>
    10be:	fe 01       	movw	r30, r28
    10c0:	e8 0d       	add	r30, r8
    10c2:	f1 1d       	adc	r31, r1
    10c4:	80 81       	ld	r24, Z
    10c6:	80 33       	cpi	r24, 0x30	; 48
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <vfprintf+0x308>
    10ca:	9a 2d       	mov	r25, r10
    10cc:	99 7e       	andi	r25, 0xE9	; 233
    10ce:	a9 2e       	mov	r10, r25
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <vfprintf+0x31a>
    10d2:	a2 fe       	sbrs	r10, 2
    10d4:	06 c0       	rjmp	.+12     	; 0x10e2 <vfprintf+0x318>
    10d6:	b3 94       	inc	r11
    10d8:	b3 94       	inc	r11
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <vfprintf+0x31a>
    10dc:	8a 2d       	mov	r24, r10
    10de:	86 78       	andi	r24, 0x86	; 134
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <vfprintf+0x31a>
    10e2:	b3 94       	inc	r11
    10e4:	a3 fc       	sbrc	r10, 3
    10e6:	10 c0       	rjmp	.+32     	; 0x1108 <vfprintf+0x33e>
    10e8:	a0 fe       	sbrs	r10, 0
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <vfprintf+0x32e>
    10ec:	b2 14       	cp	r11, r2
    10ee:	80 f4       	brcc	.+32     	; 0x1110 <vfprintf+0x346>
    10f0:	28 0c       	add	r2, r8
    10f2:	92 2c       	mov	r9, r2
    10f4:	9b 18       	sub	r9, r11
    10f6:	0d c0       	rjmp	.+26     	; 0x1112 <vfprintf+0x348>
    10f8:	b2 14       	cp	r11, r2
    10fa:	58 f4       	brcc	.+22     	; 0x1112 <vfprintf+0x348>
    10fc:	b6 01       	movw	r22, r12
    10fe:	80 e2       	ldi	r24, 0x20	; 32
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	b8 d1       	rcall	.+880    	; 0x1474 <fputc>
    1104:	b3 94       	inc	r11
    1106:	f8 cf       	rjmp	.-16     	; 0x10f8 <vfprintf+0x32e>
    1108:	b2 14       	cp	r11, r2
    110a:	18 f4       	brcc	.+6      	; 0x1112 <vfprintf+0x348>
    110c:	2b 18       	sub	r2, r11
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <vfprintf+0x34a>
    1110:	98 2c       	mov	r9, r8
    1112:	21 2c       	mov	r2, r1
    1114:	a4 fe       	sbrs	r10, 4
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <vfprintf+0x36c>
    1118:	b6 01       	movw	r22, r12
    111a:	80 e3       	ldi	r24, 0x30	; 48
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	aa d1       	rcall	.+852    	; 0x1474 <fputc>
    1120:	a2 fe       	sbrs	r10, 2
    1122:	16 c0       	rjmp	.+44     	; 0x1150 <vfprintf+0x386>
    1124:	a1 fc       	sbrc	r10, 1
    1126:	03 c0       	rjmp	.+6      	; 0x112e <vfprintf+0x364>
    1128:	88 e7       	ldi	r24, 0x78	; 120
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <vfprintf+0x368>
    112e:	88 e5       	ldi	r24, 0x58	; 88
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	b6 01       	movw	r22, r12
    1134:	0c c0       	rjmp	.+24     	; 0x114e <vfprintf+0x384>
    1136:	8a 2d       	mov	r24, r10
    1138:	86 78       	andi	r24, 0x86	; 134
    113a:	51 f0       	breq	.+20     	; 0x1150 <vfprintf+0x386>
    113c:	a1 fe       	sbrs	r10, 1
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <vfprintf+0x37a>
    1140:	8b e2       	ldi	r24, 0x2B	; 43
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <vfprintf+0x37c>
    1144:	80 e2       	ldi	r24, 0x20	; 32
    1146:	a7 fc       	sbrc	r10, 7
    1148:	8d e2       	ldi	r24, 0x2D	; 45
    114a:	b6 01       	movw	r22, r12
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	92 d1       	rcall	.+804    	; 0x1474 <fputc>
    1150:	89 14       	cp	r8, r9
    1152:	30 f4       	brcc	.+12     	; 0x1160 <vfprintf+0x396>
    1154:	b6 01       	movw	r22, r12
    1156:	80 e3       	ldi	r24, 0x30	; 48
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	8c d1       	rcall	.+792    	; 0x1474 <fputc>
    115c:	9a 94       	dec	r9
    115e:	f8 cf       	rjmp	.-16     	; 0x1150 <vfprintf+0x386>
    1160:	8a 94       	dec	r8
    1162:	f3 01       	movw	r30, r6
    1164:	e8 0d       	add	r30, r8
    1166:	f1 1d       	adc	r31, r1
    1168:	80 81       	ld	r24, Z
    116a:	b6 01       	movw	r22, r12
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	82 d1       	rcall	.+772    	; 0x1474 <fputc>
    1170:	81 10       	cpse	r8, r1
    1172:	f6 cf       	rjmp	.-20     	; 0x1160 <vfprintf+0x396>
    1174:	22 20       	and	r2, r2
    1176:	09 f4       	brne	.+2      	; 0x117a <vfprintf+0x3b0>
    1178:	4e ce       	rjmp	.-868    	; 0xe16 <vfprintf+0x4c>
    117a:	b6 01       	movw	r22, r12
    117c:	80 e2       	ldi	r24, 0x20	; 32
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	79 d1       	rcall	.+754    	; 0x1474 <fputc>
    1182:	2a 94       	dec	r2
    1184:	f7 cf       	rjmp	.-18     	; 0x1174 <vfprintf+0x3aa>
    1186:	f6 01       	movw	r30, r12
    1188:	86 81       	ldd	r24, Z+6	; 0x06
    118a:	97 81       	ldd	r25, Z+7	; 0x07
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <vfprintf+0x3c8>
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	2b 96       	adiw	r28, 0x0b	; 11
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	7f 90       	pop	r7
    11b8:	6f 90       	pop	r6
    11ba:	5f 90       	pop	r5
    11bc:	4f 90       	pop	r4
    11be:	3f 90       	pop	r3
    11c0:	2f 90       	pop	r2
    11c2:	08 95       	ret

000011c4 <calloc>:
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	86 9f       	mul	r24, r22
    11ce:	80 01       	movw	r16, r0
    11d0:	87 9f       	mul	r24, r23
    11d2:	10 0d       	add	r17, r0
    11d4:	96 9f       	mul	r25, r22
    11d6:	10 0d       	add	r17, r0
    11d8:	11 24       	eor	r1, r1
    11da:	c8 01       	movw	r24, r16
    11dc:	0d d0       	rcall	.+26     	; 0x11f8 <malloc>
    11de:	ec 01       	movw	r28, r24
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	21 f0       	breq	.+8      	; 0x11ec <calloc+0x28>
    11e4:	a8 01       	movw	r20, r16
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	32 d1       	rcall	.+612    	; 0x1450 <memset>
    11ec:	ce 01       	movw	r24, r28
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <malloc>:
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	91 05       	cpc	r25, r1
    1204:	10 f4       	brcc	.+4      	; 0x120a <malloc+0x12>
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <__flp>
    120e:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <__flp+0x1>
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	30 97       	sbiw	r30, 0x00	; 0
    121c:	19 f1       	breq	.+70     	; 0x1264 <malloc+0x6c>
    121e:	40 81       	ld	r20, Z
    1220:	51 81       	ldd	r21, Z+1	; 0x01
    1222:	02 81       	ldd	r16, Z+2	; 0x02
    1224:	13 81       	ldd	r17, Z+3	; 0x03
    1226:	48 17       	cp	r20, r24
    1228:	59 07       	cpc	r21, r25
    122a:	c8 f0       	brcs	.+50     	; 0x125e <malloc+0x66>
    122c:	84 17       	cp	r24, r20
    122e:	95 07       	cpc	r25, r21
    1230:	69 f4       	brne	.+26     	; 0x124c <malloc+0x54>
    1232:	10 97       	sbiw	r26, 0x00	; 0
    1234:	31 f0       	breq	.+12     	; 0x1242 <malloc+0x4a>
    1236:	12 96       	adiw	r26, 0x02	; 2
    1238:	0c 93       	st	X, r16
    123a:	12 97       	sbiw	r26, 0x02	; 2
    123c:	13 96       	adiw	r26, 0x03	; 3
    123e:	1c 93       	st	X, r17
    1240:	27 c0       	rjmp	.+78     	; 0x1290 <malloc+0x98>
    1242:	00 93 8f 03 	sts	0x038F, r16	; 0x80038f <__flp>
    1246:	10 93 90 03 	sts	0x0390, r17	; 0x800390 <__flp+0x1>
    124a:	22 c0       	rjmp	.+68     	; 0x1290 <malloc+0x98>
    124c:	21 15       	cp	r18, r1
    124e:	31 05       	cpc	r19, r1
    1250:	19 f0       	breq	.+6      	; 0x1258 <malloc+0x60>
    1252:	42 17       	cp	r20, r18
    1254:	53 07       	cpc	r21, r19
    1256:	18 f4       	brcc	.+6      	; 0x125e <malloc+0x66>
    1258:	9a 01       	movw	r18, r20
    125a:	bd 01       	movw	r22, r26
    125c:	ef 01       	movw	r28, r30
    125e:	df 01       	movw	r26, r30
    1260:	f8 01       	movw	r30, r16
    1262:	db cf       	rjmp	.-74     	; 0x121a <malloc+0x22>
    1264:	21 15       	cp	r18, r1
    1266:	31 05       	cpc	r19, r1
    1268:	f9 f0       	breq	.+62     	; 0x12a8 <malloc+0xb0>
    126a:	28 1b       	sub	r18, r24
    126c:	39 0b       	sbc	r19, r25
    126e:	24 30       	cpi	r18, 0x04	; 4
    1270:	31 05       	cpc	r19, r1
    1272:	80 f4       	brcc	.+32     	; 0x1294 <malloc+0x9c>
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	9b 81       	ldd	r25, Y+3	; 0x03
    1278:	61 15       	cp	r22, r1
    127a:	71 05       	cpc	r23, r1
    127c:	21 f0       	breq	.+8      	; 0x1286 <malloc+0x8e>
    127e:	fb 01       	movw	r30, r22
    1280:	93 83       	std	Z+3, r25	; 0x03
    1282:	82 83       	std	Z+2, r24	; 0x02
    1284:	04 c0       	rjmp	.+8      	; 0x128e <malloc+0x96>
    1286:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <__flp+0x1>
    128a:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <__flp>
    128e:	fe 01       	movw	r30, r28
    1290:	32 96       	adiw	r30, 0x02	; 2
    1292:	44 c0       	rjmp	.+136    	; 0x131c <malloc+0x124>
    1294:	fe 01       	movw	r30, r28
    1296:	e2 0f       	add	r30, r18
    1298:	f3 1f       	adc	r31, r19
    129a:	81 93       	st	Z+, r24
    129c:	91 93       	st	Z+, r25
    129e:	22 50       	subi	r18, 0x02	; 2
    12a0:	31 09       	sbc	r19, r1
    12a2:	39 83       	std	Y+1, r19	; 0x01
    12a4:	28 83       	st	Y, r18
    12a6:	3a c0       	rjmp	.+116    	; 0x131c <malloc+0x124>
    12a8:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <__brkval>
    12ac:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <__brkval+0x1>
    12b0:	23 2b       	or	r18, r19
    12b2:	41 f4       	brne	.+16     	; 0x12c4 <malloc+0xcc>
    12b4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    12b8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    12bc:	30 93 8e 03 	sts	0x038E, r19	; 0x80038e <__brkval+0x1>
    12c0:	20 93 8d 03 	sts	0x038D, r18	; 0x80038d <__brkval>
    12c4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    12c8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    12cc:	21 15       	cp	r18, r1
    12ce:	31 05       	cpc	r19, r1
    12d0:	41 f4       	brne	.+16     	; 0x12e2 <malloc+0xea>
    12d2:	2d b7       	in	r18, 0x3d	; 61
    12d4:	3e b7       	in	r19, 0x3e	; 62
    12d6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    12da:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    12de:	24 1b       	sub	r18, r20
    12e0:	35 0b       	sbc	r19, r21
    12e2:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <__brkval>
    12e6:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <__brkval+0x1>
    12ea:	e2 17       	cp	r30, r18
    12ec:	f3 07       	cpc	r31, r19
    12ee:	a0 f4       	brcc	.+40     	; 0x1318 <malloc+0x120>
    12f0:	2e 1b       	sub	r18, r30
    12f2:	3f 0b       	sbc	r19, r31
    12f4:	28 17       	cp	r18, r24
    12f6:	39 07       	cpc	r19, r25
    12f8:	78 f0       	brcs	.+30     	; 0x1318 <malloc+0x120>
    12fa:	ac 01       	movw	r20, r24
    12fc:	4e 5f       	subi	r20, 0xFE	; 254
    12fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1300:	24 17       	cp	r18, r20
    1302:	35 07       	cpc	r19, r21
    1304:	48 f0       	brcs	.+18     	; 0x1318 <malloc+0x120>
    1306:	4e 0f       	add	r20, r30
    1308:	5f 1f       	adc	r21, r31
    130a:	50 93 8e 03 	sts	0x038E, r21	; 0x80038e <__brkval+0x1>
    130e:	40 93 8d 03 	sts	0x038D, r20	; 0x80038d <__brkval>
    1312:	81 93       	st	Z+, r24
    1314:	91 93       	st	Z+, r25
    1316:	02 c0       	rjmp	.+4      	; 0x131c <malloc+0x124>
    1318:	e0 e0       	ldi	r30, 0x00	; 0
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	cf 01       	movw	r24, r30
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	08 95       	ret

00001328 <free>:
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	09 f4       	brne	.+2      	; 0x1332 <free+0xa>
    1330:	81 c0       	rjmp	.+258    	; 0x1434 <free+0x10c>
    1332:	fc 01       	movw	r30, r24
    1334:	32 97       	sbiw	r30, 0x02	; 2
    1336:	13 82       	std	Z+3, r1	; 0x03
    1338:	12 82       	std	Z+2, r1	; 0x02
    133a:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <__flp>
    133e:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <__flp+0x1>
    1342:	10 97       	sbiw	r26, 0x00	; 0
    1344:	81 f4       	brne	.+32     	; 0x1366 <free+0x3e>
    1346:	20 81       	ld	r18, Z
    1348:	31 81       	ldd	r19, Z+1	; 0x01
    134a:	82 0f       	add	r24, r18
    134c:	93 1f       	adc	r25, r19
    134e:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <__brkval>
    1352:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <__brkval+0x1>
    1356:	28 17       	cp	r18, r24
    1358:	39 07       	cpc	r19, r25
    135a:	51 f5       	brne	.+84     	; 0x13b0 <free+0x88>
    135c:	f0 93 8e 03 	sts	0x038E, r31	; 0x80038e <__brkval+0x1>
    1360:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <__brkval>
    1364:	67 c0       	rjmp	.+206    	; 0x1434 <free+0x10c>
    1366:	ed 01       	movw	r28, r26
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	ce 17       	cp	r28, r30
    136e:	df 07       	cpc	r29, r31
    1370:	40 f4       	brcc	.+16     	; 0x1382 <free+0x5a>
    1372:	4a 81       	ldd	r20, Y+2	; 0x02
    1374:	5b 81       	ldd	r21, Y+3	; 0x03
    1376:	9e 01       	movw	r18, r28
    1378:	41 15       	cp	r20, r1
    137a:	51 05       	cpc	r21, r1
    137c:	f1 f0       	breq	.+60     	; 0x13ba <free+0x92>
    137e:	ea 01       	movw	r28, r20
    1380:	f5 cf       	rjmp	.-22     	; 0x136c <free+0x44>
    1382:	d3 83       	std	Z+3, r29	; 0x03
    1384:	c2 83       	std	Z+2, r28	; 0x02
    1386:	40 81       	ld	r20, Z
    1388:	51 81       	ldd	r21, Z+1	; 0x01
    138a:	84 0f       	add	r24, r20
    138c:	95 1f       	adc	r25, r21
    138e:	c8 17       	cp	r28, r24
    1390:	d9 07       	cpc	r29, r25
    1392:	59 f4       	brne	.+22     	; 0x13aa <free+0x82>
    1394:	88 81       	ld	r24, Y
    1396:	99 81       	ldd	r25, Y+1	; 0x01
    1398:	84 0f       	add	r24, r20
    139a:	95 1f       	adc	r25, r21
    139c:	02 96       	adiw	r24, 0x02	; 2
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	9b 81       	ldd	r25, Y+3	; 0x03
    13a6:	93 83       	std	Z+3, r25	; 0x03
    13a8:	82 83       	std	Z+2, r24	; 0x02
    13aa:	21 15       	cp	r18, r1
    13ac:	31 05       	cpc	r19, r1
    13ae:	29 f4       	brne	.+10     	; 0x13ba <free+0x92>
    13b0:	f0 93 90 03 	sts	0x0390, r31	; 0x800390 <__flp+0x1>
    13b4:	e0 93 8f 03 	sts	0x038F, r30	; 0x80038f <__flp>
    13b8:	3d c0       	rjmp	.+122    	; 0x1434 <free+0x10c>
    13ba:	e9 01       	movw	r28, r18
    13bc:	fb 83       	std	Y+3, r31	; 0x03
    13be:	ea 83       	std	Y+2, r30	; 0x02
    13c0:	49 91       	ld	r20, Y+
    13c2:	59 91       	ld	r21, Y+
    13c4:	c4 0f       	add	r28, r20
    13c6:	d5 1f       	adc	r29, r21
    13c8:	ec 17       	cp	r30, r28
    13ca:	fd 07       	cpc	r31, r29
    13cc:	61 f4       	brne	.+24     	; 0x13e6 <free+0xbe>
    13ce:	80 81       	ld	r24, Z
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
    13d2:	84 0f       	add	r24, r20
    13d4:	95 1f       	adc	r25, r21
    13d6:	02 96       	adiw	r24, 0x02	; 2
    13d8:	e9 01       	movw	r28, r18
    13da:	99 83       	std	Y+1, r25	; 0x01
    13dc:	88 83       	st	Y, r24
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	9b 83       	std	Y+3, r25	; 0x03
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	e0 e0       	ldi	r30, 0x00	; 0
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	12 96       	adiw	r26, 0x02	; 2
    13ec:	8d 91       	ld	r24, X+
    13ee:	9c 91       	ld	r25, X
    13f0:	13 97       	sbiw	r26, 0x03	; 3
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	19 f0       	breq	.+6      	; 0x13fc <free+0xd4>
    13f6:	fd 01       	movw	r30, r26
    13f8:	dc 01       	movw	r26, r24
    13fa:	f7 cf       	rjmp	.-18     	; 0x13ea <free+0xc2>
    13fc:	8d 91       	ld	r24, X+
    13fe:	9c 91       	ld	r25, X
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	9d 01       	movw	r18, r26
    1404:	2e 5f       	subi	r18, 0xFE	; 254
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <__brkval>
    1410:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <__brkval+0x1>
    1414:	28 17       	cp	r18, r24
    1416:	39 07       	cpc	r19, r25
    1418:	69 f4       	brne	.+26     	; 0x1434 <free+0x10c>
    141a:	30 97       	sbiw	r30, 0x00	; 0
    141c:	29 f4       	brne	.+10     	; 0x1428 <free+0x100>
    141e:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <__flp+0x1>
    1422:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <__flp>
    1426:	02 c0       	rjmp	.+4      	; 0x142c <free+0x104>
    1428:	13 82       	std	Z+3, r1	; 0x03
    142a:	12 82       	std	Z+2, r1	; 0x02
    142c:	b0 93 8e 03 	sts	0x038E, r27	; 0x80038e <__brkval+0x1>
    1430:	a0 93 8d 03 	sts	0x038D, r26	; 0x80038d <__brkval>
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <strnlen_P>:
    143a:	fc 01       	movw	r30, r24
    143c:	05 90       	lpm	r0, Z+
    143e:	61 50       	subi	r22, 0x01	; 1
    1440:	70 40       	sbci	r23, 0x00	; 0
    1442:	01 10       	cpse	r0, r1
    1444:	d8 f7       	brcc	.-10     	; 0x143c <strnlen_P+0x2>
    1446:	80 95       	com	r24
    1448:	90 95       	com	r25
    144a:	8e 0f       	add	r24, r30
    144c:	9f 1f       	adc	r25, r31
    144e:	08 95       	ret

00001450 <memset>:
    1450:	dc 01       	movw	r26, r24
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <memset+0x6>
    1454:	6d 93       	st	X+, r22
    1456:	41 50       	subi	r20, 0x01	; 1
    1458:	50 40       	sbci	r21, 0x00	; 0
    145a:	e0 f7       	brcc	.-8      	; 0x1454 <memset+0x4>
    145c:	08 95       	ret

0000145e <strnlen>:
    145e:	fc 01       	movw	r30, r24
    1460:	61 50       	subi	r22, 0x01	; 1
    1462:	70 40       	sbci	r23, 0x00	; 0
    1464:	01 90       	ld	r0, Z+
    1466:	01 10       	cpse	r0, r1
    1468:	d8 f7       	brcc	.-10     	; 0x1460 <strnlen+0x2>
    146a:	80 95       	com	r24
    146c:	90 95       	com	r25
    146e:	8e 0f       	add	r24, r30
    1470:	9f 1f       	adc	r25, r31
    1472:	08 95       	ret

00001474 <fputc>:
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	fb 01       	movw	r30, r22
    147e:	23 81       	ldd	r18, Z+3	; 0x03
    1480:	21 fd       	sbrc	r18, 1
    1482:	03 c0       	rjmp	.+6      	; 0x148a <fputc+0x16>
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	9f ef       	ldi	r25, 0xFF	; 255
    1488:	2c c0       	rjmp	.+88     	; 0x14e2 <fputc+0x6e>
    148a:	22 ff       	sbrs	r18, 2
    148c:	16 c0       	rjmp	.+44     	; 0x14ba <fputc+0x46>
    148e:	46 81       	ldd	r20, Z+6	; 0x06
    1490:	57 81       	ldd	r21, Z+7	; 0x07
    1492:	24 81       	ldd	r18, Z+4	; 0x04
    1494:	35 81       	ldd	r19, Z+5	; 0x05
    1496:	42 17       	cp	r20, r18
    1498:	53 07       	cpc	r21, r19
    149a:	44 f4       	brge	.+16     	; 0x14ac <fputc+0x38>
    149c:	a0 81       	ld	r26, Z
    149e:	b1 81       	ldd	r27, Z+1	; 0x01
    14a0:	9d 01       	movw	r18, r26
    14a2:	2f 5f       	subi	r18, 0xFF	; 255
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	31 83       	std	Z+1, r19	; 0x01
    14a8:	20 83       	st	Z, r18
    14aa:	8c 93       	st	X, r24
    14ac:	26 81       	ldd	r18, Z+6	; 0x06
    14ae:	37 81       	ldd	r19, Z+7	; 0x07
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	37 83       	std	Z+7, r19	; 0x07
    14b6:	26 83       	std	Z+6, r18	; 0x06
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <fputc+0x6e>
    14ba:	8b 01       	movw	r16, r22
    14bc:	ec 01       	movw	r28, r24
    14be:	fb 01       	movw	r30, r22
    14c0:	00 84       	ldd	r0, Z+8	; 0x08
    14c2:	f1 85       	ldd	r31, Z+9	; 0x09
    14c4:	e0 2d       	mov	r30, r0
    14c6:	19 95       	eicall
    14c8:	89 2b       	or	r24, r25
    14ca:	e1 f6       	brne	.-72     	; 0x1484 <fputc+0x10>
    14cc:	d8 01       	movw	r26, r16
    14ce:	16 96       	adiw	r26, 0x06	; 6
    14d0:	8d 91       	ld	r24, X+
    14d2:	9c 91       	ld	r25, X
    14d4:	17 97       	sbiw	r26, 0x07	; 7
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	17 96       	adiw	r26, 0x07	; 7
    14da:	9c 93       	st	X, r25
    14dc:	8e 93       	st	-X, r24
    14de:	16 97       	sbiw	r26, 0x06	; 6
    14e0:	ce 01       	movw	r24, r28
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <__ultoa_invert>:
    14ec:	fa 01       	movw	r30, r20
    14ee:	aa 27       	eor	r26, r26
    14f0:	28 30       	cpi	r18, 0x08	; 8
    14f2:	51 f1       	breq	.+84     	; 0x1548 <__ultoa_invert+0x5c>
    14f4:	20 31       	cpi	r18, 0x10	; 16
    14f6:	81 f1       	breq	.+96     	; 0x1558 <__ultoa_invert+0x6c>
    14f8:	e8 94       	clt
    14fa:	6f 93       	push	r22
    14fc:	6e 7f       	andi	r22, 0xFE	; 254
    14fe:	6e 5f       	subi	r22, 0xFE	; 254
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	af 4f       	sbci	r26, 0xFF	; 255
    1508:	b1 e0       	ldi	r27, 0x01	; 1
    150a:	3e d0       	rcall	.+124    	; 0x1588 <__ultoa_invert+0x9c>
    150c:	b4 e0       	ldi	r27, 0x04	; 4
    150e:	3c d0       	rcall	.+120    	; 0x1588 <__ultoa_invert+0x9c>
    1510:	67 0f       	add	r22, r23
    1512:	78 1f       	adc	r23, r24
    1514:	89 1f       	adc	r24, r25
    1516:	9a 1f       	adc	r25, r26
    1518:	a1 1d       	adc	r26, r1
    151a:	68 0f       	add	r22, r24
    151c:	79 1f       	adc	r23, r25
    151e:	8a 1f       	adc	r24, r26
    1520:	91 1d       	adc	r25, r1
    1522:	a1 1d       	adc	r26, r1
    1524:	6a 0f       	add	r22, r26
    1526:	71 1d       	adc	r23, r1
    1528:	81 1d       	adc	r24, r1
    152a:	91 1d       	adc	r25, r1
    152c:	a1 1d       	adc	r26, r1
    152e:	20 d0       	rcall	.+64     	; 0x1570 <__ultoa_invert+0x84>
    1530:	09 f4       	brne	.+2      	; 0x1534 <__ultoa_invert+0x48>
    1532:	68 94       	set
    1534:	3f 91       	pop	r19
    1536:	2a e0       	ldi	r18, 0x0A	; 10
    1538:	26 9f       	mul	r18, r22
    153a:	11 24       	eor	r1, r1
    153c:	30 19       	sub	r19, r0
    153e:	30 5d       	subi	r19, 0xD0	; 208
    1540:	31 93       	st	Z+, r19
    1542:	de f6       	brtc	.-74     	; 0x14fa <__ultoa_invert+0xe>
    1544:	cf 01       	movw	r24, r30
    1546:	08 95       	ret
    1548:	46 2f       	mov	r20, r22
    154a:	47 70       	andi	r20, 0x07	; 7
    154c:	40 5d       	subi	r20, 0xD0	; 208
    154e:	41 93       	st	Z+, r20
    1550:	b3 e0       	ldi	r27, 0x03	; 3
    1552:	0f d0       	rcall	.+30     	; 0x1572 <__ultoa_invert+0x86>
    1554:	c9 f7       	brne	.-14     	; 0x1548 <__ultoa_invert+0x5c>
    1556:	f6 cf       	rjmp	.-20     	; 0x1544 <__ultoa_invert+0x58>
    1558:	46 2f       	mov	r20, r22
    155a:	4f 70       	andi	r20, 0x0F	; 15
    155c:	40 5d       	subi	r20, 0xD0	; 208
    155e:	4a 33       	cpi	r20, 0x3A	; 58
    1560:	18 f0       	brcs	.+6      	; 0x1568 <__ultoa_invert+0x7c>
    1562:	49 5d       	subi	r20, 0xD9	; 217
    1564:	31 fd       	sbrc	r19, 1
    1566:	40 52       	subi	r20, 0x20	; 32
    1568:	41 93       	st	Z+, r20
    156a:	02 d0       	rcall	.+4      	; 0x1570 <__ultoa_invert+0x84>
    156c:	a9 f7       	brne	.-22     	; 0x1558 <__ultoa_invert+0x6c>
    156e:	ea cf       	rjmp	.-44     	; 0x1544 <__ultoa_invert+0x58>
    1570:	b4 e0       	ldi	r27, 0x04	; 4
    1572:	a6 95       	lsr	r26
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	ba 95       	dec	r27
    157e:	c9 f7       	brne	.-14     	; 0x1572 <__ultoa_invert+0x86>
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	61 05       	cpc	r22, r1
    1584:	71 05       	cpc	r23, r1
    1586:	08 95       	ret
    1588:	9b 01       	movw	r18, r22
    158a:	ac 01       	movw	r20, r24
    158c:	0a 2e       	mov	r0, r26
    158e:	06 94       	lsr	r0
    1590:	57 95       	ror	r21
    1592:	47 95       	ror	r20
    1594:	37 95       	ror	r19
    1596:	27 95       	ror	r18
    1598:	ba 95       	dec	r27
    159a:	c9 f7       	brne	.-14     	; 0x158e <__ultoa_invert+0xa2>
    159c:	62 0f       	add	r22, r18
    159e:	73 1f       	adc	r23, r19
    15a0:	84 1f       	adc	r24, r20
    15a2:	95 1f       	adc	r25, r21
    15a4:	a0 1d       	adc	r26, r0
    15a6:	08 95       	ret

000015a8 <_exit>:
    15a8:	f8 94       	cli

000015aa <__stop_program>:
    15aa:	ff cf       	rjmp	.-2      	; 0x15aa <__stop_program>
